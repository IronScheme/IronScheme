;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$list-tail$4921$jXZPP
     g$list-tail$5058$jXZPP
     (case-lambda
       ((g$lst$4949$jXZPP g$index$4950$jXZPP)
        (if ((case-lambda
               ((g$t$4951$jXZPP)
                (if g$t$4951$jXZPP
                  g$t$4951$jXZPP
                  (begin '#f (g$negative?$5332$jXZPP g$index$4950$jXZPP)))))
             (null? g$lst$4949$jXZPP))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$4949$jXZPP
            g$index$4950$jXZPP)
          (if (g$zero?$5333$jXZPP g$index$4950$jXZPP)
            g$lst$4949$jXZPP
            (g$list-tail$4921$jXZPP
              (cdr g$lst$4949$jXZPP)
              (- g$index$4950$jXZPP '1)))))))
   (g$list-ref$4922$jXZPP
     g$list-ref$5059$jXZPP
     (case-lambda
       ((g$lst$4952$jXZPP g$index$4953$jXZPP)
        (car (g$list-tail$4921$jXZPP g$lst$4952$jXZPP g$index$4953$jXZPP)))))
   (g$last-pair$4923$jXZPP
     g$last-pair$5060$jXZPP
     (case-lambda
       ((g$lst$4954$jXZPP)
        (if (null? g$lst$4954$jXZPP)
          g$lst$4954$jXZPP
          (if (null? (cdr g$lst$4954$jXZPP))
            g$lst$4954$jXZPP
            (g$last-pair$4923$jXZPP (cdr g$lst$4954$jXZPP)))))))
   (g$make-list$4924$jXZPP
     g$make-list$5061$jXZPP
     (case-lambda
       ((g$n$4955$jXZPP) (list->vector (make-vector g$n$4955$jXZPP)))
       ((g$n$4956$jXZPP g$fill$4957$jXZPP)
        (list->vector (make-vector g$n$4956$jXZPP g$fill$4957$jXZPP)))))
   (g$find$4925$jXZPP
     g$find$5062$jXZPP
     (case-lambda
       ((g$proc$4958$jXZPP g$l$4959$jXZPP)
        (if (null? g$l$4959$jXZPP)
          '#f
          ((case-lambda
             ((g$e$4960$jXZPP g$r$4961$jXZPP g$proc$4962$jXZPP)
              (if (g$proc$4962$jXZPP g$e$4960$jXZPP)
                g$e$4960$jXZPP
                (g$find$4925$jXZPP g$proc$4962$jXZPP g$r$4961$jXZPP))))
           (car g$l$4959$jXZPP)
           (cdr g$l$4959$jXZPP)
           g$proc$4958$jXZPP)))))
   (g$partition$4926$jXZPP
     g$partition$5063$jXZPP
     (case-lambda
       ((g$proc$4963$jXZPP g$l$4964$jXZPP)
        ((letrec ((g$f$4965$jXZPP
                    (case-lambda
                      ((g$l$4966$jXZPP g$a$4967$jXZPP g$b$4968$jXZPP)
                       (if (null? g$l$4966$jXZPP)
                         (values
                           (reverse! g$a$4967$jXZPP)
                           (reverse! g$b$4968$jXZPP))
                         ((case-lambda
                            ((g$e$4969$jXZPP)
                             (if (g$proc$4963$jXZPP g$e$4969$jXZPP)
                               (g$f$4965$jXZPP
                                 (cdr g$l$4966$jXZPP)
                                 (cons g$e$4969$jXZPP g$a$4967$jXZPP)
                                 g$b$4968$jXZPP)
                               (g$f$4965$jXZPP
                                 (cdr g$l$4966$jXZPP)
                                 g$a$4967$jXZPP
                                 (cons g$e$4969$jXZPP g$b$4968$jXZPP)))))
                          (car g$l$4966$jXZPP)))))))
           g$f$4965$jXZPP)
         g$l$4964$jXZPP
         '()
         '()))))
   (g$remp$4927$jXZPP
     g$remp$5064$jXZPP
     (case-lambda
       ((g$proc$4970$jXZPP g$l$4971$jXZPP)
        ((letrec ((g$f$4972$jXZPP
                    (case-lambda
                      ((g$l$4973$jXZPP g$a$4974$jXZPP)
                       (if (null? g$l$4973$jXZPP)
                         (reverse! g$a$4974$jXZPP)
                         ((case-lambda
                            ((g$e$4975$jXZPP)
                             (if (g$proc$4970$jXZPP g$e$4975$jXZPP)
                               (g$f$4972$jXZPP
                                 (cdr g$l$4973$jXZPP)
                                 g$a$4974$jXZPP)
                               (g$f$4972$jXZPP
                                 (cdr g$l$4973$jXZPP)
                                 (cons g$e$4975$jXZPP g$a$4974$jXZPP)))))
                          (car g$l$4973$jXZPP)))))))
           g$f$4972$jXZPP)
         g$l$4971$jXZPP
         '()))))
   (g$filter$4928$jXZPP
     g$filter$5065$jXZPP
     (case-lambda
       ((g$proc$4976$jXZPP g$l$4977$jXZPP)
        ((letrec ((g$f$4978$jXZPP
                    (case-lambda
                      ((g$l$4979$jXZPP g$a$4980$jXZPP)
                       (if (null? g$l$4979$jXZPP)
                         (reverse! g$a$4980$jXZPP)
                         ((case-lambda
                            ((g$e$4981$jXZPP)
                             (if (g$proc$4976$jXZPP g$e$4981$jXZPP)
                               (g$f$4978$jXZPP
                                 (cdr g$l$4979$jXZPP)
                                 (cons g$e$4981$jXZPP g$a$4980$jXZPP))
                               (g$f$4978$jXZPP
                                 (cdr g$l$4979$jXZPP)
                                 g$a$4980$jXZPP))))
                          (car g$l$4979$jXZPP)))))))
           g$f$4978$jXZPP)
         g$l$4977$jXZPP
         '()))))
   (g$assq$4929$jXZPP
     g$assq$5066$jXZPP
     (case-lambda
       ((g$obj$4982$jXZPP g$lst$4983$jXZPP)
        (if (null? g$lst$4983$jXZPP)
          '#f
          ((case-lambda
             ((g$obj$4984$jXZPP g$t$4985$jXZPP g$r$4986$jXZPP)
              (if (eq? g$obj$4984$jXZPP (car g$t$4985$jXZPP))
                g$t$4985$jXZPP
                (g$assq$4929$jXZPP g$obj$4984$jXZPP g$r$4986$jXZPP))))
           g$obj$4982$jXZPP
           (car g$lst$4983$jXZPP)
           (cdr g$lst$4983$jXZPP))))))
   (g$assv$4930$jXZPP
     g$assv$5067$jXZPP
     (case-lambda
       ((g$obj$4987$jXZPP g$lst$4988$jXZPP)
        (if (null? g$lst$4988$jXZPP)
          '#f
          ((case-lambda
             ((g$obj$4989$jXZPP g$t$4990$jXZPP g$r$4991$jXZPP)
              (if (eqv? g$obj$4989$jXZPP (car g$t$4990$jXZPP))
                g$t$4990$jXZPP
                (g$assv$4930$jXZPP g$obj$4989$jXZPP g$r$4991$jXZPP))))
           g$obj$4987$jXZPP
           (car g$lst$4988$jXZPP)
           (cdr g$lst$4988$jXZPP))))))
   (g$assoc$4931$jXZPP
     g$assoc$5068$jXZPP
     (case-lambda
       ((g$obj$4992$jXZPP g$lst$4993$jXZPP)
        (if (null? g$lst$4993$jXZPP)
          '#f
          ((case-lambda
             ((g$obj$4994$jXZPP g$t$4995$jXZPP g$r$4996$jXZPP)
              (if (equal? g$obj$4994$jXZPP (car g$t$4995$jXZPP))
                g$t$4995$jXZPP
                (g$assoc$4931$jXZPP g$obj$4994$jXZPP g$r$4996$jXZPP))))
           g$obj$4992$jXZPP
           (car g$lst$4993$jXZPP)
           (cdr g$lst$4993$jXZPP))))))
   (g$assp$4932$jXZPP
     g$assp$5069$jXZPP
     (case-lambda
       ((g$p?$4997$jXZPP g$lst$4998$jXZPP)
        (if (null? g$lst$4998$jXZPP)
          '#f
          ((case-lambda
             ((g$p?$4999$jXZPP g$t$5000$jXZPP g$r$5001$jXZPP)
              (if (g$p?$4999$jXZPP (car g$t$5000$jXZPP))
                g$t$5000$jXZPP
                (g$assp$4932$jXZPP g$p?$4999$jXZPP g$r$5001$jXZPP))))
           g$p?$4997$jXZPP
           (car g$lst$4998$jXZPP)
           (cdr g$lst$4998$jXZPP))))))
   (g$memq$4933$jXZPP
     g$memq$5070$jXZPP
     (case-lambda
       ((g$obj$5002$jXZPP g$lst$5003$jXZPP)
        (if (null? g$lst$5003$jXZPP)
          '#f
          (if (eq? g$obj$5002$jXZPP (car g$lst$5003$jXZPP))
            g$lst$5003$jXZPP
            (g$memq$4933$jXZPP g$obj$5002$jXZPP (cdr g$lst$5003$jXZPP)))))))
   (g$memv$4934$jXZPP
     g$memv$5071$jXZPP
     (case-lambda
       ((g$obj$5004$jXZPP g$lst$5005$jXZPP)
        (if (null? g$lst$5005$jXZPP)
          '#f
          (if (eqv? g$obj$5004$jXZPP (car g$lst$5005$jXZPP))
            g$lst$5005$jXZPP
            (g$memv$4934$jXZPP g$obj$5004$jXZPP (cdr g$lst$5005$jXZPP)))))))
   (g$member$4935$jXZPP
     g$member$5072$jXZPP
     (case-lambda
       ((g$obj$5006$jXZPP g$lst$5007$jXZPP)
        (if (null? g$lst$5007$jXZPP)
          '#f
          (if (equal? g$obj$5006$jXZPP (car g$lst$5007$jXZPP))
            g$lst$5007$jXZPP
            (g$member$4935$jXZPP g$obj$5006$jXZPP (cdr g$lst$5007$jXZPP)))))))
   (g$memp$4936$jXZPP
     g$memp$5073$jXZPP
     (case-lambda
       ((g$p?$5008$jXZPP g$lst$5009$jXZPP)
        (if (null? g$lst$5009$jXZPP)
          '#f
          (if (g$p?$5008$jXZPP (car g$lst$5009$jXZPP))
            g$lst$5009$jXZPP
            (g$memp$4936$jXZPP g$p?$5008$jXZPP (cdr g$lst$5009$jXZPP)))))))
   (g$all-empty?$4937$jXZPP
     g$all-empty?$5074$jXZPP
     (case-lambda
       ((g$ls$5010$jXZPP)
        ((case-lambda
           ((g$t$5011$jXZPP)
            (if g$t$5011$jXZPP
              g$t$5011$jXZPP
              (begin
                '#f
                (if (null? (car g$ls$5010$jXZPP))
                  (begin '#f (g$all-empty?$4937$jXZPP (cdr g$ls$5010$jXZPP)))
                  '#f)))))
         (null? g$ls$5010$jXZPP)))))
   (g$split$4938$jXZPP
     g$split$5075$jXZPP
     (case-lambda
       ((g$ls$5012$jXZPP)
        (if (null? g$ls$5012$jXZPP)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4938$jXZPP (cdr g$ls$5012$jXZPP))))
            (case-lambda
              ((g$cars$5013$jXZPP g$cdrs$5014$jXZPP)
               ((case-lambda
                  ((g$a$5015$jXZPP)
                   (values
                     (cons (car g$a$5015$jXZPP) g$cars$5013$jXZPP)
                     (cons (cdr g$a$5015$jXZPP) g$cdrs$5014$jXZPP))))
                (car g$ls$5012$jXZPP)))))))))
   (g$for-all$4939$jXZPP
     g$for-all$5076$jXZPP
     (case-lambda
       ((g$f$5016$jXZPP . g$args$5017$jXZPP)
        (if (g$all-empty?$4937$jXZPP g$args$5017$jXZPP)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4938$jXZPP g$args$5017$jXZPP)))
            (case-lambda
              ((g$cars$5018$jXZPP g$cdrs$5019$jXZPP)
               (if (g$all-empty?$4937$jXZPP g$cdrs$5019$jXZPP)
                 (apply g$f$5016$jXZPP g$cars$5018$jXZPP)
                 (if (apply g$f$5016$jXZPP g$cars$5018$jXZPP)
                   (begin
                     '#f
                     (apply
                       g$for-all$4939$jXZPP
                       g$f$5016$jXZPP
                       g$cdrs$5019$jXZPP))
                   '#f)))))))))
   (g$exists$4940$jXZPP
     g$exists$5077$jXZPP
     (case-lambda
       ((g$f$5020$jXZPP . g$args$5021$jXZPP)
        (if (g$all-empty?$4937$jXZPP g$args$5021$jXZPP)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4938$jXZPP g$args$5021$jXZPP)))
            (case-lambda
              ((g$cars$5022$jXZPP g$cdrs$5023$jXZPP)
               ((case-lambda
                  ((g$t$5024$jXZPP)
                   (if g$t$5024$jXZPP
                     g$t$5024$jXZPP
                     (begin
                       '#f
                       (apply
                         g$exists$4940$jXZPP
                         g$f$5020$jXZPP
                         g$cdrs$5023$jXZPP)))))
                (apply g$f$5020$jXZPP g$cars$5022$jXZPP)))))))))
   (g$map$4941$jXZPP
     g$map$5078$jXZPP
     (case-lambda
       ((g$proc$5025$jXZPP . g$lists$5026$jXZPP)
        ((letrec ((g$f$5027$jXZPP
                    (case-lambda
                      ((g$lists$5028$jXZPP g$a$5029$jXZPP)
                       (if (g$all-empty?$4937$jXZPP g$lists$5028$jXZPP)
                         (reverse! g$a$5029$jXZPP)
                         (call-with-values
                           (case-lambda
                             (() (g$split$4938$jXZPP g$lists$5028$jXZPP)))
                           (case-lambda
                             ((g$cars$5030$jXZPP g$cdrs$5031$jXZPP)
                              (g$f$5027$jXZPP
                                g$cdrs$5031$jXZPP
                                (cons
                                  (apply g$proc$5025$jXZPP g$cars$5030$jXZPP)
                                  g$a$5029$jXZPP))))))))))
           g$f$5027$jXZPP)
         g$lists$5026$jXZPP
         '()))))
   (g$for-each$4942$jXZPP
     g$for-each$5079$jXZPP
     (case-lambda
       ((g$f$5032$jXZPP . g$args$5033$jXZPP)
        (if (not (g$all-empty?$4937$jXZPP g$args$5033$jXZPP))
          (call-with-values
            (case-lambda (() (g$split$4938$jXZPP g$args$5033$jXZPP)))
            (case-lambda
              ((g$cars$5034$jXZPP g$cdrs$5035$jXZPP)
               (begin
                 (apply g$f$5032$jXZPP g$cars$5034$jXZPP)
                 (apply
                   g$for-each$4942$jXZPP
                   g$f$5032$jXZPP
                   g$cdrs$5035$jXZPP)))))
          (void)))))
   (g$cons*$4943$jXZPP
     g$cons*$5080$jXZPP
     (case-lambda
       ((g$a$5036$jXZPP . g$rest$5037$jXZPP)
        ((letrec ((g$f$5038$jXZPP
                    (case-lambda
                      ((g$a$5039$jXZPP g$rest$5040$jXZPP)
                       (if (null? g$rest$5040$jXZPP)
                         g$a$5039$jXZPP
                         (cons
                           g$a$5039$jXZPP
                           (g$f$5038$jXZPP
                             (car g$rest$5040$jXZPP)
                             (cdr g$rest$5040$jXZPP))))))))
           g$f$5038$jXZPP)
         g$a$5036$jXZPP
         g$rest$5037$jXZPP))))
   (g$fold-left$4944$jXZPP
     g$fold-left$5081$jXZPP
     (case-lambda
       ((g$combine$5041$jXZPP
          g$nil$5042$jXZPP
          g$list1$5043$jXZPP
          .
          g$lists$5044$jXZPP)
        (if (null? g$list1$5043$jXZPP)
          g$nil$5042$jXZPP
          (apply
            g$fold-left$4944$jXZPP
            (g$cons*$4943$jXZPP
              g$combine$5041$jXZPP
              (apply
                g$combine$5041$jXZPP
                (g$cons*$4943$jXZPP
                  g$nil$5042$jXZPP
                  (car g$list1$5043$jXZPP)
                  (g$map$4941$jXZPP car g$lists$5044$jXZPP)))
              (cdr g$list1$5043$jXZPP)
              (g$map$4941$jXZPP cdr g$lists$5044$jXZPP)))))))
   (g$fold-right$4945$jXZPP
     g$fold-right$5082$jXZPP
     (case-lambda
       ((g$combine$5045$jXZPP
          g$nil$5046$jXZPP
          g$list1$5047$jXZPP
          .
          g$lists$5048$jXZPP)
        (if (null? g$list1$5047$jXZPP)
          g$nil$5046$jXZPP
          (apply
            g$combine$5045$jXZPP
            (append
              (list (car g$list1$5047$jXZPP))
              (g$map$4941$jXZPP car g$lists$5048$jXZPP)
              (list
                (apply
                  g$fold-right$4945$jXZPP
                  (g$cons*$4943$jXZPP
                    g$combine$5045$jXZPP
                    g$nil$5046$jXZPP
                    (cdr g$list1$5047$jXZPP)
                    (g$map$4941$jXZPP cdr g$lists$5048$jXZPP))))))))))
   (g$remove$4946$jXZPP
     g$remove$5083$jXZPP
     (case-lambda
       ((g$obj$5049$jXZPP g$list$5050$jXZPP)
        (g$remp$4927$jXZPP
          (case-lambda
            ((g$x$5051$jXZPP) (equal? g$obj$5049$jXZPP g$x$5051$jXZPP)))
          g$list$5050$jXZPP))))
   (g$remv$4947$jXZPP
     g$remv$5084$jXZPP
     (case-lambda
       ((g$obj$5052$jXZPP g$list$5053$jXZPP)
        (g$remp$4927$jXZPP
          (case-lambda
            ((g$x$5054$jXZPP) (eqv? g$obj$5052$jXZPP g$x$5054$jXZPP)))
          g$list$5053$jXZPP))))
   (g$remq$4948$jXZPP
     g$remq$5085$jXZPP
     (case-lambda
       ((g$obj$5055$jXZPP g$list$5056$jXZPP)
        (g$remp$4927$jXZPP
          (case-lambda ((g$x$5057$jXZPP) (eq? g$obj$5055$jXZPP g$x$5057$jXZPP)))
          g$list$5056$jXZPP)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5086$jXZPP
     g$caar$5303$jXZPP
     (case-lambda ((g$x$5153$jXZPP) (car (car g$x$5153$jXZPP)))))
   (g$cadr$5087$jXZPP
     g$cadr$5304$jXZPP
     (case-lambda ((g$x$5154$jXZPP) (car (cdr g$x$5154$jXZPP)))))
   (g$cdar$5088$jXZPP
     g$cdar$5305$jXZPP
     (case-lambda ((g$x$5155$jXZPP) (cdr (car g$x$5155$jXZPP)))))
   (g$cddr$5089$jXZPP
     g$cddr$5306$jXZPP
     (case-lambda ((g$x$5156$jXZPP) (cdr (cdr g$x$5156$jXZPP)))))
   (g$caaar$5090$jXZPP
     g$caaar$5307$jXZPP
     (case-lambda
       ((g$x$5157$jXZPP) (g$caar$5086$jXZPP (car g$x$5157$jXZPP)))))
   (g$caadr$5091$jXZPP
     g$caadr$5308$jXZPP
     (case-lambda
       ((g$x$5158$jXZPP) (g$caar$5086$jXZPP (cdr g$x$5158$jXZPP)))))
   (g$cadar$5092$jXZPP
     g$cadar$5309$jXZPP
     (case-lambda
       ((g$x$5159$jXZPP) (g$cadr$5087$jXZPP (car g$x$5159$jXZPP)))))
   (g$caddr$5093$jXZPP
     g$caddr$5310$jXZPP
     (case-lambda
       ((g$x$5160$jXZPP) (g$cadr$5087$jXZPP (cdr g$x$5160$jXZPP)))))
   (g$cdaar$5094$jXZPP
     g$cdaar$5311$jXZPP
     (case-lambda
       ((g$x$5161$jXZPP) (g$cdar$5088$jXZPP (car g$x$5161$jXZPP)))))
   (g$cdadr$5095$jXZPP
     g$cdadr$5312$jXZPP
     (case-lambda
       ((g$x$5162$jXZPP) (g$cdar$5088$jXZPP (cdr g$x$5162$jXZPP)))))
   (g$cddar$5096$jXZPP
     g$cddar$5313$jXZPP
     (case-lambda
       ((g$x$5163$jXZPP) (g$cddr$5089$jXZPP (car g$x$5163$jXZPP)))))
   (g$cdddr$5097$jXZPP
     g$cdddr$5314$jXZPP
     (case-lambda
       ((g$x$5164$jXZPP) (g$cddr$5089$jXZPP (cdr g$x$5164$jXZPP)))))
   (g$caaaar$5098$jXZPP
     g$caaaar$5315$jXZPP
     (case-lambda
       ((g$x$5165$jXZPP) (g$caaar$5090$jXZPP (car g$x$5165$jXZPP)))))
   (g$caaadr$5099$jXZPP
     g$caaadr$5316$jXZPP
     (case-lambda
       ((g$x$5166$jXZPP) (g$caaar$5090$jXZPP (cdr g$x$5166$jXZPP)))))
   (g$caadar$5100$jXZPP
     g$caadar$5317$jXZPP
     (case-lambda
       ((g$x$5167$jXZPP) (g$caadr$5091$jXZPP (car g$x$5167$jXZPP)))))
   (g$caaddr$5101$jXZPP
     g$caaddr$5318$jXZPP
     (case-lambda
       ((g$x$5168$jXZPP) (g$caadr$5091$jXZPP (cdr g$x$5168$jXZPP)))))
   (g$cadaar$5102$jXZPP
     g$cadaar$5319$jXZPP
     (case-lambda
       ((g$x$5169$jXZPP) (g$cadar$5092$jXZPP (car g$x$5169$jXZPP)))))
   (g$cadadr$5103$jXZPP
     g$cadadr$5320$jXZPP
     (case-lambda
       ((g$x$5170$jXZPP) (g$cadar$5092$jXZPP (cdr g$x$5170$jXZPP)))))
   (g$caddar$5104$jXZPP
     g$caddar$5321$jXZPP
     (case-lambda
       ((g$x$5171$jXZPP) (g$caddr$5093$jXZPP (car g$x$5171$jXZPP)))))
   (g$cadddr$5105$jXZPP
     g$cadddr$5322$jXZPP
     (case-lambda
       ((g$x$5172$jXZPP) (g$caddr$5093$jXZPP (cdr g$x$5172$jXZPP)))))
   (g$cdaaar$5106$jXZPP
     g$cdaaar$5323$jXZPP
     (case-lambda
       ((g$x$5173$jXZPP) (g$cdaar$5094$jXZPP (car g$x$5173$jXZPP)))))
   (g$cdaadr$5107$jXZPP
     g$cdaadr$5324$jXZPP
     (case-lambda
       ((g$x$5174$jXZPP) (g$cdaar$5094$jXZPP (cdr g$x$5174$jXZPP)))))
   (g$cdadar$5108$jXZPP
     g$cdadar$5325$jXZPP
     (case-lambda
       ((g$x$5175$jXZPP) (g$cdadr$5095$jXZPP (car g$x$5175$jXZPP)))))
   (g$cdaddr$5109$jXZPP
     g$cdaddr$5326$jXZPP
     (case-lambda
       ((g$x$5176$jXZPP) (g$cdadr$5095$jXZPP (cdr g$x$5176$jXZPP)))))
   (g$cddaar$5110$jXZPP
     g$cddaar$5327$jXZPP
     (case-lambda
       ((g$x$5177$jXZPP) (g$cddar$5096$jXZPP (car g$x$5177$jXZPP)))))
   (g$cddadr$5111$jXZPP
     g$cddadr$5328$jXZPP
     (case-lambda
       ((g$x$5178$jXZPP) (g$cddar$5096$jXZPP (cdr g$x$5178$jXZPP)))))
   (g$cdddar$5112$jXZPP
     g$cdddar$5329$jXZPP
     (case-lambda
       ((g$x$5179$jXZPP) (g$cdddr$5097$jXZPP (car g$x$5179$jXZPP)))))
   (g$cddddr$5113$jXZPP
     g$cddddr$5330$jXZPP
     (case-lambda
       ((g$x$5180$jXZPP) (g$cdddr$5097$jXZPP (cdr g$x$5180$jXZPP)))))
   (g$positive?$5114$jXZPP
     g$positive?$5331$jXZPP
     (case-lambda
       ((g$r$5181$jXZPP)
        (begin
          (if (not (real-valued? g$r$5181$jXZPP))
            (assertion-violation 'positive? '"not a real" g$r$5181$jXZPP)
            (void))
          (< '0 g$r$5181$jXZPP)))))
   (g$negative?$5115$jXZPP
     g$negative?$5332$jXZPP
     (case-lambda
       ((g$r$5182$jXZPP)
        (begin
          (if (not (real-valued? g$r$5182$jXZPP))
            (assertion-violation 'negative? '"not a real" g$r$5182$jXZPP)
            (void))
          (> '0 g$r$5182$jXZPP)))))
   (g$zero?$5116$jXZPP
     g$zero?$5333$jXZPP
     (case-lambda
       ((g$r$5183$jXZPP)
        (begin
          (if (not (real-valued? g$r$5183$jXZPP))
            (assertion-violation 'zero? '"not a real" g$r$5183$jXZPP)
            (void))
          (= '0 g$r$5183$jXZPP)))))
   (g$even?$5117$jXZPP
     g$even?$5334$jXZPP
     (case-lambda
       ((g$n$5184$jXZPP)
        (begin
          (if (not (integer-valued? g$n$5184$jXZPP))
            (assertion-violation 'even? '"not a integer" g$n$5184$jXZPP)
            (void))
          (= '0 (mod g$n$5184$jXZPP '2))))))
   (g$odd?$5118$jXZPP
     g$odd?$5335$jXZPP
     (case-lambda
       ((g$n$5185$jXZPP)
        (begin
          (if (not (integer-valued? g$n$5185$jXZPP))
            (assertion-violation 'odd? '"not a integer" g$n$5185$jXZPP)
            (void))
          (= '1 (mod g$n$5185$jXZPP '2))))))
   (g$max$5119$jXZPP
     g$max$5336$jXZPP
     (case-lambda
       ((g$a$5186$jXZPP . g$rest$5187$jXZPP)
        (g$fold-left$5081$jXZPP
          (case-lambda
            ((g$a$5188$jXZPP g$b$5189$jXZPP)
             ((case-lambda
                ((g$r$5190$jXZPP)
                 (if ((case-lambda
                        ((g$t$5191$jXZPP)
                         (if g$t$5191$jXZPP
                           g$t$5191$jXZPP
                           (begin '#f (inexact? g$b$5189$jXZPP)))))
                      (inexact? g$a$5188$jXZPP))
                   (inexact g$r$5190$jXZPP)
                   g$r$5190$jXZPP)))
              (if (< g$a$5188$jXZPP g$b$5189$jXZPP)
                g$b$5189$jXZPP
                g$a$5188$jXZPP))))
          g$a$5186$jXZPP
          g$rest$5187$jXZPP))))
   (g$min$5120$jXZPP
     g$min$5337$jXZPP
     (case-lambda
       ((g$a$5192$jXZPP . g$rest$5193$jXZPP)
        (g$fold-left$5081$jXZPP
          (case-lambda
            ((g$a$5194$jXZPP g$b$5195$jXZPP)
             ((case-lambda
                ((g$r$5196$jXZPP)
                 (if ((case-lambda
                        ((g$t$5197$jXZPP)
                         (if g$t$5197$jXZPP
                           g$t$5197$jXZPP
                           (begin '#f (inexact? g$b$5195$jXZPP)))))
                      (inexact? g$a$5194$jXZPP))
                   (inexact g$r$5196$jXZPP)
                   g$r$5196$jXZPP)))
              (if (> g$a$5194$jXZPP g$b$5195$jXZPP)
                g$b$5195$jXZPP
                g$a$5194$jXZPP))))
          g$a$5192$jXZPP
          g$rest$5193$jXZPP))))
   (g$gcd$5121$jXZPP
     g$gcd$5338$jXZPP
     (case-lambda
       (g$nums$5198$jXZPP
        ((case-lambda
           ((g$t$5199$jXZPP)
            (if (g$memv$5071$jXZPP g$t$5199$jXZPP '(0))
              '0
              (if (g$memv$5071$jXZPP g$t$5199$jXZPP '(1))
                ((case-lambda
                   ((g$n$5200$jXZPP)
                    (begin
                      (if (not (integer-valued? g$n$5200$jXZPP))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$5200$jXZPP)
                        (void))
                      (abs g$n$5200$jXZPP))))
                 (car g$nums$5198$jXZPP))
                (if (g$memv$5071$jXZPP g$t$5199$jXZPP '(2))
                  ((case-lambda
                     ((g$a$5201$jXZPP g$b$5202$jXZPP)
                      (begin
                        (if (not (integer-valued? g$a$5201$jXZPP))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$5201$jXZPP)
                          (void))
                        (if (not (integer-valued? g$b$5202$jXZPP))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$5202$jXZPP)
                          (void))
                        (if (g$zero?$5116$jXZPP g$b$5202$jXZPP)
                          (abs g$a$5201$jXZPP)
                          (abs (g$gcd$5121$jXZPP
                                 g$b$5202$jXZPP
                                 (mod g$a$5201$jXZPP g$b$5202$jXZPP)))))))
                   (car g$nums$5198$jXZPP)
                   (g$cadr$5087$jXZPP g$nums$5198$jXZPP))
                  (g$fold-left$5081$jXZPP
                    g$gcd$5121$jXZPP
                    (abs (car g$nums$5198$jXZPP))
                    (cdr g$nums$5198$jXZPP)))))))
         (length g$nums$5198$jXZPP)))))
   (g$lcm$5122$jXZPP
     g$lcm$5339$jXZPP
     (case-lambda
       (g$nums$5203$jXZPP
        ((case-lambda
           ((g$t$5204$jXZPP)
            (if (g$memv$5071$jXZPP g$t$5204$jXZPP '(0))
              '1
              (if (g$memv$5071$jXZPP g$t$5204$jXZPP '(1))
                ((case-lambda
                   ((g$n$5205$jXZPP)
                    (begin
                      (if (not (integer-valued? g$n$5205$jXZPP))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$5205$jXZPP)
                        (void))
                      (abs g$n$5205$jXZPP))))
                 (car g$nums$5203$jXZPP))
                (if (g$memv$5071$jXZPP g$t$5204$jXZPP '(2))
                  ((case-lambda
                     ((g$a$5206$jXZPP g$b$5207$jXZPP)
                      (begin
                        (if (not (integer-valued? g$a$5206$jXZPP))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$5206$jXZPP)
                          (void))
                        (if (not (integer-valued? g$b$5207$jXZPP))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$5207$jXZPP)
                          (void))
                        (if ((case-lambda
                               ((g$t$5208$jXZPP)
                                (if g$t$5208$jXZPP
                                  g$t$5208$jXZPP
                                  (begin
                                    '#f
                                    (g$zero?$5116$jXZPP g$b$5207$jXZPP)))))
                             (g$zero?$5116$jXZPP g$a$5206$jXZPP))
                          '0
                          (abs (* (/ g$a$5206$jXZPP
                                     (g$gcd$5121$jXZPP
                                       g$a$5206$jXZPP
                                       g$b$5207$jXZPP))
                                  g$b$5207$jXZPP))))))
                   (car g$nums$5203$jXZPP)
                   (g$cadr$5087$jXZPP g$nums$5203$jXZPP))
                  (g$fold-left$5081$jXZPP
                    g$lcm$5122$jXZPP
                    (abs (car g$nums$5203$jXZPP))
                    (cdr g$nums$5203$jXZPP)))))))
         (length g$nums$5203$jXZPP)))))
   (g$string=?$5129$jXZPP
     g$string=?$5340$jXZPP
     (case-lambda
       ((g$a$5209$jXZPP g$b$5210$jXZPP . g$rest$5211$jXZPP)
        (begin
          (if (not (string? g$a$5209$jXZPP))
            (assertion-violation 'string=? '"not a string" g$a$5209$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5212$jXZPP)
               (begin
                 (if (not (string? g$x$5212$jXZPP))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5212$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5213$jXZPP)
                     (begin
                       (set! g$a$5209$jXZPP g$x$5212$jXZPP)
                       g$r$5213$jXZPP)))
                  (fx=? (string-compare g$a$5209$jXZPP g$x$5212$jXZPP) '0)))))
            (cons g$b$5210$jXZPP g$rest$5211$jXZPP))))))
   (g$string<?$5130$jXZPP
     g$string<?$5341$jXZPP
     (case-lambda
       ((g$a$5214$jXZPP g$b$5215$jXZPP . g$rest$5216$jXZPP)
        (begin
          (if (not (string? g$a$5214$jXZPP))
            (assertion-violation 'string<? '"not a string" g$a$5214$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5217$jXZPP)
               (begin
                 (if (not (string? g$x$5217$jXZPP))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5217$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5218$jXZPP)
                     (begin
                       (set! g$a$5214$jXZPP g$x$5217$jXZPP)
                       g$r$5218$jXZPP)))
                  (fx<? (string-compare g$a$5214$jXZPP g$x$5217$jXZPP) '0)))))
            (cons g$b$5215$jXZPP g$rest$5216$jXZPP))))))
   (g$string>?$5131$jXZPP
     g$string>?$5342$jXZPP
     (case-lambda
       ((g$a$5219$jXZPP g$b$5220$jXZPP . g$rest$5221$jXZPP)
        (begin
          (if (not (string? g$a$5219$jXZPP))
            (assertion-violation 'string>? '"not a string" g$a$5219$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5222$jXZPP)
               (begin
                 (if (not (string? g$x$5222$jXZPP))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5222$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5223$jXZPP)
                     (begin
                       (set! g$a$5219$jXZPP g$x$5222$jXZPP)
                       g$r$5223$jXZPP)))
                  (fx>? (string-compare g$a$5219$jXZPP g$x$5222$jXZPP) '0)))))
            (cons g$b$5220$jXZPP g$rest$5221$jXZPP))))))
   (g$string<=?$5132$jXZPP
     g$string<=?$5343$jXZPP
     (case-lambda
       ((g$a$5224$jXZPP g$b$5225$jXZPP . g$rest$5226$jXZPP)
        (begin
          (if (not (string? g$a$5224$jXZPP))
            (assertion-violation 'string<=? '"not a string" g$a$5224$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5227$jXZPP)
               (begin
                 (if (not (string? g$x$5227$jXZPP))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5227$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5228$jXZPP)
                     (begin
                       (set! g$a$5224$jXZPP g$x$5227$jXZPP)
                       g$r$5228$jXZPP)))
                  (fx<=? (string-compare g$a$5224$jXZPP g$x$5227$jXZPP) '0)))))
            (cons g$b$5225$jXZPP g$rest$5226$jXZPP))))))
   (g$string>=?$5133$jXZPP
     g$string>=?$5344$jXZPP
     (case-lambda
       ((g$a$5229$jXZPP g$b$5230$jXZPP . g$rest$5231$jXZPP)
        (begin
          (if (not (string? g$a$5229$jXZPP))
            (assertion-violation 'string>=? '"not a string" g$a$5229$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5232$jXZPP)
               (begin
                 (if (not (string? g$x$5232$jXZPP))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5232$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5233$jXZPP)
                     (begin
                       (set! g$a$5229$jXZPP g$x$5232$jXZPP)
                       g$r$5233$jXZPP)))
                  (fx>=? (string-compare g$a$5229$jXZPP g$x$5232$jXZPP) '0)))))
            (cons g$b$5230$jXZPP g$rest$5231$jXZPP))))))
   (g$symbol=?$5134$jXZPP
     g$symbol=?$5345$jXZPP
     (case-lambda
       ((g$a$5234$jXZPP g$b$5235$jXZPP . g$rest$5236$jXZPP)
        (begin
          (if (not (symbol? g$a$5234$jXZPP))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5234$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5237$jXZPP)
               (begin
                 (if (not (symbol? g$x$5237$jXZPP))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5237$jXZPP)
                   (void))
                 (eq? g$a$5234$jXZPP g$x$5237$jXZPP))))
            (cons g$b$5235$jXZPP g$rest$5236$jXZPP))))))
   (g$boolean=?$5135$jXZPP
     g$boolean=?$5346$jXZPP
     (case-lambda
       ((g$a$5238$jXZPP g$b$5239$jXZPP . g$rest$5240$jXZPP)
        (begin
          (if (not (boolean? g$a$5238$jXZPP))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5238$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5241$jXZPP)
               (begin
                 (if (not (boolean? g$x$5241$jXZPP))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5241$jXZPP)
                   (void))
                 (eq? g$a$5238$jXZPP g$x$5241$jXZPP))))
            (cons g$b$5239$jXZPP g$rest$5240$jXZPP))))))
   (g$char=?$5142$jXZPP
     g$char=?$5347$jXZPP
     (case-lambda
       ((g$a$5242$jXZPP g$b$5243$jXZPP . g$rest$5244$jXZPP)
        (begin
          (if (not (char? g$a$5242$jXZPP))
            (assertion-violation 'char=? '"not a char" g$a$5242$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5245$jXZPP)
               (begin
                 (if (not (char? g$x$5245$jXZPP))
                   (assertion-violation 'char=? '"not a char" g$x$5245$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5246$jXZPP)
                     (begin
                       (set! g$a$5242$jXZPP g$x$5245$jXZPP)
                       g$r$5246$jXZPP)))
                  (fx=?
                    (char->integer g$a$5242$jXZPP)
                    (char->integer g$x$5245$jXZPP))))))
            (cons g$b$5243$jXZPP g$rest$5244$jXZPP))))))
   (g$char<?$5143$jXZPP
     g$char<?$5348$jXZPP
     (case-lambda
       ((g$a$5247$jXZPP g$b$5248$jXZPP . g$rest$5249$jXZPP)
        (begin
          (if (not (char? g$a$5247$jXZPP))
            (assertion-violation 'char<? '"not a char" g$a$5247$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5250$jXZPP)
               (begin
                 (if (not (char? g$x$5250$jXZPP))
                   (assertion-violation 'char<? '"not a char" g$x$5250$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5251$jXZPP)
                     (begin
                       (set! g$a$5247$jXZPP g$x$5250$jXZPP)
                       g$r$5251$jXZPP)))
                  (fx<?
                    (char->integer g$a$5247$jXZPP)
                    (char->integer g$x$5250$jXZPP))))))
            (cons g$b$5248$jXZPP g$rest$5249$jXZPP))))))
   (g$char>?$5144$jXZPP
     g$char>?$5349$jXZPP
     (case-lambda
       ((g$a$5252$jXZPP g$b$5253$jXZPP . g$rest$5254$jXZPP)
        (begin
          (if (not (char? g$a$5252$jXZPP))
            (assertion-violation 'char>? '"not a char" g$a$5252$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5255$jXZPP)
               (begin
                 (if (not (char? g$x$5255$jXZPP))
                   (assertion-violation 'char>? '"not a char" g$x$5255$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5256$jXZPP)
                     (begin
                       (set! g$a$5252$jXZPP g$x$5255$jXZPP)
                       g$r$5256$jXZPP)))
                  (fx>?
                    (char->integer g$a$5252$jXZPP)
                    (char->integer g$x$5255$jXZPP))))))
            (cons g$b$5253$jXZPP g$rest$5254$jXZPP))))))
   (g$char<=?$5145$jXZPP
     g$char<=?$5350$jXZPP
     (case-lambda
       ((g$a$5257$jXZPP g$b$5258$jXZPP . g$rest$5259$jXZPP)
        (begin
          (if (not (char? g$a$5257$jXZPP))
            (assertion-violation 'char<=? '"not a char" g$a$5257$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5260$jXZPP)
               (begin
                 (if (not (char? g$x$5260$jXZPP))
                   (assertion-violation 'char<=? '"not a char" g$x$5260$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5261$jXZPP)
                     (begin
                       (set! g$a$5257$jXZPP g$x$5260$jXZPP)
                       g$r$5261$jXZPP)))
                  (fx<=?
                    (char->integer g$a$5257$jXZPP)
                    (char->integer g$x$5260$jXZPP))))))
            (cons g$b$5258$jXZPP g$rest$5259$jXZPP))))))
   (g$char>=?$5146$jXZPP
     g$char>=?$5351$jXZPP
     (case-lambda
       ((g$a$5262$jXZPP g$b$5263$jXZPP . g$rest$5264$jXZPP)
        (begin
          (if (not (char? g$a$5262$jXZPP))
            (assertion-violation 'char>=? '"not a char" g$a$5262$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$5265$jXZPP)
               (begin
                 (if (not (char? g$x$5265$jXZPP))
                   (assertion-violation 'char>=? '"not a char" g$x$5265$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$5266$jXZPP)
                     (begin
                       (set! g$a$5262$jXZPP g$x$5265$jXZPP)
                       g$r$5266$jXZPP)))
                  (fx>=?
                    (char->integer g$a$5262$jXZPP)
                    (char->integer g$x$5265$jXZPP))))))
            (cons g$b$5263$jXZPP g$rest$5264$jXZPP))))))
   (g$rationalize$5147$jXZPP
     g$rationalize$5352$jXZPP
     (case-lambda
       ((g$x$5267$jXZPP g$e$5268$jXZPP)
        (if (if (infinite? g$x$5267$jXZPP)
              (begin '#f (infinite? g$e$5268$jXZPP))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5269$jXZPP)
              (if (if (exact? g$x$5267$jXZPP)
                    (begin '#f (exact? g$e$5268$jXZPP))
                    '#f)
                g$r$5269$jXZPP
                (inexact g$r$5269$jXZPP))))
           (apply
             /
             (g$find-ratio$5148$jXZPP g$x$5267$jXZPP g$e$5268$jXZPP)))))))
   (g$find-ratio$5148$jXZPP
     g$find-ratio$5353$jXZPP
     (case-lambda
       ((g$x$5270$jXZPP g$e$5271$jXZPP)
        (g$find-ratio-between$5149$jXZPP
          (- g$x$5270$jXZPP g$e$5271$jXZPP)
          (+ g$x$5270$jXZPP g$e$5271$jXZPP)))))
   (g$find-ratio-between$5149$jXZPP
     g$find-ratio-between$5354$jXZPP
     (case-lambda
       ((g$x$5272$jXZPP g$y$5273$jXZPP)
        (letrec* ((g$sr$5274$jXZPP
                    (case-lambda
                      ((g$x$5276$jXZPP g$y$5277$jXZPP)
                       ((case-lambda
                          ((g$fx$5278$jXZPP g$fy$5279$jXZPP)
                           (if (>= g$fx$5278$jXZPP g$x$5276$jXZPP)
                             (list g$fx$5278$jXZPP '1)
                             (if (= g$fx$5278$jXZPP g$fy$5279$jXZPP)
                               ((case-lambda
                                  ((g$rat$5280$jXZPP)
                                   (list
                                     (+ (g$cadr$5087$jXZPP g$rat$5280$jXZPP)
                                        (* g$fx$5278$jXZPP
                                           (car g$rat$5280$jXZPP)))
                                     (car g$rat$5280$jXZPP))))
                                (g$sr$5274$jXZPP
                                  (/ (- g$y$5277$jXZPP g$fy$5279$jXZPP))
                                  (/ (- g$x$5276$jXZPP g$fx$5278$jXZPP))))
                               (list (+ '1 g$fx$5278$jXZPP) '1)))))
                        (exact (floor g$x$5276$jXZPP))
                        (exact (floor g$y$5277$jXZPP)))))))
          (if (< g$y$5273$jXZPP g$x$5272$jXZPP)
            (g$find-ratio-between$5149$jXZPP g$y$5273$jXZPP g$x$5272$jXZPP)
            (if (>= g$x$5272$jXZPP g$y$5273$jXZPP)
              (list g$x$5272$jXZPP '1)
              (if (g$positive?$5114$jXZPP g$x$5272$jXZPP)
                (g$sr$5274$jXZPP g$x$5272$jXZPP g$y$5273$jXZPP)
                (if (g$negative?$5115$jXZPP g$y$5273$jXZPP)
                  ((case-lambda
                     ((g$rat$5275$jXZPP)
                      (list
                        (- (car g$rat$5275$jXZPP))
                        (g$cadr$5087$jXZPP g$rat$5275$jXZPP))))
                   (g$sr$5274$jXZPP (- g$y$5273$jXZPP) (- g$x$5272$jXZPP)))
                  '(0 1)))))))))
   (g$vector-map$5150$jXZPP
     g$vector-map$5355$jXZPP
     (case-lambda
       ((g$p$5281$jXZPP g$vec1$5282$jXZPP . g$vecs$5283$jXZPP)
        ((case-lambda
           ((g$len$5284$jXZPP)
            ((case-lambda
               ((g$res$5285$jXZPP)
                (letrec ((g$loop$5286$jXZPP
                           (case-lambda
                             ((g$i$5287$jXZPP)
                              (if (fx=? g$i$5287$jXZPP g$len$5284$jXZPP)
                                (begin (if '#f '#f (void)) g$res$5285$jXZPP)
                                (begin
                                  (vector-set!
                                    g$res$5285$jXZPP
                                    g$i$5287$jXZPP
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (apply
                                           values
                                           (g$map$5078$jXZPP
                                             (case-lambda
                                               ((g$x$5288$jXZPP)
                                                (vector-ref
                                                  g$x$5288$jXZPP
                                                  g$i$5287$jXZPP)))
                                             (cons
                                               g$vec1$5282$jXZPP
                                               g$vecs$5283$jXZPP)))))
                                      g$p$5281$jXZPP))
                                  (g$loop$5286$jXZPP
                                    (fx+ g$i$5287$jXZPP '1))))))))
                  (g$loop$5286$jXZPP '0))))
             (make-vector g$len$5284$jXZPP))))
         (vector-length g$vec1$5282$jXZPP)))))
   (g$vector-for-each$5151$jXZPP
     g$vector-for-each$5356$jXZPP
     (case-lambda
       ((g$p$5289$jXZPP g$vec1$5290$jXZPP . g$vecs$5291$jXZPP)
        ((case-lambda
           ((g$len$5292$jXZPP)
            (letrec ((g$loop$5293$jXZPP
                       (case-lambda
                         ((g$i$5294$jXZPP)
                          (if (fx=? g$i$5294$jXZPP g$len$5292$jXZPP)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5078$jXZPP
                                       (case-lambda
                                         ((g$x$5295$jXZPP)
                                          (vector-ref
                                            g$x$5295$jXZPP
                                            g$i$5294$jXZPP)))
                                       (cons
                                         g$vec1$5290$jXZPP
                                         g$vecs$5291$jXZPP)))))
                                g$p$5289$jXZPP)
                              (g$loop$5293$jXZPP (fx+ g$i$5294$jXZPP '1))))))))
              (g$loop$5293$jXZPP '0))))
         (vector-length g$vec1$5290$jXZPP)))))
   (g$string-for-each$5152$jXZPP
     g$string-for-each$5357$jXZPP
     (case-lambda
       ((g$p$5296$jXZPP g$str1$5297$jXZPP . g$strs$5298$jXZPP)
        ((case-lambda
           ((g$len$5299$jXZPP)
            (letrec ((g$loop$5300$jXZPP
                       (case-lambda
                         ((g$i$5301$jXZPP)
                          (if (fx=? g$i$5301$jXZPP g$len$5299$jXZPP)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5078$jXZPP
                                       (case-lambda
                                         ((g$x$5302$jXZPP)
                                          (string-ref
                                            g$x$5302$jXZPP
                                            g$i$5301$jXZPP)))
                                       (cons
                                         g$str1$5297$jXZPP
                                         g$strs$5298$jXZPP)))))
                                g$p$5296$jXZPP)
                              (g$loop$5300$jXZPP (fx+ g$i$5301$jXZPP '1))))))))
              (g$loop$5300$jXZPP '0))))
         (string-length g$str1$5297$jXZPP))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5546$jXZPP g$using$5579$jXZPP (clr-using-internal 'system))
   (g$using$5548$jXZPP
     g$using$5580$jXZPP
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5549$jXZPP
     g$make-eq-hashtable$5581$jXZPP
     (case-lambda
       (() (g$make-eq-hashtable$5549$jXZPP '32))
       ((g$k$5558$jXZPP)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5558$jXZPP)))))
   (g$make-eqv-hashtable$5550$jXZPP
     g$make-eqv-hashtable$5582$jXZPP
     (case-lambda
       (() (g$make-eqv-hashtable$5550$jXZPP '32))
       ((g$k$5559$jXZPP) (make-hashtable eqv-hash eqv? g$k$5559$jXZPP))))
   (g$hashtable-size$5551$jXZPP
     g$hashtable-size$5583$jXZPP
     (case-lambda
       ((g$ht$5560$jXZPP)
        (clr-call-internal 'hashtable 'get_count g$ht$5560$jXZPP))))
   (g$hashtable-ref$5552$jXZPP
     g$hashtable-ref$5584$jXZPP
     (case-lambda
       ((g$ht$5561$jXZPP g$key$5562$jXZPP g$default$5563$jXZPP)
        (letrec* ((g$r$5564$jXZPP
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5561$jXZPP
                      g$key$5562$jXZPP)))
          (if (not (null? g$r$5564$jXZPP))
            g$r$5564$jXZPP
            g$default$5563$jXZPP)))))
   (g$hashtable-set!$5553$jXZPP
     g$hashtable-set!$5585$jXZPP
     (case-lambda
       ((g$ht$5565$jXZPP g$key$5566$jXZPP g$obj$5567$jXZPP)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5565$jXZPP
          g$key$5566$jXZPP
          g$obj$5567$jXZPP))))
   (g$hashtable-delete!$5554$jXZPP
     g$hashtable-delete!$5586$jXZPP
     (case-lambda
       ((g$ht$5568$jXZPP g$key$5569$jXZPP)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5568$jXZPP
          g$key$5569$jXZPP))))
   (g$hashtable-contains?$5555$jXZPP
     g$hashtable-contains?$5587$jXZPP
     (case-lambda
       ((g$ht$5570$jXZPP g$key$5571$jXZPP)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5570$jXZPP
          g$key$5571$jXZPP))))
   (g$hashtable-update!$5556$jXZPP
     g$hashtable-update!$5588$jXZPP
     (case-lambda
       ((g$ht$5572$jXZPP
          g$key$5573$jXZPP
          g$proc$5574$jXZPP
          g$default$5575$jXZPP)
        (g$hashtable-set!$5553$jXZPP
          g$ht$5572$jXZPP
          g$key$5573$jXZPP
          (g$proc$5574$jXZPP
            (g$hashtable-ref$5552$jXZPP
              g$ht$5572$jXZPP
              g$key$5573$jXZPP
              g$default$5575$jXZPP))))))
   (g$hashtable-clear!$5557$jXZPP
     g$hashtable-clear!$5589$jXZPP
     (case-lambda
       ((g$ht$5576$jXZPP) (g$hashtable-clear!$5557$jXZPP g$ht$5576$jXZPP '32))
       ((g$ht$5577$jXZPP g$k$5578$jXZPP)
        (clr-call-internal 'hashtable 'clear g$ht$5577$jXZPP)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5591$jXZPP g$using$5598$jXZPP (clr-using-internal 'system.io))
   (g$file-exists?$5592$jXZPP
     g$file-exists?$5599$jXZPP
     (case-lambda
       ((g$fn$5595$jXZPP)
        (clr-call-internal 'file 'exists '() g$fn$5595$jXZPP))))
   (g$delete-file$5593$jXZPP
     g$delete-file$5600$jXZPP
     (case-lambda
       ((g$fn$5596$jXZPP)
        (clr-call-internal 'file 'delete '() g$fn$5596$jXZPP))))
   (g$get-directory-name$5594$jXZPP
     g$get-directory-name$5601$jXZPP
     (case-lambda
       ((g$path$5597$jXZPP)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5597$jXZPP)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5602$jXZPP
     g$native-endianness$5713$jXZPP
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5603$jXZPP
     g$bytevector-u16-ref$5714$jXZPP
     (case-lambda
       ((g$bytevector$5631$jXZPP g$k$5632$jXZPP g$endianness$5633$jXZPP)
        (bytevector-uint-ref
          g$bytevector$5631$jXZPP
          g$k$5632$jXZPP
          g$endianness$5633$jXZPP
          '2))))
   (g$bytevector-s16-ref$5604$jXZPP
     g$bytevector-s16-ref$5715$jXZPP
     (case-lambda
       ((g$bytevector$5634$jXZPP g$k$5635$jXZPP g$endianness$5636$jXZPP)
        (bytevector-sint-ref
          g$bytevector$5634$jXZPP
          g$k$5635$jXZPP
          g$endianness$5636$jXZPP
          '2))))
   (g$bytevector-u16-native-ref$5605$jXZPP
     g$bytevector-u16-native-ref$5716$jXZPP
     (case-lambda
       ((g$bytevector$5637$jXZPP g$k$5638$jXZPP)
        (bytevector-uint-ref
          g$bytevector$5637$jXZPP
          g$k$5638$jXZPP
          (g$native-endianness$5602$jXZPP)
          '2))))
   (g$bytevector-s16-native-ref$5606$jXZPP
     g$bytevector-s16-native-ref$5717$jXZPP
     (case-lambda
       ((g$bytevector$5639$jXZPP g$k$5640$jXZPP)
        (bytevector-sint-ref
          g$bytevector$5639$jXZPP
          g$k$5640$jXZPP
          (g$native-endianness$5602$jXZPP)
          '2))))
   (g$bytevector-u16-set!$5607$jXZPP
     g$bytevector-u16-set!$5718$jXZPP
     (case-lambda
       ((g$bytevector$5641$jXZPP
          g$k$5642$jXZPP
          g$n$5643$jXZPP
          g$endianness$5644$jXZPP)
        (bytevector-uint-set!
          g$bytevector$5641$jXZPP
          g$k$5642$jXZPP
          g$n$5643$jXZPP
          g$endianness$5644$jXZPP
          '2))))
   (g$bytevector-s16-set!$5608$jXZPP
     g$bytevector-s16-set!$5719$jXZPP
     (case-lambda
       ((g$bytevector$5645$jXZPP
          g$k$5646$jXZPP
          g$n$5647$jXZPP
          g$endianness$5648$jXZPP)
        (bytevector-sint-set!
          g$bytevector$5645$jXZPP
          g$k$5646$jXZPP
          g$n$5647$jXZPP
          g$endianness$5648$jXZPP
          '2))))
   (g$bytevector-u16-native-set!$5609$jXZPP
     g$bytevector-u16-native-set!$5720$jXZPP
     (case-lambda
       ((g$bytevector$5649$jXZPP g$k$5650$jXZPP g$n$5651$jXZPP)
        (bytevector-uint-set!
          g$bytevector$5649$jXZPP
          g$k$5650$jXZPP
          g$n$5651$jXZPP
          (g$native-endianness$5602$jXZPP)
          '2))))
   (g$bytevector-s16-native-set!$5610$jXZPP
     g$bytevector-s16-native-set!$5721$jXZPP
     (case-lambda
       ((g$bytevector$5652$jXZPP g$k$5653$jXZPP g$n$5654$jXZPP)
        (bytevector-sint-set!
          g$bytevector$5652$jXZPP
          g$k$5653$jXZPP
          g$n$5654$jXZPP
          (g$native-endianness$5602$jXZPP)
          '2))))
   (g$bytevector-u32-ref$5611$jXZPP
     g$bytevector-u32-ref$5722$jXZPP
     (case-lambda
       ((g$bytevector$5655$jXZPP g$k$5656$jXZPP g$endianness$5657$jXZPP)
        (bytevector-uint-ref
          g$bytevector$5655$jXZPP
          g$k$5656$jXZPP
          g$endianness$5657$jXZPP
          '4))))
   (g$bytevector-s32-ref$5612$jXZPP
     g$bytevector-s32-ref$5723$jXZPP
     (case-lambda
       ((g$bytevector$5658$jXZPP g$k$5659$jXZPP g$endianness$5660$jXZPP)
        (bytevector-sint-ref
          g$bytevector$5658$jXZPP
          g$k$5659$jXZPP
          g$endianness$5660$jXZPP
          '4))))
   (g$bytevector-u32-native-ref$5613$jXZPP
     g$bytevector-u32-native-ref$5724$jXZPP
     (case-lambda
       ((g$bytevector$5661$jXZPP g$k$5662$jXZPP)
        (bytevector-uint-ref
          g$bytevector$5661$jXZPP
          g$k$5662$jXZPP
          (g$native-endianness$5602$jXZPP)
          '4))))
   (g$bytevector-s32-native-ref$5614$jXZPP
     g$bytevector-s32-native-ref$5725$jXZPP
     (case-lambda
       ((g$bytevector$5663$jXZPP g$k$5664$jXZPP)
        (bytevector-sint-ref
          g$bytevector$5663$jXZPP
          g$k$5664$jXZPP
          (g$native-endianness$5602$jXZPP)
          '4))))
   (g$bytevector-u32-set!$5615$jXZPP
     g$bytevector-u32-set!$5726$jXZPP
     (case-lambda
       ((g$bytevector$5665$jXZPP
          g$k$5666$jXZPP
          g$n$5667$jXZPP
          g$endianness$5668$jXZPP)
        (bytevector-uint-set!
          g$bytevector$5665$jXZPP
          g$k$5666$jXZPP
          g$n$5667$jXZPP
          g$endianness$5668$jXZPP
          '4))))
   (g$bytevector-s32-set!$5616$jXZPP
     g$bytevector-s32-set!$5727$jXZPP
     (case-lambda
       ((g$bytevector$5669$jXZPP
          g$k$5670$jXZPP
          g$n$5671$jXZPP
          g$endianness$5672$jXZPP)
        (bytevector-sint-set!
          g$bytevector$5669$jXZPP
          g$k$5670$jXZPP
          g$n$5671$jXZPP
          g$endianness$5672$jXZPP
          '4))))
   (g$bytevector-u32-native-set!$5617$jXZPP
     g$bytevector-u32-native-set!$5728$jXZPP
     (case-lambda
       ((g$bytevector$5673$jXZPP g$k$5674$jXZPP g$n$5675$jXZPP)
        (bytevector-uint-set!
          g$bytevector$5673$jXZPP
          g$k$5674$jXZPP
          g$n$5675$jXZPP
          (g$native-endianness$5602$jXZPP)
          '4))))
   (g$bytevector-s32-native-set!$5618$jXZPP
     g$bytevector-s32-native-set!$5729$jXZPP
     (case-lambda
       ((g$bytevector$5676$jXZPP g$k$5677$jXZPP g$n$5678$jXZPP)
        (bytevector-sint-set!
          g$bytevector$5676$jXZPP
          g$k$5677$jXZPP
          g$n$5678$jXZPP
          (g$native-endianness$5602$jXZPP)
          '4))))
   (g$bytevector-u64-ref$5619$jXZPP
     g$bytevector-u64-ref$5730$jXZPP
     (case-lambda
       ((g$bytevector$5679$jXZPP g$k$5680$jXZPP g$endianness$5681$jXZPP)
        (bytevector-uint-ref
          g$bytevector$5679$jXZPP
          g$k$5680$jXZPP
          g$endianness$5681$jXZPP
          '8))))
   (g$bytevector-s64-ref$5620$jXZPP
     g$bytevector-s64-ref$5731$jXZPP
     (case-lambda
       ((g$bytevector$5682$jXZPP g$k$5683$jXZPP g$endianness$5684$jXZPP)
        (bytevector-sint-ref
          g$bytevector$5682$jXZPP
          g$k$5683$jXZPP
          g$endianness$5684$jXZPP
          '8))))
   (g$bytevector-u64-native-ref$5621$jXZPP
     g$bytevector-u64-native-ref$5732$jXZPP
     (case-lambda
       ((g$bytevector$5685$jXZPP g$k$5686$jXZPP)
        (bytevector-uint-ref
          g$bytevector$5685$jXZPP
          g$k$5686$jXZPP
          (g$native-endianness$5602$jXZPP)
          '8))))
   (g$bytevector-s64-native-ref$5622$jXZPP
     g$bytevector-s64-native-ref$5733$jXZPP
     (case-lambda
       ((g$bytevector$5687$jXZPP g$k$5688$jXZPP)
        (bytevector-sint-ref
          g$bytevector$5687$jXZPP
          g$k$5688$jXZPP
          (g$native-endianness$5602$jXZPP)
          '8))))
   (g$bytevector-u64-set!$5623$jXZPP
     g$bytevector-u64-set!$5734$jXZPP
     (case-lambda
       ((g$bytevector$5689$jXZPP
          g$k$5690$jXZPP
          g$n$5691$jXZPP
          g$endianness$5692$jXZPP)
        (bytevector-uint-set!
          g$bytevector$5689$jXZPP
          g$k$5690$jXZPP
          g$n$5691$jXZPP
          g$endianness$5692$jXZPP
          '8))))
   (g$bytevector-s64-set!$5624$jXZPP
     g$bytevector-s64-set!$5735$jXZPP
     (case-lambda
       ((g$bytevector$5693$jXZPP
          g$k$5694$jXZPP
          g$n$5695$jXZPP
          g$endianness$5696$jXZPP)
        (bytevector-sint-set!
          g$bytevector$5693$jXZPP
          g$k$5694$jXZPP
          g$n$5695$jXZPP
          g$endianness$5696$jXZPP
          '8))))
   (g$bytevector-u64-native-set!$5625$jXZPP
     g$bytevector-u64-native-set!$5736$jXZPP
     (case-lambda
       ((g$bytevector$5697$jXZPP g$k$5698$jXZPP g$n$5699$jXZPP)
        (bytevector-uint-set!
          g$bytevector$5697$jXZPP
          g$k$5698$jXZPP
          g$n$5699$jXZPP
          (g$native-endianness$5602$jXZPP)
          '8))))
   (g$bytevector-s64-native-set!$5626$jXZPP
     g$bytevector-s64-native-set!$5737$jXZPP
     (case-lambda
       ((g$bytevector$5700$jXZPP g$k$5701$jXZPP g$n$5702$jXZPP)
        (bytevector-sint-set!
          g$bytevector$5700$jXZPP
          g$k$5701$jXZPP
          g$n$5702$jXZPP
          (g$native-endianness$5602$jXZPP)
          '8))))
   (g$bytevector-ieee-single-native-ref$5627$jXZPP
     g$bytevector-ieee-single-native-ref$5738$jXZPP
     (case-lambda
       ((g$bytevector$5703$jXZPP g$k$5704$jXZPP)
        (if (not (g$zero?$5333$jXZPP (mod g$k$5704$jXZPP '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5704$jXZPP)
          (bytevector-ieee-single-ref
            g$bytevector$5703$jXZPP
            g$k$5704$jXZPP
            (g$native-endianness$5602$jXZPP))))))
   (g$bytevector-ieee-double-native-ref$5628$jXZPP
     g$bytevector-ieee-double-native-ref$5739$jXZPP
     (case-lambda
       ((g$bytevector$5705$jXZPP g$k$5706$jXZPP)
        (if (not (g$zero?$5333$jXZPP (mod g$k$5706$jXZPP '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5706$jXZPP)
          (bytevector-ieee-double-ref
            g$bytevector$5705$jXZPP
            g$k$5706$jXZPP
            (g$native-endianness$5602$jXZPP))))))
   (g$bytevector-ieee-single-native-set!$5629$jXZPP
     g$bytevector-ieee-single-native-set!$5740$jXZPP
     (case-lambda
       ((g$bytevector$5707$jXZPP g$k$5708$jXZPP g$x$5709$jXZPP)
        (if (not (g$zero?$5333$jXZPP (mod g$k$5708$jXZPP '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5708$jXZPP)
          (bytevector-ieee-single-set!
            g$bytevector$5707$jXZPP
            g$k$5708$jXZPP
            g$x$5709$jXZPP
            (g$native-endianness$5602$jXZPP))))))
   (g$bytevector-ieee-double-native-set!$5630$jXZPP
     g$bytevector-ieee-double-native-set!$5741$jXZPP
     (case-lambda
       ((g$bytevector$5710$jXZPP g$k$5711$jXZPP g$x$5712$jXZPP)
        (if (not (g$zero?$5333$jXZPP (mod g$k$5711$jXZPP '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5711$jXZPP)
          (bytevector-ieee-double-set!
            g$bytevector$5710$jXZPP
            g$k$5711$jXZPP
            g$x$5712$jXZPP
            (g$native-endianness$5602$jXZPP)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6735$5742$jXZPP
     g$6735$5837$jXZPP
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6738$jXZPP
       '#f
       '#f
       '#()))
   (g$6737$5743$jXZPP g$6737$5838$jXZPP '#f)
   (g$6736$5744$jXZPP
     g$6736$5839$jXZPP
     (make-record-constructor-descriptor
       g$6735$5742$jXZPP
       '#f
       g$6737$5743$jXZPP))
   (g$&condition?$5745$jXZPP
     g$&condition?$5840$jXZPP
     (record-predicate g$6735$5742$jXZPP))
   (g$make-&condition$5746$jXZPP
     g$make-&condition$5841$jXZPP
     (record-constructor g$6736$5744$jXZPP))
   (g$&condition-rtd$5747$jXZPP
     g$&condition-rtd$5842$jXZPP
     g$6735$5742$jXZPP)
   (g$&condition-rcd$5748$jXZPP
     g$&condition-rcd$5843$jXZPP
     g$6736$5744$jXZPP)
   (g$6751$5749$jXZPP
     g$6751$5844$jXZPP
     (make-record-type-descriptor
       '&message
       g$6735$5742$jXZPP
       'g$6754$jXZPP
       '#f
       '#f
       '#((immutable message))))
   (g$6753$5750$jXZPP g$6753$5845$jXZPP '#f)
   (g$6752$5751$jXZPP
     g$6752$5846$jXZPP
     (make-record-constructor-descriptor
       g$6751$5749$jXZPP
       g$6736$5744$jXZPP
       g$6753$5750$jXZPP))
   (g$6750$5752$jXZPP
     g$6750$5847$jXZPP
     (record-predicate g$6751$5749$jXZPP))
   (g$make-message-condition$5753$jXZPP
     g$make-message-condition$5848$jXZPP
     (record-constructor g$6752$5751$jXZPP))
   (g$6749$5754$jXZPP
     g$6749$5849$jXZPP
     (record-accessor g$6751$5749$jXZPP '0))
   (g$message-condition?$5755$jXZPP
     g$message-condition?$5850$jXZPP
     (condition-predicate g$6751$5749$jXZPP))
   (g$condition-message$5756$jXZPP
     g$condition-message$5851$jXZPP
     (condition-accessor g$6751$5749$jXZPP g$6749$5754$jXZPP))
   (g$6767$5757$jXZPP
     g$6767$5852$jXZPP
     (make-record-type-descriptor
       '&warning
       g$6735$5742$jXZPP
       'g$6770$jXZPP
       '#f
       '#f
       '#()))
   (g$6769$5758$jXZPP g$6769$5853$jXZPP '#f)
   (g$6768$5759$jXZPP
     g$6768$5854$jXZPP
     (make-record-constructor-descriptor
       g$6767$5757$jXZPP
       g$6736$5744$jXZPP
       g$6769$5758$jXZPP))
   (g$6766$5760$jXZPP
     g$6766$5855$jXZPP
     (record-predicate g$6767$5757$jXZPP))
   (g$make-warning$5761$jXZPP
     g$make-warning$5856$jXZPP
     (record-constructor g$6768$5759$jXZPP))
   (g$warning?$5762$jXZPP
     g$warning?$5857$jXZPP
     (condition-predicate g$6767$5757$jXZPP))
   (g$6781$5763$jXZPP
     g$6781$5858$jXZPP
     (make-record-type-descriptor
       '&serious
       g$6735$5742$jXZPP
       'g$6784$jXZPP
       '#f
       '#f
       '#()))
   (g$6783$5764$jXZPP g$6783$5859$jXZPP '#f)
   (g$6782$5765$jXZPP
     g$6782$5860$jXZPP
     (make-record-constructor-descriptor
       g$6781$5763$jXZPP
       g$6736$5744$jXZPP
       g$6783$5764$jXZPP))
   (g$6780$5766$jXZPP
     g$6780$5861$jXZPP
     (record-predicate g$6781$5763$jXZPP))
   (g$make-serious-condition$5767$jXZPP
     g$make-serious-condition$5862$jXZPP
     (record-constructor g$6782$5765$jXZPP))
   (g$serious-condition?$5768$jXZPP
     g$serious-condition?$5863$jXZPP
     (condition-predicate g$6781$5763$jXZPP))
   (g$6795$5769$jXZPP
     g$6795$5864$jXZPP
     (make-record-type-descriptor
       '&error
       g$6781$5763$jXZPP
       'g$6798$jXZPP
       '#f
       '#f
       '#()))
   (g$6797$5770$jXZPP g$6797$5865$jXZPP '#f)
   (g$6796$5771$jXZPP
     g$6796$5866$jXZPP
     (make-record-constructor-descriptor
       g$6795$5769$jXZPP
       g$6782$5765$jXZPP
       g$6797$5770$jXZPP))
   (g$6794$5772$jXZPP
     g$6794$5867$jXZPP
     (record-predicate g$6795$5769$jXZPP))
   (g$make-error$5773$jXZPP
     g$make-error$5868$jXZPP
     (record-constructor g$6796$5771$jXZPP))
   (g$error?$5774$jXZPP
     g$error?$5869$jXZPP
     (condition-predicate g$6795$5769$jXZPP))
   (g$6809$5775$jXZPP
     g$6809$5870$jXZPP
     (make-record-type-descriptor
       '&violation
       g$6781$5763$jXZPP
       'g$6812$jXZPP
       '#f
       '#f
       '#()))
   (g$6811$5776$jXZPP g$6811$5871$jXZPP '#f)
   (g$6810$5777$jXZPP
     g$6810$5872$jXZPP
     (make-record-constructor-descriptor
       g$6809$5775$jXZPP
       g$6782$5765$jXZPP
       g$6811$5776$jXZPP))
   (g$6808$5778$jXZPP
     g$6808$5873$jXZPP
     (record-predicate g$6809$5775$jXZPP))
   (g$make-violation$5779$jXZPP
     g$make-violation$5874$jXZPP
     (record-constructor g$6810$5777$jXZPP))
   (g$violation?$5780$jXZPP
     g$violation?$5875$jXZPP
     (condition-predicate g$6809$5775$jXZPP))
   (g$6823$5781$jXZPP
     g$6823$5876$jXZPP
     (make-record-type-descriptor
       '&assertion
       g$6809$5775$jXZPP
       'g$6826$jXZPP
       '#f
       '#f
       '#()))
   (g$6825$5782$jXZPP g$6825$5877$jXZPP '#f)
   (g$6824$5783$jXZPP
     g$6824$5878$jXZPP
     (make-record-constructor-descriptor
       g$6823$5781$jXZPP
       g$6810$5777$jXZPP
       g$6825$5782$jXZPP))
   (g$6822$5784$jXZPP
     g$6822$5879$jXZPP
     (record-predicate g$6823$5781$jXZPP))
   (g$make-assertion-violation$5785$jXZPP
     g$make-assertion-violation$5880$jXZPP
     (record-constructor g$6824$5783$jXZPP))
   (g$assertion-violation?$5786$jXZPP
     g$assertion-violation?$5881$jXZPP
     (condition-predicate g$6823$5781$jXZPP))
   (g$6838$5787$jXZPP
     g$6838$5882$jXZPP
     (make-record-type-descriptor
       '&irritants
       g$6735$5742$jXZPP
       'g$6841$jXZPP
       '#f
       '#f
       '#((immutable irritants))))
   (g$6840$5788$jXZPP g$6840$5883$jXZPP '#f)
   (g$6839$5789$jXZPP
     g$6839$5884$jXZPP
     (make-record-constructor-descriptor
       g$6838$5787$jXZPP
       g$6736$5744$jXZPP
       g$6840$5788$jXZPP))
   (g$6837$5790$jXZPP
     g$6837$5885$jXZPP
     (record-predicate g$6838$5787$jXZPP))
   (g$make-irritants-condition$5791$jXZPP
     g$make-irritants-condition$5886$jXZPP
     (record-constructor g$6839$5789$jXZPP))
   (g$6836$5792$jXZPP
     g$6836$5887$jXZPP
     (record-accessor g$6838$5787$jXZPP '0))
   (g$irritants-condition?$5793$jXZPP
     g$irritants-condition?$5888$jXZPP
     (condition-predicate g$6838$5787$jXZPP))
   (g$condition-irritants$5794$jXZPP
     g$condition-irritants$5889$jXZPP
     (condition-accessor g$6838$5787$jXZPP g$6836$5792$jXZPP))
   (g$6855$5795$jXZPP
     g$6855$5890$jXZPP
     (make-record-type-descriptor
       '&who
       g$6735$5742$jXZPP
       'g$6858$jXZPP
       '#f
       '#f
       '#((immutable who))))
   (g$6857$5796$jXZPP g$6857$5891$jXZPP '#f)
   (g$6856$5797$jXZPP
     g$6856$5892$jXZPP
     (make-record-constructor-descriptor
       g$6855$5795$jXZPP
       g$6736$5744$jXZPP
       g$6857$5796$jXZPP))
   (g$6854$5798$jXZPP
     g$6854$5893$jXZPP
     (record-predicate g$6855$5795$jXZPP))
   (g$make-who-condition$5799$jXZPP
     g$make-who-condition$5894$jXZPP
     (record-constructor g$6856$5797$jXZPP))
   (g$6853$5800$jXZPP
     g$6853$5895$jXZPP
     (record-accessor g$6855$5795$jXZPP '0))
   (g$who-condition?$5801$jXZPP
     g$who-condition?$5896$jXZPP
     (condition-predicate g$6855$5795$jXZPP))
   (g$condition-who$5802$jXZPP
     g$condition-who$5897$jXZPP
     (condition-accessor g$6855$5795$jXZPP g$6853$5800$jXZPP))
   (g$6871$5803$jXZPP
     g$6871$5898$jXZPP
     (make-record-type-descriptor
       '&non-continuable
       g$6809$5775$jXZPP
       'g$6874$jXZPP
       '#f
       '#f
       '#()))
   (g$6873$5804$jXZPP g$6873$5899$jXZPP '#f)
   (g$6872$5805$jXZPP
     g$6872$5900$jXZPP
     (make-record-constructor-descriptor
       g$6871$5803$jXZPP
       g$6810$5777$jXZPP
       g$6873$5804$jXZPP))
   (g$6870$5806$jXZPP
     g$6870$5901$jXZPP
     (record-predicate g$6871$5803$jXZPP))
   (g$make-non-continuable-violation$5807$jXZPP
     g$make-non-continuable-violation$5902$jXZPP
     (record-constructor g$6872$5805$jXZPP))
   (g$non-continuable-violation?$5808$jXZPP
     g$non-continuable-violation?$5903$jXZPP
     (condition-predicate g$6871$5803$jXZPP))
   (g$6885$5809$jXZPP
     g$6885$5904$jXZPP
     (make-record-type-descriptor
       '&implementation-restriction
       g$6809$5775$jXZPP
       'g$6888$jXZPP
       '#f
       '#f
       '#()))
   (g$6887$5810$jXZPP g$6887$5905$jXZPP '#f)
   (g$6886$5811$jXZPP
     g$6886$5906$jXZPP
     (make-record-constructor-descriptor
       g$6885$5809$jXZPP
       g$6810$5777$jXZPP
       g$6887$5810$jXZPP))
   (g$6884$5812$jXZPP
     g$6884$5907$jXZPP
     (record-predicate g$6885$5809$jXZPP))
   (g$make-implementation-restriction-violation$5813$jXZPP
     g$make-implementation-restriction-violation$5908$jXZPP
     (record-constructor g$6886$5811$jXZPP))
   (g$implementation-restriction-violation?$5814$jXZPP
     g$implementation-restriction-violation?$5909$jXZPP
     (condition-predicate g$6885$5809$jXZPP))
   (g$6899$5815$jXZPP
     g$6899$5910$jXZPP
     (make-record-type-descriptor
       '&lexical
       g$6809$5775$jXZPP
       'g$6902$jXZPP
       '#f
       '#f
       '#()))
   (g$6901$5816$jXZPP g$6901$5911$jXZPP '#f)
   (g$6900$5817$jXZPP
     g$6900$5912$jXZPP
     (make-record-constructor-descriptor
       g$6899$5815$jXZPP
       g$6810$5777$jXZPP
       g$6901$5816$jXZPP))
   (g$6898$5818$jXZPP
     g$6898$5913$jXZPP
     (record-predicate g$6899$5815$jXZPP))
   (g$make-lexical-violation$5819$jXZPP
     g$make-lexical-violation$5914$jXZPP
     (record-constructor g$6900$5817$jXZPP))
   (g$lexical-violation?$5820$jXZPP
     g$lexical-violation?$5915$jXZPP
     (condition-predicate g$6899$5815$jXZPP))
   (g$6915$5821$jXZPP
     g$6915$5916$jXZPP
     (make-record-type-descriptor
       '&syntax
       g$6809$5775$jXZPP
       'g$6918$jXZPP
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6917$5822$jXZPP g$6917$5917$jXZPP '#f)
   (g$6916$5823$jXZPP
     g$6916$5918$jXZPP
     (make-record-constructor-descriptor
       g$6915$5821$jXZPP
       g$6810$5777$jXZPP
       g$6917$5822$jXZPP))
   (g$6914$5824$jXZPP
     g$6914$5919$jXZPP
     (record-predicate g$6915$5821$jXZPP))
   (g$make-syntax-violation$5825$jXZPP
     g$make-syntax-violation$5920$jXZPP
     (record-constructor g$6916$5823$jXZPP))
   (g$6912$5826$jXZPP
     g$6912$5921$jXZPP
     (record-accessor g$6915$5821$jXZPP '0))
   (g$6913$5827$jXZPP
     g$6913$5922$jXZPP
     (record-accessor g$6915$5821$jXZPP '1))
   (g$syntax-violation?$5828$jXZPP
     g$syntax-violation?$5923$jXZPP
     (condition-predicate g$6915$5821$jXZPP))
   (g$syntax-violation-form$5829$jXZPP
     g$syntax-violation-form$5924$jXZPP
     (condition-accessor g$6915$5821$jXZPP g$6912$5826$jXZPP))
   (g$syntax-violation-subform$5830$jXZPP
     g$syntax-violation-subform$5925$jXZPP
     (condition-accessor g$6915$5821$jXZPP g$6913$5827$jXZPP))
   (g$6933$5831$jXZPP
     g$6933$5926$jXZPP
     (make-record-type-descriptor
       '&undefined
       g$6809$5775$jXZPP
       'g$6936$jXZPP
       '#f
       '#f
       '#()))
   (g$6935$5832$jXZPP g$6935$5927$jXZPP '#f)
   (g$6934$5833$jXZPP
     g$6934$5928$jXZPP
     (make-record-constructor-descriptor
       g$6933$5831$jXZPP
       g$6810$5777$jXZPP
       g$6935$5832$jXZPP))
   (g$6932$5834$jXZPP
     g$6932$5929$jXZPP
     (record-predicate g$6933$5831$jXZPP))
   (g$make-undefined-violation$5835$jXZPP
     g$make-undefined-violation$5930$jXZPP
     (record-constructor g$6934$5833$jXZPP))
   (g$undefined-violation?$5836$jXZPP
     g$undefined-violation?$5931$jXZPP
     (condition-predicate g$6933$5831$jXZPP)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5932$jXZPP
     g$append!$5938$jXZPP
     (case-lambda
       ((g$a$5933$jXZPP . g$b$5934$jXZPP)
        (if (null? g$a$5933$jXZPP)
          g$b$5934$jXZPP
          (if (null? g$b$5934$jXZPP)
            g$a$5933$jXZPP
            (begin
              ((letrec ((g$f$5935$jXZPP
                          (case-lambda
                            ((g$a$5936$jXZPP)
                             ((case-lambda
                                ((g$n$5937$jXZPP)
                                 (if (null? g$n$5937$jXZPP)
                                   (set-cdr! g$a$5936$jXZPP g$b$5934$jXZPP)
                                   (g$f$5935$jXZPP g$n$5937$jXZPP))))
                              (cdr g$a$5936$jXZPP))))))
                 g$f$5935$jXZPP)
               g$a$5933$jXZPP)
              g$a$5933$jXZPP)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$5939$jXZPP g$inexact->exact$5959$jXZPP exact)
   (g$exact->inexact$5940$jXZPP g$exact->inexact$5960$jXZPP inexact)
   (g$sign$5941$jXZPP
     g$sign$5961$jXZPP
     (case-lambda
       ((g$n$5947$jXZPP)
        (if (> g$n$5947$jXZPP '0) '1 (if (< g$n$5947$jXZPP '0) '-1 '0)))))
   (g$quotient$5942$jXZPP
     g$quotient$5962$jXZPP
     (case-lambda
       ((g$n1$5948$jXZPP g$n2$5949$jXZPP)
        (begin
          (if (not (integer-valued? g$n1$5948$jXZPP))
            (assertion-violation 'quotient '"not an integer" g$n1$5948$jXZPP)
            (void))
          (if (not (integer-valued? g$n2$5949$jXZPP))
            (assertion-violation 'quotient '"not an integer" g$n2$5949$jXZPP)
            (void))
          (* (g$sign$5941$jXZPP g$n1$5948$jXZPP)
             (g$sign$5941$jXZPP g$n2$5949$jXZPP)
             (div (abs g$n1$5948$jXZPP) (abs g$n2$5949$jXZPP)))))))
   (g$remainder$5943$jXZPP
     g$remainder$5963$jXZPP
     (case-lambda
       ((g$n1$5950$jXZPP g$n2$5951$jXZPP)
        (begin
          (if (not (integer-valued? g$n1$5950$jXZPP))
            (assertion-violation 'remainder '"not an integer" g$n1$5950$jXZPP)
            (void))
          (if (not (integer-valued? g$n2$5951$jXZPP))
            (assertion-violation 'remainder '"not an integer" g$n2$5951$jXZPP)
            (void))
          (* (g$sign$5941$jXZPP g$n1$5950$jXZPP)
             (mod (abs g$n1$5950$jXZPP) (abs g$n2$5951$jXZPP)))))))
   (g$modulo$5944$jXZPP
     g$modulo$5964$jXZPP
     (case-lambda
       ((g$n1$5952$jXZPP g$n2$5953$jXZPP)
        (begin
          (if (not (integer-valued? g$n1$5952$jXZPP))
            (assertion-violation 'modulo '"not an integer" g$n1$5952$jXZPP)
            (void))
          (if (not (integer-valued? g$n2$5953$jXZPP))
            (assertion-violation 'modulo '"not an integer" g$n2$5953$jXZPP)
            (void))
          (* (g$sign$5941$jXZPP g$n2$5953$jXZPP)
             (mod (* (g$sign$5941$jXZPP g$n2$5953$jXZPP) g$n1$5952$jXZPP)
                  (abs g$n2$5953$jXZPP)))))))
   (g$make-promise$5945$jXZPP
     g$make-promise$5965$jXZPP
     (case-lambda
       ((g$proc$5954$jXZPP)
        ((case-lambda
           ((g$result-ready?$5955$jXZPP g$result$5956$jXZPP)
            (case-lambda
              (()
               (if g$result-ready?$5955$jXZPP
                 g$result$5956$jXZPP
                 ((case-lambda
                    ((g$x$5957$jXZPP)
                     (if g$result-ready?$5955$jXZPP
                       g$result$5956$jXZPP
                       (begin
                         (set! g$result-ready?$5955$jXZPP '#t)
                         (set! g$result$5956$jXZPP g$x$5957$jXZPP)
                         g$result$5956$jXZPP))))
                  (g$proc$5954$jXZPP)))))))
         '#f
         '#f))))
   (g$force$5946$jXZPP
     g$force$5966$jXZPP
     (case-lambda ((g$object$5958$jXZPP) (g$object$5958$jXZPP)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5967$jXZPP
     g$split$5992$jXZPP
     (case-lambda
       ((g$ls$5971$jXZPP)
        ((letrec ((g$loop$5972$jXZPP
                    (case-lambda
                      ((g$rest$5973$jXZPP g$left$5974$jXZPP g$right$5975$jXZPP)
                       (if (null? g$rest$5973$jXZPP)
                         (cons g$left$5974$jXZPP g$right$5975$jXZPP)
                         (if (null? (cdr g$rest$5973$jXZPP))
                           (cons
                             (cons (car g$rest$5973$jXZPP) g$left$5974$jXZPP)
                             g$right$5975$jXZPP)
                           (g$loop$5972$jXZPP
                             (g$cddr$5306$jXZPP g$rest$5973$jXZPP)
                             (cons (car g$rest$5973$jXZPP) g$left$5974$jXZPP)
                             (cons
                               (g$cadr$5304$jXZPP g$rest$5973$jXZPP)
                               g$right$5975$jXZPP))))))))
           g$loop$5972$jXZPP)
         g$ls$5971$jXZPP
         '()
         '()))))
   (g$reverse-it$5968$jXZPP
     g$reverse-it$5993$jXZPP
     (case-lambda
       ((g$head$5976$jXZPP g$tail$5977$jXZPP)
        (if (null? g$head$5976$jXZPP)
          g$tail$5977$jXZPP
          (g$reverse-it$5968$jXZPP
            (cdr g$head$5976$jXZPP)
            (cons (car g$head$5976$jXZPP) g$tail$5977$jXZPP))))))
   (g$merge$5969$jXZPP
     g$merge$5994$jXZPP
     (case-lambda
       ((g$list-1$5978$jXZPP g$list-2$5979$jXZPP g$precedes?$5980$jXZPP)
        ((letrec ((g$loop$5981$jXZPP
                    (case-lambda
                      ((g$source-1$5982$jXZPP
                         g$source-2$5983$jXZPP
                         g$so-far$5984$jXZPP)
                       (if (null? g$source-1$5982$jXZPP)
                         (g$reverse-it$5968$jXZPP
                           g$so-far$5984$jXZPP
                           g$source-2$5983$jXZPP)
                         (if (null? g$source-2$5983$jXZPP)
                           (g$reverse-it$5968$jXZPP
                             g$so-far$5984$jXZPP
                             g$source-1$5982$jXZPP)
                           ((case-lambda
                              ((g$car-1$5985$jXZPP g$car-2$5986$jXZPP)
                               (if (g$precedes?$5980$jXZPP
                                     g$car-2$5986$jXZPP
                                     g$car-1$5985$jXZPP)
                                 (g$loop$5981$jXZPP
                                   g$source-1$5982$jXZPP
                                   (cdr g$source-2$5983$jXZPP)
                                   (cons
                                     g$car-2$5986$jXZPP
                                     g$so-far$5984$jXZPP))
                                 (g$loop$5981$jXZPP
                                   g$source-2$5983$jXZPP
                                   (cdr g$source-1$5982$jXZPP)
                                   (cons
                                     g$car-1$5985$jXZPP
                                     g$so-far$5984$jXZPP)))))
                            (car g$source-1$5982$jXZPP)
                            (car g$source-2$5983$jXZPP))))))))
           g$loop$5981$jXZPP)
         g$list-1$5978$jXZPP
         g$list-2$5979$jXZPP
         '()))))
   (g$list-sort$5970$jXZPP
     g$list-sort$5995$jXZPP
     (case-lambda
       ((g$precedes?$5987$jXZPP g$ls$5988$jXZPP)
        (if (null? g$ls$5988$jXZPP)
          '()
          ((letrec ((g$helper$5989$jXZPP
                      (case-lambda
                        ((g$piece$5990$jXZPP)
                         (if (null? (cdr g$piece$5990$jXZPP))
                           g$piece$5990$jXZPP
                           ((case-lambda
                              ((g$parts$5991$jXZPP)
                               (g$merge$5969$jXZPP
                                 (g$helper$5989$jXZPP (car g$parts$5991$jXZPP))
                                 (g$helper$5989$jXZPP (cdr g$parts$5991$jXZPP))
                                 g$precedes?$5987$jXZPP)))
                            (g$split$5967$jXZPP g$piece$5990$jXZPP)))))))
             g$helper$5989$jXZPP)
           g$ls$5988$jXZPP))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$6002$jXZPP
     g$string-ci=?$6068$jXZPP
     (case-lambda
       ((g$a$6018$jXZPP g$b$6019$jXZPP . g$rest$6020$jXZPP)
        (begin
          (if (not (string? g$a$6018$jXZPP))
            (assertion-violation 'string-ci=? '"not a string" g$a$6018$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6021$jXZPP)
               (begin
                 (if (not (string? g$x$6021$jXZPP))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$6021$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6022$jXZPP)
                     (begin
                       (set! g$a$6018$jXZPP g$x$6021$jXZPP)
                       g$r$6022$jXZPP)))
                  (= (string-ci-compare g$a$6018$jXZPP g$x$6021$jXZPP) '0)))))
            (cons g$b$6019$jXZPP g$rest$6020$jXZPP))))))
   (g$string-ci<?$6003$jXZPP
     g$string-ci<?$6069$jXZPP
     (case-lambda
       ((g$a$6023$jXZPP g$b$6024$jXZPP . g$rest$6025$jXZPP)
        (begin
          (if (not (string? g$a$6023$jXZPP))
            (assertion-violation 'string-ci<? '"not a string" g$a$6023$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6026$jXZPP)
               (begin
                 (if (not (string? g$x$6026$jXZPP))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$6026$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6027$jXZPP)
                     (begin
                       (set! g$a$6023$jXZPP g$x$6026$jXZPP)
                       g$r$6027$jXZPP)))
                  (< (string-ci-compare g$a$6023$jXZPP g$x$6026$jXZPP) '0)))))
            (cons g$b$6024$jXZPP g$rest$6025$jXZPP))))))
   (g$string-ci>?$6004$jXZPP
     g$string-ci>?$6070$jXZPP
     (case-lambda
       ((g$a$6028$jXZPP g$b$6029$jXZPP . g$rest$6030$jXZPP)
        (begin
          (if (not (string? g$a$6028$jXZPP))
            (assertion-violation 'string-ci>? '"not a string" g$a$6028$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6031$jXZPP)
               (begin
                 (if (not (string? g$x$6031$jXZPP))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$6031$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6032$jXZPP)
                     (begin
                       (set! g$a$6028$jXZPP g$x$6031$jXZPP)
                       g$r$6032$jXZPP)))
                  (> (string-ci-compare g$a$6028$jXZPP g$x$6031$jXZPP) '0)))))
            (cons g$b$6029$jXZPP g$rest$6030$jXZPP))))))
   (g$string-ci<=?$6005$jXZPP
     g$string-ci<=?$6071$jXZPP
     (case-lambda
       ((g$a$6033$jXZPP g$b$6034$jXZPP . g$rest$6035$jXZPP)
        (begin
          (if (not (string? g$a$6033$jXZPP))
            (assertion-violation 'string-ci<=? '"not a string" g$a$6033$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6036$jXZPP)
               (begin
                 (if (not (string? g$x$6036$jXZPP))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$6036$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6037$jXZPP)
                     (begin
                       (set! g$a$6033$jXZPP g$x$6036$jXZPP)
                       g$r$6037$jXZPP)))
                  (<= (string-ci-compare g$a$6033$jXZPP g$x$6036$jXZPP) '0)))))
            (cons g$b$6034$jXZPP g$rest$6035$jXZPP))))))
   (g$string-ci>=?$6006$jXZPP
     g$string-ci>=?$6072$jXZPP
     (case-lambda
       ((g$a$6038$jXZPP g$b$6039$jXZPP . g$rest$6040$jXZPP)
        (begin
          (if (not (string? g$a$6038$jXZPP))
            (assertion-violation 'string-ci>=? '"not a string" g$a$6038$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6041$jXZPP)
               (begin
                 (if (not (string? g$x$6041$jXZPP))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$6041$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6042$jXZPP)
                     (begin
                       (set! g$a$6038$jXZPP g$x$6041$jXZPP)
                       g$r$6042$jXZPP)))
                  (>= (string-ci-compare g$a$6038$jXZPP g$x$6041$jXZPP) '0)))))
            (cons g$b$6039$jXZPP g$rest$6040$jXZPP))))))
   (g$char-ci=?$6013$jXZPP
     g$char-ci=?$6073$jXZPP
     (case-lambda
       ((g$a$6043$jXZPP g$b$6044$jXZPP . g$rest$6045$jXZPP)
        (begin
          (if (not (char? g$a$6043$jXZPP))
            (assertion-violation 'char-ci=? '"not a char" g$a$6043$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6046$jXZPP)
               (begin
                 (if (not (char? g$x$6046$jXZPP))
                   (assertion-violation 'char-ci=? '"not a char" g$x$6046$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6047$jXZPP)
                     (begin
                       (set! g$a$6043$jXZPP g$x$6046$jXZPP)
                       g$r$6047$jXZPP)))
                  (= (char->integer (char-upcase g$a$6043$jXZPP))
                     (char->integer (char-upcase g$x$6046$jXZPP)))))))
            (cons g$b$6044$jXZPP g$rest$6045$jXZPP))))))
   (g$char-ci<?$6014$jXZPP
     g$char-ci<?$6074$jXZPP
     (case-lambda
       ((g$a$6048$jXZPP g$b$6049$jXZPP . g$rest$6050$jXZPP)
        (begin
          (if (not (char? g$a$6048$jXZPP))
            (assertion-violation 'char-ci<? '"not a char" g$a$6048$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6051$jXZPP)
               (begin
                 (if (not (char? g$x$6051$jXZPP))
                   (assertion-violation 'char-ci<? '"not a char" g$x$6051$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6052$jXZPP)
                     (begin
                       (set! g$a$6048$jXZPP g$x$6051$jXZPP)
                       g$r$6052$jXZPP)))
                  (< (char->integer (char-upcase g$a$6048$jXZPP))
                     (char->integer (char-upcase g$x$6051$jXZPP)))))))
            (cons g$b$6049$jXZPP g$rest$6050$jXZPP))))))
   (g$char-ci>?$6015$jXZPP
     g$char-ci>?$6075$jXZPP
     (case-lambda
       ((g$a$6053$jXZPP g$b$6054$jXZPP . g$rest$6055$jXZPP)
        (begin
          (if (not (char? g$a$6053$jXZPP))
            (assertion-violation 'char-ci>? '"not a char" g$a$6053$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6056$jXZPP)
               (begin
                 (if (not (char? g$x$6056$jXZPP))
                   (assertion-violation 'char-ci>? '"not a char" g$x$6056$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6057$jXZPP)
                     (begin
                       (set! g$a$6053$jXZPP g$x$6056$jXZPP)
                       g$r$6057$jXZPP)))
                  (> (char->integer (char-upcase g$a$6053$jXZPP))
                     (char->integer (char-upcase g$x$6056$jXZPP)))))))
            (cons g$b$6054$jXZPP g$rest$6055$jXZPP))))))
   (g$char-ci<=?$6016$jXZPP
     g$char-ci<=?$6076$jXZPP
     (case-lambda
       ((g$a$6058$jXZPP g$b$6059$jXZPP . g$rest$6060$jXZPP)
        (begin
          (if (not (char? g$a$6058$jXZPP))
            (assertion-violation 'char-ci<=? '"not a char" g$a$6058$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6061$jXZPP)
               (begin
                 (if (not (char? g$x$6061$jXZPP))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$6061$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6062$jXZPP)
                     (begin
                       (set! g$a$6058$jXZPP g$x$6061$jXZPP)
                       g$r$6062$jXZPP)))
                  (<= (char->integer (char-upcase g$a$6058$jXZPP))
                      (char->integer (char-upcase g$x$6061$jXZPP)))))))
            (cons g$b$6059$jXZPP g$rest$6060$jXZPP))))))
   (g$char-ci>=?$6017$jXZPP
     g$char-ci>=?$6077$jXZPP
     (case-lambda
       ((g$a$6063$jXZPP g$b$6064$jXZPP . g$rest$6065$jXZPP)
        (begin
          (if (not (char? g$a$6063$jXZPP))
            (assertion-violation 'char-ci>=? '"not a char" g$a$6063$jXZPP)
            (void))
          (g$for-all$5076$jXZPP
            (case-lambda
              ((g$x$6066$jXZPP)
               (begin
                 (if (not (char? g$x$6066$jXZPP))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$6066$jXZPP)
                   (void))
                 ((case-lambda
                    ((g$r$6067$jXZPP)
                     (begin
                       (set! g$a$6063$jXZPP g$x$6066$jXZPP)
                       g$r$6067$jXZPP)))
                  (>= (char->integer (char-upcase g$a$6063$jXZPP))
                      (char->integer (char-upcase g$x$6066$jXZPP)))))))
            (cons g$b$6064$jXZPP g$rest$6065$jXZPP)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$6078$jXZPP
     g$bitwise-if$6109$jXZPP
     (case-lambda
       ((g$ei1$6085$jXZPP g$ei2$6086$jXZPP g$ei3$6087$jXZPP)
        (bitwise-ior
          (bitwise-and g$ei1$6085$jXZPP g$ei2$6086$jXZPP)
          (bitwise-and (bitwise-not g$ei1$6085$jXZPP) g$ei3$6087$jXZPP)))))
   (g$bitwise-copy-bit$6079$jXZPP
     g$bitwise-copy-bit$6110$jXZPP
     (case-lambda
       ((g$ei1$6088$jXZPP g$ei2$6089$jXZPP g$ei3$6090$jXZPP)
        (g$bitwise-if$6078$jXZPP
          (g$bitwise-arithmetic-shift-left$6082$jXZPP '1 g$ei2$6089$jXZPP)
          (g$bitwise-arithmetic-shift-left$6082$jXZPP
            g$ei3$6090$jXZPP
            g$ei2$6089$jXZPP)
          g$ei1$6088$jXZPP))))
   (g$bitwise-bit-field$6080$jXZPP
     g$bitwise-bit-field$6111$jXZPP
     (case-lambda
       ((g$ei1$6091$jXZPP g$ei2$6092$jXZPP g$ei3$6093$jXZPP)
        (g$bitwise-arithmetic-shift-right$6083$jXZPP
          (bitwise-and
            g$ei1$6091$jXZPP
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6082$jXZPP
                '-1
                g$ei3$6093$jXZPP)))
          g$ei2$6092$jXZPP))))
   (g$bitwise-copy-bit-field$6081$jXZPP
     g$bitwise-copy-bit-field$6112$jXZPP
     (case-lambda
       ((g$to$6094$jXZPP g$start$6095$jXZPP g$end$6096$jXZPP g$from$6097$jXZPP)
        (g$bitwise-if$6078$jXZPP
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$6082$jXZPP '-1 g$start$6095$jXZPP)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6082$jXZPP
                '-1
                g$end$6096$jXZPP)))
          (g$bitwise-arithmetic-shift-left$6082$jXZPP
            g$from$6097$jXZPP
            g$start$6095$jXZPP)
          g$to$6094$jXZPP))))
   (g$bitwise-arithmetic-shift-left$6082$jXZPP
     g$bitwise-arithmetic-shift-left$6113$jXZPP
     (case-lambda
       ((g$ei1$6098$jXZPP g$ei2$6099$jXZPP)
        (bitwise-arithmetic-shift g$ei1$6098$jXZPP g$ei2$6099$jXZPP))))
   (g$bitwise-arithmetic-shift-right$6083$jXZPP
     g$bitwise-arithmetic-shift-right$6114$jXZPP
     (case-lambda
       ((g$ei1$6100$jXZPP g$ei2$6101$jXZPP)
        (bitwise-arithmetic-shift g$ei1$6100$jXZPP (- g$ei2$6101$jXZPP)))))
   (g$bitwise-rotate-bit-field$6084$jXZPP
     g$bitwise-rotate-bit-field$6115$jXZPP
     (case-lambda
       ((g$n$6102$jXZPP g$start$6103$jXZPP g$end$6104$jXZPP g$count$6105$jXZPP)
        ((case-lambda
           ((g$width$6106$jXZPP)
            (if (g$positive?$5331$jXZPP g$width$6106$jXZPP)
              ((case-lambda
                 ((g$count$6107$jXZPP g$field$6108$jXZPP)
                  (g$bitwise-copy-bit-field$6081$jXZPP
                    g$n$6102$jXZPP
                    g$start$6103$jXZPP
                    g$end$6104$jXZPP
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$6082$jXZPP
                        g$field$6108$jXZPP
                        g$count$6107$jXZPP)
                      (g$bitwise-arithmetic-shift-right$6083$jXZPP
                        g$field$6108$jXZPP
                        (- g$width$6106$jXZPP g$count$6107$jXZPP))))))
               (mod g$count$6105$jXZPP g$width$6106$jXZPP)
               (g$bitwise-bit-field$6080$jXZPP
                 g$n$6102$jXZPP
                 g$start$6103$jXZPP
                 g$end$6104$jXZPP))
              g$n$6102$jXZPP)))
         (- g$end$6104$jXZPP g$start$6103$jXZPP))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fx*/carry$6116$jXZPP
     g$fx*/carry$6165$jXZPP
     (case-lambda
       ((g$fx1$6126$jXZPP g$fx2$6127$jXZPP g$fx3$6128$jXZPP)
        ((case-lambda
           ((g$s$6129$jXZPP g$e$6130$jXZPP)
            (values
              (mod0 g$s$6129$jXZPP g$e$6130$jXZPP)
              (div0 g$s$6129$jXZPP g$e$6130$jXZPP))))
         (+ (* g$fx1$6126$jXZPP g$fx2$6127$jXZPP) g$fx3$6128$jXZPP)
         (expt '2 (fixnum-width))))))
   (g$fx-/carry$6117$jXZPP
     g$fx-/carry$6166$jXZPP
     (case-lambda
       ((g$fx1$6131$jXZPP g$fx2$6132$jXZPP g$fx3$6133$jXZPP)
        ((case-lambda
           ((g$s$6134$jXZPP g$e$6135$jXZPP)
            (values
              (mod0 g$s$6134$jXZPP g$e$6135$jXZPP)
              (div0 g$s$6134$jXZPP g$e$6135$jXZPP))))
         (- g$fx1$6131$jXZPP g$fx2$6132$jXZPP g$fx3$6133$jXZPP)
         (expt '2 (fixnum-width))))))
   (g$fx+/carry$6118$jXZPP
     g$fx+/carry$6167$jXZPP
     (case-lambda
       ((g$fx1$6136$jXZPP g$fx2$6137$jXZPP g$fx3$6138$jXZPP)
        ((case-lambda
           ((g$s$6139$jXZPP g$e$6140$jXZPP)
            (values
              (mod0 g$s$6139$jXZPP g$e$6140$jXZPP)
              (div0 g$s$6139$jXZPP g$e$6140$jXZPP))))
         (+ g$fx1$6136$jXZPP g$fx2$6137$jXZPP g$fx3$6138$jXZPP)
         (expt '2 (fixnum-width))))))
   (g$fxif$6119$jXZPP
     g$fxif$6168$jXZPP
     (case-lambda
       ((g$fx1$6141$jXZPP g$fx2$6142$jXZPP g$fx3$6143$jXZPP)
        (fxior
          (fxand g$fx1$6141$jXZPP g$fx2$6142$jXZPP)
          (fxand (fxnot g$fx1$6141$jXZPP) g$fx3$6143$jXZPP)))))
   (g$fxcopy-bit$6120$jXZPP
     g$fxcopy-bit$6169$jXZPP
     (case-lambda
       ((g$fx1$6144$jXZPP g$fx2$6145$jXZPP g$fx3$6146$jXZPP)
        (g$fxif$6119$jXZPP
          (g$fxarithmetic-shift-left$6123$jXZPP '1 g$fx2$6145$jXZPP)
          (g$fxarithmetic-shift-left$6123$jXZPP
            g$fx3$6146$jXZPP
            g$fx2$6145$jXZPP)
          g$fx1$6144$jXZPP))))
   (g$fxbit-field$6121$jXZPP
     g$fxbit-field$6170$jXZPP
     (case-lambda
       ((g$fx1$6147$jXZPP g$fx2$6148$jXZPP g$fx3$6149$jXZPP)
        (g$fxarithmetic-shift-right$6124$jXZPP
          (fxand
            g$fx1$6147$jXZPP
            (fxnot (g$fxarithmetic-shift-left$6123$jXZPP '-1 g$fx3$6149$jXZPP)))
          g$fx2$6148$jXZPP))))
   (g$fxcopy-bit-field$6122$jXZPP
     g$fxcopy-bit-field$6171$jXZPP
     (case-lambda
       ((g$to$6150$jXZPP g$start$6151$jXZPP g$end$6152$jXZPP g$from$6153$jXZPP)
        (g$fxif$6119$jXZPP
          (fxand
            (g$fxarithmetic-shift-left$6123$jXZPP '-1 g$start$6151$jXZPP)
            (fxnot (g$fxarithmetic-shift-left$6123$jXZPP '-1 g$end$6152$jXZPP)))
          (g$fxarithmetic-shift-left$6123$jXZPP
            g$from$6153$jXZPP
            g$start$6151$jXZPP)
          g$to$6150$jXZPP))))
   (g$fxarithmetic-shift-left$6123$jXZPP
     g$fxarithmetic-shift-left$6172$jXZPP
     (case-lambda
       ((g$fx1$6154$jXZPP g$fx2$6155$jXZPP)
        (fxarithmetic-shift g$fx1$6154$jXZPP g$fx2$6155$jXZPP))))
   (g$fxarithmetic-shift-right$6124$jXZPP
     g$fxarithmetic-shift-right$6173$jXZPP
     (case-lambda
       ((g$fx1$6156$jXZPP g$fx2$6157$jXZPP)
        (fxarithmetic-shift g$fx1$6156$jXZPP (fx- g$fx2$6157$jXZPP)))))
   (g$fxrotate-bit-field$6125$jXZPP
     g$fxrotate-bit-field$6174$jXZPP
     (case-lambda
       ((g$n$6158$jXZPP g$start$6159$jXZPP g$end$6160$jXZPP g$count$6161$jXZPP)
        ((case-lambda
           ((g$width$6162$jXZPP)
            (if (fxpositive? g$width$6162$jXZPP)
              ((case-lambda
                 ((g$count$6163$jXZPP g$field$6164$jXZPP)
                  (g$fxcopy-bit-field$6122$jXZPP
                    g$n$6158$jXZPP
                    g$start$6159$jXZPP
                    g$end$6160$jXZPP
                    (fxior
                      (g$fxarithmetic-shift-left$6123$jXZPP
                        g$field$6164$jXZPP
                        g$count$6163$jXZPP)
                      (g$fxarithmetic-shift-right$6124$jXZPP
                        g$field$6164$jXZPP
                        (fx- g$width$6162$jXZPP g$count$6163$jXZPP))))))
               (fxmod g$count$6161$jXZPP g$width$6162$jXZPP)
               (g$fxbit-field$6121$jXZPP
                 g$n$6158$jXZPP
                 g$start$6159$jXZPP
                 g$end$6160$jXZPP))
              g$n$6158$jXZPP)))
         (fx- g$end$6160$jXZPP g$start$6159$jXZPP))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7218$6175$jXZPP
     g$7218$6187$jXZPP
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7221$jXZPP
       '#f
       '#f
       '#()))
   (g$7220$6176$jXZPP g$7220$6188$jXZPP '#f)
   (g$7219$6177$jXZPP
     g$7219$6189$jXZPP
     (make-record-constructor-descriptor
       g$7218$6175$jXZPP
       &implementation-restriction-rcd
       g$7220$6176$jXZPP))
   (g$7217$6178$jXZPP
     g$7217$6190$jXZPP
     (record-predicate g$7218$6175$jXZPP))
   (g$make-no-infinities-violation$6179$jXZPP
     g$make-no-infinities-violation$6191$jXZPP
     (record-constructor g$7219$6177$jXZPP))
   (g$no-infinities-violation?$6180$jXZPP
     g$no-infinities-violation?$6192$jXZPP
     (condition-predicate g$7218$6175$jXZPP))
   (g$7232$6181$jXZPP
     g$7232$6193$jXZPP
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7235$jXZPP
       '#f
       '#f
       '#()))
   (g$7234$6182$jXZPP g$7234$6194$jXZPP '#f)
   (g$7233$6183$jXZPP
     g$7233$6195$jXZPP
     (make-record-constructor-descriptor
       g$7232$6181$jXZPP
       &implementation-restriction-rcd
       g$7234$6182$jXZPP))
   (g$7231$6184$jXZPP
     g$7231$6196$jXZPP
     (record-predicate g$7232$6181$jXZPP))
   (g$make-no-nans-violation$6185$jXZPP
     g$make-no-nans-violation$6197$jXZPP
     (record-constructor g$7233$6183$jXZPP))
   (g$no-nans-violation?$6186$jXZPP
     g$no-nans-violation?$6198$jXZPP
     (condition-predicate g$7232$6181$jXZPP)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7247$6199$jXZPP
     g$7247$6279$jXZPP
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7250$jXZPP
       '#f
       '#f
       '#()))
   (g$7249$6200$jXZPP g$7249$6280$jXZPP '#f)
   (g$7248$6201$jXZPP
     g$7248$6281$jXZPP
     (make-record-constructor-descriptor
       g$7247$6199$jXZPP
       &error-rcd
       g$7249$6200$jXZPP))
   (g$7246$6202$jXZPP
     g$7246$6282$jXZPP
     (record-predicate g$7247$6199$jXZPP))
   (g$make-i/o-error$6203$jXZPP
     g$make-i/o-error$6283$jXZPP
     (record-constructor g$7248$6201$jXZPP))
   (g$i/o-error?$6204$jXZPP
     g$i/o-error?$6284$jXZPP
     (condition-predicate g$7247$6199$jXZPP))
   (g$7261$6205$jXZPP
     g$7261$6285$jXZPP
     (make-record-type-descriptor
       '&i/o-read
       g$7247$6199$jXZPP
       'g$7264$jXZPP
       '#f
       '#f
       '#()))
   (g$7263$6206$jXZPP g$7263$6286$jXZPP '#f)
   (g$7262$6207$jXZPP
     g$7262$6287$jXZPP
     (make-record-constructor-descriptor
       g$7261$6205$jXZPP
       g$7248$6201$jXZPP
       g$7263$6206$jXZPP))
   (g$7260$6208$jXZPP
     g$7260$6288$jXZPP
     (record-predicate g$7261$6205$jXZPP))
   (g$make-i/o-read-error$6209$jXZPP
     g$make-i/o-read-error$6289$jXZPP
     (record-constructor g$7262$6207$jXZPP))
   (g$i/o-read-error?$6210$jXZPP
     g$i/o-read-error?$6290$jXZPP
     (condition-predicate g$7261$6205$jXZPP))
   (g$7275$6211$jXZPP
     g$7275$6291$jXZPP
     (make-record-type-descriptor
       '&i/o-write
       g$7247$6199$jXZPP
       'g$7278$jXZPP
       '#f
       '#f
       '#()))
   (g$7277$6212$jXZPP g$7277$6292$jXZPP '#f)
   (g$7276$6213$jXZPP
     g$7276$6293$jXZPP
     (make-record-constructor-descriptor
       g$7275$6211$jXZPP
       g$7248$6201$jXZPP
       g$7277$6212$jXZPP))
   (g$7274$6214$jXZPP
     g$7274$6294$jXZPP
     (record-predicate g$7275$6211$jXZPP))
   (g$make-i/o-write-error$6215$jXZPP
     g$make-i/o-write-error$6295$jXZPP
     (record-constructor g$7276$6213$jXZPP))
   (g$i/o-write-error?$6216$jXZPP
     g$i/o-write-error?$6296$jXZPP
     (condition-predicate g$7275$6211$jXZPP))
   (g$7290$6217$jXZPP
     g$7290$6297$jXZPP
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7247$6199$jXZPP
       'g$7293$jXZPP
       '#f
       '#f
       '#((immutable position))))
   (g$7292$6218$jXZPP g$7292$6298$jXZPP '#f)
   (g$7291$6219$jXZPP
     g$7291$6299$jXZPP
     (make-record-constructor-descriptor
       g$7290$6217$jXZPP
       g$7248$6201$jXZPP
       g$7292$6218$jXZPP))
   (g$7289$6220$jXZPP
     g$7289$6300$jXZPP
     (record-predicate g$7290$6217$jXZPP))
   (g$make-i/o-invalid-position-error$6221$jXZPP
     g$make-i/o-invalid-position-error$6301$jXZPP
     (record-constructor g$7291$6219$jXZPP))
   (g$7288$6222$jXZPP
     g$7288$6302$jXZPP
     (record-accessor g$7290$6217$jXZPP '0))
   (g$i/o-invalid-position-error?$6223$jXZPP
     g$i/o-invalid-position-error?$6303$jXZPP
     (condition-predicate g$7290$6217$jXZPP))
   (g$i/o-error-position$6224$jXZPP
     g$i/o-error-position$6304$jXZPP
     (condition-accessor g$7290$6217$jXZPP g$7288$6222$jXZPP))
   (g$7307$6225$jXZPP
     g$7307$6305$jXZPP
     (make-record-type-descriptor
       '&i/o-filename
       g$7247$6199$jXZPP
       'g$7310$jXZPP
       '#f
       '#f
       '#((immutable filename))))
   (g$7309$6226$jXZPP g$7309$6306$jXZPP '#f)
   (g$7308$6227$jXZPP
     g$7308$6307$jXZPP
     (make-record-constructor-descriptor
       g$7307$6225$jXZPP
       g$7248$6201$jXZPP
       g$7309$6226$jXZPP))
   (g$7306$6228$jXZPP
     g$7306$6308$jXZPP
     (record-predicate g$7307$6225$jXZPP))
   (g$make-i/o-filename-error$6229$jXZPP
     g$make-i/o-filename-error$6309$jXZPP
     (record-constructor g$7308$6227$jXZPP))
   (g$7305$6230$jXZPP
     g$7305$6310$jXZPP
     (record-accessor g$7307$6225$jXZPP '0))
   (g$i/o-filename-error?$6231$jXZPP
     g$i/o-filename-error?$6311$jXZPP
     (condition-predicate g$7307$6225$jXZPP))
   (g$i/o-error-filename$6232$jXZPP
     g$i/o-error-filename$6312$jXZPP
     (condition-accessor g$7307$6225$jXZPP g$7305$6230$jXZPP))
   (g$7323$6233$jXZPP
     g$7323$6313$jXZPP
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7307$6225$jXZPP
       'g$7326$jXZPP
       '#f
       '#f
       '#()))
   (g$7325$6234$jXZPP g$7325$6314$jXZPP '#f)
   (g$7324$6235$jXZPP
     g$7324$6315$jXZPP
     (make-record-constructor-descriptor
       g$7323$6233$jXZPP
       g$7308$6227$jXZPP
       g$7325$6234$jXZPP))
   (g$7322$6236$jXZPP
     g$7322$6316$jXZPP
     (record-predicate g$7323$6233$jXZPP))
   (g$make-i/o-file-protection-error$6237$jXZPP
     g$make-i/o-file-protection-error$6317$jXZPP
     (record-constructor g$7324$6235$jXZPP))
   (g$i/o-file-protection-error?$6238$jXZPP
     g$i/o-file-protection-error?$6318$jXZPP
     (condition-predicate g$7323$6233$jXZPP))
   (g$7337$6239$jXZPP
     g$7337$6319$jXZPP
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7323$6233$jXZPP
       'g$7340$jXZPP
       '#f
       '#f
       '#()))
   (g$7339$6240$jXZPP g$7339$6320$jXZPP '#f)
   (g$7338$6241$jXZPP
     g$7338$6321$jXZPP
     (make-record-constructor-descriptor
       g$7337$6239$jXZPP
       g$7324$6235$jXZPP
       g$7339$6240$jXZPP))
   (g$7336$6242$jXZPP
     g$7336$6322$jXZPP
     (record-predicate g$7337$6239$jXZPP))
   (g$make-i/o-file-is-read-only-error$6243$jXZPP
     g$make-i/o-file-is-read-only-error$6323$jXZPP
     (record-constructor g$7338$6241$jXZPP))
   (g$i/o-file-is-read-only-error?$6244$jXZPP
     g$i/o-file-is-read-only-error?$6324$jXZPP
     (condition-predicate g$7337$6239$jXZPP))
   (g$7351$6245$jXZPP
     g$7351$6325$jXZPP
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7307$6225$jXZPP
       'g$7354$jXZPP
       '#f
       '#f
       '#()))
   (g$7353$6246$jXZPP g$7353$6326$jXZPP '#f)
   (g$7352$6247$jXZPP
     g$7352$6327$jXZPP
     (make-record-constructor-descriptor
       g$7351$6245$jXZPP
       g$7308$6227$jXZPP
       g$7353$6246$jXZPP))
   (g$7350$6248$jXZPP
     g$7350$6328$jXZPP
     (record-predicate g$7351$6245$jXZPP))
   (g$make-i/o-file-already-exists-error$6249$jXZPP
     g$make-i/o-file-already-exists-error$6329$jXZPP
     (record-constructor g$7352$6247$jXZPP))
   (g$i/o-file-already-exists-error?$6250$jXZPP
     g$i/o-file-already-exists-error?$6330$jXZPP
     (condition-predicate g$7351$6245$jXZPP))
   (g$7365$6251$jXZPP
     g$7365$6331$jXZPP
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7307$6225$jXZPP
       'g$7368$jXZPP
       '#f
       '#f
       '#()))
   (g$7367$6252$jXZPP g$7367$6332$jXZPP '#f)
   (g$7366$6253$jXZPP
     g$7366$6333$jXZPP
     (make-record-constructor-descriptor
       g$7365$6251$jXZPP
       g$7308$6227$jXZPP
       g$7367$6252$jXZPP))
   (g$7364$6254$jXZPP
     g$7364$6334$jXZPP
     (record-predicate g$7365$6251$jXZPP))
   (g$make-i/o-file-does-not-exist-error$6255$jXZPP
     g$make-i/o-file-does-not-exist-error$6335$jXZPP
     (record-constructor g$7366$6253$jXZPP))
   (g$i/o-file-does-not-exist-error?$6256$jXZPP
     g$i/o-file-does-not-exist-error?$6336$jXZPP
     (condition-predicate g$7365$6251$jXZPP))
   (g$7380$6257$jXZPP
     g$7380$6337$jXZPP
     (make-record-type-descriptor
       '&i/o-port
       g$7247$6199$jXZPP
       'g$7383$jXZPP
       '#f
       '#f
       '#((immutable port))))
   (g$7382$6258$jXZPP g$7382$6338$jXZPP '#f)
   (g$7381$6259$jXZPP
     g$7381$6339$jXZPP
     (make-record-constructor-descriptor
       g$7380$6257$jXZPP
       g$7248$6201$jXZPP
       g$7382$6258$jXZPP))
   (g$7379$6260$jXZPP
     g$7379$6340$jXZPP
     (record-predicate g$7380$6257$jXZPP))
   (g$make-i/o-port-error$6261$jXZPP
     g$make-i/o-port-error$6341$jXZPP
     (record-constructor g$7381$6259$jXZPP))
   (g$7378$6262$jXZPP
     g$7378$6342$jXZPP
     (record-accessor g$7380$6257$jXZPP '0))
   (g$i/o-port-error?$6263$jXZPP
     g$i/o-port-error?$6343$jXZPP
     (condition-predicate g$7380$6257$jXZPP))
   (g$i/o-error-port$6264$jXZPP
     g$i/o-error-port$6344$jXZPP
     (condition-accessor g$7380$6257$jXZPP g$7378$6262$jXZPP))
   (g$7396$6265$jXZPP
     g$7396$6345$jXZPP
     (make-record-type-descriptor
       '&i/o-decoding
       g$7380$6257$jXZPP
       'g$7399$jXZPP
       '#f
       '#f
       '#()))
   (g$7398$6266$jXZPP g$7398$6346$jXZPP '#f)
   (g$7397$6267$jXZPP
     g$7397$6347$jXZPP
     (make-record-constructor-descriptor
       g$7396$6265$jXZPP
       g$7381$6259$jXZPP
       g$7398$6266$jXZPP))
   (g$7395$6268$jXZPP
     g$7395$6348$jXZPP
     (record-predicate g$7396$6265$jXZPP))
   (g$make-i/o-decoding-error$6269$jXZPP
     g$make-i/o-decoding-error$6349$jXZPP
     (record-constructor g$7397$6267$jXZPP))
   (g$i/o-decoding-error?$6270$jXZPP
     g$i/o-decoding-error?$6350$jXZPP
     (condition-predicate g$7396$6265$jXZPP))
   (g$7411$6271$jXZPP
     g$7411$6351$jXZPP
     (make-record-type-descriptor
       '&i/o-encoding
       g$7380$6257$jXZPP
       'g$7414$jXZPP
       '#f
       '#f
       '#((immutable char))))
   (g$7413$6272$jXZPP g$7413$6352$jXZPP '#f)
   (g$7412$6273$jXZPP
     g$7412$6353$jXZPP
     (make-record-constructor-descriptor
       g$7411$6271$jXZPP
       g$7381$6259$jXZPP
       g$7413$6272$jXZPP))
   (g$7410$6274$jXZPP
     g$7410$6354$jXZPP
     (record-predicate g$7411$6271$jXZPP))
   (g$make-i/o-encoding-error$6275$jXZPP
     g$make-i/o-encoding-error$6355$jXZPP
     (record-constructor g$7412$6273$jXZPP))
   (g$7409$6276$jXZPP
     g$7409$6356$jXZPP
     (record-accessor g$7411$6271$jXZPP '0))
   (g$i/o-encoding-error?$6277$jXZPP
     g$i/o-encoding-error?$6357$jXZPP
     (condition-predicate g$7411$6271$jXZPP))
   (g$i/o-encoding-error-char$6278$jXZPP
     g$i/o-encoding-error-char$6358$jXZPP
     (condition-accessor g$7411$6271$jXZPP g$7409$6276$jXZPP)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$6360$jXZPP
     g$using$6376$jXZPP
     (clr-using-internal 'ironscheme.runtime))
   (g$get-output-string$6361$jXZPP
     g$get-output-string$6377$jXZPP
     (case-lambda
       ((g$port$6367$jXZPP)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6367$jXZPP))))
   (g$open-output-string$6362$jXZPP
     g$open-output-string$6378$jXZPP
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6363$jXZPP
     g$open-string-output-port$6379$jXZPP
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6368$jXZPP)
            (values
              g$p$6368$jXZPP
              (case-lambda
                (() (g$get-output-string$6361$jXZPP g$p$6368$jXZPP))))))
         (g$open-output-string$6362$jXZPP)))))
   (g$port?$6364$jXZPP
     g$port?$6380$jXZPP
     (case-lambda
       ((g$obj$6369$jXZPP)
        ((case-lambda
           ((g$t$6370$jXZPP)
            (if g$t$6370$jXZPP
              g$t$6370$jXZPP
              (begin '#f (binary-port? g$obj$6369$jXZPP)))))
         (textual-port? g$obj$6369$jXZPP)))))
   (g$call-with-string-output-port$6365$jXZPP
     g$call-with-string-output-port$6381$jXZPP
     (case-lambda
       ((g$proc$6371$jXZPP)
        ((case-lambda
           ((g$p$6372$jXZPP)
            (begin
              (g$call-with-port$6366$jXZPP g$p$6372$jXZPP g$proc$6371$jXZPP)
              (g$get-output-string$6361$jXZPP g$p$6372$jXZPP))))
         (g$open-output-string$6362$jXZPP)))))
   (g$call-with-port$6366$jXZPP
     g$call-with-port$6382$jXZPP
     (case-lambda
       ((g$port$6373$jXZPP g$proc$6374$jXZPP)
        ((case-lambda
           ((g$r$6375$jXZPP)
            (begin (close-port g$port$6373$jXZPP) g$r$6375$jXZPP)))
         (g$proc$6374$jXZPP g$port$6373$jXZPP))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$6383$jXZPP
     g$peek-char$6425$jXZPP
     (case-lambda
       (() (g$peek-char$6383$jXZPP (current-input-port)))
       ((g$port$6397$jXZPP) (lookahead-char g$port$6397$jXZPP))))
   (g$read-char$6384$jXZPP
     g$read-char$6426$jXZPP
     (case-lambda
       (() (g$read-char$6384$jXZPP (current-input-port)))
       ((g$port$6398$jXZPP) (get-char g$port$6398$jXZPP))))
   (g$write-char$6385$jXZPP
     g$write-char$6427$jXZPP
     (case-lambda
       ((g$chr$6399$jXZPP)
        (g$write-char$6385$jXZPP g$chr$6399$jXZPP (current-output-port)))
       ((g$chr$6400$jXZPP g$port$6401$jXZPP)
        (put-char g$port$6401$jXZPP g$chr$6400$jXZPP))))
   (g$with-input-from-file$6392$jXZPP
     g$with-input-from-file$6428$jXZPP
     (case-lambda
       ((g$filename$6402$jXZPP g$thunk$6403$jXZPP)
        ((case-lambda
           ((g$current-input-port$6406$jXZPP g$t$6407$jXZPP)
            ((case-lambda
               ((g$swap$6408$jXZPP)
                (dynamic-wind
                  g$swap$6408$jXZPP
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6403$jXZPP)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6408$jXZPP)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6409$jXZPP)
                    (begin
                      (g$current-input-port$6406$jXZPP g$t$6407$jXZPP)
                      (set! g$t$6407$jXZPP g$t$6409$jXZPP))))
                 (g$current-input-port$6406$jXZPP)))))))
         current-input-port
         (open-input-file g$filename$6402$jXZPP)))))
   (g$with-output-to-file$6393$jXZPP
     g$with-output-to-file$6429$jXZPP
     (case-lambda
       ((g$filename$6410$jXZPP g$thunk$6411$jXZPP)
        ((case-lambda
           ((g$current-output-port$6414$jXZPP g$t$6415$jXZPP)
            ((case-lambda
               ((g$swap$6416$jXZPP)
                (dynamic-wind
                  g$swap$6416$jXZPP
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6411$jXZPP)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6416$jXZPP)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6417$jXZPP)
                    (begin
                      (g$current-output-port$6414$jXZPP g$t$6415$jXZPP)
                      (set! g$t$6415$jXZPP g$t$6417$jXZPP))))
                 (g$current-output-port$6414$jXZPP)))))))
         current-output-port
         (open-output-file g$filename$6410$jXZPP)))))
   (g$call-with-input-file$6394$jXZPP
     g$call-with-input-file$6430$jXZPP
     (case-lambda
       ((g$filename$6418$jXZPP g$proc$6419$jXZPP)
        ((case-lambda
           ((g$p$6420$jXZPP)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6419$jXZPP g$p$6420$jXZPP)))
              (case-lambda (() (close-input-port g$p$6420$jXZPP))))))
         (open-input-file g$filename$6418$jXZPP)))))
   (g$call-with-output-file$6395$jXZPP
     g$call-with-output-file$6431$jXZPP
     (case-lambda
       ((g$filename$6421$jXZPP g$proc$6422$jXZPP)
        ((case-lambda
           ((g$p$6423$jXZPP)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6422$jXZPP g$p$6423$jXZPP)))
              (case-lambda (() (close-output-port g$p$6423$jXZPP))))))
         (open-output-file g$filename$6421$jXZPP)))))
   (g$newline$6396$jXZPP
     g$newline$6432$jXZPP
     (case-lambda
       (() (g$newline$6396$jXZPP (current-output-port)))
       ((g$port$6424$jXZPP) (display '"
" g$port$6424$jXZPP)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7496$6433$jXZPP
     g$7496$6542$jXZPP
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7498$6434$jXZPP g$7498$6543$jXZPP '#f)
   (g$7497$6435$jXZPP
     g$7497$6544$jXZPP
     (make-record-constructor-descriptor
       g$7496$6433$jXZPP
       '#f
       g$7498$6434$jXZPP))
   (g$enum?$6436$jXZPP
     g$enum?$6545$jXZPP
     (record-predicate g$7496$6433$jXZPP))
   (g$make-enum$6437$jXZPP
     g$make-enum$6546$jXZPP
     (record-constructor g$7497$6435$jXZPP))
   (g$enum-value$6438$jXZPP
     g$enum-value$6547$jXZPP
     (record-accessor g$7496$6433$jXZPP '0))
   (g$enum-info$6439$jXZPP
     g$enum-info$6548$jXZPP
     (record-accessor g$7496$6433$jXZPP '1))
   (g$7509$6440$jXZPP
     g$7509$6549$jXZPP
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7511$6441$jXZPP g$7511$6550$jXZPP '#f)
   (g$7510$6442$jXZPP
     g$7510$6551$jXZPP
     (make-record-constructor-descriptor
       g$7509$6440$jXZPP
       '#f
       g$7511$6441$jXZPP))
   (g$enum-universe?$6443$jXZPP
     g$enum-universe?$6552$jXZPP
     (record-predicate g$7509$6440$jXZPP))
   (g$make-enum-universe$6444$jXZPP
     g$make-enum-universe$6553$jXZPP
     (record-constructor g$7510$6442$jXZPP))
   (g$enum-universe-id$6445$jXZPP
     g$enum-universe-id$6554$jXZPP
     (record-accessor g$7509$6440$jXZPP '0))
   (g$enum-universe-symbols$6446$jXZPP
     g$enum-universe-symbols$6555$jXZPP
     (record-accessor g$7509$6440$jXZPP '1))
   (g$enum-universe-mapping$6447$jXZPP
     g$enum-universe-mapping$6556$jXZPP
     (record-accessor g$7509$6440$jXZPP '2))
   (g$enum-universe-value$6448$jXZPP
     g$enum-universe-value$6557$jXZPP
     (record-accessor g$7509$6440$jXZPP '3))
   (g$enum-type=?$6449$jXZPP
     g$enum-type=?$6558$jXZPP
     (case-lambda
       ((g$enumset1$6471$jXZPP g$enumset2$6472$jXZPP)
        (eq? (g$enum-universe-id$6445$jXZPP
               (g$enum-info$6439$jXZPP g$enumset1$6471$jXZPP))
             (g$enum-universe-id$6445$jXZPP
               (g$enum-info$6439$jXZPP g$enumset2$6472$jXZPP))))))
   (g$get-symbols$6450$jXZPP
     g$get-symbols$6559$jXZPP
     (case-lambda
       ((g$enumset$6473$jXZPP)
        (g$enum-universe-symbols$6446$jXZPP
          (g$enum-info$6439$jXZPP g$enumset$6473$jXZPP)))))
   (g$get-value$6451$jXZPP
     g$get-value$6560$jXZPP
     (case-lambda
       ((g$enumset$6474$jXZPP g$s$6475$jXZPP)
        (g$hashtable-ref$5584$jXZPP
          (g$enum-universe-mapping$6447$jXZPP
            (g$enum-info$6439$jXZPP g$enumset$6474$jXZPP))
          g$s$6475$jXZPP
          '#f))))
   (g$assert-enum$6452$jXZPP
     g$assert-enum$6561$jXZPP
     (case-lambda
       ((g$who$6476$jXZPP g$enumset$6477$jXZPP)
        (if (not (g$enum?$6436$jXZPP g$enumset$6477$jXZPP))
          (assertion-violation
            g$who$6476$jXZPP
            '"not an enumeration"
            g$enumset$6477$jXZPP)
          (void)))))
   (g$make-info$6453$jXZPP
     g$make-info$6562$jXZPP
     (case-lambda
       ((g$symbols$6478$jXZPP)
        ((case-lambda
           ((g$ht$6479$jXZPP)
            ((letrec ((g$f$6480$jXZPP
                        (case-lambda
                          ((g$s$6481$jXZPP g$a$6482$jXZPP g$mask$6483$jXZPP)
                           (if (null? g$s$6481$jXZPP)
                             (values
                               (reverse! g$a$6482$jXZPP)
                               g$ht$6479$jXZPP
                               (- g$mask$6483$jXZPP '1))
                             ((case-lambda
                                ((g$n$6484$jXZPP)
                                 (if (symbol? g$n$6484$jXZPP)
                                   (if (g$hashtable-contains?$5587$jXZPP
                                         g$ht$6479$jXZPP
                                         g$n$6484$jXZPP)
                                     (g$f$6480$jXZPP
                                       (cdr g$s$6481$jXZPP)
                                       g$a$6482$jXZPP
                                       g$mask$6483$jXZPP)
                                     (begin
                                       (g$hashtable-set!$5585$jXZPP
                                         g$ht$6479$jXZPP
                                         g$n$6484$jXZPP
                                         g$mask$6483$jXZPP)
                                       (g$f$6480$jXZPP
                                         (cdr g$s$6481$jXZPP)
                                         (cons g$n$6484$jXZPP g$a$6482$jXZPP)
                                         (g$bitwise-arithmetic-shift-left$6113$jXZPP
                                           g$mask$6483$jXZPP
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6484$jXZPP))))
                              (car g$s$6481$jXZPP)))))))
               g$f$6480$jXZPP)
             g$symbols$6478$jXZPP
             '()
             '1)))
         (g$make-eq-hashtable$5581$jXZPP)))))
   (g$make-name$6454$jXZPP
     g$make-name$6563$jXZPP
     (case-lambda
       ((g$symbols$6485$jXZPP)
        (string->symbol (g$format$6602$jXZPP '"~a" g$symbols$6485$jXZPP)))))
   (g$make-enumeration$6455$jXZPP
     g$make-enumeration$6564$jXZPP
     (case-lambda
       ((g$symbols$6486$jXZPP)
        (call-with-values
          (case-lambda (() (g$make-info$6453$jXZPP g$symbols$6486$jXZPP)))
          (case-lambda
            ((g$s$6490$jXZPP g$mapping$6491$jXZPP g$mask$6492$jXZPP)
             ((case-lambda
                ((g$mask$6493$jXZPP g$mapping$6494$jXZPP g$s$6495$jXZPP)
                 (g$make-enum$6437$jXZPP
                   g$mask$6493$jXZPP
                   (g$make-enum-universe$6444$jXZPP
                     (g$make-name$6454$jXZPP g$s$6495$jXZPP)
                     g$s$6495$jXZPP
                     g$mapping$6494$jXZPP
                     g$mask$6493$jXZPP))))
              g$mask$6492$jXZPP
              g$mapping$6491$jXZPP
              g$s$6490$jXZPP)))))))
   (g$enum-set-universe$6456$jXZPP
     g$enum-set-universe$6565$jXZPP
     (case-lambda
       ((g$enumset$6496$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set-universe g$enumset$6496$jXZPP)
          ((case-lambda
             ((g$ei$6497$jXZPP)
              (g$make-enum$6437$jXZPP
                (g$enum-universe-value$6448$jXZPP g$ei$6497$jXZPP)
                g$ei$6497$jXZPP)))
           (g$enum-info$6439$jXZPP g$enumset$6496$jXZPP))))))
   (g$enum-set-indexer$6457$jXZPP
     g$enum-set-indexer$6566$jXZPP
     (case-lambda
       ((g$enumset$6498$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set-indexer g$enumset$6498$jXZPP)
          (case-lambda
            ((g$symbol$6499$jXZPP)
             (begin
               (if (not (symbol? g$symbol$6499$jXZPP))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6499$jXZPP)
                 (void))
               ((case-lambda
                  ((g$v$6500$jXZPP)
                   (if g$v$6500$jXZPP
                     (- (bitwise-length g$v$6500$jXZPP) '1)
                     '#f)))
                (g$get-value$6451$jXZPP
                  g$enumset$6498$jXZPP
                  g$symbol$6499$jXZPP)))))))))
   (g$enum-set-constructor$6458$jXZPP
     g$enum-set-constructor$6567$jXZPP
     (case-lambda
       ((g$enumset$6501$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set-constructor g$enumset$6501$jXZPP)
          (case-lambda
            ((g$symbols$6502$jXZPP)
             ((letrec ((g$f$6503$jXZPP
                         (case-lambda
                           ((g$v$6504$jXZPP g$s$6505$jXZPP)
                            (if (null? g$s$6505$jXZPP)
                              (g$make-enum$6437$jXZPP
                                g$v$6504$jXZPP
                                (g$enum-info$6439$jXZPP g$enumset$6501$jXZPP))
                              ((case-lambda
                                 ((g$n$6506$jXZPP)
                                  (if (symbol? g$n$6506$jXZPP)
                                    ((case-lambda
                                       ((g$v*$6507$jXZPP)
                                        (if g$v*$6507$jXZPP
                                          (g$f$6503$jXZPP
                                            (bitwise-ior
                                              g$v$6504$jXZPP
                                              g$v*$6507$jXZPP)
                                            (cdr g$s$6505$jXZPP))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6506$jXZPP))))
                                     (g$get-value$6451$jXZPP
                                       g$enumset$6501$jXZPP
                                       g$n$6506$jXZPP))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6506$jXZPP))))
                               (car g$s$6505$jXZPP)))))))
                g$f$6503$jXZPP)
              '0
              g$symbols$6502$jXZPP)))))))
   (g$enum-set->list$6459$jXZPP
     g$enum-set->list$6568$jXZPP
     (case-lambda
       ((g$enumset$6508$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set->list g$enumset$6508$jXZPP)
          ((case-lambda
             ((g$value$6509$jXZPP)
              ((letrec ((g$f$6510$jXZPP
                          (case-lambda
                            ((g$s$6511$jXZPP g$l$6512$jXZPP)
                             (if (null? g$s$6511$jXZPP)
                               (reverse! g$l$6512$jXZPP)
                               (if (g$zero?$5333$jXZPP
                                     (bitwise-and
                                       (g$get-value$6451$jXZPP
                                         g$enumset$6508$jXZPP
                                         (car g$s$6511$jXZPP))
                                       g$value$6509$jXZPP))
                                 (g$f$6510$jXZPP
                                   (cdr g$s$6511$jXZPP)
                                   g$l$6512$jXZPP)
                                 (g$f$6510$jXZPP
                                   (cdr g$s$6511$jXZPP)
                                   (cons
                                     (car g$s$6511$jXZPP)
                                     g$l$6512$jXZPP))))))))
                 g$f$6510$jXZPP)
               (g$get-symbols$6450$jXZPP g$enumset$6508$jXZPP)
               '())))
           (g$enum-value$6438$jXZPP g$enumset$6508$jXZPP))))))
   (g$enum-set-member?$6460$jXZPP
     g$enum-set-member?$6569$jXZPP
     (case-lambda
       ((g$symbol$6513$jXZPP g$enumset$6514$jXZPP)
        (begin
          (if (not (symbol? g$symbol$6513$jXZPP))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6513$jXZPP)
            (void))
          (g$assert-enum$6452$jXZPP 'enum-set-member? g$enumset$6514$jXZPP)
          ((case-lambda
             ((g$v$6515$jXZPP)
              (if g$v$6515$jXZPP
                (not (g$zero?$5333$jXZPP
                       (bitwise-and
                         g$v$6515$jXZPP
                         (g$enum-value$6438$jXZPP g$enumset$6514$jXZPP))))
                '#f)))
           (g$get-value$6451$jXZPP
             g$enumset$6514$jXZPP
             g$symbol$6513$jXZPP))))))
   (g$enum-set-subset?$6461$jXZPP
     g$enum-set-subset?$6570$jXZPP
     (case-lambda
       ((g$enumset1$6516$jXZPP g$enumset2$6517$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set-subset? g$enumset1$6516$jXZPP)
          (g$assert-enum$6452$jXZPP 'enum-set-subset? g$enumset2$6517$jXZPP)
          ((case-lambda
             ((g$v1$6518$jXZPP g$v2$6519$jXZPP)
              (if (g$enum-type=?$6449$jXZPP
                    g$enumset1$6516$jXZPP
                    g$enumset2$6517$jXZPP)
                (= (bitwise-and g$v1$6518$jXZPP g$v2$6519$jXZPP)
                   g$v1$6518$jXZPP)
                ((letrec ((g$f$6520$jXZPP
                            (case-lambda
                              ((g$s$6521$jXZPP)
                               (if (null? g$s$6521$jXZPP)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6522$jXZPP g$v2*$6523$jXZPP)
                                     (if g$v2*$6523$jXZPP
                                       ((case-lambda
                                          ((g$has1$6524$jXZPP g$has2$6525$jXZPP)
                                           (if (if g$has1$6524$jXZPP
                                                 (begin
                                                   '#f
                                                   (not g$has2$6525$jXZPP))
                                                 '#f)
                                             '#f
                                             (g$f$6520$jXZPP
                                               (cdr g$s$6521$jXZPP)))))
                                        (not (g$zero?$5333$jXZPP
                                               (bitwise-and
                                                 g$v1$6518$jXZPP
                                                 g$v1*$6522$jXZPP)))
                                        (not (g$zero?$5333$jXZPP
                                               (bitwise-and
                                                 g$v2$6519$jXZPP
                                                 g$v2*$6523$jXZPP))))
                                       '#f)))
                                  (g$get-value$6451$jXZPP
                                    g$enumset1$6516$jXZPP
                                    (car g$s$6521$jXZPP))
                                  (g$get-value$6451$jXZPP
                                    g$enumset2$6517$jXZPP
                                    (car g$s$6521$jXZPP))))))))
                   g$f$6520$jXZPP)
                 (g$get-symbols$6450$jXZPP g$enumset1$6516$jXZPP)))))
           (g$enum-value$6438$jXZPP g$enumset1$6516$jXZPP)
           (g$enum-value$6438$jXZPP g$enumset2$6517$jXZPP))))))
   (g$enum-set=?$6462$jXZPP
     g$enum-set=?$6571$jXZPP
     (case-lambda
       ((g$enumset1$6526$jXZPP g$enumset2$6527$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set=? g$enumset1$6526$jXZPP)
          (g$assert-enum$6452$jXZPP 'enum-set=? g$enumset2$6527$jXZPP)
          (if (g$enum-set-subset?$6461$jXZPP
                g$enumset1$6526$jXZPP
                g$enumset2$6527$jXZPP)
            (begin
              '#f
              (g$enum-set-subset?$6461$jXZPP
                g$enumset2$6527$jXZPP
                g$enumset1$6526$jXZPP))
            '#f)))))
   (g$enum-set-union$6463$jXZPP
     g$enum-set-union$6572$jXZPP
     (case-lambda
       ((g$enumset1$6528$jXZPP g$enumset2$6529$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set-union g$enumset1$6528$jXZPP)
          (g$assert-enum$6452$jXZPP 'enum-set-union g$enumset2$6529$jXZPP)
          (if (g$enum-type=?$6449$jXZPP
                g$enumset1$6528$jXZPP
                g$enumset2$6529$jXZPP)
            (g$make-enum$6437$jXZPP
              (bitwise-ior
                (g$enum-value$6438$jXZPP g$enumset1$6528$jXZPP)
                (g$enum-value$6438$jXZPP g$enumset2$6529$jXZPP))
              (g$enum-info$6439$jXZPP g$enumset1$6528$jXZPP))
            '#f)))))
   (g$enum-set-intersection$6464$jXZPP
     g$enum-set-intersection$6573$jXZPP
     (case-lambda
       ((g$enumset1$6530$jXZPP g$enumset2$6531$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP
            'enum-set-intersection
            g$enumset1$6530$jXZPP)
          (g$assert-enum$6452$jXZPP
            'enum-set-intersection
            g$enumset2$6531$jXZPP)
          (if (g$enum-type=?$6449$jXZPP
                g$enumset1$6530$jXZPP
                g$enumset2$6531$jXZPP)
            (g$make-enum$6437$jXZPP
              (bitwise-and
                (g$enum-value$6438$jXZPP g$enumset1$6530$jXZPP)
                (g$enum-value$6438$jXZPP g$enumset2$6531$jXZPP))
              (g$enum-info$6439$jXZPP g$enumset1$6530$jXZPP))
            '#f)))))
   (g$enum-set-difference$6465$jXZPP
     g$enum-set-difference$6574$jXZPP
     (case-lambda
       ((g$enumset1$6532$jXZPP g$enumset2$6533$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set-difference g$enumset1$6532$jXZPP)
          (g$assert-enum$6452$jXZPP 'enum-set-difference g$enumset2$6533$jXZPP)
          (if (g$enum-type=?$6449$jXZPP
                g$enumset1$6532$jXZPP
                g$enumset2$6533$jXZPP)
            (g$make-enum$6437$jXZPP
              (bitwise-and
                (g$enum-value$6438$jXZPP g$enumset1$6532$jXZPP)
                (bitwise-not (g$enum-value$6438$jXZPP g$enumset2$6533$jXZPP)))
              (g$enum-info$6439$jXZPP g$enumset1$6532$jXZPP))
            '#f)))))
   (g$enum-set-complement$6466$jXZPP
     g$enum-set-complement$6575$jXZPP
     (case-lambda
       ((g$enumset$6534$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set-complement g$enumset$6534$jXZPP)
          (g$make-enum$6437$jXZPP
            (bitwise-not (g$enum-value$6438$jXZPP g$enumset$6534$jXZPP))
            (g$enum-info$6439$jXZPP g$enumset$6534$jXZPP))))))
   (g$enum-set-projection$6467$jXZPP
     g$enum-set-projection$6576$jXZPP
     (case-lambda
       ((g$enumset1$6535$jXZPP g$enumset2$6536$jXZPP)
        (begin
          (g$assert-enum$6452$jXZPP 'enum-set-projection g$enumset1$6535$jXZPP)
          (g$assert-enum$6452$jXZPP 'enum-set-projection g$enumset2$6536$jXZPP)
          ((case-lambda
             ((g$v1$6537$jXZPP)
              ((letrec ((g$f$6538$jXZPP
                          (case-lambda
                            ((g$s$6539$jXZPP g$v$6540$jXZPP)
                             (if (null? g$s$6539$jXZPP)
                               (g$make-enum$6437$jXZPP
                                 g$v$6540$jXZPP
                                 (g$enum-info$6439$jXZPP g$enumset2$6536$jXZPP))
                               (if (g$zero?$5333$jXZPP
                                     (bitwise-and
                                       g$v1$6537$jXZPP
                                       (g$get-value$6451$jXZPP
                                         g$enumset1$6535$jXZPP
                                         (car g$s$6539$jXZPP))))
                                 (g$f$6538$jXZPP
                                   (cdr g$s$6539$jXZPP)
                                   g$v$6540$jXZPP)
                                 ((case-lambda
                                    ((g$v2$6541$jXZPP)
                                     (if g$v2$6541$jXZPP
                                       (g$f$6538$jXZPP
                                         (cdr g$s$6539$jXZPP)
                                         (bitwise-ior
                                           g$v$6540$jXZPP
                                           g$v2$6541$jXZPP))
                                       (g$f$6538$jXZPP
                                         (cdr g$s$6539$jXZPP)
                                         g$v$6540$jXZPP))))
                                  (g$get-value$6451$jXZPP
                                    g$enumset2$6536$jXZPP
                                    (car g$s$6539$jXZPP)))))))))
                 g$f$6538$jXZPP)
               (g$get-symbols$6450$jXZPP g$enumset1$6535$jXZPP)
               '0)))
           (g$enum-value$6438$jXZPP g$enumset1$6535$jXZPP)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6468$jXZPP g$p$6469$jXZPP g$wr$6470$jXZPP)
       (g$fprintf$6601$jXZPP
         g$p$6469$jXZPP
         '"#[enum-set ~a]"
         (g$enum-set->list$6459$jXZPP g$x$6468$jXZPP))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6577$jXZPP
     g$dofmt$6599$jXZPP
     (case-lambda
       ((g$p$6581$jXZPP g$cntl$6582$jXZPP g$args$6583$jXZPP)
        ((case-lambda
           ((g$nmax$6584$jXZPP)
            ((letrec ((g$loop$6585$jXZPP
                        (case-lambda
                          ((g$n$6586$jXZPP g$a$6587$jXZPP)
                           (if (fx<=? g$n$6586$jXZPP g$nmax$6584$jXZPP)
                             ((case-lambda
                                ((g$c$6588$jXZPP)
                                 (if (if (g$char=?$5347$jXZPP
                                           g$c$6588$jXZPP
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6586$jXZPP
                                           g$nmax$6584$jXZPP))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6589$jXZPP)
                                       (if (g$memv$5071$jXZPP
                                             g$t$6589$jXZPP
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6587$jXZPP)
                                             g$p$6581$jXZPP)
                                           (g$loop$6585$jXZPP
                                             (fx+ g$n$6586$jXZPP '2)
                                             (cdr g$a$6587$jXZPP)))
                                         (if (g$memv$5071$jXZPP
                                               g$t$6589$jXZPP
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6587$jXZPP)
                                               g$p$6581$jXZPP)
                                             (g$loop$6585$jXZPP
                                               (fx+ g$n$6586$jXZPP '2)
                                               (cdr g$a$6587$jXZPP)))
                                           (if (g$memv$5071$jXZPP
                                                 g$t$6589$jXZPP
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6587$jXZPP)
                                                   '2)
                                                 g$p$6581$jXZPP)
                                               (g$loop$6585$jXZPP
                                                 (fx+ g$n$6586$jXZPP '2)
                                                 (cdr g$a$6587$jXZPP)))
                                             (if (g$memv$5071$jXZPP
                                                   g$t$6589$jXZPP
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6587$jXZPP)
                                                     '8)
                                                   g$p$6581$jXZPP)
                                                 (g$loop$6585$jXZPP
                                                   (fx+ g$n$6586$jXZPP '2)
                                                   (cdr g$a$6587$jXZPP)))
                                               (if (g$memv$5071$jXZPP
                                                     g$t$6589$jXZPP
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6587$jXZPP)
                                                       '16)
                                                     g$p$6581$jXZPP)
                                                   (g$loop$6585$jXZPP
                                                     (fx+ g$n$6586$jXZPP '2)
                                                     (cdr g$a$6587$jXZPP)))
                                                 (if (g$memv$5071$jXZPP
                                                       g$t$6589$jXZPP
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6587$jXZPP)
                                                         '10)
                                                       g$p$6581$jXZPP)
                                                     (g$loop$6585$jXZPP
                                                       (fx+ g$n$6586$jXZPP '2)
                                                       (cdr g$a$6587$jXZPP)))
                                                   (if (g$memv$5071$jXZPP
                                                         g$t$6589$jXZPP
                                                         '(#\~))
                                                     (begin
                                                       (g$write-char$6427$jXZPP
                                                         '#\~
                                                         g$p$6581$jXZPP)
                                                       (g$loop$6585$jXZPP
                                                         (fx+ g$n$6586$jXZPP '2)
                                                         g$a$6587$jXZPP))
                                                     (begin
                                                       (g$write-char$6427$jXZPP
                                                         g$c$6588$jXZPP
                                                         g$p$6581$jXZPP)
                                                       (g$loop$6585$jXZPP
                                                         (fx+ g$n$6586$jXZPP '1)
                                                         g$a$6587$jXZPP)))))))))))
                                    (string-ref
                                      g$cntl$6582$jXZPP
                                      (fx+ g$n$6586$jXZPP '1)))
                                   (begin
                                     (g$write-char$6427$jXZPP
                                       g$c$6588$jXZPP
                                       g$p$6581$jXZPP)
                                     (g$loop$6585$jXZPP
                                       (fx+ g$n$6586$jXZPP '1)
                                       g$a$6587$jXZPP)))))
                              (string-ref g$cntl$6582$jXZPP g$n$6586$jXZPP))
                             (void))))))
               g$loop$6585$jXZPP)
             '0
             g$args$6583$jXZPP)))
         (fx- (string-length g$cntl$6582$jXZPP) '1)))))
   (g$printf$6578$jXZPP
     g$printf$6600$jXZPP
     (case-lambda
       ((g$control$6590$jXZPP . g$args$6591$jXZPP)
        (g$dofmt$6577$jXZPP
          (current-output-port)
          g$control$6590$jXZPP
          g$args$6591$jXZPP))))
   (g$fprintf$6579$jXZPP
     g$fprintf$6601$jXZPP
     (case-lambda
       ((g$p$6592$jXZPP g$control$6593$jXZPP . g$args$6594$jXZPP)
        (g$dofmt$6577$jXZPP
          g$p$6592$jXZPP
          g$control$6593$jXZPP
          g$args$6594$jXZPP))))
   (g$format$6580$jXZPP
     g$format$6602$jXZPP
     (case-lambda
       ((g$control$6595$jXZPP . g$args$6596$jXZPP)
        (call-with-values
          g$open-string-output-port$6379$jXZPP
          (case-lambda
            ((g$p$6597$jXZPP g$c$6598$jXZPP)
             (begin
               (g$dofmt$6577$jXZPP
                 g$p$6597$jXZPP
                 g$control$6595$jXZPP
                 g$args$6596$jXZPP)
               (g$c$6598$jXZPP)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6603$jXZPP
     g$make-traced-macro$6606$jXZPP
     (case-lambda
       ((g$name$6604$jXZPP g$x$6605$jXZPP)
        (if (procedure? g$x$6605$jXZPP)
          (make-traced-procedure
            g$name$6604$jXZPP
            g$x$6605$jXZPP
            g$syntax->datum$11678$jXZPP)
          (if (g$variable-transformer?$11500$jXZPP g$x$6605$jXZPP)
            (g$make-variable-transformer$11499$jXZPP
              (make-traced-procedure
                g$name$6604$jXZPP
                (g$variable-transformer-procedure$11501$jXZPP g$x$6605$jXZPP)
                g$syntax->datum$11678$jXZPP))
            g$x$6605$jXZPP))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$6607$jXZPP
     g$cps/generate-reference$6884$jXZPP
     (case-lambda
       ((g$variable$6663$jXZPP)
        (g$cps/generate-operand$6611$jXZPP
          (g$make-reference$6637$jXZPP g$variable$6663$jXZPP)))))
   (g$cps/generate-literal$6608$jXZPP
     g$cps/generate-literal$6885$jXZPP
     (case-lambda
       ((g$datum$6664$jXZPP)
        (g$cps/generate-operand$6611$jXZPP
          (g$make-literal$6636$jXZPP g$datum$6664$jXZPP)))))
   (g$cps/generate-abstraction$6609$jXZPP
     g$cps/generate-abstraction$6886$jXZPP
     (case-lambda
       ((g$bvl$6665$jXZPP g$body-generator$6666$jXZPP)
        (g$cps/generate-operand$6611$jXZPP
          (g$make-user-abstraction$6638$jXZPP
            g$bvl$6665$jXZPP
            (case-lambda
              ((g$continuation-variable$6667$jXZPP)
               (g$body-generator$6666$jXZPP
                 (g$variable-continuator$6624$jXZPP
                   g$continuation-variable$6667$jXZPP)))))))))
   (g$cps/generate-abstractions$6610$jXZPP
     g$cps/generate-abstractions$6887$jXZPP
     (case-lambda
       ((g$bvls$6668$jXZPP g$body-generators$6669$jXZPP)
        (g$cps/generate-operand$6611$jXZPP
          (g$make-user-abstractions$6639$jXZPP
            g$bvls$6668$jXZPP
            (g$map$5078$jXZPP
              (case-lambda
                ((g$body-generator$6670$jXZPP)
                 (case-lambda
                   ((g$continuation-variable$6671$jXZPP)
                    (g$body-generator$6670$jXZPP
                      (g$variable-continuator$6624$jXZPP
                        g$continuation-variable$6671$jXZPP))))))
              g$body-generators$6669$jXZPP))))))
   (g$cps/generate-operand$6611$jXZPP
     g$cps/generate-operand$6888$jXZPP
     (case-lambda
       ((g$operand$6672$jXZPP)
        (case-lambda
          ((g$continuator$6673$jXZPP)
           (g$continue-with-operand$6627$jXZPP
             g$continuator$6673$jXZPP
             g$operand$6672$jXZPP))))))
   (g$cps/generate-conditional$6612$jXZPP
     g$cps/generate-conditional$6889$jXZPP
     (case-lambda
       ((g$condition-generator$6674$jXZPP
          g$consequent-generator$6675$jXZPP
          g$alternative-generator$6676$jXZPP)
        (case-lambda
          ((g$continuator$6677$jXZPP)
           (letrec* ((g$if-variable$6678$jXZPP
                       (case-lambda
                         ((g$continuation-variable$6680$jXZPP)
                          ((case-lambda
                             ((g$continuator*$6681$jXZPP)
                              (g$condition-generator$6674$jXZPP
                                (g$conditional-continuator$6623$jXZPP
                                  (case-lambda
                                    ((g$condition$6682$jXZPP)
                                     (g$make-conditional$6646$jXZPP
                                       g$condition$6682$jXZPP
                                       (g$consequent-generator$6675$jXZPP
                                         g$continuator*$6681$jXZPP)
                                       (g$alternative-generator$6676$jXZPP
                                         g$continuator*$6681$jXZPP))))))))
                           (g$variable-continuator$6624$jXZPP
                             g$continuation-variable$6680$jXZPP))))))
             (g$reify-continuation*$6629$jXZPP
               g$continuator$6677$jXZPP
               g$if-variable$6678$jXZPP
               (case-lambda
                 ((g$continuation-abstraction$6679$jXZPP)
                  (g$make-conditional-join$6647$jXZPP
                    g$continuation-abstraction$6679$jXZPP
                    g$if-variable$6678$jXZPP))))))))))
   (g$cps/generate-recursive-bind$6613$jXZPP
     g$cps/generate-recursive-bind$6890$jXZPP
     (case-lambda
       ((g$variables$6683$jXZPP
          g$generators$6684$jXZPP
          g$body-generator$6685$jXZPP)
        (case-lambda
          ((g$continuator$6686$jXZPP)
           (g$make-recursive-bind$6641$jXZPP
             g$variables$6683$jXZPP
             (g$map$5078$jXZPP
               (case-lambda
                 ((g$generator$6687$jXZPP)
                  (case-lambda
                    ((g$continuation-variable$6688$jXZPP)
                     (g$generator$6687$jXZPP
                       (g$variable-continuator$6624$jXZPP
                         g$continuation-variable$6688$jXZPP))))))
               g$generators$6684$jXZPP)
             (g$body-generator$6685$jXZPP
               (g$reified-continuator$6626$jXZPP
                 g$continuator$6686$jXZPP))))))))
   (g$cps/generate-recursive*-bind$6614$jXZPP
     g$cps/generate-recursive*-bind$6891$jXZPP
     (case-lambda
       ((g$variables$6689$jXZPP
          g$generators$6690$jXZPP
          g$body-generator$6691$jXZPP)
        (case-lambda
          ((g$continuator$6692$jXZPP)
           (g$make-recursive*-bind$6642$jXZPP
             g$variables$6689$jXZPP
             (g$map$5078$jXZPP
               (case-lambda
                 ((g$generator$6693$jXZPP)
                  (case-lambda
                    ((g$continuation-variable$6694$jXZPP)
                     (g$generator$6693$jXZPP
                       (g$variable-continuator$6624$jXZPP
                         g$continuation-variable$6694$jXZPP))))))
               g$generators$6690$jXZPP)
             (g$body-generator$6691$jXZPP
               (g$reified-continuator$6626$jXZPP
                 g$continuator$6692$jXZPP))))))))
   (g$cps/generate-recursive*-library-bind$6615$jXZPP
     g$cps/generate-recursive*-library-bind$6892$jXZPP
     (case-lambda
       ((g$name$6695$jXZPP
          g$variables$6696$jXZPP
          g$variables*$6697$jXZPP
          g$generators$6698$jXZPP
          g$body-generator$6699$jXZPP)
        (case-lambda
          ((g$continuator$6700$jXZPP)
           (g$make-recursive*-library-bind$6643$jXZPP
             g$name$6695$jXZPP
             g$variables$6696$jXZPP
             g$variables*$6697$jXZPP
             (g$map$5078$jXZPP
               (case-lambda
                 ((g$generator$6701$jXZPP)
                  (case-lambda
                    ((g$continuation-variable$6702$jXZPP)
                     (g$generator$6701$jXZPP
                       (g$variable-continuator$6624$jXZPP
                         g$continuation-variable$6702$jXZPP))))))
               g$generators$6698$jXZPP)
             (g$body-generator$6699$jXZPP
               (g$reified-continuator$6626$jXZPP
                 g$continuator$6700$jXZPP))))))))
   (g$cps/generate-sequence$6616$jXZPP
     g$cps/generate-sequence$6893$jXZPP
     (case-lambda
       ((g$generators$6703$jXZPP)
        (case-lambda
          ((g$continuator$6704$jXZPP)
           ((letrec ((g$recur$6705$jXZPP
                       (case-lambda
                         ((g$generators$6706$jXZPP)
                          ((car g$generators$6706$jXZPP)
                           ((case-lambda
                              ((g$generators$6707$jXZPP)
                               (if (pair? g$generators$6707$jXZPP)
                                 (g$effect-continuator$6622$jXZPP
                                   (case-lambda
                                     (()
                                      (g$recur$6705$jXZPP
                                        g$generators$6707$jXZPP))))
                                 g$continuator$6704$jXZPP)))
                            (cdr g$generators$6706$jXZPP)))))))
              g$recur$6705$jXZPP)
            g$generators$6703$jXZPP))))))
   (g$cps/generate-assignment$6617$jXZPP
     g$cps/generate-assignment$6894$jXZPP
     (case-lambda
       ((g$location$6708$jXZPP g$expression-generator$6709$jXZPP)
        (case-lambda
          ((g$continuator$6710$jXZPP)
           (g$expression-generator$6709$jXZPP
             (g$operand-continuator$6621$jXZPP
               (case-lambda
                 ((g$operand$6711$jXZPP)
                  (g$make-assignment$6649$jXZPP
                    g$location$6708$jXZPP
                    g$operand$6711$jXZPP
                    (g$continue-with-operand$6627$jXZPP
                      g$continuator$6710$jXZPP
                      '(void))))))))))))
   (g$cps/generate-primitive$6618$jXZPP
     g$cps/generate-primitive$6895$jXZPP
     (case-lambda
       ((g$operator$6712$jXZPP g$operand-generators$6713$jXZPP)
        (case-lambda
          ((g$continuator$6714$jXZPP)
           (g$continue-with-operand$6627$jXZPP
             g$continuator$6714$jXZPP
             (cons
               g$operator$6712$jXZPP
               (g$map$5078$jXZPP
                 (case-lambda
                   ((g$generator$6715$jXZPP)
                    (case-lambda
                      ((g$continuation-variable$6716$jXZPP)
                       (g$generator$6715$jXZPP
                         (g$variable-continuator$6624$jXZPP
                           g$continuation-variable$6716$jXZPP))))))
                 g$operand-generators$6713$jXZPP))))))))
   (g$cps/generate-combination$6619$jXZPP
     g$cps/generate-combination$6896$jXZPP
     (case-lambda
       ((g$operator-generator$6717$jXZPP g$operand-generators$6718$jXZPP)
        (g$cps/generate-subproblems$6620$jXZPP
          (reverse
            (cons
              g$operator-generator$6717$jXZPP
              g$operand-generators$6718$jXZPP))
          (case-lambda
            ((g$operands$6719$jXZPP g$continuator$6720$jXZPP)
             (g$make-combination$6644$jXZPP
               (car g$operands$6719$jXZPP)
               (g$reify-continuation$6628$jXZPP g$continuator$6720$jXZPP)
               (cdr g$operands$6719$jXZPP))))))))
   (g$cps/generate-subproblems$6620$jXZPP
     g$cps/generate-subproblems$6897$jXZPP
     (case-lambda
       ((g$generators$6721$jXZPP g$combiner$6722$jXZPP)
        (case-lambda
          ((g$continuator$6723$jXZPP)
           ((letrec ((g$recur$6724$jXZPP
                       (case-lambda
                         ((g$generators$6725$jXZPP g$operands$6726$jXZPP)
                          (if (pair? g$generators$6725$jXZPP)
                            ((car g$generators$6725$jXZPP)
                             ((case-lambda
                                ((g$generators$6727$jXZPP)
                                 (g$operand-continuator$6621$jXZPP
                                   (case-lambda
                                     ((g$operand$6728$jXZPP)
                                      (g$recur$6724$jXZPP
                                        g$generators$6727$jXZPP
                                        (cons
                                          g$operand$6728$jXZPP
                                          g$operands$6726$jXZPP)))))))
                              (cdr g$generators$6725$jXZPP)))
                            (g$combiner$6722$jXZPP
                              g$operands$6726$jXZPP
                              g$continuator$6723$jXZPP))))))
              g$recur$6724$jXZPP)
            g$generators$6721$jXZPP
            '()))))))
   (g$operand-continuator$6621$jXZPP
     g$operand-continuator$6898$jXZPP
     (case-lambda
       ((g$generator$6729$jXZPP)
        (case-lambda
          ((g$if-operand$6730$jXZPP
             g$if-effect$6731$jXZPP
             g$if-conditional$6732$jXZPP
             g$if-variable$6733$jXZPP
             g$if-inline$6734$jXZPP)
           (begin
             g$if-effect$6731$jXZPP
             g$if-conditional$6732$jXZPP
             g$if-variable$6733$jXZPP
             g$if-inline$6734$jXZPP
             (g$if-operand$6730$jXZPP g$generator$6729$jXZPP)))))))
   (g$effect-continuator$6622$jXZPP
     g$effect-continuator$6899$jXZPP
     (case-lambda
       ((g$generator$6735$jXZPP)
        (case-lambda
          ((g$if-operand$6736$jXZPP
             g$if-effect$6737$jXZPP
             g$if-conditional$6738$jXZPP
             g$if-variable$6739$jXZPP
             g$if-inline$6740$jXZPP)
           (begin
             g$if-operand$6736$jXZPP
             g$if-conditional$6738$jXZPP
             g$if-variable$6739$jXZPP
             g$if-inline$6740$jXZPP
             (g$if-effect$6737$jXZPP g$generator$6735$jXZPP)))))))
   (g$conditional-continuator$6623$jXZPP
     g$conditional-continuator$6900$jXZPP
     (case-lambda
       ((g$generator$6741$jXZPP)
        (case-lambda
          ((g$if-operand$6742$jXZPP
             g$if-effect$6743$jXZPP
             g$if-conditional$6744$jXZPP
             g$if-variable$6745$jXZPP
             g$if-inline$6746$jXZPP)
           (begin
             g$if-operand$6742$jXZPP
             g$if-effect$6743$jXZPP
             g$if-variable$6745$jXZPP
             g$if-inline$6746$jXZPP
             (g$if-conditional$6744$jXZPP g$generator$6741$jXZPP)))))))
   (g$variable-continuator$6624$jXZPP
     g$variable-continuator$6901$jXZPP
     (case-lambda
       ((g$variable$6747$jXZPP)
        (case-lambda
          ((g$if-operand$6748$jXZPP
             g$if-effect$6749$jXZPP
             g$if-conditional$6750$jXZPP
             g$if-variable$6751$jXZPP
             g$if-inline$6752$jXZPP)
           (begin
             g$if-operand$6748$jXZPP
             g$if-effect$6749$jXZPP
             g$if-variable$6751$jXZPP
             g$if-inline$6752$jXZPP
             (g$if-variable$6751$jXZPP g$variable$6747$jXZPP)))))))
   (g$inline-continuator$6625$jXZPP
     g$inline-continuator$6902$jXZPP
     (case-lambda
       ((g$continuation$6753$jXZPP)
        (case-lambda
          ((g$if-operand$6754$jXZPP
             g$if-effect$6755$jXZPP
             g$if-conditional$6756$jXZPP
             g$if-variable$6757$jXZPP
             g$if-inline$6758$jXZPP)
           (begin
             g$if-operand$6754$jXZPP
             g$if-effect$6755$jXZPP
             g$if-conditional$6756$jXZPP
             g$if-variable$6757$jXZPP
             (g$if-inline$6758$jXZPP g$continuation$6753$jXZPP)))))))
   (g$reified-continuator$6626$jXZPP
     g$reified-continuator$6903$jXZPP
     (case-lambda
       ((g$continuator$6759$jXZPP)
        (case-lambda
          ((g$if-operand$6760$jXZPP
             g$if-effect$6761$jXZPP
             g$if-conditional$6762$jXZPP
             g$if-variable$6763$jXZPP
             g$if-inline$6764$jXZPP)
           (begin
             g$if-operand$6760$jXZPP
             g$if-effect$6761$jXZPP
             g$if-conditional$6762$jXZPP
             (g$reify-continuation*$6629$jXZPP
               g$continuator$6759$jXZPP
               g$if-variable$6763$jXZPP
               g$if-inline$6764$jXZPP)))))))
   (g$continue-with-operand$6627$jXZPP
     g$continue-with-operand$6904$jXZPP
     (case-lambda
       ((g$continuator$6765$jXZPP g$operand$6766$jXZPP)
        (g$continuator$6765$jXZPP
          (case-lambda
            ((g$generator$6767$jXZPP)
             (g$generator$6767$jXZPP g$operand$6766$jXZPP)))
          (case-lambda ((g$generator$6768$jXZPP) (g$generator$6768$jXZPP)))
          (case-lambda
            ((g$generator$6769$jXZPP)
             (g$generator$6769$jXZPP
               (g$make-truth-test$6650$jXZPP g$operand$6766$jXZPP))))
          (case-lambda
            ((g$continuation-variable$6770$jXZPP)
             (g$make-return$6645$jXZPP
               (g$make-reference$6637$jXZPP g$continuation-variable$6770$jXZPP)
               (list g$operand$6766$jXZPP))))
          (case-lambda
            ((g$continuation-abstraction$6771$jXZPP)
             (g$make-return$6645$jXZPP
               g$continuation-abstraction$6771$jXZPP
               (list g$operand$6766$jXZPP))))))))
   (g$reify-continuation$6628$jXZPP
     g$reify-continuation$6905$jXZPP
     (case-lambda
       ((g$continuator$6772$jXZPP)
        (g$continuator$6772$jXZPP
          g$operand-continuation-reifier$6631$jXZPP
          g$effect-continuation-reifier$6633$jXZPP
          g$conditional-continuation-reifier$6635$jXZPP
          (case-lambda
            ((g$variable$6773$jXZPP)
             (g$make-reference$6637$jXZPP g$variable$6773$jXZPP)))
          (case-lambda
            ((g$continuation$6774$jXZPP) g$continuation$6774$jXZPP))))))
   (g$reify-continuation*$6629$jXZPP
     g$reify-continuation*$6906$jXZPP
     (case-lambda
       ((g$continuator$6775$jXZPP
          g$if-variable$6776$jXZPP
          g$if-inline$6777$jXZPP)
        (g$continuator$6775$jXZPP
          (g$operand-continuation-reifier*$6630$jXZPP g$if-inline$6777$jXZPP)
          (g$effect-continuation-reifier*$6632$jXZPP g$if-inline$6777$jXZPP)
          (g$conditional-continuation-reifier*$6634$jXZPP
            g$if-inline$6777$jXZPP)
          g$if-variable$6776$jXZPP
          g$if-inline$6777$jXZPP))))
   (g$operand-continuation-reifier*$6630$jXZPP
     g$operand-continuation-reifier*$6907$jXZPP
     (case-lambda
       ((g$receiver$6778$jXZPP)
        (case-lambda
          ((g$generator$6779$jXZPP)
           (g$receiver$6778$jXZPP
             ((case-lambda
                ((g$variable$6780$jXZPP)
                 (g$make-continuation-abstraction$6640$jXZPP
                   (list g$variable$6780$jXZPP)
                   (g$generator$6779$jXZPP
                     (g$make-reference$6637$jXZPP g$variable$6780$jXZPP)))))
              (g$generate-variable$6651$jXZPP 'V))))))))
   (g$operand-continuation-reifier$6631$jXZPP
     g$operand-continuation-reifier$6908$jXZPP
     (g$operand-continuation-reifier*$6630$jXZPP values))
   (g$effect-continuation-reifier*$6632$jXZPP
     g$effect-continuation-reifier*$6909$jXZPP
     (case-lambda
       ((g$receiver$6781$jXZPP)
        (case-lambda
          ((g$generator$6782$jXZPP)
           (g$receiver$6781$jXZPP
             ((case-lambda
                ((g$variable$6783$jXZPP)
                 (g$make-continuation-abstraction$6640$jXZPP
                   g$variable$6783$jXZPP
                   (g$generator$6782$jXZPP))))
              (g$generate-variable$6651$jXZPP 'IGNORE))))))))
   (g$effect-continuation-reifier$6633$jXZPP
     g$effect-continuation-reifier$6910$jXZPP
     (g$effect-continuation-reifier*$6632$jXZPP values))
   (g$conditional-continuation-reifier*$6634$jXZPP
     g$conditional-continuation-reifier*$6911$jXZPP
     (case-lambda
       ((g$receiver$6784$jXZPP)
        (case-lambda
          ((g$generator$6785$jXZPP)
           (g$receiver$6784$jXZPP
             ((case-lambda
                ((g$variable$6786$jXZPP)
                 (g$make-continuation-abstraction$6640$jXZPP
                   (list g$variable$6786$jXZPP)
                   (g$generator$6785$jXZPP
                     (g$make-truth-test$6650$jXZPP
                       (g$make-reference$6637$jXZPP g$variable$6786$jXZPP))))))
              (g$generate-variable$6651$jXZPP 'T))))))))
   (g$conditional-continuation-reifier$6635$jXZPP
     g$conditional-continuation-reifier$6912$jXZPP
     (g$conditional-continuation-reifier*$6634$jXZPP values))
   (g$make-literal$6636$jXZPP
     g$make-literal$6913$jXZPP
     (case-lambda ((g$datum$6787$jXZPP) (list 'quote g$datum$6787$jXZPP))))
   (g$make-reference$6637$jXZPP
     g$make-reference$6914$jXZPP
     (case-lambda ((g$variable$6788$jXZPP) g$variable$6788$jXZPP)))
   (g$make-user-abstraction$6638$jXZPP
     g$make-user-abstraction$6915$jXZPP
     (case-lambda
       ((g$bvl$6789$jXZPP g$body-constructor$6790$jXZPP)
        ((case-lambda
           ((g$continuation$6791$jXZPP)
            (list
              'case-lambda
              (list
                (cons g$continuation$6791$jXZPP g$bvl$6789$jXZPP)
                (g$body-constructor$6790$jXZPP g$continuation$6791$jXZPP)))))
         (g$generate-variable$6651$jXZPP 'C)))))
   (g$make-user-abstractions$6639$jXZPP
     g$make-user-abstractions$6916$jXZPP
     (case-lambda
       ((g$bvls$6792$jXZPP g$body-constructors$6793$jXZPP)
        ((case-lambda
           ((g$continuation$6794$jXZPP)
            (cons
              'case-lambda
              (g$map$5078$jXZPP
                (case-lambda
                  ((g$bvl$6795$jXZPP g$body-constructor$6796$jXZPP)
                   (list
                     (cons g$continuation$6794$jXZPP g$bvl$6795$jXZPP)
                     (g$body-constructor$6796$jXZPP
                       g$continuation$6794$jXZPP))))
                g$bvls$6792$jXZPP
                g$body-constructors$6793$jXZPP))))
         (g$generate-variable$6651$jXZPP 'C)))))
   (g$make-continuation-abstraction$6640$jXZPP
     g$make-continuation-abstraction$6917$jXZPP
     (case-lambda
       ((g$bvl$6797$jXZPP g$body$6798$jXZPP)
        (list 'case-lambda (list g$bvl$6797$jXZPP g$body$6798$jXZPP)))))
   (g$make-recursive-bind$6641$jXZPP
     g$make-recursive-bind$6918$jXZPP
     (case-lambda
       ((g$variables$6799$jXZPP g$constructors$6800$jXZPP g$body$6801$jXZPP)
        (list
          'letrec
          (g$map$5078$jXZPP
            (case-lambda
              ((g$variable$6802$jXZPP g$constructor$6803$jXZPP)
               (list
                 g$variable$6802$jXZPP
                 (list
                   (g$make-user-abstraction$6638$jXZPP
                     '()
                     g$constructor$6803$jXZPP)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$6802$jXZPP))))))
            g$variables$6799$jXZPP
            g$constructors$6800$jXZPP)
          g$body$6801$jXZPP))))
   (g$make-recursive*-bind$6642$jXZPP
     g$make-recursive*-bind$6919$jXZPP
     (case-lambda
       ((g$variables$6804$jXZPP g$constructors$6805$jXZPP g$body$6806$jXZPP)
        (list
          'letrec*
          (g$map$5078$jXZPP
            (case-lambda
              ((g$variable$6807$jXZPP g$constructor$6808$jXZPP)
               (list
                 g$variable$6807$jXZPP
                 (list
                   (g$make-user-abstraction$6638$jXZPP
                     '()
                     g$constructor$6808$jXZPP)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$6807$jXZPP))))))
            g$variables$6804$jXZPP
            g$constructors$6805$jXZPP)
          g$body$6806$jXZPP))))
   (g$make-recursive*-library-bind$6643$jXZPP
     g$make-recursive*-library-bind$6920$jXZPP
     (case-lambda
       ((g$name$6809$jXZPP
          g$variables$6810$jXZPP
          g$variables*$6811$jXZPP
          g$constructors$6812$jXZPP
          g$body$6813$jXZPP)
        (list
          'library-letrec*
          g$name$6809$jXZPP
          (g$map$5078$jXZPP
            (case-lambda
              ((g$variable$6814$jXZPP
                 g$variable*$6815$jXZPP
                 g$constructor$6816$jXZPP)
               (list
                 g$variable$6814$jXZPP
                 g$variable*$6815$jXZPP
                 (list
                   (g$make-user-abstraction$6638$jXZPP
                     '()
                     g$constructor$6816$jXZPP)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$6814$jXZPP))))))
            g$variables$6810$jXZPP
            g$variables*$6811$jXZPP
            g$constructors$6812$jXZPP)
          g$body$6813$jXZPP))))
   (g$make-combination$6644$jXZPP
     g$make-combination$6921$jXZPP
     (case-lambda
       ((g$operator$6817$jXZPP g$continuation$6818$jXZPP g$operands$6819$jXZPP)
        (cons
          g$operator$6817$jXZPP
          (cons g$continuation$6818$jXZPP g$operands$6819$jXZPP)))))
   (g$make-return$6645$jXZPP
     g$make-return$6922$jXZPP
     (case-lambda
       ((g$continuation$6820$jXZPP g$operands$6821$jXZPP)
        (cons g$continuation$6820$jXZPP g$operands$6821$jXZPP))))
   (g$make-conditional$6646$jXZPP
     g$make-conditional$6923$jXZPP
     (case-lambda
       ((g$condition$6822$jXZPP
          g$consequent$6823$jXZPP
          g$alternative$6824$jXZPP)
        (list
          'if
          g$condition$6822$jXZPP
          g$consequent$6823$jXZPP
          g$alternative$6824$jXZPP))))
   (g$make-conditional-join$6647$jXZPP
     g$make-conditional-join$6924$jXZPP
     (case-lambda
       ((g$continuation$6825$jXZPP g$constructor$6826$jXZPP)
        ((case-lambda
           ((g$variable$6827$jXZPP)
            (g$make-let$6648$jXZPP
              (list g$variable$6827$jXZPP)
              (list g$continuation$6825$jXZPP)
              (g$constructor$6826$jXZPP g$variable$6827$jXZPP))))
         (g$generate-variable$6651$jXZPP 'J)))))
   (g$make-let$6648$jXZPP
     g$make-let$6925$jXZPP
     (case-lambda
       ((g$variables$6828$jXZPP g$expressions$6829$jXZPP g$body$6830$jXZPP)
        (cons
          (list 'case-lambda (list g$variables$6828$jXZPP g$body$6830$jXZPP))
          g$expressions$6829$jXZPP))))
   (g$make-assignment$6649$jXZPP
     g$make-assignment$6926$jXZPP
     (case-lambda
       ((g$location$6831$jXZPP g$operand$6832$jXZPP g$expression$6833$jXZPP)
        (list
          'begin
          (list 'set! g$location$6831$jXZPP g$operand$6832$jXZPP)
          g$expression$6833$jXZPP))))
   (g$make-truth-test$6650$jXZPP
     g$make-truth-test$6927$jXZPP
     (case-lambda ((g$operand$6834$jXZPP) g$operand$6834$jXZPP)))
   (g$generate-variable$6651$jXZPP
     g$generate-variable$6928$jXZPP
     (case-lambda ((g$name$6835$jXZPP) (gensym g$name$6835$jXZPP))))
   (g$parse$6652$jXZPP
     g$parse$6929$jXZPP
     (case-lambda
       ((g$x$6836$jXZPP)
        (if (pair? g$x$6836$jXZPP)
          ((case-lambda
             ((g$t$6837$jXZPP)
              (if (g$memv$5071$jXZPP g$t$6837$jXZPP '(quote))
                (g$cps/generate-literal$6608$jXZPP
                  (g$cadr$5304$jXZPP g$x$6836$jXZPP))
                (if (g$memv$5071$jXZPP g$t$6837$jXZPP '(if))
                  (g$cps/generate-conditional$6612$jXZPP
                    (g$parse$6652$jXZPP (g$cadr$5304$jXZPP g$x$6836$jXZPP))
                    (g$parse$6652$jXZPP (g$caddr$5310$jXZPP g$x$6836$jXZPP))
                    (g$parse$6652$jXZPP (g$cadddr$5322$jXZPP g$x$6836$jXZPP)))
                  (if (g$memv$5071$jXZPP g$t$6837$jXZPP '(case-lambda))
                    ((case-lambda
                       ((g$d$6838$jXZPP)
                        (g$cps/generate-abstractions$6610$jXZPP
                          (g$map$5078$jXZPP car g$d$6838$jXZPP)
                          (g$map$5078$jXZPP
                            (case-lambda
                              ((g$e$6839$jXZPP)
                               (g$cps/generate-sequence$6616$jXZPP
                                 (g$map$5078$jXZPP
                                   g$parse$6652$jXZPP
                                   (cdr g$e$6839$jXZPP)))))
                            g$d$6838$jXZPP))))
                     (cdr g$x$6836$jXZPP))
                    (if (g$memv$5071$jXZPP g$t$6837$jXZPP '(letrec))
                      ((case-lambda
                         ((g$bindings$6840$jXZPP g$body*$6841$jXZPP)
                          ((case-lambda
                             ((g$lhs*$6842$jXZPP g$rhs*$6843$jXZPP)
                              (g$cps/generate-recursive-bind$6613$jXZPP
                                g$lhs*$6842$jXZPP
                                (g$map$5078$jXZPP
                                  g$parse$6652$jXZPP
                                  g$rhs*$6843$jXZPP)
                                (g$parse$6652$jXZPP
                                  (cons 'begin g$body*$6841$jXZPP)))))
                           (g$map$5078$jXZPP car g$bindings$6840$jXZPP)
                           (g$map$5078$jXZPP
                             g$cadr$5304$jXZPP
                             g$bindings$6840$jXZPP))))
                       (g$cadr$5304$jXZPP g$x$6836$jXZPP)
                       (g$cddr$5306$jXZPP g$x$6836$jXZPP))
                      (if (g$memv$5071$jXZPP g$t$6837$jXZPP '(letrec*))
                        ((case-lambda
                           ((g$bindings$6844$jXZPP g$body*$6845$jXZPP)
                            ((case-lambda
                               ((g$lhs*$6846$jXZPP g$rhs*$6847$jXZPP)
                                (g$cps/generate-recursive*-bind$6614$jXZPP
                                  g$lhs*$6846$jXZPP
                                  (g$map$5078$jXZPP
                                    g$parse$6652$jXZPP
                                    g$rhs*$6847$jXZPP)
                                  (g$parse$6652$jXZPP
                                    (cons 'begin g$body*$6845$jXZPP)))))
                             (g$map$5078$jXZPP car g$bindings$6844$jXZPP)
                             (g$map$5078$jXZPP
                               g$cadr$5304$jXZPP
                               g$bindings$6844$jXZPP))))
                         (g$cadr$5304$jXZPP g$x$6836$jXZPP)
                         (g$cddr$5306$jXZPP g$x$6836$jXZPP))
                        (if (g$memv$5071$jXZPP
                              g$t$6837$jXZPP
                              '(library-letrec*))
                          ((case-lambda
                             ((g$name$6848$jXZPP g$x$6849$jXZPP)
                              ((case-lambda
                                 ((g$bindings$6850$jXZPP g$body*$6851$jXZPP)
                                  ((case-lambda
                                     ((g$lhs*$6852$jXZPP
                                        g$lhs**$6853$jXZPP
                                        g$rhs*$6854$jXZPP)
                                      (g$cps/generate-recursive*-library-bind$6615$jXZPP
                                        g$name$6848$jXZPP
                                        g$lhs*$6852$jXZPP
                                        g$lhs**$6853$jXZPP
                                        (g$map$5078$jXZPP
                                          g$parse$6652$jXZPP
                                          g$rhs*$6854$jXZPP)
                                        (g$parse$6652$jXZPP
                                          (cons 'begin g$body*$6851$jXZPP)))))
                                   (g$map$5078$jXZPP car g$bindings$6850$jXZPP)
                                   (g$map$5078$jXZPP
                                     g$cadr$5304$jXZPP
                                     g$bindings$6850$jXZPP)
                                   (g$map$5078$jXZPP
                                     g$caddr$5310$jXZPP
                                     g$bindings$6850$jXZPP))))
                               (g$cadr$5304$jXZPP g$x$6849$jXZPP)
                               (g$cddr$5306$jXZPP g$x$6849$jXZPP))))
                           (g$cadr$5304$jXZPP g$x$6836$jXZPP)
                           (cdr g$x$6836$jXZPP))
                          (if (g$memv$5071$jXZPP g$t$6837$jXZPP '(begin))
                            (g$cps/generate-sequence$6616$jXZPP
                              (g$map$5078$jXZPP
                                g$parse$6652$jXZPP
                                (cdr g$x$6836$jXZPP)))
                            (if (g$memv$5071$jXZPP g$t$6837$jXZPP '(set!))
                              (g$cps/generate-assignment$6617$jXZPP
                                (g$cadr$5304$jXZPP g$x$6836$jXZPP)
                                (g$parse$6652$jXZPP
                                  (g$caddr$5310$jXZPP g$x$6836$jXZPP)))
                              (if (list? g$x$6836$jXZPP)
                                (g$cps/generate-combination$6619$jXZPP
                                  (g$parse$6652$jXZPP (car g$x$6836$jXZPP))
                                  (g$map$5078$jXZPP
                                    g$parse$6652$jXZPP
                                    (cdr g$x$6836$jXZPP)))
                                (error
                                  'rewrite
                                  '"invalid form ~s ~s"
                                  g$x$6836$jXZPP
                                  (list? g$x$6836$jXZPP)))))))))))))
           (car g$x$6836$jXZPP))
          (if (symbol? g$x$6836$jXZPP)
            (g$cps/generate-reference$6607$jXZPP g$x$6836$jXZPP)
            (g$cps/generate-literal$6608$jXZPP g$x$6836$jXZPP))))))
   (g$starts-with?$6653$jXZPP
     g$starts-with?$6930$jXZPP
     (case-lambda
       ((g$str$6855$jXZPP g$sub$6856$jXZPP)
        (clr-call-internal
          'system.string
          'startswith
          g$str$6855$jXZPP
          g$sub$6856$jXZPP))))
   (g$special$6654$jXZPP
     g$special$6931$jXZPP
     '(identity-for-cps
        letrec-identity
        library-letrec*-identity
        letrec*-identity
        cps-prim
        eval-core
        dynamic-wind
        values
        apply
        call-with-values
        call/cc
        call-with-current-continuation))
   (g$primitive?$6655$jXZPP
     g$primitive?$6932$jXZPP
     (case-lambda
       ((g$o$6857$jXZPP)
        (if (if (symbol? g$o$6857$jXZPP)
              (begin
                '#f
                (not (g$memq$5070$jXZPP g$o$6857$jXZPP g$special$6654$jXZPP)))
              '#f)
          ((case-lambda
             ((g$b$6858$jXZPP)
              ((case-lambda
                 ((g$t$6859$jXZPP)
                  (if g$t$6859$jXZPP
                    g$t$6859$jXZPP
                    (begin '#f (g$clr-generator?$6656$jXZPP g$o$6857$jXZPP)))))
               (clr-is-internal
                 'ironscheme.runtime.builtinmethod
                 g$b$6858$jXZPP))))
           (if (symbol-bound? g$o$6857$jXZPP)
             (begin '#f (symbol-value g$o$6857$jXZPP))
             '#f))
          '#f))))
   (g$clr-generator?$6656$jXZPP
     g$clr-generator?$6933$jXZPP
     (case-lambda
       ((g$o$6860$jXZPP)
        (if (symbol? g$o$6860$jXZPP)
          (begin
            '#f
            (g$starts-with?$6653$jXZPP (symbol->string g$o$6860$jXZPP) '"clr-"))
          '#f))))
   (g$fix-primitives$6657$jXZPP
     g$fix-primitives$6934$jXZPP
     (case-lambda
       ((g$e$6861$jXZPP)
        (if (if (pair? g$e$6861$jXZPP) (begin '#f (list? g$e$6861$jXZPP)) '#f)
          ((case-lambda
             ((g$o$6862$jXZPP)
              (if (eq? g$o$6862$jXZPP 'quote)
                g$e$6861$jXZPP
                (if (eq? g$o$6862$jXZPP 'library-letrec*)
                  ((case-lambda
                     ((g$name$6863$jXZPP g$e$6864$jXZPP)
                      ((case-lambda
                         ((g$bindings$6865$jXZPP g$body*$6866$jXZPP)
                          ((case-lambda
                             ((g$lhs*$6867$jXZPP
                                g$lhs**$6868$jXZPP
                                g$rhs*$6869$jXZPP)
                              (cons
                                'library-letrec*
                                (cons
                                  g$name$6863$jXZPP
                                  (cons
                                    (g$map$5078$jXZPP
                                      list
                                      g$lhs*$6867$jXZPP
                                      g$lhs**$6868$jXZPP
                                      (g$map$5078$jXZPP
                                        g$fix-primitives$6657$jXZPP
                                        g$rhs*$6869$jXZPP))
                                    (g$map$5078$jXZPP
                                      g$fix-primitives$6657$jXZPP
                                      g$body*$6866$jXZPP))))))
                           (g$map$5078$jXZPP car g$bindings$6865$jXZPP)
                           (g$map$5078$jXZPP
                             g$cadr$5304$jXZPP
                             g$bindings$6865$jXZPP)
                           (g$map$5078$jXZPP
                             g$caddr$5310$jXZPP
                             g$bindings$6865$jXZPP))))
                       (g$cadr$5304$jXZPP g$e$6864$jXZPP)
                       (g$cddr$5306$jXZPP g$e$6864$jXZPP))))
                   (g$cadr$5304$jXZPP g$e$6861$jXZPP)
                   (cdr g$e$6861$jXZPP))
                  (if (begin '#f (g$clr-generator?$6656$jXZPP g$o$6862$jXZPP))
                    (if (pair? (cdr g$e$6861$jXZPP))
                      (list
                        (g$fix-primitives$6657$jXZPP
                          (g$cadr$5304$jXZPP g$e$6861$jXZPP))
                        (cons
                          g$o$6862$jXZPP
                          (g$map$5078$jXZPP
                            g$fix-primitives$6657$jXZPP
                            (g$cddr$5306$jXZPP g$e$6861$jXZPP))))
                      g$e$6861$jXZPP)
                    (if (if (eq? g$o$6862$jXZPP 'void)
                          (begin '#f (null? (cdr g$e$6861$jXZPP)))
                          '#f)
                      g$e$6861$jXZPP
                      (cons
                        (g$fix-primitives$6657$jXZPP g$o$6862$jXZPP)
                        (g$map$5078$jXZPP
                          g$fix-primitives$6657$jXZPP
                          (cdr g$e$6861$jXZPP)))))))))
           (car g$e$6861$jXZPP))
          (if (g$primitive?$6655$jXZPP g$e$6861$jXZPP)
            (list 'cps-prim g$e$6861$jXZPP)
            g$e$6861$jXZPP)))))
   (g$parse->cps$6658$jXZPP
     g$parse->cps$6935$jXZPP
     (case-lambda
       ((g$e$6870$jXZPP g$var$6871$jXZPP)
        ((g$parse$6652$jXZPP g$e$6870$jXZPP)
         (g$variable-continuator$6624$jXZPP g$var$6871$jXZPP)))))
   (g$convert->cps$6659$jXZPP
     g$convert->cps$6936$jXZPP
     (case-lambda
       ((g$e$6872$jXZPP g$var$6873$jXZPP)
        (g$fix-primitives$6657$jXZPP
          (g$parse->cps$6658$jXZPP g$e$6872$jXZPP g$var$6873$jXZPP)))))
   (g$bootfile$6660$jXZPP g$bootfile$6937$jXZPP '"ironscheme.boot.pp")
   (g$bootfile-cps$6661$jXZPP
     g$bootfile-cps$6938$jXZPP
     '"ironscheme.boot.cps")
   (g$expand-boot-cps$6662$jXZPP
     g$expand-boot-cps$6939$jXZPP
     (case-lambda
       (() (g$expand-boot-cps$6662$jXZPP write))
       ((g$write$6874$jXZPP)
        (letrec* ((g$read-file$6875$jXZPP
                    (case-lambda
                      ((g$port$6879$jXZPP)
                       ((letrec ((g$f$6880$jXZPP
                                   (case-lambda
                                     ((g$e$6881$jXZPP g$a$6882$jXZPP)
                                      (if (eof-object? g$e$6881$jXZPP)
                                        (reverse g$a$6882$jXZPP)
                                        ((case-lambda
                                           ((g$r$6883$jXZPP)
                                            (g$f$6880$jXZPP
                                              (read g$port$6879$jXZPP)
                                              (cons
                                                g$r$6883$jXZPP
                                                g$a$6882$jXZPP))))
                                         (g$convert->cps$6659$jXZPP
                                           g$e$6881$jXZPP
                                           'identity-for-cps)))))))
                          g$f$6880$jXZPP)
                        (read g$port$6879$jXZPP)
                        '())))))
          (begin
            (if (g$file-exists?$5599$jXZPP g$bootfile-cps$6661$jXZPP)
              (g$delete-file$5600$jXZPP g$bootfile-cps$6661$jXZPP)
              (void))
            (g$call-with-input-file$6430$jXZPP
              g$bootfile$6660$jXZPP
              (case-lambda
                ((g$in$6876$jXZPP)
                 (g$call-with-output-file$6431$jXZPP
                   g$bootfile-cps$6661$jXZPP
                   (case-lambda
                     ((g$out$6877$jXZPP)
                      (g$for-each$5079$jXZPP
                        (case-lambda
                          ((g$e$6878$jXZPP)
                           (g$write$6874$jXZPP
                             g$e$6878$jXZPP
                             g$out$6877$jXZPP)))
                        (g$read-file$6875$jXZPP g$in$6876$jXZPP))))))))))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6940$jXZPP
     g$library-version-mismatch-warning$7041$jXZPP
     (case-lambda
       ((g$name$7015$jXZPP g$depname$7016$jXZPP g$filename$7017$jXZPP)
        (g$fprintf$6601$jXZPP
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$7015$jXZPP
          g$depname$7016$jXZPP
          g$filename$7017$jXZPP))))
   (g$file-locator-resolution-error$6941$jXZPP
     g$file-locator-resolution-error$7042$jXZPP
     (case-lambda
       ((g$libname$7018$jXZPP g$failed-list$7019$jXZPP)
        (letrec* ((g$8021$7020$jXZPP
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$8024$jXZPP
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$8023$7021$jXZPP '#f)
                  (g$8022$7022$jXZPP
                    (make-record-constructor-descriptor
                      g$8021$7020$jXZPP
                      &condition-rcd
                      g$8023$7021$jXZPP))
                  (g$8020$7023$jXZPP (record-predicate g$8021$7020$jXZPP))
                  (g$make-library-resolution-condition$7024$jXZPP
                    (record-constructor g$8022$7022$jXZPP))
                  (g$8018$7025$jXZPP (record-accessor g$8021$7020$jXZPP '0))
                  (g$8019$7026$jXZPP (record-accessor g$8021$7020$jXZPP '1))
                  (g$library-resolution-condition?$7027$jXZPP
                    (condition-predicate g$8021$7020$jXZPP))
                  (g$condition-library$7028$jXZPP
                    (condition-accessor g$8021$7020$jXZPP g$8018$7025$jXZPP))
                  (g$condition-files$7029$jXZPP
                    (condition-accessor g$8021$7020$jXZPP g$8019$7026$jXZPP)))
          (raise
            (condition
              (g$make-error$5868$jXZPP)
              (g$make-who-condition$5894$jXZPP 'expander)
              (g$make-message-condition$5848$jXZPP
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$7024$jXZPP
                g$libname$7018$jXZPP
                g$failed-list$7019$jXZPP)))))))
   (g$read-library-source-file$6942$jXZPP
     g$read-library-source-file$7043$jXZPP
     (case-lambda
       ((g$file-name$7030$jXZPP)
        (g$with-input-from-file$6428$jXZPP
          g$file-name$7030$jXZPP
          read-annotated))))
   (g$make-parameter$6943$jXZPP
     g$make-parameter$7044$jXZPP
     (case-lambda
       ((g$x$7031$jXZPP)
        (g$make-parameter$6943$jXZPP
          g$x$7031$jXZPP
          (case-lambda ((g$x$7032$jXZPP) g$x$7032$jXZPP))))
       ((g$x$7033$jXZPP g$fender$7034$jXZPP)
        (begin
          (if (not (procedure? g$fender$7034$jXZPP))
            (g$assertion-error$11671$jXZPP
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(90,8) - (90,36)"))
            (void))
          ((case-lambda
             ((g$x$7035$jXZPP)
              (case-lambda
                (() g$x$7035$jXZPP)
                ((g$v$7036$jXZPP)
                 (set! g$x$7035$jXZPP (g$fender$7034$jXZPP g$v$7036$jXZPP))))))
           (g$fender$7034$jXZPP g$x$7033$jXZPP))))))
   (g$file-options-constructor$7011$jXZPP
     g$file-options-constructor$7045$jXZPP
     (g$make-parameter$6943$jXZPP '#f))
   (g$file-options-spec$7012$jXZPP
     g$file-options-spec$7046$jXZPP
     (case-lambda
       ((g$x$7037$jXZPP)
        ((g$file-options-constructor$7011$jXZPP) g$x$7037$jXZPP))))
   (g$set-label-binding!$7013$jXZPP
     g$set-label-binding!$7047$jXZPP
     (case-lambda
       ((g$label$7038$jXZPP g$binding$7039$jXZPP)
        (set-symbol-value! g$label$7038$jXZPP g$binding$7039$jXZPP))))
   (g$label-binding$7014$jXZPP
     g$label-binding$7048$jXZPP
     (case-lambda
       ((g$label$7040$jXZPP)
        (if (symbol-bound? g$label$7040$jXZPP)
          (begin '#f (symbol-value g$label$7040$jXZPP))
          '#f)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$7244$jXZPP
     g$current-primitive-locations$7289$jXZPP
     (g$make-parameter$7044$jXZPP
       (case-lambda ((g$x$7250$jXZPP) '#f))
       (case-lambda
         ((g$p$7251$jXZPP)
          (begin
            (if (not (procedure? g$p$7251$jXZPP))
              (g$assertion-error$11671$jXZPP
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$7251$jXZPP)))))
   (g$mutable?$7245$jXZPP
     g$mutable?$7290$jXZPP
     (case-lambda
       ((g$x$7252$jXZPP)
        (letrec* ((g$simple?$7253$jXZPP
                    (case-lambda
                      ((g$x$7254$jXZPP)
                       ((case-lambda
                          ((g$t$7255$jXZPP)
                           (if g$t$7255$jXZPP
                             g$t$7255$jXZPP
                             ((case-lambda
                                ((g$t$7256$jXZPP)
                                 (if g$t$7256$jXZPP
                                   g$t$7256$jXZPP
                                   ((case-lambda
                                      ((g$t$7257$jXZPP)
                                       (if g$t$7257$jXZPP
                                         g$t$7257$jXZPP
                                         ((case-lambda
                                            ((g$t$7258$jXZPP)
                                             (if g$t$7258$jXZPP
                                               g$t$7258$jXZPP
                                               ((case-lambda
                                                  ((g$t$7259$jXZPP)
                                                   (if g$t$7259$jXZPP
                                                     g$t$7259$jXZPP
                                                     ((case-lambda
                                                        ((g$t$7260$jXZPP)
                                                         (if g$t$7260$jXZPP
                                                           g$t$7260$jXZPP
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$7254$jXZPP)))))
                                                      (bytevector?
                                                        g$x$7254$jXZPP)))))
                                                (string? g$x$7254$jXZPP)))))
                                          (boolean? g$x$7254$jXZPP)))))
                                    (symbol? g$x$7254$jXZPP)))))
                              (char? g$x$7254$jXZPP)))))
                        (null? g$x$7254$jXZPP))))))
          (not (g$simple?$7253$jXZPP g$x$7252$jXZPP))))))
   (g$rewriter$7246$jXZPP
     g$rewriter$7291$jXZPP
     (case-lambda
       ((g$quote-hack?$7261$jXZPP)
        (letrec* ((g$f$7262$jXZPP
                    (case-lambda
                      ((g$x$7263$jXZPP)
                       (if (pair? g$x$7263$jXZPP)
                         ((case-lambda
                            ((g$t$7264$jXZPP)
                             (if (g$memv$5071$jXZPP g$t$7264$jXZPP '(quote))
                               (if (if g$quote-hack?$7261$jXZPP
                                     (begin
                                       '#f
                                       (g$mutable?$7245$jXZPP
                                         (g$cadr$5304$jXZPP g$x$7263$jXZPP)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$7265$jXZPP)
                                     (begin
                                       (set-symbol-value!
                                         g$g$7265$jXZPP
                                         (g$cadr$5304$jXZPP g$x$7263$jXZPP))
                                       g$g$7265$jXZPP)))
                                  (gensym))
                                 g$x$7263$jXZPP)
                               (if (g$memv$5071$jXZPP
                                     g$t$7264$jXZPP
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (g$map$5078$jXZPP
                                     (case-lambda
                                       ((g$x$7266$jXZPP)
                                        (cons
                                          (car g$x$7266$jXZPP)
                                          (g$map$5078$jXZPP
                                            g$f$7262$jXZPP
                                            (cdr g$x$7266$jXZPP)))))
                                     (cdr g$x$7263$jXZPP)))
                                 (if (g$memv$5071$jXZPP
                                       g$t$7264$jXZPP
                                       '(lambda))
                                   (g$cons*$5080$jXZPP
                                     'lambda
                                     (g$cadr$5304$jXZPP g$x$7263$jXZPP)
                                     (g$map$5078$jXZPP
                                       g$f$7262$jXZPP
                                       (g$cddr$5306$jXZPP g$x$7263$jXZPP)))
                                   (if (g$memv$5071$jXZPP
                                         g$t$7264$jXZPP
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$7267$jXZPP
                                           g$body*$7268$jXZPP)
                                         ((case-lambda
                                            ((g$lhs*$7269$jXZPP
                                               g$rhs*$7270$jXZPP)
                                             (g$cons*$5080$jXZPP
                                               'letrec
                                               (g$map$5078$jXZPP
                                                 list
                                                 g$lhs*$7269$jXZPP
                                                 (g$map$5078$jXZPP
                                                   g$f$7262$jXZPP
                                                   g$rhs*$7270$jXZPP))
                                               (g$map$5078$jXZPP
                                                 g$f$7262$jXZPP
                                                 g$body*$7268$jXZPP))))
                                          (g$map$5078$jXZPP
                                            car
                                            g$bindings$7267$jXZPP)
                                          (g$map$5078$jXZPP
                                            g$cadr$5304$jXZPP
                                            g$bindings$7267$jXZPP))))
                                      (g$cadr$5304$jXZPP g$x$7263$jXZPP)
                                      (g$cddr$5306$jXZPP g$x$7263$jXZPP))
                                     (if (g$memv$5071$jXZPP
                                           g$t$7264$jXZPP
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$7271$jXZPP
                                             g$body*$7272$jXZPP)
                                           ((case-lambda
                                              ((g$lhs*$7273$jXZPP
                                                 g$rhs*$7274$jXZPP)
                                               (g$cons*$5080$jXZPP
                                                 'letrec*
                                                 (g$map$5078$jXZPP
                                                   list
                                                   g$lhs*$7273$jXZPP
                                                   (g$map$5078$jXZPP
                                                     g$f$7262$jXZPP
                                                     g$rhs*$7274$jXZPP))
                                                 (g$map$5078$jXZPP
                                                   g$f$7262$jXZPP
                                                   g$body*$7272$jXZPP))))
                                            (g$map$5078$jXZPP
                                              car
                                              g$bindings$7271$jXZPP)
                                            (g$map$5078$jXZPP
                                              g$cadr$5304$jXZPP
                                              g$bindings$7271$jXZPP))))
                                        (g$cadr$5304$jXZPP g$x$7263$jXZPP)
                                        (g$cddr$5306$jXZPP g$x$7263$jXZPP))
                                       (if (g$memv$5071$jXZPP
                                             g$t$7264$jXZPP
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$7275$jXZPP g$x$7276$jXZPP)
                                             ((case-lambda
                                                ((g$bindings$7277$jXZPP
                                                   g$body*$7278$jXZPP)
                                                 ((case-lambda
                                                    ((g$lhs*$7279$jXZPP
                                                       g$lhs**$7280$jXZPP
                                                       g$rhs*$7281$jXZPP)
                                                     (g$cons*$5080$jXZPP
                                                       'library-letrec*
                                                       g$name$7275$jXZPP
                                                       (g$map$5078$jXZPP
                                                         list
                                                         g$lhs*$7279$jXZPP
                                                         g$lhs**$7280$jXZPP
                                                         (g$map$5078$jXZPP
                                                           g$f$7262$jXZPP
                                                           g$rhs*$7281$jXZPP))
                                                       (g$map$5078$jXZPP
                                                         g$f$7262$jXZPP
                                                         g$body*$7278$jXZPP))))
                                                  (g$map$5078$jXZPP
                                                    car
                                                    g$bindings$7277$jXZPP)
                                                  (g$map$5078$jXZPP
                                                    g$cadr$5304$jXZPP
                                                    g$bindings$7277$jXZPP)
                                                  (g$map$5078$jXZPP
                                                    g$caddr$5310$jXZPP
                                                    g$bindings$7277$jXZPP))))
                                              (g$cadr$5304$jXZPP g$x$7276$jXZPP)
                                              (g$cddr$5306$jXZPP
                                                g$x$7276$jXZPP))))
                                          (g$cadr$5304$jXZPP g$x$7263$jXZPP)
                                          (cdr g$x$7263$jXZPP))
                                         (if (g$memv$5071$jXZPP
                                               g$t$7264$jXZPP
                                               '(begin))
                                           (cons
                                             'begin
                                             (g$map$5078$jXZPP
                                               g$f$7262$jXZPP
                                               (cdr g$x$7263$jXZPP)))
                                           (if (g$memv$5071$jXZPP
                                                 g$t$7264$jXZPP
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5304$jXZPP
                                                 g$x$7263$jXZPP)
                                               (g$f$7262$jXZPP
                                                 (g$caddr$5310$jXZPP
                                                   g$x$7263$jXZPP)))
                                             (if (g$memv$5071$jXZPP
                                                   g$t$7264$jXZPP
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$7282$jXZPP)
                                                   ((case-lambda
                                                      ((g$t$7283$jXZPP)
                                                       (if g$t$7283$jXZPP
                                                         ((case-lambda
                                                            ((g$loc$7284$jXZPP)
                                                             g$loc$7284$jXZPP))
                                                          g$t$7283$jXZPP)
                                                         g$op$7282$jXZPP)))
                                                    ((g$current-primitive-locations$7244$jXZPP)
                                                     g$op$7282$jXZPP))))
                                                (g$cadr$5304$jXZPP
                                                  g$x$7263$jXZPP))
                                               (if (g$memv$5071$jXZPP
                                                     g$t$7264$jXZPP
                                                     '(define))
                                                 g$x$7263$jXZPP
                                                 (if (list? g$x$7263$jXZPP)
                                                   (g$map$5078$jXZPP
                                                     g$f$7262$jXZPP
                                                     g$x$7263$jXZPP)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$7263$jXZPP
                                                     (list?
                                                       g$x$7263$jXZPP)))))))))))))))
                          (car g$x$7263$jXZPP))
                         g$x$7263$jXZPP)))))
          g$f$7262$jXZPP))))
   (g$expanded->core$7247$jXZPP
     g$expanded->core$7292$jXZPP
     (case-lambda
       ((g$x$7285$jXZPP) ((g$rewriter$7246$jXZPP '#t) g$x$7285$jXZPP))))
   (g$compile-core-expr$7248$jXZPP
     g$compile-core-expr$7293$jXZPP
     (case-lambda
       ((g$x$7286$jXZPP) ((g$rewriter$7246$jXZPP '#f) g$x$7286$jXZPP))))
   (g$compile-core-expr-to-port$7249$jXZPP
     g$compile-core-expr-to-port$7294$jXZPP
     (case-lambda
       ((g$x$7287$jXZPP g$p$7288$jXZPP)
        (g$pretty-print$7243$jXZPP
          ((g$rewriter$7246$jXZPP '#f) g$x$7287$jXZPP)
          g$p$7288$jXZPP)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$7333$jXZPP
     g$make-collection$7536$jXZPP
     (case-lambda
       (()
        ((case-lambda
           ((g$set$7394$jXZPP)
            (letrec* ((g$set-cons$7395$jXZPP
                        (case-lambda
                          ((g$x$7399$jXZPP g$ls$7400$jXZPP)
                           (if (g$memq$5070$jXZPP
                                 g$x$7399$jXZPP
                                 g$ls$7400$jXZPP)
                             g$ls$7400$jXZPP
                             (cons g$x$7399$jXZPP g$ls$7400$jXZPP))))))
              (case-lambda
                (() g$set$7394$jXZPP)
                ((g$x$7396$jXZPP)
                 (set! g$set$7394$jXZPP
                   (g$set-cons$7395$jXZPP g$x$7396$jXZPP g$set$7394$jXZPP)))
                ((g$x$7397$jXZPP g$del?$7398$jXZPP)
                 (if g$del?$7398$jXZPP
                   (set! g$set$7394$jXZPP
                     (g$remq$5085$jXZPP g$x$7397$jXZPP g$set$7394$jXZPP))
                   (set! g$set$7394$jXZPP
                     (g$set-cons$7395$jXZPP
                       g$x$7397$jXZPP
                       g$set$7394$jXZPP))))))))
         '()))))
   (g$current-library-collection$7334$jXZPP
     g$current-library-collection$7537$jXZPP
     (g$make-parameter$7044$jXZPP
       (g$make-collection$7333$jXZPP)
       (case-lambda
         ((g$x$7401$jXZPP)
          (begin
            (if (not (procedure? g$x$7401$jXZPP))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$7401$jXZPP)
              (void))
            g$x$7401$jXZPP)))))
   (g$8340$7335$jXZPP
     g$8340$7538$jXZPP
     (make-record-type-descriptor
       'library
       '#f
       'g$8343$jXZPP
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8342$7336$jXZPP g$8342$7539$jXZPP '#f)
   (g$8341$7337$jXZPP
     g$8341$7540$jXZPP
     (make-record-constructor-descriptor
       g$8340$7335$jXZPP
       '#f
       g$8342$7336$jXZPP))
   (g$library?$7338$jXZPP
     g$library?$7541$jXZPP
     (record-predicate g$8340$7335$jXZPP))
   (g$make-library$7339$jXZPP
     g$make-library$7542$jXZPP
     (record-constructor g$8341$7337$jXZPP))
   (g$library-id$7340$jXZPP
     g$library-id$7543$jXZPP
     (record-accessor g$8340$7335$jXZPP '0))
   (g$library-name$7341$jXZPP
     g$library-name$7544$jXZPP
     (record-accessor g$8340$7335$jXZPP '1))
   (g$library-version$7342$jXZPP
     g$library-version$7545$jXZPP
     (record-accessor g$8340$7335$jXZPP '2))
   (g$library-imp*$7343$jXZPP
     g$library-imp*$7546$jXZPP
     (record-accessor g$8340$7335$jXZPP '3))
   (g$library-vis*$7344$jXZPP
     g$library-vis*$7547$jXZPP
     (record-accessor g$8340$7335$jXZPP '4))
   (g$library-inv*$7345$jXZPP
     g$library-inv*$7548$jXZPP
     (record-accessor g$8340$7335$jXZPP '5))
   (g$library-subst$7346$jXZPP
     g$library-subst$7549$jXZPP
     (record-accessor g$8340$7335$jXZPP '6))
   (g$library-env$7347$jXZPP
     g$library-env$7550$jXZPP
     (record-accessor g$8340$7335$jXZPP '7))
   (g$library-visit-state$7348$jXZPP
     g$library-visit-state$7551$jXZPP
     (record-accessor g$8340$7335$jXZPP '8))
   (g$library-invoke-state$7349$jXZPP
     g$library-invoke-state$7552$jXZPP
     (record-accessor g$8340$7335$jXZPP '9))
   (g$library-visit-code$7350$jXZPP
     g$library-visit-code$7553$jXZPP
     (record-accessor g$8340$7335$jXZPP '10))
   (g$library-invoke-code$7351$jXZPP
     g$library-invoke-code$7554$jXZPP
     (record-accessor g$8340$7335$jXZPP '11))
   (g$library-visible?$7352$jXZPP
     g$library-visible?$7555$jXZPP
     (record-accessor g$8340$7335$jXZPP '12))
   (g$library-source-file-name$7353$jXZPP
     g$library-source-file-name$7556$jXZPP
     (record-accessor g$8340$7335$jXZPP '13))
   (g$set-library-id!$7354$jXZPP
     g$set-library-id!$7557$jXZPP
     (record-mutator g$8340$7335$jXZPP '0))
   (g$set-library-name!$7355$jXZPP
     g$set-library-name!$7558$jXZPP
     (record-mutator g$8340$7335$jXZPP '1))
   (g$set-library-version!$7356$jXZPP
     g$set-library-version!$7559$jXZPP
     (record-mutator g$8340$7335$jXZPP '2))
   (g$set-library-imp*!$7357$jXZPP
     g$set-library-imp*!$7560$jXZPP
     (record-mutator g$8340$7335$jXZPP '3))
   (g$set-library-vis*!$7358$jXZPP
     g$set-library-vis*!$7561$jXZPP
     (record-mutator g$8340$7335$jXZPP '4))
   (g$set-library-inv*!$7359$jXZPP
     g$set-library-inv*!$7562$jXZPP
     (record-mutator g$8340$7335$jXZPP '5))
   (g$set-library-subst!$7360$jXZPP
     g$set-library-subst!$7563$jXZPP
     (record-mutator g$8340$7335$jXZPP '6))
   (g$set-library-env!$7361$jXZPP
     g$set-library-env!$7564$jXZPP
     (record-mutator g$8340$7335$jXZPP '7))
   (g$set-library-visit-state!$7362$jXZPP
     g$set-library-visit-state!$7565$jXZPP
     (record-mutator g$8340$7335$jXZPP '8))
   (g$set-library-invoke-state!$7363$jXZPP
     g$set-library-invoke-state!$7566$jXZPP
     (record-mutator g$8340$7335$jXZPP '9))
   (g$set-library-visit-code!$7364$jXZPP
     g$set-library-visit-code!$7567$jXZPP
     (record-mutator g$8340$7335$jXZPP '10))
   (g$set-library-invoke-code!$7365$jXZPP
     g$set-library-invoke-code!$7568$jXZPP
     (record-mutator g$8340$7335$jXZPP '11))
   (g$set-library-visible?!$7366$jXZPP
     g$set-library-visible?!$7569$jXZPP
     (record-mutator g$8340$7335$jXZPP '12))
   (g$set-library-source-file-name!$7367$jXZPP
     g$set-library-source-file-name!$7570$jXZPP
     (record-mutator g$8340$7335$jXZPP '13))
   (g$rp$7368$jXZPP
     g$rp$7571$jXZPP
     (make-record-printer
       'library
       (case-lambda
         ((g$x$7402$jXZPP g$p$7403$jXZPP g$wr$7404$jXZPP)
          (begin
            (if (not (g$library?$7338$jXZPP g$x$7402$jXZPP))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6602$jXZPP
                '"#<library ~s>"
                (if (null? (g$library-version$7342$jXZPP g$x$7402$jXZPP))
                  (g$library-name$7341$jXZPP g$x$7402$jXZPP)
                  (append
                    (g$library-name$7341$jXZPP g$x$7402$jXZPP)
                    (list (g$library-version$7342$jXZPP g$x$7402$jXZPP)))))
              g$p$7403$jXZPP))))))
   (g$find-dependencies$7369$jXZPP
     g$find-dependencies$7572$jXZPP
     (case-lambda
       ((g$ls$7405$jXZPP)
        (if (null? g$ls$7405$jXZPP)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$7370$jXZPP
     g$find-library-by$7573$jXZPP
     (case-lambda
       ((g$pred$7406$jXZPP)
        ((letrec ((g$f$7407$jXZPP
                    (case-lambda
                      ((g$ls$7408$jXZPP)
                       (if (null? g$ls$7408$jXZPP)
                         '#f
                         (if (g$pred$7406$jXZPP (car g$ls$7408$jXZPP))
                           (car g$ls$7408$jXZPP)
                           (g$f$7407$jXZPP (cdr g$ls$7408$jXZPP))))))))
           g$f$7407$jXZPP)
         ((g$current-library-collection$7334$jXZPP))))))
   (g$library-path$7371$jXZPP
     g$library-path$7574$jXZPP
     (g$make-parameter$7044$jXZPP
       '(".")
       (case-lambda
         ((g$x$7409$jXZPP)
          (if (if (list? g$x$7409$jXZPP)
                (begin '#f (g$for-all$5076$jXZPP string? g$x$7409$jXZPP))
                '#f)
            (g$map$5078$jXZPP
              (case-lambda ((g$x$7410$jXZPP) g$x$7410$jXZPP))
              g$x$7409$jXZPP)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$7409$jXZPP))))))
   (g$library-extensions$7372$jXZPP
     g$library-extensions$7575$jXZPP
     (g$make-parameter$7044$jXZPP
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$7411$jXZPP)
          (if (if (list? g$x$7411$jXZPP)
                (begin '#f (g$for-all$5076$jXZPP string? g$x$7411$jXZPP))
                '#f)
            (g$map$5078$jXZPP
              (case-lambda ((g$x$7412$jXZPP) g$x$7412$jXZPP))
              g$x$7411$jXZPP)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$7411$jXZPP))))))
   (g$library-name->file-name$7373$jXZPP
     g$library-name->file-name$7576$jXZPP
     (case-lambda
       ((g$x$7413$jXZPP)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6379$jXZPP)))
          (case-lambda
            ((g$p$7416$jXZPP g$extract$7417$jXZPP)
             ((case-lambda
                ((g$extract$7418$jXZPP g$p$7419$jXZPP)
                 (letrec* ((g$display-hex$7420$jXZPP
                             (case-lambda
                               ((g$n$7428$jXZPP)
                                (if (<= '0 g$n$7428$jXZPP '9)
                                  (display g$n$7428$jXZPP g$p$7419$jXZPP)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$7428$jXZPP '10)))
                                    g$p$7419$jXZPP))))))
                   (begin
                     ((letrec ((g$f$7421$jXZPP
                                 (case-lambda
                                   ((g$ls$7422$jXZPP)
                                    (if (not (null? g$ls$7422$jXZPP))
                                      (begin
                                        (display '"/" g$p$7419$jXZPP)
                                        (g$for-each$5079$jXZPP
                                          (case-lambda
                                            ((g$c$7423$jXZPP)
                                             (if ((case-lambda
                                                    ((g$t$7424$jXZPP)
                                                     (if g$t$7424$jXZPP
                                                       g$t$7424$jXZPP
                                                       ((case-lambda
                                                          ((g$t$7425$jXZPP)
                                                           (if g$t$7425$jXZPP
                                                             g$t$7425$jXZPP
                                                             ((case-lambda
                                                                ((g$t$7426$jXZPP)
                                                                 (if g$t$7426$jXZPP
                                                                   g$t$7426$jXZPP
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5071$jXZPP
                                                                       g$c$7423$jXZPP
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5350$jXZPP
                                                                '#\0
                                                                g$c$7423$jXZPP
                                                                '#\9)))))
                                                        (g$char<=?$5350$jXZPP
                                                          '#\A
                                                          g$c$7423$jXZPP
                                                          '#\Z)))))
                                                  (g$char<=?$5350$jXZPP
                                                    '#\a
                                                    g$c$7423$jXZPP
                                                    '#\z))
                                               (display
                                                 g$c$7423$jXZPP
                                                 g$p$7419$jXZPP)
                                               (begin
                                                 (display '"%" g$p$7419$jXZPP)
                                                 ((case-lambda
                                                    ((g$n$7427$jXZPP)
                                                     (begin
                                                       (g$display-hex$7420$jXZPP
                                                         (g$quotient$5962$jXZPP
                                                           g$n$7427$jXZPP
                                                           '16))
                                                       (g$display-hex$7420$jXZPP
                                                         (g$remainder$5963$jXZPP
                                                           g$n$7427$jXZPP
                                                           '16)))))
                                                  (char->integer
                                                    g$c$7423$jXZPP))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$7422$jXZPP))))
                                        (g$f$7421$jXZPP (cdr g$ls$7422$jXZPP)))
                                      (void))))))
                        g$f$7421$jXZPP)
                      g$x$7413$jXZPP)
                     (g$extract$7418$jXZPP)))))
              g$extract$7417$jXZPP
              g$p$7416$jXZPP)))))))
   (g$file-locator$7374$jXZPP
     g$file-locator$7577$jXZPP
     (g$make-parameter$7044$jXZPP
       (case-lambda
         ((g$x$7429$jXZPP)
          ((case-lambda
             ((g$str$7430$jXZPP)
              ((letrec ((g$f$7431$jXZPP
                          (case-lambda
                            ((g$ls$7432$jXZPP
                               g$exts$7433$jXZPP
                               g$failed-list$7434$jXZPP)
                             (if (null? g$ls$7432$jXZPP)
                               (g$file-locator-resolution-error$7042$jXZPP
                                 g$x$7429$jXZPP
                                 (reverse g$failed-list$7434$jXZPP))
                               (if (null? g$exts$7433$jXZPP)
                                 (g$f$7431$jXZPP
                                   (cdr g$ls$7432$jXZPP)
                                   (g$library-extensions$7372$jXZPP)
                                   g$failed-list$7434$jXZPP)
                                 ((case-lambda
                                    ((g$name$7435$jXZPP)
                                     (if (g$file-exists?$5599$jXZPP
                                           g$name$7435$jXZPP)
                                       g$name$7435$jXZPP
                                       (g$f$7431$jXZPP
                                         g$ls$7432$jXZPP
                                         (cdr g$exts$7433$jXZPP)
                                         (cons
                                           g$name$7435$jXZPP
                                           g$failed-list$7434$jXZPP)))))
                                  (string-append
                                    (car g$ls$7432$jXZPP)
                                    g$str$7430$jXZPP
                                    (car g$exts$7433$jXZPP)))))))))
                 g$f$7431$jXZPP)
               (g$library-path$7371$jXZPP)
               (g$library-extensions$7372$jXZPP)
               '())))
           (g$library-name->file-name$7373$jXZPP g$x$7429$jXZPP))))
       (case-lambda
         ((g$f$7436$jXZPP)
          (if (procedure? g$f$7436$jXZPP)
            g$f$7436$jXZPP
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$7436$jXZPP))))))
   (g$serialize-all$7375$jXZPP
     g$serialize-all$7578$jXZPP
     (case-lambda
       ((g$serialize$7437$jXZPP g$compile$7438$jXZPP)
        (letrec* ((g$library-desc$7439$jXZPP
                    (case-lambda
                      ((g$x$7441$jXZPP)
                       (list
                         (g$library-id$7340$jXZPP g$x$7441$jXZPP)
                         (g$library-name$7341$jXZPP g$x$7441$jXZPP))))))
          (g$for-each$5079$jXZPP
            (case-lambda
              ((g$x$7440$jXZPP)
               (if (g$library-source-file-name$7353$jXZPP g$x$7440$jXZPP)
                 (g$serialize$7437$jXZPP
                   (g$library-source-file-name$7353$jXZPP g$x$7440$jXZPP)
                   (list
                     (g$library-id$7340$jXZPP g$x$7440$jXZPP)
                     (g$library-name$7341$jXZPP g$x$7440$jXZPP)
                     (g$library-version$7342$jXZPP g$x$7440$jXZPP)
                     (g$map$5078$jXZPP
                       g$library-desc$7439$jXZPP
                       (g$library-imp*$7343$jXZPP g$x$7440$jXZPP))
                     (g$map$5078$jXZPP
                       g$library-desc$7439$jXZPP
                       (g$library-vis*$7344$jXZPP g$x$7440$jXZPP))
                     (g$map$5078$jXZPP
                       g$library-desc$7439$jXZPP
                       (g$library-inv*$7345$jXZPP g$x$7440$jXZPP))
                     (g$library-subst$7346$jXZPP g$x$7440$jXZPP)
                     (g$library-env$7347$jXZPP g$x$7440$jXZPP)
                     (g$compile$7438$jXZPP
                       (g$library-visit-code$7350$jXZPP g$x$7440$jXZPP))
                     (g$compile$7438$jXZPP
                       (g$library-invoke-code$7351$jXZPP g$x$7440$jXZPP))
                     (g$library-visible?$7352$jXZPP g$x$7440$jXZPP)))
                 (void))))
            ((g$current-library-collection$7334$jXZPP)))))))
   (g$current-precompiled-library-loader$7376$jXZPP
     g$current-precompiled-library-loader$7579$jXZPP
     (g$make-parameter$7044$jXZPP
       (case-lambda ((g$filename$7442$jXZPP g$sk$7443$jXZPP) '#f))))
   (g$try-load-from-file$7377$jXZPP
     g$try-load-from-file$7580$jXZPP
     (case-lambda
       ((g$filename$7444$jXZPP)
        ((g$current-precompiled-library-loader$7376$jXZPP)
         g$filename$7444$jXZPP
         (case-lambda
           ((g$id$7445$jXZPP
              g$name$7446$jXZPP
              g$ver$7447$jXZPP
              g$imp*$7448$jXZPP
              g$vis*$7449$jXZPP
              g$inv*$7450$jXZPP
              g$exp-subst$7451$jXZPP
              g$exp-env$7452$jXZPP
              g$visit-proc$7453$jXZPP
              g$invoke-proc$7454$jXZPP
              g$visible?$7455$jXZPP)
            ((letrec ((g$f$7456$jXZPP
                        (case-lambda
                          ((g$deps$7457$jXZPP)
                           (if (null? g$deps$7457$jXZPP)
                             (begin
                               (g$install-library$7387$jXZPP
                                 g$id$7445$jXZPP
                                 g$name$7446$jXZPP
                                 g$ver$7447$jXZPP
                                 g$imp*$7448$jXZPP
                                 g$vis*$7449$jXZPP
                                 g$inv*$7450$jXZPP
                                 g$exp-subst$7451$jXZPP
                                 g$exp-env$7452$jXZPP
                                 g$visit-proc$7453$jXZPP
                                 g$invoke-proc$7454$jXZPP
                                 '#f
                                 '#f
                                 g$visible?$7455$jXZPP
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7458$jXZPP)
                                 ((case-lambda
                                    ((g$label$7459$jXZPP g$dname$7460$jXZPP)
                                     ((case-lambda
                                        ((g$l$7461$jXZPP)
                                         (if (if (g$library?$7338$jXZPP
                                                   g$l$7461$jXZPP)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7459$jXZPP
                                                      (g$library-id$7340$jXZPP
                                                        g$l$7461$jXZPP)))
                                               '#f)
                                           (g$f$7456$jXZPP
                                             (cdr g$deps$7457$jXZPP))
                                           (begin
                                             (g$library-version-mismatch-warning$7041$jXZPP
                                               g$name$7446$jXZPP
                                               g$dname$7460$jXZPP
                                               g$filename$7444$jXZPP)
                                             '#f))))
                                      (g$find-library-by-name$7382$jXZPP
                                        g$dname$7460$jXZPP))))
                                  (car g$d$7458$jXZPP)
                                  (g$cadr$5304$jXZPP g$d$7458$jXZPP))))
                              (car g$deps$7457$jXZPP)))))))
               g$f$7456$jXZPP)
             (append g$imp*$7448$jXZPP g$vis*$7449$jXZPP g$inv*$7450$jXZPP)))
           (g$others$7462$jXZPP '#f))))))
   (g$library-loader$7378$jXZPP
     g$library-loader$7581$jXZPP
     (g$make-parameter$7044$jXZPP
       (case-lambda
         ((g$x$7463$jXZPP)
          ((case-lambda
             ((g$file-name$7464$jXZPP)
              (if (not g$file-name$7464$jXZPP)
                (assertion-violation '#f '"cannot file library" g$x$7463$jXZPP)
                ((case-lambda
                   ((g$t$7465$jXZPP)
                    (if g$t$7465$jXZPP
                      g$t$7465$jXZPP
                      (begin
                        '#f
                        ((g$current-library-expander$7379$jXZPP)
                         (g$read-library-source-file$7043$jXZPP
                           g$file-name$7464$jXZPP)
                         g$file-name$7464$jXZPP
                         (case-lambda
                           ((g$name$7466$jXZPP)
                            (if (not (equal? g$name$7466$jXZPP g$x$7463$jXZPP))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6379$jXZPP)))
                                  (case-lambda
                                    ((g$p$7469$jXZPP g$e$7470$jXZPP)
                                     ((case-lambda
                                        ((g$e$7471$jXZPP g$p$7472$jXZPP)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7472$jXZPP)
                                           (write g$x$7463$jXZPP g$p$7472$jXZPP)
                                           (display '" in file " g$p$7472$jXZPP)
                                           (display
                                             g$file-name$7464$jXZPP
                                             g$p$7472$jXZPP)
                                           (display '", found " g$p$7472$jXZPP)
                                           (write
                                             g$name$7466$jXZPP
                                             g$p$7472$jXZPP)
                                           (display '" instead" g$p$7472$jXZPP)
                                           (g$e$7471$jXZPP))))
                                      g$e$7470$jXZPP
                                      g$p$7469$jXZPP)))))
                              (void)))))))))
                 (g$try-load-from-file$7377$jXZPP g$file-name$7464$jXZPP)))))
           ((g$file-locator$7374$jXZPP) g$x$7463$jXZPP))))
       (case-lambda
         ((g$f$7473$jXZPP)
          (if (procedure? g$f$7473$jXZPP)
            g$f$7473$jXZPP
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7473$jXZPP))))))
   (g$current-library-expander$7379$jXZPP
     g$current-library-expander$7582$jXZPP
     (g$make-parameter$7044$jXZPP
       (case-lambda
         ((g$x$7474$jXZPP)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7475$jXZPP)
          (if (procedure? g$f$7475$jXZPP)
            g$f$7475$jXZPP
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7475$jXZPP))))))
   (g$external-pending-libraries$7380$jXZPP
     g$external-pending-libraries$7583$jXZPP
     (g$make-parameter$7044$jXZPP '()))
   (g$find-external-library$7381$jXZPP
     g$find-external-library$7584$jXZPP
     (case-lambda
       ((g$name$7476$jXZPP)
        (begin
          (if (g$member$5072$jXZPP
                g$name$7476$jXZPP
                (g$external-pending-libraries$7380$jXZPP))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7476$jXZPP)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7479$jXZPP
                g$external-pending-libraries$7480$jXZPP)
              ((case-lambda
                 ((g$swap$7481$jXZPP)
                  (dynamic-wind
                    g$swap$7481$jXZPP
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$7378$jXZPP) g$name$7476$jXZPP)
                         ((case-lambda
                            ((g$t$7482$jXZPP)
                             (if g$t$7482$jXZPP
                               g$t$7482$jXZPP
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7476$jXZPP)))))
                          (g$find-library-by$7370$jXZPP
                            (case-lambda
                              ((g$x$7483$jXZPP)
                               (equal?
                                 (g$library-name$7341$jXZPP g$x$7483$jXZPP)
                                 g$name$7476$jXZPP))))))))
                    g$swap$7481$jXZPP)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7484$jXZPP)
                      (begin
                        (g$external-pending-libraries$7479$jXZPP
                          g$external-pending-libraries$7480$jXZPP)
                        (set! g$external-pending-libraries$7480$jXZPP
                          g$t$7484$jXZPP))))
                   (g$external-pending-libraries$7479$jXZPP)))))))
           g$external-pending-libraries$7380$jXZPP
           (cons
             g$name$7476$jXZPP
             (g$external-pending-libraries$7380$jXZPP)))))))
   (g$find-library-by-name$7382$jXZPP
     g$find-library-by-name$7585$jXZPP
     (case-lambda
       ((g$name$7485$jXZPP)
        ((case-lambda
           ((g$t$7486$jXZPP)
            (if g$t$7486$jXZPP
              g$t$7486$jXZPP
              (begin
                '#f
                (g$find-external-library$7381$jXZPP g$name$7485$jXZPP)))))
         (g$find-library-by$7370$jXZPP
           (case-lambda
             ((g$x$7487$jXZPP)
              (equal?
                (g$library-name$7341$jXZPP g$x$7487$jXZPP)
                g$name$7485$jXZPP))))))))
   (g$uninstall-library$7383$jXZPP
     g$uninstall-library$7586$jXZPP
     (case-lambda
       ((g$name$7488$jXZPP g$err?$7489$jXZPP)
        (letrec* ((g$who$7490$jXZPP 'uninstall-library))
          ((case-lambda
             ((g$lib$7491$jXZPP)
              (begin
                (if (if g$err?$7489$jXZPP
                      (begin '#f (not g$lib$7491$jXZPP))
                      '#f)
                  (assertion-violation
                    g$who$7490$jXZPP
                    '"library not installed"
                    g$name$7488$jXZPP)
                  (void))
                ((g$current-library-collection$7334$jXZPP)
                 g$lib$7491$jXZPP
                 '#t))))
           (g$find-library-by$7370$jXZPP
             (case-lambda
               ((g$x$7492$jXZPP)
                (equal?
                  (g$library-name$7341$jXZPP g$x$7492$jXZPP)
                  g$name$7488$jXZPP)))))))
       ((g$name$7493$jXZPP)
        (g$uninstall-library$7383$jXZPP g$name$7493$jXZPP '#t))))
   (g$library-exists?$7384$jXZPP
     g$library-exists?$7587$jXZPP
     (case-lambda
       ((g$name$7494$jXZPP)
        (if (g$find-library-by$7370$jXZPP
              (case-lambda
                ((g$x$7495$jXZPP)
                 (equal?
                   (g$library-name$7341$jXZPP g$x$7495$jXZPP)
                   g$name$7494$jXZPP))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$7385$jXZPP
     g$find-library-by-spec/die$7588$jXZPP
     (case-lambda
       ((g$spec$7496$jXZPP)
        ((case-lambda
           ((g$id$7497$jXZPP)
            ((case-lambda
               ((g$t$7498$jXZPP)
                (if g$t$7498$jXZPP
                  g$t$7498$jXZPP
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7496$jXZPP)))))
             (g$find-library-by$7370$jXZPP
               (case-lambda
                 ((g$x$7499$jXZPP)
                  (eq? g$id$7497$jXZPP
                       (g$library-id$7340$jXZPP g$x$7499$jXZPP))))))))
         (car g$spec$7496$jXZPP)))))
   (g$install-library-record$7386$jXZPP
     g$install-library-record$7589$jXZPP
     (case-lambda
       ((g$lib$7500$jXZPP)
        (begin
          ((case-lambda
             ((g$exp-env$7501$jXZPP)
              (g$for-each$5079$jXZPP
                (case-lambda
                  ((g$x$7502$jXZPP)
                   ((case-lambda
                      ((g$label$7503$jXZPP g$binding$7504$jXZPP)
                       ((case-lambda
                          ((g$binding$7505$jXZPP)
                           (g$set-label-binding!$7047$jXZPP
                             g$label$7503$jXZPP
                             g$binding$7505$jXZPP)))
                        ((case-lambda
                           ((g$t$7506$jXZPP)
                            (if (g$memv$5071$jXZPP g$t$7506$jXZPP '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7500$jXZPP
                                  (cdr g$binding$7504$jXZPP)))
                              (if (g$memv$5071$jXZPP
                                    g$t$7506$jXZPP
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7500$jXZPP
                                    (cdr g$binding$7504$jXZPP)))
                                (if (g$memv$5071$jXZPP
                                      g$t$7506$jXZPP
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7500$jXZPP
                                      (cdr g$binding$7504$jXZPP)))
                                  g$binding$7504$jXZPP)))))
                         (car g$binding$7504$jXZPP)))))
                    (car g$x$7502$jXZPP)
                    (cdr g$x$7502$jXZPP))))
                g$exp-env$7501$jXZPP)))
           (g$library-env$7347$jXZPP g$lib$7500$jXZPP))
          ((g$current-library-collection$7334$jXZPP) g$lib$7500$jXZPP)))))
   (g$install-library$7387$jXZPP
     g$install-library$7590$jXZPP
     (case-lambda
       ((g$id$7507$jXZPP
          g$name$7508$jXZPP
          g$ver$7509$jXZPP
          g$imp*$7510$jXZPP
          g$vis*$7511$jXZPP
          g$inv*$7512$jXZPP
          g$exp-subst$7513$jXZPP
          g$exp-env$7514$jXZPP
          g$visit-proc$7515$jXZPP
          g$invoke-proc$7516$jXZPP
          g$visit-code$7517$jXZPP
          g$invoke-code$7518$jXZPP
          g$visible?$7519$jXZPP
          g$source-file-name$7520$jXZPP)
        ((case-lambda
           ((g$imp-lib*$7521$jXZPP g$vis-lib*$7522$jXZPP g$inv-lib*$7523$jXZPP)
            (begin
              (if (not (if (symbol? g$id$7507$jXZPP)
                         (if (list? g$name$7508$jXZPP)
                           (begin '#f (list? g$ver$7509$jXZPP))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7507$jXZPP
                  g$name$7508$jXZPP
                  g$ver$7509$jXZPP)
                (void))
              (if (g$library-exists?$7384$jXZPP g$name$7508$jXZPP)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7508$jXZPP)
                (void))
              ((case-lambda
                 ((g$lib$7524$jXZPP)
                  (g$install-library-record$7386$jXZPP g$lib$7524$jXZPP)))
               (g$make-library$7339$jXZPP
                 g$id$7507$jXZPP
                 g$name$7508$jXZPP
                 g$ver$7509$jXZPP
                 g$imp-lib*$7521$jXZPP
                 g$vis-lib*$7522$jXZPP
                 g$inv-lib*$7523$jXZPP
                 g$exp-subst$7513$jXZPP
                 g$exp-env$7514$jXZPP
                 g$visit-proc$7515$jXZPP
                 g$invoke-proc$7516$jXZPP
                 g$visit-code$7517$jXZPP
                 g$invoke-code$7518$jXZPP
                 g$visible?$7519$jXZPP
                 g$source-file-name$7520$jXZPP)))))
         (g$map$5078$jXZPP
           g$find-library-by-spec/die$7385$jXZPP
           g$imp*$7510$jXZPP)
         (g$map$5078$jXZPP
           g$find-library-by-spec/die$7385$jXZPP
           g$vis*$7511$jXZPP)
         (g$map$5078$jXZPP
           g$find-library-by-spec/die$7385$jXZPP
           g$inv*$7512$jXZPP)))))
   (g$imported-label->binding$7388$jXZPP
     g$imported-label->binding$7591$jXZPP
     (case-lambda
       ((g$lab$7525$jXZPP) (g$label-binding$7048$jXZPP g$lab$7525$jXZPP))))
   (g$invoke-library$7389$jXZPP
     g$invoke-library$7592$jXZPP
     (case-lambda
       ((g$lib$7526$jXZPP)
        ((case-lambda
           ((g$invoke$7527$jXZPP)
            (if (procedure? g$invoke$7527$jXZPP)
              (begin
                (g$set-library-invoke-state!$7363$jXZPP
                  g$lib$7526$jXZPP
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7526$jXZPP))))
                (g$for-each$5079$jXZPP
                  g$invoke-library$7389$jXZPP
                  (g$library-inv*$7345$jXZPP g$lib$7526$jXZPP))
                (g$set-library-invoke-state!$7363$jXZPP
                  g$lib$7526$jXZPP
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7526$jXZPP))))
                (g$invoke$7527$jXZPP)
                (g$set-library-invoke-state!$7363$jXZPP g$lib$7526$jXZPP '#t))
              (void))))
         (g$library-invoke-state$7349$jXZPP g$lib$7526$jXZPP)))))
   (g$visit-library$7390$jXZPP
     g$visit-library$7593$jXZPP
     (case-lambda
       ((g$lib$7528$jXZPP)
        ((case-lambda
           ((g$visit$7529$jXZPP)
            (if (procedure? g$visit$7529$jXZPP)
              (begin
                (g$set-library-visit-state!$7362$jXZPP
                  g$lib$7528$jXZPP
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7528$jXZPP))))
                (g$for-each$5079$jXZPP
                  g$invoke-library$7389$jXZPP
                  (g$library-vis*$7344$jXZPP g$lib$7528$jXZPP))
                (g$set-library-visit-state!$7362$jXZPP
                  g$lib$7528$jXZPP
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7528$jXZPP))))
                (g$visit$7529$jXZPP)
                (g$set-library-visit-state!$7362$jXZPP g$lib$7528$jXZPP '#t))
              (void))))
         (g$library-visit-state$7348$jXZPP g$lib$7528$jXZPP)))))
   (g$invoke-library-by-spec$7391$jXZPP
     g$invoke-library-by-spec$7594$jXZPP
     (case-lambda
       ((g$spec$7530$jXZPP)
        (g$invoke-library$7389$jXZPP
          (g$find-library-by-spec/die$7385$jXZPP g$spec$7530$jXZPP)))))
   (g$installed-libraries$7392$jXZPP
     g$installed-libraries$7595$jXZPP
     (case-lambda
       ((g$all?$7531$jXZPP)
        ((letrec ((g$f$7532$jXZPP
                    (case-lambda
                      ((g$ls$7533$jXZPP)
                       (if (null? g$ls$7533$jXZPP)
                         '()
                         (if ((case-lambda
                                ((g$t$7534$jXZPP)
                                 (if g$t$7534$jXZPP
                                   g$t$7534$jXZPP
                                   (begin
                                     '#f
                                     (g$library-visible?$7352$jXZPP
                                       (car g$ls$7533$jXZPP))))))
                              g$all?$7531$jXZPP)
                           (cons
                             (g$library-name$7341$jXZPP (car g$ls$7533$jXZPP))
                             (g$f$7532$jXZPP (cdr g$ls$7533$jXZPP)))
                           (g$f$7532$jXZPP (cdr g$ls$7533$jXZPP))))))))
           g$f$7532$jXZPP)
         ((g$current-library-collection$7334$jXZPP))))
       (() (g$installed-libraries$7392$jXZPP '#f))))
   (g$library-spec$7393$jXZPP
     g$library-spec$7596$jXZPP
     (case-lambda
       ((g$x$7535$jXZPP)
        (begin
          (if (not (g$library?$7338$jXZPP g$x$7535$jXZPP))
            (assertion-violation 'library-spec '"not a library" g$x$7535$jXZPP)
            (void))
          (list
            (g$library-id$7340$jXZPP g$x$7535$jXZPP)
            (g$library-name$7341$jXZPP g$x$7535$jXZPP)
            (g$library-version$7342$jXZPP g$x$7535$jXZPP)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7597$jXZPP
     g$build-global-define$7707$jXZPP
     (case-lambda ((g$x$7678$jXZPP) (g$build-void$7674$jXZPP))))
   (g$build-lambda$7646$jXZPP
     g$build-lambda$7708$jXZPP
     (case-lambda
       ((g$ae$7679$jXZPP g$vars$7680$jXZPP g$exp$7681$jXZPP)
        (list 'case-lambda (list g$vars$7680$jXZPP g$exp$7681$jXZPP)))))
   (g$build-case-lambda$7647$jXZPP
     g$build-case-lambda$7709$jXZPP
     (case-lambda
       ((g$ae$7682$jXZPP g$vars*$7683$jXZPP g$exp*$7684$jXZPP)
        (cons
          'case-lambda
          (g$map$5078$jXZPP list g$vars*$7683$jXZPP g$exp*$7684$jXZPP)))))
   (g$build-let$7648$jXZPP
     g$build-let$7710$jXZPP
     (case-lambda
       ((g$ae$7685$jXZPP g$lhs*$7686$jXZPP g$rhs*$7687$jXZPP g$body$7688$jXZPP)
        (cons
          (g$build-lambda$7646$jXZPP
            g$ae$7685$jXZPP
            g$lhs*$7686$jXZPP
            g$body$7688$jXZPP)
          g$rhs*$7687$jXZPP))))
   (g$build-sequence$7673$jXZPP
     g$build-sequence$7711$jXZPP
     (case-lambda
       ((g$ae$7689$jXZPP g$exps$7690$jXZPP)
        ((letrec ((g$loop$7691$jXZPP
                    (case-lambda
                      ((g$exps$7692$jXZPP)
                       (if (null? (cdr g$exps$7692$jXZPP))
                         (car g$exps$7692$jXZPP)
                         (if (equal?
                               (car g$exps$7692$jXZPP)
                               (g$build-void$7674$jXZPP))
                           (g$loop$7691$jXZPP (cdr g$exps$7692$jXZPP))
                           (cons 'begin g$exps$7692$jXZPP)))))))
           g$loop$7691$jXZPP)
         g$exps$7690$jXZPP))))
   (g$build-void$7674$jXZPP
     g$build-void$7712$jXZPP
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7675$jXZPP
     g$build-letrec$7713$jXZPP
     (case-lambda
       ((g$ae$7693$jXZPP
          g$vars$7694$jXZPP
          g$val-exps$7695$jXZPP
          g$body-exp$7696$jXZPP)
        (if (null? g$vars$7694$jXZPP)
          g$body-exp$7696$jXZPP
          (list
            'letrec
            (g$map$5078$jXZPP list g$vars$7694$jXZPP g$val-exps$7695$jXZPP)
            g$body-exp$7696$jXZPP)))))
   (g$build-letrec*$7676$jXZPP
     g$build-letrec*$7714$jXZPP
     (case-lambda
       ((g$ae$7697$jXZPP
          g$vars$7698$jXZPP
          g$val-exps$7699$jXZPP
          g$body-exp$7700$jXZPP)
        (if (null? g$vars$7698$jXZPP)
          g$body-exp$7700$jXZPP
          (list
            'letrec*
            (g$map$5078$jXZPP list g$vars$7698$jXZPP g$val-exps$7699$jXZPP)
            g$body-exp$7700$jXZPP)))))
   (g$build-library-letrec*$7677$jXZPP
     g$build-library-letrec*$7715$jXZPP
     (case-lambda
       ((g$ae$7701$jXZPP
          g$name$7702$jXZPP
          g$vars$7703$jXZPP
          g$locs$7704$jXZPP
          g$val-exps$7705$jXZPP
          g$body-exp$7706$jXZPP)
        (list
          'library-letrec*
          g$name$7702$jXZPP
          (g$map$5078$jXZPP
            list
            g$vars$7703$jXZPP
            g$locs$7704$jXZPP
            g$val-exps$7705$jXZPP)
          g$body-exp$7706$jXZPP)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7716$jXZPP
     g$set-cons$11412$jXZPP
     (case-lambda
       ((g$x$8181$jXZPP g$ls$8182$jXZPP)
        (if (g$memq$5070$jXZPP g$x$8181$jXZPP g$ls$8182$jXZPP)
          g$ls$8182$jXZPP
          (cons g$x$8181$jXZPP g$ls$8182$jXZPP)))))
   (g$set-union$7717$jXZPP
     g$set-union$11413$jXZPP
     (case-lambda
       ((g$ls1$8183$jXZPP g$ls2$8184$jXZPP)
        (if (null? g$ls1$8183$jXZPP)
          g$ls2$8184$jXZPP
          (if (g$memq$5070$jXZPP (car g$ls1$8183$jXZPP) g$ls2$8184$jXZPP)
            (g$set-union$7717$jXZPP (cdr g$ls1$8183$jXZPP) g$ls2$8184$jXZPP)
            (cons
              (car g$ls1$8183$jXZPP)
              (g$set-union$7717$jXZPP
                (cdr g$ls1$8183$jXZPP)
                g$ls2$8184$jXZPP)))))))
   (g$top-mark*$7719$jXZPP g$top-mark*$11414$jXZPP '(top))
   (g$top-marked?$7720$jXZPP
     g$top-marked?$11415$jXZPP
     (case-lambda
       ((g$m*$8185$jXZPP) (g$memq$5070$jXZPP 'top g$m*$8185$jXZPP))))
   (g$gen-lexical$7721$jXZPP
     g$gen-lexical$11416$jXZPP
     (case-lambda
       ((g$sym$8186$jXZPP)
        (if (symbol? g$sym$8186$jXZPP)
          (gensym g$sym$8186$jXZPP)
          (if (g$stx?$7754$jXZPP g$sym$8186$jXZPP)
            (g$gen-lexical$7721$jXZPP (g$id->sym$7783$jXZPP g$sym$8186$jXZPP))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$8186$jXZPP))))))
   (g$gen-global$7722$jXZPP
     g$gen-global$11417$jXZPP
     (case-lambda
       ((g$x$8187$jXZPP) (g$gen-lexical$7721$jXZPP g$x$8187$jXZPP))))
   (g$gen-label$7723$jXZPP
     g$gen-label$11418$jXZPP
     (case-lambda ((g$_$8188$jXZPP) (gensym))))
   (g$gen-top-level-label$7724$jXZPP
     g$gen-top-level-label$11419$jXZPP
     (case-lambda
       ((g$id$8189$jXZPP g$rib$8190$jXZPP)
        (letrec* ((g$find$8191$jXZPP
                    (case-lambda
                      ((g$sym$8197$jXZPP
                         g$mark*$8198$jXZPP
                         g$sym*$8199$jXZPP
                         g$mark**$8200$jXZPP
                         g$label*$8201$jXZPP)
                       (if (pair? g$sym*$8199$jXZPP)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8197$jXZPP
                                        (car g$sym*$8199$jXZPP))
                                 (begin
                                   '#f
                                   (g$same-marks?$7784$jXZPP
                                     g$mark*$8198$jXZPP
                                     (car g$mark**$8200$jXZPP)))
                                 '#f)
                             (car g$label*$8201$jXZPP)
                             (g$find$8191$jXZPP
                               g$sym$8197$jXZPP
                               g$mark*$8198$jXZPP
                               (cdr g$sym*$8199$jXZPP)
                               (cdr g$mark**$8200$jXZPP)
                               (cdr g$label*$8201$jXZPP))))
                         '#f)))))
          ((case-lambda
             ((g$sym$8192$jXZPP g$mark*$8193$jXZPP)
              ((case-lambda
                 ((g$sym*$8194$jXZPP)
                  ((case-lambda
                     ((g$t$8195$jXZPP)
                      (if g$t$8195$jXZPP
                        ((case-lambda
                           ((g$label$8196$jXZPP)
                            (if (g$imported-label->binding$7591$jXZPP
                                  g$label$8196$jXZPP)
                              (gensym)
                              g$label$8196$jXZPP)))
                         g$t$8195$jXZPP)
                        (gensym))))
                   (if (g$memq$5070$jXZPP
                         g$sym$8192$jXZPP
                         (g$rib-sym*$7732$jXZPP g$rib$8190$jXZPP))
                     (begin
                       '#f
                       (g$find$8191$jXZPP
                         g$sym$8192$jXZPP
                         g$mark*$8193$jXZPP
                         g$sym*$8194$jXZPP
                         (g$rib-mark**$7733$jXZPP g$rib$8190$jXZPP)
                         (g$rib-label*$7734$jXZPP g$rib$8190$jXZPP)))
                     '#f))))
               (g$rib-sym*$7732$jXZPP g$rib$8190$jXZPP))))
           (g$id->sym$7783$jXZPP g$id$8189$jXZPP)
           (g$stx-mark*$7757$jXZPP g$id$8189$jXZPP))))))
   (g$gen-define-label+loc$7725$jXZPP
     g$gen-define-label+loc$11420$jXZPP
     (case-lambda
       ((g$id$8202$jXZPP g$rib$8203$jXZPP g$sd?$8204$jXZPP)
        (if g$sd?$8204$jXZPP
          (values (gensym) (g$gen-lexical$7721$jXZPP g$id$8202$jXZPP))
          ((case-lambda
             ((g$env$8205$jXZPP)
              ((case-lambda
                 ((g$label$8206$jXZPP g$locs$8207$jXZPP)
                  (values
                    g$label$8206$jXZPP
                    ((case-lambda
                       ((g$t$8208$jXZPP)
                        (if g$t$8208$jXZPP
                          (cdr g$t$8208$jXZPP)
                          ((case-lambda
                             ((g$loc$8209$jXZPP)
                              (begin
                                (g$set-interaction-env-locs!$8143$jXZPP
                                  g$env$8205$jXZPP
                                  (cons
                                    (cons g$label$8206$jXZPP g$loc$8209$jXZPP)
                                    g$locs$8207$jXZPP))
                                g$loc$8209$jXZPP)))
                           (g$gen-lexical$7721$jXZPP g$id$8202$jXZPP)))))
                     (g$assq$5066$jXZPP
                       g$label$8206$jXZPP
                       g$locs$8207$jXZPP)))))
               (g$gen-top-level-label$7724$jXZPP
                 g$id$8202$jXZPP
                 g$rib$8203$jXZPP)
               (g$interaction-env-locs$8140$jXZPP g$env$8205$jXZPP))))
           (g$top-level-context$8180$jXZPP))))))
   (g$gen-define-label$7726$jXZPP
     g$gen-define-label$11421$jXZPP
     (case-lambda
       ((g$id$8210$jXZPP g$rib$8211$jXZPP g$sd?$8212$jXZPP)
        (if g$sd?$8212$jXZPP
          (gensym)
          (g$gen-top-level-label$7724$jXZPP
            g$id$8210$jXZPP
            g$rib$8211$jXZPP)))))
   (g$8732$7727$jXZPP
     g$8732$11422$jXZPP
     (make-record-type-descriptor
       'rib
       '#f
       'g$8735$jXZPP
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8734$7728$jXZPP g$8734$11423$jXZPP '#f)
   (g$8733$7729$jXZPP
     g$8733$11424$jXZPP
     (make-record-constructor-descriptor
       g$8732$7727$jXZPP
       '#f
       g$8734$7728$jXZPP))
   (g$rib?$7730$jXZPP
     g$rib?$11425$jXZPP
     (record-predicate g$8732$7727$jXZPP))
   (g$make-rib$7731$jXZPP
     g$make-rib$11426$jXZPP
     (record-constructor g$8733$7729$jXZPP))
   (g$rib-sym*$7732$jXZPP
     g$rib-sym*$11427$jXZPP
     (record-accessor g$8732$7727$jXZPP '0))
   (g$rib-mark**$7733$jXZPP
     g$rib-mark**$11428$jXZPP
     (record-accessor g$8732$7727$jXZPP '1))
   (g$rib-label*$7734$jXZPP
     g$rib-label*$11429$jXZPP
     (record-accessor g$8732$7727$jXZPP '2))
   (g$rib-sealed/freq$7735$jXZPP
     g$rib-sealed/freq$11430$jXZPP
     (record-accessor g$8732$7727$jXZPP '3))
   (g$rib-cache$7736$jXZPP
     g$rib-cache$11431$jXZPP
     (record-accessor g$8732$7727$jXZPP '4))
   (g$set-rib-sym*!$7737$jXZPP
     g$set-rib-sym*!$11432$jXZPP
     (record-mutator g$8732$7727$jXZPP '0))
   (g$set-rib-mark**!$7738$jXZPP
     g$set-rib-mark**!$11433$jXZPP
     (record-mutator g$8732$7727$jXZPP '1))
   (g$set-rib-label*!$7739$jXZPP
     g$set-rib-label*!$11434$jXZPP
     (record-mutator g$8732$7727$jXZPP '2))
   (g$set-rib-sealed/freq!$7740$jXZPP
     g$set-rib-sealed/freq!$11435$jXZPP
     (record-mutator g$8732$7727$jXZPP '3))
   (g$set-rib-cache!$7741$jXZPP
     g$set-rib-cache!$11436$jXZPP
     (record-mutator g$8732$7727$jXZPP '4))
   (g$make-empty-rib$7742$jXZPP
     g$make-empty-rib$11437$jXZPP
     (case-lambda (() (g$make-rib$7731$jXZPP '() '() '() '#f '#f))))
   (g$make-cache-rib$7743$jXZPP
     g$make-cache-rib$11438$jXZPP
     (case-lambda
       (()
        (g$make-rib$7731$jXZPP
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5581$jXZPP)))))
   (g$find-label$7744$jXZPP
     g$find-label$11439$jXZPP
     (case-lambda
       ((g$rib$8213$jXZPP g$sym$8214$jXZPP g$mark*$8215$jXZPP)
        ((case-lambda
           ((g$ht$8216$jXZPP)
            (if g$ht$8216$jXZPP
              (begin
                '#f
                ((case-lambda
                   ((g$cv$8217$jXZPP)
                    ((case-lambda
                       ((g$t$8218$jXZPP)
                        (if g$t$8218$jXZPP (cdr g$t$8218$jXZPP) '#f)))
                     (if g$cv$8217$jXZPP
                       (begin
                         '#f
                         (g$assp$5069$jXZPP
                           (case-lambda
                             ((g$m$8219$jXZPP)
                              (g$same-marks?$7784$jXZPP
                                g$mark*$8215$jXZPP
                                g$m$8219$jXZPP)))
                           g$cv$8217$jXZPP))
                       '#f))))
                 (g$hashtable-ref$5584$jXZPP
                   g$ht$8216$jXZPP
                   g$sym$8214$jXZPP
                   '#f)))
              '#f)))
         (g$rib-cache$7736$jXZPP g$rib$8213$jXZPP)))))
   (g$extend-rib!$7745$jXZPP
     g$extend-rib!$11440$jXZPP
     (case-lambda
       ((g$rib$8220$jXZPP g$id$8221$jXZPP g$label$8222$jXZPP g$sd?$8223$jXZPP)
        (letrec* ((g$find$8224$jXZPP
                    (case-lambda
                      ((g$sym$8233$jXZPP
                         g$mark*$8234$jXZPP
                         g$sym*$8235$jXZPP
                         g$mark**$8236$jXZPP
                         g$label*$8237$jXZPP)
                       (if (pair? g$sym*$8235$jXZPP)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8233$jXZPP
                                        (car g$sym*$8235$jXZPP))
                                 (begin
                                   '#f
                                   (g$same-marks?$7784$jXZPP
                                     g$mark*$8234$jXZPP
                                     (car g$mark**$8236$jXZPP)))
                                 '#f)
                             g$label*$8237$jXZPP
                             (g$find$8224$jXZPP
                               g$sym$8233$jXZPP
                               g$mark*$8234$jXZPP
                               (cdr g$sym*$8235$jXZPP)
                               (cdr g$mark**$8236$jXZPP)
                               (cdr g$label*$8237$jXZPP))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7735$jXZPP g$rib$8220$jXZPP)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$8220$jXZPP)
              (void))
            ((case-lambda
               ((g$sym$8225$jXZPP g$mark*$8226$jXZPP)
                ((case-lambda
                   ((g$sym*$8227$jXZPP)
                    ((case-lambda
                       ((g$t$8228$jXZPP)
                        (if g$t$8228$jXZPP
                          ((case-lambda
                             ((g$p$8229$jXZPP)
                              (if (not (eq? g$label$8222$jXZPP g$p$8229$jXZPP))
                                (g$syntax-violation$8172$jXZPP
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$8221$jXZPP)
                                (void))))
                           g$t$8228$jXZPP)
                          ((case-lambda
                             ((g$t$8230$jXZPP)
                              (if g$t$8230$jXZPP
                                ((case-lambda
                                   ((g$p$8231$jXZPP)
                                    (if (not (eq? g$label$8222$jXZPP
                                                  (car g$p$8231$jXZPP)))
                                      (if (not g$sd?$8223$jXZPP)
                                        (set-car!
                                          g$p$8231$jXZPP
                                          g$label$8222$jXZPP)
                                        (g$syntax-violation$8172$jXZPP
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$8221$jXZPP))
                                      (void))))
                                 g$t$8230$jXZPP)
                                (begin
                                  (if (g$rib-cache$7736$jXZPP g$rib$8220$jXZPP)
                                    (g$hashtable-update!$5588$jXZPP
                                      (g$rib-cache$7736$jXZPP g$rib$8220$jXZPP)
                                      g$sym$8225$jXZPP
                                      (case-lambda
                                        ((g$e$8232$jXZPP)
                                         (cons
                                           (cons
                                             g$mark*$8226$jXZPP
                                             g$label$8222$jXZPP)
                                           g$e$8232$jXZPP)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7737$jXZPP
                                    g$rib$8220$jXZPP
                                    (cons g$sym$8225$jXZPP g$sym*$8227$jXZPP))
                                  (g$set-rib-mark**!$7738$jXZPP
                                    g$rib$8220$jXZPP
                                    (cons
                                      g$mark*$8226$jXZPP
                                      (g$rib-mark**$7733$jXZPP
                                        g$rib$8220$jXZPP)))
                                  (g$set-rib-label*!$7739$jXZPP
                                    g$rib$8220$jXZPP
                                    (cons
                                      g$label$8222$jXZPP
                                      (g$rib-label*$7734$jXZPP
                                        g$rib$8220$jXZPP)))))))
                           (if (g$memq$5070$jXZPP
                                 g$sym$8225$jXZPP
                                 (g$rib-sym*$7732$jXZPP g$rib$8220$jXZPP))
                             (begin
                               '#f
                               (g$find$8224$jXZPP
                                 g$sym$8225$jXZPP
                                 g$mark*$8226$jXZPP
                                 g$sym*$8227$jXZPP
                                 (g$rib-mark**$7733$jXZPP g$rib$8220$jXZPP)
                                 (g$rib-label*$7734$jXZPP g$rib$8220$jXZPP)))
                             '#f)))))
                     (g$find-label$7744$jXZPP
                       g$rib$8220$jXZPP
                       g$sym$8225$jXZPP
                       g$mark*$8226$jXZPP))))
                 (g$rib-sym*$7732$jXZPP g$rib$8220$jXZPP))))
             (g$id->sym$7783$jXZPP g$id$8221$jXZPP)
             (g$stx-mark*$7757$jXZPP g$id$8221$jXZPP)))))))
   (g$extend-rib/nc!$7746$jXZPP
     g$extend-rib/nc!$11441$jXZPP
     (case-lambda
       ((g$rib$8238$jXZPP g$id$8239$jXZPP g$label$8240$jXZPP)
        ((case-lambda
           ((g$sym$8241$jXZPP g$mark*$8242$jXZPP)
            ((case-lambda
               ((g$sym*$8243$jXZPP)
                (begin
                  (if (g$rib-cache$7736$jXZPP g$rib$8238$jXZPP)
                    (g$hashtable-update!$5588$jXZPP
                      (g$rib-cache$7736$jXZPP g$rib$8238$jXZPP)
                      g$sym$8241$jXZPP
                      (case-lambda
                        ((g$e$8244$jXZPP)
                         (cons
                           (cons g$mark*$8242$jXZPP g$label$8240$jXZPP)
                           g$e$8244$jXZPP)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7737$jXZPP
                    g$rib$8238$jXZPP
                    (cons g$sym$8241$jXZPP g$sym*$8243$jXZPP))
                  (g$set-rib-mark**!$7738$jXZPP
                    g$rib$8238$jXZPP
                    (cons
                      g$mark*$8242$jXZPP
                      (g$rib-mark**$7733$jXZPP g$rib$8238$jXZPP)))
                  (g$set-rib-label*!$7739$jXZPP
                    g$rib$8238$jXZPP
                    (cons
                      g$label$8240$jXZPP
                      (g$rib-label*$7734$jXZPP g$rib$8238$jXZPP))))))
             (g$rib-sym*$7732$jXZPP g$rib$8238$jXZPP))))
         (g$id->sym$7783$jXZPP g$id$8239$jXZPP)
         (g$stx-mark*$7757$jXZPP g$id$8239$jXZPP)))))
   (g$make-rib-map$7747$jXZPP
     g$make-rib-map$11442$jXZPP
     (case-lambda
       ((g$sym*$8245$jXZPP)
        ((case-lambda
           ((g$ht$8246$jXZPP)
            ((letrec ((g$f$8247$jXZPP
                        (case-lambda
                          ((g$i$8248$jXZPP g$sym*$8249$jXZPP)
                           (if (null? g$sym*$8249$jXZPP)
                             g$ht$8246$jXZPP
                             (begin
                               (g$hashtable-update!$5588$jXZPP
                                 g$ht$8246$jXZPP
                                 (car g$sym*$8249$jXZPP)
                                 (case-lambda
                                   ((g$x$8250$jXZPP)
                                    (cons g$i$8248$jXZPP g$x$8250$jXZPP)))
                                 '())
                               (g$f$8247$jXZPP
                                 (+ g$i$8248$jXZPP '1)
                                 (cdr g$sym*$8249$jXZPP))))))))
               g$f$8247$jXZPP)
             '0
             g$sym*$8245$jXZPP)))
         (g$make-eq-hashtable$5581$jXZPP)))))
   (g$seal-rib!$7748$jXZPP
     g$seal-rib!$11443$jXZPP
     (case-lambda
       ((g$rib$8251$jXZPP)
        ((case-lambda
           ((g$sym*$8252$jXZPP)
            (if (not (null? g$sym*$8252$jXZPP))
              (begin
                (g$set-rib-sym*!$7737$jXZPP
                  g$rib$8251$jXZPP
                  (list->vector g$sym*$8252$jXZPP))
                (g$set-rib-mark**!$7738$jXZPP
                  g$rib$8251$jXZPP
                  (list->vector (g$rib-mark**$7733$jXZPP g$rib$8251$jXZPP)))
                (g$set-rib-label*!$7739$jXZPP
                  g$rib$8251$jXZPP
                  (list->vector (g$rib-label*$7734$jXZPP g$rib$8251$jXZPP)))
                (g$set-rib-sealed/freq!$7740$jXZPP
                  g$rib$8251$jXZPP
                  (g$make-rib-map$7747$jXZPP g$sym*$8252$jXZPP)))
              (void))))
         (g$rib-sym*$7732$jXZPP g$rib$8251$jXZPP)))))
   (g$unseal-rib!$7749$jXZPP
     g$unseal-rib!$11444$jXZPP
     (case-lambda
       ((g$rib$8253$jXZPP)
        (if (g$rib-sealed/freq$7735$jXZPP g$rib$8253$jXZPP)
          (begin
            (g$set-rib-sealed/freq!$7740$jXZPP g$rib$8253$jXZPP '#f)
            (g$set-rib-sym*!$7737$jXZPP
              g$rib$8253$jXZPP
              (vector->list (g$rib-sym*$7732$jXZPP g$rib$8253$jXZPP)))
            (g$set-rib-mark**!$7738$jXZPP
              g$rib$8253$jXZPP
              (vector->list (g$rib-mark**$7733$jXZPP g$rib$8253$jXZPP)))
            (g$set-rib-label*!$7739$jXZPP
              g$rib$8253$jXZPP
              (vector->list (g$rib-label*$7734$jXZPP g$rib$8253$jXZPP))))
          (void)))))
   (g$make-full-rib$7750$jXZPP
     g$make-full-rib$11445$jXZPP
     (case-lambda
       ((g$id*$8254$jXZPP g$label*$8255$jXZPP)
        ((case-lambda
           ((g$r$8256$jXZPP)
            (begin (g$seal-rib!$7748$jXZPP g$r$8256$jXZPP) g$r$8256$jXZPP)))
         (g$make-rib$7731$jXZPP
           (g$map$5078$jXZPP g$id->sym$7783$jXZPP g$id*$8254$jXZPP)
           (g$map$5078$jXZPP g$stx-mark*$7757$jXZPP g$id*$8254$jXZPP)
           g$label*$8255$jXZPP
           '#f
           '#f)))))
   (g$8763$7751$jXZPP
     g$8763$11446$jXZPP
     (make-record-type-descriptor
       'stx
       '#f
       'g$8766$jXZPP
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8765$7752$jXZPP g$8765$11447$jXZPP '#f)
   (g$8764$7753$jXZPP
     g$8764$11448$jXZPP
     (make-record-constructor-descriptor
       g$8763$7751$jXZPP
       '#f
       g$8765$7752$jXZPP))
   (g$stx?$7754$jXZPP
     g$stx?$11449$jXZPP
     (record-predicate g$8763$7751$jXZPP))
   (g$make-stx$7755$jXZPP
     g$make-stx$11450$jXZPP
     (record-constructor g$8764$7753$jXZPP))
   (g$stx-expr$7756$jXZPP
     g$stx-expr$11451$jXZPP
     (record-accessor g$8763$7751$jXZPP '0))
   (g$stx-mark*$7757$jXZPP
     g$stx-mark*$11452$jXZPP
     (record-accessor g$8763$7751$jXZPP '1))
   (g$stx-subst*$7758$jXZPP
     g$stx-subst*$11453$jXZPP
     (record-accessor g$8763$7751$jXZPP '2))
   (g$stx-ae*$7759$jXZPP
     g$stx-ae*$11454$jXZPP
     (record-accessor g$8763$7751$jXZPP '3))
   (g$set-stx-expr!$7760$jXZPP
     g$set-stx-expr!$11455$jXZPP
     (record-mutator g$8763$7751$jXZPP '0))
   (g$set-stx-mark*!$7761$jXZPP
     g$set-stx-mark*!$11456$jXZPP
     (record-mutator g$8763$7751$jXZPP '1))
   (g$set-stx-subst*!$7762$jXZPP
     g$set-stx-subst*!$11457$jXZPP
     (record-mutator g$8763$7751$jXZPP '2))
   (g$set-stx-ae*!$7763$jXZPP
     g$set-stx-ae*!$11458$jXZPP
     (record-mutator g$8763$7751$jXZPP '3))
   (g$rp$7764$jXZPP
     g$rp$11459$jXZPP
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$8257$jXZPP g$p$8258$jXZPP g$wr$8259$jXZPP)
          (begin
            (display '"#<syntax " g$p$8258$jXZPP)
            (write (g$stx->datum$7793$jXZPP g$x$8257$jXZPP) g$p$8258$jXZPP)
            ((case-lambda
               ((g$expr$8260$jXZPP)
                (if (annotation? g$expr$8260$jXZPP)
                  ((case-lambda
                     ((g$src$8261$jXZPP)
                      (if (pair? g$src$8261$jXZPP)
                        (begin
                          (display '" (" g$p$8258$jXZPP)
                          (display (cdr g$src$8261$jXZPP) g$p$8258$jXZPP)
                          (display '" of " g$p$8258$jXZPP)
                          (display (car g$src$8261$jXZPP) g$p$8258$jXZPP)
                          (display '")" g$p$8258$jXZPP))
                        (void))))
                   (annotation-source g$expr$8260$jXZPP))
                  (void))))
             (g$stx-expr$7756$jXZPP g$x$8257$jXZPP))
            (display '">" g$p$8258$jXZPP))))))
   (g$datum->stx$7765$jXZPP
     g$datum->stx$11460$jXZPP
     (case-lambda
       ((g$id$8262$jXZPP g$datum$8263$jXZPP)
        (g$make-stx$7755$jXZPP
          g$datum$8263$jXZPP
          (g$stx-mark*$7757$jXZPP g$id$8262$jXZPP)
          (g$stx-subst*$7758$jXZPP g$id$8262$jXZPP)
          (g$stx-ae*$7759$jXZPP g$id$8262$jXZPP)))))
   (g$gen-mark$7766$jXZPP
     g$gen-mark$11461$jXZPP
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7767$jXZPP g$anti-mark$11462$jXZPP '#f)
   (g$anti-mark?$7768$jXZPP g$anti-mark?$11463$jXZPP not)
   (g$join-wraps$7769$jXZPP
     g$join-wraps$11464$jXZPP
     (case-lambda
       ((g$m1*$8264$jXZPP g$s1*$8265$jXZPP g$ae1*$8266$jXZPP g$e$8267$jXZPP)
        (letrec* ((g$cancel$8268$jXZPP
                    (case-lambda
                      ((g$ls1$8272$jXZPP g$ls2$8273$jXZPP)
                       ((letrec ((g$f$8274$jXZPP
                                   (case-lambda
                                     ((g$x$8275$jXZPP g$ls1$8276$jXZPP)
                                      (if (null? g$ls1$8276$jXZPP)
                                        (cdr g$ls2$8273$jXZPP)
                                        (cons
                                          g$x$8275$jXZPP
                                          (g$f$8274$jXZPP
                                            (car g$ls1$8276$jXZPP)
                                            (cdr g$ls1$8276$jXZPP))))))))
                          g$f$8274$jXZPP)
                        (car g$ls1$8272$jXZPP)
                        (cdr g$ls1$8272$jXZPP))))))
          ((case-lambda
             ((g$m2*$8269$jXZPP g$s2*$8270$jXZPP g$ae2*$8271$jXZPP)
              (if (if (not (null? g$m1*$8264$jXZPP))
                    (if (not (null? g$m2*$8269$jXZPP))
                      (begin
                        '#f
                        (g$anti-mark?$7768$jXZPP (car g$m2*$8269$jXZPP)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$8268$jXZPP g$m1*$8264$jXZPP g$m2*$8269$jXZPP)
                  (g$cancel$8268$jXZPP g$s1*$8265$jXZPP g$s2*$8270$jXZPP)
                  (g$cancel$8268$jXZPP g$ae1*$8266$jXZPP g$ae2*$8271$jXZPP))
                (values
                  (append g$m1*$8264$jXZPP g$m2*$8269$jXZPP)
                  (append g$s1*$8265$jXZPP g$s2*$8270$jXZPP)
                  (append g$ae1*$8266$jXZPP g$ae2*$8271$jXZPP)))))
           (g$stx-mark*$7757$jXZPP g$e$8267$jXZPP)
           (g$stx-subst*$7758$jXZPP g$e$8267$jXZPP)
           (g$stx-ae*$7759$jXZPP g$e$8267$jXZPP))))))
   (g$mkstx$7770$jXZPP
     g$mkstx$11465$jXZPP
     (case-lambda
       ((g$e$8277$jXZPP g$m*$8278$jXZPP g$s*$8279$jXZPP g$ae*$8280$jXZPP)
        (if (if (g$stx?$7754$jXZPP g$e$8277$jXZPP)
              (begin '#f (not (g$top-marked?$7720$jXZPP g$m*$8278$jXZPP)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7769$jXZPP
                 g$m*$8278$jXZPP
                 g$s*$8279$jXZPP
                 g$ae*$8280$jXZPP
                 g$e$8277$jXZPP)))
            (case-lambda
              ((g$m*$8284$jXZPP g$s*$8285$jXZPP g$ae*$8286$jXZPP)
               ((case-lambda
                  ((g$ae*$8287$jXZPP g$s*$8288$jXZPP g$m*$8289$jXZPP)
                   (g$make-stx$7755$jXZPP
                     (g$stx-expr$7756$jXZPP g$e$8277$jXZPP)
                     g$m*$8289$jXZPP
                     g$s*$8288$jXZPP
                     g$ae*$8287$jXZPP)))
                g$ae*$8286$jXZPP
                g$s*$8285$jXZPP
                g$m*$8284$jXZPP))))
          (g$make-stx$7755$jXZPP
            g$e$8277$jXZPP
            g$m*$8278$jXZPP
            g$s*$8279$jXZPP
            g$ae*$8280$jXZPP)))))
   (g$add-mark$7771$jXZPP
     g$add-mark$11466$jXZPP
     (case-lambda
       ((g$m$8290$jXZPP g$e$8291$jXZPP g$ae$8292$jXZPP)
        (g$mkstx$7770$jXZPP
          g$e$8291$jXZPP
          (list g$m$8290$jXZPP)
          '(shift)
          (list g$ae$8292$jXZPP)))))
   (g$add-subst$7772$jXZPP
     g$add-subst$11467$jXZPP
     (case-lambda
       ((g$subst$8293$jXZPP g$e$8294$jXZPP)
        (g$mkstx$7770$jXZPP g$e$8294$jXZPP '() (list g$subst$8293$jXZPP) '()))))
   (g$syntax-kind?$7773$jXZPP
     g$syntax-kind?$11468$jXZPP
     (case-lambda
       ((g$x$8295$jXZPP g$p?$8296$jXZPP)
        (if (g$stx?$7754$jXZPP g$x$8295$jXZPP)
          (g$syntax-kind?$7773$jXZPP
            (g$stx-expr$7756$jXZPP g$x$8295$jXZPP)
            g$p?$8296$jXZPP)
          (if (annotation? g$x$8295$jXZPP)
            (g$syntax-kind?$7773$jXZPP
              (annotation-expression g$x$8295$jXZPP)
              g$p?$8296$jXZPP)
            (g$p?$8296$jXZPP g$x$8295$jXZPP))))))
   (g$syntax-vector->list$7774$jXZPP
     g$syntax-vector->list$11469$jXZPP
     (case-lambda
       ((g$x$8297$jXZPP)
        (if (g$stx?$7754$jXZPP g$x$8297$jXZPP)
          ((case-lambda
             ((g$ls$8298$jXZPP g$m*$8299$jXZPP g$s*$8300$jXZPP g$ae*$8301$jXZPP)
              (g$map$5078$jXZPP
                (case-lambda
                  ((g$x$8302$jXZPP)
                   (g$mkstx$7770$jXZPP
                     g$x$8302$jXZPP
                     g$m*$8299$jXZPP
                     g$s*$8300$jXZPP
                     g$ae*$8301$jXZPP)))
                g$ls$8298$jXZPP)))
           (g$syntax-vector->list$7774$jXZPP
             (g$stx-expr$7756$jXZPP g$x$8297$jXZPP))
           (g$stx-mark*$7757$jXZPP g$x$8297$jXZPP)
           (g$stx-subst*$7758$jXZPP g$x$8297$jXZPP)
           (g$stx-ae*$7759$jXZPP g$x$8297$jXZPP))
          (if (annotation? g$x$8297$jXZPP)
            (g$syntax-vector->list$7774$jXZPP
              (annotation-expression g$x$8297$jXZPP))
            (if (vector? g$x$8297$jXZPP)
              (vector->list g$x$8297$jXZPP)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$8297$jXZPP)))))))
   (g$syntax-pair?$7775$jXZPP
     g$syntax-pair?$11470$jXZPP
     (case-lambda
       ((g$x$8303$jXZPP) (g$syntax-kind?$7773$jXZPP g$x$8303$jXZPP pair?))))
   (g$syntax-vector?$7776$jXZPP
     g$syntax-vector?$11471$jXZPP
     (case-lambda
       ((g$x$8304$jXZPP) (g$syntax-kind?$7773$jXZPP g$x$8304$jXZPP vector?))))
   (g$syntax-null?$7777$jXZPP
     g$syntax-null?$11472$jXZPP
     (case-lambda
       ((g$x$8305$jXZPP) (g$syntax-kind?$7773$jXZPP g$x$8305$jXZPP null?))))
   (g$syntax-list?$7778$jXZPP
     g$syntax-list?$11473$jXZPP
     (case-lambda
       ((g$x$8306$jXZPP)
        ((case-lambda
           ((g$t$8307$jXZPP)
            (if g$t$8307$jXZPP
              g$t$8307$jXZPP
              (begin
                '#f
                (if (g$syntax-pair?$7775$jXZPP g$x$8306$jXZPP)
                  (begin
                    '#f
                    (g$syntax-list?$7778$jXZPP
                      (g$syntax-cdr$7780$jXZPP g$x$8306$jXZPP)))
                  '#f)))))
         (g$syntax-null?$7777$jXZPP g$x$8306$jXZPP)))))
   (g$syntax-car$7779$jXZPP
     g$syntax-car$11474$jXZPP
     (case-lambda
       ((g$x$8308$jXZPP)
        (if (g$stx?$7754$jXZPP g$x$8308$jXZPP)
          (g$mkstx$7770$jXZPP
            (g$syntax-car$7779$jXZPP (g$stx-expr$7756$jXZPP g$x$8308$jXZPP))
            (g$stx-mark*$7757$jXZPP g$x$8308$jXZPP)
            (g$stx-subst*$7758$jXZPP g$x$8308$jXZPP)
            (g$stx-ae*$7759$jXZPP g$x$8308$jXZPP))
          (if (annotation? g$x$8308$jXZPP)
            (g$syntax-car$7779$jXZPP (annotation-expression g$x$8308$jXZPP))
            (if (pair? g$x$8308$jXZPP)
              (car g$x$8308$jXZPP)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$8308$jXZPP)))))))
   (g$syntax-cdr$7780$jXZPP
     g$syntax-cdr$11475$jXZPP
     (case-lambda
       ((g$x$8309$jXZPP)
        (if (g$stx?$7754$jXZPP g$x$8309$jXZPP)
          (g$mkstx$7770$jXZPP
            (g$syntax-cdr$7780$jXZPP (g$stx-expr$7756$jXZPP g$x$8309$jXZPP))
            (g$stx-mark*$7757$jXZPP g$x$8309$jXZPP)
            (g$stx-subst*$7758$jXZPP g$x$8309$jXZPP)
            (g$stx-ae*$7759$jXZPP g$x$8309$jXZPP))
          (if (annotation? g$x$8309$jXZPP)
            (g$syntax-cdr$7780$jXZPP (annotation-expression g$x$8309$jXZPP))
            (if (pair? g$x$8309$jXZPP)
              (cdr g$x$8309$jXZPP)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$8309$jXZPP)))))))
   (g$syntax->list$7781$jXZPP
     g$syntax->list$11476$jXZPP
     (case-lambda
       ((g$x$8310$jXZPP)
        (if (g$syntax-pair?$7775$jXZPP g$x$8310$jXZPP)
          (cons
            (g$syntax-car$7779$jXZPP g$x$8310$jXZPP)
            (g$syntax->list$7781$jXZPP
              (g$syntax-cdr$7780$jXZPP g$x$8310$jXZPP)))
          (if (g$syntax-null?$7777$jXZPP g$x$8310$jXZPP)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$8310$jXZPP))))))
   (g$id?$7782$jXZPP
     g$id?$11477$jXZPP
     (case-lambda
       ((g$x$8311$jXZPP)
        (if (g$stx?$7754$jXZPP g$x$8311$jXZPP)
          (begin
            '#f
            ((case-lambda
               ((g$expr$8312$jXZPP)
                (symbol?
                  (if (annotation? g$expr$8312$jXZPP)
                    (annotation-stripped g$expr$8312$jXZPP)
                    g$expr$8312$jXZPP))))
             (g$stx-expr$7756$jXZPP g$x$8311$jXZPP)))
          '#f))))
   (g$id->sym$7783$jXZPP
     g$id->sym$11478$jXZPP
     (case-lambda
       ((g$x$8313$jXZPP)
        (begin
          (if (not (g$stx?$7754$jXZPP g$x$8313$jXZPP))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$8313$jXZPP)
            (void))
          ((case-lambda
             ((g$expr$8314$jXZPP)
              ((case-lambda
                 ((g$sym$8315$jXZPP)
                  (if (symbol? g$sym$8315$jXZPP)
                    g$sym$8315$jXZPP
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$8313$jXZPP))))
               (if (annotation? g$expr$8314$jXZPP)
                 (annotation-stripped g$expr$8314$jXZPP)
                 g$expr$8314$jXZPP))))
           (g$stx-expr$7756$jXZPP g$x$8313$jXZPP))))))
   (g$same-marks?$7784$jXZPP
     g$same-marks?$11479$jXZPP
     (case-lambda
       ((g$x$8316$jXZPP g$y$8317$jXZPP)
        ((case-lambda
           ((g$t$8318$jXZPP)
            (if g$t$8318$jXZPP
              g$t$8318$jXZPP
              (begin
                '#f
                (if (pair? g$x$8316$jXZPP)
                  (if (pair? g$y$8317$jXZPP)
                    (if (eq? (car g$x$8316$jXZPP) (car g$y$8317$jXZPP))
                      (begin
                        '#f
                        (g$same-marks?$7784$jXZPP
                          (cdr g$x$8316$jXZPP)
                          (cdr g$y$8317$jXZPP)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$8316$jXZPP) (begin '#f (null? g$y$8317$jXZPP)) '#f)))))
   (g$bound-id=?$7785$jXZPP
     g$bound-id=?$11480$jXZPP
     (case-lambda
       ((g$x$8319$jXZPP g$y$8320$jXZPP)
        (if (eq? (g$id->sym$7783$jXZPP g$x$8319$jXZPP)
                 (g$id->sym$7783$jXZPP g$y$8320$jXZPP))
          (begin
            '#f
            (g$same-marks?$7784$jXZPP
              (g$stx-mark*$7757$jXZPP g$x$8319$jXZPP)
              (g$stx-mark*$7757$jXZPP g$y$8320$jXZPP)))
          '#f))))
   (g$free-id=?$7786$jXZPP
     g$free-id=?$11481$jXZPP
     (case-lambda
       ((g$i$8321$jXZPP g$j$8322$jXZPP)
        ((case-lambda
           ((g$t0$8323$jXZPP g$t1$8324$jXZPP)
            (if ((case-lambda
                   ((g$t$8325$jXZPP)
                    (if g$t$8325$jXZPP
                      g$t$8325$jXZPP
                      (begin '#f g$t1$8324$jXZPP))))
                 g$t0$8323$jXZPP)
              (eq? g$t0$8323$jXZPP g$t1$8324$jXZPP)
              (eq? (g$id->sym$7783$jXZPP g$i$8321$jXZPP)
                   (g$id->sym$7783$jXZPP g$j$8322$jXZPP)))))
         (g$id->real-label$7796$jXZPP g$i$8321$jXZPP)
         (g$id->real-label$7796$jXZPP g$j$8322$jXZPP)))))
   (g$valid-bound-ids?$7787$jXZPP
     g$valid-bound-ids?$11482$jXZPP
     (case-lambda
       ((g$id*$8326$jXZPP)
        (if (g$for-all$5076$jXZPP g$id?$7782$jXZPP g$id*$8326$jXZPP)
          (begin '#f (g$distinct-bound-ids?$7788$jXZPP g$id*$8326$jXZPP))
          '#f))))
   (g$distinct-bound-ids?$7788$jXZPP
     g$distinct-bound-ids?$11483$jXZPP
     (case-lambda
       ((g$id*$8327$jXZPP)
        ((case-lambda
           ((g$t$8328$jXZPP)
            (if g$t$8328$jXZPP
              g$t$8328$jXZPP
              (begin
                '#f
                (if (not (g$bound-id-member?$7789$jXZPP
                           (car g$id*$8327$jXZPP)
                           (cdr g$id*$8327$jXZPP)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7788$jXZPP (cdr g$id*$8327$jXZPP)))
                  '#f)))))
         (null? g$id*$8327$jXZPP)))))
   (g$bound-id-member?$7789$jXZPP
     g$bound-id-member?$11484$jXZPP
     (case-lambda
       ((g$id$8329$jXZPP g$id*$8330$jXZPP)
        (if (pair? g$id*$8330$jXZPP)
          (begin
            '#f
            ((case-lambda
               ((g$t$8331$jXZPP)
                (if g$t$8331$jXZPP
                  g$t$8331$jXZPP
                  (begin
                    '#f
                    (g$bound-id-member?$7789$jXZPP
                      g$id$8329$jXZPP
                      (cdr g$id*$8330$jXZPP))))))
             (g$bound-id=?$7785$jXZPP g$id$8329$jXZPP (car g$id*$8330$jXZPP))))
          '#f))))
   (g$self-evaluating?$7790$jXZPP
     g$self-evaluating?$11485$jXZPP
     (case-lambda
       ((g$x$8332$jXZPP)
        ((case-lambda
           ((g$t$8333$jXZPP)
            (if g$t$8333$jXZPP
              g$t$8333$jXZPP
              ((case-lambda
                 ((g$t$8334$jXZPP)
                  (if g$t$8334$jXZPP
                    g$t$8334$jXZPP
                    ((case-lambda
                       ((g$t$8335$jXZPP)
                        (if g$t$8335$jXZPP
                          g$t$8335$jXZPP
                          ((case-lambda
                             ((g$t$8336$jXZPP)
                              (if g$t$8336$jXZPP
                                g$t$8336$jXZPP
                                (begin '#f (bytevector? g$x$8332$jXZPP)))))
                           (boolean? g$x$8332$jXZPP)))))
                     (char? g$x$8332$jXZPP)))))
               (string? g$x$8332$jXZPP)))))
         (number? g$x$8332$jXZPP)))))
   (g$strip-annotations$7791$jXZPP
     g$strip-annotations$11486$jXZPP
     (case-lambda
       ((g$x$8337$jXZPP)
        (if (pair? g$x$8337$jXZPP)
          (cons
            (g$strip-annotations$7791$jXZPP (car g$x$8337$jXZPP))
            (g$strip-annotations$7791$jXZPP (cdr g$x$8337$jXZPP)))
          (if (vector? g$x$8337$jXZPP)
            (g$vector-map$5355$jXZPP
              g$strip-annotations$7791$jXZPP
              g$x$8337$jXZPP)
            (if (annotation? g$x$8337$jXZPP)
              (annotation-stripped g$x$8337$jXZPP)
              g$x$8337$jXZPP))))))
   (g$strip$7792$jXZPP
     g$strip$11487$jXZPP
     (case-lambda
       ((g$x$8338$jXZPP g$m*$8339$jXZPP)
        (if (g$top-marked?$7720$jXZPP g$m*$8339$jXZPP)
          (if ((case-lambda
                 ((g$t$8340$jXZPP)
                  (if g$t$8340$jXZPP
                    g$t$8340$jXZPP
                    ((case-lambda
                       ((g$t$8341$jXZPP)
                        (if g$t$8341$jXZPP
                          g$t$8341$jXZPP
                          (begin
                            '#f
                            (if (vector? g$x$8338$jXZPP)
                              (if (> (vector-length g$x$8338$jXZPP) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$8338$jXZPP '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$8338$jXZPP)
                       (begin '#f (annotation? (car g$x$8338$jXZPP)))
                       '#f)))))
               (annotation? g$x$8338$jXZPP))
            (g$strip-annotations$7791$jXZPP g$x$8338$jXZPP)
            g$x$8338$jXZPP)
          ((letrec ((g$f$8342$jXZPP
                      (case-lambda
                        ((g$x$8343$jXZPP)
                         (if (g$stx?$7754$jXZPP g$x$8343$jXZPP)
                           (g$strip$7792$jXZPP
                             (g$stx-expr$7756$jXZPP g$x$8343$jXZPP)
                             (g$stx-mark*$7757$jXZPP g$x$8343$jXZPP))
                           (if (annotation? g$x$8343$jXZPP)
                             (annotation-stripped g$x$8343$jXZPP)
                             (if (pair? g$x$8343$jXZPP)
                               ((case-lambda
                                  ((g$a$8344$jXZPP g$d$8345$jXZPP)
                                   (if (if (eq? g$a$8344$jXZPP
                                                (car g$x$8343$jXZPP))
                                         (begin
                                           '#f
                                           (eq? g$d$8345$jXZPP
                                                (cdr g$x$8343$jXZPP)))
                                         '#f)
                                     g$x$8343$jXZPP
                                     (cons g$a$8344$jXZPP g$d$8345$jXZPP))))
                                (g$f$8342$jXZPP (car g$x$8343$jXZPP))
                                (g$f$8342$jXZPP (cdr g$x$8343$jXZPP)))
                               (if (vector? g$x$8343$jXZPP)
                                 ((case-lambda
                                    ((g$old$8346$jXZPP)
                                     ((case-lambda
                                        ((g$new$8347$jXZPP)
                                         (if (g$for-all$5076$jXZPP
                                               eq?
                                               g$old$8346$jXZPP
                                               g$new$8347$jXZPP)
                                           g$x$8343$jXZPP
                                           (list->vector g$new$8347$jXZPP))))
                                      (g$map$5078$jXZPP
                                        g$f$8342$jXZPP
                                        g$old$8346$jXZPP))))
                                  (vector->list g$x$8343$jXZPP))
                                 g$x$8343$jXZPP))))))))
             g$f$8342$jXZPP)
           g$x$8338$jXZPP)))))
   (g$stx->datum$7793$jXZPP
     g$stx->datum$11488$jXZPP
     (case-lambda
       ((g$x$8348$jXZPP) (g$strip$7792$jXZPP g$x$8348$jXZPP '()))))
   (g$same-marks*?$7794$jXZPP
     g$same-marks*?$11489$jXZPP
     (case-lambda
       ((g$mark*$8349$jXZPP g$mark**$8350$jXZPP g$si$8351$jXZPP)
        (if (null? g$si$8351$jXZPP)
          '#f
          (if (g$same-marks?$7784$jXZPP
                g$mark*$8349$jXZPP
                (vector-ref g$mark**$8350$jXZPP (car g$si$8351$jXZPP)))
            (car g$si$8351$jXZPP)
            (g$same-marks*?$7794$jXZPP
              g$mark*$8349$jXZPP
              g$mark**$8350$jXZPP
              (cdr g$si$8351$jXZPP)))))))
   (g$id->label$7795$jXZPP
     g$id->label$11490$jXZPP
     (case-lambda
       ((g$id$8352$jXZPP)
        ((case-lambda
           ((g$t$8353$jXZPP)
            (if g$t$8353$jXZPP
              g$t$8353$jXZPP
              (begin
                '#f
                ((case-lambda
                   ((g$t$8354$jXZPP)
                    (if g$t$8354$jXZPP
                      ((case-lambda
                         ((g$env$8355$jXZPP)
                          ((case-lambda
                             ((g$rib$8356$jXZPP)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7725$jXZPP
                                     g$id$8352$jXZPP
                                     g$rib$8356$jXZPP
                                     '#f)))
                                (case-lambda
                                  ((g$lab$8359$jXZPP g$_loc$8360$jXZPP)
                                   ((case-lambda
                                      ((g$_loc$8361$jXZPP g$lab$8362$jXZPP)
                                       (begin
                                         (g$extend-rib!$7745$jXZPP
                                           g$rib$8356$jXZPP
                                           g$id$8352$jXZPP
                                           g$lab$8362$jXZPP
                                           '#t)
                                         g$lab$8362$jXZPP)))
                                    g$_loc$8360$jXZPP
                                    g$lab$8359$jXZPP))))))
                           (g$interaction-env-rib$8138$jXZPP
                             g$env$8355$jXZPP))))
                       g$t$8354$jXZPP)
                      '#f)))
                 (g$top-level-context$8180$jXZPP))))))
         (g$id->real-label$7796$jXZPP g$id$8352$jXZPP)))))
   (g$id->real-label$7796$jXZPP
     g$id->real-label$11491$jXZPP
     (case-lambda
       ((g$id$8363$jXZPP)
        ((case-lambda
           ((g$sym$8364$jXZPP)
            ((letrec ((g$search$8365$jXZPP
                        (case-lambda
                          ((g$subst*$8366$jXZPP g$mark*$8367$jXZPP)
                           (if (null? g$subst*$8366$jXZPP)
                             '#f
                             (if (eq? (car g$subst*$8366$jXZPP) 'shift)
                               (g$search$8365$jXZPP
                                 (cdr g$subst*$8366$jXZPP)
                                 (cdr g$mark*$8367$jXZPP))
                               ((case-lambda
                                  ((g$rib$8368$jXZPP)
                                   ((case-lambda
                                      ((g$t$8369$jXZPP)
                                       (if g$t$8369$jXZPP
                                         ((case-lambda
                                            ((g$ht$8370$jXZPP)
                                             ((case-lambda
                                                ((g$si$8371$jXZPP)
                                                 ((case-lambda
                                                    ((g$i$8372$jXZPP)
                                                     (if g$i$8372$jXZPP
                                                       (vector-ref
                                                         (g$rib-label*$7734$jXZPP
                                                           g$rib$8368$jXZPP)
                                                         g$i$8372$jXZPP)
                                                       (g$search$8365$jXZPP
                                                         (cdr g$subst*$8366$jXZPP)
                                                         g$mark*$8367$jXZPP))))
                                                  (if g$si$8371$jXZPP
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7794$jXZPP
                                                        g$mark*$8367$jXZPP
                                                        (g$rib-mark**$7733$jXZPP
                                                          g$rib$8368$jXZPP)
                                                        (reverse
                                                          g$si$8371$jXZPP)))
                                                    '#f))))
                                              (g$hashtable-ref$5584$jXZPP
                                                g$ht$8370$jXZPP
                                                g$sym$8364$jXZPP
                                                '#f))))
                                          g$t$8369$jXZPP)
                                         ((case-lambda
                                            ((g$t$8373$jXZPP)
                                             (if g$t$8373$jXZPP
                                               g$t$8373$jXZPP
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$8374$jXZPP
                                                             (case-lambda
                                                               ((g$sym*$8375$jXZPP
                                                                  g$mark**$8376$jXZPP
                                                                  g$label*$8377$jXZPP)
                                                                (if (null?
                                                                      g$sym*$8375$jXZPP)
                                                                  (g$search$8365$jXZPP
                                                                    (cdr g$subst*$8366$jXZPP)
                                                                    g$mark*$8367$jXZPP)
                                                                  (if (if (eq? (car g$sym*$8375$jXZPP)
                                                                               g$sym$8364$jXZPP)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7784$jXZPP
                                                                            (car g$mark**$8376$jXZPP)
                                                                            g$mark*$8367$jXZPP))
                                                                        '#f)
                                                                    (car g$label*$8377$jXZPP)
                                                                    (g$f$8374$jXZPP
                                                                      (cdr g$sym*$8375$jXZPP)
                                                                      (cdr g$mark**$8376$jXZPP)
                                                                      (cdr g$label*$8377$jXZPP))))))))
                                                    g$f$8374$jXZPP)
                                                  (g$rib-sym*$7732$jXZPP
                                                    g$rib$8368$jXZPP)
                                                  (g$rib-mark**$7733$jXZPP
                                                    g$rib$8368$jXZPP)
                                                  (g$rib-label*$7734$jXZPP
                                                    g$rib$8368$jXZPP))))))
                                          (g$find-label$7744$jXZPP
                                            g$rib$8368$jXZPP
                                            g$sym$8364$jXZPP
                                            g$mark*$8367$jXZPP)))))
                                    (g$rib-sealed/freq$7735$jXZPP
                                      g$rib$8368$jXZPP))))
                                (car g$subst*$8366$jXZPP))))))))
               g$search$8365$jXZPP)
             (g$stx-subst*$7758$jXZPP g$id$8363$jXZPP)
             (g$stx-mark*$7757$jXZPP g$id$8363$jXZPP))))
         (g$id->sym$7783$jXZPP g$id$8363$jXZPP)))))
   (g$label->binding$7797$jXZPP
     g$label->binding$11492$jXZPP
     (case-lambda
       ((g$x$8378$jXZPP g$r$8379$jXZPP)
        (if (not g$x$8378$jXZPP)
          '(displaced-lexical)
          ((case-lambda
             ((g$t$8380$jXZPP)
              (if g$t$8380$jXZPP
                ((case-lambda
                   ((g$b$8381$jXZPP)
                    (if (if (pair? g$b$8381$jXZPP)
                          (begin '#f (eq? (car g$b$8381$jXZPP) '$core-rtd))
                          '#f)
                      (cons
                        '$rtd
                        (g$map$5078$jXZPP
                          g$bless$8023$jXZPP
                          (cdr g$b$8381$jXZPP)))
                      (if (if (pair? g$b$8381$jXZPP)
                            (begin '#f (eq? (car g$b$8381$jXZPP) 'global-rtd))
                            '#f)
                        ((case-lambda
                           ((g$lib$8382$jXZPP g$loc$8383$jXZPP)
                            (cons '$rtd (symbol-value g$loc$8383$jXZPP))))
                         (g$cadr$5304$jXZPP g$b$8381$jXZPP)
                         (g$cddr$5306$jXZPP g$b$8381$jXZPP))
                        g$b$8381$jXZPP))))
                 g$t$8380$jXZPP)
                ((case-lambda
                   ((g$t$8384$jXZPP)
                    (if g$t$8384$jXZPP
                      (cdr g$t$8384$jXZPP)
                      ((case-lambda
                         ((g$t$8385$jXZPP)
                          (if g$t$8385$jXZPP
                            ((case-lambda
                               ((g$env$8386$jXZPP)
                                ((case-lambda
                                   ((g$t$8387$jXZPP)
                                    (if g$t$8387$jXZPP
                                      ((case-lambda
                                         ((g$p$8388$jXZPP)
                                          (g$cons*$5080$jXZPP
                                            'lexical
                                            (cdr g$p$8388$jXZPP)
                                            '#f)))
                                       g$t$8387$jXZPP)
                                      '(displaced-lexical . #f))))
                                 (g$assq$5066$jXZPP
                                   g$x$8378$jXZPP
                                   (g$interaction-env-locs$8140$jXZPP
                                     g$env$8386$jXZPP)))))
                             g$t$8385$jXZPP)
                            '(displaced-lexical . #f))))
                       (g$top-level-context$8180$jXZPP)))))
                 (g$assq$5066$jXZPP g$x$8378$jXZPP g$r$8379$jXZPP)))))
           (g$imported-label->binding$7591$jXZPP g$x$8378$jXZPP))))))
   (g$make-binding$7798$jXZPP g$make-binding$11493$jXZPP cons)
   (g$binding-type$7799$jXZPP g$binding-type$11494$jXZPP car)
   (g$binding-value$7800$jXZPP g$binding-value$11495$jXZPP cdr)
   (g$raise-unbound-error$7801$jXZPP
     g$raise-unbound-error$11496$jXZPP
     (case-lambda
       ((g$id$8389$jXZPP)
        (g$syntax-violation*$8171$jXZPP
          '#f
          '"unbound identifier"
          g$id$8389$jXZPP
          (g$make-undefined-violation$5930$jXZPP)))))
   (g$syntax-type$7802$jXZPP
     g$syntax-type$11497$jXZPP
     (case-lambda
       ((g$e$8390$jXZPP g$r$8391$jXZPP)
        (if (g$id?$7782$jXZPP g$e$8390$jXZPP)
          ((case-lambda
             ((g$id$8392$jXZPP)
              ((case-lambda
                 ((g$label$8393$jXZPP)
                  ((case-lambda
                     ((g$b$8394$jXZPP)
                      ((case-lambda
                         ((g$type$8395$jXZPP)
                          (begin
                            (if (not g$label$8393$jXZPP)
                              (g$raise-unbound-error$7801$jXZPP g$id$8392$jXZPP)
                              (void))
                            ((case-lambda
                               ((g$t$8396$jXZPP)
                                (if (g$memv$5071$jXZPP
                                      g$t$8396$jXZPP
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable))
                                  (values
                                    g$type$8395$jXZPP
                                    (g$binding-value$7800$jXZPP g$b$8394$jXZPP)
                                    g$id$8392$jXZPP)
                                  (values 'other '#f '#f))))
                             g$type$8395$jXZPP))))
                       (g$binding-type$7799$jXZPP g$b$8394$jXZPP))))
                   (g$label->binding$7797$jXZPP
                     g$label$8393$jXZPP
                     g$r$8391$jXZPP))))
               (g$id->label$7795$jXZPP g$id$8392$jXZPP))))
           g$e$8390$jXZPP)
          (if (g$syntax-pair?$7775$jXZPP g$e$8390$jXZPP)
            ((case-lambda
               ((g$id$8397$jXZPP)
                (if (g$id?$7782$jXZPP g$id$8397$jXZPP)
                  ((case-lambda
                     ((g$label$8398$jXZPP)
                      ((case-lambda
                         ((g$b$8399$jXZPP)
                          ((case-lambda
                             ((g$type$8400$jXZPP)
                              (begin
                                (if (not g$label$8398$jXZPP)
                                  (g$raise-unbound-error$7801$jXZPP
                                    g$id$8397$jXZPP)
                                  (void))
                                ((case-lambda
                                   ((g$t$8401$jXZPP)
                                    (if (g$memv$5071$jXZPP
                                          g$t$8401$jXZPP
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd))
                                      (values
                                        g$type$8400$jXZPP
                                        (g$binding-value$7800$jXZPP
                                          g$b$8399$jXZPP)
                                        g$id$8397$jXZPP)
                                      (values 'call '#f '#f))))
                                 g$type$8400$jXZPP))))
                           (g$binding-type$7799$jXZPP g$b$8399$jXZPP))))
                       (g$label->binding$7797$jXZPP
                         g$label$8398$jXZPP
                         g$r$8391$jXZPP))))
                   (g$id->label$7795$jXZPP g$id$8397$jXZPP))
                  (values 'call '#f '#f))))
             (g$syntax-car$7779$jXZPP g$e$8390$jXZPP))
            ((case-lambda
               ((g$d$8402$jXZPP)
                (if (g$self-evaluating?$7790$jXZPP g$d$8402$jXZPP)
                  (values 'constant g$d$8402$jXZPP '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7793$jXZPP g$e$8390$jXZPP)))))))
   (g$sanitize-binding$7810$jXZPP
     g$sanitize-binding$11498$jXZPP
     (case-lambda
       ((g$x$8403$jXZPP g$src$8404$jXZPP)
        (if (procedure? g$x$8403$jXZPP)
          (g$cons*$5080$jXZPP 'local-macro g$x$8403$jXZPP g$src$8404$jXZPP)
          (if (if (pair? g$x$8403$jXZPP)
                (if (eq? (car g$x$8403$jXZPP) 'macro!)
                  (begin '#f (procedure? (cdr g$x$8403$jXZPP)))
                  '#f)
                '#f)
            (g$cons*$5080$jXZPP
              'local-macro!
              (cdr g$x$8403$jXZPP)
              g$src$8404$jXZPP)
            (if (if (pair? g$x$8403$jXZPP)
                  (begin '#f (eq? (car g$x$8403$jXZPP) '$rtd))
                  '#f)
              g$x$8403$jXZPP
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$8403$jXZPP)))))))
   (g$make-variable-transformer$7811$jXZPP
     g$make-variable-transformer$11499$jXZPP
     (case-lambda
       ((g$x$8405$jXZPP)
        (if (procedure? g$x$8405$jXZPP)
          (cons 'macro! g$x$8405$jXZPP)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$8405$jXZPP)))))
   (g$variable-transformer?$7812$jXZPP
     g$variable-transformer?$11500$jXZPP
     (case-lambda
       ((g$x$8406$jXZPP)
        (if (pair? g$x$8406$jXZPP)
          (if (eq? (car g$x$8406$jXZPP) 'macro!)
            (begin '#f (procedure? (cdr g$x$8406$jXZPP)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7813$jXZPP
     g$variable-transformer-procedure$11501$jXZPP
     (case-lambda
       ((g$x$8407$jXZPP)
        (if (g$variable-transformer?$7812$jXZPP g$x$8407$jXZPP)
          (cdr g$x$8407$jXZPP)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$8407$jXZPP)))))
   (g$make-eval-transformer$7814$jXZPP
     g$make-eval-transformer$11502$jXZPP
     (case-lambda
       ((g$x$8408$jXZPP)
        (g$sanitize-binding$7810$jXZPP
          (eval-core (g$expanded->core$7292$jXZPP g$x$8408$jXZPP))
          g$x$8408$jXZPP))))
   (g$parse-define$8000$jXZPP
     g$parse-define$11503$jXZPP
     (case-lambda
       ((g$x$8409$jXZPP)
        ((case-lambda
           ((g$t$8410$jXZPP)
            ((case-lambda
               ((g$ls/false$8411$jXZPP)
                (if (if g$ls/false$8411$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8412$jXZPP
                               g$fmls$8413$jXZPP
                               g$b$8414$jXZPP
                               g$b*$8415$jXZPP)
                             (g$id?$7782$jXZPP g$id$8412$jXZPP)))
                          g$ls/false$8411$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8416$jXZPP
                         g$fmls$8417$jXZPP
                         g$b$8418$jXZPP
                         g$b*$8419$jXZPP)
                       (begin
                         (g$verify-formals$8080$jXZPP
                           g$fmls$8417$jXZPP
                           g$x$8409$jXZPP)
                         (values
                           g$id$8416$jXZPP
                           (cons
                             'defun
                             (cons
                               g$fmls$8417$jXZPP
                               (cons g$b$8418$jXZPP g$b*$8419$jXZPP)))))))
                    g$ls/false$8411$jXZPP)
                  ((case-lambda
                     ((g$t$8420$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8421$jXZPP)
                          (if (if g$ls/false$8421$jXZPP
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$8422$jXZPP g$val$8423$jXZPP)
                                       (g$id?$7782$jXZPP g$id$8422$jXZPP)))
                                    g$ls/false$8421$jXZPP))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$8424$jXZPP g$val$8425$jXZPP)
                                 (values
                                   g$id$8424$jXZPP
                                   (cons 'expr g$val$8425$jXZPP))))
                              g$ls/false$8421$jXZPP)
                            ((case-lambda
                               ((g$t$8426$jXZPP)
                                ((case-lambda
                                   ((g$ls/false$8427$jXZPP)
                                    (if (if g$ls/false$8427$jXZPP
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$8428$jXZPP)
                                                 (g$id?$7782$jXZPP
                                                   g$id$8428$jXZPP)))
                                              g$ls/false$8427$jXZPP))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$8429$jXZPP)
                                           (values
                                             g$id$8429$jXZPP
                                             (cons
                                               'expr
                                               (g$bless$8023$jXZPP '(void))))))
                                        g$ls/false$8427$jXZPP)
                                      (g$syntax-violation$8172$jXZPP
                                        '#f
                                        '"invalid syntax"
                                        g$t$8426$jXZPP))))
                                 (g$syntax-dispatch$8060$jXZPP
                                   g$t$8426$jXZPP
                                   '(_ any)))))
                             g$t$8420$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$8420$jXZPP
                         '(_ any any)))))
                   g$t$8410$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8410$jXZPP
               '(_ (any . any) any . each-any)))))
         g$x$8409$jXZPP))))
   (g$parse-define-syntax$8001$jXZPP
     g$parse-define-syntax$11504$jXZPP
     (case-lambda
       ((g$x$8430$jXZPP)
        ((case-lambda
           ((g$t$8431$jXZPP)
            ((case-lambda
               ((g$ls/false$8432$jXZPP)
                (if (if g$ls/false$8432$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8433$jXZPP g$val$8434$jXZPP)
                             (g$id?$7782$jXZPP g$id$8433$jXZPP)))
                          g$ls/false$8432$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8435$jXZPP g$val$8436$jXZPP)
                       (values g$id$8435$jXZPP g$val$8436$jXZPP)))
                    g$ls/false$8432$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8431$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8431$jXZPP '(_ any any)))))
         g$x$8430$jXZPP))))
   (g$scheme-stx-hashtable$8002$jXZPP
     g$scheme-stx-hashtable$11505$jXZPP
     (g$make-eq-hashtable$5581$jXZPP))
   (g$scheme-stx$8003$jXZPP
     g$scheme-stx$11506$jXZPP
     (case-lambda
       ((g$sym$8437$jXZPP)
        ((case-lambda
           ((g$t$8438$jXZPP)
            (if g$t$8438$jXZPP
              g$t$8438$jXZPP
              (begin
                '#f
                ((case-lambda
                   ((g$subst$8439$jXZPP)
                    ((case-lambda
                       ((g$stx$8440$jXZPP)
                        ((case-lambda
                           ((g$stx$8441$jXZPP)
                            (begin
                              (g$hashtable-set!$5585$jXZPP
                                g$scheme-stx-hashtable$8002$jXZPP
                                g$sym$8437$jXZPP
                                g$stx$8441$jXZPP)
                              g$stx$8441$jXZPP)))
                         ((case-lambda
                            ((g$t$8442$jXZPP)
                             (if g$t$8442$jXZPP
                               ((case-lambda
                                  ((g$x$8443$jXZPP)
                                   ((case-lambda
                                      ((g$name$8444$jXZPP g$label$8445$jXZPP)
                                       (g$add-subst$7772$jXZPP
                                         (g$make-rib$7731$jXZPP
                                           (list g$name$8444$jXZPP)
                                           (list g$top-mark*$7719$jXZPP)
                                           (list g$label$8445$jXZPP)
                                           '#f
                                           '#f)
                                         g$stx$8440$jXZPP)))
                                    (car g$x$8443$jXZPP)
                                    (cdr g$x$8443$jXZPP))))
                                g$t$8442$jXZPP)
                               g$stx$8440$jXZPP)))
                          (g$assq$5066$jXZPP
                            g$sym$8437$jXZPP
                            g$subst$8439$jXZPP)))))
                     (g$make-stx$7755$jXZPP
                       g$sym$8437$jXZPP
                       g$top-mark*$7719$jXZPP
                       '()
                       '()))))
                 (g$library-subst$7549$jXZPP
                   (g$find-library-by-name$7585$jXZPP
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5584$jXZPP
           g$scheme-stx-hashtable$8002$jXZPP
           g$sym$8437$jXZPP
           '#f)))))
   (g$lexical-var$8004$jXZPP g$lexical-var$11507$jXZPP car)
   (g$lexical-mutable?$8005$jXZPP g$lexical-mutable?$11508$jXZPP cdr)
   (g$set-lexical-mutable!$8006$jXZPP
     g$set-lexical-mutable!$11509$jXZPP
     set-cdr!)
   (g$add-lexical$8007$jXZPP
     g$add-lexical$11510$jXZPP
     (case-lambda
       ((g$lab$8446$jXZPP g$lex$8447$jXZPP g$r$8448$jXZPP)
        (cons
          (g$cons*$5080$jXZPP g$lab$8446$jXZPP 'lexical g$lex$8447$jXZPP '#f)
          g$r$8448$jXZPP))))
   (g$add-lexicals$8008$jXZPP
     g$add-lexicals$11511$jXZPP
     (case-lambda
       ((g$lab*$8449$jXZPP g$lex*$8450$jXZPP g$r$8451$jXZPP)
        (if (null? g$lab*$8449$jXZPP)
          g$r$8451$jXZPP
          (g$add-lexicals$8008$jXZPP
            (cdr g$lab*$8449$jXZPP)
            (cdr g$lex*$8450$jXZPP)
            (g$add-lexical$8007$jXZPP
              (car g$lab*$8449$jXZPP)
              (car g$lex*$8450$jXZPP)
              g$r$8451$jXZPP))))))
   (g$letrec-helper$8009$jXZPP
     g$letrec-helper$11512$jXZPP
     (case-lambda
       ((g$e$8452$jXZPP g$r$8453$jXZPP g$mr$8454$jXZPP g$build$8455$jXZPP)
        ((case-lambda
           ((g$t$8456$jXZPP)
            ((case-lambda
               ((g$ls/false$8457$jXZPP)
                (if g$ls/false$8457$jXZPP
                  (apply
                    (case-lambda
                      ((g$lhs*$8458$jXZPP
                         g$rhs*$8459$jXZPP
                         g$b$8460$jXZPP
                         g$b*$8461$jXZPP)
                       (if (not (g$valid-bound-ids?$7787$jXZPP
                                  g$lhs*$8458$jXZPP))
                         (g$invalid-fmls-error$8025$jXZPP
                           g$e$8452$jXZPP
                           g$lhs*$8458$jXZPP)
                         ((case-lambda
                            ((g$lex*$8462$jXZPP g$lab*$8463$jXZPP)
                             ((case-lambda
                                ((g$rib$8464$jXZPP g$r$8465$jXZPP)
                                 ((case-lambda
                                    ((g$body$8466$jXZPP g$rhs*$8467$jXZPP)
                                     (g$build$8455$jXZPP
                                       '#f
                                       g$lex*$8462$jXZPP
                                       g$rhs*$8467$jXZPP
                                       g$body$8466$jXZPP)))
                                  (g$chi-internal$8089$jXZPP
                                    (g$add-subst$7772$jXZPP
                                      g$rib$8464$jXZPP
                                      (cons g$b$8460$jXZPP g$b*$8461$jXZPP))
                                    g$r$8465$jXZPP
                                    g$mr$8454$jXZPP)
                                  (g$chi-expr*$8076$jXZPP
                                    (g$map$5078$jXZPP
                                      (case-lambda
                                        ((g$x$8468$jXZPP)
                                         (g$add-subst$7772$jXZPP
                                           g$rib$8464$jXZPP
                                           g$x$8468$jXZPP)))
                                      g$rhs*$8459$jXZPP)
                                    g$r$8465$jXZPP
                                    g$mr$8454$jXZPP))))
                              (g$make-full-rib$7750$jXZPP
                                g$lhs*$8458$jXZPP
                                g$lab*$8463$jXZPP)
                              (g$add-lexicals$8008$jXZPP
                                g$lab*$8463$jXZPP
                                g$lex*$8462$jXZPP
                                g$r$8453$jXZPP))))
                          (g$map$5078$jXZPP
                            g$gen-lexical$7721$jXZPP
                            g$lhs*$8458$jXZPP)
                          (g$map$5078$jXZPP
                            g$gen-label$7723$jXZPP
                            g$lhs*$8458$jXZPP)))))
                    g$ls/false$8457$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8456$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8456$jXZPP
               '(_ #(each (any any)) any . each-any)))))
         g$e$8452$jXZPP))))
   (g$letrec-transformer$8010$jXZPP
     g$letrec-transformer$11513$jXZPP
     (case-lambda
       ((g$e$8469$jXZPP g$r$8470$jXZPP g$mr$8471$jXZPP)
        (g$letrec-helper$8009$jXZPP
          g$e$8469$jXZPP
          g$r$8470$jXZPP
          g$mr$8471$jXZPP
          g$build-letrec$7713$jXZPP))))
   (g$letrec*-transformer$8011$jXZPP
     g$letrec*-transformer$11514$jXZPP
     (case-lambda
       ((g$e$8472$jXZPP g$r$8473$jXZPP g$mr$8474$jXZPP)
        (g$letrec-helper$8009$jXZPP
          g$e$8472$jXZPP
          g$r$8473$jXZPP
          g$mr$8474$jXZPP
          g$build-letrec*$7714$jXZPP))))
   (g$fluid-let-syntax-transformer$8012$jXZPP
     g$fluid-let-syntax-transformer$11515$jXZPP
     (case-lambda
       ((g$e$8475$jXZPP g$r$8476$jXZPP g$mr$8477$jXZPP)
        (letrec* ((g$lookup$8478$jXZPP
                    (case-lambda
                      ((g$x$8488$jXZPP)
                       ((case-lambda
                          ((g$t$8489$jXZPP)
                           (if g$t$8489$jXZPP
                             g$t$8489$jXZPP
                             (begin
                               '#f
                               (g$syntax-violation$8172$jXZPP
                                 '#f
                                 '"unbound identifier"
                                 g$e$8475$jXZPP
                                 g$x$8488$jXZPP)))))
                        (g$id->label$7795$jXZPP g$x$8488$jXZPP))))))
          ((case-lambda
             ((g$t$8479$jXZPP)
              ((case-lambda
                 ((g$ls/false$8480$jXZPP)
                  (if g$ls/false$8480$jXZPP
                    (apply
                      (case-lambda
                        ((g$lhs*$8481$jXZPP
                           g$rhs*$8482$jXZPP
                           g$b$8483$jXZPP
                           g$b*$8484$jXZPP)
                         (if (not (g$valid-bound-ids?$7787$jXZPP
                                    g$lhs*$8481$jXZPP))
                           (g$invalid-fmls-error$8025$jXZPP
                             g$e$8475$jXZPP
                             g$lhs*$8481$jXZPP)
                           ((case-lambda
                              ((g$lab*$8485$jXZPP g$rhs*$8486$jXZPP)
                               (g$chi-internal$8089$jXZPP
                                 (cons g$b$8483$jXZPP g$b*$8484$jXZPP)
                                 (append
                                   (g$map$5078$jXZPP
                                     cons
                                     g$lab*$8485$jXZPP
                                     g$rhs*$8486$jXZPP)
                                   g$r$8476$jXZPP)
                                 (append
                                   (g$map$5078$jXZPP
                                     cons
                                     g$lab*$8485$jXZPP
                                     g$rhs*$8486$jXZPP)
                                   g$mr$8477$jXZPP))))
                            (g$map$5078$jXZPP
                              g$lookup$8478$jXZPP
                              g$lhs*$8481$jXZPP)
                            (g$map$5078$jXZPP
                              (case-lambda
                                ((g$x$8487$jXZPP)
                                 (g$make-eval-transformer$7814$jXZPP
                                   (g$expand-transformer$8105$jXZPP
                                     g$x$8487$jXZPP
                                     g$mr$8477$jXZPP))))
                              g$rhs*$8482$jXZPP)))))
                      g$ls/false$8480$jXZPP)
                    (g$syntax-violation$8172$jXZPP
                      '#f
                      '"invalid syntax"
                      g$t$8479$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP
                 g$t$8479$jXZPP
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8475$jXZPP)))))
   (g$type-descriptor-transformer$8013$jXZPP
     g$type-descriptor-transformer$11516$jXZPP
     (case-lambda
       ((g$e$8490$jXZPP g$r$8491$jXZPP g$mr$8492$jXZPP)
        ((case-lambda
           ((g$t$8493$jXZPP)
            ((case-lambda
               ((g$ls/false$8494$jXZPP)
                (if (if g$ls/false$8494$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8495$jXZPP)
                             (g$id?$7782$jXZPP g$id$8495$jXZPP)))
                          g$ls/false$8494$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8496$jXZPP)
                       ((case-lambda
                          ((g$lab$8497$jXZPP)
                           ((case-lambda
                              ((g$b$8498$jXZPP)
                               ((case-lambda
                                  ((g$type$8499$jXZPP)
                                   (begin
                                     (if (not g$lab$8497$jXZPP)
                                       (g$raise-unbound-error$7801$jXZPP
                                         g$id$8496$jXZPP)
                                       (void))
                                     (if (not (if (eq? g$type$8499$jXZPP '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$7800$jXZPP
                                                           g$b$8498$jXZPP))))
                                                '#f))
                                       (g$syntax-violation$8172$jXZPP
                                         '#f
                                         '"not a record type"
                                         g$e$8490$jXZPP)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$7800$jXZPP
                                         g$b$8498$jXZPP)))))
                                (g$binding-type$7799$jXZPP g$b$8498$jXZPP))))
                            (g$label->binding$7797$jXZPP
                              g$lab$8497$jXZPP
                              g$r$8491$jXZPP))))
                        (g$id->label$7795$jXZPP g$id$8496$jXZPP))))
                    g$ls/false$8494$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8493$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8493$jXZPP '(_ any)))))
         g$e$8490$jXZPP))))
   (g$record-type-descriptor-transformer$8014$jXZPP
     g$record-type-descriptor-transformer$11517$jXZPP
     (case-lambda
       ((g$e$8500$jXZPP g$r$8501$jXZPP g$mr$8502$jXZPP)
        ((case-lambda
           ((g$t$8503$jXZPP)
            ((case-lambda
               ((g$ls/false$8504$jXZPP)
                (if (if g$ls/false$8504$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8505$jXZPP)
                             (g$id?$7782$jXZPP g$id$8505$jXZPP)))
                          g$ls/false$8504$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8506$jXZPP)
                       ((case-lambda
                          ((g$lab$8507$jXZPP)
                           ((case-lambda
                              ((g$b$8508$jXZPP)
                               ((case-lambda
                                  ((g$type$8509$jXZPP)
                                   (begin
                                     (if (not g$lab$8507$jXZPP)
                                       (g$raise-unbound-error$7801$jXZPP
                                         g$id$8506$jXZPP)
                                       (void))
                                     (if (not (if (eq? g$type$8509$jXZPP '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7800$jXZPP
                                                      g$b$8508$jXZPP)))
                                                '#f))
                                       (g$syntax-violation$8172$jXZPP
                                         '#f
                                         '"not a record type"
                                         g$e$8500$jXZPP)
                                       (void))
                                     (g$chi-expr$8078$jXZPP
                                       (car (g$binding-value$7800$jXZPP
                                              g$b$8508$jXZPP))
                                       g$r$8501$jXZPP
                                       g$mr$8502$jXZPP))))
                                (g$binding-type$7799$jXZPP g$b$8508$jXZPP))))
                            (g$label->binding$7797$jXZPP
                              g$lab$8507$jXZPP
                              g$r$8501$jXZPP))))
                        (g$id->label$7795$jXZPP g$id$8506$jXZPP))))
                    g$ls/false$8504$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8503$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8503$jXZPP '(_ any)))))
         g$e$8500$jXZPP))))
   (g$record-constructor-descriptor-transformer$8015$jXZPP
     g$record-constructor-descriptor-transformer$11518$jXZPP
     (case-lambda
       ((g$e$8510$jXZPP g$r$8511$jXZPP g$mr$8512$jXZPP)
        ((case-lambda
           ((g$t$8513$jXZPP)
            ((case-lambda
               ((g$ls/false$8514$jXZPP)
                (if (if g$ls/false$8514$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8515$jXZPP)
                             (g$id?$7782$jXZPP g$id$8515$jXZPP)))
                          g$ls/false$8514$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8516$jXZPP)
                       ((case-lambda
                          ((g$lab$8517$jXZPP)
                           ((case-lambda
                              ((g$b$8518$jXZPP)
                               ((case-lambda
                                  ((g$type$8519$jXZPP)
                                   (begin
                                     (if (not g$lab$8517$jXZPP)
                                       (g$raise-unbound-error$7801$jXZPP
                                         g$id$8516$jXZPP)
                                       (void))
                                     (if (not (if (eq? g$type$8519$jXZPP '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7800$jXZPP
                                                      g$b$8518$jXZPP)))
                                                '#f))
                                       (g$syntax-violation$8172$jXZPP
                                         '#f
                                         '"invalid type"
                                         g$e$8510$jXZPP)
                                       (void))
                                     (g$chi-expr$8078$jXZPP
                                       (g$cadr$5304$jXZPP
                                         (g$binding-value$7800$jXZPP
                                           g$b$8518$jXZPP))
                                       g$r$8511$jXZPP
                                       g$mr$8512$jXZPP))))
                                (g$binding-type$7799$jXZPP g$b$8518$jXZPP))))
                            (g$label->binding$7797$jXZPP
                              g$lab$8517$jXZPP
                              g$r$8511$jXZPP))))
                        (g$id->label$7795$jXZPP g$id$8516$jXZPP))))
                    g$ls/false$8514$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8513$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8513$jXZPP '(_ any)))))
         g$e$8510$jXZPP))))
   (g$when-macro$8016$jXZPP
     g$when-macro$11519$jXZPP
     (case-lambda
       ((g$e$8520$jXZPP)
        ((case-lambda
           ((g$t$8521$jXZPP)
            ((case-lambda
               ((g$ls/false$8522$jXZPP)
                (if g$ls/false$8522$jXZPP
                  (apply
                    (case-lambda
                      ((g$test$8523$jXZPP g$e$8524$jXZPP g$e*$8525$jXZPP)
                       (g$bless$8023$jXZPP
                         (list
                           'if
                           g$test$8523$jXZPP
                           (cons
                             'begin
                             (cons g$e$8524$jXZPP g$e*$8525$jXZPP))))))
                    g$ls/false$8522$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8521$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8521$jXZPP
               '(_ any any . each-any)))))
         g$e$8520$jXZPP))))
   (g$unless-macro$8017$jXZPP
     g$unless-macro$11520$jXZPP
     (case-lambda
       ((g$e$8526$jXZPP)
        ((case-lambda
           ((g$t$8527$jXZPP)
            ((case-lambda
               ((g$ls/false$8528$jXZPP)
                (if g$ls/false$8528$jXZPP
                  (apply
                    (case-lambda
                      ((g$test$8529$jXZPP g$e$8530$jXZPP g$e*$8531$jXZPP)
                       (g$bless$8023$jXZPP
                         (list
                           'if
                           (list 'not g$test$8529$jXZPP)
                           (cons
                             'begin
                             (cons g$e$8530$jXZPP g$e*$8531$jXZPP))))))
                    g$ls/false$8528$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8527$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8527$jXZPP
               '(_ any any . each-any)))))
         g$e$8526$jXZPP))))
   (g$if-transformer$8018$jXZPP
     g$if-transformer$11521$jXZPP
     (case-lambda
       ((g$e$8532$jXZPP g$r$8533$jXZPP g$mr$8534$jXZPP)
        ((case-lambda
           ((g$t$8535$jXZPP)
            ((case-lambda
               ((g$ls/false$8536$jXZPP)
                (if g$ls/false$8536$jXZPP
                  (apply
                    (case-lambda
                      ((g$e0$8537$jXZPP g$e1$8538$jXZPP g$e2$8539$jXZPP)
                       (list
                         'if
                         (g$chi-expr$8078$jXZPP
                           g$e0$8537$jXZPP
                           g$r$8533$jXZPP
                           g$mr$8534$jXZPP)
                         (g$chi-expr$8078$jXZPP
                           g$e1$8538$jXZPP
                           g$r$8533$jXZPP
                           g$mr$8534$jXZPP)
                         (g$chi-expr$8078$jXZPP
                           g$e2$8539$jXZPP
                           g$r$8533$jXZPP
                           g$mr$8534$jXZPP))))
                    g$ls/false$8536$jXZPP)
                  ((case-lambda
                     ((g$t$8540$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8541$jXZPP)
                          (if g$ls/false$8541$jXZPP
                            (apply
                              (case-lambda
                                ((g$e0$8542$jXZPP g$e1$8543$jXZPP)
                                 (list
                                   'if
                                   (g$chi-expr$8078$jXZPP
                                     g$e0$8542$jXZPP
                                     g$r$8533$jXZPP
                                     g$mr$8534$jXZPP)
                                   (g$chi-expr$8078$jXZPP
                                     g$e1$8543$jXZPP
                                     g$r$8533$jXZPP
                                     g$mr$8534$jXZPP)
                                   (g$build-void$7712$jXZPP))))
                              g$ls/false$8541$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$8540$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$8540$jXZPP
                         '(_ any any)))))
                   g$t$8535$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8535$jXZPP '(_ any any any)))))
         g$e$8532$jXZPP))))
   (g$case-macro$8019$jXZPP
     g$case-macro$11522$jXZPP
     (case-lambda
       ((g$e$8544$jXZPP)
        (letrec* ((g$build-last$8545$jXZPP
                    (case-lambda
                      ((g$cls$8565$jXZPP)
                       ((case-lambda
                          ((g$t$8566$jXZPP)
                           ((case-lambda
                              ((g$ls/false$8567$jXZPP)
                               (if g$ls/false$8567$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$e$8568$jXZPP g$e*$8569$jXZPP)
                                      (cons
                                        'begin
                                        (cons g$e$8568$jXZPP g$e*$8569$jXZPP))))
                                   g$ls/false$8567$jXZPP)
                                 ((case-lambda
                                    ((g$t$8570$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$8571$jXZPP)
                                         (if g$ls/false$8571$jXZPP
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8546$jXZPP
                                                  g$cls$8565$jXZPP
                                                  '(if #f #f))))
                                             g$ls/false$8571$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$t$8570$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$8570$jXZPP
                                        '_))))
                                  g$t$8566$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$8566$jXZPP
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8565$jXZPP))))
                  (g$build-one$8546$jXZPP
                    (case-lambda
                      ((g$cls$8558$jXZPP g$k$8559$jXZPP)
                       ((case-lambda
                          ((g$t$8560$jXZPP)
                           ((case-lambda
                              ((g$ls/false$8561$jXZPP)
                               (if g$ls/false$8561$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$d*$8562$jXZPP
                                        g$e$8563$jXZPP
                                        g$e*$8564$jXZPP)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8562$jXZPP))
                                        (cons
                                          'begin
                                          (cons g$e$8563$jXZPP g$e*$8564$jXZPP))
                                        g$k$8559$jXZPP)))
                                   g$ls/false$8561$jXZPP)
                                 (g$syntax-violation$8172$jXZPP
                                   '#f
                                   '"invalid syntax"
                                   g$t$8560$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$8560$jXZPP
                              '(each-any any . each-any)))))
                        g$cls$8558$jXZPP)))))
          ((case-lambda
             ((g$t$8547$jXZPP)
              ((case-lambda
                 ((g$ls/false$8548$jXZPP)
                  (if g$ls/false$8548$jXZPP
                    (apply
                      (case-lambda
                        ((g$expr$8549$jXZPP)
                         (g$bless$8023$jXZPP
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8549$jXZPP))
                               '((if #f #f)))))))
                      g$ls/false$8548$jXZPP)
                    ((case-lambda
                       ((g$t$8550$jXZPP)
                        ((case-lambda
                           ((g$ls/false$8551$jXZPP)
                            (if g$ls/false$8551$jXZPP
                              (apply
                                (case-lambda
                                  ((g$expr$8552$jXZPP
                                     g$cls$8553$jXZPP
                                     g$cls*$8554$jXZPP)
                                   (g$bless$8023$jXZPP
                                     (list
                                       'let
                                       (list (list 't g$expr$8552$jXZPP))
                                       ((letrec ((g$f$8555$jXZPP
                                                   (case-lambda
                                                     ((g$cls$8556$jXZPP
                                                        g$cls*$8557$jXZPP)
                                                      (if (null?
                                                            g$cls*$8557$jXZPP)
                                                        (g$build-last$8545$jXZPP
                                                          g$cls$8556$jXZPP)
                                                        (g$build-one$8546$jXZPP
                                                          g$cls$8556$jXZPP
                                                          (g$f$8555$jXZPP
                                                            (car g$cls*$8557$jXZPP)
                                                            (cdr g$cls*$8557$jXZPP))))))))
                                          g$f$8555$jXZPP)
                                        g$cls$8553$jXZPP
                                        g$cls*$8554$jXZPP)))))
                                g$ls/false$8551$jXZPP)
                              (g$syntax-violation$8172$jXZPP
                                '#f
                                '"invalid syntax"
                                g$t$8550$jXZPP))))
                         (g$syntax-dispatch$8060$jXZPP
                           g$t$8550$jXZPP
                           '(_ any any . each-any)))))
                     g$t$8547$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP g$t$8547$jXZPP '(_ any)))))
           g$e$8544$jXZPP)))))
   (g$quote-transformer$8020$jXZPP
     g$quote-transformer$11523$jXZPP
     (case-lambda
       ((g$e$8572$jXZPP g$r$8573$jXZPP g$mr$8574$jXZPP)
        ((case-lambda
           ((g$t$8575$jXZPP)
            ((case-lambda
               ((g$ls/false$8576$jXZPP)
                (if g$ls/false$8576$jXZPP
                  (apply
                    (case-lambda
                      ((g$datum$8577$jXZPP)
                       (list
                         'quote
                         (g$stx->datum$7793$jXZPP g$datum$8577$jXZPP))))
                    g$ls/false$8576$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8575$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8575$jXZPP '(_ any)))))
         g$e$8572$jXZPP))))
   (g$case-lambda-transformer$8021$jXZPP
     g$case-lambda-transformer$11524$jXZPP
     (case-lambda
       ((g$e$8578$jXZPP g$r$8579$jXZPP g$mr$8580$jXZPP)
        ((case-lambda
           ((g$t$8581$jXZPP)
            ((case-lambda
               ((g$ls/false$8582$jXZPP)
                (if g$ls/false$8582$jXZPP
                  (apply
                    (case-lambda
                      ((g$fmls*$8583$jXZPP g$b*$8584$jXZPP g$b**$8585$jXZPP)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$8082$jXZPP
                              g$e$8578$jXZPP
                              g$fmls*$8583$jXZPP
                              (g$map$5078$jXZPP
                                cons
                                g$b*$8584$jXZPP
                                g$b**$8585$jXZPP)
                              g$r$8579$jXZPP
                              g$mr$8580$jXZPP)))
                         (case-lambda
                           ((g$fmls*$8588$jXZPP g$body*$8589$jXZPP)
                            ((case-lambda
                               ((g$body*$8590$jXZPP g$fmls*$8591$jXZPP)
                                (g$build-case-lambda$7709$jXZPP
                                  '#f
                                  g$fmls*$8591$jXZPP
                                  g$body*$8590$jXZPP)))
                             g$body*$8589$jXZPP
                             g$fmls*$8588$jXZPP))))))
                    g$ls/false$8582$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8581$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8581$jXZPP
               '(_ . #(each (any any . each-any)))))))
         g$e$8578$jXZPP))))
   (g$lambda-transformer$8022$jXZPP
     g$lambda-transformer$11525$jXZPP
     (case-lambda
       ((g$e$8592$jXZPP g$r$8593$jXZPP g$mr$8594$jXZPP)
        ((case-lambda
           ((g$t$8595$jXZPP)
            ((case-lambda
               ((g$ls/false$8596$jXZPP)
                (if g$ls/false$8596$jXZPP
                  (apply
                    (case-lambda
                      ((g$fmls$8597$jXZPP g$b$8598$jXZPP g$b*$8599$jXZPP)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$8081$jXZPP
                              g$e$8592$jXZPP
                              g$fmls$8597$jXZPP
                              (cons g$b$8598$jXZPP g$b*$8599$jXZPP)
                              g$r$8593$jXZPP
                              g$mr$8594$jXZPP)))
                         (case-lambda
                           ((g$fmls$8602$jXZPP g$body$8603$jXZPP)
                            ((case-lambda
                               ((g$body$8604$jXZPP g$fmls$8605$jXZPP)
                                (g$build-lambda$7708$jXZPP
                                  '#f
                                  g$fmls$8605$jXZPP
                                  g$body$8604$jXZPP)))
                             g$body$8603$jXZPP
                             g$fmls$8602$jXZPP))))))
                    g$ls/false$8596$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8595$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8595$jXZPP
               '(_ any any . each-any)))))
         g$e$8592$jXZPP))))
   (g$bless$8023$jXZPP
     g$bless$11526$jXZPP
     (case-lambda
       ((g$x$8606$jXZPP)
        (g$mkstx$7770$jXZPP
          ((letrec ((g$f$8607$jXZPP
                      (case-lambda
                        ((g$x$8608$jXZPP)
                         (if (g$stx?$7754$jXZPP g$x$8608$jXZPP)
                           g$x$8608$jXZPP
                           (if (pair? g$x$8608$jXZPP)
                             (cons
                               (g$f$8607$jXZPP (car g$x$8608$jXZPP))
                               (g$f$8607$jXZPP (cdr g$x$8608$jXZPP)))
                             (if (symbol? g$x$8608$jXZPP)
                               (g$scheme-stx$8003$jXZPP g$x$8608$jXZPP)
                               (if (vector? g$x$8608$jXZPP)
                                 (g$vector-map$5355$jXZPP
                                   g$f$8607$jXZPP
                                   g$x$8608$jXZPP)
                                 g$x$8608$jXZPP))))))))
             g$f$8607$jXZPP)
           g$x$8606$jXZPP)
          '()
          '()
          '()))))
   (g$with-syntax-macro$8024$jXZPP
     g$with-syntax-macro$11527$jXZPP
     (case-lambda
       ((g$e$8609$jXZPP)
        ((case-lambda
           ((g$t$8610$jXZPP)
            ((case-lambda
               ((g$ls/false$8611$jXZPP)
                (if g$ls/false$8611$jXZPP
                  (apply
                    (case-lambda
                      ((g$pat*$8612$jXZPP
                         g$expr*$8613$jXZPP
                         g$b$8614$jXZPP
                         g$b*$8615$jXZPP)
                       ((case-lambda
                          ((g$idn*$8616$jXZPP)
                           (begin
                             (g$verify-formals$8080$jXZPP
                               (g$map$5078$jXZPP car g$idn*$8616$jXZPP)
                               g$e$8609$jXZPP)
                             ((case-lambda
                                ((g$t*$8617$jXZPP)
                                 (g$bless$8023$jXZPP
                                   (list
                                     'let
                                     (g$map$5078$jXZPP
                                       list
                                       g$t*$8617$jXZPP
                                       g$expr*$8613$jXZPP)
                                     ((letrec ((g$f$8618$jXZPP
                                                 (case-lambda
                                                   ((g$pat*$8619$jXZPP
                                                      g$t*$8620$jXZPP)
                                                    (if (null?
                                                          g$pat*$8619$jXZPP)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8614$jXZPP
                                                            g$b*$8615$jXZPP)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8620$jXZPP)
                                                        '()
                                                        (list
                                                          (car g$pat*$8619$jXZPP)
                                                          (g$f$8618$jXZPP
                                                            (cdr g$pat*$8619$jXZPP)
                                                            (cdr g$t*$8620$jXZPP)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8619$jXZPP))
                                                            (car g$t*$8620$jXZPP)))))))))
                                        g$f$8618$jXZPP)
                                      g$pat*$8612$jXZPP
                                      g$t*$8617$jXZPP)))))
                              (g$generate-temporaries$8162$jXZPP
                                g$expr*$8613$jXZPP)))))
                        ((letrec ((g$f$8621$jXZPP
                                    (case-lambda
                                      ((g$pat*$8622$jXZPP)
                                       (if (null? g$pat*$8622$jXZPP)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$8059$jXZPP
                                                (car g$pat*$8622$jXZPP)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8625$jXZPP
                                                g$idn*$8626$jXZPP)
                                              ((case-lambda
                                                 ((g$idn*$8627$jXZPP
                                                    g$pat$8628$jXZPP)
                                                  (append
                                                    g$idn*$8627$jXZPP
                                                    (g$f$8621$jXZPP
                                                      (cdr g$pat*$8622$jXZPP)))))
                                               g$idn*$8626$jXZPP
                                               g$pat$8625$jXZPP)))))))))
                           g$f$8621$jXZPP)
                         g$pat*$8612$jXZPP))))
                    g$ls/false$8611$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8610$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8610$jXZPP
               '(_ #(each (any any)) any . each-any)))))
         g$e$8609$jXZPP))))
   (g$invalid-fmls-error$8025$jXZPP
     g$invalid-fmls-error$11528$jXZPP
     (case-lambda
       ((g$stx$8629$jXZPP g$fmls$8630$jXZPP)
        ((case-lambda
           ((g$t$8631$jXZPP)
            ((case-lambda
               ((g$ls/false$8632$jXZPP)
                (if g$ls/false$8632$jXZPP
                  (apply
                    (case-lambda
                      ((g$id*$8633$jXZPP g$last$8634$jXZPP)
                       ((letrec ((g$f$8635$jXZPP
                                   (case-lambda
                                     ((g$id*$8636$jXZPP)
                                      (if (null? g$id*$8636$jXZPP)
                                        (values)
                                        (if (not (g$id?$7782$jXZPP
                                                   (car g$id*$8636$jXZPP)))
                                          (g$syntax-violation$8172$jXZPP
                                            '#f
                                            '"not an identifier"
                                            g$stx$8629$jXZPP
                                            (car g$id*$8636$jXZPP))
                                          (begin
                                            (g$f$8635$jXZPP
                                              (cdr g$id*$8636$jXZPP))
                                            (if (g$bound-id-member?$7789$jXZPP
                                                  (car g$id*$8636$jXZPP)
                                                  (cdr g$id*$8636$jXZPP))
                                              (g$syntax-violation$8172$jXZPP
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8629$jXZPP
                                                (car g$id*$8636$jXZPP))
                                              (void)))))))))
                          g$f$8635$jXZPP)
                        (if (g$id?$7782$jXZPP g$last$8634$jXZPP)
                          (cons g$last$8634$jXZPP g$id*$8633$jXZPP)
                          (if (g$syntax-null?$7777$jXZPP g$last$8634$jXZPP)
                            g$id*$8633$jXZPP
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"not an identifier"
                              g$stx$8629$jXZPP
                              g$last$8634$jXZPP))))))
                    g$ls/false$8632$jXZPP)
                  ((case-lambda
                     ((g$t$8637$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8638$jXZPP)
                          (if g$ls/false$8638$jXZPP
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8172$jXZPP
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8629$jXZPP
                                   g$fmls$8630$jXZPP)))
                              g$ls/false$8638$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$8637$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP g$t$8637$jXZPP '_))))
                   g$t$8631$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8631$jXZPP
               '#(each+ any () any)))))
         g$fmls$8630$jXZPP))))
   (g$let-macro$8026$jXZPP
     g$let-macro$11529$jXZPP
     (case-lambda
       ((g$stx$8639$jXZPP)
        ((case-lambda
           ((g$t$8640$jXZPP)
            ((case-lambda
               ((g$ls/false$8641$jXZPP)
                (if g$ls/false$8641$jXZPP
                  (apply
                    (case-lambda
                      ((g$lhs*$8642$jXZPP
                         g$rhs*$8643$jXZPP
                         g$b$8644$jXZPP
                         g$b*$8645$jXZPP)
                       (if (g$valid-bound-ids?$7787$jXZPP g$lhs*$8642$jXZPP)
                         (g$bless$8023$jXZPP
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8642$jXZPP
                                 (cons g$b$8644$jXZPP g$b*$8645$jXZPP)))
                             g$rhs*$8643$jXZPP))
                         (g$invalid-fmls-error$8025$jXZPP
                           g$stx$8639$jXZPP
                           g$lhs*$8642$jXZPP))))
                    g$ls/false$8641$jXZPP)
                  ((case-lambda
                     ((g$t$8646$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8647$jXZPP)
                          (if (if g$ls/false$8647$jXZPP
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8648$jXZPP
                                         g$lhs*$8649$jXZPP
                                         g$rhs*$8650$jXZPP
                                         g$b$8651$jXZPP
                                         g$b*$8652$jXZPP)
                                       (g$id?$7782$jXZPP g$f$8648$jXZPP)))
                                    g$ls/false$8647$jXZPP))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8653$jXZPP
                                   g$lhs*$8654$jXZPP
                                   g$rhs*$8655$jXZPP
                                   g$b$8656$jXZPP
                                   g$b*$8657$jXZPP)
                                 (if (g$valid-bound-ids?$7787$jXZPP
                                       g$lhs*$8654$jXZPP)
                                   (g$bless$8023$jXZPP
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8653$jXZPP
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8654$jXZPP
                                                 (cons
                                                   g$b$8656$jXZPP
                                                   g$b*$8657$jXZPP)))))
                                         g$f$8653$jXZPP)
                                       g$rhs*$8655$jXZPP))
                                   (g$invalid-fmls-error$8025$jXZPP
                                     g$stx$8639$jXZPP
                                     g$lhs*$8654$jXZPP))))
                              g$ls/false$8647$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$8646$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$8646$jXZPP
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8640$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8640$jXZPP
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8639$jXZPP))))
   (g$let-values-macro$8027$jXZPP
     g$let-values-macro$11530$jXZPP
     (case-lambda
       ((g$stx$8658$jXZPP)
        (letrec* ((g$rename$8659$jXZPP
                    (case-lambda
                      ((g$x$8710$jXZPP g$old*$8711$jXZPP g$new*$8712$jXZPP)
                       (begin
                         (if (not (g$id?$7782$jXZPP g$x$8710$jXZPP))
                           (g$syntax-violation$8172$jXZPP
                             '#f
                             '"not an indentifier"
                             g$stx$8658$jXZPP
                             g$x$8710$jXZPP)
                           (void))
                         (if (g$bound-id-member?$7789$jXZPP
                               g$x$8710$jXZPP
                               g$old*$8711$jXZPP)
                           (g$syntax-violation$8172$jXZPP
                             '#f
                             '"duplicate binding"
                             g$stx$8658$jXZPP
                             g$x$8710$jXZPP)
                           (void))
                         ((case-lambda
                            ((g$y$8713$jXZPP)
                             (values
                               g$y$8713$jXZPP
                               (cons g$x$8710$jXZPP g$old*$8711$jXZPP)
                               (cons g$y$8713$jXZPP g$new*$8712$jXZPP))))
                          (gensym
                            (g$syntax->datum$8175$jXZPP g$x$8710$jXZPP)))))))
                  (g$rename*$8660$jXZPP
                    (case-lambda
                      ((g$x*$8701$jXZPP g$old*$8702$jXZPP g$new*$8703$jXZPP)
                       (if (null? g$x*$8701$jXZPP)
                         (values '() g$old*$8702$jXZPP g$new*$8703$jXZPP)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8659$jXZPP
                                (car g$x*$8701$jXZPP)
                                g$old*$8702$jXZPP
                                g$new*$8703$jXZPP)))
                           (case-lambda
                             ((g$x$8704$jXZPP
                                g$old*$8705$jXZPP
                                g$new*$8706$jXZPP)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8660$jXZPP
                                     (cdr g$x*$8701$jXZPP)
                                     g$old*$8705$jXZPP
                                     g$new*$8706$jXZPP)))
                                (case-lambda
                                  ((g$x*$8707$jXZPP
                                     g$old*$8708$jXZPP
                                     g$new*$8709$jXZPP)
                                   (values
                                     (cons g$x$8704$jXZPP g$x*$8707$jXZPP)
                                     g$old*$8708$jXZPP
                                     g$new*$8709$jXZPP))))))))))))
          ((case-lambda
             ((g$t$8661$jXZPP)
              ((case-lambda
                 ((g$ls/false$8662$jXZPP)
                  (if g$ls/false$8662$jXZPP
                    (apply
                      (case-lambda
                        ((g$b$8663$jXZPP g$b*$8664$jXZPP)
                         (g$cons*$5080$jXZPP
                           (g$bless$8023$jXZPP 'let)
                           '()
                           g$b$8663$jXZPP
                           g$b*$8664$jXZPP)))
                      g$ls/false$8662$jXZPP)
                    ((case-lambda
                       ((g$t$8665$jXZPP)
                        ((case-lambda
                           ((g$ls/false$8666$jXZPP)
                            (if g$ls/false$8666$jXZPP
                              (apply
                                (case-lambda
                                  ((g$lhs*$8667$jXZPP
                                     g$rhs*$8668$jXZPP
                                     g$b$8669$jXZPP
                                     g$b*$8670$jXZPP)
                                   (g$bless$8023$jXZPP
                                     ((letrec ((g$f$8671$jXZPP
                                                 (case-lambda
                                                   ((g$lhs*$8672$jXZPP
                                                      g$rhs*$8673$jXZPP
                                                      g$old*$8674$jXZPP
                                                      g$new*$8675$jXZPP)
                                                    (if (null?
                                                          g$lhs*$8672$jXZPP)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5078$jXZPP
                                                            list
                                                            g$old*$8674$jXZPP
                                                            g$new*$8675$jXZPP)
                                                          (cons
                                                            g$b$8669$jXZPP
                                                            g$b*$8670$jXZPP)))
                                                      ((case-lambda
                                                         ((g$t$8676$jXZPP)
                                                          ((case-lambda
                                                             ((g$ls/false$8677$jXZPP)
                                                              (if g$ls/false$8677$jXZPP
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8678$jXZPP)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8660$jXZPP
                                                                            g$x*$8678$jXZPP
                                                                            g$old*$8674$jXZPP
                                                                            g$new*$8675$jXZPP)))
                                                                       (case-lambda
                                                                         ((g$y*$8682$jXZPP
                                                                            g$old*$8683$jXZPP
                                                                            g$new*$8684$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$new*$8685$jXZPP
                                                                                g$old*$8686$jXZPP
                                                                                g$y*$8687$jXZPP)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8673$jXZPP))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8687$jXZPP
                                                                                  (g$f$8671$jXZPP
                                                                                    (cdr g$lhs*$8672$jXZPP)
                                                                                    (cdr g$rhs*$8673$jXZPP)
                                                                                    g$old*$8686$jXZPP
                                                                                    g$new*$8685$jXZPP)))))
                                                                           g$new*$8684$jXZPP
                                                                           g$old*$8683$jXZPP
                                                                           g$y*$8682$jXZPP))))))
                                                                  g$ls/false$8677$jXZPP)
                                                                ((case-lambda
                                                                   ((g$t$8688$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8689$jXZPP)
                                                                        (if g$ls/false$8689$jXZPP
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8690$jXZPP
                                                                                 g$x$8691$jXZPP)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8659$jXZPP
                                                                                      g$x$8691$jXZPP
                                                                                      g$old*$8674$jXZPP
                                                                                      g$new*$8675$jXZPP)))
                                                                                 (case-lambda
                                                                                   ((g$y$8692$jXZPP
                                                                                      g$old*$8693$jXZPP
                                                                                      g$new*$8694$jXZPP)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8660$jXZPP
                                                                                           g$x*$8690$jXZPP
                                                                                           g$old*$8693$jXZPP
                                                                                           g$new*$8694$jXZPP)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8695$jXZPP
                                                                                           g$old*$8696$jXZPP
                                                                                           g$new*$8697$jXZPP)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8673$jXZPP))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8695$jXZPP
                                                                                               g$y$8692$jXZPP)
                                                                                             (g$f$8671$jXZPP
                                                                                               (cdr g$lhs*$8672$jXZPP)
                                                                                               (cdr g$rhs*$8673$jXZPP)
                                                                                               g$old*$8696$jXZPP
                                                                                               g$new*$8697$jXZPP)))))))))))
                                                                            g$ls/false$8689$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$t$8698$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8699$jXZPP)
                                                                                  (if g$ls/false$8699$jXZPP
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8700$jXZPP)
                                                                                         (g$syntax-violation$8172$jXZPP
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8658$jXZPP
                                                                                           g$others$8700$jXZPP)))
                                                                                      g$ls/false$8699$jXZPP)
                                                                                    (g$syntax-violation$8172$jXZPP
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8698$jXZPP))))
                                                                               (g$syntax-dispatch$8060$jXZPP
                                                                                 g$t$8698$jXZPP
                                                                                 'any))))
                                                                           g$t$8688$jXZPP))))
                                                                     (g$syntax-dispatch$8060$jXZPP
                                                                       g$t$8688$jXZPP
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8676$jXZPP))))
                                                           (g$syntax-dispatch$8060$jXZPP
                                                             g$t$8676$jXZPP
                                                             'each-any))))
                                                       (car g$lhs*$8672$jXZPP)))))))
                                        g$f$8671$jXZPP)
                                      g$lhs*$8667$jXZPP
                                      g$rhs*$8668$jXZPP
                                      '()
                                      '()))))
                                g$ls/false$8666$jXZPP)
                              (g$syntax-violation$8172$jXZPP
                                '#f
                                '"invalid syntax"
                                g$t$8665$jXZPP))))
                         (g$syntax-dispatch$8060$jXZPP
                           g$t$8665$jXZPP
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8661$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP
                 g$t$8661$jXZPP
                 '(_ () any . each-any)))))
           g$stx$8658$jXZPP)))))
   (g$let*-values-macro$8028$jXZPP
     g$let*-values-macro$11531$jXZPP
     (case-lambda
       ((g$stx$8714$jXZPP)
        (letrec* ((g$check$8715$jXZPP
                    (case-lambda
                      ((g$x*$8739$jXZPP)
                       (if (not (null? g$x*$8739$jXZPP))
                         ((case-lambda
                            ((g$x$8740$jXZPP)
                             (begin
                               (if (not (g$id?$7782$jXZPP g$x$8740$jXZPP))
                                 (g$syntax-violation$8172$jXZPP
                                   '#f
                                   '"not an identifier"
                                   g$stx$8714$jXZPP
                                   g$x$8740$jXZPP)
                                 (void))
                               (g$check$8715$jXZPP (cdr g$x*$8739$jXZPP))
                               (if (g$bound-id-member?$7789$jXZPP
                                     g$x$8740$jXZPP
                                     (cdr g$x*$8739$jXZPP))
                                 (g$syntax-violation$8172$jXZPP
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8714$jXZPP
                                   g$x$8740$jXZPP)
                                 (void)))))
                          (car g$x*$8739$jXZPP))
                         (void))))))
          ((case-lambda
             ((g$t$8716$jXZPP)
              ((case-lambda
                 ((g$ls/false$8717$jXZPP)
                  (if g$ls/false$8717$jXZPP
                    (apply
                      (case-lambda
                        ((g$b$8718$jXZPP g$b*$8719$jXZPP)
                         (g$cons*$5080$jXZPP
                           (g$bless$8023$jXZPP 'let)
                           '()
                           g$b$8718$jXZPP
                           g$b*$8719$jXZPP)))
                      g$ls/false$8717$jXZPP)
                    ((case-lambda
                       ((g$t$8720$jXZPP)
                        ((case-lambda
                           ((g$ls/false$8721$jXZPP)
                            (if g$ls/false$8721$jXZPP
                              (apply
                                (case-lambda
                                  ((g$lhs*$8722$jXZPP
                                     g$rhs*$8723$jXZPP
                                     g$b$8724$jXZPP
                                     g$b*$8725$jXZPP)
                                   (g$bless$8023$jXZPP
                                     ((letrec ((g$f$8726$jXZPP
                                                 (case-lambda
                                                   ((g$lhs*$8727$jXZPP
                                                      g$rhs*$8728$jXZPP)
                                                    (if (null?
                                                          g$lhs*$8727$jXZPP)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8724$jXZPP
                                                          g$b*$8725$jXZPP))
                                                      ((case-lambda
                                                         ((g$t$8729$jXZPP)
                                                          ((case-lambda
                                                             ((g$ls/false$8730$jXZPP)
                                                              (if g$ls/false$8730$jXZPP
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8731$jXZPP)
                                                                     (begin
                                                                       (g$check$8715$jXZPP
                                                                         g$x*$8731$jXZPP)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8728$jXZPP))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8731$jXZPP
                                                                           (g$f$8726$jXZPP
                                                                             (cdr g$lhs*$8727$jXZPP)
                                                                             (cdr g$rhs*$8728$jXZPP)))))))
                                                                  g$ls/false$8730$jXZPP)
                                                                ((case-lambda
                                                                   ((g$t$8732$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8733$jXZPP)
                                                                        (if g$ls/false$8733$jXZPP
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8734$jXZPP
                                                                                 g$x$8735$jXZPP)
                                                                               (begin
                                                                                 (g$check$8715$jXZPP
                                                                                   (cons
                                                                                     g$x$8735$jXZPP
                                                                                     g$x*$8734$jXZPP))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8728$jXZPP))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8734$jXZPP
                                                                                       g$x$8735$jXZPP)
                                                                                     (g$f$8726$jXZPP
                                                                                       (cdr g$lhs*$8727$jXZPP)
                                                                                       (cdr g$rhs*$8728$jXZPP)))))))
                                                                            g$ls/false$8733$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$t$8736$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8737$jXZPP)
                                                                                  (if g$ls/false$8737$jXZPP
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8738$jXZPP)
                                                                                         (g$syntax-violation$8172$jXZPP
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8714$jXZPP
                                                                                           g$others$8738$jXZPP)))
                                                                                      g$ls/false$8737$jXZPP)
                                                                                    (g$syntax-violation$8172$jXZPP
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8736$jXZPP))))
                                                                               (g$syntax-dispatch$8060$jXZPP
                                                                                 g$t$8736$jXZPP
                                                                                 'any))))
                                                                           g$t$8732$jXZPP))))
                                                                     (g$syntax-dispatch$8060$jXZPP
                                                                       g$t$8732$jXZPP
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8729$jXZPP))))
                                                           (g$syntax-dispatch$8060$jXZPP
                                                             g$t$8729$jXZPP
                                                             'each-any))))
                                                       (car g$lhs*$8727$jXZPP)))))))
                                        g$f$8726$jXZPP)
                                      g$lhs*$8722$jXZPP
                                      g$rhs*$8723$jXZPP))))
                                g$ls/false$8721$jXZPP)
                              (g$syntax-violation$8172$jXZPP
                                '#f
                                '"invalid syntax"
                                g$t$8720$jXZPP))))
                         (g$syntax-dispatch$8060$jXZPP
                           g$t$8720$jXZPP
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8716$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP
                 g$t$8716$jXZPP
                 '(_ () any . each-any)))))
           g$stx$8714$jXZPP)))))
   (g$trace-lambda-macro$8029$jXZPP
     g$trace-lambda-macro$11532$jXZPP
     (case-lambda
       ((g$stx$8741$jXZPP)
        ((case-lambda
           ((g$t$8742$jXZPP)
            ((case-lambda
               ((g$ls/false$8743$jXZPP)
                (if g$ls/false$8743$jXZPP
                  (apply
                    (case-lambda
                      ((g$who$8744$jXZPP
                         g$fmls$8745$jXZPP
                         g$b$8746$jXZPP
                         g$b*$8747$jXZPP)
                       (if (g$valid-bound-ids?$7787$jXZPP g$fmls$8745$jXZPP)
                         (g$bless$8023$jXZPP
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8744$jXZPP)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8745$jXZPP
                                 (cons g$b$8746$jXZPP g$b*$8747$jXZPP)))))
                         (g$invalid-fmls-error$8025$jXZPP
                           g$stx$8741$jXZPP
                           g$fmls$8745$jXZPP))))
                    g$ls/false$8743$jXZPP)
                  ((case-lambda
                     ((g$t$8748$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8749$jXZPP)
                          (if g$ls/false$8749$jXZPP
                            (apply
                              (case-lambda
                                ((g$who$8750$jXZPP
                                   g$fmls$8751$jXZPP
                                   g$last$8752$jXZPP
                                   g$b$8753$jXZPP
                                   g$b*$8754$jXZPP)
                                 (if (g$valid-bound-ids?$7787$jXZPP
                                       (cons
                                         g$last$8752$jXZPP
                                         g$fmls$8751$jXZPP))
                                   (g$bless$8023$jXZPP
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8750$jXZPP)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8751$jXZPP
                                             g$last$8752$jXZPP)
                                           (cons
                                             g$b$8753$jXZPP
                                             g$b*$8754$jXZPP)))))
                                   (g$invalid-fmls-error$8025$jXZPP
                                     g$stx$8741$jXZPP
                                     (append
                                       g$fmls$8751$jXZPP
                                       g$last$8752$jXZPP)))))
                              g$ls/false$8749$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$8748$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$8748$jXZPP
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8742$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8742$jXZPP
               '(_ any each-any any . each-any)))))
         g$stx$8741$jXZPP))))
   (g$trace-define-macro$8030$jXZPP
     g$trace-define-macro$11533$jXZPP
     (case-lambda
       ((g$stx$8755$jXZPP)
        ((case-lambda
           ((g$t$8756$jXZPP)
            ((case-lambda
               ((g$ls/false$8757$jXZPP)
                (if g$ls/false$8757$jXZPP
                  (apply
                    (case-lambda
                      ((g$who$8758$jXZPP
                         g$fmls$8759$jXZPP
                         g$b$8760$jXZPP
                         g$b*$8761$jXZPP)
                       (if (g$valid-bound-ids?$7787$jXZPP g$fmls$8759$jXZPP)
                         (g$bless$8023$jXZPP
                           (list
                             'define
                             g$who$8758$jXZPP
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8758$jXZPP)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8759$jXZPP
                                   (cons g$b$8760$jXZPP g$b*$8761$jXZPP))))))
                         (g$invalid-fmls-error$8025$jXZPP
                           g$stx$8755$jXZPP
                           g$fmls$8759$jXZPP))))
                    g$ls/false$8757$jXZPP)
                  ((case-lambda
                     ((g$t$8762$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8763$jXZPP)
                          (if g$ls/false$8763$jXZPP
                            (apply
                              (case-lambda
                                ((g$who$8764$jXZPP
                                   g$fmls$8765$jXZPP
                                   g$last$8766$jXZPP
                                   g$b$8767$jXZPP
                                   g$b*$8768$jXZPP)
                                 (if (g$valid-bound-ids?$7787$jXZPP
                                       (cons
                                         g$last$8766$jXZPP
                                         g$fmls$8765$jXZPP))
                                   (g$bless$8023$jXZPP
                                     (list
                                       'define
                                       g$who$8764$jXZPP
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8764$jXZPP)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8765$jXZPP
                                               g$last$8766$jXZPP)
                                             (cons
                                               g$b$8767$jXZPP
                                               g$b*$8768$jXZPP))))))
                                   (g$invalid-fmls-error$8025$jXZPP
                                     g$stx$8755$jXZPP
                                     (append
                                       g$fmls$8765$jXZPP
                                       g$last$8766$jXZPP)))))
                              g$ls/false$8763$jXZPP)
                            ((case-lambda
                               ((g$t$8769$jXZPP)
                                ((case-lambda
                                   ((g$ls/false$8770$jXZPP)
                                    (if g$ls/false$8770$jXZPP
                                      (apply
                                        (case-lambda
                                          ((g$who$8771$jXZPP g$expr$8772$jXZPP)
                                           (if (g$id?$7782$jXZPP
                                                 g$who$8771$jXZPP)
                                             (g$bless$8023$jXZPP
                                               (list
                                                 'define
                                                 g$who$8771$jXZPP
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8772$jXZPP))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8771$jXZPP)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$8172$jXZPP
                                               '#f
                                               '"invalid name"
                                               g$stx$8755$jXZPP))))
                                        g$ls/false$8770$jXZPP)
                                      (g$syntax-violation$8172$jXZPP
                                        '#f
                                        '"invalid syntax"
                                        g$t$8769$jXZPP))))
                                 (g$syntax-dispatch$8060$jXZPP
                                   g$t$8769$jXZPP
                                   '(_ any any)))))
                             g$t$8762$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$8762$jXZPP
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8756$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8756$jXZPP
               '(_ (any . each-any) any . each-any)))))
         g$stx$8755$jXZPP))))
   (g$trace-define-syntax-macro$8031$jXZPP
     g$trace-define-syntax-macro$11534$jXZPP
     (case-lambda
       ((g$stx$8773$jXZPP)
        ((case-lambda
           ((g$t$8774$jXZPP)
            ((case-lambda
               ((g$ls/false$8775$jXZPP)
                (if g$ls/false$8775$jXZPP
                  (apply
                    (case-lambda
                      ((g$who$8776$jXZPP g$expr$8777$jXZPP)
                       (if (g$id?$7782$jXZPP g$who$8776$jXZPP)
                         (g$bless$8023$jXZPP
                           (list
                             'define-syntax
                             g$who$8776$jXZPP
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8776$jXZPP)
                               g$expr$8777$jXZPP)))
                         (g$syntax-violation$8172$jXZPP
                           '#f
                           '"invalid name"
                           g$stx$8773$jXZPP))))
                    g$ls/false$8775$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8774$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8774$jXZPP '(_ any any)))))
         g$stx$8773$jXZPP))))
   (g$trace-let/rec-syntax$8032$jXZPP
     g$trace-let/rec-syntax$11535$jXZPP
     (case-lambda
       ((g$who$8778$jXZPP)
        (case-lambda
          ((g$stx$8779$jXZPP)
           ((case-lambda
              ((g$t$8780$jXZPP)
               ((case-lambda
                  ((g$ls/false$8781$jXZPP)
                   (if g$ls/false$8781$jXZPP
                     (apply
                       (case-lambda
                         ((g$lhs*$8782$jXZPP
                            g$rhs*$8783$jXZPP
                            g$b$8784$jXZPP
                            g$b*$8785$jXZPP)
                          (if (g$valid-bound-ids?$7787$jXZPP g$lhs*$8782$jXZPP)
                            ((case-lambda
                               ((g$rhs*$8786$jXZPP)
                                (g$bless$8023$jXZPP
                                  (cons
                                    g$who$8778$jXZPP
                                    (cons
                                      (g$map$5078$jXZPP
                                        list
                                        g$lhs*$8782$jXZPP
                                        g$rhs*$8786$jXZPP)
                                      (cons g$b$8784$jXZPP g$b*$8785$jXZPP))))))
                             (g$map$5078$jXZPP
                               (case-lambda
                                 ((g$lhs$8787$jXZPP g$rhs$8788$jXZPP)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$8787$jXZPP)
                                    g$rhs$8788$jXZPP)))
                               g$lhs*$8782$jXZPP
                               g$rhs*$8783$jXZPP))
                            (g$invalid-fmls-error$8025$jXZPP
                              g$stx$8779$jXZPP
                              g$lhs*$8782$jXZPP))))
                       g$ls/false$8781$jXZPP)
                     (g$syntax-violation$8172$jXZPP
                       '#f
                       '"invalid syntax"
                       g$t$8780$jXZPP))))
                (g$syntax-dispatch$8060$jXZPP
                  g$t$8780$jXZPP
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8779$jXZPP))))))
   (g$trace-let-syntax-macro$8033$jXZPP
     g$trace-let-syntax-macro$11536$jXZPP
     (g$trace-let/rec-syntax$8032$jXZPP 'let-syntax))
   (g$trace-letrec-syntax-macro$8034$jXZPP
     g$trace-letrec-syntax-macro$11537$jXZPP
     (g$trace-let/rec-syntax$8032$jXZPP 'letrec-syntax))
   (g$guard-macro$8035$jXZPP
     g$guard-macro$11538$jXZPP
     (case-lambda
       ((g$x$8789$jXZPP)
        (letrec* ((g$gen-clauses$8790$jXZPP
                    (case-lambda
                      ((g$con$8802$jXZPP
                         g$outerk$8803$jXZPP
                         g$clause*$8804$jXZPP)
                       (letrec* ((g$f$8805$jXZPP
                                   (case-lambda
                                     ((g$x$8833$jXZPP g$k$8834$jXZPP)
                                      ((case-lambda
                                         ((g$t$8835$jXZPP)
                                          ((case-lambda
                                             ((g$ls/false$8836$jXZPP)
                                              (if g$ls/false$8836$jXZPP
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8837$jXZPP
                                                       g$p$8838$jXZPP)
                                                     ((case-lambda
                                                        ((g$t$8839$jXZPP)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8839$jXZPP
                                                               g$e$8837$jXZPP))
                                                           (list
                                                             'if
                                                             g$t$8839$jXZPP
                                                             (list
                                                               g$p$8838$jXZPP
                                                               g$t$8839$jXZPP)
                                                             g$k$8834$jXZPP))))
                                                      (gensym))))
                                                  g$ls/false$8836$jXZPP)
                                                ((case-lambda
                                                   ((g$t$8840$jXZPP)
                                                    ((case-lambda
                                                       ((g$ls/false$8841$jXZPP)
                                                        (if g$ls/false$8841$jXZPP
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8842$jXZPP)
                                                               ((case-lambda
                                                                  ((g$t$8843$jXZPP)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8843$jXZPP
                                                                         g$e$8842$jXZPP))
                                                                     (list
                                                                       'if
                                                                       g$t$8843$jXZPP
                                                                       g$t$8843$jXZPP
                                                                       g$k$8834$jXZPP))))
                                                                (gensym))))
                                                            g$ls/false$8841$jXZPP)
                                                          ((case-lambda
                                                             ((g$t$8844$jXZPP)
                                                              ((case-lambda
                                                                 ((g$ls/false$8845$jXZPP)
                                                                  (if g$ls/false$8845$jXZPP
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8846$jXZPP
                                                                           g$v$8847$jXZPP
                                                                           g$v*$8848$jXZPP)
                                                                         (list
                                                                           'if
                                                                           g$e$8846$jXZPP
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8847$jXZPP
                                                                               g$v*$8848$jXZPP))
                                                                           g$k$8834$jXZPP)))
                                                                      g$ls/false$8845$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$t$8849$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8850$jXZPP)
                                                                            (if g$ls/false$8850$jXZPP
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$8172$jXZPP
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8833$jXZPP)))
                                                                                g$ls/false$8850$jXZPP)
                                                                              (g$syntax-violation$8172$jXZPP
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8849$jXZPP))))
                                                                         (g$syntax-dispatch$8060$jXZPP
                                                                           g$t$8849$jXZPP
                                                                           '_))))
                                                                     g$t$8844$jXZPP))))
                                                               (g$syntax-dispatch$8060$jXZPP
                                                                 g$t$8844$jXZPP
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8840$jXZPP))))
                                                     (g$syntax-dispatch$8060$jXZPP
                                                       g$t$8840$jXZPP
                                                       '(any)))))
                                                 g$t$8835$jXZPP))))
                                           (g$syntax-dispatch$8060$jXZPP
                                             g$t$8835$jXZPP
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8833$jXZPP))))
                                 (g$f*$8806$jXZPP
                                   (case-lambda
                                     ((g$x*$8813$jXZPP)
                                      ((case-lambda
                                         ((g$t$8814$jXZPP)
                                          ((case-lambda
                                             ((g$ls/false$8815$jXZPP)
                                              (if g$ls/false$8815$jXZPP
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8802$jXZPP)
                                                       '#t)))
                                                  g$ls/false$8815$jXZPP)
                                                ((case-lambda
                                                   ((g$t$8816$jXZPP)
                                                    ((case-lambda
                                                       ((g$ls/false$8817$jXZPP)
                                                        (if g$ls/false$8817$jXZPP
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8818$jXZPP
                                                                 g$e*$8819$jXZPP)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8818$jXZPP
                                                                     g$e*$8819$jXZPP))
                                                                 '#f)))
                                                            g$ls/false$8817$jXZPP)
                                                          ((case-lambda
                                                             ((g$t$8820$jXZPP)
                                                              ((case-lambda
                                                                 ((g$ls/false$8821$jXZPP)
                                                                  (if g$ls/false$8821$jXZPP
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8822$jXZPP
                                                                           g$cls*$8823$jXZPP)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8806$jXZPP
                                                                                g$cls*$8823$jXZPP)))
                                                                           (case-lambda
                                                                             ((g$e$8826$jXZPP
                                                                                g$g$8827$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$g$8828$jXZPP
                                                                                    g$e$8829$jXZPP)
                                                                                  (values
                                                                                    (g$f$8805$jXZPP
                                                                                      g$cls$8822$jXZPP
                                                                                      g$e$8829$jXZPP)
                                                                                    g$g$8828$jXZPP)))
                                                                               g$g$8827$jXZPP
                                                                               g$e$8826$jXZPP))))))
                                                                      g$ls/false$8821$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$t$8830$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8831$jXZPP)
                                                                            (if g$ls/false$8831$jXZPP
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8832$jXZPP)
                                                                                   (g$syntax-violation$8172$jXZPP
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8832$jXZPP)))
                                                                                g$ls/false$8831$jXZPP)
                                                                              (g$syntax-violation$8172$jXZPP
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8830$jXZPP))))
                                                                         (g$syntax-dispatch$8060$jXZPP
                                                                           g$t$8830$jXZPP
                                                                           'any))))
                                                                     g$t$8820$jXZPP))))
                                                               (g$syntax-dispatch$8060$jXZPP
                                                                 g$t$8820$jXZPP
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8816$jXZPP))))
                                                     (g$syntax-dispatch$8060$jXZPP
                                                       g$t$8816$jXZPP
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8814$jXZPP))))
                                           (g$syntax-dispatch$8060$jXZPP
                                             g$t$8814$jXZPP
                                             '()))))
                                       g$x*$8813$jXZPP)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8806$jXZPP g$clause*$8804$jXZPP)))
                           (case-lambda
                             ((g$code$8809$jXZPP g$raisek$8810$jXZPP)
                              ((case-lambda
                                 ((g$raisek$8811$jXZPP g$code$8812$jXZPP)
                                  (if g$raisek$8811$jXZPP
                                    (list g$outerk$8803$jXZPP g$code$8812$jXZPP)
                                    g$code$8812$jXZPP)))
                               g$raisek$8810$jXZPP
                               g$code$8809$jXZPP)))))))))
          ((case-lambda
             ((g$t$8791$jXZPP)
              ((case-lambda
                 ((g$ls/false$8792$jXZPP)
                  (if (if g$ls/false$8792$jXZPP
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8793$jXZPP
                                 g$clause*$8794$jXZPP
                                 g$b$8795$jXZPP
                                 g$b*$8796$jXZPP)
                               (g$id?$7782$jXZPP g$con$8793$jXZPP)))
                            g$ls/false$8792$jXZPP))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8797$jXZPP
                           g$clause*$8798$jXZPP
                           g$b$8799$jXZPP
                           g$b*$8800$jXZPP)
                         ((case-lambda
                            ((g$outerk$8801$jXZPP)
                             (g$bless$8023$jXZPP
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8801$jXZPP)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8797$jXZPP)
                                           (g$gen-clauses$8790$jXZPP
                                             g$con$8797$jXZPP
                                             g$outerk$8801$jXZPP
                                             g$clause*$8798$jXZPP))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8799$jXZPP
                                                 g$b*$8800$jXZPP))))))))))))
                          (gensym))))
                      g$ls/false$8792$jXZPP)
                    (g$syntax-violation$8172$jXZPP
                      '#f
                      '"invalid syntax"
                      g$t$8791$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP
                 g$t$8791$jXZPP
                 '(_ (any . each-any) any . each-any)))))
           g$x$8789$jXZPP)))))
   (g$define-enumeration-macro$8036$jXZPP
     g$define-enumeration-macro$11539$jXZPP
     (case-lambda
       ((g$stx$8851$jXZPP)
        (letrec* ((g$set?$8852$jXZPP
                    (case-lambda
                      ((g$x$8865$jXZPP)
                       ((case-lambda
                          ((g$t$8866$jXZPP)
                           (if g$t$8866$jXZPP
                             g$t$8866$jXZPP
                             (begin
                               '#f
                               (if (not (g$memq$5070$jXZPP
                                          (car g$x$8865$jXZPP)
                                          (cdr g$x$8865$jXZPP)))
                                 (begin
                                   '#f
                                   (g$set?$8852$jXZPP (cdr g$x$8865$jXZPP)))
                                 '#f)))))
                        (null? g$x$8865$jXZPP)))))
                  (g$remove-dups$8853$jXZPP
                    (case-lambda
                      ((g$ls$8864$jXZPP)
                       (if (null? g$ls$8864$jXZPP)
                         '()
                         (cons
                           (car g$ls$8864$jXZPP)
                           (g$remove-dups$8853$jXZPP
                             (g$remq$5085$jXZPP
                               (car g$ls$8864$jXZPP)
                               (cdr g$ls$8864$jXZPP)))))))))
          ((case-lambda
             ((g$t$8854$jXZPP)
              ((case-lambda
                 ((g$ls/false$8855$jXZPP)
                  (if (if g$ls/false$8855$jXZPP
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8856$jXZPP
                                 g$id*$8857$jXZPP
                                 g$maker$8858$jXZPP)
                               (if (g$id?$7782$jXZPP g$name$8856$jXZPP)
                                 (if (g$id?$7782$jXZPP g$maker$8858$jXZPP)
                                   (begin
                                     '#f
                                     (g$for-all$5076$jXZPP
                                       g$id?$7782$jXZPP
                                       g$id*$8857$jXZPP))
                                   '#f)
                                 '#f)))
                            g$ls/false$8855$jXZPP))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8859$jXZPP g$id*$8860$jXZPP g$maker$8861$jXZPP)
                         ((case-lambda
                            ((g$name*$8862$jXZPP g$mk$8863$jXZPP)
                             (g$bless$8023$jXZPP
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8863$jXZPP
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8862$jXZPP))))
                                 (list
                                   'define-syntax
                                   g$name$8859$jXZPP
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8862$jXZPP))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8859$jXZPP)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8861$jXZPP
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8861$jXZPP)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8862$jXZPP))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8861$jXZPP)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8863$jXZPP
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8853$jXZPP
                            (g$syntax->datum$8175$jXZPP g$id*$8860$jXZPP))
                          (gensym))))
                      g$ls/false$8855$jXZPP)
                    (g$syntax-violation$8172$jXZPP
                      '#f
                      '"invalid syntax"
                      g$t$8854$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP
                 g$t$8854$jXZPP
                 '(_ any each-any any)))))
           g$stx$8851$jXZPP)))))
   (g$time-macro$8037$jXZPP
     g$time-macro$11540$jXZPP
     (case-lambda
       ((g$stx$8867$jXZPP)
        ((case-lambda
           ((g$t$8868$jXZPP)
            ((case-lambda
               ((g$ls/false$8869$jXZPP)
                (if g$ls/false$8869$jXZPP
                  (apply
                    (case-lambda
                      ((g$expr$8870$jXZPP)
                       ((case-lambda
                          ((g$str$8871$jXZPP)
                           (g$bless$8023$jXZPP
                             (list
                               'time-it
                               g$str$8871$jXZPP
                               (list 'lambda '() g$expr$8870$jXZPP)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6379$jXZPP)))
                          (case-lambda
                            ((g$p$8874$jXZPP g$e$8875$jXZPP)
                             ((case-lambda
                                ((g$e$8876$jXZPP g$p$8877$jXZPP)
                                 (begin
                                   (write
                                     (g$syntax->datum$8175$jXZPP
                                       g$expr$8870$jXZPP)
                                     g$p$8877$jXZPP)
                                   (g$e$8876$jXZPP))))
                              g$e$8875$jXZPP
                              g$p$8874$jXZPP)))))))
                    g$ls/false$8869$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8868$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8868$jXZPP '(_ any)))))
         g$stx$8867$jXZPP))))
   (g$delay-macro$8038$jXZPP
     g$delay-macro$11541$jXZPP
     (case-lambda
       ((g$stx$8878$jXZPP)
        ((case-lambda
           ((g$t$8879$jXZPP)
            ((case-lambda
               ((g$ls/false$8880$jXZPP)
                (if g$ls/false$8880$jXZPP
                  (apply
                    (case-lambda
                      ((g$expr$8881$jXZPP)
                       (g$bless$8023$jXZPP
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8881$jXZPP)))))
                    g$ls/false$8880$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8879$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8879$jXZPP '(_ any)))))
         g$stx$8878$jXZPP))))
   (g$assert-macro$8039$jXZPP
     g$assert-macro$11542$jXZPP
     (case-lambda
       ((g$stx$8882$jXZPP)
        ((case-lambda
           ((g$t$8883$jXZPP)
            ((case-lambda
               ((g$ls/false$8884$jXZPP)
                (if g$ls/false$8884$jXZPP
                  (apply
                    (case-lambda
                      ((g$expr$8885$jXZPP)
                       ((case-lambda
                          ((g$pos$8886$jXZPP)
                           (g$bless$8023$jXZPP
                             (list
                               'unless
                               g$expr$8885$jXZPP
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8885$jXZPP)
                                 (list 'quote g$pos$8886$jXZPP))))))
                        ((case-lambda
                           ((g$t$8887$jXZPP)
                            (if g$t$8887$jXZPP
                              g$t$8887$jXZPP
                              (begin
                                '#f
                                (g$expression-position$8167$jXZPP
                                  g$expr$8885$jXZPP)))))
                         (g$expression-position$8167$jXZPP g$stx$8882$jXZPP)))))
                    g$ls/false$8884$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8883$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8883$jXZPP '(_ any)))))
         g$stx$8882$jXZPP))))
   (g$endianness-macro$8040$jXZPP
     g$endianness-macro$11543$jXZPP
     (case-lambda
       ((g$stx$8888$jXZPP)
        ((case-lambda
           ((g$t$8889$jXZPP)
            ((case-lambda
               ((g$ls/false$8890$jXZPP)
                (if g$ls/false$8890$jXZPP
                  (apply
                    (case-lambda
                      ((g$e$8891$jXZPP)
                       ((case-lambda
                          ((g$t$8892$jXZPP)
                           (if (g$memv$5071$jXZPP g$t$8892$jXZPP '(little))
                             (g$bless$8023$jXZPP ''little)
                             (if (g$memv$5071$jXZPP g$t$8892$jXZPP '(big))
                               (g$bless$8023$jXZPP ''big)
                               (g$syntax-violation$8172$jXZPP
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8888$jXZPP)))))
                        (g$syntax->datum$8175$jXZPP g$e$8891$jXZPP))))
                    g$ls/false$8890$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8889$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8889$jXZPP '(_ any)))))
         g$stx$8888$jXZPP))))
   (g$identifier-syntax-macro$8041$jXZPP
     g$identifier-syntax-macro$11544$jXZPP
     (case-lambda
       ((g$stx$8893$jXZPP)
        ((case-lambda
           ((g$t$8894$jXZPP)
            ((case-lambda
               ((g$ls/false$8895$jXZPP)
                (if g$ls/false$8895$jXZPP
                  (apply
                    (case-lambda
                      ((g$expr$8896$jXZPP)
                       (g$bless$8023$jXZPP
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8896$jXZPP))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8896$jXZPP)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8895$jXZPP)
                  ((case-lambda
                     ((g$t$8897$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8898$jXZPP)
                          (if (if g$ls/false$8898$jXZPP
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8899$jXZPP
                                         g$expr1$8900$jXZPP
                                         g$id2$8901$jXZPP
                                         g$expr2$8902$jXZPP
                                         g$expr3$8903$jXZPP)
                                       (if (g$id?$7782$jXZPP g$id1$8899$jXZPP)
                                         (if (g$id?$7782$jXZPP g$id2$8901$jXZPP)
                                           (begin
                                             '#f
                                             (g$id?$7782$jXZPP
                                               g$expr2$8902$jXZPP))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8898$jXZPP))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8904$jXZPP
                                   g$expr1$8905$jXZPP
                                   g$id2$8906$jXZPP
                                   g$expr2$8907$jXZPP
                                   g$expr3$8908$jXZPP)
                                 (g$bless$8023$jXZPP
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8905$jXZPP))
                                         (list
                                           (list 'set! 'id g$expr2$8907$jXZPP)
                                           (list 'syntax g$expr3$8908$jXZPP))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8905$jXZPP
                                               '(e* ...))))))))))
                              g$ls/false$8898$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$8897$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$8897$jXZPP
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8894$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8894$jXZPP '(_ any)))))
         g$stx$8893$jXZPP))))
   (g$do-macro$8042$jXZPP
     g$do-macro$11545$jXZPP
     (case-lambda
       ((g$stx$8909$jXZPP)
        (letrec* ((g$bind$8910$jXZPP
                    (case-lambda
                      ((g$x$8922$jXZPP)
                       ((case-lambda
                          ((g$t$8923$jXZPP)
                           ((case-lambda
                              ((g$ls/false$8924$jXZPP)
                               (if g$ls/false$8924$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$x$8925$jXZPP g$init$8926$jXZPP)
                                      (list
                                        g$x$8925$jXZPP
                                        g$init$8926$jXZPP
                                        g$x$8925$jXZPP)))
                                   g$ls/false$8924$jXZPP)
                                 ((case-lambda
                                    ((g$t$8927$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$8928$jXZPP)
                                         (if g$ls/false$8928$jXZPP
                                           (apply
                                             (case-lambda
                                               ((g$x$8929$jXZPP
                                                  g$init$8930$jXZPP
                                                  g$step$8931$jXZPP)
                                                (list
                                                  g$x$8929$jXZPP
                                                  g$init$8930$jXZPP
                                                  g$step$8931$jXZPP)))
                                             g$ls/false$8928$jXZPP)
                                           ((case-lambda
                                              ((g$t$8932$jXZPP)
                                               ((case-lambda
                                                  ((g$ls/false$8933$jXZPP)
                                                   (if g$ls/false$8933$jXZPP
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$8172$jXZPP
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8909$jXZPP)))
                                                       g$ls/false$8933$jXZPP)
                                                     (g$syntax-violation$8172$jXZPP
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8932$jXZPP))))
                                                (g$syntax-dispatch$8060$jXZPP
                                                  g$t$8932$jXZPP
                                                  '_))))
                                            g$t$8927$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$8927$jXZPP
                                        '(any any any)))))
                                  g$t$8923$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$8923$jXZPP
                              '(any any)))))
                        g$x$8922$jXZPP)))))
          ((case-lambda
             ((g$t$8911$jXZPP)
              ((case-lambda
                 ((g$ls/false$8912$jXZPP)
                  (if g$ls/false$8912$jXZPP
                    (apply
                      (case-lambda
                        ((g$binding*$8913$jXZPP
                           g$test$8914$jXZPP
                           g$expr*$8915$jXZPP
                           g$command*$8916$jXZPP)
                         ((case-lambda
                            ((g$t$8917$jXZPP)
                             ((case-lambda
                                ((g$ls/false$8918$jXZPP)
                                 (if g$ls/false$8918$jXZPP
                                   (apply
                                     (case-lambda
                                       ((g$x*$8919$jXZPP
                                          g$init*$8920$jXZPP
                                          g$step*$8921$jXZPP)
                                        (if (g$valid-bound-ids?$7787$jXZPP
                                              g$x*$8919$jXZPP)
                                          (g$bless$8023$jXZPP
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8919$jXZPP
                                                    (list
                                                      'if
                                                      g$test$8914$jXZPP
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8915$jXZPP))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8916$jXZPP
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8921$jXZPP))))))))
                                              (cons 'loop g$init*$8920$jXZPP)))
                                          (g$syntax-violation$8172$jXZPP
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8909$jXZPP))))
                                     g$ls/false$8918$jXZPP)
                                   (g$syntax-violation$8172$jXZPP
                                     '#f
                                     '"invalid syntax"
                                     g$t$8917$jXZPP))))
                              (g$syntax-dispatch$8060$jXZPP
                                g$t$8917$jXZPP
                                '#(each (any any any))))))
                          (g$map$5078$jXZPP
                            g$bind$8910$jXZPP
                            g$binding*$8913$jXZPP))))
                      g$ls/false$8912$jXZPP)
                    (g$syntax-violation$8172$jXZPP
                      '#f
                      '"invalid syntax"
                      g$t$8911$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP
                 g$t$8911$jXZPP
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8909$jXZPP)))))
   (g$let*-macro$8043$jXZPP
     g$let*-macro$11546$jXZPP
     (case-lambda
       ((g$stx$8934$jXZPP)
        ((case-lambda
           ((g$t$8935$jXZPP)
            ((case-lambda
               ((g$ls/false$8936$jXZPP)
                (if (if g$ls/false$8936$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8937$jXZPP
                               g$rhs*$8938$jXZPP
                               g$b$8939$jXZPP
                               g$b*$8940$jXZPP)
                             (g$for-all$5076$jXZPP
                               g$id?$7782$jXZPP
                               g$lhs*$8937$jXZPP)))
                          g$ls/false$8936$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8941$jXZPP
                         g$rhs*$8942$jXZPP
                         g$b$8943$jXZPP
                         g$b*$8944$jXZPP)
                       (g$bless$8023$jXZPP
                         ((letrec ((g$f$8945$jXZPP
                                     (case-lambda
                                       ((g$x*$8946$jXZPP)
                                        (if (null? g$x*$8946$jXZPP)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8943$jXZPP
                                                g$b*$8944$jXZPP)))
                                          (if (null? (cdr g$x*$8946$jXZPP))
                                            (cons
                                              'let
                                              (cons
                                                (list (car g$x*$8946$jXZPP))
                                                (cons
                                                  g$b$8943$jXZPP
                                                  g$b*$8944$jXZPP)))
                                            (list
                                              'let
                                              (list (car g$x*$8946$jXZPP))
                                              (g$f$8945$jXZPP
                                                (cdr g$x*$8946$jXZPP)))))))))
                            g$f$8945$jXZPP)
                          (g$map$5078$jXZPP
                            list
                            g$lhs*$8941$jXZPP
                            g$rhs*$8942$jXZPP)))))
                    g$ls/false$8936$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8935$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8935$jXZPP
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8934$jXZPP))))
   (g$or-macro$8044$jXZPP
     g$or-macro$11547$jXZPP
     (case-lambda
       ((g$stx$8947$jXZPP)
        ((case-lambda
           ((g$t$8948$jXZPP)
            ((case-lambda
               ((g$ls/false$8949$jXZPP)
                (if g$ls/false$8949$jXZPP
                  (apply (case-lambda (() '#f)) g$ls/false$8949$jXZPP)
                  ((case-lambda
                     ((g$t$8950$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8951$jXZPP)
                          (if g$ls/false$8951$jXZPP
                            (apply
                              (case-lambda
                                ((g$e$8952$jXZPP g$e*$8953$jXZPP)
                                 (g$bless$8023$jXZPP
                                   ((letrec ((g$f$8954$jXZPP
                                               (case-lambda
                                                 ((g$e$8955$jXZPP
                                                    g$e*$8956$jXZPP)
                                                  (if (null? g$e*$8956$jXZPP)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8955$jXZPP)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8955$jXZPP))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8954$jXZPP
                                                          (car g$e*$8956$jXZPP)
                                                          (cdr g$e*$8956$jXZPP)))))))))
                                      g$f$8954$jXZPP)
                                    g$e$8952$jXZPP
                                    g$e*$8953$jXZPP))))
                              g$ls/false$8951$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$8950$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$8950$jXZPP
                         '(_ any . each-any)))))
                   g$t$8948$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8948$jXZPP '(_)))))
         g$stx$8947$jXZPP))))
   (g$and-macro$8045$jXZPP
     g$and-macro$11548$jXZPP
     (case-lambda
       ((g$stx$8957$jXZPP)
        ((case-lambda
           ((g$t$8958$jXZPP)
            ((case-lambda
               ((g$ls/false$8959$jXZPP)
                (if g$ls/false$8959$jXZPP
                  (apply (case-lambda (() '#t)) g$ls/false$8959$jXZPP)
                  ((case-lambda
                     ((g$t$8960$jXZPP)
                      ((case-lambda
                         ((g$ls/false$8961$jXZPP)
                          (if g$ls/false$8961$jXZPP
                            (apply
                              (case-lambda
                                ((g$e$8962$jXZPP g$e*$8963$jXZPP)
                                 (g$bless$8023$jXZPP
                                   ((letrec ((g$f$8964$jXZPP
                                               (case-lambda
                                                 ((g$e$8965$jXZPP
                                                    g$e*$8966$jXZPP)
                                                  (if (null? g$e*$8966$jXZPP)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8965$jXZPP)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8965$jXZPP
                                                        (cons
                                                          (g$f$8964$jXZPP
                                                            (car g$e*$8966$jXZPP)
                                                            (cdr g$e*$8966$jXZPP))
                                                          '(#f)))))))))
                                      g$f$8964$jXZPP)
                                    g$e$8962$jXZPP
                                    g$e*$8963$jXZPP))))
                              g$ls/false$8961$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$8960$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$8960$jXZPP
                         '(_ any . each-any)))))
                   g$t$8958$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$8958$jXZPP '(_)))))
         g$stx$8957$jXZPP))))
   (g$cond-macro$8046$jXZPP
     g$cond-macro$11549$jXZPP
     (case-lambda
       ((g$stx$8967$jXZPP)
        ((case-lambda
           ((g$t$8968$jXZPP)
            ((case-lambda
               ((g$ls/false$8969$jXZPP)
                (if g$ls/false$8969$jXZPP
                  (apply
                    (case-lambda
                      ((g$cls$8970$jXZPP g$cls*$8971$jXZPP)
                       (g$bless$8023$jXZPP
                         ((letrec ((g$f$8972$jXZPP
                                     (case-lambda
                                       ((g$cls$8973$jXZPP g$cls*$8974$jXZPP)
                                        (if (null? g$cls*$8974$jXZPP)
                                          ((case-lambda
                                             ((g$t$8975$jXZPP)
                                              ((case-lambda
                                                 ((g$ls/false$8976$jXZPP)
                                                  (if g$ls/false$8976$jXZPP
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8977$jXZPP
                                                           g$e*$8978$jXZPP)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8977$jXZPP
                                                             g$e*$8978$jXZPP))))
                                                      g$ls/false$8976$jXZPP)
                                                    ((case-lambda
                                                       ((g$t$8979$jXZPP)
                                                        ((case-lambda
                                                           ((g$ls/false$8980$jXZPP)
                                                            (if g$ls/false$8980$jXZPP
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8981$jXZPP
                                                                     g$p$8982$jXZPP)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8981$jXZPP))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8982$jXZPP
                                                                         '(t))))))
                                                                g$ls/false$8980$jXZPP)
                                                              ((case-lambda
                                                                 ((g$t$8983$jXZPP)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8984$jXZPP)
                                                                      (if g$ls/false$8984$jXZPP
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8985$jXZPP)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8985$jXZPP
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8984$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$t$8986$jXZPP)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8987$jXZPP)
                                                                                (if g$ls/false$8987$jXZPP
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8988$jXZPP
                                                                                         g$e*$8989$jXZPP)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8988$jXZPP
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8989$jXZPP))))
                                                                                    g$ls/false$8987$jXZPP)
                                                                                  ((case-lambda
                                                                                     ((g$t$8990$jXZPP)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8991$jXZPP)
                                                                                          (if g$ls/false$8991$jXZPP
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8172$jXZPP
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8967$jXZPP)))
                                                                                              g$ls/false$8991$jXZPP)
                                                                                            (g$syntax-violation$8172$jXZPP
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8990$jXZPP))))
                                                                                       (g$syntax-dispatch$8060$jXZPP
                                                                                         g$t$8990$jXZPP
                                                                                         '_))))
                                                                                   g$t$8986$jXZPP))))
                                                                             (g$syntax-dispatch$8060$jXZPP
                                                                               g$t$8986$jXZPP
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8983$jXZPP))))
                                                                   (g$syntax-dispatch$8060$jXZPP
                                                                     g$t$8983$jXZPP
                                                                     '(any)))))
                                                               g$t$8979$jXZPP))))
                                                         (g$syntax-dispatch$8060$jXZPP
                                                           g$t$8979$jXZPP
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8975$jXZPP))))
                                               (g$syntax-dispatch$8060$jXZPP
                                                 g$t$8975$jXZPP
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8973$jXZPP)
                                          ((case-lambda
                                             ((g$t$8992$jXZPP)
                                              ((case-lambda
                                                 ((g$ls/false$8993$jXZPP)
                                                  (if g$ls/false$8993$jXZPP
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8994$jXZPP
                                                           g$e*$8995$jXZPP)
                                                         (g$syntax-violation$8172$jXZPP
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8967$jXZPP)))
                                                      g$ls/false$8993$jXZPP)
                                                    ((case-lambda
                                                       ((g$t$8996$jXZPP)
                                                        ((case-lambda
                                                           ((g$ls/false$8997$jXZPP)
                                                            (if g$ls/false$8997$jXZPP
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8998$jXZPP
                                                                     g$p$8999$jXZPP)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8998$jXZPP))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8999$jXZPP
                                                                         '(t))
                                                                       (g$f$8972$jXZPP
                                                                         (car g$cls*$8974$jXZPP)
                                                                         (cdr g$cls*$8974$jXZPP))))))
                                                                g$ls/false$8997$jXZPP)
                                                              ((case-lambda
                                                                 ((g$t$9000$jXZPP)
                                                                  ((case-lambda
                                                                     ((g$ls/false$9001$jXZPP)
                                                                      (if g$ls/false$9001$jXZPP
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$9002$jXZPP)
                                                                             (list
                                                                               'or
                                                                               g$e$9002$jXZPP
                                                                               (g$f$8972$jXZPP
                                                                                 (car g$cls*$8974$jXZPP)
                                                                                 (cdr g$cls*$8974$jXZPP)))))
                                                                          g$ls/false$9001$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$t$9003$jXZPP)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9004$jXZPP)
                                                                                (if g$ls/false$9004$jXZPP
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$9005$jXZPP
                                                                                         g$e*$9006$jXZPP)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$9005$jXZPP
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$9006$jXZPP)
                                                                                         (g$f$8972$jXZPP
                                                                                           (car g$cls*$8974$jXZPP)
                                                                                           (cdr g$cls*$8974$jXZPP)))))
                                                                                    g$ls/false$9004$jXZPP)
                                                                                  ((case-lambda
                                                                                     ((g$t$9007$jXZPP)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9008$jXZPP)
                                                                                          (if g$ls/false$9008$jXZPP
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8172$jXZPP
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8967$jXZPP)))
                                                                                              g$ls/false$9008$jXZPP)
                                                                                            (g$syntax-violation$8172$jXZPP
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9007$jXZPP))))
                                                                                       (g$syntax-dispatch$8060$jXZPP
                                                                                         g$t$9007$jXZPP
                                                                                         '_))))
                                                                                   g$t$9003$jXZPP))))
                                                                             (g$syntax-dispatch$8060$jXZPP
                                                                               g$t$9003$jXZPP
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$9000$jXZPP))))
                                                                   (g$syntax-dispatch$8060$jXZPP
                                                                     g$t$9000$jXZPP
                                                                     '(any)))))
                                                               g$t$8996$jXZPP))))
                                                         (g$syntax-dispatch$8060$jXZPP
                                                           g$t$8996$jXZPP
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8992$jXZPP))))
                                               (g$syntax-dispatch$8060$jXZPP
                                                 g$t$8992$jXZPP
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8973$jXZPP))))))
                            g$f$8972$jXZPP)
                          g$cls$8970$jXZPP
                          g$cls*$8971$jXZPP))))
                    g$ls/false$8969$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$8968$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$8968$jXZPP
               '(_ any . each-any)))))
         g$stx$8967$jXZPP))))
   (g$do-include$8047$jXZPP
     g$do-include$11550$jXZPP
     (case-lambda
       ((g$stx$9009$jXZPP g$id$9010$jXZPP g$filename$9011$jXZPP)
        ((case-lambda
           ((g$filename$9012$jXZPP)
            (begin
              (if (not (if (string? g$filename$9012$jXZPP)
                         (begin '#f (g$id?$7782$jXZPP g$id$9010$jXZPP))
                         '#f))
                (g$syntax-violation$8172$jXZPP
                  '#f
                  '"invalid syntax"
                  g$stx$9009$jXZPP)
                (void))
              (cons
                (g$bless$8023$jXZPP 'begin)
                (g$with-input-from-file$6428$jXZPP
                  g$filename$9012$jXZPP
                  (case-lambda
                    (()
                     ((letrec ((g$f$9013$jXZPP
                                 (case-lambda
                                   ((g$ls$9014$jXZPP)
                                    ((case-lambda
                                       ((g$x$9015$jXZPP)
                                        (if (eof-object? g$x$9015$jXZPP)
                                          (reverse g$ls$9014$jXZPP)
                                          (g$f$9013$jXZPP
                                            (cons
                                              (g$datum->stx$7765$jXZPP
                                                g$id$9010$jXZPP
                                                g$x$9015$jXZPP)
                                              g$ls$9014$jXZPP)))))
                                     (read-annotated))))))
                        g$f$9013$jXZPP)
                      '()))))))))
         (g$stx->datum$7793$jXZPP g$filename$9011$jXZPP)))))
   (g$include-macro$8048$jXZPP
     g$include-macro$11551$jXZPP
     (case-lambda
       ((g$e$9016$jXZPP)
        ((case-lambda
           ((g$t$9017$jXZPP)
            ((case-lambda
               ((g$ls/false$9018$jXZPP)
                (if g$ls/false$9018$jXZPP
                  (apply
                    (case-lambda
                      ((g$id$9019$jXZPP g$filename$9020$jXZPP)
                       (g$do-include$8047$jXZPP
                         g$e$9016$jXZPP
                         g$id$9019$jXZPP
                         g$filename$9020$jXZPP)))
                    g$ls/false$9018$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$9017$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$9017$jXZPP '(any any)))))
         g$e$9016$jXZPP))))
   (g$include-into-macro$8049$jXZPP
     g$include-into-macro$11552$jXZPP
     (case-lambda
       ((g$e$9021$jXZPP)
        ((case-lambda
           ((g$t$9022$jXZPP)
            ((case-lambda
               ((g$ls/false$9023$jXZPP)
                (if g$ls/false$9023$jXZPP
                  (apply
                    (case-lambda
                      ((g$id$9024$jXZPP g$filename$9025$jXZPP)
                       (g$do-include$8047$jXZPP
                         g$e$9021$jXZPP
                         g$id$9024$jXZPP
                         g$filename$9025$jXZPP)))
                    g$ls/false$9023$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$9022$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$9022$jXZPP '(_ any any)))))
         g$e$9021$jXZPP))))
   (g$syntax-rules-macro$8050$jXZPP
     g$syntax-rules-macro$11553$jXZPP
     (case-lambda
       ((g$e$9026$jXZPP)
        ((case-lambda
           ((g$t$9027$jXZPP)
            ((case-lambda
               ((g$ls/false$9028$jXZPP)
                (if g$ls/false$9028$jXZPP
                  (apply
                    (case-lambda
                      ((g$lits$9029$jXZPP g$pat*$9030$jXZPP g$tmp*$9031$jXZPP)
                       (begin
                         (g$verify-literals$8063$jXZPP
                           g$lits$9029$jXZPP
                           g$e$9026$jXZPP)
                         (g$bless$8023$jXZPP
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$9029$jXZPP
                                   (g$map$5078$jXZPP
                                     (case-lambda
                                       ((g$pat$9032$jXZPP g$tmp$9033$jXZPP)
                                        ((case-lambda
                                           ((g$t$9034$jXZPP)
                                            ((case-lambda
                                               ((g$ls/false$9035$jXZPP)
                                                (if g$ls/false$9035$jXZPP
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$9036$jXZPP)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$9036$jXZPP)
                                                         (list
                                                           'syntax
                                                           g$tmp$9033$jXZPP))))
                                                    g$ls/false$9035$jXZPP)
                                                  ((case-lambda
                                                     ((g$t$9037$jXZPP)
                                                      ((case-lambda
                                                         ((g$ls/false$9038$jXZPP)
                                                          (if g$ls/false$9038$jXZPP
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$8172$jXZPP
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$9026$jXZPP
                                                                   g$pat$9032$jXZPP)))
                                                              g$ls/false$9038$jXZPP)
                                                            (g$syntax-violation$8172$jXZPP
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$9037$jXZPP))))
                                                       (g$syntax-dispatch$8060$jXZPP
                                                         g$t$9037$jXZPP
                                                         '_))))
                                                   g$t$9034$jXZPP))))
                                             (g$syntax-dispatch$8060$jXZPP
                                               g$t$9034$jXZPP
                                               '(_ . any)))))
                                         g$pat$9032$jXZPP)))
                                     g$pat*$9030$jXZPP
                                     g$tmp*$9031$jXZPP)))))))))
                    g$ls/false$9028$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$9027$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$9027$jXZPP
               '(_ each-any . #(each (any any)))))))
         g$e$9026$jXZPP))))
   (g$quasiquote-macro$8051$jXZPP
     g$quasiquote-macro$11554$jXZPP
     ((case-lambda
        (()
         (letrec* ((g$datum$9039$jXZPP
                     (case-lambda
                       ((g$x$9170$jXZPP)
                        (list
                          (g$scheme-stx$8003$jXZPP 'quote)
                          (g$mkstx$7770$jXZPP g$x$9170$jXZPP '() '() '())))))
                   (g$quasicons*$9055$jXZPP
                     (case-lambda
                       ((g$x$9166$jXZPP g$y$9167$jXZPP)
                        ((letrec ((g$f$9168$jXZPP
                                    (case-lambda
                                      ((g$x$9169$jXZPP)
                                       (if (null? g$x$9169$jXZPP)
                                         g$y$9167$jXZPP
                                         (g$quasicons$9056$jXZPP
                                           (car g$x$9169$jXZPP)
                                           (g$f$9168$jXZPP
                                             (cdr g$x$9169$jXZPP))))))))
                           g$f$9168$jXZPP)
                         g$x$9166$jXZPP))))
                   (g$quasicons$9056$jXZPP
                     (case-lambda
                       ((g$x$9147$jXZPP g$y$9148$jXZPP)
                        ((case-lambda
                           ((g$t$9149$jXZPP)
                            ((case-lambda
                               ((g$ls/false$9150$jXZPP)
                                (if g$ls/false$9150$jXZPP
                                  (apply
                                    (case-lambda
                                      ((g$dy$9151$jXZPP)
                                       ((case-lambda
                                          ((g$t$9152$jXZPP)
                                           ((case-lambda
                                              ((g$ls/false$9153$jXZPP)
                                               (if g$ls/false$9153$jXZPP
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$9154$jXZPP)
                                                      (list
                                                        (g$scheme-stx$8003$jXZPP
                                                          'quote)
                                                        (cons
                                                          g$dx$9154$jXZPP
                                                          g$dy$9151$jXZPP))))
                                                   g$ls/false$9153$jXZPP)
                                                 ((case-lambda
                                                    ((g$t$9155$jXZPP)
                                                     ((case-lambda
                                                        ((g$ls/false$9156$jXZPP)
                                                         (if g$ls/false$9156$jXZPP
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$9157$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9158$jXZPP)
                                                                        (if g$ls/false$9158$jXZPP
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$8003$jXZPP
                                                                                   'list)
                                                                                 g$x$9147$jXZPP)))
                                                                            g$ls/false$9158$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$t$9159$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9160$jXZPP)
                                                                                  (if g$ls/false$9160$jXZPP
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$8003$jXZPP
                                                                                             'cons)
                                                                                           g$x$9147$jXZPP
                                                                                           g$y$9148$jXZPP)))
                                                                                      g$ls/false$9160$jXZPP)
                                                                                    (g$syntax-violation$8172$jXZPP
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9159$jXZPP))))
                                                                               (g$syntax-dispatch$8060$jXZPP
                                                                                 g$t$9159$jXZPP
                                                                                 '_))))
                                                                           g$t$9157$jXZPP))))
                                                                     (g$syntax-dispatch$8060$jXZPP
                                                                       g$t$9157$jXZPP
                                                                       '()))))
                                                                 g$dy$9151$jXZPP)))
                                                             g$ls/false$9156$jXZPP)
                                                           (g$syntax-violation$8172$jXZPP
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$9155$jXZPP))))
                                                      (g$syntax-dispatch$8060$jXZPP
                                                        g$t$9155$jXZPP
                                                        '_))))
                                                  g$t$9152$jXZPP))))
                                            (g$syntax-dispatch$8060$jXZPP
                                              g$t$9152$jXZPP
                                              '(#(scheme-id quote) any)))))
                                        g$x$9147$jXZPP)))
                                    g$ls/false$9150$jXZPP)
                                  ((case-lambda
                                     ((g$t$9161$jXZPP)
                                      ((case-lambda
                                         ((g$ls/false$9162$jXZPP)
                                          (if g$ls/false$9162$jXZPP
                                            (apply
                                              (case-lambda
                                                ((g$stuff$9163$jXZPP)
                                                 (g$cons*$5080$jXZPP
                                                   (g$scheme-stx$8003$jXZPP
                                                     'list)
                                                   g$x$9147$jXZPP
                                                   g$stuff$9163$jXZPP)))
                                              g$ls/false$9162$jXZPP)
                                            ((case-lambda
                                               ((g$t$9164$jXZPP)
                                                ((case-lambda
                                                   ((g$ls/false$9165$jXZPP)
                                                    (if g$ls/false$9165$jXZPP
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$8003$jXZPP
                                                               'cons)
                                                             g$x$9147$jXZPP
                                                             g$y$9148$jXZPP)))
                                                        g$ls/false$9165$jXZPP)
                                                      (g$syntax-violation$8172$jXZPP
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$9164$jXZPP))))
                                                 (g$syntax-dispatch$8060$jXZPP
                                                   g$t$9164$jXZPP
                                                   '_))))
                                             g$t$9161$jXZPP))))
                                       (g$syntax-dispatch$8060$jXZPP
                                         g$t$9161$jXZPP
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$9149$jXZPP))))
                             (g$syntax-dispatch$8060$jXZPP
                               g$t$9149$jXZPP
                               '(#(scheme-id quote) any)))))
                         g$y$9148$jXZPP))))
                   (g$quasiappend$9057$jXZPP
                     (case-lambda
                       ((g$x$9134$jXZPP g$y$9135$jXZPP)
                        ((case-lambda
                           ((g$ls$9136$jXZPP)
                            (if (null? g$ls$9136$jXZPP)
                              (list (g$scheme-stx$8003$jXZPP 'quote) '())
                              (if (null? (cdr g$ls$9136$jXZPP))
                                (car g$ls$9136$jXZPP)
                                (g$cons*$5080$jXZPP
                                  (g$scheme-stx$8003$jXZPP 'append)
                                  g$ls$9136$jXZPP)))))
                         ((letrec ((g$f$9137$jXZPP
                                     (case-lambda
                                       ((g$x$9138$jXZPP)
                                        (if (null? g$x$9138$jXZPP)
                                          ((case-lambda
                                             ((g$t$9139$jXZPP)
                                              ((case-lambda
                                                 ((g$ls/false$9140$jXZPP)
                                                  (if g$ls/false$9140$jXZPP
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$9140$jXZPP)
                                                    ((case-lambda
                                                       ((g$t$9141$jXZPP)
                                                        ((case-lambda
                                                           ((g$ls/false$9142$jXZPP)
                                                            (if g$ls/false$9142$jXZPP
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$9135$jXZPP)))
                                                                g$ls/false$9142$jXZPP)
                                                              (g$syntax-violation$8172$jXZPP
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9141$jXZPP))))
                                                         (g$syntax-dispatch$8060$jXZPP
                                                           g$t$9141$jXZPP
                                                           '_))))
                                                     g$t$9139$jXZPP))))
                                               (g$syntax-dispatch$8060$jXZPP
                                                 g$t$9139$jXZPP
                                                 '(#(scheme-id quote) ())))))
                                           g$y$9135$jXZPP)
                                          ((case-lambda
                                             ((g$t$9143$jXZPP)
                                              ((case-lambda
                                                 ((g$ls/false$9144$jXZPP)
                                                  (if g$ls/false$9144$jXZPP
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$9137$jXZPP
                                                           (cdr g$x$9138$jXZPP))))
                                                      g$ls/false$9144$jXZPP)
                                                    ((case-lambda
                                                       ((g$t$9145$jXZPP)
                                                        ((case-lambda
                                                           ((g$ls/false$9146$jXZPP)
                                                            (if g$ls/false$9146$jXZPP
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$9138$jXZPP)
                                                                     (g$f$9137$jXZPP
                                                                       (cdr g$x$9138$jXZPP)))))
                                                                g$ls/false$9146$jXZPP)
                                                              (g$syntax-violation$8172$jXZPP
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9145$jXZPP))))
                                                         (g$syntax-dispatch$8060$jXZPP
                                                           g$t$9145$jXZPP
                                                           '_))))
                                                     g$t$9143$jXZPP))))
                                               (g$syntax-dispatch$8060$jXZPP
                                                 g$t$9143$jXZPP
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$9138$jXZPP)))))))
                            g$f$9137$jXZPP)
                          g$x$9134$jXZPP)))))
                   (g$quasivector$9058$jXZPP
                     (case-lambda
                       ((g$x$9109$jXZPP)
                        ((case-lambda
                           ((g$pat-x$9110$jXZPP)
                            ((case-lambda
                               ((g$t$9111$jXZPP)
                                ((case-lambda
                                   ((g$ls/false$9112$jXZPP)
                                    (if g$ls/false$9112$jXZPP
                                      (apply
                                        (case-lambda
                                          ((g$x*$9113$jXZPP)
                                           (list
                                             (g$scheme-stx$8003$jXZPP 'quote)
                                             (list->vector g$x*$9113$jXZPP))))
                                        g$ls/false$9112$jXZPP)
                                      ((case-lambda
                                         ((g$t$9114$jXZPP)
                                          ((case-lambda
                                             ((g$ls/false$9115$jXZPP)
                                              (if g$ls/false$9115$jXZPP
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$9116$jXZPP
                                                                 (case-lambda
                                                                   ((g$x$9117$jXZPP
                                                                      g$k$9118$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$t$9119$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9120$jXZPP)
                                                                            (if g$ls/false$9120$jXZPP
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$9121$jXZPP)
                                                                                   (g$k$9118$jXZPP
                                                                                     (g$map$5078$jXZPP
                                                                                       (case-lambda
                                                                                         ((g$x$9122$jXZPP)
                                                                                          (list
                                                                                            (g$scheme-stx$8003$jXZPP
                                                                                              'quote)
                                                                                            g$x$9122$jXZPP)))
                                                                                       g$x*$9121$jXZPP))))
                                                                                g$ls/false$9120$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$t$9123$jXZPP)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9124$jXZPP)
                                                                                      (if g$ls/false$9124$jXZPP
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$9125$jXZPP)
                                                                                             (g$k$9118$jXZPP
                                                                                               g$x*$9125$jXZPP)))
                                                                                          g$ls/false$9124$jXZPP)
                                                                                        ((case-lambda
                                                                                           ((g$t$9126$jXZPP)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9127$jXZPP)
                                                                                                (if g$ls/false$9127$jXZPP
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$9128$jXZPP
                                                                                                         g$y$9129$jXZPP)
                                                                                                       (g$f$9116$jXZPP
                                                                                                         g$y$9129$jXZPP
                                                                                                         (case-lambda
                                                                                                           ((g$ls$9130$jXZPP)
                                                                                                            (g$k$9118$jXZPP
                                                                                                              (cons
                                                                                                                g$x$9128$jXZPP
                                                                                                                g$ls$9130$jXZPP)))))))
                                                                                                    g$ls/false$9127$jXZPP)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$9131$jXZPP)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$9132$jXZPP)
                                                                                                          (if g$ls/false$9132$jXZPP
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$8003$jXZPP
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$9110$jXZPP)))
                                                                                                              g$ls/false$9132$jXZPP)
                                                                                                            (g$syntax-violation$8172$jXZPP
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$9131$jXZPP))))
                                                                                                       (g$syntax-dispatch$8060$jXZPP
                                                                                                         g$t$9131$jXZPP
                                                                                                         '_))))
                                                                                                   g$t$9126$jXZPP))))
                                                                                             (g$syntax-dispatch$8060$jXZPP
                                                                                               g$t$9126$jXZPP
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$9123$jXZPP))))
                                                                                   (g$syntax-dispatch$8060$jXZPP
                                                                                     g$t$9123$jXZPP
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$9119$jXZPP))))
                                                                         (g$syntax-dispatch$8060$jXZPP
                                                                           g$t$9119$jXZPP
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$9117$jXZPP)))))
                                                        g$f$9116$jXZPP)
                                                      g$x$9109$jXZPP
                                                      (case-lambda
                                                        ((g$ls$9133$jXZPP)
                                                         (g$cons*$5080$jXZPP
                                                           (g$scheme-stx$8003$jXZPP
                                                             'vector)
                                                           g$ls$9133$jXZPP))))))
                                                  g$ls/false$9115$jXZPP)
                                                (g$syntax-violation$8172$jXZPP
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$9114$jXZPP))))
                                           (g$syntax-dispatch$8060$jXZPP
                                             g$t$9114$jXZPP
                                             '_))))
                                       g$t$9111$jXZPP))))
                                 (g$syntax-dispatch$8060$jXZPP
                                   g$t$9111$jXZPP
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$9110$jXZPP)))
                         g$x$9109$jXZPP))))
                   (g$vquasi$9059$jXZPP
                     (case-lambda
                       ((g$p$9092$jXZPP g$lev$9093$jXZPP)
                        ((case-lambda
                           ((g$t$9094$jXZPP)
                            ((case-lambda
                               ((g$ls/false$9095$jXZPP)
                                (if g$ls/false$9095$jXZPP
                                  (apply
                                    (case-lambda
                                      ((g$p$9096$jXZPP g$q$9097$jXZPP)
                                       ((case-lambda
                                          ((g$t$9098$jXZPP)
                                           ((case-lambda
                                              ((g$ls/false$9099$jXZPP)
                                               (if g$ls/false$9099$jXZPP
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9100$jXZPP)
                                                      (if (= g$lev$9093$jXZPP
                                                             '0)
                                                        (g$quasicons*$9055$jXZPP
                                                          g$p$9100$jXZPP
                                                          (g$vquasi$9059$jXZPP
                                                            g$q$9097$jXZPP
                                                            g$lev$9093$jXZPP))
                                                        (g$quasicons$9056$jXZPP
                                                          (g$quasicons$9056$jXZPP
                                                            (g$datum$9039$jXZPP
                                                              'unquote)
                                                            (g$quasi$9060$jXZPP
                                                              g$p$9100$jXZPP
                                                              (- g$lev$9093$jXZPP
                                                                 '1)))
                                                          (g$vquasi$9059$jXZPP
                                                            g$q$9097$jXZPP
                                                            g$lev$9093$jXZPP)))))
                                                   g$ls/false$9099$jXZPP)
                                                 ((case-lambda
                                                    ((g$t$9101$jXZPP)
                                                     ((case-lambda
                                                        ((g$ls/false$9102$jXZPP)
                                                         (if g$ls/false$9102$jXZPP
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$9103$jXZPP)
                                                                (if (= g$lev$9093$jXZPP
                                                                       '0)
                                                                  (g$quasiappend$9057$jXZPP
                                                                    g$p$9103$jXZPP
                                                                    (g$vquasi$9059$jXZPP
                                                                      g$q$9097$jXZPP
                                                                      g$lev$9093$jXZPP))
                                                                  (g$quasicons$9056$jXZPP
                                                                    (g$quasicons$9056$jXZPP
                                                                      (g$datum$9039$jXZPP
                                                                        'unquote-splicing)
                                                                      (g$quasi$9060$jXZPP
                                                                        g$p$9103$jXZPP
                                                                        (- g$lev$9093$jXZPP
                                                                           '1)))
                                                                    (g$vquasi$9059$jXZPP
                                                                      g$q$9097$jXZPP
                                                                      g$lev$9093$jXZPP)))))
                                                             g$ls/false$9102$jXZPP)
                                                           ((case-lambda
                                                              ((g$t$9104$jXZPP)
                                                               ((case-lambda
                                                                  ((g$ls/false$9105$jXZPP)
                                                                   (if g$ls/false$9105$jXZPP
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$9106$jXZPP)
                                                                          (g$quasicons$9056$jXZPP
                                                                            (g$quasi$9060$jXZPP
                                                                              g$p$9106$jXZPP
                                                                              g$lev$9093$jXZPP)
                                                                            (g$vquasi$9059$jXZPP
                                                                              g$q$9097$jXZPP
                                                                              g$lev$9093$jXZPP))))
                                                                       g$ls/false$9105$jXZPP)
                                                                     (g$syntax-violation$8172$jXZPP
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$9104$jXZPP))))
                                                                (g$syntax-dispatch$8060$jXZPP
                                                                  g$t$9104$jXZPP
                                                                  'any))))
                                                            g$t$9101$jXZPP))))
                                                      (g$syntax-dispatch$8060$jXZPP
                                                        g$t$9101$jXZPP
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$9098$jXZPP))))
                                            (g$syntax-dispatch$8060$jXZPP
                                              g$t$9098$jXZPP
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$9096$jXZPP)))
                                    g$ls/false$9095$jXZPP)
                                  ((case-lambda
                                     ((g$t$9107$jXZPP)
                                      ((case-lambda
                                         ((g$ls/false$9108$jXZPP)
                                          (if g$ls/false$9108$jXZPP
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$8003$jXZPP
                                                     'quote)
                                                   '())))
                                              g$ls/false$9108$jXZPP)
                                            (g$syntax-violation$8172$jXZPP
                                              '#f
                                              '"invalid syntax"
                                              g$t$9107$jXZPP))))
                                       (g$syntax-dispatch$8060$jXZPP
                                         g$t$9107$jXZPP
                                         '()))))
                                   g$t$9094$jXZPP))))
                             (g$syntax-dispatch$8060$jXZPP
                               g$t$9094$jXZPP
                               '(any . any)))))
                         g$p$9092$jXZPP))))
                   (g$quasi$9060$jXZPP
                     (case-lambda
                       ((g$p$9065$jXZPP g$lev$9066$jXZPP)
                        ((case-lambda
                           ((g$t$9067$jXZPP)
                            ((case-lambda
                               ((g$ls/false$9068$jXZPP)
                                (if g$ls/false$9068$jXZPP
                                  (apply
                                    (case-lambda
                                      ((g$p$9069$jXZPP)
                                       (if (= g$lev$9066$jXZPP '0)
                                         g$p$9069$jXZPP
                                         (g$quasicons$9056$jXZPP
                                           (g$datum$9039$jXZPP 'unquote)
                                           (g$quasi$9060$jXZPP
                                             (list g$p$9069$jXZPP)
                                             (- g$lev$9066$jXZPP '1))))))
                                    g$ls/false$9068$jXZPP)
                                  ((case-lambda
                                     ((g$t$9070$jXZPP)
                                      ((case-lambda
                                         ((g$ls/false$9071$jXZPP)
                                          (if g$ls/false$9071$jXZPP
                                            (apply
                                              (case-lambda
                                                ((g$p$9072$jXZPP g$q$9073$jXZPP)
                                                 (if (= g$lev$9066$jXZPP '0)
                                                   (g$quasicons*$9055$jXZPP
                                                     g$p$9072$jXZPP
                                                     (g$quasi$9060$jXZPP
                                                       g$q$9073$jXZPP
                                                       g$lev$9066$jXZPP))
                                                   (g$quasicons$9056$jXZPP
                                                     (g$quasicons$9056$jXZPP
                                                       (g$datum$9039$jXZPP
                                                         'unquote)
                                                       (g$quasi$9060$jXZPP
                                                         g$p$9072$jXZPP
                                                         (- g$lev$9066$jXZPP
                                                            '1)))
                                                     (g$quasi$9060$jXZPP
                                                       g$q$9073$jXZPP
                                                       g$lev$9066$jXZPP)))))
                                              g$ls/false$9071$jXZPP)
                                            ((case-lambda
                                               ((g$t$9074$jXZPP)
                                                ((case-lambda
                                                   ((g$ls/false$9075$jXZPP)
                                                    (if g$ls/false$9075$jXZPP
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$9076$jXZPP
                                                             g$q$9077$jXZPP)
                                                           (if (= g$lev$9066$jXZPP
                                                                  '0)
                                                             (g$quasiappend$9057$jXZPP
                                                               g$p$9076$jXZPP
                                                               (g$quasi$9060$jXZPP
                                                                 g$q$9077$jXZPP
                                                                 g$lev$9066$jXZPP))
                                                             (g$quasicons$9056$jXZPP
                                                               (g$quasicons$9056$jXZPP
                                                                 (g$datum$9039$jXZPP
                                                                   'unquote-splicing)
                                                                 (g$quasi$9060$jXZPP
                                                                   g$p$9076$jXZPP
                                                                   (- g$lev$9066$jXZPP
                                                                      '1)))
                                                               (g$quasi$9060$jXZPP
                                                                 g$q$9077$jXZPP
                                                                 g$lev$9066$jXZPP)))))
                                                        g$ls/false$9075$jXZPP)
                                                      ((case-lambda
                                                         ((g$t$9078$jXZPP)
                                                          ((case-lambda
                                                             ((g$ls/false$9079$jXZPP)
                                                              (if g$ls/false$9079$jXZPP
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$9080$jXZPP)
                                                                     (g$quasicons$9056$jXZPP
                                                                       (g$datum$9039$jXZPP
                                                                         'quasiquote)
                                                                       (g$quasi$9060$jXZPP
                                                                         (list
                                                                           g$p$9080$jXZPP)
                                                                         (+ g$lev$9066$jXZPP
                                                                            '1)))))
                                                                  g$ls/false$9079$jXZPP)
                                                                ((case-lambda
                                                                   ((g$t$9081$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9082$jXZPP)
                                                                        (if g$ls/false$9082$jXZPP
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$9083$jXZPP
                                                                                 g$q$9084$jXZPP)
                                                                               (g$quasicons$9056$jXZPP
                                                                                 (g$quasi$9060$jXZPP
                                                                                   g$p$9083$jXZPP
                                                                                   g$lev$9066$jXZPP)
                                                                                 (g$quasi$9060$jXZPP
                                                                                   g$q$9084$jXZPP
                                                                                   g$lev$9066$jXZPP))))
                                                                            g$ls/false$9082$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$t$9085$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9086$jXZPP)
                                                                                  (if (if g$ls/false$9086$jXZPP
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$9087$jXZPP)
                                                                                               (not (g$stx?$7754$jXZPP
                                                                                                      g$x$9087$jXZPP))))
                                                                                            g$ls/false$9086$jXZPP))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$9088$jXZPP)
                                                                                         (g$quasivector$9058$jXZPP
                                                                                           (g$vquasi$9059$jXZPP
                                                                                             g$x$9088$jXZPP
                                                                                             g$lev$9066$jXZPP))))
                                                                                      g$ls/false$9086$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$t$9089$jXZPP)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9090$jXZPP)
                                                                                            (if g$ls/false$9090$jXZPP
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9091$jXZPP)
                                                                                                   (list
                                                                                                     (g$scheme-stx$8003$jXZPP
                                                                                                       'quote)
                                                                                                     g$p$9091$jXZPP)))
                                                                                                g$ls/false$9090$jXZPP)
                                                                                              (g$syntax-violation$8172$jXZPP
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9089$jXZPP))))
                                                                                         (g$syntax-dispatch$8060$jXZPP
                                                                                           g$t$9089$jXZPP
                                                                                           'any))))
                                                                                     g$t$9085$jXZPP))))
                                                                               (g$syntax-dispatch$8060$jXZPP
                                                                                 g$t$9085$jXZPP
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9081$jXZPP))))
                                                                     (g$syntax-dispatch$8060$jXZPP
                                                                       g$t$9081$jXZPP
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9078$jXZPP))))
                                                           (g$syntax-dispatch$8060$jXZPP
                                                             g$t$9078$jXZPP
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$9074$jXZPP))))
                                                 (g$syntax-dispatch$8060$jXZPP
                                                   g$t$9074$jXZPP
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9070$jXZPP))))
                                       (g$syntax-dispatch$8060$jXZPP
                                         g$t$9070$jXZPP
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$9067$jXZPP))))
                             (g$syntax-dispatch$8060$jXZPP
                               g$t$9067$jXZPP
                               '(#(scheme-id unquote) any)))))
                         g$p$9065$jXZPP)))))
           (case-lambda
             ((g$x$9061$jXZPP)
              ((case-lambda
                 ((g$t$9062$jXZPP)
                  ((case-lambda
                     ((g$ls/false$9063$jXZPP)
                      (if g$ls/false$9063$jXZPP
                        (apply
                          (case-lambda
                            ((g$e$9064$jXZPP)
                             (g$quasi$9060$jXZPP g$e$9064$jXZPP '0)))
                          g$ls/false$9063$jXZPP)
                        (g$syntax-violation$8172$jXZPP
                          '#f
                          '"invalid syntax"
                          g$t$9062$jXZPP))))
                   (g$syntax-dispatch$8060$jXZPP g$t$9062$jXZPP '(_ any)))))
               g$x$9061$jXZPP))))))))
   (g$quasisyntax-macro$8052$jXZPP
     g$quasisyntax-macro$11555$jXZPP
     ((case-lambda
        (()
         (letrec* ((g$quasi$9171$jXZPP
                     (case-lambda
                       ((g$p$9185$jXZPP g$lev$9186$jXZPP)
                        ((case-lambda
                           ((g$t$9187$jXZPP)
                            ((case-lambda
                               ((g$ls/false$9188$jXZPP)
                                (if g$ls/false$9188$jXZPP
                                  (apply
                                    (case-lambda
                                      ((g$p$9189$jXZPP)
                                       (if (= g$lev$9186$jXZPP '0)
                                         ((case-lambda
                                            ((g$g$9190$jXZPP)
                                             (values
                                               (list g$g$9190$jXZPP)
                                               (list g$p$9189$jXZPP)
                                               g$g$9190$jXZPP)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$9171$jXZPP
                                                g$p$9189$jXZPP
                                                (- g$lev$9186$jXZPP '1))))
                                           (case-lambda
                                             ((g$lhs*$9194$jXZPP
                                                g$rhs*$9195$jXZPP
                                                g$p$9196$jXZPP)
                                              ((case-lambda
                                                 ((g$p$9197$jXZPP
                                                    g$rhs*$9198$jXZPP
                                                    g$lhs*$9199$jXZPP)
                                                  (values
                                                    g$lhs*$9199$jXZPP
                                                    g$rhs*$9198$jXZPP
                                                    (list
                                                      'unsyntax
                                                      g$p$9197$jXZPP))))
                                               g$p$9196$jXZPP
                                               g$rhs*$9195$jXZPP
                                               g$lhs*$9194$jXZPP)))))))
                                    g$ls/false$9188$jXZPP)
                                  ((case-lambda
                                     ((g$t$9200$jXZPP)
                                      ((case-lambda
                                         ((g$ls/false$9201$jXZPP)
                                          (if (if g$ls/false$9201$jXZPP
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$9186$jXZPP '0)))
                                                    g$ls/false$9201$jXZPP))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$8172$jXZPP
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$9185$jXZPP)))
                                              g$ls/false$9201$jXZPP)
                                            ((case-lambda
                                               ((g$t$9202$jXZPP)
                                                ((case-lambda
                                                   ((g$ls/false$9203$jXZPP)
                                                    (if g$ls/false$9203$jXZPP
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$9204$jXZPP
                                                             g$q$9205$jXZPP)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$9171$jXZPP
                                                                  g$q$9205$jXZPP
                                                                  g$lev$9186$jXZPP)))
                                                             (case-lambda
                                                               ((g$lhs*$9209$jXZPP
                                                                  g$rhs*$9210$jXZPP
                                                                  g$q$9211$jXZPP)
                                                                ((case-lambda
                                                                   ((g$q$9212$jXZPP
                                                                      g$rhs*$9213$jXZPP
                                                                      g$lhs*$9214$jXZPP)
                                                                    (if (= g$lev$9186$jXZPP
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$9215$jXZPP)
                                                                          (values
                                                                            (append
                                                                              g$g*$9215$jXZPP
                                                                              g$lhs*$9214$jXZPP)
                                                                            (append
                                                                              g$p*$9204$jXZPP
                                                                              g$rhs*$9213$jXZPP)
                                                                            (append
                                                                              g$g*$9215$jXZPP
                                                                              g$q$9212$jXZPP))))
                                                                       (g$map$5078$jXZPP
                                                                         (case-lambda
                                                                           ((g$x$9216$jXZPP)
                                                                            (gensym)))
                                                                         g$p*$9204$jXZPP))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$9171$jXZPP
                                                                             g$p*$9204$jXZPP
                                                                             (- g$lev$9186$jXZPP
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$9220$jXZPP
                                                                             g$rhs2*$9221$jXZPP
                                                                             g$p*$9222$jXZPP)
                                                                           ((case-lambda
                                                                              ((g$p*$9223$jXZPP
                                                                                 g$rhs2*$9224$jXZPP
                                                                                 g$lhs2*$9225$jXZPP)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$9225$jXZPP
                                                                                   g$lhs*$9214$jXZPP)
                                                                                 (append
                                                                                   g$rhs2*$9224$jXZPP
                                                                                   g$rhs*$9213$jXZPP)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$9223$jXZPP)
                                                                                   g$q$9212$jXZPP))))
                                                                            g$p*$9222$jXZPP
                                                                            g$rhs2*$9221$jXZPP
                                                                            g$lhs2*$9220$jXZPP)))))))
                                                                 g$q$9211$jXZPP
                                                                 g$rhs*$9210$jXZPP
                                                                 g$lhs*$9209$jXZPP))))))
                                                        g$ls/false$9203$jXZPP)
                                                      ((case-lambda
                                                         ((g$t$9226$jXZPP)
                                                          ((case-lambda
                                                             ((g$ls/false$9227$jXZPP)
                                                              (if g$ls/false$9227$jXZPP
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$9228$jXZPP
                                                                       g$q$9229$jXZPP)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$9171$jXZPP
                                                                            g$q$9229$jXZPP
                                                                            g$lev$9186$jXZPP)))
                                                                       (case-lambda
                                                                         ((g$lhs*$9233$jXZPP
                                                                            g$rhs*$9234$jXZPP
                                                                            g$q$9235$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$q$9236$jXZPP
                                                                                g$rhs*$9237$jXZPP
                                                                                g$lhs*$9238$jXZPP)
                                                                              (if (= g$lev$9186$jXZPP
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$9239$jXZPP)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5078$jXZPP
                                                                                          (case-lambda
                                                                                            ((g$g$9240$jXZPP)
                                                                                             (cons
                                                                                               g$g$9240$jXZPP
                                                                                               '(...))))
                                                                                          g$g*$9239$jXZPP)
                                                                                        g$lhs*$9238$jXZPP)
                                                                                      (append
                                                                                        g$p*$9228$jXZPP
                                                                                        g$rhs*$9237$jXZPP)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5078$jXZPP
                                                                                            (case-lambda
                                                                                              ((g$g$9241$jXZPP)
                                                                                               (cons
                                                                                                 g$g$9241$jXZPP
                                                                                                 '(...))))
                                                                                            g$g*$9239$jXZPP))
                                                                                        g$q$9236$jXZPP))))
                                                                                 (g$map$5078$jXZPP
                                                                                   (case-lambda
                                                                                     ((g$x$9242$jXZPP)
                                                                                      (gensym)))
                                                                                   g$p*$9228$jXZPP))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$9171$jXZPP
                                                                                       g$p*$9228$jXZPP
                                                                                       (- g$lev$9186$jXZPP
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$9246$jXZPP
                                                                                       g$rhs2*$9247$jXZPP
                                                                                       g$p*$9248$jXZPP)
                                                                                     ((case-lambda
                                                                                        ((g$p*$9249$jXZPP
                                                                                           g$rhs2*$9250$jXZPP
                                                                                           g$lhs2*$9251$jXZPP)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$9251$jXZPP
                                                                                             g$lhs*$9238$jXZPP)
                                                                                           (append
                                                                                             g$rhs2*$9250$jXZPP
                                                                                             g$rhs*$9237$jXZPP)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$9249$jXZPP)
                                                                                             g$q$9236$jXZPP))))
                                                                                      g$p*$9248$jXZPP
                                                                                      g$rhs2*$9247$jXZPP
                                                                                      g$lhs2*$9246$jXZPP)))))))
                                                                           g$q$9235$jXZPP
                                                                           g$rhs*$9234$jXZPP
                                                                           g$lhs*$9233$jXZPP))))))
                                                                  g$ls/false$9227$jXZPP)
                                                                ((case-lambda
                                                                   ((g$t$9252$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9253$jXZPP)
                                                                        (if (if g$ls/false$9253$jXZPP
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$9186$jXZPP
                                                                                        '0)))
                                                                                  g$ls/false$9253$jXZPP))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$8172$jXZPP
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$9185$jXZPP)))
                                                                            g$ls/false$9253$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$t$9254$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9255$jXZPP)
                                                                                  (if g$ls/false$9255$jXZPP
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$9256$jXZPP)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$9171$jXZPP
                                                                                                g$p$9256$jXZPP
                                                                                                (+ g$lev$9186$jXZPP
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$9260$jXZPP
                                                                                                g$rhs*$9261$jXZPP
                                                                                                g$p$9262$jXZPP)
                                                                                              ((case-lambda
                                                                                                 ((g$p$9263$jXZPP
                                                                                                    g$rhs*$9264$jXZPP
                                                                                                    g$lhs*$9265$jXZPP)
                                                                                                  (values
                                                                                                    g$lhs*$9265$jXZPP
                                                                                                    g$rhs*$9264$jXZPP
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$9263$jXZPP))))
                                                                                               g$p$9262$jXZPP
                                                                                               g$rhs*$9261$jXZPP
                                                                                               g$lhs*$9260$jXZPP))))))
                                                                                      g$ls/false$9255$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$t$9266$jXZPP)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9267$jXZPP)
                                                                                            (if g$ls/false$9267$jXZPP
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9268$jXZPP
                                                                                                     g$q$9269$jXZPP)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$9171$jXZPP
                                                                                                          g$p$9268$jXZPP
                                                                                                          g$lev$9186$jXZPP)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$9276$jXZPP
                                                                                                          g$rhs*$9277$jXZPP
                                                                                                          g$p$9278$jXZPP)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$9171$jXZPP
                                                                                                               g$q$9269$jXZPP
                                                                                                               g$lev$9186$jXZPP)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$9279$jXZPP
                                                                                                               g$rhs2*$9280$jXZPP
                                                                                                               g$q$9281$jXZPP)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$9282$jXZPP
                                                                                                                   g$rhs2*$9283$jXZPP
                                                                                                                   g$lhs2*$9284$jXZPP
                                                                                                                   g$p$9285$jXZPP
                                                                                                                   g$rhs*$9286$jXZPP
                                                                                                                   g$lhs*$9287$jXZPP)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$9284$jXZPP
                                                                                                                     g$lhs*$9287$jXZPP)
                                                                                                                   (append
                                                                                                                     g$rhs2*$9283$jXZPP
                                                                                                                     g$rhs*$9286$jXZPP)
                                                                                                                   (cons
                                                                                                                     g$p$9285$jXZPP
                                                                                                                     g$q$9282$jXZPP))))
                                                                                                              g$q$9281$jXZPP
                                                                                                              g$rhs2*$9280$jXZPP
                                                                                                              g$lhs2*$9279$jXZPP
                                                                                                              g$p$9278$jXZPP
                                                                                                              g$rhs*$9277$jXZPP
                                                                                                              g$lhs*$9276$jXZPP)))))))))
                                                                                                g$ls/false$9267$jXZPP)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9288$jXZPP)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9289$jXZPP)
                                                                                                      (if g$ls/false$9289$jXZPP
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$9290$jXZPP)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$9171$jXZPP
                                                                                                                    g$x*$9290$jXZPP
                                                                                                                    g$lev$9186$jXZPP)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$9294$jXZPP
                                                                                                                    g$rhs*$9295$jXZPP
                                                                                                                    g$x*$9296$jXZPP)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$9297$jXZPP
                                                                                                                        g$rhs*$9298$jXZPP
                                                                                                                        g$lhs*$9299$jXZPP)
                                                                                                                      (values
                                                                                                                        g$lhs*$9299$jXZPP
                                                                                                                        g$rhs*$9298$jXZPP
                                                                                                                        (list->vector
                                                                                                                          g$x*$9297$jXZPP))))
                                                                                                                   g$x*$9296$jXZPP
                                                                                                                   g$rhs*$9295$jXZPP
                                                                                                                   g$lhs*$9294$jXZPP))))))
                                                                                                          g$ls/false$9289$jXZPP)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9300$jXZPP)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9301$jXZPP)
                                                                                                                (if g$ls/false$9301$jXZPP
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$9185$jXZPP)))
                                                                                                                    g$ls/false$9301$jXZPP)
                                                                                                                  (g$syntax-violation$8172$jXZPP
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9300$jXZPP))))
                                                                                                             (g$syntax-dispatch$8060$jXZPP
                                                                                                               g$t$9300$jXZPP
                                                                                                               '_))))
                                                                                                         g$t$9288$jXZPP))))
                                                                                                   (g$syntax-dispatch$8060$jXZPP
                                                                                                     g$t$9288$jXZPP
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$9266$jXZPP))))
                                                                                         (g$syntax-dispatch$8060$jXZPP
                                                                                           g$t$9266$jXZPP
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$9254$jXZPP))))
                                                                               (g$syntax-dispatch$8060$jXZPP
                                                                                 g$t$9254$jXZPP
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$9252$jXZPP))))
                                                                     (g$syntax-dispatch$8060$jXZPP
                                                                       g$t$9252$jXZPP
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$9226$jXZPP))))
                                                           (g$syntax-dispatch$8060$jXZPP
                                                             g$t$9226$jXZPP
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$9202$jXZPP))))
                                                 (g$syntax-dispatch$8060$jXZPP
                                                   g$t$9202$jXZPP
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9200$jXZPP))))
                                       (g$syntax-dispatch$8060$jXZPP
                                         g$t$9200$jXZPP
                                         '#(scheme-id unsyntax)))))
                                   g$t$9187$jXZPP))))
                             (g$syntax-dispatch$8060$jXZPP
                               g$t$9187$jXZPP
                               '(#(scheme-id unsyntax) any)))))
                         g$p$9185$jXZPP)))))
           (case-lambda
             ((g$x$9172$jXZPP)
              ((case-lambda
                 ((g$t$9173$jXZPP)
                  ((case-lambda
                     ((g$ls/false$9174$jXZPP)
                      (if g$ls/false$9174$jXZPP
                        (apply
                          (case-lambda
                            ((g$e$9175$jXZPP)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$9171$jXZPP g$e$9175$jXZPP '0)))
                               (case-lambda
                                 ((g$lhs*$9179$jXZPP
                                    g$rhs*$9180$jXZPP
                                    g$v$9181$jXZPP)
                                  ((case-lambda
                                     ((g$v$9182$jXZPP
                                        g$rhs*$9183$jXZPP
                                        g$lhs*$9184$jXZPP)
                                      (g$bless$8023$jXZPP
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$9183$jXZPP)
                                          '()
                                          (list
                                            g$lhs*$9184$jXZPP
                                            (list 'syntax g$v$9182$jXZPP))))))
                                   g$v$9181$jXZPP
                                   g$rhs*$9180$jXZPP
                                   g$lhs*$9179$jXZPP))))))
                          g$ls/false$9174$jXZPP)
                        (g$syntax-violation$8172$jXZPP
                          '#f
                          '"invalid syntax"
                          g$t$9173$jXZPP))))
                   (g$syntax-dispatch$8060$jXZPP g$t$9173$jXZPP '(_ any)))))
               g$x$9172$jXZPP))))))))
   (g$define-struct-macro$8053$jXZPP
     g$define-struct-macro$11556$jXZPP
     (case-lambda
       ((g$stx$9302$jXZPP)
        (g$syntax-violation$8172$jXZPP
          '#f
          '"define-struct not supported"
          g$stx$9302$jXZPP))))
   (g$define-record-type-macro$8054$jXZPP
     g$define-record-type-macro$11557$jXZPP
     (case-lambda
       ((g$x$9303$jXZPP)
        (letrec* ((g$id$9304$jXZPP
                    (case-lambda
                      ((g$ctxt$9556$jXZPP . g$str*$9557$jXZPP)
                       (g$datum->syntax$8174$jXZPP
                         g$ctxt$9556$jXZPP
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5078$jXZPP
                               (case-lambda
                                 ((g$x$9558$jXZPP)
                                  (if (symbol? g$x$9558$jXZPP)
                                    (symbol->string g$x$9558$jXZPP)
                                    (if (string? g$x$9558$jXZPP)
                                      g$x$9558$jXZPP
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$9557$jXZPP)))))))
                  (g$get-record-name$9305$jXZPP
                    (case-lambda
                      ((g$spec$9547$jXZPP)
                       ((case-lambda
                          ((g$t$9548$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9549$jXZPP)
                               (if g$ls/false$9549$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$foo$9550$jXZPP
                                        g$make-foo$9551$jXZPP
                                        g$foo?$9552$jXZPP)
                                      g$foo$9550$jXZPP))
                                   g$ls/false$9549$jXZPP)
                                 ((case-lambda
                                    ((g$t$9553$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9554$jXZPP)
                                         (if g$ls/false$9554$jXZPP
                                           (apply
                                             (case-lambda
                                               ((g$foo$9555$jXZPP)
                                                g$foo$9555$jXZPP))
                                             g$ls/false$9554$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$t$9553$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9553$jXZPP
                                        'any))))
                                  g$t$9548$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$9548$jXZPP
                              '(any any any)))))
                        g$spec$9547$jXZPP))))
                  (g$get-record-constructor-name$9306$jXZPP
                    (case-lambda
                      ((g$spec$9537$jXZPP)
                       ((case-lambda
                          ((g$t$9538$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9539$jXZPP)
                               (if g$ls/false$9539$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$foo$9540$jXZPP
                                        g$make-foo$9541$jXZPP
                                        g$foo?$9542$jXZPP)
                                      g$make-foo$9541$jXZPP))
                                   g$ls/false$9539$jXZPP)
                                 ((case-lambda
                                    ((g$t$9543$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9544$jXZPP)
                                         (if (if g$ls/false$9544$jXZPP
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9545$jXZPP)
                                                      (g$id?$7782$jXZPP
                                                        g$foo$9545$jXZPP)))
                                                   g$ls/false$9544$jXZPP))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9546$jXZPP)
                                                (g$id$9304$jXZPP
                                                  g$foo$9546$jXZPP
                                                  '"make-"
                                                  (g$stx->datum$7793$jXZPP
                                                    g$foo$9546$jXZPP))))
                                             g$ls/false$9544$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$t$9543$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9543$jXZPP
                                        'any))))
                                  g$t$9538$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$9538$jXZPP
                              '(any any any)))))
                        g$spec$9537$jXZPP))))
                  (g$get-record-predicate-name$9307$jXZPP
                    (case-lambda
                      ((g$spec$9527$jXZPP)
                       ((case-lambda
                          ((g$t$9528$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9529$jXZPP)
                               (if g$ls/false$9529$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$foo$9530$jXZPP
                                        g$make-foo$9531$jXZPP
                                        g$foo?$9532$jXZPP)
                                      g$foo?$9532$jXZPP))
                                   g$ls/false$9529$jXZPP)
                                 ((case-lambda
                                    ((g$t$9533$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9534$jXZPP)
                                         (if (if g$ls/false$9534$jXZPP
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9535$jXZPP)
                                                      (g$id?$7782$jXZPP
                                                        g$foo$9535$jXZPP)))
                                                   g$ls/false$9534$jXZPP))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9536$jXZPP)
                                                (g$id$9304$jXZPP
                                                  g$foo$9536$jXZPP
                                                  (g$stx->datum$7793$jXZPP
                                                    g$foo$9536$jXZPP)
                                                  '"?")))
                                             g$ls/false$9534$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$t$9533$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9533$jXZPP
                                        'any))))
                                  g$t$9528$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$9528$jXZPP
                              '(any any any)))))
                        g$spec$9527$jXZPP))))
                  (g$get-clause$9308$jXZPP
                    (case-lambda
                      ((g$id$9518$jXZPP g$ls$9519$jXZPP)
                       ((case-lambda
                          ((g$t$9520$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9521$jXZPP)
                               (if g$ls/false$9521$jXZPP
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9521$jXZPP)
                                 ((case-lambda
                                    ((g$t$9522$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9523$jXZPP)
                                         (if g$ls/false$9523$jXZPP
                                           (apply
                                             (case-lambda
                                               ((g$x$9524$jXZPP
                                                  g$rest$9525$jXZPP
                                                  g$ls$9526$jXZPP)
                                                (if (g$free-id=?$7786$jXZPP
                                                      (g$bless$8023$jXZPP
                                                        g$id$9518$jXZPP)
                                                      g$x$9524$jXZPP)
                                                  (cons
                                                    g$x$9524$jXZPP
                                                    g$rest$9525$jXZPP)
                                                  (g$get-clause$9308$jXZPP
                                                    g$id$9518$jXZPP
                                                    g$ls$9526$jXZPP))))
                                             g$ls/false$9523$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$t$9522$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9522$jXZPP
                                        '((any . any) . any)))))
                                  g$t$9520$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP g$t$9520$jXZPP '()))))
                        g$ls$9519$jXZPP))))
                  (g$foo-rtd-code$9309$jXZPP
                    (case-lambda
                      ((g$name$9477$jXZPP
                         g$clause*$9478$jXZPP
                         g$parent-rtd-code$9479$jXZPP)
                       (letrec* ((g$convert-field-spec*$9480$jXZPP
                                   (case-lambda
                                     ((g$ls$9505$jXZPP)
                                      (list->vector
                                        (g$map$5078$jXZPP
                                          (case-lambda
                                            ((g$x$9506$jXZPP)
                                             ((case-lambda
                                                ((g$t$9507$jXZPP)
                                                 ((case-lambda
                                                    ((g$ls/false$9508$jXZPP)
                                                     (if g$ls/false$9508$jXZPP
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$9509$jXZPP
                                                              g$rest$9510$jXZPP)
                                                            (list
                                                              'mutable
                                                              g$name$9509$jXZPP)))
                                                         g$ls/false$9508$jXZPP)
                                                       ((case-lambda
                                                          ((g$t$9511$jXZPP)
                                                           ((case-lambda
                                                              ((g$ls/false$9512$jXZPP)
                                                               (if g$ls/false$9512$jXZPP
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$9513$jXZPP
                                                                        g$rest$9514$jXZPP)
                                                                      (list
                                                                        'immutable
                                                                        g$name$9513$jXZPP)))
                                                                   g$ls/false$9512$jXZPP)
                                                                 ((case-lambda
                                                                    ((g$t$9515$jXZPP)
                                                                     ((case-lambda
                                                                        ((g$ls/false$9516$jXZPP)
                                                                         (if g$ls/false$9516$jXZPP
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$9517$jXZPP)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$9517$jXZPP)))
                                                                             g$ls/false$9516$jXZPP)
                                                                           (g$syntax-violation$8172$jXZPP
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$9515$jXZPP))))
                                                                      (g$syntax-dispatch$8060$jXZPP
                                                                        g$t$9515$jXZPP
                                                                        'any))))
                                                                  g$t$9511$jXZPP))))
                                                            (g$syntax-dispatch$8060$jXZPP
                                                              g$t$9511$jXZPP
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$9507$jXZPP))))
                                                  (g$syntax-dispatch$8060$jXZPP
                                                    g$t$9507$jXZPP
                                                    '(#(scheme-id mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$9506$jXZPP)))
                                          g$ls$9505$jXZPP))))))
                         ((case-lambda
                            ((g$uid-code$9481$jXZPP
                               g$sealed?$9482$jXZPP
                               g$opaque?$9483$jXZPP
                               g$fields$9484$jXZPP)
                             (g$bless$8023$jXZPP
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9477$jXZPP)
                                 g$parent-rtd-code$9479$jXZPP
                                 g$uid-code$9481$jXZPP
                                 g$sealed?$9482$jXZPP
                                 g$opaque?$9483$jXZPP
                                 g$fields$9484$jXZPP))))
                          ((case-lambda
                             ((g$t$9485$jXZPP)
                              ((case-lambda
                                 ((g$ls/false$9486$jXZPP)
                                  (if g$ls/false$9486$jXZPP
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9486$jXZPP)
                                    ((case-lambda
                                       ((g$t$9487$jXZPP)
                                        ((case-lambda
                                           ((g$ls/false$9488$jXZPP)
                                            (if g$ls/false$9488$jXZPP
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9489$jXZPP)
                                                   (list
                                                     'quote
                                                     g$uid$9489$jXZPP)))
                                                g$ls/false$9488$jXZPP)
                                              ((case-lambda
                                                 ((g$t$9490$jXZPP)
                                                  ((case-lambda
                                                     ((g$ls/false$9491$jXZPP)
                                                      (if g$ls/false$9491$jXZPP
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9491$jXZPP)
                                                        (g$syntax-violation$8172$jXZPP
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9490$jXZPP))))
                                                   (g$syntax-dispatch$8060$jXZPP
                                                     g$t$9490$jXZPP
                                                     '_))))
                                               g$t$9487$jXZPP))))
                                         (g$syntax-dispatch$8060$jXZPP
                                           g$t$9487$jXZPP
                                           '(_ any)))))
                                     g$t$9485$jXZPP))))
                               (g$syntax-dispatch$8060$jXZPP
                                 g$t$9485$jXZPP
                                 '(_)))))
                           (g$get-clause$9308$jXZPP
                             'nongenerative
                             g$clause*$9478$jXZPP))
                          ((case-lambda
                             ((g$t$9492$jXZPP)
                              ((case-lambda
                                 ((g$ls/false$9493$jXZPP)
                                  (if g$ls/false$9493$jXZPP
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9493$jXZPP)
                                    ((case-lambda
                                       ((g$t$9494$jXZPP)
                                        ((case-lambda
                                           ((g$ls/false$9495$jXZPP)
                                            (if g$ls/false$9495$jXZPP
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9495$jXZPP)
                                              (g$syntax-violation$8172$jXZPP
                                                '#f
                                                '"invalid syntax"
                                                g$t$9494$jXZPP))))
                                         (g$syntax-dispatch$8060$jXZPP
                                           g$t$9494$jXZPP
                                           '_))))
                                     g$t$9492$jXZPP))))
                               (g$syntax-dispatch$8060$jXZPP
                                 g$t$9492$jXZPP
                                 '(_ #(atom #t))))))
                           (g$get-clause$9308$jXZPP
                             'sealed
                             g$clause*$9478$jXZPP))
                          ((case-lambda
                             ((g$t$9496$jXZPP)
                              ((case-lambda
                                 ((g$ls/false$9497$jXZPP)
                                  (if g$ls/false$9497$jXZPP
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9497$jXZPP)
                                    ((case-lambda
                                       ((g$t$9498$jXZPP)
                                        ((case-lambda
                                           ((g$ls/false$9499$jXZPP)
                                            (if g$ls/false$9499$jXZPP
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9499$jXZPP)
                                              (g$syntax-violation$8172$jXZPP
                                                '#f
                                                '"invalid syntax"
                                                g$t$9498$jXZPP))))
                                         (g$syntax-dispatch$8060$jXZPP
                                           g$t$9498$jXZPP
                                           '_))))
                                     g$t$9496$jXZPP))))
                               (g$syntax-dispatch$8060$jXZPP
                                 g$t$9496$jXZPP
                                 '(_ #(atom #t))))))
                           (g$get-clause$9308$jXZPP
                             'opaque
                             g$clause*$9478$jXZPP))
                          ((case-lambda
                             ((g$t$9500$jXZPP)
                              ((case-lambda
                                 ((g$ls/false$9501$jXZPP)
                                  (if g$ls/false$9501$jXZPP
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9502$jXZPP)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9480$jXZPP
                                             g$field-spec*$9502$jXZPP))))
                                      g$ls/false$9501$jXZPP)
                                    ((case-lambda
                                       ((g$t$9503$jXZPP)
                                        ((case-lambda
                                           ((g$ls/false$9504$jXZPP)
                                            (if g$ls/false$9504$jXZPP
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9504$jXZPP)
                                              (g$syntax-violation$8172$jXZPP
                                                '#f
                                                '"invalid syntax"
                                                g$t$9503$jXZPP))))
                                         (g$syntax-dispatch$8060$jXZPP
                                           g$t$9503$jXZPP
                                           '_))))
                                     g$t$9500$jXZPP))))
                               (g$syntax-dispatch$8060$jXZPP
                                 g$t$9500$jXZPP
                                 '(_ . each-any)))))
                           (g$get-clause$9308$jXZPP
                             'fields
                             g$clause*$9478$jXZPP)))))))
                  (g$parent-rtd-code$9310$jXZPP
                    (case-lambda
                      ((g$clause*$9465$jXZPP)
                       ((case-lambda
                          ((g$t$9466$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9467$jXZPP)
                               (if g$ls/false$9467$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$name$9468$jXZPP)
                                      (list
                                        'record-type-descriptor
                                        g$name$9468$jXZPP)))
                                   g$ls/false$9467$jXZPP)
                                 ((case-lambda
                                    ((g$t$9469$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9470$jXZPP)
                                         (if g$ls/false$9470$jXZPP
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9471$jXZPP)
                                                    ((case-lambda
                                                       ((g$ls/false$9472$jXZPP)
                                                        (if g$ls/false$9472$jXZPP
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9473$jXZPP
                                                                 g$rcd$9474$jXZPP)
                                                               g$rtd$9473$jXZPP))
                                                            g$ls/false$9472$jXZPP)
                                                          ((case-lambda
                                                             ((g$t$9475$jXZPP)
                                                              ((case-lambda
                                                                 ((g$ls/false$9476$jXZPP)
                                                                  (if g$ls/false$9476$jXZPP
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9476$jXZPP)
                                                                    (g$syntax-violation$8172$jXZPP
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9475$jXZPP))))
                                                               (g$syntax-dispatch$8060$jXZPP
                                                                 g$t$9475$jXZPP
                                                                 '#(atom #f)))))
                                                           g$t$9471$jXZPP))))
                                                     (g$syntax-dispatch$8060$jXZPP
                                                       g$t$9471$jXZPP
                                                       '(_ any any)))))
                                                 (g$get-clause$9308$jXZPP
                                                   'parent-rtd
                                                   g$clause*$9465$jXZPP))))
                                             g$ls/false$9470$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$t$9469$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9469$jXZPP
                                        '#(atom #f)))))
                                  g$t$9466$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$9466$jXZPP
                              '(_ any)))))
                        (g$get-clause$9308$jXZPP
                          'parent
                          g$clause*$9465$jXZPP)))))
                  (g$parent-rcd-code$9311$jXZPP
                    (case-lambda
                      ((g$clause*$9453$jXZPP)
                       ((case-lambda
                          ((g$t$9454$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9455$jXZPP)
                               (if g$ls/false$9455$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$name$9456$jXZPP)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$9456$jXZPP)))
                                   g$ls/false$9455$jXZPP)
                                 ((case-lambda
                                    ((g$t$9457$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9458$jXZPP)
                                         (if g$ls/false$9458$jXZPP
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9459$jXZPP)
                                                    ((case-lambda
                                                       ((g$ls/false$9460$jXZPP)
                                                        (if g$ls/false$9460$jXZPP
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9461$jXZPP
                                                                 g$rcd$9462$jXZPP)
                                                               g$rcd$9462$jXZPP))
                                                            g$ls/false$9460$jXZPP)
                                                          ((case-lambda
                                                             ((g$t$9463$jXZPP)
                                                              ((case-lambda
                                                                 ((g$ls/false$9464$jXZPP)
                                                                  (if g$ls/false$9464$jXZPP
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9464$jXZPP)
                                                                    (g$syntax-violation$8172$jXZPP
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9463$jXZPP))))
                                                               (g$syntax-dispatch$8060$jXZPP
                                                                 g$t$9463$jXZPP
                                                                 '#(atom #f)))))
                                                           g$t$9459$jXZPP))))
                                                     (g$syntax-dispatch$8060$jXZPP
                                                       g$t$9459$jXZPP
                                                       '(_ any any)))))
                                                 (g$get-clause$9308$jXZPP
                                                   'parent-rtd
                                                   g$clause*$9453$jXZPP))))
                                             g$ls/false$9458$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$t$9457$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9457$jXZPP
                                        '#(atom #f)))))
                                  g$t$9454$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$9454$jXZPP
                              '(_ any)))))
                        (g$get-clause$9308$jXZPP
                          'parent
                          g$clause*$9453$jXZPP)))))
                  (g$foo-rcd-code$9312$jXZPP
                    (case-lambda
                      ((g$clause*$9449$jXZPP
                         g$foo-rtd$9450$jXZPP
                         g$protocol$9451$jXZPP
                         g$parent-rcd-code$9452$jXZPP)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$9450$jXZPP
                         g$parent-rcd-code$9452$jXZPP
                         g$protocol$9451$jXZPP))))
                  (g$get-protocol-code$9313$jXZPP
                    (case-lambda
                      ((g$clause*$9443$jXZPP)
                       ((case-lambda
                          ((g$t$9444$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9445$jXZPP)
                               (if g$ls/false$9445$jXZPP
                                 (apply
                                   (case-lambda
                                     ((g$expr$9446$jXZPP) g$expr$9446$jXZPP))
                                   g$ls/false$9445$jXZPP)
                                 ((case-lambda
                                    ((g$t$9447$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9448$jXZPP)
                                         (if g$ls/false$9448$jXZPP
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$9448$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$t$9447$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9447$jXZPP
                                        '_))))
                                  g$t$9444$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$9444$jXZPP
                              '(_ any)))))
                        (g$get-clause$9308$jXZPP
                          'protocol
                          g$clause*$9443$jXZPP)))))
                  (g$get-fields$9314$jXZPP
                    (case-lambda
                      ((g$clause*$9434$jXZPP)
                       ((case-lambda
                          ((g$t$9435$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9436$jXZPP)
                               (if g$ls/false$9436$jXZPP
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$9436$jXZPP)
                                 ((case-lambda
                                    ((g$t$9437$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9438$jXZPP)
                                         (if g$ls/false$9438$jXZPP
                                           (apply
                                             (case-lambda
                                               ((g$f*$9439$jXZPP)
                                                g$f*$9439$jXZPP))
                                             g$ls/false$9438$jXZPP)
                                           ((case-lambda
                                              ((g$t$9440$jXZPP)
                                               ((case-lambda
                                                  ((g$ls/false$9441$jXZPP)
                                                   (if g$ls/false$9441$jXZPP
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9442$jXZPP)
                                                          (g$get-fields$9314$jXZPP
                                                            g$rest$9442$jXZPP)))
                                                       g$ls/false$9441$jXZPP)
                                                     (g$syntax-violation$8172$jXZPP
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9440$jXZPP))))
                                                (g$syntax-dispatch$8060$jXZPP
                                                  g$t$9440$jXZPP
                                                  '(_ . any)))))
                                            g$t$9437$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9437$jXZPP
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$9435$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP g$t$9435$jXZPP '()))))
                        g$clause*$9434$jXZPP))))
                  (g$get-mutator-indices$9315$jXZPP
                    (case-lambda
                      ((g$fields$9422$jXZPP)
                       ((letrec ((g$f$9423$jXZPP
                                   (case-lambda
                                     ((g$fields$9424$jXZPP g$i$9425$jXZPP)
                                      ((case-lambda
                                         ((g$t$9426$jXZPP)
                                          ((case-lambda
                                             ((g$ls/false$9427$jXZPP)
                                              (if g$ls/false$9427$jXZPP
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$9427$jXZPP)
                                                ((case-lambda
                                                   ((g$t$9428$jXZPP)
                                                    ((case-lambda
                                                       ((g$ls/false$9429$jXZPP)
                                                        (if g$ls/false$9429$jXZPP
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$9430$jXZPP)
                                                               (cons
                                                                 g$i$9425$jXZPP
                                                                 (g$f$9423$jXZPP
                                                                   g$rest$9430$jXZPP
                                                                   (+ g$i$9425$jXZPP
                                                                      '1)))))
                                                            g$ls/false$9429$jXZPP)
                                                          ((case-lambda
                                                             ((g$t$9431$jXZPP)
                                                              ((case-lambda
                                                                 ((g$ls/false$9432$jXZPP)
                                                                  (if g$ls/false$9432$jXZPP
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$9433$jXZPP)
                                                                         (g$f$9423$jXZPP
                                                                           g$rest$9433$jXZPP
                                                                           (+ g$i$9425$jXZPP
                                                                              '1))))
                                                                      g$ls/false$9432$jXZPP)
                                                                    (g$syntax-violation$8172$jXZPP
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9431$jXZPP))))
                                                               (g$syntax-dispatch$8060$jXZPP
                                                                 g$t$9431$jXZPP
                                                                 '(_ . any)))))
                                                           g$t$9428$jXZPP))))
                                                     (g$syntax-dispatch$8060$jXZPP
                                                       g$t$9428$jXZPP
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$9426$jXZPP))))
                                           (g$syntax-dispatch$8060$jXZPP
                                             g$t$9426$jXZPP
                                             '()))))
                                       g$fields$9424$jXZPP)))))
                          g$f$9423$jXZPP)
                        g$fields$9422$jXZPP
                        '0))))
                  (g$get-mutators$9316$jXZPP
                    (case-lambda
                      ((g$foo$9401$jXZPP g$fields$9402$jXZPP)
                       (letrec* ((g$gen-name$9403$jXZPP
                                   (case-lambda
                                     ((g$x$9421$jXZPP)
                                      (g$datum->syntax$8174$jXZPP
                                        g$foo$9401$jXZPP
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8175$jXZPP
                                                g$foo$9401$jXZPP))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8175$jXZPP
                                                g$x$9421$jXZPP))
                                            '"-set!")))))))
                         ((letrec ((g$f$9404$jXZPP
                                     (case-lambda
                                       ((g$fields$9405$jXZPP)
                                        ((case-lambda
                                           ((g$t$9406$jXZPP)
                                            ((case-lambda
                                               ((g$ls/false$9407$jXZPP)
                                                (if g$ls/false$9407$jXZPP
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$9407$jXZPP)
                                                  ((case-lambda
                                                     ((g$t$9408$jXZPP)
                                                      ((case-lambda
                                                         ((g$ls/false$9409$jXZPP)
                                                          (if g$ls/false$9409$jXZPP
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9410$jXZPP
                                                                   g$accessor$9411$jXZPP
                                                                   g$mutator$9412$jXZPP
                                                                   g$rest$9413$jXZPP)
                                                                 (cons
                                                                   g$mutator$9412$jXZPP
                                                                   (g$f$9404$jXZPP
                                                                     g$rest$9413$jXZPP))))
                                                              g$ls/false$9409$jXZPP)
                                                            ((case-lambda
                                                               ((g$t$9414$jXZPP)
                                                                ((case-lambda
                                                                   ((g$ls/false$9415$jXZPP)
                                                                    (if g$ls/false$9415$jXZPP
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9416$jXZPP
                                                                             g$rest$9417$jXZPP)
                                                                           (cons
                                                                             (g$gen-name$9403$jXZPP
                                                                               g$name$9416$jXZPP)
                                                                             (g$f$9404$jXZPP
                                                                               g$rest$9417$jXZPP))))
                                                                        g$ls/false$9415$jXZPP)
                                                                      ((case-lambda
                                                                         ((g$t$9418$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9419$jXZPP)
                                                                              (if g$ls/false$9419$jXZPP
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$9420$jXZPP)
                                                                                     (g$f$9404$jXZPP
                                                                                       g$rest$9420$jXZPP)))
                                                                                  g$ls/false$9419$jXZPP)
                                                                                (g$syntax-violation$8172$jXZPP
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9418$jXZPP))))
                                                                           (g$syntax-dispatch$8060$jXZPP
                                                                             g$t$9418$jXZPP
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$9414$jXZPP))))
                                                                 (g$syntax-dispatch$8060$jXZPP
                                                                   g$t$9414$jXZPP
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$9408$jXZPP))))
                                                       (g$syntax-dispatch$8060$jXZPP
                                                         g$t$9408$jXZPP
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$9406$jXZPP))))
                                             (g$syntax-dispatch$8060$jXZPP
                                               g$t$9406$jXZPP
                                               '()))))
                                         g$fields$9405$jXZPP)))))
                            g$f$9404$jXZPP)
                          g$fields$9402$jXZPP)))))
                  (g$get-accessors$9317$jXZPP
                    (case-lambda
                      ((g$foo$9367$jXZPP g$fields$9368$jXZPP)
                       (letrec* ((g$gen-name$9369$jXZPP
                                   (case-lambda
                                     ((g$x$9400$jXZPP)
                                      (g$datum->syntax$8174$jXZPP
                                        g$foo$9367$jXZPP
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8175$jXZPP
                                                g$foo$9367$jXZPP))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8175$jXZPP
                                                g$x$9400$jXZPP)))))))))
                         (g$map$5078$jXZPP
                           (case-lambda
                             ((g$field$9370$jXZPP)
                              ((case-lambda
                                 ((g$t$9371$jXZPP)
                                  ((case-lambda
                                     ((g$ls/false$9372$jXZPP)
                                      (if (if g$ls/false$9372$jXZPP
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$9373$jXZPP
                                                     g$accessor$9374$jXZPP
                                                     g$mutator$9375$jXZPP)
                                                   (g$id?$7782$jXZPP
                                                     g$accessor$9374$jXZPP)))
                                                g$ls/false$9372$jXZPP))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$9376$jXZPP
                                               g$accessor$9377$jXZPP
                                               g$mutator$9378$jXZPP)
                                             g$accessor$9377$jXZPP))
                                          g$ls/false$9372$jXZPP)
                                        ((case-lambda
                                           ((g$t$9379$jXZPP)
                                            ((case-lambda
                                               ((g$ls/false$9380$jXZPP)
                                                (if (if g$ls/false$9380$jXZPP
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$9381$jXZPP
                                                               g$accessor$9382$jXZPP)
                                                             (g$id?$7782$jXZPP
                                                               g$accessor$9382$jXZPP)))
                                                          g$ls/false$9380$jXZPP))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$9383$jXZPP
                                                         g$accessor$9384$jXZPP)
                                                       g$accessor$9384$jXZPP))
                                                    g$ls/false$9380$jXZPP)
                                                  ((case-lambda
                                                     ((g$t$9385$jXZPP)
                                                      ((case-lambda
                                                         ((g$ls/false$9386$jXZPP)
                                                          (if (if g$ls/false$9386$jXZPP
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$9387$jXZPP)
                                                                       (g$id?$7782$jXZPP
                                                                         g$name$9387$jXZPP)))
                                                                    g$ls/false$9386$jXZPP))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9388$jXZPP)
                                                                 (g$gen-name$9369$jXZPP
                                                                   g$name$9388$jXZPP)))
                                                              g$ls/false$9386$jXZPP)
                                                            ((case-lambda
                                                               ((g$t$9389$jXZPP)
                                                                ((case-lambda
                                                                   ((g$ls/false$9390$jXZPP)
                                                                    (if (if g$ls/false$9390$jXZPP
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$9391$jXZPP)
                                                                                 (g$id?$7782$jXZPP
                                                                                   g$name$9391$jXZPP)))
                                                                              g$ls/false$9390$jXZPP))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9392$jXZPP)
                                                                           (g$gen-name$9369$jXZPP
                                                                             g$name$9392$jXZPP)))
                                                                        g$ls/false$9390$jXZPP)
                                                                      ((case-lambda
                                                                         ((g$t$9393$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9394$jXZPP)
                                                                              (if (if g$ls/false$9394$jXZPP
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$9395$jXZPP)
                                                                                           (g$id?$7782$jXZPP
                                                                                             g$name$9395$jXZPP)))
                                                                                        g$ls/false$9394$jXZPP))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$9396$jXZPP)
                                                                                     (g$gen-name$9369$jXZPP
                                                                                       g$name$9396$jXZPP)))
                                                                                  g$ls/false$9394$jXZPP)
                                                                                ((case-lambda
                                                                                   ((g$t$9397$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$9398$jXZPP)
                                                                                        (if g$ls/false$9398$jXZPP
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$9399$jXZPP)
                                                                                               (g$syntax-violation$8172$jXZPP
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$9370$jXZPP)))
                                                                                            g$ls/false$9398$jXZPP)
                                                                                          (g$syntax-violation$8172$jXZPP
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$9397$jXZPP))))
                                                                                     (g$syntax-dispatch$8060$jXZPP
                                                                                       g$t$9397$jXZPP
                                                                                       'any))))
                                                                                 g$t$9393$jXZPP))))
                                                                           (g$syntax-dispatch$8060$jXZPP
                                                                             g$t$9393$jXZPP
                                                                             'any))))
                                                                       g$t$9389$jXZPP))))
                                                                 (g$syntax-dispatch$8060$jXZPP
                                                                   g$t$9389$jXZPP
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$9385$jXZPP))))
                                                       (g$syntax-dispatch$8060$jXZPP
                                                         g$t$9385$jXZPP
                                                         '(#(scheme-id mutable)
                                                           any)))))
                                                   g$t$9379$jXZPP))))
                                             (g$syntax-dispatch$8060$jXZPP
                                               g$t$9379$jXZPP
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$9371$jXZPP))))
                                   (g$syntax-dispatch$8060$jXZPP
                                     g$t$9371$jXZPP
                                     '(#(scheme-id mutable) any any any)))))
                               g$field$9370$jXZPP)))
                           g$fields$9368$jXZPP)))))
                  (g$enumerate$9318$jXZPP
                    (case-lambda
                      ((g$ls$9363$jXZPP)
                       ((letrec ((g$f$9364$jXZPP
                                   (case-lambda
                                     ((g$ls$9365$jXZPP g$i$9366$jXZPP)
                                      (if (null? g$ls$9365$jXZPP)
                                        '()
                                        (cons
                                          g$i$9366$jXZPP
                                          (g$f$9364$jXZPP
                                            (cdr g$ls$9365$jXZPP)
                                            (+ g$i$9366$jXZPP '1))))))))
                          g$f$9364$jXZPP)
                        g$ls$9363$jXZPP
                        '0))))
                  (g$do-define-record$9319$jXZPP
                    (case-lambda
                      ((g$namespec$9343$jXZPP g$clause*$9344$jXZPP)
                       ((case-lambda
                          ((g$foo$9345$jXZPP)
                           ((case-lambda
                              ((g$foo-rtd$9346$jXZPP)
                               ((case-lambda
                                  ((g$foo-rcd$9347$jXZPP)
                                   ((case-lambda
                                      ((g$protocol$9348$jXZPP)
                                       ((case-lambda
                                          ((g$make-foo$9349$jXZPP)
                                           ((case-lambda
                                              ((g$fields$9350$jXZPP)
                                               ((case-lambda
                                                  ((g$idx*$9351$jXZPP)
                                                   ((case-lambda
                                                      ((g$foo-x*$9352$jXZPP)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$9353$jXZPP)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$9354$jXZPP)
                                                               ((case-lambda
                                                                  ((g$foo?$9355$jXZPP)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$9356$jXZPP)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$9357$jXZPP)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$9358$jXZPP)
                                                                               (g$bless$8023$jXZPP
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$9346$jXZPP
                                                                                       g$foo-rtd-code$9356$jXZPP)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$9348$jXZPP
                                                                                         g$protocol-code$9358$jXZPP)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$9347$jXZPP
                                                                                           g$foo-rcd-code$9357$jXZPP)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$9345$jXZPP
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$9346$jXZPP)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$9347$jXZPP)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$9355$jXZPP
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$9346$jXZPP))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$9349$jXZPP
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$9347$jXZPP))
                                                                                               (append
                                                                                                 (g$map$5078$jXZPP
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$9359$jXZPP
                                                                                                        g$idx$9360$jXZPP)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$9359$jXZPP
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$9346$jXZPP
                                                                                                          g$idx$9360$jXZPP))))
                                                                                                   g$foo-x*$9352$jXZPP
                                                                                                   g$idx*$9351$jXZPP)
                                                                                                 (g$map$5078$jXZPP
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$9361$jXZPP
                                                                                                        g$idx$9362$jXZPP)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$9361$jXZPP
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$9346$jXZPP
                                                                                                          g$idx$9362$jXZPP))))
                                                                                                   g$set-foo-x!*$9353$jXZPP
                                                                                                   g$set-foo-idx*$9354$jXZPP))))))))))))
                                                                            (g$get-protocol-code$9313$jXZPP
                                                                              g$clause*$9344$jXZPP))))
                                                                        (g$foo-rcd-code$9312$jXZPP
                                                                          g$clause*$9344$jXZPP
                                                                          g$foo-rtd$9346$jXZPP
                                                                          g$protocol$9348$jXZPP
                                                                          (g$parent-rcd-code$9311$jXZPP
                                                                            g$clause*$9344$jXZPP)))))
                                                                    (g$foo-rtd-code$9309$jXZPP
                                                                      g$foo$9345$jXZPP
                                                                      g$clause*$9344$jXZPP
                                                                      (g$parent-rtd-code$9310$jXZPP
                                                                        g$clause*$9344$jXZPP)))))
                                                                (g$get-record-predicate-name$9307$jXZPP
                                                                  g$namespec$9343$jXZPP))))
                                                            (g$get-mutator-indices$9315$jXZPP
                                                              g$fields$9350$jXZPP))))
                                                        (g$get-mutators$9316$jXZPP
                                                          g$foo$9345$jXZPP
                                                          g$fields$9350$jXZPP))))
                                                    (g$get-accessors$9317$jXZPP
                                                      g$foo$9345$jXZPP
                                                      g$fields$9350$jXZPP))))
                                                (g$enumerate$9318$jXZPP
                                                  g$fields$9350$jXZPP))))
                                            (g$get-fields$9314$jXZPP
                                              g$clause*$9344$jXZPP))))
                                        (g$get-record-constructor-name$9306$jXZPP
                                          g$namespec$9343$jXZPP))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$9305$jXZPP g$namespec$9343$jXZPP)))))
                  (g$verify-clauses$9320$jXZPP
                    (case-lambda
                      ((g$x$9325$jXZPP g$cls*$9326$jXZPP)
                       (letrec* ((g$valid-kwds$9327$jXZPP
                                   (g$map$5078$jXZPP
                                     g$bless$8023$jXZPP
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$9328$jXZPP
                                   (case-lambda
                                     ((g$x$9340$jXZPP g$ls$9341$jXZPP)
                                      (if (pair? g$ls$9341$jXZPP)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$9342$jXZPP)
                                              (if g$t$9342$jXZPP
                                                g$t$9342$jXZPP
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$9328$jXZPP
                                                    g$x$9340$jXZPP
                                                    (cdr g$ls$9341$jXZPP))))))
                                           (g$free-id=?$7786$jXZPP
                                             g$x$9340$jXZPP
                                             (car g$ls$9341$jXZPP))))
                                        '#f)))))
                         ((letrec ((g$f$9329$jXZPP
                                     (case-lambda
                                       ((g$cls*$9330$jXZPP g$seen*$9331$jXZPP)
                                        (if (not (null? g$cls*$9330$jXZPP))
                                          ((case-lambda
                                             ((g$t$9332$jXZPP)
                                              ((case-lambda
                                                 ((g$ls/false$9333$jXZPP)
                                                  (if g$ls/false$9333$jXZPP
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$9334$jXZPP
                                                           g$rest$9335$jXZPP)
                                                         (if ((case-lambda
                                                                ((g$t$9336$jXZPP)
                                                                 (if g$t$9336$jXZPP
                                                                   g$t$9336$jXZPP
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$9328$jXZPP
                                                                            g$kwd$9334$jXZPP
                                                                            g$valid-kwds$9327$jXZPP))))))
                                                              (not (g$id?$7782$jXZPP
                                                                     g$kwd$9334$jXZPP)))
                                                           (g$syntax-violation$8172$jXZPP
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$9334$jXZPP)
                                                           (if (g$bound-id-member?$7789$jXZPP
                                                                 g$kwd$9334$jXZPP
                                                                 g$seen*$9331$jXZPP)
                                                             (g$syntax-violation$8172$jXZPP
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$9325$jXZPP
                                                               g$kwd$9334$jXZPP)
                                                             (g$f$9329$jXZPP
                                                               (cdr g$cls*$9330$jXZPP)
                                                               (cons
                                                                 g$kwd$9334$jXZPP
                                                                 g$seen*$9331$jXZPP))))))
                                                      g$ls/false$9333$jXZPP)
                                                    ((case-lambda
                                                       ((g$t$9337$jXZPP)
                                                        ((case-lambda
                                                           ((g$ls/false$9338$jXZPP)
                                                            (if g$ls/false$9338$jXZPP
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$9339$jXZPP)
                                                                   (g$syntax-violation$8172$jXZPP
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$9339$jXZPP)))
                                                                g$ls/false$9338$jXZPP)
                                                              (g$syntax-violation$8172$jXZPP
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9337$jXZPP))))
                                                         (g$syntax-dispatch$8060$jXZPP
                                                           g$t$9337$jXZPP
                                                           'any))))
                                                     g$t$9332$jXZPP))))
                                               (g$syntax-dispatch$8060$jXZPP
                                                 g$t$9332$jXZPP
                                                 '(any . any)))))
                                           (car g$cls*$9330$jXZPP))
                                          (void))))))
                            g$f$9329$jXZPP)
                          g$cls*$9326$jXZPP
                          '()))))))
          ((case-lambda
             ((g$t$9321$jXZPP)
              ((case-lambda
                 ((g$ls/false$9322$jXZPP)
                  (if g$ls/false$9322$jXZPP
                    (apply
                      (case-lambda
                        ((g$namespec$9323$jXZPP g$clause*$9324$jXZPP)
                         (begin
                           (g$verify-clauses$9320$jXZPP
                             g$x$9303$jXZPP
                             g$clause*$9324$jXZPP)
                           (g$do-define-record$9319$jXZPP
                             g$namespec$9323$jXZPP
                             g$clause*$9324$jXZPP))))
                      g$ls/false$9322$jXZPP)
                    (g$syntax-violation$8172$jXZPP
                      '#f
                      '"invalid syntax"
                      g$t$9321$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP
                 g$t$9321$jXZPP
                 '(_ any . each-any)))))
           g$x$9303$jXZPP)))))
   (g$define-condition-type-macro$8055$jXZPP
     g$define-condition-type-macro$11558$jXZPP
     (case-lambda
       ((g$x$9559$jXZPP)
        (letrec* ((g$mkname$9560$jXZPP
                    (case-lambda
                      ((g$name$9583$jXZPP g$suffix$9584$jXZPP)
                       (g$datum->syntax$8174$jXZPP
                         g$name$9583$jXZPP
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$8175$jXZPP g$name$9583$jXZPP))
                             g$suffix$9584$jXZPP)))))))
          ((case-lambda
             ((g$t$9561$jXZPP)
              ((case-lambda
                 ((g$ls/false$9562$jXZPP)
                  (if (if g$ls/false$9562$jXZPP
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9563$jXZPP
                                 g$name$9564$jXZPP
                                 g$super$9565$jXZPP
                                 g$constructor$9566$jXZPP
                                 g$predicate$9567$jXZPP
                                 g$field*$9568$jXZPP
                                 g$accessor*$9569$jXZPP)
                               (if (g$id?$7782$jXZPP g$name$9564$jXZPP)
                                 (if (g$id?$7782$jXZPP g$super$9565$jXZPP)
                                   (if (g$id?$7782$jXZPP
                                         g$constructor$9566$jXZPP)
                                     (if (g$id?$7782$jXZPP
                                           g$predicate$9567$jXZPP)
                                       (if (g$for-all$5076$jXZPP
                                             g$id?$7782$jXZPP
                                             g$field*$9568$jXZPP)
                                         (begin
                                           '#f
                                           (g$for-all$5076$jXZPP
                                             g$id?$7782$jXZPP
                                             g$accessor*$9569$jXZPP))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9562$jXZPP))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9570$jXZPP
                           g$name$9571$jXZPP
                           g$super$9572$jXZPP
                           g$constructor$9573$jXZPP
                           g$predicate$9574$jXZPP
                           g$field*$9575$jXZPP
                           g$accessor*$9576$jXZPP)
                         ((case-lambda
                            ((g$aux-accessor*$9577$jXZPP)
                             (g$bless$8023$jXZPP
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9571$jXZPP
                                         g$constructor$9573$jXZPP
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9572$jXZPP)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5078$jXZPP
                                               (case-lambda
                                                 ((g$field$9578$jXZPP
                                                    g$aux$9579$jXZPP)
                                                  (list
                                                    'immutable
                                                    g$field$9578$jXZPP
                                                    g$aux$9579$jXZPP)))
                                               g$field*$9575$jXZPP
                                               g$aux-accessor*$9577$jXZPP))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9574$jXZPP
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9571$jXZPP)))
                                     (g$map$5078$jXZPP
                                       (case-lambda
                                         ((g$accessor$9580$jXZPP
                                            g$aux$9581$jXZPP)
                                          (list
                                            'define
                                            g$accessor$9580$jXZPP
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$9571$jXZPP)
                                              g$aux$9581$jXZPP))))
                                       g$accessor*$9576$jXZPP
                                       g$aux-accessor*$9577$jXZPP)))))))
                          (g$map$5078$jXZPP
                            (case-lambda ((g$x$9582$jXZPP) (gensym)))
                            g$accessor*$9576$jXZPP))))
                      g$ls/false$9562$jXZPP)
                    (g$syntax-violation$8172$jXZPP
                      '#f
                      '"invalid syntax"
                      g$t$9561$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP
                 g$t$9561$jXZPP
                 '(any any any any any . #(each (any any)))))))
           g$x$9559$jXZPP)))))
   (g$incorrect-usage-macro$8056$jXZPP
     g$incorrect-usage-macro$11559$jXZPP
     (case-lambda
       ((g$e$9585$jXZPP)
        (g$syntax-violation$8172$jXZPP
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9585$jXZPP))))
   (g$parameterize-macro$8057$jXZPP
     g$parameterize-macro$11560$jXZPP
     (case-lambda
       ((g$e$9586$jXZPP)
        ((case-lambda
           ((g$t$9587$jXZPP)
            ((case-lambda
               ((g$ls/false$9588$jXZPP)
                (if g$ls/false$9588$jXZPP
                  (apply
                    (case-lambda
                      ((g$b$9589$jXZPP g$b*$9590$jXZPP)
                       (g$bless$8023$jXZPP
                         (cons
                           'let
                           (cons '() (cons g$b$9589$jXZPP g$b*$9590$jXZPP))))))
                    g$ls/false$9588$jXZPP)
                  ((case-lambda
                     ((g$t$9591$jXZPP)
                      ((case-lambda
                         ((g$ls/false$9592$jXZPP)
                          (if g$ls/false$9592$jXZPP
                            (apply
                              (case-lambda
                                ((g$olhs*$9593$jXZPP
                                   g$orhs*$9594$jXZPP
                                   g$b$9595$jXZPP
                                   g$b*$9596$jXZPP)
                                 ((case-lambda
                                    ((g$lhs*$9597$jXZPP g$rhs*$9598$jXZPP)
                                     (g$bless$8023$jXZPP
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9597$jXZPP
                                             g$rhs*$9598$jXZPP)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5078$jXZPP
                                                       (case-lambda
                                                         ((g$lhs$9599$jXZPP
                                                            g$rhs$9600$jXZPP)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$9599$jXZPP)))
                                                            (list
                                                              g$lhs$9599$jXZPP
                                                              g$rhs$9600$jXZPP)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$9600$jXZPP
                                                                '(t))))))
                                                       g$lhs*$9597$jXZPP
                                                       g$rhs*$9598$jXZPP)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9595$jXZPP
                                                         g$b*$9596$jXZPP)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9593$jXZPP
                                           g$orhs*$9594$jXZPP)))))
                                  (g$generate-temporaries$8162$jXZPP
                                    g$olhs*$9593$jXZPP)
                                  (g$generate-temporaries$8162$jXZPP
                                    g$orhs*$9594$jXZPP))))
                              g$ls/false$9592$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$9591$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$9591$jXZPP
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9587$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$9587$jXZPP
               '(_ () any . each-any)))))
         g$e$9586$jXZPP))))
   (g$foreign-call-transformer$8058$jXZPP
     g$foreign-call-transformer$11561$jXZPP
     (case-lambda
       ((g$e$9601$jXZPP g$r$9602$jXZPP g$mr$9603$jXZPP)
        ((case-lambda
           ((g$t$9604$jXZPP)
            ((case-lambda
               ((g$ls/false$9605$jXZPP)
                (if g$ls/false$9605$jXZPP
                  (apply
                    (case-lambda
                      ((g$name$9606$jXZPP g$arg*$9607$jXZPP)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$8078$jXZPP
                             g$name$9606$jXZPP
                             g$r$9602$jXZPP
                             g$mr$9603$jXZPP)
                           (g$chi-expr*$8076$jXZPP
                             g$arg*$9607$jXZPP
                             g$r$9602$jXZPP
                             g$mr$9603$jXZPP)))))
                    g$ls/false$9605$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$9604$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$9604$jXZPP
               '(_ any . each-any)))))
         g$e$9601$jXZPP))))
   (g$convert-pattern$8059$jXZPP
     g$convert-pattern$11562$jXZPP
     (case-lambda
       ((g$pattern$9608$jXZPP g$keys$9609$jXZPP)
        (letrec* ((g$cvt*$9610$jXZPP
                    (case-lambda
                      ((g$p*$9690$jXZPP g$n$9691$jXZPP g$ids$9692$jXZPP)
                       (if (null? g$p*$9690$jXZPP)
                         (values '() g$ids$9692$jXZPP)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9610$jXZPP
                                (cdr g$p*$9690$jXZPP)
                                g$n$9691$jXZPP
                                g$ids$9692$jXZPP)))
                           (case-lambda
                             ((g$y$9695$jXZPP g$ids$9696$jXZPP)
                              ((case-lambda
                                 ((g$ids$9697$jXZPP g$y$9698$jXZPP)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9611$jXZPP
                                         (car g$p*$9690$jXZPP)
                                         g$n$9691$jXZPP
                                         g$ids$9697$jXZPP)))
                                    (case-lambda
                                      ((g$x$9701$jXZPP g$ids$9702$jXZPP)
                                       ((case-lambda
                                          ((g$ids$9703$jXZPP g$x$9704$jXZPP)
                                           (values
                                             (cons
                                               g$x$9704$jXZPP
                                               g$y$9698$jXZPP)
                                             g$ids$9703$jXZPP)))
                                        g$ids$9702$jXZPP
                                        g$x$9701$jXZPP))))))
                               g$ids$9696$jXZPP
                               g$y$9695$jXZPP))))))))
                  (g$cvt$9611$jXZPP
                    (case-lambda
                      ((g$p$9612$jXZPP g$n$9613$jXZPP g$ids$9614$jXZPP)
                       ((case-lambda
                          ((g$t$9615$jXZPP)
                           ((case-lambda
                              ((g$ls/false$9616$jXZPP)
                               (if (if g$ls/false$9616$jXZPP
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9617$jXZPP)
                                            (g$id?$7782$jXZPP g$id$9617$jXZPP)))
                                         g$ls/false$9616$jXZPP))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9618$jXZPP)
                                      (if (g$bound-id-member?$7789$jXZPP
                                            g$p$9612$jXZPP
                                            g$keys$9609$jXZPP)
                                        (values
                                          (vector 'free-id g$p$9612$jXZPP)
                                          g$ids$9614$jXZPP)
                                        (if (g$free-id=?$7786$jXZPP
                                              g$p$9612$jXZPP
                                              (g$scheme-stx$8003$jXZPP '_))
                                          (values '_ g$ids$9614$jXZPP)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9612$jXZPP
                                                g$n$9613$jXZPP)
                                              g$ids$9614$jXZPP))))))
                                   g$ls/false$9616$jXZPP)
                                 ((case-lambda
                                    ((g$t$9619$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$9620$jXZPP)
                                         (if (if g$ls/false$9620$jXZPP
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9621$jXZPP
                                                        g$dots$9622$jXZPP)
                                                      (g$ellipsis?$8061$jXZPP
                                                        g$dots$9622$jXZPP)))
                                                   g$ls/false$9620$jXZPP))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9623$jXZPP
                                                  g$dots$9624$jXZPP)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9611$jXZPP
                                                       g$p$9623$jXZPP
                                                       (+ g$n$9613$jXZPP '1)
                                                       g$ids$9614$jXZPP)))
                                                  (case-lambda
                                                    ((g$p$9627$jXZPP
                                                       g$ids$9628$jXZPP)
                                                     ((case-lambda
                                                        ((g$ids$9629$jXZPP
                                                           g$p$9630$jXZPP)
                                                         (values
                                                           (if (eq? g$p$9630$jXZPP
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9630$jXZPP))
                                                           g$ids$9629$jXZPP)))
                                                      g$ids$9628$jXZPP
                                                      g$p$9627$jXZPP))))))
                                             g$ls/false$9620$jXZPP)
                                           ((case-lambda
                                              ((g$t$9631$jXZPP)
                                               ((case-lambda
                                                  ((g$ls/false$9632$jXZPP)
                                                   (if (if g$ls/false$9632$jXZPP
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9633$jXZPP
                                                                  g$dots$9634$jXZPP
                                                                  g$ys$9635$jXZPP
                                                                  g$z$9636$jXZPP)
                                                                (g$ellipsis?$8061$jXZPP
                                                                  g$dots$9634$jXZPP)))
                                                             g$ls/false$9632$jXZPP))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9637$jXZPP
                                                            g$dots$9638$jXZPP
                                                            g$ys$9639$jXZPP
                                                            g$z$9640$jXZPP)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9611$jXZPP
                                                                 g$z$9640$jXZPP
                                                                 g$n$9613$jXZPP
                                                                 g$ids$9614$jXZPP)))
                                                            (case-lambda
                                                              ((g$z$9643$jXZPP
                                                                 g$ids$9644$jXZPP)
                                                               ((case-lambda
                                                                  ((g$ids$9645$jXZPP
                                                                     g$z$9646$jXZPP)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9610$jXZPP
                                                                          g$ys$9639$jXZPP
                                                                          g$n$9613$jXZPP
                                                                          g$ids$9645$jXZPP)))
                                                                     (case-lambda
                                                                       ((g$ys$9649$jXZPP
                                                                          g$ids$9650$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$ids$9651$jXZPP
                                                                              g$ys$9652$jXZPP)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9611$jXZPP
                                                                                   g$x$9637$jXZPP
                                                                                   (+ g$n$9613$jXZPP
                                                                                      '1)
                                                                                   g$ids$9651$jXZPP)))
                                                                              (case-lambda
                                                                                ((g$x$9655$jXZPP
                                                                                   g$ids$9656$jXZPP)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9657$jXZPP
                                                                                       g$x$9658$jXZPP)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9658$jXZPP
                                                                                         (reverse
                                                                                           g$ys$9652$jXZPP)
                                                                                         g$z$9646$jXZPP)
                                                                                       g$ids$9657$jXZPP)))
                                                                                  g$ids$9656$jXZPP
                                                                                  g$x$9655$jXZPP))))))
                                                                         g$ids$9650$jXZPP
                                                                         g$ys$9649$jXZPP))))))
                                                                g$ids$9644$jXZPP
                                                                g$z$9643$jXZPP))))))
                                                       g$ls/false$9632$jXZPP)
                                                     ((case-lambda
                                                        ((g$t$9659$jXZPP)
                                                         ((case-lambda
                                                            ((g$ls/false$9660$jXZPP)
                                                             (if g$ls/false$9660$jXZPP
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9661$jXZPP
                                                                      g$y$9662$jXZPP)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9611$jXZPP
                                                                           g$y$9662$jXZPP
                                                                           g$n$9613$jXZPP
                                                                           g$ids$9614$jXZPP)))
                                                                      (case-lambda
                                                                        ((g$y$9665$jXZPP
                                                                           g$ids$9666$jXZPP)
                                                                         ((case-lambda
                                                                            ((g$ids$9667$jXZPP
                                                                               g$y$9668$jXZPP)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9611$jXZPP
                                                                                    g$x$9661$jXZPP
                                                                                    g$n$9613$jXZPP
                                                                                    g$ids$9667$jXZPP)))
                                                                               (case-lambda
                                                                                 ((g$x$9671$jXZPP
                                                                                    g$ids$9672$jXZPP)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9673$jXZPP
                                                                                        g$x$9674$jXZPP)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9674$jXZPP
                                                                                          g$y$9668$jXZPP)
                                                                                        g$ids$9673$jXZPP)))
                                                                                   g$ids$9672$jXZPP
                                                                                   g$x$9671$jXZPP))))))
                                                                          g$ids$9666$jXZPP
                                                                          g$y$9665$jXZPP))))))
                                                                 g$ls/false$9660$jXZPP)
                                                               ((case-lambda
                                                                  ((g$t$9675$jXZPP)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9676$jXZPP)
                                                                       (if g$ls/false$9676$jXZPP
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9614$jXZPP)))
                                                                           g$ls/false$9676$jXZPP)
                                                                         ((case-lambda
                                                                            ((g$t$9677$jXZPP)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9678$jXZPP)
                                                                                 (if (if g$ls/false$9678$jXZPP
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9679$jXZPP)
                                                                                              (not (g$stx?$7754$jXZPP
                                                                                                     g$p$9679$jXZPP))))
                                                                                           g$ls/false$9678$jXZPP))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9680$jXZPP)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9611$jXZPP
                                                                                               g$p$9680$jXZPP
                                                                                               g$n$9613$jXZPP
                                                                                               g$ids$9614$jXZPP)))
                                                                                          (case-lambda
                                                                                            ((g$p$9683$jXZPP
                                                                                               g$ids$9684$jXZPP)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9685$jXZPP
                                                                                                   g$p$9686$jXZPP)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9686$jXZPP)
                                                                                                   g$ids$9685$jXZPP)))
                                                                                              g$ids$9684$jXZPP
                                                                                              g$p$9683$jXZPP))))))
                                                                                     g$ls/false$9678$jXZPP)
                                                                                   ((case-lambda
                                                                                      ((g$t$9687$jXZPP)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9688$jXZPP)
                                                                                           (if g$ls/false$9688$jXZPP
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9689$jXZPP)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7793$jXZPP
                                                                                                        g$datum$9689$jXZPP))
                                                                                                    g$ids$9614$jXZPP)))
                                                                                               g$ls/false$9688$jXZPP)
                                                                                             (g$syntax-violation$8172$jXZPP
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9687$jXZPP))))
                                                                                        (g$syntax-dispatch$8060$jXZPP
                                                                                          g$t$9687$jXZPP
                                                                                          'any))))
                                                                                    g$t$9677$jXZPP))))
                                                                              (g$syntax-dispatch$8060$jXZPP
                                                                                g$t$9677$jXZPP
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9675$jXZPP))))
                                                                    (g$syntax-dispatch$8060$jXZPP
                                                                      g$t$9675$jXZPP
                                                                      '()))))
                                                                g$t$9659$jXZPP))))
                                                          (g$syntax-dispatch$8060$jXZPP
                                                            g$t$9659$jXZPP
                                                            '(any . any)))))
                                                      g$t$9631$jXZPP))))
                                                (g$syntax-dispatch$8060$jXZPP
                                                  g$t$9631$jXZPP
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9619$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$9619$jXZPP
                                        '(any any)))))
                                  g$t$9615$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$9615$jXZPP
                              'any))))
                        g$p$9612$jXZPP)))))
          (g$cvt$9611$jXZPP g$pattern$9608$jXZPP '0 '())))))
   (g$syntax-dispatch$8060$jXZPP
     g$syntax-dispatch$11563$jXZPP
     ((case-lambda
        (()
         (letrec* ((g$stx^$9705$jXZPP
                     (case-lambda
                       ((g$e$9815$jXZPP
                          g$m*$9816$jXZPP
                          g$s*$9817$jXZPP
                          g$ae*$9818$jXZPP)
                        (if (if (null? g$m*$9816$jXZPP)
                              (if (null? g$s*$9817$jXZPP)
                                (begin '#f (null? g$ae*$9818$jXZPP))
                                '#f)
                              '#f)
                          g$e$9815$jXZPP
                          (g$mkstx$7770$jXZPP
                            g$e$9815$jXZPP
                            g$m*$9816$jXZPP
                            g$s*$9817$jXZPP
                            g$ae*$9818$jXZPP)))))
                   (g$match-each$9706$jXZPP
                     (case-lambda
                       ((g$e$9799$jXZPP
                          g$p$9800$jXZPP
                          g$m*$9801$jXZPP
                          g$s*$9802$jXZPP
                          g$ae*$9803$jXZPP)
                        (if (pair? g$e$9799$jXZPP)
                          ((case-lambda
                             ((g$first$9804$jXZPP)
                              (if g$first$9804$jXZPP
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9805$jXZPP)
                                      (if g$rest$9805$jXZPP
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9804$jXZPP
                                            g$rest$9805$jXZPP))
                                        '#f)))
                                   (g$match-each$9706$jXZPP
                                     (cdr g$e$9799$jXZPP)
                                     g$p$9800$jXZPP
                                     g$m*$9801$jXZPP
                                     g$s*$9802$jXZPP
                                     g$ae*$9803$jXZPP)))
                                '#f)))
                           (g$match$9712$jXZPP
                             (car g$e$9799$jXZPP)
                             g$p$9800$jXZPP
                             g$m*$9801$jXZPP
                             g$s*$9802$jXZPP
                             g$ae*$9803$jXZPP
                             '()))
                          (if (null? g$e$9799$jXZPP)
                            '()
                            (if (g$stx?$7754$jXZPP g$e$9799$jXZPP)
                              (if (not (g$top-marked?$7720$jXZPP
                                         g$m*$9801$jXZPP))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7769$jXZPP
                                         g$m*$9801$jXZPP
                                         g$s*$9802$jXZPP
                                         g$ae*$9803$jXZPP
                                         g$e$9799$jXZPP)))
                                    (case-lambda
                                      ((g$m*$9809$jXZPP
                                         g$s*$9810$jXZPP
                                         g$ae*$9811$jXZPP)
                                       ((case-lambda
                                          ((g$ae*$9812$jXZPP
                                             g$s*$9813$jXZPP
                                             g$m*$9814$jXZPP)
                                           (g$match-each$9706$jXZPP
                                             (g$stx-expr$7756$jXZPP
                                               g$e$9799$jXZPP)
                                             g$p$9800$jXZPP
                                             g$m*$9814$jXZPP
                                             g$s*$9813$jXZPP
                                             g$ae*$9812$jXZPP)))
                                        g$ae*$9811$jXZPP
                                        g$s*$9810$jXZPP
                                        g$m*$9809$jXZPP)))))
                                '#f)
                              (if (annotation? g$e$9799$jXZPP)
                                (g$match-each$9706$jXZPP
                                  (annotation-expression g$e$9799$jXZPP)
                                  g$p$9800$jXZPP
                                  g$m*$9801$jXZPP
                                  g$s*$9802$jXZPP
                                  g$ae*$9803$jXZPP)
                                '#f)))))))
                   (g$match-each+$9707$jXZPP
                     (case-lambda
                       ((g$e$9767$jXZPP
                          g$x-pat$9768$jXZPP
                          g$y-pat$9769$jXZPP
                          g$z-pat$9770$jXZPP
                          g$m*$9771$jXZPP
                          g$s*$9772$jXZPP
                          g$ae*$9773$jXZPP
                          g$r$9774$jXZPP)
                        ((letrec ((g$f$9775$jXZPP
                                    (case-lambda
                                      ((g$e$9776$jXZPP
                                         g$m*$9777$jXZPP
                                         g$s*$9778$jXZPP
                                         g$ae*$9779$jXZPP)
                                       (if (pair? g$e$9776$jXZPP)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9775$jXZPP
                                                (cdr g$e$9776$jXZPP)
                                                g$m*$9777$jXZPP
                                                g$s*$9778$jXZPP
                                                g$ae*$9779$jXZPP)))
                                           (case-lambda
                                             ((g$xr*$9783$jXZPP
                                                g$y-pat$9784$jXZPP
                                                g$r$9785$jXZPP)
                                              ((case-lambda
                                                 ((g$r$9786$jXZPP
                                                    g$y-pat$9787$jXZPP
                                                    g$xr*$9788$jXZPP)
                                                  (if g$r$9786$jXZPP
                                                    (if (null?
                                                          g$y-pat$9787$jXZPP)
                                                      ((case-lambda
                                                         ((g$xr$9789$jXZPP)
                                                          (if g$xr$9789$jXZPP
                                                            (values
                                                              (cons
                                                                g$xr$9789$jXZPP
                                                                g$xr*$9788$jXZPP)
                                                              g$y-pat$9787$jXZPP
                                                              g$r$9786$jXZPP)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9712$jXZPP
                                                         (car g$e$9776$jXZPP)
                                                         g$x-pat$9768$jXZPP
                                                         g$m*$9777$jXZPP
                                                         g$s*$9778$jXZPP
                                                         g$ae*$9779$jXZPP
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9787$jXZPP)
                                                        (g$match$9712$jXZPP
                                                          (car g$e$9776$jXZPP)
                                                          (car g$y-pat$9787$jXZPP)
                                                          g$m*$9777$jXZPP
                                                          g$s*$9778$jXZPP
                                                          g$ae*$9779$jXZPP
                                                          g$r$9786$jXZPP)))
                                                    (values '#f '#f '#f))))
                                               g$r$9785$jXZPP
                                               g$y-pat$9784$jXZPP
                                               g$xr*$9783$jXZPP))))
                                         (if (g$stx?$7754$jXZPP g$e$9776$jXZPP)
                                           (if (g$top-marked?$7720$jXZPP
                                                 g$m*$9777$jXZPP)
                                             (values
                                               '()
                                               g$y-pat$9769$jXZPP
                                               (g$match$9712$jXZPP
                                                 g$e$9776$jXZPP
                                                 g$z-pat$9770$jXZPP
                                                 g$m*$9777$jXZPP
                                                 g$s*$9778$jXZPP
                                                 g$ae*$9779$jXZPP
                                                 g$r$9774$jXZPP))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7769$jXZPP
                                                    g$m*$9777$jXZPP
                                                    g$s*$9778$jXZPP
                                                    g$ae*$9779$jXZPP
                                                    g$e$9776$jXZPP)))
                                               (case-lambda
                                                 ((g$m*$9793$jXZPP
                                                    g$s*$9794$jXZPP
                                                    g$ae*$9795$jXZPP)
                                                  ((case-lambda
                                                     ((g$ae*$9796$jXZPP
                                                        g$s*$9797$jXZPP
                                                        g$m*$9798$jXZPP)
                                                      (g$f$9775$jXZPP
                                                        (g$stx-expr$7756$jXZPP
                                                          g$e$9776$jXZPP)
                                                        g$m*$9798$jXZPP
                                                        g$s*$9797$jXZPP
                                                        g$ae*$9796$jXZPP)))
                                                   g$ae*$9795$jXZPP
                                                   g$s*$9794$jXZPP
                                                   g$m*$9793$jXZPP)))))
                                           (if (annotation? g$e$9776$jXZPP)
                                             (g$f$9775$jXZPP
                                               (annotation-expression
                                                 g$e$9776$jXZPP)
                                               g$m*$9777$jXZPP
                                               g$s*$9778$jXZPP
                                               g$ae*$9779$jXZPP)
                                             (values
                                               '()
                                               g$y-pat$9769$jXZPP
                                               (g$match$9712$jXZPP
                                                 g$e$9776$jXZPP
                                                 g$z-pat$9770$jXZPP
                                                 g$m*$9777$jXZPP
                                                 g$s*$9778$jXZPP
                                                 g$ae*$9779$jXZPP
                                                 g$r$9774$jXZPP)))))))))
                           g$f$9775$jXZPP)
                         g$e$9767$jXZPP
                         g$m*$9771$jXZPP
                         g$s*$9772$jXZPP
                         g$ae*$9773$jXZPP))))
                   (g$match-each-any$9708$jXZPP
                     (case-lambda
                       ((g$e$9753$jXZPP
                          g$m*$9754$jXZPP
                          g$s*$9755$jXZPP
                          g$ae*$9756$jXZPP)
                        (if (pair? g$e$9753$jXZPP)
                          ((case-lambda
                             ((g$l$9757$jXZPP)
                              (if g$l$9757$jXZPP
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9705$jXZPP
                                      (car g$e$9753$jXZPP)
                                      g$m*$9754$jXZPP
                                      g$s*$9755$jXZPP
                                      g$ae*$9756$jXZPP)
                                    g$l$9757$jXZPP))
                                '#f)))
                           (g$match-each-any$9708$jXZPP
                             (cdr g$e$9753$jXZPP)
                             g$m*$9754$jXZPP
                             g$s*$9755$jXZPP
                             g$ae*$9756$jXZPP))
                          (if (null? g$e$9753$jXZPP)
                            '()
                            (if (g$stx?$7754$jXZPP g$e$9753$jXZPP)
                              (if (not (g$top-marked?$7720$jXZPP
                                         g$m*$9754$jXZPP))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7769$jXZPP
                                         g$m*$9754$jXZPP
                                         g$s*$9755$jXZPP
                                         g$ae*$9756$jXZPP
                                         g$e$9753$jXZPP)))
                                    (case-lambda
                                      ((g$m*$9761$jXZPP
                                         g$s*$9762$jXZPP
                                         g$ae*$9763$jXZPP)
                                       ((case-lambda
                                          ((g$ae*$9764$jXZPP
                                             g$s*$9765$jXZPP
                                             g$m*$9766$jXZPP)
                                           (g$match-each-any$9708$jXZPP
                                             (g$stx-expr$7756$jXZPP
                                               g$e$9753$jXZPP)
                                             g$m*$9766$jXZPP
                                             g$s*$9765$jXZPP
                                             g$ae*$9764$jXZPP)))
                                        g$ae*$9763$jXZPP
                                        g$s*$9762$jXZPP
                                        g$m*$9761$jXZPP)))))
                                '#f)
                              (if (annotation? g$e$9753$jXZPP)
                                (g$match-each-any$9708$jXZPP
                                  (annotation-expression g$e$9753$jXZPP)
                                  g$m*$9754$jXZPP
                                  g$s*$9755$jXZPP
                                  g$ae*$9756$jXZPP)
                                '#f)))))))
                   (g$match-empty$9709$jXZPP
                     (case-lambda
                       ((g$p$9750$jXZPP g$r$9751$jXZPP)
                        (if (null? g$p$9750$jXZPP)
                          g$r$9751$jXZPP
                          (if (eq? g$p$9750$jXZPP '_)
                            g$r$9751$jXZPP
                            (if (eq? g$p$9750$jXZPP 'any)
                              (cons '() g$r$9751$jXZPP)
                              (if (pair? g$p$9750$jXZPP)
                                (g$match-empty$9709$jXZPP
                                  (car g$p$9750$jXZPP)
                                  (g$match-empty$9709$jXZPP
                                    (cdr g$p$9750$jXZPP)
                                    g$r$9751$jXZPP))
                                (if (eq? g$p$9750$jXZPP 'each-any)
                                  (cons '() g$r$9751$jXZPP)
                                  ((case-lambda
                                     ((g$t$9752$jXZPP)
                                      (if (g$memv$5071$jXZPP
                                            g$t$9752$jXZPP
                                            '(each))
                                        (g$match-empty$9709$jXZPP
                                          (vector-ref g$p$9750$jXZPP '1)
                                          g$r$9751$jXZPP)
                                        (if (g$memv$5071$jXZPP
                                              g$t$9752$jXZPP
                                              '(each+))
                                          (g$match-empty$9709$jXZPP
                                            (vector-ref g$p$9750$jXZPP '1)
                                            (g$match-empty$9709$jXZPP
                                              (reverse
                                                (vector-ref g$p$9750$jXZPP '2))
                                              (g$match-empty$9709$jXZPP
                                                (vector-ref g$p$9750$jXZPP '3)
                                                g$r$9751$jXZPP)))
                                          (if (g$memv$5071$jXZPP
                                                g$t$9752$jXZPP
                                                '(free-id atom))
                                            g$r$9751$jXZPP
                                            (if (g$memv$5071$jXZPP
                                                  g$t$9752$jXZPP
                                                  '(scheme-id atom))
                                              g$r$9751$jXZPP
                                              (if (g$memv$5071$jXZPP
                                                    g$t$9752$jXZPP
                                                    '(vector))
                                                (g$match-empty$9709$jXZPP
                                                  (vector-ref g$p$9750$jXZPP '1)
                                                  g$r$9751$jXZPP)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9750$jXZPP))))))))
                                   (vector-ref g$p$9750$jXZPP '0))))))))))
                   (g$combine$9710$jXZPP
                     (case-lambda
                       ((g$r*$9748$jXZPP g$r$9749$jXZPP)
                        (if (null? (car g$r*$9748$jXZPP))
                          g$r$9749$jXZPP
                          (cons
                            (g$map$5078$jXZPP car g$r*$9748$jXZPP)
                            (g$combine$9710$jXZPP
                              (g$map$5078$jXZPP cdr g$r*$9748$jXZPP)
                              g$r$9749$jXZPP))))))
                   (g$match*$9711$jXZPP
                     (case-lambda
                       ((g$e$9730$jXZPP
                          g$p$9731$jXZPP
                          g$m*$9732$jXZPP
                          g$s*$9733$jXZPP
                          g$ae*$9734$jXZPP
                          g$r$9735$jXZPP)
                        (if (null? g$p$9731$jXZPP)
                          (if (null? g$e$9730$jXZPP)
                            (begin '#f g$r$9735$jXZPP)
                            '#f)
                          (if (pair? g$p$9731$jXZPP)
                            (if (pair? g$e$9730$jXZPP)
                              (begin
                                '#f
                                (g$match$9712$jXZPP
                                  (car g$e$9730$jXZPP)
                                  (car g$p$9731$jXZPP)
                                  g$m*$9732$jXZPP
                                  g$s*$9733$jXZPP
                                  g$ae*$9734$jXZPP
                                  (g$match$9712$jXZPP
                                    (cdr g$e$9730$jXZPP)
                                    (cdr g$p$9731$jXZPP)
                                    g$m*$9732$jXZPP
                                    g$s*$9733$jXZPP
                                    g$ae*$9734$jXZPP
                                    g$r$9735$jXZPP)))
                              '#f)
                            (if (eq? g$p$9731$jXZPP 'each-any)
                              ((case-lambda
                                 ((g$l$9736$jXZPP)
                                  (if g$l$9736$jXZPP
                                    (begin
                                      '#f
                                      (cons g$l$9736$jXZPP g$r$9735$jXZPP))
                                    '#f)))
                               (g$match-each-any$9708$jXZPP
                                 g$e$9730$jXZPP
                                 g$m*$9732$jXZPP
                                 g$s*$9733$jXZPP
                                 g$ae*$9734$jXZPP))
                              ((case-lambda
                                 ((g$t$9737$jXZPP)
                                  (if (g$memv$5071$jXZPP g$t$9737$jXZPP '(each))
                                    (if (null? g$e$9730$jXZPP)
                                      (g$match-empty$9709$jXZPP
                                        (vector-ref g$p$9731$jXZPP '1)
                                        g$r$9735$jXZPP)
                                      ((case-lambda
                                         ((g$r*$9738$jXZPP)
                                          (if g$r*$9738$jXZPP
                                            (begin
                                              '#f
                                              (g$combine$9710$jXZPP
                                                g$r*$9738$jXZPP
                                                g$r$9735$jXZPP))
                                            '#f)))
                                       (g$match-each$9706$jXZPP
                                         g$e$9730$jXZPP
                                         (vector-ref g$p$9731$jXZPP '1)
                                         g$m*$9732$jXZPP
                                         g$s*$9733$jXZPP
                                         g$ae*$9734$jXZPP)))
                                    (if (g$memv$5071$jXZPP
                                          g$t$9737$jXZPP
                                          '(free-id))
                                      (if (symbol? g$e$9730$jXZPP)
                                        (if (g$top-marked?$7720$jXZPP
                                              g$m*$9732$jXZPP)
                                          (if (g$free-id=?$7786$jXZPP
                                                (g$stx^$9705$jXZPP
                                                  g$e$9730$jXZPP
                                                  g$m*$9732$jXZPP
                                                  g$s*$9733$jXZPP
                                                  g$ae*$9734$jXZPP)
                                                (vector-ref g$p$9731$jXZPP '1))
                                            (begin '#f g$r$9735$jXZPP)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5071$jXZPP
                                            g$t$9737$jXZPP
                                            '(scheme-id))
                                        (if (symbol? g$e$9730$jXZPP)
                                          (if (g$top-marked?$7720$jXZPP
                                                g$m*$9732$jXZPP)
                                            (if (g$free-id=?$7786$jXZPP
                                                  (g$stx^$9705$jXZPP
                                                    g$e$9730$jXZPP
                                                    g$m*$9732$jXZPP
                                                    g$s*$9733$jXZPP
                                                    g$ae*$9734$jXZPP)
                                                  (g$scheme-stx$8003$jXZPP
                                                    (vector-ref
                                                      g$p$9731$jXZPP
                                                      '1)))
                                              (begin '#f g$r$9735$jXZPP)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5071$jXZPP
                                              g$t$9737$jXZPP
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9707$jXZPP
                                                 g$e$9730$jXZPP
                                                 (vector-ref g$p$9731$jXZPP '1)
                                                 (vector-ref g$p$9731$jXZPP '2)
                                                 (vector-ref g$p$9731$jXZPP '3)
                                                 g$m*$9732$jXZPP
                                                 g$s*$9733$jXZPP
                                                 g$ae*$9734$jXZPP
                                                 g$r$9735$jXZPP)))
                                            (case-lambda
                                              ((g$xr*$9742$jXZPP
                                                 g$y-pat$9743$jXZPP
                                                 g$r$9744$jXZPP)
                                               ((case-lambda
                                                  ((g$r$9745$jXZPP
                                                     g$y-pat$9746$jXZPP
                                                     g$xr*$9747$jXZPP)
                                                   (if g$r$9745$jXZPP
                                                     (if (null?
                                                           g$y-pat$9746$jXZPP)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9747$jXZPP)
                                                           (g$match-empty$9709$jXZPP
                                                             (vector-ref
                                                               g$p$9731$jXZPP
                                                               '1)
                                                             g$r$9745$jXZPP)
                                                           (g$combine$9710$jXZPP
                                                             g$xr*$9747$jXZPP
                                                             g$r$9745$jXZPP)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9744$jXZPP
                                                g$y-pat$9743$jXZPP
                                                g$xr*$9742$jXZPP))))
                                          (if (g$memv$5071$jXZPP
                                                g$t$9737$jXZPP
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref g$p$9731$jXZPP '1)
                                                  (g$strip$7792$jXZPP
                                                    g$e$9730$jXZPP
                                                    g$m*$9732$jXZPP))
                                              (begin '#f g$r$9735$jXZPP)
                                              '#f)
                                            (if (g$memv$5071$jXZPP
                                                  g$t$9737$jXZPP
                                                  '(vector))
                                              (if (vector? g$e$9730$jXZPP)
                                                (begin
                                                  '#f
                                                  (g$match$9712$jXZPP
                                                    (vector->list
                                                      g$e$9730$jXZPP)
                                                    (vector-ref
                                                      g$p$9731$jXZPP
                                                      '1)
                                                    g$m*$9732$jXZPP
                                                    g$s*$9733$jXZPP
                                                    g$ae*$9734$jXZPP
                                                    g$r$9735$jXZPP))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9731$jXZPP)))))))))
                               (vector-ref g$p$9731$jXZPP '0))))))))
                   (g$match$9712$jXZPP
                     (case-lambda
                       ((g$e$9715$jXZPP
                          g$p$9716$jXZPP
                          g$m*$9717$jXZPP
                          g$s*$9718$jXZPP
                          g$ae*$9719$jXZPP
                          g$r$9720$jXZPP)
                        (if (not g$r$9720$jXZPP)
                          '#f
                          (if (eq? g$p$9716$jXZPP '_)
                            g$r$9720$jXZPP
                            (if (eq? g$p$9716$jXZPP 'any)
                              (cons
                                (g$stx^$9705$jXZPP
                                  g$e$9715$jXZPP
                                  g$m*$9717$jXZPP
                                  g$s*$9718$jXZPP
                                  g$ae*$9719$jXZPP)
                                g$r$9720$jXZPP)
                              (if (g$stx?$7754$jXZPP g$e$9715$jXZPP)
                                (if (not (g$top-marked?$7720$jXZPP
                                           g$m*$9717$jXZPP))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7769$jXZPP
                                           g$m*$9717$jXZPP
                                           g$s*$9718$jXZPP
                                           g$ae*$9719$jXZPP
                                           g$e$9715$jXZPP)))
                                      (case-lambda
                                        ((g$m*$9724$jXZPP
                                           g$s*$9725$jXZPP
                                           g$ae*$9726$jXZPP)
                                         ((case-lambda
                                            ((g$ae*$9727$jXZPP
                                               g$s*$9728$jXZPP
                                               g$m*$9729$jXZPP)
                                             (g$match$9712$jXZPP
                                               (g$stx-expr$7756$jXZPP
                                                 g$e$9715$jXZPP)
                                               g$p$9716$jXZPP
                                               g$m*$9729$jXZPP
                                               g$s*$9728$jXZPP
                                               g$ae*$9727$jXZPP
                                               g$r$9720$jXZPP)))
                                          g$ae*$9726$jXZPP
                                          g$s*$9725$jXZPP
                                          g$m*$9724$jXZPP)))))
                                  '#f)
                                (if (annotation? g$e$9715$jXZPP)
                                  (g$match$9712$jXZPP
                                    (annotation-expression g$e$9715$jXZPP)
                                    g$p$9716$jXZPP
                                    g$m*$9717$jXZPP
                                    g$s*$9718$jXZPP
                                    g$ae*$9719$jXZPP
                                    g$r$9720$jXZPP)
                                  (g$match*$9711$jXZPP
                                    g$e$9715$jXZPP
                                    g$p$9716$jXZPP
                                    g$m*$9717$jXZPP
                                    g$s*$9718$jXZPP
                                    g$ae*$9719$jXZPP
                                    g$r$9720$jXZPP))))))))))
           (case-lambda
             ((g$e$9713$jXZPP g$p$9714$jXZPP)
              (g$match$9712$jXZPP
                g$e$9713$jXZPP
                g$p$9714$jXZPP
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$8061$jXZPP
     g$ellipsis?$11564$jXZPP
     (case-lambda
       ((g$x$9819$jXZPP)
        (if (g$id?$7782$jXZPP g$x$9819$jXZPP)
          (begin
            '#f
            (g$free-id=?$7786$jXZPP
              g$x$9819$jXZPP
              (g$scheme-stx$8003$jXZPP '...)))
          '#f))))
   (g$underscore?$8062$jXZPP
     g$underscore?$11565$jXZPP
     (case-lambda
       ((g$x$9820$jXZPP)
        (if (g$id?$7782$jXZPP g$x$9820$jXZPP)
          (begin
            '#f
            (g$free-id=?$7786$jXZPP
              g$x$9820$jXZPP
              (g$scheme-stx$8003$jXZPP '_)))
          '#f))))
   (g$verify-literals$8063$jXZPP
     g$verify-literals$11566$jXZPP
     (case-lambda
       ((g$lits$9821$jXZPP g$expr$9822$jXZPP)
        (g$for-each$5079$jXZPP
          (case-lambda
            ((g$x$9823$jXZPP)
             (if ((case-lambda
                    ((g$t$9824$jXZPP)
                     (if g$t$9824$jXZPP
                       g$t$9824$jXZPP
                       ((case-lambda
                          ((g$t$9825$jXZPP)
                           (if g$t$9825$jXZPP
                             g$t$9825$jXZPP
                             (begin
                               '#f
                               (g$underscore?$8062$jXZPP g$x$9823$jXZPP)))))
                        (g$ellipsis?$8061$jXZPP g$x$9823$jXZPP)))))
                  (not (g$id?$7782$jXZPP g$x$9823$jXZPP)))
               (g$syntax-violation$8172$jXZPP
                 '#f
                 '"invalid literal"
                 g$expr$9822$jXZPP
                 g$x$9823$jXZPP)
               (void))))
          g$lits$9821$jXZPP))))
   (g$syntax-case-transformer$8064$jXZPP
     g$syntax-case-transformer$11567$jXZPP
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9826$jXZPP
                     (case-lambda
                       ((g$pvars$9883$jXZPP
                          g$expr$9884$jXZPP
                          g$y$9885$jXZPP
                          g$r$9886$jXZPP
                          g$mr$9887$jXZPP)
                        ((case-lambda
                           ((g$ids$9888$jXZPP g$levels$9889$jXZPP)
                            ((case-lambda
                               ((g$labels$9890$jXZPP g$new-vars$9891$jXZPP)
                                ((case-lambda
                                   ((g$body$9892$jXZPP)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7708$jXZPP
                                        '#f
                                        g$new-vars$9891$jXZPP
                                        g$body$9892$jXZPP)
                                      g$y$9885$jXZPP)))
                                 (g$chi-expr$8078$jXZPP
                                   (g$add-subst$7772$jXZPP
                                     (g$make-full-rib$7750$jXZPP
                                       g$ids$9888$jXZPP
                                       g$labels$9890$jXZPP)
                                     g$expr$9884$jXZPP)
                                   (append
                                     (g$map$5078$jXZPP
                                       (case-lambda
                                         ((g$label$9893$jXZPP
                                            g$var$9894$jXZPP
                                            g$level$9895$jXZPP)
                                          (cons
                                            g$label$9893$jXZPP
                                            (g$make-binding$7798$jXZPP
                                              'syntax
                                              (cons
                                                g$var$9894$jXZPP
                                                g$level$9895$jXZPP)))))
                                       g$labels$9890$jXZPP
                                       g$new-vars$9891$jXZPP
                                       (g$map$5078$jXZPP
                                         cdr
                                         g$pvars$9883$jXZPP))
                                     g$r$9886$jXZPP)
                                   g$mr$9887$jXZPP))))
                             (g$map$5078$jXZPP
                               g$gen-label$7723$jXZPP
                               g$ids$9888$jXZPP)
                             (g$map$5078$jXZPP
                               g$gen-lexical$7721$jXZPP
                               g$ids$9888$jXZPP))))
                         (g$map$5078$jXZPP car g$pvars$9883$jXZPP)
                         (g$map$5078$jXZPP cdr g$pvars$9883$jXZPP)))))
                   (g$invalid-ids-error$9827$jXZPP
                     (case-lambda
                       ((g$id*$9877$jXZPP g$e$9878$jXZPP g$class$9879$jXZPP)
                        ((letrec ((g$find$9880$jXZPP
                                    (case-lambda
                                      ((g$id*$9881$jXZPP g$ok*$9882$jXZPP)
                                       (if (null? g$id*$9881$jXZPP)
                                         (g$syntax-violation$8172$jXZPP
                                           '#f
                                           '"invalid syntax"
                                           g$e$9878$jXZPP)
                                         (if (g$id?$7782$jXZPP
                                               (car g$id*$9881$jXZPP))
                                           (if (g$bound-id-member?$7789$jXZPP
                                                 (car g$id*$9881$jXZPP)
                                                 g$ok*$9882$jXZPP)
                                             (g$syntax-error$8169$jXZPP
                                               (car g$id*$9881$jXZPP)
                                               '"duplicate "
                                               g$class$9879$jXZPP)
                                             (g$find$9880$jXZPP
                                               (cdr g$id*$9881$jXZPP)
                                               (cons
                                                 (car g$id*$9881$jXZPP)
                                                 g$ok*$9882$jXZPP)))
                                           (g$syntax-error$8169$jXZPP
                                             (car g$id*$9881$jXZPP)
                                             '"invalid "
                                             g$class$9879$jXZPP)))))))
                           g$find$9880$jXZPP)
                         g$id*$9877$jXZPP
                         '()))))
                   (g$gen-clause$9828$jXZPP
                     (case-lambda
                       ((g$x$9857$jXZPP
                          g$keys$9858$jXZPP
                          g$clauses$9859$jXZPP
                          g$r$9860$jXZPP
                          g$mr$9861$jXZPP
                          g$pat$9862$jXZPP
                          g$fender$9863$jXZPP
                          g$expr$9864$jXZPP)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$8059$jXZPP
                               g$pat$9862$jXZPP
                               g$keys$9858$jXZPP)))
                          (case-lambda
                            ((g$p$9867$jXZPP g$pvars$9868$jXZPP)
                             ((case-lambda
                                ((g$pvars$9869$jXZPP g$p$9870$jXZPP)
                                 (if (not (g$distinct-bound-ids?$7788$jXZPP
                                            (g$map$5078$jXZPP
                                              car
                                              g$pvars$9869$jXZPP)))
                                   (g$invalid-ids-error$9827$jXZPP
                                     (g$map$5078$jXZPP car g$pvars$9869$jXZPP)
                                     g$pat$9862$jXZPP
                                     '"pattern variable")
                                   (if (not (g$for-all$5076$jXZPP
                                              (case-lambda
                                                ((g$x$9871$jXZPP)
                                                 (not (g$ellipsis?$8061$jXZPP
                                                        (car g$x$9871$jXZPP)))))
                                              g$pvars$9869$jXZPP))
                                     (g$syntax-violation$8172$jXZPP
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9862$jXZPP)
                                     ((case-lambda
                                        ((g$y$9872$jXZPP)
                                         ((case-lambda
                                            ((g$test$9873$jXZPP)
                                             ((case-lambda
                                                ((g$conseq$9874$jXZPP)
                                                 ((case-lambda
                                                    ((g$altern$9875$jXZPP)
                                                     (list
                                                       (g$build-lambda$7708$jXZPP
                                                         '#f
                                                         (list g$y$9872$jXZPP)
                                                         (list
                                                           'if
                                                           g$test$9873$jXZPP
                                                           g$conseq$9874$jXZPP
                                                           g$altern$9875$jXZPP))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9857$jXZPP
                                                         (list
                                                           'quote
                                                           g$p$9870$jXZPP)))))
                                                  (g$gen-syntax-case$9829$jXZPP
                                                    g$x$9857$jXZPP
                                                    g$keys$9858$jXZPP
                                                    g$clauses$9859$jXZPP
                                                    g$r$9860$jXZPP
                                                    g$mr$9861$jXZPP))))
                                              (g$build-dispatch-call$9826$jXZPP
                                                g$pvars$9869$jXZPP
                                                g$expr$9864$jXZPP
                                                g$y$9872$jXZPP
                                                g$r$9860$jXZPP
                                                g$mr$9861$jXZPP))))
                                          (if (eq? g$fender$9863$jXZPP '#t)
                                            g$y$9872$jXZPP
                                            ((case-lambda
                                               ((g$call$9876$jXZPP)
                                                (list
                                                  'if
                                                  g$y$9872$jXZPP
                                                  g$call$9876$jXZPP
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9826$jXZPP
                                               g$pvars$9869$jXZPP
                                               g$fender$9863$jXZPP
                                               g$y$9872$jXZPP
                                               g$r$9860$jXZPP
                                               g$mr$9861$jXZPP))))))
                                      (g$gen-lexical$7721$jXZPP 'tmp))))))
                              g$pvars$9868$jXZPP
                              g$p$9867$jXZPP)))))))
                   (g$gen-syntax-case$9829$jXZPP
                     (case-lambda
                       ((g$x$9840$jXZPP
                          g$keys$9841$jXZPP
                          g$clauses$9842$jXZPP
                          g$r$9843$jXZPP
                          g$mr$9844$jXZPP)
                        (if (null? g$clauses$9842$jXZPP)
                          (list '(primitive syntax-error) g$x$9840$jXZPP)
                          ((case-lambda
                             ((g$t$9845$jXZPP)
                              ((case-lambda
                                 ((g$ls/false$9846$jXZPP)
                                  (if g$ls/false$9846$jXZPP
                                    (apply
                                      (case-lambda
                                        ((g$pat$9847$jXZPP g$expr$9848$jXZPP)
                                         (if (if (g$id?$7782$jXZPP
                                                   g$pat$9847$jXZPP)
                                               (if (not (g$bound-id-member?$7789$jXZPP
                                                          g$pat$9847$jXZPP
                                                          g$keys$9841$jXZPP))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$8061$jXZPP
                                                          g$pat$9847$jXZPP)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7786$jXZPP
                                                 g$pat$9847$jXZPP
                                                 (g$scheme-stx$8003$jXZPP '_))
                                             (g$chi-expr$8078$jXZPP
                                               g$expr$9848$jXZPP
                                               g$r$9843$jXZPP
                                               g$mr$9844$jXZPP)
                                             ((case-lambda
                                                ((g$lab$9849$jXZPP
                                                   g$lex$9850$jXZPP)
                                                 ((case-lambda
                                                    ((g$body$9851$jXZPP)
                                                     (list
                                                       (g$build-lambda$7708$jXZPP
                                                         '#f
                                                         (list g$lex$9850$jXZPP)
                                                         g$body$9851$jXZPP)
                                                       g$x$9840$jXZPP)))
                                                  (g$chi-expr$8078$jXZPP
                                                    (g$add-subst$7772$jXZPP
                                                      (g$make-full-rib$7750$jXZPP
                                                        (list g$pat$9847$jXZPP)
                                                        (list g$lab$9849$jXZPP))
                                                      g$expr$9848$jXZPP)
                                                    (cons
                                                      (cons
                                                        g$lab$9849$jXZPP
                                                        (g$make-binding$7798$jXZPP
                                                          'syntax
                                                          (cons
                                                            g$lex$9850$jXZPP
                                                            '0)))
                                                      g$r$9843$jXZPP)
                                                    g$mr$9844$jXZPP))))
                                              (g$gen-label$7723$jXZPP
                                                g$pat$9847$jXZPP)
                                              (g$gen-lexical$7721$jXZPP
                                                g$pat$9847$jXZPP)))
                                           (g$gen-clause$9828$jXZPP
                                             g$x$9840$jXZPP
                                             g$keys$9841$jXZPP
                                             (cdr g$clauses$9842$jXZPP)
                                             g$r$9843$jXZPP
                                             g$mr$9844$jXZPP
                                             g$pat$9847$jXZPP
                                             '#t
                                             g$expr$9848$jXZPP))))
                                      g$ls/false$9846$jXZPP)
                                    ((case-lambda
                                       ((g$t$9852$jXZPP)
                                        ((case-lambda
                                           ((g$ls/false$9853$jXZPP)
                                            (if g$ls/false$9853$jXZPP
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9854$jXZPP
                                                     g$fender$9855$jXZPP
                                                     g$expr$9856$jXZPP)
                                                   (g$gen-clause$9828$jXZPP
                                                     g$x$9840$jXZPP
                                                     g$keys$9841$jXZPP
                                                     (cdr g$clauses$9842$jXZPP)
                                                     g$r$9843$jXZPP
                                                     g$mr$9844$jXZPP
                                                     g$pat$9854$jXZPP
                                                     g$fender$9855$jXZPP
                                                     g$expr$9856$jXZPP)))
                                                g$ls/false$9853$jXZPP)
                                              (g$syntax-violation$8172$jXZPP
                                                '#f
                                                '"invalid syntax"
                                                g$t$9852$jXZPP))))
                                         (g$syntax-dispatch$8060$jXZPP
                                           g$t$9852$jXZPP
                                           '(any any any)))))
                                     g$t$9845$jXZPP))))
                               (g$syntax-dispatch$8060$jXZPP
                                 g$t$9845$jXZPP
                                 '(any any)))))
                           (car g$clauses$9842$jXZPP)))))))
           (case-lambda
             ((g$e$9830$jXZPP g$r$9831$jXZPP g$mr$9832$jXZPP)
              ((case-lambda
                 ((g$t$9833$jXZPP)
                  ((case-lambda
                     ((g$ls/false$9834$jXZPP)
                      (if g$ls/false$9834$jXZPP
                        (apply
                          (case-lambda
                            ((g$expr$9835$jXZPP
                               g$keys$9836$jXZPP
                               g$clauses$9837$jXZPP)
                             (begin
                               (g$verify-literals$8063$jXZPP
                                 g$keys$9836$jXZPP
                                 g$e$9830$jXZPP)
                               ((case-lambda
                                  ((g$x$9838$jXZPP)
                                   ((case-lambda
                                      ((g$body$9839$jXZPP)
                                       (list
                                         (g$build-lambda$7708$jXZPP
                                           '#f
                                           (list g$x$9838$jXZPP)
                                           g$body$9839$jXZPP)
                                         (g$chi-expr$8078$jXZPP
                                           g$expr$9835$jXZPP
                                           g$r$9831$jXZPP
                                           g$mr$9832$jXZPP))))
                                    (g$gen-syntax-case$9829$jXZPP
                                      g$x$9838$jXZPP
                                      g$keys$9836$jXZPP
                                      g$clauses$9837$jXZPP
                                      g$r$9831$jXZPP
                                      g$mr$9832$jXZPP))))
                                (g$gen-lexical$7721$jXZPP 'tmp)))))
                          g$ls/false$9834$jXZPP)
                        (g$syntax-violation$8172$jXZPP
                          '#f
                          '"invalid syntax"
                          g$t$9833$jXZPP))))
                   (g$syntax-dispatch$8060$jXZPP
                     g$t$9833$jXZPP
                     '(_ any each-any . each-any)))))
               g$e$9830$jXZPP))))))))
   (g$ellipsis-map$8065$jXZPP
     g$ellipsis-map$11568$jXZPP
     (case-lambda
       ((g$proc$9896$jXZPP g$ls$9897$jXZPP . g$ls*$9898$jXZPP)
        (letrec* ((g$who$9899$jXZPP '...))
          (begin
            (if (not (list? g$ls$9897$jXZPP))
              (assertion-violation
                g$who$9899$jXZPP
                '"not a list"
                g$ls$9897$jXZPP)
              (void))
            (if (not (null? g$ls*$9898$jXZPP))
              ((case-lambda
                 ((g$n$9900$jXZPP)
                  (g$for-each$5079$jXZPP
                    (case-lambda
                      ((g$x$9901$jXZPP)
                       (begin
                         (if (not (list? g$x$9901$jXZPP))
                           (assertion-violation
                             g$who$9899$jXZPP
                             '"not a list"
                             g$x$9901$jXZPP)
                           (void))
                         (if (not (= (length g$x$9901$jXZPP) g$n$9900$jXZPP))
                           (assertion-violation
                             g$who$9899$jXZPP
                             '"length mismatch"
                             g$ls$9897$jXZPP
                             g$x$9901$jXZPP)
                           (void)))))
                    g$ls*$9898$jXZPP)))
               (length g$ls$9897$jXZPP))
              (void))
            (apply
              g$map$5078$jXZPP
              g$proc$9896$jXZPP
              g$ls$9897$jXZPP
              g$ls*$9898$jXZPP))))))
   (g$syntax-transformer$8066$jXZPP
     g$syntax-transformer$11569$jXZPP
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9902$jXZPP
                     (case-lambda
                       ((g$src$9962$jXZPP
                          g$e$9963$jXZPP
                          g$r$9964$jXZPP
                          g$maps$9965$jXZPP
                          g$ellipsis?$9966$jXZPP
                          g$vec?$9967$jXZPP)
                        ((case-lambda
                           ((g$t$9968$jXZPP)
                            ((case-lambda
                               ((g$ls/false$9969$jXZPP)
                                (if (if g$ls/false$9969$jXZPP
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9970$jXZPP)
                                             (g$ellipsis?$9966$jXZPP
                                               g$dots$9970$jXZPP)))
                                          g$ls/false$9969$jXZPP))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9971$jXZPP)
                                       (g$syntax-violation$8172$jXZPP
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9962$jXZPP)))
                                    g$ls/false$9969$jXZPP)
                                  ((case-lambda
                                     ((g$t$9972$jXZPP)
                                      ((case-lambda
                                         ((g$ls/false$9973$jXZPP)
                                          (if (if g$ls/false$9973$jXZPP
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9974$jXZPP)
                                                       (g$id?$7782$jXZPP
                                                         g$id$9974$jXZPP)))
                                                    g$ls/false$9973$jXZPP))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9975$jXZPP)
                                                 ((case-lambda
                                                    ((g$label$9976$jXZPP)
                                                     ((case-lambda
                                                        ((g$b$9977$jXZPP)
                                                         (if (eq? (g$binding-type$7799$jXZPP
                                                                    g$b$9977$jXZPP)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$9980$jXZPP)
                                                                    (g$gen-ref$9903$jXZPP
                                                                      g$src$9962$jXZPP
                                                                      (car g$var.lev$9980$jXZPP)
                                                                      (cdr g$var.lev$9980$jXZPP)
                                                                      g$maps$9965$jXZPP)))
                                                                 (g$binding-value$7800$jXZPP
                                                                   g$b$9977$jXZPP))))
                                                             (case-lambda
                                                               ((g$var$9981$jXZPP
                                                                  g$maps$9982$jXZPP)
                                                                ((case-lambda
                                                                   ((g$maps$9983$jXZPP
                                                                      g$var$9984$jXZPP)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$9984$jXZPP)
                                                                      g$maps$9983$jXZPP)))
                                                                 g$maps$9982$jXZPP
                                                                 g$var$9981$jXZPP))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$9963$jXZPP)
                                                             g$maps$9965$jXZPP))))
                                                      (g$label->binding$7797$jXZPP
                                                        g$label$9976$jXZPP
                                                        g$r$9964$jXZPP))))
                                                  (g$id->label$7795$jXZPP
                                                    g$e$9963$jXZPP))))
                                              g$ls/false$9973$jXZPP)
                                            ((case-lambda
                                               ((g$t$9985$jXZPP)
                                                ((case-lambda
                                                   ((g$ls/false$9986$jXZPP)
                                                    (if (if g$ls/false$9986$jXZPP
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9987$jXZPP
                                                                   g$e$9988$jXZPP)
                                                                 (g$ellipsis?$9966$jXZPP
                                                                   g$dots$9987$jXZPP)))
                                                              g$ls/false$9986$jXZPP))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9989$jXZPP
                                                             g$e$9990$jXZPP)
                                                           (if g$vec?$9967$jXZPP
                                                             (g$syntax-violation$8172$jXZPP
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9962$jXZPP)
                                                             (g$gen-syntax$9902$jXZPP
                                                               g$src$9962$jXZPP
                                                               g$e$9990$jXZPP
                                                               g$r$9964$jXZPP
                                                               g$maps$9965$jXZPP
                                                               (case-lambda
                                                                 ((g$x$9991$jXZPP)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9986$jXZPP)
                                                      ((case-lambda
                                                         ((g$t$9992$jXZPP)
                                                          ((case-lambda
                                                             ((g$ls/false$9993$jXZPP)
                                                              (if (if g$ls/false$9993$jXZPP
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9994$jXZPP
                                                                             g$dots$9995$jXZPP
                                                                             g$y$9996$jXZPP)
                                                                           (g$ellipsis?$9966$jXZPP
                                                                             g$dots$9995$jXZPP)))
                                                                        g$ls/false$9993$jXZPP))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9997$jXZPP
                                                                       g$dots$9998$jXZPP
                                                                       g$y$9999$jXZPP)
                                                                     ((letrec ((g$f$10000$jXZPP
                                                                                 (case-lambda
                                                                                   ((g$y$10001$jXZPP
                                                                                      g$k$10002$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$t$10003$jXZPP)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10004$jXZPP)
                                                                                            (if g$ls/false$10004$jXZPP
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$10002$jXZPP
                                                                                                     g$maps$9965$jXZPP)))
                                                                                                g$ls/false$10004$jXZPP)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10005$jXZPP)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10006$jXZPP)
                                                                                                      (if (if g$ls/false$10006$jXZPP
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$10007$jXZPP
                                                                                                                     g$y$10008$jXZPP)
                                                                                                                   (g$ellipsis?$9966$jXZPP
                                                                                                                     g$dots$10007$jXZPP)))
                                                                                                                g$ls/false$10006$jXZPP))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$10009$jXZPP
                                                                                                               g$y$10010$jXZPP)
                                                                                                             (g$f$10000$jXZPP
                                                                                                               g$y$10010$jXZPP
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$10011$jXZPP)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$10002$jXZPP
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$10011$jXZPP))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$10014$jXZPP
                                                                                                                         g$maps$10015$jXZPP)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$10016$jXZPP
                                                                                                                             g$x$10017$jXZPP)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$10016$jXZPP))
                                                                                                                             (g$syntax-violation$8172$jXZPP
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9962$jXZPP)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9905$jXZPP
                                                                                                                                 g$x$10017$jXZPP
                                                                                                                                 (car g$maps$10016$jXZPP))
                                                                                                                               (cdr g$maps$10016$jXZPP)))))
                                                                                                                        g$maps$10015$jXZPP
                                                                                                                        g$x$10014$jXZPP)))))))))
                                                                                                          g$ls/false$10006$jXZPP)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$10018$jXZPP)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$10019$jXZPP)
                                                                                                                (if g$ls/false$10019$jXZPP
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9902$jXZPP
                                                                                                                              g$src$9962$jXZPP
                                                                                                                              g$y$10001$jXZPP
                                                                                                                              g$r$9964$jXZPP
                                                                                                                              g$maps$9965$jXZPP
                                                                                                                              g$ellipsis?$9966$jXZPP
                                                                                                                              g$vec?$9967$jXZPP)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$10022$jXZPP
                                                                                                                              g$maps$10023$jXZPP)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$10024$jXZPP
                                                                                                                                  g$y$10025$jXZPP)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$10002$jXZPP
                                                                                                                                       g$maps$10024$jXZPP)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$10028$jXZPP
                                                                                                                                       g$maps$10029$jXZPP)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$10030$jXZPP
                                                                                                                                           g$x$10031$jXZPP)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9904$jXZPP
                                                                                                                                             g$x$10031$jXZPP
                                                                                                                                             g$y$10025$jXZPP)
                                                                                                                                           g$maps$10030$jXZPP)))
                                                                                                                                      g$maps$10029$jXZPP
                                                                                                                                      g$x$10028$jXZPP))))))
                                                                                                                             g$maps$10023$jXZPP
                                                                                                                             g$y$10022$jXZPP))))))
                                                                                                                    g$ls/false$10019$jXZPP)
                                                                                                                  (g$syntax-violation$8172$jXZPP
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$10018$jXZPP))))
                                                                                                             (g$syntax-dispatch$8060$jXZPP
                                                                                                               g$t$10018$jXZPP
                                                                                                               '_))))
                                                                                                         g$t$10005$jXZPP))))
                                                                                                   (g$syntax-dispatch$8060$jXZPP
                                                                                                     g$t$10005$jXZPP
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$10003$jXZPP))))
                                                                                         (g$syntax-dispatch$8060$jXZPP
                                                                                           g$t$10003$jXZPP
                                                                                           '()))))
                                                                                     g$y$10001$jXZPP)))))
                                                                        g$f$10000$jXZPP)
                                                                      g$y$9999$jXZPP
                                                                      (case-lambda
                                                                        ((g$maps$10032$jXZPP)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9902$jXZPP
                                                                                g$src$9962$jXZPP
                                                                                g$x$9997$jXZPP
                                                                                g$r$9964$jXZPP
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$10032$jXZPP)
                                                                                g$ellipsis?$9966$jXZPP
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$10035$jXZPP
                                                                                g$maps$10036$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$maps$10037$jXZPP
                                                                                    g$x$10038$jXZPP)
                                                                                  (if (null?
                                                                                        (car g$maps$10037$jXZPP))
                                                                                    (g$syntax-violation$8172$jXZPP
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9962$jXZPP)
                                                                                    (values
                                                                                      (g$gen-map$9906$jXZPP
                                                                                        g$x$10038$jXZPP
                                                                                        (car g$maps$10037$jXZPP))
                                                                                      (cdr g$maps$10037$jXZPP)))))
                                                                               g$maps$10036$jXZPP
                                                                               g$x$10035$jXZPP)))))))))
                                                                  g$ls/false$9993$jXZPP)
                                                                ((case-lambda
                                                                   ((g$t$10039$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10040$jXZPP)
                                                                        (if g$ls/false$10040$jXZPP
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$10041$jXZPP
                                                                                 g$y$10042$jXZPP)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9902$jXZPP
                                                                                      g$src$9962$jXZPP
                                                                                      g$x$10041$jXZPP
                                                                                      g$r$9964$jXZPP
                                                                                      g$maps$9965$jXZPP
                                                                                      g$ellipsis?$9966$jXZPP
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$10045$jXZPP
                                                                                      g$maps$10046$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$maps$10047$jXZPP
                                                                                          g$xnew$10048$jXZPP)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9902$jXZPP
                                                                                               g$src$9962$jXZPP
                                                                                               g$y$10042$jXZPP
                                                                                               g$r$9964$jXZPP
                                                                                               g$maps$10047$jXZPP
                                                                                               g$ellipsis?$9966$jXZPP
                                                                                               g$vec?$9967$jXZPP)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$10051$jXZPP
                                                                                               g$maps$10052$jXZPP)
                                                                                             ((case-lambda
                                                                                                ((g$maps$10053$jXZPP
                                                                                                   g$ynew$10054$jXZPP)
                                                                                                 (values
                                                                                                   (g$gen-cons$9907$jXZPP
                                                                                                     g$e$9963$jXZPP
                                                                                                     g$x$10041$jXZPP
                                                                                                     g$y$10042$jXZPP
                                                                                                     g$xnew$10048$jXZPP
                                                                                                     g$ynew$10054$jXZPP)
                                                                                                   g$maps$10053$jXZPP)))
                                                                                              g$maps$10052$jXZPP
                                                                                              g$ynew$10051$jXZPP))))))
                                                                                     g$maps$10046$jXZPP
                                                                                     g$xnew$10045$jXZPP))))))
                                                                            g$ls/false$10040$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$t$10055$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10056$jXZPP)
                                                                                  (if g$ls/false$10056$jXZPP
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$10057$jXZPP)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9902$jXZPP
                                                                                                g$src$9962$jXZPP
                                                                                                g$ls$10057$jXZPP
                                                                                                g$r$9964$jXZPP
                                                                                                g$maps$9965$jXZPP
                                                                                                g$ellipsis?$9966$jXZPP
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$10060$jXZPP
                                                                                                g$maps$10061$jXZPP)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$10062$jXZPP
                                                                                                    g$lsnew$10063$jXZPP)
                                                                                                  (values
                                                                                                    (g$gen-vector$9908$jXZPP
                                                                                                      g$e$9963$jXZPP
                                                                                                      g$ls$10057$jXZPP
                                                                                                      g$lsnew$10063$jXZPP)
                                                                                                    g$maps$10062$jXZPP)))
                                                                                               g$maps$10061$jXZPP
                                                                                               g$lsnew$10060$jXZPP))))))
                                                                                      g$ls/false$10056$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$t$10064$jXZPP)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10065$jXZPP)
                                                                                            (if g$ls/false$10065$jXZPP
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9963$jXZPP)
                                                                                                     g$maps$9965$jXZPP)))
                                                                                                g$ls/false$10065$jXZPP)
                                                                                              (g$syntax-violation$8172$jXZPP
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10064$jXZPP))))
                                                                                         (g$syntax-dispatch$8060$jXZPP
                                                                                           g$t$10064$jXZPP
                                                                                           '_))))
                                                                                     g$t$10055$jXZPP))))
                                                                               (g$syntax-dispatch$8060$jXZPP
                                                                                 g$t$10055$jXZPP
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$10039$jXZPP))))
                                                                     (g$syntax-dispatch$8060$jXZPP
                                                                       g$t$10039$jXZPP
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9992$jXZPP))))
                                                           (g$syntax-dispatch$8060$jXZPP
                                                             g$t$9992$jXZPP
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9985$jXZPP))))
                                                 (g$syntax-dispatch$8060$jXZPP
                                                   g$t$9985$jXZPP
                                                   '(any any)))))
                                             g$t$9972$jXZPP))))
                                       (g$syntax-dispatch$8060$jXZPP
                                         g$t$9972$jXZPP
                                         'any))))
                                   g$t$9968$jXZPP))))
                             (g$syntax-dispatch$8060$jXZPP
                               g$t$9968$jXZPP
                               'any))))
                         g$e$9963$jXZPP))))
                   (g$gen-ref$9903$jXZPP
                     (case-lambda
                       ((g$src$9949$jXZPP
                          g$var$9950$jXZPP
                          g$level$9951$jXZPP
                          g$maps$9952$jXZPP)
                        (if (= g$level$9951$jXZPP '0)
                          (values g$var$9950$jXZPP g$maps$9952$jXZPP)
                          (if (null? g$maps$9952$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9949$jXZPP)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9903$jXZPP
                                   g$src$9949$jXZPP
                                   g$var$9950$jXZPP
                                   (- g$level$9951$jXZPP '1)
                                   (cdr g$maps$9952$jXZPP))))
                              (case-lambda
                                ((g$outer-var$9955$jXZPP
                                   g$outer-maps$9956$jXZPP)
                                 ((case-lambda
                                    ((g$outer-maps$9957$jXZPP
                                       g$outer-var$9958$jXZPP)
                                     ((case-lambda
                                        ((g$t$9959$jXZPP)
                                         (if g$t$9959$jXZPP
                                           ((case-lambda
                                              ((g$b$9960$jXZPP)
                                               (values
                                                 (cdr g$b$9960$jXZPP)
                                                 g$maps$9952$jXZPP)))
                                            g$t$9959$jXZPP)
                                           ((case-lambda
                                              ((g$inner-var$9961$jXZPP)
                                               (values
                                                 g$inner-var$9961$jXZPP
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9958$jXZPP
                                                       g$inner-var$9961$jXZPP)
                                                     (car g$maps$9952$jXZPP))
                                                   g$outer-maps$9957$jXZPP))))
                                            (g$gen-lexical$7721$jXZPP 'tmp)))))
                                      (g$assq$5066$jXZPP
                                        g$outer-var$9958$jXZPP
                                        (car g$maps$9952$jXZPP)))))
                                  g$outer-maps$9956$jXZPP
                                  g$outer-var$9955$jXZPP)))))))))
                   (g$gen-append$9904$jXZPP
                     (case-lambda
                       ((g$x$9947$jXZPP g$y$9948$jXZPP)
                        (if (equal? g$y$9948$jXZPP ''())
                          g$x$9947$jXZPP
                          (list 'append g$x$9947$jXZPP g$y$9948$jXZPP)))))
                   (g$gen-mappend$9905$jXZPP
                     (case-lambda
                       ((g$e$9945$jXZPP g$map-env$9946$jXZPP)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9906$jXZPP
                            g$e$9945$jXZPP
                            g$map-env$9946$jXZPP)))))
                   (g$gen-map$9906$jXZPP
                     (case-lambda
                       ((g$e$9936$jXZPP g$map-env$9937$jXZPP)
                        ((case-lambda
                           ((g$formals$9938$jXZPP g$actuals$9939$jXZPP)
                            (if (eq? (car g$e$9936$jXZPP) 'ref)
                              (car g$actuals$9939$jXZPP)
                              (if (g$for-all$5076$jXZPP
                                    (case-lambda
                                      ((g$x$9940$jXZPP)
                                       (if (eq? (car g$x$9940$jXZPP) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5070$jXZPP
                                             (g$cadr$5304$jXZPP g$x$9940$jXZPP)
                                             g$formals$9938$jXZPP))
                                         '#f)))
                                    (cdr g$e$9936$jXZPP))
                                ((case-lambda
                                   ((g$args$9941$jXZPP)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9936$jXZPP))
                                        g$args$9941$jXZPP))))
                                 (g$map$5078$jXZPP
                                   ((case-lambda
                                      ((g$r$9942$jXZPP)
                                       (case-lambda
                                         ((g$x$9943$jXZPP)
                                          (cdr (g$assq$5066$jXZPP
                                                 (g$cadr$5304$jXZPP
                                                   g$x$9943$jXZPP)
                                                 g$r$9942$jXZPP))))))
                                    (g$map$5078$jXZPP
                                      cons
                                      g$formals$9938$jXZPP
                                      g$actuals$9939$jXZPP))
                                   (cdr g$e$9936$jXZPP)))
                                (g$cons*$5080$jXZPP
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9938$jXZPP
                                    g$e$9936$jXZPP)
                                  g$actuals$9939$jXZPP)))))
                         (g$map$5078$jXZPP cdr g$map-env$9937$jXZPP)
                         (g$map$5078$jXZPP
                           (case-lambda
                             ((g$x$9944$jXZPP)
                              (list 'ref (car g$x$9944$jXZPP))))
                           g$map-env$9937$jXZPP)))))
                   (g$gen-cons$9907$jXZPP
                     (case-lambda
                       ((g$e$9928$jXZPP
                          g$x$9929$jXZPP
                          g$y$9930$jXZPP
                          g$xnew$9931$jXZPP
                          g$ynew$9932$jXZPP)
                        ((case-lambda
                           ((g$t$9933$jXZPP)
                            (if (g$memv$5071$jXZPP g$t$9933$jXZPP '(quote))
                              (if (eq? (car g$xnew$9931$jXZPP) 'quote)
                                ((case-lambda
                                   ((g$xnew$9934$jXZPP g$ynew$9935$jXZPP)
                                    (if (if (eq? g$xnew$9934$jXZPP
                                                 g$x$9929$jXZPP)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9935$jXZPP
                                                 g$y$9930$jXZPP))
                                          '#f)
                                      (list 'quote g$e$9928$jXZPP)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9934$jXZPP
                                          g$ynew$9935$jXZPP)))))
                                 (g$cadr$5304$jXZPP g$xnew$9931$jXZPP)
                                 (g$cadr$5304$jXZPP g$ynew$9932$jXZPP))
                                (if (null?
                                      (g$cadr$5304$jXZPP g$ynew$9932$jXZPP))
                                  (list 'list g$xnew$9931$jXZPP)
                                  (list
                                    'cons
                                    g$xnew$9931$jXZPP
                                    g$ynew$9932$jXZPP)))
                              (if (g$memv$5071$jXZPP g$t$9933$jXZPP '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9931$jXZPP
                                    (cdr g$ynew$9932$jXZPP)))
                                (list
                                  'cons
                                  g$xnew$9931$jXZPP
                                  g$ynew$9932$jXZPP)))))
                         (car g$ynew$9932$jXZPP)))))
                   (g$gen-vector$9908$jXZPP
                     (case-lambda
                       ((g$e$9925$jXZPP g$ls$9926$jXZPP g$lsnew$9927$jXZPP)
                        (if (eq? (car g$lsnew$9927$jXZPP) 'quote)
                          (if (eq? (g$cadr$5304$jXZPP g$lsnew$9927$jXZPP)
                                   g$ls$9926$jXZPP)
                            (list 'quote g$e$9925$jXZPP)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5304$jXZPP g$lsnew$9927$jXZPP))))
                          (if (eq? (car g$lsnew$9927$jXZPP) 'list)
                            (cons 'vector (cdr g$lsnew$9927$jXZPP))
                            (list 'list->vector g$lsnew$9927$jXZPP))))))
                   (g$regen$9909$jXZPP
                     (case-lambda
                       ((g$x$9922$jXZPP)
                        ((case-lambda
                           ((g$t$9923$jXZPP)
                            (if (g$memv$5071$jXZPP g$t$9923$jXZPP '(ref))
                              (g$cadr$5304$jXZPP g$x$9922$jXZPP)
                              (if (g$memv$5071$jXZPP
                                    g$t$9923$jXZPP
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5304$jXZPP g$x$9922$jXZPP))
                                (if (g$memv$5071$jXZPP g$t$9923$jXZPP '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5304$jXZPP g$x$9922$jXZPP))
                                  (if (g$memv$5071$jXZPP
                                        g$t$9923$jXZPP
                                        '(lambda))
                                    (g$build-lambda$7708$jXZPP
                                      '#f
                                      (g$cadr$5304$jXZPP g$x$9922$jXZPP)
                                      (g$regen$9909$jXZPP
                                        (g$caddr$5310$jXZPP g$x$9922$jXZPP)))
                                    (if (g$memv$5071$jXZPP
                                          g$t$9923$jXZPP
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9924$jXZPP)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9924$jXZPP)))
                                       (g$map$5078$jXZPP
                                         g$regen$9909$jXZPP
                                         (cdr g$x$9922$jXZPP)))
                                      (cons
                                        (list 'primitive (car g$x$9922$jXZPP))
                                        (g$map$5078$jXZPP
                                          g$regen$9909$jXZPP
                                          (cdr g$x$9922$jXZPP))))))))))
                         (car g$x$9922$jXZPP))))))
           (case-lambda
             ((g$e$9910$jXZPP g$r$9911$jXZPP g$mr$9912$jXZPP)
              ((case-lambda
                 ((g$t$9913$jXZPP)
                  ((case-lambda
                     ((g$ls/false$9914$jXZPP)
                      (if g$ls/false$9914$jXZPP
                        (apply
                          (case-lambda
                            ((g$x$9915$jXZPP)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9902$jXZPP
                                    g$e$9910$jXZPP
                                    g$x$9915$jXZPP
                                    g$r$9911$jXZPP
                                    '()
                                    g$ellipsis?$8061$jXZPP
                                    '#f)))
                               (case-lambda
                                 ((g$e$9918$jXZPP g$maps$9919$jXZPP)
                                  ((case-lambda
                                     ((g$maps$9920$jXZPP g$e$9921$jXZPP)
                                      (g$regen$9909$jXZPP g$e$9921$jXZPP)))
                                   g$maps$9919$jXZPP
                                   g$e$9918$jXZPP))))))
                          g$ls/false$9914$jXZPP)
                        (g$syntax-violation$8172$jXZPP
                          '#f
                          '"invalid syntax"
                          g$t$9913$jXZPP))))
                   (g$syntax-dispatch$8060$jXZPP g$t$9913$jXZPP '(_ any)))))
               g$e$9910$jXZPP))))))))
   (g$core-macro-transformer$8067$jXZPP
     g$core-macro-transformer$11570$jXZPP
     (case-lambda
       ((g$name$10066$jXZPP)
        ((case-lambda
           ((g$t$10067$jXZPP)
            (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(quote))
              g$quote-transformer$8020$jXZPP
              (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(lambda))
                g$lambda-transformer$8022$jXZPP
                (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(case-lambda))
                  g$case-lambda-transformer$8021$jXZPP
                  (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(letrec))
                    g$letrec-transformer$8010$jXZPP
                    (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(letrec*))
                      g$letrec*-transformer$8011$jXZPP
                      (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(if))
                        g$if-transformer$8018$jXZPP
                        (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(foreign-call))
                          g$foreign-call-transformer$8058$jXZPP
                          (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(syntax-case))
                            g$syntax-case-transformer$8064$jXZPP
                            (if (g$memv$5071$jXZPP g$t$10067$jXZPP '(syntax))
                              g$syntax-transformer$8066$jXZPP
                              (if (g$memv$5071$jXZPP
                                    g$t$10067$jXZPP
                                    '(type-descriptor))
                                g$type-descriptor-transformer$8013$jXZPP
                                (if (g$memv$5071$jXZPP
                                      g$t$10067$jXZPP
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$8014$jXZPP
                                  (if (g$memv$5071$jXZPP
                                        g$t$10067$jXZPP
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$8015$jXZPP
                                    (if (g$memv$5071$jXZPP
                                          g$t$10067$jXZPP
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$8012$jXZPP
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$10066$jXZPP))))))))))))))))
         g$name$10066$jXZPP))))
   (g$file-options-macro$8068$jXZPP
     g$file-options-macro$11571$jXZPP
     (case-lambda
       ((g$x$10068$jXZPP)
        (letrec* ((g$valid-option?$10069$jXZPP
                    (case-lambda
                      ((g$x$10074$jXZPP)
                       (if (g$id?$7782$jXZPP g$x$10074$jXZPP)
                         (begin
                           '#f
                           (g$memq$5070$jXZPP
                             (g$id->sym$7783$jXZPP g$x$10074$jXZPP)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$10070$jXZPP)
              ((case-lambda
                 ((g$ls/false$10071$jXZPP)
                  (if (if g$ls/false$10071$jXZPP
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$10072$jXZPP)
                               (if (g$for-all$5076$jXZPP
                                     g$valid-option?$10069$jXZPP
                                     g$opt*$10072$jXZPP)
                                 (begin
                                   '#f
                                   (g$file-options-spec$7046$jXZPP
                                     (g$map$5078$jXZPP
                                       g$id->sym$7783$jXZPP
                                       g$opt*$10072$jXZPP)))
                                 '#f)))
                            g$ls/false$10071$jXZPP))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$10073$jXZPP)
                         (g$bless$8023$jXZPP
                           (list
                             'quote
                             (g$file-options-spec$7046$jXZPP
                               (g$map$5078$jXZPP
                                 g$id->sym$7783$jXZPP
                                 g$opt*$10073$jXZPP))))))
                      g$ls/false$10071$jXZPP)
                    (g$syntax-violation$8172$jXZPP
                      '#f
                      '"invalid syntax"
                      g$t$10070$jXZPP))))
               (g$syntax-dispatch$8060$jXZPP g$t$10070$jXZPP '(_ . each-any)))))
           g$x$10068$jXZPP)))))
   (g$symbol-macro$8069$jXZPP
     g$symbol-macro$11572$jXZPP
     (case-lambda
       ((g$x$10075$jXZPP g$set$10076$jXZPP)
        ((case-lambda
           ((g$t$10077$jXZPP)
            ((case-lambda
               ((g$ls/false$10078$jXZPP)
                (if (if g$ls/false$10078$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$10079$jXZPP)
                             (if (g$id?$7782$jXZPP g$name$10079$jXZPP)
                               (begin
                                 '#f
                                 (g$memq$5070$jXZPP
                                   (g$id->sym$7783$jXZPP g$name$10079$jXZPP)
                                   g$set$10076$jXZPP))
                               '#f)))
                          g$ls/false$10078$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$10080$jXZPP)
                       (g$bless$8023$jXZPP (list 'quote g$name$10080$jXZPP))))
                    g$ls/false$10078$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$10077$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$10077$jXZPP '(_ any)))))
         g$x$10075$jXZPP))))
   (g$macro-transformer$8070$jXZPP
     g$macro-transformer$11573$jXZPP
     (case-lambda
       ((g$x$10081$jXZPP)
        (if (procedure? g$x$10081$jXZPP)
          g$x$10081$jXZPP
          (if (symbol? g$x$10081$jXZPP)
            ((case-lambda
               ((g$t$10082$jXZPP)
                (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(define-record-type))
                  g$define-record-type-macro$8054$jXZPP
                  (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(define-struct))
                    g$define-struct-macro$8053$jXZPP
                    (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(include))
                      g$include-macro$8048$jXZPP
                      (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(cond))
                        g$cond-macro$8046$jXZPP
                        (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(let))
                          g$let-macro$8026$jXZPP
                          (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(do))
                            g$do-macro$8042$jXZPP
                            (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(or))
                              g$or-macro$8044$jXZPP
                              (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(and))
                                g$and-macro$8045$jXZPP
                                (if (g$memv$5071$jXZPP g$t$10082$jXZPP '(let*))
                                  g$let*-macro$8043$jXZPP
                                  (if (g$memv$5071$jXZPP
                                        g$t$10082$jXZPP
                                        '(let-values))
                                    g$let-values-macro$8027$jXZPP
                                    (if (g$memv$5071$jXZPP
                                          g$t$10082$jXZPP
                                          '(let*-values))
                                      g$let*-values-macro$8028$jXZPP
                                      (if (g$memv$5071$jXZPP
                                            g$t$10082$jXZPP
                                            '(syntax-rules))
                                        g$syntax-rules-macro$8050$jXZPP
                                        (if (g$memv$5071$jXZPP
                                              g$t$10082$jXZPP
                                              '(quasiquote))
                                          g$quasiquote-macro$8051$jXZPP
                                          (if (g$memv$5071$jXZPP
                                                g$t$10082$jXZPP
                                                '(quasisyntax))
                                            g$quasisyntax-macro$8052$jXZPP
                                            (if (g$memv$5071$jXZPP
                                                  g$t$10082$jXZPP
                                                  '(with-syntax))
                                              g$with-syntax-macro$8024$jXZPP
                                              (if (g$memv$5071$jXZPP
                                                    g$t$10082$jXZPP
                                                    '(when))
                                                g$when-macro$8016$jXZPP
                                                (if (g$memv$5071$jXZPP
                                                      g$t$10082$jXZPP
                                                      '(unless))
                                                  g$unless-macro$8017$jXZPP
                                                  (if (g$memv$5071$jXZPP
                                                        g$t$10082$jXZPP
                                                        '(case))
                                                    g$case-macro$8019$jXZPP
                                                    (if (g$memv$5071$jXZPP
                                                          g$t$10082$jXZPP
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$8041$jXZPP
                                                      (if (g$memv$5071$jXZPP
                                                            g$t$10082$jXZPP
                                                            '(time))
                                                        g$time-macro$8037$jXZPP
                                                        (if (g$memv$5071$jXZPP
                                                              g$t$10082$jXZPP
                                                              '(delay))
                                                          g$delay-macro$8038$jXZPP
                                                          (if (g$memv$5071$jXZPP
                                                                g$t$10082$jXZPP
                                                                '(assert))
                                                            g$assert-macro$8039$jXZPP
                                                            (if (g$memv$5071$jXZPP
                                                                  g$t$10082$jXZPP
                                                                  '(endianness))
                                                              g$endianness-macro$8040$jXZPP
                                                              (if (g$memv$5071$jXZPP
                                                                    g$t$10082$jXZPP
                                                                    '(guard))
                                                                g$guard-macro$8035$jXZPP
                                                                (if (g$memv$5071$jXZPP
                                                                      g$t$10082$jXZPP
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$8036$jXZPP
                                                                  (if (g$memv$5071$jXZPP
                                                                        g$t$10082$jXZPP
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$8029$jXZPP
                                                                    (if (g$memv$5071$jXZPP
                                                                          g$t$10082$jXZPP
                                                                          '(trace-define))
                                                                      g$trace-define-macro$8030$jXZPP
                                                                      (if (g$memv$5071$jXZPP
                                                                            g$t$10082$jXZPP
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$8031$jXZPP
                                                                        (if (g$memv$5071$jXZPP
                                                                              g$t$10082$jXZPP
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$8033$jXZPP
                                                                          (if (g$memv$5071$jXZPP
                                                                                g$t$10082$jXZPP
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$8034$jXZPP
                                                                            (if (g$memv$5071$jXZPP
                                                                                  g$t$10082$jXZPP
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$8055$jXZPP
                                                                              (if (g$memv$5071$jXZPP
                                                                                    g$t$10082$jXZPP
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$8057$jXZPP
                                                                                (if (g$memv$5071$jXZPP
                                                                                      g$t$10082$jXZPP
                                                                                      '(include-into))
                                                                                  g$include-into-macro$8049$jXZPP
                                                                                  (if (g$memv$5071$jXZPP
                                                                                        g$t$10082$jXZPP
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$10083$jXZPP)
                                                                                       (g$symbol-macro$8069$jXZPP
                                                                                         g$x$10083$jXZPP
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5071$jXZPP
                                                                                          g$t$10082$jXZPP
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$10084$jXZPP)
                                                                                         (g$symbol-macro$8069$jXZPP
                                                                                           g$x$10084$jXZPP
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5071$jXZPP
                                                                                            g$t$10082$jXZPP
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$10085$jXZPP)
                                                                                           (g$symbol-macro$8069$jXZPP
                                                                                             g$x$10085$jXZPP
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5071$jXZPP
                                                                                              g$t$10082$jXZPP
                                                                                              '(file-options))
                                                                                          g$file-options-macro$8068$jXZPP
                                                                                          (if (g$memv$5071$jXZPP
                                                                                                g$t$10082$jXZPP
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$8056$jXZPP
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$10081$jXZPP)))))))))))))))))))))))))))))))))))))))))
             g$x$10081$jXZPP)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$10081$jXZPP))))))
   (g$local-macro-transformer$8071$jXZPP
     g$local-macro-transformer$11574$jXZPP
     (case-lambda ((g$x$10086$jXZPP) (car g$x$10086$jXZPP))))
   (g$do-macro-call$8072$jXZPP
     g$do-macro-call$11575$jXZPP
     (case-lambda
       ((g$transformer$10087$jXZPP g$expr$10088$jXZPP)
        ((case-lambda
           ((g$out$10089$jXZPP)
            (begin
              ((letrec ((g$f$10090$jXZPP
                          (case-lambda
                            ((g$x$10091$jXZPP)
                             (if (not (g$stx?$7754$jXZPP g$x$10091$jXZPP))
                               (if (pair? g$x$10091$jXZPP)
                                 (begin
                                   (g$f$10090$jXZPP (car g$x$10091$jXZPP))
                                   (g$f$10090$jXZPP (cdr g$x$10091$jXZPP)))
                                 (if (vector? g$x$10091$jXZPP)
                                   (g$vector-for-each$5356$jXZPP
                                     g$f$10090$jXZPP
                                     g$x$10091$jXZPP)
                                   (if (symbol? g$x$10091$jXZPP)
                                     (g$syntax-violation$8172$jXZPP
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$10088$jXZPP
                                       g$x$10091$jXZPP)
                                     (void))))
                               (void))))))
                 g$f$10090$jXZPP)
               g$out$10089$jXZPP)
              (g$add-mark$7771$jXZPP
                (g$gen-mark$7766$jXZPP)
                g$out$10089$jXZPP
                g$expr$10088$jXZPP))))
         (g$transformer$10087$jXZPP
           (g$add-mark$7771$jXZPP
             g$anti-mark$7767$jXZPP
             g$expr$10088$jXZPP
             '#f))))))
   (g$chi-macro$8073$jXZPP
     g$chi-macro$11576$jXZPP
     (case-lambda
       ((g$p$10092$jXZPP g$e$10093$jXZPP)
        (g$do-macro-call$8072$jXZPP
          (g$macro-transformer$8070$jXZPP g$p$10092$jXZPP)
          g$e$10093$jXZPP))))
   (g$chi-local-macro$8074$jXZPP
     g$chi-local-macro$11577$jXZPP
     (case-lambda
       ((g$p$10094$jXZPP g$e$10095$jXZPP)
        (g$do-macro-call$8072$jXZPP
          (g$local-macro-transformer$8071$jXZPP g$p$10094$jXZPP)
          g$e$10095$jXZPP))))
   (g$chi-global-macro$8075$jXZPP
     g$chi-global-macro$11578$jXZPP
     (case-lambda
       ((g$p$10096$jXZPP g$e$10097$jXZPP)
        ((case-lambda
           ((g$lib$10098$jXZPP g$loc$10099$jXZPP)
            (begin
              (g$visit-library$7593$jXZPP g$lib$10098$jXZPP)
              ((case-lambda
                 ((g$x$10100$jXZPP)
                  ((case-lambda
                     ((g$transformer$10101$jXZPP)
                      (g$do-macro-call$8072$jXZPP
                        g$transformer$10101$jXZPP
                        g$e$10097$jXZPP)))
                   (if (procedure? g$x$10100$jXZPP)
                     g$x$10100$jXZPP
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$10100$jXZPP)))))
               (symbol-value g$loc$10099$jXZPP)))))
         (car g$p$10096$jXZPP)
         (cdr g$p$10096$jXZPP)))))
   (g$chi-expr*$8076$jXZPP
     g$chi-expr*$11579$jXZPP
     (case-lambda
       ((g$e*$10102$jXZPP g$r$10103$jXZPP g$mr$10104$jXZPP)
        (if (null? g$e*$10102$jXZPP)
          '()
          ((case-lambda
             ((g$e$10105$jXZPP)
              (cons
                g$e$10105$jXZPP
                (g$chi-expr*$8076$jXZPP
                  (cdr g$e*$10102$jXZPP)
                  g$r$10103$jXZPP
                  g$mr$10104$jXZPP))))
           (g$chi-expr$8078$jXZPP
             (car g$e*$10102$jXZPP)
             g$r$10103$jXZPP
             g$mr$10104$jXZPP))))))
   (g$chi-application$8077$jXZPP
     g$chi-application$11580$jXZPP
     (case-lambda
       ((g$e$10106$jXZPP g$r$10107$jXZPP g$mr$10108$jXZPP)
        ((case-lambda
           ((g$t$10109$jXZPP)
            ((case-lambda
               ((g$ls/false$10110$jXZPP)
                (if g$ls/false$10110$jXZPP
                  (apply
                    (case-lambda
                      ((g$rator$10111$jXZPP g$rands$10112$jXZPP)
                       ((case-lambda
                          ((g$rator$10113$jXZPP)
                           (cons
                             g$rator$10113$jXZPP
                             (g$chi-expr*$8076$jXZPP
                               g$rands$10112$jXZPP
                               g$r$10107$jXZPP
                               g$mr$10108$jXZPP))))
                        (g$chi-expr$8078$jXZPP
                          g$rator$10111$jXZPP
                          g$r$10107$jXZPP
                          g$mr$10108$jXZPP))))
                    g$ls/false$10110$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$10109$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$10109$jXZPP '(any . each-any)))))
         g$e$10106$jXZPP))))
   (g$chi-expr$8078$jXZPP
     g$chi-expr$11581$jXZPP
     (case-lambda
       ((g$e$10114$jXZPP g$r$10115$jXZPP g$mr$10116$jXZPP)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7802$jXZPP g$e$10114$jXZPP g$r$10115$jXZPP)))
          (case-lambda
            ((g$type$10120$jXZPP g$value$10121$jXZPP g$kwd$10122$jXZPP)
             ((case-lambda
                ((g$kwd$10123$jXZPP g$value$10124$jXZPP g$type$10125$jXZPP)
                 ((case-lambda
                    ((g$t$10126$jXZPP)
                     (if (g$memv$5071$jXZPP g$t$10126$jXZPP '(core-macro))
                       ((case-lambda
                          ((g$transformer$10127$jXZPP)
                           (g$transformer$10127$jXZPP
                             g$e$10114$jXZPP
                             g$r$10115$jXZPP
                             g$mr$10116$jXZPP)))
                        (g$core-macro-transformer$8067$jXZPP
                          g$value$10124$jXZPP))
                       (if (g$memv$5071$jXZPP g$t$10126$jXZPP '(global))
                         ((case-lambda
                            ((g$lib$10128$jXZPP)
                             ((case-lambda
                                ((g$loc$10129$jXZPP)
                                 (begin
                                   ((g$inv-collector$8112$jXZPP)
                                    g$lib$10128$jXZPP)
                                   g$loc$10129$jXZPP)))
                              (cdr g$value$10124$jXZPP))))
                          (car g$value$10124$jXZPP))
                         (if (g$memv$5071$jXZPP g$t$10126$jXZPP '(core-prim))
                           ((case-lambda
                              ((g$name$10130$jXZPP)
                               (list 'primitive g$name$10130$jXZPP)))
                            g$value$10124$jXZPP)
                           (if (g$memv$5071$jXZPP g$t$10126$jXZPP '(call))
                             (g$chi-application$8077$jXZPP
                               g$e$10114$jXZPP
                               g$r$10115$jXZPP
                               g$mr$10116$jXZPP)
                             (if (g$memv$5071$jXZPP g$t$10126$jXZPP '(lexical))
                               ((case-lambda
                                  ((g$lex$10131$jXZPP) g$lex$10131$jXZPP))
                                (g$lexical-var$8004$jXZPP g$value$10124$jXZPP))
                               (if (g$memv$5071$jXZPP
                                     g$t$10126$jXZPP
                                     '(global-macro global-macro!))
                                 (g$chi-expr$8078$jXZPP
                                   (g$chi-global-macro$8075$jXZPP
                                     g$value$10124$jXZPP
                                     g$e$10114$jXZPP)
                                   g$r$10115$jXZPP
                                   g$mr$10116$jXZPP)
                                 (if (g$memv$5071$jXZPP
                                       g$t$10126$jXZPP
                                       '(local-macro local-macro!))
                                   (g$chi-expr$8078$jXZPP
                                     (g$chi-local-macro$8074$jXZPP
                                       g$value$10124$jXZPP
                                       g$e$10114$jXZPP)
                                     g$r$10115$jXZPP
                                     g$mr$10116$jXZPP)
                                   (if (g$memv$5071$jXZPP
                                         g$t$10126$jXZPP
                                         '(macro macro!))
                                     (g$chi-expr$8078$jXZPP
                                       (g$chi-macro$8073$jXZPP
                                         g$value$10124$jXZPP
                                         g$e$10114$jXZPP)
                                       g$r$10115$jXZPP
                                       g$mr$10116$jXZPP)
                                     (if (g$memv$5071$jXZPP
                                           g$t$10126$jXZPP
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$10132$jXZPP)
                                           (list 'quote g$datum$10132$jXZPP)))
                                        g$value$10124$jXZPP)
                                       (if (g$memv$5071$jXZPP
                                             g$t$10126$jXZPP
                                             '(set!))
                                         (g$chi-set!$8079$jXZPP
                                           g$e$10114$jXZPP
                                           g$r$10115$jXZPP
                                           g$mr$10116$jXZPP)
                                         (if (g$memv$5071$jXZPP
                                               g$t$10126$jXZPP
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$10133$jXZPP)
                                               ((case-lambda
                                                  ((g$ls/false$10134$jXZPP)
                                                   (if g$ls/false$10134$jXZPP
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10135$jXZPP
                                                            g$x*$10136$jXZPP)
                                                          (g$build-sequence$7711$jXZPP
                                                            '#f
                                                            (g$chi-expr*$8076$jXZPP
                                                              (cons
                                                                g$x$10135$jXZPP
                                                                g$x*$10136$jXZPP)
                                                              g$r$10115$jXZPP
                                                              g$mr$10116$jXZPP))))
                                                       g$ls/false$10134$jXZPP)
                                                     (g$syntax-violation$8172$jXZPP
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10133$jXZPP))))
                                                (g$syntax-dispatch$8060$jXZPP
                                                  g$t$10133$jXZPP
                                                  '(_ any . each-any)))))
                                            g$e$10114$jXZPP)
                                           (if (g$memv$5071$jXZPP
                                                 g$t$10126$jXZPP
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$10137$jXZPP)
                                                 ((case-lambda
                                                    ((g$ls/false$10138$jXZPP)
                                                     (if (if g$ls/false$10138$jXZPP
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$10139$jXZPP
                                                                    g$xrhs*$10140$jXZPP
                                                                    g$xbody$10141$jXZPP
                                                                    g$xbody*$10142$jXZPP)
                                                                  (if (not (g$valid-bound-ids?$7787$jXZPP
                                                                             g$xlhs*$10139$jXZPP))
                                                                    (g$syntax-violation$8172$jXZPP
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$10114$jXZPP)
                                                                    (void))))
                                                               g$ls/false$10138$jXZPP))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$10143$jXZPP
                                                              g$xrhs*$10144$jXZPP
                                                              g$xbody$10145$jXZPP
                                                              g$xbody*$10146$jXZPP)
                                                            ((case-lambda
                                                               ((g$xlab*$10147$jXZPP)
                                                                ((case-lambda
                                                                   ((g$xrib$10148$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$xb*$10149$jXZPP)
                                                                        (g$build-sequence$7711$jXZPP
                                                                          '#f
                                                                          (g$chi-expr*$8076$jXZPP
                                                                            (g$map$5078$jXZPP
                                                                              (case-lambda
                                                                                ((g$x$10150$jXZPP)
                                                                                 (g$add-subst$7772$jXZPP
                                                                                   g$xrib$10148$jXZPP
                                                                                   g$x$10150$jXZPP)))
                                                                              (cons
                                                                                g$xbody$10145$jXZPP
                                                                                g$xbody*$10146$jXZPP))
                                                                            (append
                                                                              (g$map$5078$jXZPP
                                                                                cons
                                                                                g$xlab*$10147$jXZPP
                                                                                g$xb*$10149$jXZPP)
                                                                              g$r$10115$jXZPP)
                                                                            (append
                                                                              (g$map$5078$jXZPP
                                                                                cons
                                                                                g$xlab*$10147$jXZPP
                                                                                g$xb*$10149$jXZPP)
                                                                              g$mr$10116$jXZPP)))))
                                                                     (g$map$5078$jXZPP
                                                                       (case-lambda
                                                                         ((g$x$10151$jXZPP)
                                                                          (g$make-eval-transformer$7814$jXZPP
                                                                            (g$expand-transformer$8105$jXZPP
                                                                              (if (eq? g$type$10125$jXZPP
                                                                                       'let-syntax)
                                                                                g$x$10151$jXZPP
                                                                                (g$add-subst$7772$jXZPP
                                                                                  g$xrib$10148$jXZPP
                                                                                  g$x$10151$jXZPP))
                                                                              g$mr$10116$jXZPP))))
                                                                       g$xrhs*$10144$jXZPP))))
                                                                 (g$make-full-rib$7750$jXZPP
                                                                   g$xlhs*$10143$jXZPP
                                                                   g$xlab*$10147$jXZPP))))
                                                             (g$map$5078$jXZPP
                                                               g$gen-label$7723$jXZPP
                                                               g$xlhs*$10143$jXZPP))))
                                                         g$ls/false$10138$jXZPP)
                                                       (g$syntax-violation$8172$jXZPP
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$10137$jXZPP))))
                                                  (g$syntax-dispatch$8060$jXZPP
                                                    g$t$10137$jXZPP
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$10114$jXZPP)
                                             (if (g$memv$5071$jXZPP
                                                   g$t$10126$jXZPP
                                                   '(displaced-lexical))
                                               (g$syntax-violation$8172$jXZPP
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$10114$jXZPP)
                                               (if (g$memv$5071$jXZPP
                                                     g$t$10126$jXZPP
                                                     '(syntax))
                                                 (g$syntax-violation$8172$jXZPP
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$10114$jXZPP)
                                                 (if (g$memv$5071$jXZPP
                                                       g$t$10126$jXZPP
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$8172$jXZPP
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$10152$jXZPP)
                                                           (if (g$memv$5071$jXZPP
                                                                 g$t$10152$jXZPP
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5071$jXZPP
                                                                   g$t$10152$jXZPP
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5071$jXZPP
                                                                     g$t$10152$jXZPP
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5071$jXZPP
                                                                       g$t$10152$jXZPP
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5071$jXZPP
                                                                         g$t$10152$jXZPP
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5071$jXZPP
                                                                           g$t$10152$jXZPP
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$10125$jXZPP)
                                                       '" was found where an expression was expected")
                                                     g$e$10114$jXZPP)
                                                   (if (g$memv$5071$jXZPP
                                                         g$t$10126$jXZPP
                                                         '(mutable))
                                                     (g$syntax-violation$8172$jXZPP
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$10114$jXZPP)
                                                     (g$syntax-violation$8172$jXZPP
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$10114$jXZPP)))))))))))))))))))
                  g$type$10125$jXZPP)))
              g$kwd$10122$jXZPP
              g$value$10121$jXZPP
              g$type$10120$jXZPP)))))))
   (g$chi-set!$8079$jXZPP
     g$chi-set!$11582$jXZPP
     (case-lambda
       ((g$e$10153$jXZPP g$r$10154$jXZPP g$mr$10155$jXZPP)
        ((case-lambda
           ((g$t$10156$jXZPP)
            ((case-lambda
               ((g$ls/false$10157$jXZPP)
                (if (if g$ls/false$10157$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$10158$jXZPP g$v$10159$jXZPP)
                             (g$id?$7782$jXZPP g$x$10158$jXZPP)))
                          g$ls/false$10157$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$10160$jXZPP g$v$10161$jXZPP)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7802$jXZPP
                              g$x$10160$jXZPP
                              g$r$10154$jXZPP)))
                         (case-lambda
                           ((g$type$10165$jXZPP
                              g$value$10166$jXZPP
                              g$kwd$10167$jXZPP)
                            ((case-lambda
                               ((g$kwd$10168$jXZPP
                                  g$value$10169$jXZPP
                                  g$type$10170$jXZPP)
                                ((case-lambda
                                   ((g$t$10171$jXZPP)
                                    (if (g$memv$5071$jXZPP
                                          g$t$10171$jXZPP
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$8006$jXZPP
                                          g$value$10169$jXZPP
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$8004$jXZPP
                                            g$value$10169$jXZPP)
                                          (g$chi-expr$8078$jXZPP
                                            g$v$10161$jXZPP
                                            g$r$10154$jXZPP
                                            g$mr$10155$jXZPP)))
                                      (if (g$memv$5071$jXZPP
                                            g$t$10171$jXZPP
                                            '(core-prim))
                                        (g$syntax-violation$8172$jXZPP
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$10153$jXZPP)
                                        (if (g$memv$5071$jXZPP
                                              g$t$10171$jXZPP
                                              '(global))
                                          (g$syntax-violation$8172$jXZPP
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$10153$jXZPP)
                                          (if (g$memv$5071$jXZPP
                                                g$t$10171$jXZPP
                                                '(global-macro!))
                                            (g$chi-expr$8078$jXZPP
                                              (g$chi-global-macro$8075$jXZPP
                                                g$value$10169$jXZPP
                                                g$e$10153$jXZPP)
                                              g$r$10154$jXZPP
                                              g$mr$10155$jXZPP)
                                            (if (g$memv$5071$jXZPP
                                                  g$t$10171$jXZPP
                                                  '(local-macro!))
                                              (g$chi-expr$8078$jXZPP
                                                (g$chi-local-macro$8074$jXZPP
                                                  g$value$10169$jXZPP
                                                  g$e$10153$jXZPP)
                                                g$r$10154$jXZPP
                                                g$mr$10155$jXZPP)
                                              (if (g$memv$5071$jXZPP
                                                    g$t$10171$jXZPP
                                                    '(mutable))
                                                (g$syntax-violation$8172$jXZPP
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$10153$jXZPP)
                                                (g$syntax-violation$8172$jXZPP
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$10153$jXZPP)))))))))
                                 g$type$10170$jXZPP)))
                             g$kwd$10167$jXZPP
                             g$value$10166$jXZPP
                             g$type$10165$jXZPP))))))
                    g$ls/false$10157$jXZPP)
                  (g$syntax-violation$8172$jXZPP
                    '#f
                    '"invalid syntax"
                    g$t$10156$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$10156$jXZPP '(_ any any)))))
         g$e$10153$jXZPP))))
   (g$verify-formals$8080$jXZPP
     g$verify-formals$11583$jXZPP
     (case-lambda
       ((g$fmls$10172$jXZPP g$stx$10173$jXZPP)
        ((case-lambda
           ((g$t$10174$jXZPP)
            ((case-lambda
               ((g$ls/false$10175$jXZPP)
                (if g$ls/false$10175$jXZPP
                  (apply
                    (case-lambda
                      ((g$x*$10176$jXZPP)
                       (if (not (g$valid-bound-ids?$7787$jXZPP
                                  g$x*$10176$jXZPP))
                         (g$invalid-fmls-error$8025$jXZPP
                           g$stx$10173$jXZPP
                           g$fmls$10172$jXZPP)
                         (void))))
                    g$ls/false$10175$jXZPP)
                  ((case-lambda
                     ((g$t$10177$jXZPP)
                      ((case-lambda
                         ((g$ls/false$10178$jXZPP)
                          (if g$ls/false$10178$jXZPP
                            (apply
                              (case-lambda
                                ((g$x*$10179$jXZPP g$x$10180$jXZPP)
                                 (if (not (g$valid-bound-ids?$7787$jXZPP
                                            (cons
                                              g$x$10180$jXZPP
                                              g$x*$10179$jXZPP)))
                                   (g$invalid-fmls-error$8025$jXZPP
                                     g$stx$10173$jXZPP
                                     g$fmls$10172$jXZPP)
                                   (void))))
                              g$ls/false$10178$jXZPP)
                            ((case-lambda
                               ((g$t$10181$jXZPP)
                                ((case-lambda
                                   ((g$ls/false$10182$jXZPP)
                                    (if g$ls/false$10182$jXZPP
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$stx$10173$jXZPP)))
                                        g$ls/false$10182$jXZPP)
                                      (g$syntax-violation$8172$jXZPP
                                        '#f
                                        '"invalid syntax"
                                        g$t$10181$jXZPP))))
                                 (g$syntax-dispatch$8060$jXZPP
                                   g$t$10181$jXZPP
                                   '_))))
                             g$t$10177$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$10177$jXZPP
                         '#(each+ any () any)))))
                   g$t$10174$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$10174$jXZPP 'each-any))))
         g$fmls$10172$jXZPP))))
   (g$chi-lambda-clause$8081$jXZPP
     g$chi-lambda-clause$11584$jXZPP
     (case-lambda
       ((g$stx$10183$jXZPP
          g$fmls$10184$jXZPP
          g$body*$10185$jXZPP
          g$r$10186$jXZPP
          g$mr$10187$jXZPP)
        ((case-lambda
           ((g$t$10188$jXZPP)
            ((case-lambda
               ((g$ls/false$10189$jXZPP)
                (if g$ls/false$10189$jXZPP
                  (apply
                    (case-lambda
                      ((g$x*$10190$jXZPP)
                       (begin
                         (g$verify-formals$8080$jXZPP
                           g$fmls$10184$jXZPP
                           g$stx$10183$jXZPP)
                         ((case-lambda
                            ((g$lex*$10191$jXZPP g$lab*$10192$jXZPP)
                             (values
                               g$lex*$10191$jXZPP
                               (g$chi-internal$8089$jXZPP
                                 (g$add-subst$7772$jXZPP
                                   (g$make-full-rib$7750$jXZPP
                                     g$x*$10190$jXZPP
                                     g$lab*$10192$jXZPP)
                                   g$body*$10185$jXZPP)
                                 (g$add-lexicals$8008$jXZPP
                                   g$lab*$10192$jXZPP
                                   g$lex*$10191$jXZPP
                                   g$r$10186$jXZPP)
                                 g$mr$10187$jXZPP))))
                          (g$map$5078$jXZPP
                            g$gen-lexical$7721$jXZPP
                            g$x*$10190$jXZPP)
                          (g$map$5078$jXZPP
                            g$gen-label$7723$jXZPP
                            g$x*$10190$jXZPP)))))
                    g$ls/false$10189$jXZPP)
                  ((case-lambda
                     ((g$t$10193$jXZPP)
                      ((case-lambda
                         ((g$ls/false$10194$jXZPP)
                          (if g$ls/false$10194$jXZPP
                            (apply
                              (case-lambda
                                ((g$x*$10195$jXZPP g$x$10196$jXZPP)
                                 (begin
                                   (g$verify-formals$8080$jXZPP
                                     g$fmls$10184$jXZPP
                                     g$stx$10183$jXZPP)
                                   ((case-lambda
                                      ((g$lex*$10197$jXZPP
                                         g$lab*$10198$jXZPP
                                         g$lex$10199$jXZPP
                                         g$lab$10200$jXZPP)
                                       (values
                                         (append
                                           g$lex*$10197$jXZPP
                                           g$lex$10199$jXZPP)
                                         (g$chi-internal$8089$jXZPP
                                           (g$add-subst$7772$jXZPP
                                             (g$make-full-rib$7750$jXZPP
                                               (cons
                                                 g$x$10196$jXZPP
                                                 g$x*$10195$jXZPP)
                                               (cons
                                                 g$lab$10200$jXZPP
                                                 g$lab*$10198$jXZPP))
                                             g$body*$10185$jXZPP)
                                           (g$add-lexicals$8008$jXZPP
                                             (cons
                                               g$lab$10200$jXZPP
                                               g$lab*$10198$jXZPP)
                                             (cons
                                               g$lex$10199$jXZPP
                                               g$lex*$10197$jXZPP)
                                             g$r$10186$jXZPP)
                                           g$mr$10187$jXZPP))))
                                    (g$map$5078$jXZPP
                                      g$gen-lexical$7721$jXZPP
                                      g$x*$10195$jXZPP)
                                    (g$map$5078$jXZPP
                                      g$gen-label$7723$jXZPP
                                      g$x*$10195$jXZPP)
                                    (g$gen-lexical$7721$jXZPP g$x$10196$jXZPP)
                                    (g$gen-label$7723$jXZPP g$x$10196$jXZPP)))))
                              g$ls/false$10194$jXZPP)
                            ((case-lambda
                               ((g$t$10201$jXZPP)
                                ((case-lambda
                                   ((g$ls/false$10202$jXZPP)
                                    (if g$ls/false$10202$jXZPP
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8172$jXZPP
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$10184$jXZPP)))
                                        g$ls/false$10202$jXZPP)
                                      (g$syntax-violation$8172$jXZPP
                                        '#f
                                        '"invalid syntax"
                                        g$t$10201$jXZPP))))
                                 (g$syntax-dispatch$8060$jXZPP
                                   g$t$10201$jXZPP
                                   '_))))
                             g$t$10193$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$10193$jXZPP
                         '#(each+ any () any)))))
                   g$t$10188$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$10188$jXZPP 'each-any))))
         g$fmls$10184$jXZPP))))
   (g$chi-lambda-clause*$8082$jXZPP
     g$chi-lambda-clause*$11585$jXZPP
     (case-lambda
       ((g$stx$10203$jXZPP
          g$fmls*$10204$jXZPP
          g$body**$10205$jXZPP
          g$r$10206$jXZPP
          g$mr$10207$jXZPP)
        (if (null? g$fmls*$10204$jXZPP)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$8081$jXZPP
                 g$stx$10203$jXZPP
                 (car g$fmls*$10204$jXZPP)
                 (car g$body**$10205$jXZPP)
                 g$r$10206$jXZPP
                 g$mr$10207$jXZPP)))
            (case-lambda
              ((g$a$10210$jXZPP g$b$10211$jXZPP)
               ((case-lambda
                  ((g$b$10212$jXZPP g$a$10213$jXZPP)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$8082$jXZPP
                          g$stx$10203$jXZPP
                          (cdr g$fmls*$10204$jXZPP)
                          (cdr g$body**$10205$jXZPP)
                          g$r$10206$jXZPP
                          g$mr$10207$jXZPP)))
                     (case-lambda
                       ((g$a*$10216$jXZPP g$b*$10217$jXZPP)
                        ((case-lambda
                           ((g$b*$10218$jXZPP g$a*$10219$jXZPP)
                            (values
                              (cons g$a$10213$jXZPP g$a*$10219$jXZPP)
                              (cons g$b$10212$jXZPP g$b*$10218$jXZPP))))
                         g$b*$10217$jXZPP
                         g$a*$10216$jXZPP))))))
                g$b$10211$jXZPP
                g$a$10210$jXZPP))))))))
   (g$chi-defun$8083$jXZPP
     g$chi-defun$11586$jXZPP
     (case-lambda
       ((g$x$10220$jXZPP g$r$10221$jXZPP g$mr$10222$jXZPP)
        ((case-lambda
           ((g$fmls$10223$jXZPP g$body*$10224$jXZPP)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$8081$jXZPP
                   g$fmls$10223$jXZPP
                   g$fmls$10223$jXZPP
                   g$body*$10224$jXZPP
                   g$r$10221$jXZPP
                   g$mr$10222$jXZPP)))
              (case-lambda
                ((g$fmls$10227$jXZPP g$body$10228$jXZPP)
                 ((case-lambda
                    ((g$body$10229$jXZPP g$fmls$10230$jXZPP)
                     (g$build-lambda$7708$jXZPP
                       '#f
                       g$fmls$10230$jXZPP
                       g$body$10229$jXZPP)))
                  g$body$10228$jXZPP
                  g$fmls$10227$jXZPP))))))
         (car g$x$10220$jXZPP)
         (cdr g$x$10220$jXZPP)))))
   (g$chi-rhs$8084$jXZPP
     g$chi-rhs$11587$jXZPP
     (case-lambda
       ((g$rhs$10231$jXZPP g$r$10232$jXZPP g$mr$10233$jXZPP)
        ((case-lambda
           ((g$t$10234$jXZPP)
            (if (g$memv$5071$jXZPP g$t$10234$jXZPP '(defun))
              (g$chi-defun$8083$jXZPP
                (cdr g$rhs$10231$jXZPP)
                g$r$10232$jXZPP
                g$mr$10233$jXZPP)
              (if (g$memv$5071$jXZPP g$t$10234$jXZPP '(expr))
                ((case-lambda
                   ((g$expr$10235$jXZPP)
                    (g$chi-expr$8078$jXZPP
                      g$expr$10235$jXZPP
                      g$r$10232$jXZPP
                      g$mr$10233$jXZPP)))
                 (cdr g$rhs$10231$jXZPP))
                (if (g$memv$5071$jXZPP g$t$10234$jXZPP '(top-expr))
                  ((case-lambda
                     ((g$expr$10236$jXZPP)
                      (g$build-sequence$7711$jXZPP
                        '#f
                        (list
                          (g$chi-expr$8078$jXZPP
                            g$expr$10236$jXZPP
                            g$r$10232$jXZPP
                            g$mr$10233$jXZPP)
                          (g$build-void$7712$jXZPP)))))
                   (cdr g$rhs$10231$jXZPP))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$10231$jXZPP))))))
         (car g$rhs$10231$jXZPP)))))
   (g$expand-interaction-rhs*/init*$8085$jXZPP
     g$expand-interaction-rhs*/init*$11588$jXZPP
     (case-lambda
       ((g$lhs*$10237$jXZPP
          g$rhs*$10238$jXZPP
          g$init*$10239$jXZPP
          g$r$10240$jXZPP
          g$mr$10241$jXZPP)
        ((letrec ((g$f$10242$jXZPP
                    (case-lambda
                      ((g$lhs*$10243$jXZPP g$rhs*$10244$jXZPP)
                       (if (null? g$lhs*$10243$jXZPP)
                         (g$map$5078$jXZPP
                           (case-lambda
                             ((g$x$10245$jXZPP)
                              (g$chi-expr$8078$jXZPP
                                g$x$10245$jXZPP
                                g$r$10240$jXZPP
                                g$mr$10241$jXZPP)))
                           g$init*$10239$jXZPP)
                         ((case-lambda
                            ((g$lhs$10246$jXZPP g$rhs$10247$jXZPP)
                             ((case-lambda
                                ((g$t$10248$jXZPP)
                                 (if (g$memv$5071$jXZPP
                                       g$t$10248$jXZPP
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$10249$jXZPP)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$10246$jXZPP
                                           g$rhs$10249$jXZPP)
                                         (g$f$10242$jXZPP
                                           (cdr g$lhs*$10243$jXZPP)
                                           (cdr g$rhs*$10244$jXZPP)))))
                                    (g$chi-defun$8083$jXZPP
                                      (cdr g$rhs$10247$jXZPP)
                                      g$r$10240$jXZPP
                                      g$mr$10241$jXZPP))
                                   (if (g$memv$5071$jXZPP
                                         g$t$10248$jXZPP
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$10250$jXZPP)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$10246$jXZPP
                                             g$rhs$10250$jXZPP)
                                           (g$f$10242$jXZPP
                                             (cdr g$lhs*$10243$jXZPP)
                                             (cdr g$rhs*$10244$jXZPP)))))
                                      (g$chi-expr$8078$jXZPP
                                        (cdr g$rhs$10247$jXZPP)
                                        g$r$10240$jXZPP
                                        g$mr$10241$jXZPP))
                                     (if (g$memv$5071$jXZPP
                                           g$t$10248$jXZPP
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$10251$jXZPP)
                                           (cons
                                             g$e$10251$jXZPP
                                             (g$f$10242$jXZPP
                                               (cdr g$lhs*$10243$jXZPP)
                                               (cdr g$rhs*$10244$jXZPP)))))
                                        (g$chi-expr$8078$jXZPP
                                          (cdr g$rhs$10247$jXZPP)
                                          g$r$10240$jXZPP
                                          g$mr$10241$jXZPP))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$10247$jXZPP))))))
                              (car g$rhs$10247$jXZPP))))
                          (car g$lhs*$10243$jXZPP)
                          (car g$rhs*$10244$jXZPP)))))))
           g$f$10242$jXZPP)
         g$lhs*$10237$jXZPP
         g$rhs*$10238$jXZPP))))
   (g$chi-rhs*$8086$jXZPP
     g$chi-rhs*$11589$jXZPP
     (case-lambda
       ((g$rhs*$10252$jXZPP g$r$10253$jXZPP g$mr$10254$jXZPP)
        ((letrec ((g$f$10255$jXZPP
                    (case-lambda
                      ((g$ls$10256$jXZPP)
                       (if (null? g$ls$10256$jXZPP)
                         '()
                         ((case-lambda
                            ((g$a$10257$jXZPP)
                             (cons
                               g$a$10257$jXZPP
                               (g$f$10255$jXZPP (cdr g$ls$10256$jXZPP)))))
                          (g$chi-rhs$8084$jXZPP
                            (car g$ls$10256$jXZPP)
                            g$r$10253$jXZPP
                            g$mr$10254$jXZPP)))))))
           g$f$10255$jXZPP)
         g$rhs*$10252$jXZPP))))
   (g$find-bound=?$8087$jXZPP
     g$find-bound=?$11590$jXZPP
     (case-lambda
       ((g$x$10258$jXZPP g$lhs*$10259$jXZPP g$rhs*$10260$jXZPP)
        (if (null? g$lhs*$10259$jXZPP)
          '#f
          (if (g$bound-id=?$7785$jXZPP g$x$10258$jXZPP (car g$lhs*$10259$jXZPP))
            (car g$rhs*$10260$jXZPP)
            (g$find-bound=?$8087$jXZPP
              g$x$10258$jXZPP
              (cdr g$lhs*$10259$jXZPP)
              (cdr g$rhs*$10260$jXZPP)))))))
   (g$find-dups$8088$jXZPP
     g$find-dups$11591$jXZPP
     (case-lambda
       ((g$ls$10261$jXZPP)
        ((letrec ((g$f$10262$jXZPP
                    (case-lambda
                      ((g$ls$10263$jXZPP g$dups$10264$jXZPP)
                       (if (null? g$ls$10263$jXZPP)
                         g$dups$10264$jXZPP
                         ((case-lambda
                            ((g$t$10265$jXZPP)
                             (if g$t$10265$jXZPP
                               ((case-lambda
                                  ((g$x$10266$jXZPP)
                                   (g$f$10262$jXZPP
                                     (cdr g$ls$10263$jXZPP)
                                     (cons
                                       (list
                                         (car g$ls$10263$jXZPP)
                                         g$x$10266$jXZPP)
                                       g$dups$10264$jXZPP))))
                                g$t$10265$jXZPP)
                               (g$f$10262$jXZPP
                                 (cdr g$ls$10263$jXZPP)
                                 g$dups$10264$jXZPP))))
                          (g$find-bound=?$8087$jXZPP
                            (car g$ls$10263$jXZPP)
                            (cdr g$ls$10263$jXZPP)
                            (cdr g$ls$10263$jXZPP))))))))
           g$f$10262$jXZPP)
         g$ls$10261$jXZPP
         '()))))
   (g$chi-internal$8089$jXZPP
     g$chi-internal$11592$jXZPP
     (case-lambda
       ((g$e*$10267$jXZPP g$r$10268$jXZPP g$mr$10269$jXZPP)
        ((case-lambda
           ((g$rib$10270$jXZPP)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$8104$jXZPP
                   (g$map$5078$jXZPP
                     (case-lambda
                       ((g$x$10279$jXZPP)
                        (g$add-subst$7772$jXZPP
                          g$rib$10270$jXZPP
                          g$x$10279$jXZPP)))
                     (g$syntax->list$7781$jXZPP g$e*$10267$jXZPP))
                   g$r$10268$jXZPP
                   g$mr$10269$jXZPP
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$10270$jXZPP
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$10280$jXZPP
                   g$r$10281$jXZPP
                   g$mr$10282$jXZPP
                   g$lex*$10283$jXZPP
                   g$rhs*$10284$jXZPP
                   g$mod**$10285$jXZPP
                   g$kwd*$10286$jXZPP
                   g$_exp*$10287$jXZPP)
                 ((case-lambda
                    ((g$_exp*$10288$jXZPP
                       g$kwd*$10289$jXZPP
                       g$mod**$10290$jXZPP
                       g$rhs*$10291$jXZPP
                       g$lex*$10292$jXZPP
                       g$mr$10293$jXZPP
                       g$r$10294$jXZPP
                       g$e*$10295$jXZPP)
                     (begin
                       (if (null? g$e*$10295$jXZPP)
                         (g$syntax-violation$8172$jXZPP
                           '#f
                           '"no expression in body"
                           g$e*$10295$jXZPP)
                         (void))
                       ((case-lambda
                          ((g$init*$10296$jXZPP)
                           ((case-lambda
                              ((g$rhs*$10297$jXZPP)
                               (g$build-letrec*$7714$jXZPP
                                 '#f
                                 (reverse g$lex*$10292$jXZPP)
                                 (reverse g$rhs*$10297$jXZPP)
                                 (g$build-sequence$7711$jXZPP
                                   '#f
                                   g$init*$10296$jXZPP))))
                            (g$chi-rhs*$8086$jXZPP
                              g$rhs*$10291$jXZPP
                              g$r$10294$jXZPP
                              g$mr$10293$jXZPP))))
                        (g$chi-expr*$8076$jXZPP
                          (append
                            (apply append (reverse g$mod**$10290$jXZPP))
                            g$e*$10295$jXZPP)
                          g$r$10294$jXZPP
                          g$mr$10293$jXZPP)))))
                  g$_exp*$10287$jXZPP
                  g$kwd*$10286$jXZPP
                  g$mod**$10285$jXZPP
                  g$rhs*$10284$jXZPP
                  g$lex*$10283$jXZPP
                  g$mr$10282$jXZPP
                  g$r$10281$jXZPP
                  g$e*$10280$jXZPP))))))
         (g$make-empty-rib$7742$jXZPP)))))
   (g$parse-module$8090$jXZPP
     g$parse-module$11593$jXZPP
     (case-lambda
       ((g$e$10298$jXZPP)
        ((case-lambda
           ((g$t$10299$jXZPP)
            ((case-lambda
               ((g$ls/false$10300$jXZPP)
                (if g$ls/false$10300$jXZPP
                  (apply
                    (case-lambda
                      ((g$export*$10301$jXZPP g$b*$10302$jXZPP)
                       (begin
                         (if (not (g$for-all$5076$jXZPP
                                    g$id?$7782$jXZPP
                                    g$export*$10301$jXZPP))
                           (g$syntax-violation$8172$jXZPP
                             '#f
                             '"module exports must be identifiers"
                             g$e$10298$jXZPP)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$10301$jXZPP)
                           g$b*$10302$jXZPP))))
                    g$ls/false$10300$jXZPP)
                  ((case-lambda
                     ((g$t$10303$jXZPP)
                      ((case-lambda
                         ((g$ls/false$10304$jXZPP)
                          (if g$ls/false$10304$jXZPP
                            (apply
                              (case-lambda
                                ((g$name$10305$jXZPP
                                   g$export*$10306$jXZPP
                                   g$b*$10307$jXZPP)
                                 (begin
                                   (if (not (g$id?$7782$jXZPP
                                              g$name$10305$jXZPP))
                                     (g$syntax-violation$8172$jXZPP
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$10298$jXZPP)
                                     (void))
                                   (if (not (g$for-all$5076$jXZPP
                                              g$id?$7782$jXZPP
                                              g$export*$10306$jXZPP))
                                     (g$syntax-violation$8172$jXZPP
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$10298$jXZPP)
                                     (void))
                                   (values
                                     g$name$10305$jXZPP
                                     (list->vector g$export*$10306$jXZPP)
                                     g$b*$10307$jXZPP))))
                              g$ls/false$10304$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$10303$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$10303$jXZPP
                         '(_ any each-any . each-any)))))
                   g$t$10299$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$10299$jXZPP
               '(_ each-any . each-any)))))
         g$e$10298$jXZPP))))
   (g$9133$8091$jXZPP
     g$9133$11594$jXZPP
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9136$jXZPP
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$9135$8092$jXZPP g$9135$11595$jXZPP '#f)
   (g$9134$8093$jXZPP
     g$9134$11596$jXZPP
     (make-record-constructor-descriptor
       g$9133$8091$jXZPP
       '#f
       g$9135$8092$jXZPP))
   (g$module-interface?$8094$jXZPP
     g$module-interface?$11597$jXZPP
     (record-predicate g$9133$8091$jXZPP))
   (g$make-module-interface$8095$jXZPP
     g$make-module-interface$11598$jXZPP
     (record-constructor g$9134$8093$jXZPP))
   (g$module-interface-first-mark$8096$jXZPP
     g$module-interface-first-mark$11599$jXZPP
     (record-accessor g$9133$8091$jXZPP '0))
   (g$module-interface-exp-id-vec$8097$jXZPP
     g$module-interface-exp-id-vec$11600$jXZPP
     (record-accessor g$9133$8091$jXZPP '1))
   (g$module-interface-exp-lab-vec$8098$jXZPP
     g$module-interface-exp-lab-vec$11601$jXZPP
     (record-accessor g$9133$8091$jXZPP '2))
   (g$set-module-interface-first-mark!$8099$jXZPP
     g$set-module-interface-first-mark!$11602$jXZPP
     (record-mutator g$9133$8091$jXZPP '0))
   (g$set-module-interface-exp-id-vec!$8100$jXZPP
     g$set-module-interface-exp-id-vec!$11603$jXZPP
     (record-mutator g$9133$8091$jXZPP '1))
   (g$set-module-interface-exp-lab-vec!$8101$jXZPP
     g$set-module-interface-exp-lab-vec!$11604$jXZPP
     (record-mutator g$9133$8091$jXZPP '2))
   (g$module-interface-exp-id*$8102$jXZPP
     g$module-interface-exp-id*$11605$jXZPP
     (case-lambda
       ((g$iface$10308$jXZPP g$id$10309$jXZPP)
        (letrec* ((g$diff-marks$10310$jXZPP
                    (case-lambda
                      ((g$ls$10314$jXZPP g$x$10315$jXZPP)
                       (begin
                         (if (null? g$ls$10314$jXZPP)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$10316$jXZPP)
                             (if (eq? g$a$10316$jXZPP g$x$10315$jXZPP)
                               '()
                               (cons
                                 g$a$10316$jXZPP
                                 (g$diff-marks$10310$jXZPP
                                   (cdr g$ls$10314$jXZPP)
                                   g$x$10315$jXZPP)))))
                          (car g$ls$10314$jXZPP)))))))
          ((case-lambda
             ((g$diff$10311$jXZPP g$id-vec$10312$jXZPP)
              (if (null? g$diff$10311$jXZPP)
                g$id-vec$10312$jXZPP
                (g$vector-map$5355$jXZPP
                  (case-lambda
                    ((g$x$10313$jXZPP)
                     (g$make-stx$7755$jXZPP
                       (g$stx-expr$7756$jXZPP g$x$10313$jXZPP)
                       (append
                         g$diff$10311$jXZPP
                         (g$stx-mark*$7757$jXZPP g$x$10313$jXZPP))
                       '()
                       '())))
                  g$id-vec$10312$jXZPP))))
           (g$diff-marks$10310$jXZPP
             (g$stx-mark*$7757$jXZPP g$id$10309$jXZPP)
             (g$module-interface-first-mark$8096$jXZPP g$iface$10308$jXZPP))
           (g$module-interface-exp-id-vec$8097$jXZPP g$iface$10308$jXZPP))))))
   (g$chi-internal-module$8103$jXZPP
     g$chi-internal-module$11606$jXZPP
     (case-lambda
       ((g$e$10317$jXZPP
          g$r$10318$jXZPP
          g$mr$10319$jXZPP
          g$lex*$10320$jXZPP
          g$rhs*$10321$jXZPP
          g$mod**$10322$jXZPP
          g$kwd*$10323$jXZPP)
        (call-with-values
          (case-lambda (() (g$parse-module$8090$jXZPP g$e$10317$jXZPP)))
          (case-lambda
            ((g$name$10327$jXZPP g$exp-id*$10328$jXZPP g$e*$10329$jXZPP)
             ((case-lambda
                ((g$e*$10330$jXZPP g$exp-id*$10331$jXZPP g$name$10332$jXZPP)
                 ((case-lambda
                    ((g$rib$10333$jXZPP)
                     ((case-lambda
                        ((g$e*$10334$jXZPP)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$8104$jXZPP
                                g$e*$10334$jXZPP
                                g$r$10318$jXZPP
                                g$mr$10319$jXZPP
                                g$lex*$10320$jXZPP
                                g$rhs*$10321$jXZPP
                                g$mod**$10322$jXZPP
                                g$kwd*$10323$jXZPP
                                '()
                                g$rib$10333$jXZPP
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$10343$jXZPP
                                g$r$10344$jXZPP
                                g$mr$10345$jXZPP
                                g$lex*$10346$jXZPP
                                g$rhs*$10347$jXZPP
                                g$mod**$10348$jXZPP
                                g$kwd*$10349$jXZPP
                                g$_exp*$10350$jXZPP)
                              ((case-lambda
                                 ((g$_exp*$10351$jXZPP
                                    g$kwd*$10352$jXZPP
                                    g$mod**$10353$jXZPP
                                    g$rhs*$10354$jXZPP
                                    g$lex*$10355$jXZPP
                                    g$mr$10356$jXZPP
                                    g$r$10357$jXZPP
                                    g$e*$10358$jXZPP)
                                  ((case-lambda
                                     ((g$exp-lab*$10359$jXZPP
                                        g$mod**$10360$jXZPP)
                                      (if (not g$name$10332$jXZPP)
                                        (values
                                          g$lex*$10355$jXZPP
                                          g$rhs*$10354$jXZPP
                                          g$exp-id*$10331$jXZPP
                                          g$exp-lab*$10359$jXZPP
                                          g$r$10357$jXZPP
                                          g$mr$10356$jXZPP
                                          g$mod**$10360$jXZPP
                                          g$kwd*$10352$jXZPP)
                                        ((case-lambda
                                           ((g$lab$10361$jXZPP
                                              g$iface$10362$jXZPP)
                                            (values
                                              g$lex*$10355$jXZPP
                                              g$rhs*$10354$jXZPP
                                              (vector g$name$10332$jXZPP)
                                              (vector g$lab$10361$jXZPP)
                                              (cons
                                                (cons
                                                  g$lab$10361$jXZPP
                                                  (cons
                                                    '$module
                                                    g$iface$10362$jXZPP))
                                                g$r$10357$jXZPP)
                                              (cons
                                                (cons
                                                  g$lab$10361$jXZPP
                                                  (cons
                                                    '$module
                                                    g$iface$10362$jXZPP))
                                                g$mr$10356$jXZPP)
                                              g$mod**$10360$jXZPP
                                              g$kwd*$10352$jXZPP)))
                                         (g$gen-label$7723$jXZPP 'module)
                                         (g$make-module-interface$8095$jXZPP
                                           (car (g$stx-mark*$7757$jXZPP
                                                  g$name$10332$jXZPP))
                                           (g$vector-map$5355$jXZPP
                                             (case-lambda
                                               ((g$x$10363$jXZPP)
                                                (g$make-stx$7755$jXZPP
                                                  (g$stx-expr$7756$jXZPP
                                                    g$x$10363$jXZPP)
                                                  (g$stx-mark*$7757$jXZPP
                                                    g$x$10363$jXZPP)
                                                  '()
                                                  '())))
                                             g$exp-id*$10331$jXZPP)
                                           g$exp-lab*$10359$jXZPP)))))
                                   (g$vector-map$5355$jXZPP
                                     (case-lambda
                                       ((g$x$10364$jXZPP)
                                        ((case-lambda
                                           ((g$t$10365$jXZPP)
                                            (if g$t$10365$jXZPP
                                              g$t$10365$jXZPP
                                              (begin
                                                '#f
                                                (g$syntax-violation$8172$jXZPP
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$10364$jXZPP)))))
                                         (g$id->label$7795$jXZPP
                                           (g$make-stx$7755$jXZPP
                                             (g$id->sym$7783$jXZPP
                                               g$x$10364$jXZPP)
                                             (g$stx-mark*$7757$jXZPP
                                               g$x$10364$jXZPP)
                                             (list g$rib$10333$jXZPP)
                                             '())))))
                                     g$exp-id*$10331$jXZPP)
                                   (cons
                                     g$e*$10358$jXZPP
                                     g$mod**$10353$jXZPP))))
                               g$_exp*$10350$jXZPP
                               g$kwd*$10349$jXZPP
                               g$mod**$10348$jXZPP
                               g$rhs*$10347$jXZPP
                               g$lex*$10346$jXZPP
                               g$mr$10345$jXZPP
                               g$r$10344$jXZPP
                               g$e*$10343$jXZPP))))))
                      (g$map$5078$jXZPP
                        (case-lambda
                          ((g$x$10366$jXZPP)
                           (g$add-subst$7772$jXZPP
                             g$rib$10333$jXZPP
                             g$x$10366$jXZPP)))
                        (g$syntax->list$7781$jXZPP g$e*$10330$jXZPP)))))
                  (g$make-empty-rib$7742$jXZPP))))
              g$e*$10329$jXZPP
              g$exp-id*$10328$jXZPP
              g$name$10327$jXZPP)))))))
   (g$chi-body*$8104$jXZPP
     g$chi-body*$11607$jXZPP
     (case-lambda
       ((g$e*$10367$jXZPP
          g$r$10368$jXZPP
          g$mr$10369$jXZPP
          g$lex*$10370$jXZPP
          g$rhs*$10371$jXZPP
          g$mod**$10372$jXZPP
          g$kwd*$10373$jXZPP
          g$exp*$10374$jXZPP
          g$rib$10375$jXZPP
          g$mix?$10376$jXZPP
          g$sd?$10377$jXZPP)
        (if (null? g$e*$10367$jXZPP)
          (values
            g$e*$10367$jXZPP
            g$r$10368$jXZPP
            g$mr$10369$jXZPP
            g$lex*$10370$jXZPP
            g$rhs*$10371$jXZPP
            g$mod**$10372$jXZPP
            g$kwd*$10373$jXZPP
            g$exp*$10374$jXZPP)
          ((case-lambda
             ((g$e$10378$jXZPP)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7802$jXZPP g$e$10378$jXZPP g$r$10368$jXZPP)))
                (case-lambda
                  ((g$type$10382$jXZPP g$value$10383$jXZPP g$kwd$10384$jXZPP)
                   ((case-lambda
                      ((g$kwd$10385$jXZPP
                         g$value$10386$jXZPP
                         g$type$10387$jXZPP)
                       ((case-lambda
                          ((g$kwd*$10388$jXZPP)
                           ((case-lambda
                              ((g$t$10389$jXZPP)
                               (if (g$memv$5071$jXZPP g$t$10389$jXZPP '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$8000$jXZPP
                                        g$e$10378$jXZPP)))
                                   (case-lambda
                                     ((g$id$10392$jXZPP g$rhs$10393$jXZPP)
                                      ((case-lambda
                                         ((g$rhs$10394$jXZPP g$id$10395$jXZPP)
                                          (begin
                                            (if (g$bound-id-member?$7789$jXZPP
                                                  g$id$10395$jXZPP
                                                  g$kwd*$10388$jXZPP)
                                              (g$syntax-violation$8172$jXZPP
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$10378$jXZPP)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7725$jXZPP
                                                   g$id$10395$jXZPP
                                                   g$rib$10375$jXZPP
                                                   g$sd?$10377$jXZPP)))
                                              (case-lambda
                                                ((g$lab$10398$jXZPP
                                                   g$lex$10399$jXZPP)
                                                 ((case-lambda
                                                    ((g$lex$10400$jXZPP
                                                       g$lab$10401$jXZPP)
                                                     (begin
                                                       (g$extend-rib!$7745$jXZPP
                                                         g$rib$10375$jXZPP
                                                         g$id$10395$jXZPP
                                                         g$lab$10401$jXZPP
                                                         g$sd?$10377$jXZPP)
                                                       (g$chi-body*$8104$jXZPP
                                                         (cdr g$e*$10367$jXZPP)
                                                         (g$add-lexical$8007$jXZPP
                                                           g$lab$10401$jXZPP
                                                           g$lex$10400$jXZPP
                                                           g$r$10368$jXZPP)
                                                         g$mr$10369$jXZPP
                                                         (cons
                                                           g$lex$10400$jXZPP
                                                           g$lex*$10370$jXZPP)
                                                         (cons
                                                           g$rhs$10394$jXZPP
                                                           g$rhs*$10371$jXZPP)
                                                         g$mod**$10372$jXZPP
                                                         g$kwd*$10388$jXZPP
                                                         g$exp*$10374$jXZPP
                                                         g$rib$10375$jXZPP
                                                         g$mix?$10376$jXZPP
                                                         g$sd?$10377$jXZPP))))
                                                  g$lex$10399$jXZPP
                                                  g$lab$10398$jXZPP)))))))
                                       g$rhs$10393$jXZPP
                                       g$id$10392$jXZPP))))
                                 (if (g$memv$5071$jXZPP
                                       g$t$10389$jXZPP
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$8001$jXZPP
                                          g$e$10378$jXZPP)))
                                     (case-lambda
                                       ((g$id$10404$jXZPP g$rhs$10405$jXZPP)
                                        ((case-lambda
                                           ((g$rhs$10406$jXZPP g$id$10407$jXZPP)
                                            (begin
                                              (if (g$bound-id-member?$7789$jXZPP
                                                    g$id$10407$jXZPP
                                                    g$kwd*$10388$jXZPP)
                                                (g$syntax-violation$8172$jXZPP
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$10378$jXZPP)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$10408$jXZPP)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$10409$jXZPP)
                                                      (begin
                                                        (g$extend-rib!$7745$jXZPP
                                                          g$rib$10375$jXZPP
                                                          g$id$10407$jXZPP
                                                          g$lab$10408$jXZPP
                                                          g$sd?$10377$jXZPP)
                                                        ((case-lambda
                                                           ((g$b$10410$jXZPP)
                                                            (g$chi-body*$8104$jXZPP
                                                              (cdr g$e*$10367$jXZPP)
                                                              (cons
                                                                (cons
                                                                  g$lab$10408$jXZPP
                                                                  g$b$10410$jXZPP)
                                                                g$r$10368$jXZPP)
                                                              (cons
                                                                (cons
                                                                  g$lab$10408$jXZPP
                                                                  g$b$10410$jXZPP)
                                                                g$mr$10369$jXZPP)
                                                              g$lex*$10370$jXZPP
                                                              g$rhs*$10371$jXZPP
                                                              g$mod**$10372$jXZPP
                                                              g$kwd*$10388$jXZPP
                                                              g$exp*$10374$jXZPP
                                                              g$rib$10375$jXZPP
                                                              g$mix?$10376$jXZPP
                                                              g$sd?$10377$jXZPP)))
                                                         (g$make-eval-transformer$7814$jXZPP
                                                           g$expanded-rhs$10409$jXZPP)))))
                                                   (g$expand-transformer$8105$jXZPP
                                                     g$rhs$10406$jXZPP
                                                     g$mr$10369$jXZPP))))
                                               (g$gen-define-label$7726$jXZPP
                                                 g$id$10407$jXZPP
                                                 g$rib$10375$jXZPP
                                                 g$sd?$10377$jXZPP)))))
                                         g$rhs$10405$jXZPP
                                         g$id$10404$jXZPP))))
                                   (if (g$memv$5071$jXZPP
                                         g$t$10389$jXZPP
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$10411$jXZPP)
                                         ((case-lambda
                                            ((g$ls/false$10412$jXZPP)
                                             (if (if g$ls/false$10412$jXZPP
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$10413$jXZPP
                                                            g$xrhs*$10414$jXZPP
                                                            g$xbody*$10415$jXZPP)
                                                          (if (not (g$valid-bound-ids?$7787$jXZPP
                                                                     g$xlhs*$10413$jXZPP))
                                                            (g$syntax-violation$8172$jXZPP
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$10378$jXZPP)
                                                            (void))))
                                                       g$ls/false$10412$jXZPP))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$10416$jXZPP
                                                      g$xrhs*$10417$jXZPP
                                                      g$xbody*$10418$jXZPP)
                                                    ((case-lambda
                                                       ((g$xlab*$10419$jXZPP)
                                                        ((case-lambda
                                                           ((g$xrib$10420$jXZPP)
                                                            ((case-lambda
                                                               ((g$xb*$10421$jXZPP)
                                                                (g$chi-body*$8104$jXZPP
                                                                  (append
                                                                    (g$map$5078$jXZPP
                                                                      (case-lambda
                                                                        ((g$x$10422$jXZPP)
                                                                         (g$add-subst$7772$jXZPP
                                                                           g$xrib$10420$jXZPP
                                                                           g$x$10422$jXZPP)))
                                                                      g$xbody*$10418$jXZPP)
                                                                    (cdr g$e*$10367$jXZPP))
                                                                  (append
                                                                    (g$map$5078$jXZPP
                                                                      cons
                                                                      g$xlab*$10419$jXZPP
                                                                      g$xb*$10421$jXZPP)
                                                                    g$r$10368$jXZPP)
                                                                  (append
                                                                    (g$map$5078$jXZPP
                                                                      cons
                                                                      g$xlab*$10419$jXZPP
                                                                      g$xb*$10421$jXZPP)
                                                                    g$mr$10369$jXZPP)
                                                                  g$lex*$10370$jXZPP
                                                                  g$rhs*$10371$jXZPP
                                                                  g$mod**$10372$jXZPP
                                                                  g$kwd*$10388$jXZPP
                                                                  g$exp*$10374$jXZPP
                                                                  g$rib$10375$jXZPP
                                                                  g$mix?$10376$jXZPP
                                                                  g$sd?$10377$jXZPP)))
                                                             (g$map$5078$jXZPP
                                                               (case-lambda
                                                                 ((g$x$10423$jXZPP)
                                                                  (g$make-eval-transformer$7814$jXZPP
                                                                    (g$expand-transformer$8105$jXZPP
                                                                      (if (eq? g$type$10387$jXZPP
                                                                               'let-syntax)
                                                                        g$x$10423$jXZPP
                                                                        (g$add-subst$7772$jXZPP
                                                                          g$xrib$10420$jXZPP
                                                                          g$x$10423$jXZPP))
                                                                      g$mr$10369$jXZPP))))
                                                               g$xrhs*$10417$jXZPP))))
                                                         (g$make-full-rib$7750$jXZPP
                                                           g$xlhs*$10416$jXZPP
                                                           g$xlab*$10419$jXZPP))))
                                                     (g$map$5078$jXZPP
                                                       g$gen-label$7723$jXZPP
                                                       g$xlhs*$10416$jXZPP))))
                                                 g$ls/false$10412$jXZPP)
                                               (g$syntax-violation$8172$jXZPP
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10411$jXZPP))))
                                          (g$syntax-dispatch$8060$jXZPP
                                            g$t$10411$jXZPP
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$10378$jXZPP)
                                     (if (g$memv$5071$jXZPP
                                           g$t$10389$jXZPP
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$10424$jXZPP)
                                           ((case-lambda
                                              ((g$ls/false$10425$jXZPP)
                                               (if g$ls/false$10425$jXZPP
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$10426$jXZPP)
                                                      (g$chi-body*$8104$jXZPP
                                                        (append
                                                          g$x*$10426$jXZPP
                                                          (cdr g$e*$10367$jXZPP))
                                                        g$r$10368$jXZPP
                                                        g$mr$10369$jXZPP
                                                        g$lex*$10370$jXZPP
                                                        g$rhs*$10371$jXZPP
                                                        g$mod**$10372$jXZPP
                                                        g$kwd*$10388$jXZPP
                                                        g$exp*$10374$jXZPP
                                                        g$rib$10375$jXZPP
                                                        g$mix?$10376$jXZPP
                                                        g$sd?$10377$jXZPP)))
                                                   g$ls/false$10425$jXZPP)
                                                 (g$syntax-violation$8172$jXZPP
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$10424$jXZPP))))
                                            (g$syntax-dispatch$8060$jXZPP
                                              g$t$10424$jXZPP
                                              '(_ . each-any)))))
                                        g$e$10378$jXZPP)
                                       (if (g$memv$5071$jXZPP
                                             g$t$10389$jXZPP
                                             '(global-macro global-macro!))
                                         (g$chi-body*$8104$jXZPP
                                           (cons
                                             (g$add-subst$7772$jXZPP
                                               g$rib$10375$jXZPP
                                               (g$chi-global-macro$8075$jXZPP
                                                 g$value$10386$jXZPP
                                                 g$e$10378$jXZPP))
                                             (cdr g$e*$10367$jXZPP))
                                           g$r$10368$jXZPP
                                           g$mr$10369$jXZPP
                                           g$lex*$10370$jXZPP
                                           g$rhs*$10371$jXZPP
                                           g$mod**$10372$jXZPP
                                           g$kwd*$10388$jXZPP
                                           g$exp*$10374$jXZPP
                                           g$rib$10375$jXZPP
                                           g$mix?$10376$jXZPP
                                           g$sd?$10377$jXZPP)
                                         (if (g$memv$5071$jXZPP
                                               g$t$10389$jXZPP
                                               '(local-macro local-macro!))
                                           (g$chi-body*$8104$jXZPP
                                             (cons
                                               (g$add-subst$7772$jXZPP
                                                 g$rib$10375$jXZPP
                                                 (g$chi-local-macro$8074$jXZPP
                                                   g$value$10386$jXZPP
                                                   g$e$10378$jXZPP))
                                               (cdr g$e*$10367$jXZPP))
                                             g$r$10368$jXZPP
                                             g$mr$10369$jXZPP
                                             g$lex*$10370$jXZPP
                                             g$rhs*$10371$jXZPP
                                             g$mod**$10372$jXZPP
                                             g$kwd*$10388$jXZPP
                                             g$exp*$10374$jXZPP
                                             g$rib$10375$jXZPP
                                             g$mix?$10376$jXZPP
                                             g$sd?$10377$jXZPP)
                                           (if (g$memv$5071$jXZPP
                                                 g$t$10389$jXZPP
                                                 '(macro macro!))
                                             (g$chi-body*$8104$jXZPP
                                               (cons
                                                 (g$add-subst$7772$jXZPP
                                                   g$rib$10375$jXZPP
                                                   (g$chi-macro$8073$jXZPP
                                                     g$value$10386$jXZPP
                                                     g$e$10378$jXZPP))
                                                 (cdr g$e*$10367$jXZPP))
                                               g$r$10368$jXZPP
                                               g$mr$10369$jXZPP
                                               g$lex*$10370$jXZPP
                                               g$rhs*$10371$jXZPP
                                               g$mod**$10372$jXZPP
                                               g$kwd*$10388$jXZPP
                                               g$exp*$10374$jXZPP
                                               g$rib$10375$jXZPP
                                               g$mix?$10376$jXZPP
                                               g$sd?$10377$jXZPP)
                                             (if (g$memv$5071$jXZPP
                                                   g$t$10389$jXZPP
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$8103$jXZPP
                                                      g$e$10378$jXZPP
                                                      g$r$10368$jXZPP
                                                      g$mr$10369$jXZPP
                                                      g$lex*$10370$jXZPP
                                                      g$rhs*$10371$jXZPP
                                                      g$mod**$10372$jXZPP
                                                      g$kwd*$10388$jXZPP)))
                                                 (case-lambda
                                                   ((g$lex*$10435$jXZPP
                                                      g$rhs*$10436$jXZPP
                                                      g$m-exp-id*$10437$jXZPP
                                                      g$m-exp-lab*$10438$jXZPP
                                                      g$r$10439$jXZPP
                                                      g$mr$10440$jXZPP
                                                      g$mod**$10441$jXZPP
                                                      g$kwd*$10442$jXZPP)
                                                    ((case-lambda
                                                       ((g$kwd*$10443$jXZPP
                                                          g$mod**$10444$jXZPP
                                                          g$mr$10445$jXZPP
                                                          g$r$10446$jXZPP
                                                          g$m-exp-lab*$10447$jXZPP
                                                          g$m-exp-id*$10448$jXZPP
                                                          g$rhs*$10449$jXZPP
                                                          g$lex*$10450$jXZPP)
                                                        (begin
                                                          (g$vector-for-each$5356$jXZPP
                                                            (case-lambda
                                                              ((g$id$10451$jXZPP
                                                                 g$lab$10452$jXZPP)
                                                               (g$extend-rib!$7745$jXZPP
                                                                 g$rib$10375$jXZPP
                                                                 g$id$10451$jXZPP
                                                                 g$lab$10452$jXZPP
                                                                 g$sd?$10377$jXZPP)))
                                                            g$m-exp-id*$10448$jXZPP
                                                            g$m-exp-lab*$10447$jXZPP)
                                                          (g$chi-body*$8104$jXZPP
                                                            (cdr g$e*$10367$jXZPP)
                                                            g$r$10446$jXZPP
                                                            g$mr$10445$jXZPP
                                                            g$lex*$10450$jXZPP
                                                            g$rhs*$10449$jXZPP
                                                            g$mod**$10444$jXZPP
                                                            g$kwd*$10443$jXZPP
                                                            g$exp*$10374$jXZPP
                                                            g$rib$10375$jXZPP
                                                            g$mix?$10376$jXZPP
                                                            g$sd?$10377$jXZPP))))
                                                     g$kwd*$10442$jXZPP
                                                     g$mod**$10441$jXZPP
                                                     g$mr$10440$jXZPP
                                                     g$r$10439$jXZPP
                                                     g$m-exp-lab*$10438$jXZPP
                                                     g$m-exp-id*$10437$jXZPP
                                                     g$rhs*$10436$jXZPP
                                                     g$lex*$10435$jXZPP))))
                                               (if (g$memv$5071$jXZPP
                                                     g$t$10389$jXZPP
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$8156$jXZPP
                                                     (g$stx->datum$7793$jXZPP
                                                       g$e$10378$jXZPP))
                                                   (g$chi-body*$8104$jXZPP
                                                     (cdr g$e*$10367$jXZPP)
                                                     g$r$10368$jXZPP
                                                     g$mr$10369$jXZPP
                                                     g$lex*$10370$jXZPP
                                                     g$rhs*$10371$jXZPP
                                                     g$mod**$10372$jXZPP
                                                     g$kwd*$10388$jXZPP
                                                     g$exp*$10374$jXZPP
                                                     g$rib$10375$jXZPP
                                                     g$mix?$10376$jXZPP
                                                     g$sd?$10377$jXZPP))
                                                 (if (g$memv$5071$jXZPP
                                                       g$t$10389$jXZPP
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$10453$jXZPP)
                                                       ((case-lambda
                                                          ((g$ls/false$10454$jXZPP)
                                                           (if g$ls/false$10454$jXZPP
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$10455$jXZPP)
                                                                  (g$chi-body*$8104$jXZPP
                                                                    (cdr g$e*$10367$jXZPP)
                                                                    g$r$10368$jXZPP
                                                                    g$mr$10369$jXZPP
                                                                    g$lex*$10370$jXZPP
                                                                    g$rhs*$10371$jXZPP
                                                                    g$mod**$10372$jXZPP
                                                                    g$kwd*$10388$jXZPP
                                                                    (append
                                                                      g$exp-decl*$10455$jXZPP
                                                                      g$exp*$10374$jXZPP)
                                                                    g$rib$10375$jXZPP
                                                                    g$mix?$10376$jXZPP
                                                                    g$sd?$10377$jXZPP)))
                                                               g$ls/false$10454$jXZPP)
                                                             (g$syntax-violation$8172$jXZPP
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$10453$jXZPP))))
                                                        (g$syntax-dispatch$8060$jXZPP
                                                          g$t$10453$jXZPP
                                                          '(_ . each-any)))))
                                                    g$e$10378$jXZPP)
                                                   (if (g$memv$5071$jXZPP
                                                         g$t$10389$jXZPP
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$10456$jXZPP
                                                                     (case-lambda
                                                                       ((g$e$10498$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$t$10499$jXZPP)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10500$jXZPP)
                                                                                (if (if g$ls/false$10500$jXZPP
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10501$jXZPP)
                                                                                             (g$id?$7782$jXZPP
                                                                                               g$id$10501$jXZPP)))
                                                                                          g$ls/false$10500$jXZPP))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10502$jXZPP)
                                                                                       '#t))
                                                                                    g$ls/false$10500$jXZPP)
                                                                                  ((case-lambda
                                                                                     ((g$t$10503$jXZPP)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10504$jXZPP)
                                                                                          (if g$ls/false$10504$jXZPP
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10505$jXZPP)
                                                                                                 '#f))
                                                                                              g$ls/false$10504$jXZPP)
                                                                                            ((case-lambda
                                                                                               ((g$t$10506$jXZPP)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10507$jXZPP)
                                                                                                    (if g$ls/false$10507$jXZPP
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$8172$jXZPP
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10498$jXZPP)))
                                                                                                        g$ls/false$10507$jXZPP)
                                                                                                      (g$syntax-violation$8172$jXZPP
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10506$jXZPP))))
                                                                                                 (g$syntax-dispatch$8060$jXZPP
                                                                                                   g$t$10506$jXZPP
                                                                                                   '_))))
                                                                                             g$t$10503$jXZPP))))
                                                                                       (g$syntax-dispatch$8060$jXZPP
                                                                                         g$t$10503$jXZPP
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10499$jXZPP))))
                                                                             (g$syntax-dispatch$8060$jXZPP
                                                                               g$t$10499$jXZPP
                                                                               '(_ any)))))
                                                                         g$e$10498$jXZPP))))
                                                                   (g$module-import$10457$jXZPP
                                                                     (case-lambda
                                                                       ((g$e$10481$jXZPP
                                                                          g$r$10482$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$t$10483$jXZPP)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10484$jXZPP)
                                                                                (if (if g$ls/false$10484$jXZPP
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10485$jXZPP)
                                                                                             (g$id?$7782$jXZPP
                                                                                               g$id$10485$jXZPP)))
                                                                                          g$ls/false$10484$jXZPP))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10486$jXZPP)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7802$jXZPP
                                                                                              g$id$10486$jXZPP
                                                                                              g$r$10482$jXZPP)))
                                                                                         (case-lambda
                                                                                           ((g$type$10490$jXZPP
                                                                                              g$value$10491$jXZPP
                                                                                              g$kwd$10492$jXZPP)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$10493$jXZPP
                                                                                                  g$value$10494$jXZPP
                                                                                                  g$type$10495$jXZPP)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10496$jXZPP)
                                                                                                    (if (g$memv$5071$jXZPP
                                                                                                          g$t$10496$jXZPP
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10497$jXZPP)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$8102$jXZPP
                                                                                                              g$iface$10497$jXZPP
                                                                                                              g$id$10486$jXZPP)
                                                                                                            (g$module-interface-exp-lab-vec$8098$jXZPP
                                                                                                              g$iface$10497$jXZPP))))
                                                                                                       g$value$10494$jXZPP)
                                                                                                      (g$syntax-violation$8172$jXZPP
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10481$jXZPP))))
                                                                                                 g$type$10495$jXZPP)))
                                                                                             g$kwd$10492$jXZPP
                                                                                             g$value$10491$jXZPP
                                                                                             g$type$10490$jXZPP))))))
                                                                                    g$ls/false$10484$jXZPP)
                                                                                  (g$syntax-violation$8172$jXZPP
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10483$jXZPP))))
                                                                             (g$syntax-dispatch$8060$jXZPP
                                                                               g$t$10483$jXZPP
                                                                               '(_ any)))))
                                                                         g$e$10481$jXZPP))))
                                                                   (g$library-import$10458$jXZPP
                                                                     (case-lambda
                                                                       ((g$e$10467$jXZPP)
                                                                        ((case-lambda
                                                                           ((g$t$10468$jXZPP)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10469$jXZPP)
                                                                                (if g$ls/false$10469$jXZPP
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$10470$jXZPP
                                                                                         g$imp*$10471$jXZPP)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$8109$jXZPP
                                                                                              (g$syntax->datum$8175$jXZPP
                                                                                                g$imp*$10471$jXZPP))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$10474$jXZPP
                                                                                              g$subst-labels$10475$jXZPP)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$10476$jXZPP
                                                                                                  g$subst-names$10477$jXZPP)
                                                                                                (values
                                                                                                  (g$vector-map$5355$jXZPP
                                                                                                    (case-lambda
                                                                                                      ((g$name$10478$jXZPP)
                                                                                                       (g$datum->stx$7765$jXZPP
                                                                                                         g$ctxt$10470$jXZPP
                                                                                                         g$name$10478$jXZPP)))
                                                                                                    g$subst-names$10477$jXZPP)
                                                                                                  g$subst-labels$10476$jXZPP)))
                                                                                             g$subst-labels$10475$jXZPP
                                                                                             g$subst-names$10474$jXZPP))))))
                                                                                    g$ls/false$10469$jXZPP)
                                                                                  ((case-lambda
                                                                                     ((g$t$10479$jXZPP)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10480$jXZPP)
                                                                                          (if g$ls/false$10480$jXZPP
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8172$jXZPP
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$10467$jXZPP)))
                                                                                              g$ls/false$10480$jXZPP)
                                                                                            (g$syntax-violation$8172$jXZPP
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10479$jXZPP))))
                                                                                       (g$syntax-dispatch$8060$jXZPP
                                                                                         g$t$10479$jXZPP
                                                                                         '_))))
                                                                                   g$t$10468$jXZPP))))
                                                                             (g$syntax-dispatch$8060$jXZPP
                                                                               g$t$10468$jXZPP
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$10467$jXZPP)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$10456$jXZPP
                                                                        g$e$10378$jXZPP)
                                                                    (g$module-import$10457$jXZPP
                                                                      g$e$10378$jXZPP
                                                                      g$r$10368$jXZPP)
                                                                    (g$library-import$10458$jXZPP
                                                                      g$e$10378$jXZPP))))
                                                               (case-lambda
                                                                 ((g$id*$10461$jXZPP
                                                                    g$lab*$10462$jXZPP)
                                                                  ((case-lambda
                                                                     ((g$lab*$10463$jXZPP
                                                                        g$id*$10464$jXZPP)
                                                                      (g$vector-for-each$5356$jXZPP
                                                                        (case-lambda
                                                                          ((g$id$10465$jXZPP
                                                                             g$lab$10466$jXZPP)
                                                                           (g$extend-rib!$7745$jXZPP
                                                                             g$rib$10375$jXZPP
                                                                             g$id$10465$jXZPP
                                                                             g$lab$10466$jXZPP
                                                                             g$sd?$10377$jXZPP)))
                                                                        g$id*$10464$jXZPP
                                                                        g$lab*$10463$jXZPP)))
                                                                   g$lab*$10462$jXZPP
                                                                   g$id*$10461$jXZPP))))
                                                             (g$chi-body*$8104$jXZPP
                                                               (cdr g$e*$10367$jXZPP)
                                                               g$r$10368$jXZPP
                                                               g$mr$10369$jXZPP
                                                               g$lex*$10370$jXZPP
                                                               g$rhs*$10371$jXZPP
                                                               g$mod**$10372$jXZPP
                                                               g$kwd*$10388$jXZPP
                                                               g$exp*$10374$jXZPP
                                                               g$rib$10375$jXZPP
                                                               g$mix?$10376$jXZPP
                                                               g$sd?$10377$jXZPP))))))
                                                     (if g$mix?$10376$jXZPP
                                                       (g$chi-body*$8104$jXZPP
                                                         (cdr g$e*$10367$jXZPP)
                                                         g$r$10368$jXZPP
                                                         g$mr$10369$jXZPP
                                                         (cons
                                                           (g$gen-lexical$7721$jXZPP
                                                             'dummy)
                                                           g$lex*$10370$jXZPP)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$10378$jXZPP)
                                                           g$rhs*$10371$jXZPP)
                                                         g$mod**$10372$jXZPP
                                                         g$kwd*$10388$jXZPP
                                                         g$exp*$10374$jXZPP
                                                         g$rib$10375$jXZPP
                                                         '#t
                                                         g$sd?$10377$jXZPP)
                                                       (values
                                                         g$e*$10367$jXZPP
                                                         g$r$10368$jXZPP
                                                         g$mr$10369$jXZPP
                                                         g$lex*$10370$jXZPP
                                                         g$rhs*$10371$jXZPP
                                                         g$mod**$10372$jXZPP
                                                         g$kwd*$10388$jXZPP
                                                         g$exp*$10374$jXZPP)))))))))))))))
                            g$type$10387$jXZPP)))
                        (if (g$id?$7782$jXZPP g$kwd$10385$jXZPP)
                          (cons g$kwd$10385$jXZPP g$kwd*$10373$jXZPP)
                          g$kwd*$10373$jXZPP))))
                    g$kwd$10384$jXZPP
                    g$value$10383$jXZPP
                    g$type$10382$jXZPP))))))
           (car g$e*$10367$jXZPP))))))
   (g$expand-transformer$8105$jXZPP
     g$expand-transformer$11608$jXZPP
     (case-lambda
       ((g$expr$10508$jXZPP g$r$10509$jXZPP)
        ((case-lambda
           ((g$rtc$10510$jXZPP)
            ((case-lambda
               ((g$expanded-rhs$10511$jXZPP)
                (begin
                  (g$for-each$5079$jXZPP
                    ((case-lambda
                       ((g$mark-visit$10512$jXZPP)
                        (case-lambda
                          ((g$x$10513$jXZPP)
                           (begin
                             (g$invoke-library$7592$jXZPP g$x$10513$jXZPP)
                             (g$mark-visit$10512$jXZPP g$x$10513$jXZPP))))))
                     (g$vis-collector$8113$jXZPP))
                    (g$rtc$10510$jXZPP))
                  g$expanded-rhs$10511$jXZPP)))
             ((case-lambda
                ((g$inv-collector$10518$jXZPP
                   g$vis-collector$10519$jXZPP
                   g$inv-collector$10520$jXZPP
                   g$vis-collector$10521$jXZPP)
                 ((case-lambda
                    ((g$swap$10522$jXZPP)
                     (dynamic-wind
                       g$swap$10522$jXZPP
                       (case-lambda
                         (()
                          (g$chi-expr$8078$jXZPP
                            g$expr$10508$jXZPP
                            g$r$10509$jXZPP
                            g$r$10509$jXZPP)))
                       g$swap$10522$jXZPP)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10523$jXZPP)
                           (begin
                             (g$inv-collector$10518$jXZPP
                               g$inv-collector$10520$jXZPP)
                             (set! g$inv-collector$10520$jXZPP
                               g$t$10523$jXZPP))))
                        (g$inv-collector$10518$jXZPP))
                       ((case-lambda
                          ((g$t$10524$jXZPP)
                           (begin
                             (g$vis-collector$10519$jXZPP
                               g$vis-collector$10521$jXZPP)
                             (set! g$vis-collector$10521$jXZPP
                               g$t$10524$jXZPP))))
                        (g$vis-collector$10519$jXZPP))))))))
              g$inv-collector$8112$jXZPP
              g$vis-collector$8113$jXZPP
              g$rtc$10510$jXZPP
              (case-lambda ((g$x$10525$jXZPP) (values)))))))
         (g$make-collector$8111$jXZPP)))))
   (g$parse-exports$8106$jXZPP
     g$parse-exports$11609$jXZPP
     (case-lambda
       ((g$exp*$10526$jXZPP)
        ((letrec ((g$f$10527$jXZPP
                    (case-lambda
                      ((g$exp*$10528$jXZPP
                         g$int*$10529$jXZPP
                         g$ext*$10530$jXZPP)
                       (if (null? g$exp*$10528$jXZPP)
                         (begin
                           (if (not (g$valid-bound-ids?$7787$jXZPP
                                      g$ext*$10530$jXZPP))
                             (g$syntax-violation$8172$jXZPP
                               'export
                               '"invalid exports"
                               (g$find-dups$8088$jXZPP g$ext*$10530$jXZPP))
                             (void))
                           (values
                             (g$map$5078$jXZPP
                               g$syntax->datum$8175$jXZPP
                               g$ext*$10530$jXZPP)
                             g$int*$10529$jXZPP))
                         ((case-lambda
                            ((g$t$10531$jXZPP)
                             ((case-lambda
                                ((g$ls/false$10532$jXZPP)
                                 (if g$ls/false$10532$jXZPP
                                   (apply
                                     (case-lambda
                                       ((g$rename$10533$jXZPP
                                          g$i*$10534$jXZPP
                                          g$e*$10535$jXZPP)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$8175$jXZPP
                                                              g$rename$10533$jXZPP)
                                                            'rename)
                                                     (if (g$for-all$5076$jXZPP
                                                           g$id?$7782$jXZPP
                                                           g$i*$10534$jXZPP)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5076$jXZPP
                                                           g$id?$7782$jXZPP
                                                           g$e*$10535$jXZPP))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$8172$jXZPP
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10528$jXZPP))
                                            (void))
                                          (g$f$10527$jXZPP
                                            (cdr g$exp*$10528$jXZPP)
                                            (append
                                              g$i*$10534$jXZPP
                                              g$int*$10529$jXZPP)
                                            (append
                                              g$e*$10535$jXZPP
                                              g$ext*$10530$jXZPP)))))
                                     g$ls/false$10532$jXZPP)
                                   ((case-lambda
                                      ((g$t$10536$jXZPP)
                                       ((case-lambda
                                          ((g$ls/false$10537$jXZPP)
                                           (if g$ls/false$10537$jXZPP
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10538$jXZPP)
                                                  (begin
                                                    (if (not (g$id?$7782$jXZPP
                                                               g$ie$10538$jXZPP))
                                                      (g$syntax-violation$8172$jXZPP
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10538$jXZPP)
                                                      (void))
                                                    (g$f$10527$jXZPP
                                                      (cdr g$exp*$10528$jXZPP)
                                                      (cons
                                                        g$ie$10538$jXZPP
                                                        g$int*$10529$jXZPP)
                                                      (cons
                                                        g$ie$10538$jXZPP
                                                        g$ext*$10530$jXZPP)))))
                                               g$ls/false$10537$jXZPP)
                                             (g$syntax-violation$8172$jXZPP
                                               '#f
                                               '"invalid syntax"
                                               g$t$10536$jXZPP))))
                                        (g$syntax-dispatch$8060$jXZPP
                                          g$t$10536$jXZPP
                                          'any))))
                                    g$t$10531$jXZPP))))
                              (g$syntax-dispatch$8060$jXZPP
                                g$t$10531$jXZPP
                                '(any . #(each (any any)))))))
                          (car g$exp*$10528$jXZPP)))))))
           g$f$10527$jXZPP)
         g$exp*$10526$jXZPP
         '()
         '()))))
   (g$parse-library-name$8107$jXZPP
     g$parse-library-name$11610$jXZPP
     (case-lambda
       ((g$spec$10539$jXZPP)
        (letrec* ((g$parse$10540$jXZPP
                    (case-lambda
                      ((g$x$10547$jXZPP)
                       ((case-lambda
                          ((g$t$10548$jXZPP)
                           ((case-lambda
                              ((g$ls/false$10549$jXZPP)
                               (if (if g$ls/false$10549$jXZPP
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10550$jXZPP)
                                            (g$for-all$5076$jXZPP
                                              (case-lambda
                                                ((g$x$10551$jXZPP)
                                                 ((case-lambda
                                                    ((g$x$10552$jXZPP)
                                                     (if (integer?
                                                           g$x$10552$jXZPP)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10552$jXZPP))
                                                       '#f)))
                                                  (g$syntax->datum$8175$jXZPP
                                                    g$x$10551$jXZPP))))
                                              g$v*$10550$jXZPP)))
                                         g$ls/false$10549$jXZPP))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10553$jXZPP)
                                      (values
                                        '()
                                        (g$map$5078$jXZPP
                                          g$syntax->datum$8175$jXZPP
                                          g$v*$10553$jXZPP))))
                                   g$ls/false$10549$jXZPP)
                                 ((case-lambda
                                    ((g$t$10554$jXZPP)
                                     ((case-lambda
                                        ((g$ls/false$10555$jXZPP)
                                         (if (if g$ls/false$10555$jXZPP
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10556$jXZPP
                                                        g$rest$10557$jXZPP)
                                                      (symbol?
                                                        (g$syntax->datum$8175$jXZPP
                                                          g$x$10556$jXZPP))))
                                                   g$ls/false$10555$jXZPP))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10558$jXZPP
                                                  g$rest$10559$jXZPP)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10540$jXZPP
                                                       g$rest$10559$jXZPP)))
                                                  (case-lambda
                                                    ((g$x*$10562$jXZPP
                                                       g$v*$10563$jXZPP)
                                                     ((case-lambda
                                                        ((g$v*$10564$jXZPP
                                                           g$x*$10565$jXZPP)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$8175$jXZPP
                                                               g$x$10558$jXZPP)
                                                             g$x*$10565$jXZPP)
                                                           g$v*$10564$jXZPP)))
                                                      g$v*$10563$jXZPP
                                                      g$x*$10562$jXZPP))))))
                                             g$ls/false$10555$jXZPP)
                                           ((case-lambda
                                              ((g$t$10566$jXZPP)
                                               ((case-lambda
                                                  ((g$ls/false$10567$jXZPP)
                                                   (if g$ls/false$10567$jXZPP
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10567$jXZPP)
                                                     ((case-lambda
                                                        ((g$t$10568$jXZPP)
                                                         ((case-lambda
                                                            ((g$ls/false$10569$jXZPP)
                                                             (if g$ls/false$10569$jXZPP
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8172$jXZPP
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10539$jXZPP)))
                                                                 g$ls/false$10569$jXZPP)
                                                               (g$syntax-violation$8172$jXZPP
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10568$jXZPP))))
                                                          (g$syntax-dispatch$8060$jXZPP
                                                            g$t$10568$jXZPP
                                                            '_))))
                                                      g$t$10566$jXZPP))))
                                                (g$syntax-dispatch$8060$jXZPP
                                                  g$t$10566$jXZPP
                                                  '()))))
                                            g$t$10554$jXZPP))))
                                      (g$syntax-dispatch$8060$jXZPP
                                        g$t$10554$jXZPP
                                        '(any . any)))))
                                  g$t$10548$jXZPP))))
                            (g$syntax-dispatch$8060$jXZPP
                              g$t$10548$jXZPP
                              '(each-any)))))
                        g$x$10547$jXZPP)))))
          (call-with-values
            (case-lambda (() (g$parse$10540$jXZPP g$spec$10539$jXZPP)))
            (case-lambda
              ((g$name*$10543$jXZPP g$ver*$10544$jXZPP)
               ((case-lambda
                  ((g$ver*$10545$jXZPP g$name*$10546$jXZPP)
                   (begin
                     (if (null? g$name*$10546$jXZPP)
                       (g$syntax-violation$8172$jXZPP
                         '#f
                         '"empty library name"
                         g$spec$10539$jXZPP)
                       (void))
                     (values g$name*$10546$jXZPP g$ver*$10545$jXZPP))))
                g$ver*$10544$jXZPP
                g$name*$10543$jXZPP))))))))
   (g$parse-library$8108$jXZPP
     g$parse-library$11611$jXZPP
     (case-lambda
       ((g$e$10570$jXZPP)
        ((case-lambda
           ((g$t$10571$jXZPP)
            ((case-lambda
               ((g$ls/false$10572$jXZPP)
                (if (if g$ls/false$10572$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10573$jXZPP
                               g$name*$10574$jXZPP
                               g$export$10575$jXZPP
                               g$exp*$10576$jXZPP
                               g$import$10577$jXZPP
                               g$imp*$10578$jXZPP
                               g$b*$10579$jXZPP)
                             (if (eq? (g$syntax->datum$8175$jXZPP
                                        g$export$10575$jXZPP)
                                      'export)
                               (if (eq? (g$syntax->datum$8175$jXZPP
                                          g$import$10577$jXZPP)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$8175$jXZPP
                                          g$library$10573$jXZPP)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10572$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10580$jXZPP
                         g$name*$10581$jXZPP
                         g$export$10582$jXZPP
                         g$exp*$10583$jXZPP
                         g$import$10584$jXZPP
                         g$imp*$10585$jXZPP
                         g$b*$10586$jXZPP)
                       (values
                         g$name*$10581$jXZPP
                         g$exp*$10583$jXZPP
                         g$imp*$10585$jXZPP
                         g$b*$10586$jXZPP)))
                    g$ls/false$10572$jXZPP)
                  ((case-lambda
                     ((g$t$10587$jXZPP)
                      ((case-lambda
                         ((g$ls/false$10588$jXZPP)
                          (if g$ls/false$10588$jXZPP
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8172$jXZPP
                                   '#f
                                   '"malformed library"
                                   g$e$10570$jXZPP)))
                              g$ls/false$10588$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$10587$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP g$t$10587$jXZPP '_))))
                   g$t$10571$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$10571$jXZPP
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10570$jXZPP))))
   (g$parse-import-spec*$8109$jXZPP
     g$parse-import-spec*$11612$jXZPP
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10589$jXZPP
                     (case-lambda
                       ((g$x$10850$jXZPP)
                        (symbol?
                          (g$syntax->datum$8175$jXZPP g$x$10850$jXZPP)))))
                   (g$dup-error$10590$jXZPP
                     (case-lambda
                       ((g$name$10849$jXZPP)
                        (g$syntax-violation$8172$jXZPP
                          'import
                          '"two imports with different bindings"
                          g$name$10849$jXZPP))))
                   (g$merge-substs$10591$jXZPP
                     (case-lambda
                       ((g$s$10840$jXZPP g$subst$10841$jXZPP)
                        (letrec* ((g$insert-to-subst$10842$jXZPP
                                    (case-lambda
                                      ((g$a$10843$jXZPP g$subst$10844$jXZPP)
                                       ((case-lambda
                                          ((g$name$10845$jXZPP
                                             g$label$10846$jXZPP)
                                           ((case-lambda
                                              ((g$t$10847$jXZPP)
                                               (if g$t$10847$jXZPP
                                                 ((case-lambda
                                                    ((g$x$10848$jXZPP)
                                                     (if (eq? (cdr g$x$10848$jXZPP)
                                                              g$label$10846$jXZPP)
                                                       g$subst$10844$jXZPP
                                                       (g$dup-error$10590$jXZPP
                                                         g$name$10845$jXZPP))))
                                                  g$t$10847$jXZPP)
                                                 (cons
                                                   g$a$10843$jXZPP
                                                   g$subst$10844$jXZPP))))
                                            (g$assq$5066$jXZPP
                                              g$name$10845$jXZPP
                                              g$subst$10844$jXZPP))))
                                        (car g$a$10843$jXZPP)
                                        (cdr g$a$10843$jXZPP))))))
                          (if (null? g$s$10840$jXZPP)
                            g$subst$10841$jXZPP
                            (g$insert-to-subst$10842$jXZPP
                              (car g$s$10840$jXZPP)
                              (g$merge-substs$10591$jXZPP
                                (cdr g$s$10840$jXZPP)
                                g$subst$10841$jXZPP)))))))
                   (g$exclude*$10592$jXZPP
                     (case-lambda
                       ((g$sym*$10816$jXZPP g$subst$10817$jXZPP)
                        (letrec* ((g$exclude$10818$jXZPP
                                    (case-lambda
                                      ((g$sym$10831$jXZPP g$subst$10832$jXZPP)
                                       (if (null? g$subst$10832$jXZPP)
                                         (g$syntax-violation$8172$jXZPP
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10831$jXZPP)
                                         (if (eq? g$sym$10831$jXZPP
                                                  (g$caar$5303$jXZPP
                                                    g$subst$10832$jXZPP))
                                           (values
                                             (g$cdar$5305$jXZPP
                                               g$subst$10832$jXZPP)
                                             (cdr g$subst$10832$jXZPP))
                                           ((case-lambda
                                              ((g$a$10833$jXZPP)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10818$jXZPP
                                                      g$sym$10831$jXZPP
                                                      (cdr g$subst$10832$jXZPP))))
                                                 (case-lambda
                                                   ((g$old$10836$jXZPP
                                                      g$subst$10837$jXZPP)
                                                    ((case-lambda
                                                       ((g$subst$10838$jXZPP
                                                          g$old$10839$jXZPP)
                                                        (values
                                                          g$old$10839$jXZPP
                                                          (cons
                                                            g$a$10833$jXZPP
                                                            g$subst$10838$jXZPP))))
                                                     g$subst$10837$jXZPP
                                                     g$old$10836$jXZPP))))))
                                            (car g$subst$10832$jXZPP))))))))
                          (if (null? g$sym*$10816$jXZPP)
                            (values '() g$subst$10817$jXZPP)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10818$jXZPP
                                   (car g$sym*$10816$jXZPP)
                                   g$subst$10817$jXZPP)))
                              (case-lambda
                                ((g$old$10821$jXZPP g$subst$10822$jXZPP)
                                 ((case-lambda
                                    ((g$subst$10823$jXZPP g$old$10824$jXZPP)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10592$jXZPP
                                            (cdr g$sym*$10816$jXZPP)
                                            g$subst$10823$jXZPP)))
                                       (case-lambda
                                         ((g$old*$10827$jXZPP
                                            g$subst$10828$jXZPP)
                                          ((case-lambda
                                             ((g$subst$10829$jXZPP
                                                g$old*$10830$jXZPP)
                                              (values
                                                (cons
                                                  g$old$10824$jXZPP
                                                  g$old*$10830$jXZPP)
                                                g$subst$10829$jXZPP)))
                                           g$subst$10828$jXZPP
                                           g$old*$10827$jXZPP))))))
                                  g$subst$10822$jXZPP
                                  g$old$10821$jXZPP)))))))))
                   (g$find*$10593$jXZPP
                     (case-lambda
                       ((g$sym*$10812$jXZPP g$subst$10813$jXZPP)
                        (g$map$5078$jXZPP
                          (case-lambda
                            ((g$x$10814$jXZPP)
                             ((case-lambda
                                ((g$t$10815$jXZPP)
                                 (if g$t$10815$jXZPP
                                   (cdr g$t$10815$jXZPP)
                                   (g$syntax-violation$8172$jXZPP
                                     'import
                                     '"cannot find identifier"
                                     g$x$10814$jXZPP))))
                              (g$assq$5066$jXZPP
                                g$x$10814$jXZPP
                                g$subst$10813$jXZPP))))
                          g$sym*$10812$jXZPP))))
                   (g$rem*$10594$jXZPP
                     (case-lambda
                       ((g$sym*$10808$jXZPP g$subst$10809$jXZPP)
                        ((letrec ((g$f$10810$jXZPP
                                    (case-lambda
                                      ((g$subst$10811$jXZPP)
                                       (if (null? g$subst$10811$jXZPP)
                                         '()
                                         (if (g$memq$5070$jXZPP
                                               (g$caar$5303$jXZPP
                                                 g$subst$10811$jXZPP)
                                               g$sym*$10808$jXZPP)
                                           (g$f$10810$jXZPP
                                             (cdr g$subst$10811$jXZPP))
                                           (cons
                                             (car g$subst$10811$jXZPP)
                                             (g$f$10810$jXZPP
                                               (cdr g$subst$10811$jXZPP)))))))))
                           g$f$10810$jXZPP)
                         g$subst$10809$jXZPP))))
                   (g$remove-dups$10595$jXZPP
                     (case-lambda
                       ((g$ls$10807$jXZPP)
                        (if (null? g$ls$10807$jXZPP)
                          '()
                          (if (g$memq$5070$jXZPP
                                (car g$ls$10807$jXZPP)
                                (cdr g$ls$10807$jXZPP))
                            (g$remove-dups$10595$jXZPP (cdr g$ls$10807$jXZPP))
                            (cons
                              (car g$ls$10807$jXZPP)
                              (g$remove-dups$10595$jXZPP
                                (cdr g$ls$10807$jXZPP))))))))
                   (g$parse-library-name$10596$jXZPP
                     (case-lambda
                       ((g$spec$10691$jXZPP)
                        (letrec* ((g$subversion?$10692$jXZPP
                                    (case-lambda
                                      ((g$x$10805$jXZPP)
                                       ((case-lambda
                                          ((g$x$10806$jXZPP)
                                           (if (integer? g$x$10806$jXZPP)
                                             (if (exact? g$x$10806$jXZPP)
                                               (begin
                                                 '#f
                                                 (>= g$x$10806$jXZPP '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$8175$jXZPP
                                          g$x$10805$jXZPP)))))
                                  (g$subversion-pred$10693$jXZPP
                                    (case-lambda
                                      ((g$x*$10757$jXZPP)
                                       ((case-lambda
                                          ((g$t$10758$jXZPP)
                                           ((case-lambda
                                              ((g$ls/false$10759$jXZPP)
                                               (if (if g$ls/false$10759$jXZPP
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10760$jXZPP)
                                                            (g$subversion?$10692$jXZPP
                                                              g$n$10760$jXZPP)))
                                                         g$ls/false$10759$jXZPP))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10761$jXZPP)
                                                      (case-lambda
                                                        ((g$x$10762$jXZPP)
                                                         (= g$x$10762$jXZPP
                                                            (g$syntax->datum$8175$jXZPP
                                                              g$n$10761$jXZPP))))))
                                                   g$ls/false$10759$jXZPP)
                                                 ((case-lambda
                                                    ((g$t$10763$jXZPP)
                                                     ((case-lambda
                                                        ((g$ls/false$10764$jXZPP)
                                                         (if (if g$ls/false$10764$jXZPP
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10765$jXZPP
                                                                        g$sub*$10766$jXZPP)
                                                                      (eq? (g$syntax->datum$8175$jXZPP
                                                                             g$p?$10765$jXZPP)
                                                                           'and)))
                                                                   g$ls/false$10764$jXZPP))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10767$jXZPP
                                                                  g$sub*$10768$jXZPP)
                                                                ((case-lambda
                                                                   ((g$p*$10769$jXZPP)
                                                                    (case-lambda
                                                                      ((g$x$10770$jXZPP)
                                                                       (g$for-all$5076$jXZPP
                                                                         (case-lambda
                                                                           ((g$p$10771$jXZPP)
                                                                            (g$p$10771$jXZPP
                                                                              g$x$10770$jXZPP)))
                                                                         g$p*$10769$jXZPP)))))
                                                                 (g$map$5078$jXZPP
                                                                   g$subversion-pred$10693$jXZPP
                                                                   g$sub*$10768$jXZPP))))
                                                             g$ls/false$10764$jXZPP)
                                                           ((case-lambda
                                                              ((g$t$10772$jXZPP)
                                                               ((case-lambda
                                                                  ((g$ls/false$10773$jXZPP)
                                                                   (if (if g$ls/false$10773$jXZPP
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10774$jXZPP
                                                                                  g$sub*$10775$jXZPP)
                                                                                (eq? (g$syntax->datum$8175$jXZPP
                                                                                       g$p?$10774$jXZPP)
                                                                                     'or)))
                                                                             g$ls/false$10773$jXZPP))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10776$jXZPP
                                                                            g$sub*$10777$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$p*$10778$jXZPP)
                                                                              (case-lambda
                                                                                ((g$x$10779$jXZPP)
                                                                                 (g$exists$5077$jXZPP
                                                                                   (case-lambda
                                                                                     ((g$p$10780$jXZPP)
                                                                                      (g$p$10780$jXZPP
                                                                                        g$x$10779$jXZPP)))
                                                                                   g$p*$10778$jXZPP)))))
                                                                           (g$map$5078$jXZPP
                                                                             g$subversion-pred$10693$jXZPP
                                                                             g$sub*$10777$jXZPP))))
                                                                       g$ls/false$10773$jXZPP)
                                                                     ((case-lambda
                                                                        ((g$t$10781$jXZPP)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10782$jXZPP)
                                                                             (if (if g$ls/false$10782$jXZPP
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10783$jXZPP
                                                                                            g$sub$10784$jXZPP)
                                                                                          (eq? (g$syntax->datum$8175$jXZPP
                                                                                                 g$p?$10783$jXZPP)
                                                                                               'not)))
                                                                                       g$ls/false$10782$jXZPP))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10785$jXZPP
                                                                                      g$sub$10786$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$p$10787$jXZPP)
                                                                                        (case-lambda
                                                                                          ((g$x$10788$jXZPP)
                                                                                           (not (g$p$10787$jXZPP
                                                                                                  g$x$10788$jXZPP))))))
                                                                                     (g$subversion-pred$10693$jXZPP
                                                                                       g$sub$10786$jXZPP))))
                                                                                 g$ls/false$10782$jXZPP)
                                                                               ((case-lambda
                                                                                  ((g$t$10789$jXZPP)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10790$jXZPP)
                                                                                       (if (if g$ls/false$10790$jXZPP
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10791$jXZPP
                                                                                                      g$n$10792$jXZPP)
                                                                                                    (if (eq? (g$syntax->datum$8175$jXZPP
                                                                                                               g$p?$10791$jXZPP)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10692$jXZPP
                                                                                                          g$n$10792$jXZPP))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10790$jXZPP))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10793$jXZPP
                                                                                                g$n$10794$jXZPP)
                                                                                              (case-lambda
                                                                                                ((g$x$10795$jXZPP)
                                                                                                 (<= g$x$10795$jXZPP
                                                                                                     (g$syntax->datum$8175$jXZPP
                                                                                                       g$n$10794$jXZPP))))))
                                                                                           g$ls/false$10790$jXZPP)
                                                                                         ((case-lambda
                                                                                            ((g$t$10796$jXZPP)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10797$jXZPP)
                                                                                                 (if (if g$ls/false$10797$jXZPP
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10798$jXZPP
                                                                                                                g$n$10799$jXZPP)
                                                                                                              (if (eq? (g$syntax->datum$8175$jXZPP
                                                                                                                         g$p?$10798$jXZPP)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10692$jXZPP
                                                                                                                    g$n$10799$jXZPP))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10797$jXZPP))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10800$jXZPP
                                                                                                          g$n$10801$jXZPP)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10802$jXZPP)
                                                                                                           (>= g$x$10802$jXZPP
                                                                                                               (g$syntax->datum$8175$jXZPP
                                                                                                                 g$n$10801$jXZPP))))))
                                                                                                     g$ls/false$10797$jXZPP)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10803$jXZPP)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10804$jXZPP)
                                                                                                           (if g$ls/false$10804$jXZPP
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$8172$jXZPP
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10691$jXZPP
                                                                                                                    g$x*$10757$jXZPP)))
                                                                                                               g$ls/false$10804$jXZPP)
                                                                                                             (g$syntax-violation$8172$jXZPP
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10803$jXZPP))))
                                                                                                        (g$syntax-dispatch$8060$jXZPP
                                                                                                          g$t$10803$jXZPP
                                                                                                          '_))))
                                                                                                    g$t$10796$jXZPP))))
                                                                                              (g$syntax-dispatch$8060$jXZPP
                                                                                                g$t$10796$jXZPP
                                                                                                '(any any)))))
                                                                                          g$t$10789$jXZPP))))
                                                                                    (g$syntax-dispatch$8060$jXZPP
                                                                                      g$t$10789$jXZPP
                                                                                      '(any any)))))
                                                                                g$t$10781$jXZPP))))
                                                                          (g$syntax-dispatch$8060$jXZPP
                                                                            g$t$10781$jXZPP
                                                                            '(any any)))))
                                                                      g$t$10772$jXZPP))))
                                                                (g$syntax-dispatch$8060$jXZPP
                                                                  g$t$10772$jXZPP
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10763$jXZPP))))
                                                      (g$syntax-dispatch$8060$jXZPP
                                                        g$t$10763$jXZPP
                                                        '(any . each-any)))))
                                                  g$t$10758$jXZPP))))
                                            (g$syntax-dispatch$8060$jXZPP
                                              g$t$10758$jXZPP
                                              'any))))
                                        g$x*$10757$jXZPP))))
                                  (g$version-pred$10694$jXZPP
                                    (case-lambda
                                      ((g$x*$10717$jXZPP)
                                       ((case-lambda
                                          ((g$t$10718$jXZPP)
                                           ((case-lambda
                                              ((g$ls/false$10719$jXZPP)
                                               (if g$ls/false$10719$jXZPP
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10720$jXZPP)
                                                         '#t))))
                                                   g$ls/false$10719$jXZPP)
                                                 ((case-lambda
                                                    ((g$t$10721$jXZPP)
                                                     ((case-lambda
                                                        ((g$ls/false$10722$jXZPP)
                                                         (if (if g$ls/false$10722$jXZPP
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10723$jXZPP
                                                                        g$ver*$10724$jXZPP)
                                                                      (eq? (g$syntax->datum$8175$jXZPP
                                                                             g$c$10723$jXZPP)
                                                                           'and)))
                                                                   g$ls/false$10722$jXZPP))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10725$jXZPP
                                                                  g$ver*$10726$jXZPP)
                                                                ((case-lambda
                                                                   ((g$p*$10727$jXZPP)
                                                                    (case-lambda
                                                                      ((g$x$10728$jXZPP)
                                                                       (g$for-all$5076$jXZPP
                                                                         (case-lambda
                                                                           ((g$p$10729$jXZPP)
                                                                            (g$p$10729$jXZPP
                                                                              g$x$10728$jXZPP)))
                                                                         g$p*$10727$jXZPP)))))
                                                                 (g$map$5078$jXZPP
                                                                   g$version-pred$10694$jXZPP
                                                                   g$ver*$10726$jXZPP))))
                                                             g$ls/false$10722$jXZPP)
                                                           ((case-lambda
                                                              ((g$t$10730$jXZPP)
                                                               ((case-lambda
                                                                  ((g$ls/false$10731$jXZPP)
                                                                   (if (if g$ls/false$10731$jXZPP
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10732$jXZPP
                                                                                  g$ver*$10733$jXZPP)
                                                                                (eq? (g$syntax->datum$8175$jXZPP
                                                                                       g$c$10732$jXZPP)
                                                                                     'or)))
                                                                             g$ls/false$10731$jXZPP))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10734$jXZPP
                                                                            g$ver*$10735$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$p*$10736$jXZPP)
                                                                              (case-lambda
                                                                                ((g$x$10737$jXZPP)
                                                                                 (g$exists$5077$jXZPP
                                                                                   (case-lambda
                                                                                     ((g$p$10738$jXZPP)
                                                                                      (g$p$10738$jXZPP
                                                                                        g$x$10737$jXZPP)))
                                                                                   g$p*$10736$jXZPP)))))
                                                                           (g$map$5078$jXZPP
                                                                             g$version-pred$10694$jXZPP
                                                                             g$ver*$10735$jXZPP))))
                                                                       g$ls/false$10731$jXZPP)
                                                                     ((case-lambda
                                                                        ((g$t$10739$jXZPP)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10740$jXZPP)
                                                                             (if (if g$ls/false$10740$jXZPP
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10741$jXZPP
                                                                                            g$ver$10742$jXZPP)
                                                                                          (eq? (g$syntax->datum$8175$jXZPP
                                                                                                 g$c$10741$jXZPP)
                                                                                               'not)))
                                                                                       g$ls/false$10740$jXZPP))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10743$jXZPP
                                                                                      g$ver$10744$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$p$10745$jXZPP)
                                                                                        (case-lambda
                                                                                          ((g$x$10746$jXZPP)
                                                                                           (not (g$p$10745$jXZPP
                                                                                                  g$x$10746$jXZPP))))))
                                                                                     (g$version-pred$10694$jXZPP
                                                                                       g$ver$10744$jXZPP))))
                                                                                 g$ls/false$10740$jXZPP)
                                                                               ((case-lambda
                                                                                  ((g$t$10747$jXZPP)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10748$jXZPP)
                                                                                       (if g$ls/false$10748$jXZPP
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10749$jXZPP)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10750$jXZPP)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10751$jXZPP)
                                                                                                     ((letrec ((g$f$10752$jXZPP
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10753$jXZPP
                                                                                                                      g$x$10754$jXZPP)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10753$jXZPP)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10754$jXZPP)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10753$jXZPP)
                                                                                                                             (car g$x$10754$jXZPP))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10752$jXZPP
                                                                                                                              (cdr g$p*$10753$jXZPP)
                                                                                                                              (cdr g$x$10754$jXZPP)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10752$jXZPP)
                                                                                                      g$p*$10750$jXZPP
                                                                                                      g$x$10751$jXZPP)))))
                                                                                               (g$map$5078$jXZPP
                                                                                                 g$subversion-pred$10693$jXZPP
                                                                                                 g$sub*$10749$jXZPP))))
                                                                                           g$ls/false$10748$jXZPP)
                                                                                         ((case-lambda
                                                                                            ((g$t$10755$jXZPP)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10756$jXZPP)
                                                                                                 (if g$ls/false$10756$jXZPP
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$8172$jXZPP
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10691$jXZPP
                                                                                                          g$x*$10717$jXZPP)))
                                                                                                     g$ls/false$10756$jXZPP)
                                                                                                   (g$syntax-violation$8172$jXZPP
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10755$jXZPP))))
                                                                                              (g$syntax-dispatch$8060$jXZPP
                                                                                                g$t$10755$jXZPP
                                                                                                '_))))
                                                                                          g$t$10747$jXZPP))))
                                                                                    (g$syntax-dispatch$8060$jXZPP
                                                                                      g$t$10747$jXZPP
                                                                                      'each-any))))
                                                                                g$t$10739$jXZPP))))
                                                                          (g$syntax-dispatch$8060$jXZPP
                                                                            g$t$10739$jXZPP
                                                                            '(any any)))))
                                                                      g$t$10730$jXZPP))))
                                                                (g$syntax-dispatch$8060$jXZPP
                                                                  g$t$10730$jXZPP
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10721$jXZPP))))
                                                      (g$syntax-dispatch$8060$jXZPP
                                                        g$t$10721$jXZPP
                                                        '(any . each-any)))))
                                                  g$t$10718$jXZPP))))
                                            (g$syntax-dispatch$8060$jXZPP
                                              g$t$10718$jXZPP
                                              '()))))
                                        g$x*$10717$jXZPP)))))
                          ((letrec ((g$f$10695$jXZPP
                                      (case-lambda
                                        ((g$x$10696$jXZPP)
                                         ((case-lambda
                                            ((g$t$10697$jXZPP)
                                             ((case-lambda
                                                ((g$ls/false$10698$jXZPP)
                                                 (if g$ls/false$10698$jXZPP
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10699$jXZPP)
                                                        (values
                                                          '()
                                                          (g$version-pred$10694$jXZPP
                                                            g$version-spec*$10699$jXZPP))))
                                                     g$ls/false$10698$jXZPP)
                                                   ((case-lambda
                                                      ((g$t$10700$jXZPP)
                                                       ((case-lambda
                                                          ((g$ls/false$10701$jXZPP)
                                                           (if (if g$ls/false$10701$jXZPP
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10702$jXZPP
                                                                          g$x*$10703$jXZPP)
                                                                        (g$idsyn?$10589$jXZPP
                                                                          g$x$10702$jXZPP)))
                                                                     g$ls/false$10701$jXZPP))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10704$jXZPP
                                                                    g$x*$10705$jXZPP)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10695$jXZPP
                                                                         g$x*$10705$jXZPP)))
                                                                    (case-lambda
                                                                      ((g$name$10708$jXZPP
                                                                         g$pred$10709$jXZPP)
                                                                       ((case-lambda
                                                                          ((g$pred$10710$jXZPP
                                                                             g$name$10711$jXZPP)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$8175$jXZPP
                                                                                 g$x$10704$jXZPP)
                                                                               g$name$10711$jXZPP)
                                                                             g$pred$10710$jXZPP)))
                                                                        g$pred$10709$jXZPP
                                                                        g$name$10708$jXZPP))))))
                                                               g$ls/false$10701$jXZPP)
                                                             ((case-lambda
                                                                ((g$t$10712$jXZPP)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10713$jXZPP)
                                                                     (if g$ls/false$10713$jXZPP
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10714$jXZPP)
                                                                                 '#t)))))
                                                                         g$ls/false$10713$jXZPP)
                                                                       ((case-lambda
                                                                          ((g$t$10715$jXZPP)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10716$jXZPP)
                                                                               (if g$ls/false$10716$jXZPP
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$8172$jXZPP
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10691$jXZPP)))
                                                                                   g$ls/false$10716$jXZPP)
                                                                                 (g$syntax-violation$8172$jXZPP
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10715$jXZPP))))
                                                                            (g$syntax-dispatch$8060$jXZPP
                                                                              g$t$10715$jXZPP
                                                                              '_))))
                                                                        g$t$10712$jXZPP))))
                                                                  (g$syntax-dispatch$8060$jXZPP
                                                                    g$t$10712$jXZPP
                                                                    '()))))
                                                              g$t$10700$jXZPP))))
                                                        (g$syntax-dispatch$8060$jXZPP
                                                          g$t$10700$jXZPP
                                                          '(any . any)))))
                                                    g$t$10697$jXZPP))))
                                              (g$syntax-dispatch$8060$jXZPP
                                                g$t$10697$jXZPP
                                                '(each-any)))))
                                          g$x$10696$jXZPP)))))
                             g$f$10695$jXZPP)
                           g$spec$10691$jXZPP)))))
                   (g$import-library$10597$jXZPP
                     (case-lambda
                       ((g$spec*$10683$jXZPP)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10596$jXZPP
                               g$spec*$10683$jXZPP)))
                          (case-lambda
                            ((g$name$10686$jXZPP g$pred$10687$jXZPP)
                             ((case-lambda
                                ((g$pred$10688$jXZPP g$name$10689$jXZPP)
                                 (begin
                                   (if (null? g$name$10689$jXZPP)
                                     (g$syntax-violation$8172$jXZPP
                                       'import
                                       '"empty library name"
                                       g$spec*$10683$jXZPP)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10690$jXZPP)
                                       (begin
                                         (if (not g$lib$10690$jXZPP)
                                           (g$syntax-violation$8172$jXZPP
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10689$jXZPP)
                                           (void))
                                         (if (not (g$pred$10688$jXZPP
                                                    (g$library-version$7545$jXZPP
                                                      g$lib$10690$jXZPP)))
                                           (g$syntax-violation$8172$jXZPP
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10683$jXZPP
                                             g$lib$10690$jXZPP)
                                           (void))
                                         ((g$imp-collector$8114$jXZPP)
                                          g$lib$10690$jXZPP)
                                         (g$library-subst$7549$jXZPP
                                           g$lib$10690$jXZPP))))
                                    (g$find-library-by-name$7585$jXZPP
                                      g$name$10689$jXZPP)))))
                              g$pred$10687$jXZPP
                              g$name$10686$jXZPP)))))))
                   (g$get-import$10598$jXZPP
                     (case-lambda
                       ((g$spec$10612$jXZPP)
                        ((case-lambda
                           ((g$t$10613$jXZPP)
                            ((case-lambda
                               ((g$ls/false$10614$jXZPP)
                                (if (if g$ls/false$10614$jXZPP
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10615$jXZPP g$x*$10616$jXZPP)
                                             (not (g$memq$5070$jXZPP
                                                    (g$syntax->datum$8175$jXZPP
                                                      g$x$10615$jXZPP)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10614$jXZPP))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10617$jXZPP g$x*$10618$jXZPP)
                                       (g$import-library$10597$jXZPP
                                         (cons
                                           g$x$10617$jXZPP
                                           g$x*$10618$jXZPP))))
                                    g$ls/false$10614$jXZPP)
                                  ((case-lambda
                                     ((g$t$10619$jXZPP)
                                      ((case-lambda
                                         ((g$ls/false$10620$jXZPP)
                                          (if (if g$ls/false$10620$jXZPP
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10621$jXZPP
                                                         g$isp$10622$jXZPP
                                                         g$old*$10623$jXZPP
                                                         g$new*$10624$jXZPP)
                                                       (if (eq? (g$syntax->datum$8175$jXZPP
                                                                  g$rename$10621$jXZPP)
                                                                'rename)
                                                         (if (g$for-all$5076$jXZPP
                                                               g$idsyn?$10589$jXZPP
                                                               g$old*$10623$jXZPP)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5076$jXZPP
                                                               g$idsyn?$10589$jXZPP
                                                               g$new*$10624$jXZPP))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10620$jXZPP))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10625$jXZPP
                                                   g$isp$10626$jXZPP
                                                   g$old*$10627$jXZPP
                                                   g$new*$10628$jXZPP)
                                                 ((case-lambda
                                                    ((g$subst$10629$jXZPP
                                                       g$old*$10630$jXZPP
                                                       g$new*$10631$jXZPP)
                                                     ((case-lambda
                                                        ((g$old-label*$10632$jXZPP)
                                                         ((case-lambda
                                                            ((g$subst$10633$jXZPP)
                                                             (g$merge-substs$10591$jXZPP
                                                               (g$map$5078$jXZPP
                                                                 cons
                                                                 g$new*$10631$jXZPP
                                                                 g$old-label*$10632$jXZPP)
                                                               g$subst$10633$jXZPP)))
                                                          (g$rem*$10594$jXZPP
                                                            g$old*$10630$jXZPP
                                                            g$subst$10629$jXZPP))))
                                                      (g$find*$10593$jXZPP
                                                        g$old*$10630$jXZPP
                                                        g$subst$10629$jXZPP))))
                                                  (g$get-import$10598$jXZPP
                                                    g$isp$10626$jXZPP)
                                                  (g$map$5078$jXZPP
                                                    g$syntax->datum$8175$jXZPP
                                                    g$old*$10627$jXZPP)
                                                  (g$map$5078$jXZPP
                                                    g$syntax->datum$8175$jXZPP
                                                    g$new*$10628$jXZPP))))
                                              g$ls/false$10620$jXZPP)
                                            ((case-lambda
                                               ((g$t$10634$jXZPP)
                                                ((case-lambda
                                                   ((g$ls/false$10635$jXZPP)
                                                    (if (if g$ls/false$10635$jXZPP
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10636$jXZPP
                                                                   g$isp$10637$jXZPP
                                                                   g$sym*$10638$jXZPP)
                                                                 (if (eq? (g$syntax->datum$8175$jXZPP
                                                                            g$except$10636$jXZPP)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5076$jXZPP
                                                                       g$idsyn?$10589$jXZPP
                                                                       g$sym*$10638$jXZPP))
                                                                   '#f)))
                                                              g$ls/false$10635$jXZPP))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10639$jXZPP
                                                             g$isp$10640$jXZPP
                                                             g$sym*$10641$jXZPP)
                                                           ((case-lambda
                                                              ((g$subst$10642$jXZPP)
                                                               (g$rem*$10594$jXZPP
                                                                 (g$map$5078$jXZPP
                                                                   g$syntax->datum$8175$jXZPP
                                                                   g$sym*$10641$jXZPP)
                                                                 g$subst$10642$jXZPP)))
                                                            (g$get-import$10598$jXZPP
                                                              g$isp$10640$jXZPP))))
                                                        g$ls/false$10635$jXZPP)
                                                      ((case-lambda
                                                         ((g$t$10643$jXZPP)
                                                          ((case-lambda
                                                             ((g$ls/false$10644$jXZPP)
                                                              (if (if g$ls/false$10644$jXZPP
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10645$jXZPP
                                                                             g$isp$10646$jXZPP
                                                                             g$sym*$10647$jXZPP)
                                                                           (if (eq? (g$syntax->datum$8175$jXZPP
                                                                                      g$only$10645$jXZPP)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5076$jXZPP
                                                                                 g$idsyn?$10589$jXZPP
                                                                                 g$sym*$10647$jXZPP))
                                                                             '#f)))
                                                                        g$ls/false$10644$jXZPP))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10648$jXZPP
                                                                       g$isp$10649$jXZPP
                                                                       g$sym*$10650$jXZPP)
                                                                     ((case-lambda
                                                                        ((g$subst$10651$jXZPP
                                                                           g$sym*$10652$jXZPP)
                                                                         ((case-lambda
                                                                            ((g$sym*$10653$jXZPP)
                                                                             ((case-lambda
                                                                                ((g$lab*$10654$jXZPP)
                                                                                 (g$map$5078$jXZPP
                                                                                   cons
                                                                                   g$sym*$10653$jXZPP
                                                                                   g$lab*$10654$jXZPP)))
                                                                              (g$find*$10593$jXZPP
                                                                                g$sym*$10653$jXZPP
                                                                                g$subst$10651$jXZPP))))
                                                                          (g$remove-dups$10595$jXZPP
                                                                            g$sym*$10652$jXZPP))))
                                                                      (g$get-import$10598$jXZPP
                                                                        g$isp$10649$jXZPP)
                                                                      (g$map$5078$jXZPP
                                                                        g$syntax->datum$8175$jXZPP
                                                                        g$sym*$10650$jXZPP))))
                                                                  g$ls/false$10644$jXZPP)
                                                                ((case-lambda
                                                                   ((g$t$10655$jXZPP)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10656$jXZPP)
                                                                        (if (if g$ls/false$10656$jXZPP
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10657$jXZPP
                                                                                       g$isp$10658$jXZPP
                                                                                       g$p$10659$jXZPP)
                                                                                     (if (eq? (g$syntax->datum$8175$jXZPP
                                                                                                g$prefix$10657$jXZPP)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10589$jXZPP
                                                                                           g$p$10659$jXZPP))
                                                                                       '#f)))
                                                                                  g$ls/false$10656$jXZPP))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10660$jXZPP
                                                                                 g$isp$10661$jXZPP
                                                                                 g$p$10662$jXZPP)
                                                                               ((case-lambda
                                                                                  ((g$subst$10663$jXZPP
                                                                                     g$prefix$10664$jXZPP)
                                                                                   (g$map$5078$jXZPP
                                                                                     (case-lambda
                                                                                       ((g$x$10665$jXZPP)
                                                                                        (cons
                                                                                          (string->symbol
                                                                                            (string-append
                                                                                              g$prefix$10664$jXZPP
                                                                                              (symbol->string
                                                                                                (car g$x$10665$jXZPP))))
                                                                                          (cdr g$x$10665$jXZPP))))
                                                                                     g$subst$10663$jXZPP)))
                                                                                (g$get-import$10598$jXZPP
                                                                                  g$isp$10661$jXZPP)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$8175$jXZPP
                                                                                    g$p$10662$jXZPP)))))
                                                                            g$ls/false$10656$jXZPP)
                                                                          ((case-lambda
                                                                             ((g$t$10666$jXZPP)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10667$jXZPP)
                                                                                  (if (if g$ls/false$10667$jXZPP
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10668$jXZPP
                                                                                                 g$spec*$10669$jXZPP)
                                                                                               (eq? (g$syntax->datum$8175$jXZPP
                                                                                                      g$library$10668$jXZPP)
                                                                                                    'library)))
                                                                                            g$ls/false$10667$jXZPP))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10670$jXZPP
                                                                                           g$spec*$10671$jXZPP)
                                                                                         (g$import-library$10597$jXZPP
                                                                                           g$spec*$10671$jXZPP)))
                                                                                      g$ls/false$10667$jXZPP)
                                                                                    ((case-lambda
                                                                                       ((g$t$10672$jXZPP)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10673$jXZPP)
                                                                                            (if (if g$ls/false$10673$jXZPP
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10674$jXZPP
                                                                                                           g$isp$10675$jXZPP
                                                                                                           g$rest$10676$jXZPP)
                                                                                                         (eq? (g$syntax->datum$8175$jXZPP
                                                                                                                g$for$10674$jXZPP)
                                                                                                              'for)))
                                                                                                      g$ls/false$10673$jXZPP))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10677$jXZPP
                                                                                                     g$isp$10678$jXZPP
                                                                                                     g$rest$10679$jXZPP)
                                                                                                   (g$get-import$10598$jXZPP
                                                                                                     g$isp$10678$jXZPP)))
                                                                                                g$ls/false$10673$jXZPP)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10680$jXZPP)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10681$jXZPP)
                                                                                                      (if g$ls/false$10681$jXZPP
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10682$jXZPP)
                                                                                                             (g$syntax-violation$8172$jXZPP
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10682$jXZPP)))
                                                                                                          g$ls/false$10681$jXZPP)
                                                                                                        (g$syntax-violation$8172$jXZPP
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10680$jXZPP))))
                                                                                                   (g$syntax-dispatch$8060$jXZPP
                                                                                                     g$t$10680$jXZPP
                                                                                                     'any))))
                                                                                               g$t$10672$jXZPP))))
                                                                                         (g$syntax-dispatch$8060$jXZPP
                                                                                           g$t$10672$jXZPP
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10666$jXZPP))))
                                                                               (g$syntax-dispatch$8060$jXZPP
                                                                                 g$t$10666$jXZPP
                                                                                 '(any each-any)))))
                                                                           g$t$10655$jXZPP))))
                                                                     (g$syntax-dispatch$8060$jXZPP
                                                                       g$t$10655$jXZPP
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10643$jXZPP))))
                                                           (g$syntax-dispatch$8060$jXZPP
                                                             g$t$10643$jXZPP
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10634$jXZPP))))
                                                 (g$syntax-dispatch$8060$jXZPP
                                                   g$t$10634$jXZPP
                                                   '(any any . each-any)))))
                                             g$t$10619$jXZPP))))
                                       (g$syntax-dispatch$8060$jXZPP
                                         g$t$10619$jXZPP
                                         '(any any . #(each (any any)))))))
                                   g$t$10613$jXZPP))))
                             (g$syntax-dispatch$8060$jXZPP
                               g$t$10613$jXZPP
                               '(any . each-any)))))
                         g$spec$10612$jXZPP))))
                   (g$add-imports!$10599$jXZPP
                     (case-lambda
                       ((g$imp$10604$jXZPP g$h$10605$jXZPP)
                        ((case-lambda
                           ((g$subst$10606$jXZPP)
                            (g$for-each$5079$jXZPP
                              (case-lambda
                                ((g$x$10607$jXZPP)
                                 ((case-lambda
                                    ((g$name$10608$jXZPP g$label$10609$jXZPP)
                                     ((case-lambda
                                        ((g$t$10610$jXZPP)
                                         (if g$t$10610$jXZPP
                                           ((case-lambda
                                              ((g$l$10611$jXZPP)
                                               (if (not (eq? g$l$10611$jXZPP
                                                             g$label$10609$jXZPP))
                                                 (g$dup-error$10590$jXZPP
                                                   g$name$10608$jXZPP)
                                                 (void))))
                                            g$t$10610$jXZPP)
                                           (g$hashtable-set!$5585$jXZPP
                                             g$h$10605$jXZPP
                                             g$name$10608$jXZPP
                                             g$label$10609$jXZPP))))
                                      (g$hashtable-ref$5584$jXZPP
                                        g$h$10605$jXZPP
                                        g$name$10608$jXZPP
                                        '#f))))
                                  (car g$x$10607$jXZPP)
                                  (cdr g$x$10607$jXZPP))))
                              g$subst$10606$jXZPP)))
                         (g$get-import$10598$jXZPP g$imp$10604$jXZPP))))))
           (case-lambda
             ((g$imp*$10600$jXZPP)
              ((letrec ((g$f$10601$jXZPP
                          (case-lambda
                            ((g$imp*$10602$jXZPP g$h$10603$jXZPP)
                             (if (null? g$imp*$10602$jXZPP)
                               (hashtable-entries g$h$10603$jXZPP)
                               (begin
                                 (g$add-imports!$10599$jXZPP
                                   (car g$imp*$10602$jXZPP)
                                   g$h$10603$jXZPP)
                                 (g$f$10601$jXZPP
                                   (cdr g$imp*$10602$jXZPP)
                                   g$h$10603$jXZPP)))))))
                 g$f$10601$jXZPP)
               g$imp*$10600$jXZPP
               (g$make-eq-hashtable$5581$jXZPP)))))))))
   (g$make-top-rib$8110$jXZPP
     g$make-top-rib$11613$jXZPP
     (case-lambda
       ((g$names$10851$jXZPP g$labels$10852$jXZPP)
        ((case-lambda
           ((g$rib$10853$jXZPP)
            (begin
              (g$vector-for-each$5356$jXZPP
                (case-lambda
                  ((g$name$10854$jXZPP g$label$10855$jXZPP)
                   (begin
                     (if (not (symbol? g$name$10854$jXZPP))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10854$jXZPP)
                       (void))
                     (g$extend-rib/nc!$7746$jXZPP
                       g$rib$10853$jXZPP
                       (g$make-stx$7755$jXZPP
                         g$name$10854$jXZPP
                         g$top-mark*$7719$jXZPP
                         '()
                         '())
                       g$label$10855$jXZPP))))
                g$names$10851$jXZPP
                g$labels$10852$jXZPP)
              g$rib$10853$jXZPP)))
         (g$make-cache-rib$7743$jXZPP)))))
   (g$make-collector$8111$jXZPP
     g$make-collector$11614$jXZPP
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10856$jXZPP)
            (case-lambda
              (() g$ls$10856$jXZPP)
              ((g$x$10857$jXZPP)
               (set! g$ls$10856$jXZPP
                 (g$set-cons$7716$jXZPP g$x$10857$jXZPP g$ls$10856$jXZPP))))))
         '()))))
   (g$inv-collector$8112$jXZPP
     g$inv-collector$11615$jXZPP
     (g$make-parameter$7044$jXZPP
       (case-lambda
         (g$args$10858$jXZPP
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10859$jXZPP)
          (begin
            (if (not (procedure? g$x$10859$jXZPP))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10859$jXZPP)
              (void))
            g$x$10859$jXZPP)))))
   (g$vis-collector$8113$jXZPP
     g$vis-collector$11616$jXZPP
     (g$make-parameter$7044$jXZPP
       (case-lambda
         (g$args$10860$jXZPP
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10861$jXZPP)
          (begin
            (if (not (procedure? g$x$10861$jXZPP))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10861$jXZPP)
              (void))
            g$x$10861$jXZPP)))))
   (g$imp-collector$8114$jXZPP
     g$imp-collector$11617$jXZPP
     (g$make-parameter$7044$jXZPP
       (case-lambda
         (g$args$10862$jXZPP
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10863$jXZPP)
          (begin
            (if (not (procedure? g$x$10863$jXZPP))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10863$jXZPP)
              (void))
            g$x$10863$jXZPP)))))
   (g$chi-library-internal$8115$jXZPP
     g$chi-library-internal$11618$jXZPP
     (case-lambda
       ((g$e*$10864$jXZPP g$rib$10865$jXZPP g$mix?$10866$jXZPP)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8104$jXZPP
               g$e*$10864$jXZPP
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10865$jXZPP
               g$mix?$10866$jXZPP
               '#t)))
          (case-lambda
            ((g$e*$10875$jXZPP
               g$r$10876$jXZPP
               g$mr$10877$jXZPP
               g$lex*$10878$jXZPP
               g$rhs*$10879$jXZPP
               g$mod**$10880$jXZPP
               g$_kwd*$10881$jXZPP
               g$exp*$10882$jXZPP)
             ((case-lambda
                ((g$exp*$10883$jXZPP
                   g$_kwd*$10884$jXZPP
                   g$mod**$10885$jXZPP
                   g$rhs*$10886$jXZPP
                   g$lex*$10887$jXZPP
                   g$mr$10888$jXZPP
                   g$r$10889$jXZPP
                   g$e*$10890$jXZPP)
                 (values
                   (append
                     (apply append (reverse g$mod**$10885$jXZPP))
                     g$e*$10890$jXZPP)
                   g$r$10889$jXZPP
                   g$mr$10888$jXZPP
                   (reverse g$lex*$10887$jXZPP)
                   (reverse g$rhs*$10886$jXZPP)
                   g$exp*$10883$jXZPP)))
              g$exp*$10882$jXZPP
              g$_kwd*$10881$jXZPP
              g$mod**$10880$jXZPP
              g$rhs*$10879$jXZPP
              g$lex*$10878$jXZPP
              g$mr$10877$jXZPP
              g$r$10876$jXZPP
              g$e*$10875$jXZPP)))))))
   (g$chi-interaction-expr$8116$jXZPP
     g$chi-interaction-expr$11619$jXZPP
     (case-lambda
       ((g$e$10891$jXZPP g$rib$10892$jXZPP g$r$10893$jXZPP)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8104$jXZPP
               (list g$e$10891$jXZPP)
               g$r$10893$jXZPP
               g$r$10893$jXZPP
               '()
               '()
               '()
               '()
               '()
               g$rib$10892$jXZPP
               '#t
               '#f)))
          (case-lambda
            ((g$e*$10902$jXZPP
               g$r$10903$jXZPP
               g$mr$10904$jXZPP
               g$lex*$10905$jXZPP
               g$rhs*$10906$jXZPP
               g$mod**$10907$jXZPP
               g$_kwd*$10908$jXZPP
               g$_exp*$10909$jXZPP)
             ((case-lambda
                ((g$_exp*$10910$jXZPP
                   g$_kwd*$10911$jXZPP
                   g$mod**$10912$jXZPP
                   g$rhs*$10913$jXZPP
                   g$lex*$10914$jXZPP
                   g$mr$10915$jXZPP
                   g$r$10916$jXZPP
                   g$e*$10917$jXZPP)
                 ((case-lambda
                    ((g$e*$10918$jXZPP)
                     ((case-lambda
                        ((g$e$10919$jXZPP)
                         (values g$e$10919$jXZPP g$r$10916$jXZPP)))
                      (if (null? g$e*$10918$jXZPP)
                        (g$build-void$7712$jXZPP)
                        (if (null? (cdr g$e*$10918$jXZPP))
                          (car g$e*$10918$jXZPP)
                          (g$build-sequence$7711$jXZPP
                            '#f
                            g$e*$10918$jXZPP))))))
                  (g$expand-interaction-rhs*/init*$8085$jXZPP
                    (reverse g$lex*$10914$jXZPP)
                    (reverse g$rhs*$10913$jXZPP)
                    (append
                      (apply append (reverse g$mod**$10912$jXZPP))
                      g$e*$10917$jXZPP)
                    g$r$10916$jXZPP
                    g$mr$10915$jXZPP))))
              g$_exp*$10909$jXZPP
              g$_kwd*$10908$jXZPP
              g$mod**$10907$jXZPP
              g$rhs*$10906$jXZPP
              g$lex*$10905$jXZPP
              g$mr$10904$jXZPP
              g$r$10903$jXZPP
              g$e*$10902$jXZPP)))))))
   (g$library-body-expander$8117$jXZPP
     g$library-body-expander$11620$jXZPP
     (case-lambda
       ((g$name$10920$jXZPP
          g$main-exp*$10921$jXZPP
          g$imp*$10922$jXZPP
          g$b*$10923$jXZPP
          g$mix?$10924$jXZPP)
        (letrec* ((g$itc$10925$jXZPP (g$make-collector$8111$jXZPP)))
          ((case-lambda
             ((g$imp-collector$10930$jXZPP
                g$top-level-context$10931$jXZPP
                g$imp-collector$10932$jXZPP
                g$top-level-context$10933$jXZPP)
              ((case-lambda
                 ((g$swap$10934$jXZPP)
                  (dynamic-wind
                    g$swap$10934$jXZPP
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$8109$jXZPP
                              g$imp*$10922$jXZPP)))
                         (case-lambda
                           ((g$subst-names$10937$jXZPP
                              g$subst-labels$10938$jXZPP)
                            ((case-lambda
                               ((g$subst-labels$10939$jXZPP
                                  g$subst-names$10940$jXZPP)
                                ((case-lambda
                                   ((g$rib$10941$jXZPP)
                                    (letrec* ((g$wrap$10942$jXZPP
                                                (case-lambda
                                                  ((g$x$11004$jXZPP)
                                                   (g$make-stx$7755$jXZPP
                                                     g$x$11004$jXZPP
                                                     g$top-mark*$7719$jXZPP
                                                     (list g$rib$10941$jXZPP)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10943$jXZPP
                                            g$main-exp*$10944$jXZPP
                                            g$rtc$10945$jXZPP
                                            g$vtc$10946$jXZPP)
                                          ((case-lambda
                                             ((g$inv-collector$10951$jXZPP
                                                g$vis-collector$10952$jXZPP
                                                g$inv-collector$10953$jXZPP
                                                g$vis-collector$10954$jXZPP)
                                              ((case-lambda
                                                 ((g$swap$10955$jXZPP)
                                                  (dynamic-wind
                                                    g$swap$10955$jXZPP
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$8115$jXZPP
                                                              g$b*$10943$jXZPP
                                                              g$rib$10941$jXZPP
                                                              g$mix?$10924$jXZPP)))
                                                         (case-lambda
                                                           ((g$init*$10962$jXZPP
                                                              g$r$10963$jXZPP
                                                              g$mr$10964$jXZPP
                                                              g$lex*$10965$jXZPP
                                                              g$rhs*$10966$jXZPP
                                                              g$internal-exp*$10967$jXZPP)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10968$jXZPP
                                                                  g$rhs*$10969$jXZPP
                                                                  g$lex*$10970$jXZPP
                                                                  g$mr$10971$jXZPP
                                                                  g$r$10972$jXZPP
                                                                  g$init*$10973$jXZPP)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$8106$jXZPP
                                                                       (append
                                                                         g$main-exp*$10944$jXZPP
                                                                         g$internal-exp*$10968$jXZPP))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10976$jXZPP
                                                                       g$exp-id*$10977$jXZPP)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10978$jXZPP
                                                                           g$exp-name*$10979$jXZPP)
                                                                         (begin
                                                                           (g$seal-rib!$7748$jXZPP
                                                                             g$rib$10941$jXZPP)
                                                                           ((case-lambda
                                                                              ((g$init*$10980$jXZPP)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10981$jXZPP)
                                                                                   (begin
                                                                                     (g$unseal-rib!$7749$jXZPP
                                                                                       g$rib$10941$jXZPP)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$10982$jXZPP
                                                                                           g$export-subst$10983$jXZPP)
                                                                                         (letrec* ((g$errstr$10984$jXZPP
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$8161$jXZPP
                                                                                                  g$lex*$10970$jXZPP
                                                                                                  g$loc*$10982$jXZPP
                                                                                                  g$r$10972$jXZPP)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$10988$jXZPP
                                                                                                  g$global*$10989$jXZPP
                                                                                                  g$macro*$10990$jXZPP)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$10991$jXZPP
                                                                                                      g$global*$10992$jXZPP
                                                                                                      g$export-env$10993$jXZPP)
                                                                                                    (begin
                                                                                                      (g$for-each$5079$jXZPP
                                                                                                        (case-lambda
                                                                                                          ((g$s$10994$jXZPP)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$10995$jXZPP
                                                                                                                 g$label$10996$jXZPP)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$10997$jXZPP)
                                                                                                                   (if g$p$10997$jXZPP
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$10998$jXZPP)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$10999$jXZPP)
                                                                                                                             (if (eq? g$type$10999$jXZPP
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$8172$jXZPP
                                                                                                                                 'export
                                                                                                                                 g$errstr$10984$jXZPP
                                                                                                                                 g$name$10995$jXZPP)
                                                                                                                               (void))))
                                                                                                                          (car g$b$10998$jXZPP))))
                                                                                                                      (cdr g$p$10997$jXZPP))
                                                                                                                     (void))))
                                                                                                                (g$assq$5066$jXZPP
                                                                                                                  g$label$10996$jXZPP
                                                                                                                  g$export-env$10993$jXZPP))))
                                                                                                            (car g$s$10994$jXZPP)
                                                                                                            (cdr g$s$10994$jXZPP))))
                                                                                                        g$export-subst$10983$jXZPP)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$11000$jXZPP
                                                                                                            g$invoke-definitions$11001$jXZPP)
                                                                                                          (values
                                                                                                            (g$itc$10925$jXZPP)
                                                                                                            (g$rtc$10945$jXZPP)
                                                                                                            (g$vtc$10946$jXZPP)
                                                                                                            (g$build-sequence$7711$jXZPP
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$11001$jXZPP
                                                                                                                (list
                                                                                                                  g$invoke-body$11000$jXZPP)))
                                                                                                            g$macro*$10991$jXZPP
                                                                                                            g$export-subst$10983$jXZPP
                                                                                                            g$export-env$10993$jXZPP)))
                                                                                                       (g$build-library-letrec*$7715$jXZPP
                                                                                                         '#f
                                                                                                         g$name$10920$jXZPP
                                                                                                         g$lex*$10970$jXZPP
                                                                                                         g$loc*$10982$jXZPP
                                                                                                         g$rhs*$10981$jXZPP
                                                                                                         (if (null?
                                                                                                               g$init*$10980$jXZPP)
                                                                                                           (g$build-void$7712$jXZPP)
                                                                                                           (g$build-sequence$7711$jXZPP
                                                                                                             '#f
                                                                                                             g$init*$10980$jXZPP)))
                                                                                                       (g$map$5078$jXZPP
                                                                                                         g$build-global-define$7707$jXZPP
                                                                                                         (g$map$5078$jXZPP
                                                                                                           cdr
                                                                                                           g$global*$10992$jXZPP))))))
                                                                                                 g$macro*$10990$jXZPP
                                                                                                 g$global*$10989$jXZPP
                                                                                                 g$export-env$10988$jXZPP)))))))
                                                                                      (g$map$5078$jXZPP
                                                                                        g$gen-global$7722$jXZPP
                                                                                        g$lex*$10970$jXZPP)
                                                                                      (g$make-export-subst$8160$jXZPP
                                                                                        g$exp-name*$10979$jXZPP
                                                                                        g$exp-id*$10978$jXZPP)))))
                                                                                (g$chi-rhs*$8086$jXZPP
                                                                                  g$rhs*$10969$jXZPP
                                                                                  g$r$10972$jXZPP
                                                                                  g$mr$10971$jXZPP))))
                                                                            (g$chi-expr*$8076$jXZPP
                                                                              g$init*$10973$jXZPP
                                                                              g$r$10972$jXZPP
                                                                              g$mr$10971$jXZPP)))))
                                                                      g$exp-id*$10977$jXZPP
                                                                      g$exp-name*$10976$jXZPP))))))
                                                             g$internal-exp*$10967$jXZPP
                                                             g$rhs*$10966$jXZPP
                                                             g$lex*$10965$jXZPP
                                                             g$mr$10964$jXZPP
                                                             g$r$10963$jXZPP
                                                             g$init*$10962$jXZPP))))))
                                                    g$swap$10955$jXZPP)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$11002$jXZPP)
                                                        (begin
                                                          (g$inv-collector$10951$jXZPP
                                                            g$inv-collector$10953$jXZPP)
                                                          (set! g$inv-collector$10953$jXZPP
                                                            g$t$11002$jXZPP))))
                                                     (g$inv-collector$10951$jXZPP))
                                                    ((case-lambda
                                                       ((g$t$11003$jXZPP)
                                                        (begin
                                                          (g$vis-collector$10952$jXZPP
                                                            g$vis-collector$10954$jXZPP)
                                                          (set! g$vis-collector$10954$jXZPP
                                                            g$t$11003$jXZPP))))
                                                     (g$vis-collector$10952$jXZPP))))))))
                                           g$inv-collector$8112$jXZPP
                                           g$vis-collector$8113$jXZPP
                                           g$rtc$10945$jXZPP
                                           g$vtc$10946$jXZPP)))
                                       (g$map$5078$jXZPP
                                         g$wrap$10942$jXZPP
                                         g$b*$10923$jXZPP)
                                       (g$map$5078$jXZPP
                                         g$wrap$10942$jXZPP
                                         g$main-exp*$10921$jXZPP)
                                       (g$make-collector$8111$jXZPP)
                                       (g$make-collector$8111$jXZPP)))))
                                 (g$make-top-rib$8110$jXZPP
                                   g$subst-names$10940$jXZPP
                                   g$subst-labels$10939$jXZPP))))
                             g$subst-labels$10938$jXZPP
                             g$subst-names$10937$jXZPP))))))
                    g$swap$10934$jXZPP)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$11005$jXZPP)
                        (begin
                          (g$imp-collector$10930$jXZPP
                            g$imp-collector$10932$jXZPP)
                          (set! g$imp-collector$10932$jXZPP g$t$11005$jXZPP))))
                     (g$imp-collector$10930$jXZPP))
                    ((case-lambda
                       ((g$t$11006$jXZPP)
                        (begin
                          (g$top-level-context$10931$jXZPP
                            g$top-level-context$10933$jXZPP)
                          (set! g$top-level-context$10933$jXZPP
                            g$t$11006$jXZPP))))
                     (g$top-level-context$10931$jXZPP))))))))
           g$imp-collector$8114$jXZPP
           g$top-level-context$8180$jXZPP
           g$itc$10925$jXZPP
           '#f)))))
   (g$core-library-expander$8118$jXZPP
     g$core-library-expander$11621$jXZPP
     (case-lambda
       ((g$e$11007$jXZPP g$verify-name$11008$jXZPP)
        (call-with-values
          (case-lambda (() (g$parse-library$8108$jXZPP g$e$11007$jXZPP)))
          (case-lambda
            ((g$name*$11013$jXZPP
               g$exp*$11014$jXZPP
               g$imp*$11015$jXZPP
               g$b*$11016$jXZPP)
             ((case-lambda
                ((g$b*$11017$jXZPP
                   g$imp*$11018$jXZPP
                   g$exp*$11019$jXZPP
                   g$name*$11020$jXZPP)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$8107$jXZPP g$name*$11020$jXZPP)))
                   (case-lambda
                     ((g$name$11023$jXZPP g$ver$11024$jXZPP)
                      ((case-lambda
                         ((g$ver$11025$jXZPP g$name$11026$jXZPP)
                          (begin
                            (g$verify-name$11008$jXZPP g$name$11026$jXZPP)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$8117$jXZPP
                                   g$name$11026$jXZPP
                                   g$exp*$11019$jXZPP
                                   g$imp*$11018$jXZPP
                                   g$b*$11017$jXZPP
                                   '#f)))
                              (case-lambda
                                ((g$imp*$11034$jXZPP
                                   g$invoke-req*$11035$jXZPP
                                   g$visit-req*$11036$jXZPP
                                   g$invoke-code$11037$jXZPP
                                   g$visit-code$11038$jXZPP
                                   g$export-subst$11039$jXZPP
                                   g$export-env$11040$jXZPP)
                                 ((case-lambda
                                    ((g$export-env$11041$jXZPP
                                       g$export-subst$11042$jXZPP
                                       g$visit-code$11043$jXZPP
                                       g$invoke-code$11044$jXZPP
                                       g$visit-req*$11045$jXZPP
                                       g$invoke-req*$11046$jXZPP
                                       g$imp*$11047$jXZPP)
                                     (values
                                       g$name$11026$jXZPP
                                       g$ver$11025$jXZPP
                                       g$imp*$11047$jXZPP
                                       g$invoke-req*$11046$jXZPP
                                       g$visit-req*$11045$jXZPP
                                       g$invoke-code$11044$jXZPP
                                       g$visit-code$11043$jXZPP
                                       g$export-subst$11042$jXZPP
                                       g$export-env$11041$jXZPP)))
                                  g$export-env$11040$jXZPP
                                  g$export-subst$11039$jXZPP
                                  g$visit-code$11038$jXZPP
                                  g$invoke-code$11037$jXZPP
                                  g$visit-req*$11036$jXZPP
                                  g$invoke-req*$11035$jXZPP
                                  g$imp*$11034$jXZPP)))))))
                       g$ver$11024$jXZPP
                       g$name$11023$jXZPP))))))
              g$b*$11016$jXZPP
              g$imp*$11015$jXZPP
              g$exp*$11014$jXZPP
              g$name*$11013$jXZPP)))))))
   (g$parse-top-level-program$8119$jXZPP
     g$parse-top-level-program$11622$jXZPP
     (case-lambda
       ((g$e*$11048$jXZPP)
        ((case-lambda
           ((g$t$11049$jXZPP)
            ((case-lambda
               ((g$ls/false$11050$jXZPP)
                (if (if g$ls/false$11050$jXZPP
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$11051$jXZPP
                               g$imp*$11052$jXZPP
                               g$b*$11053$jXZPP)
                             (eq? (g$syntax->datum$8175$jXZPP
                                    g$import$11051$jXZPP)
                                  'import)))
                          g$ls/false$11050$jXZPP))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$11054$jXZPP
                         g$imp*$11055$jXZPP
                         g$b*$11056$jXZPP)
                       (values g$imp*$11055$jXZPP g$b*$11056$jXZPP)))
                    g$ls/false$11050$jXZPP)
                  ((case-lambda
                     ((g$t$11057$jXZPP)
                      ((case-lambda
                         ((g$ls/false$11058$jXZPP)
                          (if (if g$ls/false$11058$jXZPP
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$11059$jXZPP
                                         g$x$11060$jXZPP
                                         g$y$11061$jXZPP)
                                       (eq? (g$syntax->datum$8175$jXZPP
                                              g$import$11059$jXZPP)
                                            'import)))
                                    g$ls/false$11058$jXZPP))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$11062$jXZPP
                                   g$x$11063$jXZPP
                                   g$y$11064$jXZPP)
                                 (g$syntax-violation$8172$jXZPP
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7779$jXZPP g$e*$11048$jXZPP))))
                              g$ls/false$11058$jXZPP)
                            ((case-lambda
                               ((g$t$11065$jXZPP)
                                ((case-lambda
                                   ((g$ls/false$11066$jXZPP)
                                    (if g$ls/false$11066$jXZPP
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$11066$jXZPP)
                                      (g$syntax-violation$8172$jXZPP
                                        '#f
                                        '"invalid syntax"
                                        g$t$11065$jXZPP))))
                                 (g$syntax-dispatch$8060$jXZPP
                                   g$t$11065$jXZPP
                                   '_))))
                             g$t$11057$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP
                         g$t$11057$jXZPP
                         '((any . any) . any)))))
                   g$t$11049$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP
               g$t$11049$jXZPP
               '((any . each-any) . each-any)))))
         g$e*$11048$jXZPP))))
   (g$top-level-expander$8120$jXZPP
     g$top-level-expander$11623$jXZPP
     (case-lambda
       ((g$e*$11067$jXZPP)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$8119$jXZPP g$e*$11067$jXZPP)))
          (case-lambda
            ((g$imp*$11070$jXZPP g$b*$11071$jXZPP)
             ((case-lambda
                ((g$b*$11072$jXZPP g$imp*$11073$jXZPP)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$8117$jXZPP
                        '()
                        '()
                        g$imp*$11073$jXZPP
                        g$b*$11072$jXZPP
                        '#t)))
                   (case-lambda
                     ((g$imp*$11081$jXZPP
                        g$invoke-req*$11082$jXZPP
                        g$visit-req*$11083$jXZPP
                        g$invoke-code$11084$jXZPP
                        g$visit-code$11085$jXZPP
                        g$export-subst$11086$jXZPP
                        g$export-env$11087$jXZPP)
                      ((case-lambda
                         ((g$export-env$11088$jXZPP
                            g$export-subst$11089$jXZPP
                            g$visit-code$11090$jXZPP
                            g$invoke-code$11091$jXZPP
                            g$visit-req*$11092$jXZPP
                            g$invoke-req*$11093$jXZPP
                            g$imp*$11094$jXZPP)
                          (values
                            g$invoke-req*$11093$jXZPP
                            g$invoke-code$11091$jXZPP)))
                       g$export-env$11087$jXZPP
                       g$export-subst$11086$jXZPP
                       g$visit-code$11085$jXZPP
                       g$invoke-code$11084$jXZPP
                       g$visit-req*$11083$jXZPP
                       g$invoke-req*$11082$jXZPP
                       g$imp*$11081$jXZPP))))))
              g$b*$11071$jXZPP
              g$imp*$11070$jXZPP)))))))
   (g$9170$8121$jXZPP
     g$9170$11624$jXZPP
     (make-record-type-descriptor
       'env
       '#f
       'g$9173$jXZPP
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9172$8122$jXZPP g$9172$11625$jXZPP '#f)
   (g$9171$8123$jXZPP
     g$9171$11626$jXZPP
     (make-record-constructor-descriptor
       g$9170$8121$jXZPP
       '#f
       g$9172$8122$jXZPP))
   (g$env?$8124$jXZPP
     g$env?$11627$jXZPP
     (record-predicate g$9170$8121$jXZPP))
   (g$make-env$8125$jXZPP
     g$make-env$11628$jXZPP
     (record-constructor g$9171$8123$jXZPP))
   (g$env-names$8126$jXZPP
     g$env-names$11629$jXZPP
     (record-accessor g$9170$8121$jXZPP '0))
   (g$env-labels$8127$jXZPP
     g$env-labels$11630$jXZPP
     (record-accessor g$9170$8121$jXZPP '1))
   (g$env-itc$8128$jXZPP
     g$env-itc$11631$jXZPP
     (record-accessor g$9170$8121$jXZPP '2))
   (g$set-env-names!$8129$jXZPP
     g$set-env-names!$11632$jXZPP
     (record-mutator g$9170$8121$jXZPP '0))
   (g$set-env-labels!$8130$jXZPP
     g$set-env-labels!$11633$jXZPP
     (record-mutator g$9170$8121$jXZPP '1))
   (g$set-env-itc!$8131$jXZPP
     g$set-env-itc!$11634$jXZPP
     (record-mutator g$9170$8121$jXZPP '2))
   (g$rp$8132$jXZPP
     g$rp$11635$jXZPP
     (make-record-printer
       'env
       (case-lambda
         ((g$x$11095$jXZPP g$p$11096$jXZPP g$wr$11097$jXZPP)
          (display '"#<environment>" g$p$11096$jXZPP)))))
   (g$9189$8133$jXZPP
     g$9189$11636$jXZPP
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9192$jXZPP
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9191$8134$jXZPP g$9191$11637$jXZPP '#f)
   (g$9190$8135$jXZPP
     g$9190$11638$jXZPP
     (make-record-constructor-descriptor
       g$9189$8133$jXZPP
       '#f
       g$9191$8134$jXZPP))
   (g$interaction-env?$8136$jXZPP
     g$interaction-env?$11639$jXZPP
     (record-predicate g$9189$8133$jXZPP))
   (g$make-interaction-env$8137$jXZPP
     g$make-interaction-env$11640$jXZPP
     (record-constructor g$9190$8135$jXZPP))
   (g$interaction-env-rib$8138$jXZPP
     g$interaction-env-rib$11641$jXZPP
     (record-accessor g$9189$8133$jXZPP '0))
   (g$interaction-env-r$8139$jXZPP
     g$interaction-env-r$11642$jXZPP
     (record-accessor g$9189$8133$jXZPP '1))
   (g$interaction-env-locs$8140$jXZPP
     g$interaction-env-locs$11643$jXZPP
     (record-accessor g$9189$8133$jXZPP '2))
   (g$set-interaction-env-rib!$8141$jXZPP
     g$set-interaction-env-rib!$11644$jXZPP
     (record-mutator g$9189$8133$jXZPP '0))
   (g$set-interaction-env-r!$8142$jXZPP
     g$set-interaction-env-r!$11645$jXZPP
     (record-mutator g$9189$8133$jXZPP '1))
   (g$set-interaction-env-locs!$8143$jXZPP
     g$set-interaction-env-locs!$11646$jXZPP
     (record-mutator g$9189$8133$jXZPP '2))
   (g$rp$8144$jXZPP
     g$rp$11647$jXZPP
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$11098$jXZPP g$p$11099$jXZPP g$wr$11100$jXZPP)
          (display '"#<environment>" g$p$11099$jXZPP)))))
   (g$interaction-environment-symbols$8145$jXZPP
     g$interaction-environment-symbols$11648$jXZPP
     (case-lambda
       (()
        (g$environment-symbols$8149$jXZPP
          (g$interaction-environment$8179$jXZPP)))))
   (g$environment-bindings$8146$jXZPP
     g$environment-bindings$11649$jXZPP
     (case-lambda
       ((g$e$11101$jXZPP)
        (vector->list
          (g$vector-map$5355$jXZPP
            (case-lambda
              ((g$name$11102$jXZPP g$label$11103$jXZPP)
               (g$parse-binding$8147$jXZPP
                 (cons
                   g$name$11102$jXZPP
                   (g$imported-label->binding$7591$jXZPP
                     g$label$11103$jXZPP)))))
            (g$env-names$8126$jXZPP g$e$11101$jXZPP)
            (g$env-labels$8127$jXZPP g$e$11101$jXZPP))))))
   (g$parse-binding$8147$jXZPP
     g$parse-binding$11650$jXZPP
     (case-lambda
       ((g$b$11104$jXZPP)
        (cons
          (car g$b$11104$jXZPP)
          ((case-lambda
             ((g$t$11105$jXZPP)
              (if (g$memv$5071$jXZPP g$t$11105$jXZPP '(core-prim global))
                'procedure
                (if (g$memv$5071$jXZPP
                      g$t$11105$jXZPP
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5071$jXZPP g$t$11105$jXZPP '($core-rtd))
                    'record
                    (if (eq? (car g$b$11104$jXZPP)
                             (g$cadr$5304$jXZPP g$b$11104$jXZPP))
                      'syntax
                      'unknown))))))
           (g$cadr$5304$jXZPP g$b$11104$jXZPP))))))
   (g$environment?$8148$jXZPP
     g$environment?$11651$jXZPP
     (case-lambda
       ((g$x$11106$jXZPP)
        ((case-lambda
           ((g$t$11107$jXZPP)
            (if g$t$11107$jXZPP
              g$t$11107$jXZPP
              (begin '#f (g$interaction-env?$8136$jXZPP g$x$11106$jXZPP)))))
         (g$env?$8124$jXZPP g$x$11106$jXZPP)))))
   (g$environment-symbols$8149$jXZPP
     g$environment-symbols$11652$jXZPP
     (case-lambda
       ((g$x$11108$jXZPP)
        (if (g$env?$8124$jXZPP g$x$11108$jXZPP)
          (vector->list (g$env-names$8126$jXZPP g$x$11108$jXZPP))
          (if (g$interaction-env?$8136$jXZPP g$x$11108$jXZPP)
            (g$map$5078$jXZPP
              values
              (g$rib-sym*$7732$jXZPP
                (g$interaction-env-rib$8138$jXZPP g$x$11108$jXZPP)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$11108$jXZPP))))))
   (g$environment$8150$jXZPP
     g$environment$11653$jXZPP
     (case-lambda
       (g$imp*$11109$jXZPP
        ((case-lambda
           ((g$itc$11110$jXZPP)
            ((case-lambda
               ((g$imp-collector$11113$jXZPP g$imp-collector$11114$jXZPP)
                ((case-lambda
                   ((g$swap$11115$jXZPP)
                    (dynamic-wind
                      g$swap$11115$jXZPP
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$8109$jXZPP
                                g$imp*$11109$jXZPP)))
                           (case-lambda
                             ((g$subst-names$11118$jXZPP
                                g$subst-labels$11119$jXZPP)
                              ((case-lambda
                                 ((g$subst-labels$11120$jXZPP
                                    g$subst-names$11121$jXZPP)
                                  (g$make-env$8125$jXZPP
                                    g$subst-names$11121$jXZPP
                                    g$subst-labels$11120$jXZPP
                                    g$itc$11110$jXZPP)))
                               g$subst-labels$11119$jXZPP
                               g$subst-names$11118$jXZPP))))))
                      g$swap$11115$jXZPP)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$11122$jXZPP)
                        (begin
                          (g$imp-collector$11113$jXZPP
                            g$imp-collector$11114$jXZPP)
                          (set! g$imp-collector$11114$jXZPP g$t$11122$jXZPP))))
                     (g$imp-collector$11113$jXZPP)))))))
             g$imp-collector$8114$jXZPP
             g$itc$11110$jXZPP)))
         (g$make-collector$8111$jXZPP)))))
   (g$null-environment$8151$jXZPP
     g$null-environment$11654$jXZPP
     (case-lambda
       ((g$n$11123$jXZPP)
        (begin
          (if (not (eqv? g$n$11123$jXZPP '5))
            (assertion-violation 'null-environment '"not 5" g$n$11123$jXZPP)
            (void))
          (g$environment$8150$jXZPP '(psyntax null-environment-5))))))
   (g$scheme-report-environment$8152$jXZPP
     g$scheme-report-environment$11655$jXZPP
     (case-lambda
       ((g$n$11124$jXZPP)
        (begin
          (if (not (eqv? g$n$11124$jXZPP '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$11124$jXZPP)
            (void))
          (g$environment$8150$jXZPP '(psyntax scheme-report-environment-5))))))
   (g$expand$8153$jXZPP
     g$expand$11656$jXZPP
     (case-lambda
       ((g$x$11125$jXZPP g$env$11126$jXZPP)
        (if (g$env?$8124$jXZPP g$env$11126$jXZPP)
          ((case-lambda
             ((g$rib$11127$jXZPP)
              ((case-lambda
                 ((g$x$11128$jXZPP
                    g$itc$11129$jXZPP
                    g$rtc$11130$jXZPP
                    g$vtc$11131$jXZPP)
                  ((case-lambda
                     ((g$x$11132$jXZPP)
                      (begin
                        (g$seal-rib!$7748$jXZPP g$rib$11127$jXZPP)
                        (values g$x$11132$jXZPP (g$rtc$11130$jXZPP)))))
                   ((case-lambda
                      ((g$top-level-context$11141$jXZPP
                         g$inv-collector$11142$jXZPP
                         g$vis-collector$11143$jXZPP
                         g$imp-collector$11144$jXZPP
                         g$top-level-context$11145$jXZPP
                         g$inv-collector$11146$jXZPP
                         g$vis-collector$11147$jXZPP
                         g$imp-collector$11148$jXZPP)
                       ((case-lambda
                          ((g$swap$11149$jXZPP)
                           (dynamic-wind
                             g$swap$11149$jXZPP
                             (case-lambda
                               (()
                                (g$chi-expr$8078$jXZPP
                                  g$x$11128$jXZPP
                                  '()
                                  '())))
                             g$swap$11149$jXZPP)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$11150$jXZPP)
                                 (begin
                                   (g$top-level-context$11141$jXZPP
                                     g$top-level-context$11145$jXZPP)
                                   (set! g$top-level-context$11145$jXZPP
                                     g$t$11150$jXZPP))))
                              (g$top-level-context$11141$jXZPP))
                             ((case-lambda
                                ((g$t$11151$jXZPP)
                                 (begin
                                   (g$inv-collector$11142$jXZPP
                                     g$inv-collector$11146$jXZPP)
                                   (set! g$inv-collector$11146$jXZPP
                                     g$t$11151$jXZPP))))
                              (g$inv-collector$11142$jXZPP))
                             ((case-lambda
                                ((g$t$11152$jXZPP)
                                 (begin
                                   (g$vis-collector$11143$jXZPP
                                     g$vis-collector$11147$jXZPP)
                                   (set! g$vis-collector$11147$jXZPP
                                     g$t$11152$jXZPP))))
                              (g$vis-collector$11143$jXZPP))
                             ((case-lambda
                                ((g$t$11153$jXZPP)
                                 (begin
                                   (g$imp-collector$11144$jXZPP
                                     g$imp-collector$11148$jXZPP)
                                   (set! g$imp-collector$11148$jXZPP
                                     g$t$11153$jXZPP))))
                              (g$imp-collector$11144$jXZPP))))))))
                    g$top-level-context$8180$jXZPP
                    g$inv-collector$8112$jXZPP
                    g$vis-collector$8113$jXZPP
                    g$imp-collector$8114$jXZPP
                    '#f
                    g$rtc$11130$jXZPP
                    g$vtc$11131$jXZPP
                    g$itc$11129$jXZPP))))
               (g$make-stx$7755$jXZPP
                 g$x$11125$jXZPP
                 g$top-mark*$7719$jXZPP
                 (list g$rib$11127$jXZPP)
                 '())
               (g$env-itc$8128$jXZPP g$env$11126$jXZPP)
               (g$make-collector$8111$jXZPP)
               (g$make-collector$8111$jXZPP))))
           (g$make-top-rib$8110$jXZPP
             (g$env-names$8126$jXZPP g$env$11126$jXZPP)
             (g$env-labels$8127$jXZPP g$env$11126$jXZPP)))
          (if (g$interaction-env?$8136$jXZPP g$env$11126$jXZPP)
            ((case-lambda
               ((g$rib$11154$jXZPP g$r$11155$jXZPP g$rtc$11156$jXZPP)
                ((case-lambda
                   ((g$x$11157$jXZPP)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$11168$jXZPP
                               g$inv-collector$11169$jXZPP
                               g$vis-collector$11170$jXZPP
                               g$imp-collector$11171$jXZPP
                               g$top-level-context$11172$jXZPP
                               g$inv-collector$11173$jXZPP
                               g$vis-collector$11174$jXZPP
                               g$imp-collector$11175$jXZPP)
                             ((case-lambda
                                ((g$swap$11176$jXZPP)
                                 (dynamic-wind
                                   g$swap$11176$jXZPP
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$8116$jXZPP
                                        g$x$11157$jXZPP
                                        g$rib$11154$jXZPP
                                        g$r$11155$jXZPP)))
                                   g$swap$11176$jXZPP)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$11177$jXZPP)
                                       (begin
                                         (g$top-level-context$11168$jXZPP
                                           g$top-level-context$11172$jXZPP)
                                         (set! g$top-level-context$11172$jXZPP
                                           g$t$11177$jXZPP))))
                                    (g$top-level-context$11168$jXZPP))
                                   ((case-lambda
                                      ((g$t$11178$jXZPP)
                                       (begin
                                         (g$inv-collector$11169$jXZPP
                                           g$inv-collector$11173$jXZPP)
                                         (set! g$inv-collector$11173$jXZPP
                                           g$t$11178$jXZPP))))
                                    (g$inv-collector$11169$jXZPP))
                                   ((case-lambda
                                      ((g$t$11179$jXZPP)
                                       (begin
                                         (g$vis-collector$11170$jXZPP
                                           g$vis-collector$11174$jXZPP)
                                         (set! g$vis-collector$11174$jXZPP
                                           g$t$11179$jXZPP))))
                                    (g$vis-collector$11170$jXZPP))
                                   ((case-lambda
                                      ((g$t$11180$jXZPP)
                                       (begin
                                         (g$imp-collector$11171$jXZPP
                                           g$imp-collector$11175$jXZPP)
                                         (set! g$imp-collector$11175$jXZPP
                                           g$t$11180$jXZPP))))
                                    (g$imp-collector$11171$jXZPP))))))))
                          g$top-level-context$8180$jXZPP
                          g$inv-collector$8112$jXZPP
                          g$vis-collector$8113$jXZPP
                          g$imp-collector$8114$jXZPP
                          g$env$11126$jXZPP
                          g$rtc$11156$jXZPP
                          (g$make-collector$8111$jXZPP)
                          (g$make-collector$8111$jXZPP))))
                      (case-lambda
                        ((g$e$11181$jXZPP g$r^$11182$jXZPP)
                         ((case-lambda
                            ((g$r^$11183$jXZPP g$e$11184$jXZPP)
                             (begin
                               (g$set-interaction-env-r!$8142$jXZPP
                                 g$env$11126$jXZPP
                                 g$r^$11183$jXZPP)
                               (values g$e$11184$jXZPP (g$rtc$11156$jXZPP)))))
                          g$r^$11182$jXZPP
                          g$e$11181$jXZPP))))))
                 (g$make-stx$7755$jXZPP
                   g$x$11125$jXZPP
                   g$top-mark*$7719$jXZPP
                   (list g$rib$11154$jXZPP)
                   '()))))
             (g$interaction-env-rib$8138$jXZPP g$env$11126$jXZPP)
             (g$interaction-env-r$8139$jXZPP g$env$11126$jXZPP)
             (g$make-collector$8111$jXZPP))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$11126$jXZPP))))))
   (g$eval$8154$jXZPP
     g$eval$11657$jXZPP
     (case-lambda
       ((g$x$11185$jXZPP g$env$11186$jXZPP)
        (begin
          (if (not (g$environment?$8148$jXZPP g$env$11186$jXZPP))
            (error 'eval '"not an environment" g$env$11186$jXZPP)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8153$jXZPP g$x$11185$jXZPP g$env$11186$jXZPP)))
            (case-lambda
              ((g$x$11189$jXZPP g$invoke-req*$11190$jXZPP)
               ((case-lambda
                  ((g$invoke-req*$11191$jXZPP g$x$11192$jXZPP)
                   (begin
                     (g$for-each$5079$jXZPP
                       g$invoke-library$7592$jXZPP
                       g$invoke-req*$11191$jXZPP)
                     (eval-core
                       (g$expanded->core$7292$jXZPP g$x$11192$jXZPP)))))
                g$invoke-req*$11190$jXZPP
                g$x$11189$jXZPP))))))))
   (g$expand->core$8155$jXZPP
     g$expand->core$11658$jXZPP
     (case-lambda
       ((g$x$11193$jXZPP g$env$11194$jXZPP)
        (begin
          (if (not (g$environment?$8148$jXZPP g$env$11194$jXZPP))
            (error 'eval '"not an environment" g$env$11194$jXZPP)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8153$jXZPP g$x$11193$jXZPP g$env$11194$jXZPP)))
            (case-lambda
              ((g$x$11197$jXZPP g$invoke-req*$11198$jXZPP)
               ((case-lambda
                  ((g$invoke-req*$11199$jXZPP g$x$11200$jXZPP)
                   (begin
                     (g$for-each$5079$jXZPP
                       g$invoke-library$7592$jXZPP
                       g$invoke-req*$11199$jXZPP)
                     (g$expanded->core$7292$jXZPP g$x$11200$jXZPP))))
                g$invoke-req*$11198$jXZPP
                g$x$11197$jXZPP))))))))
   (g$library-expander$8156$jXZPP
     g$library-expander$11659$jXZPP
     (case-lambda
       ((g$x$11201$jXZPP g$filename$11202$jXZPP g$verify-name$11203$jXZPP)
        (letrec* ((g$build-visit-code$11204$jXZPP
                    (case-lambda
                      ((g$macro*$11247$jXZPP)
                       (if (null? g$macro*$11247$jXZPP)
                         (g$build-void$7712$jXZPP)
                         (g$build-sequence$7711$jXZPP
                           '#f
                           (g$map$5078$jXZPP
                             (case-lambda
                               ((g$x$11248$jXZPP)
                                ((case-lambda
                                   ((g$loc$11249$jXZPP g$src$11250$jXZPP)
                                    (list
                                      'set!
                                      g$loc$11249$jXZPP
                                      g$src$11250$jXZPP)))
                                 (car g$x$11248$jXZPP)
                                 (g$cddr$5306$jXZPP g$x$11248$jXZPP))))
                             g$macro*$11247$jXZPP))))))
                  (g$visit!$11205$jXZPP
                    (case-lambda
                      ((g$macro*$11243$jXZPP)
                       (g$for-each$5079$jXZPP
                         (case-lambda
                           ((g$x$11244$jXZPP)
                            ((case-lambda
                               ((g$loc$11245$jXZPP g$proc$11246$jXZPP)
                                (set-symbol-value!
                                  g$loc$11245$jXZPP
                                  g$proc$11246$jXZPP)))
                             (car g$x$11244$jXZPP)
                             (g$cadr$5304$jXZPP g$x$11244$jXZPP))))
                         g$macro*$11243$jXZPP)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$8118$jXZPP
                 g$x$11201$jXZPP
                 g$verify-name$11203$jXZPP)))
            (case-lambda
              ((g$name$11215$jXZPP
                 g$ver$11216$jXZPP
                 g$imp*$11217$jXZPP
                 g$inv*$11218$jXZPP
                 g$vis*$11219$jXZPP
                 g$invoke-code$11220$jXZPP
                 g$macro*$11221$jXZPP
                 g$export-subst$11222$jXZPP
                 g$export-env$11223$jXZPP)
               ((case-lambda
                  ((g$export-env$11224$jXZPP
                     g$export-subst$11225$jXZPP
                     g$macro*$11226$jXZPP
                     g$invoke-code$11227$jXZPP
                     g$vis*$11228$jXZPP
                     g$inv*$11229$jXZPP
                     g$imp*$11230$jXZPP
                     g$ver$11231$jXZPP
                     g$name$11232$jXZPP)
                   ((case-lambda
                      ((g$id$11233$jXZPP
                         g$name$11234$jXZPP
                         g$ver$11235$jXZPP
                         g$imp*$11236$jXZPP
                         g$vis*$11237$jXZPP
                         g$inv*$11238$jXZPP
                         g$visit-proc$11239$jXZPP
                         g$invoke-proc$11240$jXZPP
                         g$visit-code$11241$jXZPP
                         g$invoke-code$11242$jXZPP)
                       (begin
                         (g$install-library$7590$jXZPP
                           g$id$11233$jXZPP
                           g$name$11234$jXZPP
                           g$ver$11235$jXZPP
                           g$imp*$11236$jXZPP
                           g$vis*$11237$jXZPP
                           g$inv*$11238$jXZPP
                           g$export-subst$11225$jXZPP
                           g$export-env$11224$jXZPP
                           g$visit-proc$11239$jXZPP
                           g$invoke-proc$11240$jXZPP
                           g$visit-code$11241$jXZPP
                           g$invoke-code$11242$jXZPP
                           '#t
                           g$filename$11202$jXZPP)
                         (values
                           g$id$11233$jXZPP
                           g$name$11234$jXZPP
                           g$ver$11235$jXZPP
                           g$imp*$11236$jXZPP
                           g$vis*$11237$jXZPP
                           g$inv*$11238$jXZPP
                           g$invoke-code$11242$jXZPP
                           g$visit-code$11241$jXZPP
                           g$export-subst$11225$jXZPP
                           g$export-env$11224$jXZPP))))
                    (gensym)
                    g$name$11232$jXZPP
                    g$ver$11231$jXZPP
                    (g$map$5078$jXZPP
                      g$library-spec$7596$jXZPP
                      g$imp*$11230$jXZPP)
                    (g$map$5078$jXZPP
                      g$library-spec$7596$jXZPP
                      g$vis*$11228$jXZPP)
                    (g$map$5078$jXZPP
                      g$library-spec$7596$jXZPP
                      g$inv*$11229$jXZPP)
                    (case-lambda
                      (() (g$visit!$11205$jXZPP g$macro*$11226$jXZPP)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$7292$jXZPP
                           g$invoke-code$11227$jXZPP))))
                    (g$build-visit-code$11204$jXZPP g$macro*$11226$jXZPP)
                    g$invoke-code$11227$jXZPP)))
                g$export-env$11223$jXZPP
                g$export-subst$11222$jXZPP
                g$macro*$11221$jXZPP
                g$invoke-code$11220$jXZPP
                g$vis*$11219$jXZPP
                g$inv*$11218$jXZPP
                g$imp*$11217$jXZPP
                g$ver$11216$jXZPP
                g$name$11215$jXZPP))))))
       ((g$x$11251$jXZPP g$filename$11252$jXZPP)
        (g$library-expander$8156$jXZPP
          g$x$11251$jXZPP
          g$filename$11252$jXZPP
          (case-lambda ((g$x$11253$jXZPP) (values)))))
       ((g$x$11254$jXZPP)
        (g$library-expander$8156$jXZPP
          g$x$11254$jXZPP
          '#f
          (case-lambda ((g$x$11255$jXZPP) (values)))))))
   (g$boot-library-expand$8157$jXZPP
     g$boot-library-expand$11660$jXZPP
     (case-lambda
       ((g$x$11256$jXZPP)
        (call-with-values
          (case-lambda (() (g$library-expander$8156$jXZPP g$x$11256$jXZPP)))
          (case-lambda
            ((g$id$11267$jXZPP
               g$name$11268$jXZPP
               g$ver$11269$jXZPP
               g$imp*$11270$jXZPP
               g$vis*$11271$jXZPP
               g$inv*$11272$jXZPP
               g$invoke-code$11273$jXZPP
               g$visit-code$11274$jXZPP
               g$export-subst$11275$jXZPP
               g$export-env$11276$jXZPP)
             ((case-lambda
                ((g$export-env$11277$jXZPP
                   g$export-subst$11278$jXZPP
                   g$visit-code$11279$jXZPP
                   g$invoke-code$11280$jXZPP
                   g$inv*$11281$jXZPP
                   g$vis*$11282$jXZPP
                   g$imp*$11283$jXZPP
                   g$ver$11284$jXZPP
                   g$name$11285$jXZPP
                   g$id$11286$jXZPP)
                 (values
                   g$name$11285$jXZPP
                   g$invoke-code$11280$jXZPP
                   g$export-subst$11278$jXZPP
                   g$export-env$11277$jXZPP)))
              g$export-env$11276$jXZPP
              g$export-subst$11275$jXZPP
              g$visit-code$11274$jXZPP
              g$invoke-code$11273$jXZPP
              g$inv*$11272$jXZPP
              g$vis*$11271$jXZPP
              g$imp*$11270$jXZPP
              g$ver$11269$jXZPP
              g$name$11268$jXZPP
              g$id$11267$jXZPP)))))))
   (g$rev-map-append$8158$jXZPP
     g$rev-map-append$11661$jXZPP
     (case-lambda
       ((g$f$11287$jXZPP g$ls$11288$jXZPP g$ac$11289$jXZPP)
        (if (null? g$ls$11288$jXZPP)
          g$ac$11289$jXZPP
          (g$rev-map-append$8158$jXZPP
            g$f$11287$jXZPP
            (cdr g$ls$11288$jXZPP)
            (cons
              (g$f$11287$jXZPP (car g$ls$11288$jXZPP))
              g$ac$11289$jXZPP))))))
   (g$build-exports$8159$jXZPP
     g$build-exports$11662$jXZPP
     (case-lambda
       ((g$lex*+loc*$11290$jXZPP g$init*$11291$jXZPP)
        (g$build-sequence$7711$jXZPP
          '#f
          (cons
            (g$build-void$7712$jXZPP)
            (g$rev-map-append$8158$jXZPP
              (case-lambda
                ((g$x$11292$jXZPP)
                 (list 'set! (cdr g$x$11292$jXZPP) (car g$x$11292$jXZPP))))
              g$lex*+loc*$11290$jXZPP
              g$init*$11291$jXZPP))))))
   (g$make-export-subst$8160$jXZPP
     g$make-export-subst$11663$jXZPP
     (case-lambda
       ((g$name*$11293$jXZPP g$id*$11294$jXZPP)
        (g$map$5078$jXZPP
          (case-lambda
            ((g$name$11295$jXZPP g$id$11296$jXZPP)
             ((case-lambda
                ((g$label$11297$jXZPP)
                 (begin
                   (if (not g$label$11297$jXZPP)
                     (g$syntax-violation$8172$jXZPP
                       '#f
                       '"cannot export unbound identifier"
                       g$id$11296$jXZPP)
                     (void))
                   (cons g$name$11295$jXZPP g$label$11297$jXZPP))))
              (g$id->label$7795$jXZPP g$id$11296$jXZPP))))
          g$name*$11293$jXZPP
          g$id*$11294$jXZPP))))
   (g$make-export-env/macros$8161$jXZPP
     g$make-export-env/macros$11664$jXZPP
     (case-lambda
       ((g$lex*$11298$jXZPP g$loc*$11299$jXZPP g$r$11300$jXZPP)
        (letrec* ((g$lookup$11301$jXZPP
                    (case-lambda
                      ((g$x$11316$jXZPP)
                       ((letrec ((g$f$11317$jXZPP
                                   (case-lambda
                                     ((g$x$11318$jXZPP
                                        g$lex*$11319$jXZPP
                                        g$loc*$11320$jXZPP)
                                      (if (pair? g$lex*$11319$jXZPP)
                                        (if (eq? g$x$11318$jXZPP
                                                 (car g$lex*$11319$jXZPP))
                                          (car g$loc*$11320$jXZPP)
                                          (g$f$11317$jXZPP
                                            g$x$11318$jXZPP
                                            (cdr g$lex*$11319$jXZPP)
                                            (cdr g$loc*$11320$jXZPP)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$11317$jXZPP)
                        g$x$11316$jXZPP
                        g$lex*$11298$jXZPP
                        g$loc*$11299$jXZPP)))))
          ((letrec ((g$f$11302$jXZPP
                      (case-lambda
                        ((g$r$11303$jXZPP
                           g$env$11304$jXZPP
                           g$global*$11305$jXZPP
                           g$macro*$11306$jXZPP)
                         (if (null? g$r$11303$jXZPP)
                           (values
                             g$env$11304$jXZPP
                             g$global*$11305$jXZPP
                             g$macro*$11306$jXZPP)
                           ((case-lambda
                              ((g$x$11307$jXZPP)
                               ((case-lambda
                                  ((g$label$11308$jXZPP g$b$11309$jXZPP)
                                   ((case-lambda
                                      ((g$t$11310$jXZPP)
                                       (if (g$memv$5071$jXZPP
                                             g$t$11310$jXZPP
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$11311$jXZPP)
                                             ((case-lambda
                                                ((g$loc$11312$jXZPP
                                                   g$type$11313$jXZPP)
                                                 (g$f$11302$jXZPP
                                                   (cdr g$r$11303$jXZPP)
                                                   (cons
                                                     (g$cons*$5080$jXZPP
                                                       g$label$11308$jXZPP
                                                       g$type$11313$jXZPP
                                                       g$loc$11312$jXZPP)
                                                     g$env$11304$jXZPP)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$8004$jXZPP
                                                         g$v$11311$jXZPP)
                                                       g$loc$11312$jXZPP)
                                                     g$global*$11305$jXZPP)
                                                   g$macro*$11306$jXZPP)))
                                              (g$lookup$11301$jXZPP
                                                (g$lexical-var$8004$jXZPP
                                                  g$v$11311$jXZPP))
                                              (if (g$lexical-mutable?$8005$jXZPP
                                                    g$v$11311$jXZPP)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7800$jXZPP
                                            g$b$11309$jXZPP))
                                         (if (g$memv$5071$jXZPP
                                               g$t$11310$jXZPP
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$11314$jXZPP)
                                               (g$f$11302$jXZPP
                                                 (cdr g$r$11303$jXZPP)
                                                 (cons
                                                   (g$cons*$5080$jXZPP
                                                     g$label$11308$jXZPP
                                                     'global-macro
                                                     g$loc$11314$jXZPP)
                                                   g$env$11304$jXZPP)
                                                 g$global*$11305$jXZPP
                                                 (cons
                                                   (cons
                                                     g$loc$11314$jXZPP
                                                     (g$binding-value$7800$jXZPP
                                                       g$b$11309$jXZPP))
                                                   g$macro*$11306$jXZPP))))
                                            (gensym))
                                           (if (g$memv$5071$jXZPP
                                                 g$t$11310$jXZPP
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$11315$jXZPP)
                                                 (g$f$11302$jXZPP
                                                   (cdr g$r$11303$jXZPP)
                                                   (cons
                                                     (g$cons*$5080$jXZPP
                                                       g$label$11308$jXZPP
                                                       'global-macro!
                                                       g$loc$11315$jXZPP)
                                                     g$env$11304$jXZPP)
                                                   g$global*$11305$jXZPP
                                                   (cons
                                                     (cons
                                                       g$loc$11315$jXZPP
                                                       (g$binding-value$7800$jXZPP
                                                         g$b$11309$jXZPP))
                                                     g$macro*$11306$jXZPP))))
                                              (gensym))
                                             (if (g$memv$5071$jXZPP
                                                   g$t$11310$jXZPP
                                                   '($rtd $module))
                                               (g$f$11302$jXZPP
                                                 (cdr g$r$11303$jXZPP)
                                                 (cons
                                                   g$x$11307$jXZPP
                                                   g$env$11304$jXZPP)
                                                 g$global*$11305$jXZPP
                                                 g$macro*$11306$jXZPP)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7799$jXZPP
                                                   g$b$11309$jXZPP)
                                                 (g$binding-value$7800$jXZPP
                                                   g$b$11309$jXZPP))))))))
                                    (g$binding-type$7799$jXZPP
                                      g$b$11309$jXZPP))))
                                (car g$x$11307$jXZPP)
                                (cdr g$x$11307$jXZPP))))
                            (car g$r$11303$jXZPP)))))))
             g$f$11302$jXZPP)
           g$r$11300$jXZPP
           '()
           '()
           '())))))
   (g$generate-temporaries$8162$jXZPP
     g$generate-temporaries$11665$jXZPP
     (case-lambda
       ((g$ls$11321$jXZPP)
        ((case-lambda
           ((g$t$11322$jXZPP)
            ((case-lambda
               ((g$ls/false$11323$jXZPP)
                (if g$ls/false$11323$jXZPP
                  (apply
                    (case-lambda
                      ((g$ls$11324$jXZPP)
                       (g$map$5078$jXZPP
                         (case-lambda
                           ((g$x$11325$jXZPP)
                            (g$make-stx$7755$jXZPP
                              ((case-lambda
                                 ((g$x$11326$jXZPP)
                                  (if ((case-lambda
                                         ((g$t$11327$jXZPP)
                                          (if g$t$11327$jXZPP
                                            g$t$11327$jXZPP
                                            (begin
                                              '#f
                                              (string? g$x$11326$jXZPP)))))
                                       (symbol? g$x$11326$jXZPP))
                                    (gensym g$x$11326$jXZPP)
                                    (gensym 't))))
                               (g$syntax->datum$8175$jXZPP g$x$11325$jXZPP))
                              g$top-mark*$7719$jXZPP
                              '()
                              '())))
                         g$ls$11324$jXZPP)))
                    g$ls/false$11323$jXZPP)
                  ((case-lambda
                     ((g$t$11328$jXZPP)
                      ((case-lambda
                         ((g$ls/false$11329$jXZPP)
                          (if g$ls/false$11329$jXZPP
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$11329$jXZPP)
                            (g$syntax-violation$8172$jXZPP
                              '#f
                              '"invalid syntax"
                              g$t$11328$jXZPP))))
                       (g$syntax-dispatch$8060$jXZPP g$t$11328$jXZPP '_))))
                   g$t$11322$jXZPP))))
             (g$syntax-dispatch$8060$jXZPP g$t$11322$jXZPP 'each-any))))
         g$ls$11321$jXZPP))))
   (g$free-identifier=?$8163$jXZPP
     g$free-identifier=?$11666$jXZPP
     (case-lambda
       ((g$x$11330$jXZPP g$y$11331$jXZPP)
        (if (g$id?$7782$jXZPP g$x$11330$jXZPP)
          (if (g$id?$7782$jXZPP g$y$11331$jXZPP)
            (g$free-id=?$7786$jXZPP g$x$11330$jXZPP g$y$11331$jXZPP)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$11331$jXZPP))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$11330$jXZPP)))))
   (g$bound-identifier=?$8164$jXZPP
     g$bound-identifier=?$11667$jXZPP
     (case-lambda
       ((g$x$11332$jXZPP g$y$11333$jXZPP)
        (if (g$id?$7782$jXZPP g$x$11332$jXZPP)
          (if (g$id?$7782$jXZPP g$y$11333$jXZPP)
            (g$bound-id=?$7785$jXZPP g$x$11332$jXZPP g$y$11333$jXZPP)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$11333$jXZPP))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$11332$jXZPP)))))
   (g$make-source-condition$8165$jXZPP
     g$make-source-condition$11668$jXZPP
     (case-lambda
       ((g$x$11334$jXZPP)
        (letrec* ((g$12125$11335$jXZPP
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$12128$jXZPP
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12127$11336$jXZPP '#f)
                  (g$12126$11337$jXZPP
                    (make-record-constructor-descriptor
                      g$12125$11335$jXZPP
                      &condition-rcd
                      g$12127$11336$jXZPP))
                  (g$12124$11338$jXZPP (record-predicate g$12125$11335$jXZPP))
                  (g$make-source-condition$11339$jXZPP
                    (record-constructor g$12126$11337$jXZPP))
                  (g$12122$11340$jXZPP (record-accessor g$12125$11335$jXZPP '0))
                  (g$12123$11341$jXZPP (record-accessor g$12125$11335$jXZPP '1))
                  (g$source-condition?$11342$jXZPP
                    (condition-predicate g$12125$11335$jXZPP))
                  (g$source-filename$11343$jXZPP
                    (condition-accessor
                      g$12125$11335$jXZPP
                      g$12122$11340$jXZPP))
                  (g$source-character$11344$jXZPP
                    (condition-accessor
                      g$12125$11335$jXZPP
                      g$12123$11341$jXZPP)))
          (if (pair? g$x$11334$jXZPP)
            (g$make-source-condition$11339$jXZPP
              (car g$x$11334$jXZPP)
              (cdr g$x$11334$jXZPP))
            (condition))))))
   (g$extract-position-condition$8166$jXZPP
     g$extract-position-condition$11669$jXZPP
     (case-lambda
       ((g$x$11345$jXZPP)
        (g$make-source-condition$8165$jXZPP
          (g$expression-position$8167$jXZPP g$x$11345$jXZPP)))))
   (g$expression-position$8167$jXZPP
     g$expression-position$11670$jXZPP
     (case-lambda
       ((g$x$11346$jXZPP)
        (if (g$stx?$7754$jXZPP g$x$11346$jXZPP)
          (begin
            '#f
            ((case-lambda
               ((g$x$11347$jXZPP)
                (if (annotation? g$x$11347$jXZPP)
                  (begin '#f (annotation-source g$x$11347$jXZPP))
                  '#f)))
             (g$stx-expr$7756$jXZPP g$x$11346$jXZPP)))
          '#f))))
   (g$assertion-error$8168$jXZPP
     g$assertion-error$11671$jXZPP
     (case-lambda
       ((g$expr$11348$jXZPP g$pos$11349$jXZPP)
        (raise
          (condition
            (g$make-assertion-violation$5880$jXZPP)
            (g$make-who-condition$5894$jXZPP 'assert)
            (g$make-message-condition$5848$jXZPP '"assertion failed")
            (g$make-irritants-condition$5886$jXZPP (list g$expr$11348$jXZPP))
            (g$make-source-condition$8165$jXZPP g$pos$11349$jXZPP))))))
   (g$syntax-error$8169$jXZPP
     g$syntax-error$11672$jXZPP
     (case-lambda
       ((g$x$11350$jXZPP . g$args$11351$jXZPP)
        (begin
          (if (not (g$for-all$5076$jXZPP string? g$args$11351$jXZPP))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$11351$jXZPP)
            (void))
          (raise
            (condition
              (g$make-message-condition$5848$jXZPP
                (if (null? g$args$11351$jXZPP)
                  '"invalid syntax"
                  (apply string-append g$args$11351$jXZPP)))
              (g$make-syntax-violation$5920$jXZPP
                (g$syntax->datum$8175$jXZPP g$x$11350$jXZPP)
                '#f)
              (g$extract-position-condition$8166$jXZPP g$x$11350$jXZPP)
              (g$extract-trace$8170$jXZPP g$x$11350$jXZPP)))))))
   (g$extract-trace$8170$jXZPP
     g$extract-trace$11673$jXZPP
     (case-lambda
       ((g$x$11352$jXZPP)
        (letrec* ((g$12152$11353$jXZPP
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$12155$jXZPP
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12154$11354$jXZPP '#f)
                  (g$12153$11355$jXZPP
                    (make-record-constructor-descriptor
                      g$12152$11353$jXZPP
                      &condition-rcd
                      g$12154$11354$jXZPP))
                  (g$12151$11356$jXZPP (record-predicate g$12152$11353$jXZPP))
                  (g$make-trace$11357$jXZPP
                    (record-constructor g$12153$11355$jXZPP))
                  (g$12150$11358$jXZPP (record-accessor g$12152$11353$jXZPP '0))
                  (g$trace?$11359$jXZPP
                    (condition-predicate g$12152$11353$jXZPP))
                  (g$trace-form$11360$jXZPP
                    (condition-accessor
                      g$12152$11353$jXZPP
                      g$12150$11358$jXZPP)))
          ((letrec ((g$f$11361$jXZPP
                      (case-lambda
                        ((g$x$11362$jXZPP)
                         (if (g$stx?$7754$jXZPP g$x$11362$jXZPP)
                           (apply
                             condition
                             (g$make-trace$11357$jXZPP g$x$11362$jXZPP)
                             (g$map$5078$jXZPP
                               g$f$11361$jXZPP
                               (g$stx-ae*$7759$jXZPP g$x$11362$jXZPP)))
                           (if (annotation? g$x$11362$jXZPP)
                             (g$make-trace$11357$jXZPP
                               (g$make-stx$7755$jXZPP
                                 g$x$11362$jXZPP
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$11361$jXZPP)
           g$x$11352$jXZPP)))))
   (g$syntax-violation*$8171$jXZPP
     g$syntax-violation*$11674$jXZPP
     (case-lambda
       ((g$who$11363$jXZPP
          g$msg$11364$jXZPP
          g$form$11365$jXZPP
          g$condition-object$11366$jXZPP)
        (begin
          (if (not (string? g$msg$11364$jXZPP))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$11364$jXZPP)
            (void))
          ((case-lambda
             ((g$who$11367$jXZPP)
              (raise
                (condition
                  (if g$who$11367$jXZPP
                    (g$make-who-condition$5894$jXZPP g$who$11367$jXZPP)
                    (condition))
                  (g$make-message-condition$5848$jXZPP g$msg$11364$jXZPP)
                  g$condition-object$11366$jXZPP
                  (g$extract-position-condition$8166$jXZPP g$form$11365$jXZPP)
                  (g$extract-trace$8170$jXZPP g$form$11365$jXZPP)))))
           (if ((case-lambda
                  ((g$t$11368$jXZPP)
                   (if g$t$11368$jXZPP
                     g$t$11368$jXZPP
                     (begin '#f (symbol? g$who$11363$jXZPP)))))
                (string? g$who$11363$jXZPP))
             g$who$11363$jXZPP
             (if (not g$who$11363$jXZPP)
               ((case-lambda
                  ((g$t$11369$jXZPP)
                   ((case-lambda
                      ((g$ls/false$11370$jXZPP)
                       (if (if g$ls/false$11370$jXZPP
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$11371$jXZPP)
                                    (g$id?$7782$jXZPP g$id$11371$jXZPP)))
                                 g$ls/false$11370$jXZPP))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$11372$jXZPP)
                              (g$syntax->datum$8175$jXZPP g$id$11372$jXZPP)))
                           g$ls/false$11370$jXZPP)
                         ((case-lambda
                            ((g$t$11373$jXZPP)
                             ((case-lambda
                                ((g$ls/false$11374$jXZPP)
                                 (if (if g$ls/false$11374$jXZPP
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$11375$jXZPP
                                                g$rest$11376$jXZPP)
                                              (g$id?$7782$jXZPP
                                                g$id$11375$jXZPP)))
                                           g$ls/false$11374$jXZPP))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$11377$jXZPP g$rest$11378$jXZPP)
                                        (g$syntax->datum$8175$jXZPP
                                          g$id$11377$jXZPP)))
                                     g$ls/false$11374$jXZPP)
                                   ((case-lambda
                                      ((g$t$11379$jXZPP)
                                       ((case-lambda
                                          ((g$ls/false$11380$jXZPP)
                                           (if g$ls/false$11380$jXZPP
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$11380$jXZPP)
                                             (g$syntax-violation$8172$jXZPP
                                               '#f
                                               '"invalid syntax"
                                               g$t$11379$jXZPP))))
                                        (g$syntax-dispatch$8060$jXZPP
                                          g$t$11379$jXZPP
                                          '_))))
                                    g$t$11373$jXZPP))))
                              (g$syntax-dispatch$8060$jXZPP
                                g$t$11373$jXZPP
                                '(any . any)))))
                          g$t$11369$jXZPP))))
                    (g$syntax-dispatch$8060$jXZPP g$t$11369$jXZPP 'any))))
                g$form$11365$jXZPP)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$11363$jXZPP))))))))
   (g$syntax-violation$8172$jXZPP
     g$syntax-violation$11675$jXZPP
     (case-lambda
       ((g$who$11381$jXZPP g$msg$11382$jXZPP g$form$11383$jXZPP)
        (g$syntax-violation$8172$jXZPP
          g$who$11381$jXZPP
          g$msg$11382$jXZPP
          g$form$11383$jXZPP
          '#f))
       ((g$who$11384$jXZPP
          g$msg$11385$jXZPP
          g$form$11386$jXZPP
          g$subform$11387$jXZPP)
        (g$syntax-violation*$8171$jXZPP
          g$who$11384$jXZPP
          g$msg$11385$jXZPP
          g$form$11386$jXZPP
          (g$make-syntax-violation$5920$jXZPP
            (g$syntax->datum$8175$jXZPP g$form$11386$jXZPP)
            (g$syntax->datum$8175$jXZPP g$subform$11387$jXZPP))))))
   (g$identifier?$8173$jXZPP
     g$identifier?$11676$jXZPP
     (case-lambda ((g$x$11388$jXZPP) (g$id?$7782$jXZPP g$x$11388$jXZPP))))
   (g$datum->syntax$8174$jXZPP
     g$datum->syntax$11677$jXZPP
     (case-lambda
       ((g$id$11389$jXZPP g$datum$11390$jXZPP)
        (if (g$id?$7782$jXZPP g$id$11389$jXZPP)
          (g$datum->stx$7765$jXZPP g$id$11389$jXZPP g$datum$11390$jXZPP)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$11389$jXZPP)))))
   (g$syntax->datum$8175$jXZPP
     g$syntax->datum$11678$jXZPP
     (case-lambda
       ((g$x$11391$jXZPP) (g$stx->datum$7793$jXZPP g$x$11391$jXZPP))))
   (g$compile-r6rs-top-level$8176$jXZPP
     g$compile-r6rs-top-level$11679$jXZPP
     (case-lambda
       ((g$x*$11392$jXZPP)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8120$jXZPP g$x*$11392$jXZPP)))
          (case-lambda
            ((g$lib*$11395$jXZPP g$invoke-code$11396$jXZPP)
             ((case-lambda
                ((g$invoke-code$11397$jXZPP g$lib*$11398$jXZPP)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5079$jXZPP
                        g$invoke-library$7592$jXZPP
                        g$lib*$11398$jXZPP)
                      (eval-core
                        (g$expanded->core$7292$jXZPP
                          g$invoke-code$11397$jXZPP)))))))
              g$invoke-code$11396$jXZPP
              g$lib*$11395$jXZPP)))))))
   (g$pre-compile-r6rs-top-level$8177$jXZPP
     g$pre-compile-r6rs-top-level$11680$jXZPP
     (case-lambda
       ((g$x*$11399$jXZPP)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8120$jXZPP g$x*$11399$jXZPP)))
          (case-lambda
            ((g$lib*$11402$jXZPP g$invoke-code$11403$jXZPP)
             ((case-lambda
                ((g$invoke-code$11404$jXZPP g$lib*$11405$jXZPP)
                 (begin
                   (g$for-each$5079$jXZPP
                     g$invoke-library$7592$jXZPP
                     g$lib*$11405$jXZPP)
                   (compile-core
                     (g$expanded->core$7292$jXZPP g$invoke-code$11404$jXZPP)))))
              g$invoke-code$11403$jXZPP
              g$lib*$11402$jXZPP)))))))
   (g$new-interaction-environment$8178$jXZPP
     g$new-interaction-environment$11681$jXZPP
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$11406$jXZPP g$rib$11407$jXZPP)
            (begin
              ((case-lambda
                 ((g$subst$11408$jXZPP)
                  (begin
                    (g$set-rib-sym*!$7737$jXZPP
                      g$rib$11407$jXZPP
                      (g$map$5078$jXZPP car g$subst$11408$jXZPP))
                    (g$set-rib-mark**!$7738$jXZPP
                      g$rib$11407$jXZPP
                      (g$map$5078$jXZPP
                        (case-lambda ((g$x$11409$jXZPP) g$top-mark*$7719$jXZPP))
                        g$subst$11408$jXZPP))
                    (g$set-rib-label*!$7739$jXZPP
                      g$rib$11407$jXZPP
                      (g$map$5078$jXZPP cdr g$subst$11408$jXZPP)))))
               (g$library-subst$7549$jXZPP g$lib$11406$jXZPP))
              (g$make-interaction-env$8137$jXZPP g$rib$11407$jXZPP '() '()))))
         (g$find-library-by-name$7585$jXZPP '(ironscheme))
         (g$make-empty-rib$7742$jXZPP)))))
   (g$interaction-environment$8179$jXZPP
     g$interaction-environment$11682$jXZPP
     ((case-lambda
        ((g$e$11410$jXZPP)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$11411$jXZPP)
                (if g$t$11411$jXZPP
                  g$t$11411$jXZPP
                  (begin
                    '#f
                    (begin
                      (set! g$e$11410$jXZPP
                        (g$new-interaction-environment$8178$jXZPP))
                      g$e$11410$jXZPP)))))
             g$e$11410$jXZPP)))))
      '#f))
   (g$top-level-context$8180$jXZPP
     g$top-level-context$11683$jXZPP
     (g$make-parameter$7044$jXZPP '#f)))
  (g$current-library-expander$7582$jXZPP g$library-expander$8156$jXZPP))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$7289$jXZPP
      (case-lambda
        ((g$x$11738$jXZPP)
         ((case-lambda
            ((g$t$11739$jXZPP) (if g$t$11739$jXZPP (cdr g$t$11739$jXZPP) '#f)))
          (g$assq$5066$jXZPP
            g$x$11738$jXZPP
            '((ellipsis-map . g$ellipsis-map$11568$jXZPP)
              (make-list . g$make-list$5061$jXZPP)
              (last-pair . g$last-pair$5060$jXZPP)
              (ironscheme-build . g$ironscheme-build$11731$jXZPP)
              (syntax-error . g$syntax-error$11672$jXZPP)
              (syntax-dispatch . g$syntax-dispatch$11563$jXZPP)
              (compile-system-libraries
                .
                g$compile-system-libraries$11733$jXZPP)
              (compile->closure . g$compile->closure$11735$jXZPP)
              (compile . g$compile$11734$jXZPP)
              (load . g$load$11730$jXZPP)
              (interaction-environment . g$interaction-environment$11682$jXZPP)
              (string-ci>? . g$string-ci>?$6070$jXZPP)
              (string-ci>=? . g$string-ci>=?$6072$jXZPP)
              (string-ci=? . g$string-ci=?$6068$jXZPP)
              (string-ci<? . g$string-ci<?$6069$jXZPP)
              (string-ci<=? . g$string-ci<=?$6071$jXZPP)
              (char-ci>? . g$char-ci>?$6075$jXZPP)
              (char-ci>=? . g$char-ci>=?$6077$jXZPP)
              (char-ci=? . g$char-ci=?$6073$jXZPP)
              (char-ci<? . g$char-ci<?$6074$jXZPP)
              (char-ci<=? . g$char-ci<=?$6076$jXZPP)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11501$jXZPP)
              (variable-transformer? . g$variable-transformer?$11500$jXZPP)
              (make-variable-transformer
                .
                g$make-variable-transformer$11499$jXZPP)
              (identifier? . g$identifier?$11676$jXZPP)
              (generate-temporaries . g$generate-temporaries$11665$jXZPP)
              (free-identifier=? . g$free-identifier=?$11666$jXZPP)
              (syntax->datum . g$syntax->datum$11678$jXZPP)
              (datum->syntax . g$datum->syntax$11677$jXZPP)
              (bound-identifier=? . g$bound-identifier=?$11667$jXZPP)
              (delete-file . g$delete-file$5600$jXZPP)
              (file-exists? . g$file-exists?$5599$jXZPP)
              (list-sort . g$list-sort$5995$jXZPP)
              (make-eqv-hashtable . g$make-eqv-hashtable$5582$jXZPP)
              (make-eq-hashtable . g$make-eq-hashtable$5581$jXZPP)
              (hashtable-update! . g$hashtable-update!$5588$jXZPP)
              (hashtable-size . g$hashtable-size$5583$jXZPP)
              (hashtable-set! . g$hashtable-set!$5585$jXZPP)
              (hashtable-ref . g$hashtable-ref$5584$jXZPP)
              (hashtable-delete! . g$hashtable-delete!$5586$jXZPP)
              (hashtable-contains? . g$hashtable-contains?$5587$jXZPP)
              (hashtable-clear! . g$hashtable-clear!$5589$jXZPP)
              (call-with-output-file . g$call-with-output-file$6431$jXZPP)
              (call-with-input-file . g$call-with-input-file$6430$jXZPP)
              (write-char . g$write-char$6427$jXZPP)
              (with-output-to-file . g$with-output-to-file$6429$jXZPP)
              (with-input-from-file . g$with-input-from-file$6428$jXZPP)
              (read-char . g$read-char$6426$jXZPP)
              (peek-char . g$peek-char$6425$jXZPP)
              (newline . g$newline$6432$jXZPP)
              (port? . g$port?$6380$jXZPP)
              (open-string-output-port . g$open-string-output-port$6379$jXZPP)
              (make-i/o-write-error . g$make-i/o-write-error$6295$jXZPP)
              (make-i/o-read-error . g$make-i/o-read-error$6289$jXZPP)
              (make-i/o-port-error . g$make-i/o-port-error$6341$jXZPP)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6301$jXZPP)
              (make-i/o-filename-error . g$make-i/o-filename-error$6309$jXZPP)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6317$jXZPP)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6323$jXZPP)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6335$jXZPP)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6329$jXZPP)
              (make-i/o-error . g$make-i/o-error$6283$jXZPP)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6355$jXZPP)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6349$jXZPP)
              (i/o-write-error? . g$i/o-write-error?$6296$jXZPP)
              (i/o-read-error? . g$i/o-read-error?$6290$jXZPP)
              (i/o-port-error? . g$i/o-port-error?$6343$jXZPP)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6303$jXZPP)
              (i/o-error-position . g$i/o-error-position$6304$jXZPP)
              (i/o-filename-error? . g$i/o-filename-error?$6311$jXZPP)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6318$jXZPP)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6324$jXZPP)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6336$jXZPP)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6330$jXZPP)
              (i/o-error? . g$i/o-error?$6284$jXZPP)
              (i/o-error-port . g$i/o-error-port$6344$jXZPP)
              (i/o-error-filename . g$i/o-error-filename$6312$jXZPP)
              (i/o-encoding-error? . g$i/o-encoding-error?$6357$jXZPP)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6358$jXZPP)
              (i/o-decoding-error? . g$i/o-decoding-error?$6350$jXZPP)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6381$jXZPP)
              (call-with-port . g$call-with-port$6382$jXZPP)
              (scheme-report-environment
                .
                g$scheme-report-environment$11655$jXZPP)
              (quotient . g$quotient$5962$jXZPP)
              (null-environment . g$null-environment$11654$jXZPP)
              (remainder . g$remainder$5963$jXZPP)
              (modulo . g$modulo$5964$jXZPP)
              (inexact->exact . g$inexact->exact$5959$jXZPP)
              (force . g$force$5966$jXZPP)
              (exact->inexact . g$exact->inexact$5960$jXZPP)
              (command-line . g$command-line$11727$jXZPP)
              (remove . g$remove$5083$jXZPP)
              (remv . g$remv$5084$jXZPP)
              (remp . g$remp$5064$jXZPP)
              (remq . g$remq$5085$jXZPP)
              (partition . g$partition$5063$jXZPP)
              (memv . g$memv$5071$jXZPP)
              (memq . g$memq$5070$jXZPP)
              (memp . g$memp$5073$jXZPP)
              (member . g$member$5072$jXZPP)
              (exists . g$exists$5077$jXZPP)
              (for-all . g$for-all$5076$jXZPP)
              (fold-right . g$fold-right$5082$jXZPP)
              (fold-left . g$fold-left$5081$jXZPP)
              (find . g$find$5062$jXZPP)
              (filter . g$filter$5065$jXZPP)
              (cons* . g$cons*$5080$jXZPP)
              (assv . g$assv$5067$jXZPP)
              (assq . g$assq$5066$jXZPP)
              (assp . g$assp$5069$jXZPP)
              (assoc . g$assoc$5068$jXZPP)
              (eval . g$eval$11657$jXZPP)
              (environment . g$environment$11653$jXZPP)
              (make-enumeration . g$make-enumeration$6564$jXZPP)
              (enum-set=? . g$enum-set=?$6571$jXZPP)
              (enum-set-universe . g$enum-set-universe$6565$jXZPP)
              (enum-set-union . g$enum-set-union$6572$jXZPP)
              (enum-set-subset? . g$enum-set-subset?$6570$jXZPP)
              (enum-set-projection . g$enum-set-projection$6576$jXZPP)
              (enum-set-member? . g$enum-set-member?$6569$jXZPP)
              (enum-set-intersection . g$enum-set-intersection$6573$jXZPP)
              (enum-set-indexer . g$enum-set-indexer$6566$jXZPP)
              (enum-set-difference . g$enum-set-difference$6574$jXZPP)
              (enum-set-constructor . g$enum-set-constructor$6567$jXZPP)
              (enum-set-complement . g$enum-set-complement$6575$jXZPP)
              (enum-set->list . g$enum-set->list$6568$jXZPP)
              (who-condition? . g$who-condition?$5896$jXZPP)
              (warning? . g$warning?$5857$jXZPP)
              (violation? . g$violation?$5875$jXZPP)
              (undefined-violation? . g$undefined-violation?$5931$jXZPP)
              (syntax-violation? . g$syntax-violation?$5923$jXZPP)
              (syntax-violation-subform . g$syntax-violation-subform$5925$jXZPP)
              (syntax-violation-form . g$syntax-violation-form$5924$jXZPP)
              (syntax-violation . g$syntax-violation$11675$jXZPP)
              (serious-condition? . g$serious-condition?$5863$jXZPP)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5903$jXZPP)
              (message-condition? . g$message-condition?$5850$jXZPP)
              (make-who-condition . g$make-who-condition$5894$jXZPP)
              (make-warning . g$make-warning$5856$jXZPP)
              (make-violation . g$make-violation$5874$jXZPP)
              (make-undefined-violation . g$make-undefined-violation$5930$jXZPP)
              (make-syntax-violation . g$make-syntax-violation$5920$jXZPP)
              (make-serious-condition . g$make-serious-condition$5862$jXZPP)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5902$jXZPP)
              (make-message-condition . g$make-message-condition$5848$jXZPP)
              (make-lexical-violation . g$make-lexical-violation$5914$jXZPP)
              (make-irritants-condition . g$make-irritants-condition$5886$jXZPP)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5908$jXZPP)
              (make-error . g$make-error$5868$jXZPP)
              (make-assertion-violation . g$make-assertion-violation$5880$jXZPP)
              (lexical-violation? . g$lexical-violation?$5915$jXZPP)
              (irritants-condition? . g$irritants-condition?$5888$jXZPP)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5909$jXZPP)
              (error? . g$error?$5869$jXZPP)
              (condition-who . g$condition-who$5897$jXZPP)
              (condition-message . g$condition-message$5851$jXZPP)
              (condition-irritants . g$condition-irritants$5889$jXZPP)
              (assertion-violation? . g$assertion-violation?$5881$jXZPP)
              (native-endianness . g$native-endianness$5713$jXZPP)
              (bytevector-u64-set! . g$bytevector-u64-set!$5734$jXZPP)
              (bytevector-u64-ref . g$bytevector-u64-ref$5730$jXZPP)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5736$jXZPP)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5732$jXZPP)
              (bytevector-u32-set! . g$bytevector-u32-set!$5726$jXZPP)
              (bytevector-u32-ref . g$bytevector-u32-ref$5722$jXZPP)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5728$jXZPP)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5724$jXZPP)
              (bytevector-u16-set! . g$bytevector-u16-set!$5718$jXZPP)
              (bytevector-u16-ref . g$bytevector-u16-ref$5714$jXZPP)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5720$jXZPP)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5716$jXZPP)
              (bytevector-s64-set! . g$bytevector-s64-set!$5735$jXZPP)
              (bytevector-s64-ref . g$bytevector-s64-ref$5731$jXZPP)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5737$jXZPP)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5733$jXZPP)
              (bytevector-s32-set! . g$bytevector-s32-set!$5727$jXZPP)
              (bytevector-s32-ref . g$bytevector-s32-ref$5723$jXZPP)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5729$jXZPP)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5725$jXZPP)
              (bytevector-s16-set! . g$bytevector-s16-set!$5719$jXZPP)
              (bytevector-s16-ref . g$bytevector-s16-ref$5715$jXZPP)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5721$jXZPP)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5717$jXZPP)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5740$jXZPP)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5738$jXZPP)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5741$jXZPP)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5739$jXZPP)
              (no-nans-violation? . g$no-nans-violation?$6198$jXZPP)
              (no-infinities-violation? . g$no-infinities-violation?$6192$jXZPP)
              (make-no-nans-violation . g$make-no-nans-violation$6197$jXZPP)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6191$jXZPP)
              (fxrotate-bit-field . g$fxrotate-bit-field$6174$jXZPP)
              (fxif . g$fxif$6168$jXZPP)
              (fxcopy-bit-field . g$fxcopy-bit-field$6171$jXZPP)
              (fxcopy-bit . g$fxcopy-bit$6169$jXZPP)
              (fxbit-field . g$fxbit-field$6170$jXZPP)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6173$jXZPP)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6172$jXZPP)
              (fx-/carry . g$fx-/carry$6166$jXZPP)
              (fx+/carry . g$fx+/carry$6167$jXZPP)
              (fx*/carry . g$fx*/carry$6165$jXZPP)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$6115$jXZPP)
              (bitwise-if . g$bitwise-if$6109$jXZPP)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6112$jXZPP)
              (bitwise-copy-bit . g$bitwise-copy-bit$6110$jXZPP)
              (bitwise-bit-field . g$bitwise-bit-field$6111$jXZPP)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6114$jXZPP)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6113$jXZPP)
              (zero? . g$zero?$5333$jXZPP)
              (vector-map . g$vector-map$5355$jXZPP)
              (vector-for-each . g$vector-for-each$5356$jXZPP)
              (symbol=? . g$symbol=?$5345$jXZPP)
              (string>? . g$string>?$5342$jXZPP)
              (string>=? . g$string>=?$5344$jXZPP)
              (string=? . g$string=?$5340$jXZPP)
              (string<? . g$string<?$5341$jXZPP)
              (string<=? . g$string<=?$5343$jXZPP)
              (string-for-each . g$string-for-each$5357$jXZPP)
              (rationalize . g$rationalize$5352$jXZPP)
              (positive? . g$positive?$5331$jXZPP)
              (odd? . g$odd?$5335$jXZPP)
              (negative? . g$negative?$5332$jXZPP)
              (min . g$min$5337$jXZPP)
              (max . g$max$5336$jXZPP)
              (map . g$map$5078$jXZPP)
              (list-tail . g$list-tail$5058$jXZPP)
              (list-ref . g$list-ref$5059$jXZPP)
              (lcm . g$lcm$5339$jXZPP)
              (gcd . g$gcd$5338$jXZPP)
              (for-each . g$for-each$5079$jXZPP)
              (even? . g$even?$5334$jXZPP)
              (char>? . g$char>?$5349$jXZPP)
              (char>=? . g$char>=?$5351$jXZPP)
              (char=? . g$char=?$5347$jXZPP)
              (char<? . g$char<?$5348$jXZPP)
              (char<=? . g$char<=?$5350$jXZPP)
              (cddddr . g$cddddr$5330$jXZPP)
              (cdddar . g$cdddar$5329$jXZPP)
              (cddadr . g$cddadr$5328$jXZPP)
              (cddaar . g$cddaar$5327$jXZPP)
              (cdaddr . g$cdaddr$5326$jXZPP)
              (cdadar . g$cdadar$5325$jXZPP)
              (cdaadr . g$cdaadr$5324$jXZPP)
              (cdaaar . g$cdaaar$5323$jXZPP)
              (cadddr . g$cadddr$5322$jXZPP)
              (caddar . g$caddar$5321$jXZPP)
              (cadadr . g$cadadr$5320$jXZPP)
              (cadaar . g$cadaar$5319$jXZPP)
              (caaddr . g$caaddr$5318$jXZPP)
              (caadar . g$caadar$5317$jXZPP)
              (caaadr . g$caaadr$5316$jXZPP)
              (caaaar . g$caaaar$5315$jXZPP)
              (cdddr . g$cdddr$5314$jXZPP)
              (cddar . g$cddar$5313$jXZPP)
              (cdadr . g$cdadr$5312$jXZPP)
              (cdaar . g$cdaar$5311$jXZPP)
              (caddr . g$caddr$5310$jXZPP)
              (cadar . g$cadar$5309$jXZPP)
              (caadr . g$caadr$5308$jXZPP)
              (caaar . g$caaar$5307$jXZPP)
              (cddr . g$cddr$5306$jXZPP)
              (cdar . g$cdar$5305$jXZPP)
              (cadr . g$cadr$5304$jXZPP)
              (caar . g$caar$5303$jXZPP)
              (boolean=? . g$boolean=?$5346$jXZPP)
              (enum-set? . g$enum?$6545$jXZPP)
              (make-promise . g$make-promise$5965$jXZPP)
              (load/args . g$load/args$11729$jXZPP)
              (printf . g$printf$6600$jXZPP)
              (fprintf . g$fprintf$6601$jXZPP)
              (format . g$format$6602$jXZPP)
              (trace-printer . g$trace-printer$11726$jXZPP)
              (make-traced-macro . g$make-traced-macro$6606$jXZPP)
              (assertion-error . g$assertion-error$11671$jXZPP)
              (make-parameter . g$make-parameter$7044$jXZPP)
              (environment-bindings . g$environment-bindings$11649$jXZPP)
              (environment-symbols . g$environment-symbols$11652$jXZPP)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11648$jXZPP)
              (library-path . g$library-path$7574$jXZPP)
              (expand->core . g$expand->core$11658$jXZPP)
              (expand . g$expand$11656$jXZPP)
              (expand-boot-cps . g$expand-boot-cps$6939$jXZPP)
              (convert->cps . g$convert->cps$6936$jXZPP)
              (installed-libraries . g$installed-libraries$7595$jXZPP)
              (uninstall-library . g$uninstall-library$7586$jXZPP)))))))
    (g$install-library$7590$jXZPP
      'g$12846$jXZPP
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12783$jXZPP)
        (cosh . g$12782$jXZPP)
        (sinh . g$12781$jXZPP)
        (make-guid . g$12780$jXZPP)
        (unspecified? . g$12779$jXZPP)
        (make-list . g$5872$jXZPP)
        (last-pair . g$5871$jXZPP)
        (load-r5rs . g$12778$jXZPP)
        (license . g$12777$jXZPP)
        (stacktrace . g$12776$jXZPP)
        (ironscheme-build . g$12223$jXZPP)
        (set-symbol-value! . g$12763$jXZPP)
        (symbol-value . g$12762$jXZPP)
        (symbol-bound? . g$12761$jXZPP)
        (ungensym . g$12760$jXZPP)
        (gensym . g$12759$jXZPP)
        (void . g$12758$jXZPP)
        (compile-system-libraries . g$12225$jXZPP)
        (compile->closure . g$12227$jXZPP)
        (compile . g$12226$jXZPP)
        (load . g$12222$jXZPP)
        (interaction-environment . g$9242$jXZPP)
        (string-upcase . g$12754$jXZPP)
        (string-titlecase . g$12753$jXZPP)
        (string-normalize-nfkd . g$12752$jXZPP)
        (string-normalize-nfkc . g$12751$jXZPP)
        (string-normalize-nfd . g$12750$jXZPP)
        (string-normalize-nfc . g$12749$jXZPP)
        (string-foldcase . g$12748$jXZPP)
        (string-downcase . g$12747$jXZPP)
        (string-ci>? . g$7040$jXZPP)
        (string-ci>=? . g$7042$jXZPP)
        (string-ci=? . g$7038$jXZPP)
        (string-ci<? . g$7039$jXZPP)
        (string-ci<=? . g$7041$jXZPP)
        (char-whitespace? . g$12746$jXZPP)
        (char-upper-case? . g$12745$jXZPP)
        (char-title-case? . g$12744$jXZPP)
        (char-numeric? . g$12743$jXZPP)
        (char-lower-case? . g$12742$jXZPP)
        (char-general-category . g$12741$jXZPP)
        (char-upcase . g$12740$jXZPP)
        (char-titlecase . g$12739$jXZPP)
        (char-foldcase . g$12738$jXZPP)
        (char-downcase . g$12737$jXZPP)
        (char-ci>? . g$7079$jXZPP)
        (char-ci>=? . g$7081$jXZPP)
        (char-ci=? . g$7077$jXZPP)
        (char-ci<? . g$7078$jXZPP)
        (char-ci<=? . g$7080$jXZPP)
        (char-alphabetic? . g$12736$jXZPP)
        (make-variable-transformer . g$8837$jXZPP)
        (identifier? . g$9236$jXZPP)
        (generate-temporaries . g$9225$jXZPP)
        (free-identifier=? . g$9226$jXZPP)
        (syntax->datum . g$9238$jXZPP)
        (datum->syntax . g$9237$jXZPP)
        (bound-identifier=? . g$9227$jXZPP)
        (record-type-descriptor? . g$12735$jXZPP)
        (record-predicate . g$12734$jXZPP)
        (record-mutator . g$12733$jXZPP)
        (record-constructor . g$12732$jXZPP)
        (record-accessor . g$12731$jXZPP)
        (make-record-type-descriptor . g$12730$jXZPP)
        (make-record-constructor-descriptor . g$12729$jXZPP)
        (record? . g$12728$jXZPP)
        (record-type-uid . g$12727$jXZPP)
        (record-type-sealed? . g$12726$jXZPP)
        (record-type-parent . g$12725$jXZPP)
        (record-type-opaque? . g$12724$jXZPP)
        (record-type-name . g$12723$jXZPP)
        (record-type-generative? . g$12722$jXZPP)
        (record-type-field-names . g$12721$jXZPP)
        (record-rtd . g$12720$jXZPP)
        (record-field-mutable? . g$12719$jXZPP)
        (delete-file . g$6614$jXZPP)
        (file-exists? . g$6613$jXZPP)
        (vector-sort! . g$12718$jXZPP)
        (vector-sort . g$12717$jXZPP)
        (list-sort . g$6980$jXZPP)
        (symbol-hash . g$12716$jXZPP)
        (string-ci-hash . g$12715$jXZPP)
        (string-hash . g$12714$jXZPP)
        (equal-hash . g$12713$jXZPP)
        (hashtable-equivalence-function . g$12712$jXZPP)
        (make-hashtable . g$12711$jXZPP)
        (hashtable-hash-function . g$12710$jXZPP)
        (make-eqv-hashtable . g$6582$jXZPP)
        (make-eq-hashtable . g$6581$jXZPP)
        (hashtable? . g$12709$jXZPP)
        (hashtable-update! . g$6588$jXZPP)
        (hashtable-size . g$6583$jXZPP)
        (hashtable-set! . g$6585$jXZPP)
        (hashtable-ref . g$6584$jXZPP)
        (hashtable-mutable? . g$12708$jXZPP)
        (hashtable-keys . g$12707$jXZPP)
        (hashtable-entries . g$12706$jXZPP)
        (hashtable-delete! . g$6586$jXZPP)
        (hashtable-copy . g$12705$jXZPP)
        (hashtable-contains? . g$6587$jXZPP)
        (hashtable-clear! . g$6589$jXZPP)
        (call-with-output-file . g$7465$jXZPP)
        (call-with-input-file . g$7464$jXZPP)
        (write-char . g$7446$jXZPP)
        (write . g$12704$jXZPP)
        (with-output-to-file . g$7463$jXZPP)
        (with-input-from-file . g$7462$jXZPP)
        (read-char . g$7445$jXZPP)
        (read . g$12703$jXZPP)
        (peek-char . g$7444$jXZPP)
        (open-output-file . g$12702$jXZPP)
        (open-input-file . g$12701$jXZPP)
        (newline . g$7466$jXZPP)
        (display . g$12700$jXZPP)
        (close-output-port . g$12699$jXZPP)
        (close-input-port . g$12698$jXZPP)
        (eof-object? . g$12697$jXZPP)
        (eof-object . g$12696$jXZPP)
        (current-error-port . g$12695$jXZPP)
        (current-output-port . g$12694$jXZPP)
        (current-input-port . g$12693$jXZPP)
        (output-port? . g$12692$jXZPP)
        (input-port? . g$12691$jXZPP)
        (utf-8-codec . g$12690$jXZPP)
        (utf-16-codec . g$12689$jXZPP)
        (transcoder-error-handling-mode . g$12688$jXZPP)
        (transcoder-eol-style . g$12687$jXZPP)
        (transcoder-codec . g$12686$jXZPP)
        (transcoded-port . g$12685$jXZPP)
        (textual-port? . g$12684$jXZPP)
        (string->bytevector . g$12683$jXZPP)
        (standard-output-port . g$12682$jXZPP)
        (standard-input-port . g$12681$jXZPP)
        (standard-error-port . g$12680$jXZPP)
        (set-port-position! . g$12679$jXZPP)
        (put-u8 . g$12678$jXZPP)
        (put-string . g$12677$jXZPP)
        (put-datum . g$12676$jXZPP)
        (put-char . g$12675$jXZPP)
        (put-bytevector . g$12674$jXZPP)
        (port? . g$7431$jXZPP)
        (port-transcoder . g$12673$jXZPP)
        (port-position . g$12672$jXZPP)
        (port-has-set-port-position!? . g$12671$jXZPP)
        (port-has-port-position? . g$12670$jXZPP)
        (port-eof? . g$12669$jXZPP)
        (output-port-buffer-mode . g$12668$jXZPP)
        (open-string-output-port . g$7430$jXZPP)
        (open-string-input-port . g$12667$jXZPP)
        (open-file-output-port . g$12666$jXZPP)
        (open-file-input/output-port . g$12665$jXZPP)
        (open-file-input-port . g$12664$jXZPP)
        (open-bytevector-output-port . g$12663$jXZPP)
        (open-bytevector-input-port . g$12662$jXZPP)
        (native-transcoder . g$12661$jXZPP)
        (native-eol-style . g$12660$jXZPP)
        (make-transcoder . g$12659$jXZPP)
        (latin-1-codec . g$12658$jXZPP)
        (make-i/o-write-error . g$7286$jXZPP)
        (make-i/o-read-error . g$7272$jXZPP)
        (make-i/o-port-error . g$7391$jXZPP)
        (make-i/o-invalid-position-error . g$7301$jXZPP)
        (make-i/o-filename-error . g$7318$jXZPP)
        (make-i/o-file-protection-error . g$7334$jXZPP)
        (make-i/o-file-is-read-only-error . g$7348$jXZPP)
        (make-i/o-file-does-not-exist-error . g$7376$jXZPP)
        (make-i/o-file-already-exists-error . g$7362$jXZPP)
        (make-i/o-error . g$7258$jXZPP)
        (make-i/o-encoding-error . g$7422$jXZPP)
        (make-i/o-decoding-error . g$7407$jXZPP)
        (make-custom-textual-output-port . g$12657$jXZPP)
        (make-custom-textual-input/output-port . g$12656$jXZPP)
        (make-custom-textual-input-port . g$12655$jXZPP)
        (make-custom-binary-output-port . g$12654$jXZPP)
        (make-custom-binary-input/output-port . g$12653$jXZPP)
        (make-custom-binary-input-port . g$12652$jXZPP)
        (make-bytevector . g$12651$jXZPP)
        (lookahead-u8 . g$12650$jXZPP)
        (lookahead-char . g$12649$jXZPP)
        (i/o-write-error? . g$7287$jXZPP)
        (i/o-read-error? . g$7273$jXZPP)
        (i/o-port-error? . g$7393$jXZPP)
        (i/o-invalid-position-error? . g$7303$jXZPP)
        (i/o-error-position . g$7304$jXZPP)
        (i/o-filename-error? . g$7320$jXZPP)
        (i/o-file-protection-error? . g$7335$jXZPP)
        (i/o-file-is-read-only-error? . g$7349$jXZPP)
        (i/o-file-does-not-exist-error? . g$7377$jXZPP)
        (i/o-file-already-exists-error? . g$7363$jXZPP)
        (i/o-error? . g$7259$jXZPP)
        (i/o-error-port . g$7394$jXZPP)
        (i/o-error-filename . g$7321$jXZPP)
        (i/o-encoding-error? . g$7424$jXZPP)
        (i/o-encoding-error-char . g$7425$jXZPP)
        (i/o-decoding-error? . g$7408$jXZPP)
        (get-u8 . g$12648$jXZPP)
        (get-string-n! . g$12647$jXZPP)
        (get-string-n . g$12646$jXZPP)
        (get-string-all . g$12645$jXZPP)
        (get-line . g$12644$jXZPP)
        (get-datum . g$12643$jXZPP)
        (get-char . g$12642$jXZPP)
        (get-bytevector-some . g$12641$jXZPP)
        (get-bytevector-n! . g$12640$jXZPP)
        (get-bytevector-n . g$12639$jXZPP)
        (get-bytevector-all . g$12638$jXZPP)
        (flush-output-port . g$12637$jXZPP)
        (close-port . g$12636$jXZPP)
        (call-with-string-output-port . g$7432$jXZPP)
        (call-with-port . g$7433$jXZPP)
        (call-with-bytevector-output-port . g$12635$jXZPP)
        (bytevector->string . g$12634$jXZPP)
        (buffer-mode? . g$12633$jXZPP)
        (binary-port? . g$12632$jXZPP)
        (scheme-report-environment . g$9215$jXZPP)
        (quotient . g$6959$jXZPP)
        (null-environment . g$9214$jXZPP)
        (remainder . g$6960$jXZPP)
        (modulo . g$6961$jXZPP)
        (inexact->exact . g$6956$jXZPP)
        (force . g$6963$jXZPP)
        (exact->inexact . g$6957$jXZPP)
        (exit . g$12631$jXZPP)
        (command-line . g$12219$jXZPP)
        (string-fill! . g$12630$jXZPP)
        (string-set! . g$12629$jXZPP)
        (set-cdr! . g$12628$jXZPP)
        (set-car! . g$12627$jXZPP)
        (remove . g$5894$jXZPP)
        (remv . g$5895$jXZPP)
        (remp . g$5875$jXZPP)
        (remq . g$5896$jXZPP)
        (partition . g$5874$jXZPP)
        (memv . g$5882$jXZPP)
        (memq . g$5881$jXZPP)
        (memp . g$5884$jXZPP)
        (member . g$5883$jXZPP)
        (exists . g$5888$jXZPP)
        (for-all . g$5887$jXZPP)
        (fold-right . g$5893$jXZPP)
        (fold-left . g$5892$jXZPP)
        (find . g$5873$jXZPP)
        (filter . g$5876$jXZPP)
        (cons* . g$5891$jXZPP)
        (assv . g$5878$jXZPP)
        (assq . g$5877$jXZPP)
        (assp . g$5880$jXZPP)
        (assoc . g$5879$jXZPP)
        (with-exception-handler . g$12626$jXZPP)
        (raise-continuable . g$12625$jXZPP)
        (raise . g$12624$jXZPP)
        (eval . g$9217$jXZPP)
        (environment . g$9213$jXZPP)
        (make-enumeration . g$7530$jXZPP)
        (enum-set=? . g$7537$jXZPP)
        (enum-set-universe . g$7531$jXZPP)
        (enum-set-union . g$7538$jXZPP)
        (enum-set-subset? . g$7536$jXZPP)
        (enum-set-projection . g$7542$jXZPP)
        (enum-set-member? . g$7535$jXZPP)
        (enum-set-intersection . g$7539$jXZPP)
        (enum-set-indexer . g$7532$jXZPP)
        (enum-set-difference . g$7540$jXZPP)
        (enum-set-constructor . g$7533$jXZPP)
        (enum-set-complement . g$7541$jXZPP)
        (enum-set->list . g$7534$jXZPP)
        (who-condition? . g$6868$jXZPP)
        (warning? . g$6779$jXZPP)
        (violation? . g$6821$jXZPP)
        (undefined-violation? . g$6945$jXZPP)
        (syntax-violation? . g$6929$jXZPP)
        (syntax-violation-subform . g$6931$jXZPP)
        (syntax-violation-form . g$6930$jXZPP)
        (syntax-violation . g$9235$jXZPP)
        (simple-conditions . g$12623$jXZPP)
        (serious-condition? . g$6793$jXZPP)
        (non-continuable-violation? . g$6883$jXZPP)
        (message-condition? . g$6764$jXZPP)
        (make-who-condition . g$6866$jXZPP)
        (make-warning . g$6778$jXZPP)
        (make-violation . g$6820$jXZPP)
        (make-undefined-violation . g$6944$jXZPP)
        (make-syntax-violation . g$6926$jXZPP)
        (make-serious-condition . g$6792$jXZPP)
        (make-non-continuable-violation . g$6882$jXZPP)
        (make-message-condition . g$6762$jXZPP)
        (make-lexical-violation . g$6910$jXZPP)
        (make-irritants-condition . g$6849$jXZPP)
        (make-implementation-restriction-violation . g$6896$jXZPP)
        (make-error . g$6806$jXZPP)
        (make-assertion-violation . g$6834$jXZPP)
        (lexical-violation? . g$6911$jXZPP)
        (irritants-condition? . g$6851$jXZPP)
        (implementation-restriction-violation? . g$6897$jXZPP)
        (error? . g$6807$jXZPP)
        (condition-who . g$6869$jXZPP)
        (condition-predicate . g$12622$jXZPP)
        (condition-message . g$6765$jXZPP)
        (condition-irritants . g$6852$jXZPP)
        (condition-accessor . g$12621$jXZPP)
        (condition . g$12620$jXZPP)
        (assertion-violation? . g$6835$jXZPP)
        (condition? . g$12619$jXZPP)
        (utf32->string . g$12618$jXZPP)
        (utf16->string . g$12617$jXZPP)
        (utf8->string . g$12616$jXZPP)
        (uint-list->bytevector . g$12615$jXZPP)
        (u8-list->bytevector . g$12614$jXZPP)
        (string->utf8 . g$12613$jXZPP)
        (string->utf32 . g$12612$jXZPP)
        (string->utf16 . g$12611$jXZPP)
        (sint-list->bytevector . g$12610$jXZPP)
        (native-endianness . g$6620$jXZPP)
        (bytevector? . g$12609$jXZPP)
        (bytevector=? . g$12608$jXZPP)
        (bytevector-uint-set! . g$12607$jXZPP)
        (bytevector-uint-ref . g$12606$jXZPP)
        (bytevector-u8-set! . g$12605$jXZPP)
        (bytevector-u8-ref . g$12604$jXZPP)
        (bytevector-u64-set! . g$6641$jXZPP)
        (bytevector-u64-ref . g$6637$jXZPP)
        (bytevector-u64-native-set! . g$6643$jXZPP)
        (bytevector-u64-native-ref . g$6639$jXZPP)
        (bytevector-u32-set! . g$6633$jXZPP)
        (bytevector-u32-ref . g$6629$jXZPP)
        (bytevector-u32-native-set! . g$6635$jXZPP)
        (bytevector-u32-native-ref . g$6631$jXZPP)
        (bytevector-u16-set! . g$6625$jXZPP)
        (bytevector-u16-ref . g$6621$jXZPP)
        (bytevector-u16-native-set! . g$6627$jXZPP)
        (bytevector-u16-native-ref . g$6623$jXZPP)
        (bytevector-sint-set! . g$12603$jXZPP)
        (bytevector-sint-ref . g$12602$jXZPP)
        (bytevector-s8-set! . g$12601$jXZPP)
        (bytevector-s8-ref . g$12600$jXZPP)
        (bytevector-s64-set! . g$6642$jXZPP)
        (bytevector-s64-ref . g$6638$jXZPP)
        (bytevector-s64-native-set! . g$6644$jXZPP)
        (bytevector-s64-native-ref . g$6640$jXZPP)
        (bytevector-s32-set! . g$6634$jXZPP)
        (bytevector-s32-ref . g$6630$jXZPP)
        (bytevector-s32-native-set! . g$6636$jXZPP)
        (bytevector-s32-native-ref . g$6632$jXZPP)
        (bytevector-s16-set! . g$6626$jXZPP)
        (bytevector-s16-ref . g$6622$jXZPP)
        (bytevector-s16-native-set! . g$6628$jXZPP)
        (bytevector-s16-native-ref . g$6624$jXZPP)
        (bytevector-length . g$12599$jXZPP)
        (bytevector-ieee-single-set! . g$12598$jXZPP)
        (bytevector-ieee-single-ref . g$12597$jXZPP)
        (bytevector-ieee-single-native-set! . g$6647$jXZPP)
        (bytevector-ieee-single-native-ref . g$6645$jXZPP)
        (bytevector-ieee-double-set! . g$12596$jXZPP)
        (bytevector-ieee-double-ref . g$12595$jXZPP)
        (bytevector-ieee-double-native-set! . g$6648$jXZPP)
        (bytevector-ieee-double-native-ref . g$6646$jXZPP)
        (bytevector-fill! . g$12594$jXZPP)
        (bytevector-copy! . g$12593$jXZPP)
        (bytevector-copy . g$12592$jXZPP)
        (bytevector->uint-list . g$12591$jXZPP)
        (bytevector->u8-list . g$12590$jXZPP)
        (bytevector->sint-list . g$12589$jXZPP)
        (no-nans-violation? . g$7244$jXZPP)
        (no-infinities-violation? . g$7230$jXZPP)
        (make-no-nans-violation . g$7243$jXZPP)
        (make-no-infinities-violation . g$7229$jXZPP)
        (real->flonum . g$12588$jXZPP)
        (flzero? . g$12587$jXZPP)
        (fltruncate . g$12586$jXZPP)
        (fltan . g$12585$jXZPP)
        (flsqrt . g$12584$jXZPP)
        (flsin . g$12583$jXZPP)
        (flround . g$12582$jXZPP)
        (flpositive? . g$12581$jXZPP)
        (flonum? . g$12580$jXZPP)
        (flodd? . g$12579$jXZPP)
        (flnumerator . g$12578$jXZPP)
        (flnegative? . g$12577$jXZPP)
        (flnan? . g$12576$jXZPP)
        (flmod0 . g$12575$jXZPP)
        (flmod . g$12574$jXZPP)
        (flmin . g$12573$jXZPP)
        (flmax . g$12572$jXZPP)
        (fllog . g$12571$jXZPP)
        (flinteger? . g$12570$jXZPP)
        (flinfinite? . g$12569$jXZPP)
        (flfloor . g$12568$jXZPP)
        (flfinite? . g$12567$jXZPP)
        (flexpt . g$12566$jXZPP)
        (flexp . g$12565$jXZPP)
        (fleven? . g$12564$jXZPP)
        (fldiv0-and-mod0 . g$12563$jXZPP)
        (fldiv0 . g$12562$jXZPP)
        (fldiv-and-mod . g$12561$jXZPP)
        (fldiv . g$12560$jXZPP)
        (fldenominator . g$12559$jXZPP)
        (flcos . g$12558$jXZPP)
        (flceiling . g$12557$jXZPP)
        (flatan . g$12556$jXZPP)
        (flasin . g$12555$jXZPP)
        (flacos . g$12554$jXZPP)
        (flabs . g$12553$jXZPP)
        (fl>? . g$12552$jXZPP)
        (fl>=? . g$12551$jXZPP)
        (fl=? . g$12550$jXZPP)
        (fl<? . g$12549$jXZPP)
        (fl<=? . g$12548$jXZPP)
        (fl/ . g$12547$jXZPP)
        (fl- . g$12546$jXZPP)
        (fl+ . g$12545$jXZPP)
        (fl* . g$12544$jXZPP)
        (fixnum->flonum . g$12543$jXZPP)
        (fxzero? . g$12542$jXZPP)
        (fxxor . g$12541$jXZPP)
        (fxrotate-bit-field . g$7176$jXZPP)
        (fxreverse-bit-field . g$12540$jXZPP)
        (fxpositive? . g$12539$jXZPP)
        (fxodd? . g$12538$jXZPP)
        (fxnot . g$12537$jXZPP)
        (fxnegative? . g$12536$jXZPP)
        (fxmod0 . g$12535$jXZPP)
        (fxmod . g$12534$jXZPP)
        (fxmin . g$12533$jXZPP)
        (fxmax . g$12532$jXZPP)
        (fxlength . g$12531$jXZPP)
        (fxior . g$12530$jXZPP)
        (fxif . g$7170$jXZPP)
        (fxfirst-bit-set . g$12529$jXZPP)
        (fxeven? . g$12528$jXZPP)
        (fxdiv0-and-mod0 . g$12527$jXZPP)
        (fxdiv0 . g$12526$jXZPP)
        (fxdiv-and-mod . g$12525$jXZPP)
        (fxdiv . g$12524$jXZPP)
        (fxcopy-bit-field . g$7173$jXZPP)
        (fxcopy-bit . g$7171$jXZPP)
        (fxbit-set? . g$12523$jXZPP)
        (fxbit-field . g$7172$jXZPP)
        (fxbit-count . g$12522$jXZPP)
        (fxarithmetic-shift-right . g$7175$jXZPP)
        (fxarithmetic-shift-left . g$7174$jXZPP)
        (fxarithmetic-shift . g$12521$jXZPP)
        (fxand . g$12520$jXZPP)
        (fx>? . g$12519$jXZPP)
        (fx>=? . g$12518$jXZPP)
        (fx=? . g$12517$jXZPP)
        (fx<? . g$12516$jXZPP)
        (fx<=? . g$12515$jXZPP)
        (fx-/carry . g$7168$jXZPP)
        (fx- . g$12514$jXZPP)
        (fx+/carry . g$7169$jXZPP)
        (fx+ . g$12513$jXZPP)
        (fx*/carry . g$7167$jXZPP)
        (fx* . g$12512$jXZPP)
        (greatest-fixnum . g$12511$jXZPP)
        (least-fixnum . g$12510$jXZPP)
        (fixnum-width . g$12509$jXZPP)
        (fixnum? . g$12508$jXZPP)
        (bitwise-rotate-bit-field . g$7141$jXZPP)
        (bitwise-reverse-bit-field . g$12507$jXZPP)
        (bitwise-length . g$12506$jXZPP)
        (bitwise-if . g$7135$jXZPP)
        (bitwise-first-bit-set . g$12505$jXZPP)
        (bitwise-copy-bit-field . g$7138$jXZPP)
        (bitwise-copy-bit . g$7136$jXZPP)
        (bitwise-bit-set? . g$12504$jXZPP)
        (bitwise-bit-field . g$7137$jXZPP)
        (bitwise-bit-count . g$12503$jXZPP)
        (bitwise-xor . g$12502$jXZPP)
        (bitwise-ior . g$12501$jXZPP)
        (bitwise-and . g$12500$jXZPP)
        (bitwise-not . g$12499$jXZPP)
        (bitwise-arithmetic-shift-right . g$7140$jXZPP)
        (bitwise-arithmetic-shift-left . g$7139$jXZPP)
        (bitwise-arithmetic-shift . g$12498$jXZPP)
        (zero? . g$6037$jXZPP)
        (vector? . g$12497$jXZPP)
        (vector-set! . g$12496$jXZPP)
        (vector-ref . g$12495$jXZPP)
        (vector-map . g$6131$jXZPP)
        (vector-length . g$12494$jXZPP)
        (vector-for-each . g$6132$jXZPP)
        (vector-fill! . g$12493$jXZPP)
        (vector->list . g$12492$jXZPP)
        (vector . g$12491$jXZPP)
        (values . g$12490$jXZPP)
        (truncate . g$12489$jXZPP)
        (tan . g$12488$jXZPP)
        (symbol? . g$12487$jXZPP)
        (symbol=? . g$6085$jXZPP)
        (symbol->string . g$12486$jXZPP)
        (substring . g$12485$jXZPP)
        (string? . g$12484$jXZPP)
        (string>? . g$6082$jXZPP)
        (string>=? . g$6084$jXZPP)
        (string=? . g$6080$jXZPP)
        (string<? . g$6081$jXZPP)
        (string<=? . g$6083$jXZPP)
        (string-ref . g$12483$jXZPP)
        (string-length . g$12482$jXZPP)
        (string-for-each . g$6133$jXZPP)
        (string-copy . g$12481$jXZPP)
        (string-append . g$12480$jXZPP)
        (string->symbol . g$12479$jXZPP)
        (string->number . g$12478$jXZPP)
        (string->list . g$12477$jXZPP)
        (string . g$12476$jXZPP)
        (sqrt . g$12475$jXZPP)
        (sin . g$12474$jXZPP)
        (round . g$12473$jXZPP)
        (reverse . g$12472$jXZPP)
        (real? . g$12471$jXZPP)
        (real-valued? . g$12470$jXZPP)
        (real-part . g$12469$jXZPP)
        (rationalize . g$6128$jXZPP)
        (rational? . g$12468$jXZPP)
        (rational-valued? . g$12467$jXZPP)
        (procedure? . g$12466$jXZPP)
        (positive? . g$6035$jXZPP)
        (pair? . g$12465$jXZPP)
        (odd? . g$6039$jXZPP)
        (numerator . g$12464$jXZPP)
        (number? . g$12463$jXZPP)
        (number->string . g$12462$jXZPP)
        (null? . g$12461$jXZPP)
        (not . g$12460$jXZPP)
        (negative? . g$6036$jXZPP)
        (nan? . g$12459$jXZPP)
        (min . g$6041$jXZPP)
        (max . g$6040$jXZPP)
        (map . g$5889$jXZPP)
        (make-vector . g$12458$jXZPP)
        (make-string . g$12457$jXZPP)
        (make-rectangular . g$12456$jXZPP)
        (make-polar . g$12455$jXZPP)
        (magnitude . g$12454$jXZPP)
        (log . g$12453$jXZPP)
        (list? . g$12452$jXZPP)
        (list-tail . g$5869$jXZPP)
        (list-ref . g$5870$jXZPP)
        (list->vector . g$12451$jXZPP)
        (list->string . g$12450$jXZPP)
        (list . g$12449$jXZPP)
        (length . g$12448$jXZPP)
        (lcm . g$6043$jXZPP)
        (integer? . g$12447$jXZPP)
        (integer-valued? . g$12446$jXZPP)
        (integer->char . g$12445$jXZPP)
        (infinite? . g$12444$jXZPP)
        (inexact? . g$12443$jXZPP)
        (inexact . g$12442$jXZPP)
        (imag-part . g$12441$jXZPP)
        (gcd . g$6042$jXZPP)
        (for-each . g$5890$jXZPP)
        (floor . g$12440$jXZPP)
        (finite? . g$12439$jXZPP)
        (expt . g$12438$jXZPP)
        (exp . g$12437$jXZPP)
        (exact? . g$12436$jXZPP)
        (exact-integer-sqrt . g$12435$jXZPP)
        (exact . g$12434$jXZPP)
        (even? . g$6038$jXZPP)
        (error . g$12433$jXZPP)
        (eqv? . g$12432$jXZPP)
        (equal? . g$12431$jXZPP)
        (eq? . g$12430$jXZPP)
        (dynamic-wind . g$12429$jXZPP)
        (div0-and-mod0 . g$12428$jXZPP)
        (mod0 . g$12427$jXZPP)
        (div0 . g$12426$jXZPP)
        (div-and-mod . g$12425$jXZPP)
        (mod . g$12424$jXZPP)
        (div . g$12423$jXZPP)
        (denominator . g$12422$jXZPP)
        (cos . g$12421$jXZPP)
        (cons . g$12420$jXZPP)
        (complex? . g$12419$jXZPP)
        (char? . g$12418$jXZPP)
        (char>? . g$6125$jXZPP)
        (char>=? . g$6127$jXZPP)
        (char=? . g$6123$jXZPP)
        (char<? . g$6124$jXZPP)
        (char<=? . g$6126$jXZPP)
        (char->integer . g$12417$jXZPP)
        (ceiling . g$12416$jXZPP)
        (call-with-values . g$12415$jXZPP)
        (call/cc . g$12414$jXZPP)
        (call-with-current-continuation . g$12413$jXZPP)
        (cddddr . g$6034$jXZPP)
        (cdddar . g$6033$jXZPP)
        (cddadr . g$6032$jXZPP)
        (cddaar . g$6031$jXZPP)
        (cdaddr . g$6030$jXZPP)
        (cdadar . g$6029$jXZPP)
        (cdaadr . g$6028$jXZPP)
        (cdaaar . g$6027$jXZPP)
        (cadddr . g$6026$jXZPP)
        (caddar . g$6025$jXZPP)
        (cadadr . g$6024$jXZPP)
        (cadaar . g$6023$jXZPP)
        (caaddr . g$6022$jXZPP)
        (caadar . g$6021$jXZPP)
        (caaadr . g$6020$jXZPP)
        (caaaar . g$6019$jXZPP)
        (cdddr . g$6018$jXZPP)
        (cddar . g$6017$jXZPP)
        (cdadr . g$6016$jXZPP)
        (cdaar . g$6015$jXZPP)
        (caddr . g$6014$jXZPP)
        (cadar . g$6013$jXZPP)
        (caadr . g$6012$jXZPP)
        (caaar . g$6011$jXZPP)
        (cddr . g$6010$jXZPP)
        (cdar . g$6009$jXZPP)
        (cadr . g$6008$jXZPP)
        (caar . g$6007$jXZPP)
        (cdr . g$12412$jXZPP)
        (car . g$12411$jXZPP)
        (boolean? . g$12410$jXZPP)
        (boolean=? . g$6086$jXZPP)
        (atan . g$12409$jXZPP)
        (assertion-violation . g$12408$jXZPP)
        (asin . g$12407$jXZPP)
        (apply . g$12406$jXZPP)
        (append . g$12405$jXZPP)
        (angle . g$12404$jXZPP)
        (acos . g$12403$jXZPP)
        (abs . g$12402$jXZPP)
        (/ . g$12401$jXZPP)
        (* . g$12400$jXZPP)
        (- . g$12399$jXZPP)
        (+ . g$12398$jXZPP)
        (>= . g$12397$jXZPP)
        (> . g$12396$jXZPP)
        (= . g$12395$jXZPP)
        (<= . g$12394$jXZPP)
        (< . g$12393$jXZPP)
        (deserialize-port . g$12389$jXZPP)
        (serialize-port . g$12388$jXZPP)
        (enum-set? . g$7505$jXZPP)
        (load/args . g$12221$jXZPP)
        (printf . g$7616$jXZPP)
        (fprintf . g$7617$jXZPP)
        (format . g$7618$jXZPP)
        (procedure-form . g$12387$jXZPP)
        (procedure-environment . g$12386$jXZPP)
        (procedure-name . g$12385$jXZPP)
        (procedure-arity . g$12384$jXZPP)
        (gc-collect . g$12383$jXZPP)
        (clr-type? . g$12382$jXZPP)
        (get-clr-type . g$12381$jXZPP)
        (vector-append . g$12379$jXZPP)
        (vector-filter . g$12378$jXZPP)
        (vector-reverse! . g$12377$jXZPP)
        (vector-contains? . g$12376$jXZPP)
        (vector-index-of . g$12375$jXZPP)
        (vector-copy . g$12374$jXZPP)
        (vector-binary-search . g$12373$jXZPP)
        (string-ci-compare . g$12372$jXZPP)
        (string-compare . g$12371$jXZPP)
        (string-format . g$12370$jXZPP)
        (trace-printer . g$12218$jXZPP)
        (time-it . g$12368$jXZPP)
        (make-parameter . g$7923$jXZPP)
        (open-tcp-input/output-port . g$12365$jXZPP)
        (hashtable-for-each . g$12364$jXZPP)
        (hashtable-map . g$12363$jXZPP)
        (environment-bindings . g$9209$jXZPP)
        (environment-symbols . g$9212$jXZPP)
        (interaction-environment-symbols . g$9208$jXZPP)
        (optimization-level . g$12362$jXZPP)
        (library-path . g$8383$jXZPP)
        (expand->core . g$9218$jXZPP)
        (expand . g$9216$jXZPP)
        (expand-boot-cps . g$7697$jXZPP)
        (convert->cps . g$7694$jXZPP)
        (installed-libraries . g$8404$jXZPP)
        (uninstall-library . g$8395$jXZPP)
        (&no-nans . g$12361$jXZPP)
        (&no-infinities . g$12360$jXZPP)
        (&i/o-encoding . g$12359$jXZPP)
        (&i/o-decoding . g$12358$jXZPP)
        (&i/o-port . g$12357$jXZPP)
        (&i/o-file-does-not-exist . g$12356$jXZPP)
        (&i/o-file-already-exists . g$12355$jXZPP)
        (&i/o-file-is-read-only . g$12354$jXZPP)
        (&i/o-file-protection . g$12353$jXZPP)
        (&i/o-filename . g$12352$jXZPP)
        (&i/o-invalid-position . g$12351$jXZPP)
        (&i/o-write . g$12350$jXZPP)
        (&i/o-read . g$12349$jXZPP)
        (&i/o . g$12348$jXZPP)
        (&non-continuable . g$12347$jXZPP)
        (&undefined . g$12346$jXZPP)
        (&syntax . g$12345$jXZPP)
        (&lexical . g$12344$jXZPP)
        (&implementation-restriction . g$12343$jXZPP)
        (&who . g$12342$jXZPP)
        (&irritants . g$12341$jXZPP)
        (&assertion . g$12340$jXZPP)
        (&violation . g$12339$jXZPP)
        (&error . g$12338$jXZPP)
        (&serious . g$12337$jXZPP)
        (&warning . g$12336$jXZPP)
        (&message . g$12335$jXZPP)
        (&condition . g$12334$jXZPP)
        (define-condition-type . g$12333$jXZPP)
        (define-enumeration . g$12332$jXZPP)
        (define-record-type . g$12331$jXZPP)
        (parent-rtd . g$12330$jXZPP)
        (nongenerative . g$12329$jXZPP)
        (opaque . g$12328$jXZPP)
        (sealed . g$12327$jXZPP)
        (protocol . g$12326$jXZPP)
        (parent . g$12325$jXZPP)
        (immutable . g$12324$jXZPP)
        (mutable . g$12323$jXZPP)
        (fields . g$12322$jXZPP)
        (error-handling-mode . g$12321$jXZPP)
        (file-options . g$12320$jXZPP)
        (buffer-mode . g$12319$jXZPP)
        (eol-style . g$12318$jXZPP)
        (guard . g$12317$jXZPP)
        (trace-letrec-syntax . g$12316$jXZPP)
        (trace-let-syntax . g$12315$jXZPP)
        (trace-define-syntax . g$12314$jXZPP)
        (trace-define . g$12313$jXZPP)
        (trace-lambda . g$12312$jXZPP)
        (unsyntax-splicing . g$12311$jXZPP)
        (unsyntax . g$12310$jXZPP)
        (unquote-splicing . g$12309$jXZPP)
        (unquote . g$12308$jXZPP)
        (_ . g$12307$jXZPP)
        (else . g$12306$jXZPP)
        (=> . g$12305$jXZPP)
        (... . g$12304$jXZPP)
        (assert . g$12303$jXZPP)
        (endianness . g$12302$jXZPP)
        (delay . g$12301$jXZPP)
        (time . g$12300$jXZPP)
        (or . g$12299$jXZPP)
        (and . g$12298$jXZPP)
        (do . g$12297$jXZPP)
        (cond . g$12296$jXZPP)
        (let* . g$12295$jXZPP)
        (let . g$12294$jXZPP)
        (identifier-syntax . g$12293$jXZPP)
        (with-syntax . g$12292$jXZPP)
        (quasisyntax . g$12291$jXZPP)
        (quasiquote . g$12290$jXZPP)
        (syntax-rules . g$12289$jXZPP)
        (include-into . g$12288$jXZPP)
        (include . g$12287$jXZPP)
        (let-values . g$12285$jXZPP)
        (let*-values . g$12284$jXZPP)
        (record-constructor-descriptor . g$12283$jXZPP)
        (record-type-descriptor . g$12282$jXZPP)
        (fluid-let-syntax . g$12281$jXZPP)
        (case . g$12280$jXZPP)
        (parameterize . g$12279$jXZPP)
        (unless . g$12278$jXZPP)
        (when . g$12277$jXZPP)
        (if . g$12276$jXZPP)
        (letrec* . g$12275$jXZPP)
        (letrec . g$12274$jXZPP)
        (case-lambda . g$12272$jXZPP)
        (lambda . g$12271$jXZPP)
        (syntax . g$12270$jXZPP)
        (syntax-case . g$12269$jXZPP)
        (quote . g$12268$jXZPP)
        (letrec-syntax . g$12266$jXZPP)
        (let-syntax . g$12265$jXZPP)
        (set! . g$12264$jXZPP)
        (export . g$12263$jXZPP)
        (import . g$12262$jXZPP)
        (library . g$12261$jXZPP)
        (begin . g$12260$jXZPP)
        (module . g$12259$jXZPP)
        (define-syntax . g$12258$jXZPP)
        (define . g$12257$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12847$jXZPP
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12366$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7590$jXZPP
      'g$12848$jXZPP
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12788$jXZPP)
        (annotation-source . g$12787$jXZPP)
        (annotation-expression . g$12786$jXZPP)
        (annotation? . g$12785$jXZPP)
        (read-annotated . g$12784$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7590$jXZPP
      'g$12849$jXZPP
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12757$jXZPP)
        (serialize-library . g$12756$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7590$jXZPP
      'g$12850$jXZPP
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8839$jXZPP)
        (variable-transformer? . g$8838$jXZPP)
        (eqv-hash . g$12391$jXZPP)
        (reverse! . g$12390$jXZPP)
        (make-promise . g$6962$jXZPP)
        (format . g$7618$jXZPP)
        (get-command-line . g$12380$jXZPP)
        (make-traced-procedure . g$12369$jXZPP)
        (make-traced-macro . g$7638$jXZPP)
        (assertion-error . g$9231$jXZPP)
        (library-locator . g$12367$jXZPP)
        (get-library-paths . g$12366$jXZPP)
        (library-path . g$8383$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7590$jXZPP
      'g$12851$jXZPP
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12392$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12852$jXZPP
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12775$jXZPP)
        (clr-field-set!-internal . g$12774$jXZPP)
        (clr-field-get-internal . g$12773$jXZPP)
        (clr-cast-internal . g$12772$jXZPP)
        (clr-call-internal . g$12771$jXZPP)
        (clr-new-internal . g$12770$jXZPP)
        (clr-new-array-internal . g$12769$jXZPP)
        (clr-is-internal . g$12768$jXZPP)
        (clr-reference-internal . g$12767$jXZPP)
        (clr-using-internal . g$12766$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12853$jXZPP
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12309$jXZPP)
        (unquote . g$12308$jXZPP)
        (else . g$12306$jXZPP)
        (=> . g$12305$jXZPP)
        (delay . g$12301$jXZPP)
        (or . g$12299$jXZPP)
        (and . g$12298$jXZPP)
        (do . g$12297$jXZPP)
        (cond . g$12296$jXZPP)
        (let* . g$12295$jXZPP)
        (let . g$12294$jXZPP)
        (quasiquote . g$12290$jXZPP)
        (syntax-rules . g$12289$jXZPP)
        (case . g$12280$jXZPP)
        (if . g$12276$jXZPP)
        (letrec . g$12274$jXZPP)
        (lambda . g$12271$jXZPP)
        (quote . g$12268$jXZPP)
        (letrec-syntax . g$12266$jXZPP)
        (let-syntax . g$12265$jXZPP)
        (set! . g$12264$jXZPP)
        (begin . g$12260$jXZPP)
        (define-syntax . g$12258$jXZPP)
        (define . g$12257$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7590$jXZPP
      'g$12854$jXZPP
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$9242$jXZPP)
        (char-ready? . g$12755$jXZPP)
        (string-ci>? . g$7040$jXZPP)
        (string-ci>=? . g$7042$jXZPP)
        (string-ci=? . g$7038$jXZPP)
        (string-ci<? . g$7039$jXZPP)
        (string-ci<=? . g$7041$jXZPP)
        (char-whitespace? . g$12746$jXZPP)
        (char-upper-case? . g$12745$jXZPP)
        (char-numeric? . g$12743$jXZPP)
        (char-lower-case? . g$12742$jXZPP)
        (char-upcase . g$12740$jXZPP)
        (char-downcase . g$12737$jXZPP)
        (char-ci>? . g$7079$jXZPP)
        (char-ci>=? . g$7081$jXZPP)
        (char-ci=? . g$7077$jXZPP)
        (char-ci<? . g$7078$jXZPP)
        (char-ci<=? . g$7080$jXZPP)
        (char-alphabetic? . g$12736$jXZPP)
        (call-with-output-file . g$7465$jXZPP)
        (call-with-input-file . g$7464$jXZPP)
        (write-char . g$7446$jXZPP)
        (write . g$12704$jXZPP)
        (with-output-to-file . g$7463$jXZPP)
        (with-input-from-file . g$7462$jXZPP)
        (read-char . g$7445$jXZPP)
        (read . g$12703$jXZPP)
        (peek-char . g$7444$jXZPP)
        (open-output-file . g$12702$jXZPP)
        (open-input-file . g$12701$jXZPP)
        (newline . g$7466$jXZPP)
        (display . g$12700$jXZPP)
        (close-output-port . g$12699$jXZPP)
        (close-input-port . g$12698$jXZPP)
        (eof-object? . g$12697$jXZPP)
        (eof-object . g$12696$jXZPP)
        (current-error-port . g$12695$jXZPP)
        (current-output-port . g$12694$jXZPP)
        (current-input-port . g$12693$jXZPP)
        (output-port? . g$12692$jXZPP)
        (input-port? . g$12691$jXZPP)
        (scheme-report-environment . g$9215$jXZPP)
        (quotient . g$6959$jXZPP)
        (null-environment . g$9214$jXZPP)
        (remainder . g$6960$jXZPP)
        (modulo . g$6961$jXZPP)
        (inexact->exact . g$6956$jXZPP)
        (force . g$6963$jXZPP)
        (exact->inexact . g$6957$jXZPP)
        (string-fill! . g$12630$jXZPP)
        (string-set! . g$12629$jXZPP)
        (set-cdr! . g$12628$jXZPP)
        (set-car! . g$12627$jXZPP)
        (memv . g$5882$jXZPP)
        (memq . g$5881$jXZPP)
        (member . g$5883$jXZPP)
        (assv . g$5878$jXZPP)
        (assq . g$5877$jXZPP)
        (assoc . g$5879$jXZPP)
        (eval . g$9217$jXZPP)
        (zero? . g$6037$jXZPP)
        (vector? . g$12497$jXZPP)
        (vector-set! . g$12496$jXZPP)
        (vector-ref . g$12495$jXZPP)
        (vector-length . g$12494$jXZPP)
        (vector-fill! . g$12493$jXZPP)
        (vector->list . g$12492$jXZPP)
        (vector . g$12491$jXZPP)
        (values . g$12490$jXZPP)
        (truncate . g$12489$jXZPP)
        (tan . g$12488$jXZPP)
        (symbol? . g$12487$jXZPP)
        (symbol->string . g$12486$jXZPP)
        (substring . g$12485$jXZPP)
        (string? . g$12484$jXZPP)
        (string>? . g$6082$jXZPP)
        (string>=? . g$6084$jXZPP)
        (string=? . g$6080$jXZPP)
        (string<? . g$6081$jXZPP)
        (string<=? . g$6083$jXZPP)
        (string-ref . g$12483$jXZPP)
        (string-length . g$12482$jXZPP)
        (string-copy . g$12481$jXZPP)
        (string-append . g$12480$jXZPP)
        (string->symbol . g$12479$jXZPP)
        (string->number . g$12478$jXZPP)
        (string->list . g$12477$jXZPP)
        (string . g$12476$jXZPP)
        (sqrt . g$12475$jXZPP)
        (sin . g$12474$jXZPP)
        (round . g$12473$jXZPP)
        (reverse . g$12472$jXZPP)
        (real? . g$12471$jXZPP)
        (real-part . g$12469$jXZPP)
        (rationalize . g$6128$jXZPP)
        (rational? . g$12468$jXZPP)
        (procedure? . g$12466$jXZPP)
        (positive? . g$6035$jXZPP)
        (pair? . g$12465$jXZPP)
        (odd? . g$6039$jXZPP)
        (numerator . g$12464$jXZPP)
        (number? . g$12463$jXZPP)
        (number->string . g$12462$jXZPP)
        (null? . g$12461$jXZPP)
        (not . g$12460$jXZPP)
        (negative? . g$6036$jXZPP)
        (min . g$6041$jXZPP)
        (max . g$6040$jXZPP)
        (map . g$5889$jXZPP)
        (make-vector . g$12458$jXZPP)
        (make-string . g$12457$jXZPP)
        (make-rectangular . g$12456$jXZPP)
        (make-polar . g$12455$jXZPP)
        (magnitude . g$12454$jXZPP)
        (log . g$12453$jXZPP)
        (list? . g$12452$jXZPP)
        (list-tail . g$5869$jXZPP)
        (list-ref . g$5870$jXZPP)
        (list->vector . g$12451$jXZPP)
        (list->string . g$12450$jXZPP)
        (list . g$12449$jXZPP)
        (length . g$12448$jXZPP)
        (lcm . g$6043$jXZPP)
        (integer? . g$12447$jXZPP)
        (integer->char . g$12445$jXZPP)
        (inexact? . g$12443$jXZPP)
        (imag-part . g$12441$jXZPP)
        (gcd . g$6042$jXZPP)
        (for-each . g$5890$jXZPP)
        (floor . g$12440$jXZPP)
        (expt . g$12438$jXZPP)
        (exp . g$12437$jXZPP)
        (exact? . g$12436$jXZPP)
        (even? . g$6038$jXZPP)
        (eqv? . g$12432$jXZPP)
        (equal? . g$12431$jXZPP)
        (eq? . g$12430$jXZPP)
        (dynamic-wind . g$12429$jXZPP)
        (denominator . g$12422$jXZPP)
        (cos . g$12421$jXZPP)
        (cons . g$12420$jXZPP)
        (complex? . g$12419$jXZPP)
        (char? . g$12418$jXZPP)
        (char>? . g$6125$jXZPP)
        (char>=? . g$6127$jXZPP)
        (char=? . g$6123$jXZPP)
        (char<? . g$6124$jXZPP)
        (char<=? . g$6126$jXZPP)
        (char->integer . g$12417$jXZPP)
        (ceiling . g$12416$jXZPP)
        (call-with-values . g$12415$jXZPP)
        (call-with-current-continuation . g$12413$jXZPP)
        (cddddr . g$6034$jXZPP)
        (cdddar . g$6033$jXZPP)
        (cddadr . g$6032$jXZPP)
        (cddaar . g$6031$jXZPP)
        (cdaddr . g$6030$jXZPP)
        (cdadar . g$6029$jXZPP)
        (cdaadr . g$6028$jXZPP)
        (cdaaar . g$6027$jXZPP)
        (cadddr . g$6026$jXZPP)
        (caddar . g$6025$jXZPP)
        (cadadr . g$6024$jXZPP)
        (cadaar . g$6023$jXZPP)
        (caaddr . g$6022$jXZPP)
        (caadar . g$6021$jXZPP)
        (caaadr . g$6020$jXZPP)
        (caaaar . g$6019$jXZPP)
        (cdddr . g$6018$jXZPP)
        (cddar . g$6017$jXZPP)
        (cdadr . g$6016$jXZPP)
        (cdaar . g$6015$jXZPP)
        (caddr . g$6014$jXZPP)
        (cadar . g$6013$jXZPP)
        (caadr . g$6012$jXZPP)
        (caaar . g$6011$jXZPP)
        (cddr . g$6010$jXZPP)
        (cdar . g$6009$jXZPP)
        (cadr . g$6008$jXZPP)
        (caar . g$6007$jXZPP)
        (cdr . g$12412$jXZPP)
        (car . g$12411$jXZPP)
        (boolean? . g$12410$jXZPP)
        (atan . g$12409$jXZPP)
        (asin . g$12407$jXZPP)
        (apply . g$12406$jXZPP)
        (append . g$12405$jXZPP)
        (angle . g$12404$jXZPP)
        (acos . g$12403$jXZPP)
        (abs . g$12402$jXZPP)
        (/ . g$12401$jXZPP)
        (* . g$12400$jXZPP)
        (- . g$12399$jXZPP)
        (+ . g$12398$jXZPP)
        (>= . g$12397$jXZPP)
        (> . g$12396$jXZPP)
        (= . g$12395$jXZPP)
        (<= . g$12394$jXZPP)
        (< . g$12393$jXZPP)
        (unquote-splicing . g$12309$jXZPP)
        (unquote . g$12308$jXZPP)
        (else . g$12306$jXZPP)
        (=> . g$12305$jXZPP)
        (... . g$12304$jXZPP)
        (delay . g$12301$jXZPP)
        (or . g$12299$jXZPP)
        (and . g$12298$jXZPP)
        (do . g$12297$jXZPP)
        (cond . g$12296$jXZPP)
        (let* . g$12295$jXZPP)
        (let . g$12294$jXZPP)
        (quasiquote . g$12290$jXZPP)
        (syntax-rules . g$12289$jXZPP)
        (case . g$12280$jXZPP)
        (if . g$12276$jXZPP)
        (letrec . g$12274$jXZPP)
        (lambda . g$12271$jXZPP)
        (quote . g$12268$jXZPP)
        (letrec-syntax . g$12266$jXZPP)
        (let-syntax . g$12265$jXZPP)
        (set! . g$12264$jXZPP)
        (begin . g$12260$jXZPP)
        (define-syntax . g$12258$jXZPP)
        (define . g$12257$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7590$jXZPP
      'g$12855$jXZPP
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12754$jXZPP)
        (string-titlecase . g$12753$jXZPP)
        (string-normalize-nfkd . g$12752$jXZPP)
        (string-normalize-nfkc . g$12751$jXZPP)
        (string-normalize-nfd . g$12750$jXZPP)
        (string-normalize-nfc . g$12749$jXZPP)
        (string-foldcase . g$12748$jXZPP)
        (string-downcase . g$12747$jXZPP)
        (string-ci>? . g$7040$jXZPP)
        (string-ci>=? . g$7042$jXZPP)
        (string-ci=? . g$7038$jXZPP)
        (string-ci<? . g$7039$jXZPP)
        (string-ci<=? . g$7041$jXZPP)
        (char-whitespace? . g$12746$jXZPP)
        (char-upper-case? . g$12745$jXZPP)
        (char-title-case? . g$12744$jXZPP)
        (char-numeric? . g$12743$jXZPP)
        (char-lower-case? . g$12742$jXZPP)
        (char-general-category . g$12741$jXZPP)
        (char-upcase . g$12740$jXZPP)
        (char-titlecase . g$12739$jXZPP)
        (char-foldcase . g$12738$jXZPP)
        (char-downcase . g$12737$jXZPP)
        (char-ci>? . g$7079$jXZPP)
        (char-ci>=? . g$7081$jXZPP)
        (char-ci=? . g$7077$jXZPP)
        (char-ci<? . g$7078$jXZPP)
        (char-ci<=? . g$7080$jXZPP)
        (char-alphabetic? . g$12736$jXZPP)
        (make-variable-transformer . g$8837$jXZPP)
        (identifier? . g$9236$jXZPP)
        (generate-temporaries . g$9225$jXZPP)
        (free-identifier=? . g$9226$jXZPP)
        (syntax->datum . g$9238$jXZPP)
        (datum->syntax . g$9237$jXZPP)
        (bound-identifier=? . g$9227$jXZPP)
        (record-type-descriptor? . g$12735$jXZPP)
        (record-predicate . g$12734$jXZPP)
        (record-mutator . g$12733$jXZPP)
        (record-constructor . g$12732$jXZPP)
        (record-accessor . g$12731$jXZPP)
        (make-record-type-descriptor . g$12730$jXZPP)
        (make-record-constructor-descriptor . g$12729$jXZPP)
        (record? . g$12728$jXZPP)
        (record-type-uid . g$12727$jXZPP)
        (record-type-sealed? . g$12726$jXZPP)
        (record-type-parent . g$12725$jXZPP)
        (record-type-opaque? . g$12724$jXZPP)
        (record-type-name . g$12723$jXZPP)
        (record-type-generative? . g$12722$jXZPP)
        (record-type-field-names . g$12721$jXZPP)
        (record-rtd . g$12720$jXZPP)
        (record-field-mutable? . g$12719$jXZPP)
        (delete-file . g$6614$jXZPP)
        (file-exists? . g$6613$jXZPP)
        (vector-sort! . g$12718$jXZPP)
        (vector-sort . g$12717$jXZPP)
        (list-sort . g$6980$jXZPP)
        (symbol-hash . g$12716$jXZPP)
        (string-ci-hash . g$12715$jXZPP)
        (string-hash . g$12714$jXZPP)
        (equal-hash . g$12713$jXZPP)
        (hashtable-equivalence-function . g$12712$jXZPP)
        (make-hashtable . g$12711$jXZPP)
        (hashtable-hash-function . g$12710$jXZPP)
        (make-eqv-hashtable . g$6582$jXZPP)
        (make-eq-hashtable . g$6581$jXZPP)
        (hashtable? . g$12709$jXZPP)
        (hashtable-update! . g$6588$jXZPP)
        (hashtable-size . g$6583$jXZPP)
        (hashtable-set! . g$6585$jXZPP)
        (hashtable-ref . g$6584$jXZPP)
        (hashtable-mutable? . g$12708$jXZPP)
        (hashtable-keys . g$12707$jXZPP)
        (hashtable-entries . g$12706$jXZPP)
        (hashtable-delete! . g$6586$jXZPP)
        (hashtable-copy . g$12705$jXZPP)
        (hashtable-contains? . g$6587$jXZPP)
        (hashtable-clear! . g$6589$jXZPP)
        (call-with-output-file . g$7465$jXZPP)
        (call-with-input-file . g$7464$jXZPP)
        (write-char . g$7446$jXZPP)
        (write . g$12704$jXZPP)
        (with-output-to-file . g$7463$jXZPP)
        (with-input-from-file . g$7462$jXZPP)
        (read-char . g$7445$jXZPP)
        (read . g$12703$jXZPP)
        (peek-char . g$7444$jXZPP)
        (open-output-file . g$12702$jXZPP)
        (open-input-file . g$12701$jXZPP)
        (newline . g$7466$jXZPP)
        (display . g$12700$jXZPP)
        (close-output-port . g$12699$jXZPP)
        (close-input-port . g$12698$jXZPP)
        (eof-object? . g$12697$jXZPP)
        (eof-object . g$12696$jXZPP)
        (current-error-port . g$12695$jXZPP)
        (current-output-port . g$12694$jXZPP)
        (current-input-port . g$12693$jXZPP)
        (output-port? . g$12692$jXZPP)
        (input-port? . g$12691$jXZPP)
        (utf-8-codec . g$12690$jXZPP)
        (utf-16-codec . g$12689$jXZPP)
        (transcoder-error-handling-mode . g$12688$jXZPP)
        (transcoder-eol-style . g$12687$jXZPP)
        (transcoder-codec . g$12686$jXZPP)
        (transcoded-port . g$12685$jXZPP)
        (textual-port? . g$12684$jXZPP)
        (string->bytevector . g$12683$jXZPP)
        (standard-output-port . g$12682$jXZPP)
        (standard-input-port . g$12681$jXZPP)
        (standard-error-port . g$12680$jXZPP)
        (set-port-position! . g$12679$jXZPP)
        (put-u8 . g$12678$jXZPP)
        (put-string . g$12677$jXZPP)
        (put-datum . g$12676$jXZPP)
        (put-char . g$12675$jXZPP)
        (put-bytevector . g$12674$jXZPP)
        (port? . g$7431$jXZPP)
        (port-transcoder . g$12673$jXZPP)
        (port-position . g$12672$jXZPP)
        (port-has-set-port-position!? . g$12671$jXZPP)
        (port-has-port-position? . g$12670$jXZPP)
        (port-eof? . g$12669$jXZPP)
        (output-port-buffer-mode . g$12668$jXZPP)
        (open-string-output-port . g$7430$jXZPP)
        (open-string-input-port . g$12667$jXZPP)
        (open-file-output-port . g$12666$jXZPP)
        (open-file-input/output-port . g$12665$jXZPP)
        (open-file-input-port . g$12664$jXZPP)
        (open-bytevector-output-port . g$12663$jXZPP)
        (open-bytevector-input-port . g$12662$jXZPP)
        (native-transcoder . g$12661$jXZPP)
        (native-eol-style . g$12660$jXZPP)
        (make-transcoder . g$12659$jXZPP)
        (latin-1-codec . g$12658$jXZPP)
        (make-i/o-write-error . g$7286$jXZPP)
        (make-i/o-read-error . g$7272$jXZPP)
        (make-i/o-port-error . g$7391$jXZPP)
        (make-i/o-invalid-position-error . g$7301$jXZPP)
        (make-i/o-filename-error . g$7318$jXZPP)
        (make-i/o-file-protection-error . g$7334$jXZPP)
        (make-i/o-file-is-read-only-error . g$7348$jXZPP)
        (make-i/o-file-does-not-exist-error . g$7376$jXZPP)
        (make-i/o-file-already-exists-error . g$7362$jXZPP)
        (make-i/o-error . g$7258$jXZPP)
        (make-i/o-encoding-error . g$7422$jXZPP)
        (make-i/o-decoding-error . g$7407$jXZPP)
        (make-custom-textual-output-port . g$12657$jXZPP)
        (make-custom-textual-input/output-port . g$12656$jXZPP)
        (make-custom-textual-input-port . g$12655$jXZPP)
        (make-custom-binary-output-port . g$12654$jXZPP)
        (make-custom-binary-input/output-port . g$12653$jXZPP)
        (make-custom-binary-input-port . g$12652$jXZPP)
        (make-bytevector . g$12651$jXZPP)
        (lookahead-u8 . g$12650$jXZPP)
        (lookahead-char . g$12649$jXZPP)
        (i/o-write-error? . g$7287$jXZPP)
        (i/o-read-error? . g$7273$jXZPP)
        (i/o-port-error? . g$7393$jXZPP)
        (i/o-invalid-position-error? . g$7303$jXZPP)
        (i/o-error-position . g$7304$jXZPP)
        (i/o-filename-error? . g$7320$jXZPP)
        (i/o-file-protection-error? . g$7335$jXZPP)
        (i/o-file-is-read-only-error? . g$7349$jXZPP)
        (i/o-file-does-not-exist-error? . g$7377$jXZPP)
        (i/o-file-already-exists-error? . g$7363$jXZPP)
        (i/o-error? . g$7259$jXZPP)
        (i/o-error-port . g$7394$jXZPP)
        (i/o-error-filename . g$7321$jXZPP)
        (i/o-encoding-error? . g$7424$jXZPP)
        (i/o-encoding-error-char . g$7425$jXZPP)
        (i/o-decoding-error? . g$7408$jXZPP)
        (get-u8 . g$12648$jXZPP)
        (get-string-n! . g$12647$jXZPP)
        (get-string-n . g$12646$jXZPP)
        (get-string-all . g$12645$jXZPP)
        (get-line . g$12644$jXZPP)
        (get-datum . g$12643$jXZPP)
        (get-char . g$12642$jXZPP)
        (get-bytevector-some . g$12641$jXZPP)
        (get-bytevector-n! . g$12640$jXZPP)
        (get-bytevector-n . g$12639$jXZPP)
        (get-bytevector-all . g$12638$jXZPP)
        (flush-output-port . g$12637$jXZPP)
        (close-port . g$12636$jXZPP)
        (call-with-string-output-port . g$7432$jXZPP)
        (call-with-port . g$7433$jXZPP)
        (call-with-bytevector-output-port . g$12635$jXZPP)
        (bytevector->string . g$12634$jXZPP)
        (buffer-mode? . g$12633$jXZPP)
        (binary-port? . g$12632$jXZPP)
        (exit . g$12631$jXZPP)
        (command-line . g$12219$jXZPP)
        (remove . g$5894$jXZPP)
        (remv . g$5895$jXZPP)
        (remp . g$5875$jXZPP)
        (remq . g$5896$jXZPP)
        (partition . g$5874$jXZPP)
        (memv . g$5882$jXZPP)
        (memq . g$5881$jXZPP)
        (memp . g$5884$jXZPP)
        (member . g$5883$jXZPP)
        (exists . g$5888$jXZPP)
        (for-all . g$5887$jXZPP)
        (fold-right . g$5893$jXZPP)
        (fold-left . g$5892$jXZPP)
        (find . g$5873$jXZPP)
        (filter . g$5876$jXZPP)
        (cons* . g$5891$jXZPP)
        (assv . g$5878$jXZPP)
        (assq . g$5877$jXZPP)
        (assp . g$5880$jXZPP)
        (assoc . g$5879$jXZPP)
        (with-exception-handler . g$12626$jXZPP)
        (raise-continuable . g$12625$jXZPP)
        (raise . g$12624$jXZPP)
        (make-enumeration . g$7530$jXZPP)
        (enum-set=? . g$7537$jXZPP)
        (enum-set-universe . g$7531$jXZPP)
        (enum-set-union . g$7538$jXZPP)
        (enum-set-subset? . g$7536$jXZPP)
        (enum-set-projection . g$7542$jXZPP)
        (enum-set-member? . g$7535$jXZPP)
        (enum-set-intersection . g$7539$jXZPP)
        (enum-set-indexer . g$7532$jXZPP)
        (enum-set-difference . g$7540$jXZPP)
        (enum-set-constructor . g$7533$jXZPP)
        (enum-set-complement . g$7541$jXZPP)
        (enum-set->list . g$7534$jXZPP)
        (who-condition? . g$6868$jXZPP)
        (warning? . g$6779$jXZPP)
        (violation? . g$6821$jXZPP)
        (undefined-violation? . g$6945$jXZPP)
        (syntax-violation? . g$6929$jXZPP)
        (syntax-violation-subform . g$6931$jXZPP)
        (syntax-violation-form . g$6930$jXZPP)
        (syntax-violation . g$9235$jXZPP)
        (simple-conditions . g$12623$jXZPP)
        (serious-condition? . g$6793$jXZPP)
        (non-continuable-violation? . g$6883$jXZPP)
        (message-condition? . g$6764$jXZPP)
        (make-who-condition . g$6866$jXZPP)
        (make-warning . g$6778$jXZPP)
        (make-violation . g$6820$jXZPP)
        (make-undefined-violation . g$6944$jXZPP)
        (make-syntax-violation . g$6926$jXZPP)
        (make-serious-condition . g$6792$jXZPP)
        (make-non-continuable-violation . g$6882$jXZPP)
        (make-message-condition . g$6762$jXZPP)
        (make-lexical-violation . g$6910$jXZPP)
        (make-irritants-condition . g$6849$jXZPP)
        (make-implementation-restriction-violation . g$6896$jXZPP)
        (make-error . g$6806$jXZPP)
        (make-assertion-violation . g$6834$jXZPP)
        (lexical-violation? . g$6911$jXZPP)
        (irritants-condition? . g$6851$jXZPP)
        (implementation-restriction-violation? . g$6897$jXZPP)
        (error? . g$6807$jXZPP)
        (condition-who . g$6869$jXZPP)
        (condition-predicate . g$12622$jXZPP)
        (condition-message . g$6765$jXZPP)
        (condition-irritants . g$6852$jXZPP)
        (condition-accessor . g$12621$jXZPP)
        (condition . g$12620$jXZPP)
        (assertion-violation? . g$6835$jXZPP)
        (condition? . g$12619$jXZPP)
        (utf32->string . g$12618$jXZPP)
        (utf16->string . g$12617$jXZPP)
        (utf8->string . g$12616$jXZPP)
        (uint-list->bytevector . g$12615$jXZPP)
        (u8-list->bytevector . g$12614$jXZPP)
        (string->utf8 . g$12613$jXZPP)
        (string->utf32 . g$12612$jXZPP)
        (string->utf16 . g$12611$jXZPP)
        (sint-list->bytevector . g$12610$jXZPP)
        (native-endianness . g$6620$jXZPP)
        (bytevector? . g$12609$jXZPP)
        (bytevector=? . g$12608$jXZPP)
        (bytevector-uint-set! . g$12607$jXZPP)
        (bytevector-uint-ref . g$12606$jXZPP)
        (bytevector-u8-set! . g$12605$jXZPP)
        (bytevector-u8-ref . g$12604$jXZPP)
        (bytevector-u64-set! . g$6641$jXZPP)
        (bytevector-u64-ref . g$6637$jXZPP)
        (bytevector-u64-native-set! . g$6643$jXZPP)
        (bytevector-u64-native-ref . g$6639$jXZPP)
        (bytevector-u32-set! . g$6633$jXZPP)
        (bytevector-u32-ref . g$6629$jXZPP)
        (bytevector-u32-native-set! . g$6635$jXZPP)
        (bytevector-u32-native-ref . g$6631$jXZPP)
        (bytevector-u16-set! . g$6625$jXZPP)
        (bytevector-u16-ref . g$6621$jXZPP)
        (bytevector-u16-native-set! . g$6627$jXZPP)
        (bytevector-u16-native-ref . g$6623$jXZPP)
        (bytevector-sint-set! . g$12603$jXZPP)
        (bytevector-sint-ref . g$12602$jXZPP)
        (bytevector-s8-set! . g$12601$jXZPP)
        (bytevector-s8-ref . g$12600$jXZPP)
        (bytevector-s64-set! . g$6642$jXZPP)
        (bytevector-s64-ref . g$6638$jXZPP)
        (bytevector-s64-native-set! . g$6644$jXZPP)
        (bytevector-s64-native-ref . g$6640$jXZPP)
        (bytevector-s32-set! . g$6634$jXZPP)
        (bytevector-s32-ref . g$6630$jXZPP)
        (bytevector-s32-native-set! . g$6636$jXZPP)
        (bytevector-s32-native-ref . g$6632$jXZPP)
        (bytevector-s16-set! . g$6626$jXZPP)
        (bytevector-s16-ref . g$6622$jXZPP)
        (bytevector-s16-native-set! . g$6628$jXZPP)
        (bytevector-s16-native-ref . g$6624$jXZPP)
        (bytevector-length . g$12599$jXZPP)
        (bytevector-ieee-single-set! . g$12598$jXZPP)
        (bytevector-ieee-single-ref . g$12597$jXZPP)
        (bytevector-ieee-single-native-set! . g$6647$jXZPP)
        (bytevector-ieee-single-native-ref . g$6645$jXZPP)
        (bytevector-ieee-double-set! . g$12596$jXZPP)
        (bytevector-ieee-double-ref . g$12595$jXZPP)
        (bytevector-ieee-double-native-set! . g$6648$jXZPP)
        (bytevector-ieee-double-native-ref . g$6646$jXZPP)
        (bytevector-fill! . g$12594$jXZPP)
        (bytevector-copy! . g$12593$jXZPP)
        (bytevector-copy . g$12592$jXZPP)
        (bytevector->uint-list . g$12591$jXZPP)
        (bytevector->u8-list . g$12590$jXZPP)
        (bytevector->sint-list . g$12589$jXZPP)
        (no-nans-violation? . g$7244$jXZPP)
        (no-infinities-violation? . g$7230$jXZPP)
        (make-no-nans-violation . g$7243$jXZPP)
        (make-no-infinities-violation . g$7229$jXZPP)
        (real->flonum . g$12588$jXZPP)
        (flzero? . g$12587$jXZPP)
        (fltruncate . g$12586$jXZPP)
        (fltan . g$12585$jXZPP)
        (flsqrt . g$12584$jXZPP)
        (flsin . g$12583$jXZPP)
        (flround . g$12582$jXZPP)
        (flpositive? . g$12581$jXZPP)
        (flonum? . g$12580$jXZPP)
        (flodd? . g$12579$jXZPP)
        (flnumerator . g$12578$jXZPP)
        (flnegative? . g$12577$jXZPP)
        (flnan? . g$12576$jXZPP)
        (flmod0 . g$12575$jXZPP)
        (flmod . g$12574$jXZPP)
        (flmin . g$12573$jXZPP)
        (flmax . g$12572$jXZPP)
        (fllog . g$12571$jXZPP)
        (flinteger? . g$12570$jXZPP)
        (flinfinite? . g$12569$jXZPP)
        (flfloor . g$12568$jXZPP)
        (flfinite? . g$12567$jXZPP)
        (flexpt . g$12566$jXZPP)
        (flexp . g$12565$jXZPP)
        (fleven? . g$12564$jXZPP)
        (fldiv0-and-mod0 . g$12563$jXZPP)
        (fldiv0 . g$12562$jXZPP)
        (fldiv-and-mod . g$12561$jXZPP)
        (fldiv . g$12560$jXZPP)
        (fldenominator . g$12559$jXZPP)
        (flcos . g$12558$jXZPP)
        (flceiling . g$12557$jXZPP)
        (flatan . g$12556$jXZPP)
        (flasin . g$12555$jXZPP)
        (flacos . g$12554$jXZPP)
        (flabs . g$12553$jXZPP)
        (fl>? . g$12552$jXZPP)
        (fl>=? . g$12551$jXZPP)
        (fl=? . g$12550$jXZPP)
        (fl<? . g$12549$jXZPP)
        (fl<=? . g$12548$jXZPP)
        (fl/ . g$12547$jXZPP)
        (fl- . g$12546$jXZPP)
        (fl+ . g$12545$jXZPP)
        (fl* . g$12544$jXZPP)
        (fixnum->flonum . g$12543$jXZPP)
        (fxzero? . g$12542$jXZPP)
        (fxxor . g$12541$jXZPP)
        (fxrotate-bit-field . g$7176$jXZPP)
        (fxreverse-bit-field . g$12540$jXZPP)
        (fxpositive? . g$12539$jXZPP)
        (fxodd? . g$12538$jXZPP)
        (fxnot . g$12537$jXZPP)
        (fxnegative? . g$12536$jXZPP)
        (fxmod0 . g$12535$jXZPP)
        (fxmod . g$12534$jXZPP)
        (fxmin . g$12533$jXZPP)
        (fxmax . g$12532$jXZPP)
        (fxlength . g$12531$jXZPP)
        (fxior . g$12530$jXZPP)
        (fxif . g$7170$jXZPP)
        (fxfirst-bit-set . g$12529$jXZPP)
        (fxeven? . g$12528$jXZPP)
        (fxdiv0-and-mod0 . g$12527$jXZPP)
        (fxdiv0 . g$12526$jXZPP)
        (fxdiv-and-mod . g$12525$jXZPP)
        (fxdiv . g$12524$jXZPP)
        (fxcopy-bit-field . g$7173$jXZPP)
        (fxcopy-bit . g$7171$jXZPP)
        (fxbit-set? . g$12523$jXZPP)
        (fxbit-field . g$7172$jXZPP)
        (fxbit-count . g$12522$jXZPP)
        (fxarithmetic-shift-right . g$7175$jXZPP)
        (fxarithmetic-shift-left . g$7174$jXZPP)
        (fxarithmetic-shift . g$12521$jXZPP)
        (fxand . g$12520$jXZPP)
        (fx>? . g$12519$jXZPP)
        (fx>=? . g$12518$jXZPP)
        (fx=? . g$12517$jXZPP)
        (fx<? . g$12516$jXZPP)
        (fx<=? . g$12515$jXZPP)
        (fx-/carry . g$7168$jXZPP)
        (fx- . g$12514$jXZPP)
        (fx+/carry . g$7169$jXZPP)
        (fx+ . g$12513$jXZPP)
        (fx*/carry . g$7167$jXZPP)
        (fx* . g$12512$jXZPP)
        (greatest-fixnum . g$12511$jXZPP)
        (least-fixnum . g$12510$jXZPP)
        (fixnum-width . g$12509$jXZPP)
        (fixnum? . g$12508$jXZPP)
        (bitwise-rotate-bit-field . g$7141$jXZPP)
        (bitwise-reverse-bit-field . g$12507$jXZPP)
        (bitwise-length . g$12506$jXZPP)
        (bitwise-if . g$7135$jXZPP)
        (bitwise-first-bit-set . g$12505$jXZPP)
        (bitwise-copy-bit-field . g$7138$jXZPP)
        (bitwise-copy-bit . g$7136$jXZPP)
        (bitwise-bit-set? . g$12504$jXZPP)
        (bitwise-bit-field . g$7137$jXZPP)
        (bitwise-bit-count . g$12503$jXZPP)
        (bitwise-xor . g$12502$jXZPP)
        (bitwise-ior . g$12501$jXZPP)
        (bitwise-and . g$12500$jXZPP)
        (bitwise-not . g$12499$jXZPP)
        (bitwise-arithmetic-shift-right . g$7140$jXZPP)
        (bitwise-arithmetic-shift-left . g$7139$jXZPP)
        (bitwise-arithmetic-shift . g$12498$jXZPP)
        (zero? . g$6037$jXZPP)
        (vector? . g$12497$jXZPP)
        (vector-set! . g$12496$jXZPP)
        (vector-ref . g$12495$jXZPP)
        (vector-map . g$6131$jXZPP)
        (vector-length . g$12494$jXZPP)
        (vector-for-each . g$6132$jXZPP)
        (vector-fill! . g$12493$jXZPP)
        (vector->list . g$12492$jXZPP)
        (vector . g$12491$jXZPP)
        (values . g$12490$jXZPP)
        (truncate . g$12489$jXZPP)
        (tan . g$12488$jXZPP)
        (symbol? . g$12487$jXZPP)
        (symbol=? . g$6085$jXZPP)
        (symbol->string . g$12486$jXZPP)
        (substring . g$12485$jXZPP)
        (string? . g$12484$jXZPP)
        (string>? . g$6082$jXZPP)
        (string>=? . g$6084$jXZPP)
        (string=? . g$6080$jXZPP)
        (string<? . g$6081$jXZPP)
        (string<=? . g$6083$jXZPP)
        (string-ref . g$12483$jXZPP)
        (string-length . g$12482$jXZPP)
        (string-for-each . g$6133$jXZPP)
        (string-copy . g$12481$jXZPP)
        (string-append . g$12480$jXZPP)
        (string->symbol . g$12479$jXZPP)
        (string->number . g$12478$jXZPP)
        (string->list . g$12477$jXZPP)
        (string . g$12476$jXZPP)
        (sqrt . g$12475$jXZPP)
        (sin . g$12474$jXZPP)
        (round . g$12473$jXZPP)
        (reverse . g$12472$jXZPP)
        (real? . g$12471$jXZPP)
        (real-valued? . g$12470$jXZPP)
        (real-part . g$12469$jXZPP)
        (rationalize . g$6128$jXZPP)
        (rational? . g$12468$jXZPP)
        (rational-valued? . g$12467$jXZPP)
        (procedure? . g$12466$jXZPP)
        (positive? . g$6035$jXZPP)
        (pair? . g$12465$jXZPP)
        (odd? . g$6039$jXZPP)
        (numerator . g$12464$jXZPP)
        (number? . g$12463$jXZPP)
        (number->string . g$12462$jXZPP)
        (null? . g$12461$jXZPP)
        (not . g$12460$jXZPP)
        (negative? . g$6036$jXZPP)
        (nan? . g$12459$jXZPP)
        (min . g$6041$jXZPP)
        (max . g$6040$jXZPP)
        (map . g$5889$jXZPP)
        (make-vector . g$12458$jXZPP)
        (make-string . g$12457$jXZPP)
        (make-rectangular . g$12456$jXZPP)
        (make-polar . g$12455$jXZPP)
        (magnitude . g$12454$jXZPP)
        (log . g$12453$jXZPP)
        (list? . g$12452$jXZPP)
        (list-tail . g$5869$jXZPP)
        (list-ref . g$5870$jXZPP)
        (list->vector . g$12451$jXZPP)
        (list->string . g$12450$jXZPP)
        (list . g$12449$jXZPP)
        (length . g$12448$jXZPP)
        (lcm . g$6043$jXZPP)
        (integer? . g$12447$jXZPP)
        (integer-valued? . g$12446$jXZPP)
        (integer->char . g$12445$jXZPP)
        (infinite? . g$12444$jXZPP)
        (inexact? . g$12443$jXZPP)
        (inexact . g$12442$jXZPP)
        (imag-part . g$12441$jXZPP)
        (gcd . g$6042$jXZPP)
        (for-each . g$5890$jXZPP)
        (floor . g$12440$jXZPP)
        (finite? . g$12439$jXZPP)
        (expt . g$12438$jXZPP)
        (exp . g$12437$jXZPP)
        (exact? . g$12436$jXZPP)
        (exact-integer-sqrt . g$12435$jXZPP)
        (exact . g$12434$jXZPP)
        (even? . g$6038$jXZPP)
        (error . g$12433$jXZPP)
        (eqv? . g$12432$jXZPP)
        (equal? . g$12431$jXZPP)
        (eq? . g$12430$jXZPP)
        (dynamic-wind . g$12429$jXZPP)
        (div0-and-mod0 . g$12428$jXZPP)
        (mod0 . g$12427$jXZPP)
        (div0 . g$12426$jXZPP)
        (div-and-mod . g$12425$jXZPP)
        (mod . g$12424$jXZPP)
        (div . g$12423$jXZPP)
        (denominator . g$12422$jXZPP)
        (cos . g$12421$jXZPP)
        (cons . g$12420$jXZPP)
        (complex? . g$12419$jXZPP)
        (char? . g$12418$jXZPP)
        (char>? . g$6125$jXZPP)
        (char>=? . g$6127$jXZPP)
        (char=? . g$6123$jXZPP)
        (char<? . g$6124$jXZPP)
        (char<=? . g$6126$jXZPP)
        (char->integer . g$12417$jXZPP)
        (ceiling . g$12416$jXZPP)
        (call-with-values . g$12415$jXZPP)
        (call/cc . g$12414$jXZPP)
        (call-with-current-continuation . g$12413$jXZPP)
        (cddddr . g$6034$jXZPP)
        (cdddar . g$6033$jXZPP)
        (cddadr . g$6032$jXZPP)
        (cddaar . g$6031$jXZPP)
        (cdaddr . g$6030$jXZPP)
        (cdadar . g$6029$jXZPP)
        (cdaadr . g$6028$jXZPP)
        (cdaaar . g$6027$jXZPP)
        (cadddr . g$6026$jXZPP)
        (caddar . g$6025$jXZPP)
        (cadadr . g$6024$jXZPP)
        (cadaar . g$6023$jXZPP)
        (caaddr . g$6022$jXZPP)
        (caadar . g$6021$jXZPP)
        (caaadr . g$6020$jXZPP)
        (caaaar . g$6019$jXZPP)
        (cdddr . g$6018$jXZPP)
        (cddar . g$6017$jXZPP)
        (cdadr . g$6016$jXZPP)
        (cdaar . g$6015$jXZPP)
        (caddr . g$6014$jXZPP)
        (cadar . g$6013$jXZPP)
        (caadr . g$6012$jXZPP)
        (caaar . g$6011$jXZPP)
        (cddr . g$6010$jXZPP)
        (cdar . g$6009$jXZPP)
        (cadr . g$6008$jXZPP)
        (caar . g$6007$jXZPP)
        (cdr . g$12412$jXZPP)
        (car . g$12411$jXZPP)
        (boolean? . g$12410$jXZPP)
        (boolean=? . g$6086$jXZPP)
        (atan . g$12409$jXZPP)
        (assertion-violation . g$12408$jXZPP)
        (asin . g$12407$jXZPP)
        (apply . g$12406$jXZPP)
        (append . g$12405$jXZPP)
        (angle . g$12404$jXZPP)
        (acos . g$12403$jXZPP)
        (abs . g$12402$jXZPP)
        (/ . g$12401$jXZPP)
        (* . g$12400$jXZPP)
        (- . g$12399$jXZPP)
        (+ . g$12398$jXZPP)
        (>= . g$12397$jXZPP)
        (> . g$12396$jXZPP)
        (= . g$12395$jXZPP)
        (<= . g$12394$jXZPP)
        (< . g$12393$jXZPP)
        (&no-nans . g$12361$jXZPP)
        (&no-infinities . g$12360$jXZPP)
        (&i/o-encoding . g$12359$jXZPP)
        (&i/o-decoding . g$12358$jXZPP)
        (&i/o-port . g$12357$jXZPP)
        (&i/o-file-does-not-exist . g$12356$jXZPP)
        (&i/o-file-already-exists . g$12355$jXZPP)
        (&i/o-file-is-read-only . g$12354$jXZPP)
        (&i/o-file-protection . g$12353$jXZPP)
        (&i/o-filename . g$12352$jXZPP)
        (&i/o-invalid-position . g$12351$jXZPP)
        (&i/o-write . g$12350$jXZPP)
        (&i/o-read . g$12349$jXZPP)
        (&i/o . g$12348$jXZPP)
        (&non-continuable . g$12347$jXZPP)
        (&undefined . g$12346$jXZPP)
        (&syntax . g$12345$jXZPP)
        (&lexical . g$12344$jXZPP)
        (&implementation-restriction . g$12343$jXZPP)
        (&who . g$12342$jXZPP)
        (&irritants . g$12341$jXZPP)
        (&assertion . g$12340$jXZPP)
        (&violation . g$12339$jXZPP)
        (&error . g$12338$jXZPP)
        (&serious . g$12337$jXZPP)
        (&warning . g$12336$jXZPP)
        (&message . g$12335$jXZPP)
        (&condition . g$12334$jXZPP)
        (define-condition-type . g$12333$jXZPP)
        (define-enumeration . g$12332$jXZPP)
        (define-record-type . g$12331$jXZPP)
        (parent-rtd . g$12330$jXZPP)
        (nongenerative . g$12329$jXZPP)
        (opaque . g$12328$jXZPP)
        (sealed . g$12327$jXZPP)
        (protocol . g$12326$jXZPP)
        (parent . g$12325$jXZPP)
        (immutable . g$12324$jXZPP)
        (mutable . g$12323$jXZPP)
        (fields . g$12322$jXZPP)
        (error-handling-mode . g$12321$jXZPP)
        (file-options . g$12320$jXZPP)
        (buffer-mode . g$12319$jXZPP)
        (eol-style . g$12318$jXZPP)
        (guard . g$12317$jXZPP)
        (unsyntax-splicing . g$12311$jXZPP)
        (unsyntax . g$12310$jXZPP)
        (unquote-splicing . g$12309$jXZPP)
        (unquote . g$12308$jXZPP)
        (_ . g$12307$jXZPP)
        (else . g$12306$jXZPP)
        (=> . g$12305$jXZPP)
        (... . g$12304$jXZPP)
        (assert . g$12303$jXZPP)
        (endianness . g$12302$jXZPP)
        (or . g$12299$jXZPP)
        (and . g$12298$jXZPP)
        (do . g$12297$jXZPP)
        (cond . g$12296$jXZPP)
        (let* . g$12295$jXZPP)
        (let . g$12294$jXZPP)
        (identifier-syntax . g$12293$jXZPP)
        (with-syntax . g$12292$jXZPP)
        (quasisyntax . g$12291$jXZPP)
        (quasiquote . g$12290$jXZPP)
        (syntax-rules . g$12289$jXZPP)
        (let-values . g$12285$jXZPP)
        (let*-values . g$12284$jXZPP)
        (record-constructor-descriptor . g$12283$jXZPP)
        (record-type-descriptor . g$12282$jXZPP)
        (case . g$12280$jXZPP)
        (unless . g$12278$jXZPP)
        (when . g$12277$jXZPP)
        (if . g$12276$jXZPP)
        (letrec* . g$12275$jXZPP)
        (letrec . g$12274$jXZPP)
        (case-lambda . g$12272$jXZPP)
        (lambda . g$12271$jXZPP)
        (syntax . g$12270$jXZPP)
        (syntax-case . g$12269$jXZPP)
        (quote . g$12268$jXZPP)
        (letrec-syntax . g$12266$jXZPP)
        (let-syntax . g$12265$jXZPP)
        (set! . g$12264$jXZPP)
        (begin . g$12260$jXZPP)
        (define-syntax . g$12258$jXZPP)
        (define . g$12257$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12856$jXZPP
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$9242$jXZPP)
        (scheme-report-environment . g$9215$jXZPP)
        (quotient . g$6959$jXZPP)
        (null-environment . g$9214$jXZPP)
        (remainder . g$6960$jXZPP)
        (modulo . g$6961$jXZPP)
        (inexact->exact . g$6956$jXZPP)
        (force . g$6963$jXZPP)
        (exact->inexact . g$6957$jXZPP)
        (delay . g$12301$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12857$jXZPP
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12297$jXZPP)
        (unless . g$12278$jXZPP)
        (when . g$12277$jXZPP)
        (case-lambda . g$12272$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12858$jXZPP
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9217$jXZPP) (environment . g$9213$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12859$jXZPP
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12628$jXZPP) (set-car! . g$12627$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12860$jXZPP
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12630$jXZPP) (string-set! . g$12629$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12861$jXZPP
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12631$jXZPP) (command-line . g$12219$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12862$jXZPP
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8837$jXZPP)
        (identifier? . g$9236$jXZPP)
        (generate-temporaries . g$9225$jXZPP)
        (free-identifier=? . g$9226$jXZPP)
        (syntax->datum . g$9238$jXZPP)
        (datum->syntax . g$9237$jXZPP)
        (bound-identifier=? . g$9227$jXZPP)
        (syntax-violation . g$9235$jXZPP)
        (unsyntax-splicing . g$12311$jXZPP)
        (unsyntax . g$12310$jXZPP)
        (_ . g$12307$jXZPP)
        (... . g$12304$jXZPP)
        (with-syntax . g$12292$jXZPP)
        (quasisyntax . g$12291$jXZPP)
        (syntax . g$12270$jXZPP)
        (syntax-case . g$12269$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12863$jXZPP
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6614$jXZPP)
        (file-exists? . g$6613$jXZPP)
        (make-i/o-write-error . g$7286$jXZPP)
        (make-i/o-read-error . g$7272$jXZPP)
        (make-i/o-port-error . g$7391$jXZPP)
        (make-i/o-invalid-position-error . g$7301$jXZPP)
        (make-i/o-filename-error . g$7318$jXZPP)
        (make-i/o-file-protection-error . g$7334$jXZPP)
        (make-i/o-file-is-read-only-error . g$7348$jXZPP)
        (make-i/o-file-does-not-exist-error . g$7376$jXZPP)
        (make-i/o-file-already-exists-error . g$7362$jXZPP)
        (make-i/o-error . g$7258$jXZPP)
        (i/o-write-error? . g$7287$jXZPP)
        (i/o-read-error? . g$7273$jXZPP)
        (i/o-port-error? . g$7393$jXZPP)
        (i/o-invalid-position-error? . g$7303$jXZPP)
        (i/o-error-position . g$7304$jXZPP)
        (i/o-filename-error? . g$7320$jXZPP)
        (i/o-file-protection-error? . g$7335$jXZPP)
        (i/o-file-is-read-only-error? . g$7349$jXZPP)
        (i/o-file-does-not-exist-error? . g$7377$jXZPP)
        (i/o-file-already-exists-error? . g$7363$jXZPP)
        (i/o-error? . g$7259$jXZPP)
        (i/o-error-port . g$7394$jXZPP)
        (i/o-error-filename . g$7321$jXZPP)
        (&i/o-port . g$12357$jXZPP)
        (&i/o-file-does-not-exist . g$12356$jXZPP)
        (&i/o-file-already-exists . g$12355$jXZPP)
        (&i/o-file-is-read-only . g$12354$jXZPP)
        (&i/o-file-protection . g$12353$jXZPP)
        (&i/o-filename . g$12352$jXZPP)
        (&i/o-invalid-position . g$12351$jXZPP)
        (&i/o-write . g$12350$jXZPP)
        (&i/o-read . g$12349$jXZPP)
        (&i/o . g$12348$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12864$jXZPP
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12718$jXZPP)
        (vector-sort . g$12717$jXZPP)
        (list-sort . g$6980$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12865$jXZPP
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$6037$jXZPP)
        (vector? . g$12497$jXZPP)
        (vector-set! . g$12496$jXZPP)
        (vector-ref . g$12495$jXZPP)
        (vector-map . g$6131$jXZPP)
        (vector-length . g$12494$jXZPP)
        (vector-for-each . g$6132$jXZPP)
        (vector-fill! . g$12493$jXZPP)
        (vector->list . g$12492$jXZPP)
        (vector . g$12491$jXZPP)
        (values . g$12490$jXZPP)
        (truncate . g$12489$jXZPP)
        (tan . g$12488$jXZPP)
        (symbol? . g$12487$jXZPP)
        (symbol=? . g$6085$jXZPP)
        (symbol->string . g$12486$jXZPP)
        (substring . g$12485$jXZPP)
        (string? . g$12484$jXZPP)
        (string>? . g$6082$jXZPP)
        (string>=? . g$6084$jXZPP)
        (string=? . g$6080$jXZPP)
        (string<? . g$6081$jXZPP)
        (string<=? . g$6083$jXZPP)
        (string-ref . g$12483$jXZPP)
        (string-length . g$12482$jXZPP)
        (string-for-each . g$6133$jXZPP)
        (string-copy . g$12481$jXZPP)
        (string-append . g$12480$jXZPP)
        (string->symbol . g$12479$jXZPP)
        (string->number . g$12478$jXZPP)
        (string->list . g$12477$jXZPP)
        (string . g$12476$jXZPP)
        (sqrt . g$12475$jXZPP)
        (sin . g$12474$jXZPP)
        (round . g$12473$jXZPP)
        (reverse . g$12472$jXZPP)
        (real? . g$12471$jXZPP)
        (real-valued? . g$12470$jXZPP)
        (real-part . g$12469$jXZPP)
        (rationalize . g$6128$jXZPP)
        (rational? . g$12468$jXZPP)
        (rational-valued? . g$12467$jXZPP)
        (procedure? . g$12466$jXZPP)
        (positive? . g$6035$jXZPP)
        (pair? . g$12465$jXZPP)
        (odd? . g$6039$jXZPP)
        (numerator . g$12464$jXZPP)
        (number? . g$12463$jXZPP)
        (number->string . g$12462$jXZPP)
        (null? . g$12461$jXZPP)
        (not . g$12460$jXZPP)
        (negative? . g$6036$jXZPP)
        (nan? . g$12459$jXZPP)
        (min . g$6041$jXZPP)
        (max . g$6040$jXZPP)
        (map . g$5889$jXZPP)
        (make-vector . g$12458$jXZPP)
        (make-string . g$12457$jXZPP)
        (make-rectangular . g$12456$jXZPP)
        (make-polar . g$12455$jXZPP)
        (magnitude . g$12454$jXZPP)
        (log . g$12453$jXZPP)
        (list? . g$12452$jXZPP)
        (list-tail . g$5869$jXZPP)
        (list-ref . g$5870$jXZPP)
        (list->vector . g$12451$jXZPP)
        (list->string . g$12450$jXZPP)
        (list . g$12449$jXZPP)
        (length . g$12448$jXZPP)
        (lcm . g$6043$jXZPP)
        (integer? . g$12447$jXZPP)
        (integer-valued? . g$12446$jXZPP)
        (integer->char . g$12445$jXZPP)
        (infinite? . g$12444$jXZPP)
        (inexact? . g$12443$jXZPP)
        (inexact . g$12442$jXZPP)
        (imag-part . g$12441$jXZPP)
        (gcd . g$6042$jXZPP)
        (for-each . g$5890$jXZPP)
        (floor . g$12440$jXZPP)
        (finite? . g$12439$jXZPP)
        (expt . g$12438$jXZPP)
        (exp . g$12437$jXZPP)
        (exact? . g$12436$jXZPP)
        (exact-integer-sqrt . g$12435$jXZPP)
        (exact . g$12434$jXZPP)
        (even? . g$6038$jXZPP)
        (error . g$12433$jXZPP)
        (eqv? . g$12432$jXZPP)
        (equal? . g$12431$jXZPP)
        (eq? . g$12430$jXZPP)
        (dynamic-wind . g$12429$jXZPP)
        (div0-and-mod0 . g$12428$jXZPP)
        (mod0 . g$12427$jXZPP)
        (div0 . g$12426$jXZPP)
        (div-and-mod . g$12425$jXZPP)
        (mod . g$12424$jXZPP)
        (div . g$12423$jXZPP)
        (denominator . g$12422$jXZPP)
        (cos . g$12421$jXZPP)
        (cons . g$12420$jXZPP)
        (complex? . g$12419$jXZPP)
        (char? . g$12418$jXZPP)
        (char>? . g$6125$jXZPP)
        (char>=? . g$6127$jXZPP)
        (char=? . g$6123$jXZPP)
        (char<? . g$6124$jXZPP)
        (char<=? . g$6126$jXZPP)
        (char->integer . g$12417$jXZPP)
        (ceiling . g$12416$jXZPP)
        (call-with-values . g$12415$jXZPP)
        (call/cc . g$12414$jXZPP)
        (call-with-current-continuation . g$12413$jXZPP)
        (cddddr . g$6034$jXZPP)
        (cdddar . g$6033$jXZPP)
        (cddadr . g$6032$jXZPP)
        (cddaar . g$6031$jXZPP)
        (cdaddr . g$6030$jXZPP)
        (cdadar . g$6029$jXZPP)
        (cdaadr . g$6028$jXZPP)
        (cdaaar . g$6027$jXZPP)
        (cadddr . g$6026$jXZPP)
        (caddar . g$6025$jXZPP)
        (cadadr . g$6024$jXZPP)
        (cadaar . g$6023$jXZPP)
        (caaddr . g$6022$jXZPP)
        (caadar . g$6021$jXZPP)
        (caaadr . g$6020$jXZPP)
        (caaaar . g$6019$jXZPP)
        (cdddr . g$6018$jXZPP)
        (cddar . g$6017$jXZPP)
        (cdadr . g$6016$jXZPP)
        (cdaar . g$6015$jXZPP)
        (caddr . g$6014$jXZPP)
        (cadar . g$6013$jXZPP)
        (caadr . g$6012$jXZPP)
        (caaar . g$6011$jXZPP)
        (cddr . g$6010$jXZPP)
        (cdar . g$6009$jXZPP)
        (cadr . g$6008$jXZPP)
        (caar . g$6007$jXZPP)
        (cdr . g$12412$jXZPP)
        (car . g$12411$jXZPP)
        (boolean? . g$12410$jXZPP)
        (boolean=? . g$6086$jXZPP)
        (atan . g$12409$jXZPP)
        (assertion-violation . g$12408$jXZPP)
        (asin . g$12407$jXZPP)
        (apply . g$12406$jXZPP)
        (append . g$12405$jXZPP)
        (angle . g$12404$jXZPP)
        (acos . g$12403$jXZPP)
        (abs . g$12402$jXZPP)
        (/ . g$12401$jXZPP)
        (* . g$12400$jXZPP)
        (- . g$12399$jXZPP)
        (+ . g$12398$jXZPP)
        (>= . g$12397$jXZPP)
        (> . g$12396$jXZPP)
        (= . g$12395$jXZPP)
        (<= . g$12394$jXZPP)
        (< . g$12393$jXZPP)
        (unquote-splicing . g$12309$jXZPP)
        (unquote . g$12308$jXZPP)
        (_ . g$12307$jXZPP)
        (else . g$12306$jXZPP)
        (=> . g$12305$jXZPP)
        (... . g$12304$jXZPP)
        (assert . g$12303$jXZPP)
        (or . g$12299$jXZPP)
        (and . g$12298$jXZPP)
        (cond . g$12296$jXZPP)
        (let* . g$12295$jXZPP)
        (let . g$12294$jXZPP)
        (identifier-syntax . g$12293$jXZPP)
        (quasiquote . g$12290$jXZPP)
        (syntax-rules . g$12289$jXZPP)
        (let-values . g$12285$jXZPP)
        (let*-values . g$12284$jXZPP)
        (case . g$12280$jXZPP)
        (if . g$12276$jXZPP)
        (letrec* . g$12275$jXZPP)
        (letrec . g$12274$jXZPP)
        (lambda . g$12271$jXZPP)
        (quote . g$12268$jXZPP)
        (letrec-syntax . g$12266$jXZPP)
        (let-syntax . g$12265$jXZPP)
        (set! . g$12264$jXZPP)
        (begin . g$12260$jXZPP)
        (define-syntax . g$12258$jXZPP)
        (define . g$12257$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12866$jXZPP
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5894$jXZPP)
        (remv . g$5895$jXZPP)
        (remp . g$5875$jXZPP)
        (remq . g$5896$jXZPP)
        (partition . g$5874$jXZPP)
        (memv . g$5882$jXZPP)
        (memq . g$5881$jXZPP)
        (memp . g$5884$jXZPP)
        (member . g$5883$jXZPP)
        (exists . g$5888$jXZPP)
        (for-all . g$5887$jXZPP)
        (fold-right . g$5893$jXZPP)
        (fold-left . g$5892$jXZPP)
        (find . g$5873$jXZPP)
        (filter . g$5876$jXZPP)
        (cons* . g$5891$jXZPP)
        (assv . g$5878$jXZPP)
        (assq . g$5877$jXZPP)
        (assp . g$5880$jXZPP)
        (assoc . g$5879$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12867$jXZPP
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7465$jXZPP)
        (call-with-input-file . g$7464$jXZPP)
        (write-char . g$7446$jXZPP)
        (write . g$12704$jXZPP)
        (with-output-to-file . g$7463$jXZPP)
        (with-input-from-file . g$7462$jXZPP)
        (read-char . g$7445$jXZPP)
        (read . g$12703$jXZPP)
        (peek-char . g$7444$jXZPP)
        (open-output-file . g$12702$jXZPP)
        (open-input-file . g$12701$jXZPP)
        (newline . g$7466$jXZPP)
        (display . g$12700$jXZPP)
        (close-output-port . g$12699$jXZPP)
        (close-input-port . g$12698$jXZPP)
        (eof-object? . g$12697$jXZPP)
        (eof-object . g$12696$jXZPP)
        (current-error-port . g$12695$jXZPP)
        (current-output-port . g$12694$jXZPP)
        (current-input-port . g$12693$jXZPP)
        (output-port? . g$12692$jXZPP)
        (input-port? . g$12691$jXZPP)
        (make-i/o-write-error . g$7286$jXZPP)
        (make-i/o-read-error . g$7272$jXZPP)
        (make-i/o-port-error . g$7391$jXZPP)
        (make-i/o-invalid-position-error . g$7301$jXZPP)
        (make-i/o-filename-error . g$7318$jXZPP)
        (make-i/o-file-protection-error . g$7334$jXZPP)
        (make-i/o-file-is-read-only-error . g$7348$jXZPP)
        (make-i/o-file-does-not-exist-error . g$7376$jXZPP)
        (make-i/o-file-already-exists-error . g$7362$jXZPP)
        (make-i/o-error . g$7258$jXZPP)
        (i/o-write-error? . g$7287$jXZPP)
        (i/o-read-error? . g$7273$jXZPP)
        (i/o-port-error? . g$7393$jXZPP)
        (i/o-invalid-position-error? . g$7303$jXZPP)
        (i/o-error-position . g$7304$jXZPP)
        (i/o-filename-error? . g$7320$jXZPP)
        (i/o-file-protection-error? . g$7335$jXZPP)
        (i/o-file-is-read-only-error? . g$7349$jXZPP)
        (i/o-file-does-not-exist-error? . g$7377$jXZPP)
        (i/o-file-already-exists-error? . g$7363$jXZPP)
        (i/o-error? . g$7259$jXZPP)
        (i/o-error-port . g$7394$jXZPP)
        (i/o-error-filename . g$7321$jXZPP)
        (&i/o-port . g$12357$jXZPP)
        (&i/o-file-does-not-exist . g$12356$jXZPP)
        (&i/o-file-already-exists . g$12355$jXZPP)
        (&i/o-file-is-read-only . g$12354$jXZPP)
        (&i/o-file-protection . g$12353$jXZPP)
        (&i/o-filename . g$12352$jXZPP)
        (&i/o-invalid-position . g$12351$jXZPP)
        (&i/o-write . g$12350$jXZPP)
        (&i/o-read . g$12349$jXZPP)
        (&i/o . g$12348$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12868$jXZPP
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12651$jXZPP)
        (utf32->string . g$12618$jXZPP)
        (utf16->string . g$12617$jXZPP)
        (utf8->string . g$12616$jXZPP)
        (uint-list->bytevector . g$12615$jXZPP)
        (u8-list->bytevector . g$12614$jXZPP)
        (string->utf8 . g$12613$jXZPP)
        (string->utf32 . g$12612$jXZPP)
        (string->utf16 . g$12611$jXZPP)
        (sint-list->bytevector . g$12610$jXZPP)
        (native-endianness . g$6620$jXZPP)
        (bytevector? . g$12609$jXZPP)
        (bytevector=? . g$12608$jXZPP)
        (bytevector-uint-set! . g$12607$jXZPP)
        (bytevector-uint-ref . g$12606$jXZPP)
        (bytevector-u8-set! . g$12605$jXZPP)
        (bytevector-u8-ref . g$12604$jXZPP)
        (bytevector-u64-set! . g$6641$jXZPP)
        (bytevector-u64-ref . g$6637$jXZPP)
        (bytevector-u64-native-set! . g$6643$jXZPP)
        (bytevector-u64-native-ref . g$6639$jXZPP)
        (bytevector-u32-set! . g$6633$jXZPP)
        (bytevector-u32-ref . g$6629$jXZPP)
        (bytevector-u32-native-set! . g$6635$jXZPP)
        (bytevector-u32-native-ref . g$6631$jXZPP)
        (bytevector-u16-set! . g$6625$jXZPP)
        (bytevector-u16-ref . g$6621$jXZPP)
        (bytevector-u16-native-set! . g$6627$jXZPP)
        (bytevector-u16-native-ref . g$6623$jXZPP)
        (bytevector-sint-set! . g$12603$jXZPP)
        (bytevector-sint-ref . g$12602$jXZPP)
        (bytevector-s8-set! . g$12601$jXZPP)
        (bytevector-s8-ref . g$12600$jXZPP)
        (bytevector-s64-set! . g$6642$jXZPP)
        (bytevector-s64-ref . g$6638$jXZPP)
        (bytevector-s64-native-set! . g$6644$jXZPP)
        (bytevector-s64-native-ref . g$6640$jXZPP)
        (bytevector-s32-set! . g$6634$jXZPP)
        (bytevector-s32-ref . g$6630$jXZPP)
        (bytevector-s32-native-set! . g$6636$jXZPP)
        (bytevector-s32-native-ref . g$6632$jXZPP)
        (bytevector-s16-set! . g$6626$jXZPP)
        (bytevector-s16-ref . g$6622$jXZPP)
        (bytevector-s16-native-set! . g$6628$jXZPP)
        (bytevector-s16-native-ref . g$6624$jXZPP)
        (bytevector-length . g$12599$jXZPP)
        (bytevector-ieee-single-set! . g$12598$jXZPP)
        (bytevector-ieee-single-ref . g$12597$jXZPP)
        (bytevector-ieee-single-native-set! . g$6647$jXZPP)
        (bytevector-ieee-single-native-ref . g$6645$jXZPP)
        (bytevector-ieee-double-set! . g$12596$jXZPP)
        (bytevector-ieee-double-ref . g$12595$jXZPP)
        (bytevector-ieee-double-native-set! . g$6648$jXZPP)
        (bytevector-ieee-double-native-ref . g$6646$jXZPP)
        (bytevector-fill! . g$12594$jXZPP)
        (bytevector-copy! . g$12593$jXZPP)
        (bytevector-copy . g$12592$jXZPP)
        (bytevector->uint-list . g$12591$jXZPP)
        (bytevector->u8-list . g$12590$jXZPP)
        (bytevector->sint-list . g$12589$jXZPP)
        (endianness . g$12302$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12869$jXZPP
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12754$jXZPP)
        (string-titlecase . g$12753$jXZPP)
        (string-normalize-nfkd . g$12752$jXZPP)
        (string-normalize-nfkc . g$12751$jXZPP)
        (string-normalize-nfd . g$12750$jXZPP)
        (string-normalize-nfc . g$12749$jXZPP)
        (string-foldcase . g$12748$jXZPP)
        (string-downcase . g$12747$jXZPP)
        (string-ci>? . g$7040$jXZPP)
        (string-ci>=? . g$7042$jXZPP)
        (string-ci=? . g$7038$jXZPP)
        (string-ci<? . g$7039$jXZPP)
        (string-ci<=? . g$7041$jXZPP)
        (char-whitespace? . g$12746$jXZPP)
        (char-upper-case? . g$12745$jXZPP)
        (char-title-case? . g$12744$jXZPP)
        (char-numeric? . g$12743$jXZPP)
        (char-lower-case? . g$12742$jXZPP)
        (char-general-category . g$12741$jXZPP)
        (char-upcase . g$12740$jXZPP)
        (char-titlecase . g$12739$jXZPP)
        (char-foldcase . g$12738$jXZPP)
        (char-downcase . g$12737$jXZPP)
        (char-ci>? . g$7079$jXZPP)
        (char-ci>=? . g$7081$jXZPP)
        (char-ci=? . g$7077$jXZPP)
        (char-ci<? . g$7078$jXZPP)
        (char-ci<=? . g$7080$jXZPP)
        (char-alphabetic? . g$12736$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12870$jXZPP
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12626$jXZPP)
        (raise-continuable . g$12625$jXZPP)
        (raise . g$12624$jXZPP)
        (guard . g$12317$jXZPP)
        (else . g$12306$jXZPP)
        (=> . g$12305$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12871$jXZPP
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7141$jXZPP)
        (bitwise-reverse-bit-field . g$12507$jXZPP)
        (bitwise-length . g$12506$jXZPP)
        (bitwise-if . g$7135$jXZPP)
        (bitwise-first-bit-set . g$12505$jXZPP)
        (bitwise-copy-bit-field . g$7138$jXZPP)
        (bitwise-copy-bit . g$7136$jXZPP)
        (bitwise-bit-set? . g$12504$jXZPP)
        (bitwise-bit-field . g$7137$jXZPP)
        (bitwise-bit-count . g$12503$jXZPP)
        (bitwise-xor . g$12502$jXZPP)
        (bitwise-ior . g$12501$jXZPP)
        (bitwise-and . g$12500$jXZPP)
        (bitwise-not . g$12499$jXZPP)
        (bitwise-arithmetic-shift-right . g$7140$jXZPP)
        (bitwise-arithmetic-shift-left . g$7139$jXZPP)
        (bitwise-arithmetic-shift . g$12498$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12872$jXZPP
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12542$jXZPP)
        (fxxor . g$12541$jXZPP)
        (fxrotate-bit-field . g$7176$jXZPP)
        (fxreverse-bit-field . g$12540$jXZPP)
        (fxpositive? . g$12539$jXZPP)
        (fxodd? . g$12538$jXZPP)
        (fxnot . g$12537$jXZPP)
        (fxnegative? . g$12536$jXZPP)
        (fxmod0 . g$12535$jXZPP)
        (fxmod . g$12534$jXZPP)
        (fxmin . g$12533$jXZPP)
        (fxmax . g$12532$jXZPP)
        (fxlength . g$12531$jXZPP)
        (fxior . g$12530$jXZPP)
        (fxif . g$7170$jXZPP)
        (fxfirst-bit-set . g$12529$jXZPP)
        (fxeven? . g$12528$jXZPP)
        (fxdiv0-and-mod0 . g$12527$jXZPP)
        (fxdiv0 . g$12526$jXZPP)
        (fxdiv-and-mod . g$12525$jXZPP)
        (fxdiv . g$12524$jXZPP)
        (fxcopy-bit-field . g$7173$jXZPP)
        (fxcopy-bit . g$7171$jXZPP)
        (fxbit-set? . g$12523$jXZPP)
        (fxbit-field . g$7172$jXZPP)
        (fxbit-count . g$12522$jXZPP)
        (fxarithmetic-shift-right . g$7175$jXZPP)
        (fxarithmetic-shift-left . g$7174$jXZPP)
        (fxarithmetic-shift . g$12521$jXZPP)
        (fxand . g$12520$jXZPP)
        (fx>? . g$12519$jXZPP)
        (fx>=? . g$12518$jXZPP)
        (fx=? . g$12517$jXZPP)
        (fx<? . g$12516$jXZPP)
        (fx<=? . g$12515$jXZPP)
        (fx-/carry . g$7168$jXZPP)
        (fx- . g$12514$jXZPP)
        (fx+/carry . g$7169$jXZPP)
        (fx+ . g$12513$jXZPP)
        (fx*/carry . g$7167$jXZPP)
        (fx* . g$12512$jXZPP)
        (greatest-fixnum . g$12511$jXZPP)
        (least-fixnum . g$12510$jXZPP)
        (fixnum-width . g$12509$jXZPP)
        (fixnum? . g$12508$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12873$jXZPP
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7244$jXZPP)
        (no-infinities-violation? . g$7230$jXZPP)
        (make-no-nans-violation . g$7243$jXZPP)
        (make-no-infinities-violation . g$7229$jXZPP)
        (real->flonum . g$12588$jXZPP)
        (flzero? . g$12587$jXZPP)
        (fltruncate . g$12586$jXZPP)
        (fltan . g$12585$jXZPP)
        (flsqrt . g$12584$jXZPP)
        (flsin . g$12583$jXZPP)
        (flround . g$12582$jXZPP)
        (flpositive? . g$12581$jXZPP)
        (flonum? . g$12580$jXZPP)
        (flodd? . g$12579$jXZPP)
        (flnumerator . g$12578$jXZPP)
        (flnegative? . g$12577$jXZPP)
        (flnan? . g$12576$jXZPP)
        (flmod0 . g$12575$jXZPP)
        (flmod . g$12574$jXZPP)
        (flmin . g$12573$jXZPP)
        (flmax . g$12572$jXZPP)
        (fllog . g$12571$jXZPP)
        (flinteger? . g$12570$jXZPP)
        (flinfinite? . g$12569$jXZPP)
        (flfloor . g$12568$jXZPP)
        (flfinite? . g$12567$jXZPP)
        (flexpt . g$12566$jXZPP)
        (flexp . g$12565$jXZPP)
        (fleven? . g$12564$jXZPP)
        (fldiv0-and-mod0 . g$12563$jXZPP)
        (fldiv0 . g$12562$jXZPP)
        (fldiv-and-mod . g$12561$jXZPP)
        (fldiv . g$12560$jXZPP)
        (fldenominator . g$12559$jXZPP)
        (flcos . g$12558$jXZPP)
        (flceiling . g$12557$jXZPP)
        (flatan . g$12556$jXZPP)
        (flasin . g$12555$jXZPP)
        (flacos . g$12554$jXZPP)
        (flabs . g$12553$jXZPP)
        (fl>? . g$12552$jXZPP)
        (fl>=? . g$12551$jXZPP)
        (fl=? . g$12550$jXZPP)
        (fl<? . g$12549$jXZPP)
        (fl<=? . g$12548$jXZPP)
        (fl/ . g$12547$jXZPP)
        (fl- . g$12546$jXZPP)
        (fl+ . g$12545$jXZPP)
        (fl* . g$12544$jXZPP)
        (fixnum->flonum . g$12543$jXZPP)
        (&no-nans . g$12361$jXZPP)
        (&no-infinities . g$12360$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12874$jXZPP
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12716$jXZPP)
        (string-ci-hash . g$12715$jXZPP)
        (string-hash . g$12714$jXZPP)
        (equal-hash . g$12713$jXZPP)
        (hashtable-equivalence-function . g$12712$jXZPP)
        (make-hashtable . g$12711$jXZPP)
        (hashtable-hash-function . g$12710$jXZPP)
        (make-eqv-hashtable . g$6582$jXZPP)
        (make-eq-hashtable . g$6581$jXZPP)
        (hashtable? . g$12709$jXZPP)
        (hashtable-update! . g$6588$jXZPP)
        (hashtable-size . g$6583$jXZPP)
        (hashtable-set! . g$6585$jXZPP)
        (hashtable-ref . g$6584$jXZPP)
        (hashtable-mutable? . g$12708$jXZPP)
        (hashtable-keys . g$12707$jXZPP)
        (hashtable-entries . g$12706$jXZPP)
        (hashtable-delete! . g$6586$jXZPP)
        (hashtable-copy . g$12705$jXZPP)
        (hashtable-contains? . g$6587$jXZPP)
        (hashtable-clear! . g$6589$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12875$jXZPP
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12697$jXZPP)
        (eof-object . g$12696$jXZPP)
        (current-error-port . g$12695$jXZPP)
        (current-output-port . g$12694$jXZPP)
        (current-input-port . g$12693$jXZPP)
        (output-port? . g$12692$jXZPP)
        (input-port? . g$12691$jXZPP)
        (utf-8-codec . g$12690$jXZPP)
        (utf-16-codec . g$12689$jXZPP)
        (transcoder-error-handling-mode . g$12688$jXZPP)
        (transcoder-eol-style . g$12687$jXZPP)
        (transcoder-codec . g$12686$jXZPP)
        (transcoded-port . g$12685$jXZPP)
        (textual-port? . g$12684$jXZPP)
        (string->bytevector . g$12683$jXZPP)
        (standard-output-port . g$12682$jXZPP)
        (standard-input-port . g$12681$jXZPP)
        (standard-error-port . g$12680$jXZPP)
        (set-port-position! . g$12679$jXZPP)
        (put-u8 . g$12678$jXZPP)
        (put-string . g$12677$jXZPP)
        (put-datum . g$12676$jXZPP)
        (put-char . g$12675$jXZPP)
        (put-bytevector . g$12674$jXZPP)
        (port? . g$7431$jXZPP)
        (port-transcoder . g$12673$jXZPP)
        (port-position . g$12672$jXZPP)
        (port-has-set-port-position!? . g$12671$jXZPP)
        (port-has-port-position? . g$12670$jXZPP)
        (port-eof? . g$12669$jXZPP)
        (output-port-buffer-mode . g$12668$jXZPP)
        (open-string-output-port . g$7430$jXZPP)
        (open-string-input-port . g$12667$jXZPP)
        (open-file-output-port . g$12666$jXZPP)
        (open-file-input/output-port . g$12665$jXZPP)
        (open-file-input-port . g$12664$jXZPP)
        (open-bytevector-output-port . g$12663$jXZPP)
        (open-bytevector-input-port . g$12662$jXZPP)
        (native-transcoder . g$12661$jXZPP)
        (native-eol-style . g$12660$jXZPP)
        (make-transcoder . g$12659$jXZPP)
        (latin-1-codec . g$12658$jXZPP)
        (make-i/o-write-error . g$7286$jXZPP)
        (make-i/o-read-error . g$7272$jXZPP)
        (make-i/o-port-error . g$7391$jXZPP)
        (make-i/o-invalid-position-error . g$7301$jXZPP)
        (make-i/o-filename-error . g$7318$jXZPP)
        (make-i/o-file-protection-error . g$7334$jXZPP)
        (make-i/o-file-is-read-only-error . g$7348$jXZPP)
        (make-i/o-file-does-not-exist-error . g$7376$jXZPP)
        (make-i/o-file-already-exists-error . g$7362$jXZPP)
        (make-i/o-error . g$7258$jXZPP)
        (make-i/o-encoding-error . g$7422$jXZPP)
        (make-i/o-decoding-error . g$7407$jXZPP)
        (make-custom-textual-output-port . g$12657$jXZPP)
        (make-custom-textual-input/output-port . g$12656$jXZPP)
        (make-custom-textual-input-port . g$12655$jXZPP)
        (make-custom-binary-output-port . g$12654$jXZPP)
        (make-custom-binary-input/output-port . g$12653$jXZPP)
        (make-custom-binary-input-port . g$12652$jXZPP)
        (lookahead-u8 . g$12650$jXZPP)
        (lookahead-char . g$12649$jXZPP)
        (i/o-write-error? . g$7287$jXZPP)
        (i/o-read-error? . g$7273$jXZPP)
        (i/o-port-error? . g$7393$jXZPP)
        (i/o-invalid-position-error? . g$7303$jXZPP)
        (i/o-error-position . g$7304$jXZPP)
        (i/o-filename-error? . g$7320$jXZPP)
        (i/o-file-protection-error? . g$7335$jXZPP)
        (i/o-file-is-read-only-error? . g$7349$jXZPP)
        (i/o-file-does-not-exist-error? . g$7377$jXZPP)
        (i/o-file-already-exists-error? . g$7363$jXZPP)
        (i/o-error? . g$7259$jXZPP)
        (i/o-error-port . g$7394$jXZPP)
        (i/o-error-filename . g$7321$jXZPP)
        (i/o-encoding-error? . g$7424$jXZPP)
        (i/o-encoding-error-char . g$7425$jXZPP)
        (i/o-decoding-error? . g$7408$jXZPP)
        (get-u8 . g$12648$jXZPP)
        (get-string-n! . g$12647$jXZPP)
        (get-string-n . g$12646$jXZPP)
        (get-string-all . g$12645$jXZPP)
        (get-line . g$12644$jXZPP)
        (get-datum . g$12643$jXZPP)
        (get-char . g$12642$jXZPP)
        (get-bytevector-some . g$12641$jXZPP)
        (get-bytevector-n! . g$12640$jXZPP)
        (get-bytevector-n . g$12639$jXZPP)
        (get-bytevector-all . g$12638$jXZPP)
        (flush-output-port . g$12637$jXZPP)
        (close-port . g$12636$jXZPP)
        (call-with-string-output-port . g$7432$jXZPP)
        (call-with-port . g$7433$jXZPP)
        (call-with-bytevector-output-port . g$12635$jXZPP)
        (bytevector->string . g$12634$jXZPP)
        (buffer-mode? . g$12633$jXZPP)
        (binary-port? . g$12632$jXZPP)
        (&i/o-encoding . g$12359$jXZPP)
        (&i/o-decoding . g$12358$jXZPP)
        (&i/o-port . g$12357$jXZPP)
        (&i/o-file-does-not-exist . g$12356$jXZPP)
        (&i/o-file-already-exists . g$12355$jXZPP)
        (&i/o-file-is-read-only . g$12354$jXZPP)
        (&i/o-file-protection . g$12353$jXZPP)
        (&i/o-filename . g$12352$jXZPP)
        (&i/o-invalid-position . g$12351$jXZPP)
        (&i/o-write . g$12350$jXZPP)
        (&i/o-read . g$12349$jXZPP)
        (&i/o . g$12348$jXZPP)
        (error-handling-mode . g$12321$jXZPP)
        (file-options . g$12320$jXZPP)
        (buffer-mode . g$12319$jXZPP)
        (eol-style . g$12318$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12876$jXZPP
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7530$jXZPP)
        (enum-set=? . g$7537$jXZPP)
        (enum-set-universe . g$7531$jXZPP)
        (enum-set-union . g$7538$jXZPP)
        (enum-set-subset? . g$7536$jXZPP)
        (enum-set-projection . g$7542$jXZPP)
        (enum-set-member? . g$7535$jXZPP)
        (enum-set-intersection . g$7539$jXZPP)
        (enum-set-indexer . g$7532$jXZPP)
        (enum-set-difference . g$7540$jXZPP)
        (enum-set-constructor . g$7533$jXZPP)
        (enum-set-complement . g$7541$jXZPP)
        (enum-set->list . g$7534$jXZPP)
        (define-enumeration . g$12332$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12877$jXZPP
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6868$jXZPP)
        (warning? . g$6779$jXZPP)
        (violation? . g$6821$jXZPP)
        (undefined-violation? . g$6945$jXZPP)
        (syntax-violation? . g$6929$jXZPP)
        (syntax-violation-subform . g$6931$jXZPP)
        (syntax-violation-form . g$6930$jXZPP)
        (syntax-violation . g$9235$jXZPP)
        (simple-conditions . g$12623$jXZPP)
        (serious-condition? . g$6793$jXZPP)
        (non-continuable-violation? . g$6883$jXZPP)
        (message-condition? . g$6764$jXZPP)
        (make-who-condition . g$6866$jXZPP)
        (make-warning . g$6778$jXZPP)
        (make-violation . g$6820$jXZPP)
        (make-undefined-violation . g$6944$jXZPP)
        (make-syntax-violation . g$6926$jXZPP)
        (make-serious-condition . g$6792$jXZPP)
        (make-non-continuable-violation . g$6882$jXZPP)
        (make-message-condition . g$6762$jXZPP)
        (make-lexical-violation . g$6910$jXZPP)
        (make-irritants-condition . g$6849$jXZPP)
        (make-implementation-restriction-violation . g$6896$jXZPP)
        (make-error . g$6806$jXZPP)
        (make-assertion-violation . g$6834$jXZPP)
        (lexical-violation? . g$6911$jXZPP)
        (irritants-condition? . g$6851$jXZPP)
        (implementation-restriction-violation? . g$6897$jXZPP)
        (error? . g$6807$jXZPP)
        (condition-who . g$6869$jXZPP)
        (condition-predicate . g$12622$jXZPP)
        (condition-message . g$6765$jXZPP)
        (condition-irritants . g$6852$jXZPP)
        (condition-accessor . g$12621$jXZPP)
        (condition . g$12620$jXZPP)
        (assertion-violation? . g$6835$jXZPP)
        (condition? . g$12619$jXZPP)
        (&non-continuable . g$12347$jXZPP)
        (&undefined . g$12346$jXZPP)
        (&syntax . g$12345$jXZPP)
        (&lexical . g$12344$jXZPP)
        (&implementation-restriction . g$12343$jXZPP)
        (&who . g$12342$jXZPP)
        (&irritants . g$12341$jXZPP)
        (&assertion . g$12340$jXZPP)
        (&violation . g$12339$jXZPP)
        (&error . g$12338$jXZPP)
        (&serious . g$12337$jXZPP)
        (&warning . g$12336$jXZPP)
        (&message . g$12335$jXZPP)
        (&condition . g$12334$jXZPP)
        (define-condition-type . g$12333$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12878$jXZPP
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12728$jXZPP)
        (record-type-uid . g$12727$jXZPP)
        (record-type-sealed? . g$12726$jXZPP)
        (record-type-parent . g$12725$jXZPP)
        (record-type-opaque? . g$12724$jXZPP)
        (record-type-name . g$12723$jXZPP)
        (record-type-generative? . g$12722$jXZPP)
        (record-type-field-names . g$12721$jXZPP)
        (record-rtd . g$12720$jXZPP)
        (record-field-mutable? . g$12719$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12879$jXZPP
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12735$jXZPP)
        (record-predicate . g$12734$jXZPP)
        (record-mutator . g$12733$jXZPP)
        (record-constructor . g$12732$jXZPP)
        (record-accessor . g$12731$jXZPP)
        (make-record-type-descriptor . g$12730$jXZPP)
        (make-record-constructor-descriptor . g$12729$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12880$jXZPP
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12331$jXZPP)
        (parent-rtd . g$12330$jXZPP)
        (nongenerative . g$12329$jXZPP)
        (opaque . g$12328$jXZPP)
        (sealed . g$12327$jXZPP)
        (protocol . g$12326$jXZPP)
        (parent . g$12325$jXZPP)
        (immutable . g$12324$jXZPP)
        (mutable . g$12323$jXZPP)
        (fields . g$12322$jXZPP)
        (record-constructor-descriptor . g$12283$jXZPP)
        (record-type-descriptor . g$12282$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7590$jXZPP
      'g$12881$jXZPP
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9107$jXZPP)
        (&no-nans-rcd . g$12845$jXZPP)
        (&no-nans-rtd . g$12844$jXZPP)
        (&no-infinities-rcd . g$12843$jXZPP)
        (&no-infinities-rtd . g$12842$jXZPP)
        (&i/o-encoding-rcd . g$12841$jXZPP)
        (&i/o-encoding-rtd . g$12840$jXZPP)
        (&i/o-decoding-rcd . g$12839$jXZPP)
        (&i/o-decoding-rtd . g$12838$jXZPP)
        (&i/o-port-rcd . g$12837$jXZPP)
        (&i/o-port-rtd . g$12836$jXZPP)
        (&i/o-file-does-not-exist-rcd . g$12835$jXZPP)
        (&i/o-file-does-not-exist-rtd . g$12834$jXZPP)
        (&i/o-file-already-exists-rcd . g$12833$jXZPP)
        (&i/o-file-already-exists-rtd . g$12832$jXZPP)
        (&i/o-file-is-read-only-rcd . g$12831$jXZPP)
        (&i/o-file-is-read-only-rtd . g$12830$jXZPP)
        (&i/o-file-protection-rcd . g$12829$jXZPP)
        (&i/o-file-protection-rtd . g$12828$jXZPP)
        (&i/o-filename-rcd . g$12827$jXZPP)
        (&i/o-filename-rtd . g$12826$jXZPP)
        (&i/o-invalid-position-rcd . g$12825$jXZPP)
        (&i/o-invalid-position-rtd . g$12824$jXZPP)
        (&i/o-write-rcd . g$12823$jXZPP)
        (&i/o-write-rtd . g$12822$jXZPP)
        (&i/o-read-rcd . g$12821$jXZPP)
        (&i/o-read-rtd . g$12820$jXZPP)
        (&i/o-rcd . g$12819$jXZPP)
        (&i/o-rtd . g$12818$jXZPP)
        (&undefined-rcd . g$12817$jXZPP)
        (&undefined-rtd . g$12816$jXZPP)
        (&syntax-rcd . g$12815$jXZPP)
        (&syntax-rtd . g$12814$jXZPP)
        (&lexical-rcd . g$12813$jXZPP)
        (&lexical-rtd . g$12812$jXZPP)
        (&implementation-restriction-rcd . g$12811$jXZPP)
        (&implementation-restriction-rtd . g$12810$jXZPP)
        (&non-continuable-rcd . g$12809$jXZPP)
        (&non-continuable-rtd . g$12808$jXZPP)
        (&who-rcd . g$12807$jXZPP)
        (&who-rtd . g$12806$jXZPP)
        (&irritants-rcd . g$12805$jXZPP)
        (&irritants-rtd . g$12804$jXZPP)
        (&assertion-rcd . g$12803$jXZPP)
        (&assertion-rtd . g$12802$jXZPP)
        (&violation-rcd . g$12801$jXZPP)
        (&violation-rtd . g$12800$jXZPP)
        (&error-rcd . g$12799$jXZPP)
        (&error-rtd . g$12798$jXZPP)
        (&serious-rcd . g$12797$jXZPP)
        (&serious-rtd . g$12796$jXZPP)
        (&warning-rcd . g$12795$jXZPP)
        (&warning-rtd . g$12794$jXZPP)
        (&message-rcd . g$12793$jXZPP)
        (&message-rtd . g$12792$jXZPP)
        (&condition-rcd . g$12791$jXZPP)
        (&condition-rtd . g$12790$jXZPP)
        (library-letrec* . g$12789$jXZPP)
        (annotation-stripped . g$12788$jXZPP)
        (annotation-source . g$12787$jXZPP)
        (annotation-expression . g$12786$jXZPP)
        (annotation? . g$12785$jXZPP)
        (read-annotated . g$12784$jXZPP)
        (tanh . g$12783$jXZPP)
        (cosh . g$12782$jXZPP)
        (sinh . g$12781$jXZPP)
        (make-guid . g$12780$jXZPP)
        (unspecified? . g$12779$jXZPP)
        (make-list . g$5872$jXZPP)
        (last-pair . g$5871$jXZPP)
        (load-r5rs . g$12778$jXZPP)
        (license . g$12777$jXZPP)
        (stacktrace . g$12776$jXZPP)
        (ironscheme-build . g$12223$jXZPP)
        (define-clr-class-internal . g$12775$jXZPP)
        (clr-field-set!-internal . g$12774$jXZPP)
        (clr-field-get-internal . g$12773$jXZPP)
        (clr-cast-internal . g$12772$jXZPP)
        (clr-call-internal . g$12771$jXZPP)
        (clr-new-internal . g$12770$jXZPP)
        (clr-new-array-internal . g$12769$jXZPP)
        (clr-is-internal . g$12768$jXZPP)
        (clr-reference-internal . g$12767$jXZPP)
        (clr-using-internal . g$12766$jXZPP)
        (syntax-error . g$9232$jXZPP)
        (syntax-dispatch . g$9102$jXZPP)
        (compile-core . g$12765$jXZPP)
        (eval-core . g$12764$jXZPP)
        (set-symbol-value! . g$12763$jXZPP)
        (symbol-value . g$12762$jXZPP)
        (symbol-bound? . g$12761$jXZPP)
        (ungensym . g$12760$jXZPP)
        (gensym . g$12759$jXZPP)
        (void . g$12758$jXZPP)
        (load-serialized-library . g$12757$jXZPP)
        (serialize-library . g$12756$jXZPP)
        (compile-system-libraries . g$12225$jXZPP)
        (compile->closure . g$12227$jXZPP)
        (compile . g$12226$jXZPP)
        (load . g$12222$jXZPP)
        (interaction-environment . g$9242$jXZPP)
        (char-ready? . g$12755$jXZPP)
        (string-upcase . g$12754$jXZPP)
        (string-titlecase . g$12753$jXZPP)
        (string-normalize-nfkd . g$12752$jXZPP)
        (string-normalize-nfkc . g$12751$jXZPP)
        (string-normalize-nfd . g$12750$jXZPP)
        (string-normalize-nfc . g$12749$jXZPP)
        (string-foldcase . g$12748$jXZPP)
        (string-downcase . g$12747$jXZPP)
        (string-ci>? . g$7040$jXZPP)
        (string-ci>=? . g$7042$jXZPP)
        (string-ci=? . g$7038$jXZPP)
        (string-ci<? . g$7039$jXZPP)
        (string-ci<=? . g$7041$jXZPP)
        (char-whitespace? . g$12746$jXZPP)
        (char-upper-case? . g$12745$jXZPP)
        (char-title-case? . g$12744$jXZPP)
        (char-numeric? . g$12743$jXZPP)
        (char-lower-case? . g$12742$jXZPP)
        (char-general-category . g$12741$jXZPP)
        (char-upcase . g$12740$jXZPP)
        (char-titlecase . g$12739$jXZPP)
        (char-foldcase . g$12738$jXZPP)
        (char-downcase . g$12737$jXZPP)
        (char-ci>? . g$7079$jXZPP)
        (char-ci>=? . g$7081$jXZPP)
        (char-ci=? . g$7077$jXZPP)
        (char-ci<? . g$7078$jXZPP)
        (char-ci<=? . g$7080$jXZPP)
        (char-alphabetic? . g$12736$jXZPP)
        (variable-transformer-procedure . g$8839$jXZPP)
        (variable-transformer? . g$8838$jXZPP)
        (make-variable-transformer . g$8837$jXZPP)
        (identifier? . g$9236$jXZPP)
        (generate-temporaries . g$9225$jXZPP)
        (free-identifier=? . g$9226$jXZPP)
        (syntax->datum . g$9238$jXZPP)
        (datum->syntax . g$9237$jXZPP)
        (bound-identifier=? . g$9227$jXZPP)
        (record-type-descriptor? . g$12735$jXZPP)
        (record-predicate . g$12734$jXZPP)
        (record-mutator . g$12733$jXZPP)
        (record-constructor . g$12732$jXZPP)
        (record-accessor . g$12731$jXZPP)
        (make-record-type-descriptor . g$12730$jXZPP)
        (make-record-constructor-descriptor . g$12729$jXZPP)
        (record? . g$12728$jXZPP)
        (record-type-uid . g$12727$jXZPP)
        (record-type-sealed? . g$12726$jXZPP)
        (record-type-parent . g$12725$jXZPP)
        (record-type-opaque? . g$12724$jXZPP)
        (record-type-name . g$12723$jXZPP)
        (record-type-generative? . g$12722$jXZPP)
        (record-type-field-names . g$12721$jXZPP)
        (record-rtd . g$12720$jXZPP)
        (record-field-mutable? . g$12719$jXZPP)
        (delete-file . g$6614$jXZPP)
        (file-exists? . g$6613$jXZPP)
        (vector-sort! . g$12718$jXZPP)
        (vector-sort . g$12717$jXZPP)
        (list-sort . g$6980$jXZPP)
        (symbol-hash . g$12716$jXZPP)
        (string-ci-hash . g$12715$jXZPP)
        (string-hash . g$12714$jXZPP)
        (equal-hash . g$12713$jXZPP)
        (hashtable-equivalence-function . g$12712$jXZPP)
        (make-hashtable . g$12711$jXZPP)
        (hashtable-hash-function . g$12710$jXZPP)
        (make-eqv-hashtable . g$6582$jXZPP)
        (make-eq-hashtable . g$6581$jXZPP)
        (hashtable? . g$12709$jXZPP)
        (hashtable-update! . g$6588$jXZPP)
        (hashtable-size . g$6583$jXZPP)
        (hashtable-set! . g$6585$jXZPP)
        (hashtable-ref . g$6584$jXZPP)
        (hashtable-mutable? . g$12708$jXZPP)
        (hashtable-keys . g$12707$jXZPP)
        (hashtable-entries . g$12706$jXZPP)
        (hashtable-delete! . g$6586$jXZPP)
        (hashtable-copy . g$12705$jXZPP)
        (hashtable-contains? . g$6587$jXZPP)
        (hashtable-clear! . g$6589$jXZPP)
        (call-with-output-file . g$7465$jXZPP)
        (call-with-input-file . g$7464$jXZPP)
        (write-char . g$7446$jXZPP)
        (write . g$12704$jXZPP)
        (with-output-to-file . g$7463$jXZPP)
        (with-input-from-file . g$7462$jXZPP)
        (read-char . g$7445$jXZPP)
        (read . g$12703$jXZPP)
        (peek-char . g$7444$jXZPP)
        (open-output-file . g$12702$jXZPP)
        (open-input-file . g$12701$jXZPP)
        (newline . g$7466$jXZPP)
        (display . g$12700$jXZPP)
        (close-output-port . g$12699$jXZPP)
        (close-input-port . g$12698$jXZPP)
        (eof-object? . g$12697$jXZPP)
        (eof-object . g$12696$jXZPP)
        (current-error-port . g$12695$jXZPP)
        (current-output-port . g$12694$jXZPP)
        (current-input-port . g$12693$jXZPP)
        (output-port? . g$12692$jXZPP)
        (input-port? . g$12691$jXZPP)
        (utf-8-codec . g$12690$jXZPP)
        (utf-16-codec . g$12689$jXZPP)
        (transcoder-error-handling-mode . g$12688$jXZPP)
        (transcoder-eol-style . g$12687$jXZPP)
        (transcoder-codec . g$12686$jXZPP)
        (transcoded-port . g$12685$jXZPP)
        (textual-port? . g$12684$jXZPP)
        (string->bytevector . g$12683$jXZPP)
        (standard-output-port . g$12682$jXZPP)
        (standard-input-port . g$12681$jXZPP)
        (standard-error-port . g$12680$jXZPP)
        (set-port-position! . g$12679$jXZPP)
        (put-u8 . g$12678$jXZPP)
        (put-string . g$12677$jXZPP)
        (put-datum . g$12676$jXZPP)
        (put-char . g$12675$jXZPP)
        (put-bytevector . g$12674$jXZPP)
        (port? . g$7431$jXZPP)
        (port-transcoder . g$12673$jXZPP)
        (port-position . g$12672$jXZPP)
        (port-has-set-port-position!? . g$12671$jXZPP)
        (port-has-port-position? . g$12670$jXZPP)
        (port-eof? . g$12669$jXZPP)
        (output-port-buffer-mode . g$12668$jXZPP)
        (open-string-output-port . g$7430$jXZPP)
        (open-string-input-port . g$12667$jXZPP)
        (open-file-output-port . g$12666$jXZPP)
        (open-file-input/output-port . g$12665$jXZPP)
        (open-file-input-port . g$12664$jXZPP)
        (open-bytevector-output-port . g$12663$jXZPP)
        (open-bytevector-input-port . g$12662$jXZPP)
        (native-transcoder . g$12661$jXZPP)
        (native-eol-style . g$12660$jXZPP)
        (make-transcoder . g$12659$jXZPP)
        (latin-1-codec . g$12658$jXZPP)
        (make-i/o-write-error . g$7286$jXZPP)
        (make-i/o-read-error . g$7272$jXZPP)
        (make-i/o-port-error . g$7391$jXZPP)
        (make-i/o-invalid-position-error . g$7301$jXZPP)
        (make-i/o-filename-error . g$7318$jXZPP)
        (make-i/o-file-protection-error . g$7334$jXZPP)
        (make-i/o-file-is-read-only-error . g$7348$jXZPP)
        (make-i/o-file-does-not-exist-error . g$7376$jXZPP)
        (make-i/o-file-already-exists-error . g$7362$jXZPP)
        (make-i/o-error . g$7258$jXZPP)
        (make-i/o-encoding-error . g$7422$jXZPP)
        (make-i/o-decoding-error . g$7407$jXZPP)
        (make-custom-textual-output-port . g$12657$jXZPP)
        (make-custom-textual-input/output-port . g$12656$jXZPP)
        (make-custom-textual-input-port . g$12655$jXZPP)
        (make-custom-binary-output-port . g$12654$jXZPP)
        (make-custom-binary-input/output-port . g$12653$jXZPP)
        (make-custom-binary-input-port . g$12652$jXZPP)
        (make-bytevector . g$12651$jXZPP)
        (lookahead-u8 . g$12650$jXZPP)
        (lookahead-char . g$12649$jXZPP)
        (i/o-write-error? . g$7287$jXZPP)
        (i/o-read-error? . g$7273$jXZPP)
        (i/o-port-error? . g$7393$jXZPP)
        (i/o-invalid-position-error? . g$7303$jXZPP)
        (i/o-error-position . g$7304$jXZPP)
        (i/o-filename-error? . g$7320$jXZPP)
        (i/o-file-protection-error? . g$7335$jXZPP)
        (i/o-file-is-read-only-error? . g$7349$jXZPP)
        (i/o-file-does-not-exist-error? . g$7377$jXZPP)
        (i/o-file-already-exists-error? . g$7363$jXZPP)
        (i/o-error? . g$7259$jXZPP)
        (i/o-error-port . g$7394$jXZPP)
        (i/o-error-filename . g$7321$jXZPP)
        (i/o-encoding-error? . g$7424$jXZPP)
        (i/o-encoding-error-char . g$7425$jXZPP)
        (i/o-decoding-error? . g$7408$jXZPP)
        (get-u8 . g$12648$jXZPP)
        (get-string-n! . g$12647$jXZPP)
        (get-string-n . g$12646$jXZPP)
        (get-string-all . g$12645$jXZPP)
        (get-line . g$12644$jXZPP)
        (get-datum . g$12643$jXZPP)
        (get-char . g$12642$jXZPP)
        (get-bytevector-some . g$12641$jXZPP)
        (get-bytevector-n! . g$12640$jXZPP)
        (get-bytevector-n . g$12639$jXZPP)
        (get-bytevector-all . g$12638$jXZPP)
        (flush-output-port . g$12637$jXZPP)
        (close-port . g$12636$jXZPP)
        (call-with-string-output-port . g$7432$jXZPP)
        (call-with-port . g$7433$jXZPP)
        (call-with-bytevector-output-port . g$12635$jXZPP)
        (bytevector->string . g$12634$jXZPP)
        (buffer-mode? . g$12633$jXZPP)
        (binary-port? . g$12632$jXZPP)
        (scheme-report-environment . g$9215$jXZPP)
        (quotient . g$6959$jXZPP)
        (null-environment . g$9214$jXZPP)
        (remainder . g$6960$jXZPP)
        (modulo . g$6961$jXZPP)
        (inexact->exact . g$6956$jXZPP)
        (force . g$6963$jXZPP)
        (exact->inexact . g$6957$jXZPP)
        (exit . g$12631$jXZPP)
        (command-line . g$12219$jXZPP)
        (string-fill! . g$12630$jXZPP)
        (string-set! . g$12629$jXZPP)
        (set-cdr! . g$12628$jXZPP)
        (set-car! . g$12627$jXZPP)
        (remove . g$5894$jXZPP)
        (remv . g$5895$jXZPP)
        (remp . g$5875$jXZPP)
        (remq . g$5896$jXZPP)
        (partition . g$5874$jXZPP)
        (memv . g$5882$jXZPP)
        (memq . g$5881$jXZPP)
        (memp . g$5884$jXZPP)
        (member . g$5883$jXZPP)
        (exists . g$5888$jXZPP)
        (for-all . g$5887$jXZPP)
        (fold-right . g$5893$jXZPP)
        (fold-left . g$5892$jXZPP)
        (find . g$5873$jXZPP)
        (filter . g$5876$jXZPP)
        (cons* . g$5891$jXZPP)
        (assv . g$5878$jXZPP)
        (assq . g$5877$jXZPP)
        (assp . g$5880$jXZPP)
        (assoc . g$5879$jXZPP)
        (with-exception-handler . g$12626$jXZPP)
        (raise-continuable . g$12625$jXZPP)
        (raise . g$12624$jXZPP)
        (eval . g$9217$jXZPP)
        (environment . g$9213$jXZPP)
        (make-enumeration . g$7530$jXZPP)
        (enum-set=? . g$7537$jXZPP)
        (enum-set-universe . g$7531$jXZPP)
        (enum-set-union . g$7538$jXZPP)
        (enum-set-subset? . g$7536$jXZPP)
        (enum-set-projection . g$7542$jXZPP)
        (enum-set-member? . g$7535$jXZPP)
        (enum-set-intersection . g$7539$jXZPP)
        (enum-set-indexer . g$7532$jXZPP)
        (enum-set-difference . g$7540$jXZPP)
        (enum-set-constructor . g$7533$jXZPP)
        (enum-set-complement . g$7541$jXZPP)
        (enum-set->list . g$7534$jXZPP)
        (who-condition? . g$6868$jXZPP)
        (warning? . g$6779$jXZPP)
        (violation? . g$6821$jXZPP)
        (undefined-violation? . g$6945$jXZPP)
        (syntax-violation? . g$6929$jXZPP)
        (syntax-violation-subform . g$6931$jXZPP)
        (syntax-violation-form . g$6930$jXZPP)
        (syntax-violation . g$9235$jXZPP)
        (simple-conditions . g$12623$jXZPP)
        (serious-condition? . g$6793$jXZPP)
        (non-continuable-violation? . g$6883$jXZPP)
        (message-condition? . g$6764$jXZPP)
        (make-who-condition . g$6866$jXZPP)
        (make-warning . g$6778$jXZPP)
        (make-violation . g$6820$jXZPP)
        (make-undefined-violation . g$6944$jXZPP)
        (make-syntax-violation . g$6926$jXZPP)
        (make-serious-condition . g$6792$jXZPP)
        (make-non-continuable-violation . g$6882$jXZPP)
        (make-message-condition . g$6762$jXZPP)
        (make-lexical-violation . g$6910$jXZPP)
        (make-irritants-condition . g$6849$jXZPP)
        (make-implementation-restriction-violation . g$6896$jXZPP)
        (make-error . g$6806$jXZPP)
        (make-assertion-violation . g$6834$jXZPP)
        (lexical-violation? . g$6911$jXZPP)
        (irritants-condition? . g$6851$jXZPP)
        (implementation-restriction-violation? . g$6897$jXZPP)
        (error? . g$6807$jXZPP)
        (condition-who . g$6869$jXZPP)
        (condition-predicate . g$12622$jXZPP)
        (condition-message . g$6765$jXZPP)
        (condition-irritants . g$6852$jXZPP)
        (condition-accessor . g$12621$jXZPP)
        (condition . g$12620$jXZPP)
        (assertion-violation? . g$6835$jXZPP)
        (condition? . g$12619$jXZPP)
        (utf32->string . g$12618$jXZPP)
        (utf16->string . g$12617$jXZPP)
        (utf8->string . g$12616$jXZPP)
        (uint-list->bytevector . g$12615$jXZPP)
        (u8-list->bytevector . g$12614$jXZPP)
        (string->utf8 . g$12613$jXZPP)
        (string->utf32 . g$12612$jXZPP)
        (string->utf16 . g$12611$jXZPP)
        (sint-list->bytevector . g$12610$jXZPP)
        (native-endianness . g$6620$jXZPP)
        (bytevector? . g$12609$jXZPP)
        (bytevector=? . g$12608$jXZPP)
        (bytevector-uint-set! . g$12607$jXZPP)
        (bytevector-uint-ref . g$12606$jXZPP)
        (bytevector-u8-set! . g$12605$jXZPP)
        (bytevector-u8-ref . g$12604$jXZPP)
        (bytevector-u64-set! . g$6641$jXZPP)
        (bytevector-u64-ref . g$6637$jXZPP)
        (bytevector-u64-native-set! . g$6643$jXZPP)
        (bytevector-u64-native-ref . g$6639$jXZPP)
        (bytevector-u32-set! . g$6633$jXZPP)
        (bytevector-u32-ref . g$6629$jXZPP)
        (bytevector-u32-native-set! . g$6635$jXZPP)
        (bytevector-u32-native-ref . g$6631$jXZPP)
        (bytevector-u16-set! . g$6625$jXZPP)
        (bytevector-u16-ref . g$6621$jXZPP)
        (bytevector-u16-native-set! . g$6627$jXZPP)
        (bytevector-u16-native-ref . g$6623$jXZPP)
        (bytevector-sint-set! . g$12603$jXZPP)
        (bytevector-sint-ref . g$12602$jXZPP)
        (bytevector-s8-set! . g$12601$jXZPP)
        (bytevector-s8-ref . g$12600$jXZPP)
        (bytevector-s64-set! . g$6642$jXZPP)
        (bytevector-s64-ref . g$6638$jXZPP)
        (bytevector-s64-native-set! . g$6644$jXZPP)
        (bytevector-s64-native-ref . g$6640$jXZPP)
        (bytevector-s32-set! . g$6634$jXZPP)
        (bytevector-s32-ref . g$6630$jXZPP)
        (bytevector-s32-native-set! . g$6636$jXZPP)
        (bytevector-s32-native-ref . g$6632$jXZPP)
        (bytevector-s16-set! . g$6626$jXZPP)
        (bytevector-s16-ref . g$6622$jXZPP)
        (bytevector-s16-native-set! . g$6628$jXZPP)
        (bytevector-s16-native-ref . g$6624$jXZPP)
        (bytevector-length . g$12599$jXZPP)
        (bytevector-ieee-single-set! . g$12598$jXZPP)
        (bytevector-ieee-single-ref . g$12597$jXZPP)
        (bytevector-ieee-single-native-set! . g$6647$jXZPP)
        (bytevector-ieee-single-native-ref . g$6645$jXZPP)
        (bytevector-ieee-double-set! . g$12596$jXZPP)
        (bytevector-ieee-double-ref . g$12595$jXZPP)
        (bytevector-ieee-double-native-set! . g$6648$jXZPP)
        (bytevector-ieee-double-native-ref . g$6646$jXZPP)
        (bytevector-fill! . g$12594$jXZPP)
        (bytevector-copy! . g$12593$jXZPP)
        (bytevector-copy . g$12592$jXZPP)
        (bytevector->uint-list . g$12591$jXZPP)
        (bytevector->u8-list . g$12590$jXZPP)
        (bytevector->sint-list . g$12589$jXZPP)
        (no-nans-violation? . g$7244$jXZPP)
        (no-infinities-violation? . g$7230$jXZPP)
        (make-no-nans-violation . g$7243$jXZPP)
        (make-no-infinities-violation . g$7229$jXZPP)
        (real->flonum . g$12588$jXZPP)
        (flzero? . g$12587$jXZPP)
        (fltruncate . g$12586$jXZPP)
        (fltan . g$12585$jXZPP)
        (flsqrt . g$12584$jXZPP)
        (flsin . g$12583$jXZPP)
        (flround . g$12582$jXZPP)
        (flpositive? . g$12581$jXZPP)
        (flonum? . g$12580$jXZPP)
        (flodd? . g$12579$jXZPP)
        (flnumerator . g$12578$jXZPP)
        (flnegative? . g$12577$jXZPP)
        (flnan? . g$12576$jXZPP)
        (flmod0 . g$12575$jXZPP)
        (flmod . g$12574$jXZPP)
        (flmin . g$12573$jXZPP)
        (flmax . g$12572$jXZPP)
        (fllog . g$12571$jXZPP)
        (flinteger? . g$12570$jXZPP)
        (flinfinite? . g$12569$jXZPP)
        (flfloor . g$12568$jXZPP)
        (flfinite? . g$12567$jXZPP)
        (flexpt . g$12566$jXZPP)
        (flexp . g$12565$jXZPP)
        (fleven? . g$12564$jXZPP)
        (fldiv0-and-mod0 . g$12563$jXZPP)
        (fldiv0 . g$12562$jXZPP)
        (fldiv-and-mod . g$12561$jXZPP)
        (fldiv . g$12560$jXZPP)
        (fldenominator . g$12559$jXZPP)
        (flcos . g$12558$jXZPP)
        (flceiling . g$12557$jXZPP)
        (flatan . g$12556$jXZPP)
        (flasin . g$12555$jXZPP)
        (flacos . g$12554$jXZPP)
        (flabs . g$12553$jXZPP)
        (fl>? . g$12552$jXZPP)
        (fl>=? . g$12551$jXZPP)
        (fl=? . g$12550$jXZPP)
        (fl<? . g$12549$jXZPP)
        (fl<=? . g$12548$jXZPP)
        (fl/ . g$12547$jXZPP)
        (fl- . g$12546$jXZPP)
        (fl+ . g$12545$jXZPP)
        (fl* . g$12544$jXZPP)
        (fixnum->flonum . g$12543$jXZPP)
        (fxzero? . g$12542$jXZPP)
        (fxxor . g$12541$jXZPP)
        (fxrotate-bit-field . g$7176$jXZPP)
        (fxreverse-bit-field . g$12540$jXZPP)
        (fxpositive? . g$12539$jXZPP)
        (fxodd? . g$12538$jXZPP)
        (fxnot . g$12537$jXZPP)
        (fxnegative? . g$12536$jXZPP)
        (fxmod0 . g$12535$jXZPP)
        (fxmod . g$12534$jXZPP)
        (fxmin . g$12533$jXZPP)
        (fxmax . g$12532$jXZPP)
        (fxlength . g$12531$jXZPP)
        (fxior . g$12530$jXZPP)
        (fxif . g$7170$jXZPP)
        (fxfirst-bit-set . g$12529$jXZPP)
        (fxeven? . g$12528$jXZPP)
        (fxdiv0-and-mod0 . g$12527$jXZPP)
        (fxdiv0 . g$12526$jXZPP)
        (fxdiv-and-mod . g$12525$jXZPP)
        (fxdiv . g$12524$jXZPP)
        (fxcopy-bit-field . g$7173$jXZPP)
        (fxcopy-bit . g$7171$jXZPP)
        (fxbit-set? . g$12523$jXZPP)
        (fxbit-field . g$7172$jXZPP)
        (fxbit-count . g$12522$jXZPP)
        (fxarithmetic-shift-right . g$7175$jXZPP)
        (fxarithmetic-shift-left . g$7174$jXZPP)
        (fxarithmetic-shift . g$12521$jXZPP)
        (fxand . g$12520$jXZPP)
        (fx>? . g$12519$jXZPP)
        (fx>=? . g$12518$jXZPP)
        (fx=? . g$12517$jXZPP)
        (fx<? . g$12516$jXZPP)
        (fx<=? . g$12515$jXZPP)
        (fx-/carry . g$7168$jXZPP)
        (fx- . g$12514$jXZPP)
        (fx+/carry . g$7169$jXZPP)
        (fx+ . g$12513$jXZPP)
        (fx*/carry . g$7167$jXZPP)
        (fx* . g$12512$jXZPP)
        (greatest-fixnum . g$12511$jXZPP)
        (least-fixnum . g$12510$jXZPP)
        (fixnum-width . g$12509$jXZPP)
        (fixnum? . g$12508$jXZPP)
        (bitwise-rotate-bit-field . g$7141$jXZPP)
        (bitwise-reverse-bit-field . g$12507$jXZPP)
        (bitwise-length . g$12506$jXZPP)
        (bitwise-if . g$7135$jXZPP)
        (bitwise-first-bit-set . g$12505$jXZPP)
        (bitwise-copy-bit-field . g$7138$jXZPP)
        (bitwise-copy-bit . g$7136$jXZPP)
        (bitwise-bit-set? . g$12504$jXZPP)
        (bitwise-bit-field . g$7137$jXZPP)
        (bitwise-bit-count . g$12503$jXZPP)
        (bitwise-xor . g$12502$jXZPP)
        (bitwise-ior . g$12501$jXZPP)
        (bitwise-and . g$12500$jXZPP)
        (bitwise-not . g$12499$jXZPP)
        (bitwise-arithmetic-shift-right . g$7140$jXZPP)
        (bitwise-arithmetic-shift-left . g$7139$jXZPP)
        (bitwise-arithmetic-shift . g$12498$jXZPP)
        (zero? . g$6037$jXZPP)
        (vector? . g$12497$jXZPP)
        (vector-set! . g$12496$jXZPP)
        (vector-ref . g$12495$jXZPP)
        (vector-map . g$6131$jXZPP)
        (vector-length . g$12494$jXZPP)
        (vector-for-each . g$6132$jXZPP)
        (vector-fill! . g$12493$jXZPP)
        (vector->list . g$12492$jXZPP)
        (vector . g$12491$jXZPP)
        (values . g$12490$jXZPP)
        (truncate . g$12489$jXZPP)
        (tan . g$12488$jXZPP)
        (symbol? . g$12487$jXZPP)
        (symbol=? . g$6085$jXZPP)
        (symbol->string . g$12486$jXZPP)
        (substring . g$12485$jXZPP)
        (string? . g$12484$jXZPP)
        (string>? . g$6082$jXZPP)
        (string>=? . g$6084$jXZPP)
        (string=? . g$6080$jXZPP)
        (string<? . g$6081$jXZPP)
        (string<=? . g$6083$jXZPP)
        (string-ref . g$12483$jXZPP)
        (string-length . g$12482$jXZPP)
        (string-for-each . g$6133$jXZPP)
        (string-copy . g$12481$jXZPP)
        (string-append . g$12480$jXZPP)
        (string->symbol . g$12479$jXZPP)
        (string->number . g$12478$jXZPP)
        (string->list . g$12477$jXZPP)
        (string . g$12476$jXZPP)
        (sqrt . g$12475$jXZPP)
        (sin . g$12474$jXZPP)
        (round . g$12473$jXZPP)
        (reverse . g$12472$jXZPP)
        (real? . g$12471$jXZPP)
        (real-valued? . g$12470$jXZPP)
        (real-part . g$12469$jXZPP)
        (rationalize . g$6128$jXZPP)
        (rational? . g$12468$jXZPP)
        (rational-valued? . g$12467$jXZPP)
        (procedure? . g$12466$jXZPP)
        (positive? . g$6035$jXZPP)
        (pair? . g$12465$jXZPP)
        (odd? . g$6039$jXZPP)
        (numerator . g$12464$jXZPP)
        (number? . g$12463$jXZPP)
        (number->string . g$12462$jXZPP)
        (null? . g$12461$jXZPP)
        (not . g$12460$jXZPP)
        (negative? . g$6036$jXZPP)
        (nan? . g$12459$jXZPP)
        (min . g$6041$jXZPP)
        (max . g$6040$jXZPP)
        (map . g$5889$jXZPP)
        (make-vector . g$12458$jXZPP)
        (make-string . g$12457$jXZPP)
        (make-rectangular . g$12456$jXZPP)
        (make-polar . g$12455$jXZPP)
        (magnitude . g$12454$jXZPP)
        (log . g$12453$jXZPP)
        (list? . g$12452$jXZPP)
        (list-tail . g$5869$jXZPP)
        (list-ref . g$5870$jXZPP)
        (list->vector . g$12451$jXZPP)
        (list->string . g$12450$jXZPP)
        (list . g$12449$jXZPP)
        (length . g$12448$jXZPP)
        (lcm . g$6043$jXZPP)
        (integer? . g$12447$jXZPP)
        (integer-valued? . g$12446$jXZPP)
        (integer->char . g$12445$jXZPP)
        (infinite? . g$12444$jXZPP)
        (inexact? . g$12443$jXZPP)
        (inexact . g$12442$jXZPP)
        (imag-part . g$12441$jXZPP)
        (gcd . g$6042$jXZPP)
        (for-each . g$5890$jXZPP)
        (floor . g$12440$jXZPP)
        (finite? . g$12439$jXZPP)
        (expt . g$12438$jXZPP)
        (exp . g$12437$jXZPP)
        (exact? . g$12436$jXZPP)
        (exact-integer-sqrt . g$12435$jXZPP)
        (exact . g$12434$jXZPP)
        (even? . g$6038$jXZPP)
        (error . g$12433$jXZPP)
        (eqv? . g$12432$jXZPP)
        (equal? . g$12431$jXZPP)
        (eq? . g$12430$jXZPP)
        (dynamic-wind . g$12429$jXZPP)
        (div0-and-mod0 . g$12428$jXZPP)
        (mod0 . g$12427$jXZPP)
        (div0 . g$12426$jXZPP)
        (div-and-mod . g$12425$jXZPP)
        (mod . g$12424$jXZPP)
        (div . g$12423$jXZPP)
        (denominator . g$12422$jXZPP)
        (cos . g$12421$jXZPP)
        (cons . g$12420$jXZPP)
        (complex? . g$12419$jXZPP)
        (char? . g$12418$jXZPP)
        (char>? . g$6125$jXZPP)
        (char>=? . g$6127$jXZPP)
        (char=? . g$6123$jXZPP)
        (char<? . g$6124$jXZPP)
        (char<=? . g$6126$jXZPP)
        (char->integer . g$12417$jXZPP)
        (ceiling . g$12416$jXZPP)
        (call-with-values . g$12415$jXZPP)
        (call/cc . g$12414$jXZPP)
        (call-with-current-continuation . g$12413$jXZPP)
        (cddddr . g$6034$jXZPP)
        (cdddar . g$6033$jXZPP)
        (cddadr . g$6032$jXZPP)
        (cddaar . g$6031$jXZPP)
        (cdaddr . g$6030$jXZPP)
        (cdadar . g$6029$jXZPP)
        (cdaadr . g$6028$jXZPP)
        (cdaaar . g$6027$jXZPP)
        (cadddr . g$6026$jXZPP)
        (caddar . g$6025$jXZPP)
        (cadadr . g$6024$jXZPP)
        (cadaar . g$6023$jXZPP)
        (caaddr . g$6022$jXZPP)
        (caadar . g$6021$jXZPP)
        (caaadr . g$6020$jXZPP)
        (caaaar . g$6019$jXZPP)
        (cdddr . g$6018$jXZPP)
        (cddar . g$6017$jXZPP)
        (cdadr . g$6016$jXZPP)
        (cdaar . g$6015$jXZPP)
        (caddr . g$6014$jXZPP)
        (cadar . g$6013$jXZPP)
        (caadr . g$6012$jXZPP)
        (caaar . g$6011$jXZPP)
        (cddr . g$6010$jXZPP)
        (cdar . g$6009$jXZPP)
        (cadr . g$6008$jXZPP)
        (caar . g$6007$jXZPP)
        (cdr . g$12412$jXZPP)
        (car . g$12411$jXZPP)
        (boolean? . g$12410$jXZPP)
        (boolean=? . g$6086$jXZPP)
        (atan . g$12409$jXZPP)
        (assertion-violation . g$12408$jXZPP)
        (asin . g$12407$jXZPP)
        (apply . g$12406$jXZPP)
        (append . g$12405$jXZPP)
        (angle . g$12404$jXZPP)
        (acos . g$12403$jXZPP)
        (abs . g$12402$jXZPP)
        (/ . g$12401$jXZPP)
        (* . g$12400$jXZPP)
        (- . g$12399$jXZPP)
        (+ . g$12398$jXZPP)
        (>= . g$12397$jXZPP)
        (> . g$12396$jXZPP)
        (= . g$12395$jXZPP)
        (<= . g$12394$jXZPP)
        (< . g$12393$jXZPP)
        (make-record-printer . g$12392$jXZPP)
        (eqv-hash . g$12391$jXZPP)
        (reverse! . g$12390$jXZPP)
        (deserialize-port . g$12389$jXZPP)
        (serialize-port . g$12388$jXZPP)
        (enum-set? . g$7505$jXZPP)
        (make-promise . g$6962$jXZPP)
        (load/args . g$12221$jXZPP)
        (printf . g$7616$jXZPP)
        (fprintf . g$7617$jXZPP)
        (format . g$7618$jXZPP)
        (procedure-form . g$12387$jXZPP)
        (procedure-environment . g$12386$jXZPP)
        (procedure-name . g$12385$jXZPP)
        (procedure-arity . g$12384$jXZPP)
        (gc-collect . g$12383$jXZPP)
        (clr-type? . g$12382$jXZPP)
        (get-clr-type . g$12381$jXZPP)
        (get-command-line . g$12380$jXZPP)
        (vector-append . g$12379$jXZPP)
        (vector-filter . g$12378$jXZPP)
        (vector-reverse! . g$12377$jXZPP)
        (vector-contains? . g$12376$jXZPP)
        (vector-index-of . g$12375$jXZPP)
        (vector-copy . g$12374$jXZPP)
        (vector-binary-search . g$12373$jXZPP)
        (string-ci-compare . g$12372$jXZPP)
        (string-compare . g$12371$jXZPP)
        (string-format . g$12370$jXZPP)
        (trace-printer . g$12218$jXZPP)
        (make-traced-procedure . g$12369$jXZPP)
        (make-traced-macro . g$7638$jXZPP)
        (assertion-error . g$9231$jXZPP)
        (time-it . g$12368$jXZPP)
        (make-parameter . g$7923$jXZPP)
        (library-locator . g$12367$jXZPP)
        (get-library-paths . g$12366$jXZPP)
        (open-tcp-input/output-port . g$12365$jXZPP)
        (hashtable-for-each . g$12364$jXZPP)
        (hashtable-map . g$12363$jXZPP)
        (environment-bindings . g$9209$jXZPP)
        (environment-symbols . g$9212$jXZPP)
        (interaction-environment-symbols . g$9208$jXZPP)
        (optimization-level . g$12362$jXZPP)
        (library-path . g$8383$jXZPP)
        (expand->core . g$9218$jXZPP)
        (expand . g$9216$jXZPP)
        (expand-boot-cps . g$7697$jXZPP)
        (convert->cps . g$7694$jXZPP)
        (installed-libraries . g$8404$jXZPP)
        (uninstall-library . g$8395$jXZPP)
        (&no-nans . g$12361$jXZPP)
        (&no-infinities . g$12360$jXZPP)
        (&i/o-encoding . g$12359$jXZPP)
        (&i/o-decoding . g$12358$jXZPP)
        (&i/o-port . g$12357$jXZPP)
        (&i/o-file-does-not-exist . g$12356$jXZPP)
        (&i/o-file-already-exists . g$12355$jXZPP)
        (&i/o-file-is-read-only . g$12354$jXZPP)
        (&i/o-file-protection . g$12353$jXZPP)
        (&i/o-filename . g$12352$jXZPP)
        (&i/o-invalid-position . g$12351$jXZPP)
        (&i/o-write . g$12350$jXZPP)
        (&i/o-read . g$12349$jXZPP)
        (&i/o . g$12348$jXZPP)
        (&non-continuable . g$12347$jXZPP)
        (&undefined . g$12346$jXZPP)
        (&syntax . g$12345$jXZPP)
        (&lexical . g$12344$jXZPP)
        (&implementation-restriction . g$12343$jXZPP)
        (&who . g$12342$jXZPP)
        (&irritants . g$12341$jXZPP)
        (&assertion . g$12340$jXZPP)
        (&violation . g$12339$jXZPP)
        (&error . g$12338$jXZPP)
        (&serious . g$12337$jXZPP)
        (&warning . g$12336$jXZPP)
        (&message . g$12335$jXZPP)
        (&condition . g$12334$jXZPP)
        (define-condition-type . g$12333$jXZPP)
        (define-enumeration . g$12332$jXZPP)
        (define-record-type . g$12331$jXZPP)
        (parent-rtd . g$12330$jXZPP)
        (nongenerative . g$12329$jXZPP)
        (opaque . g$12328$jXZPP)
        (sealed . g$12327$jXZPP)
        (protocol . g$12326$jXZPP)
        (parent . g$12325$jXZPP)
        (immutable . g$12324$jXZPP)
        (mutable . g$12323$jXZPP)
        (fields . g$12322$jXZPP)
        (error-handling-mode . g$12321$jXZPP)
        (file-options . g$12320$jXZPP)
        (buffer-mode . g$12319$jXZPP)
        (eol-style . g$12318$jXZPP)
        (guard . g$12317$jXZPP)
        (trace-letrec-syntax . g$12316$jXZPP)
        (trace-let-syntax . g$12315$jXZPP)
        (trace-define-syntax . g$12314$jXZPP)
        (trace-define . g$12313$jXZPP)
        (trace-lambda . g$12312$jXZPP)
        (unsyntax-splicing . g$12311$jXZPP)
        (unsyntax . g$12310$jXZPP)
        (unquote-splicing . g$12309$jXZPP)
        (unquote . g$12308$jXZPP)
        (_ . g$12307$jXZPP)
        (else . g$12306$jXZPP)
        (=> . g$12305$jXZPP)
        (... . g$12304$jXZPP)
        (assert . g$12303$jXZPP)
        (endianness . g$12302$jXZPP)
        (delay . g$12301$jXZPP)
        (time . g$12300$jXZPP)
        (or . g$12299$jXZPP)
        (and . g$12298$jXZPP)
        (do . g$12297$jXZPP)
        (cond . g$12296$jXZPP)
        (let* . g$12295$jXZPP)
        (let . g$12294$jXZPP)
        (identifier-syntax . g$12293$jXZPP)
        (with-syntax . g$12292$jXZPP)
        (quasisyntax . g$12291$jXZPP)
        (quasiquote . g$12290$jXZPP)
        (syntax-rules . g$12289$jXZPP)
        (include-into . g$12288$jXZPP)
        (include . g$12287$jXZPP)
        (define-struct . g$12286$jXZPP)
        (let-values . g$12285$jXZPP)
        (let*-values . g$12284$jXZPP)
        (record-constructor-descriptor . g$12283$jXZPP)
        (record-type-descriptor . g$12282$jXZPP)
        (fluid-let-syntax . g$12281$jXZPP)
        (case . g$12280$jXZPP)
        (parameterize . g$12279$jXZPP)
        (unless . g$12278$jXZPP)
        (when . g$12277$jXZPP)
        (if . g$12276$jXZPP)
        (letrec* . g$12275$jXZPP)
        (letrec . g$12274$jXZPP)
        (type-descriptor . g$12273$jXZPP)
        (case-lambda . g$12272$jXZPP)
        (lambda . g$12271$jXZPP)
        (syntax . g$12270$jXZPP)
        (syntax-case . g$12269$jXZPP)
        (quote . g$12268$jXZPP)
        (foreign-call . g$12267$jXZPP)
        (letrec-syntax . g$12266$jXZPP)
        (let-syntax . g$12265$jXZPP)
        (set! . g$12264$jXZPP)
        (export . g$12263$jXZPP)
        (import . g$12262$jXZPP)
        (library . g$12261$jXZPP)
        (begin . g$12260$jXZPP)
        (module . g$12259$jXZPP)
        (define-syntax . g$12258$jXZPP)
        (define . g$12257$jXZPP))
      '((g$9107$jXZPP core-prim . ellipsis-map)
        (g$12845$jXZPP core-prim . &no-nans-rcd)
        (g$12844$jXZPP core-prim . &no-nans-rtd)
        (g$12843$jXZPP core-prim . &no-infinities-rcd)
        (g$12842$jXZPP core-prim . &no-infinities-rtd)
        (g$12841$jXZPP core-prim . &i/o-encoding-rcd)
        (g$12840$jXZPP core-prim . &i/o-encoding-rtd)
        (g$12839$jXZPP core-prim . &i/o-decoding-rcd)
        (g$12838$jXZPP core-prim . &i/o-decoding-rtd)
        (g$12837$jXZPP core-prim . &i/o-port-rcd)
        (g$12836$jXZPP core-prim . &i/o-port-rtd)
        (g$12835$jXZPP core-prim . &i/o-file-does-not-exist-rcd)
        (g$12834$jXZPP core-prim . &i/o-file-does-not-exist-rtd)
        (g$12833$jXZPP core-prim . &i/o-file-already-exists-rcd)
        (g$12832$jXZPP core-prim . &i/o-file-already-exists-rtd)
        (g$12831$jXZPP core-prim . &i/o-file-is-read-only-rcd)
        (g$12830$jXZPP core-prim . &i/o-file-is-read-only-rtd)
        (g$12829$jXZPP core-prim . &i/o-file-protection-rcd)
        (g$12828$jXZPP core-prim . &i/o-file-protection-rtd)
        (g$12827$jXZPP core-prim . &i/o-filename-rcd)
        (g$12826$jXZPP core-prim . &i/o-filename-rtd)
        (g$12825$jXZPP core-prim . &i/o-invalid-position-rcd)
        (g$12824$jXZPP core-prim . &i/o-invalid-position-rtd)
        (g$12823$jXZPP core-prim . &i/o-write-rcd)
        (g$12822$jXZPP core-prim . &i/o-write-rtd)
        (g$12821$jXZPP core-prim . &i/o-read-rcd)
        (g$12820$jXZPP core-prim . &i/o-read-rtd)
        (g$12819$jXZPP core-prim . &i/o-rcd)
        (g$12818$jXZPP core-prim . &i/o-rtd)
        (g$12817$jXZPP core-prim . &undefined-rcd)
        (g$12816$jXZPP core-prim . &undefined-rtd)
        (g$12815$jXZPP core-prim . &syntax-rcd)
        (g$12814$jXZPP core-prim . &syntax-rtd)
        (g$12813$jXZPP core-prim . &lexical-rcd)
        (g$12812$jXZPP core-prim . &lexical-rtd)
        (g$12811$jXZPP core-prim . &implementation-restriction-rcd)
        (g$12810$jXZPP core-prim . &implementation-restriction-rtd)
        (g$12809$jXZPP core-prim . &non-continuable-rcd)
        (g$12808$jXZPP core-prim . &non-continuable-rtd)
        (g$12807$jXZPP core-prim . &who-rcd)
        (g$12806$jXZPP core-prim . &who-rtd)
        (g$12805$jXZPP core-prim . &irritants-rcd)
        (g$12804$jXZPP core-prim . &irritants-rtd)
        (g$12803$jXZPP core-prim . &assertion-rcd)
        (g$12802$jXZPP core-prim . &assertion-rtd)
        (g$12801$jXZPP core-prim . &violation-rcd)
        (g$12800$jXZPP core-prim . &violation-rtd)
        (g$12799$jXZPP core-prim . &error-rcd)
        (g$12798$jXZPP core-prim . &error-rtd)
        (g$12797$jXZPP core-prim . &serious-rcd)
        (g$12796$jXZPP core-prim . &serious-rtd)
        (g$12795$jXZPP core-prim . &warning-rcd)
        (g$12794$jXZPP core-prim . &warning-rtd)
        (g$12793$jXZPP core-prim . &message-rcd)
        (g$12792$jXZPP core-prim . &message-rtd)
        (g$12791$jXZPP core-prim . &condition-rcd)
        (g$12790$jXZPP core-prim . &condition-rtd)
        (g$12789$jXZPP core-prim . library-letrec*)
        (g$12788$jXZPP core-prim . annotation-stripped)
        (g$12787$jXZPP core-prim . annotation-source)
        (g$12786$jXZPP core-prim . annotation-expression)
        (g$12785$jXZPP core-prim . annotation?)
        (g$12784$jXZPP core-prim . read-annotated)
        (g$12783$jXZPP core-prim . tanh)
        (g$12782$jXZPP core-prim . cosh)
        (g$12781$jXZPP core-prim . sinh)
        (g$12780$jXZPP core-prim . make-guid)
        (g$12779$jXZPP core-prim . unspecified?)
        (g$5872$jXZPP core-prim . make-list)
        (g$5871$jXZPP core-prim . last-pair)
        (g$12778$jXZPP core-prim . load-r5rs)
        (g$12777$jXZPP core-prim . license)
        (g$12776$jXZPP core-prim . stacktrace)
        (g$12223$jXZPP core-prim . ironscheme-build)
        (g$12775$jXZPP core-prim . define-clr-class-internal)
        (g$12774$jXZPP core-prim . clr-field-set!-internal)
        (g$12773$jXZPP core-prim . clr-field-get-internal)
        (g$12772$jXZPP core-prim . clr-cast-internal)
        (g$12771$jXZPP core-prim . clr-call-internal)
        (g$12770$jXZPP core-prim . clr-new-internal)
        (g$12769$jXZPP core-prim . clr-new-array-internal)
        (g$12768$jXZPP core-prim . clr-is-internal)
        (g$12767$jXZPP core-prim . clr-reference-internal)
        (g$12766$jXZPP core-prim . clr-using-internal)
        (g$9232$jXZPP core-prim . syntax-error)
        (g$9102$jXZPP core-prim . syntax-dispatch)
        (g$12765$jXZPP core-prim . compile-core)
        (g$12764$jXZPP core-prim . eval-core)
        (g$12763$jXZPP core-prim . set-symbol-value!)
        (g$12762$jXZPP core-prim . symbol-value)
        (g$12761$jXZPP core-prim . symbol-bound?)
        (g$12760$jXZPP core-prim . ungensym)
        (g$12759$jXZPP core-prim . gensym)
        (g$12758$jXZPP core-prim . void)
        (g$12757$jXZPP core-prim . load-serialized-library)
        (g$12756$jXZPP core-prim . serialize-library)
        (g$12225$jXZPP core-prim . compile-system-libraries)
        (g$12227$jXZPP core-prim . compile->closure)
        (g$12226$jXZPP core-prim . compile)
        (g$12222$jXZPP core-prim . load)
        (g$9242$jXZPP core-prim . interaction-environment)
        (g$12755$jXZPP core-prim . char-ready?)
        (g$12754$jXZPP core-prim . string-upcase)
        (g$12753$jXZPP core-prim . string-titlecase)
        (g$12752$jXZPP core-prim . string-normalize-nfkd)
        (g$12751$jXZPP core-prim . string-normalize-nfkc)
        (g$12750$jXZPP core-prim . string-normalize-nfd)
        (g$12749$jXZPP core-prim . string-normalize-nfc)
        (g$12748$jXZPP core-prim . string-foldcase)
        (g$12747$jXZPP core-prim . string-downcase)
        (g$7040$jXZPP core-prim . string-ci>?)
        (g$7042$jXZPP core-prim . string-ci>=?)
        (g$7038$jXZPP core-prim . string-ci=?)
        (g$7039$jXZPP core-prim . string-ci<?)
        (g$7041$jXZPP core-prim . string-ci<=?)
        (g$12746$jXZPP core-prim . char-whitespace?)
        (g$12745$jXZPP core-prim . char-upper-case?)
        (g$12744$jXZPP core-prim . char-title-case?)
        (g$12743$jXZPP core-prim . char-numeric?)
        (g$12742$jXZPP core-prim . char-lower-case?)
        (g$12741$jXZPP core-prim . char-general-category)
        (g$12740$jXZPP core-prim . char-upcase)
        (g$12739$jXZPP core-prim . char-titlecase)
        (g$12738$jXZPP core-prim . char-foldcase)
        (g$12737$jXZPP core-prim . char-downcase)
        (g$7079$jXZPP core-prim . char-ci>?)
        (g$7081$jXZPP core-prim . char-ci>=?)
        (g$7077$jXZPP core-prim . char-ci=?)
        (g$7078$jXZPP core-prim . char-ci<?)
        (g$7080$jXZPP core-prim . char-ci<=?)
        (g$12736$jXZPP core-prim . char-alphabetic?)
        (g$8839$jXZPP core-prim . variable-transformer-procedure)
        (g$8838$jXZPP core-prim . variable-transformer?)
        (g$8837$jXZPP core-prim . make-variable-transformer)
        (g$9236$jXZPP core-prim . identifier?)
        (g$9225$jXZPP core-prim . generate-temporaries)
        (g$9226$jXZPP core-prim . free-identifier=?)
        (g$9238$jXZPP core-prim . syntax->datum)
        (g$9237$jXZPP core-prim . datum->syntax)
        (g$9227$jXZPP core-prim . bound-identifier=?)
        (g$12735$jXZPP core-prim . record-type-descriptor?)
        (g$12734$jXZPP core-prim . record-predicate)
        (g$12733$jXZPP core-prim . record-mutator)
        (g$12732$jXZPP core-prim . record-constructor)
        (g$12731$jXZPP core-prim . record-accessor)
        (g$12730$jXZPP core-prim . make-record-type-descriptor)
        (g$12729$jXZPP core-prim . make-record-constructor-descriptor)
        (g$12728$jXZPP core-prim . record?)
        (g$12727$jXZPP core-prim . record-type-uid)
        (g$12726$jXZPP core-prim . record-type-sealed?)
        (g$12725$jXZPP core-prim . record-type-parent)
        (g$12724$jXZPP core-prim . record-type-opaque?)
        (g$12723$jXZPP core-prim . record-type-name)
        (g$12722$jXZPP core-prim . record-type-generative?)
        (g$12721$jXZPP core-prim . record-type-field-names)
        (g$12720$jXZPP core-prim . record-rtd)
        (g$12719$jXZPP core-prim . record-field-mutable?)
        (g$6614$jXZPP core-prim . delete-file)
        (g$6613$jXZPP core-prim . file-exists?)
        (g$12718$jXZPP core-prim . vector-sort!)
        (g$12717$jXZPP core-prim . vector-sort)
        (g$6980$jXZPP core-prim . list-sort)
        (g$12716$jXZPP core-prim . symbol-hash)
        (g$12715$jXZPP core-prim . string-ci-hash)
        (g$12714$jXZPP core-prim . string-hash)
        (g$12713$jXZPP core-prim . equal-hash)
        (g$12712$jXZPP core-prim . hashtable-equivalence-function)
        (g$12711$jXZPP core-prim . make-hashtable)
        (g$12710$jXZPP core-prim . hashtable-hash-function)
        (g$6582$jXZPP core-prim . make-eqv-hashtable)
        (g$6581$jXZPP core-prim . make-eq-hashtable)
        (g$12709$jXZPP core-prim . hashtable?)
        (g$6588$jXZPP core-prim . hashtable-update!)
        (g$6583$jXZPP core-prim . hashtable-size)
        (g$6585$jXZPP core-prim . hashtable-set!)
        (g$6584$jXZPP core-prim . hashtable-ref)
        (g$12708$jXZPP core-prim . hashtable-mutable?)
        (g$12707$jXZPP core-prim . hashtable-keys)
        (g$12706$jXZPP core-prim . hashtable-entries)
        (g$6586$jXZPP core-prim . hashtable-delete!)
        (g$12705$jXZPP core-prim . hashtable-copy)
        (g$6587$jXZPP core-prim . hashtable-contains?)
        (g$6589$jXZPP core-prim . hashtable-clear!)
        (g$7465$jXZPP core-prim . call-with-output-file)
        (g$7464$jXZPP core-prim . call-with-input-file)
        (g$7446$jXZPP core-prim . write-char)
        (g$12704$jXZPP core-prim . write)
        (g$7463$jXZPP core-prim . with-output-to-file)
        (g$7462$jXZPP core-prim . with-input-from-file)
        (g$7445$jXZPP core-prim . read-char)
        (g$12703$jXZPP core-prim . read)
        (g$7444$jXZPP core-prim . peek-char)
        (g$12702$jXZPP core-prim . open-output-file)
        (g$12701$jXZPP core-prim . open-input-file)
        (g$7466$jXZPP core-prim . newline)
        (g$12700$jXZPP core-prim . display)
        (g$12699$jXZPP core-prim . close-output-port)
        (g$12698$jXZPP core-prim . close-input-port)
        (g$12697$jXZPP core-prim . eof-object?)
        (g$12696$jXZPP core-prim . eof-object)
        (g$12695$jXZPP core-prim . current-error-port)
        (g$12694$jXZPP core-prim . current-output-port)
        (g$12693$jXZPP core-prim . current-input-port)
        (g$12692$jXZPP core-prim . output-port?)
        (g$12691$jXZPP core-prim . input-port?)
        (g$12690$jXZPP core-prim . utf-8-codec)
        (g$12689$jXZPP core-prim . utf-16-codec)
        (g$12688$jXZPP core-prim . transcoder-error-handling-mode)
        (g$12687$jXZPP core-prim . transcoder-eol-style)
        (g$12686$jXZPP core-prim . transcoder-codec)
        (g$12685$jXZPP core-prim . transcoded-port)
        (g$12684$jXZPP core-prim . textual-port?)
        (g$12683$jXZPP core-prim . string->bytevector)
        (g$12682$jXZPP core-prim . standard-output-port)
        (g$12681$jXZPP core-prim . standard-input-port)
        (g$12680$jXZPP core-prim . standard-error-port)
        (g$12679$jXZPP core-prim . set-port-position!)
        (g$12678$jXZPP core-prim . put-u8)
        (g$12677$jXZPP core-prim . put-string)
        (g$12676$jXZPP core-prim . put-datum)
        (g$12675$jXZPP core-prim . put-char)
        (g$12674$jXZPP core-prim . put-bytevector)
        (g$7431$jXZPP core-prim . port?)
        (g$12673$jXZPP core-prim . port-transcoder)
        (g$12672$jXZPP core-prim . port-position)
        (g$12671$jXZPP core-prim . port-has-set-port-position!?)
        (g$12670$jXZPP core-prim . port-has-port-position?)
        (g$12669$jXZPP core-prim . port-eof?)
        (g$12668$jXZPP core-prim . output-port-buffer-mode)
        (g$7430$jXZPP core-prim . open-string-output-port)
        (g$12667$jXZPP core-prim . open-string-input-port)
        (g$12666$jXZPP core-prim . open-file-output-port)
        (g$12665$jXZPP core-prim . open-file-input/output-port)
        (g$12664$jXZPP core-prim . open-file-input-port)
        (g$12663$jXZPP core-prim . open-bytevector-output-port)
        (g$12662$jXZPP core-prim . open-bytevector-input-port)
        (g$12661$jXZPP core-prim . native-transcoder)
        (g$12660$jXZPP core-prim . native-eol-style)
        (g$12659$jXZPP core-prim . make-transcoder)
        (g$12658$jXZPP core-prim . latin-1-codec)
        (g$7286$jXZPP core-prim . make-i/o-write-error)
        (g$7272$jXZPP core-prim . make-i/o-read-error)
        (g$7391$jXZPP core-prim . make-i/o-port-error)
        (g$7301$jXZPP core-prim . make-i/o-invalid-position-error)
        (g$7318$jXZPP core-prim . make-i/o-filename-error)
        (g$7334$jXZPP core-prim . make-i/o-file-protection-error)
        (g$7348$jXZPP core-prim . make-i/o-file-is-read-only-error)
        (g$7376$jXZPP core-prim . make-i/o-file-does-not-exist-error)
        (g$7362$jXZPP core-prim . make-i/o-file-already-exists-error)
        (g$7258$jXZPP core-prim . make-i/o-error)
        (g$7422$jXZPP core-prim . make-i/o-encoding-error)
        (g$7407$jXZPP core-prim . make-i/o-decoding-error)
        (g$12657$jXZPP core-prim . make-custom-textual-output-port)
        (g$12656$jXZPP core-prim . make-custom-textual-input/output-port)
        (g$12655$jXZPP core-prim . make-custom-textual-input-port)
        (g$12654$jXZPP core-prim . make-custom-binary-output-port)
        (g$12653$jXZPP core-prim . make-custom-binary-input/output-port)
        (g$12652$jXZPP core-prim . make-custom-binary-input-port)
        (g$12651$jXZPP core-prim . make-bytevector)
        (g$12650$jXZPP core-prim . lookahead-u8)
        (g$12649$jXZPP core-prim . lookahead-char)
        (g$7287$jXZPP core-prim . i/o-write-error?)
        (g$7273$jXZPP core-prim . i/o-read-error?)
        (g$7393$jXZPP core-prim . i/o-port-error?)
        (g$7303$jXZPP core-prim . i/o-invalid-position-error?)
        (g$7304$jXZPP core-prim . i/o-error-position)
        (g$7320$jXZPP core-prim . i/o-filename-error?)
        (g$7335$jXZPP core-prim . i/o-file-protection-error?)
        (g$7349$jXZPP core-prim . i/o-file-is-read-only-error?)
        (g$7377$jXZPP core-prim . i/o-file-does-not-exist-error?)
        (g$7363$jXZPP core-prim . i/o-file-already-exists-error?)
        (g$7259$jXZPP core-prim . i/o-error?)
        (g$7394$jXZPP core-prim . i/o-error-port)
        (g$7321$jXZPP core-prim . i/o-error-filename)
        (g$7424$jXZPP core-prim . i/o-encoding-error?)
        (g$7425$jXZPP core-prim . i/o-encoding-error-char)
        (g$7408$jXZPP core-prim . i/o-decoding-error?)
        (g$12648$jXZPP core-prim . get-u8)
        (g$12647$jXZPP core-prim . get-string-n!)
        (g$12646$jXZPP core-prim . get-string-n)
        (g$12645$jXZPP core-prim . get-string-all)
        (g$12644$jXZPP core-prim . get-line)
        (g$12643$jXZPP core-prim . get-datum)
        (g$12642$jXZPP core-prim . get-char)
        (g$12641$jXZPP core-prim . get-bytevector-some)
        (g$12640$jXZPP core-prim . get-bytevector-n!)
        (g$12639$jXZPP core-prim . get-bytevector-n)
        (g$12638$jXZPP core-prim . get-bytevector-all)
        (g$12637$jXZPP core-prim . flush-output-port)
        (g$12636$jXZPP core-prim . close-port)
        (g$7432$jXZPP core-prim . call-with-string-output-port)
        (g$7433$jXZPP core-prim . call-with-port)
        (g$12635$jXZPP core-prim . call-with-bytevector-output-port)
        (g$12634$jXZPP core-prim . bytevector->string)
        (g$12633$jXZPP core-prim . buffer-mode?)
        (g$12632$jXZPP core-prim . binary-port?)
        (g$9215$jXZPP core-prim . scheme-report-environment)
        (g$6959$jXZPP core-prim . quotient)
        (g$9214$jXZPP core-prim . null-environment)
        (g$6960$jXZPP core-prim . remainder)
        (g$6961$jXZPP core-prim . modulo)
        (g$6956$jXZPP core-prim . inexact->exact)
        (g$6963$jXZPP core-prim . force)
        (g$6957$jXZPP core-prim . exact->inexact)
        (g$12631$jXZPP core-prim . exit)
        (g$12219$jXZPP core-prim . command-line)
        (g$12630$jXZPP core-prim . string-fill!)
        (g$12629$jXZPP core-prim . string-set!)
        (g$12628$jXZPP core-prim . set-cdr!)
        (g$12627$jXZPP core-prim . set-car!)
        (g$5894$jXZPP core-prim . remove)
        (g$5895$jXZPP core-prim . remv)
        (g$5875$jXZPP core-prim . remp)
        (g$5896$jXZPP core-prim . remq)
        (g$5874$jXZPP core-prim . partition)
        (g$5882$jXZPP core-prim . memv)
        (g$5881$jXZPP core-prim . memq)
        (g$5884$jXZPP core-prim . memp)
        (g$5883$jXZPP core-prim . member)
        (g$5888$jXZPP core-prim . exists)
        (g$5887$jXZPP core-prim . for-all)
        (g$5893$jXZPP core-prim . fold-right)
        (g$5892$jXZPP core-prim . fold-left)
        (g$5873$jXZPP core-prim . find)
        (g$5876$jXZPP core-prim . filter)
        (g$5891$jXZPP core-prim . cons*)
        (g$5878$jXZPP core-prim . assv)
        (g$5877$jXZPP core-prim . assq)
        (g$5880$jXZPP core-prim . assp)
        (g$5879$jXZPP core-prim . assoc)
        (g$12626$jXZPP core-prim . with-exception-handler)
        (g$12625$jXZPP core-prim . raise-continuable)
        (g$12624$jXZPP core-prim . raise)
        (g$9217$jXZPP core-prim . eval)
        (g$9213$jXZPP core-prim . environment)
        (g$7530$jXZPP core-prim . make-enumeration)
        (g$7537$jXZPP core-prim . enum-set=?)
        (g$7531$jXZPP core-prim . enum-set-universe)
        (g$7538$jXZPP core-prim . enum-set-union)
        (g$7536$jXZPP core-prim . enum-set-subset?)
        (g$7542$jXZPP core-prim . enum-set-projection)
        (g$7535$jXZPP core-prim . enum-set-member?)
        (g$7539$jXZPP core-prim . enum-set-intersection)
        (g$7532$jXZPP core-prim . enum-set-indexer)
        (g$7540$jXZPP core-prim . enum-set-difference)
        (g$7533$jXZPP core-prim . enum-set-constructor)
        (g$7541$jXZPP core-prim . enum-set-complement)
        (g$7534$jXZPP core-prim . enum-set->list)
        (g$6868$jXZPP core-prim . who-condition?)
        (g$6779$jXZPP core-prim . warning?)
        (g$6821$jXZPP core-prim . violation?)
        (g$6945$jXZPP core-prim . undefined-violation?)
        (g$6929$jXZPP core-prim . syntax-violation?)
        (g$6931$jXZPP core-prim . syntax-violation-subform)
        (g$6930$jXZPP core-prim . syntax-violation-form)
        (g$9235$jXZPP core-prim . syntax-violation)
        (g$12623$jXZPP core-prim . simple-conditions)
        (g$6793$jXZPP core-prim . serious-condition?)
        (g$6883$jXZPP core-prim . non-continuable-violation?)
        (g$6764$jXZPP core-prim . message-condition?)
        (g$6866$jXZPP core-prim . make-who-condition)
        (g$6778$jXZPP core-prim . make-warning)
        (g$6820$jXZPP core-prim . make-violation)
        (g$6944$jXZPP core-prim . make-undefined-violation)
        (g$6926$jXZPP core-prim . make-syntax-violation)
        (g$6792$jXZPP core-prim . make-serious-condition)
        (g$6882$jXZPP core-prim . make-non-continuable-violation)
        (g$6762$jXZPP core-prim . make-message-condition)
        (g$6910$jXZPP core-prim . make-lexical-violation)
        (g$6849$jXZPP core-prim . make-irritants-condition)
        (g$6896$jXZPP core-prim . make-implementation-restriction-violation)
        (g$6806$jXZPP core-prim . make-error)
        (g$6834$jXZPP core-prim . make-assertion-violation)
        (g$6911$jXZPP core-prim . lexical-violation?)
        (g$6851$jXZPP core-prim . irritants-condition?)
        (g$6897$jXZPP core-prim . implementation-restriction-violation?)
        (g$6807$jXZPP core-prim . error?)
        (g$6869$jXZPP core-prim . condition-who)
        (g$12622$jXZPP core-prim . condition-predicate)
        (g$6765$jXZPP core-prim . condition-message)
        (g$6852$jXZPP core-prim . condition-irritants)
        (g$12621$jXZPP core-prim . condition-accessor)
        (g$12620$jXZPP core-prim . condition)
        (g$6835$jXZPP core-prim . assertion-violation?)
        (g$12619$jXZPP core-prim . condition?)
        (g$12618$jXZPP core-prim . utf32->string)
        (g$12617$jXZPP core-prim . utf16->string)
        (g$12616$jXZPP core-prim . utf8->string)
        (g$12615$jXZPP core-prim . uint-list->bytevector)
        (g$12614$jXZPP core-prim . u8-list->bytevector)
        (g$12613$jXZPP core-prim . string->utf8)
        (g$12612$jXZPP core-prim . string->utf32)
        (g$12611$jXZPP core-prim . string->utf16)
        (g$12610$jXZPP core-prim . sint-list->bytevector)
        (g$6620$jXZPP core-prim . native-endianness)
        (g$12609$jXZPP core-prim . bytevector?)
        (g$12608$jXZPP core-prim . bytevector=?)
        (g$12607$jXZPP core-prim . bytevector-uint-set!)
        (g$12606$jXZPP core-prim . bytevector-uint-ref)
        (g$12605$jXZPP core-prim . bytevector-u8-set!)
        (g$12604$jXZPP core-prim . bytevector-u8-ref)
        (g$6641$jXZPP core-prim . bytevector-u64-set!)
        (g$6637$jXZPP core-prim . bytevector-u64-ref)
        (g$6643$jXZPP core-prim . bytevector-u64-native-set!)
        (g$6639$jXZPP core-prim . bytevector-u64-native-ref)
        (g$6633$jXZPP core-prim . bytevector-u32-set!)
        (g$6629$jXZPP core-prim . bytevector-u32-ref)
        (g$6635$jXZPP core-prim . bytevector-u32-native-set!)
        (g$6631$jXZPP core-prim . bytevector-u32-native-ref)
        (g$6625$jXZPP core-prim . bytevector-u16-set!)
        (g$6621$jXZPP core-prim . bytevector-u16-ref)
        (g$6627$jXZPP core-prim . bytevector-u16-native-set!)
        (g$6623$jXZPP core-prim . bytevector-u16-native-ref)
        (g$12603$jXZPP core-prim . bytevector-sint-set!)
        (g$12602$jXZPP core-prim . bytevector-sint-ref)
        (g$12601$jXZPP core-prim . bytevector-s8-set!)
        (g$12600$jXZPP core-prim . bytevector-s8-ref)
        (g$6642$jXZPP core-prim . bytevector-s64-set!)
        (g$6638$jXZPP core-prim . bytevector-s64-ref)
        (g$6644$jXZPP core-prim . bytevector-s64-native-set!)
        (g$6640$jXZPP core-prim . bytevector-s64-native-ref)
        (g$6634$jXZPP core-prim . bytevector-s32-set!)
        (g$6630$jXZPP core-prim . bytevector-s32-ref)
        (g$6636$jXZPP core-prim . bytevector-s32-native-set!)
        (g$6632$jXZPP core-prim . bytevector-s32-native-ref)
        (g$6626$jXZPP core-prim . bytevector-s16-set!)
        (g$6622$jXZPP core-prim . bytevector-s16-ref)
        (g$6628$jXZPP core-prim . bytevector-s16-native-set!)
        (g$6624$jXZPP core-prim . bytevector-s16-native-ref)
        (g$12599$jXZPP core-prim . bytevector-length)
        (g$12598$jXZPP core-prim . bytevector-ieee-single-set!)
        (g$12597$jXZPP core-prim . bytevector-ieee-single-ref)
        (g$6647$jXZPP core-prim . bytevector-ieee-single-native-set!)
        (g$6645$jXZPP core-prim . bytevector-ieee-single-native-ref)
        (g$12596$jXZPP core-prim . bytevector-ieee-double-set!)
        (g$12595$jXZPP core-prim . bytevector-ieee-double-ref)
        (g$6648$jXZPP core-prim . bytevector-ieee-double-native-set!)
        (g$6646$jXZPP core-prim . bytevector-ieee-double-native-ref)
        (g$12594$jXZPP core-prim . bytevector-fill!)
        (g$12593$jXZPP core-prim . bytevector-copy!)
        (g$12592$jXZPP core-prim . bytevector-copy)
        (g$12591$jXZPP core-prim . bytevector->uint-list)
        (g$12590$jXZPP core-prim . bytevector->u8-list)
        (g$12589$jXZPP core-prim . bytevector->sint-list)
        (g$7244$jXZPP core-prim . no-nans-violation?)
        (g$7230$jXZPP core-prim . no-infinities-violation?)
        (g$7243$jXZPP core-prim . make-no-nans-violation)
        (g$7229$jXZPP core-prim . make-no-infinities-violation)
        (g$12588$jXZPP core-prim . real->flonum)
        (g$12587$jXZPP core-prim . flzero?)
        (g$12586$jXZPP core-prim . fltruncate)
        (g$12585$jXZPP core-prim . fltan)
        (g$12584$jXZPP core-prim . flsqrt)
        (g$12583$jXZPP core-prim . flsin)
        (g$12582$jXZPP core-prim . flround)
        (g$12581$jXZPP core-prim . flpositive?)
        (g$12580$jXZPP core-prim . flonum?)
        (g$12579$jXZPP core-prim . flodd?)
        (g$12578$jXZPP core-prim . flnumerator)
        (g$12577$jXZPP core-prim . flnegative?)
        (g$12576$jXZPP core-prim . flnan?)
        (g$12575$jXZPP core-prim . flmod0)
        (g$12574$jXZPP core-prim . flmod)
        (g$12573$jXZPP core-prim . flmin)
        (g$12572$jXZPP core-prim . flmax)
        (g$12571$jXZPP core-prim . fllog)
        (g$12570$jXZPP core-prim . flinteger?)
        (g$12569$jXZPP core-prim . flinfinite?)
        (g$12568$jXZPP core-prim . flfloor)
        (g$12567$jXZPP core-prim . flfinite?)
        (g$12566$jXZPP core-prim . flexpt)
        (g$12565$jXZPP core-prim . flexp)
        (g$12564$jXZPP core-prim . fleven?)
        (g$12563$jXZPP core-prim . fldiv0-and-mod0)
        (g$12562$jXZPP core-prim . fldiv0)
        (g$12561$jXZPP core-prim . fldiv-and-mod)
        (g$12560$jXZPP core-prim . fldiv)
        (g$12559$jXZPP core-prim . fldenominator)
        (g$12558$jXZPP core-prim . flcos)
        (g$12557$jXZPP core-prim . flceiling)
        (g$12556$jXZPP core-prim . flatan)
        (g$12555$jXZPP core-prim . flasin)
        (g$12554$jXZPP core-prim . flacos)
        (g$12553$jXZPP core-prim . flabs)
        (g$12552$jXZPP core-prim . fl>?)
        (g$12551$jXZPP core-prim . fl>=?)
        (g$12550$jXZPP core-prim . fl=?)
        (g$12549$jXZPP core-prim . fl<?)
        (g$12548$jXZPP core-prim . fl<=?)
        (g$12547$jXZPP core-prim . fl/)
        (g$12546$jXZPP core-prim . fl-)
        (g$12545$jXZPP core-prim . fl+)
        (g$12544$jXZPP core-prim . fl*)
        (g$12543$jXZPP core-prim . fixnum->flonum)
        (g$12542$jXZPP core-prim . fxzero?)
        (g$12541$jXZPP core-prim . fxxor)
        (g$7176$jXZPP core-prim . fxrotate-bit-field)
        (g$12540$jXZPP core-prim . fxreverse-bit-field)
        (g$12539$jXZPP core-prim . fxpositive?)
        (g$12538$jXZPP core-prim . fxodd?)
        (g$12537$jXZPP core-prim . fxnot)
        (g$12536$jXZPP core-prim . fxnegative?)
        (g$12535$jXZPP core-prim . fxmod0)
        (g$12534$jXZPP core-prim . fxmod)
        (g$12533$jXZPP core-prim . fxmin)
        (g$12532$jXZPP core-prim . fxmax)
        (g$12531$jXZPP core-prim . fxlength)
        (g$12530$jXZPP core-prim . fxior)
        (g$7170$jXZPP core-prim . fxif)
        (g$12529$jXZPP core-prim . fxfirst-bit-set)
        (g$12528$jXZPP core-prim . fxeven?)
        (g$12527$jXZPP core-prim . fxdiv0-and-mod0)
        (g$12526$jXZPP core-prim . fxdiv0)
        (g$12525$jXZPP core-prim . fxdiv-and-mod)
        (g$12524$jXZPP core-prim . fxdiv)
        (g$7173$jXZPP core-prim . fxcopy-bit-field)
        (g$7171$jXZPP core-prim . fxcopy-bit)
        (g$12523$jXZPP core-prim . fxbit-set?)
        (g$7172$jXZPP core-prim . fxbit-field)
        (g$12522$jXZPP core-prim . fxbit-count)
        (g$7175$jXZPP core-prim . fxarithmetic-shift-right)
        (g$7174$jXZPP core-prim . fxarithmetic-shift-left)
        (g$12521$jXZPP core-prim . fxarithmetic-shift)
        (g$12520$jXZPP core-prim . fxand)
        (g$12519$jXZPP core-prim . fx>?)
        (g$12518$jXZPP core-prim . fx>=?)
        (g$12517$jXZPP core-prim . fx=?)
        (g$12516$jXZPP core-prim . fx<?)
        (g$12515$jXZPP core-prim . fx<=?)
        (g$7168$jXZPP core-prim . fx-/carry)
        (g$12514$jXZPP core-prim . fx-)
        (g$7169$jXZPP core-prim . fx+/carry)
        (g$12513$jXZPP core-prim . fx+)
        (g$7167$jXZPP core-prim . fx*/carry)
        (g$12512$jXZPP core-prim . fx*)
        (g$12511$jXZPP core-prim . greatest-fixnum)
        (g$12510$jXZPP core-prim . least-fixnum)
        (g$12509$jXZPP core-prim . fixnum-width)
        (g$12508$jXZPP core-prim . fixnum?)
        (g$7141$jXZPP core-prim . bitwise-rotate-bit-field)
        (g$12507$jXZPP core-prim . bitwise-reverse-bit-field)
        (g$12506$jXZPP core-prim . bitwise-length)
        (g$7135$jXZPP core-prim . bitwise-if)
        (g$12505$jXZPP core-prim . bitwise-first-bit-set)
        (g$7138$jXZPP core-prim . bitwise-copy-bit-field)
        (g$7136$jXZPP core-prim . bitwise-copy-bit)
        (g$12504$jXZPP core-prim . bitwise-bit-set?)
        (g$7137$jXZPP core-prim . bitwise-bit-field)
        (g$12503$jXZPP core-prim . bitwise-bit-count)
        (g$12502$jXZPP core-prim . bitwise-xor)
        (g$12501$jXZPP core-prim . bitwise-ior)
        (g$12500$jXZPP core-prim . bitwise-and)
        (g$12499$jXZPP core-prim . bitwise-not)
        (g$7140$jXZPP core-prim . bitwise-arithmetic-shift-right)
        (g$7139$jXZPP core-prim . bitwise-arithmetic-shift-left)
        (g$12498$jXZPP core-prim . bitwise-arithmetic-shift)
        (g$6037$jXZPP core-prim . zero?)
        (g$12497$jXZPP core-prim . vector?)
        (g$12496$jXZPP core-prim . vector-set!)
        (g$12495$jXZPP core-prim . vector-ref)
        (g$6131$jXZPP core-prim . vector-map)
        (g$12494$jXZPP core-prim . vector-length)
        (g$6132$jXZPP core-prim . vector-for-each)
        (g$12493$jXZPP core-prim . vector-fill!)
        (g$12492$jXZPP core-prim . vector->list)
        (g$12491$jXZPP core-prim . vector)
        (g$12490$jXZPP core-prim . values)
        (g$12489$jXZPP core-prim . truncate)
        (g$12488$jXZPP core-prim . tan)
        (g$12487$jXZPP core-prim . symbol?)
        (g$6085$jXZPP core-prim . symbol=?)
        (g$12486$jXZPP core-prim . symbol->string)
        (g$12485$jXZPP core-prim . substring)
        (g$12484$jXZPP core-prim . string?)
        (g$6082$jXZPP core-prim . string>?)
        (g$6084$jXZPP core-prim . string>=?)
        (g$6080$jXZPP core-prim . string=?)
        (g$6081$jXZPP core-prim . string<?)
        (g$6083$jXZPP core-prim . string<=?)
        (g$12483$jXZPP core-prim . string-ref)
        (g$12482$jXZPP core-prim . string-length)
        (g$6133$jXZPP core-prim . string-for-each)
        (g$12481$jXZPP core-prim . string-copy)
        (g$12480$jXZPP core-prim . string-append)
        (g$12479$jXZPP core-prim . string->symbol)
        (g$12478$jXZPP core-prim . string->number)
        (g$12477$jXZPP core-prim . string->list)
        (g$12476$jXZPP core-prim . string)
        (g$12475$jXZPP core-prim . sqrt)
        (g$12474$jXZPP core-prim . sin)
        (g$12473$jXZPP core-prim . round)
        (g$12472$jXZPP core-prim . reverse)
        (g$12471$jXZPP core-prim . real?)
        (g$12470$jXZPP core-prim . real-valued?)
        (g$12469$jXZPP core-prim . real-part)
        (g$6128$jXZPP core-prim . rationalize)
        (g$12468$jXZPP core-prim . rational?)
        (g$12467$jXZPP core-prim . rational-valued?)
        (g$12466$jXZPP core-prim . procedure?)
        (g$6035$jXZPP core-prim . positive?)
        (g$12465$jXZPP core-prim . pair?)
        (g$6039$jXZPP core-prim . odd?)
        (g$12464$jXZPP core-prim . numerator)
        (g$12463$jXZPP core-prim . number?)
        (g$12462$jXZPP core-prim . number->string)
        (g$12461$jXZPP core-prim . null?)
        (g$12460$jXZPP core-prim . not)
        (g$6036$jXZPP core-prim . negative?)
        (g$12459$jXZPP core-prim . nan?)
        (g$6041$jXZPP core-prim . min)
        (g$6040$jXZPP core-prim . max)
        (g$5889$jXZPP core-prim . map)
        (g$12458$jXZPP core-prim . make-vector)
        (g$12457$jXZPP core-prim . make-string)
        (g$12456$jXZPP core-prim . make-rectangular)
        (g$12455$jXZPP core-prim . make-polar)
        (g$12454$jXZPP core-prim . magnitude)
        (g$12453$jXZPP core-prim . log)
        (g$12452$jXZPP core-prim . list?)
        (g$5869$jXZPP core-prim . list-tail)
        (g$5870$jXZPP core-prim . list-ref)
        (g$12451$jXZPP core-prim . list->vector)
        (g$12450$jXZPP core-prim . list->string)
        (g$12449$jXZPP core-prim . list)
        (g$12448$jXZPP core-prim . length)
        (g$6043$jXZPP core-prim . lcm)
        (g$12447$jXZPP core-prim . integer?)
        (g$12446$jXZPP core-prim . integer-valued?)
        (g$12445$jXZPP core-prim . integer->char)
        (g$12444$jXZPP core-prim . infinite?)
        (g$12443$jXZPP core-prim . inexact?)
        (g$12442$jXZPP core-prim . inexact)
        (g$12441$jXZPP core-prim . imag-part)
        (g$6042$jXZPP core-prim . gcd)
        (g$5890$jXZPP core-prim . for-each)
        (g$12440$jXZPP core-prim . floor)
        (g$12439$jXZPP core-prim . finite?)
        (g$12438$jXZPP core-prim . expt)
        (g$12437$jXZPP core-prim . exp)
        (g$12436$jXZPP core-prim . exact?)
        (g$12435$jXZPP core-prim . exact-integer-sqrt)
        (g$12434$jXZPP core-prim . exact)
        (g$6038$jXZPP core-prim . even?)
        (g$12433$jXZPP core-prim . error)
        (g$12432$jXZPP core-prim . eqv?)
        (g$12431$jXZPP core-prim . equal?)
        (g$12430$jXZPP core-prim . eq?)
        (g$12429$jXZPP core-prim . dynamic-wind)
        (g$12428$jXZPP core-prim . div0-and-mod0)
        (g$12427$jXZPP core-prim . mod0)
        (g$12426$jXZPP core-prim . div0)
        (g$12425$jXZPP core-prim . div-and-mod)
        (g$12424$jXZPP core-prim . mod)
        (g$12423$jXZPP core-prim . div)
        (g$12422$jXZPP core-prim . denominator)
        (g$12421$jXZPP core-prim . cos)
        (g$12420$jXZPP core-prim . cons)
        (g$12419$jXZPP core-prim . complex?)
        (g$12418$jXZPP core-prim . char?)
        (g$6125$jXZPP core-prim . char>?)
        (g$6127$jXZPP core-prim . char>=?)
        (g$6123$jXZPP core-prim . char=?)
        (g$6124$jXZPP core-prim . char<?)
        (g$6126$jXZPP core-prim . char<=?)
        (g$12417$jXZPP core-prim . char->integer)
        (g$12416$jXZPP core-prim . ceiling)
        (g$12415$jXZPP core-prim . call-with-values)
        (g$12414$jXZPP core-prim . call/cc)
        (g$12413$jXZPP core-prim . call-with-current-continuation)
        (g$6034$jXZPP core-prim . cddddr)
        (g$6033$jXZPP core-prim . cdddar)
        (g$6032$jXZPP core-prim . cddadr)
        (g$6031$jXZPP core-prim . cddaar)
        (g$6030$jXZPP core-prim . cdaddr)
        (g$6029$jXZPP core-prim . cdadar)
        (g$6028$jXZPP core-prim . cdaadr)
        (g$6027$jXZPP core-prim . cdaaar)
        (g$6026$jXZPP core-prim . cadddr)
        (g$6025$jXZPP core-prim . caddar)
        (g$6024$jXZPP core-prim . cadadr)
        (g$6023$jXZPP core-prim . cadaar)
        (g$6022$jXZPP core-prim . caaddr)
        (g$6021$jXZPP core-prim . caadar)
        (g$6020$jXZPP core-prim . caaadr)
        (g$6019$jXZPP core-prim . caaaar)
        (g$6018$jXZPP core-prim . cdddr)
        (g$6017$jXZPP core-prim . cddar)
        (g$6016$jXZPP core-prim . cdadr)
        (g$6015$jXZPP core-prim . cdaar)
        (g$6014$jXZPP core-prim . caddr)
        (g$6013$jXZPP core-prim . cadar)
        (g$6012$jXZPP core-prim . caadr)
        (g$6011$jXZPP core-prim . caaar)
        (g$6010$jXZPP core-prim . cddr)
        (g$6009$jXZPP core-prim . cdar)
        (g$6008$jXZPP core-prim . cadr)
        (g$6007$jXZPP core-prim . caar)
        (g$12412$jXZPP core-prim . cdr)
        (g$12411$jXZPP core-prim . car)
        (g$12410$jXZPP core-prim . boolean?)
        (g$6086$jXZPP core-prim . boolean=?)
        (g$12409$jXZPP core-prim . atan)
        (g$12408$jXZPP core-prim . assertion-violation)
        (g$12407$jXZPP core-prim . asin)
        (g$12406$jXZPP core-prim . apply)
        (g$12405$jXZPP core-prim . append)
        (g$12404$jXZPP core-prim . angle)
        (g$12403$jXZPP core-prim . acos)
        (g$12402$jXZPP core-prim . abs)
        (g$12401$jXZPP core-prim . /)
        (g$12400$jXZPP core-prim . *)
        (g$12399$jXZPP core-prim . -)
        (g$12398$jXZPP core-prim . +)
        (g$12397$jXZPP core-prim . >=)
        (g$12396$jXZPP core-prim . >)
        (g$12395$jXZPP core-prim . =)
        (g$12394$jXZPP core-prim . <=)
        (g$12393$jXZPP core-prim . <)
        (g$12392$jXZPP core-prim . make-record-printer)
        (g$12391$jXZPP core-prim . eqv-hash)
        (g$12390$jXZPP core-prim . reverse!)
        (g$12389$jXZPP core-prim . deserialize-port)
        (g$12388$jXZPP core-prim . serialize-port)
        (g$7505$jXZPP core-prim . enum-set?)
        (g$6962$jXZPP core-prim . make-promise)
        (g$12221$jXZPP core-prim . load/args)
        (g$7616$jXZPP core-prim . printf)
        (g$7617$jXZPP core-prim . fprintf)
        (g$7618$jXZPP core-prim . format)
        (g$12387$jXZPP core-prim . procedure-form)
        (g$12386$jXZPP core-prim . procedure-environment)
        (g$12385$jXZPP core-prim . procedure-name)
        (g$12384$jXZPP core-prim . procedure-arity)
        (g$12383$jXZPP core-prim . gc-collect)
        (g$12382$jXZPP core-prim . clr-type?)
        (g$12381$jXZPP core-prim . get-clr-type)
        (g$12380$jXZPP core-prim . get-command-line)
        (g$12379$jXZPP core-prim . vector-append)
        (g$12378$jXZPP core-prim . vector-filter)
        (g$12377$jXZPP core-prim . vector-reverse!)
        (g$12376$jXZPP core-prim . vector-contains?)
        (g$12375$jXZPP core-prim . vector-index-of)
        (g$12374$jXZPP core-prim . vector-copy)
        (g$12373$jXZPP core-prim . vector-binary-search)
        (g$12372$jXZPP core-prim . string-ci-compare)
        (g$12371$jXZPP core-prim . string-compare)
        (g$12370$jXZPP core-prim . string-format)
        (g$12218$jXZPP core-prim . trace-printer)
        (g$12369$jXZPP core-prim . make-traced-procedure)
        (g$7638$jXZPP core-prim . make-traced-macro)
        (g$9231$jXZPP core-prim . assertion-error)
        (g$12368$jXZPP core-prim . time-it)
        (g$7923$jXZPP core-prim . make-parameter)
        (g$12367$jXZPP core-prim . library-locator)
        (g$12366$jXZPP core-prim . get-library-paths)
        (g$12365$jXZPP core-prim . open-tcp-input/output-port)
        (g$12364$jXZPP core-prim . hashtable-for-each)
        (g$12363$jXZPP core-prim . hashtable-map)
        (g$9209$jXZPP core-prim . environment-bindings)
        (g$9212$jXZPP core-prim . environment-symbols)
        (g$9208$jXZPP core-prim . interaction-environment-symbols)
        (g$12362$jXZPP core-prim . optimization-level)
        (g$8383$jXZPP core-prim . library-path)
        (g$9218$jXZPP core-prim . expand->core)
        (g$9216$jXZPP core-prim . expand)
        (g$7697$jXZPP core-prim . expand-boot-cps)
        (g$7694$jXZPP core-prim . convert->cps)
        (g$8404$jXZPP core-prim . installed-libraries)
        (g$8395$jXZPP core-prim . uninstall-library)
        (g$12361$jXZPP $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12360$jXZPP $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12359$jXZPP $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12358$jXZPP $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12357$jXZPP $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12356$jXZPP
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12355$jXZPP
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12354$jXZPP
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12353$jXZPP
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12352$jXZPP $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12351$jXZPP
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12350$jXZPP $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12349$jXZPP $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12348$jXZPP $core-rtd &i/o-rtd &i/o-rcd)
        (g$12347$jXZPP $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12346$jXZPP $core-rtd &undefined-rtd &undefined-rcd)
        (g$12345$jXZPP $core-rtd &syntax-rtd &syntax-rcd)
        (g$12344$jXZPP $core-rtd &lexical-rtd &lexical-rcd)
        (g$12343$jXZPP
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12342$jXZPP $core-rtd &who-rtd &who-rcd)
        (g$12341$jXZPP $core-rtd &irritants-rtd &irritants-rcd)
        (g$12340$jXZPP $core-rtd &assertion-rtd &assertion-rcd)
        (g$12339$jXZPP $core-rtd &violation-rtd &violation-rcd)
        (g$12338$jXZPP $core-rtd &error-rtd &error-rcd)
        (g$12337$jXZPP $core-rtd &serious-rtd &serious-rcd)
        (g$12336$jXZPP $core-rtd &warning-rtd &warning-rcd)
        (g$12335$jXZPP $core-rtd &message-rtd &message-rcd)
        (g$12334$jXZPP $core-rtd &condition-rtd &condition-rcd)
        (g$12333$jXZPP macro . define-condition-type)
        (g$12332$jXZPP macro . define-enumeration)
        (g$12331$jXZPP macro . define-record-type)
        (g$12330$jXZPP macro . parent-rtd)
        (g$12329$jXZPP macro . nongenerative)
        (g$12328$jXZPP macro . opaque)
        (g$12327$jXZPP macro . sealed)
        (g$12326$jXZPP macro . protocol)
        (g$12325$jXZPP macro . parent)
        (g$12324$jXZPP macro . immutable)
        (g$12323$jXZPP macro . mutable)
        (g$12322$jXZPP macro . fields)
        (g$12321$jXZPP macro . error-handling-mode)
        (g$12320$jXZPP macro . file-options)
        (g$12319$jXZPP macro . buffer-mode)
        (g$12318$jXZPP macro . eol-style)
        (g$12317$jXZPP macro . guard)
        (g$12316$jXZPP macro . trace-letrec-syntax)
        (g$12315$jXZPP macro . trace-let-syntax)
        (g$12314$jXZPP macro . trace-define-syntax)
        (g$12313$jXZPP macro . trace-define)
        (g$12312$jXZPP macro . trace-lambda)
        (g$12311$jXZPP macro . unsyntax-splicing)
        (g$12310$jXZPP macro . unsyntax)
        (g$12309$jXZPP macro . unquote-splicing)
        (g$12308$jXZPP macro . unquote)
        (g$12307$jXZPP macro . _)
        (g$12306$jXZPP macro . else)
        (g$12305$jXZPP macro . =>)
        (g$12304$jXZPP macro . ...)
        (g$12303$jXZPP macro . assert)
        (g$12302$jXZPP macro . endianness)
        (g$12301$jXZPP macro . delay)
        (g$12300$jXZPP macro . time)
        (g$12299$jXZPP macro . or)
        (g$12298$jXZPP macro . and)
        (g$12297$jXZPP macro . do)
        (g$12296$jXZPP macro . cond)
        (g$12295$jXZPP macro . let*)
        (g$12294$jXZPP macro . let)
        (g$12293$jXZPP macro . identifier-syntax)
        (g$12292$jXZPP macro . with-syntax)
        (g$12291$jXZPP macro . quasisyntax)
        (g$12290$jXZPP macro . quasiquote)
        (g$12289$jXZPP macro . syntax-rules)
        (g$12288$jXZPP macro . include-into)
        (g$12287$jXZPP macro . include)
        (g$12286$jXZPP macro . define-struct)
        (g$12285$jXZPP macro . let-values)
        (g$12284$jXZPP macro . let*-values)
        (g$12283$jXZPP core-macro . record-constructor-descriptor)
        (g$12282$jXZPP core-macro . record-type-descriptor)
        (g$12281$jXZPP core-macro . fluid-let-syntax)
        (g$12280$jXZPP macro . case)
        (g$12279$jXZPP macro . parameterize)
        (g$12278$jXZPP macro . unless)
        (g$12277$jXZPP macro . when)
        (g$12276$jXZPP core-macro . if)
        (g$12275$jXZPP core-macro . letrec*)
        (g$12274$jXZPP core-macro . letrec)
        (g$12273$jXZPP core-macro . type-descriptor)
        (g$12272$jXZPP core-macro . case-lambda)
        (g$12271$jXZPP core-macro . lambda)
        (g$12270$jXZPP core-macro . syntax)
        (g$12269$jXZPP core-macro . syntax-case)
        (g$12268$jXZPP core-macro . quote)
        (g$12267$jXZPP core-macro . foreign-call)
        (g$12266$jXZPP letrec-syntax)
        (g$12265$jXZPP let-syntax)
        (g$12264$jXZPP set!)
        (g$12263$jXZPP export)
        (g$12262$jXZPP import)
        (g$12261$jXZPP library)
        (g$12260$jXZPP begin)
        (g$12259$jXZPP module)
        (g$12258$jXZPP define-syntax)
        (g$12257$jXZPP define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7590$jXZPP
      'g$12882$jXZPP
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12765$jXZPP)
        (eval-core . g$12764$jXZPP)
        (set-symbol-value! . g$12763$jXZPP)
        (symbol-value . g$12762$jXZPP)
        (gensym . g$12759$jXZPP)
        (void . g$12758$jXZPP))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11684$jXZPP
     g$trace-printer$11726$jXZPP
     (g$make-parameter$7044$jXZPP write))
   (g$command-line$11685$jXZPP
     g$command-line$11727$jXZPP
     (g$make-parameter$7044$jXZPP (get-command-line)))
   (g$local-library-path$11686$jXZPP
     g$local-library-path$11728$jXZPP
     (case-lambda
       ((g$filename$11697$jXZPP)
        (cons
          (g$get-directory-name$5601$jXZPP g$filename$11697$jXZPP)
          (g$library-path$7574$jXZPP)))))
   (g$load/args$11687$jXZPP
     g$load/args$11729$jXZPP
     (case-lambda
       ((g$filename$11698$jXZPP . g$args$11699$jXZPP)
        (begin
          (apply
            g$load-r6rs-top-level$11694$jXZPP
            g$filename$11698$jXZPP
            'load
            g$args$11699$jXZPP)
          (void)))))
   (g$load$11688$jXZPP
     g$load$11730$jXZPP
     (case-lambda
       ((g$filename$11700$jXZPP)
        (begin
          (apply
            g$load-r6rs-top-level$11694$jXZPP
            g$filename$11700$jXZPP
            'load
            (cdr (g$command-line$11685$jXZPP)))
          (void)))))
   (g$ironscheme-build$11689$jXZPP
     g$ironscheme-build$11731$jXZPP
     (case-lambda (() (g$load$11688$jXZPP '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11690$jXZPP
     g$eval-top-level$11732$jXZPP
     (case-lambda
       ((g$x$11701$jXZPP)
        (call/cc
          (case-lambda
            ((g$k$11702$jXZPP)
             (with-exception-handler
               (case-lambda
                 ((g$e$11703$jXZPP)
                  (begin
                    (display '"Unhandled exception:
")
                    (display g$e$11703$jXZPP)
                    (g$newline$6432$jXZPP)
                    (g$k$11702$jXZPP))))
               (case-lambda
                 (()
                  (g$eval$11657$jXZPP
                    g$x$11701$jXZPP
                    (g$interaction-environment$11682$jXZPP)))))))))))
   (g$compile-system-libraries$11691$jXZPP
     g$compile-system-libraries$11733$jXZPP
     (case-lambda
       (()
        (g$eval-top-level$11690$jXZPP
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11692$jXZPP
     g$compile$11734$jXZPP
     (case-lambda
       ((g$filename$11704$jXZPP)
        (g$load-r6rs-top-level$11694$jXZPP g$filename$11704$jXZPP 'compile))))
   (g$compile->closure$11693$jXZPP
     g$compile->closure$11735$jXZPP
     (case-lambda
       ((g$filename$11705$jXZPP)
        (g$load-r6rs-top-level$11694$jXZPP g$filename$11705$jXZPP 'closure))))
   (g$load-r6rs-top-level$11694$jXZPP
     g$load-r6rs-top-level$11736$jXZPP
     (case-lambda
       ((g$filename$11706$jXZPP g$how$11707$jXZPP . g$args$11708$jXZPP)
        ((case-lambda
           ((g$library-path$11711$jXZPP g$library-path$11712$jXZPP)
            ((case-lambda
               ((g$swap$11713$jXZPP)
                (dynamic-wind
                  g$swap$11713$jXZPP
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11714$jXZPP)
                         ((case-lambda
                            ((g$t$11715$jXZPP)
                             (if (g$memv$5071$jXZPP g$t$11715$jXZPP '(closure))
                               (g$pre-compile-r6rs-top-level$11680$jXZPP
                                 g$x*$11714$jXZPP)
                               (if (g$memv$5071$jXZPP g$t$11715$jXZPP '(load))
                                 ((case-lambda
                                    ((g$command-line$11718$jXZPP
                                       g$command-line$11719$jXZPP)
                                     ((case-lambda
                                        ((g$swap$11720$jXZPP)
                                         (dynamic-wind
                                           g$swap$11720$jXZPP
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11679$jXZPP
                                                 g$x*$11714$jXZPP))))
                                           g$swap$11720$jXZPP)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11721$jXZPP)
                                             (begin
                                               (g$command-line$11718$jXZPP
                                                 g$command-line$11719$jXZPP)
                                               (set! g$command-line$11719$jXZPP
                                                 g$t$11721$jXZPP))))
                                          (g$command-line$11718$jXZPP)))))))
                                  g$command-line$11685$jXZPP
                                  (cons
                                    g$filename$11706$jXZPP
                                    (g$map$5078$jXZPP
                                      (case-lambda
                                        ((g$x$11722$jXZPP)
                                         (g$format$6602$jXZPP
                                           '"~a"
                                           g$x$11722$jXZPP)))
                                      g$args$11708$jXZPP)))
                                 (if (g$memv$5071$jXZPP
                                       g$t$11715$jXZPP
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11679$jXZPP
                                       g$x*$11714$jXZPP)
                                     (g$serialize-all$7578$jXZPP
                                       serialize-library
                                       g$compile-core-expr$7293$jXZPP))
                                   (if '#f '#f (void)))))))
                          g$how$11707$jXZPP)))
                      (g$with-input-from-file$6428$jXZPP
                        g$filename$11706$jXZPP
                        (case-lambda
                          (()
                           ((letrec ((g$f$11723$jXZPP
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11724$jXZPP)
                                              (if (eof-object? g$x$11724$jXZPP)
                                                '()
                                                (cons
                                                  g$x$11724$jXZPP
                                                  (g$f$11723$jXZPP)))))
                                           (read-annotated))))))
                              g$f$11723$jXZPP))))))))
                  g$swap$11713$jXZPP)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11725$jXZPP)
                    (begin
                      (g$library-path$11711$jXZPP g$library-path$11712$jXZPP)
                      (set! g$library-path$11712$jXZPP g$t$11725$jXZPP))))
                 (g$library-path$11711$jXZPP)))))))
         g$library-path$7574$jXZPP
         (g$local-library-path$11686$jXZPP g$filename$11706$jXZPP)))))
   (g$fo$11695$jXZPP
     g$fo$11737$jXZPP
     (g$make-enumeration$6564$jXZPP '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7579$jXZPP
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11696$jXZPP)
         (if (g$serious-condition?$5863$jXZPP g$ex$11696$jXZPP)
           (raise g$ex$11696$jXZPP)
           (begin (display g$ex$11696$jXZPP) (g$newline$6432$jXZPP))))))
    (set-symbol-value! 'load g$load$11688$jXZPP)
    (set-symbol-value! 'compile g$compile$11692$jXZPP)
    (set-symbol-value! 'compile->closure g$compile->closure$11693$jXZPP)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11690$jXZPP)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11648$jXZPP)
    (set-symbol-value! 'expanded2core g$expanded->core$7292$jXZPP)
    (set-symbol-value! 'trace-printer g$trace-printer$11684$jXZPP)
    (set-symbol-value! 'convert->cps g$convert->cps$6936$jXZPP)
    (set-symbol-value! 'assertion-violation assertion-violation)
    (set-symbol-value! 'raise raise)
    (g$file-options-constructor$7045$jXZPP
      (g$enum-set-constructor$6567$jXZPP g$fo$11695$jXZPP))
    (g$library-path$7574$jXZPP (get-library-paths))))

