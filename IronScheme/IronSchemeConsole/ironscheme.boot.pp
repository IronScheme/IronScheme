;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* ((g$caar$7373$1DOkPG g$caar$7445$1DOkPG (case-lambda ((g$x$7404$1DOkPG) (car (car g$x$7404$1DOkPG))))) (g$cadr$7374$1DOkPG g$cadr$7446$1DOkPG (case-lambda ((g$x$7405$1DOkPG) (car (cdr g$x$7405$1DOkPG))))) (g$cdar$7375$1DOkPG g$cdar$7447$1DOkPG (case-lambda ((g$x$7406$1DOkPG) (cdr (car g$x$7406$1DOkPG))))) (g$cddr$7376$1DOkPG g$cddr$7448$1DOkPG (case-lambda ((g$x$7407$1DOkPG) (cdr (cdr g$x$7407$1DOkPG))))) (g$caaar$7377$1DOkPG g$caaar$7449$1DOkPG (case-lambda ((g$x$7408$1DOkPG) (g$caar$7373$1DOkPG (car g$x$7408$1DOkPG))))) (g$caadr$7378$1DOkPG g$caadr$7450$1DOkPG (case-lambda ((g$x$7409$1DOkPG) (g$caar$7373$1DOkPG (cdr g$x$7409$1DOkPG))))) (g$cadar$7379$1DOkPG g$cadar$7451$1DOkPG (case-lambda ((g$x$7410$1DOkPG) (g$cadr$7374$1DOkPG (car g$x$7410$1DOkPG))))) (g$caddr$7380$1DOkPG g$caddr$7452$1DOkPG (case-lambda ((g$x$7411$1DOkPG) (g$cadr$7374$1DOkPG (cdr g$x$7411$1DOkPG))))) (g$cdaar$7381$1DOkPG g$cdaar$7453$1DOkPG (case-lambda ((g$x$7412$1DOkPG) (g$cdar$7375$1DOkPG (car g$x$7412$1DOkPG))))) (g$cdadr$7382$1DOkPG g$cdadr$7454$1DOkPG (case-lambda ((g$x$7413$1DOkPG) (g$cdar$7375$1DOkPG (cdr g$x$7413$1DOkPG))))) (g$cddar$7383$1DOkPG g$cddar$7455$1DOkPG (case-lambda ((g$x$7414$1DOkPG) (g$cddr$7376$1DOkPG (car g$x$7414$1DOkPG))))) (g$cdddr$7384$1DOkPG g$cdddr$7456$1DOkPG (case-lambda ((g$x$7415$1DOkPG) (g$cddr$7376$1DOkPG (cdr g$x$7415$1DOkPG))))) (g$caaaar$7385$1DOkPG g$caaaar$7457$1DOkPG (case-lambda ((g$x$7416$1DOkPG) (g$caaar$7377$1DOkPG (car g$x$7416$1DOkPG))))) (g$caaadr$7386$1DOkPG g$caaadr$7458$1DOkPG (case-lambda ((g$x$7417$1DOkPG) (g$caaar$7377$1DOkPG (cdr g$x$7417$1DOkPG))))) (g$caadar$7387$1DOkPG g$caadar$7459$1DOkPG (case-lambda ((g$x$7418$1DOkPG) (g$caadr$7378$1DOkPG (car g$x$7418$1DOkPG))))) (g$caaddr$7388$1DOkPG g$caaddr$7460$1DOkPG (case-lambda ((g$x$7419$1DOkPG) (g$caadr$7378$1DOkPG (cdr g$x$7419$1DOkPG))))) (g$cadaar$7389$1DOkPG g$cadaar$7461$1DOkPG (case-lambda ((g$x$7420$1DOkPG) (g$cadar$7379$1DOkPG (car g$x$7420$1DOkPG))))) (g$cadadr$7390$1DOkPG g$cadadr$7462$1DOkPG (case-lambda ((g$x$7421$1DOkPG) (g$cadar$7379$1DOkPG (cdr g$x$7421$1DOkPG))))) (g$caddar$7391$1DOkPG g$caddar$7463$1DOkPG (case-lambda ((g$x$7422$1DOkPG) (g$caddr$7380$1DOkPG (car g$x$7422$1DOkPG))))) (g$cadddr$7392$1DOkPG g$cadddr$7464$1DOkPG (case-lambda ((g$x$7423$1DOkPG) (g$caddr$7380$1DOkPG (cdr g$x$7423$1DOkPG))))) (g$cdaaar$7393$1DOkPG g$cdaaar$7465$1DOkPG (case-lambda ((g$x$7424$1DOkPG) (g$cdaar$7381$1DOkPG (car g$x$7424$1DOkPG))))) (g$cdaadr$7394$1DOkPG g$cdaadr$7466$1DOkPG (case-lambda ((g$x$7425$1DOkPG) (g$cdaar$7381$1DOkPG (cdr g$x$7425$1DOkPG))))) (g$cdadar$7395$1DOkPG g$cdadar$7467$1DOkPG (case-lambda ((g$x$7426$1DOkPG) (g$cdadr$7382$1DOkPG (car g$x$7426$1DOkPG))))) (g$cdaddr$7396$1DOkPG g$cdaddr$7468$1DOkPG (case-lambda ((g$x$7427$1DOkPG) (g$cdadr$7382$1DOkPG (cdr g$x$7427$1DOkPG))))) (g$cddaar$7397$1DOkPG g$cddaar$7469$1DOkPG (case-lambda ((g$x$7428$1DOkPG) (g$cddar$7383$1DOkPG (car g$x$7428$1DOkPG))))) (g$cddadr$7398$1DOkPG g$cddadr$7470$1DOkPG (case-lambda ((g$x$7429$1DOkPG) (g$cddar$7383$1DOkPG (cdr g$x$7429$1DOkPG))))) (g$cdddar$7399$1DOkPG g$cdddar$7471$1DOkPG (case-lambda ((g$x$7430$1DOkPG) (g$cdddr$7384$1DOkPG (car g$x$7430$1DOkPG))))) (g$cddddr$7400$1DOkPG g$cddddr$7472$1DOkPG (case-lambda ((g$x$7431$1DOkPG) (g$cdddr$7384$1DOkPG (cdr g$x$7431$1DOkPG))))) (g$rationalize$7401$1DOkPG g$rationalize$7473$1DOkPG (case-lambda ((g$x$7432$1DOkPG g$e$7433$1DOkPG) (apply / (g$find-ratio$7402$1DOkPG g$x$7432$1DOkPG g$e$7433$1DOkPG))))) (g$find-ratio$7402$1DOkPG g$find-ratio$7474$1DOkPG (case-lambda ((g$x$7434$1DOkPG g$e$7435$1DOkPG) (g$find-ratio-between$7403$1DOkPG (- g$x$7434$1DOkPG g$e$7435$1DOkPG) (+ g$x$7434$1DOkPG g$e$7435$1DOkPG))))) (g$find-ratio-between$7403$1DOkPG g$find-ratio-between$7475$1DOkPG (case-lambda ((g$x$7436$1DOkPG g$y$7437$1DOkPG) (letrec* ((g$sr$7438$1DOkPG (case-lambda ((g$x$7440$1DOkPG g$y$7441$1DOkPG) ((case-lambda ((g$fx$7442$1DOkPG g$fy$7443$1DOkPG) (if (>= g$fx$7442$1DOkPG g$x$7440$1DOkPG) (list g$fx$7442$1DOkPG '1) (if (= g$fx$7442$1DOkPG g$fy$7443$1DOkPG) ((case-lambda ((g$rat$7444$1DOkPG) (list (+ (g$cadr$7374$1DOkPG g$rat$7444$1DOkPG) (* g$fx$7442$1DOkPG (car g$rat$7444$1DOkPG))) (car g$rat$7444$1DOkPG)))) (g$sr$7438$1DOkPG (/ (- g$y$7441$1DOkPG g$fy$7443$1DOkPG)) (/ (- g$x$7440$1DOkPG g$fx$7442$1DOkPG)))) (list (+ '1 g$fx$7442$1DOkPG) '1))))) (exact (floor g$x$7440$1DOkPG)) (exact (floor g$y$7441$1DOkPG))))))) (if (< g$y$7437$1DOkPG g$x$7436$1DOkPG) (g$find-ratio-between$7403$1DOkPG g$y$7437$1DOkPG g$x$7436$1DOkPG) (if (>= g$x$7436$1DOkPG g$y$7437$1DOkPG) (list g$x$7436$1DOkPG '1) (if (positive? g$x$7436$1DOkPG) (g$sr$7438$1DOkPG g$x$7436$1DOkPG g$y$7437$1DOkPG) (if (negative? g$y$7437$1DOkPG) ((case-lambda ((g$rat$7439$1DOkPG) (list (- (car g$rat$7439$1DOkPG)) (g$cadr$7374$1DOkPG g$rat$7439$1DOkPG)))) (g$sr$7438$1DOkPG (- g$y$7437$1DOkPG) (- g$x$7436$1DOkPG))) '(0 1)))))))))) (void))
(library-letrec* ((g$using$7671$1DOkPG g$using$7708$1DOkPG (clr-using-internal 'system)) (g$using$7673$1DOkPG g$using$7709$1DOkPG (clr-using-internal 'system.collections)) (g$make-eq-hashtable$7674$1DOkPG g$make-eq-hashtable$7710$1DOkPG (case-lambda (() (clr-new-internal 'hashtable)) ((g$k$7687$1DOkPG) (clr-new-internal 'hashtable (clr-cast-internal 'int32 g$k$7687$1DOkPG))))) (g$make-eqv-hashtable$7675$1DOkPG g$make-eqv-hashtable$7711$1DOkPG (case-lambda (() (clr-new-internal 'hashtable)) ((g$k$7688$1DOkPG) (clr-new-internal 'hashtable (clr-cast-internal 'int32 g$k$7688$1DOkPG))))) (g$hashtable-size$7676$1DOkPG g$hashtable-size$7712$1DOkPG (case-lambda ((g$ht$7689$1DOkPG) (clr-call-internal 'hashtable 'get_count g$ht$7689$1DOkPG)))) (g$hashtable-ref$7677$1DOkPG g$hashtable-ref$7713$1DOkPG (case-lambda ((g$ht$7690$1DOkPG g$key$7691$1DOkPG g$default$7692$1DOkPG) (letrec* ((g$r$7693$1DOkPG (clr-call-internal 'hashtable 'get_item g$ht$7690$1DOkPG g$key$7691$1DOkPG))) (if (not (null? g$r$7693$1DOkPG)) g$r$7693$1DOkPG g$default$7692$1DOkPG))))) (g$hashtable-set!$7678$1DOkPG g$hashtable-set!$7714$1DOkPG (case-lambda ((g$ht$7694$1DOkPG g$key$7695$1DOkPG g$obj$7696$1DOkPG) (clr-call-internal 'hashtable 'set_item g$ht$7694$1DOkPG g$key$7695$1DOkPG g$obj$7696$1DOkPG)))) (g$hashtable-delete!$7679$1DOkPG g$hashtable-delete!$7715$1DOkPG (case-lambda ((g$ht$7697$1DOkPG g$key$7698$1DOkPG) (clr-call-internal 'hashtable 'remove g$ht$7697$1DOkPG g$key$7698$1DOkPG)))) (g$hashtable-contains?$7680$1DOkPG g$hashtable-contains?$7716$1DOkPG (case-lambda ((g$ht$7699$1DOkPG g$key$7700$1DOkPG) (clr-call-internal 'hashtable 'containskey g$ht$7699$1DOkPG g$key$7700$1DOkPG)))) (g$hashtable-update!$7681$1DOkPG g$hashtable-update!$7717$1DOkPG (case-lambda ((g$ht$7701$1DOkPG g$key$7702$1DOkPG g$proc$7703$1DOkPG g$default$7704$1DOkPG) (g$hashtable-set!$7678$1DOkPG g$ht$7701$1DOkPG g$key$7702$1DOkPG (g$proc$7703$1DOkPG (g$hashtable-ref$7677$1DOkPG g$ht$7701$1DOkPG g$key$7702$1DOkPG g$default$7704$1DOkPG)))))) (g$hashtable-clear!$7682$1DOkPG g$hashtable-clear!$7718$1DOkPG (case-lambda ((g$ht$7705$1DOkPG) (clr-call-internal 'hashtable 'clear g$ht$7705$1DOkPG)) ((g$ht$7706$1DOkPG g$k$7707$1DOkPG) (clr-call-internal 'hashtable 'clear g$ht$7706$1DOkPG)))) (g$hashtable-equivalence-function$7683$1DOkPG g$hashtable-equivalence-function$7719$1DOkPG '#f) (g$hashtable-hash-function$7684$1DOkPG g$hashtable-hash-function$7720$1DOkPG '#f) (g$clear-usings$7686$1DOkPG g$clear-usings$7721$1DOkPG (clr-clear-usings-internal))) (void))
(library-letrec* ((g$using$7723$1DOkPG g$using$7789$1DOkPG (clr-using-internal 'system.io)) (g$file-exists?$7724$1DOkPG g$file-exists?$7790$1DOkPG (case-lambda ((g$fn$7752$1DOkPG) (clr-call-internal 'file 'exists '() g$fn$7752$1DOkPG)))) (g$delete-file$7725$1DOkPG g$delete-file$7791$1DOkPG (case-lambda ((g$fn$7753$1DOkPG) (clr-call-internal 'file 'delete '() g$fn$7753$1DOkPG)))) (g$file-copy$7726$1DOkPG g$file-copy$7792$1DOkPG (case-lambda ((g$from$7754$1DOkPG g$to$7755$1DOkPG) (g$file-copy$7726$1DOkPG g$from$7754$1DOkPG g$to$7755$1DOkPG '#f)) ((g$from$7756$1DOkPG g$to$7757$1DOkPG g$overwrite?$7758$1DOkPG) (clr-call-internal 'file 'copy '() g$from$7756$1DOkPG g$to$7757$1DOkPG g$overwrite?$7758$1DOkPG)))) (g$file-move$7727$1DOkPG g$file-move$7793$1DOkPG (case-lambda ((g$from$7759$1DOkPG g$to$7760$1DOkPG) (clr-call-internal 'file 'move '() g$from$7759$1DOkPG g$to$7760$1DOkPG)))) (g$file-create-time$7728$1DOkPG g$file-create-time$7794$1DOkPG (case-lambda ((g$fn$7761$1DOkPG) (clr-call-internal 'file 'getcreationtime '() g$fn$7761$1DOkPG)))) (g$file-access-time$7729$1DOkPG g$file-access-time$7795$1DOkPG (case-lambda ((g$fn$7762$1DOkPG) (clr-call-internal 'file 'getlastaccesstime '() g$fn$7762$1DOkPG)))) (g$file-modified-time$7730$1DOkPG g$file-modified-time$7796$1DOkPG (case-lambda ((g$fn$7763$1DOkPG) (clr-call-internal 'file 'getlastwritetime '() g$fn$7763$1DOkPG)))) (g$directory-exists?$7731$1DOkPG g$directory-exists?$7797$1DOkPG (case-lambda ((g$fn$7764$1DOkPG) (clr-call-internal 'directory 'exists '() g$fn$7764$1DOkPG)))) (g$delete-directory$7732$1DOkPG g$delete-directory$7798$1DOkPG (case-lambda ((g$dir$7765$1DOkPG) (g$delete-directory$7732$1DOkPG g$dir$7765$1DOkPG '#f)) ((g$dir$7766$1DOkPG g$recursive?$7767$1DOkPG) (clr-call-internal 'directory 'delete '() g$dir$7766$1DOkPG g$recursive?$7767$1DOkPG)))) (g$directory-move$7733$1DOkPG g$directory-move$7799$1DOkPG (case-lambda ((g$from$7768$1DOkPG g$to$7769$1DOkPG) (clr-call-internal 'directory 'move '() g$from$7768$1DOkPG g$to$7769$1DOkPG)))) (g$create-directory$7734$1DOkPG g$create-directory$7800$1DOkPG (case-lambda ((g$name$7770$1DOkPG) (clr-call-internal 'directory 'createdirectory '() g$name$7770$1DOkPG)))) (g$get-files$7735$1DOkPG g$get-files$7801$1DOkPG (case-lambda ((g$dir$7771$1DOkPG) (g$get-files$7735$1DOkPG g$dir$7771$1DOkPG '"*")) ((g$dir$7772$1DOkPG g$pattern$7773$1DOkPG) (clr-call-internal 'directory 'getfiles '() g$dir$7772$1DOkPG g$pattern$7773$1DOkPG)))) (g$get-directories$7736$1DOkPG g$get-directories$7802$1DOkPG (case-lambda ((g$dir$7774$1DOkPG) (g$get-directories$7736$1DOkPG g$dir$7774$1DOkPG '"*")) ((g$dir$7775$1DOkPG g$pattern$7776$1DOkPG) (clr-call-internal 'directory 'getdirectories '() g$dir$7775$1DOkPG g$pattern$7776$1DOkPG)))) (g$change-extension$7737$1DOkPG g$change-extension$7803$1DOkPG (case-lambda ((g$path$7777$1DOkPG g$extension$7778$1DOkPG) (clr-call-internal 'path 'changeextension '() g$path$7777$1DOkPG g$extension$7778$1DOkPG)))) (g$path-combine$7738$1DOkPG g$path-combine$7804$1DOkPG (case-lambda ((g$path1$7779$1DOkPG g$path2$7780$1DOkPG) (clr-call-internal 'path 'combine '() g$path1$7779$1DOkPG g$path2$7780$1DOkPG)))) (g$get-directory-name$7739$1DOkPG g$get-directory-name$7805$1DOkPG (case-lambda ((g$path$7781$1DOkPG) (clr-call-internal 'path 'getdirectoryname '() g$path$7781$1DOkPG)))) (g$get-extension$7740$1DOkPG g$get-extension$7806$1DOkPG (case-lambda ((g$path$7782$1DOkPG) (clr-call-internal 'path 'getextension '() g$path$7782$1DOkPG)))) (g$get-filename$7741$1DOkPG g$get-filename$7807$1DOkPG (case-lambda ((g$path$7783$1DOkPG) (clr-call-internal 'path 'getfilename '() g$path$7783$1DOkPG)))) (g$get-filename-without-extension$7742$1DOkPG g$get-filename-without-extension$7808$1DOkPG (case-lambda ((g$path$7784$1DOkPG) (clr-call-internal 'path 'getfilenamewithoutextension '() g$path$7784$1DOkPG)))) (g$get-full-path$7743$1DOkPG g$get-full-path$7809$1DOkPG (case-lambda ((g$path$7785$1DOkPG) (clr-call-internal 'path 'getfullpath '() g$path$7785$1DOkPG)))) (g$get-path-root$7744$1DOkPG g$get-path-root$7810$1DOkPG (case-lambda ((g$path$7786$1DOkPG) (clr-call-internal 'path 'getpathroot '() g$path$7786$1DOkPG)))) (g$get-random-filename$7745$1DOkPG g$get-random-filename$7811$1DOkPG (case-lambda (() (clr-call-internal 'path 'getrandomfilename '())))) (g$get-temp-filename$7746$1DOkPG g$get-temp-filename$7812$1DOkPG (case-lambda (() (clr-call-internal 'path 'gettempfilename '())))) (g$get-temp-path$7747$1DOkPG g$get-temp-path$7813$1DOkPG (case-lambda (() (clr-call-internal 'path 'gettemppath '())))) (g$path-rooted?$7748$1DOkPG g$path-rooted?$7814$1DOkPG (case-lambda ((g$path$7787$1DOkPG) (clr-call-internal 'path 'ispathrooted '() g$path$7787$1DOkPG)))) (g$path-has-extension?$7749$1DOkPG g$path-has-extension?$7815$1DOkPG (case-lambda ((g$path$7788$1DOkPG) (clr-call-internal 'path 'hasextension '() g$path$7788$1DOkPG)))) (g$clear-usings$7751$1DOkPG g$clear-usings$7816$1DOkPG (clr-clear-usings-internal))) (void))
(library-letrec* ((g$all-empty?$7817$1DOkPG g$all-empty?$7864$1DOkPG (case-lambda ((g$ls$7827$1DOkPG) ((case-lambda ((g$t$7828$1DOkPG) (if g$t$7828$1DOkPG g$t$7828$1DOkPG (begin '#f (if (null? (car g$ls$7827$1DOkPG)) (begin '#f (g$all-empty?$7817$1DOkPG (cdr g$ls$7827$1DOkPG))) '#f))))) (null? g$ls$7827$1DOkPG))))) (g$split$7818$1DOkPG g$split$7865$1DOkPG (case-lambda ((g$ls$7829$1DOkPG) (if (null? g$ls$7829$1DOkPG) (values '() '()) (call-with-values (case-lambda (() (g$split$7818$1DOkPG (cdr g$ls$7829$1DOkPG)))) (case-lambda ((g$cars$7830$1DOkPG g$cdrs$7831$1DOkPG) ((case-lambda ((g$a$7832$1DOkPG) (values (cons (car g$a$7832$1DOkPG) g$cars$7830$1DOkPG) (cons (cdr g$a$7832$1DOkPG) g$cdrs$7831$1DOkPG)))) (car g$ls$7829$1DOkPG))))))))) (g$for-all$7819$1DOkPG g$for-all$7866$1DOkPG (case-lambda ((g$f$7833$1DOkPG . g$args$7834$1DOkPG) (if (g$all-empty?$7817$1DOkPG g$args$7834$1DOkPG) '#t (call-with-values (case-lambda (() (g$split$7818$1DOkPG g$args$7834$1DOkPG))) (case-lambda ((g$cars$7835$1DOkPG g$cdrs$7836$1DOkPG) (if (apply g$f$7833$1DOkPG g$cars$7835$1DOkPG) (begin '#f (apply g$for-all$7819$1DOkPG g$f$7833$1DOkPG g$cdrs$7836$1DOkPG)) '#f)))))))) (g$exists$7820$1DOkPG g$exists$7867$1DOkPG (case-lambda ((g$f$7837$1DOkPG . g$args$7838$1DOkPG) (if (g$all-empty?$7817$1DOkPG g$args$7838$1DOkPG) '#f (call-with-values (case-lambda (() (g$split$7818$1DOkPG g$args$7838$1DOkPG))) (case-lambda ((g$cars$7839$1DOkPG g$cdrs$7840$1DOkPG) ((case-lambda ((g$t$7841$1DOkPG) (if g$t$7841$1DOkPG g$t$7841$1DOkPG (begin '#f (apply g$exists$7820$1DOkPG g$f$7837$1DOkPG g$cdrs$7840$1DOkPG))))) (apply g$f$7837$1DOkPG g$cars$7839$1DOkPG))))))))) (g$cons*$7821$1DOkPG g$cons*$7868$1DOkPG (case-lambda ((g$a$7842$1DOkPG . g$rest$7843$1DOkPG) ((letrec ((g$f$7844$1DOkPG (case-lambda ((g$a$7845$1DOkPG g$rest$7846$1DOkPG) (if (null? g$rest$7846$1DOkPG) g$a$7845$1DOkPG (cons g$a$7845$1DOkPG (g$f$7844$1DOkPG (car g$rest$7846$1DOkPG) (cdr g$rest$7846$1DOkPG)))))))) g$f$7844$1DOkPG) g$a$7842$1DOkPG g$rest$7843$1DOkPG)))) (g$fold-left$7822$1DOkPG g$fold-left$7869$1DOkPG (case-lambda ((g$combine$7847$1DOkPG g$nil$7848$1DOkPG g$list1$7849$1DOkPG . g$lists$7850$1DOkPG) (if (null? g$list1$7849$1DOkPG) g$nil$7848$1DOkPG (apply g$fold-left$7822$1DOkPG (g$cons*$7821$1DOkPG g$combine$7847$1DOkPG (apply g$combine$7847$1DOkPG (g$cons*$7821$1DOkPG g$nil$7848$1DOkPG (car g$list1$7849$1DOkPG) (map car g$lists$7850$1DOkPG))) (cdr g$list1$7849$1DOkPG) (map cdr g$lists$7850$1DOkPG))))))) (g$fold-right$7823$1DOkPG g$fold-right$7870$1DOkPG (case-lambda ((g$combine$7851$1DOkPG g$nil$7852$1DOkPG g$list1$7853$1DOkPG . g$lists$7854$1DOkPG) (if (null? g$list1$7853$1DOkPG) g$nil$7852$1DOkPG (apply g$combine$7851$1DOkPG (append (list (car g$list1$7853$1DOkPG)) (map car g$lists$7854$1DOkPG) (list (apply g$fold-right$7823$1DOkPG (g$cons*$7821$1DOkPG g$combine$7851$1DOkPG g$nil$7852$1DOkPG (cdr g$list1$7853$1DOkPG) (map cdr g$lists$7854$1DOkPG)))))))))) (g$remove$7824$1DOkPG g$remove$7871$1DOkPG (case-lambda ((g$obj$7855$1DOkPG g$list$7856$1DOkPG) (remp (case-lambda ((g$x$7857$1DOkPG) (equal? g$obj$7855$1DOkPG g$x$7857$1DOkPG))) g$list$7856$1DOkPG)))) (g$remv$7825$1DOkPG g$remv$7872$1DOkPG (case-lambda ((g$obj$7858$1DOkPG g$list$7859$1DOkPG) (remp (case-lambda ((g$x$7860$1DOkPG) (eqv? g$obj$7858$1DOkPG g$x$7860$1DOkPG))) g$list$7859$1DOkPG)))) (g$remq$7826$1DOkPG g$remq$7873$1DOkPG (case-lambda ((g$obj$7861$1DOkPG g$list$7862$1DOkPG) (remp (case-lambda ((g$x$7863$1DOkPG) (eq? g$obj$7861$1DOkPG g$x$7863$1DOkPG))) g$list$7862$1DOkPG))))) (void))
(library-letrec* ((g$native-endianness$7874$1DOkPG g$native-endianness$7985$1DOkPG (case-lambda (() 'little))) (g$bytevector-u16-ref$7875$1DOkPG g$bytevector-u16-ref$7986$1DOkPG (case-lambda ((g$bytevector$7903$1DOkPG g$k$7904$1DOkPG g$endianness$7905$1DOkPG) (bytevector-uint-ref g$bytevector$7903$1DOkPG g$k$7904$1DOkPG g$endianness$7905$1DOkPG '2)))) (g$bytevector-s16-ref$7876$1DOkPG g$bytevector-s16-ref$7987$1DOkPG (case-lambda ((g$bytevector$7906$1DOkPG g$k$7907$1DOkPG g$endianness$7908$1DOkPG) (bytevector-sint-ref g$bytevector$7906$1DOkPG g$k$7907$1DOkPG g$endianness$7908$1DOkPG '2)))) (g$bytevector-u16-native-ref$7877$1DOkPG g$bytevector-u16-native-ref$7988$1DOkPG (case-lambda ((g$bytevector$7909$1DOkPG g$k$7910$1DOkPG) (bytevector-uint-ref g$bytevector$7909$1DOkPG g$k$7910$1DOkPG (g$native-endianness$7874$1DOkPG) '2)))) (g$bytevector-s16-native-ref$7878$1DOkPG g$bytevector-s16-native-ref$7989$1DOkPG (case-lambda ((g$bytevector$7911$1DOkPG g$k$7912$1DOkPG) (bytevector-sint-ref g$bytevector$7911$1DOkPG g$k$7912$1DOkPG (g$native-endianness$7874$1DOkPG) '2)))) (g$bytevector-u16-set!$7879$1DOkPG g$bytevector-u16-set!$7990$1DOkPG (case-lambda ((g$bytevector$7913$1DOkPG g$k$7914$1DOkPG g$n$7915$1DOkPG g$endianness$7916$1DOkPG) (bytevector-uint-ref g$bytevector$7913$1DOkPG g$k$7914$1DOkPG g$endianness$7916$1DOkPG '2)))) (g$bytevector-s16-set!$7880$1DOkPG g$bytevector-s16-set!$7991$1DOkPG (case-lambda ((g$bytevector$7917$1DOkPG g$k$7918$1DOkPG g$n$7919$1DOkPG g$endianness$7920$1DOkPG) (bytevector-sint-ref g$bytevector$7917$1DOkPG g$k$7918$1DOkPG g$endianness$7920$1DOkPG '2)))) (g$bytevector-u16-native-set!$7881$1DOkPG g$bytevector-u16-native-set!$7992$1DOkPG (case-lambda ((g$bytevector$7921$1DOkPG g$k$7922$1DOkPG g$n$7923$1DOkPG) (bytevector-uint-ref g$bytevector$7921$1DOkPG g$k$7922$1DOkPG (g$native-endianness$7874$1DOkPG) '2)))) (g$bytevector-s16-native-set!$7882$1DOkPG g$bytevector-s16-native-set!$7993$1DOkPG (case-lambda ((g$bytevector$7924$1DOkPG g$k$7925$1DOkPG g$n$7926$1DOkPG) (bytevector-sint-ref g$bytevector$7924$1DOkPG g$k$7925$1DOkPG (g$native-endianness$7874$1DOkPG) '2)))) (g$bytevector-u32-ref$7883$1DOkPG g$bytevector-u32-ref$7994$1DOkPG (case-lambda ((g$bytevector$7927$1DOkPG g$k$7928$1DOkPG g$endianness$7929$1DOkPG) (bytevector-uint-ref g$bytevector$7927$1DOkPG g$k$7928$1DOkPG g$endianness$7929$1DOkPG '4)))) (g$bytevector-s32-ref$7884$1DOkPG g$bytevector-s32-ref$7995$1DOkPG (case-lambda ((g$bytevector$7930$1DOkPG g$k$7931$1DOkPG g$endianness$7932$1DOkPG) (bytevector-sint-ref g$bytevector$7930$1DOkPG g$k$7931$1DOkPG g$endianness$7932$1DOkPG '4)))) (g$bytevector-u32-native-ref$7885$1DOkPG g$bytevector-u32-native-ref$7996$1DOkPG (case-lambda ((g$bytevector$7933$1DOkPG g$k$7934$1DOkPG) (bytevector-uint-ref g$bytevector$7933$1DOkPG g$k$7934$1DOkPG (g$native-endianness$7874$1DOkPG) '4)))) (g$bytevector-s32-native-ref$7886$1DOkPG g$bytevector-s32-native-ref$7997$1DOkPG (case-lambda ((g$bytevector$7935$1DOkPG g$k$7936$1DOkPG) (bytevector-sint-ref g$bytevector$7935$1DOkPG g$k$7936$1DOkPG (g$native-endianness$7874$1DOkPG) '4)))) (g$bytevector-u32-set!$7887$1DOkPG g$bytevector-u32-set!$7998$1DOkPG (case-lambda ((g$bytevector$7937$1DOkPG g$k$7938$1DOkPG g$n$7939$1DOkPG g$endianness$7940$1DOkPG) (bytevector-uint-ref g$bytevector$7937$1DOkPG g$k$7938$1DOkPG g$endianness$7940$1DOkPG '4)))) (g$bytevector-s32-set!$7888$1DOkPG g$bytevector-s32-set!$7999$1DOkPG (case-lambda ((g$bytevector$7941$1DOkPG g$k$7942$1DOkPG g$n$7943$1DOkPG g$endianness$7944$1DOkPG) (bytevector-sint-ref g$bytevector$7941$1DOkPG g$k$7942$1DOkPG g$endianness$7944$1DOkPG '4)))) (g$bytevector-u32-native-set!$7889$1DOkPG g$bytevector-u32-native-set!$8000$1DOkPG (case-lambda ((g$bytevector$7945$1DOkPG g$k$7946$1DOkPG g$n$7947$1DOkPG) (bytevector-uint-ref g$bytevector$7945$1DOkPG g$k$7946$1DOkPG (g$native-endianness$7874$1DOkPG) '4)))) (g$bytevector-s32-native-set!$7890$1DOkPG g$bytevector-s32-native-set!$8001$1DOkPG (case-lambda ((g$bytevector$7948$1DOkPG g$k$7949$1DOkPG g$n$7950$1DOkPG) (bytevector-sint-ref g$bytevector$7948$1DOkPG g$k$7949$1DOkPG (g$native-endianness$7874$1DOkPG) '4)))) (g$bytevector-u64-ref$7891$1DOkPG g$bytevector-u64-ref$8002$1DOkPG (case-lambda ((g$bytevector$7951$1DOkPG g$k$7952$1DOkPG g$endianness$7953$1DOkPG) (bytevector-uint-ref g$bytevector$7951$1DOkPG g$k$7952$1DOkPG g$endianness$7953$1DOkPG '8)))) (g$bytevector-s64-ref$7892$1DOkPG g$bytevector-s64-ref$8003$1DOkPG (case-lambda ((g$bytevector$7954$1DOkPG g$k$7955$1DOkPG g$endianness$7956$1DOkPG) (bytevector-sint-ref g$bytevector$7954$1DOkPG g$k$7955$1DOkPG g$endianness$7956$1DOkPG '8)))) (g$bytevector-u64-native-ref$7893$1DOkPG g$bytevector-u64-native-ref$8004$1DOkPG (case-lambda ((g$bytevector$7957$1DOkPG g$k$7958$1DOkPG) (bytevector-uint-ref g$bytevector$7957$1DOkPG g$k$7958$1DOkPG (g$native-endianness$7874$1DOkPG) '8)))) (g$bytevector-s64-native-ref$7894$1DOkPG g$bytevector-s64-native-ref$8005$1DOkPG (case-lambda ((g$bytevector$7959$1DOkPG g$k$7960$1DOkPG) (bytevector-sint-ref g$bytevector$7959$1DOkPG g$k$7960$1DOkPG (g$native-endianness$7874$1DOkPG) '8)))) (g$bytevector-u64-set!$7895$1DOkPG g$bytevector-u64-set!$8006$1DOkPG (case-lambda ((g$bytevector$7961$1DOkPG g$k$7962$1DOkPG g$n$7963$1DOkPG g$endianness$7964$1DOkPG) (bytevector-uint-ref g$bytevector$7961$1DOkPG g$k$7962$1DOkPG g$endianness$7964$1DOkPG '8)))) (g$bytevector-s64-set!$7896$1DOkPG g$bytevector-s64-set!$8007$1DOkPG (case-lambda ((g$bytevector$7965$1DOkPG g$k$7966$1DOkPG g$n$7967$1DOkPG g$endianness$7968$1DOkPG) (bytevector-sint-ref g$bytevector$7965$1DOkPG g$k$7966$1DOkPG g$endianness$7968$1DOkPG '8)))) (g$bytevector-u64-native-set!$7897$1DOkPG g$bytevector-u64-native-set!$8008$1DOkPG (case-lambda ((g$bytevector$7969$1DOkPG g$k$7970$1DOkPG g$n$7971$1DOkPG) (bytevector-uint-ref g$bytevector$7969$1DOkPG g$k$7970$1DOkPG (g$native-endianness$7874$1DOkPG) '8)))) (g$bytevector-s64-native-set!$7898$1DOkPG g$bytevector-s64-native-set!$8009$1DOkPG (case-lambda ((g$bytevector$7972$1DOkPG g$k$7973$1DOkPG g$n$7974$1DOkPG) (bytevector-sint-ref g$bytevector$7972$1DOkPG g$k$7973$1DOkPG (g$native-endianness$7874$1DOkPG) '8)))) (g$bytevector-ieee-single-native-ref$7899$1DOkPG g$bytevector-ieee-single-native-ref$8010$1DOkPG (case-lambda ((g$bytevector$7975$1DOkPG g$k$7976$1DOkPG) (bytevector-ieee-single-ref g$bytevector$7975$1DOkPG g$k$7976$1DOkPG (g$native-endianness$7874$1DOkPG))))) (g$bytevector-ieee-double-native-ref$7900$1DOkPG g$bytevector-ieee-double-native-ref$8011$1DOkPG (case-lambda ((g$bytevector$7977$1DOkPG g$k$7978$1DOkPG) (bytevector-ieee-double-ref g$bytevector$7977$1DOkPG g$k$7978$1DOkPG (g$native-endianness$7874$1DOkPG))))) (g$bytevector-ieee-single-native-set!$7901$1DOkPG g$bytevector-ieee-single-native-set!$8012$1DOkPG (case-lambda ((g$bytevector$7979$1DOkPG g$k$7980$1DOkPG g$x$7981$1DOkPG) (bytevector-ieee-single-set! g$bytevector$7979$1DOkPG g$k$7980$1DOkPG g$x$7981$1DOkPG (g$native-endianness$7874$1DOkPG))))) (g$bytevector-ieee-double-native-set!$7902$1DOkPG g$bytevector-ieee-double-native-set!$8013$1DOkPG (case-lambda ((g$bytevector$7982$1DOkPG g$k$7983$1DOkPG g$x$7984$1DOkPG) (bytevector-ieee-double-set! g$bytevector$7982$1DOkPG g$k$7983$1DOkPG g$x$7984$1DOkPG (g$native-endianness$7874$1DOkPG)))))) (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* ((g$8641$8014$1DOkPG g$8641$8109$1DOkPG (make-record-type-descriptor '&condition '#f 'g$8644$1DOkPG '#f '#f '#())) (g$8643$8015$1DOkPG g$8643$8110$1DOkPG '#f) (g$8642$8016$1DOkPG g$8642$8111$1DOkPG (make-record-constructor-descriptor g$8641$8014$1DOkPG '#f g$8643$8015$1DOkPG)) (g$&condition?$8017$1DOkPG g$&condition?$8112$1DOkPG (record-predicate g$8641$8014$1DOkPG)) (g$make-&condition$8018$1DOkPG g$make-&condition$8113$1DOkPG (record-constructor g$8642$8016$1DOkPG)) (g$&condition-rtd$8019$1DOkPG g$&condition-rtd$8114$1DOkPG g$8641$8014$1DOkPG) (g$&condition-rcd$8020$1DOkPG g$&condition-rcd$8115$1DOkPG g$8642$8016$1DOkPG) (g$8657$8021$1DOkPG g$8657$8116$1DOkPG (make-record-type-descriptor '&message g$8641$8014$1DOkPG 'g$8660$1DOkPG '#f '#f '#((immutable message)))) (g$8659$8022$1DOkPG g$8659$8117$1DOkPG '#f) (g$8658$8023$1DOkPG g$8658$8118$1DOkPG (make-record-constructor-descriptor g$8657$8021$1DOkPG g$8642$8016$1DOkPG g$8659$8022$1DOkPG)) (g$8656$8024$1DOkPG g$8656$8119$1DOkPG (record-predicate g$8657$8021$1DOkPG)) (g$make-message-condition$8025$1DOkPG g$make-message-condition$8120$1DOkPG (record-constructor g$8658$8023$1DOkPG)) (g$8655$8026$1DOkPG g$8655$8121$1DOkPG (record-accessor g$8657$8021$1DOkPG '0)) (g$message-condition?$8027$1DOkPG g$message-condition?$8122$1DOkPG (condition-predicate g$8657$8021$1DOkPG)) (g$condition-message$8028$1DOkPG g$condition-message$8123$1DOkPG (condition-accessor g$8657$8021$1DOkPG g$8655$8026$1DOkPG)) (g$8673$8029$1DOkPG g$8673$8124$1DOkPG (make-record-type-descriptor '&warning g$8641$8014$1DOkPG 'g$8676$1DOkPG '#f '#f '#())) (g$8675$8030$1DOkPG g$8675$8125$1DOkPG '#f) (g$8674$8031$1DOkPG g$8674$8126$1DOkPG (make-record-constructor-descriptor g$8673$8029$1DOkPG g$8642$8016$1DOkPG g$8675$8030$1DOkPG)) (g$8672$8032$1DOkPG g$8672$8127$1DOkPG (record-predicate g$8673$8029$1DOkPG)) (g$make-warning$8033$1DOkPG g$make-warning$8128$1DOkPG (record-constructor g$8674$8031$1DOkPG)) (g$warning?$8034$1DOkPG g$warning?$8129$1DOkPG (condition-predicate g$8673$8029$1DOkPG)) (g$8687$8035$1DOkPG g$8687$8130$1DOkPG (make-record-type-descriptor '&serious g$8641$8014$1DOkPG 'g$8690$1DOkPG '#f '#f '#())) (g$8689$8036$1DOkPG g$8689$8131$1DOkPG '#f) (g$8688$8037$1DOkPG g$8688$8132$1DOkPG (make-record-constructor-descriptor g$8687$8035$1DOkPG g$8642$8016$1DOkPG g$8689$8036$1DOkPG)) (g$8686$8038$1DOkPG g$8686$8133$1DOkPG (record-predicate g$8687$8035$1DOkPG)) (g$make-serious-condition$8039$1DOkPG g$make-serious-condition$8134$1DOkPG (record-constructor g$8688$8037$1DOkPG)) (g$serious-condition?$8040$1DOkPG g$serious-condition?$8135$1DOkPG (condition-predicate g$8687$8035$1DOkPG)) (g$8701$8041$1DOkPG g$8701$8136$1DOkPG (make-record-type-descriptor '&error g$8687$8035$1DOkPG 'g$8704$1DOkPG '#f '#f '#())) (g$8703$8042$1DOkPG g$8703$8137$1DOkPG '#f) (g$8702$8043$1DOkPG g$8702$8138$1DOkPG (make-record-constructor-descriptor g$8701$8041$1DOkPG g$8688$8037$1DOkPG g$8703$8042$1DOkPG)) (g$8700$8044$1DOkPG g$8700$8139$1DOkPG (record-predicate g$8701$8041$1DOkPG)) (g$make-error$8045$1DOkPG g$make-error$8140$1DOkPG (record-constructor g$8702$8043$1DOkPG)) (g$error?$8046$1DOkPG g$error?$8141$1DOkPG (condition-predicate g$8701$8041$1DOkPG)) (g$8715$8047$1DOkPG g$8715$8142$1DOkPG (make-record-type-descriptor '&violation g$8687$8035$1DOkPG 'g$8718$1DOkPG '#f '#f '#())) (g$8717$8048$1DOkPG g$8717$8143$1DOkPG '#f) (g$8716$8049$1DOkPG g$8716$8144$1DOkPG (make-record-constructor-descriptor g$8715$8047$1DOkPG g$8688$8037$1DOkPG g$8717$8048$1DOkPG)) (g$8714$8050$1DOkPG g$8714$8145$1DOkPG (record-predicate g$8715$8047$1DOkPG)) (g$make-violation$8051$1DOkPG g$make-violation$8146$1DOkPG (record-constructor g$8716$8049$1DOkPG)) (g$violation?$8052$1DOkPG g$violation?$8147$1DOkPG (condition-predicate g$8715$8047$1DOkPG)) (g$8729$8053$1DOkPG g$8729$8148$1DOkPG (make-record-type-descriptor '&assertion g$8715$8047$1DOkPG 'g$8732$1DOkPG '#f '#f '#())) (g$8731$8054$1DOkPG g$8731$8149$1DOkPG '#f) (g$8730$8055$1DOkPG g$8730$8150$1DOkPG (make-record-constructor-descriptor g$8729$8053$1DOkPG g$8716$8049$1DOkPG g$8731$8054$1DOkPG)) (g$8728$8056$1DOkPG g$8728$8151$1DOkPG (record-predicate g$8729$8053$1DOkPG)) (g$make-assertion-violation$8057$1DOkPG g$make-assertion-violation$8152$1DOkPG (record-constructor g$8730$8055$1DOkPG)) (g$assertion-violation?$8058$1DOkPG g$assertion-violation?$8153$1DOkPG (condition-predicate g$8729$8053$1DOkPG)) (g$8744$8059$1DOkPG g$8744$8154$1DOkPG (make-record-type-descriptor '&irritants g$8641$8014$1DOkPG 'g$8747$1DOkPG '#f '#f '#((immutable irritants)))) (g$8746$8060$1DOkPG g$8746$8155$1DOkPG '#f) (g$8745$8061$1DOkPG g$8745$8156$1DOkPG (make-record-constructor-descriptor g$8744$8059$1DOkPG g$8642$8016$1DOkPG g$8746$8060$1DOkPG)) (g$8743$8062$1DOkPG g$8743$8157$1DOkPG (record-predicate g$8744$8059$1DOkPG)) (g$make-irritants-condition$8063$1DOkPG g$make-irritants-condition$8158$1DOkPG (record-constructor g$8745$8061$1DOkPG)) (g$8742$8064$1DOkPG g$8742$8159$1DOkPG (record-accessor g$8744$8059$1DOkPG '0)) (g$irritants-condition?$8065$1DOkPG g$irritants-condition?$8160$1DOkPG (condition-predicate g$8744$8059$1DOkPG)) (g$condition-irritants$8066$1DOkPG g$condition-irritants$8161$1DOkPG (condition-accessor g$8744$8059$1DOkPG g$8742$8064$1DOkPG)) (g$8761$8067$1DOkPG g$8761$8162$1DOkPG (make-record-type-descriptor '&who g$8641$8014$1DOkPG 'g$8764$1DOkPG '#f '#f '#((immutable who)))) (g$8763$8068$1DOkPG g$8763$8163$1DOkPG '#f) (g$8762$8069$1DOkPG g$8762$8164$1DOkPG (make-record-constructor-descriptor g$8761$8067$1DOkPG g$8642$8016$1DOkPG g$8763$8068$1DOkPG)) (g$8760$8070$1DOkPG g$8760$8165$1DOkPG (record-predicate g$8761$8067$1DOkPG)) (g$make-who-condition$8071$1DOkPG g$make-who-condition$8166$1DOkPG (record-constructor g$8762$8069$1DOkPG)) (g$8759$8072$1DOkPG g$8759$8167$1DOkPG (record-accessor g$8761$8067$1DOkPG '0)) (g$who-condition?$8073$1DOkPG g$who-condition?$8168$1DOkPG (condition-predicate g$8761$8067$1DOkPG)) (g$condition-who$8074$1DOkPG g$condition-who$8169$1DOkPG (condition-accessor g$8761$8067$1DOkPG g$8759$8072$1DOkPG)) (g$8777$8075$1DOkPG g$8777$8170$1DOkPG (make-record-type-descriptor '&non-continuable g$8715$8047$1DOkPG 'g$8780$1DOkPG '#f '#f '#())) (g$8779$8076$1DOkPG g$8779$8171$1DOkPG '#f) (g$8778$8077$1DOkPG g$8778$8172$1DOkPG (make-record-constructor-descriptor g$8777$8075$1DOkPG g$8716$8049$1DOkPG g$8779$8076$1DOkPG)) (g$8776$8078$1DOkPG g$8776$8173$1DOkPG (record-predicate g$8777$8075$1DOkPG)) (g$make-non-continuable-violation$8079$1DOkPG g$make-non-continuable-violation$8174$1DOkPG (record-constructor g$8778$8077$1DOkPG)) (g$non-continuable-violation?$8080$1DOkPG g$non-continuable-violation?$8175$1DOkPG (condition-predicate g$8777$8075$1DOkPG)) (g$8791$8081$1DOkPG g$8791$8176$1DOkPG (make-record-type-descriptor '&implementation-restriction g$8715$8047$1DOkPG 'g$8794$1DOkPG '#f '#f '#())) (g$8793$8082$1DOkPG g$8793$8177$1DOkPG '#f) (g$8792$8083$1DOkPG g$8792$8178$1DOkPG (make-record-constructor-descriptor g$8791$8081$1DOkPG g$8716$8049$1DOkPG g$8793$8082$1DOkPG)) (g$8790$8084$1DOkPG g$8790$8179$1DOkPG (record-predicate g$8791$8081$1DOkPG)) (g$make-implementation-restriction-violation$8085$1DOkPG g$make-implementation-restriction-violation$8180$1DOkPG (record-constructor g$8792$8083$1DOkPG)) (g$implementation-restriction-violation?$8086$1DOkPG g$implementation-restriction-violation?$8181$1DOkPG (condition-predicate g$8791$8081$1DOkPG)) (g$8805$8087$1DOkPG g$8805$8182$1DOkPG (make-record-type-descriptor '&lexical g$8715$8047$1DOkPG 'g$8808$1DOkPG '#f '#f '#())) (g$8807$8088$1DOkPG g$8807$8183$1DOkPG '#f) (g$8806$8089$1DOkPG g$8806$8184$1DOkPG (make-record-constructor-descriptor g$8805$8087$1DOkPG g$8716$8049$1DOkPG g$8807$8088$1DOkPG)) (g$8804$8090$1DOkPG g$8804$8185$1DOkPG (record-predicate g$8805$8087$1DOkPG)) (g$make-lexical-violation$8091$1DOkPG g$make-lexical-violation$8186$1DOkPG (record-constructor g$8806$8089$1DOkPG)) (g$lexical-violation?$8092$1DOkPG g$lexical-violation?$8187$1DOkPG (condition-predicate g$8805$8087$1DOkPG)) (g$8821$8093$1DOkPG g$8821$8188$1DOkPG (make-record-type-descriptor '&syntax g$8715$8047$1DOkPG 'g$8824$1DOkPG '#f '#f '#((immutable form) (immutable subform)))) (g$8823$8094$1DOkPG g$8823$8189$1DOkPG '#f) (g$8822$8095$1DOkPG g$8822$8190$1DOkPG (make-record-constructor-descriptor g$8821$8093$1DOkPG g$8716$8049$1DOkPG g$8823$8094$1DOkPG)) (g$8820$8096$1DOkPG g$8820$8191$1DOkPG (record-predicate g$8821$8093$1DOkPG)) (g$make-syntax-violation$8097$1DOkPG g$make-syntax-violation$8192$1DOkPG (record-constructor g$8822$8095$1DOkPG)) (g$8818$8098$1DOkPG g$8818$8193$1DOkPG (record-accessor g$8821$8093$1DOkPG '0)) (g$8819$8099$1DOkPG g$8819$8194$1DOkPG (record-accessor g$8821$8093$1DOkPG '1)) (g$syntax-violation?$8100$1DOkPG g$syntax-violation?$8195$1DOkPG (condition-predicate g$8821$8093$1DOkPG)) (g$syntax-violation-form$8101$1DOkPG g$syntax-violation-form$8196$1DOkPG (condition-accessor g$8821$8093$1DOkPG g$8818$8098$1DOkPG)) (g$syntax-violation-subform$8102$1DOkPG g$syntax-violation-subform$8197$1DOkPG (condition-accessor g$8821$8093$1DOkPG g$8819$8099$1DOkPG)) (g$8839$8103$1DOkPG g$8839$8198$1DOkPG (make-record-type-descriptor '&undefined g$8715$8047$1DOkPG 'g$8842$1DOkPG '#f '#f '#())) (g$8841$8104$1DOkPG g$8841$8199$1DOkPG '#f) (g$8840$8105$1DOkPG g$8840$8200$1DOkPG (make-record-constructor-descriptor g$8839$8103$1DOkPG g$8716$8049$1DOkPG g$8841$8104$1DOkPG)) (g$8838$8106$1DOkPG g$8838$8201$1DOkPG (record-predicate g$8839$8103$1DOkPG)) (g$make-undefined-violation$8107$1DOkPG g$make-undefined-violation$8202$1DOkPG (record-constructor g$8840$8105$1DOkPG)) (g$undefined-violation?$8108$1DOkPG g$undefined-violation?$8203$1DOkPG (condition-predicate g$8839$8103$1DOkPG))) (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* ((g$sign$8204$1DOkPG g$sign$8215$1DOkPG (case-lambda ((g$n$8208$1DOkPG) (if (> g$n$8208$1DOkPG '0) '1 (if (< g$n$8208$1DOkPG '0) '-1 '0))))) (g$quotient$8205$1DOkPG g$quotient$8216$1DOkPG (case-lambda ((g$n1$8209$1DOkPG g$n2$8210$1DOkPG) (* (g$sign$8204$1DOkPG g$n1$8209$1DOkPG) (g$sign$8204$1DOkPG g$n2$8210$1DOkPG) (div (abs g$n1$8209$1DOkPG) (abs g$n2$8210$1DOkPG)))))) (g$remainder$8206$1DOkPG g$remainder$8217$1DOkPG (case-lambda ((g$n1$8211$1DOkPG g$n2$8212$1DOkPG) (* (g$sign$8204$1DOkPG g$n1$8211$1DOkPG) (mod (abs g$n1$8211$1DOkPG) (abs g$n2$8212$1DOkPG)))))) (g$modulo$8207$1DOkPG g$modulo$8218$1DOkPG (case-lambda ((g$n1$8213$1DOkPG g$n2$8214$1DOkPG) (* (g$sign$8204$1DOkPG g$n2$8214$1DOkPG) (mod (* (g$sign$8204$1DOkPG g$n2$8214$1DOkPG) g$n1$8213$1DOkPG) (abs g$n2$8214$1DOkPG))))))) (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* ((g$bitwise-if$8256$1DOkPG g$bitwise-if$8307$1DOkPG (case-lambda ((g$ei1$8264$1DOkPG g$ei2$8265$1DOkPG g$ei3$8266$1DOkPG) (bitwise-ior (bitwise-and g$ei1$8264$1DOkPG g$ei2$8265$1DOkPG) (bitwise-and (bitwise-not g$ei1$8264$1DOkPG) g$ei3$8266$1DOkPG))))) (g$bitwise-copy-bit$8257$1DOkPG g$bitwise-copy-bit$8308$1DOkPG (case-lambda ((g$ei1$8267$1DOkPG g$ei2$8268$1DOkPG g$ei3$8269$1DOkPG) ((case-lambda ((g$mask$8270$1DOkPG) ((case-lambda (() (g$bitwise-if$8256$1DOkPG g$mask$8270$1DOkPG (g$bitwise-arithmetic-shift-left$8260$1DOkPG g$ei3$8269$1DOkPG g$ei2$8268$1DOkPG) g$ei1$8267$1DOkPG)))))) (g$bitwise-arithmetic-shift-left$8260$1DOkPG '1 g$ei2$8268$1DOkPG))))) (g$bitwise-bit-field$8258$1DOkPG g$bitwise-bit-field$8309$1DOkPG (case-lambda ((g$ei1$8271$1DOkPG g$ei2$8272$1DOkPG g$ei3$8273$1DOkPG) ((case-lambda ((g$mask$8274$1DOkPG) (g$bitwise-arithmetic-shift-right$8261$1DOkPG (bitwise-and g$ei1$8271$1DOkPG g$mask$8274$1DOkPG) g$ei2$8272$1DOkPG))) (bitwise-not (g$bitwise-arithmetic-shift-left$8260$1DOkPG '-1 g$ei3$8273$1DOkPG)))))) (g$bitwise-copy-bit-field$8259$1DOkPG g$bitwise-copy-bit-field$8310$1DOkPG (case-lambda ((g$ei1$8275$1DOkPG g$ei2$8276$1DOkPG g$ei3$8277$1DOkPG g$ei4$8278$1DOkPG) ((case-lambda ((g$to$8279$1DOkPG) ((case-lambda ((g$start$8280$1DOkPG) ((case-lambda ((g$end$8281$1DOkPG) ((case-lambda ((g$from$8282$1DOkPG) ((case-lambda ((g$mask1$8283$1DOkPG) ((case-lambda ((g$mask2$8284$1DOkPG) ((case-lambda ((g$mask$8285$1DOkPG) ((case-lambda (() (g$bitwise-if$8256$1DOkPG g$mask$8285$1DOkPG (g$bitwise-arithmetic-shift-left$8260$1DOkPG g$from$8282$1DOkPG g$start$8280$1DOkPG) g$to$8279$1DOkPG)))))) (bitwise-and g$mask1$8283$1DOkPG g$mask2$8284$1DOkPG)))) (bitwise-not (g$bitwise-arithmetic-shift-left$8260$1DOkPG '-1 g$end$8281$1DOkPG))))) (g$bitwise-arithmetic-shift-left$8260$1DOkPG '-1 g$start$8280$1DOkPG)))) g$ei4$8278$1DOkPG))) g$ei3$8277$1DOkPG))) g$ei2$8276$1DOkPG))) g$ei1$8275$1DOkPG)))) (g$bitwise-arithmetic-shift-left$8260$1DOkPG g$bitwise-arithmetic-shift-left$8311$1DOkPG (case-lambda ((g$ei1$8286$1DOkPG g$ei2$8287$1DOkPG) (bitwise-arithmetic-shift g$ei1$8286$1DOkPG g$ei2$8287$1DOkPG)))) (g$bitwise-arithmetic-shift-right$8261$1DOkPG g$bitwise-arithmetic-shift-right$8312$1DOkPG (case-lambda ((g$ei1$8288$1DOkPG g$ei2$8289$1DOkPG) (bitwise-arithmetic-shift g$ei1$8288$1DOkPG (- g$ei2$8289$1DOkPG))))) (g$bitwise-rotate-bit-field$8262$1DOkPG g$bitwise-rotate-bit-field$8313$1DOkPG (case-lambda ((g$ei1$8290$1DOkPG g$ei2$8291$1DOkPG g$ei3$8292$1DOkPG g$ei4$8293$1DOkPG) ((case-lambda ((g$n$8294$1DOkPG) ((case-lambda ((g$start$8295$1DOkPG) ((case-lambda ((g$end$8296$1DOkPG) ((case-lambda ((g$count$8297$1DOkPG) ((case-lambda ((g$width$8298$1DOkPG) ((case-lambda (() (if (positive? g$width$8298$1DOkPG) ((case-lambda ((g$count$8299$1DOkPG) ((case-lambda ((g$field0$8300$1DOkPG) ((case-lambda ((g$field1$8301$1DOkPG) ((case-lambda ((g$field2$8302$1DOkPG) ((case-lambda ((g$field$8303$1DOkPG) ((case-lambda (() (g$bitwise-copy-bit-field$8259$1DOkPG g$n$8294$1DOkPG g$start$8295$1DOkPG g$end$8296$1DOkPG g$field$8303$1DOkPG)))))) (bitwise-ior g$field1$8301$1DOkPG g$field2$8302$1DOkPG)))) (g$bitwise-arithmetic-shift-right$8261$1DOkPG g$field0$8300$1DOkPG (- g$width$8298$1DOkPG g$count$8299$1DOkPG))))) (g$bitwise-arithmetic-shift-left$8260$1DOkPG g$field0$8300$1DOkPG g$count$8299$1DOkPG)))) (g$bitwise-bit-field$8258$1DOkPG g$n$8294$1DOkPG g$start$8295$1DOkPG g$end$8296$1DOkPG)))) (mod g$count$8297$1DOkPG g$width$8298$1DOkPG)) g$n$8294$1DOkPG)))))) (- g$end$8296$1DOkPG g$start$8295$1DOkPG)))) g$ei4$8293$1DOkPG))) g$ei3$8292$1DOkPG))) g$ei2$8291$1DOkPG))) g$ei1$8290$1DOkPG)))) (g$bitwise-reverse-bit-field$8263$1DOkPG g$bitwise-reverse-bit-field$8314$1DOkPG (case-lambda ((g$ei1$8304$1DOkPG g$ei2$8305$1DOkPG g$ei3$8306$1DOkPG) 'TODO)))) (void))
(library-letrec* ((g$fxif$8315$1DOkPG g$fxif$8362$1DOkPG (case-lambda ((g$fx1$8322$1DOkPG g$fx2$8323$1DOkPG g$fx3$8324$1DOkPG) (fxior (fxand g$fx1$8322$1DOkPG g$fx2$8323$1DOkPG) (fxand (fxnot g$fx1$8322$1DOkPG) g$fx3$8324$1DOkPG))))) (g$fxcopy-bit$8316$1DOkPG g$fxcopy-bit$8363$1DOkPG (case-lambda ((g$fx1$8325$1DOkPG g$fx2$8326$1DOkPG g$fx3$8327$1DOkPG) ((case-lambda ((g$mask$8328$1DOkPG) ((case-lambda (() (g$fxif$8315$1DOkPG g$mask$8328$1DOkPG (g$fxarithmetic-shift-left$8319$1DOkPG g$fx3$8327$1DOkPG g$fx2$8326$1DOkPG) g$fx1$8325$1DOkPG)))))) (g$fxarithmetic-shift-left$8319$1DOkPG '1 g$fx2$8326$1DOkPG))))) (g$fxbit-field$8317$1DOkPG g$fxbit-field$8364$1DOkPG (case-lambda ((g$fx1$8329$1DOkPG g$fx2$8330$1DOkPG g$fx3$8331$1DOkPG) ((case-lambda ((g$mask$8332$1DOkPG) ((case-lambda (() (g$fxarithmetic-shift-right$8320$1DOkPG (fxand g$fx1$8329$1DOkPG g$mask$8332$1DOkPG) g$fx2$8330$1DOkPG)))))) (fxnot (g$fxarithmetic-shift-left$8319$1DOkPG '-1 g$fx3$8331$1DOkPG)))))) (g$fxcopy-bit-field$8318$1DOkPG g$fxcopy-bit-field$8365$1DOkPG (case-lambda ((g$fx1$8333$1DOkPG g$fx2$8334$1DOkPG g$fx3$8335$1DOkPG g$fx4$8336$1DOkPG) ((case-lambda ((g$to$8337$1DOkPG) ((case-lambda ((g$start$8338$1DOkPG) ((case-lambda ((g$end$8339$1DOkPG) ((case-lambda ((g$from$8340$1DOkPG) ((case-lambda ((g$mask1$8341$1DOkPG) ((case-lambda ((g$mask2$8342$1DOkPG) ((case-lambda ((g$mask$8343$1DOkPG) ((case-lambda (() (g$fxif$8315$1DOkPG g$mask$8343$1DOkPG (g$fxarithmetic-shift-left$8319$1DOkPG g$from$8340$1DOkPG g$start$8338$1DOkPG) g$to$8337$1DOkPG)))))) (fxand g$mask1$8341$1DOkPG g$mask2$8342$1DOkPG)))) (fxnot (g$fxarithmetic-shift-left$8319$1DOkPG '-1 g$end$8339$1DOkPG))))) (g$fxarithmetic-shift-left$8319$1DOkPG '-1 g$start$8338$1DOkPG)))) g$fx4$8336$1DOkPG))) g$fx3$8335$1DOkPG))) g$fx2$8334$1DOkPG))) g$fx1$8333$1DOkPG)))) (g$fxarithmetic-shift-left$8319$1DOkPG g$fxarithmetic-shift-left$8366$1DOkPG (case-lambda ((g$fx1$8344$1DOkPG g$fx2$8345$1DOkPG) (fxarithmetic-shift g$fx1$8344$1DOkPG g$fx2$8345$1DOkPG)))) (g$fxarithmetic-shift-right$8320$1DOkPG g$fxarithmetic-shift-right$8367$1DOkPG (case-lambda ((g$fx1$8346$1DOkPG g$fx2$8347$1DOkPG) (fxarithmetic-shift g$fx1$8346$1DOkPG (- g$fx2$8347$1DOkPG))))) (g$fxrotate-bit-field$8321$1DOkPG g$fxrotate-bit-field$8368$1DOkPG (case-lambda ((g$fx1$8348$1DOkPG g$fx2$8349$1DOkPG g$fx3$8350$1DOkPG g$fx4$8351$1DOkPG) ((case-lambda ((g$n$8352$1DOkPG) ((case-lambda ((g$start$8353$1DOkPG) ((case-lambda ((g$end$8354$1DOkPG) ((case-lambda ((g$count$8355$1DOkPG) ((case-lambda ((g$width$8356$1DOkPG) ((case-lambda (() (if (positive? g$width$8356$1DOkPG) ((case-lambda ((g$count$8357$1DOkPG) ((case-lambda ((g$field0$8358$1DOkPG) ((case-lambda ((g$field1$8359$1DOkPG) ((case-lambda ((g$field2$8360$1DOkPG) ((case-lambda ((g$field$8361$1DOkPG) ((case-lambda (() (g$fxcopy-bit-field$8318$1DOkPG g$n$8352$1DOkPG g$start$8353$1DOkPG g$end$8354$1DOkPG g$field$8361$1DOkPG)))))) (fxior g$field1$8359$1DOkPG g$field2$8360$1DOkPG)))) (g$fxarithmetic-shift-right$8320$1DOkPG g$field0$8358$1DOkPG (- g$width$8356$1DOkPG g$count$8357$1DOkPG))))) (g$fxarithmetic-shift-left$8319$1DOkPG g$field0$8358$1DOkPG g$count$8357$1DOkPG)))) (g$fxbit-field$8317$1DOkPG g$n$8352$1DOkPG g$start$8353$1DOkPG g$end$8354$1DOkPG)))) (mod g$count$8355$1DOkPG g$width$8356$1DOkPG)) g$n$8352$1DOkPG)))))) (- g$end$8354$1DOkPG g$start$8353$1DOkPG)))) g$fx4$8351$1DOkPG))) g$fx3$8350$1DOkPG))) g$fx2$8349$1DOkPG))) g$fx1$8348$1DOkPG))))) (void))
(library-letrec* ((g$9024$8369$1DOkPG g$9024$8381$1DOkPG (make-record-type-descriptor '&no-infinities &implementation-restriction-rtd 'g$9027$1DOkPG '#f '#f '#())) (g$9026$8370$1DOkPG g$9026$8382$1DOkPG '#f) (g$9025$8371$1DOkPG g$9025$8383$1DOkPG (make-record-constructor-descriptor g$9024$8369$1DOkPG &implementation-restriction-rcd g$9026$8370$1DOkPG)) (g$9023$8372$1DOkPG g$9023$8384$1DOkPG (record-predicate g$9024$8369$1DOkPG)) (g$make-no-infinities-violation$8373$1DOkPG g$make-no-infinities-violation$8385$1DOkPG (record-constructor g$9025$8371$1DOkPG)) (g$no-infinities-violation?$8374$1DOkPG g$no-infinities-violation?$8386$1DOkPG (condition-predicate g$9024$8369$1DOkPG)) (g$9038$8375$1DOkPG g$9038$8387$1DOkPG (make-record-type-descriptor '&no-nans &implementation-restriction-rtd 'g$9041$1DOkPG '#f '#f '#())) (g$9040$8376$1DOkPG g$9040$8388$1DOkPG '#f) (g$9039$8377$1DOkPG g$9039$8389$1DOkPG (make-record-constructor-descriptor g$9038$8375$1DOkPG &implementation-restriction-rcd g$9040$8376$1DOkPG)) (g$9037$8378$1DOkPG g$9037$8390$1DOkPG (record-predicate g$9038$8375$1DOkPG)) (g$make-no-nans-violation$8379$1DOkPG g$make-no-nans-violation$8391$1DOkPG (record-constructor g$9039$8377$1DOkPG)) (g$no-nans-violation?$8380$1DOkPG g$no-nans-violation?$8392$1DOkPG (condition-predicate g$9038$8375$1DOkPG))) (void))
(library-letrec* ((g$9053$8393$1DOkPG g$9053$8473$1DOkPG (make-record-type-descriptor '&i/o &error-rtd 'g$9056$1DOkPG '#f '#f '#())) (g$9055$8394$1DOkPG g$9055$8474$1DOkPG '#f) (g$9054$8395$1DOkPG g$9054$8475$1DOkPG (make-record-constructor-descriptor g$9053$8393$1DOkPG &error-rcd g$9055$8394$1DOkPG)) (g$9052$8396$1DOkPG g$9052$8476$1DOkPG (record-predicate g$9053$8393$1DOkPG)) (g$make-i/o-error$8397$1DOkPG g$make-i/o-error$8477$1DOkPG (record-constructor g$9054$8395$1DOkPG)) (g$i/o-error?$8398$1DOkPG g$i/o-error?$8478$1DOkPG (condition-predicate g$9053$8393$1DOkPG)) (g$9067$8399$1DOkPG g$9067$8479$1DOkPG (make-record-type-descriptor '&i/o-read g$9053$8393$1DOkPG 'g$9070$1DOkPG '#f '#f '#())) (g$9069$8400$1DOkPG g$9069$8480$1DOkPG '#f) (g$9068$8401$1DOkPG g$9068$8481$1DOkPG (make-record-constructor-descriptor g$9067$8399$1DOkPG g$9054$8395$1DOkPG g$9069$8400$1DOkPG)) (g$9066$8402$1DOkPG g$9066$8482$1DOkPG (record-predicate g$9067$8399$1DOkPG)) (g$make-i/o-read-error$8403$1DOkPG g$make-i/o-read-error$8483$1DOkPG (record-constructor g$9068$8401$1DOkPG)) (g$i/o-read-error?$8404$1DOkPG g$i/o-read-error?$8484$1DOkPG (condition-predicate g$9067$8399$1DOkPG)) (g$9081$8405$1DOkPG g$9081$8485$1DOkPG (make-record-type-descriptor '&i/o-write g$9053$8393$1DOkPG 'g$9084$1DOkPG '#f '#f '#())) (g$9083$8406$1DOkPG g$9083$8486$1DOkPG '#f) (g$9082$8407$1DOkPG g$9082$8487$1DOkPG (make-record-constructor-descriptor g$9081$8405$1DOkPG g$9054$8395$1DOkPG g$9083$8406$1DOkPG)) (g$9080$8408$1DOkPG g$9080$8488$1DOkPG (record-predicate g$9081$8405$1DOkPG)) (g$make-i/o-write-error$8409$1DOkPG g$make-i/o-write-error$8489$1DOkPG (record-constructor g$9082$8407$1DOkPG)) (g$i/o-write-error?$8410$1DOkPG g$i/o-write-error?$8490$1DOkPG (condition-predicate g$9081$8405$1DOkPG)) (g$9096$8411$1DOkPG g$9096$8491$1DOkPG (make-record-type-descriptor '&i/o-invalid-position g$9053$8393$1DOkPG 'g$9099$1DOkPG '#f '#f '#((immutable position)))) (g$9098$8412$1DOkPG g$9098$8492$1DOkPG '#f) (g$9097$8413$1DOkPG g$9097$8493$1DOkPG (make-record-constructor-descriptor g$9096$8411$1DOkPG g$9054$8395$1DOkPG g$9098$8412$1DOkPG)) (g$9095$8414$1DOkPG g$9095$8494$1DOkPG (record-predicate g$9096$8411$1DOkPG)) (g$make-i/o-invalid-position-error$8415$1DOkPG g$make-i/o-invalid-position-error$8495$1DOkPG (record-constructor g$9097$8413$1DOkPG)) (g$9094$8416$1DOkPG g$9094$8496$1DOkPG (record-accessor g$9096$8411$1DOkPG '0)) (g$i/o-invalid-position-error?$8417$1DOkPG g$i/o-invalid-position-error?$8497$1DOkPG (condition-predicate g$9096$8411$1DOkPG)) (g$i/o-error-position$8418$1DOkPG g$i/o-error-position$8498$1DOkPG (condition-accessor g$9096$8411$1DOkPG g$9094$8416$1DOkPG)) (g$9113$8419$1DOkPG g$9113$8499$1DOkPG (make-record-type-descriptor '&i/o-filename g$9053$8393$1DOkPG 'g$9116$1DOkPG '#f '#f '#((immutable filename)))) (g$9115$8420$1DOkPG g$9115$8500$1DOkPG '#f) (g$9114$8421$1DOkPG g$9114$8501$1DOkPG (make-record-constructor-descriptor g$9113$8419$1DOkPG g$9054$8395$1DOkPG g$9115$8420$1DOkPG)) (g$9112$8422$1DOkPG g$9112$8502$1DOkPG (record-predicate g$9113$8419$1DOkPG)) (g$make-i/o-filename-error$8423$1DOkPG g$make-i/o-filename-error$8503$1DOkPG (record-constructor g$9114$8421$1DOkPG)) (g$9111$8424$1DOkPG g$9111$8504$1DOkPG (record-accessor g$9113$8419$1DOkPG '0)) (g$i/o-filename-error?$8425$1DOkPG g$i/o-filename-error?$8505$1DOkPG (condition-predicate g$9113$8419$1DOkPG)) (g$i/o-error-filename$8426$1DOkPG g$i/o-error-filename$8506$1DOkPG (condition-accessor g$9113$8419$1DOkPG g$9111$8424$1DOkPG)) (g$9129$8427$1DOkPG g$9129$8507$1DOkPG (make-record-type-descriptor '&i/o-file-protection g$9053$8393$1DOkPG 'g$9132$1DOkPG '#f '#f '#())) (g$9131$8428$1DOkPG g$9131$8508$1DOkPG '#f) (g$9130$8429$1DOkPG g$9130$8509$1DOkPG (make-record-constructor-descriptor g$9129$8427$1DOkPG g$9054$8395$1DOkPG g$9131$8428$1DOkPG)) (g$9128$8430$1DOkPG g$9128$8510$1DOkPG (record-predicate g$9129$8427$1DOkPG)) (g$make-i/o-file-protection-error$8431$1DOkPG g$make-i/o-file-protection-error$8511$1DOkPG (record-constructor g$9130$8429$1DOkPG)) (g$i/o-file-protection-error?$8432$1DOkPG g$i/o-file-protection-error?$8512$1DOkPG (condition-predicate g$9129$8427$1DOkPG)) (g$9143$8433$1DOkPG g$9143$8513$1DOkPG (make-record-type-descriptor '&i/o-file-is-read-only g$9129$8427$1DOkPG 'g$9146$1DOkPG '#f '#f '#())) (g$9145$8434$1DOkPG g$9145$8514$1DOkPG '#f) (g$9144$8435$1DOkPG g$9144$8515$1DOkPG (make-record-constructor-descriptor g$9143$8433$1DOkPG g$9130$8429$1DOkPG g$9145$8434$1DOkPG)) (g$9142$8436$1DOkPG g$9142$8516$1DOkPG (record-predicate g$9143$8433$1DOkPG)) (g$make-i/o-file-is-read-only-error$8437$1DOkPG g$make-i/o-file-is-read-only-error$8517$1DOkPG (record-constructor g$9144$8435$1DOkPG)) (g$i/o-file-is-read-only-error?$8438$1DOkPG g$i/o-file-is-read-only-error?$8518$1DOkPG (condition-predicate g$9143$8433$1DOkPG)) (g$9157$8439$1DOkPG g$9157$8519$1DOkPG (make-record-type-descriptor '&i/o-file-already-exists g$9113$8419$1DOkPG 'g$9160$1DOkPG '#f '#f '#())) (g$9159$8440$1DOkPG g$9159$8520$1DOkPG '#f) (g$9158$8441$1DOkPG g$9158$8521$1DOkPG (make-record-constructor-descriptor g$9157$8439$1DOkPG g$9114$8421$1DOkPG g$9159$8440$1DOkPG)) (g$9156$8442$1DOkPG g$9156$8522$1DOkPG (record-predicate g$9157$8439$1DOkPG)) (g$make-i/o-file-already-exists-error$8443$1DOkPG g$make-i/o-file-already-exists-error$8523$1DOkPG (record-constructor g$9158$8441$1DOkPG)) (g$i/o-file-already-exists-error?$8444$1DOkPG g$i/o-file-already-exists-error?$8524$1DOkPG (condition-predicate g$9157$8439$1DOkPG)) (g$9171$8445$1DOkPG g$9171$8525$1DOkPG (make-record-type-descriptor '&i/o-file-does-not-exist g$9113$8419$1DOkPG 'g$9174$1DOkPG '#f '#f '#())) (g$9173$8446$1DOkPG g$9173$8526$1DOkPG '#f) (g$9172$8447$1DOkPG g$9172$8527$1DOkPG (make-record-constructor-descriptor g$9171$8445$1DOkPG g$9114$8421$1DOkPG g$9173$8446$1DOkPG)) (g$9170$8448$1DOkPG g$9170$8528$1DOkPG (record-predicate g$9171$8445$1DOkPG)) (g$make-i/o-file-does-not-exist-error$8449$1DOkPG g$make-i/o-file-does-not-exist-error$8529$1DOkPG (record-constructor g$9172$8447$1DOkPG)) (g$i/o-file-does-not-exist-error?$8450$1DOkPG g$i/o-file-does-not-exist-error?$8530$1DOkPG (condition-predicate g$9171$8445$1DOkPG)) (g$9186$8451$1DOkPG g$9186$8531$1DOkPG (make-record-type-descriptor '&i/o-port g$9053$8393$1DOkPG 'g$9189$1DOkPG '#f '#f '#((immutable port)))) (g$9188$8452$1DOkPG g$9188$8532$1DOkPG '#f) (g$9187$8453$1DOkPG g$9187$8533$1DOkPG (make-record-constructor-descriptor g$9186$8451$1DOkPG g$9054$8395$1DOkPG g$9188$8452$1DOkPG)) (g$9185$8454$1DOkPG g$9185$8534$1DOkPG (record-predicate g$9186$8451$1DOkPG)) (g$make-i/o-port-error$8455$1DOkPG g$make-i/o-port-error$8535$1DOkPG (record-constructor g$9187$8453$1DOkPG)) (g$9184$8456$1DOkPG g$9184$8536$1DOkPG (record-accessor g$9186$8451$1DOkPG '0)) (g$i/o-port-error?$8457$1DOkPG g$i/o-port-error?$8537$1DOkPG (condition-predicate g$9186$8451$1DOkPG)) (g$i/o-error-port$8458$1DOkPG g$i/o-error-port$8538$1DOkPG (condition-accessor g$9186$8451$1DOkPG g$9184$8456$1DOkPG)) (g$9202$8459$1DOkPG g$9202$8539$1DOkPG (make-record-type-descriptor '&i/o-decoding g$9186$8451$1DOkPG 'g$9205$1DOkPG '#f '#f '#())) (g$9204$8460$1DOkPG g$9204$8540$1DOkPG '#f) (g$9203$8461$1DOkPG g$9203$8541$1DOkPG (make-record-constructor-descriptor g$9202$8459$1DOkPG g$9187$8453$1DOkPG g$9204$8460$1DOkPG)) (g$9201$8462$1DOkPG g$9201$8542$1DOkPG (record-predicate g$9202$8459$1DOkPG)) (g$make-i/o-decoding-error$8463$1DOkPG g$make-i/o-decoding-error$8543$1DOkPG (record-constructor g$9203$8461$1DOkPG)) (g$i/o-decoding-error?$8464$1DOkPG g$i/o-decoding-error?$8544$1DOkPG (condition-predicate g$9202$8459$1DOkPG)) (g$9217$8465$1DOkPG g$9217$8545$1DOkPG (make-record-type-descriptor '&i/o-encoding g$9186$8451$1DOkPG 'g$9220$1DOkPG '#f '#f '#((immutable char)))) (g$9219$8466$1DOkPG g$9219$8546$1DOkPG '#f) (g$9218$8467$1DOkPG g$9218$8547$1DOkPG (make-record-constructor-descriptor g$9217$8465$1DOkPG g$9187$8453$1DOkPG g$9219$8466$1DOkPG)) (g$9216$8468$1DOkPG g$9216$8548$1DOkPG (record-predicate g$9217$8465$1DOkPG)) (g$make-i/o-encoding-error$8469$1DOkPG g$make-i/o-encoding-error$8549$1DOkPG (record-constructor g$9218$8467$1DOkPG)) (g$9215$8470$1DOkPG g$9215$8550$1DOkPG (record-accessor g$9217$8465$1DOkPG '0)) (g$i/o-encoding-error?$8471$1DOkPG g$i/o-encoding-error?$8551$1DOkPG (condition-predicate g$9217$8465$1DOkPG)) (g$i/o-encoding-error-char$8472$1DOkPG g$i/o-encoding-error-char$8552$1DOkPG (condition-accessor g$9217$8465$1DOkPG g$9215$8470$1DOkPG))) (void))
(library-letrec* ((g$get-output-string$8553$1DOkPG g$get-output-string$8558$1DOkPG (case-lambda ((g$port$8556$1DOkPG) (clr-call-internal 'system.io.stringwriter 'tostring g$port$8556$1DOkPG)))) (g$open-output-string$8554$1DOkPG g$open-output-string$8559$1DOkPG (case-lambda (() (clr-new-internal 'system.io.stringwriter)))) (g$open-string-output-port$8555$1DOkPG g$open-string-output-port$8560$1DOkPG (case-lambda (() ((case-lambda ((g$p$8557$1DOkPG) (values g$p$8557$1DOkPG (case-lambda (() (g$get-output-string$8553$1DOkPG g$p$8557$1DOkPG)))))) (g$open-output-string$8554$1DOkPG)))))) (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* ((g$ironscheme-build$8561$1DOkPG g$ironscheme-build$8562$1DOkPG (case-lambda (() (g$load$15597$1DOkPG '"ironscheme-buildscript.ss"))))) (void))
(library-letrec* ((g$dofmt$8563$1DOkPG g$dofmt$8585$1DOkPG (case-lambda ((g$p$8567$1DOkPG g$cntl$8568$1DOkPG g$args$8569$1DOkPG) ((case-lambda ((g$nmax$8570$1DOkPG) ((letrec ((g$loop$8571$1DOkPG (case-lambda ((g$n$8572$1DOkPG g$a$8573$1DOkPG) (if (<= g$n$8572$1DOkPG g$nmax$8570$1DOkPG) ((case-lambda ((g$c$8574$1DOkPG) (if (if (char=? g$c$8574$1DOkPG '#\~) (begin '#f (< g$n$8572$1DOkPG g$nmax$8570$1DOkPG)) '#f) ((case-lambda ((g$t$8575$1DOkPG) (if (memv g$t$8575$1DOkPG '(#\a)) (begin (display (car g$a$8573$1DOkPG) g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '2) (cdr g$a$8573$1DOkPG))) (if (memv g$t$8575$1DOkPG '(#\s)) (begin (write (car g$a$8573$1DOkPG) g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '2) (cdr g$a$8573$1DOkPG))) (if (memv g$t$8575$1DOkPG '(#\b)) (begin (write (number->string (car g$a$8573$1DOkPG) '2) g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '2) (cdr g$a$8573$1DOkPG))) (if (memv g$t$8575$1DOkPG '(#\o)) (begin (write (number->string (car g$a$8573$1DOkPG) '8) g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '2) (cdr g$a$8573$1DOkPG))) (if (memv g$t$8575$1DOkPG '(#\x)) (begin (write (number->string (car g$a$8573$1DOkPG) '16) g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '2) (cdr g$a$8573$1DOkPG))) (if (memv g$t$8575$1DOkPG '(#\d)) (begin (write (number->string (car g$a$8573$1DOkPG) '10) g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '2) (cdr g$a$8573$1DOkPG))) (if (memv g$t$8575$1DOkPG '(#\~)) (begin (write-char '#\~ g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '2) g$a$8573$1DOkPG)) (begin (write-char g$c$8574$1DOkPG g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '1) g$a$8573$1DOkPG))))))))))) (string-ref g$cntl$8568$1DOkPG (+ g$n$8572$1DOkPG '1))) (begin (write-char g$c$8574$1DOkPG g$p$8567$1DOkPG) (g$loop$8571$1DOkPG (+ g$n$8572$1DOkPG '1) g$a$8573$1DOkPG))))) (string-ref g$cntl$8568$1DOkPG g$n$8572$1DOkPG)) (void)))))) g$loop$8571$1DOkPG) '0 g$args$8569$1DOkPG))) (- (string-length g$cntl$8568$1DOkPG) '1))))) (g$printf$8564$1DOkPG g$printf$8586$1DOkPG (case-lambda ((g$control$8576$1DOkPG . g$args$8577$1DOkPG) (g$dofmt$8563$1DOkPG (current-output-port) g$control$8576$1DOkPG g$args$8577$1DOkPG)))) (g$fprintf$8565$1DOkPG g$fprintf$8587$1DOkPG (case-lambda ((g$p$8578$1DOkPG g$control$8579$1DOkPG . g$args$8580$1DOkPG) (g$dofmt$8563$1DOkPG g$p$8578$1DOkPG g$control$8579$1DOkPG g$args$8580$1DOkPG)))) (g$format$8566$1DOkPG g$format$8588$1DOkPG (case-lambda ((g$control$8581$1DOkPG . g$args$8582$1DOkPG) (call-with-values g$open-string-output-port$8560$1DOkPG (case-lambda ((g$p$8583$1DOkPG g$c$8584$1DOkPG) (begin (g$dofmt$8563$1DOkPG g$p$8583$1DOkPG g$control$8581$1DOkPG g$args$8582$1DOkPG) (g$c$8584$1DOkPG))))))))) (void))
(library-letrec* ((g$load-precompiled-library$8589$1DOkPG g$load-precompiled-library$8656$1DOkPG (case-lambda ((g$filename$8647$1DOkPG g$sk$8648$1DOkPG) '#f))) (g$make-parameter$8590$1DOkPG g$make-parameter$8657$1DOkPG (case-lambda ((g$x$8649$1DOkPG) (g$make-parameter$8590$1DOkPG g$x$8649$1DOkPG (case-lambda ((g$x$8650$1DOkPG) g$x$8650$1DOkPG)))) ((g$x$8651$1DOkPG g$fender$8652$1DOkPG) (begin (if (procedure? g$fender$8652$1DOkPG) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((case-lambda ((g$x$8653$1DOkPG) (case-lambda (() g$x$8653$1DOkPG) ((g$v$8654$1DOkPG) (set! g$x$8653$1DOkPG (g$fender$8652$1DOkPG g$v$8654$1DOkPG)))))) (g$fender$8652$1DOkPG g$x$8651$1DOkPG)))))) (g$file-options-spec$8646$1DOkPG g$file-options-spec$8658$1DOkPG (case-lambda ((g$x$8655$1DOkPG) g$x$8655$1DOkPG)))) (void))
(library-letrec* ((g$current-primitive-locations$8659$1DOkPG g$current-primitive-locations$8698$1DOkPG (g$make-parameter$8657$1DOkPG (case-lambda ((g$x$8666$1DOkPG) '#f)) (case-lambda ((g$p$8667$1DOkPG) (begin (if (procedure? g$p$8667$1DOkPG) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) g$p$8667$1DOkPG))))) (g$mutable?$8660$1DOkPG g$mutable?$8699$1DOkPG (case-lambda ((g$x$8668$1DOkPG) (letrec* ((g$simple?$8669$1DOkPG (case-lambda ((g$x$8670$1DOkPG) ((case-lambda ((g$t$8671$1DOkPG) (if g$t$8671$1DOkPG g$t$8671$1DOkPG ((case-lambda ((g$t$8672$1DOkPG) (if g$t$8672$1DOkPG g$t$8672$1DOkPG ((case-lambda ((g$t$8673$1DOkPG) (if g$t$8673$1DOkPG g$t$8673$1DOkPG ((case-lambda ((g$t$8674$1DOkPG) (if g$t$8674$1DOkPG g$t$8674$1DOkPG ((case-lambda ((g$t$8675$1DOkPG) (if g$t$8675$1DOkPG g$t$8675$1DOkPG ((case-lambda ((g$t$8676$1DOkPG) (if g$t$8676$1DOkPG g$t$8676$1DOkPG (begin '#f (number? g$x$8670$1DOkPG))))) (bytevector? g$x$8670$1DOkPG))))) (string? g$x$8670$1DOkPG))))) (boolean? g$x$8670$1DOkPG))))) (symbol? g$x$8670$1DOkPG))))) (char? g$x$8670$1DOkPG))))) (null? g$x$8670$1DOkPG)))))) (not (g$simple?$8669$1DOkPG g$x$8668$1DOkPG)))))) (g$rewriter$8661$1DOkPG g$rewriter$8700$1DOkPG (case-lambda ((g$quote-hack?$8677$1DOkPG) (letrec* ((g$f$8678$1DOkPG (case-lambda ((g$x$8679$1DOkPG) (if (pair? g$x$8679$1DOkPG) ((case-lambda ((g$t$8680$1DOkPG) (if (memv g$t$8680$1DOkPG '(quote)) (if (if g$quote-hack?$8677$1DOkPG (begin '#f (g$mutable?$8660$1DOkPG (g$cadr$7446$1DOkPG g$x$8679$1DOkPG))) '#f) ((case-lambda ((g$g$8693$1DOkPG) (begin (set-symbol-value! g$g$8693$1DOkPG (g$cadr$7446$1DOkPG g$x$8679$1DOkPG)) g$g$8693$1DOkPG))) (gensym)) g$x$8679$1DOkPG) (if (memv g$t$8680$1DOkPG '(case-lambda)) (cons 'case-lambda (map (case-lambda ((g$x$8692$1DOkPG) (cons (car g$x$8692$1DOkPG) (map g$f$8678$1DOkPG (cdr g$x$8692$1DOkPG))))) (cdr g$x$8679$1DOkPG))) (if (memv g$t$8680$1DOkPG '(lambda)) (g$cons*$7868$1DOkPG 'lambda (g$cadr$7446$1DOkPG g$x$8679$1DOkPG) (map g$f$8678$1DOkPG (g$cddr$7448$1DOkPG g$x$8679$1DOkPG))) (if (memv g$t$8680$1DOkPG '(letrec)) ((case-lambda ((g$bindings$8688$1DOkPG g$body*$8689$1DOkPG) ((case-lambda ((g$lhs*$8690$1DOkPG g$rhs*$8691$1DOkPG) (g$cons*$7868$1DOkPG 'letrec (map list g$lhs*$8690$1DOkPG (map g$f$8678$1DOkPG g$rhs*$8691$1DOkPG)) (map g$f$8678$1DOkPG g$body*$8689$1DOkPG)))) (map car g$bindings$8688$1DOkPG) (map g$cadr$7446$1DOkPG g$bindings$8688$1DOkPG)))) (g$cadr$7446$1DOkPG g$x$8679$1DOkPG) (g$cddr$7448$1DOkPG g$x$8679$1DOkPG)) (if (memv g$t$8680$1DOkPG '(letrec*)) ((case-lambda ((g$bindings$8684$1DOkPG g$body*$8685$1DOkPG) ((case-lambda ((g$lhs*$8686$1DOkPG g$rhs*$8687$1DOkPG) (g$cons*$7868$1DOkPG 'letrec* (map list g$lhs*$8686$1DOkPG (map g$f$8678$1DOkPG g$rhs*$8687$1DOkPG)) (map g$f$8678$1DOkPG g$body*$8685$1DOkPG)))) (map car g$bindings$8684$1DOkPG) (map g$cadr$7446$1DOkPG g$bindings$8684$1DOkPG)))) (g$cadr$7446$1DOkPG g$x$8679$1DOkPG) (g$cddr$7448$1DOkPG g$x$8679$1DOkPG)) (if (memv g$t$8680$1DOkPG '(begin)) (cons 'begin (map g$f$8678$1DOkPG (cdr g$x$8679$1DOkPG))) (if (memv g$t$8680$1DOkPG '(set!)) (list 'set! (g$cadr$7446$1DOkPG g$x$8679$1DOkPG) (g$f$8678$1DOkPG (g$caddr$7452$1DOkPG g$x$8679$1DOkPG))) (if (memv g$t$8680$1DOkPG '(primitive)) ((case-lambda ((g$op$8681$1DOkPG) ((case-lambda ((g$t$8682$1DOkPG) (if g$t$8682$1DOkPG ((case-lambda ((g$loc$8683$1DOkPG) g$loc$8683$1DOkPG)) g$t$8682$1DOkPG) g$op$8681$1DOkPG))) ((g$current-primitive-locations$8659$1DOkPG) g$op$8681$1DOkPG)))) (g$cadr$7446$1DOkPG g$x$8679$1DOkPG)) (if (memv g$t$8680$1DOkPG '(define)) g$x$8679$1DOkPG (if (list? g$x$8679$1DOkPG) (map g$f$8678$1DOkPG g$x$8679$1DOkPG) (error 'rewrite '"invalid form ~s ~s" g$x$8679$1DOkPG (list? g$x$8679$1DOkPG)))))))))))))) (car g$x$8679$1DOkPG)) g$x$8679$1DOkPG))))) g$f$8678$1DOkPG)))) (g$need-quote-hack?$8662$1DOkPG g$need-quote-hack?$8701$1DOkPG '#t) (g$expanded->core$8663$1DOkPG g$expanded->core$8702$1DOkPG (case-lambda ((g$x$8694$1DOkPG) ((g$rewriter$8661$1DOkPG g$need-quote-hack?$8662$1DOkPG) g$x$8694$1DOkPG)))) (g$compile-core-expr$8664$1DOkPG g$compile-core-expr$8703$1DOkPG (case-lambda ((g$x$8695$1DOkPG) ((g$rewriter$8661$1DOkPG '#f) g$x$8695$1DOkPG)))) (g$compile-core-expr-to-port$8665$1DOkPG g$compile-core-expr-to-port$8704$1DOkPG (case-lambda ((g$x$8696$1DOkPG g$p$8697$1DOkPG) (write ((g$rewriter$8661$1DOkPG '#f) g$x$8696$1DOkPG) g$p$8697$1DOkPG))))) (void))
(library-letrec* () (void))
(library-letrec* ((g$make-collection$8737$1DOkPG g$make-collection$8942$1DOkPG (case-lambda (() ((case-lambda ((g$set$8800$1DOkPG) (letrec* ((g$set-cons$8801$1DOkPG (case-lambda ((g$x$8803$1DOkPG g$ls$8804$1DOkPG) (if (memq g$x$8803$1DOkPG g$ls$8804$1DOkPG) g$ls$8804$1DOkPG (cons g$x$8803$1DOkPG g$ls$8804$1DOkPG)))))) (case-lambda (() g$set$8800$1DOkPG) ((g$x$8802$1DOkPG) (set! g$set$8800$1DOkPG (g$set-cons$8801$1DOkPG g$x$8802$1DOkPG g$set$8800$1DOkPG))))))) '())))) (g$current-library-collection$8738$1DOkPG g$current-library-collection$8943$1DOkPG (g$make-parameter$8657$1DOkPG (g$make-collection$8737$1DOkPG) (case-lambda ((g$x$8805$1DOkPG) (begin (if (procedure? g$x$8805$1DOkPG) (void) (assertion-violation 'current-library-collection '"not a procedure" g$x$8805$1DOkPG)) g$x$8805$1DOkPG))))) (g$9444$8739$1DOkPG g$9444$8944$1DOkPG (make-record-type-descriptor 'library '#f 'g$9447$1DOkPG '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (g$9446$8740$1DOkPG g$9446$8945$1DOkPG '#f) (g$9445$8741$1DOkPG g$9445$8946$1DOkPG (make-record-constructor-descriptor g$9444$8739$1DOkPG '#f g$9446$8740$1DOkPG)) (g$library?$8742$1DOkPG g$library?$8947$1DOkPG (record-predicate g$9444$8739$1DOkPG)) (g$make-library$8743$1DOkPG g$make-library$8948$1DOkPG (record-constructor g$9445$8741$1DOkPG)) (g$library-id$8744$1DOkPG g$library-id$8949$1DOkPG (record-accessor g$9444$8739$1DOkPG '0)) (g$library-name$8745$1DOkPG g$library-name$8950$1DOkPG (record-accessor g$9444$8739$1DOkPG '1)) (g$library-version$8746$1DOkPG g$library-version$8951$1DOkPG (record-accessor g$9444$8739$1DOkPG '2)) (g$library-imp*$8747$1DOkPG g$library-imp*$8952$1DOkPG (record-accessor g$9444$8739$1DOkPG '3)) (g$library-vis*$8748$1DOkPG g$library-vis*$8953$1DOkPG (record-accessor g$9444$8739$1DOkPG '4)) (g$library-inv*$8749$1DOkPG g$library-inv*$8954$1DOkPG (record-accessor g$9444$8739$1DOkPG '5)) (g$library-subst$8750$1DOkPG g$library-subst$8955$1DOkPG (record-accessor g$9444$8739$1DOkPG '6)) (g$library-env$8751$1DOkPG g$library-env$8956$1DOkPG (record-accessor g$9444$8739$1DOkPG '7)) (g$library-visit-state$8752$1DOkPG g$library-visit-state$8957$1DOkPG (record-accessor g$9444$8739$1DOkPG '8)) (g$library-invoke-state$8753$1DOkPG g$library-invoke-state$8958$1DOkPG (record-accessor g$9444$8739$1DOkPG '9)) (g$library-visit-code$8754$1DOkPG g$library-visit-code$8959$1DOkPG (record-accessor g$9444$8739$1DOkPG '10)) (g$library-invoke-code$8755$1DOkPG g$library-invoke-code$8960$1DOkPG (record-accessor g$9444$8739$1DOkPG '11)) (g$library-visible?$8756$1DOkPG g$library-visible?$8961$1DOkPG (record-accessor g$9444$8739$1DOkPG '12)) (g$library-source-file-name$8757$1DOkPG g$library-source-file-name$8962$1DOkPG (record-accessor g$9444$8739$1DOkPG '13)) (g$set-library-id!$8758$1DOkPG g$set-library-id!$8963$1DOkPG (record-mutator g$9444$8739$1DOkPG '0)) (g$set-library-name!$8759$1DOkPG g$set-library-name!$8964$1DOkPG (record-mutator g$9444$8739$1DOkPG '1)) (g$set-library-version!$8760$1DOkPG g$set-library-version!$8965$1DOkPG (record-mutator g$9444$8739$1DOkPG '2)) (g$set-library-imp*!$8761$1DOkPG g$set-library-imp*!$8966$1DOkPG (record-mutator g$9444$8739$1DOkPG '3)) (g$set-library-vis*!$8762$1DOkPG g$set-library-vis*!$8967$1DOkPG (record-mutator g$9444$8739$1DOkPG '4)) (g$set-library-inv*!$8763$1DOkPG g$set-library-inv*!$8968$1DOkPG (record-mutator g$9444$8739$1DOkPG '5)) (g$set-library-subst!$8764$1DOkPG g$set-library-subst!$8969$1DOkPG (record-mutator g$9444$8739$1DOkPG '6)) (g$set-library-env!$8765$1DOkPG g$set-library-env!$8970$1DOkPG (record-mutator g$9444$8739$1DOkPG '7)) (g$set-library-visit-state!$8766$1DOkPG g$set-library-visit-state!$8971$1DOkPG (record-mutator g$9444$8739$1DOkPG '8)) (g$set-library-invoke-state!$8767$1DOkPG g$set-library-invoke-state!$8972$1DOkPG (record-mutator g$9444$8739$1DOkPG '9)) (g$set-library-visit-code!$8768$1DOkPG g$set-library-visit-code!$8973$1DOkPG (record-mutator g$9444$8739$1DOkPG '10)) (g$set-library-invoke-code!$8769$1DOkPG g$set-library-invoke-code!$8974$1DOkPG (record-mutator g$9444$8739$1DOkPG '11)) (g$set-library-visible?!$8770$1DOkPG g$set-library-visible?!$8975$1DOkPG (record-mutator g$9444$8739$1DOkPG '12)) (g$set-library-source-file-name!$8771$1DOkPG g$set-library-source-file-name!$8976$1DOkPG (record-mutator g$9444$8739$1DOkPG '13)) (g$rp$8772$1DOkPG g$rp$8977$1DOkPG (make-record-printer 'library (case-lambda ((g$x$8806$1DOkPG g$p$8807$1DOkPG) (begin (if (g$library?$8742$1DOkPG g$x$8806$1DOkPG) (void) (assertion-violation 'record-type-printer '"not a library")) (display (g$format$8588$1DOkPG '"#<library ~s>" (if (null? (g$library-version$8746$1DOkPG g$x$8806$1DOkPG)) (g$library-name$8745$1DOkPG g$x$8806$1DOkPG) (append (g$library-name$8745$1DOkPG g$x$8806$1DOkPG) (list (g$library-version$8746$1DOkPG g$x$8806$1DOkPG))))) g$p$8807$1DOkPG)))))) (g$find-dependencies$8773$1DOkPG g$find-dependencies$8978$1DOkPG (case-lambda ((g$ls$8808$1DOkPG) (if (null? g$ls$8808$1DOkPG) '() (assertion-violation 'find-dependencies '"cannot handle deps yet"))))) (g$find-library-by$8774$1DOkPG g$find-library-by$8979$1DOkPG (case-lambda ((g$pred$8809$1DOkPG) ((letrec ((g$f$8810$1DOkPG (case-lambda ((g$ls$8811$1DOkPG) (if (null? g$ls$8811$1DOkPG) '#f (if (g$pred$8809$1DOkPG (car g$ls$8811$1DOkPG)) (car g$ls$8811$1DOkPG) (g$f$8810$1DOkPG (cdr g$ls$8811$1DOkPG)))))))) g$f$8810$1DOkPG) ((g$current-library-collection$8738$1DOkPG)))))) (g$library-path$8775$1DOkPG g$library-path$8980$1DOkPG (g$make-parameter$8657$1DOkPG '(".") (case-lambda ((g$x$8812$1DOkPG) (if (if (list? g$x$8812$1DOkPG) (begin '#f (g$for-all$7866$1DOkPG string? g$x$8812$1DOkPG)) '#f) (map (case-lambda ((g$x$8813$1DOkPG) g$x$8813$1DOkPG)) g$x$8812$1DOkPG) (assertion-violation 'library-path '"not a list of strings" g$x$8812$1DOkPG)))))) (g$library-extensions$8776$1DOkPG g$library-extensions$8981$1DOkPG (g$make-parameter$8657$1DOkPG '(".sls" ".ss" ".scm") (case-lambda ((g$x$8814$1DOkPG) (if (if (list? g$x$8814$1DOkPG) (begin '#f (g$for-all$7866$1DOkPG string? g$x$8814$1DOkPG)) '#f) (map (case-lambda ((g$x$8815$1DOkPG) g$x$8815$1DOkPG)) g$x$8814$1DOkPG) (assertion-violation 'library-extensions '"not a list of strings" g$x$8814$1DOkPG)))))) (g$library-name->file-name$8777$1DOkPG g$library-name->file-name$8982$1DOkPG (case-lambda ((g$x$8816$1DOkPG) (call-with-values (case-lambda (() (g$open-string-output-port$8560$1DOkPG))) (case-lambda ((g$p$8819$1DOkPG g$extract$8820$1DOkPG) ((case-lambda ((g$extract$8821$1DOkPG g$p$8822$1DOkPG) (letrec* ((g$display-hex$8823$1DOkPG (case-lambda ((g$n$8831$1DOkPG) (if (<= '0 g$n$8831$1DOkPG '9) (display g$n$8831$1DOkPG g$p$8822$1DOkPG) (display (integer->char (+ (char->integer '#\A) (- g$n$8831$1DOkPG '10))) g$p$8822$1DOkPG)))))) (begin ((letrec ((g$f$8824$1DOkPG (case-lambda ((g$ls$8825$1DOkPG) (if (null? g$ls$8825$1DOkPG) (void) (begin (display '"/" g$p$8822$1DOkPG) (for-each (case-lambda ((g$c$8826$1DOkPG) (if ((case-lambda ((g$t$8827$1DOkPG) (if g$t$8827$1DOkPG g$t$8827$1DOkPG ((case-lambda ((g$t$8828$1DOkPG) (if g$t$8828$1DOkPG g$t$8828$1DOkPG ((case-lambda ((g$t$8829$1DOkPG) (if g$t$8829$1DOkPG g$t$8829$1DOkPG (begin '#f (memv g$c$8826$1DOkPG '(#\- #\. #\_ #\~)))))) (char<=? '#\0 g$c$8826$1DOkPG '#\9))))) (char<=? '#\A g$c$8826$1DOkPG '#\Z))))) (char<=? '#\a g$c$8826$1DOkPG '#\z)) (display g$c$8826$1DOkPG g$p$8822$1DOkPG) (begin (display '"%" g$p$8822$1DOkPG) ((case-lambda ((g$n$8830$1DOkPG) (begin (g$display-hex$8823$1DOkPG (g$quotient$8216$1DOkPG g$n$8830$1DOkPG '16)) (g$display-hex$8823$1DOkPG (g$remainder$8217$1DOkPG g$n$8830$1DOkPG '16))))) (char->integer g$c$8826$1DOkPG)))))) (string->list (symbol->string (car g$ls$8825$1DOkPG)))) (g$f$8824$1DOkPG (cdr g$ls$8825$1DOkPG)))))))) g$f$8824$1DOkPG) g$x$8816$1DOkPG) (g$extract$8821$1DOkPG))))) g$extract$8820$1DOkPG g$p$8819$1DOkPG))))))) (g$file-locator$8778$1DOkPG g$file-locator$8983$1DOkPG (g$make-parameter$8657$1DOkPG (case-lambda ((g$x$8832$1DOkPG) ((case-lambda ((g$str$8833$1DOkPG) ((letrec ((g$f$8834$1DOkPG (case-lambda ((g$ls$8835$1DOkPG g$exts$8836$1DOkPG g$failed-list$8837$1DOkPG) (if (null? g$ls$8835$1DOkPG) ((case-lambda (() (letrec* ((g$9551$8838$1DOkPG (make-record-type-descriptor '&library-resolution &condition-rtd 'g$9554$1DOkPG '#f '#f '#((immutable library) (immutable files)))) (g$9553$8839$1DOkPG '#f) (g$9552$8840$1DOkPG (make-record-constructor-descriptor g$9551$8838$1DOkPG &condition-rcd g$9553$8839$1DOkPG)) (g$9550$8841$1DOkPG (record-predicate g$9551$8838$1DOkPG)) (g$make-library-resolution-condition$8842$1DOkPG (record-constructor g$9552$8840$1DOkPG)) (g$9548$8843$1DOkPG (record-accessor g$9551$8838$1DOkPG '0)) (g$9549$8844$1DOkPG (record-accessor g$9551$8838$1DOkPG '1)) (g$library-resolution-condition?$8845$1DOkPG (condition-predicate g$9551$8838$1DOkPG)) (g$condition-library$8846$1DOkPG (condition-accessor g$9551$8838$1DOkPG g$9548$8843$1DOkPG)) (g$condition-files$8847$1DOkPG (condition-accessor g$9551$8838$1DOkPG g$9549$8844$1DOkPG))) (raise (condition (g$make-error$8140$1DOkPG) (g$make-who-condition$8166$1DOkPG 'expander) (g$make-message-condition$8120$1DOkPG '"cannot locate library in library-path") (g$make-library-resolution-condition$8842$1DOkPG g$x$8832$1DOkPG (reverse g$failed-list$8837$1DOkPG)))))))) (if (null? g$exts$8836$1DOkPG) (g$f$8834$1DOkPG (cdr g$ls$8835$1DOkPG) (g$library-extensions$8776$1DOkPG) g$failed-list$8837$1DOkPG) ((case-lambda ((g$name$8848$1DOkPG) (if (g$file-exists?$7790$1DOkPG g$name$8848$1DOkPG) g$name$8848$1DOkPG (g$f$8834$1DOkPG g$ls$8835$1DOkPG (cdr g$exts$8836$1DOkPG) (cons g$name$8848$1DOkPG g$failed-list$8837$1DOkPG))))) (string-append (car g$ls$8835$1DOkPG) g$str$8833$1DOkPG (car g$exts$8836$1DOkPG))))))))) g$f$8834$1DOkPG) (g$library-path$8775$1DOkPG) (g$library-extensions$8776$1DOkPG) '()))) (g$library-name->file-name$8777$1DOkPG g$x$8832$1DOkPG)))) (case-lambda ((g$f$8849$1DOkPG) (if (procedure? g$f$8849$1DOkPG) g$f$8849$1DOkPG (assertion-violation 'file-locator '"not a procedure" g$f$8849$1DOkPG)))))) (g$serialize-all$8779$1DOkPG g$serialize-all$8984$1DOkPG (case-lambda ((g$serialize$8850$1DOkPG g$compile$8851$1DOkPG) (letrec* ((g$library-desc$8852$1DOkPG (case-lambda ((g$x$8854$1DOkPG) (list (g$library-id$8744$1DOkPG g$x$8854$1DOkPG) (g$library-name$8745$1DOkPG g$x$8854$1DOkPG)))))) (for-each (case-lambda ((g$x$8853$1DOkPG) (if (g$library-source-file-name$8757$1DOkPG g$x$8853$1DOkPG) (g$serialize$8850$1DOkPG (g$library-source-file-name$8757$1DOkPG g$x$8853$1DOkPG) (list (g$library-id$8744$1DOkPG g$x$8853$1DOkPG) (g$library-name$8745$1DOkPG g$x$8853$1DOkPG) (g$library-version$8746$1DOkPG g$x$8853$1DOkPG) (map g$library-desc$8852$1DOkPG (g$library-imp*$8747$1DOkPG g$x$8853$1DOkPG)) (map g$library-desc$8852$1DOkPG (g$library-vis*$8748$1DOkPG g$x$8853$1DOkPG)) (map g$library-desc$8852$1DOkPG (g$library-inv*$8749$1DOkPG g$x$8853$1DOkPG)) (g$library-subst$8750$1DOkPG g$x$8853$1DOkPG) (g$library-env$8751$1DOkPG g$x$8853$1DOkPG) (g$compile$8851$1DOkPG (g$library-visit-code$8754$1DOkPG g$x$8853$1DOkPG)) (g$compile$8851$1DOkPG (g$library-invoke-code$8755$1DOkPG g$x$8853$1DOkPG)) (g$library-visible?$8756$1DOkPG g$x$8853$1DOkPG))) (void)))) ((g$current-library-collection$8738$1DOkPG))))))) (g$current-precompiled-library-loader$8780$1DOkPG g$current-precompiled-library-loader$8985$1DOkPG (g$make-parameter$8657$1DOkPG (case-lambda ((g$filename$8855$1DOkPG g$sk$8856$1DOkPG) '#f)))) (g$try-load-from-file$8781$1DOkPG g$try-load-from-file$8986$1DOkPG (case-lambda ((g$filename$8857$1DOkPG) ((g$current-precompiled-library-loader$8780$1DOkPG) g$filename$8857$1DOkPG (case-lambda ((g$id$8858$1DOkPG g$name$8859$1DOkPG g$ver$8860$1DOkPG g$imp*$8861$1DOkPG g$vis*$8862$1DOkPG g$inv*$8863$1DOkPG g$exp-subst$8864$1DOkPG g$exp-env$8865$1DOkPG g$visit-proc$8866$1DOkPG g$invoke-proc$8867$1DOkPG g$visible?$8868$1DOkPG) ((letrec ((g$f$8869$1DOkPG (case-lambda ((g$deps$8870$1DOkPG) (if (null? g$deps$8870$1DOkPG) (begin (g$install-library$8791$1DOkPG g$id$8858$1DOkPG g$name$8859$1DOkPG g$ver$8860$1DOkPG g$imp*$8861$1DOkPG g$vis*$8862$1DOkPG g$inv*$8863$1DOkPG g$exp-subst$8864$1DOkPG g$exp-env$8865$1DOkPG g$visit-proc$8866$1DOkPG g$invoke-proc$8867$1DOkPG '#f '#f g$visible?$8868$1DOkPG '#f) '#t) ((case-lambda ((g$d$8871$1DOkPG) ((case-lambda ((g$label$8872$1DOkPG g$dname$8873$1DOkPG) ((case-lambda ((g$l$8874$1DOkPG) (if (if (g$library?$8742$1DOkPG g$l$8874$1DOkPG) (begin '#f (eq? g$label$8872$1DOkPG (g$library-id$8744$1DOkPG g$l$8874$1DOkPG))) '#f) (g$f$8869$1DOkPG (cdr g$deps$8870$1DOkPG)) (begin (g$fprintf$8587$1DOkPG (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.\\n" g$name$8859$1DOkPG g$dname$8873$1DOkPG g$filename$8857$1DOkPG) '#f)))) (g$find-library-by-name$8786$1DOkPG g$dname$8873$1DOkPG)))) (car g$d$8871$1DOkPG) (g$cadr$7446$1DOkPG g$d$8871$1DOkPG)))) (car g$deps$8870$1DOkPG))))))) g$f$8869$1DOkPG) (append g$imp*$8861$1DOkPG g$vis*$8862$1DOkPG g$inv*$8863$1DOkPG))) (g$others$8875$1DOkPG '#f)))))) (g$library-loader$8782$1DOkPG g$library-loader$8987$1DOkPG (g$make-parameter$8657$1DOkPG (case-lambda ((g$x$8876$1DOkPG) ((case-lambda ((g$file-name$8877$1DOkPG) (if (not g$file-name$8877$1DOkPG) (assertion-violation '#f '"cannot file library" g$x$8876$1DOkPG) ((case-lambda ((g$t$8878$1DOkPG) (if g$t$8878$1DOkPG g$t$8878$1DOkPG (begin '#f ((g$current-library-expander$8783$1DOkPG) (with-input-from-file g$file-name$8877$1DOkPG read-annotated) g$file-name$8877$1DOkPG))))) (g$try-load-from-file$8781$1DOkPG g$file-name$8877$1DOkPG))))) ((g$file-locator$8778$1DOkPG) g$x$8876$1DOkPG)))) (case-lambda ((g$f$8879$1DOkPG) (if (procedure? g$f$8879$1DOkPG) g$f$8879$1DOkPG (assertion-violation 'library-locator '"not a procedure" g$f$8879$1DOkPG)))))) (g$current-library-expander$8783$1DOkPG g$current-library-expander$8988$1DOkPG (g$make-parameter$8657$1DOkPG (case-lambda ((g$x$8880$1DOkPG) (assertion-violation 'library-expander '"not initialized"))) (case-lambda ((g$f$8881$1DOkPG) (if (procedure? g$f$8881$1DOkPG) g$f$8881$1DOkPG (assertion-violation 'library-expander '"not a procedure" g$f$8881$1DOkPG)))))) (g$external-pending-libraries$8784$1DOkPG g$external-pending-libraries$8989$1DOkPG (g$make-parameter$8657$1DOkPG '())) (g$find-external-library$8785$1DOkPG g$find-external-library$8990$1DOkPG (case-lambda ((g$name$8882$1DOkPG) (begin (if (member g$name$8882$1DOkPG (g$external-pending-libraries$8784$1DOkPG)) (assertion-violation '#f '"circular attempt to import library was detected" g$name$8882$1DOkPG) (void)) ((case-lambda ((g$external-pending-libraries$8885$1DOkPG g$external-pending-libraries$8886$1DOkPG) ((case-lambda ((g$swap$8887$1DOkPG) (dynamic-wind g$swap$8887$1DOkPG (case-lambda (() (begin ((g$library-loader$8782$1DOkPG) g$name$8882$1DOkPG) ((case-lambda ((g$t$8888$1DOkPG) (if g$t$8888$1DOkPG g$t$8888$1DOkPG (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" g$name$8882$1DOkPG))))) (g$find-library-by$8774$1DOkPG (case-lambda ((g$x$8889$1DOkPG) (equal? (g$library-name$8745$1DOkPG g$x$8889$1DOkPG) g$name$8882$1DOkPG)))))))) g$swap$8887$1DOkPG))) (case-lambda (() ((case-lambda ((g$t$8890$1DOkPG) (begin (g$external-pending-libraries$8885$1DOkPG g$external-pending-libraries$8886$1DOkPG) (set! g$external-pending-libraries$8886$1DOkPG g$t$8890$1DOkPG)))) (g$external-pending-libraries$8885$1DOkPG))))))) g$external-pending-libraries$8784$1DOkPG (cons g$name$8882$1DOkPG (g$external-pending-libraries$8784$1DOkPG))))))) (g$find-library-by-name$8786$1DOkPG g$find-library-by-name$8991$1DOkPG (case-lambda ((g$name$8891$1DOkPG) ((case-lambda ((g$t$8892$1DOkPG) (if g$t$8892$1DOkPG g$t$8892$1DOkPG (begin '#f (g$find-external-library$8785$1DOkPG g$name$8891$1DOkPG))))) (g$find-library-by$8774$1DOkPG (case-lambda ((g$x$8893$1DOkPG) (equal? (g$library-name$8745$1DOkPG g$x$8893$1DOkPG) g$name$8891$1DOkPG)))))))) (g$library-exists?$8787$1DOkPG g$library-exists?$8992$1DOkPG (case-lambda ((g$name$8894$1DOkPG) (if (g$find-library-by$8774$1DOkPG (case-lambda ((g$x$8895$1DOkPG) (equal? (g$library-name$8745$1DOkPG g$x$8895$1DOkPG) g$name$8894$1DOkPG)))) (begin '#f '#t) '#f)))) (g$find-library-by-spec/die$8788$1DOkPG g$find-library-by-spec/die$8993$1DOkPG (case-lambda ((g$spec$8896$1DOkPG) ((case-lambda ((g$id$8897$1DOkPG) ((case-lambda ((g$t$8898$1DOkPG) (if g$t$8898$1DOkPG g$t$8898$1DOkPG (begin '#f (assertion-violation '#f '"cannot find library with required spec" g$spec$8896$1DOkPG))))) (g$find-library-by$8774$1DOkPG (case-lambda ((g$x$8899$1DOkPG) (eq? g$id$8897$1DOkPG (g$library-id$8744$1DOkPG g$x$8899$1DOkPG)))))))) (car g$spec$8896$1DOkPG))))) (g$label->binding-table$8789$1DOkPG g$label->binding-table$8994$1DOkPG (g$make-eq-hashtable$7710$1DOkPG)) (g$install-library-record$8790$1DOkPG g$install-library-record$8995$1DOkPG (case-lambda ((g$lib$8900$1DOkPG) (begin ((case-lambda ((g$exp-env$8901$1DOkPG) (for-each (case-lambda ((g$x$8902$1DOkPG) ((case-lambda ((g$label$8903$1DOkPG g$binding$8904$1DOkPG) ((case-lambda ((g$binding$8905$1DOkPG) (g$hashtable-set!$7714$1DOkPG g$label->binding-table$8789$1DOkPG g$label$8903$1DOkPG g$binding$8905$1DOkPG))) ((case-lambda ((g$t$8906$1DOkPG) (if (memv g$t$8906$1DOkPG '(global)) (cons 'global (cons g$lib$8900$1DOkPG (cdr g$binding$8904$1DOkPG))) (if (memv g$t$8906$1DOkPG '(global-macro)) (cons 'global-macro (cons g$lib$8900$1DOkPG (cdr g$binding$8904$1DOkPG))) (if (memv g$t$8906$1DOkPG '(global-macro!)) (cons 'global-macro! (cons g$lib$8900$1DOkPG (cdr g$binding$8904$1DOkPG))) g$binding$8904$1DOkPG))))) (car g$binding$8904$1DOkPG))))) (car g$x$8902$1DOkPG) (cdr g$x$8902$1DOkPG)))) g$exp-env$8901$1DOkPG))) (g$library-env$8751$1DOkPG g$lib$8900$1DOkPG)) ((g$current-library-collection$8738$1DOkPG) g$lib$8900$1DOkPG))))) (g$install-library$8791$1DOkPG g$install-library$8996$1DOkPG (case-lambda ((g$id$8907$1DOkPG g$name$8908$1DOkPG g$ver$8909$1DOkPG g$imp*$8910$1DOkPG g$vis*$8911$1DOkPG g$inv*$8912$1DOkPG g$exp-subst$8913$1DOkPG g$exp-env$8914$1DOkPG g$visit-proc$8915$1DOkPG g$invoke-proc$8916$1DOkPG g$visit-code$8917$1DOkPG g$invoke-code$8918$1DOkPG g$visible?$8919$1DOkPG g$source-file-name$8920$1DOkPG) ((case-lambda ((g$imp-lib*$8921$1DOkPG g$vis-lib*$8922$1DOkPG g$inv-lib*$8923$1DOkPG) (begin (if (if (symbol? g$id$8907$1DOkPG) (if (list? g$name$8908$1DOkPG) (begin '#f (list? g$ver$8909$1DOkPG)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" g$id$8907$1DOkPG g$name$8908$1DOkPG g$ver$8909$1DOkPG)) (if (g$library-exists?$8787$1DOkPG g$name$8908$1DOkPG) (assertion-violation 'install-library '"library is already installed" g$name$8908$1DOkPG) (void)) ((case-lambda ((g$lib$8924$1DOkPG) (g$install-library-record$8790$1DOkPG g$lib$8924$1DOkPG))) (g$make-library$8743$1DOkPG g$id$8907$1DOkPG g$name$8908$1DOkPG g$ver$8909$1DOkPG g$imp-lib*$8921$1DOkPG g$vis-lib*$8922$1DOkPG g$inv-lib*$8923$1DOkPG g$exp-subst$8913$1DOkPG g$exp-env$8914$1DOkPG g$visit-proc$8915$1DOkPG g$invoke-proc$8916$1DOkPG g$visit-code$8917$1DOkPG g$invoke-code$8918$1DOkPG g$visible?$8919$1DOkPG g$source-file-name$8920$1DOkPG))))) (map g$find-library-by-spec/die$8788$1DOkPG g$imp*$8910$1DOkPG) (map g$find-library-by-spec/die$8788$1DOkPG g$vis*$8911$1DOkPG) (map g$find-library-by-spec/die$8788$1DOkPG g$inv*$8912$1DOkPG))))) (g$extend-library-subst!$8792$1DOkPG g$extend-library-subst!$8997$1DOkPG (case-lambda ((g$lib$8925$1DOkPG g$sym$8926$1DOkPG g$label$8927$1DOkPG) (g$set-library-subst!$8764$1DOkPG g$lib$8925$1DOkPG (cons (cons g$sym$8926$1DOkPG g$label$8927$1DOkPG) (g$library-subst$8750$1DOkPG g$lib$8925$1DOkPG)))))) (g$extend-library-env!$8793$1DOkPG g$extend-library-env!$8998$1DOkPG (case-lambda ((g$lib$8928$1DOkPG g$label$8929$1DOkPG g$binding$8930$1DOkPG) (begin (g$set-library-env!$8765$1DOkPG g$lib$8928$1DOkPG (cons (cons g$label$8929$1DOkPG g$binding$8930$1DOkPG) (g$library-env$8751$1DOkPG g$lib$8928$1DOkPG))) (g$hashtable-set!$7714$1DOkPG g$label->binding-table$8789$1DOkPG g$label$8929$1DOkPG g$binding$8930$1DOkPG))))) (g$imported-label->binding$8794$1DOkPG g$imported-label->binding$8999$1DOkPG (case-lambda ((g$lab$8931$1DOkPG) (g$hashtable-ref$7713$1DOkPG g$label->binding-table$8789$1DOkPG g$lab$8931$1DOkPG '#f)))) (g$invoke-library$8795$1DOkPG g$invoke-library$9000$1DOkPG (case-lambda ((g$lib$8932$1DOkPG) ((case-lambda ((g$invoke$8933$1DOkPG) (if (procedure? g$invoke$8933$1DOkPG) (begin (g$set-library-invoke-state!$8767$1DOkPG g$lib$8932$1DOkPG (case-lambda (() (assertion-violation 'invoke '"circularity detected" g$lib$8932$1DOkPG)))) (for-each g$invoke-library$8795$1DOkPG (g$library-inv*$8749$1DOkPG g$lib$8932$1DOkPG)) (g$set-library-invoke-state!$8767$1DOkPG g$lib$8932$1DOkPG (case-lambda (() (assertion-violation 'invoke '"first invoke did not return" g$lib$8932$1DOkPG)))) (g$invoke$8933$1DOkPG) (g$set-library-invoke-state!$8767$1DOkPG g$lib$8932$1DOkPG '#t)) (void)))) (g$library-invoke-state$8753$1DOkPG g$lib$8932$1DOkPG))))) (g$visit-library$8796$1DOkPG g$visit-library$9001$1DOkPG (case-lambda ((g$lib$8934$1DOkPG) ((case-lambda ((g$visit$8935$1DOkPG) (if (procedure? g$visit$8935$1DOkPG) (begin (g$set-library-visit-state!$8766$1DOkPG g$lib$8934$1DOkPG (case-lambda (() (assertion-violation 'visit '"circularity detected" g$lib$8934$1DOkPG)))) (for-each g$invoke-library$8795$1DOkPG (g$library-vis*$8748$1DOkPG g$lib$8934$1DOkPG)) (g$set-library-visit-state!$8766$1DOkPG g$lib$8934$1DOkPG (case-lambda (() (assertion-violation 'invoke '"first visit did not return" g$lib$8934$1DOkPG)))) (g$visit$8935$1DOkPG) (g$set-library-visit-state!$8766$1DOkPG g$lib$8934$1DOkPG '#t)) (void)))) (g$library-visit-state$8752$1DOkPG g$lib$8934$1DOkPG))))) (g$invoke-library-by-spec$8797$1DOkPG g$invoke-library-by-spec$9002$1DOkPG (case-lambda ((g$spec$8936$1DOkPG) (g$invoke-library$8795$1DOkPG (g$find-library-by-spec/die$8788$1DOkPG g$spec$8936$1DOkPG))))) (g$installed-libraries$8798$1DOkPG g$installed-libraries$9003$1DOkPG (case-lambda ((g$all?$8937$1DOkPG) ((letrec ((g$f$8938$1DOkPG (case-lambda ((g$ls$8939$1DOkPG) (if (null? g$ls$8939$1DOkPG) '() (if ((case-lambda ((g$t$8940$1DOkPG) (if g$t$8940$1DOkPG g$t$8940$1DOkPG (begin '#f (g$library-visible?$8756$1DOkPG (car g$ls$8939$1DOkPG)))))) g$all?$8937$1DOkPG) (cons (car g$ls$8939$1DOkPG) (g$f$8938$1DOkPG (cdr g$ls$8939$1DOkPG))) (g$f$8938$1DOkPG (cdr g$ls$8939$1DOkPG)))))))) g$f$8938$1DOkPG) ((g$current-library-collection$8738$1DOkPG)))) (() (g$installed-libraries$8798$1DOkPG '#f)))) (g$library-spec$8799$1DOkPG g$library-spec$9004$1DOkPG (case-lambda ((g$x$8941$1DOkPG) (begin (if (g$library?$8742$1DOkPG g$x$8941$1DOkPG) (void) (assertion-violation 'library-spec '"not a library" g$x$8941$1DOkPG)) (list (g$library-id$8744$1DOkPG g$x$8941$1DOkPG) (g$library-name$8745$1DOkPG g$x$8941$1DOkPG) (g$library-version$8746$1DOkPG g$x$8941$1DOkPG))))))) (void))
(library-letrec* ((g$build-global-define$9005$1DOkPG g$build-global-define$9114$1DOkPG (case-lambda ((g$x$9086$1DOkPG) (g$build-void$9082$1DOkPG)))) (g$build-lambda$9054$1DOkPG g$build-lambda$9115$1DOkPG (case-lambda ((g$ae$9087$1DOkPG g$vars$9088$1DOkPG g$exp$9089$1DOkPG) (list 'case-lambda (list g$vars$9088$1DOkPG g$exp$9089$1DOkPG))))) (g$build-case-lambda$9055$1DOkPG g$build-case-lambda$9116$1DOkPG (case-lambda ((g$ae$9090$1DOkPG g$vars*$9091$1DOkPG g$exp*$9092$1DOkPG) (cons 'case-lambda (map list g$vars*$9091$1DOkPG g$exp*$9092$1DOkPG))))) (g$build-let$9056$1DOkPG g$build-let$9117$1DOkPG (case-lambda ((g$ae$9093$1DOkPG g$lhs*$9094$1DOkPG g$rhs*$9095$1DOkPG g$body$9096$1DOkPG) (cons (g$build-lambda$9054$1DOkPG g$ae$9093$1DOkPG g$lhs*$9094$1DOkPG g$body$9096$1DOkPG) g$rhs*$9095$1DOkPG)))) (g$build-sequence$9081$1DOkPG g$build-sequence$9118$1DOkPG (case-lambda ((g$ae$9097$1DOkPG g$exps$9098$1DOkPG) ((letrec ((g$loop$9099$1DOkPG (case-lambda ((g$exps$9100$1DOkPG) (if (null? (cdr g$exps$9100$1DOkPG)) (car g$exps$9100$1DOkPG) (if (equal? (car g$exps$9100$1DOkPG) (g$build-void$9082$1DOkPG)) (g$loop$9099$1DOkPG (cdr g$exps$9100$1DOkPG)) (cons 'begin g$exps$9100$1DOkPG))))))) g$loop$9099$1DOkPG) g$exps$9098$1DOkPG)))) (g$build-void$9082$1DOkPG g$build-void$9119$1DOkPG (case-lambda (() '((primitive void))))) (g$build-letrec$9083$1DOkPG g$build-letrec$9120$1DOkPG (case-lambda ((g$ae$9101$1DOkPG g$vars$9102$1DOkPG g$val-exps$9103$1DOkPG g$body-exp$9104$1DOkPG) (if (null? g$vars$9102$1DOkPG) g$body-exp$9104$1DOkPG (list 'letrec (map list g$vars$9102$1DOkPG g$val-exps$9103$1DOkPG) g$body-exp$9104$1DOkPG))))) (g$build-letrec*$9084$1DOkPG g$build-letrec*$9121$1DOkPG (case-lambda ((g$ae$9105$1DOkPG g$vars$9106$1DOkPG g$val-exps$9107$1DOkPG g$body-exp$9108$1DOkPG) (if (null? g$vars$9106$1DOkPG) g$body-exp$9108$1DOkPG (list 'letrec* (map list g$vars$9106$1DOkPG g$val-exps$9107$1DOkPG) g$body-exp$9108$1DOkPG))))) (g$build-library-letrec*$9085$1DOkPG g$build-library-letrec*$9122$1DOkPG (case-lambda ((g$ae$9109$1DOkPG g$vars$9110$1DOkPG g$locs$9111$1DOkPG g$val-exps$9112$1DOkPG g$body-exp$9113$1DOkPG) (list 'library-letrec* (map list g$vars$9110$1DOkPG g$locs$9111$1DOkPG g$val-exps$9112$1DOkPG) g$body-exp$9113$1DOkPG))))) (void))
(library-letrec* ((g$set-cons$9123$1DOkPG g$set-cons$15340$1DOkPG (case-lambda ((g$x$9509$1DOkPG g$ls$9510$1DOkPG) (if (memq g$x$9509$1DOkPG g$ls$9510$1DOkPG) g$ls$9510$1DOkPG (cons g$x$9509$1DOkPG g$ls$9510$1DOkPG))))) (g$set-union$9124$1DOkPG g$set-union$15341$1DOkPG (case-lambda ((g$ls1$9511$1DOkPG g$ls2$9512$1DOkPG) (if (null? g$ls1$9511$1DOkPG) g$ls2$9512$1DOkPG (if (memq (car g$ls1$9511$1DOkPG) g$ls2$9512$1DOkPG) (g$set-union$9124$1DOkPG (cdr g$ls1$9511$1DOkPG) g$ls2$9512$1DOkPG) (cons (car g$ls1$9511$1DOkPG) (g$set-union$9124$1DOkPG (cdr g$ls1$9511$1DOkPG) g$ls2$9512$1DOkPG))))))) (g$top-mark*$9126$1DOkPG g$top-mark*$15342$1DOkPG '(top)) (g$top-marked?$9127$1DOkPG g$top-marked?$15343$1DOkPG (case-lambda ((g$m*$9513$1DOkPG) (memq 'top g$m*$9513$1DOkPG)))) (g$gen-lexical$9128$1DOkPG g$gen-lexical$15344$1DOkPG (case-lambda ((g$sym$9514$1DOkPG) (if (symbol? g$sym$9514$1DOkPG) (gensym g$sym$9514$1DOkPG) (if (g$stx?$9153$1DOkPG g$sym$9514$1DOkPG) (g$gen-lexical$9128$1DOkPG (g$id->sym$9182$1DOkPG g$sym$9514$1DOkPG)) (assertion-violation 'gen-lexical '"BUG: invalid arg" g$sym$9514$1DOkPG)))))) (g$gen-global$9129$1DOkPG g$gen-global$15345$1DOkPG (case-lambda ((g$x$9515$1DOkPG) (g$gen-lexical$9128$1DOkPG g$x$9515$1DOkPG)))) (g$gen-label$9130$1DOkPG g$gen-label$15346$1DOkPG (case-lambda ((g$_$9516$1DOkPG) (gensym)))) (g$9845$9131$1DOkPG g$9845$15347$1DOkPG (make-record-type-descriptor 'rib '#f 'g$9848$1DOkPG '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (g$9847$9132$1DOkPG g$9847$15348$1DOkPG '#f) (g$9846$9133$1DOkPG g$9846$15349$1DOkPG (make-record-constructor-descriptor g$9845$9131$1DOkPG '#f g$9847$9132$1DOkPG)) (g$rib?$9134$1DOkPG g$rib?$15350$1DOkPG (record-predicate g$9845$9131$1DOkPG)) (g$make-rib$9135$1DOkPG g$make-rib$15351$1DOkPG (record-constructor g$9846$9133$1DOkPG)) (g$rib-sym*$9136$1DOkPG g$rib-sym*$15352$1DOkPG (record-accessor g$9845$9131$1DOkPG '0)) (g$rib-mark**$9137$1DOkPG g$rib-mark**$15353$1DOkPG (record-accessor g$9845$9131$1DOkPG '1)) (g$rib-label*$9138$1DOkPG g$rib-label*$15354$1DOkPG (record-accessor g$9845$9131$1DOkPG '2)) (g$rib-sealed/freq$9139$1DOkPG g$rib-sealed/freq$15355$1DOkPG (record-accessor g$9845$9131$1DOkPG '3)) (g$set-rib-sym*!$9140$1DOkPG g$set-rib-sym*!$15356$1DOkPG (record-mutator g$9845$9131$1DOkPG '0)) (g$set-rib-mark**!$9141$1DOkPG g$set-rib-mark**!$15357$1DOkPG (record-mutator g$9845$9131$1DOkPG '1)) (g$set-rib-label*!$9142$1DOkPG g$set-rib-label*!$15358$1DOkPG (record-mutator g$9845$9131$1DOkPG '2)) (g$set-rib-sealed/freq!$9143$1DOkPG g$set-rib-sealed/freq!$15359$1DOkPG (record-mutator g$9845$9131$1DOkPG '3)) (g$make-empty-rib$9144$1DOkPG g$make-empty-rib$15360$1DOkPG (case-lambda (() (g$make-rib$9135$1DOkPG '() '() '() '#f)))) (g$extend-rib!$9145$1DOkPG g$extend-rib!$15361$1DOkPG (case-lambda ((g$rib$9517$1DOkPG g$id$9518$1DOkPG g$label$9519$1DOkPG) (letrec* ((g$find$9520$1DOkPG (case-lambda ((g$sym$9526$1DOkPG g$mark*$9527$1DOkPG g$sym*$9528$1DOkPG g$mark**$9529$1DOkPG g$label*$9530$1DOkPG) (if (pair? g$sym*$9528$1DOkPG) (begin '#f (if (if (eq? g$sym$9526$1DOkPG (car g$sym*$9528$1DOkPG)) (begin '#f (g$same-marks?$9183$1DOkPG g$mark*$9527$1DOkPG (car g$mark**$9529$1DOkPG))) '#f) (car g$label*$9530$1DOkPG) (g$find$9520$1DOkPG g$sym$9526$1DOkPG g$mark*$9527$1DOkPG (cdr g$sym*$9528$1DOkPG) (cdr g$mark**$9529$1DOkPG) (cdr g$label*$9530$1DOkPG)))) '#f))))) (begin (if (g$rib-sealed/freq$9139$1DOkPG g$rib$9517$1DOkPG) (assertion-violation 'extend-rib! '"BUG: rib is sealed" g$rib$9517$1DOkPG) (void)) ((case-lambda ((g$sym$9521$1DOkPG g$mark*$9522$1DOkPG) ((case-lambda ((g$sym*$9523$1DOkPG) ((case-lambda ((g$t$9524$1DOkPG) (if g$t$9524$1DOkPG ((case-lambda ((g$label^$9525$1DOkPG) (if (eq? g$label$9519$1DOkPG g$label^$9525$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"cannot redefine" g$id$9518$1DOkPG)))) g$t$9524$1DOkPG) (begin (g$set-rib-sym*!$9140$1DOkPG g$rib$9517$1DOkPG (cons g$sym$9521$1DOkPG g$sym*$9523$1DOkPG)) (g$set-rib-mark**!$9141$1DOkPG g$rib$9517$1DOkPG (cons g$mark*$9522$1DOkPG (g$rib-mark**$9137$1DOkPG g$rib$9517$1DOkPG))) (g$set-rib-label*!$9142$1DOkPG g$rib$9517$1DOkPG (cons g$label$9519$1DOkPG (g$rib-label*$9138$1DOkPG g$rib$9517$1DOkPG))))))) (if (memq g$sym$9521$1DOkPG (g$rib-sym*$9136$1DOkPG g$rib$9517$1DOkPG)) (begin '#f (g$find$9520$1DOkPG g$sym$9521$1DOkPG g$mark*$9522$1DOkPG g$sym*$9523$1DOkPG (g$rib-mark**$9137$1DOkPG g$rib$9517$1DOkPG) (g$rib-label*$9138$1DOkPG g$rib$9517$1DOkPG))) '#f)))) (g$rib-sym*$9136$1DOkPG g$rib$9517$1DOkPG)))) (g$id->sym$9182$1DOkPG g$id$9518$1DOkPG) (g$stx-mark*$9156$1DOkPG g$id$9518$1DOkPG))))))) (g$seal-rib!$9146$1DOkPG g$seal-rib!$15362$1DOkPG (case-lambda ((g$rib$9531$1DOkPG) ((case-lambda ((g$sym*$9532$1DOkPG) (if (null? g$sym*$9532$1DOkPG) (void) ((case-lambda ((g$sym*$9533$1DOkPG) (begin (g$set-rib-sym*!$9140$1DOkPG g$rib$9531$1DOkPG g$sym*$9533$1DOkPG) (g$set-rib-mark**!$9141$1DOkPG g$rib$9531$1DOkPG (list->vector (g$rib-mark**$9137$1DOkPG g$rib$9531$1DOkPG))) (g$set-rib-label*!$9142$1DOkPG g$rib$9531$1DOkPG (list->vector (g$rib-label*$9138$1DOkPG g$rib$9531$1DOkPG))) (g$set-rib-sealed/freq!$9143$1DOkPG g$rib$9531$1DOkPG (make-vector (vector-length g$sym*$9533$1DOkPG) '0))))) (list->vector g$sym*$9532$1DOkPG))))) (g$rib-sym*$9136$1DOkPG g$rib$9531$1DOkPG))))) (g$unseal-rib!$9147$1DOkPG g$unseal-rib!$15363$1DOkPG (case-lambda ((g$rib$9534$1DOkPG) (if (g$rib-sealed/freq$9139$1DOkPG g$rib$9534$1DOkPG) (begin (g$set-rib-sealed/freq!$9143$1DOkPG g$rib$9534$1DOkPG '#f) (g$set-rib-sym*!$9140$1DOkPG g$rib$9534$1DOkPG (vector->list (g$rib-sym*$9136$1DOkPG g$rib$9534$1DOkPG))) (g$set-rib-mark**!$9141$1DOkPG g$rib$9534$1DOkPG (vector->list (g$rib-mark**$9137$1DOkPG g$rib$9534$1DOkPG))) (g$set-rib-label*!$9142$1DOkPG g$rib$9534$1DOkPG (vector->list (g$rib-label*$9138$1DOkPG g$rib$9534$1DOkPG)))) (void))))) (g$increment-rib-frequency!$9148$1DOkPG g$increment-rib-frequency!$15364$1DOkPG (case-lambda ((g$rib$9535$1DOkPG g$idx$9536$1DOkPG) ((case-lambda ((g$freq*$9537$1DOkPG) ((case-lambda ((g$freq$9538$1DOkPG) ((case-lambda ((g$i$9539$1DOkPG) (begin (vector-set! g$freq*$9537$1DOkPG g$i$9539$1DOkPG (+ g$freq$9538$1DOkPG '1)) (if (= g$i$9539$1DOkPG g$idx$9536$1DOkPG) (void) ((case-lambda ((g$sym*$9540$1DOkPG g$mark**$9541$1DOkPG g$label*$9542$1DOkPG) (begin ((case-lambda ((g$sym$9543$1DOkPG) (begin (vector-set! g$sym*$9540$1DOkPG g$idx$9536$1DOkPG (vector-ref g$sym*$9540$1DOkPG g$i$9539$1DOkPG)) (vector-set! g$sym*$9540$1DOkPG g$i$9539$1DOkPG g$sym$9543$1DOkPG)))) (vector-ref g$sym*$9540$1DOkPG g$idx$9536$1DOkPG)) ((case-lambda ((g$mark*$9544$1DOkPG) (begin (vector-set! g$mark**$9541$1DOkPG g$idx$9536$1DOkPG (vector-ref g$mark**$9541$1DOkPG g$i$9539$1DOkPG)) (vector-set! g$mark**$9541$1DOkPG g$i$9539$1DOkPG g$mark*$9544$1DOkPG)))) (vector-ref g$mark**$9541$1DOkPG g$idx$9536$1DOkPG)) ((case-lambda ((g$label$9545$1DOkPG) (begin (vector-set! g$label*$9542$1DOkPG g$idx$9536$1DOkPG (vector-ref g$label*$9542$1DOkPG g$i$9539$1DOkPG)) (vector-set! g$label*$9542$1DOkPG g$i$9539$1DOkPG g$label$9545$1DOkPG)))) (vector-ref g$label*$9542$1DOkPG g$idx$9536$1DOkPG))))) (g$rib-sym*$9136$1DOkPG g$rib$9535$1DOkPG) (g$rib-mark**$9137$1DOkPG g$rib$9535$1DOkPG) (g$rib-label*$9138$1DOkPG g$rib$9535$1DOkPG)))))) ((letrec ((g$f$9546$1DOkPG (case-lambda ((g$i$9547$1DOkPG) (if (zero? g$i$9547$1DOkPG) '0 ((case-lambda ((g$j$9548$1DOkPG) (if (= g$freq$9538$1DOkPG (vector-ref g$freq*$9537$1DOkPG g$j$9548$1DOkPG)) (g$f$9546$1DOkPG g$j$9548$1DOkPG) g$i$9547$1DOkPG))) (- g$i$9547$1DOkPG '1))))))) g$f$9546$1DOkPG) g$idx$9536$1DOkPG)))) (vector-ref g$freq*$9537$1DOkPG g$idx$9536$1DOkPG)))) (g$rib-sealed/freq$9139$1DOkPG g$rib$9535$1DOkPG))))) (g$make-full-rib$9149$1DOkPG g$make-full-rib$15365$1DOkPG (case-lambda ((g$id*$9549$1DOkPG g$label*$9550$1DOkPG) (g$make-rib$9135$1DOkPG (map g$id->sym$9182$1DOkPG g$id*$9549$1DOkPG) (map g$stx-mark*$9156$1DOkPG g$id*$9549$1DOkPG) g$label*$9550$1DOkPG '#f)))) (g$9871$9150$1DOkPG g$9871$15366$1DOkPG (make-record-type-descriptor 'stx '#f 'g$9874$1DOkPG '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (g$9873$9151$1DOkPG g$9873$15367$1DOkPG '#f) (g$9872$9152$1DOkPG g$9872$15368$1DOkPG (make-record-constructor-descriptor g$9871$9150$1DOkPG '#f g$9873$9151$1DOkPG)) (g$stx?$9153$1DOkPG g$stx?$15369$1DOkPG (record-predicate g$9871$9150$1DOkPG)) (g$make-stx$9154$1DOkPG g$make-stx$15370$1DOkPG (record-constructor g$9872$9152$1DOkPG)) (g$stx-expr$9155$1DOkPG g$stx-expr$15371$1DOkPG (record-accessor g$9871$9150$1DOkPG '0)) (g$stx-mark*$9156$1DOkPG g$stx-mark*$15372$1DOkPG (record-accessor g$9871$9150$1DOkPG '1)) (g$stx-subst*$9157$1DOkPG g$stx-subst*$15373$1DOkPG (record-accessor g$9871$9150$1DOkPG '2)) (g$stx-ae*$9158$1DOkPG g$stx-ae*$15374$1DOkPG (record-accessor g$9871$9150$1DOkPG '3)) (g$set-stx-expr!$9159$1DOkPG g$set-stx-expr!$15375$1DOkPG (record-mutator g$9871$9150$1DOkPG '0)) (g$set-stx-mark*!$9160$1DOkPG g$set-stx-mark*!$15376$1DOkPG (record-mutator g$9871$9150$1DOkPG '1)) (g$set-stx-subst*!$9161$1DOkPG g$set-stx-subst*!$15377$1DOkPG (record-mutator g$9871$9150$1DOkPG '2)) (g$set-stx-ae*!$9162$1DOkPG g$set-stx-ae*!$15378$1DOkPG (record-mutator g$9871$9150$1DOkPG '3)) (g$rp$9163$1DOkPG g$rp$15379$1DOkPG (make-record-printer 'stx (case-lambda ((g$x$9551$1DOkPG g$p$9552$1DOkPG) (begin (display '"#<syntax " g$p$9552$1DOkPG) (write (g$stx->datum$9192$1DOkPG g$x$9551$1DOkPG) g$p$9552$1DOkPG) ((case-lambda ((g$expr$9553$1DOkPG) (if (annotation? g$expr$9553$1DOkPG) ((case-lambda ((g$src$9554$1DOkPG) (if (pair? g$src$9554$1DOkPG) (begin (display '" [byte " g$p$9552$1DOkPG) (display (cdr g$src$9554$1DOkPG) g$p$9552$1DOkPG) (display '" of " g$p$9552$1DOkPG) (display (car g$src$9554$1DOkPG) g$p$9552$1DOkPG) (display '"]" g$p$9552$1DOkPG)) (void)))) (annotation-source g$expr$9553$1DOkPG)) (void)))) (g$stx-expr$9155$1DOkPG g$x$9551$1DOkPG)) (display '">" g$p$9552$1DOkPG)))))) (g$datum->stx$9164$1DOkPG g$datum->stx$15380$1DOkPG (case-lambda ((g$id$9555$1DOkPG g$datum$9556$1DOkPG) (g$make-stx$9154$1DOkPG g$datum$9556$1DOkPG (g$stx-mark*$9156$1DOkPG g$id$9555$1DOkPG) (g$stx-subst*$9157$1DOkPG g$id$9555$1DOkPG) (g$stx-ae*$9158$1DOkPG g$id$9555$1DOkPG))))) (g$gen-mark$9165$1DOkPG g$gen-mark$15381$1DOkPG (case-lambda (() (string '#\m)))) (g$anti-mark$9166$1DOkPG g$anti-mark$15382$1DOkPG '#f) (g$anti-mark?$9167$1DOkPG g$anti-mark?$15383$1DOkPG not) (g$join-wraps$9168$1DOkPG g$join-wraps$15384$1DOkPG (case-lambda ((g$m1*$9557$1DOkPG g$s1*$9558$1DOkPG g$ae1*$9559$1DOkPG g$e$9560$1DOkPG) (letrec* ((g$cancel$9561$1DOkPG (case-lambda ((g$ls1$9565$1DOkPG g$ls2$9566$1DOkPG) ((letrec ((g$f$9567$1DOkPG (case-lambda ((g$x$9568$1DOkPG g$ls1$9569$1DOkPG) (if (null? g$ls1$9569$1DOkPG) (cdr g$ls2$9566$1DOkPG) (cons g$x$9568$1DOkPG (g$f$9567$1DOkPG (car g$ls1$9569$1DOkPG) (cdr g$ls1$9569$1DOkPG)))))))) g$f$9567$1DOkPG) (car g$ls1$9565$1DOkPG) (cdr g$ls1$9565$1DOkPG)))))) ((case-lambda ((g$m2*$9562$1DOkPG g$s2*$9563$1DOkPG g$ae2*$9564$1DOkPG) (if (if (not (null? g$m1*$9557$1DOkPG)) (if (not (null? g$m2*$9562$1DOkPG)) (begin '#f (g$anti-mark?$9167$1DOkPG (car g$m2*$9562$1DOkPG))) '#f) '#f) (values (g$cancel$9561$1DOkPG g$m1*$9557$1DOkPG g$m2*$9562$1DOkPG) (g$cancel$9561$1DOkPG g$s1*$9558$1DOkPG g$s2*$9563$1DOkPG) (g$cancel$9561$1DOkPG g$ae1*$9559$1DOkPG g$ae2*$9564$1DOkPG)) (values (append g$m1*$9557$1DOkPG g$m2*$9562$1DOkPG) (append g$s1*$9558$1DOkPG g$s2*$9563$1DOkPG) (append g$ae1*$9559$1DOkPG g$ae2*$9564$1DOkPG))))) (g$stx-mark*$9156$1DOkPG g$e$9560$1DOkPG) (g$stx-subst*$9157$1DOkPG g$e$9560$1DOkPG) (g$stx-ae*$9158$1DOkPG g$e$9560$1DOkPG)))))) (g$mkstx$9169$1DOkPG g$mkstx$15385$1DOkPG (case-lambda ((g$e$9570$1DOkPG g$m*$9571$1DOkPG g$s*$9572$1DOkPG g$ae*$9573$1DOkPG) (if (g$stx?$9153$1DOkPG g$e$9570$1DOkPG) (call-with-values (case-lambda (() (g$join-wraps$9168$1DOkPG g$m*$9571$1DOkPG g$s*$9572$1DOkPG g$ae*$9573$1DOkPG g$e$9570$1DOkPG))) (case-lambda ((g$m*$9577$1DOkPG g$s*$9578$1DOkPG g$ae*$9579$1DOkPG) ((case-lambda ((g$ae*$9580$1DOkPG g$s*$9581$1DOkPG g$m*$9582$1DOkPG) (g$make-stx$9154$1DOkPG (g$stx-expr$9155$1DOkPG g$e$9570$1DOkPG) g$m*$9582$1DOkPG g$s*$9581$1DOkPG g$ae*$9580$1DOkPG))) g$ae*$9579$1DOkPG g$s*$9578$1DOkPG g$m*$9577$1DOkPG)))) (g$make-stx$9154$1DOkPG g$e$9570$1DOkPG g$m*$9571$1DOkPG g$s*$9572$1DOkPG g$ae*$9573$1DOkPG))))) (g$add-mark$9170$1DOkPG g$add-mark$15386$1DOkPG (case-lambda ((g$m$9583$1DOkPG g$e$9584$1DOkPG g$ae$9585$1DOkPG) (g$mkstx$9169$1DOkPG g$e$9584$1DOkPG (list g$m$9583$1DOkPG) '(shift) (list g$ae$9585$1DOkPG))))) (g$add-subst$9171$1DOkPG g$add-subst$15387$1DOkPG (case-lambda ((g$subst$9586$1DOkPG g$e$9587$1DOkPG) (g$mkstx$9169$1DOkPG g$e$9587$1DOkPG '() (list g$subst$9586$1DOkPG) '())))) (g$syntax-kind?$9172$1DOkPG g$syntax-kind?$15388$1DOkPG (case-lambda ((g$x$9588$1DOkPG g$p?$9589$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$9588$1DOkPG) (g$syntax-kind?$9172$1DOkPG (g$stx-expr$9155$1DOkPG g$x$9588$1DOkPG) g$p?$9589$1DOkPG) (if (annotation? g$x$9588$1DOkPG) (g$syntax-kind?$9172$1DOkPG (annotation-expression g$x$9588$1DOkPG) g$p?$9589$1DOkPG) (g$p?$9589$1DOkPG g$x$9588$1DOkPG)))))) (g$syntax-vector->list$9173$1DOkPG g$syntax-vector->list$15389$1DOkPG (case-lambda ((g$x$9590$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$9590$1DOkPG) ((case-lambda ((g$ls$9591$1DOkPG g$m*$9592$1DOkPG g$s*$9593$1DOkPG g$ae*$9594$1DOkPG) (map (case-lambda ((g$x$9595$1DOkPG) (g$mkstx$9169$1DOkPG g$x$9595$1DOkPG g$m*$9592$1DOkPG g$s*$9593$1DOkPG g$ae*$9594$1DOkPG))) g$ls$9591$1DOkPG))) (g$syntax-vector->list$9173$1DOkPG (g$stx-expr$9155$1DOkPG g$x$9590$1DOkPG)) (g$stx-mark*$9156$1DOkPG g$x$9590$1DOkPG) (g$stx-subst*$9157$1DOkPG g$x$9590$1DOkPG) (g$stx-ae*$9158$1DOkPG g$x$9590$1DOkPG)) (if (annotation? g$x$9590$1DOkPG) (g$syntax-vector->list$9173$1DOkPG (annotation-expression g$x$9590$1DOkPG)) (if (vector? g$x$9590$1DOkPG) (vector->list g$x$9590$1DOkPG) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" g$x$9590$1DOkPG))))))) (g$syntax-pair?$9174$1DOkPG g$syntax-pair?$15390$1DOkPG (case-lambda ((g$x$9596$1DOkPG) (g$syntax-kind?$9172$1DOkPG g$x$9596$1DOkPG pair?)))) (g$syntax-vector?$9175$1DOkPG g$syntax-vector?$15391$1DOkPG (case-lambda ((g$x$9597$1DOkPG) (g$syntax-kind?$9172$1DOkPG g$x$9597$1DOkPG vector?)))) (g$syntax-null?$9176$1DOkPG g$syntax-null?$15392$1DOkPG (case-lambda ((g$x$9598$1DOkPG) (g$syntax-kind?$9172$1DOkPG g$x$9598$1DOkPG null?)))) (g$syntax-list?$9177$1DOkPG g$syntax-list?$15393$1DOkPG (case-lambda ((g$x$9599$1DOkPG) ((case-lambda ((g$t$9600$1DOkPG) (if g$t$9600$1DOkPG g$t$9600$1DOkPG (begin '#f (if (g$syntax-pair?$9174$1DOkPG g$x$9599$1DOkPG) (begin '#f (g$syntax-list?$9177$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9599$1DOkPG))) '#f))))) (g$syntax-null?$9176$1DOkPG g$x$9599$1DOkPG))))) (g$syntax-car$9178$1DOkPG g$syntax-car$15394$1DOkPG (case-lambda ((g$x$9601$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$9601$1DOkPG) (g$mkstx$9169$1DOkPG (g$syntax-car$9178$1DOkPG (g$stx-expr$9155$1DOkPG g$x$9601$1DOkPG)) (g$stx-mark*$9156$1DOkPG g$x$9601$1DOkPG) (g$stx-subst*$9157$1DOkPG g$x$9601$1DOkPG) (g$stx-ae*$9158$1DOkPG g$x$9601$1DOkPG)) (if (annotation? g$x$9601$1DOkPG) (g$syntax-car$9178$1DOkPG (annotation-expression g$x$9601$1DOkPG)) (if (pair? g$x$9601$1DOkPG) (car g$x$9601$1DOkPG) (assertion-violation 'syntax-car '"BUG: not a pair" g$x$9601$1DOkPG))))))) (g$syntax-cdr$9179$1DOkPG g$syntax-cdr$15395$1DOkPG (case-lambda ((g$x$9602$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$9602$1DOkPG) (g$mkstx$9169$1DOkPG (g$syntax-cdr$9179$1DOkPG (g$stx-expr$9155$1DOkPG g$x$9602$1DOkPG)) (g$stx-mark*$9156$1DOkPG g$x$9602$1DOkPG) (g$stx-subst*$9157$1DOkPG g$x$9602$1DOkPG) (g$stx-ae*$9158$1DOkPG g$x$9602$1DOkPG)) (if (annotation? g$x$9602$1DOkPG) (g$syntax-cdr$9179$1DOkPG (annotation-expression g$x$9602$1DOkPG)) (if (pair? g$x$9602$1DOkPG) (cdr g$x$9602$1DOkPG) (assertion-violation 'syntax-cdr '"BUG: not a pair" g$x$9602$1DOkPG))))))) (g$syntax->list$9180$1DOkPG g$syntax->list$15396$1DOkPG (case-lambda ((g$x$9603$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9603$1DOkPG) (cons (g$syntax-car$9178$1DOkPG g$x$9603$1DOkPG) (g$syntax->list$9180$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9603$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$9603$1DOkPG) '() (assertion-violation 'syntax->list '"BUG: invalid argument" g$x$9603$1DOkPG)))))) (g$id?$9181$1DOkPG g$id?$15397$1DOkPG (case-lambda ((g$x$9604$1DOkPG) (g$syntax-kind?$9172$1DOkPG g$x$9604$1DOkPG symbol?)))) (g$id->sym$9182$1DOkPG g$id->sym$15398$1DOkPG (case-lambda ((g$x$9605$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$9605$1DOkPG) (g$id->sym$9182$1DOkPG (g$stx-expr$9155$1DOkPG g$x$9605$1DOkPG)) (if (annotation? g$x$9605$1DOkPG) (annotation-expression g$x$9605$1DOkPG) (if (symbol? g$x$9605$1DOkPG) g$x$9605$1DOkPG (assertion-violation 'id->sym '"BUG: not an id" g$x$9605$1DOkPG))))))) (g$same-marks?$9183$1DOkPG g$same-marks?$15399$1DOkPG (case-lambda ((g$x$9606$1DOkPG g$y$9607$1DOkPG) ((case-lambda ((g$t$9608$1DOkPG) (if g$t$9608$1DOkPG g$t$9608$1DOkPG (begin '#f (if (pair? g$x$9606$1DOkPG) (if (pair? g$y$9607$1DOkPG) (if (eq? (car g$x$9606$1DOkPG) (car g$y$9607$1DOkPG)) (begin '#f (g$same-marks?$9183$1DOkPG (cdr g$x$9606$1DOkPG) (cdr g$y$9607$1DOkPG))) '#f) '#f) '#f))))) (if (null? g$x$9606$1DOkPG) (begin '#f (null? g$y$9607$1DOkPG)) '#f))))) (g$bound-id=?$9184$1DOkPG g$bound-id=?$15400$1DOkPG (case-lambda ((g$x$9609$1DOkPG g$y$9610$1DOkPG) (if (eq? (g$id->sym$9182$1DOkPG g$x$9609$1DOkPG) (g$id->sym$9182$1DOkPG g$y$9610$1DOkPG)) (begin '#f (g$same-marks?$9183$1DOkPG (g$stx-mark*$9156$1DOkPG g$x$9609$1DOkPG) (g$stx-mark*$9156$1DOkPG g$y$9610$1DOkPG))) '#f)))) (g$free-id=?$9185$1DOkPG g$free-id=?$15401$1DOkPG (case-lambda ((g$i$9611$1DOkPG g$j$9612$1DOkPG) ((case-lambda ((g$t0$9613$1DOkPG g$t1$9614$1DOkPG) (if ((case-lambda ((g$t$9615$1DOkPG) (if g$t$9615$1DOkPG g$t$9615$1DOkPG (begin '#f g$t1$9614$1DOkPG)))) g$t0$9613$1DOkPG) (eq? g$t0$9613$1DOkPG g$t1$9614$1DOkPG) (eq? (g$id->sym$9182$1DOkPG g$i$9611$1DOkPG) (g$id->sym$9182$1DOkPG g$j$9612$1DOkPG))))) (g$id->label$9193$1DOkPG g$i$9611$1DOkPG) (g$id->label$9193$1DOkPG g$j$9612$1DOkPG))))) (g$valid-bound-ids?$9186$1DOkPG g$valid-bound-ids?$15402$1DOkPG (case-lambda ((g$id*$9616$1DOkPG) (if (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$id*$9616$1DOkPG) (begin '#f (g$distinct-bound-ids?$9187$1DOkPG g$id*$9616$1DOkPG)) '#f)))) (g$distinct-bound-ids?$9187$1DOkPG g$distinct-bound-ids?$15403$1DOkPG (case-lambda ((g$id*$9617$1DOkPG) ((case-lambda ((g$t$9618$1DOkPG) (if g$t$9618$1DOkPG g$t$9618$1DOkPG (begin '#f (if (not (g$bound-id-member?$9188$1DOkPG (car g$id*$9617$1DOkPG) (cdr g$id*$9617$1DOkPG))) (begin '#f (g$distinct-bound-ids?$9187$1DOkPG (cdr g$id*$9617$1DOkPG))) '#f))))) (null? g$id*$9617$1DOkPG))))) (g$bound-id-member?$9188$1DOkPG g$bound-id-member?$15404$1DOkPG (case-lambda ((g$id$9619$1DOkPG g$id*$9620$1DOkPG) (if (pair? g$id*$9620$1DOkPG) (begin '#f ((case-lambda ((g$t$9621$1DOkPG) (if g$t$9621$1DOkPG g$t$9621$1DOkPG (begin '#f (g$bound-id-member?$9188$1DOkPG g$id$9619$1DOkPG (cdr g$id*$9620$1DOkPG)))))) (g$bound-id=?$9184$1DOkPG g$id$9619$1DOkPG (car g$id*$9620$1DOkPG)))) '#f)))) (g$self-evaluating?$9189$1DOkPG g$self-evaluating?$15405$1DOkPG (case-lambda ((g$x$9622$1DOkPG) ((case-lambda ((g$t$9623$1DOkPG) (if g$t$9623$1DOkPG g$t$9623$1DOkPG ((case-lambda ((g$t$9624$1DOkPG) (if g$t$9624$1DOkPG g$t$9624$1DOkPG ((case-lambda ((g$t$9625$1DOkPG) (if g$t$9625$1DOkPG g$t$9625$1DOkPG ((case-lambda ((g$t$9626$1DOkPG) (if g$t$9626$1DOkPG g$t$9626$1DOkPG (begin '#f (bytevector? g$x$9622$1DOkPG))))) (boolean? g$x$9622$1DOkPG))))) (char? g$x$9622$1DOkPG))))) (string? g$x$9622$1DOkPG))))) (number? g$x$9622$1DOkPG))))) (g$strip-annotations$9190$1DOkPG g$strip-annotations$15406$1DOkPG (case-lambda ((g$x$9627$1DOkPG) (if (pair? g$x$9627$1DOkPG) (cons (g$strip-annotations$9190$1DOkPG (car g$x$9627$1DOkPG)) (g$strip-annotations$9190$1DOkPG (cdr g$x$9627$1DOkPG))) (if (annotation? g$x$9627$1DOkPG) (annotation-stripped g$x$9627$1DOkPG) g$x$9627$1DOkPG))))) (g$strip$9191$1DOkPG g$strip$15407$1DOkPG (case-lambda ((g$x$9628$1DOkPG g$m*$9629$1DOkPG) (if (g$top-marked?$9127$1DOkPG g$m*$9629$1DOkPG) (if ((case-lambda ((g$t$9630$1DOkPG) (if g$t$9630$1DOkPG g$t$9630$1DOkPG (begin '#f (if (pair? g$x$9628$1DOkPG) (begin '#f (annotation? (car g$x$9628$1DOkPG))) '#f))))) (annotation? g$x$9628$1DOkPG)) (g$strip-annotations$9190$1DOkPG g$x$9628$1DOkPG) g$x$9628$1DOkPG) ((letrec ((g$f$9631$1DOkPG (case-lambda ((g$x$9632$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$9632$1DOkPG) (g$strip$9191$1DOkPG (g$stx-expr$9155$1DOkPG g$x$9632$1DOkPG) (g$stx-mark*$9156$1DOkPG g$x$9632$1DOkPG)) (if (annotation? g$x$9632$1DOkPG) (annotation-stripped g$x$9632$1DOkPG) (if (pair? g$x$9632$1DOkPG) ((case-lambda ((g$a$9633$1DOkPG g$d$9634$1DOkPG) (if (if (eq? g$a$9633$1DOkPG (car g$x$9632$1DOkPG)) (begin '#f (eq? g$d$9634$1DOkPG (cdr g$x$9632$1DOkPG))) '#f) g$x$9632$1DOkPG (cons g$a$9633$1DOkPG g$d$9634$1DOkPG)))) (g$f$9631$1DOkPG (car g$x$9632$1DOkPG)) (g$f$9631$1DOkPG (cdr g$x$9632$1DOkPG))) (if (vector? g$x$9632$1DOkPG) ((case-lambda ((g$old$9635$1DOkPG) ((case-lambda ((g$new$9636$1DOkPG) (if (g$for-all$7866$1DOkPG eq? g$old$9635$1DOkPG g$new$9636$1DOkPG) g$x$9632$1DOkPG (list->vector g$new$9636$1DOkPG)))) (map g$f$9631$1DOkPG g$old$9635$1DOkPG)))) (vector->list g$x$9632$1DOkPG)) g$x$9632$1DOkPG)))))))) g$f$9631$1DOkPG) g$x$9628$1DOkPG))))) (g$stx->datum$9192$1DOkPG g$stx->datum$15408$1DOkPG (case-lambda ((g$x$9637$1DOkPG) (g$strip$9191$1DOkPG g$x$9637$1DOkPG '())))) (g$id->label$9193$1DOkPG g$id->label$15409$1DOkPG (case-lambda ((g$id$9638$1DOkPG) ((case-lambda ((g$sym$9639$1DOkPG) ((letrec ((g$search$9640$1DOkPG (case-lambda ((g$subst*$9641$1DOkPG g$mark*$9642$1DOkPG) (if (null? g$subst*$9641$1DOkPG) (g$interaction-sym->label$9507$1DOkPG g$sym$9639$1DOkPG) (if (eq? (car g$subst*$9641$1DOkPG) 'shift) (g$search$9640$1DOkPG (cdr g$subst*$9641$1DOkPG) (cdr g$mark*$9642$1DOkPG)) ((case-lambda ((g$rib$9643$1DOkPG) (if (g$rib-sealed/freq$9139$1DOkPG g$rib$9643$1DOkPG) ((case-lambda ((g$sym*$9644$1DOkPG) ((letrec ((g$f$9645$1DOkPG (case-lambda ((g$i$9646$1DOkPG g$j$9647$1DOkPG) (if (= g$i$9646$1DOkPG g$j$9647$1DOkPG) (g$search$9640$1DOkPG (cdr g$subst*$9641$1DOkPG) g$mark*$9642$1DOkPG) (if (if (eq? (vector-ref g$sym*$9644$1DOkPG g$i$9646$1DOkPG) g$sym$9639$1DOkPG) (begin '#f (g$same-marks?$9183$1DOkPG g$mark*$9642$1DOkPG (vector-ref (g$rib-mark**$9137$1DOkPG g$rib$9643$1DOkPG) g$i$9646$1DOkPG))) '#f) ((case-lambda ((g$label$9648$1DOkPG) (begin (g$increment-rib-frequency!$9148$1DOkPG g$rib$9643$1DOkPG g$i$9646$1DOkPG) g$label$9648$1DOkPG))) (vector-ref (g$rib-label*$9138$1DOkPG g$rib$9643$1DOkPG) g$i$9646$1DOkPG)) (g$f$9645$1DOkPG (+ g$i$9646$1DOkPG '1) g$j$9647$1DOkPG))))))) g$f$9645$1DOkPG) '0 (vector-length g$sym*$9644$1DOkPG)))) (g$rib-sym*$9136$1DOkPG g$rib$9643$1DOkPG)) ((letrec ((g$f$9649$1DOkPG (case-lambda ((g$sym*$9650$1DOkPG g$mark**$9651$1DOkPG g$label*$9652$1DOkPG) (if (null? g$sym*$9650$1DOkPG) (g$search$9640$1DOkPG (cdr g$subst*$9641$1DOkPG) g$mark*$9642$1DOkPG) (if (if (eq? (car g$sym*$9650$1DOkPG) g$sym$9639$1DOkPG) (begin '#f (g$same-marks?$9183$1DOkPG (car g$mark**$9651$1DOkPG) g$mark*$9642$1DOkPG)) '#f) (car g$label*$9652$1DOkPG) (g$f$9649$1DOkPG (cdr g$sym*$9650$1DOkPG) (cdr g$mark**$9651$1DOkPG) (cdr g$label*$9652$1DOkPG)))))))) g$f$9649$1DOkPG) (g$rib-sym*$9136$1DOkPG g$rib$9643$1DOkPG) (g$rib-mark**$9137$1DOkPG g$rib$9643$1DOkPG) (g$rib-label*$9138$1DOkPG g$rib$9643$1DOkPG))))) (car g$subst*$9641$1DOkPG)))))))) g$search$9640$1DOkPG) (g$stx-subst*$9157$1DOkPG g$id$9638$1DOkPG) (g$stx-mark*$9156$1DOkPG g$id$9638$1DOkPG)))) (g$id->sym$9182$1DOkPG g$id$9638$1DOkPG))))) (g$label->binding$9194$1DOkPG g$label->binding$15410$1DOkPG (case-lambda ((g$x$9653$1DOkPG g$r$9654$1DOkPG) ((case-lambda ((g$t$9655$1DOkPG) (if g$t$9655$1DOkPG ((case-lambda ((g$b$9656$1DOkPG) (if (if (pair? g$b$9656$1DOkPG) (begin '#f (eq? (car g$b$9656$1DOkPG) '$core-rtd)) '#f) (cons '$rtd (map g$bless$9388$1DOkPG (cdr g$b$9656$1DOkPG))) (if (if (pair? g$b$9656$1DOkPG) (begin '#f (eq? (car g$b$9656$1DOkPG) 'global-rtd)) '#f) ((case-lambda ((g$lib$9657$1DOkPG g$loc$9658$1DOkPG) (cons '$rtd (symbol-value g$loc$9658$1DOkPG)))) (g$cadr$7446$1DOkPG g$b$9656$1DOkPG) (g$cddr$7448$1DOkPG g$b$9656$1DOkPG)) g$b$9656$1DOkPG)))) g$t$9655$1DOkPG) ((case-lambda ((g$t$9659$1DOkPG) (if g$t$9659$1DOkPG (cdr g$t$9659$1DOkPG) '(displaced-lexical . #f)))) (assq g$x$9653$1DOkPG g$r$9654$1DOkPG))))) (g$imported-label->binding$8999$1DOkPG g$x$9653$1DOkPG))))) (g$make-binding$9195$1DOkPG g$make-binding$15411$1DOkPG cons) (g$binding-type$9196$1DOkPG g$binding-type$15412$1DOkPG car) (g$binding-value$9197$1DOkPG g$binding-value$15413$1DOkPG cdr) (g$raise-unbound-error$9198$1DOkPG g$raise-unbound-error$15414$1DOkPG (case-lambda ((g$id$9660$1DOkPG) (g$syntax-violation*$9500$1DOkPG '#f '"unbound identifier" g$id$9660$1DOkPG (g$make-undefined-violation$8202$1DOkPG))))) (g$syntax-type$9199$1DOkPG g$syntax-type$15415$1DOkPG (case-lambda ((g$e$9661$1DOkPG g$r$9662$1DOkPG) (if (g$id?$9181$1DOkPG g$e$9661$1DOkPG) ((case-lambda ((g$id$9663$1DOkPG) ((case-lambda ((g$label$9664$1DOkPG) ((case-lambda ((g$b$9665$1DOkPG) ((case-lambda ((g$type$9666$1DOkPG) ((case-lambda (() (begin (if g$label$9664$1DOkPG (void) (g$raise-unbound-error$9198$1DOkPG g$id$9663$1DOkPG)) ((case-lambda ((g$t$9667$1DOkPG) (if (memv g$t$9667$1DOkPG '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values g$type$9666$1DOkPG (g$binding-value$9197$1DOkPG g$b$9665$1DOkPG) g$id$9663$1DOkPG) (values 'other '#f '#f)))) g$type$9666$1DOkPG))))))) (g$binding-type$9196$1DOkPG g$b$9665$1DOkPG)))) (g$label->binding$9194$1DOkPG g$label$9664$1DOkPG g$r$9662$1DOkPG)))) (g$id->label$9193$1DOkPG g$id$9663$1DOkPG)))) g$e$9661$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$e$9661$1DOkPG) ((case-lambda ((g$id$9668$1DOkPG) (if (g$id?$9181$1DOkPG g$id$9668$1DOkPG) ((case-lambda ((g$label$9669$1DOkPG) ((case-lambda ((g$b$9670$1DOkPG) ((case-lambda ((g$type$9671$1DOkPG) ((case-lambda (() (begin (if g$label$9669$1DOkPG (void) (g$raise-unbound-error$9198$1DOkPG g$id$9668$1DOkPG)) ((case-lambda ((g$t$9672$1DOkPG) (if (memv g$t$9672$1DOkPG '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values g$type$9671$1DOkPG (g$binding-value$9197$1DOkPG g$b$9670$1DOkPG) g$id$9668$1DOkPG) (values 'call '#f '#f)))) g$type$9671$1DOkPG))))))) (g$binding-type$9196$1DOkPG g$b$9670$1DOkPG)))) (g$label->binding$9194$1DOkPG g$label$9669$1DOkPG g$r$9662$1DOkPG)))) (g$id->label$9193$1DOkPG g$id$9668$1DOkPG)) (values 'call '#f '#f)))) (g$syntax-car$9178$1DOkPG g$e$9661$1DOkPG)) ((case-lambda ((g$d$9673$1DOkPG) (if (g$self-evaluating?$9189$1DOkPG g$d$9673$1DOkPG) (values 'constant g$d$9673$1DOkPG '#f) (values 'other '#f '#f)))) (g$stx->datum$9192$1DOkPG g$e$9661$1DOkPG))))))) (g$sanitize-binding$9207$1DOkPG g$sanitize-binding$15416$1DOkPG (case-lambda ((g$x$9674$1DOkPG g$src$9675$1DOkPG) (if (procedure? g$x$9674$1DOkPG) (g$cons*$7868$1DOkPG 'local-macro g$x$9674$1DOkPG g$src$9675$1DOkPG) (if (if (pair? g$x$9674$1DOkPG) (if (eq? (car g$x$9674$1DOkPG) 'macro!) (begin '#f (procedure? (cdr g$x$9674$1DOkPG))) '#f) '#f) (g$cons*$7868$1DOkPG 'local-macro! (cdr g$x$9674$1DOkPG) g$src$9675$1DOkPG) (if (if (pair? g$x$9674$1DOkPG) (begin '#f (eq? (car g$x$9674$1DOkPG) '$rtd)) '#f) g$x$9674$1DOkPG (assertion-violation 'expand '"invalid transformer" g$x$9674$1DOkPG))))))) (g$make-variable-transformer$9208$1DOkPG g$make-variable-transformer$15417$1DOkPG (case-lambda ((g$x$9676$1DOkPG) (if (procedure? g$x$9676$1DOkPG) (cons 'macro! g$x$9676$1DOkPG) (assertion-violation 'make-variable-transformer '"not a procedure" g$x$9676$1DOkPG))))) (g$make-eval-transformer$9209$1DOkPG g$make-eval-transformer$15418$1DOkPG (case-lambda ((g$x$9677$1DOkPG) (g$sanitize-binding$9207$1DOkPG (eval-core (g$expanded->core$8702$1DOkPG g$x$9677$1DOkPG)) g$x$9677$1DOkPG)))) (g$parse-define$9365$1DOkPG g$parse-define$15419$1DOkPG (case-lambda ((g$x$9678$1DOkPG) ((case-lambda ((g$t$9679$1DOkPG) ((case-lambda ((g$ls/false$9680$1DOkPG) (if (if g$ls/false$9680$1DOkPG (begin '#f (apply (case-lambda ((g$id$9681$1DOkPG g$fmls$9682$1DOkPG g$b$9683$1DOkPG g$b*$9684$1DOkPG) (g$id?$9181$1DOkPG g$id$9681$1DOkPG))) g$ls/false$9680$1DOkPG)) '#f) (apply (case-lambda ((g$id$9685$1DOkPG g$fmls$9686$1DOkPG g$b$9687$1DOkPG g$b*$9688$1DOkPG) (begin (g$verify-formals$9440$1DOkPG g$fmls$9686$1DOkPG g$x$9678$1DOkPG) (values g$id$9685$1DOkPG (cons 'defun (cons g$fmls$9686$1DOkPG (cons g$b$9687$1DOkPG g$b*$9688$1DOkPG))))))) g$ls/false$9680$1DOkPG) ((case-lambda ((g$t$9689$1DOkPG) ((case-lambda ((g$ls/false$9690$1DOkPG) (if (if g$ls/false$9690$1DOkPG (begin '#f (apply (case-lambda ((g$id$9691$1DOkPG g$val$9692$1DOkPG) (g$id?$9181$1DOkPG g$id$9691$1DOkPG))) g$ls/false$9690$1DOkPG)) '#f) (apply (case-lambda ((g$id$9693$1DOkPG g$val$9694$1DOkPG) (values g$id$9693$1DOkPG (cons 'expr g$val$9694$1DOkPG)))) g$ls/false$9690$1DOkPG) ((case-lambda ((g$t$9695$1DOkPG) ((case-lambda ((g$ls/false$9696$1DOkPG) (if (if g$ls/false$9696$1DOkPG (begin '#f (apply (case-lambda ((g$id$9697$1DOkPG) (g$id?$9181$1DOkPG g$id$9697$1DOkPG))) g$ls/false$9696$1DOkPG)) '#f) (apply (case-lambda ((g$id$9698$1DOkPG) (values g$id$9698$1DOkPG (cons 'expr (g$bless$9388$1DOkPG '(void)))))) g$ls/false$9696$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9695$1DOkPG)))) ((case-lambda ((g$x$9699$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9699$1DOkPG) (begin '#f ((case-lambda ((g$q$9700$1DOkPG) (if g$q$9700$1DOkPG (begin '#f ((case-lambda ((g$r$9701$1DOkPG) (if g$r$9701$1DOkPG (begin '#f (append g$q$9700$1DOkPG g$r$9701$1DOkPG)) '#f))) ((case-lambda ((g$x$9702$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9702$1DOkPG) (begin '#f ((case-lambda ((g$q$9703$1DOkPG) (if g$q$9703$1DOkPG (begin '#f ((case-lambda ((g$r$9704$1DOkPG) (if g$r$9704$1DOkPG (begin '#f (append g$q$9703$1DOkPG g$r$9704$1DOkPG)) '#f))) ((case-lambda ((g$x$9705$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$9705$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9702$1DOkPG)))) '#f))) ((case-lambda ((g$x$9706$1DOkPG) (list g$x$9706$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9702$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9699$1DOkPG)))) '#f))) ((case-lambda ((g$x$9707$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9699$1DOkPG)))) '#f))) g$t$9695$1DOkPG)))) g$t$9689$1DOkPG)))) ((case-lambda ((g$x$9708$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9708$1DOkPG) (begin '#f ((case-lambda ((g$q$9709$1DOkPG) (if g$q$9709$1DOkPG (begin '#f ((case-lambda ((g$r$9710$1DOkPG) (if g$r$9710$1DOkPG (begin '#f (append g$q$9709$1DOkPG g$r$9710$1DOkPG)) '#f))) ((case-lambda ((g$x$9711$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9711$1DOkPG) (begin '#f ((case-lambda ((g$q$9712$1DOkPG) (if g$q$9712$1DOkPG (begin '#f ((case-lambda ((g$r$9713$1DOkPG) (if g$r$9713$1DOkPG (begin '#f (append g$q$9712$1DOkPG g$r$9713$1DOkPG)) '#f))) ((case-lambda ((g$x$9714$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9714$1DOkPG) (begin '#f ((case-lambda ((g$q$9715$1DOkPG) (if g$q$9715$1DOkPG (begin '#f ((case-lambda ((g$r$9716$1DOkPG) (if g$r$9716$1DOkPG (begin '#f (append g$q$9715$1DOkPG g$r$9716$1DOkPG)) '#f))) ((case-lambda ((g$x$9717$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$9717$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9714$1DOkPG)))) '#f))) ((case-lambda ((g$x$9718$1DOkPG) (list g$x$9718$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9714$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9711$1DOkPG)))) '#f))) ((case-lambda ((g$x$9719$1DOkPG) (list g$x$9719$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9711$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9708$1DOkPG)))) '#f))) ((case-lambda ((g$x$9720$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9708$1DOkPG)))) '#f))) g$t$9689$1DOkPG)))) g$t$9679$1DOkPG)))) ((case-lambda ((g$x$9721$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9721$1DOkPG) (begin '#f ((case-lambda ((g$q$9722$1DOkPG) (if g$q$9722$1DOkPG (begin '#f ((case-lambda ((g$r$9723$1DOkPG) (if g$r$9723$1DOkPG (begin '#f (append g$q$9722$1DOkPG g$r$9723$1DOkPG)) '#f))) ((case-lambda ((g$x$9724$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9724$1DOkPG) (begin '#f ((case-lambda ((g$q$9725$1DOkPG) (if g$q$9725$1DOkPG (begin '#f ((case-lambda ((g$r$9726$1DOkPG) (if g$r$9726$1DOkPG (begin '#f (append g$q$9725$1DOkPG g$r$9726$1DOkPG)) '#f))) ((case-lambda ((g$x$9727$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9727$1DOkPG) (begin '#f ((case-lambda ((g$q$9728$1DOkPG) (if g$q$9728$1DOkPG (begin '#f ((case-lambda ((g$r$9729$1DOkPG) (if g$r$9729$1DOkPG (begin '#f (append g$q$9728$1DOkPG g$r$9729$1DOkPG)) '#f))) ((letrec ((g$f$9730$1DOkPG (case-lambda ((g$x$9731$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9731$1DOkPG) ((case-lambda ((g$cars/f$9732$1DOkPG) (if g$cars/f$9732$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$9733$1DOkPG) (if g$cdrs/f$9733$1DOkPG (begin '#f (map cons g$cars/f$9732$1DOkPG g$cdrs/f$9733$1DOkPG)) '#f))) (g$f$9730$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9731$1DOkPG)))) '#f))) ((case-lambda ((g$x$9734$1DOkPG) (list g$x$9734$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9731$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$9731$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$9730$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$9727$1DOkPG)))) '#f))) ((case-lambda ((g$x$9735$1DOkPG) (list g$x$9735$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9727$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9724$1DOkPG)))) '#f))) ((case-lambda ((g$x$9736$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9736$1DOkPG) (begin '#f ((case-lambda ((g$q$9737$1DOkPG) (if g$q$9737$1DOkPG (begin '#f ((case-lambda ((g$r$9738$1DOkPG) (if g$r$9738$1DOkPG (begin '#f (append g$q$9737$1DOkPG g$r$9738$1DOkPG)) '#f))) ((case-lambda ((g$x$9739$1DOkPG) (list g$x$9739$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$9736$1DOkPG)))) '#f))) ((case-lambda ((g$x$9740$1DOkPG) (list g$x$9740$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9736$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$9724$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9721$1DOkPG)))) '#f))) ((case-lambda ((g$x$9741$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9721$1DOkPG)))) '#f))) g$t$9679$1DOkPG)))) g$x$9678$1DOkPG)))) (g$parse-define-syntax$9366$1DOkPG g$parse-define-syntax$15420$1DOkPG (case-lambda ((g$x$9742$1DOkPG) ((case-lambda ((g$t$9743$1DOkPG) ((case-lambda ((g$ls/false$9744$1DOkPG) (if (if g$ls/false$9744$1DOkPG (begin '#f (apply (case-lambda ((g$id$9745$1DOkPG g$val$9746$1DOkPG) (g$id?$9181$1DOkPG g$id$9745$1DOkPG))) g$ls/false$9744$1DOkPG)) '#f) (apply (case-lambda ((g$id$9747$1DOkPG g$val$9748$1DOkPG) (values g$id$9747$1DOkPG g$val$9748$1DOkPG))) g$ls/false$9744$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9743$1DOkPG)))) ((case-lambda ((g$x$9749$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9749$1DOkPG) (begin '#f ((case-lambda ((g$q$9750$1DOkPG) (if g$q$9750$1DOkPG (begin '#f ((case-lambda ((g$r$9751$1DOkPG) (if g$r$9751$1DOkPG (begin '#f (append g$q$9750$1DOkPG g$r$9751$1DOkPG)) '#f))) ((case-lambda ((g$x$9752$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9752$1DOkPG) (begin '#f ((case-lambda ((g$q$9753$1DOkPG) (if g$q$9753$1DOkPG (begin '#f ((case-lambda ((g$r$9754$1DOkPG) (if g$r$9754$1DOkPG (begin '#f (append g$q$9753$1DOkPG g$r$9754$1DOkPG)) '#f))) ((case-lambda ((g$x$9755$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9755$1DOkPG) (begin '#f ((case-lambda ((g$q$9756$1DOkPG) (if g$q$9756$1DOkPG (begin '#f ((case-lambda ((g$r$9757$1DOkPG) (if g$r$9757$1DOkPG (begin '#f (append g$q$9756$1DOkPG g$r$9757$1DOkPG)) '#f))) ((case-lambda ((g$x$9758$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$9758$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9755$1DOkPG)))) '#f))) ((case-lambda ((g$x$9759$1DOkPG) (list g$x$9759$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9755$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9752$1DOkPG)))) '#f))) ((case-lambda ((g$x$9760$1DOkPG) (list g$x$9760$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9752$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9749$1DOkPG)))) '#f))) ((case-lambda ((g$x$9761$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9749$1DOkPG)))) '#f))) g$t$9743$1DOkPG)))) g$x$9742$1DOkPG)))) (g$scheme-stx-hashtable$9367$1DOkPG g$scheme-stx-hashtable$15421$1DOkPG (g$make-eq-hashtable$7710$1DOkPG)) (g$scheme-stx$9368$1DOkPG g$scheme-stx$15422$1DOkPG (case-lambda ((g$sym$9762$1DOkPG) ((case-lambda ((g$t$9763$1DOkPG) (if g$t$9763$1DOkPG g$t$9763$1DOkPG (begin '#f ((case-lambda ((g$subst$9764$1DOkPG) ((case-lambda ((g$stx$9765$1DOkPG) ((case-lambda ((g$stx$9766$1DOkPG) ((case-lambda (() (begin (g$hashtable-set!$7714$1DOkPG g$scheme-stx-hashtable$9367$1DOkPG g$sym$9762$1DOkPG g$stx$9766$1DOkPG) g$stx$9766$1DOkPG)))))) ((case-lambda ((g$t$9767$1DOkPG) (if g$t$9767$1DOkPG ((case-lambda ((g$x$9768$1DOkPG) ((case-lambda ((g$name$9769$1DOkPG g$label$9770$1DOkPG) (g$add-subst$9171$1DOkPG (g$make-rib$9135$1DOkPG (list g$name$9769$1DOkPG) (list g$top-mark*$9126$1DOkPG) (list g$label$9770$1DOkPG) '#f) g$stx$9765$1DOkPG))) (car g$x$9768$1DOkPG) (cdr g$x$9768$1DOkPG)))) g$t$9767$1DOkPG) g$stx$9765$1DOkPG))) (assq g$sym$9762$1DOkPG g$subst$9764$1DOkPG))))) (g$mkstx$9169$1DOkPG g$sym$9762$1DOkPG g$top-mark*$9126$1DOkPG '() '())))) (g$library-subst$8955$1DOkPG (g$find-library-by-name$8991$1DOkPG '(psyntax system $all)))))))) (g$hashtable-ref$7713$1DOkPG g$scheme-stx-hashtable$9367$1DOkPG g$sym$9762$1DOkPG '#f))))) (g$lexical-var$9369$1DOkPG g$lexical-var$15423$1DOkPG car) (g$lexical-mutable?$9370$1DOkPG g$lexical-mutable?$15424$1DOkPG cdr) (g$set-lexical-mutable!$9371$1DOkPG g$set-lexical-mutable!$15425$1DOkPG set-cdr!) (g$add-lexical$9372$1DOkPG g$add-lexical$15426$1DOkPG (case-lambda ((g$lab$9771$1DOkPG g$lex$9772$1DOkPG g$r$9773$1DOkPG) (cons (g$cons*$7868$1DOkPG g$lab$9771$1DOkPG 'lexical g$lex$9772$1DOkPG '#f) g$r$9773$1DOkPG)))) (g$add-lexicals$9373$1DOkPG g$add-lexicals$15427$1DOkPG (case-lambda ((g$lab*$9774$1DOkPG g$lex*$9775$1DOkPG g$r$9776$1DOkPG) (if (null? g$lab*$9774$1DOkPG) g$r$9776$1DOkPG (g$add-lexicals$9373$1DOkPG (cdr g$lab*$9774$1DOkPG) (cdr g$lex*$9775$1DOkPG) (g$add-lexical$9372$1DOkPG (car g$lab*$9774$1DOkPG) (car g$lex*$9775$1DOkPG) g$r$9776$1DOkPG)))))) (g$letrec-helper$9374$1DOkPG g$letrec-helper$15428$1DOkPG (case-lambda ((g$e$9777$1DOkPG g$r$9778$1DOkPG g$mr$9779$1DOkPG g$build$9780$1DOkPG) ((case-lambda ((g$t$9781$1DOkPG) ((case-lambda ((g$ls/false$9782$1DOkPG) (if (if g$ls/false$9782$1DOkPG (begin '#f (apply (case-lambda ((g$lhs*$9783$1DOkPG g$rhs*$9784$1DOkPG g$b$9785$1DOkPG g$b*$9786$1DOkPG) '#t)) g$ls/false$9782$1DOkPG)) '#f) (apply (case-lambda ((g$lhs*$9787$1DOkPG g$rhs*$9788$1DOkPG g$b$9789$1DOkPG g$b*$9790$1DOkPG) (if (not (g$valid-bound-ids?$9186$1DOkPG g$lhs*$9787$1DOkPG)) (g$invalid-fmls-error$9390$1DOkPG g$e$9777$1DOkPG g$lhs*$9787$1DOkPG) ((case-lambda ((g$lex*$9791$1DOkPG g$lab*$9792$1DOkPG) ((case-lambda ((g$rib$9793$1DOkPG g$r$9794$1DOkPG) ((case-lambda ((g$body$9795$1DOkPG g$rhs*$9796$1DOkPG) (g$build$9780$1DOkPG '#f g$lex*$9791$1DOkPG g$rhs*$9796$1DOkPG g$body$9795$1DOkPG))) (g$chi-internal$9447$1DOkPG (g$add-subst$9171$1DOkPG g$rib$9793$1DOkPG (cons g$b$9789$1DOkPG g$b*$9790$1DOkPG)) g$r$9794$1DOkPG g$mr$9779$1DOkPG) (g$chi-expr*$9436$1DOkPG (map (case-lambda ((g$x$9797$1DOkPG) (g$add-subst$9171$1DOkPG g$rib$9793$1DOkPG g$x$9797$1DOkPG))) g$rhs*$9788$1DOkPG) g$r$9794$1DOkPG g$mr$9779$1DOkPG)))) (g$make-full-rib$9149$1DOkPG g$lhs*$9787$1DOkPG g$lab*$9792$1DOkPG) (g$add-lexicals$9373$1DOkPG g$lab*$9792$1DOkPG g$lex*$9791$1DOkPG g$r$9778$1DOkPG)))) (map g$gen-lexical$9128$1DOkPG g$lhs*$9787$1DOkPG) (map g$gen-label$9130$1DOkPG g$lhs*$9787$1DOkPG))))) g$ls/false$9782$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9781$1DOkPG)))) ((case-lambda ((g$x$9798$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9798$1DOkPG) (begin '#f ((case-lambda ((g$q$9799$1DOkPG) (if g$q$9799$1DOkPG (begin '#f ((case-lambda ((g$r$9800$1DOkPG) (if g$r$9800$1DOkPG (begin '#f (append g$q$9799$1DOkPG g$r$9800$1DOkPG)) '#f))) ((case-lambda ((g$x$9801$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9801$1DOkPG) (begin '#f ((case-lambda ((g$q$9802$1DOkPG) (if g$q$9802$1DOkPG (begin '#f ((case-lambda ((g$r$9803$1DOkPG) (if g$r$9803$1DOkPG (begin '#f (append g$q$9802$1DOkPG g$r$9803$1DOkPG)) '#f))) ((case-lambda ((g$x$9804$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9804$1DOkPG) (begin '#f ((case-lambda ((g$q$9805$1DOkPG) (if g$q$9805$1DOkPG (begin '#f ((case-lambda ((g$r$9806$1DOkPG) (if g$r$9806$1DOkPG (begin '#f (append g$q$9805$1DOkPG g$r$9806$1DOkPG)) '#f))) ((letrec ((g$f$9807$1DOkPG (case-lambda ((g$x$9808$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9808$1DOkPG) ((case-lambda ((g$cars/f$9809$1DOkPG) (if g$cars/f$9809$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$9810$1DOkPG) (if g$cdrs/f$9810$1DOkPG (begin '#f (map cons g$cars/f$9809$1DOkPG g$cdrs/f$9810$1DOkPG)) '#f))) (g$f$9807$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9808$1DOkPG)))) '#f))) ((case-lambda ((g$x$9811$1DOkPG) (list g$x$9811$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9808$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$9808$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$9807$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$9804$1DOkPG)))) '#f))) ((case-lambda ((g$x$9812$1DOkPG) (list g$x$9812$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9804$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9801$1DOkPG)))) '#f))) ((letrec ((g$f$9813$1DOkPG (case-lambda ((g$x$9814$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9814$1DOkPG) ((case-lambda ((g$cars/f$9815$1DOkPG) (if g$cars/f$9815$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$9816$1DOkPG) (if g$cdrs/f$9816$1DOkPG (begin '#f (map cons g$cars/f$9815$1DOkPG g$cdrs/f$9816$1DOkPG)) '#f))) (g$f$9813$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9814$1DOkPG)))) '#f))) ((case-lambda ((g$x$9817$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9817$1DOkPG) (begin '#f ((case-lambda ((g$q$9818$1DOkPG) (if g$q$9818$1DOkPG (begin '#f ((case-lambda ((g$r$9819$1DOkPG) (if g$r$9819$1DOkPG (begin '#f (append g$q$9818$1DOkPG g$r$9819$1DOkPG)) '#f))) ((case-lambda ((g$x$9820$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9820$1DOkPG) (begin '#f ((case-lambda ((g$q$9821$1DOkPG) (if g$q$9821$1DOkPG (begin '#f ((case-lambda ((g$r$9822$1DOkPG) (if g$r$9822$1DOkPG (begin '#f (append g$q$9821$1DOkPG g$r$9822$1DOkPG)) '#f))) ((case-lambda ((g$x$9823$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$9823$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9820$1DOkPG)))) '#f))) ((case-lambda ((g$x$9824$1DOkPG) (list g$x$9824$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9820$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9817$1DOkPG)))) '#f))) ((case-lambda ((g$x$9825$1DOkPG) (list g$x$9825$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9817$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$9814$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$9814$1DOkPG) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$9813$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$9801$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9798$1DOkPG)))) '#f))) ((case-lambda ((g$x$9826$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9798$1DOkPG)))) '#f))) g$t$9781$1DOkPG)))) g$e$9777$1DOkPG)))) (g$letrec-transformer$9375$1DOkPG g$letrec-transformer$15429$1DOkPG (case-lambda ((g$e$9827$1DOkPG g$r$9828$1DOkPG g$mr$9829$1DOkPG) (g$letrec-helper$9374$1DOkPG g$e$9827$1DOkPG g$r$9828$1DOkPG g$mr$9829$1DOkPG g$build-letrec$9120$1DOkPG)))) (g$letrec*-transformer$9376$1DOkPG g$letrec*-transformer$15430$1DOkPG (case-lambda ((g$e$9830$1DOkPG g$r$9831$1DOkPG g$mr$9832$1DOkPG) (g$letrec-helper$9374$1DOkPG g$e$9830$1DOkPG g$r$9831$1DOkPG g$mr$9832$1DOkPG g$build-letrec*$9121$1DOkPG)))) (g$fluid-let-syntax-transformer$9377$1DOkPG g$fluid-let-syntax-transformer$15431$1DOkPG (case-lambda ((g$e$9833$1DOkPG g$r$9834$1DOkPG g$mr$9835$1DOkPG) (letrec* ((g$lookup$9836$1DOkPG (case-lambda ((g$x$9879$1DOkPG) ((case-lambda ((g$t$9880$1DOkPG) (if g$t$9880$1DOkPG g$t$9880$1DOkPG (begin '#f (g$syntax-violation$9501$1DOkPG '#f '"unbound identifier" g$e$9833$1DOkPG g$x$9879$1DOkPG))))) (g$id->label$9193$1DOkPG g$x$9879$1DOkPG)))))) ((case-lambda ((g$t$9837$1DOkPG) ((case-lambda ((g$ls/false$9838$1DOkPG) (if (if g$ls/false$9838$1DOkPG (begin '#f (apply (case-lambda ((g$lhs*$9839$1DOkPG g$rhs*$9840$1DOkPG g$b$9841$1DOkPG g$b*$9842$1DOkPG) '#t)) g$ls/false$9838$1DOkPG)) '#f) (apply (case-lambda ((g$lhs*$9843$1DOkPG g$rhs*$9844$1DOkPG g$b$9845$1DOkPG g$b*$9846$1DOkPG) (if (not (g$valid-bound-ids?$9186$1DOkPG g$lhs*$9843$1DOkPG)) (g$invalid-fmls-error$9390$1DOkPG g$e$9833$1DOkPG g$lhs*$9843$1DOkPG) ((case-lambda ((g$lab*$9847$1DOkPG g$rhs*$9848$1DOkPG) (g$chi-internal$9447$1DOkPG (cons g$b$9845$1DOkPG g$b*$9846$1DOkPG) (append (map cons g$lab*$9847$1DOkPG g$rhs*$9848$1DOkPG) g$r$9834$1DOkPG) (append (map cons g$lab*$9847$1DOkPG g$rhs*$9848$1DOkPG) g$mr$9835$1DOkPG)))) (map g$lookup$9836$1DOkPG g$lhs*$9843$1DOkPG) (map (case-lambda ((g$x$9849$1DOkPG) (g$make-eval-transformer$9209$1DOkPG (g$expand-transformer$9455$1DOkPG g$x$9849$1DOkPG g$mr$9835$1DOkPG)))) g$rhs*$9844$1DOkPG))))) g$ls/false$9838$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9837$1DOkPG)))) ((case-lambda ((g$x$9850$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9850$1DOkPG) (begin '#f ((case-lambda ((g$q$9851$1DOkPG) (if g$q$9851$1DOkPG (begin '#f ((case-lambda ((g$r$9852$1DOkPG) (if g$r$9852$1DOkPG (begin '#f (append g$q$9851$1DOkPG g$r$9852$1DOkPG)) '#f))) ((case-lambda ((g$x$9853$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9853$1DOkPG) (begin '#f ((case-lambda ((g$q$9854$1DOkPG) (if g$q$9854$1DOkPG (begin '#f ((case-lambda ((g$r$9855$1DOkPG) (if g$r$9855$1DOkPG (begin '#f (append g$q$9854$1DOkPG g$r$9855$1DOkPG)) '#f))) ((case-lambda ((g$x$9856$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9856$1DOkPG) (begin '#f ((case-lambda ((g$q$9857$1DOkPG) (if g$q$9857$1DOkPG (begin '#f ((case-lambda ((g$r$9858$1DOkPG) (if g$r$9858$1DOkPG (begin '#f (append g$q$9857$1DOkPG g$r$9858$1DOkPG)) '#f))) ((letrec ((g$f$9859$1DOkPG (case-lambda ((g$x$9860$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9860$1DOkPG) ((case-lambda ((g$cars/f$9861$1DOkPG) (if g$cars/f$9861$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$9862$1DOkPG) (if g$cdrs/f$9862$1DOkPG (begin '#f (map cons g$cars/f$9861$1DOkPG g$cdrs/f$9862$1DOkPG)) '#f))) (g$f$9859$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9860$1DOkPG)))) '#f))) ((case-lambda ((g$x$9863$1DOkPG) (list g$x$9863$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9860$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$9860$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$9859$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$9856$1DOkPG)))) '#f))) ((case-lambda ((g$x$9864$1DOkPG) (list g$x$9864$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9856$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9853$1DOkPG)))) '#f))) ((letrec ((g$f$9865$1DOkPG (case-lambda ((g$x$9866$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9866$1DOkPG) ((case-lambda ((g$cars/f$9867$1DOkPG) (if g$cars/f$9867$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$9868$1DOkPG) (if g$cdrs/f$9868$1DOkPG (begin '#f (map cons g$cars/f$9867$1DOkPG g$cdrs/f$9868$1DOkPG)) '#f))) (g$f$9865$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9866$1DOkPG)))) '#f))) ((case-lambda ((g$x$9869$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9869$1DOkPG) (begin '#f ((case-lambda ((g$q$9870$1DOkPG) (if g$q$9870$1DOkPG (begin '#f ((case-lambda ((g$r$9871$1DOkPG) (if g$r$9871$1DOkPG (begin '#f (append g$q$9870$1DOkPG g$r$9871$1DOkPG)) '#f))) ((case-lambda ((g$x$9872$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9872$1DOkPG) (begin '#f ((case-lambda ((g$q$9873$1DOkPG) (if g$q$9873$1DOkPG (begin '#f ((case-lambda ((g$r$9874$1DOkPG) (if g$r$9874$1DOkPG (begin '#f (append g$q$9873$1DOkPG g$r$9874$1DOkPG)) '#f))) ((case-lambda ((g$x$9875$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$9875$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9872$1DOkPG)))) '#f))) ((case-lambda ((g$x$9876$1DOkPG) (list g$x$9876$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9872$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9869$1DOkPG)))) '#f))) ((case-lambda ((g$x$9877$1DOkPG) (list g$x$9877$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9869$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$9866$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$9866$1DOkPG) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$9865$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$9853$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9850$1DOkPG)))) '#f))) ((case-lambda ((g$x$9878$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9850$1DOkPG)))) '#f))) g$t$9837$1DOkPG)))) g$e$9833$1DOkPG))))) (g$type-descriptor-transformer$9378$1DOkPG g$type-descriptor-transformer$15432$1DOkPG (case-lambda ((g$e$9881$1DOkPG g$r$9882$1DOkPG g$mr$9883$1DOkPG) ((case-lambda ((g$t$9884$1DOkPG) ((case-lambda ((g$ls/false$9885$1DOkPG) (if (if g$ls/false$9885$1DOkPG (begin '#f (apply (case-lambda ((g$id$9886$1DOkPG) (g$id?$9181$1DOkPG g$id$9886$1DOkPG))) g$ls/false$9885$1DOkPG)) '#f) (apply (case-lambda ((g$id$9887$1DOkPG) ((case-lambda ((g$lab$9888$1DOkPG) ((case-lambda ((g$b$9889$1DOkPG) ((case-lambda ((g$type$9890$1DOkPG) ((case-lambda (() (begin (if g$lab$9888$1DOkPG (void) (g$raise-unbound-error$9198$1DOkPG g$id$9887$1DOkPG)) (if (if (eq? g$type$9890$1DOkPG '$rtd) (begin '#f (not (list? (g$binding-value$9197$1DOkPG g$b$9889$1DOkPG)))) '#f) (void) (g$syntax-violation$9501$1DOkPG '#f '"not a record type" g$e$9881$1DOkPG)) (list 'quote (g$binding-value$9197$1DOkPG g$b$9889$1DOkPG)))))))) (g$binding-type$9196$1DOkPG g$b$9889$1DOkPG)))) (g$label->binding$9194$1DOkPG g$lab$9888$1DOkPG g$r$9882$1DOkPG)))) (g$id->label$9193$1DOkPG g$id$9887$1DOkPG)))) g$ls/false$9885$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9884$1DOkPG)))) ((case-lambda ((g$x$9891$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9891$1DOkPG) (begin '#f ((case-lambda ((g$q$9892$1DOkPG) (if g$q$9892$1DOkPG (begin '#f ((case-lambda ((g$r$9893$1DOkPG) (if g$r$9893$1DOkPG (begin '#f (append g$q$9892$1DOkPG g$r$9893$1DOkPG)) '#f))) ((case-lambda ((g$x$9894$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9894$1DOkPG) (begin '#f ((case-lambda ((g$q$9895$1DOkPG) (if g$q$9895$1DOkPG (begin '#f ((case-lambda ((g$r$9896$1DOkPG) (if g$r$9896$1DOkPG (begin '#f (append g$q$9895$1DOkPG g$r$9896$1DOkPG)) '#f))) ((case-lambda ((g$x$9897$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$9897$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9894$1DOkPG)))) '#f))) ((case-lambda ((g$x$9898$1DOkPG) (list g$x$9898$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9894$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9891$1DOkPG)))) '#f))) ((case-lambda ((g$x$9899$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9891$1DOkPG)))) '#f))) g$t$9884$1DOkPG)))) g$e$9881$1DOkPG)))) (g$record-type-descriptor-transformer$9379$1DOkPG g$record-type-descriptor-transformer$15433$1DOkPG (case-lambda ((g$e$9900$1DOkPG g$r$9901$1DOkPG g$mr$9902$1DOkPG) ((case-lambda ((g$t$9903$1DOkPG) ((case-lambda ((g$ls/false$9904$1DOkPG) (if (if g$ls/false$9904$1DOkPG (begin '#f (apply (case-lambda ((g$id$9905$1DOkPG) (g$id?$9181$1DOkPG g$id$9905$1DOkPG))) g$ls/false$9904$1DOkPG)) '#f) (apply (case-lambda ((g$id$9906$1DOkPG) ((case-lambda ((g$lab$9907$1DOkPG) ((case-lambda ((g$b$9908$1DOkPG) ((case-lambda ((g$type$9909$1DOkPG) ((case-lambda (() (begin (if g$lab$9907$1DOkPG (void) (g$raise-unbound-error$9198$1DOkPG g$id$9906$1DOkPG)) (if (if (eq? g$type$9909$1DOkPG '$rtd) (begin '#f (list? (g$binding-value$9197$1DOkPG g$b$9908$1DOkPG))) '#f) (void) (g$syntax-violation$9501$1DOkPG '#f '"not a record type" g$e$9900$1DOkPG)) (g$chi-expr$9438$1DOkPG (car (g$binding-value$9197$1DOkPG g$b$9908$1DOkPG)) g$r$9901$1DOkPG g$mr$9902$1DOkPG))))))) (g$binding-type$9196$1DOkPG g$b$9908$1DOkPG)))) (g$label->binding$9194$1DOkPG g$lab$9907$1DOkPG g$r$9901$1DOkPG)))) (g$id->label$9193$1DOkPG g$id$9906$1DOkPG)))) g$ls/false$9904$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9903$1DOkPG)))) ((case-lambda ((g$x$9910$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9910$1DOkPG) (begin '#f ((case-lambda ((g$q$9911$1DOkPG) (if g$q$9911$1DOkPG (begin '#f ((case-lambda ((g$r$9912$1DOkPG) (if g$r$9912$1DOkPG (begin '#f (append g$q$9911$1DOkPG g$r$9912$1DOkPG)) '#f))) ((case-lambda ((g$x$9913$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9913$1DOkPG) (begin '#f ((case-lambda ((g$q$9914$1DOkPG) (if g$q$9914$1DOkPG (begin '#f ((case-lambda ((g$r$9915$1DOkPG) (if g$r$9915$1DOkPG (begin '#f (append g$q$9914$1DOkPG g$r$9915$1DOkPG)) '#f))) ((case-lambda ((g$x$9916$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$9916$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9913$1DOkPG)))) '#f))) ((case-lambda ((g$x$9917$1DOkPG) (list g$x$9917$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9913$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9910$1DOkPG)))) '#f))) ((case-lambda ((g$x$9918$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9910$1DOkPG)))) '#f))) g$t$9903$1DOkPG)))) g$e$9900$1DOkPG)))) (g$record-constructor-descriptor-transformer$9380$1DOkPG g$record-constructor-descriptor-transformer$15434$1DOkPG (case-lambda ((g$e$9919$1DOkPG g$r$9920$1DOkPG g$mr$9921$1DOkPG) ((case-lambda ((g$t$9922$1DOkPG) ((case-lambda ((g$ls/false$9923$1DOkPG) (if (if g$ls/false$9923$1DOkPG (begin '#f (apply (case-lambda ((g$id$9924$1DOkPG) (g$id?$9181$1DOkPG g$id$9924$1DOkPG))) g$ls/false$9923$1DOkPG)) '#f) (apply (case-lambda ((g$id$9925$1DOkPG) ((case-lambda ((g$lab$9926$1DOkPG) ((case-lambda ((g$b$9927$1DOkPG) ((case-lambda ((g$type$9928$1DOkPG) ((case-lambda (() (begin (if g$lab$9926$1DOkPG (void) (g$raise-unbound-error$9198$1DOkPG g$id$9925$1DOkPG)) (if (if (eq? g$type$9928$1DOkPG '$rtd) (begin '#f (list? (g$binding-value$9197$1DOkPG g$b$9927$1DOkPG))) '#f) (void) (g$syntax-violation$9501$1DOkPG '#f '"invalid type" g$e$9919$1DOkPG)) (g$chi-expr$9438$1DOkPG (g$cadr$7446$1DOkPG (g$binding-value$9197$1DOkPG g$b$9927$1DOkPG)) g$r$9920$1DOkPG g$mr$9921$1DOkPG))))))) (g$binding-type$9196$1DOkPG g$b$9927$1DOkPG)))) (g$label->binding$9194$1DOkPG g$lab$9926$1DOkPG g$r$9920$1DOkPG)))) (g$id->label$9193$1DOkPG g$id$9925$1DOkPG)))) g$ls/false$9923$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9922$1DOkPG)))) ((case-lambda ((g$x$9929$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9929$1DOkPG) (begin '#f ((case-lambda ((g$q$9930$1DOkPG) (if g$q$9930$1DOkPG (begin '#f ((case-lambda ((g$r$9931$1DOkPG) (if g$r$9931$1DOkPG (begin '#f (append g$q$9930$1DOkPG g$r$9931$1DOkPG)) '#f))) ((case-lambda ((g$x$9932$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9932$1DOkPG) (begin '#f ((case-lambda ((g$q$9933$1DOkPG) (if g$q$9933$1DOkPG (begin '#f ((case-lambda ((g$r$9934$1DOkPG) (if g$r$9934$1DOkPG (begin '#f (append g$q$9933$1DOkPG g$r$9934$1DOkPG)) '#f))) ((case-lambda ((g$x$9935$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$9935$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9932$1DOkPG)))) '#f))) ((case-lambda ((g$x$9936$1DOkPG) (list g$x$9936$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9932$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9929$1DOkPG)))) '#f))) ((case-lambda ((g$x$9937$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9929$1DOkPG)))) '#f))) g$t$9922$1DOkPG)))) g$e$9919$1DOkPG)))) (g$when-transformer$9381$1DOkPG g$when-transformer$15435$1DOkPG (case-lambda ((g$e$9938$1DOkPG g$r$9939$1DOkPG g$mr$9940$1DOkPG) ((case-lambda ((g$t$9941$1DOkPG) ((case-lambda ((g$ls/false$9942$1DOkPG) (if (if g$ls/false$9942$1DOkPG (begin '#f (apply (case-lambda ((g$test$9943$1DOkPG g$e$9944$1DOkPG g$e*$9945$1DOkPG) '#t)) g$ls/false$9942$1DOkPG)) '#f) (apply (case-lambda ((g$test$9946$1DOkPG g$e$9947$1DOkPG g$e*$9948$1DOkPG) (list 'if (g$chi-expr$9438$1DOkPG g$test$9946$1DOkPG g$r$9939$1DOkPG g$mr$9940$1DOkPG) (g$build-sequence$9118$1DOkPG '#f (g$chi-expr*$9436$1DOkPG (cons g$e$9947$1DOkPG g$e*$9948$1DOkPG) g$r$9939$1DOkPG g$mr$9940$1DOkPG)) (g$build-void$9119$1DOkPG)))) g$ls/false$9942$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9941$1DOkPG)))) ((case-lambda ((g$x$9949$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9949$1DOkPG) (begin '#f ((case-lambda ((g$q$9950$1DOkPG) (if g$q$9950$1DOkPG (begin '#f ((case-lambda ((g$r$9951$1DOkPG) (if g$r$9951$1DOkPG (begin '#f (append g$q$9950$1DOkPG g$r$9951$1DOkPG)) '#f))) ((case-lambda ((g$x$9952$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9952$1DOkPG) (begin '#f ((case-lambda ((g$q$9953$1DOkPG) (if g$q$9953$1DOkPG (begin '#f ((case-lambda ((g$r$9954$1DOkPG) (if g$r$9954$1DOkPG (begin '#f (append g$q$9953$1DOkPG g$r$9954$1DOkPG)) '#f))) ((case-lambda ((g$x$9955$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9955$1DOkPG) (begin '#f ((case-lambda ((g$q$9956$1DOkPG) (if g$q$9956$1DOkPG (begin '#f ((case-lambda ((g$r$9957$1DOkPG) (if g$r$9957$1DOkPG (begin '#f (append g$q$9956$1DOkPG g$r$9957$1DOkPG)) '#f))) ((letrec ((g$f$9958$1DOkPG (case-lambda ((g$x$9959$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9959$1DOkPG) ((case-lambda ((g$cars/f$9960$1DOkPG) (if g$cars/f$9960$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$9961$1DOkPG) (if g$cdrs/f$9961$1DOkPG (begin '#f (map cons g$cars/f$9960$1DOkPG g$cdrs/f$9961$1DOkPG)) '#f))) (g$f$9958$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9959$1DOkPG)))) '#f))) ((case-lambda ((g$x$9962$1DOkPG) (list g$x$9962$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9959$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$9959$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$9958$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$9955$1DOkPG)))) '#f))) ((case-lambda ((g$x$9963$1DOkPG) (list g$x$9963$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9955$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9952$1DOkPG)))) '#f))) ((case-lambda ((g$x$9964$1DOkPG) (list g$x$9964$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9952$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9949$1DOkPG)))) '#f))) ((case-lambda ((g$x$9965$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9949$1DOkPG)))) '#f))) g$t$9941$1DOkPG)))) g$e$9938$1DOkPG)))) (g$unless-transformer$9382$1DOkPG g$unless-transformer$15436$1DOkPG (case-lambda ((g$e$9966$1DOkPG g$r$9967$1DOkPG g$mr$9968$1DOkPG) ((case-lambda ((g$t$9969$1DOkPG) ((case-lambda ((g$ls/false$9970$1DOkPG) (if (if g$ls/false$9970$1DOkPG (begin '#f (apply (case-lambda ((g$test$9971$1DOkPG g$e$9972$1DOkPG g$e*$9973$1DOkPG) '#t)) g$ls/false$9970$1DOkPG)) '#f) (apply (case-lambda ((g$test$9974$1DOkPG g$e$9975$1DOkPG g$e*$9976$1DOkPG) (list 'if (g$chi-expr$9438$1DOkPG g$test$9974$1DOkPG g$r$9967$1DOkPG g$mr$9968$1DOkPG) (g$build-void$9119$1DOkPG) (g$build-sequence$9118$1DOkPG '#f (g$chi-expr*$9436$1DOkPG (cons g$e$9975$1DOkPG g$e*$9976$1DOkPG) g$r$9967$1DOkPG g$mr$9968$1DOkPG))))) g$ls/false$9970$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$9969$1DOkPG)))) ((case-lambda ((g$x$9977$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9977$1DOkPG) (begin '#f ((case-lambda ((g$q$9978$1DOkPG) (if g$q$9978$1DOkPG (begin '#f ((case-lambda ((g$r$9979$1DOkPG) (if g$r$9979$1DOkPG (begin '#f (append g$q$9978$1DOkPG g$r$9979$1DOkPG)) '#f))) ((case-lambda ((g$x$9980$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9980$1DOkPG) (begin '#f ((case-lambda ((g$q$9981$1DOkPG) (if g$q$9981$1DOkPG (begin '#f ((case-lambda ((g$r$9982$1DOkPG) (if g$r$9982$1DOkPG (begin '#f (append g$q$9981$1DOkPG g$r$9982$1DOkPG)) '#f))) ((case-lambda ((g$x$9983$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9983$1DOkPG) (begin '#f ((case-lambda ((g$q$9984$1DOkPG) (if g$q$9984$1DOkPG (begin '#f ((case-lambda ((g$r$9985$1DOkPG) (if g$r$9985$1DOkPG (begin '#f (append g$q$9984$1DOkPG g$r$9985$1DOkPG)) '#f))) ((letrec ((g$f$9986$1DOkPG (case-lambda ((g$x$9987$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$9987$1DOkPG) ((case-lambda ((g$cars/f$9988$1DOkPG) (if g$cars/f$9988$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$9989$1DOkPG) (if g$cdrs/f$9989$1DOkPG (begin '#f (map cons g$cars/f$9988$1DOkPG g$cdrs/f$9989$1DOkPG)) '#f))) (g$f$9986$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$9987$1DOkPG)))) '#f))) ((case-lambda ((g$x$9990$1DOkPG) (list g$x$9990$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9987$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$9987$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$9986$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$9983$1DOkPG)))) '#f))) ((case-lambda ((g$x$9991$1DOkPG) (list g$x$9991$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9983$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9980$1DOkPG)))) '#f))) ((case-lambda ((g$x$9992$1DOkPG) (list g$x$9992$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$9980$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$9977$1DOkPG)))) '#f))) ((case-lambda ((g$x$9993$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$9977$1DOkPG)))) '#f))) g$t$9969$1DOkPG)))) g$e$9966$1DOkPG)))) (g$if-transformer$9383$1DOkPG g$if-transformer$15437$1DOkPG (case-lambda ((g$e$9994$1DOkPG g$r$9995$1DOkPG g$mr$9996$1DOkPG) ((case-lambda ((g$t$9997$1DOkPG) ((case-lambda ((g$ls/false$9998$1DOkPG) (if (if g$ls/false$9998$1DOkPG (begin '#f (apply (case-lambda ((g$e0$9999$1DOkPG g$e1$10000$1DOkPG g$e2$10001$1DOkPG) '#t)) g$ls/false$9998$1DOkPG)) '#f) (apply (case-lambda ((g$e0$10002$1DOkPG g$e1$10003$1DOkPG g$e2$10004$1DOkPG) (list 'if (g$chi-expr$9438$1DOkPG g$e0$10002$1DOkPG g$r$9995$1DOkPG g$mr$9996$1DOkPG) (g$chi-expr$9438$1DOkPG g$e1$10003$1DOkPG g$r$9995$1DOkPG g$mr$9996$1DOkPG) (g$chi-expr$9438$1DOkPG g$e2$10004$1DOkPG g$r$9995$1DOkPG g$mr$9996$1DOkPG)))) g$ls/false$9998$1DOkPG) ((case-lambda ((g$t$10005$1DOkPG) ((case-lambda ((g$ls/false$10006$1DOkPG) (if (if g$ls/false$10006$1DOkPG (begin '#f (apply (case-lambda ((g$e0$10007$1DOkPG g$e1$10008$1DOkPG) '#t)) g$ls/false$10006$1DOkPG)) '#f) (apply (case-lambda ((g$e0$10009$1DOkPG g$e1$10010$1DOkPG) (list 'if (g$chi-expr$9438$1DOkPG g$e0$10009$1DOkPG g$r$9995$1DOkPG g$mr$9996$1DOkPG) (g$chi-expr$9438$1DOkPG g$e1$10010$1DOkPG g$r$9995$1DOkPG g$mr$9996$1DOkPG) (g$build-void$9119$1DOkPG)))) g$ls/false$10006$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10005$1DOkPG)))) ((case-lambda ((g$x$10011$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10011$1DOkPG) (begin '#f ((case-lambda ((g$q$10012$1DOkPG) (if g$q$10012$1DOkPG (begin '#f ((case-lambda ((g$r$10013$1DOkPG) (if g$r$10013$1DOkPG (begin '#f (append g$q$10012$1DOkPG g$r$10013$1DOkPG)) '#f))) ((case-lambda ((g$x$10014$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10014$1DOkPG) (begin '#f ((case-lambda ((g$q$10015$1DOkPG) (if g$q$10015$1DOkPG (begin '#f ((case-lambda ((g$r$10016$1DOkPG) (if g$r$10016$1DOkPG (begin '#f (append g$q$10015$1DOkPG g$r$10016$1DOkPG)) '#f))) ((case-lambda ((g$x$10017$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10017$1DOkPG) (begin '#f ((case-lambda ((g$q$10018$1DOkPG) (if g$q$10018$1DOkPG (begin '#f ((case-lambda ((g$r$10019$1DOkPG) (if g$r$10019$1DOkPG (begin '#f (append g$q$10018$1DOkPG g$r$10019$1DOkPG)) '#f))) ((case-lambda ((g$x$10020$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10020$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10017$1DOkPG)))) '#f))) ((case-lambda ((g$x$10021$1DOkPG) (list g$x$10021$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10017$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10014$1DOkPG)))) '#f))) ((case-lambda ((g$x$10022$1DOkPG) (list g$x$10022$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10014$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10011$1DOkPG)))) '#f))) ((case-lambda ((g$x$10023$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10011$1DOkPG)))) '#f))) g$t$10005$1DOkPG)))) g$t$9997$1DOkPG)))) ((case-lambda ((g$x$10024$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10024$1DOkPG) (begin '#f ((case-lambda ((g$q$10025$1DOkPG) (if g$q$10025$1DOkPG (begin '#f ((case-lambda ((g$r$10026$1DOkPG) (if g$r$10026$1DOkPG (begin '#f (append g$q$10025$1DOkPG g$r$10026$1DOkPG)) '#f))) ((case-lambda ((g$x$10027$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10027$1DOkPG) (begin '#f ((case-lambda ((g$q$10028$1DOkPG) (if g$q$10028$1DOkPG (begin '#f ((case-lambda ((g$r$10029$1DOkPG) (if g$r$10029$1DOkPG (begin '#f (append g$q$10028$1DOkPG g$r$10029$1DOkPG)) '#f))) ((case-lambda ((g$x$10030$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10030$1DOkPG) (begin '#f ((case-lambda ((g$q$10031$1DOkPG) (if g$q$10031$1DOkPG (begin '#f ((case-lambda ((g$r$10032$1DOkPG) (if g$r$10032$1DOkPG (begin '#f (append g$q$10031$1DOkPG g$r$10032$1DOkPG)) '#f))) ((case-lambda ((g$x$10033$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10033$1DOkPG) (begin '#f ((case-lambda ((g$q$10034$1DOkPG) (if g$q$10034$1DOkPG (begin '#f ((case-lambda ((g$r$10035$1DOkPG) (if g$r$10035$1DOkPG (begin '#f (append g$q$10034$1DOkPG g$r$10035$1DOkPG)) '#f))) ((case-lambda ((g$x$10036$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10036$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10033$1DOkPG)))) '#f))) ((case-lambda ((g$x$10037$1DOkPG) (list g$x$10037$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10033$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10030$1DOkPG)))) '#f))) ((case-lambda ((g$x$10038$1DOkPG) (list g$x$10038$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10030$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10027$1DOkPG)))) '#f))) ((case-lambda ((g$x$10039$1DOkPG) (list g$x$10039$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10027$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10024$1DOkPG)))) '#f))) ((case-lambda ((g$x$10040$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10024$1DOkPG)))) '#f))) g$t$9997$1DOkPG)))) g$e$9994$1DOkPG)))) (g$case-transformer$9384$1DOkPG g$case-transformer$15438$1DOkPG (case-lambda ((g$e$10041$1DOkPG g$r$10042$1DOkPG g$mr$10043$1DOkPG) (letrec* ((g$build-one$10044$1DOkPG (case-lambda ((g$t$10141$1DOkPG g$cls$10142$1DOkPG g$rest$10143$1DOkPG) ((case-lambda ((g$t$10144$1DOkPG) ((case-lambda ((g$ls/false$10145$1DOkPG) (if (if g$ls/false$10145$1DOkPG (begin '#f (apply (case-lambda ((g$d*$10146$1DOkPG g$e$10147$1DOkPG g$e*$10148$1DOkPG) '#t)) g$ls/false$10145$1DOkPG)) '#f) (apply (case-lambda ((g$d*$10149$1DOkPG g$e$10150$1DOkPG g$e*$10151$1DOkPG) (list 'if (list '(primitive memv) g$t$10141$1DOkPG (list 'quote (g$stx->datum$9192$1DOkPG g$d*$10149$1DOkPG))) (g$build-sequence$9118$1DOkPG '#f (g$chi-expr*$9436$1DOkPG (cons g$e$10150$1DOkPG g$e*$10151$1DOkPG) g$r$10042$1DOkPG g$mr$10043$1DOkPG)) g$rest$10143$1DOkPG))) g$ls/false$10145$1DOkPG) ((case-lambda ((g$t$10152$1DOkPG) ((case-lambda ((g$ls/false$10153$1DOkPG) (if (if g$ls/false$10153$1DOkPG (begin '#f (apply (case-lambda ((g$else$10154$1DOkPG) '#t)) g$ls/false$10153$1DOkPG)) '#f) (apply (case-lambda ((g$else$10155$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$e$10041$1DOkPG))) g$ls/false$10153$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10152$1DOkPG)))) ((case-lambda ((g$x$10156$1DOkPG) (list g$x$10156$1DOkPG))) g$t$10152$1DOkPG)))) g$t$10144$1DOkPG)))) ((case-lambda ((g$x$10157$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10157$1DOkPG) (begin '#f ((case-lambda ((g$q$10158$1DOkPG) (if g$q$10158$1DOkPG (begin '#f ((case-lambda ((g$r$10159$1DOkPG) (if g$r$10159$1DOkPG (begin '#f (append g$q$10158$1DOkPG g$r$10159$1DOkPG)) '#f))) ((case-lambda ((g$x$10160$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10160$1DOkPG) (begin '#f ((case-lambda ((g$q$10161$1DOkPG) (if g$q$10161$1DOkPG (begin '#f ((case-lambda ((g$r$10162$1DOkPG) (if g$r$10162$1DOkPG (begin '#f (append g$q$10161$1DOkPG g$r$10162$1DOkPG)) '#f))) ((letrec ((g$f$10163$1DOkPG (case-lambda ((g$x$10164$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10164$1DOkPG) ((case-lambda ((g$cars/f$10165$1DOkPG) (if g$cars/f$10165$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10166$1DOkPG) (if g$cdrs/f$10166$1DOkPG (begin '#f (map cons g$cars/f$10165$1DOkPG g$cdrs/f$10166$1DOkPG)) '#f))) (g$f$10163$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10164$1DOkPG)))) '#f))) ((case-lambda ((g$x$10167$1DOkPG) (list g$x$10167$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10164$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10164$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$10163$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10160$1DOkPG)))) '#f))) ((case-lambda ((g$x$10168$1DOkPG) (list g$x$10168$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10160$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10157$1DOkPG)))) '#f))) ((letrec ((g$f$10169$1DOkPG (case-lambda ((g$x$10170$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10170$1DOkPG) ((case-lambda ((g$cars/f$10171$1DOkPG) (if g$cars/f$10171$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10172$1DOkPG) (if g$cdrs/f$10172$1DOkPG (begin '#f (map cons g$cars/f$10171$1DOkPG g$cdrs/f$10172$1DOkPG)) '#f))) (g$f$10169$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10170$1DOkPG)))) '#f))) ((case-lambda ((g$x$10173$1DOkPG) (list g$x$10173$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10170$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10170$1DOkPG) (list (begin 'd* '())) '#f)))))) g$f$10169$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$10157$1DOkPG)))) '#f))) g$t$10144$1DOkPG)))) g$cls$10142$1DOkPG)))) (g$build-last$10045$1DOkPG (case-lambda ((g$t$10088$1DOkPG g$cls$10089$1DOkPG) ((case-lambda ((g$t$10090$1DOkPG) ((case-lambda ((g$ls/false$10091$1DOkPG) (if (if g$ls/false$10091$1DOkPG (begin '#f (apply (case-lambda ((g$d*$10092$1DOkPG g$e$10093$1DOkPG g$e*$10094$1DOkPG) '#t)) g$ls/false$10091$1DOkPG)) '#f) (apply (case-lambda ((g$d*$10095$1DOkPG g$e$10096$1DOkPG g$e*$10097$1DOkPG) (g$build-one$10044$1DOkPG g$t$10088$1DOkPG g$cls$10089$1DOkPG (g$build-void$9119$1DOkPG)))) g$ls/false$10091$1DOkPG) ((case-lambda ((g$t$10098$1DOkPG) ((case-lambda ((g$ls/false$10099$1DOkPG) (if (if g$ls/false$10099$1DOkPG (begin '#f (apply (case-lambda ((g$else-kwd$10100$1DOkPG g$x$10101$1DOkPG g$x*$10102$1DOkPG) '#t)) g$ls/false$10099$1DOkPG)) '#f) (apply (case-lambda ((g$else-kwd$10103$1DOkPG g$x$10104$1DOkPG g$x*$10105$1DOkPG) (if (if (g$id?$9181$1DOkPG g$else-kwd$10103$1DOkPG) (begin '#f (g$free-id=?$9185$1DOkPG g$else-kwd$10103$1DOkPG (g$scheme-stx$9368$1DOkPG 'else))) '#f) (g$build-sequence$9118$1DOkPG '#f (g$chi-expr*$9436$1DOkPG (cons g$x$10104$1DOkPG g$x*$10105$1DOkPG) g$r$10042$1DOkPG g$mr$10043$1DOkPG)) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$e$10041$1DOkPG)))) g$ls/false$10099$1DOkPG) ((case-lambda ((g$t$10106$1DOkPG) ((case-lambda ((g$ls/false$10107$1DOkPG) (if (if g$ls/false$10107$1DOkPG (begin '#f (apply (case-lambda ((g$else$10108$1DOkPG) '#t)) g$ls/false$10107$1DOkPG)) '#f) (apply (case-lambda ((g$else$10109$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$e$10041$1DOkPG))) g$ls/false$10107$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10106$1DOkPG)))) ((case-lambda ((g$x$10110$1DOkPG) (list g$x$10110$1DOkPG))) g$t$10106$1DOkPG)))) g$t$10098$1DOkPG)))) ((case-lambda ((g$x$10111$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10111$1DOkPG) (begin '#f ((case-lambda ((g$q$10112$1DOkPG) (if g$q$10112$1DOkPG (begin '#f ((case-lambda ((g$r$10113$1DOkPG) (if g$r$10113$1DOkPG (begin '#f (append g$q$10112$1DOkPG g$r$10113$1DOkPG)) '#f))) ((case-lambda ((g$x$10114$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10114$1DOkPG) (begin '#f ((case-lambda ((g$q$10115$1DOkPG) (if g$q$10115$1DOkPG (begin '#f ((case-lambda ((g$r$10116$1DOkPG) (if g$r$10116$1DOkPG (begin '#f (append g$q$10115$1DOkPG g$r$10116$1DOkPG)) '#f))) ((letrec ((g$f$10117$1DOkPG (case-lambda ((g$x$10118$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10118$1DOkPG) ((case-lambda ((g$cars/f$10119$1DOkPG) (if g$cars/f$10119$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10120$1DOkPG) (if g$cdrs/f$10120$1DOkPG (begin '#f (map cons g$cars/f$10119$1DOkPG g$cdrs/f$10120$1DOkPG)) '#f))) (g$f$10117$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10118$1DOkPG)))) '#f))) ((case-lambda ((g$x$10121$1DOkPG) (list g$x$10121$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10118$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10118$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$10117$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10114$1DOkPG)))) '#f))) ((case-lambda ((g$x$10122$1DOkPG) (list g$x$10122$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10114$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10111$1DOkPG)))) '#f))) ((case-lambda ((g$x$10123$1DOkPG) (list g$x$10123$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10111$1DOkPG)))) '#f))) g$t$10098$1DOkPG)))) g$t$10090$1DOkPG)))) ((case-lambda ((g$x$10124$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10124$1DOkPG) (begin '#f ((case-lambda ((g$q$10125$1DOkPG) (if g$q$10125$1DOkPG (begin '#f ((case-lambda ((g$r$10126$1DOkPG) (if g$r$10126$1DOkPG (begin '#f (append g$q$10125$1DOkPG g$r$10126$1DOkPG)) '#f))) ((case-lambda ((g$x$10127$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10127$1DOkPG) (begin '#f ((case-lambda ((g$q$10128$1DOkPG) (if g$q$10128$1DOkPG (begin '#f ((case-lambda ((g$r$10129$1DOkPG) (if g$r$10129$1DOkPG (begin '#f (append g$q$10128$1DOkPG g$r$10129$1DOkPG)) '#f))) ((letrec ((g$f$10130$1DOkPG (case-lambda ((g$x$10131$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10131$1DOkPG) ((case-lambda ((g$cars/f$10132$1DOkPG) (if g$cars/f$10132$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10133$1DOkPG) (if g$cdrs/f$10133$1DOkPG (begin '#f (map cons g$cars/f$10132$1DOkPG g$cdrs/f$10133$1DOkPG)) '#f))) (g$f$10130$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10131$1DOkPG)))) '#f))) ((case-lambda ((g$x$10134$1DOkPG) (list g$x$10134$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10131$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10131$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$10130$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10127$1DOkPG)))) '#f))) ((case-lambda ((g$x$10135$1DOkPG) (list g$x$10135$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10127$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10124$1DOkPG)))) '#f))) ((letrec ((g$f$10136$1DOkPG (case-lambda ((g$x$10137$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10137$1DOkPG) ((case-lambda ((g$cars/f$10138$1DOkPG) (if g$cars/f$10138$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10139$1DOkPG) (if g$cdrs/f$10139$1DOkPG (begin '#f (map cons g$cars/f$10138$1DOkPG g$cdrs/f$10139$1DOkPG)) '#f))) (g$f$10136$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10137$1DOkPG)))) '#f))) ((case-lambda ((g$x$10140$1DOkPG) (list g$x$10140$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10137$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10137$1DOkPG) (list (begin 'd* '())) '#f)))))) g$f$10136$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$10124$1DOkPG)))) '#f))) g$t$10090$1DOkPG)))) g$cls$10089$1DOkPG))))) ((case-lambda ((g$t$10046$1DOkPG) ((case-lambda ((g$ls/false$10047$1DOkPG) (if (if g$ls/false$10047$1DOkPG (begin '#f (apply (case-lambda ((g$expr$10048$1DOkPG) '#t)) g$ls/false$10047$1DOkPG)) '#f) (apply (case-lambda ((g$expr$10049$1DOkPG) (g$build-sequence$9118$1DOkPG '#f (list (g$chi-expr$9438$1DOkPG g$expr$10049$1DOkPG g$r$10042$1DOkPG g$mr$10043$1DOkPG) (g$build-void$9119$1DOkPG))))) g$ls/false$10047$1DOkPG) ((case-lambda ((g$t$10050$1DOkPG) ((case-lambda ((g$ls/false$10051$1DOkPG) (if (if g$ls/false$10051$1DOkPG (begin '#f (apply (case-lambda ((g$expr$10052$1DOkPG g$cls$10053$1DOkPG g$cls*$10054$1DOkPG) '#t)) g$ls/false$10051$1DOkPG)) '#f) (apply (case-lambda ((g$expr$10055$1DOkPG g$cls$10056$1DOkPG g$cls*$10057$1DOkPG) ((case-lambda ((g$t$10058$1DOkPG) (g$build-let$9117$1DOkPG '#f (list g$t$10058$1DOkPG) (list (g$chi-expr$9438$1DOkPG g$expr$10055$1DOkPG g$r$10042$1DOkPG g$mr$10043$1DOkPG)) ((letrec ((g$f$10059$1DOkPG (case-lambda ((g$cls$10060$1DOkPG g$cls*$10061$1DOkPG) (if (null? g$cls*$10061$1DOkPG) (g$build-last$10045$1DOkPG g$t$10058$1DOkPG g$cls$10060$1DOkPG) (g$build-one$10044$1DOkPG g$t$10058$1DOkPG g$cls$10060$1DOkPG (g$f$10059$1DOkPG (car g$cls*$10061$1DOkPG) (cdr g$cls*$10061$1DOkPG)))))))) g$f$10059$1DOkPG) g$cls$10056$1DOkPG g$cls*$10057$1DOkPG)))) (g$gen-lexical$9128$1DOkPG 't)))) g$ls/false$10051$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10050$1DOkPG)))) ((case-lambda ((g$x$10062$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10062$1DOkPG) (begin '#f ((case-lambda ((g$q$10063$1DOkPG) (if g$q$10063$1DOkPG (begin '#f ((case-lambda ((g$r$10064$1DOkPG) (if g$r$10064$1DOkPG (begin '#f (append g$q$10063$1DOkPG g$r$10064$1DOkPG)) '#f))) ((case-lambda ((g$x$10065$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10065$1DOkPG) (begin '#f ((case-lambda ((g$q$10066$1DOkPG) (if g$q$10066$1DOkPG (begin '#f ((case-lambda ((g$r$10067$1DOkPG) (if g$r$10067$1DOkPG (begin '#f (append g$q$10066$1DOkPG g$r$10067$1DOkPG)) '#f))) ((case-lambda ((g$x$10068$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10068$1DOkPG) (begin '#f ((case-lambda ((g$q$10069$1DOkPG) (if g$q$10069$1DOkPG (begin '#f ((case-lambda ((g$r$10070$1DOkPG) (if g$r$10070$1DOkPG (begin '#f (append g$q$10069$1DOkPG g$r$10070$1DOkPG)) '#f))) ((letrec ((g$f$10071$1DOkPG (case-lambda ((g$x$10072$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10072$1DOkPG) ((case-lambda ((g$cars/f$10073$1DOkPG) (if g$cars/f$10073$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10074$1DOkPG) (if g$cdrs/f$10074$1DOkPG (begin '#f (map cons g$cars/f$10073$1DOkPG g$cdrs/f$10074$1DOkPG)) '#f))) (g$f$10071$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10072$1DOkPG)))) '#f))) ((case-lambda ((g$x$10075$1DOkPG) (list g$x$10075$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10072$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10072$1DOkPG) (list (begin 'cls* '())) '#f)))))) g$f$10071$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10068$1DOkPG)))) '#f))) ((case-lambda ((g$x$10076$1DOkPG) (list g$x$10076$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10068$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10065$1DOkPG)))) '#f))) ((case-lambda ((g$x$10077$1DOkPG) (list g$x$10077$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10065$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10062$1DOkPG)))) '#f))) ((case-lambda ((g$x$10078$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10062$1DOkPG)))) '#f))) g$t$10050$1DOkPG)))) g$t$10046$1DOkPG)))) ((case-lambda ((g$x$10079$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10079$1DOkPG) (begin '#f ((case-lambda ((g$q$10080$1DOkPG) (if g$q$10080$1DOkPG (begin '#f ((case-lambda ((g$r$10081$1DOkPG) (if g$r$10081$1DOkPG (begin '#f (append g$q$10080$1DOkPG g$r$10081$1DOkPG)) '#f))) ((case-lambda ((g$x$10082$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10082$1DOkPG) (begin '#f ((case-lambda ((g$q$10083$1DOkPG) (if g$q$10083$1DOkPG (begin '#f ((case-lambda ((g$r$10084$1DOkPG) (if g$r$10084$1DOkPG (begin '#f (append g$q$10083$1DOkPG g$r$10084$1DOkPG)) '#f))) ((case-lambda ((g$x$10085$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10085$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10082$1DOkPG)))) '#f))) ((case-lambda ((g$x$10086$1DOkPG) (list g$x$10086$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10082$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10079$1DOkPG)))) '#f))) ((case-lambda ((g$x$10087$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10079$1DOkPG)))) '#f))) g$t$10046$1DOkPG)))) g$e$10041$1DOkPG))))) (g$quote-transformer$9385$1DOkPG g$quote-transformer$15439$1DOkPG (case-lambda ((g$e$10174$1DOkPG g$r$10175$1DOkPG g$mr$10176$1DOkPG) ((case-lambda ((g$t$10177$1DOkPG) ((case-lambda ((g$ls/false$10178$1DOkPG) (if (if g$ls/false$10178$1DOkPG (begin '#f (apply (case-lambda ((g$datum$10179$1DOkPG) '#t)) g$ls/false$10178$1DOkPG)) '#f) (apply (case-lambda ((g$datum$10180$1DOkPG) (list 'quote (g$stx->datum$9192$1DOkPG g$datum$10180$1DOkPG)))) g$ls/false$10178$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10177$1DOkPG)))) ((case-lambda ((g$x$10181$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10181$1DOkPG) (begin '#f ((case-lambda ((g$q$10182$1DOkPG) (if g$q$10182$1DOkPG (begin '#f ((case-lambda ((g$r$10183$1DOkPG) (if g$r$10183$1DOkPG (begin '#f (append g$q$10182$1DOkPG g$r$10183$1DOkPG)) '#f))) ((case-lambda ((g$x$10184$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10184$1DOkPG) (begin '#f ((case-lambda ((g$q$10185$1DOkPG) (if g$q$10185$1DOkPG (begin '#f ((case-lambda ((g$r$10186$1DOkPG) (if g$r$10186$1DOkPG (begin '#f (append g$q$10185$1DOkPG g$r$10186$1DOkPG)) '#f))) ((case-lambda ((g$x$10187$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10187$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10184$1DOkPG)))) '#f))) ((case-lambda ((g$x$10188$1DOkPG) (list g$x$10188$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10184$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10181$1DOkPG)))) '#f))) ((case-lambda ((g$x$10189$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10181$1DOkPG)))) '#f))) g$t$10177$1DOkPG)))) g$e$10174$1DOkPG)))) (g$case-lambda-transformer$9386$1DOkPG g$case-lambda-transformer$15440$1DOkPG (case-lambda ((g$e$10190$1DOkPG g$r$10191$1DOkPG g$mr$10192$1DOkPG) ((case-lambda ((g$t$10193$1DOkPG) ((case-lambda ((g$ls/false$10194$1DOkPG) (if (if g$ls/false$10194$1DOkPG (begin '#f (apply (case-lambda ((g$fmls*$10195$1DOkPG g$b*$10196$1DOkPG g$b**$10197$1DOkPG) '#t)) g$ls/false$10194$1DOkPG)) '#f) (apply (case-lambda ((g$fmls*$10198$1DOkPG g$b*$10199$1DOkPG g$b**$10200$1DOkPG) (call-with-values (case-lambda (() (g$chi-lambda-clause*$9442$1DOkPG g$e$10190$1DOkPG g$fmls*$10198$1DOkPG (map cons g$b*$10199$1DOkPG g$b**$10200$1DOkPG) g$r$10191$1DOkPG g$mr$10192$1DOkPG))) (case-lambda ((g$fmls*$10203$1DOkPG g$body*$10204$1DOkPG) ((case-lambda ((g$body*$10205$1DOkPG g$fmls*$10206$1DOkPG) (g$build-case-lambda$9116$1DOkPG '#f g$fmls*$10206$1DOkPG g$body*$10205$1DOkPG))) g$body*$10204$1DOkPG g$fmls*$10203$1DOkPG)))))) g$ls/false$10194$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10193$1DOkPG)))) ((case-lambda ((g$x$10207$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10207$1DOkPG) (begin '#f ((case-lambda ((g$q$10208$1DOkPG) (if g$q$10208$1DOkPG (begin '#f ((case-lambda ((g$r$10209$1DOkPG) (if g$r$10209$1DOkPG (begin '#f (append g$q$10208$1DOkPG g$r$10209$1DOkPG)) '#f))) ((letrec ((g$f$10210$1DOkPG (case-lambda ((g$x$10211$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10211$1DOkPG) ((case-lambda ((g$cars/f$10212$1DOkPG) (if g$cars/f$10212$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10213$1DOkPG) (if g$cdrs/f$10213$1DOkPG (begin '#f (map cons g$cars/f$10212$1DOkPG g$cdrs/f$10213$1DOkPG)) '#f))) (g$f$10210$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10211$1DOkPG)))) '#f))) ((case-lambda ((g$x$10214$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10214$1DOkPG) (begin '#f ((case-lambda ((g$q$10215$1DOkPG) (if g$q$10215$1DOkPG (begin '#f ((case-lambda ((g$r$10216$1DOkPG) (if g$r$10216$1DOkPG (begin '#f (append g$q$10215$1DOkPG g$r$10216$1DOkPG)) '#f))) ((case-lambda ((g$x$10217$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10217$1DOkPG) (begin '#f ((case-lambda ((g$q$10218$1DOkPG) (if g$q$10218$1DOkPG (begin '#f ((case-lambda ((g$r$10219$1DOkPG) (if g$r$10219$1DOkPG (begin '#f (append g$q$10218$1DOkPG g$r$10219$1DOkPG)) '#f))) ((letrec ((g$f$10220$1DOkPG (case-lambda ((g$x$10221$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10221$1DOkPG) ((case-lambda ((g$cars/f$10222$1DOkPG) (if g$cars/f$10222$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10223$1DOkPG) (if g$cdrs/f$10223$1DOkPG (begin '#f (map cons g$cars/f$10222$1DOkPG g$cdrs/f$10223$1DOkPG)) '#f))) (g$f$10220$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10221$1DOkPG)))) '#f))) ((case-lambda ((g$x$10224$1DOkPG) (list g$x$10224$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10221$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10221$1DOkPG) (list (begin 'b** '())) '#f)))))) g$f$10220$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10217$1DOkPG)))) '#f))) ((case-lambda ((g$x$10225$1DOkPG) (list g$x$10225$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10217$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10214$1DOkPG)))) '#f))) ((case-lambda ((g$x$10226$1DOkPG) (list g$x$10226$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10214$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10211$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10211$1DOkPG) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f)))))) g$f$10210$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10207$1DOkPG)))) '#f))) ((case-lambda ((g$x$10227$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10207$1DOkPG)))) '#f))) g$t$10193$1DOkPG)))) g$e$10190$1DOkPG)))) (g$lambda-transformer$9387$1DOkPG g$lambda-transformer$15441$1DOkPG (case-lambda ((g$e$10228$1DOkPG g$r$10229$1DOkPG g$mr$10230$1DOkPG) ((case-lambda ((g$t$10231$1DOkPG) ((case-lambda ((g$ls/false$10232$1DOkPG) (if (if g$ls/false$10232$1DOkPG (begin '#f (apply (case-lambda ((g$fmls$10233$1DOkPG g$b$10234$1DOkPG g$b*$10235$1DOkPG) '#t)) g$ls/false$10232$1DOkPG)) '#f) (apply (case-lambda ((g$fmls$10236$1DOkPG g$b$10237$1DOkPG g$b*$10238$1DOkPG) (call-with-values (case-lambda (() (g$chi-lambda-clause$9441$1DOkPG g$e$10228$1DOkPG g$fmls$10236$1DOkPG (cons g$b$10237$1DOkPG g$b*$10238$1DOkPG) g$r$10229$1DOkPG g$mr$10230$1DOkPG))) (case-lambda ((g$fmls$10241$1DOkPG g$body$10242$1DOkPG) ((case-lambda ((g$body$10243$1DOkPG g$fmls$10244$1DOkPG) (g$build-lambda$9115$1DOkPG '#f g$fmls$10244$1DOkPG g$body$10243$1DOkPG))) g$body$10242$1DOkPG g$fmls$10241$1DOkPG)))))) g$ls/false$10232$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10231$1DOkPG)))) ((case-lambda ((g$x$10245$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10245$1DOkPG) (begin '#f ((case-lambda ((g$q$10246$1DOkPG) (if g$q$10246$1DOkPG (begin '#f ((case-lambda ((g$r$10247$1DOkPG) (if g$r$10247$1DOkPG (begin '#f (append g$q$10246$1DOkPG g$r$10247$1DOkPG)) '#f))) ((case-lambda ((g$x$10248$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10248$1DOkPG) (begin '#f ((case-lambda ((g$q$10249$1DOkPG) (if g$q$10249$1DOkPG (begin '#f ((case-lambda ((g$r$10250$1DOkPG) (if g$r$10250$1DOkPG (begin '#f (append g$q$10249$1DOkPG g$r$10250$1DOkPG)) '#f))) ((case-lambda ((g$x$10251$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10251$1DOkPG) (begin '#f ((case-lambda ((g$q$10252$1DOkPG) (if g$q$10252$1DOkPG (begin '#f ((case-lambda ((g$r$10253$1DOkPG) (if g$r$10253$1DOkPG (begin '#f (append g$q$10252$1DOkPG g$r$10253$1DOkPG)) '#f))) ((letrec ((g$f$10254$1DOkPG (case-lambda ((g$x$10255$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10255$1DOkPG) ((case-lambda ((g$cars/f$10256$1DOkPG) (if g$cars/f$10256$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10257$1DOkPG) (if g$cdrs/f$10257$1DOkPG (begin '#f (map cons g$cars/f$10256$1DOkPG g$cdrs/f$10257$1DOkPG)) '#f))) (g$f$10254$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10255$1DOkPG)))) '#f))) ((case-lambda ((g$x$10258$1DOkPG) (list g$x$10258$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10255$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10255$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10254$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10251$1DOkPG)))) '#f))) ((case-lambda ((g$x$10259$1DOkPG) (list g$x$10259$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10251$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10248$1DOkPG)))) '#f))) ((case-lambda ((g$x$10260$1DOkPG) (list g$x$10260$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10248$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10245$1DOkPG)))) '#f))) ((case-lambda ((g$x$10261$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10245$1DOkPG)))) '#f))) g$t$10231$1DOkPG)))) g$e$10228$1DOkPG)))) (g$bless$9388$1DOkPG g$bless$15442$1DOkPG (case-lambda ((g$x$10262$1DOkPG) (g$mkstx$9169$1DOkPG ((letrec ((g$f$10263$1DOkPG (case-lambda ((g$x$10264$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$10264$1DOkPG) g$x$10264$1DOkPG (if (pair? g$x$10264$1DOkPG) (cons (g$f$10263$1DOkPG (car g$x$10264$1DOkPG)) (g$f$10263$1DOkPG (cdr g$x$10264$1DOkPG))) (if (symbol? g$x$10264$1DOkPG) (g$scheme-stx$9368$1DOkPG g$x$10264$1DOkPG) (if (vector? g$x$10264$1DOkPG) (list->vector (map g$f$10263$1DOkPG (vector->list g$x$10264$1DOkPG))) g$x$10264$1DOkPG)))))))) g$f$10263$1DOkPG) g$x$10262$1DOkPG) '() '() '())))) (g$with-syntax-macro$9389$1DOkPG g$with-syntax-macro$15443$1DOkPG (case-lambda ((g$e$10265$1DOkPG) ((case-lambda ((g$t$10266$1DOkPG) ((case-lambda ((g$ls/false$10267$1DOkPG) (if (if g$ls/false$10267$1DOkPG (begin '#f (apply (case-lambda ((g$fml*$10268$1DOkPG g$expr*$10269$1DOkPG g$b$10270$1DOkPG g$b*$10271$1DOkPG) '#t)) g$ls/false$10267$1DOkPG)) '#f) (apply (case-lambda ((g$fml*$10272$1DOkPG g$expr*$10273$1DOkPG g$b$10274$1DOkPG g$b*$10275$1DOkPG) (g$bless$9388$1DOkPG (list 'syntax-case (cons 'list g$expr*$10273$1DOkPG) '() (list g$fml*$10272$1DOkPG (cons 'begin (cons g$b$10274$1DOkPG g$b*$10275$1DOkPG))))))) g$ls/false$10267$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10266$1DOkPG)))) ((case-lambda ((g$x$10276$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10276$1DOkPG) (begin '#f ((case-lambda ((g$q$10277$1DOkPG) (if g$q$10277$1DOkPG (begin '#f ((case-lambda ((g$r$10278$1DOkPG) (if g$r$10278$1DOkPG (begin '#f (append g$q$10277$1DOkPG g$r$10278$1DOkPG)) '#f))) ((case-lambda ((g$x$10279$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10279$1DOkPG) (begin '#f ((case-lambda ((g$q$10280$1DOkPG) (if g$q$10280$1DOkPG (begin '#f ((case-lambda ((g$r$10281$1DOkPG) (if g$r$10281$1DOkPG (begin '#f (append g$q$10280$1DOkPG g$r$10281$1DOkPG)) '#f))) ((case-lambda ((g$x$10282$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10282$1DOkPG) (begin '#f ((case-lambda ((g$q$10283$1DOkPG) (if g$q$10283$1DOkPG (begin '#f ((case-lambda ((g$r$10284$1DOkPG) (if g$r$10284$1DOkPG (begin '#f (append g$q$10283$1DOkPG g$r$10284$1DOkPG)) '#f))) ((letrec ((g$f$10285$1DOkPG (case-lambda ((g$x$10286$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10286$1DOkPG) ((case-lambda ((g$cars/f$10287$1DOkPG) (if g$cars/f$10287$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10288$1DOkPG) (if g$cdrs/f$10288$1DOkPG (begin '#f (map cons g$cars/f$10287$1DOkPG g$cdrs/f$10288$1DOkPG)) '#f))) (g$f$10285$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10286$1DOkPG)))) '#f))) ((case-lambda ((g$x$10289$1DOkPG) (list g$x$10289$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10286$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10286$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10285$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10282$1DOkPG)))) '#f))) ((case-lambda ((g$x$10290$1DOkPG) (list g$x$10290$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10282$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10279$1DOkPG)))) '#f))) ((letrec ((g$f$10291$1DOkPG (case-lambda ((g$x$10292$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10292$1DOkPG) ((case-lambda ((g$cars/f$10293$1DOkPG) (if g$cars/f$10293$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10294$1DOkPG) (if g$cdrs/f$10294$1DOkPG (begin '#f (map cons g$cars/f$10293$1DOkPG g$cdrs/f$10294$1DOkPG)) '#f))) (g$f$10291$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10292$1DOkPG)))) '#f))) ((case-lambda ((g$x$10295$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10295$1DOkPG) (begin '#f ((case-lambda ((g$q$10296$1DOkPG) (if g$q$10296$1DOkPG (begin '#f ((case-lambda ((g$r$10297$1DOkPG) (if g$r$10297$1DOkPG (begin '#f (append g$q$10296$1DOkPG g$r$10297$1DOkPG)) '#f))) ((case-lambda ((g$x$10298$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10298$1DOkPG) (begin '#f ((case-lambda ((g$q$10299$1DOkPG) (if g$q$10299$1DOkPG (begin '#f ((case-lambda ((g$r$10300$1DOkPG) (if g$r$10300$1DOkPG (begin '#f (append g$q$10299$1DOkPG g$r$10300$1DOkPG)) '#f))) ((case-lambda ((g$x$10301$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10301$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10298$1DOkPG)))) '#f))) ((case-lambda ((g$x$10302$1DOkPG) (list g$x$10302$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10298$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10295$1DOkPG)))) '#f))) ((case-lambda ((g$x$10303$1DOkPG) (list g$x$10303$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10295$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10292$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10292$1DOkPG) (list (begin 'fml* '()) (begin 'expr* '())) '#f)))))) g$f$10291$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$10279$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10276$1DOkPG)))) '#f))) ((case-lambda ((g$x$10304$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10276$1DOkPG)))) '#f))) g$t$10266$1DOkPG)))) g$e$10265$1DOkPG)))) (g$invalid-fmls-error$9390$1DOkPG g$invalid-fmls-error$15444$1DOkPG (case-lambda ((g$stx$10305$1DOkPG g$fmls$10306$1DOkPG) ((case-lambda ((g$t$10307$1DOkPG) ((case-lambda ((g$ls/false$10308$1DOkPG) (if (if g$ls/false$10308$1DOkPG (begin '#f (apply (case-lambda ((g$id*$10309$1DOkPG g$last$10310$1DOkPG) '#t)) g$ls/false$10308$1DOkPG)) '#f) (apply (case-lambda ((g$id*$10311$1DOkPG g$last$10312$1DOkPG) ((letrec ((g$f$10313$1DOkPG (case-lambda ((g$id*$10314$1DOkPG) (if (null? g$id*$10314$1DOkPG) (values) (if (not (g$id?$9181$1DOkPG (car g$id*$10314$1DOkPG))) (g$syntax-violation$9501$1DOkPG '#f '"not an identifier" g$stx$10305$1DOkPG (car g$id*$10314$1DOkPG)) (begin (g$f$10313$1DOkPG (cdr g$id*$10314$1DOkPG)) (if (g$bound-id-member?$9188$1DOkPG (car g$id*$10314$1DOkPG) (cdr g$id*$10314$1DOkPG)) (g$syntax-violation$9501$1DOkPG '#f '"duplicate binding" g$stx$10305$1DOkPG (car g$id*$10314$1DOkPG)) (void))))))))) g$f$10313$1DOkPG) (if (g$id?$9181$1DOkPG g$last$10312$1DOkPG) (cons g$last$10312$1DOkPG g$id*$10311$1DOkPG) (if (g$syntax-null?$9176$1DOkPG g$last$10312$1DOkPG) g$id*$10311$1DOkPG (g$syntax-violation$9501$1DOkPG '#f '"not an identifier" g$stx$10305$1DOkPG g$last$10312$1DOkPG)))))) g$ls/false$10308$1DOkPG) ((case-lambda ((g$t$10315$1DOkPG) ((case-lambda ((g$ls/false$10316$1DOkPG) (if (if g$ls/false$10316$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$10316$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"malformed binding form" g$stx$10305$1DOkPG g$fmls$10306$1DOkPG))) g$ls/false$10316$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10315$1DOkPG)))) ((case-lambda ((g$x$10317$1DOkPG) '())) g$t$10315$1DOkPG)))) g$t$10307$1DOkPG)))) ((letrec ((g$f$10318$1DOkPG (case-lambda ((g$x$10321$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10321$1DOkPG) ((case-lambda ((g$cars/f$10322$1DOkPG) (if g$cars/f$10322$1DOkPG (begin '#f ((case-lambda ((g$d/f$10323$1DOkPG) (if g$d/f$10323$1DOkPG (begin '#f (cons (map cons g$cars/f$10322$1DOkPG (car g$d/f$10323$1DOkPG)) (cdr g$d/f$10323$1DOkPG))) '#f))) (g$f$10318$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10321$1DOkPG)))) '#f))) ((case-lambda ((g$x$10324$1DOkPG) (list g$x$10324$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10321$1DOkPG))) ((case-lambda ((g$d$10325$1DOkPG) (if g$d$10325$1DOkPG (begin '#f (cons (list (begin 'id* '())) g$d$10325$1DOkPG)) '#f))) ((case-lambda ((g$x$10326$1DOkPG) (list g$x$10326$1DOkPG))) g$x$10321$1DOkPG))))))) (case-lambda ((g$x$10319$1DOkPG) ((case-lambda ((g$x$10320$1DOkPG) (if g$x$10320$1DOkPG (begin '#f (append (car g$x$10320$1DOkPG) (cdr g$x$10320$1DOkPG))) '#f))) (g$f$10318$1DOkPG g$x$10319$1DOkPG))))) g$t$10307$1DOkPG)))) g$fmls$10306$1DOkPG)))) (g$let-macro$9391$1DOkPG g$let-macro$15445$1DOkPG (case-lambda ((g$stx$10327$1DOkPG) ((case-lambda ((g$t$10328$1DOkPG) ((case-lambda ((g$ls/false$10329$1DOkPG) (if (if g$ls/false$10329$1DOkPG (begin '#f (apply (case-lambda ((g$lhs*$10330$1DOkPG g$rhs*$10331$1DOkPG g$b$10332$1DOkPG g$b*$10333$1DOkPG) '#t)) g$ls/false$10329$1DOkPG)) '#f) (apply (case-lambda ((g$lhs*$10334$1DOkPG g$rhs*$10335$1DOkPG g$b$10336$1DOkPG g$b*$10337$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$lhs*$10334$1DOkPG) (g$bless$9388$1DOkPG (cons (cons 'lambda (cons g$lhs*$10334$1DOkPG (cons g$b$10336$1DOkPG g$b*$10337$1DOkPG))) g$rhs*$10335$1DOkPG)) (g$invalid-fmls-error$9390$1DOkPG g$stx$10327$1DOkPG g$lhs*$10334$1DOkPG)))) g$ls/false$10329$1DOkPG) ((case-lambda ((g$t$10338$1DOkPG) ((case-lambda ((g$ls/false$10339$1DOkPG) (if (if g$ls/false$10339$1DOkPG (begin '#f (apply (case-lambda ((g$f$10340$1DOkPG g$lhs*$10341$1DOkPG g$rhs*$10342$1DOkPG g$b$10343$1DOkPG g$b*$10344$1DOkPG) (g$id?$9181$1DOkPG g$f$10340$1DOkPG))) g$ls/false$10339$1DOkPG)) '#f) (apply (case-lambda ((g$f$10345$1DOkPG g$lhs*$10346$1DOkPG g$rhs*$10347$1DOkPG g$b$10348$1DOkPG g$b*$10349$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$lhs*$10346$1DOkPG) (g$bless$9388$1DOkPG (cons (list 'letrec (list (list g$f$10345$1DOkPG (cons 'lambda (cons g$lhs*$10346$1DOkPG (cons g$b$10348$1DOkPG g$b*$10349$1DOkPG))))) g$f$10345$1DOkPG) g$rhs*$10347$1DOkPG)) (g$invalid-fmls-error$9390$1DOkPG g$stx$10327$1DOkPG g$lhs*$10346$1DOkPG)))) g$ls/false$10339$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10338$1DOkPG)))) ((case-lambda ((g$x$10350$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10350$1DOkPG) (begin '#f ((case-lambda ((g$q$10351$1DOkPG) (if g$q$10351$1DOkPG (begin '#f ((case-lambda ((g$r$10352$1DOkPG) (if g$r$10352$1DOkPG (begin '#f (append g$q$10351$1DOkPG g$r$10352$1DOkPG)) '#f))) ((case-lambda ((g$x$10353$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10353$1DOkPG) (begin '#f ((case-lambda ((g$q$10354$1DOkPG) (if g$q$10354$1DOkPG (begin '#f ((case-lambda ((g$r$10355$1DOkPG) (if g$r$10355$1DOkPG (begin '#f (append g$q$10354$1DOkPG g$r$10355$1DOkPG)) '#f))) ((case-lambda ((g$x$10356$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10356$1DOkPG) (begin '#f ((case-lambda ((g$q$10357$1DOkPG) (if g$q$10357$1DOkPG (begin '#f ((case-lambda ((g$r$10358$1DOkPG) (if g$r$10358$1DOkPG (begin '#f (append g$q$10357$1DOkPG g$r$10358$1DOkPG)) '#f))) ((case-lambda ((g$x$10359$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10359$1DOkPG) (begin '#f ((case-lambda ((g$q$10360$1DOkPG) (if g$q$10360$1DOkPG (begin '#f ((case-lambda ((g$r$10361$1DOkPG) (if g$r$10361$1DOkPG (begin '#f (append g$q$10360$1DOkPG g$r$10361$1DOkPG)) '#f))) ((letrec ((g$f$10362$1DOkPG (case-lambda ((g$x$10363$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10363$1DOkPG) ((case-lambda ((g$cars/f$10364$1DOkPG) (if g$cars/f$10364$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10365$1DOkPG) (if g$cdrs/f$10365$1DOkPG (begin '#f (map cons g$cars/f$10364$1DOkPG g$cdrs/f$10365$1DOkPG)) '#f))) (g$f$10362$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10363$1DOkPG)))) '#f))) ((case-lambda ((g$x$10366$1DOkPG) (list g$x$10366$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10363$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10363$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10362$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10359$1DOkPG)))) '#f))) ((case-lambda ((g$x$10367$1DOkPG) (list g$x$10367$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10359$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10356$1DOkPG)))) '#f))) ((letrec ((g$f$10368$1DOkPG (case-lambda ((g$x$10369$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10369$1DOkPG) ((case-lambda ((g$cars/f$10370$1DOkPG) (if g$cars/f$10370$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10371$1DOkPG) (if g$cdrs/f$10371$1DOkPG (begin '#f (map cons g$cars/f$10370$1DOkPG g$cdrs/f$10371$1DOkPG)) '#f))) (g$f$10368$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10369$1DOkPG)))) '#f))) ((case-lambda ((g$x$10372$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10372$1DOkPG) (begin '#f ((case-lambda ((g$q$10373$1DOkPG) (if g$q$10373$1DOkPG (begin '#f ((case-lambda ((g$r$10374$1DOkPG) (if g$r$10374$1DOkPG (begin '#f (append g$q$10373$1DOkPG g$r$10374$1DOkPG)) '#f))) ((case-lambda ((g$x$10375$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10375$1DOkPG) (begin '#f ((case-lambda ((g$q$10376$1DOkPG) (if g$q$10376$1DOkPG (begin '#f ((case-lambda ((g$r$10377$1DOkPG) (if g$r$10377$1DOkPG (begin '#f (append g$q$10376$1DOkPG g$r$10377$1DOkPG)) '#f))) ((case-lambda ((g$x$10378$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10378$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10375$1DOkPG)))) '#f))) ((case-lambda ((g$x$10379$1DOkPG) (list g$x$10379$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10375$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10372$1DOkPG)))) '#f))) ((case-lambda ((g$x$10380$1DOkPG) (list g$x$10380$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10372$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10369$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10369$1DOkPG) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$10368$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$10356$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10353$1DOkPG)))) '#f))) ((case-lambda ((g$x$10381$1DOkPG) (list g$x$10381$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10353$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10350$1DOkPG)))) '#f))) ((case-lambda ((g$x$10382$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10350$1DOkPG)))) '#f))) g$t$10338$1DOkPG)))) g$t$10328$1DOkPG)))) ((case-lambda ((g$x$10383$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10383$1DOkPG) (begin '#f ((case-lambda ((g$q$10384$1DOkPG) (if g$q$10384$1DOkPG (begin '#f ((case-lambda ((g$r$10385$1DOkPG) (if g$r$10385$1DOkPG (begin '#f (append g$q$10384$1DOkPG g$r$10385$1DOkPG)) '#f))) ((case-lambda ((g$x$10386$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10386$1DOkPG) (begin '#f ((case-lambda ((g$q$10387$1DOkPG) (if g$q$10387$1DOkPG (begin '#f ((case-lambda ((g$r$10388$1DOkPG) (if g$r$10388$1DOkPG (begin '#f (append g$q$10387$1DOkPG g$r$10388$1DOkPG)) '#f))) ((case-lambda ((g$x$10389$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10389$1DOkPG) (begin '#f ((case-lambda ((g$q$10390$1DOkPG) (if g$q$10390$1DOkPG (begin '#f ((case-lambda ((g$r$10391$1DOkPG) (if g$r$10391$1DOkPG (begin '#f (append g$q$10390$1DOkPG g$r$10391$1DOkPG)) '#f))) ((letrec ((g$f$10392$1DOkPG (case-lambda ((g$x$10393$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10393$1DOkPG) ((case-lambda ((g$cars/f$10394$1DOkPG) (if g$cars/f$10394$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10395$1DOkPG) (if g$cdrs/f$10395$1DOkPG (begin '#f (map cons g$cars/f$10394$1DOkPG g$cdrs/f$10395$1DOkPG)) '#f))) (g$f$10392$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10393$1DOkPG)))) '#f))) ((case-lambda ((g$x$10396$1DOkPG) (list g$x$10396$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10393$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10393$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10392$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10389$1DOkPG)))) '#f))) ((case-lambda ((g$x$10397$1DOkPG) (list g$x$10397$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10389$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10386$1DOkPG)))) '#f))) ((letrec ((g$f$10398$1DOkPG (case-lambda ((g$x$10399$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10399$1DOkPG) ((case-lambda ((g$cars/f$10400$1DOkPG) (if g$cars/f$10400$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10401$1DOkPG) (if g$cdrs/f$10401$1DOkPG (begin '#f (map cons g$cars/f$10400$1DOkPG g$cdrs/f$10401$1DOkPG)) '#f))) (g$f$10398$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10399$1DOkPG)))) '#f))) ((case-lambda ((g$x$10402$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10402$1DOkPG) (begin '#f ((case-lambda ((g$q$10403$1DOkPG) (if g$q$10403$1DOkPG (begin '#f ((case-lambda ((g$r$10404$1DOkPG) (if g$r$10404$1DOkPG (begin '#f (append g$q$10403$1DOkPG g$r$10404$1DOkPG)) '#f))) ((case-lambda ((g$x$10405$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10405$1DOkPG) (begin '#f ((case-lambda ((g$q$10406$1DOkPG) (if g$q$10406$1DOkPG (begin '#f ((case-lambda ((g$r$10407$1DOkPG) (if g$r$10407$1DOkPG (begin '#f (append g$q$10406$1DOkPG g$r$10407$1DOkPG)) '#f))) ((case-lambda ((g$x$10408$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10408$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10405$1DOkPG)))) '#f))) ((case-lambda ((g$x$10409$1DOkPG) (list g$x$10409$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10405$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10402$1DOkPG)))) '#f))) ((case-lambda ((g$x$10410$1DOkPG) (list g$x$10410$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10402$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10399$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10399$1DOkPG) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$10398$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$10386$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10383$1DOkPG)))) '#f))) ((case-lambda ((g$x$10411$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10383$1DOkPG)))) '#f))) g$t$10328$1DOkPG)))) g$stx$10327$1DOkPG)))) (g$let-values-macro$9392$1DOkPG g$let-values-macro$15446$1DOkPG (case-lambda ((g$stx$10412$1DOkPG) (letrec* ((g$rename$10413$1DOkPG (case-lambda ((g$x$10535$1DOkPG g$old*$10536$1DOkPG g$new*$10537$1DOkPG) (begin (if (g$id?$9181$1DOkPG g$x$10535$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"not an indentifier" g$stx$10412$1DOkPG g$x$10535$1DOkPG)) (if (g$bound-id-member?$9188$1DOkPG g$x$10535$1DOkPG g$old*$10536$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"duplicate binding" g$stx$10412$1DOkPG g$x$10535$1DOkPG) (void)) ((case-lambda ((g$y$10538$1DOkPG) (values g$y$10538$1DOkPG (cons g$x$10535$1DOkPG g$old*$10536$1DOkPG) (cons g$y$10538$1DOkPG g$new*$10537$1DOkPG)))) (gensym (g$syntax->datum$9504$1DOkPG g$x$10535$1DOkPG))))))) (g$rename*$10414$1DOkPG (case-lambda ((g$x*$10526$1DOkPG g$old*$10527$1DOkPG g$new*$10528$1DOkPG) (if (null? g$x*$10526$1DOkPG) (values '() g$old*$10527$1DOkPG g$new*$10528$1DOkPG) (call-with-values (case-lambda (() (g$rename$10413$1DOkPG (car g$x*$10526$1DOkPG) g$old*$10527$1DOkPG g$new*$10528$1DOkPG))) (case-lambda ((g$x$10529$1DOkPG g$old*$10530$1DOkPG g$new*$10531$1DOkPG) (call-with-values (case-lambda (() (g$rename*$10414$1DOkPG (cdr g$x*$10526$1DOkPG) g$old*$10530$1DOkPG g$new*$10531$1DOkPG))) (case-lambda ((g$x*$10532$1DOkPG g$old*$10533$1DOkPG g$new*$10534$1DOkPG) (values (cons g$x$10529$1DOkPG g$x*$10532$1DOkPG) g$old*$10533$1DOkPG g$new*$10534$1DOkPG)))))))))))) ((case-lambda ((g$t$10415$1DOkPG) ((case-lambda ((g$ls/false$10416$1DOkPG) (if (if g$ls/false$10416$1DOkPG (begin '#f (apply (case-lambda ((g$b$10417$1DOkPG g$b*$10418$1DOkPG) '#t)) g$ls/false$10416$1DOkPG)) '#f) (apply (case-lambda ((g$b$10419$1DOkPG g$b*$10420$1DOkPG) (g$cons*$7868$1DOkPG (g$bless$9388$1DOkPG 'let) '() g$b$10419$1DOkPG g$b*$10420$1DOkPG))) g$ls/false$10416$1DOkPG) ((case-lambda ((g$t$10421$1DOkPG) ((case-lambda ((g$ls/false$10422$1DOkPG) (if (if g$ls/false$10422$1DOkPG (begin '#f (apply (case-lambda ((g$lhs*$10423$1DOkPG g$rhs*$10424$1DOkPG g$b$10425$1DOkPG g$b*$10426$1DOkPG) '#t)) g$ls/false$10422$1DOkPG)) '#f) (apply (case-lambda ((g$lhs*$10427$1DOkPG g$rhs*$10428$1DOkPG g$b$10429$1DOkPG g$b*$10430$1DOkPG) (g$bless$9388$1DOkPG ((letrec ((g$f$10431$1DOkPG (case-lambda ((g$lhs*$10432$1DOkPG g$rhs*$10433$1DOkPG g$old*$10434$1DOkPG g$new*$10435$1DOkPG) (if (null? g$lhs*$10432$1DOkPG) (cons 'let (cons (map list g$old*$10434$1DOkPG g$new*$10435$1DOkPG) (cons g$b$10429$1DOkPG g$b*$10430$1DOkPG))) ((case-lambda ((g$t$10436$1DOkPG) ((case-lambda ((g$ls/false$10437$1DOkPG) (if (if g$ls/false$10437$1DOkPG (begin '#f (apply (case-lambda ((g$x*$10438$1DOkPG) '#t)) g$ls/false$10437$1DOkPG)) '#f) (apply (case-lambda ((g$x*$10439$1DOkPG) (call-with-values (case-lambda (() (g$rename*$10414$1DOkPG g$x*$10439$1DOkPG g$old*$10434$1DOkPG g$new*$10435$1DOkPG))) (case-lambda ((g$y*$10443$1DOkPG g$old*$10444$1DOkPG g$new*$10445$1DOkPG) ((case-lambda ((g$new*$10446$1DOkPG g$old*$10447$1DOkPG g$y*$10448$1DOkPG) (list 'call-with-values (list 'lambda '() (car g$rhs*$10433$1DOkPG)) (list 'lambda g$y*$10448$1DOkPG (g$f$10431$1DOkPG (cdr g$lhs*$10432$1DOkPG) (cdr g$rhs*$10433$1DOkPG) g$old*$10447$1DOkPG g$new*$10446$1DOkPG))))) g$new*$10445$1DOkPG g$old*$10444$1DOkPG g$y*$10443$1DOkPG)))))) g$ls/false$10437$1DOkPG) ((case-lambda ((g$t$10449$1DOkPG) ((case-lambda ((g$ls/false$10450$1DOkPG) (if (if g$ls/false$10450$1DOkPG (begin '#f (apply (case-lambda ((g$x*$10451$1DOkPG g$x$10452$1DOkPG) '#t)) g$ls/false$10450$1DOkPG)) '#f) (apply (case-lambda ((g$x*$10453$1DOkPG g$x$10454$1DOkPG) (call-with-values (case-lambda (() (g$rename$10413$1DOkPG g$x$10454$1DOkPG g$old*$10434$1DOkPG g$new*$10435$1DOkPG))) (case-lambda ((g$y$10455$1DOkPG g$old*$10456$1DOkPG g$new*$10457$1DOkPG) (call-with-values (case-lambda (() (g$rename*$10414$1DOkPG g$x*$10453$1DOkPG g$old*$10456$1DOkPG g$new*$10457$1DOkPG))) (case-lambda ((g$y*$10458$1DOkPG g$old*$10459$1DOkPG g$new*$10460$1DOkPG) (list 'call-with-values (list 'lambda '() (car g$rhs*$10433$1DOkPG)) (list 'lambda (append g$y*$10458$1DOkPG g$y$10455$1DOkPG) (g$f$10431$1DOkPG (cdr g$lhs*$10432$1DOkPG) (cdr g$rhs*$10433$1DOkPG) g$old*$10459$1DOkPG g$new*$10460$1DOkPG))))))))))) g$ls/false$10450$1DOkPG) ((case-lambda ((g$t$10461$1DOkPG) ((case-lambda ((g$ls/false$10462$1DOkPG) (if (if g$ls/false$10462$1DOkPG (begin '#f (apply (case-lambda ((g$others$10463$1DOkPG) '#t)) g$ls/false$10462$1DOkPG)) '#f) (apply (case-lambda ((g$others$10464$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"malformed bindings" g$stx$10412$1DOkPG g$others$10464$1DOkPG))) g$ls/false$10462$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10461$1DOkPG)))) ((case-lambda ((g$x$10465$1DOkPG) (list g$x$10465$1DOkPG))) g$t$10461$1DOkPG)))) g$t$10449$1DOkPG)))) ((letrec ((g$f$10466$1DOkPG (case-lambda ((g$x$10469$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10469$1DOkPG) ((case-lambda ((g$cars/f$10470$1DOkPG) (if g$cars/f$10470$1DOkPG (begin '#f ((case-lambda ((g$d/f$10471$1DOkPG) (if g$d/f$10471$1DOkPG (begin '#f (cons (map cons g$cars/f$10470$1DOkPG (car g$d/f$10471$1DOkPG)) (cdr g$d/f$10471$1DOkPG))) '#f))) (g$f$10466$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10469$1DOkPG)))) '#f))) ((case-lambda ((g$x$10472$1DOkPG) (list g$x$10472$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10469$1DOkPG))) ((case-lambda ((g$d$10473$1DOkPG) (if g$d$10473$1DOkPG (begin '#f (cons (list (begin 'x* '())) g$d$10473$1DOkPG)) '#f))) ((case-lambda ((g$x$10474$1DOkPG) (list g$x$10474$1DOkPG))) g$x$10469$1DOkPG))))))) (case-lambda ((g$x$10467$1DOkPG) ((case-lambda ((g$x$10468$1DOkPG) (if g$x$10468$1DOkPG (begin '#f (append (car g$x$10468$1DOkPG) (cdr g$x$10468$1DOkPG))) '#f))) (g$f$10466$1DOkPG g$x$10467$1DOkPG))))) g$t$10449$1DOkPG)))) g$t$10436$1DOkPG)))) ((letrec ((g$f$10475$1DOkPG (case-lambda ((g$x$10476$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10476$1DOkPG) ((case-lambda ((g$cars/f$10477$1DOkPG) (if g$cars/f$10477$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10478$1DOkPG) (if g$cdrs/f$10478$1DOkPG (begin '#f (map cons g$cars/f$10477$1DOkPG g$cdrs/f$10478$1DOkPG)) '#f))) (g$f$10475$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10476$1DOkPG)))) '#f))) ((case-lambda ((g$x$10479$1DOkPG) (list g$x$10479$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10476$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10476$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$10475$1DOkPG) g$t$10436$1DOkPG)))) (car g$lhs*$10432$1DOkPG))))))) g$f$10431$1DOkPG) g$lhs*$10427$1DOkPG g$rhs*$10428$1DOkPG '() '())))) g$ls/false$10422$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10421$1DOkPG)))) ((case-lambda ((g$x$10480$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10480$1DOkPG) (begin '#f ((case-lambda ((g$q$10481$1DOkPG) (if g$q$10481$1DOkPG (begin '#f ((case-lambda ((g$r$10482$1DOkPG) (if g$r$10482$1DOkPG (begin '#f (append g$q$10481$1DOkPG g$r$10482$1DOkPG)) '#f))) ((case-lambda ((g$x$10483$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10483$1DOkPG) (begin '#f ((case-lambda ((g$q$10484$1DOkPG) (if g$q$10484$1DOkPG (begin '#f ((case-lambda ((g$r$10485$1DOkPG) (if g$r$10485$1DOkPG (begin '#f (append g$q$10484$1DOkPG g$r$10485$1DOkPG)) '#f))) ((case-lambda ((g$x$10486$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10486$1DOkPG) (begin '#f ((case-lambda ((g$q$10487$1DOkPG) (if g$q$10487$1DOkPG (begin '#f ((case-lambda ((g$r$10488$1DOkPG) (if g$r$10488$1DOkPG (begin '#f (append g$q$10487$1DOkPG g$r$10488$1DOkPG)) '#f))) ((letrec ((g$f$10489$1DOkPG (case-lambda ((g$x$10490$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10490$1DOkPG) ((case-lambda ((g$cars/f$10491$1DOkPG) (if g$cars/f$10491$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10492$1DOkPG) (if g$cdrs/f$10492$1DOkPG (begin '#f (map cons g$cars/f$10491$1DOkPG g$cdrs/f$10492$1DOkPG)) '#f))) (g$f$10489$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10490$1DOkPG)))) '#f))) ((case-lambda ((g$x$10493$1DOkPG) (list g$x$10493$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10490$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10490$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10489$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10486$1DOkPG)))) '#f))) ((case-lambda ((g$x$10494$1DOkPG) (list g$x$10494$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10486$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10483$1DOkPG)))) '#f))) ((letrec ((g$f$10495$1DOkPG (case-lambda ((g$x$10496$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10496$1DOkPG) ((case-lambda ((g$cars/f$10497$1DOkPG) (if g$cars/f$10497$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10498$1DOkPG) (if g$cdrs/f$10498$1DOkPG (begin '#f (map cons g$cars/f$10497$1DOkPG g$cdrs/f$10498$1DOkPG)) '#f))) (g$f$10495$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10496$1DOkPG)))) '#f))) ((case-lambda ((g$x$10499$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10499$1DOkPG) (begin '#f ((case-lambda ((g$q$10500$1DOkPG) (if g$q$10500$1DOkPG (begin '#f ((case-lambda ((g$r$10501$1DOkPG) (if g$r$10501$1DOkPG (begin '#f (append g$q$10500$1DOkPG g$r$10501$1DOkPG)) '#f))) ((case-lambda ((g$x$10502$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10502$1DOkPG) (begin '#f ((case-lambda ((g$q$10503$1DOkPG) (if g$q$10503$1DOkPG (begin '#f ((case-lambda ((g$r$10504$1DOkPG) (if g$r$10504$1DOkPG (begin '#f (append g$q$10503$1DOkPG g$r$10504$1DOkPG)) '#f))) ((case-lambda ((g$x$10505$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10505$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10502$1DOkPG)))) '#f))) ((case-lambda ((g$x$10506$1DOkPG) (list g$x$10506$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10502$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10499$1DOkPG)))) '#f))) ((case-lambda ((g$x$10507$1DOkPG) (list g$x$10507$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10499$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10496$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10496$1DOkPG) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$10495$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$10483$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10480$1DOkPG)))) '#f))) ((case-lambda ((g$x$10508$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10480$1DOkPG)))) '#f))) g$t$10421$1DOkPG)))) g$t$10415$1DOkPG)))) ((case-lambda ((g$x$10509$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10509$1DOkPG) (begin '#f ((case-lambda ((g$q$10510$1DOkPG) (if g$q$10510$1DOkPG (begin '#f ((case-lambda ((g$r$10511$1DOkPG) (if g$r$10511$1DOkPG (begin '#f (append g$q$10510$1DOkPG g$r$10511$1DOkPG)) '#f))) ((case-lambda ((g$x$10512$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10512$1DOkPG) (begin '#f ((case-lambda ((g$q$10513$1DOkPG) (if g$q$10513$1DOkPG (begin '#f ((case-lambda ((g$r$10514$1DOkPG) (if g$r$10514$1DOkPG (begin '#f (append g$q$10513$1DOkPG g$r$10514$1DOkPG)) '#f))) ((case-lambda ((g$x$10515$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10515$1DOkPG) (begin '#f ((case-lambda ((g$q$10516$1DOkPG) (if g$q$10516$1DOkPG (begin '#f ((case-lambda ((g$r$10517$1DOkPG) (if g$r$10517$1DOkPG (begin '#f (append g$q$10516$1DOkPG g$r$10517$1DOkPG)) '#f))) ((letrec ((g$f$10518$1DOkPG (case-lambda ((g$x$10519$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10519$1DOkPG) ((case-lambda ((g$cars/f$10520$1DOkPG) (if g$cars/f$10520$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10521$1DOkPG) (if g$cdrs/f$10521$1DOkPG (begin '#f (map cons g$cars/f$10520$1DOkPG g$cdrs/f$10521$1DOkPG)) '#f))) (g$f$10518$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10519$1DOkPG)))) '#f))) ((case-lambda ((g$x$10522$1DOkPG) (list g$x$10522$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10519$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10519$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10518$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10515$1DOkPG)))) '#f))) ((case-lambda ((g$x$10523$1DOkPG) (list g$x$10523$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10515$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10512$1DOkPG)))) '#f))) ((case-lambda ((g$x$10524$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10524$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-car$9178$1DOkPG g$x$10512$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10509$1DOkPG)))) '#f))) ((case-lambda ((g$x$10525$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10509$1DOkPG)))) '#f))) g$t$10415$1DOkPG)))) g$stx$10412$1DOkPG))))) (g$let*-values-macro$9393$1DOkPG g$let*-values-macro$15447$1DOkPG (case-lambda ((g$stx$10539$1DOkPG) (letrec* ((g$check$10540$1DOkPG (case-lambda ((g$x*$10635$1DOkPG) (if (null? g$x*$10635$1DOkPG) (void) ((case-lambda ((g$x$10636$1DOkPG) (begin (if (g$id?$9181$1DOkPG g$x$10636$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"not an identifier" g$stx$10539$1DOkPG g$x$10636$1DOkPG)) (g$check$10540$1DOkPG (cdr g$x*$10635$1DOkPG)) (if (g$bound-id-member?$9188$1DOkPG g$x$10636$1DOkPG (cdr g$x*$10635$1DOkPG)) (g$syntax-violation$9501$1DOkPG '#f '"duplicate identifier" g$stx$10539$1DOkPG g$x$10636$1DOkPG) (void))))) (car g$x*$10635$1DOkPG))))))) ((case-lambda ((g$t$10541$1DOkPG) ((case-lambda ((g$ls/false$10542$1DOkPG) (if (if g$ls/false$10542$1DOkPG (begin '#f (apply (case-lambda ((g$b$10543$1DOkPG g$b*$10544$1DOkPG) '#t)) g$ls/false$10542$1DOkPG)) '#f) (apply (case-lambda ((g$b$10545$1DOkPG g$b*$10546$1DOkPG) (g$cons*$7868$1DOkPG (g$bless$9388$1DOkPG 'let) '() g$b$10545$1DOkPG g$b*$10546$1DOkPG))) g$ls/false$10542$1DOkPG) ((case-lambda ((g$t$10547$1DOkPG) ((case-lambda ((g$ls/false$10548$1DOkPG) (if (if g$ls/false$10548$1DOkPG (begin '#f (apply (case-lambda ((g$lhs*$10549$1DOkPG g$rhs*$10550$1DOkPG g$b$10551$1DOkPG g$b*$10552$1DOkPG) '#t)) g$ls/false$10548$1DOkPG)) '#f) (apply (case-lambda ((g$lhs*$10553$1DOkPG g$rhs*$10554$1DOkPG g$b$10555$1DOkPG g$b*$10556$1DOkPG) (g$bless$9388$1DOkPG ((letrec ((g$f$10557$1DOkPG (case-lambda ((g$lhs*$10558$1DOkPG g$rhs*$10559$1DOkPG) (if (null? g$lhs*$10558$1DOkPG) (cons 'begin (cons g$b$10555$1DOkPG g$b*$10556$1DOkPG)) ((case-lambda ((g$t$10560$1DOkPG) ((case-lambda ((g$ls/false$10561$1DOkPG) (if (if g$ls/false$10561$1DOkPG (begin '#f (apply (case-lambda ((g$x*$10562$1DOkPG) '#t)) g$ls/false$10561$1DOkPG)) '#f) (apply (case-lambda ((g$x*$10563$1DOkPG) (begin (g$check$10540$1DOkPG g$x*$10563$1DOkPG) (list 'call-with-values (list 'lambda '() (car g$rhs*$10559$1DOkPG)) (list 'lambda g$x*$10563$1DOkPG (g$f$10557$1DOkPG (cdr g$lhs*$10558$1DOkPG) (cdr g$rhs*$10559$1DOkPG))))))) g$ls/false$10561$1DOkPG) ((case-lambda ((g$t$10564$1DOkPG) ((case-lambda ((g$ls/false$10565$1DOkPG) (if (if g$ls/false$10565$1DOkPG (begin '#f (apply (case-lambda ((g$x*$10566$1DOkPG g$x$10567$1DOkPG) '#t)) g$ls/false$10565$1DOkPG)) '#f) (apply (case-lambda ((g$x*$10568$1DOkPG g$x$10569$1DOkPG) (begin (g$check$10540$1DOkPG (cons g$x$10569$1DOkPG g$x*$10568$1DOkPG)) (list 'call-with-values (list 'lambda '() (car g$rhs*$10559$1DOkPG)) (list 'lambda (append g$x*$10568$1DOkPG g$x$10569$1DOkPG) (g$f$10557$1DOkPG (cdr g$lhs*$10558$1DOkPG) (cdr g$rhs*$10559$1DOkPG))))))) g$ls/false$10565$1DOkPG) ((case-lambda ((g$t$10570$1DOkPG) ((case-lambda ((g$ls/false$10571$1DOkPG) (if (if g$ls/false$10571$1DOkPG (begin '#f (apply (case-lambda ((g$others$10572$1DOkPG) '#t)) g$ls/false$10571$1DOkPG)) '#f) (apply (case-lambda ((g$others$10573$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"malformed bindings" g$stx$10539$1DOkPG g$others$10573$1DOkPG))) g$ls/false$10571$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10570$1DOkPG)))) ((case-lambda ((g$x$10574$1DOkPG) (list g$x$10574$1DOkPG))) g$t$10570$1DOkPG)))) g$t$10564$1DOkPG)))) ((letrec ((g$f$10575$1DOkPG (case-lambda ((g$x$10578$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10578$1DOkPG) ((case-lambda ((g$cars/f$10579$1DOkPG) (if g$cars/f$10579$1DOkPG (begin '#f ((case-lambda ((g$d/f$10580$1DOkPG) (if g$d/f$10580$1DOkPG (begin '#f (cons (map cons g$cars/f$10579$1DOkPG (car g$d/f$10580$1DOkPG)) (cdr g$d/f$10580$1DOkPG))) '#f))) (g$f$10575$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10578$1DOkPG)))) '#f))) ((case-lambda ((g$x$10581$1DOkPG) (list g$x$10581$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10578$1DOkPG))) ((case-lambda ((g$d$10582$1DOkPG) (if g$d$10582$1DOkPG (begin '#f (cons (list (begin 'x* '())) g$d$10582$1DOkPG)) '#f))) ((case-lambda ((g$x$10583$1DOkPG) (list g$x$10583$1DOkPG))) g$x$10578$1DOkPG))))))) (case-lambda ((g$x$10576$1DOkPG) ((case-lambda ((g$x$10577$1DOkPG) (if g$x$10577$1DOkPG (begin '#f (append (car g$x$10577$1DOkPG) (cdr g$x$10577$1DOkPG))) '#f))) (g$f$10575$1DOkPG g$x$10576$1DOkPG))))) g$t$10564$1DOkPG)))) g$t$10560$1DOkPG)))) ((letrec ((g$f$10584$1DOkPG (case-lambda ((g$x$10585$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10585$1DOkPG) ((case-lambda ((g$cars/f$10586$1DOkPG) (if g$cars/f$10586$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10587$1DOkPG) (if g$cdrs/f$10587$1DOkPG (begin '#f (map cons g$cars/f$10586$1DOkPG g$cdrs/f$10587$1DOkPG)) '#f))) (g$f$10584$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10585$1DOkPG)))) '#f))) ((case-lambda ((g$x$10588$1DOkPG) (list g$x$10588$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10585$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10585$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$10584$1DOkPG) g$t$10560$1DOkPG)))) (car g$lhs*$10558$1DOkPG))))))) g$f$10557$1DOkPG) g$lhs*$10553$1DOkPG g$rhs*$10554$1DOkPG)))) g$ls/false$10548$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10547$1DOkPG)))) ((case-lambda ((g$x$10589$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10589$1DOkPG) (begin '#f ((case-lambda ((g$q$10590$1DOkPG) (if g$q$10590$1DOkPG (begin '#f ((case-lambda ((g$r$10591$1DOkPG) (if g$r$10591$1DOkPG (begin '#f (append g$q$10590$1DOkPG g$r$10591$1DOkPG)) '#f))) ((case-lambda ((g$x$10592$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10592$1DOkPG) (begin '#f ((case-lambda ((g$q$10593$1DOkPG) (if g$q$10593$1DOkPG (begin '#f ((case-lambda ((g$r$10594$1DOkPG) (if g$r$10594$1DOkPG (begin '#f (append g$q$10593$1DOkPG g$r$10594$1DOkPG)) '#f))) ((case-lambda ((g$x$10595$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10595$1DOkPG) (begin '#f ((case-lambda ((g$q$10596$1DOkPG) (if g$q$10596$1DOkPG (begin '#f ((case-lambda ((g$r$10597$1DOkPG) (if g$r$10597$1DOkPG (begin '#f (append g$q$10596$1DOkPG g$r$10597$1DOkPG)) '#f))) ((letrec ((g$f$10598$1DOkPG (case-lambda ((g$x$10599$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10599$1DOkPG) ((case-lambda ((g$cars/f$10600$1DOkPG) (if g$cars/f$10600$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10601$1DOkPG) (if g$cdrs/f$10601$1DOkPG (begin '#f (map cons g$cars/f$10600$1DOkPG g$cdrs/f$10601$1DOkPG)) '#f))) (g$f$10598$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10599$1DOkPG)))) '#f))) ((case-lambda ((g$x$10602$1DOkPG) (list g$x$10602$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10599$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10599$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10598$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10595$1DOkPG)))) '#f))) ((case-lambda ((g$x$10603$1DOkPG) (list g$x$10603$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10595$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10592$1DOkPG)))) '#f))) ((letrec ((g$f$10604$1DOkPG (case-lambda ((g$x$10605$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10605$1DOkPG) ((case-lambda ((g$cars/f$10606$1DOkPG) (if g$cars/f$10606$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10607$1DOkPG) (if g$cdrs/f$10607$1DOkPG (begin '#f (map cons g$cars/f$10606$1DOkPG g$cdrs/f$10607$1DOkPG)) '#f))) (g$f$10604$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10605$1DOkPG)))) '#f))) ((case-lambda ((g$x$10608$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10608$1DOkPG) (begin '#f ((case-lambda ((g$q$10609$1DOkPG) (if g$q$10609$1DOkPG (begin '#f ((case-lambda ((g$r$10610$1DOkPG) (if g$r$10610$1DOkPG (begin '#f (append g$q$10609$1DOkPG g$r$10610$1DOkPG)) '#f))) ((case-lambda ((g$x$10611$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10611$1DOkPG) (begin '#f ((case-lambda ((g$q$10612$1DOkPG) (if g$q$10612$1DOkPG (begin '#f ((case-lambda ((g$r$10613$1DOkPG) (if g$r$10613$1DOkPG (begin '#f (append g$q$10612$1DOkPG g$r$10613$1DOkPG)) '#f))) ((case-lambda ((g$x$10614$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10614$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10611$1DOkPG)))) '#f))) ((case-lambda ((g$x$10615$1DOkPG) (list g$x$10615$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10611$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10608$1DOkPG)))) '#f))) ((case-lambda ((g$x$10616$1DOkPG) (list g$x$10616$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10608$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10605$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10605$1DOkPG) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$10604$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$10592$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10589$1DOkPG)))) '#f))) ((case-lambda ((g$x$10617$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10589$1DOkPG)))) '#f))) g$t$10547$1DOkPG)))) g$t$10541$1DOkPG)))) ((case-lambda ((g$x$10618$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10618$1DOkPG) (begin '#f ((case-lambda ((g$q$10619$1DOkPG) (if g$q$10619$1DOkPG (begin '#f ((case-lambda ((g$r$10620$1DOkPG) (if g$r$10620$1DOkPG (begin '#f (append g$q$10619$1DOkPG g$r$10620$1DOkPG)) '#f))) ((case-lambda ((g$x$10621$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10621$1DOkPG) (begin '#f ((case-lambda ((g$q$10622$1DOkPG) (if g$q$10622$1DOkPG (begin '#f ((case-lambda ((g$r$10623$1DOkPG) (if g$r$10623$1DOkPG (begin '#f (append g$q$10622$1DOkPG g$r$10623$1DOkPG)) '#f))) ((case-lambda ((g$x$10624$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10624$1DOkPG) (begin '#f ((case-lambda ((g$q$10625$1DOkPG) (if g$q$10625$1DOkPG (begin '#f ((case-lambda ((g$r$10626$1DOkPG) (if g$r$10626$1DOkPG (begin '#f (append g$q$10625$1DOkPG g$r$10626$1DOkPG)) '#f))) ((letrec ((g$f$10627$1DOkPG (case-lambda ((g$x$10628$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10628$1DOkPG) ((case-lambda ((g$cars/f$10629$1DOkPG) (if g$cars/f$10629$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10630$1DOkPG) (if g$cdrs/f$10630$1DOkPG (begin '#f (map cons g$cars/f$10629$1DOkPG g$cdrs/f$10630$1DOkPG)) '#f))) (g$f$10627$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10628$1DOkPG)))) '#f))) ((case-lambda ((g$x$10631$1DOkPG) (list g$x$10631$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10628$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10628$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10627$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10624$1DOkPG)))) '#f))) ((case-lambda ((g$x$10632$1DOkPG) (list g$x$10632$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10624$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10621$1DOkPG)))) '#f))) ((case-lambda ((g$x$10633$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10633$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-car$9178$1DOkPG g$x$10621$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10618$1DOkPG)))) '#f))) ((case-lambda ((g$x$10634$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10618$1DOkPG)))) '#f))) g$t$10541$1DOkPG)))) g$stx$10539$1DOkPG))))) (g$trace-lambda-macro$9394$1DOkPG g$trace-lambda-macro$15448$1DOkPG (case-lambda ((g$stx$10637$1DOkPG) ((case-lambda ((g$t$10638$1DOkPG) ((case-lambda ((g$ls/false$10639$1DOkPG) (if (if g$ls/false$10639$1DOkPG (begin '#f (apply (case-lambda ((g$who$10640$1DOkPG g$fmls$10641$1DOkPG g$b$10642$1DOkPG g$b*$10643$1DOkPG) '#t)) g$ls/false$10639$1DOkPG)) '#f) (apply (case-lambda ((g$who$10644$1DOkPG g$fmls$10645$1DOkPG g$b$10646$1DOkPG g$b*$10647$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$fmls$10645$1DOkPG) (g$bless$9388$1DOkPG (list 'make-traced-procedure (list 'quote g$who$10644$1DOkPG) (cons 'lambda (cons g$fmls$10645$1DOkPG (cons g$b$10646$1DOkPG g$b*$10647$1DOkPG))))) (g$invalid-fmls-error$9390$1DOkPG g$stx$10637$1DOkPG g$fmls$10645$1DOkPG)))) g$ls/false$10639$1DOkPG) ((case-lambda ((g$t$10648$1DOkPG) ((case-lambda ((g$ls/false$10649$1DOkPG) (if (if g$ls/false$10649$1DOkPG (begin '#f (apply (case-lambda ((g$who$10650$1DOkPG g$fmls$10651$1DOkPG g$last$10652$1DOkPG g$b$10653$1DOkPG g$b*$10654$1DOkPG) '#t)) g$ls/false$10649$1DOkPG)) '#f) (apply (case-lambda ((g$who$10655$1DOkPG g$fmls$10656$1DOkPG g$last$10657$1DOkPG g$b$10658$1DOkPG g$b*$10659$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG (cons g$last$10657$1DOkPG g$fmls$10656$1DOkPG)) (g$bless$9388$1DOkPG (list 'make-traced-procedure (list 'quote g$who$10655$1DOkPG) (cons 'lambda (cons (append g$fmls$10656$1DOkPG g$last$10657$1DOkPG) (cons g$b$10658$1DOkPG g$b*$10659$1DOkPG))))) (g$invalid-fmls-error$9390$1DOkPG g$stx$10637$1DOkPG (append g$fmls$10656$1DOkPG g$last$10657$1DOkPG))))) g$ls/false$10649$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10648$1DOkPG)))) ((case-lambda ((g$x$10660$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10660$1DOkPG) (begin '#f ((case-lambda ((g$q$10661$1DOkPG) (if g$q$10661$1DOkPG (begin '#f ((case-lambda ((g$r$10662$1DOkPG) (if g$r$10662$1DOkPG (begin '#f (append g$q$10661$1DOkPG g$r$10662$1DOkPG)) '#f))) ((case-lambda ((g$x$10663$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10663$1DOkPG) (begin '#f ((case-lambda ((g$q$10664$1DOkPG) (if g$q$10664$1DOkPG (begin '#f ((case-lambda ((g$r$10665$1DOkPG) (if g$r$10665$1DOkPG (begin '#f (append g$q$10664$1DOkPG g$r$10665$1DOkPG)) '#f))) ((case-lambda ((g$x$10666$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10666$1DOkPG) (begin '#f ((case-lambda ((g$q$10667$1DOkPG) (if g$q$10667$1DOkPG (begin '#f ((case-lambda ((g$r$10668$1DOkPG) (if g$r$10668$1DOkPG (begin '#f (append g$q$10667$1DOkPG g$r$10668$1DOkPG)) '#f))) ((case-lambda ((g$x$10669$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10669$1DOkPG) (begin '#f ((case-lambda ((g$q$10670$1DOkPG) (if g$q$10670$1DOkPG (begin '#f ((case-lambda ((g$r$10671$1DOkPG) (if g$r$10671$1DOkPG (begin '#f (append g$q$10670$1DOkPG g$r$10671$1DOkPG)) '#f))) ((letrec ((g$f$10672$1DOkPG (case-lambda ((g$x$10673$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10673$1DOkPG) ((case-lambda ((g$cars/f$10674$1DOkPG) (if g$cars/f$10674$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10675$1DOkPG) (if g$cdrs/f$10675$1DOkPG (begin '#f (map cons g$cars/f$10674$1DOkPG g$cdrs/f$10675$1DOkPG)) '#f))) (g$f$10672$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10673$1DOkPG)))) '#f))) ((case-lambda ((g$x$10676$1DOkPG) (list g$x$10676$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10673$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10673$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10672$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10669$1DOkPG)))) '#f))) ((case-lambda ((g$x$10677$1DOkPG) (list g$x$10677$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10669$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10666$1DOkPG)))) '#f))) ((letrec ((g$f$10678$1DOkPG (case-lambda ((g$x$10681$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10681$1DOkPG) ((case-lambda ((g$cars/f$10682$1DOkPG) (if g$cars/f$10682$1DOkPG (begin '#f ((case-lambda ((g$d/f$10683$1DOkPG) (if g$d/f$10683$1DOkPG (begin '#f (cons (map cons g$cars/f$10682$1DOkPG (car g$d/f$10683$1DOkPG)) (cdr g$d/f$10683$1DOkPG))) '#f))) (g$f$10678$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10681$1DOkPG)))) '#f))) ((case-lambda ((g$x$10684$1DOkPG) (list g$x$10684$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10681$1DOkPG))) ((case-lambda ((g$d$10685$1DOkPG) (if g$d$10685$1DOkPG (begin '#f (cons (list (begin 'fmls '())) g$d$10685$1DOkPG)) '#f))) ((case-lambda ((g$x$10686$1DOkPG) (list g$x$10686$1DOkPG))) g$x$10681$1DOkPG))))))) (case-lambda ((g$x$10679$1DOkPG) ((case-lambda ((g$x$10680$1DOkPG) (if g$x$10680$1DOkPG (begin '#f (append (car g$x$10680$1DOkPG) (cdr g$x$10680$1DOkPG))) '#f))) (g$f$10678$1DOkPG g$x$10679$1DOkPG))))) (g$syntax-car$9178$1DOkPG g$x$10666$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10663$1DOkPG)))) '#f))) ((case-lambda ((g$x$10687$1DOkPG) (list g$x$10687$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10663$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10660$1DOkPG)))) '#f))) ((case-lambda ((g$x$10688$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10660$1DOkPG)))) '#f))) g$t$10648$1DOkPG)))) g$t$10638$1DOkPG)))) ((case-lambda ((g$x$10689$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10689$1DOkPG) (begin '#f ((case-lambda ((g$q$10690$1DOkPG) (if g$q$10690$1DOkPG (begin '#f ((case-lambda ((g$r$10691$1DOkPG) (if g$r$10691$1DOkPG (begin '#f (append g$q$10690$1DOkPG g$r$10691$1DOkPG)) '#f))) ((case-lambda ((g$x$10692$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10692$1DOkPG) (begin '#f ((case-lambda ((g$q$10693$1DOkPG) (if g$q$10693$1DOkPG (begin '#f ((case-lambda ((g$r$10694$1DOkPG) (if g$r$10694$1DOkPG (begin '#f (append g$q$10693$1DOkPG g$r$10694$1DOkPG)) '#f))) ((case-lambda ((g$x$10695$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10695$1DOkPG) (begin '#f ((case-lambda ((g$q$10696$1DOkPG) (if g$q$10696$1DOkPG (begin '#f ((case-lambda ((g$r$10697$1DOkPG) (if g$r$10697$1DOkPG (begin '#f (append g$q$10696$1DOkPG g$r$10697$1DOkPG)) '#f))) ((case-lambda ((g$x$10698$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10698$1DOkPG) (begin '#f ((case-lambda ((g$q$10699$1DOkPG) (if g$q$10699$1DOkPG (begin '#f ((case-lambda ((g$r$10700$1DOkPG) (if g$r$10700$1DOkPG (begin '#f (append g$q$10699$1DOkPG g$r$10700$1DOkPG)) '#f))) ((letrec ((g$f$10701$1DOkPG (case-lambda ((g$x$10702$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10702$1DOkPG) ((case-lambda ((g$cars/f$10703$1DOkPG) (if g$cars/f$10703$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10704$1DOkPG) (if g$cdrs/f$10704$1DOkPG (begin '#f (map cons g$cars/f$10703$1DOkPG g$cdrs/f$10704$1DOkPG)) '#f))) (g$f$10701$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10702$1DOkPG)))) '#f))) ((case-lambda ((g$x$10705$1DOkPG) (list g$x$10705$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10702$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10702$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10701$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10698$1DOkPG)))) '#f))) ((case-lambda ((g$x$10706$1DOkPG) (list g$x$10706$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10698$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10695$1DOkPG)))) '#f))) ((letrec ((g$f$10707$1DOkPG (case-lambda ((g$x$10708$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10708$1DOkPG) ((case-lambda ((g$cars/f$10709$1DOkPG) (if g$cars/f$10709$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10710$1DOkPG) (if g$cdrs/f$10710$1DOkPG (begin '#f (map cons g$cars/f$10709$1DOkPG g$cdrs/f$10710$1DOkPG)) '#f))) (g$f$10707$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10708$1DOkPG)))) '#f))) ((case-lambda ((g$x$10711$1DOkPG) (list g$x$10711$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10708$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10708$1DOkPG) (list (begin 'fmls '())) '#f)))))) g$f$10707$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$10695$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10692$1DOkPG)))) '#f))) ((case-lambda ((g$x$10712$1DOkPG) (list g$x$10712$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10692$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10689$1DOkPG)))) '#f))) ((case-lambda ((g$x$10713$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10689$1DOkPG)))) '#f))) g$t$10638$1DOkPG)))) g$stx$10637$1DOkPG)))) (g$trace-define-macro$9395$1DOkPG g$trace-define-macro$15449$1DOkPG (case-lambda ((g$stx$10714$1DOkPG) ((case-lambda ((g$t$10715$1DOkPG) ((case-lambda ((g$ls/false$10716$1DOkPG) (if (if g$ls/false$10716$1DOkPG (begin '#f (apply (case-lambda ((g$who$10717$1DOkPG g$fmls$10718$1DOkPG g$b$10719$1DOkPG g$b*$10720$1DOkPG) '#t)) g$ls/false$10716$1DOkPG)) '#f) (apply (case-lambda ((g$who$10721$1DOkPG g$fmls$10722$1DOkPG g$b$10723$1DOkPG g$b*$10724$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$fmls$10722$1DOkPG) (g$bless$9388$1DOkPG (list 'define g$who$10721$1DOkPG (list 'make-traced-procedure (list 'quote g$who$10721$1DOkPG) (cons 'lambda (cons g$fmls$10722$1DOkPG (cons g$b$10723$1DOkPG g$b*$10724$1DOkPG)))))) (g$invalid-fmls-error$9390$1DOkPG g$stx$10714$1DOkPG g$fmls$10722$1DOkPG)))) g$ls/false$10716$1DOkPG) ((case-lambda ((g$t$10725$1DOkPG) ((case-lambda ((g$ls/false$10726$1DOkPG) (if (if g$ls/false$10726$1DOkPG (begin '#f (apply (case-lambda ((g$who$10727$1DOkPG g$fmls$10728$1DOkPG g$last$10729$1DOkPG g$b$10730$1DOkPG g$b*$10731$1DOkPG) '#t)) g$ls/false$10726$1DOkPG)) '#f) (apply (case-lambda ((g$who$10732$1DOkPG g$fmls$10733$1DOkPG g$last$10734$1DOkPG g$b$10735$1DOkPG g$b*$10736$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG (cons g$last$10734$1DOkPG g$fmls$10733$1DOkPG)) (g$bless$9388$1DOkPG (list 'define g$who$10732$1DOkPG (list 'make-traced-procedure (list 'quote g$who$10732$1DOkPG) (cons 'lambda (cons (append g$fmls$10733$1DOkPG g$last$10734$1DOkPG) (cons g$b$10735$1DOkPG g$b*$10736$1DOkPG)))))) (g$invalid-fmls-error$9390$1DOkPG g$stx$10714$1DOkPG (append g$fmls$10733$1DOkPG g$last$10734$1DOkPG))))) g$ls/false$10726$1DOkPG) ((case-lambda ((g$t$10737$1DOkPG) ((case-lambda ((g$ls/false$10738$1DOkPG) (if (if g$ls/false$10738$1DOkPG (begin '#f (apply (case-lambda ((g$who$10739$1DOkPG g$expr$10740$1DOkPG) '#t)) g$ls/false$10738$1DOkPG)) '#f) (apply (case-lambda ((g$who$10741$1DOkPG g$expr$10742$1DOkPG) (if (g$id?$9181$1DOkPG g$who$10741$1DOkPG) (g$bless$9388$1DOkPG (list 'define g$who$10741$1DOkPG (list 'let (list (list 'v g$expr$10742$1DOkPG)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$who$10741$1DOkPG) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (g$syntax-violation$9501$1DOkPG '#f '"invalid name" g$stx$10714$1DOkPG)))) g$ls/false$10738$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10737$1DOkPG)))) ((case-lambda ((g$x$10743$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10743$1DOkPG) (begin '#f ((case-lambda ((g$q$10744$1DOkPG) (if g$q$10744$1DOkPG (begin '#f ((case-lambda ((g$r$10745$1DOkPG) (if g$r$10745$1DOkPG (begin '#f (append g$q$10744$1DOkPG g$r$10745$1DOkPG)) '#f))) ((case-lambda ((g$x$10746$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10746$1DOkPG) (begin '#f ((case-lambda ((g$q$10747$1DOkPG) (if g$q$10747$1DOkPG (begin '#f ((case-lambda ((g$r$10748$1DOkPG) (if g$r$10748$1DOkPG (begin '#f (append g$q$10747$1DOkPG g$r$10748$1DOkPG)) '#f))) ((case-lambda ((g$x$10749$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10749$1DOkPG) (begin '#f ((case-lambda ((g$q$10750$1DOkPG) (if g$q$10750$1DOkPG (begin '#f ((case-lambda ((g$r$10751$1DOkPG) (if g$r$10751$1DOkPG (begin '#f (append g$q$10750$1DOkPG g$r$10751$1DOkPG)) '#f))) ((case-lambda ((g$x$10752$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10752$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10749$1DOkPG)))) '#f))) ((case-lambda ((g$x$10753$1DOkPG) (list g$x$10753$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10749$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10746$1DOkPG)))) '#f))) ((case-lambda ((g$x$10754$1DOkPG) (list g$x$10754$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10746$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10743$1DOkPG)))) '#f))) ((case-lambda ((g$x$10755$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10743$1DOkPG)))) '#f))) g$t$10737$1DOkPG)))) g$t$10725$1DOkPG)))) ((case-lambda ((g$x$10756$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10756$1DOkPG) (begin '#f ((case-lambda ((g$q$10757$1DOkPG) (if g$q$10757$1DOkPG (begin '#f ((case-lambda ((g$r$10758$1DOkPG) (if g$r$10758$1DOkPG (begin '#f (append g$q$10757$1DOkPG g$r$10758$1DOkPG)) '#f))) ((case-lambda ((g$x$10759$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10759$1DOkPG) (begin '#f ((case-lambda ((g$q$10760$1DOkPG) (if g$q$10760$1DOkPG (begin '#f ((case-lambda ((g$r$10761$1DOkPG) (if g$r$10761$1DOkPG (begin '#f (append g$q$10760$1DOkPG g$r$10761$1DOkPG)) '#f))) ((case-lambda ((g$x$10762$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10762$1DOkPG) (begin '#f ((case-lambda ((g$q$10763$1DOkPG) (if g$q$10763$1DOkPG (begin '#f ((case-lambda ((g$r$10764$1DOkPG) (if g$r$10764$1DOkPG (begin '#f (append g$q$10763$1DOkPG g$r$10764$1DOkPG)) '#f))) ((letrec ((g$f$10765$1DOkPG (case-lambda ((g$x$10766$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10766$1DOkPG) ((case-lambda ((g$cars/f$10767$1DOkPG) (if g$cars/f$10767$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10768$1DOkPG) (if g$cdrs/f$10768$1DOkPG (begin '#f (map cons g$cars/f$10767$1DOkPG g$cdrs/f$10768$1DOkPG)) '#f))) (g$f$10765$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10766$1DOkPG)))) '#f))) ((case-lambda ((g$x$10769$1DOkPG) (list g$x$10769$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10766$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10766$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10765$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10762$1DOkPG)))) '#f))) ((case-lambda ((g$x$10770$1DOkPG) (list g$x$10770$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10762$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10759$1DOkPG)))) '#f))) ((case-lambda ((g$x$10771$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10771$1DOkPG) (begin '#f ((case-lambda ((g$q$10772$1DOkPG) (if g$q$10772$1DOkPG (begin '#f ((case-lambda ((g$r$10773$1DOkPG) (if g$r$10773$1DOkPG (begin '#f (append g$q$10772$1DOkPG g$r$10773$1DOkPG)) '#f))) ((letrec ((g$f$10774$1DOkPG (case-lambda ((g$x$10777$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10777$1DOkPG) ((case-lambda ((g$cars/f$10778$1DOkPG) (if g$cars/f$10778$1DOkPG (begin '#f ((case-lambda ((g$d/f$10779$1DOkPG) (if g$d/f$10779$1DOkPG (begin '#f (cons (map cons g$cars/f$10778$1DOkPG (car g$d/f$10779$1DOkPG)) (cdr g$d/f$10779$1DOkPG))) '#f))) (g$f$10774$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10777$1DOkPG)))) '#f))) ((case-lambda ((g$x$10780$1DOkPG) (list g$x$10780$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10777$1DOkPG))) ((case-lambda ((g$d$10781$1DOkPG) (if g$d$10781$1DOkPG (begin '#f (cons (list (begin 'fmls '())) g$d$10781$1DOkPG)) '#f))) ((case-lambda ((g$x$10782$1DOkPG) (list g$x$10782$1DOkPG))) g$x$10777$1DOkPG))))))) (case-lambda ((g$x$10775$1DOkPG) ((case-lambda ((g$x$10776$1DOkPG) (if g$x$10776$1DOkPG (begin '#f (append (car g$x$10776$1DOkPG) (cdr g$x$10776$1DOkPG))) '#f))) (g$f$10774$1DOkPG g$x$10775$1DOkPG))))) (g$syntax-cdr$9179$1DOkPG g$x$10771$1DOkPG)))) '#f))) ((case-lambda ((g$x$10783$1DOkPG) (list g$x$10783$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10771$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10759$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10756$1DOkPG)))) '#f))) ((case-lambda ((g$x$10784$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10756$1DOkPG)))) '#f))) g$t$10725$1DOkPG)))) g$t$10715$1DOkPG)))) ((case-lambda ((g$x$10785$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10785$1DOkPG) (begin '#f ((case-lambda ((g$q$10786$1DOkPG) (if g$q$10786$1DOkPG (begin '#f ((case-lambda ((g$r$10787$1DOkPG) (if g$r$10787$1DOkPG (begin '#f (append g$q$10786$1DOkPG g$r$10787$1DOkPG)) '#f))) ((case-lambda ((g$x$10788$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10788$1DOkPG) (begin '#f ((case-lambda ((g$q$10789$1DOkPG) (if g$q$10789$1DOkPG (begin '#f ((case-lambda ((g$r$10790$1DOkPG) (if g$r$10790$1DOkPG (begin '#f (append g$q$10789$1DOkPG g$r$10790$1DOkPG)) '#f))) ((case-lambda ((g$x$10791$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10791$1DOkPG) (begin '#f ((case-lambda ((g$q$10792$1DOkPG) (if g$q$10792$1DOkPG (begin '#f ((case-lambda ((g$r$10793$1DOkPG) (if g$r$10793$1DOkPG (begin '#f (append g$q$10792$1DOkPG g$r$10793$1DOkPG)) '#f))) ((letrec ((g$f$10794$1DOkPG (case-lambda ((g$x$10795$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10795$1DOkPG) ((case-lambda ((g$cars/f$10796$1DOkPG) (if g$cars/f$10796$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10797$1DOkPG) (if g$cdrs/f$10797$1DOkPG (begin '#f (map cons g$cars/f$10796$1DOkPG g$cdrs/f$10797$1DOkPG)) '#f))) (g$f$10794$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10795$1DOkPG)))) '#f))) ((case-lambda ((g$x$10798$1DOkPG) (list g$x$10798$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10795$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10795$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10794$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10791$1DOkPG)))) '#f))) ((case-lambda ((g$x$10799$1DOkPG) (list g$x$10799$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10791$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10788$1DOkPG)))) '#f))) ((case-lambda ((g$x$10800$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10800$1DOkPG) (begin '#f ((case-lambda ((g$q$10801$1DOkPG) (if g$q$10801$1DOkPG (begin '#f ((case-lambda ((g$r$10802$1DOkPG) (if g$r$10802$1DOkPG (begin '#f (append g$q$10801$1DOkPG g$r$10802$1DOkPG)) '#f))) ((letrec ((g$f$10803$1DOkPG (case-lambda ((g$x$10804$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10804$1DOkPG) ((case-lambda ((g$cars/f$10805$1DOkPG) (if g$cars/f$10805$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10806$1DOkPG) (if g$cdrs/f$10806$1DOkPG (begin '#f (map cons g$cars/f$10805$1DOkPG g$cdrs/f$10806$1DOkPG)) '#f))) (g$f$10803$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10804$1DOkPG)))) '#f))) ((case-lambda ((g$x$10807$1DOkPG) (list g$x$10807$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10804$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10804$1DOkPG) (list (begin 'fmls '())) '#f)))))) g$f$10803$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10800$1DOkPG)))) '#f))) ((case-lambda ((g$x$10808$1DOkPG) (list g$x$10808$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10800$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10788$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10785$1DOkPG)))) '#f))) ((case-lambda ((g$x$10809$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10785$1DOkPG)))) '#f))) g$t$10715$1DOkPG)))) g$stx$10714$1DOkPG)))) (g$trace-define-syntax-macro$9396$1DOkPG g$trace-define-syntax-macro$15450$1DOkPG (case-lambda ((g$stx$10810$1DOkPG) ((case-lambda ((g$t$10811$1DOkPG) ((case-lambda ((g$ls/false$10812$1DOkPG) (if (if g$ls/false$10812$1DOkPG (begin '#f (apply (case-lambda ((g$who$10813$1DOkPG g$expr$10814$1DOkPG) '#t)) g$ls/false$10812$1DOkPG)) '#f) (apply (case-lambda ((g$who$10815$1DOkPG g$expr$10816$1DOkPG) (if (g$id?$9181$1DOkPG g$who$10815$1DOkPG) (g$bless$9388$1DOkPG (list 'define-syntax g$who$10815$1DOkPG (list 'let (list (list 'v g$expr$10816$1DOkPG)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$who$10815$1DOkPG) '(v syntax->datum))) '((assertion-violation 'trace-define-syntax "not a procedure" v)))))))) (g$syntax-violation$9501$1DOkPG '#f '"invalid name" g$stx$10810$1DOkPG)))) g$ls/false$10812$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10811$1DOkPG)))) ((case-lambda ((g$x$10817$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10817$1DOkPG) (begin '#f ((case-lambda ((g$q$10818$1DOkPG) (if g$q$10818$1DOkPG (begin '#f ((case-lambda ((g$r$10819$1DOkPG) (if g$r$10819$1DOkPG (begin '#f (append g$q$10818$1DOkPG g$r$10819$1DOkPG)) '#f))) ((case-lambda ((g$x$10820$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10820$1DOkPG) (begin '#f ((case-lambda ((g$q$10821$1DOkPG) (if g$q$10821$1DOkPG (begin '#f ((case-lambda ((g$r$10822$1DOkPG) (if g$r$10822$1DOkPG (begin '#f (append g$q$10821$1DOkPG g$r$10822$1DOkPG)) '#f))) ((case-lambda ((g$x$10823$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10823$1DOkPG) (begin '#f ((case-lambda ((g$q$10824$1DOkPG) (if g$q$10824$1DOkPG (begin '#f ((case-lambda ((g$r$10825$1DOkPG) (if g$r$10825$1DOkPG (begin '#f (append g$q$10824$1DOkPG g$r$10825$1DOkPG)) '#f))) ((case-lambda ((g$x$10826$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10826$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10823$1DOkPG)))) '#f))) ((case-lambda ((g$x$10827$1DOkPG) (list g$x$10827$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10823$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10820$1DOkPG)))) '#f))) ((case-lambda ((g$x$10828$1DOkPG) (list g$x$10828$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10820$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10817$1DOkPG)))) '#f))) ((case-lambda ((g$x$10829$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10817$1DOkPG)))) '#f))) g$t$10811$1DOkPG)))) g$stx$10810$1DOkPG)))) (g$guard-macro$9397$1DOkPG g$guard-macro$15451$1DOkPG (case-lambda ((g$x$10830$1DOkPG) (letrec* ((g$gen-clauses$10831$1DOkPG (case-lambda ((g$con$10868$1DOkPG g$outerk$10869$1DOkPG g$clause*$10870$1DOkPG) (letrec* ((g$f$10871$1DOkPG (case-lambda ((g$x$10929$1DOkPG g$k$10930$1DOkPG) ((case-lambda ((g$t$10931$1DOkPG) ((case-lambda ((g$ls/false$10932$1DOkPG) (if (if g$ls/false$10932$1DOkPG (begin '#f (apply (case-lambda ((g$e$10933$1DOkPG g$p$10934$1DOkPG) '#t)) g$ls/false$10932$1DOkPG)) '#f) (apply (case-lambda ((g$e$10935$1DOkPG g$p$10936$1DOkPG) ((case-lambda ((g$t$10937$1DOkPG) (list 'let (list (list g$t$10937$1DOkPG g$e$10935$1DOkPG)) (list 'if g$t$10937$1DOkPG (list g$p$10936$1DOkPG g$t$10937$1DOkPG) g$k$10930$1DOkPG)))) (gensym)))) g$ls/false$10932$1DOkPG) ((case-lambda ((g$t$10938$1DOkPG) ((case-lambda ((g$ls/false$10939$1DOkPG) (if (if g$ls/false$10939$1DOkPG (begin '#f (apply (case-lambda ((g$e$10940$1DOkPG) '#t)) g$ls/false$10939$1DOkPG)) '#f) (apply (case-lambda ((g$e$10941$1DOkPG) ((case-lambda ((g$t$10942$1DOkPG) (list 'let (list (list g$t$10942$1DOkPG g$e$10941$1DOkPG)) (list 'if g$t$10942$1DOkPG g$t$10942$1DOkPG g$k$10930$1DOkPG)))) (gensym)))) g$ls/false$10939$1DOkPG) ((case-lambda ((g$t$10943$1DOkPG) ((case-lambda ((g$ls/false$10944$1DOkPG) (if (if g$ls/false$10944$1DOkPG (begin '#f (apply (case-lambda ((g$e$10945$1DOkPG g$v$10946$1DOkPG g$v*$10947$1DOkPG) '#t)) g$ls/false$10944$1DOkPG)) '#f) (apply (case-lambda ((g$e$10948$1DOkPG g$v$10949$1DOkPG g$v*$10950$1DOkPG) (list 'if g$e$10948$1DOkPG (cons 'begin (cons g$v$10949$1DOkPG g$v*$10950$1DOkPG)) g$k$10930$1DOkPG))) g$ls/false$10944$1DOkPG) ((case-lambda ((g$t$10951$1DOkPG) ((case-lambda ((g$ls/false$10952$1DOkPG) (if (if g$ls/false$10952$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$10952$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid guard clause" g$x$10929$1DOkPG))) g$ls/false$10952$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10951$1DOkPG)))) ((case-lambda ((g$x$10953$1DOkPG) '())) g$t$10951$1DOkPG)))) g$t$10943$1DOkPG)))) ((case-lambda ((g$x$10954$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10954$1DOkPG) (begin '#f ((case-lambda ((g$q$10955$1DOkPG) (if g$q$10955$1DOkPG (begin '#f ((case-lambda ((g$r$10956$1DOkPG) (if g$r$10956$1DOkPG (begin '#f (append g$q$10955$1DOkPG g$r$10956$1DOkPG)) '#f))) ((case-lambda ((g$x$10957$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10957$1DOkPG) (begin '#f ((case-lambda ((g$q$10958$1DOkPG) (if g$q$10958$1DOkPG (begin '#f ((case-lambda ((g$r$10959$1DOkPG) (if g$r$10959$1DOkPG (begin '#f (append g$q$10958$1DOkPG g$r$10959$1DOkPG)) '#f))) ((letrec ((g$f$10960$1DOkPG (case-lambda ((g$x$10961$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10961$1DOkPG) ((case-lambda ((g$cars/f$10962$1DOkPG) (if g$cars/f$10962$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10963$1DOkPG) (if g$cdrs/f$10963$1DOkPG (begin '#f (map cons g$cars/f$10962$1DOkPG g$cdrs/f$10963$1DOkPG)) '#f))) (g$f$10960$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10961$1DOkPG)))) '#f))) ((case-lambda ((g$x$10964$1DOkPG) (list g$x$10964$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10961$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10961$1DOkPG) (list (begin 'v* '())) '#f)))))) g$f$10960$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10957$1DOkPG)))) '#f))) ((case-lambda ((g$x$10965$1DOkPG) (list g$x$10965$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10957$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10954$1DOkPG)))) '#f))) ((case-lambda ((g$x$10966$1DOkPG) (list g$x$10966$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10954$1DOkPG)))) '#f))) g$t$10943$1DOkPG)))) g$t$10938$1DOkPG)))) ((case-lambda ((g$x$10967$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10967$1DOkPG) (begin '#f ((case-lambda ((g$q$10968$1DOkPG) (if g$q$10968$1DOkPG (begin '#f ((case-lambda ((g$r$10969$1DOkPG) (if g$r$10969$1DOkPG (begin '#f (append g$q$10968$1DOkPG g$r$10969$1DOkPG)) '#f))) ((case-lambda ((g$x$10970$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10970$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10967$1DOkPG)))) '#f))) ((case-lambda ((g$x$10971$1DOkPG) (list g$x$10971$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10967$1DOkPG)))) '#f))) g$t$10938$1DOkPG)))) g$t$10931$1DOkPG)))) ((case-lambda ((g$x$10972$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10972$1DOkPG) (begin '#f ((case-lambda ((g$q$10973$1DOkPG) (if g$q$10973$1DOkPG (begin '#f ((case-lambda ((g$r$10974$1DOkPG) (if g$r$10974$1DOkPG (begin '#f (append g$q$10973$1DOkPG g$r$10974$1DOkPG)) '#f))) ((case-lambda ((g$x$10975$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10975$1DOkPG) (begin '#f ((case-lambda ((g$q$10976$1DOkPG) (if g$q$10976$1DOkPG (begin '#f ((case-lambda ((g$r$10977$1DOkPG) (if g$r$10977$1DOkPG (begin '#f (append g$q$10976$1DOkPG g$r$10977$1DOkPG)) '#f))) ((case-lambda ((g$x$10978$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10978$1DOkPG) (begin '#f ((case-lambda ((g$q$10979$1DOkPG) (if g$q$10979$1DOkPG (begin '#f ((case-lambda ((g$r$10980$1DOkPG) (if g$r$10980$1DOkPG (begin '#f (append g$q$10979$1DOkPG g$r$10980$1DOkPG)) '#f))) ((case-lambda ((g$x$10981$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10981$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10978$1DOkPG)))) '#f))) ((case-lambda ((g$x$10982$1DOkPG) (list g$x$10982$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10978$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10975$1DOkPG)))) '#f))) ((case-lambda ((g$x$10983$1DOkPG) (if (g$id?$9181$1DOkPG g$x$10983$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$10983$1DOkPG (g$scheme-stx$9368$1DOkPG '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$10975$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10972$1DOkPG)))) '#f))) ((case-lambda ((g$x$10984$1DOkPG) (list g$x$10984$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10972$1DOkPG)))) '#f))) g$t$10931$1DOkPG)))) g$x$10929$1DOkPG)))) (g$f*$10872$1DOkPG (case-lambda ((g$x*$10879$1DOkPG) ((case-lambda ((g$t$10880$1DOkPG) ((case-lambda ((g$ls/false$10881$1DOkPG) (if (if g$ls/false$10881$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$10881$1DOkPG)) '#f) (apply (case-lambda (() ((case-lambda ((g$g$10882$1DOkPG) (values (list g$g$10882$1DOkPG (list 'lambda '() (list 'raise g$con$10868$1DOkPG))) g$g$10882$1DOkPG))) (gensym)))) g$ls/false$10881$1DOkPG) ((case-lambda ((g$t$10883$1DOkPG) ((case-lambda ((g$ls/false$10884$1DOkPG) (if (if g$ls/false$10884$1DOkPG (begin '#f (apply (case-lambda ((g$e$10885$1DOkPG g$e*$10886$1DOkPG) '#t)) g$ls/false$10884$1DOkPG)) '#f) (apply (case-lambda ((g$e$10887$1DOkPG g$e*$10888$1DOkPG) (values (cons 'begin (cons g$e$10887$1DOkPG g$e*$10888$1DOkPG)) '#f))) g$ls/false$10884$1DOkPG) ((case-lambda ((g$t$10889$1DOkPG) ((case-lambda ((g$ls/false$10890$1DOkPG) (if (if g$ls/false$10890$1DOkPG (begin '#f (apply (case-lambda ((g$cls$10891$1DOkPG g$cls*$10892$1DOkPG) '#t)) g$ls/false$10890$1DOkPG)) '#f) (apply (case-lambda ((g$cls$10893$1DOkPG g$cls*$10894$1DOkPG) (call-with-values (case-lambda (() (g$f*$10872$1DOkPG g$cls*$10894$1DOkPG))) (case-lambda ((g$e$10897$1DOkPG g$g$10898$1DOkPG) ((case-lambda ((g$g$10899$1DOkPG g$e$10900$1DOkPG) (values (g$f$10871$1DOkPG g$cls$10893$1DOkPG g$e$10900$1DOkPG) g$g$10899$1DOkPG))) g$g$10898$1DOkPG g$e$10897$1DOkPG)))))) g$ls/false$10890$1DOkPG) ((case-lambda ((g$t$10901$1DOkPG) ((case-lambda ((g$ls/false$10902$1DOkPG) (if (if g$ls/false$10902$1DOkPG (begin '#f (apply (case-lambda ((g$others$10903$1DOkPG) '#t)) g$ls/false$10902$1DOkPG)) '#f) (apply (case-lambda ((g$others$10904$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid guard clause" g$others$10904$1DOkPG))) g$ls/false$10902$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10901$1DOkPG)))) ((case-lambda ((g$x$10905$1DOkPG) (list g$x$10905$1DOkPG))) g$t$10901$1DOkPG)))) g$t$10889$1DOkPG)))) ((case-lambda ((g$x$10906$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10906$1DOkPG) (begin '#f ((case-lambda ((g$q$10907$1DOkPG) (if g$q$10907$1DOkPG (begin '#f ((case-lambda ((g$r$10908$1DOkPG) (if g$r$10908$1DOkPG (begin '#f (append g$q$10907$1DOkPG g$r$10908$1DOkPG)) '#f))) ((case-lambda ((g$x$10909$1DOkPG) (list g$x$10909$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$10906$1DOkPG)))) '#f))) ((case-lambda ((g$x$10910$1DOkPG) (list g$x$10910$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10906$1DOkPG)))) '#f))) g$t$10889$1DOkPG)))) g$t$10883$1DOkPG)))) ((case-lambda ((g$x$10911$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10911$1DOkPG) (begin '#f ((case-lambda ((g$q$10912$1DOkPG) (if g$q$10912$1DOkPG (begin '#f ((case-lambda ((g$r$10913$1DOkPG) (if g$r$10913$1DOkPG (begin '#f (append g$q$10912$1DOkPG g$r$10913$1DOkPG)) '#f))) ((case-lambda ((g$x$10914$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10914$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10911$1DOkPG)))) '#f))) ((case-lambda ((g$x$10915$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10915$1DOkPG) (begin '#f ((case-lambda ((g$q$10916$1DOkPG) (if g$q$10916$1DOkPG (begin '#f ((case-lambda ((g$r$10917$1DOkPG) (if g$r$10917$1DOkPG (begin '#f (append g$q$10916$1DOkPG g$r$10917$1DOkPG)) '#f))) ((case-lambda ((g$x$10918$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10918$1DOkPG) (begin '#f ((case-lambda ((g$q$10919$1DOkPG) (if g$q$10919$1DOkPG (begin '#f ((case-lambda ((g$r$10920$1DOkPG) (if g$r$10920$1DOkPG (begin '#f (append g$q$10919$1DOkPG g$r$10920$1DOkPG)) '#f))) ((letrec ((g$f$10921$1DOkPG (case-lambda ((g$x$10922$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10922$1DOkPG) ((case-lambda ((g$cars/f$10923$1DOkPG) (if g$cars/f$10923$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10924$1DOkPG) (if g$cdrs/f$10924$1DOkPG (begin '#f (map cons g$cars/f$10923$1DOkPG g$cdrs/f$10924$1DOkPG)) '#f))) (g$f$10921$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10922$1DOkPG)))) '#f))) ((case-lambda ((g$x$10925$1DOkPG) (list g$x$10925$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10922$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10922$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$10921$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10918$1DOkPG)))) '#f))) ((case-lambda ((g$x$10926$1DOkPG) (list g$x$10926$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10918$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10915$1DOkPG)))) '#f))) ((case-lambda ((g$x$10927$1DOkPG) (if (g$id?$9181$1DOkPG g$x$10927$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$10927$1DOkPG (g$scheme-stx$9368$1DOkPG 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$10915$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10911$1DOkPG)))) '#f))) g$t$10883$1DOkPG)))) g$t$10880$1DOkPG)))) ((case-lambda ((g$x$10928$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$10928$1DOkPG) '()) (begin '#f '()) '#f))) g$t$10880$1DOkPG)))) g$x*$10879$1DOkPG))))) (call-with-values (case-lambda (() (g$f*$10872$1DOkPG g$clause*$10870$1DOkPG))) (case-lambda ((g$code$10875$1DOkPG g$raisek$10876$1DOkPG) ((case-lambda ((g$raisek$10877$1DOkPG g$code$10878$1DOkPG) (if g$raisek$10877$1DOkPG (list (list 'call/cc (list 'lambda (list g$raisek$10877$1DOkPG) (list g$outerk$10869$1DOkPG (list 'lambda '() g$code$10878$1DOkPG))))) (list g$outerk$10869$1DOkPG (list 'lambda '() g$code$10878$1DOkPG))))) g$raisek$10876$1DOkPG g$code$10875$1DOkPG))))))))) ((case-lambda ((g$t$10832$1DOkPG) ((case-lambda ((g$ls/false$10833$1DOkPG) (if (if g$ls/false$10833$1DOkPG (begin '#f (apply (case-lambda ((g$con$10834$1DOkPG g$clause*$10835$1DOkPG g$b$10836$1DOkPG g$b*$10837$1DOkPG) (g$id?$9181$1DOkPG g$con$10834$1DOkPG))) g$ls/false$10833$1DOkPG)) '#f) (apply (case-lambda ((g$con$10838$1DOkPG g$clause*$10839$1DOkPG g$b$10840$1DOkPG g$b*$10841$1DOkPG) ((case-lambda ((g$outerk$10842$1DOkPG) (g$bless$9388$1DOkPG (list (list 'call/cc (list 'lambda (list g$outerk$10842$1DOkPG) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$con$10838$1DOkPG) (g$gen-clauses$10831$1DOkPG g$con$10838$1DOkPG g$outerk$10842$1DOkPG g$clause*$10839$1DOkPG)) (cons 'lambda (cons '() (cons '#f (cons g$b$10840$1DOkPG g$b*$10841$1DOkPG)))))))))))) (gensym)))) g$ls/false$10833$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10832$1DOkPG)))) ((case-lambda ((g$x$10843$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10843$1DOkPG) (begin '#f ((case-lambda ((g$q$10844$1DOkPG) (if g$q$10844$1DOkPG (begin '#f ((case-lambda ((g$r$10845$1DOkPG) (if g$r$10845$1DOkPG (begin '#f (append g$q$10844$1DOkPG g$r$10845$1DOkPG)) '#f))) ((case-lambda ((g$x$10846$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10846$1DOkPG) (begin '#f ((case-lambda ((g$q$10847$1DOkPG) (if g$q$10847$1DOkPG (begin '#f ((case-lambda ((g$r$10848$1DOkPG) (if g$r$10848$1DOkPG (begin '#f (append g$q$10847$1DOkPG g$r$10848$1DOkPG)) '#f))) ((case-lambda ((g$x$10849$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10849$1DOkPG) (begin '#f ((case-lambda ((g$q$10850$1DOkPG) (if g$q$10850$1DOkPG (begin '#f ((case-lambda ((g$r$10851$1DOkPG) (if g$r$10851$1DOkPG (begin '#f (append g$q$10850$1DOkPG g$r$10851$1DOkPG)) '#f))) ((letrec ((g$f$10852$1DOkPG (case-lambda ((g$x$10853$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10853$1DOkPG) ((case-lambda ((g$cars/f$10854$1DOkPG) (if g$cars/f$10854$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10855$1DOkPG) (if g$cdrs/f$10855$1DOkPG (begin '#f (map cons g$cars/f$10854$1DOkPG g$cdrs/f$10855$1DOkPG)) '#f))) (g$f$10852$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10853$1DOkPG)))) '#f))) ((case-lambda ((g$x$10856$1DOkPG) (list g$x$10856$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10853$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10853$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$10852$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10849$1DOkPG)))) '#f))) ((case-lambda ((g$x$10857$1DOkPG) (list g$x$10857$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10849$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10846$1DOkPG)))) '#f))) ((case-lambda ((g$x$10858$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10858$1DOkPG) (begin '#f ((case-lambda ((g$q$10859$1DOkPG) (if g$q$10859$1DOkPG (begin '#f ((case-lambda ((g$r$10860$1DOkPG) (if g$r$10860$1DOkPG (begin '#f (append g$q$10859$1DOkPG g$r$10860$1DOkPG)) '#f))) ((letrec ((g$f$10861$1DOkPG (case-lambda ((g$x$10862$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10862$1DOkPG) ((case-lambda ((g$cars/f$10863$1DOkPG) (if g$cars/f$10863$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$10864$1DOkPG) (if g$cdrs/f$10864$1DOkPG (begin '#f (map cons g$cars/f$10863$1DOkPG g$cdrs/f$10864$1DOkPG)) '#f))) (g$f$10861$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$10862$1DOkPG)))) '#f))) ((case-lambda ((g$x$10865$1DOkPG) (list g$x$10865$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10862$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$10862$1DOkPG) (list (begin 'clause* '())) '#f)))))) g$f$10861$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$10858$1DOkPG)))) '#f))) ((case-lambda ((g$x$10866$1DOkPG) (list g$x$10866$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$10858$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$10846$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10843$1DOkPG)))) '#f))) ((case-lambda ((g$x$10867$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10843$1DOkPG)))) '#f))) g$t$10832$1DOkPG)))) g$x$10830$1DOkPG))))) (g$define-enumeration-macro$9398$1DOkPG g$define-enumeration-macro$15452$1DOkPG (case-lambda ((g$stx$10985$1DOkPG) (letrec* ((g$set?$10986$1DOkPG (case-lambda ((g$x$11018$1DOkPG) ((case-lambda ((g$t$11019$1DOkPG) (if g$t$11019$1DOkPG g$t$11019$1DOkPG (begin '#f (if (not (memq (car g$x$11018$1DOkPG) (cdr g$x$11018$1DOkPG))) (begin '#f (g$set?$10986$1DOkPG (cdr g$x$11018$1DOkPG))) '#f))))) (null? g$x$11018$1DOkPG)))))) ((case-lambda ((g$t$10987$1DOkPG) ((case-lambda ((g$ls/false$10988$1DOkPG) (if (if g$ls/false$10988$1DOkPG (begin '#f (apply (case-lambda ((g$name$10989$1DOkPG g$id*$10990$1DOkPG g$maker$10991$1DOkPG) (if (g$id?$9181$1DOkPG g$name$10989$1DOkPG) (if (g$id?$9181$1DOkPG g$maker$10991$1DOkPG) (begin '#f (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$id*$10990$1DOkPG)) '#f) '#f))) g$ls/false$10988$1DOkPG)) '#f) (apply (case-lambda ((g$name$10992$1DOkPG g$id*$10993$1DOkPG g$maker$10994$1DOkPG) ((case-lambda ((g$name*$10995$1DOkPG g$mk$10996$1DOkPG) (begin (if (g$set?$10986$1DOkPG g$name*$10995$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"duplicate names in enumeration set" g$stx$10985$1DOkPG)) (g$bless$9388$1DOkPG (list 'begin (list 'define g$mk$10996$1DOkPG (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$name*$10995$1DOkPG)))) (list 'define-syntax g$name$10992$1DOkPG (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$name*$10995$1DOkPG)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$name*$10995$1DOkPG))))))) (list 'define-syntax g$maker$10994$1DOkPG (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$name*$10995$1DOkPG)) '((syntax-error n "not a member of set"))))) '((syntax (n* ...))))) (list 'syntax (cons g$mk$10996$1DOkPG '('(n* ...)))))))))))))) (g$syntax->datum$9504$1DOkPG g$id*$10993$1DOkPG) (gensym)))) g$ls/false$10988$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$10987$1DOkPG)))) ((case-lambda ((g$x$10997$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$10997$1DOkPG) (begin '#f ((case-lambda ((g$q$10998$1DOkPG) (if g$q$10998$1DOkPG (begin '#f ((case-lambda ((g$r$10999$1DOkPG) (if g$r$10999$1DOkPG (begin '#f (append g$q$10998$1DOkPG g$r$10999$1DOkPG)) '#f))) ((case-lambda ((g$x$11000$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11000$1DOkPG) (begin '#f ((case-lambda ((g$q$11001$1DOkPG) (if g$q$11001$1DOkPG (begin '#f ((case-lambda ((g$r$11002$1DOkPG) (if g$r$11002$1DOkPG (begin '#f (append g$q$11001$1DOkPG g$r$11002$1DOkPG)) '#f))) ((case-lambda ((g$x$11003$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11003$1DOkPG) (begin '#f ((case-lambda ((g$q$11004$1DOkPG) (if g$q$11004$1DOkPG (begin '#f ((case-lambda ((g$r$11005$1DOkPG) (if g$r$11005$1DOkPG (begin '#f (append g$q$11004$1DOkPG g$r$11005$1DOkPG)) '#f))) ((case-lambda ((g$x$11006$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11006$1DOkPG) (begin '#f ((case-lambda ((g$q$11007$1DOkPG) (if g$q$11007$1DOkPG (begin '#f ((case-lambda ((g$r$11008$1DOkPG) (if g$r$11008$1DOkPG (begin '#f (append g$q$11007$1DOkPG g$r$11008$1DOkPG)) '#f))) ((case-lambda ((g$x$11009$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11009$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11006$1DOkPG)))) '#f))) ((case-lambda ((g$x$11010$1DOkPG) (list g$x$11010$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11006$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11003$1DOkPG)))) '#f))) ((letrec ((g$f$11011$1DOkPG (case-lambda ((g$x$11012$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11012$1DOkPG) ((case-lambda ((g$cars/f$11013$1DOkPG) (if g$cars/f$11013$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11014$1DOkPG) (if g$cdrs/f$11014$1DOkPG (begin '#f (map cons g$cars/f$11013$1DOkPG g$cdrs/f$11014$1DOkPG)) '#f))) (g$f$11011$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11012$1DOkPG)))) '#f))) ((case-lambda ((g$x$11015$1DOkPG) (list g$x$11015$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11012$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11012$1DOkPG) (list (begin 'id* '())) '#f)))))) g$f$11011$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$11003$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11000$1DOkPG)))) '#f))) ((case-lambda ((g$x$11016$1DOkPG) (list g$x$11016$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11000$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$10997$1DOkPG)))) '#f))) ((case-lambda ((g$x$11017$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$10997$1DOkPG)))) '#f))) g$t$10987$1DOkPG)))) g$stx$10985$1DOkPG))))) (g$time-macro$9399$1DOkPG g$time-macro$15453$1DOkPG (case-lambda ((g$stx$11020$1DOkPG) ((case-lambda ((g$t$11021$1DOkPG) ((case-lambda ((g$ls/false$11022$1DOkPG) (if (if g$ls/false$11022$1DOkPG (begin '#f (apply (case-lambda ((g$expr$11023$1DOkPG) '#t)) g$ls/false$11022$1DOkPG)) '#f) (apply (case-lambda ((g$expr$11024$1DOkPG) ((case-lambda ((g$str$11025$1DOkPG) (g$bless$9388$1DOkPG (list 'time-it g$str$11025$1DOkPG (list 'lambda '() g$expr$11024$1DOkPG))))) (call-with-values (case-lambda (() (g$open-string-output-port$8560$1DOkPG))) (case-lambda ((g$p$11028$1DOkPG g$e$11029$1DOkPG) ((case-lambda ((g$e$11030$1DOkPG g$p$11031$1DOkPG) (begin (write (g$syntax->datum$9504$1DOkPG g$expr$11024$1DOkPG) g$p$11031$1DOkPG) (g$e$11030$1DOkPG)))) g$e$11029$1DOkPG g$p$11028$1DOkPG))))))) g$ls/false$11022$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11021$1DOkPG)))) ((case-lambda ((g$x$11032$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11032$1DOkPG) (begin '#f ((case-lambda ((g$q$11033$1DOkPG) (if g$q$11033$1DOkPG (begin '#f ((case-lambda ((g$r$11034$1DOkPG) (if g$r$11034$1DOkPG (begin '#f (append g$q$11033$1DOkPG g$r$11034$1DOkPG)) '#f))) ((case-lambda ((g$x$11035$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11035$1DOkPG) (begin '#f ((case-lambda ((g$q$11036$1DOkPG) (if g$q$11036$1DOkPG (begin '#f ((case-lambda ((g$r$11037$1DOkPG) (if g$r$11037$1DOkPG (begin '#f (append g$q$11036$1DOkPG g$r$11037$1DOkPG)) '#f))) ((case-lambda ((g$x$11038$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11038$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11035$1DOkPG)))) '#f))) ((case-lambda ((g$x$11039$1DOkPG) (list g$x$11039$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11035$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11032$1DOkPG)))) '#f))) ((case-lambda ((g$x$11040$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11032$1DOkPG)))) '#f))) g$t$11021$1DOkPG)))) g$stx$11020$1DOkPG)))) (g$delay-macro$9400$1DOkPG g$delay-macro$15454$1DOkPG (case-lambda ((g$stx$11041$1DOkPG) ((case-lambda ((g$t$11042$1DOkPG) ((case-lambda ((g$ls/false$11043$1DOkPG) (if (if g$ls/false$11043$1DOkPG (begin '#f (apply (case-lambda ((g$expr$11044$1DOkPG) '#t)) g$ls/false$11043$1DOkPG)) '#f) (apply (case-lambda ((g$expr$11045$1DOkPG) (g$bless$9388$1DOkPG (list 'make-promise (list 'lambda '() g$expr$11045$1DOkPG))))) g$ls/false$11043$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11042$1DOkPG)))) ((case-lambda ((g$x$11046$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11046$1DOkPG) (begin '#f ((case-lambda ((g$q$11047$1DOkPG) (if g$q$11047$1DOkPG (begin '#f ((case-lambda ((g$r$11048$1DOkPG) (if g$r$11048$1DOkPG (begin '#f (append g$q$11047$1DOkPG g$r$11048$1DOkPG)) '#f))) ((case-lambda ((g$x$11049$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11049$1DOkPG) (begin '#f ((case-lambda ((g$q$11050$1DOkPG) (if g$q$11050$1DOkPG (begin '#f ((case-lambda ((g$r$11051$1DOkPG) (if g$r$11051$1DOkPG (begin '#f (append g$q$11050$1DOkPG g$r$11051$1DOkPG)) '#f))) ((case-lambda ((g$x$11052$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11052$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11049$1DOkPG)))) '#f))) ((case-lambda ((g$x$11053$1DOkPG) (list g$x$11053$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11049$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11046$1DOkPG)))) '#f))) ((case-lambda ((g$x$11054$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11046$1DOkPG)))) '#f))) g$t$11042$1DOkPG)))) g$stx$11041$1DOkPG)))) (g$assert-macro$9401$1DOkPG g$assert-macro$15455$1DOkPG (case-lambda ((g$stx$11055$1DOkPG) ((case-lambda ((g$t$11056$1DOkPG) ((case-lambda ((g$ls/false$11057$1DOkPG) (if (if g$ls/false$11057$1DOkPG (begin '#f (apply (case-lambda ((g$expr$11058$1DOkPG) '#t)) g$ls/false$11057$1DOkPG)) '#f) (apply (case-lambda ((g$expr$11059$1DOkPG) (g$bless$9388$1DOkPG (list 'unless g$expr$11059$1DOkPG (list 'assertion-violation ''assert '"assertion failed" (list 'quote g$expr$11059$1DOkPG)))))) g$ls/false$11057$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11056$1DOkPG)))) ((case-lambda ((g$x$11060$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11060$1DOkPG) (begin '#f ((case-lambda ((g$q$11061$1DOkPG) (if g$q$11061$1DOkPG (begin '#f ((case-lambda ((g$r$11062$1DOkPG) (if g$r$11062$1DOkPG (begin '#f (append g$q$11061$1DOkPG g$r$11062$1DOkPG)) '#f))) ((case-lambda ((g$x$11063$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11063$1DOkPG) (begin '#f ((case-lambda ((g$q$11064$1DOkPG) (if g$q$11064$1DOkPG (begin '#f ((case-lambda ((g$r$11065$1DOkPG) (if g$r$11065$1DOkPG (begin '#f (append g$q$11064$1DOkPG g$r$11065$1DOkPG)) '#f))) ((case-lambda ((g$x$11066$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11066$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11063$1DOkPG)))) '#f))) ((case-lambda ((g$x$11067$1DOkPG) (list g$x$11067$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11063$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11060$1DOkPG)))) '#f))) ((case-lambda ((g$x$11068$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11060$1DOkPG)))) '#f))) g$t$11056$1DOkPG)))) g$stx$11055$1DOkPG)))) (g$endianness-macro$9402$1DOkPG g$endianness-macro$15456$1DOkPG (case-lambda ((g$stx$11069$1DOkPG) ((case-lambda ((g$t$11070$1DOkPG) ((case-lambda ((g$ls/false$11071$1DOkPG) (if (if g$ls/false$11071$1DOkPG (begin '#f (apply (case-lambda ((g$e$11072$1DOkPG) '#t)) g$ls/false$11071$1DOkPG)) '#f) (apply (case-lambda ((g$e$11073$1DOkPG) ((case-lambda ((g$t$11074$1DOkPG) (if (memv g$t$11074$1DOkPG '(little)) (g$bless$9388$1DOkPG ''little) (if (memv g$t$11074$1DOkPG '(big)) (g$bless$9388$1DOkPG ''big) (g$syntax-violation$9501$1DOkPG '#f '"endianness must be big or little" g$stx$11069$1DOkPG))))) (g$syntax->datum$9504$1DOkPG g$e$11073$1DOkPG)))) g$ls/false$11071$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11070$1DOkPG)))) ((case-lambda ((g$x$11075$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11075$1DOkPG) (begin '#f ((case-lambda ((g$q$11076$1DOkPG) (if g$q$11076$1DOkPG (begin '#f ((case-lambda ((g$r$11077$1DOkPG) (if g$r$11077$1DOkPG (begin '#f (append g$q$11076$1DOkPG g$r$11077$1DOkPG)) '#f))) ((case-lambda ((g$x$11078$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11078$1DOkPG) (begin '#f ((case-lambda ((g$q$11079$1DOkPG) (if g$q$11079$1DOkPG (begin '#f ((case-lambda ((g$r$11080$1DOkPG) (if g$r$11080$1DOkPG (begin '#f (append g$q$11079$1DOkPG g$r$11080$1DOkPG)) '#f))) ((case-lambda ((g$x$11081$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11081$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11078$1DOkPG)))) '#f))) ((case-lambda ((g$x$11082$1DOkPG) (list g$x$11082$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11078$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11075$1DOkPG)))) '#f))) ((case-lambda ((g$x$11083$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11075$1DOkPG)))) '#f))) g$t$11070$1DOkPG)))) g$stx$11069$1DOkPG)))) (g$identifier-syntax-macro$9403$1DOkPG g$identifier-syntax-macro$15457$1DOkPG (case-lambda ((g$stx$11084$1DOkPG) ((case-lambda ((g$t$11085$1DOkPG) ((case-lambda ((g$ls/false$11086$1DOkPG) (if (if g$ls/false$11086$1DOkPG (begin '#f (apply (case-lambda ((g$expr$11087$1DOkPG) '#t)) g$ls/false$11086$1DOkPG)) '#f) (apply (case-lambda ((g$expr$11088$1DOkPG) (g$bless$9388$1DOkPG (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$expr$11088$1DOkPG)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$expr$11088$1DOkPG) '((syntax (e* ...))))))))))) g$ls/false$11086$1DOkPG) ((case-lambda ((g$t$11089$1DOkPG) ((case-lambda ((g$ls/false$11090$1DOkPG) (if (if g$ls/false$11090$1DOkPG (begin '#f (apply (case-lambda ((g$id1$11091$1DOkPG g$expr1$11092$1DOkPG g$id2$11093$1DOkPG g$expr2$11094$1DOkPG g$expr3$11095$1DOkPG) (if (g$id?$9181$1DOkPG g$id1$11091$1DOkPG) (if (g$id?$9181$1DOkPG g$id2$11093$1DOkPG) (begin '#f (g$id?$9181$1DOkPG g$expr2$11094$1DOkPG)) '#f) '#f))) g$ls/false$11090$1DOkPG)) '#f) (apply (case-lambda ((g$id1$11096$1DOkPG g$expr1$11097$1DOkPG g$id2$11098$1DOkPG g$expr2$11099$1DOkPG g$expr3$11100$1DOkPG) (g$bless$9388$1DOkPG (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$expr1$11097$1DOkPG)) (list (list 'set! 'id g$expr2$11099$1DOkPG) (list 'syntax g$expr3$11100$1DOkPG)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons g$expr1$11097$1DOkPG '(e* ...)))))))))) g$ls/false$11090$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11089$1DOkPG)))) ((case-lambda ((g$x$11101$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11101$1DOkPG) (begin '#f ((case-lambda ((g$q$11102$1DOkPG) (if g$q$11102$1DOkPG (begin '#f ((case-lambda ((g$r$11103$1DOkPG) (if g$r$11103$1DOkPG (begin '#f (append g$q$11102$1DOkPG g$r$11103$1DOkPG)) '#f))) ((case-lambda ((g$x$11104$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11104$1DOkPG) (begin '#f ((case-lambda ((g$q$11105$1DOkPG) (if g$q$11105$1DOkPG (begin '#f ((case-lambda ((g$r$11106$1DOkPG) (if g$r$11106$1DOkPG (begin '#f (append g$q$11105$1DOkPG g$r$11106$1DOkPG)) '#f))) ((case-lambda ((g$x$11107$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11107$1DOkPG) (begin '#f ((case-lambda ((g$q$11108$1DOkPG) (if g$q$11108$1DOkPG (begin '#f ((case-lambda ((g$r$11109$1DOkPG) (if g$r$11109$1DOkPG (begin '#f (append g$q$11108$1DOkPG g$r$11109$1DOkPG)) '#f))) ((case-lambda ((g$x$11110$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11110$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11107$1DOkPG)))) '#f))) ((case-lambda ((g$x$11111$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11111$1DOkPG) (begin '#f ((case-lambda ((g$q$11112$1DOkPG) (if g$q$11112$1DOkPG (begin '#f ((case-lambda ((g$r$11113$1DOkPG) (if g$r$11113$1DOkPG (begin '#f (append g$q$11112$1DOkPG g$r$11113$1DOkPG)) '#f))) ((case-lambda ((g$x$11114$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11114$1DOkPG) (begin '#f ((case-lambda ((g$q$11115$1DOkPG) (if g$q$11115$1DOkPG (begin '#f ((case-lambda ((g$r$11116$1DOkPG) (if g$r$11116$1DOkPG (begin '#f (append g$q$11115$1DOkPG g$r$11116$1DOkPG)) '#f))) ((case-lambda ((g$x$11117$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11117$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11114$1DOkPG)))) '#f))) ((case-lambda ((g$x$11118$1DOkPG) (list g$x$11118$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11114$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11111$1DOkPG)))) '#f))) ((case-lambda ((g$x$11119$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11119$1DOkPG) (begin '#f ((case-lambda ((g$q$11120$1DOkPG) (if g$q$11120$1DOkPG (begin '#f ((case-lambda ((g$r$11121$1DOkPG) (if g$r$11121$1DOkPG (begin '#f (append g$q$11120$1DOkPG g$r$11121$1DOkPG)) '#f))) ((case-lambda ((g$x$11122$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11122$1DOkPG) (begin '#f ((case-lambda ((g$q$11123$1DOkPG) (if g$q$11123$1DOkPG (begin '#f ((case-lambda ((g$r$11124$1DOkPG) (if g$r$11124$1DOkPG (begin '#f (append g$q$11123$1DOkPG g$r$11124$1DOkPG)) '#f))) ((case-lambda ((g$x$11125$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11125$1DOkPG) (begin '#f ((case-lambda ((g$q$11126$1DOkPG) (if g$q$11126$1DOkPG (begin '#f ((case-lambda ((g$r$11127$1DOkPG) (if g$r$11127$1DOkPG (begin '#f (append g$q$11126$1DOkPG g$r$11127$1DOkPG)) '#f))) ((case-lambda ((g$x$11128$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11128$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11125$1DOkPG)))) '#f))) ((case-lambda ((g$x$11129$1DOkPG) (list g$x$11129$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11125$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11122$1DOkPG)))) '#f))) ((case-lambda ((g$x$11130$1DOkPG) (list g$x$11130$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11122$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11119$1DOkPG)))) '#f))) ((case-lambda ((g$x$11131$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11131$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11131$1DOkPG (g$scheme-stx$9368$1DOkPG 'set!)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11119$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11111$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11107$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11104$1DOkPG)))) '#f))) ((case-lambda ((g$x$11132$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11132$1DOkPG) (begin '#f ((case-lambda ((g$q$11133$1DOkPG) (if g$q$11133$1DOkPG (begin '#f ((case-lambda ((g$r$11134$1DOkPG) (if g$r$11134$1DOkPG (begin '#f (append g$q$11133$1DOkPG g$r$11134$1DOkPG)) '#f))) ((case-lambda ((g$x$11135$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11135$1DOkPG) (begin '#f ((case-lambda ((g$q$11136$1DOkPG) (if g$q$11136$1DOkPG (begin '#f ((case-lambda ((g$r$11137$1DOkPG) (if g$r$11137$1DOkPG (begin '#f (append g$q$11136$1DOkPG g$r$11137$1DOkPG)) '#f))) ((case-lambda ((g$x$11138$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11138$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11135$1DOkPG)))) '#f))) ((case-lambda ((g$x$11139$1DOkPG) (list g$x$11139$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11135$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11132$1DOkPG)))) '#f))) ((case-lambda ((g$x$11140$1DOkPG) (list g$x$11140$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11132$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11104$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11101$1DOkPG)))) '#f))) ((case-lambda ((g$x$11141$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11101$1DOkPG)))) '#f))) g$t$11089$1DOkPG)))) g$t$11085$1DOkPG)))) ((case-lambda ((g$x$11142$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11142$1DOkPG) (begin '#f ((case-lambda ((g$q$11143$1DOkPG) (if g$q$11143$1DOkPG (begin '#f ((case-lambda ((g$r$11144$1DOkPG) (if g$r$11144$1DOkPG (begin '#f (append g$q$11143$1DOkPG g$r$11144$1DOkPG)) '#f))) ((case-lambda ((g$x$11145$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11145$1DOkPG) (begin '#f ((case-lambda ((g$q$11146$1DOkPG) (if g$q$11146$1DOkPG (begin '#f ((case-lambda ((g$r$11147$1DOkPG) (if g$r$11147$1DOkPG (begin '#f (append g$q$11146$1DOkPG g$r$11147$1DOkPG)) '#f))) ((case-lambda ((g$x$11148$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11148$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11145$1DOkPG)))) '#f))) ((case-lambda ((g$x$11149$1DOkPG) (list g$x$11149$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11145$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11142$1DOkPG)))) '#f))) ((case-lambda ((g$x$11150$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11142$1DOkPG)))) '#f))) g$t$11085$1DOkPG)))) g$stx$11084$1DOkPG)))) (g$do-macro$9404$1DOkPG g$do-macro$15458$1DOkPG (case-lambda ((g$stx$11151$1DOkPG) (letrec* ((g$bind$11152$1DOkPG (case-lambda ((g$x$11217$1DOkPG) ((case-lambda ((g$t$11218$1DOkPG) ((case-lambda ((g$ls/false$11219$1DOkPG) (if (if g$ls/false$11219$1DOkPG (begin '#f (apply (case-lambda ((g$x$11220$1DOkPG g$init$11221$1DOkPG) '#t)) g$ls/false$11219$1DOkPG)) '#f) (apply (case-lambda ((g$x$11222$1DOkPG g$init$11223$1DOkPG) (list g$x$11222$1DOkPG g$init$11223$1DOkPG g$x$11222$1DOkPG))) g$ls/false$11219$1DOkPG) ((case-lambda ((g$t$11224$1DOkPG) ((case-lambda ((g$ls/false$11225$1DOkPG) (if (if g$ls/false$11225$1DOkPG (begin '#f (apply (case-lambda ((g$x$11226$1DOkPG g$init$11227$1DOkPG g$step$11228$1DOkPG) '#t)) g$ls/false$11225$1DOkPG)) '#f) (apply (case-lambda ((g$x$11229$1DOkPG g$init$11230$1DOkPG g$step$11231$1DOkPG) (list g$x$11229$1DOkPG g$init$11230$1DOkPG g$step$11231$1DOkPG))) g$ls/false$11225$1DOkPG) ((case-lambda ((g$t$11232$1DOkPG) ((case-lambda ((g$ls/false$11233$1DOkPG) (if (if g$ls/false$11233$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11233$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid binding" g$stx$11151$1DOkPG))) g$ls/false$11233$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11232$1DOkPG)))) ((case-lambda ((g$x$11234$1DOkPG) '())) g$t$11232$1DOkPG)))) g$t$11224$1DOkPG)))) ((case-lambda ((g$x$11235$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11235$1DOkPG) (begin '#f ((case-lambda ((g$q$11236$1DOkPG) (if g$q$11236$1DOkPG (begin '#f ((case-lambda ((g$r$11237$1DOkPG) (if g$r$11237$1DOkPG (begin '#f (append g$q$11236$1DOkPG g$r$11237$1DOkPG)) '#f))) ((case-lambda ((g$x$11238$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11238$1DOkPG) (begin '#f ((case-lambda ((g$q$11239$1DOkPG) (if g$q$11239$1DOkPG (begin '#f ((case-lambda ((g$r$11240$1DOkPG) (if g$r$11240$1DOkPG (begin '#f (append g$q$11239$1DOkPG g$r$11240$1DOkPG)) '#f))) ((case-lambda ((g$x$11241$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11241$1DOkPG) (begin '#f ((case-lambda ((g$q$11242$1DOkPG) (if g$q$11242$1DOkPG (begin '#f ((case-lambda ((g$r$11243$1DOkPG) (if g$r$11243$1DOkPG (begin '#f (append g$q$11242$1DOkPG g$r$11243$1DOkPG)) '#f))) ((case-lambda ((g$x$11244$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11244$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11241$1DOkPG)))) '#f))) ((case-lambda ((g$x$11245$1DOkPG) (list g$x$11245$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11241$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11238$1DOkPG)))) '#f))) ((case-lambda ((g$x$11246$1DOkPG) (list g$x$11246$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11238$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11235$1DOkPG)))) '#f))) ((case-lambda ((g$x$11247$1DOkPG) (list g$x$11247$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11235$1DOkPG)))) '#f))) g$t$11224$1DOkPG)))) g$t$11218$1DOkPG)))) ((case-lambda ((g$x$11248$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11248$1DOkPG) (begin '#f ((case-lambda ((g$q$11249$1DOkPG) (if g$q$11249$1DOkPG (begin '#f ((case-lambda ((g$r$11250$1DOkPG) (if g$r$11250$1DOkPG (begin '#f (append g$q$11249$1DOkPG g$r$11250$1DOkPG)) '#f))) ((case-lambda ((g$x$11251$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11251$1DOkPG) (begin '#f ((case-lambda ((g$q$11252$1DOkPG) (if g$q$11252$1DOkPG (begin '#f ((case-lambda ((g$r$11253$1DOkPG) (if g$r$11253$1DOkPG (begin '#f (append g$q$11252$1DOkPG g$r$11253$1DOkPG)) '#f))) ((case-lambda ((g$x$11254$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11254$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11251$1DOkPG)))) '#f))) ((case-lambda ((g$x$11255$1DOkPG) (list g$x$11255$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11251$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11248$1DOkPG)))) '#f))) ((case-lambda ((g$x$11256$1DOkPG) (list g$x$11256$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11248$1DOkPG)))) '#f))) g$t$11218$1DOkPG)))) g$x$11217$1DOkPG))))) ((case-lambda ((g$t$11153$1DOkPG) ((case-lambda ((g$ls/false$11154$1DOkPG) (if (if g$ls/false$11154$1DOkPG (begin '#f (apply (case-lambda ((g$binding*$11155$1DOkPG g$test$11156$1DOkPG g$expr*$11157$1DOkPG g$command*$11158$1DOkPG) '#t)) g$ls/false$11154$1DOkPG)) '#f) (apply (case-lambda ((g$binding*$11159$1DOkPG g$test$11160$1DOkPG g$expr*$11161$1DOkPG g$command*$11162$1DOkPG) ((case-lambda ((g$t$11163$1DOkPG) ((case-lambda ((g$ls/false$11164$1DOkPG) (if (if g$ls/false$11164$1DOkPG (begin '#f (apply (case-lambda ((g$x*$11165$1DOkPG g$init*$11166$1DOkPG g$step*$11167$1DOkPG) '#t)) g$ls/false$11164$1DOkPG)) '#f) (apply (case-lambda ((g$x*$11168$1DOkPG g$init*$11169$1DOkPG g$step*$11170$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$x*$11168$1DOkPG) (g$bless$9388$1DOkPG (list 'letrec (list (list 'loop (list 'lambda g$x*$11168$1DOkPG (list 'if g$test$11160$1DOkPG (cons 'begin (cons '(if #f #f) g$expr*$11161$1DOkPG)) (cons 'begin (append g$command*$11162$1DOkPG (list (cons 'loop g$step*$11170$1DOkPG)))))))) (cons 'loop g$init*$11169$1DOkPG))) (g$syntax-violation$9501$1DOkPG '#f '"invalid bindings" g$stx$11151$1DOkPG)))) g$ls/false$11164$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11163$1DOkPG)))) ((letrec ((g$f$11171$1DOkPG (case-lambda ((g$x$11172$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11172$1DOkPG) ((case-lambda ((g$cars/f$11173$1DOkPG) (if g$cars/f$11173$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11174$1DOkPG) (if g$cdrs/f$11174$1DOkPG (begin '#f (map cons g$cars/f$11173$1DOkPG g$cdrs/f$11174$1DOkPG)) '#f))) (g$f$11171$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11172$1DOkPG)))) '#f))) ((case-lambda ((g$x$11175$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11175$1DOkPG) (begin '#f ((case-lambda ((g$q$11176$1DOkPG) (if g$q$11176$1DOkPG (begin '#f ((case-lambda ((g$r$11177$1DOkPG) (if g$r$11177$1DOkPG (begin '#f (append g$q$11176$1DOkPG g$r$11177$1DOkPG)) '#f))) ((case-lambda ((g$x$11178$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11178$1DOkPG) (begin '#f ((case-lambda ((g$q$11179$1DOkPG) (if g$q$11179$1DOkPG (begin '#f ((case-lambda ((g$r$11180$1DOkPG) (if g$r$11180$1DOkPG (begin '#f (append g$q$11179$1DOkPG g$r$11180$1DOkPG)) '#f))) ((case-lambda ((g$x$11181$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11181$1DOkPG) (begin '#f ((case-lambda ((g$q$11182$1DOkPG) (if g$q$11182$1DOkPG (begin '#f ((case-lambda ((g$r$11183$1DOkPG) (if g$r$11183$1DOkPG (begin '#f (append g$q$11182$1DOkPG g$r$11183$1DOkPG)) '#f))) ((case-lambda ((g$x$11184$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11184$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11181$1DOkPG)))) '#f))) ((case-lambda ((g$x$11185$1DOkPG) (list g$x$11185$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11181$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11178$1DOkPG)))) '#f))) ((case-lambda ((g$x$11186$1DOkPG) (list g$x$11186$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11178$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11175$1DOkPG)))) '#f))) ((case-lambda ((g$x$11187$1DOkPG) (list g$x$11187$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11175$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11172$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11172$1DOkPG) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f)))))) g$f$11171$1DOkPG) g$t$11163$1DOkPG)))) (map g$bind$11152$1DOkPG g$binding*$11159$1DOkPG)))) g$ls/false$11154$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11153$1DOkPG)))) ((case-lambda ((g$x$11188$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11188$1DOkPG) (begin '#f ((case-lambda ((g$q$11189$1DOkPG) (if g$q$11189$1DOkPG (begin '#f ((case-lambda ((g$r$11190$1DOkPG) (if g$r$11190$1DOkPG (begin '#f (append g$q$11189$1DOkPG g$r$11190$1DOkPG)) '#f))) ((case-lambda ((g$x$11191$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11191$1DOkPG) (begin '#f ((case-lambda ((g$q$11192$1DOkPG) (if g$q$11192$1DOkPG (begin '#f ((case-lambda ((g$r$11193$1DOkPG) (if g$r$11193$1DOkPG (begin '#f (append g$q$11192$1DOkPG g$r$11193$1DOkPG)) '#f))) ((case-lambda ((g$x$11194$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11194$1DOkPG) (begin '#f ((case-lambda ((g$q$11195$1DOkPG) (if g$q$11195$1DOkPG (begin '#f ((case-lambda ((g$r$11196$1DOkPG) (if g$r$11196$1DOkPG (begin '#f (append g$q$11195$1DOkPG g$r$11196$1DOkPG)) '#f))) ((letrec ((g$f$11197$1DOkPG (case-lambda ((g$x$11198$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11198$1DOkPG) ((case-lambda ((g$cars/f$11199$1DOkPG) (if g$cars/f$11199$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11200$1DOkPG) (if g$cdrs/f$11200$1DOkPG (begin '#f (map cons g$cars/f$11199$1DOkPG g$cdrs/f$11200$1DOkPG)) '#f))) (g$f$11197$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11198$1DOkPG)))) '#f))) ((case-lambda ((g$x$11201$1DOkPG) (list g$x$11201$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11198$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11198$1DOkPG) (list (begin 'command* '())) '#f)))))) g$f$11197$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11194$1DOkPG)))) '#f))) ((case-lambda ((g$x$11202$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11202$1DOkPG) (begin '#f ((case-lambda ((g$q$11203$1DOkPG) (if g$q$11203$1DOkPG (begin '#f ((case-lambda ((g$r$11204$1DOkPG) (if g$r$11204$1DOkPG (begin '#f (append g$q$11203$1DOkPG g$r$11204$1DOkPG)) '#f))) ((letrec ((g$f$11205$1DOkPG (case-lambda ((g$x$11206$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11206$1DOkPG) ((case-lambda ((g$cars/f$11207$1DOkPG) (if g$cars/f$11207$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11208$1DOkPG) (if g$cdrs/f$11208$1DOkPG (begin '#f (map cons g$cars/f$11207$1DOkPG g$cdrs/f$11208$1DOkPG)) '#f))) (g$f$11205$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11206$1DOkPG)))) '#f))) ((case-lambda ((g$x$11209$1DOkPG) (list g$x$11209$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11206$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11206$1DOkPG) (list (begin 'expr* '())) '#f)))))) g$f$11205$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11202$1DOkPG)))) '#f))) ((case-lambda ((g$x$11210$1DOkPG) (list g$x$11210$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11202$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11194$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11191$1DOkPG)))) '#f))) ((letrec ((g$f$11211$1DOkPG (case-lambda ((g$x$11212$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11212$1DOkPG) ((case-lambda ((g$cars/f$11213$1DOkPG) (if g$cars/f$11213$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11214$1DOkPG) (if g$cdrs/f$11214$1DOkPG (begin '#f (map cons g$cars/f$11213$1DOkPG g$cdrs/f$11214$1DOkPG)) '#f))) (g$f$11211$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11212$1DOkPG)))) '#f))) ((case-lambda ((g$x$11215$1DOkPG) (list g$x$11215$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11212$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11212$1DOkPG) (list (begin 'binding* '())) '#f)))))) g$f$11211$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$11191$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11188$1DOkPG)))) '#f))) ((case-lambda ((g$x$11216$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11188$1DOkPG)))) '#f))) g$t$11153$1DOkPG)))) g$stx$11151$1DOkPG))))) (g$let*-macro$9405$1DOkPG g$let*-macro$15459$1DOkPG (case-lambda ((g$stx$11257$1DOkPG) ((case-lambda ((g$t$11258$1DOkPG) ((case-lambda ((g$ls/false$11259$1DOkPG) (if (if g$ls/false$11259$1DOkPG (begin '#f (apply (case-lambda ((g$lhs*$11260$1DOkPG g$rhs*$11261$1DOkPG g$b$11262$1DOkPG g$b*$11263$1DOkPG) (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$lhs*$11260$1DOkPG))) g$ls/false$11259$1DOkPG)) '#f) (apply (case-lambda ((g$lhs*$11264$1DOkPG g$rhs*$11265$1DOkPG g$b$11266$1DOkPG g$b*$11267$1DOkPG) (g$bless$9388$1DOkPG ((letrec ((g$f$11268$1DOkPG (case-lambda ((g$x*$11269$1DOkPG) (if (null? g$x*$11269$1DOkPG) (cons 'let (cons '() (cons g$b$11266$1DOkPG g$b*$11267$1DOkPG))) (list 'let (list (car g$x*$11269$1DOkPG)) (g$f$11268$1DOkPG (cdr g$x*$11269$1DOkPG)))))))) g$f$11268$1DOkPG) (map list g$lhs*$11264$1DOkPG g$rhs*$11265$1DOkPG))))) g$ls/false$11259$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11258$1DOkPG)))) ((case-lambda ((g$x$11270$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11270$1DOkPG) (begin '#f ((case-lambda ((g$q$11271$1DOkPG) (if g$q$11271$1DOkPG (begin '#f ((case-lambda ((g$r$11272$1DOkPG) (if g$r$11272$1DOkPG (begin '#f (append g$q$11271$1DOkPG g$r$11272$1DOkPG)) '#f))) ((case-lambda ((g$x$11273$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11273$1DOkPG) (begin '#f ((case-lambda ((g$q$11274$1DOkPG) (if g$q$11274$1DOkPG (begin '#f ((case-lambda ((g$r$11275$1DOkPG) (if g$r$11275$1DOkPG (begin '#f (append g$q$11274$1DOkPG g$r$11275$1DOkPG)) '#f))) ((case-lambda ((g$x$11276$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11276$1DOkPG) (begin '#f ((case-lambda ((g$q$11277$1DOkPG) (if g$q$11277$1DOkPG (begin '#f ((case-lambda ((g$r$11278$1DOkPG) (if g$r$11278$1DOkPG (begin '#f (append g$q$11277$1DOkPG g$r$11278$1DOkPG)) '#f))) ((letrec ((g$f$11279$1DOkPG (case-lambda ((g$x$11280$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11280$1DOkPG) ((case-lambda ((g$cars/f$11281$1DOkPG) (if g$cars/f$11281$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11282$1DOkPG) (if g$cdrs/f$11282$1DOkPG (begin '#f (map cons g$cars/f$11281$1DOkPG g$cdrs/f$11282$1DOkPG)) '#f))) (g$f$11279$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11280$1DOkPG)))) '#f))) ((case-lambda ((g$x$11283$1DOkPG) (list g$x$11283$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11280$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11280$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$11279$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11276$1DOkPG)))) '#f))) ((case-lambda ((g$x$11284$1DOkPG) (list g$x$11284$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11276$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11273$1DOkPG)))) '#f))) ((letrec ((g$f$11285$1DOkPG (case-lambda ((g$x$11286$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11286$1DOkPG) ((case-lambda ((g$cars/f$11287$1DOkPG) (if g$cars/f$11287$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11288$1DOkPG) (if g$cdrs/f$11288$1DOkPG (begin '#f (map cons g$cars/f$11287$1DOkPG g$cdrs/f$11288$1DOkPG)) '#f))) (g$f$11285$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11286$1DOkPG)))) '#f))) ((case-lambda ((g$x$11289$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11289$1DOkPG) (begin '#f ((case-lambda ((g$q$11290$1DOkPG) (if g$q$11290$1DOkPG (begin '#f ((case-lambda ((g$r$11291$1DOkPG) (if g$r$11291$1DOkPG (begin '#f (append g$q$11290$1DOkPG g$r$11291$1DOkPG)) '#f))) ((case-lambda ((g$x$11292$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11292$1DOkPG) (begin '#f ((case-lambda ((g$q$11293$1DOkPG) (if g$q$11293$1DOkPG (begin '#f ((case-lambda ((g$r$11294$1DOkPG) (if g$r$11294$1DOkPG (begin '#f (append g$q$11293$1DOkPG g$r$11294$1DOkPG)) '#f))) ((case-lambda ((g$x$11295$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11295$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11292$1DOkPG)))) '#f))) ((case-lambda ((g$x$11296$1DOkPG) (list g$x$11296$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11292$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11289$1DOkPG)))) '#f))) ((case-lambda ((g$x$11297$1DOkPG) (list g$x$11297$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11289$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11286$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11286$1DOkPG) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$11285$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$11273$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11270$1DOkPG)))) '#f))) ((case-lambda ((g$x$11298$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11270$1DOkPG)))) '#f))) g$t$11258$1DOkPG)))) g$stx$11257$1DOkPG)))) (g$or-macro$9406$1DOkPG g$or-macro$15460$1DOkPG (case-lambda ((g$stx$11299$1DOkPG) ((case-lambda ((g$t$11300$1DOkPG) ((case-lambda ((g$ls/false$11301$1DOkPG) (if (if g$ls/false$11301$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11301$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$11301$1DOkPG) ((case-lambda ((g$t$11302$1DOkPG) ((case-lambda ((g$ls/false$11303$1DOkPG) (if (if g$ls/false$11303$1DOkPG (begin '#f (apply (case-lambda ((g$e$11304$1DOkPG g$e*$11305$1DOkPG) '#t)) g$ls/false$11303$1DOkPG)) '#f) (apply (case-lambda ((g$e$11306$1DOkPG g$e*$11307$1DOkPG) (g$bless$9388$1DOkPG ((letrec ((g$f$11308$1DOkPG (case-lambda ((g$e$11309$1DOkPG g$e*$11310$1DOkPG) (if (null? g$e*$11310$1DOkPG) (list 'begin '#f g$e$11309$1DOkPG) (list 'let (list (list 't g$e$11309$1DOkPG)) (list 'if 't 't (g$f$11308$1DOkPG (car g$e*$11310$1DOkPG) (cdr g$e*$11310$1DOkPG))))))))) g$f$11308$1DOkPG) g$e$11306$1DOkPG g$e*$11307$1DOkPG)))) g$ls/false$11303$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11302$1DOkPG)))) ((case-lambda ((g$x$11311$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11311$1DOkPG) (begin '#f ((case-lambda ((g$q$11312$1DOkPG) (if g$q$11312$1DOkPG (begin '#f ((case-lambda ((g$r$11313$1DOkPG) (if g$r$11313$1DOkPG (begin '#f (append g$q$11312$1DOkPG g$r$11313$1DOkPG)) '#f))) ((case-lambda ((g$x$11314$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11314$1DOkPG) (begin '#f ((case-lambda ((g$q$11315$1DOkPG) (if g$q$11315$1DOkPG (begin '#f ((case-lambda ((g$r$11316$1DOkPG) (if g$r$11316$1DOkPG (begin '#f (append g$q$11315$1DOkPG g$r$11316$1DOkPG)) '#f))) ((letrec ((g$f$11317$1DOkPG (case-lambda ((g$x$11318$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11318$1DOkPG) ((case-lambda ((g$cars/f$11319$1DOkPG) (if g$cars/f$11319$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11320$1DOkPG) (if g$cdrs/f$11320$1DOkPG (begin '#f (map cons g$cars/f$11319$1DOkPG g$cdrs/f$11320$1DOkPG)) '#f))) (g$f$11317$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11318$1DOkPG)))) '#f))) ((case-lambda ((g$x$11321$1DOkPG) (list g$x$11321$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11318$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11318$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$11317$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11314$1DOkPG)))) '#f))) ((case-lambda ((g$x$11322$1DOkPG) (list g$x$11322$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11314$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11311$1DOkPG)))) '#f))) ((case-lambda ((g$x$11323$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11311$1DOkPG)))) '#f))) g$t$11302$1DOkPG)))) g$t$11300$1DOkPG)))) ((case-lambda ((g$x$11324$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11324$1DOkPG) (begin '#f ((case-lambda ((g$q$11325$1DOkPG) (if g$q$11325$1DOkPG (begin '#f ((case-lambda ((g$r$11326$1DOkPG) (if g$r$11326$1DOkPG (begin '#f (append g$q$11325$1DOkPG g$r$11326$1DOkPG)) '#f))) ((case-lambda ((g$x$11327$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11327$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11324$1DOkPG)))) '#f))) ((case-lambda ((g$x$11328$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11324$1DOkPG)))) '#f))) g$t$11300$1DOkPG)))) g$stx$11299$1DOkPG)))) (g$and-macro$9407$1DOkPG g$and-macro$15461$1DOkPG (case-lambda ((g$stx$11329$1DOkPG) ((case-lambda ((g$t$11330$1DOkPG) ((case-lambda ((g$ls/false$11331$1DOkPG) (if (if g$ls/false$11331$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11331$1DOkPG)) '#f) (apply (case-lambda (() '#t)) g$ls/false$11331$1DOkPG) ((case-lambda ((g$t$11332$1DOkPG) ((case-lambda ((g$ls/false$11333$1DOkPG) (if (if g$ls/false$11333$1DOkPG (begin '#f (apply (case-lambda ((g$e$11334$1DOkPG g$e*$11335$1DOkPG) '#t)) g$ls/false$11333$1DOkPG)) '#f) (apply (case-lambda ((g$e$11336$1DOkPG g$e*$11337$1DOkPG) (g$bless$9388$1DOkPG ((letrec ((g$f$11338$1DOkPG (case-lambda ((g$e$11339$1DOkPG g$e*$11340$1DOkPG) (if (null? g$e*$11340$1DOkPG) (list 'begin '#f g$e$11339$1DOkPG) (cons 'if (cons g$e$11339$1DOkPG (cons (g$f$11338$1DOkPG (car g$e*$11340$1DOkPG) (cdr g$e*$11340$1DOkPG)) '(#f))))))))) g$f$11338$1DOkPG) g$e$11336$1DOkPG g$e*$11337$1DOkPG)))) g$ls/false$11333$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11332$1DOkPG)))) ((case-lambda ((g$x$11341$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11341$1DOkPG) (begin '#f ((case-lambda ((g$q$11342$1DOkPG) (if g$q$11342$1DOkPG (begin '#f ((case-lambda ((g$r$11343$1DOkPG) (if g$r$11343$1DOkPG (begin '#f (append g$q$11342$1DOkPG g$r$11343$1DOkPG)) '#f))) ((case-lambda ((g$x$11344$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11344$1DOkPG) (begin '#f ((case-lambda ((g$q$11345$1DOkPG) (if g$q$11345$1DOkPG (begin '#f ((case-lambda ((g$r$11346$1DOkPG) (if g$r$11346$1DOkPG (begin '#f (append g$q$11345$1DOkPG g$r$11346$1DOkPG)) '#f))) ((letrec ((g$f$11347$1DOkPG (case-lambda ((g$x$11348$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11348$1DOkPG) ((case-lambda ((g$cars/f$11349$1DOkPG) (if g$cars/f$11349$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11350$1DOkPG) (if g$cdrs/f$11350$1DOkPG (begin '#f (map cons g$cars/f$11349$1DOkPG g$cdrs/f$11350$1DOkPG)) '#f))) (g$f$11347$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11348$1DOkPG)))) '#f))) ((case-lambda ((g$x$11351$1DOkPG) (list g$x$11351$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11348$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11348$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$11347$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11344$1DOkPG)))) '#f))) ((case-lambda ((g$x$11352$1DOkPG) (list g$x$11352$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11344$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11341$1DOkPG)))) '#f))) ((case-lambda ((g$x$11353$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11341$1DOkPG)))) '#f))) g$t$11332$1DOkPG)))) g$t$11330$1DOkPG)))) ((case-lambda ((g$x$11354$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11354$1DOkPG) (begin '#f ((case-lambda ((g$q$11355$1DOkPG) (if g$q$11355$1DOkPG (begin '#f ((case-lambda ((g$r$11356$1DOkPG) (if g$r$11356$1DOkPG (begin '#f (append g$q$11355$1DOkPG g$r$11356$1DOkPG)) '#f))) ((case-lambda ((g$x$11357$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11357$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11354$1DOkPG)))) '#f))) ((case-lambda ((g$x$11358$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11354$1DOkPG)))) '#f))) g$t$11330$1DOkPG)))) g$stx$11329$1DOkPG)))) (g$cond-macro$9408$1DOkPG g$cond-macro$15462$1DOkPG (case-lambda ((g$stx$11359$1DOkPG) ((case-lambda ((g$t$11360$1DOkPG) ((case-lambda ((g$ls/false$11361$1DOkPG) (if (if g$ls/false$11361$1DOkPG (begin '#f (apply (case-lambda ((g$cls$11362$1DOkPG g$cls*$11363$1DOkPG) '#t)) g$ls/false$11361$1DOkPG)) '#f) (apply (case-lambda ((g$cls$11364$1DOkPG g$cls*$11365$1DOkPG) (g$bless$9388$1DOkPG ((letrec ((g$f$11366$1DOkPG (case-lambda ((g$cls$11367$1DOkPG g$cls*$11368$1DOkPG) (if (null? g$cls*$11368$1DOkPG) ((case-lambda ((g$t$11369$1DOkPG) ((case-lambda ((g$ls/false$11370$1DOkPG) (if (if g$ls/false$11370$1DOkPG (begin '#f (apply (case-lambda ((g$e$11371$1DOkPG g$e*$11372$1DOkPG) '#t)) g$ls/false$11370$1DOkPG)) '#f) (apply (case-lambda ((g$e$11373$1DOkPG g$e*$11374$1DOkPG) (cons 'begin (cons g$e$11373$1DOkPG g$e*$11374$1DOkPG)))) g$ls/false$11370$1DOkPG) ((case-lambda ((g$t$11375$1DOkPG) ((case-lambda ((g$ls/false$11376$1DOkPG) (if (if g$ls/false$11376$1DOkPG (begin '#f (apply (case-lambda ((g$e$11377$1DOkPG g$p$11378$1DOkPG) '#t)) g$ls/false$11376$1DOkPG)) '#f) (apply (case-lambda ((g$e$11379$1DOkPG g$p$11380$1DOkPG) (list 'let (list (list 't g$e$11379$1DOkPG)) (list 'if 't (cons g$p$11380$1DOkPG '(t)))))) g$ls/false$11376$1DOkPG) ((case-lambda ((g$t$11381$1DOkPG) ((case-lambda ((g$ls/false$11382$1DOkPG) (if (if g$ls/false$11382$1DOkPG (begin '#f (apply (case-lambda ((g$e$11383$1DOkPG) '#t)) g$ls/false$11382$1DOkPG)) '#f) (apply (case-lambda ((g$e$11384$1DOkPG) (cons 'or (cons g$e$11384$1DOkPG '((if #f #f)))))) g$ls/false$11382$1DOkPG) ((case-lambda ((g$t$11385$1DOkPG) ((case-lambda ((g$ls/false$11386$1DOkPG) (if (if g$ls/false$11386$1DOkPG (begin '#f (apply (case-lambda ((g$e$11387$1DOkPG g$e*$11388$1DOkPG) '#t)) g$ls/false$11386$1DOkPG)) '#f) (apply (case-lambda ((g$e$11389$1DOkPG g$e*$11390$1DOkPG) (list 'if g$e$11389$1DOkPG (cons 'begin g$e*$11390$1DOkPG)))) g$ls/false$11386$1DOkPG) ((case-lambda ((g$t$11391$1DOkPG) ((case-lambda ((g$ls/false$11392$1DOkPG) (if (if g$ls/false$11392$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11392$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid last clause" g$stx$11359$1DOkPG))) g$ls/false$11392$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11391$1DOkPG)))) ((case-lambda ((g$x$11393$1DOkPG) '())) g$t$11391$1DOkPG)))) g$t$11385$1DOkPG)))) ((case-lambda ((g$x$11394$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11394$1DOkPG) (begin '#f ((case-lambda ((g$q$11395$1DOkPG) (if g$q$11395$1DOkPG (begin '#f ((case-lambda ((g$r$11396$1DOkPG) (if g$r$11396$1DOkPG (begin '#f (append g$q$11395$1DOkPG g$r$11396$1DOkPG)) '#f))) ((letrec ((g$f$11397$1DOkPG (case-lambda ((g$x$11398$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11398$1DOkPG) ((case-lambda ((g$cars/f$11399$1DOkPG) (if g$cars/f$11399$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11400$1DOkPG) (if g$cdrs/f$11400$1DOkPG (begin '#f (map cons g$cars/f$11399$1DOkPG g$cdrs/f$11400$1DOkPG)) '#f))) (g$f$11397$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11398$1DOkPG)))) '#f))) ((case-lambda ((g$x$11401$1DOkPG) (list g$x$11401$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11398$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11398$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$11397$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11394$1DOkPG)))) '#f))) ((case-lambda ((g$x$11402$1DOkPG) (list g$x$11402$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11394$1DOkPG)))) '#f))) g$t$11385$1DOkPG)))) g$t$11381$1DOkPG)))) ((case-lambda ((g$x$11403$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11403$1DOkPG) (begin '#f ((case-lambda ((g$q$11404$1DOkPG) (if g$q$11404$1DOkPG (begin '#f ((case-lambda ((g$r$11405$1DOkPG) (if g$r$11405$1DOkPG (begin '#f (append g$q$11404$1DOkPG g$r$11405$1DOkPG)) '#f))) ((case-lambda ((g$x$11406$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11406$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11403$1DOkPG)))) '#f))) ((case-lambda ((g$x$11407$1DOkPG) (list g$x$11407$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11403$1DOkPG)))) '#f))) g$t$11381$1DOkPG)))) g$t$11375$1DOkPG)))) ((case-lambda ((g$x$11408$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11408$1DOkPG) (begin '#f ((case-lambda ((g$q$11409$1DOkPG) (if g$q$11409$1DOkPG (begin '#f ((case-lambda ((g$r$11410$1DOkPG) (if g$r$11410$1DOkPG (begin '#f (append g$q$11409$1DOkPG g$r$11410$1DOkPG)) '#f))) ((case-lambda ((g$x$11411$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11411$1DOkPG) (begin '#f ((case-lambda ((g$q$11412$1DOkPG) (if g$q$11412$1DOkPG (begin '#f ((case-lambda ((g$r$11413$1DOkPG) (if g$r$11413$1DOkPG (begin '#f (append g$q$11412$1DOkPG g$r$11413$1DOkPG)) '#f))) ((case-lambda ((g$x$11414$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11414$1DOkPG) (begin '#f ((case-lambda ((g$q$11415$1DOkPG) (if g$q$11415$1DOkPG (begin '#f ((case-lambda ((g$r$11416$1DOkPG) (if g$r$11416$1DOkPG (begin '#f (append g$q$11415$1DOkPG g$r$11416$1DOkPG)) '#f))) ((case-lambda ((g$x$11417$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11417$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11414$1DOkPG)))) '#f))) ((case-lambda ((g$x$11418$1DOkPG) (list g$x$11418$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11414$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11411$1DOkPG)))) '#f))) ((case-lambda ((g$x$11419$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11419$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11419$1DOkPG (g$scheme-stx$9368$1DOkPG '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11411$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11408$1DOkPG)))) '#f))) ((case-lambda ((g$x$11420$1DOkPG) (list g$x$11420$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11408$1DOkPG)))) '#f))) g$t$11375$1DOkPG)))) g$t$11369$1DOkPG)))) ((case-lambda ((g$x$11421$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11421$1DOkPG) (begin '#f ((case-lambda ((g$q$11422$1DOkPG) (if g$q$11422$1DOkPG (begin '#f ((case-lambda ((g$r$11423$1DOkPG) (if g$r$11423$1DOkPG (begin '#f (append g$q$11422$1DOkPG g$r$11423$1DOkPG)) '#f))) ((case-lambda ((g$x$11424$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11424$1DOkPG) (begin '#f ((case-lambda ((g$q$11425$1DOkPG) (if g$q$11425$1DOkPG (begin '#f ((case-lambda ((g$r$11426$1DOkPG) (if g$r$11426$1DOkPG (begin '#f (append g$q$11425$1DOkPG g$r$11426$1DOkPG)) '#f))) ((letrec ((g$f$11427$1DOkPG (case-lambda ((g$x$11428$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11428$1DOkPG) ((case-lambda ((g$cars/f$11429$1DOkPG) (if g$cars/f$11429$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11430$1DOkPG) (if g$cdrs/f$11430$1DOkPG (begin '#f (map cons g$cars/f$11429$1DOkPG g$cdrs/f$11430$1DOkPG)) '#f))) (g$f$11427$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11428$1DOkPG)))) '#f))) ((case-lambda ((g$x$11431$1DOkPG) (list g$x$11431$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11428$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11428$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$11427$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11424$1DOkPG)))) '#f))) ((case-lambda ((g$x$11432$1DOkPG) (list g$x$11432$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11424$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11421$1DOkPG)))) '#f))) ((case-lambda ((g$x$11433$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11433$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11433$1DOkPG (g$scheme-stx$9368$1DOkPG 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11421$1DOkPG)))) '#f))) g$t$11369$1DOkPG)))) g$cls$11367$1DOkPG) ((case-lambda ((g$t$11434$1DOkPG) ((case-lambda ((g$ls/false$11435$1DOkPG) (if (if g$ls/false$11435$1DOkPG (begin '#f (apply (case-lambda ((g$e$11436$1DOkPG g$e*$11437$1DOkPG) '#t)) g$ls/false$11435$1DOkPG)) '#f) (apply (case-lambda ((g$e$11438$1DOkPG g$e*$11439$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"incorrect position of keyword else" g$stx$11359$1DOkPG))) g$ls/false$11435$1DOkPG) ((case-lambda ((g$t$11440$1DOkPG) ((case-lambda ((g$ls/false$11441$1DOkPG) (if (if g$ls/false$11441$1DOkPG (begin '#f (apply (case-lambda ((g$e$11442$1DOkPG g$p$11443$1DOkPG) '#t)) g$ls/false$11441$1DOkPG)) '#f) (apply (case-lambda ((g$e$11444$1DOkPG g$p$11445$1DOkPG) (list 'let (list (list 't g$e$11444$1DOkPG)) (list 'if 't (cons g$p$11445$1DOkPG '(t)) (g$f$11366$1DOkPG (car g$cls*$11368$1DOkPG) (cdr g$cls*$11368$1DOkPG)))))) g$ls/false$11441$1DOkPG) ((case-lambda ((g$t$11446$1DOkPG) ((case-lambda ((g$ls/false$11447$1DOkPG) (if (if g$ls/false$11447$1DOkPG (begin '#f (apply (case-lambda ((g$e$11448$1DOkPG) '#t)) g$ls/false$11447$1DOkPG)) '#f) (apply (case-lambda ((g$e$11449$1DOkPG) (list 'or g$e$11449$1DOkPG (g$f$11366$1DOkPG (car g$cls*$11368$1DOkPG) (cdr g$cls*$11368$1DOkPG))))) g$ls/false$11447$1DOkPG) ((case-lambda ((g$t$11450$1DOkPG) ((case-lambda ((g$ls/false$11451$1DOkPG) (if (if g$ls/false$11451$1DOkPG (begin '#f (apply (case-lambda ((g$e$11452$1DOkPG g$e*$11453$1DOkPG) '#t)) g$ls/false$11451$1DOkPG)) '#f) (apply (case-lambda ((g$e$11454$1DOkPG g$e*$11455$1DOkPG) (list 'if g$e$11454$1DOkPG (cons 'begin g$e*$11455$1DOkPG) (g$f$11366$1DOkPG (car g$cls*$11368$1DOkPG) (cdr g$cls*$11368$1DOkPG))))) g$ls/false$11451$1DOkPG) ((case-lambda ((g$t$11456$1DOkPG) ((case-lambda ((g$ls/false$11457$1DOkPG) (if (if g$ls/false$11457$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11457$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid last clause" g$stx$11359$1DOkPG))) g$ls/false$11457$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11456$1DOkPG)))) ((case-lambda ((g$x$11458$1DOkPG) '())) g$t$11456$1DOkPG)))) g$t$11450$1DOkPG)))) ((case-lambda ((g$x$11459$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11459$1DOkPG) (begin '#f ((case-lambda ((g$q$11460$1DOkPG) (if g$q$11460$1DOkPG (begin '#f ((case-lambda ((g$r$11461$1DOkPG) (if g$r$11461$1DOkPG (begin '#f (append g$q$11460$1DOkPG g$r$11461$1DOkPG)) '#f))) ((letrec ((g$f$11462$1DOkPG (case-lambda ((g$x$11463$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11463$1DOkPG) ((case-lambda ((g$cars/f$11464$1DOkPG) (if g$cars/f$11464$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11465$1DOkPG) (if g$cdrs/f$11465$1DOkPG (begin '#f (map cons g$cars/f$11464$1DOkPG g$cdrs/f$11465$1DOkPG)) '#f))) (g$f$11462$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11463$1DOkPG)))) '#f))) ((case-lambda ((g$x$11466$1DOkPG) (list g$x$11466$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11463$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11463$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$11462$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11459$1DOkPG)))) '#f))) ((case-lambda ((g$x$11467$1DOkPG) (list g$x$11467$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11459$1DOkPG)))) '#f))) g$t$11450$1DOkPG)))) g$t$11446$1DOkPG)))) ((case-lambda ((g$x$11468$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11468$1DOkPG) (begin '#f ((case-lambda ((g$q$11469$1DOkPG) (if g$q$11469$1DOkPG (begin '#f ((case-lambda ((g$r$11470$1DOkPG) (if g$r$11470$1DOkPG (begin '#f (append g$q$11469$1DOkPG g$r$11470$1DOkPG)) '#f))) ((case-lambda ((g$x$11471$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11471$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11468$1DOkPG)))) '#f))) ((case-lambda ((g$x$11472$1DOkPG) (list g$x$11472$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11468$1DOkPG)))) '#f))) g$t$11446$1DOkPG)))) g$t$11440$1DOkPG)))) ((case-lambda ((g$x$11473$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11473$1DOkPG) (begin '#f ((case-lambda ((g$q$11474$1DOkPG) (if g$q$11474$1DOkPG (begin '#f ((case-lambda ((g$r$11475$1DOkPG) (if g$r$11475$1DOkPG (begin '#f (append g$q$11474$1DOkPG g$r$11475$1DOkPG)) '#f))) ((case-lambda ((g$x$11476$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11476$1DOkPG) (begin '#f ((case-lambda ((g$q$11477$1DOkPG) (if g$q$11477$1DOkPG (begin '#f ((case-lambda ((g$r$11478$1DOkPG) (if g$r$11478$1DOkPG (begin '#f (append g$q$11477$1DOkPG g$r$11478$1DOkPG)) '#f))) ((case-lambda ((g$x$11479$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11479$1DOkPG) (begin '#f ((case-lambda ((g$q$11480$1DOkPG) (if g$q$11480$1DOkPG (begin '#f ((case-lambda ((g$r$11481$1DOkPG) (if g$r$11481$1DOkPG (begin '#f (append g$q$11480$1DOkPG g$r$11481$1DOkPG)) '#f))) ((case-lambda ((g$x$11482$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11482$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11479$1DOkPG)))) '#f))) ((case-lambda ((g$x$11483$1DOkPG) (list g$x$11483$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11479$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11476$1DOkPG)))) '#f))) ((case-lambda ((g$x$11484$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11484$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11484$1DOkPG (g$scheme-stx$9368$1DOkPG '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11476$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11473$1DOkPG)))) '#f))) ((case-lambda ((g$x$11485$1DOkPG) (list g$x$11485$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11473$1DOkPG)))) '#f))) g$t$11440$1DOkPG)))) g$t$11434$1DOkPG)))) ((case-lambda ((g$x$11486$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11486$1DOkPG) (begin '#f ((case-lambda ((g$q$11487$1DOkPG) (if g$q$11487$1DOkPG (begin '#f ((case-lambda ((g$r$11488$1DOkPG) (if g$r$11488$1DOkPG (begin '#f (append g$q$11487$1DOkPG g$r$11488$1DOkPG)) '#f))) ((case-lambda ((g$x$11489$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11489$1DOkPG) (begin '#f ((case-lambda ((g$q$11490$1DOkPG) (if g$q$11490$1DOkPG (begin '#f ((case-lambda ((g$r$11491$1DOkPG) (if g$r$11491$1DOkPG (begin '#f (append g$q$11490$1DOkPG g$r$11491$1DOkPG)) '#f))) ((letrec ((g$f$11492$1DOkPG (case-lambda ((g$x$11493$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11493$1DOkPG) ((case-lambda ((g$cars/f$11494$1DOkPG) (if g$cars/f$11494$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11495$1DOkPG) (if g$cdrs/f$11495$1DOkPG (begin '#f (map cons g$cars/f$11494$1DOkPG g$cdrs/f$11495$1DOkPG)) '#f))) (g$f$11492$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11493$1DOkPG)))) '#f))) ((case-lambda ((g$x$11496$1DOkPG) (list g$x$11496$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11493$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11493$1DOkPG) (list (begin 'e* '())) '#f)))))) g$f$11492$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11489$1DOkPG)))) '#f))) ((case-lambda ((g$x$11497$1DOkPG) (list g$x$11497$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11489$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11486$1DOkPG)))) '#f))) ((case-lambda ((g$x$11498$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11498$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11498$1DOkPG (g$scheme-stx$9368$1DOkPG 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11486$1DOkPG)))) '#f))) g$t$11434$1DOkPG)))) g$cls$11367$1DOkPG)))))) g$f$11366$1DOkPG) g$cls$11364$1DOkPG g$cls*$11365$1DOkPG)))) g$ls/false$11361$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11360$1DOkPG)))) ((case-lambda ((g$x$11499$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11499$1DOkPG) (begin '#f ((case-lambda ((g$q$11500$1DOkPG) (if g$q$11500$1DOkPG (begin '#f ((case-lambda ((g$r$11501$1DOkPG) (if g$r$11501$1DOkPG (begin '#f (append g$q$11500$1DOkPG g$r$11501$1DOkPG)) '#f))) ((case-lambda ((g$x$11502$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11502$1DOkPG) (begin '#f ((case-lambda ((g$q$11503$1DOkPG) (if g$q$11503$1DOkPG (begin '#f ((case-lambda ((g$r$11504$1DOkPG) (if g$r$11504$1DOkPG (begin '#f (append g$q$11503$1DOkPG g$r$11504$1DOkPG)) '#f))) ((letrec ((g$f$11505$1DOkPG (case-lambda ((g$x$11506$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11506$1DOkPG) ((case-lambda ((g$cars/f$11507$1DOkPG) (if g$cars/f$11507$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11508$1DOkPG) (if g$cdrs/f$11508$1DOkPG (begin '#f (map cons g$cars/f$11507$1DOkPG g$cdrs/f$11508$1DOkPG)) '#f))) (g$f$11505$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11506$1DOkPG)))) '#f))) ((case-lambda ((g$x$11509$1DOkPG) (list g$x$11509$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11506$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11506$1DOkPG) (list (begin 'cls* '())) '#f)))))) g$f$11505$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11502$1DOkPG)))) '#f))) ((case-lambda ((g$x$11510$1DOkPG) (list g$x$11510$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11502$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11499$1DOkPG)))) '#f))) ((case-lambda ((g$x$11511$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11499$1DOkPG)))) '#f))) g$t$11360$1DOkPG)))) g$stx$11359$1DOkPG)))) (g$do-include$9409$1DOkPG g$do-include$15463$1DOkPG (case-lambda ((g$stx$11512$1DOkPG g$id$11513$1DOkPG g$filename$11514$1DOkPG) ((case-lambda ((g$filename$11515$1DOkPG) (begin (if (if (string? g$filename$11515$1DOkPG) (begin '#f (g$id?$9181$1DOkPG g$id$11513$1DOkPG)) '#f) (void) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$stx$11512$1DOkPG)) (cons (g$bless$9388$1DOkPG 'begin) (with-input-from-file g$filename$11515$1DOkPG (case-lambda (() ((letrec ((g$f$11516$1DOkPG (case-lambda ((g$ls$11517$1DOkPG) ((case-lambda ((g$x$11518$1DOkPG) (if (eof-object? g$x$11518$1DOkPG) (reverse g$ls$11517$1DOkPG) (g$f$11516$1DOkPG (cons (g$datum->stx$9164$1DOkPG g$id$11513$1DOkPG g$x$11518$1DOkPG) g$ls$11517$1DOkPG))))) (read-annotated)))))) g$f$11516$1DOkPG) '())))))))) (g$stx->datum$9192$1DOkPG g$filename$11514$1DOkPG))))) (g$include-macro$9410$1DOkPG g$include-macro$15464$1DOkPG (case-lambda ((g$e$11519$1DOkPG) ((case-lambda ((g$t$11520$1DOkPG) ((case-lambda ((g$ls/false$11521$1DOkPG) (if (if g$ls/false$11521$1DOkPG (begin '#f (apply (case-lambda ((g$id$11522$1DOkPG g$filename$11523$1DOkPG) '#t)) g$ls/false$11521$1DOkPG)) '#f) (apply (case-lambda ((g$id$11524$1DOkPG g$filename$11525$1DOkPG) (g$do-include$9409$1DOkPG g$e$11519$1DOkPG g$id$11524$1DOkPG g$filename$11525$1DOkPG))) g$ls/false$11521$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11520$1DOkPG)))) ((case-lambda ((g$x$11526$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11526$1DOkPG) (begin '#f ((case-lambda ((g$q$11527$1DOkPG) (if g$q$11527$1DOkPG (begin '#f ((case-lambda ((g$r$11528$1DOkPG) (if g$r$11528$1DOkPG (begin '#f (append g$q$11527$1DOkPG g$r$11528$1DOkPG)) '#f))) ((case-lambda ((g$x$11529$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11529$1DOkPG) (begin '#f ((case-lambda ((g$q$11530$1DOkPG) (if g$q$11530$1DOkPG (begin '#f ((case-lambda ((g$r$11531$1DOkPG) (if g$r$11531$1DOkPG (begin '#f (append g$q$11530$1DOkPG g$r$11531$1DOkPG)) '#f))) ((case-lambda ((g$x$11532$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11532$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11529$1DOkPG)))) '#f))) ((case-lambda ((g$x$11533$1DOkPG) (list g$x$11533$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11529$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11526$1DOkPG)))) '#f))) ((case-lambda ((g$x$11534$1DOkPG) (list g$x$11534$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11526$1DOkPG)))) '#f))) g$t$11520$1DOkPG)))) g$e$11519$1DOkPG)))) (g$include-into-macro$9411$1DOkPG g$include-into-macro$15465$1DOkPG (case-lambda ((g$e$11535$1DOkPG) ((case-lambda ((g$t$11536$1DOkPG) ((case-lambda ((g$ls/false$11537$1DOkPG) (if (if g$ls/false$11537$1DOkPG (begin '#f (apply (case-lambda ((g$id$11538$1DOkPG g$filename$11539$1DOkPG) '#t)) g$ls/false$11537$1DOkPG)) '#f) (apply (case-lambda ((g$id$11540$1DOkPG g$filename$11541$1DOkPG) (g$do-include$9409$1DOkPG g$e$11535$1DOkPG g$id$11540$1DOkPG g$filename$11541$1DOkPG))) g$ls/false$11537$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11536$1DOkPG)))) ((case-lambda ((g$x$11542$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11542$1DOkPG) (begin '#f ((case-lambda ((g$q$11543$1DOkPG) (if g$q$11543$1DOkPG (begin '#f ((case-lambda ((g$r$11544$1DOkPG) (if g$r$11544$1DOkPG (begin '#f (append g$q$11543$1DOkPG g$r$11544$1DOkPG)) '#f))) ((case-lambda ((g$x$11545$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11545$1DOkPG) (begin '#f ((case-lambda ((g$q$11546$1DOkPG) (if g$q$11546$1DOkPG (begin '#f ((case-lambda ((g$r$11547$1DOkPG) (if g$r$11547$1DOkPG (begin '#f (append g$q$11546$1DOkPG g$r$11547$1DOkPG)) '#f))) ((case-lambda ((g$x$11548$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11548$1DOkPG) (begin '#f ((case-lambda ((g$q$11549$1DOkPG) (if g$q$11549$1DOkPG (begin '#f ((case-lambda ((g$r$11550$1DOkPG) (if g$r$11550$1DOkPG (begin '#f (append g$q$11549$1DOkPG g$r$11550$1DOkPG)) '#f))) ((case-lambda ((g$x$11551$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11551$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11548$1DOkPG)))) '#f))) ((case-lambda ((g$x$11552$1DOkPG) (list g$x$11552$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11548$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11545$1DOkPG)))) '#f))) ((case-lambda ((g$x$11553$1DOkPG) (list g$x$11553$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11545$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11542$1DOkPG)))) '#f))) ((case-lambda ((g$x$11554$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11542$1DOkPG)))) '#f))) g$t$11536$1DOkPG)))) g$e$11535$1DOkPG)))) (g$syntax-rules-macro$9412$1DOkPG g$syntax-rules-macro$15466$1DOkPG (case-lambda ((g$e$11555$1DOkPG) ((case-lambda ((g$t$11556$1DOkPG) ((case-lambda ((g$ls/false$11557$1DOkPG) (if (if g$ls/false$11557$1DOkPG (begin '#f (apply (case-lambda ((g$lits$11558$1DOkPG g$pat*$11559$1DOkPG g$tmp*$11560$1DOkPG) '#t)) g$ls/false$11557$1DOkPG)) '#f) (apply (case-lambda ((g$lits$11561$1DOkPG g$pat*$11562$1DOkPG g$tmp*$11563$1DOkPG) (begin (if (g$for-all$7866$1DOkPG (case-lambda ((g$x$11564$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11564$1DOkPG) (if (not (g$free-id=?$9185$1DOkPG g$x$11564$1DOkPG (g$scheme-stx$9368$1DOkPG '...))) (begin '#f (not (g$free-id=?$9185$1DOkPG g$x$11564$1DOkPG (g$scheme-stx$9368$1DOkPG '_)))) '#f) '#f))) g$lits$11561$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"invalid literals" g$e$11555$1DOkPG)) (g$bless$9388$1DOkPG (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$lits$11561$1DOkPG (map (case-lambda ((g$pat$11565$1DOkPG g$tmp$11566$1DOkPG) ((case-lambda ((g$t$11567$1DOkPG) ((case-lambda ((g$ls/false$11568$1DOkPG) (if (if g$ls/false$11568$1DOkPG (begin '#f (apply (case-lambda ((g$rest$11569$1DOkPG) '#t)) g$ls/false$11568$1DOkPG)) '#f) (apply (case-lambda ((g$rest$11570$1DOkPG) (list (cons 'g g$rest$11570$1DOkPG) (list 'syntax g$tmp$11566$1DOkPG)))) g$ls/false$11568$1DOkPG) ((case-lambda ((g$t$11571$1DOkPG) ((case-lambda ((g$ls/false$11572$1DOkPG) (if (if g$ls/false$11572$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11572$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax-rules pattern" g$e$11555$1DOkPG g$pat$11565$1DOkPG))) g$ls/false$11572$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11571$1DOkPG)))) ((case-lambda ((g$x$11573$1DOkPG) '())) g$t$11571$1DOkPG)))) g$t$11567$1DOkPG)))) ((case-lambda ((g$x$11574$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11574$1DOkPG) (begin '#f ((case-lambda ((g$q$11575$1DOkPG) (if g$q$11575$1DOkPG (begin '#f ((case-lambda ((g$r$11576$1DOkPG) (if g$r$11576$1DOkPG (begin '#f (append g$q$11575$1DOkPG g$r$11576$1DOkPG)) '#f))) ((case-lambda ((g$x$11577$1DOkPG) (list g$x$11577$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$11574$1DOkPG)))) '#f))) ((case-lambda ((g$x$11578$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11574$1DOkPG)))) '#f))) g$t$11567$1DOkPG)))) g$pat$11565$1DOkPG))) g$pat*$11562$1DOkPG g$tmp*$11563$1DOkPG))))))))) g$ls/false$11557$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11556$1DOkPG)))) ((case-lambda ((g$x$11579$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11579$1DOkPG) (begin '#f ((case-lambda ((g$q$11580$1DOkPG) (if g$q$11580$1DOkPG (begin '#f ((case-lambda ((g$r$11581$1DOkPG) (if g$r$11581$1DOkPG (begin '#f (append g$q$11580$1DOkPG g$r$11581$1DOkPG)) '#f))) ((case-lambda ((g$x$11582$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11582$1DOkPG) (begin '#f ((case-lambda ((g$q$11583$1DOkPG) (if g$q$11583$1DOkPG (begin '#f ((case-lambda ((g$r$11584$1DOkPG) (if g$r$11584$1DOkPG (begin '#f (append g$q$11583$1DOkPG g$r$11584$1DOkPG)) '#f))) ((letrec ((g$f$11585$1DOkPG (case-lambda ((g$x$11586$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11586$1DOkPG) ((case-lambda ((g$cars/f$11587$1DOkPG) (if g$cars/f$11587$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11588$1DOkPG) (if g$cdrs/f$11588$1DOkPG (begin '#f (map cons g$cars/f$11587$1DOkPG g$cdrs/f$11588$1DOkPG)) '#f))) (g$f$11585$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11586$1DOkPG)))) '#f))) ((case-lambda ((g$x$11589$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11589$1DOkPG) (begin '#f ((case-lambda ((g$q$11590$1DOkPG) (if g$q$11590$1DOkPG (begin '#f ((case-lambda ((g$r$11591$1DOkPG) (if g$r$11591$1DOkPG (begin '#f (append g$q$11590$1DOkPG g$r$11591$1DOkPG)) '#f))) ((case-lambda ((g$x$11592$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11592$1DOkPG) (begin '#f ((case-lambda ((g$q$11593$1DOkPG) (if g$q$11593$1DOkPG (begin '#f ((case-lambda ((g$r$11594$1DOkPG) (if g$r$11594$1DOkPG (begin '#f (append g$q$11593$1DOkPG g$r$11594$1DOkPG)) '#f))) ((case-lambda ((g$x$11595$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11595$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11592$1DOkPG)))) '#f))) ((case-lambda ((g$x$11596$1DOkPG) (list g$x$11596$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11592$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11589$1DOkPG)))) '#f))) ((case-lambda ((g$x$11597$1DOkPG) (list g$x$11597$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11589$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11586$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11586$1DOkPG) (list (begin 'pat* '()) (begin 'tmp* '())) '#f)))))) g$f$11585$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11582$1DOkPG)))) '#f))) ((letrec ((g$f$11598$1DOkPG (case-lambda ((g$x$11599$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11599$1DOkPG) ((case-lambda ((g$cars/f$11600$1DOkPG) (if g$cars/f$11600$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11601$1DOkPG) (if g$cdrs/f$11601$1DOkPG (begin '#f (map cons g$cars/f$11600$1DOkPG g$cdrs/f$11601$1DOkPG)) '#f))) (g$f$11598$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11599$1DOkPG)))) '#f))) ((case-lambda ((g$x$11602$1DOkPG) (list g$x$11602$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11599$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11599$1DOkPG) (list (begin 'lits '())) '#f)))))) g$f$11598$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$11582$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11579$1DOkPG)))) '#f))) ((case-lambda ((g$x$11603$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11579$1DOkPG)))) '#f))) g$t$11556$1DOkPG)))) g$e$11555$1DOkPG)))) (g$quasiquote-macro$9413$1DOkPG g$quasiquote-macro$15467$1DOkPG ((case-lambda (() (letrec* ((g$datum$11604$1DOkPG (case-lambda ((g$x$11949$1DOkPG) (list (g$scheme-stx$9368$1DOkPG 'quote) (g$mkstx$9169$1DOkPG g$x$11949$1DOkPG '() '() '()))))) (g$quasicons*$11620$1DOkPG (case-lambda ((g$x$11945$1DOkPG g$y$11946$1DOkPG) ((letrec ((g$f$11947$1DOkPG (case-lambda ((g$x$11948$1DOkPG) (if (null? g$x$11948$1DOkPG) g$y$11946$1DOkPG (g$quasicons$11621$1DOkPG (car g$x$11948$1DOkPG) (g$f$11947$1DOkPG (cdr g$x$11948$1DOkPG)))))))) g$f$11947$1DOkPG) g$x$11945$1DOkPG)))) (g$quasicons$11621$1DOkPG (case-lambda ((g$x$11892$1DOkPG g$y$11893$1DOkPG) ((case-lambda ((g$t$11894$1DOkPG) ((case-lambda ((g$ls/false$11895$1DOkPG) (if (if g$ls/false$11895$1DOkPG (begin '#f (apply (case-lambda ((g$dy$11896$1DOkPG) '#t)) g$ls/false$11895$1DOkPG)) '#f) (apply (case-lambda ((g$dy$11897$1DOkPG) ((case-lambda ((g$t$11898$1DOkPG) ((case-lambda ((g$ls/false$11899$1DOkPG) (if (if g$ls/false$11899$1DOkPG (begin '#f (apply (case-lambda ((g$dx$11900$1DOkPG) '#t)) g$ls/false$11899$1DOkPG)) '#f) (apply (case-lambda ((g$dx$11901$1DOkPG) (list (g$scheme-stx$9368$1DOkPG 'quote) (cons g$dx$11901$1DOkPG g$dy$11897$1DOkPG)))) g$ls/false$11899$1DOkPG) ((case-lambda ((g$t$11902$1DOkPG) ((case-lambda ((g$ls/false$11903$1DOkPG) (if (if g$ls/false$11903$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11903$1DOkPG)) '#f) (apply (case-lambda (() ((case-lambda ((g$t$11904$1DOkPG) ((case-lambda ((g$ls/false$11905$1DOkPG) (if (if g$ls/false$11905$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11905$1DOkPG)) '#f) (apply (case-lambda (() (list (g$scheme-stx$9368$1DOkPG 'list) g$x$11892$1DOkPG))) g$ls/false$11905$1DOkPG) ((case-lambda ((g$t$11906$1DOkPG) ((case-lambda ((g$ls/false$11907$1DOkPG) (if (if g$ls/false$11907$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11907$1DOkPG)) '#f) (apply (case-lambda (() (list (g$scheme-stx$9368$1DOkPG 'cons) g$x$11892$1DOkPG g$y$11893$1DOkPG))) g$ls/false$11907$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11906$1DOkPG)))) ((case-lambda ((g$x$11908$1DOkPG) '())) g$t$11906$1DOkPG)))) g$t$11904$1DOkPG)))) ((case-lambda ((g$x$11909$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11909$1DOkPG) '()) (begin '#f '()) '#f))) g$t$11904$1DOkPG)))) g$dy$11897$1DOkPG))) g$ls/false$11903$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11902$1DOkPG)))) ((case-lambda ((g$x$11910$1DOkPG) '())) g$t$11902$1DOkPG)))) g$t$11898$1DOkPG)))) ((case-lambda ((g$x$11911$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11911$1DOkPG) (begin '#f ((case-lambda ((g$q$11912$1DOkPG) (if g$q$11912$1DOkPG (begin '#f ((case-lambda ((g$r$11913$1DOkPG) (if g$r$11913$1DOkPG (begin '#f (append g$q$11912$1DOkPG g$r$11913$1DOkPG)) '#f))) ((case-lambda ((g$x$11914$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11914$1DOkPG) (begin '#f ((case-lambda ((g$q$11915$1DOkPG) (if g$q$11915$1DOkPG (begin '#f ((case-lambda ((g$r$11916$1DOkPG) (if g$r$11916$1DOkPG (begin '#f (append g$q$11915$1DOkPG g$r$11916$1DOkPG)) '#f))) ((case-lambda ((g$x$11917$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11917$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11914$1DOkPG)))) '#f))) ((case-lambda ((g$x$11918$1DOkPG) (list g$x$11918$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11914$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11911$1DOkPG)))) '#f))) ((case-lambda ((g$x$11919$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11919$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11919$1DOkPG (g$scheme-stx$9368$1DOkPG 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11911$1DOkPG)))) '#f))) g$t$11898$1DOkPG)))) g$x$11892$1DOkPG))) g$ls/false$11895$1DOkPG) ((case-lambda ((g$t$11920$1DOkPG) ((case-lambda ((g$ls/false$11921$1DOkPG) (if (if g$ls/false$11921$1DOkPG (begin '#f (apply (case-lambda ((g$stuff$11922$1DOkPG) '#t)) g$ls/false$11921$1DOkPG)) '#f) (apply (case-lambda ((g$stuff$11923$1DOkPG) (g$cons*$7868$1DOkPG (g$scheme-stx$9368$1DOkPG 'list) g$x$11892$1DOkPG g$stuff$11923$1DOkPG))) g$ls/false$11921$1DOkPG) ((case-lambda ((g$t$11924$1DOkPG) ((case-lambda ((g$ls/false$11925$1DOkPG) (if (if g$ls/false$11925$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11925$1DOkPG)) '#f) (apply (case-lambda (() (list (g$scheme-stx$9368$1DOkPG 'cons) g$x$11892$1DOkPG g$y$11893$1DOkPG))) g$ls/false$11925$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11924$1DOkPG)))) ((case-lambda ((g$x$11926$1DOkPG) '())) g$t$11924$1DOkPG)))) g$t$11920$1DOkPG)))) ((case-lambda ((g$x$11927$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11927$1DOkPG) (begin '#f ((case-lambda ((g$q$11928$1DOkPG) (if g$q$11928$1DOkPG (begin '#f ((case-lambda ((g$r$11929$1DOkPG) (if g$r$11929$1DOkPG (begin '#f (append g$q$11928$1DOkPG g$r$11929$1DOkPG)) '#f))) ((letrec ((g$f$11930$1DOkPG (case-lambda ((g$x$11931$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11931$1DOkPG) ((case-lambda ((g$cars/f$11932$1DOkPG) (if g$cars/f$11932$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11933$1DOkPG) (if g$cdrs/f$11933$1DOkPG (begin '#f (map cons g$cars/f$11932$1DOkPG g$cdrs/f$11933$1DOkPG)) '#f))) (g$f$11930$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11931$1DOkPG)))) '#f))) ((case-lambda ((g$x$11934$1DOkPG) (list g$x$11934$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11931$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11931$1DOkPG) (list (begin 'stuff '())) '#f)))))) g$f$11930$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11927$1DOkPG)))) '#f))) ((case-lambda ((g$x$11935$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11935$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11935$1DOkPG (g$scheme-stx$9368$1DOkPG 'list)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11927$1DOkPG)))) '#f))) g$t$11920$1DOkPG)))) g$t$11894$1DOkPG)))) ((case-lambda ((g$x$11936$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11936$1DOkPG) (begin '#f ((case-lambda ((g$q$11937$1DOkPG) (if g$q$11937$1DOkPG (begin '#f ((case-lambda ((g$r$11938$1DOkPG) (if g$r$11938$1DOkPG (begin '#f (append g$q$11937$1DOkPG g$r$11938$1DOkPG)) '#f))) ((case-lambda ((g$x$11939$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11939$1DOkPG) (begin '#f ((case-lambda ((g$q$11940$1DOkPG) (if g$q$11940$1DOkPG (begin '#f ((case-lambda ((g$r$11941$1DOkPG) (if g$r$11941$1DOkPG (begin '#f (append g$q$11940$1DOkPG g$r$11941$1DOkPG)) '#f))) ((case-lambda ((g$x$11942$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11942$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11939$1DOkPG)))) '#f))) ((case-lambda ((g$x$11943$1DOkPG) (list g$x$11943$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11939$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11936$1DOkPG)))) '#f))) ((case-lambda ((g$x$11944$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11944$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11944$1DOkPG (g$scheme-stx$9368$1DOkPG 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11936$1DOkPG)))) '#f))) g$t$11894$1DOkPG)))) g$y$11893$1DOkPG)))) (g$quasiappend$11622$1DOkPG (case-lambda ((g$x$11859$1DOkPG g$y$11860$1DOkPG) ((case-lambda ((g$ls$11861$1DOkPG) (if (null? g$ls$11861$1DOkPG) (list (g$scheme-stx$9368$1DOkPG 'quote) '()) (if (null? (cdr g$ls$11861$1DOkPG)) (car g$ls$11861$1DOkPG) (g$cons*$7868$1DOkPG (g$scheme-stx$9368$1DOkPG 'append) g$ls$11861$1DOkPG))))) ((letrec ((g$f$11862$1DOkPG (case-lambda ((g$x$11863$1DOkPG) (if (null? g$x$11863$1DOkPG) ((case-lambda ((g$t$11864$1DOkPG) ((case-lambda ((g$ls/false$11865$1DOkPG) (if (if g$ls/false$11865$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11865$1DOkPG)) '#f) (apply (case-lambda (() '())) g$ls/false$11865$1DOkPG) ((case-lambda ((g$t$11866$1DOkPG) ((case-lambda ((g$ls/false$11867$1DOkPG) (if (if g$ls/false$11867$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11867$1DOkPG)) '#f) (apply (case-lambda (() (list g$y$11860$1DOkPG))) g$ls/false$11867$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11866$1DOkPG)))) ((case-lambda ((g$x$11868$1DOkPG) '())) g$t$11866$1DOkPG)))) g$t$11864$1DOkPG)))) ((case-lambda ((g$x$11869$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11869$1DOkPG) (begin '#f ((case-lambda ((g$q$11870$1DOkPG) (if g$q$11870$1DOkPG (begin '#f ((case-lambda ((g$r$11871$1DOkPG) (if g$r$11871$1DOkPG (begin '#f (append g$q$11870$1DOkPG g$r$11871$1DOkPG)) '#f))) ((case-lambda ((g$x$11872$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11872$1DOkPG) (begin '#f ((case-lambda ((g$q$11873$1DOkPG) (if g$q$11873$1DOkPG (begin '#f ((case-lambda ((g$r$11874$1DOkPG) (if g$r$11874$1DOkPG (begin '#f (append g$q$11873$1DOkPG g$r$11874$1DOkPG)) '#f))) ((case-lambda ((g$x$11875$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11875$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11872$1DOkPG)))) '#f))) ((case-lambda ((g$x$11876$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11876$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-car$9178$1DOkPG g$x$11872$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11869$1DOkPG)))) '#f))) ((case-lambda ((g$x$11877$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11877$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11877$1DOkPG (g$scheme-stx$9368$1DOkPG 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11869$1DOkPG)))) '#f))) g$t$11864$1DOkPG)))) g$y$11860$1DOkPG) ((case-lambda ((g$t$11878$1DOkPG) ((case-lambda ((g$ls/false$11879$1DOkPG) (if (if g$ls/false$11879$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11879$1DOkPG)) '#f) (apply (case-lambda (() (g$f$11862$1DOkPG (cdr g$x$11863$1DOkPG)))) g$ls/false$11879$1DOkPG) ((case-lambda ((g$t$11880$1DOkPG) ((case-lambda ((g$ls/false$11881$1DOkPG) (if (if g$ls/false$11881$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11881$1DOkPG)) '#f) (apply (case-lambda (() (cons (car g$x$11863$1DOkPG) (g$f$11862$1DOkPG (cdr g$x$11863$1DOkPG))))) g$ls/false$11881$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11880$1DOkPG)))) ((case-lambda ((g$x$11882$1DOkPG) '())) g$t$11880$1DOkPG)))) g$t$11878$1DOkPG)))) ((case-lambda ((g$x$11883$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11883$1DOkPG) (begin '#f ((case-lambda ((g$q$11884$1DOkPG) (if g$q$11884$1DOkPG (begin '#f ((case-lambda ((g$r$11885$1DOkPG) (if g$r$11885$1DOkPG (begin '#f (append g$q$11884$1DOkPG g$r$11885$1DOkPG)) '#f))) ((case-lambda ((g$x$11886$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11886$1DOkPG) (begin '#f ((case-lambda ((g$q$11887$1DOkPG) (if g$q$11887$1DOkPG (begin '#f ((case-lambda ((g$r$11888$1DOkPG) (if g$r$11888$1DOkPG (begin '#f (append g$q$11887$1DOkPG g$r$11888$1DOkPG)) '#f))) ((case-lambda ((g$x$11889$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11889$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11886$1DOkPG)))) '#f))) ((case-lambda ((g$x$11890$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11890$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-car$9178$1DOkPG g$x$11886$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11883$1DOkPG)))) '#f))) ((case-lambda ((g$x$11891$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11891$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11891$1DOkPG (g$scheme-stx$9368$1DOkPG 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11883$1DOkPG)))) '#f))) g$t$11878$1DOkPG)))) (car g$x$11863$1DOkPG))))))) g$f$11862$1DOkPG) g$x$11859$1DOkPG))))) (g$quasivector$11623$1DOkPG (case-lambda ((g$x$11779$1DOkPG) ((case-lambda ((g$pat-x$11780$1DOkPG) ((case-lambda ((g$t$11781$1DOkPG) ((case-lambda ((g$ls/false$11782$1DOkPG) (if (if g$ls/false$11782$1DOkPG (begin '#f (apply (case-lambda ((g$x*$11783$1DOkPG) '#t)) g$ls/false$11782$1DOkPG)) '#f) (apply (case-lambda ((g$x*$11784$1DOkPG) (list (g$scheme-stx$9368$1DOkPG 'quote) (list->vector g$x*$11784$1DOkPG)))) g$ls/false$11782$1DOkPG) ((case-lambda ((g$t$11785$1DOkPG) ((case-lambda ((g$ls/false$11786$1DOkPG) (if (if g$ls/false$11786$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11786$1DOkPG)) '#f) (apply (case-lambda (() ((letrec ((g$f$11787$1DOkPG (case-lambda ((g$x$11788$1DOkPG g$k$11789$1DOkPG) ((case-lambda ((g$t$11790$1DOkPG) ((case-lambda ((g$ls/false$11791$1DOkPG) (if (if g$ls/false$11791$1DOkPG (begin '#f (apply (case-lambda ((g$x*$11792$1DOkPG) '#t)) g$ls/false$11791$1DOkPG)) '#f) (apply (case-lambda ((g$x*$11793$1DOkPG) (g$k$11789$1DOkPG (map (case-lambda ((g$x$11794$1DOkPG) (list (g$scheme-stx$9368$1DOkPG 'quote) g$x$11794$1DOkPG))) g$x*$11793$1DOkPG)))) g$ls/false$11791$1DOkPG) ((case-lambda ((g$t$11795$1DOkPG) ((case-lambda ((g$ls/false$11796$1DOkPG) (if (if g$ls/false$11796$1DOkPG (begin '#f (apply (case-lambda ((g$x*$11797$1DOkPG) '#t)) g$ls/false$11796$1DOkPG)) '#f) (apply (case-lambda ((g$x*$11798$1DOkPG) (g$k$11789$1DOkPG g$x*$11798$1DOkPG))) g$ls/false$11796$1DOkPG) ((case-lambda ((g$t$11799$1DOkPG) ((case-lambda ((g$ls/false$11800$1DOkPG) (if (if g$ls/false$11800$1DOkPG (begin '#f (apply (case-lambda ((g$x$11801$1DOkPG g$y$11802$1DOkPG) '#t)) g$ls/false$11800$1DOkPG)) '#f) (apply (case-lambda ((g$x$11803$1DOkPG g$y$11804$1DOkPG) (g$f$11787$1DOkPG g$y$11804$1DOkPG (case-lambda ((g$ls$11805$1DOkPG) (g$k$11789$1DOkPG (cons g$x$11803$1DOkPG g$ls$11805$1DOkPG))))))) g$ls/false$11800$1DOkPG) ((case-lambda ((g$t$11806$1DOkPG) ((case-lambda ((g$ls/false$11807$1DOkPG) (if (if g$ls/false$11807$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11807$1DOkPG)) '#f) (apply (case-lambda (() (list (g$scheme-stx$9368$1DOkPG 'list->vector) g$pat-x$11780$1DOkPG))) g$ls/false$11807$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11806$1DOkPG)))) ((case-lambda ((g$x$11808$1DOkPG) '())) g$t$11806$1DOkPG)))) g$t$11799$1DOkPG)))) ((case-lambda ((g$x$11809$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11809$1DOkPG) (begin '#f ((case-lambda ((g$q$11810$1DOkPG) (if g$q$11810$1DOkPG (begin '#f ((case-lambda ((g$r$11811$1DOkPG) (if g$r$11811$1DOkPG (begin '#f (append g$q$11810$1DOkPG g$r$11811$1DOkPG)) '#f))) ((case-lambda ((g$x$11812$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11812$1DOkPG) (begin '#f ((case-lambda ((g$q$11813$1DOkPG) (if g$q$11813$1DOkPG (begin '#f ((case-lambda ((g$r$11814$1DOkPG) (if g$r$11814$1DOkPG (begin '#f (append g$q$11813$1DOkPG g$r$11814$1DOkPG)) '#f))) ((case-lambda ((g$x$11815$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11815$1DOkPG) (begin '#f ((case-lambda ((g$q$11816$1DOkPG) (if g$q$11816$1DOkPG (begin '#f ((case-lambda ((g$r$11817$1DOkPG) (if g$r$11817$1DOkPG (begin '#f (append g$q$11816$1DOkPG g$r$11817$1DOkPG)) '#f))) ((case-lambda ((g$x$11818$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11818$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11815$1DOkPG)))) '#f))) ((case-lambda ((g$x$11819$1DOkPG) (list g$x$11819$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11815$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11812$1DOkPG)))) '#f))) ((case-lambda ((g$x$11820$1DOkPG) (list g$x$11820$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11812$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11809$1DOkPG)))) '#f))) ((case-lambda ((g$x$11821$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11821$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11821$1DOkPG (g$scheme-stx$9368$1DOkPG 'cons)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11809$1DOkPG)))) '#f))) g$t$11799$1DOkPG)))) g$t$11795$1DOkPG)))) ((case-lambda ((g$x$11822$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11822$1DOkPG) (begin '#f ((case-lambda ((g$q$11823$1DOkPG) (if g$q$11823$1DOkPG (begin '#f ((case-lambda ((g$r$11824$1DOkPG) (if g$r$11824$1DOkPG (begin '#f (append g$q$11823$1DOkPG g$r$11824$1DOkPG)) '#f))) ((letrec ((g$f$11825$1DOkPG (case-lambda ((g$x$11826$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11826$1DOkPG) ((case-lambda ((g$cars/f$11827$1DOkPG) (if g$cars/f$11827$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11828$1DOkPG) (if g$cdrs/f$11828$1DOkPG (begin '#f (map cons g$cars/f$11827$1DOkPG g$cdrs/f$11828$1DOkPG)) '#f))) (g$f$11825$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11826$1DOkPG)))) '#f))) ((case-lambda ((g$x$11829$1DOkPG) (list g$x$11829$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11826$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11826$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$11825$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11822$1DOkPG)))) '#f))) ((case-lambda ((g$x$11830$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11830$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11830$1DOkPG (g$scheme-stx$9368$1DOkPG 'list)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11822$1DOkPG)))) '#f))) g$t$11795$1DOkPG)))) g$t$11790$1DOkPG)))) ((case-lambda ((g$x$11831$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11831$1DOkPG) (begin '#f ((case-lambda ((g$q$11832$1DOkPG) (if g$q$11832$1DOkPG (begin '#f ((case-lambda ((g$r$11833$1DOkPG) (if g$r$11833$1DOkPG (begin '#f (append g$q$11832$1DOkPG g$r$11833$1DOkPG)) '#f))) ((case-lambda ((g$x$11834$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11834$1DOkPG) (begin '#f ((case-lambda ((g$q$11835$1DOkPG) (if g$q$11835$1DOkPG (begin '#f ((case-lambda ((g$r$11836$1DOkPG) (if g$r$11836$1DOkPG (begin '#f (append g$q$11835$1DOkPG g$r$11836$1DOkPG)) '#f))) ((case-lambda ((g$x$11837$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11837$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11834$1DOkPG)))) '#f))) ((letrec ((g$f$11838$1DOkPG (case-lambda ((g$x$11839$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11839$1DOkPG) ((case-lambda ((g$cars/f$11840$1DOkPG) (if g$cars/f$11840$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11841$1DOkPG) (if g$cdrs/f$11841$1DOkPG (begin '#f (map cons g$cars/f$11840$1DOkPG g$cdrs/f$11841$1DOkPG)) '#f))) (g$f$11838$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11839$1DOkPG)))) '#f))) ((case-lambda ((g$x$11842$1DOkPG) (list g$x$11842$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11839$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11839$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$11838$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$11834$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11831$1DOkPG)))) '#f))) ((case-lambda ((g$x$11843$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11843$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11843$1DOkPG (g$scheme-stx$9368$1DOkPG 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11831$1DOkPG)))) '#f))) g$t$11790$1DOkPG)))) g$x$11788$1DOkPG))))) g$f$11787$1DOkPG) g$x$11779$1DOkPG (case-lambda ((g$ls$11844$1DOkPG) (g$cons*$7868$1DOkPG (g$scheme-stx$9368$1DOkPG 'vector) g$ls$11844$1DOkPG)))))) g$ls/false$11786$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11785$1DOkPG)))) ((case-lambda ((g$x$11845$1DOkPG) '())) g$t$11785$1DOkPG)))) g$t$11781$1DOkPG)))) ((case-lambda ((g$x$11846$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11846$1DOkPG) (begin '#f ((case-lambda ((g$q$11847$1DOkPG) (if g$q$11847$1DOkPG (begin '#f ((case-lambda ((g$r$11848$1DOkPG) (if g$r$11848$1DOkPG (begin '#f (append g$q$11847$1DOkPG g$r$11848$1DOkPG)) '#f))) ((case-lambda ((g$x$11849$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11849$1DOkPG) (begin '#f ((case-lambda ((g$q$11850$1DOkPG) (if g$q$11850$1DOkPG (begin '#f ((case-lambda ((g$r$11851$1DOkPG) (if g$r$11851$1DOkPG (begin '#f (append g$q$11850$1DOkPG g$r$11851$1DOkPG)) '#f))) ((case-lambda ((g$x$11852$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11852$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11849$1DOkPG)))) '#f))) ((letrec ((g$f$11853$1DOkPG (case-lambda ((g$x$11854$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11854$1DOkPG) ((case-lambda ((g$cars/f$11855$1DOkPG) (if g$cars/f$11855$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11856$1DOkPG) (if g$cdrs/f$11856$1DOkPG (begin '#f (map cons g$cars/f$11855$1DOkPG g$cdrs/f$11856$1DOkPG)) '#f))) (g$f$11853$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11854$1DOkPG)))) '#f))) ((case-lambda ((g$x$11857$1DOkPG) (list g$x$11857$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11854$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11854$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$11853$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$11849$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11846$1DOkPG)))) '#f))) ((case-lambda ((g$x$11858$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11858$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11858$1DOkPG (g$scheme-stx$9368$1DOkPG 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11846$1DOkPG)))) '#f))) g$t$11781$1DOkPG)))) g$pat-x$11780$1DOkPG))) g$x$11779$1DOkPG)))) (g$vquasi$11624$1DOkPG (case-lambda ((g$p$11732$1DOkPG g$lev$11733$1DOkPG) ((case-lambda ((g$t$11734$1DOkPG) ((case-lambda ((g$ls/false$11735$1DOkPG) (if (if g$ls/false$11735$1DOkPG (begin '#f (apply (case-lambda ((g$p$11736$1DOkPG g$q$11737$1DOkPG) '#t)) g$ls/false$11735$1DOkPG)) '#f) (apply (case-lambda ((g$p$11738$1DOkPG g$q$11739$1DOkPG) ((case-lambda ((g$t$11740$1DOkPG) ((case-lambda ((g$ls/false$11741$1DOkPG) (if (if g$ls/false$11741$1DOkPG (begin '#f (apply (case-lambda ((g$p$11742$1DOkPG) '#t)) g$ls/false$11741$1DOkPG)) '#f) (apply (case-lambda ((g$p$11743$1DOkPG) (if (= g$lev$11733$1DOkPG '0) (g$quasicons*$11620$1DOkPG g$p$11743$1DOkPG (g$vquasi$11624$1DOkPG g$q$11739$1DOkPG g$lev$11733$1DOkPG)) (g$quasicons$11621$1DOkPG (g$quasicons$11621$1DOkPG (g$datum$11604$1DOkPG 'unquote) (g$quasi$11625$1DOkPG g$p$11743$1DOkPG (- g$lev$11733$1DOkPG '1))) (g$vquasi$11624$1DOkPG g$q$11739$1DOkPG g$lev$11733$1DOkPG))))) g$ls/false$11741$1DOkPG) ((case-lambda ((g$t$11744$1DOkPG) ((case-lambda ((g$ls/false$11745$1DOkPG) (if (if g$ls/false$11745$1DOkPG (begin '#f (apply (case-lambda ((g$p$11746$1DOkPG) '#t)) g$ls/false$11745$1DOkPG)) '#f) (apply (case-lambda ((g$p$11747$1DOkPG) (if (= g$lev$11733$1DOkPG '0) (g$quasiappend$11622$1DOkPG g$p$11747$1DOkPG (g$vquasi$11624$1DOkPG g$q$11739$1DOkPG g$lev$11733$1DOkPG)) (g$quasicons$11621$1DOkPG (g$quasicons$11621$1DOkPG (g$datum$11604$1DOkPG 'unquote-splicing) (g$quasi$11625$1DOkPG g$p$11747$1DOkPG (- g$lev$11733$1DOkPG '1))) (g$vquasi$11624$1DOkPG g$q$11739$1DOkPG g$lev$11733$1DOkPG))))) g$ls/false$11745$1DOkPG) ((case-lambda ((g$t$11748$1DOkPG) ((case-lambda ((g$ls/false$11749$1DOkPG) (if (if g$ls/false$11749$1DOkPG (begin '#f (apply (case-lambda ((g$p$11750$1DOkPG) '#t)) g$ls/false$11749$1DOkPG)) '#f) (apply (case-lambda ((g$p$11751$1DOkPG) (g$quasicons$11621$1DOkPG (g$quasi$11625$1DOkPG g$p$11751$1DOkPG g$lev$11733$1DOkPG) (g$vquasi$11624$1DOkPG g$q$11739$1DOkPG g$lev$11733$1DOkPG)))) g$ls/false$11749$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11748$1DOkPG)))) ((case-lambda ((g$x$11752$1DOkPG) (list g$x$11752$1DOkPG))) g$t$11748$1DOkPG)))) g$t$11744$1DOkPG)))) ((case-lambda ((g$x$11753$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11753$1DOkPG) (begin '#f ((case-lambda ((g$q$11754$1DOkPG) (if g$q$11754$1DOkPG (begin '#f ((case-lambda ((g$r$11755$1DOkPG) (if g$r$11755$1DOkPG (begin '#f (append g$q$11754$1DOkPG g$r$11755$1DOkPG)) '#f))) ((letrec ((g$f$11756$1DOkPG (case-lambda ((g$x$11757$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11757$1DOkPG) ((case-lambda ((g$cars/f$11758$1DOkPG) (if g$cars/f$11758$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11759$1DOkPG) (if g$cdrs/f$11759$1DOkPG (begin '#f (map cons g$cars/f$11758$1DOkPG g$cdrs/f$11759$1DOkPG)) '#f))) (g$f$11756$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11757$1DOkPG)))) '#f))) ((case-lambda ((g$x$11760$1DOkPG) (list g$x$11760$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11757$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11757$1DOkPG) (list (begin 'p '())) '#f)))))) g$f$11756$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11753$1DOkPG)))) '#f))) ((case-lambda ((g$x$11761$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11761$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11761$1DOkPG (g$scheme-stx$9368$1DOkPG 'unquote-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11753$1DOkPG)))) '#f))) g$t$11744$1DOkPG)))) g$t$11740$1DOkPG)))) ((case-lambda ((g$x$11762$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11762$1DOkPG) (begin '#f ((case-lambda ((g$q$11763$1DOkPG) (if g$q$11763$1DOkPG (begin '#f ((case-lambda ((g$r$11764$1DOkPG) (if g$r$11764$1DOkPG (begin '#f (append g$q$11763$1DOkPG g$r$11764$1DOkPG)) '#f))) ((letrec ((g$f$11765$1DOkPG (case-lambda ((g$x$11766$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11766$1DOkPG) ((case-lambda ((g$cars/f$11767$1DOkPG) (if g$cars/f$11767$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11768$1DOkPG) (if g$cdrs/f$11768$1DOkPG (begin '#f (map cons g$cars/f$11767$1DOkPG g$cdrs/f$11768$1DOkPG)) '#f))) (g$f$11765$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11766$1DOkPG)))) '#f))) ((case-lambda ((g$x$11769$1DOkPG) (list g$x$11769$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11766$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11766$1DOkPG) (list (begin 'p '())) '#f)))))) g$f$11765$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11762$1DOkPG)))) '#f))) ((case-lambda ((g$x$11770$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11770$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11770$1DOkPG (g$scheme-stx$9368$1DOkPG 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11762$1DOkPG)))) '#f))) g$t$11740$1DOkPG)))) g$p$11738$1DOkPG))) g$ls/false$11735$1DOkPG) ((case-lambda ((g$t$11771$1DOkPG) ((case-lambda ((g$ls/false$11772$1DOkPG) (if (if g$ls/false$11772$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11772$1DOkPG)) '#f) (apply (case-lambda (() (list (g$scheme-stx$9368$1DOkPG 'quote) '()))) g$ls/false$11772$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11771$1DOkPG)))) ((case-lambda ((g$x$11773$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11773$1DOkPG) '()) (begin '#f '()) '#f))) g$t$11771$1DOkPG)))) g$t$11734$1DOkPG)))) ((case-lambda ((g$x$11774$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11774$1DOkPG) (begin '#f ((case-lambda ((g$q$11775$1DOkPG) (if g$q$11775$1DOkPG (begin '#f ((case-lambda ((g$r$11776$1DOkPG) (if g$r$11776$1DOkPG (begin '#f (append g$q$11775$1DOkPG g$r$11776$1DOkPG)) '#f))) ((case-lambda ((g$x$11777$1DOkPG) (list g$x$11777$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$11774$1DOkPG)))) '#f))) ((case-lambda ((g$x$11778$1DOkPG) (list g$x$11778$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11774$1DOkPG)))) '#f))) g$t$11734$1DOkPG)))) g$p$11732$1DOkPG)))) (g$quasi$11625$1DOkPG (case-lambda ((g$p$11640$1DOkPG g$lev$11641$1DOkPG) ((case-lambda ((g$t$11642$1DOkPG) ((case-lambda ((g$ls/false$11643$1DOkPG) (if (if g$ls/false$11643$1DOkPG (begin '#f (apply (case-lambda ((g$p$11644$1DOkPG) '#t)) g$ls/false$11643$1DOkPG)) '#f) (apply (case-lambda ((g$p$11645$1DOkPG) (if (= g$lev$11641$1DOkPG '0) g$p$11645$1DOkPG (g$quasicons$11621$1DOkPG (g$datum$11604$1DOkPG 'unquote) (g$quasi$11625$1DOkPG (list g$p$11645$1DOkPG) (- g$lev$11641$1DOkPG '1)))))) g$ls/false$11643$1DOkPG) ((case-lambda ((g$t$11646$1DOkPG) ((case-lambda ((g$ls/false$11647$1DOkPG) (if (if g$ls/false$11647$1DOkPG (begin '#f (apply (case-lambda ((g$p$11648$1DOkPG g$q$11649$1DOkPG) '#t)) g$ls/false$11647$1DOkPG)) '#f) (apply (case-lambda ((g$p$11650$1DOkPG g$q$11651$1DOkPG) (if (= g$lev$11641$1DOkPG '0) (g$quasicons*$11620$1DOkPG g$p$11650$1DOkPG (g$quasi$11625$1DOkPG g$q$11651$1DOkPG g$lev$11641$1DOkPG)) (g$quasicons$11621$1DOkPG (g$quasicons$11621$1DOkPG (g$datum$11604$1DOkPG 'unquote) (g$quasi$11625$1DOkPG g$p$11650$1DOkPG (- g$lev$11641$1DOkPG '1))) (g$quasi$11625$1DOkPG g$q$11651$1DOkPG g$lev$11641$1DOkPG))))) g$ls/false$11647$1DOkPG) ((case-lambda ((g$t$11652$1DOkPG) ((case-lambda ((g$ls/false$11653$1DOkPG) (if (if g$ls/false$11653$1DOkPG (begin '#f (apply (case-lambda ((g$p$11654$1DOkPG g$q$11655$1DOkPG) '#t)) g$ls/false$11653$1DOkPG)) '#f) (apply (case-lambda ((g$p$11656$1DOkPG g$q$11657$1DOkPG) (if (= g$lev$11641$1DOkPG '0) (g$quasiappend$11622$1DOkPG g$p$11656$1DOkPG (g$quasi$11625$1DOkPG g$q$11657$1DOkPG g$lev$11641$1DOkPG)) (g$quasicons$11621$1DOkPG (g$quasicons$11621$1DOkPG (g$datum$11604$1DOkPG 'unquote-splicing) (g$quasi$11625$1DOkPG g$p$11656$1DOkPG (- g$lev$11641$1DOkPG '1))) (g$quasi$11625$1DOkPG g$q$11657$1DOkPG g$lev$11641$1DOkPG))))) g$ls/false$11653$1DOkPG) ((case-lambda ((g$t$11658$1DOkPG) ((case-lambda ((g$ls/false$11659$1DOkPG) (if (if g$ls/false$11659$1DOkPG (begin '#f (apply (case-lambda ((g$p$11660$1DOkPG) '#t)) g$ls/false$11659$1DOkPG)) '#f) (apply (case-lambda ((g$p$11661$1DOkPG) (g$quasicons$11621$1DOkPG (g$datum$11604$1DOkPG 'quasiquote) (g$quasi$11625$1DOkPG (list g$p$11661$1DOkPG) (+ g$lev$11641$1DOkPG '1))))) g$ls/false$11659$1DOkPG) ((case-lambda ((g$t$11662$1DOkPG) ((case-lambda ((g$ls/false$11663$1DOkPG) (if (if g$ls/false$11663$1DOkPG (begin '#f (apply (case-lambda ((g$p$11664$1DOkPG g$q$11665$1DOkPG) '#t)) g$ls/false$11663$1DOkPG)) '#f) (apply (case-lambda ((g$p$11666$1DOkPG g$q$11667$1DOkPG) (g$quasicons$11621$1DOkPG (g$quasi$11625$1DOkPG g$p$11666$1DOkPG g$lev$11641$1DOkPG) (g$quasi$11625$1DOkPG g$q$11667$1DOkPG g$lev$11641$1DOkPG)))) g$ls/false$11663$1DOkPG) ((case-lambda ((g$t$11668$1DOkPG) ((case-lambda ((g$ls/false$11669$1DOkPG) (if (if g$ls/false$11669$1DOkPG (begin '#f (apply (case-lambda ((g$x$11670$1DOkPG) (not (g$stx?$9153$1DOkPG g$x$11670$1DOkPG)))) g$ls/false$11669$1DOkPG)) '#f) (apply (case-lambda ((g$x$11671$1DOkPG) (g$quasivector$11623$1DOkPG (g$vquasi$11624$1DOkPG g$x$11671$1DOkPG g$lev$11641$1DOkPG)))) g$ls/false$11669$1DOkPG) ((case-lambda ((g$t$11672$1DOkPG) ((case-lambda ((g$ls/false$11673$1DOkPG) (if (if g$ls/false$11673$1DOkPG (begin '#f (apply (case-lambda ((g$p$11674$1DOkPG) '#t)) g$ls/false$11673$1DOkPG)) '#f) (apply (case-lambda ((g$p$11675$1DOkPG) (list (g$scheme-stx$9368$1DOkPG 'quote) g$p$11675$1DOkPG))) g$ls/false$11673$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11672$1DOkPG)))) ((case-lambda ((g$x$11676$1DOkPG) (list g$x$11676$1DOkPG))) g$t$11672$1DOkPG)))) g$t$11668$1DOkPG)))) ((case-lambda ((g$x$11677$1DOkPG) (if (g$syntax-vector?$9175$1DOkPG g$x$11677$1DOkPG) (begin '#f ((letrec ((g$f$11678$1DOkPG (case-lambda ((g$x$11679$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11679$1DOkPG) ((case-lambda ((g$cars/f$11680$1DOkPG) (if g$cars/f$11680$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11681$1DOkPG) (if g$cdrs/f$11681$1DOkPG (begin '#f (map cons g$cars/f$11680$1DOkPG g$cdrs/f$11681$1DOkPG)) '#f))) (g$f$11678$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11679$1DOkPG)))) '#f))) ((case-lambda ((g$x$11682$1DOkPG) (list g$x$11682$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11679$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11679$1DOkPG) (list (begin 'x '())) '#f)))))) g$f$11678$1DOkPG) (g$syntax-vector->list$9173$1DOkPG g$x$11677$1DOkPG))) '#f))) g$t$11668$1DOkPG)))) g$t$11662$1DOkPG)))) ((case-lambda ((g$x$11683$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11683$1DOkPG) (begin '#f ((case-lambda ((g$q$11684$1DOkPG) (if g$q$11684$1DOkPG (begin '#f ((case-lambda ((g$r$11685$1DOkPG) (if g$r$11685$1DOkPG (begin '#f (append g$q$11684$1DOkPG g$r$11685$1DOkPG)) '#f))) ((case-lambda ((g$x$11686$1DOkPG) (list g$x$11686$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$11683$1DOkPG)))) '#f))) ((case-lambda ((g$x$11687$1DOkPG) (list g$x$11687$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11683$1DOkPG)))) '#f))) g$t$11662$1DOkPG)))) g$t$11658$1DOkPG)))) ((case-lambda ((g$x$11688$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11688$1DOkPG) (begin '#f ((case-lambda ((g$q$11689$1DOkPG) (if g$q$11689$1DOkPG (begin '#f ((case-lambda ((g$r$11690$1DOkPG) (if g$r$11690$1DOkPG (begin '#f (append g$q$11689$1DOkPG g$r$11690$1DOkPG)) '#f))) ((case-lambda ((g$x$11691$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11691$1DOkPG) (begin '#f ((case-lambda ((g$q$11692$1DOkPG) (if g$q$11692$1DOkPG (begin '#f ((case-lambda ((g$r$11693$1DOkPG) (if g$r$11693$1DOkPG (begin '#f (append g$q$11692$1DOkPG g$r$11693$1DOkPG)) '#f))) ((case-lambda ((g$x$11694$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11694$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11691$1DOkPG)))) '#f))) ((case-lambda ((g$x$11695$1DOkPG) (list g$x$11695$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11691$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11688$1DOkPG)))) '#f))) ((case-lambda ((g$x$11696$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11696$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11696$1DOkPG (g$scheme-stx$9368$1DOkPG 'quasiquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11688$1DOkPG)))) '#f))) g$t$11658$1DOkPG)))) g$t$11652$1DOkPG)))) ((case-lambda ((g$x$11697$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11697$1DOkPG) (begin '#f ((case-lambda ((g$q$11698$1DOkPG) (if g$q$11698$1DOkPG (begin '#f ((case-lambda ((g$r$11699$1DOkPG) (if g$r$11699$1DOkPG (begin '#f (append g$q$11698$1DOkPG g$r$11699$1DOkPG)) '#f))) ((case-lambda ((g$x$11700$1DOkPG) (list g$x$11700$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$11697$1DOkPG)))) '#f))) ((case-lambda ((g$x$11701$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11701$1DOkPG) (begin '#f ((case-lambda ((g$q$11702$1DOkPG) (if g$q$11702$1DOkPG (begin '#f ((case-lambda ((g$r$11703$1DOkPG) (if g$r$11703$1DOkPG (begin '#f (append g$q$11702$1DOkPG g$r$11703$1DOkPG)) '#f))) ((letrec ((g$f$11704$1DOkPG (case-lambda ((g$x$11705$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11705$1DOkPG) ((case-lambda ((g$cars/f$11706$1DOkPG) (if g$cars/f$11706$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11707$1DOkPG) (if g$cdrs/f$11707$1DOkPG (begin '#f (map cons g$cars/f$11706$1DOkPG g$cdrs/f$11707$1DOkPG)) '#f))) (g$f$11704$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11705$1DOkPG)))) '#f))) ((case-lambda ((g$x$11708$1DOkPG) (list g$x$11708$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11705$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11705$1DOkPG) (list (begin 'p '())) '#f)))))) g$f$11704$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11701$1DOkPG)))) '#f))) ((case-lambda ((g$x$11709$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11709$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11709$1DOkPG (g$scheme-stx$9368$1DOkPG 'unquote-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11701$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11697$1DOkPG)))) '#f))) g$t$11652$1DOkPG)))) g$t$11646$1DOkPG)))) ((case-lambda ((g$x$11710$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11710$1DOkPG) (begin '#f ((case-lambda ((g$q$11711$1DOkPG) (if g$q$11711$1DOkPG (begin '#f ((case-lambda ((g$r$11712$1DOkPG) (if g$r$11712$1DOkPG (begin '#f (append g$q$11711$1DOkPG g$r$11712$1DOkPG)) '#f))) ((case-lambda ((g$x$11713$1DOkPG) (list g$x$11713$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$11710$1DOkPG)))) '#f))) ((case-lambda ((g$x$11714$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11714$1DOkPG) (begin '#f ((case-lambda ((g$q$11715$1DOkPG) (if g$q$11715$1DOkPG (begin '#f ((case-lambda ((g$r$11716$1DOkPG) (if g$r$11716$1DOkPG (begin '#f (append g$q$11715$1DOkPG g$r$11716$1DOkPG)) '#f))) ((letrec ((g$f$11717$1DOkPG (case-lambda ((g$x$11718$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11718$1DOkPG) ((case-lambda ((g$cars/f$11719$1DOkPG) (if g$cars/f$11719$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$11720$1DOkPG) (if g$cdrs/f$11720$1DOkPG (begin '#f (map cons g$cars/f$11719$1DOkPG g$cdrs/f$11720$1DOkPG)) '#f))) (g$f$11717$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$11718$1DOkPG)))) '#f))) ((case-lambda ((g$x$11721$1DOkPG) (list g$x$11721$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11718$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$11718$1DOkPG) (list (begin 'p '())) '#f)))))) g$f$11717$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$11714$1DOkPG)))) '#f))) ((case-lambda ((g$x$11722$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11722$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11722$1DOkPG (g$scheme-stx$9368$1DOkPG 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11714$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$11710$1DOkPG)))) '#f))) g$t$11646$1DOkPG)))) g$t$11642$1DOkPG)))) ((case-lambda ((g$x$11723$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11723$1DOkPG) (begin '#f ((case-lambda ((g$q$11724$1DOkPG) (if g$q$11724$1DOkPG (begin '#f ((case-lambda ((g$r$11725$1DOkPG) (if g$r$11725$1DOkPG (begin '#f (append g$q$11724$1DOkPG g$r$11725$1DOkPG)) '#f))) ((case-lambda ((g$x$11726$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11726$1DOkPG) (begin '#f ((case-lambda ((g$q$11727$1DOkPG) (if g$q$11727$1DOkPG (begin '#f ((case-lambda ((g$r$11728$1DOkPG) (if g$r$11728$1DOkPG (begin '#f (append g$q$11727$1DOkPG g$r$11728$1DOkPG)) '#f))) ((case-lambda ((g$x$11729$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11729$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11726$1DOkPG)))) '#f))) ((case-lambda ((g$x$11730$1DOkPG) (list g$x$11730$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11726$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11723$1DOkPG)))) '#f))) ((case-lambda ((g$x$11731$1DOkPG) (if (g$id?$9181$1DOkPG g$x$11731$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$11731$1DOkPG (g$scheme-stx$9368$1DOkPG 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$11723$1DOkPG)))) '#f))) g$t$11642$1DOkPG)))) g$p$11640$1DOkPG))))) (case-lambda ((g$x$11626$1DOkPG) ((case-lambda ((g$t$11627$1DOkPG) ((case-lambda ((g$ls/false$11628$1DOkPG) (if (if g$ls/false$11628$1DOkPG (begin '#f (apply (case-lambda ((g$e$11629$1DOkPG) '#t)) g$ls/false$11628$1DOkPG)) '#f) (apply (case-lambda ((g$e$11630$1DOkPG) (g$quasi$11625$1DOkPG g$e$11630$1DOkPG '0))) g$ls/false$11628$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11627$1DOkPG)))) ((case-lambda ((g$x$11631$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11631$1DOkPG) (begin '#f ((case-lambda ((g$q$11632$1DOkPG) (if g$q$11632$1DOkPG (begin '#f ((case-lambda ((g$r$11633$1DOkPG) (if g$r$11633$1DOkPG (begin '#f (append g$q$11632$1DOkPG g$r$11633$1DOkPG)) '#f))) ((case-lambda ((g$x$11634$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11634$1DOkPG) (begin '#f ((case-lambda ((g$q$11635$1DOkPG) (if g$q$11635$1DOkPG (begin '#f ((case-lambda ((g$r$11636$1DOkPG) (if g$r$11636$1DOkPG (begin '#f (append g$q$11635$1DOkPG g$r$11636$1DOkPG)) '#f))) ((case-lambda ((g$x$11637$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11637$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11634$1DOkPG)))) '#f))) ((case-lambda ((g$x$11638$1DOkPG) (list g$x$11638$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11634$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11631$1DOkPG)))) '#f))) ((case-lambda ((g$x$11639$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11631$1DOkPG)))) '#f))) g$t$11627$1DOkPG)))) g$x$11626$1DOkPG)))))))) (g$quasisyntax-macro$9414$1DOkPG g$quasisyntax-macro$15468$1DOkPG ((case-lambda (() (letrec* ((g$quasi$11950$1DOkPG (case-lambda ((g$p$11974$1DOkPG g$lev$11975$1DOkPG) ((case-lambda ((g$t$11976$1DOkPG) ((case-lambda ((g$ls/false$11977$1DOkPG) (if (if g$ls/false$11977$1DOkPG (begin '#f (apply (case-lambda ((g$p$11978$1DOkPG) '#t)) g$ls/false$11977$1DOkPG)) '#f) (apply (case-lambda ((g$p$11979$1DOkPG) (if (= g$lev$11975$1DOkPG '0) ((case-lambda ((g$g$11980$1DOkPG) (values (list g$g$11980$1DOkPG) (list g$p$11979$1DOkPG) g$g$11980$1DOkPG))) (gensym)) (call-with-values (case-lambda (() (g$quasi$11950$1DOkPG g$p$11979$1DOkPG (- g$lev$11975$1DOkPG '1)))) (case-lambda ((g$lhs*$11984$1DOkPG g$rhs*$11985$1DOkPG g$p$11986$1DOkPG) ((case-lambda ((g$p$11987$1DOkPG g$rhs*$11988$1DOkPG g$lhs*$11989$1DOkPG) (values g$lhs*$11989$1DOkPG g$rhs*$11988$1DOkPG (list 'unsyntax g$p$11987$1DOkPG)))) g$p$11986$1DOkPG g$rhs*$11985$1DOkPG g$lhs*$11984$1DOkPG))))))) g$ls/false$11977$1DOkPG) ((case-lambda ((g$t$11990$1DOkPG) ((case-lambda ((g$ls/false$11991$1DOkPG) (if (if g$ls/false$11991$1DOkPG (begin '#f (apply (case-lambda (() (= g$lev$11975$1DOkPG '0))) g$ls/false$11991$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"incorrect use of unsyntax" g$p$11974$1DOkPG))) g$ls/false$11991$1DOkPG) ((case-lambda ((g$t$11992$1DOkPG) ((case-lambda ((g$ls/false$11993$1DOkPG) (if (if g$ls/false$11993$1DOkPG (begin '#f (apply (case-lambda ((g$p$11994$1DOkPG g$q$11995$1DOkPG) '#t)) g$ls/false$11993$1DOkPG)) '#f) (apply (case-lambda ((g$p$11996$1DOkPG g$q$11997$1DOkPG) (call-with-values (case-lambda (() (g$quasi$11950$1DOkPG g$q$11997$1DOkPG g$lev$11975$1DOkPG))) (case-lambda ((g$lhs*$12001$1DOkPG g$rhs*$12002$1DOkPG g$q$12003$1DOkPG) ((case-lambda ((g$q$12004$1DOkPG g$rhs*$12005$1DOkPG g$lhs*$12006$1DOkPG) (if (= g$lev$11975$1DOkPG '0) ((case-lambda ((g$g$12007$1DOkPG) (values (cons (cons g$g$12007$1DOkPG '(...)) g$lhs*$12006$1DOkPG) (cons g$p$11996$1DOkPG g$rhs*$12005$1DOkPG) (cons g$g$12007$1DOkPG (cons '... g$q$12004$1DOkPG))))) (gensym)) (call-with-values (case-lambda (() (g$quasi$11950$1DOkPG g$p$11996$1DOkPG (- g$lev$11975$1DOkPG '1)))) (case-lambda ((g$lhs2*$12011$1DOkPG g$rhs2*$12012$1DOkPG g$p$12013$1DOkPG) ((case-lambda ((g$p$12014$1DOkPG g$rhs2*$12015$1DOkPG g$lhs2*$12016$1DOkPG) (values (append g$lhs2*$12016$1DOkPG g$lhs*$12006$1DOkPG) (append g$rhs2*$12015$1DOkPG g$rhs*$12005$1DOkPG) (cons (list 'unsyntax-splicing g$p$12014$1DOkPG) g$q$12004$1DOkPG)))) g$p$12013$1DOkPG g$rhs2*$12012$1DOkPG g$lhs2*$12011$1DOkPG))))))) g$q$12003$1DOkPG g$rhs*$12002$1DOkPG g$lhs*$12001$1DOkPG)))))) g$ls/false$11993$1DOkPG) ((case-lambda ((g$t$12017$1DOkPG) ((case-lambda ((g$ls/false$12018$1DOkPG) (if (if g$ls/false$12018$1DOkPG (begin '#f (apply (case-lambda (() (= g$lev$11975$1DOkPG '0))) g$ls/false$12018$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"incorrect use of unsyntax-splicing" g$p$11974$1DOkPG))) g$ls/false$12018$1DOkPG) ((case-lambda ((g$t$12019$1DOkPG) ((case-lambda ((g$ls/false$12020$1DOkPG) (if (if g$ls/false$12020$1DOkPG (begin '#f (apply (case-lambda ((g$p$12021$1DOkPG) '#t)) g$ls/false$12020$1DOkPG)) '#f) (apply (case-lambda ((g$p$12022$1DOkPG) (call-with-values (case-lambda (() (g$quasi$11950$1DOkPG g$p$12022$1DOkPG (+ g$lev$11975$1DOkPG '1)))) (case-lambda ((g$lhs*$12026$1DOkPG g$rhs*$12027$1DOkPG g$p$12028$1DOkPG) ((case-lambda ((g$p$12029$1DOkPG g$rhs*$12030$1DOkPG g$lhs*$12031$1DOkPG) (values g$lhs*$12031$1DOkPG g$rhs*$12030$1DOkPG (list 'quasisyntax g$p$12029$1DOkPG)))) g$p$12028$1DOkPG g$rhs*$12027$1DOkPG g$lhs*$12026$1DOkPG)))))) g$ls/false$12020$1DOkPG) ((case-lambda ((g$t$12032$1DOkPG) ((case-lambda ((g$ls/false$12033$1DOkPG) (if (if g$ls/false$12033$1DOkPG (begin '#f (apply (case-lambda ((g$p$12034$1DOkPG g$q$12035$1DOkPG) '#t)) g$ls/false$12033$1DOkPG)) '#f) (apply (case-lambda ((g$p$12036$1DOkPG g$q$12037$1DOkPG) (call-with-values (case-lambda (() (g$quasi$11950$1DOkPG g$p$12036$1DOkPG g$lev$11975$1DOkPG))) (case-lambda ((g$lhs*$12044$1DOkPG g$rhs*$12045$1DOkPG g$p$12046$1DOkPG) (call-with-values (case-lambda (() (g$quasi$11950$1DOkPG g$q$12037$1DOkPG g$lev$11975$1DOkPG))) (case-lambda ((g$lhs2*$12047$1DOkPG g$rhs2*$12048$1DOkPG g$q$12049$1DOkPG) ((case-lambda ((g$q$12050$1DOkPG g$rhs2*$12051$1DOkPG g$lhs2*$12052$1DOkPG g$p$12053$1DOkPG g$rhs*$12054$1DOkPG g$lhs*$12055$1DOkPG) (values (append g$lhs2*$12052$1DOkPG g$lhs*$12055$1DOkPG) (append g$rhs2*$12051$1DOkPG g$rhs*$12054$1DOkPG) (cons g$p$12053$1DOkPG g$q$12050$1DOkPG)))) g$q$12049$1DOkPG g$rhs2*$12048$1DOkPG g$lhs2*$12047$1DOkPG g$p$12046$1DOkPG g$rhs*$12045$1DOkPG g$lhs*$12044$1DOkPG))))))))) g$ls/false$12033$1DOkPG) ((case-lambda ((g$t$12056$1DOkPG) ((case-lambda ((g$ls/false$12057$1DOkPG) (if (if g$ls/false$12057$1DOkPG (begin '#f (apply (case-lambda ((g$x$12058$1DOkPG) (not (g$stx?$9153$1DOkPG g$p$11974$1DOkPG)))) g$ls/false$12057$1DOkPG)) '#f) (apply (case-lambda ((g$x$12059$1DOkPG) (call-with-values (case-lambda (() ((letrec ((g$f$12063$1DOkPG (case-lambda ((g$x$12064$1DOkPG) (if (null? g$x$12064$1DOkPG) (values '() '() '()) (call-with-values (case-lambda (() (g$quasi$11950$1DOkPG (car g$x$12064$1DOkPG) g$lev$11975$1DOkPG))) (case-lambda ((g$lhs*$12068$1DOkPG g$rhs*$12069$1DOkPG g$a$12070$1DOkPG) ((case-lambda ((g$a$12071$1DOkPG g$rhs*$12072$1DOkPG g$lhs*$12073$1DOkPG) (call-with-values (case-lambda (() (g$f$12063$1DOkPG (cdr g$x$12064$1DOkPG)))) (case-lambda ((g$lhs2*$12077$1DOkPG g$rhs2*$12078$1DOkPG g$d$12079$1DOkPG) ((case-lambda ((g$d$12080$1DOkPG g$rhs2*$12081$1DOkPG g$lhs2*$12082$1DOkPG) (values (append g$lhs*$12073$1DOkPG g$lhs2*$12082$1DOkPG) (append g$rhs*$12072$1DOkPG g$rhs2*$12081$1DOkPG) (cons g$a$12071$1DOkPG g$d$12080$1DOkPG)))) g$d$12079$1DOkPG g$rhs2*$12078$1DOkPG g$lhs2*$12077$1DOkPG)))))) g$a$12070$1DOkPG g$rhs*$12069$1DOkPG g$lhs*$12068$1DOkPG))))))))) g$f$12063$1DOkPG) g$x$12059$1DOkPG))) (case-lambda ((g$lhs*$12083$1DOkPG g$rhs*$12084$1DOkPG g$x*$12085$1DOkPG) ((case-lambda ((g$x*$12086$1DOkPG g$rhs*$12087$1DOkPG g$lhs*$12088$1DOkPG) (values g$lhs*$12088$1DOkPG g$rhs*$12087$1DOkPG (list->vector g$x*$12086$1DOkPG)))) g$x*$12085$1DOkPG g$rhs*$12084$1DOkPG g$lhs*$12083$1DOkPG)))))) g$ls/false$12057$1DOkPG) ((case-lambda ((g$t$12089$1DOkPG) ((case-lambda ((g$ls/false$12090$1DOkPG) (if (if g$ls/false$12090$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12090$1DOkPG)) '#f) (apply (case-lambda (() (values '() '() g$p$11974$1DOkPG))) g$ls/false$12090$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12089$1DOkPG)))) ((case-lambda ((g$x$12091$1DOkPG) '())) g$t$12089$1DOkPG)))) g$t$12056$1DOkPG)))) ((case-lambda ((g$x$12092$1DOkPG) (if (g$syntax-vector?$9175$1DOkPG g$x$12092$1DOkPG) (begin '#f ((letrec ((g$f$12093$1DOkPG (case-lambda ((g$x$12094$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12094$1DOkPG) ((case-lambda ((g$cars/f$12095$1DOkPG) (if g$cars/f$12095$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12096$1DOkPG) (if g$cdrs/f$12096$1DOkPG (begin '#f (map cons g$cars/f$12095$1DOkPG g$cdrs/f$12096$1DOkPG)) '#f))) (g$f$12093$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12094$1DOkPG)))) '#f))) ((case-lambda ((g$x$12097$1DOkPG) (list g$x$12097$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12094$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12094$1DOkPG) (list (begin 'x '())) '#f)))))) g$f$12093$1DOkPG) (g$syntax-vector->list$9173$1DOkPG g$x$12092$1DOkPG))) '#f))) g$t$12056$1DOkPG)))) g$t$12032$1DOkPG)))) ((case-lambda ((g$x$12098$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12098$1DOkPG) (begin '#f ((case-lambda ((g$q$12099$1DOkPG) (if g$q$12099$1DOkPG (begin '#f ((case-lambda ((g$r$12100$1DOkPG) (if g$r$12100$1DOkPG (begin '#f (append g$q$12099$1DOkPG g$r$12100$1DOkPG)) '#f))) ((case-lambda ((g$x$12101$1DOkPG) (list g$x$12101$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12098$1DOkPG)))) '#f))) ((case-lambda ((g$x$12102$1DOkPG) (list g$x$12102$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12098$1DOkPG)))) '#f))) g$t$12032$1DOkPG)))) g$t$12019$1DOkPG)))) ((case-lambda ((g$x$12103$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12103$1DOkPG) (begin '#f ((case-lambda ((g$q$12104$1DOkPG) (if g$q$12104$1DOkPG (begin '#f ((case-lambda ((g$r$12105$1DOkPG) (if g$r$12105$1DOkPG (begin '#f (append g$q$12104$1DOkPG g$r$12105$1DOkPG)) '#f))) ((case-lambda ((g$x$12106$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12106$1DOkPG) (begin '#f ((case-lambda ((g$q$12107$1DOkPG) (if g$q$12107$1DOkPG (begin '#f ((case-lambda ((g$r$12108$1DOkPG) (if g$r$12108$1DOkPG (begin '#f (append g$q$12107$1DOkPG g$r$12108$1DOkPG)) '#f))) ((case-lambda ((g$x$12109$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12109$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12106$1DOkPG)))) '#f))) ((case-lambda ((g$x$12110$1DOkPG) (list g$x$12110$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12106$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12103$1DOkPG)))) '#f))) ((case-lambda ((g$x$12111$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12111$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12111$1DOkPG (g$scheme-stx$9368$1DOkPG 'quasisyntax)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12103$1DOkPG)))) '#f))) g$t$12019$1DOkPG)))) g$t$12017$1DOkPG)))) ((case-lambda ((g$x$12112$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12112$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12112$1DOkPG (g$scheme-stx$9368$1DOkPG 'unsyntax-splicing)) (begin '#f '()) '#f) '#f))) g$t$12017$1DOkPG)))) g$t$11992$1DOkPG)))) ((case-lambda ((g$x$12113$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12113$1DOkPG) (begin '#f ((case-lambda ((g$q$12114$1DOkPG) (if g$q$12114$1DOkPG (begin '#f ((case-lambda ((g$r$12115$1DOkPG) (if g$r$12115$1DOkPG (begin '#f (append g$q$12114$1DOkPG g$r$12115$1DOkPG)) '#f))) ((case-lambda ((g$x$12116$1DOkPG) (list g$x$12116$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12113$1DOkPG)))) '#f))) ((case-lambda ((g$x$12117$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12117$1DOkPG) (begin '#f ((case-lambda ((g$q$12118$1DOkPG) (if g$q$12118$1DOkPG (begin '#f ((case-lambda ((g$r$12119$1DOkPG) (if g$r$12119$1DOkPG (begin '#f (append g$q$12118$1DOkPG g$r$12119$1DOkPG)) '#f))) ((case-lambda ((g$x$12120$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12120$1DOkPG) (begin '#f ((case-lambda ((g$q$12121$1DOkPG) (if g$q$12121$1DOkPG (begin '#f ((case-lambda ((g$r$12122$1DOkPG) (if g$r$12122$1DOkPG (begin '#f (append g$q$12121$1DOkPG g$r$12122$1DOkPG)) '#f))) ((case-lambda ((g$x$12123$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12123$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12120$1DOkPG)))) '#f))) ((case-lambda ((g$x$12124$1DOkPG) (list g$x$12124$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12120$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12117$1DOkPG)))) '#f))) ((case-lambda ((g$x$12125$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12125$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12125$1DOkPG (g$scheme-stx$9368$1DOkPG 'unsyntax-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12117$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$12113$1DOkPG)))) '#f))) g$t$11992$1DOkPG)))) g$t$11990$1DOkPG)))) ((case-lambda ((g$x$12126$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12126$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12126$1DOkPG (g$scheme-stx$9368$1DOkPG 'unsyntax)) (begin '#f '()) '#f) '#f))) g$t$11990$1DOkPG)))) g$t$11976$1DOkPG)))) ((case-lambda ((g$x$12127$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12127$1DOkPG) (begin '#f ((case-lambda ((g$q$12128$1DOkPG) (if g$q$12128$1DOkPG (begin '#f ((case-lambda ((g$r$12129$1DOkPG) (if g$r$12129$1DOkPG (begin '#f (append g$q$12128$1DOkPG g$r$12129$1DOkPG)) '#f))) ((case-lambda ((g$x$12130$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12130$1DOkPG) (begin '#f ((case-lambda ((g$q$12131$1DOkPG) (if g$q$12131$1DOkPG (begin '#f ((case-lambda ((g$r$12132$1DOkPG) (if g$r$12132$1DOkPG (begin '#f (append g$q$12131$1DOkPG g$r$12132$1DOkPG)) '#f))) ((case-lambda ((g$x$12133$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12133$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12130$1DOkPG)))) '#f))) ((case-lambda ((g$x$12134$1DOkPG) (list g$x$12134$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12130$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12127$1DOkPG)))) '#f))) ((case-lambda ((g$x$12135$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12135$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12135$1DOkPG (g$scheme-stx$9368$1DOkPG 'unsyntax)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12127$1DOkPG)))) '#f))) g$t$11976$1DOkPG)))) g$p$11974$1DOkPG))))) (case-lambda ((g$x$11951$1DOkPG) ((case-lambda ((g$t$11952$1DOkPG) ((case-lambda ((g$ls/false$11953$1DOkPG) (if (if g$ls/false$11953$1DOkPG (begin '#f (apply (case-lambda ((g$e$11954$1DOkPG) '#t)) g$ls/false$11953$1DOkPG)) '#f) (apply (case-lambda ((g$e$11955$1DOkPG) (call-with-values (case-lambda (() (g$quasi$11950$1DOkPG g$e$11955$1DOkPG '0))) (case-lambda ((g$lhs*$11959$1DOkPG g$rhs*$11960$1DOkPG g$v$11961$1DOkPG) ((case-lambda ((g$v$11962$1DOkPG g$rhs*$11963$1DOkPG g$lhs*$11964$1DOkPG) (g$bless$9388$1DOkPG (list 'syntax-case (cons 'list g$rhs*$11963$1DOkPG) '() (list g$lhs*$11964$1DOkPG (list 'syntax g$v$11962$1DOkPG)))))) g$v$11961$1DOkPG g$rhs*$11960$1DOkPG g$lhs*$11959$1DOkPG)))))) g$ls/false$11953$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$11952$1DOkPG)))) ((case-lambda ((g$x$11965$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11965$1DOkPG) (begin '#f ((case-lambda ((g$q$11966$1DOkPG) (if g$q$11966$1DOkPG (begin '#f ((case-lambda ((g$r$11967$1DOkPG) (if g$r$11967$1DOkPG (begin '#f (append g$q$11966$1DOkPG g$r$11967$1DOkPG)) '#f))) ((case-lambda ((g$x$11968$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$11968$1DOkPG) (begin '#f ((case-lambda ((g$q$11969$1DOkPG) (if g$q$11969$1DOkPG (begin '#f ((case-lambda ((g$r$11970$1DOkPG) (if g$r$11970$1DOkPG (begin '#f (append g$q$11969$1DOkPG g$r$11970$1DOkPG)) '#f))) ((case-lambda ((g$x$11971$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$11971$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11968$1DOkPG)))) '#f))) ((case-lambda ((g$x$11972$1DOkPG) (list g$x$11972$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$11968$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$11965$1DOkPG)))) '#f))) ((case-lambda ((g$x$11973$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$11965$1DOkPG)))) '#f))) g$t$11952$1DOkPG)))) g$x$11951$1DOkPG)))))))) (g$define-struct-macro$9415$1DOkPG g$define-struct-macro$15469$1DOkPG (case-lambda ((g$stx$12136$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"define-struct not supported" g$stx$12136$1DOkPG)))) (g$define-record-type-macro$9416$1DOkPG g$define-record-type-macro$15470$1DOkPG (case-lambda ((g$x$12137$1DOkPG) (letrec* ((g$id$12138$1DOkPG (case-lambda ((g$ctxt$12703$1DOkPG . g$str*$12704$1DOkPG) (g$datum->syntax$9503$1DOkPG g$ctxt$12703$1DOkPG (string->symbol (apply string-append (map (case-lambda ((g$x$12705$1DOkPG) (if (symbol? g$x$12705$1DOkPG) (symbol->string g$x$12705$1DOkPG) (if (string? g$x$12705$1DOkPG) g$x$12705$1DOkPG (assertion-violation 'define-record-type '"BUG"))))) g$str*$12704$1DOkPG))))))) (g$get-record-name$12139$1DOkPG (case-lambda ((g$spec$12676$1DOkPG) ((case-lambda ((g$t$12677$1DOkPG) ((case-lambda ((g$ls/false$12678$1DOkPG) (if (if g$ls/false$12678$1DOkPG (begin '#f (apply (case-lambda ((g$foo$12679$1DOkPG g$make-foo$12680$1DOkPG g$foo?$12681$1DOkPG) '#t)) g$ls/false$12678$1DOkPG)) '#f) (apply (case-lambda ((g$foo$12682$1DOkPG g$make-foo$12683$1DOkPG g$foo?$12684$1DOkPG) g$foo$12682$1DOkPG)) g$ls/false$12678$1DOkPG) ((case-lambda ((g$t$12685$1DOkPG) ((case-lambda ((g$ls/false$12686$1DOkPG) (if (if g$ls/false$12686$1DOkPG (begin '#f (apply (case-lambda ((g$foo$12687$1DOkPG) '#t)) g$ls/false$12686$1DOkPG)) '#f) (apply (case-lambda ((g$foo$12688$1DOkPG) g$foo$12688$1DOkPG)) g$ls/false$12686$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12685$1DOkPG)))) ((case-lambda ((g$x$12689$1DOkPG) (list g$x$12689$1DOkPG))) g$t$12685$1DOkPG)))) g$t$12677$1DOkPG)))) ((case-lambda ((g$x$12690$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12690$1DOkPG) (begin '#f ((case-lambda ((g$q$12691$1DOkPG) (if g$q$12691$1DOkPG (begin '#f ((case-lambda ((g$r$12692$1DOkPG) (if g$r$12692$1DOkPG (begin '#f (append g$q$12691$1DOkPG g$r$12692$1DOkPG)) '#f))) ((case-lambda ((g$x$12693$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12693$1DOkPG) (begin '#f ((case-lambda ((g$q$12694$1DOkPG) (if g$q$12694$1DOkPG (begin '#f ((case-lambda ((g$r$12695$1DOkPG) (if g$r$12695$1DOkPG (begin '#f (append g$q$12694$1DOkPG g$r$12695$1DOkPG)) '#f))) ((case-lambda ((g$x$12696$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12696$1DOkPG) (begin '#f ((case-lambda ((g$q$12697$1DOkPG) (if g$q$12697$1DOkPG (begin '#f ((case-lambda ((g$r$12698$1DOkPG) (if g$r$12698$1DOkPG (begin '#f (append g$q$12697$1DOkPG g$r$12698$1DOkPG)) '#f))) ((case-lambda ((g$x$12699$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12699$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12696$1DOkPG)))) '#f))) ((case-lambda ((g$x$12700$1DOkPG) (list g$x$12700$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12696$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12693$1DOkPG)))) '#f))) ((case-lambda ((g$x$12701$1DOkPG) (list g$x$12701$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12693$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12690$1DOkPG)))) '#f))) ((case-lambda ((g$x$12702$1DOkPG) (list g$x$12702$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12690$1DOkPG)))) '#f))) g$t$12677$1DOkPG)))) g$spec$12676$1DOkPG)))) (g$get-record-constructor-name$12140$1DOkPG (case-lambda ((g$spec$12649$1DOkPG) ((case-lambda ((g$t$12650$1DOkPG) ((case-lambda ((g$ls/false$12651$1DOkPG) (if (if g$ls/false$12651$1DOkPG (begin '#f (apply (case-lambda ((g$foo$12652$1DOkPG g$make-foo$12653$1DOkPG g$foo?$12654$1DOkPG) '#t)) g$ls/false$12651$1DOkPG)) '#f) (apply (case-lambda ((g$foo$12655$1DOkPG g$make-foo$12656$1DOkPG g$foo?$12657$1DOkPG) g$make-foo$12656$1DOkPG)) g$ls/false$12651$1DOkPG) ((case-lambda ((g$t$12658$1DOkPG) ((case-lambda ((g$ls/false$12659$1DOkPG) (if (if g$ls/false$12659$1DOkPG (begin '#f (apply (case-lambda ((g$foo$12660$1DOkPG) (g$id?$9181$1DOkPG g$foo$12660$1DOkPG))) g$ls/false$12659$1DOkPG)) '#f) (apply (case-lambda ((g$foo$12661$1DOkPG) (g$id$12138$1DOkPG g$foo$12661$1DOkPG '"make-" (g$stx->datum$9192$1DOkPG g$foo$12661$1DOkPG)))) g$ls/false$12659$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12658$1DOkPG)))) ((case-lambda ((g$x$12662$1DOkPG) (list g$x$12662$1DOkPG))) g$t$12658$1DOkPG)))) g$t$12650$1DOkPG)))) ((case-lambda ((g$x$12663$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12663$1DOkPG) (begin '#f ((case-lambda ((g$q$12664$1DOkPG) (if g$q$12664$1DOkPG (begin '#f ((case-lambda ((g$r$12665$1DOkPG) (if g$r$12665$1DOkPG (begin '#f (append g$q$12664$1DOkPG g$r$12665$1DOkPG)) '#f))) ((case-lambda ((g$x$12666$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12666$1DOkPG) (begin '#f ((case-lambda ((g$q$12667$1DOkPG) (if g$q$12667$1DOkPG (begin '#f ((case-lambda ((g$r$12668$1DOkPG) (if g$r$12668$1DOkPG (begin '#f (append g$q$12667$1DOkPG g$r$12668$1DOkPG)) '#f))) ((case-lambda ((g$x$12669$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12669$1DOkPG) (begin '#f ((case-lambda ((g$q$12670$1DOkPG) (if g$q$12670$1DOkPG (begin '#f ((case-lambda ((g$r$12671$1DOkPG) (if g$r$12671$1DOkPG (begin '#f (append g$q$12670$1DOkPG g$r$12671$1DOkPG)) '#f))) ((case-lambda ((g$x$12672$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12672$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12669$1DOkPG)))) '#f))) ((case-lambda ((g$x$12673$1DOkPG) (list g$x$12673$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12669$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12666$1DOkPG)))) '#f))) ((case-lambda ((g$x$12674$1DOkPG) (list g$x$12674$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12666$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12663$1DOkPG)))) '#f))) ((case-lambda ((g$x$12675$1DOkPG) (list g$x$12675$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12663$1DOkPG)))) '#f))) g$t$12650$1DOkPG)))) g$spec$12649$1DOkPG)))) (g$get-record-predicate-name$12141$1DOkPG (case-lambda ((g$spec$12622$1DOkPG) ((case-lambda ((g$t$12623$1DOkPG) ((case-lambda ((g$ls/false$12624$1DOkPG) (if (if g$ls/false$12624$1DOkPG (begin '#f (apply (case-lambda ((g$foo$12625$1DOkPG g$make-foo$12626$1DOkPG g$foo?$12627$1DOkPG) '#t)) g$ls/false$12624$1DOkPG)) '#f) (apply (case-lambda ((g$foo$12628$1DOkPG g$make-foo$12629$1DOkPG g$foo?$12630$1DOkPG) g$foo?$12630$1DOkPG)) g$ls/false$12624$1DOkPG) ((case-lambda ((g$t$12631$1DOkPG) ((case-lambda ((g$ls/false$12632$1DOkPG) (if (if g$ls/false$12632$1DOkPG (begin '#f (apply (case-lambda ((g$foo$12633$1DOkPG) (g$id?$9181$1DOkPG g$foo$12633$1DOkPG))) g$ls/false$12632$1DOkPG)) '#f) (apply (case-lambda ((g$foo$12634$1DOkPG) (g$id$12138$1DOkPG g$foo$12634$1DOkPG (g$stx->datum$9192$1DOkPG g$foo$12634$1DOkPG) '"?"))) g$ls/false$12632$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12631$1DOkPG)))) ((case-lambda ((g$x$12635$1DOkPG) (list g$x$12635$1DOkPG))) g$t$12631$1DOkPG)))) g$t$12623$1DOkPG)))) ((case-lambda ((g$x$12636$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12636$1DOkPG) (begin '#f ((case-lambda ((g$q$12637$1DOkPG) (if g$q$12637$1DOkPG (begin '#f ((case-lambda ((g$r$12638$1DOkPG) (if g$r$12638$1DOkPG (begin '#f (append g$q$12637$1DOkPG g$r$12638$1DOkPG)) '#f))) ((case-lambda ((g$x$12639$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12639$1DOkPG) (begin '#f ((case-lambda ((g$q$12640$1DOkPG) (if g$q$12640$1DOkPG (begin '#f ((case-lambda ((g$r$12641$1DOkPG) (if g$r$12641$1DOkPG (begin '#f (append g$q$12640$1DOkPG g$r$12641$1DOkPG)) '#f))) ((case-lambda ((g$x$12642$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12642$1DOkPG) (begin '#f ((case-lambda ((g$q$12643$1DOkPG) (if g$q$12643$1DOkPG (begin '#f ((case-lambda ((g$r$12644$1DOkPG) (if g$r$12644$1DOkPG (begin '#f (append g$q$12643$1DOkPG g$r$12644$1DOkPG)) '#f))) ((case-lambda ((g$x$12645$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12645$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12642$1DOkPG)))) '#f))) ((case-lambda ((g$x$12646$1DOkPG) (list g$x$12646$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12642$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12639$1DOkPG)))) '#f))) ((case-lambda ((g$x$12647$1DOkPG) (list g$x$12647$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12639$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12636$1DOkPG)))) '#f))) ((case-lambda ((g$x$12648$1DOkPG) (list g$x$12648$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12636$1DOkPG)))) '#f))) g$t$12623$1DOkPG)))) g$spec$12622$1DOkPG)))) (g$get-clause$12142$1DOkPG (case-lambda ((g$id$12600$1DOkPG g$ls$12601$1DOkPG) ((case-lambda ((g$t$12602$1DOkPG) ((case-lambda ((g$ls/false$12603$1DOkPG) (if (if g$ls/false$12603$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12603$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$12603$1DOkPG) ((case-lambda ((g$t$12604$1DOkPG) ((case-lambda ((g$ls/false$12605$1DOkPG) (if (if g$ls/false$12605$1DOkPG (begin '#f (apply (case-lambda ((g$x$12606$1DOkPG g$rest$12607$1DOkPG g$ls$12608$1DOkPG) '#t)) g$ls/false$12605$1DOkPG)) '#f) (apply (case-lambda ((g$x$12609$1DOkPG g$rest$12610$1DOkPG g$ls$12611$1DOkPG) (if (g$free-id=?$9185$1DOkPG (g$bless$9388$1DOkPG g$id$12600$1DOkPG) g$x$12609$1DOkPG) (cons g$x$12609$1DOkPG g$rest$12610$1DOkPG) (g$get-clause$12142$1DOkPG g$id$12600$1DOkPG g$ls$12611$1DOkPG)))) g$ls/false$12605$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12604$1DOkPG)))) ((case-lambda ((g$x$12612$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12612$1DOkPG) (begin '#f ((case-lambda ((g$q$12613$1DOkPG) (if g$q$12613$1DOkPG (begin '#f ((case-lambda ((g$r$12614$1DOkPG) (if g$r$12614$1DOkPG (begin '#f (append g$q$12613$1DOkPG g$r$12614$1DOkPG)) '#f))) ((case-lambda ((g$x$12615$1DOkPG) (list g$x$12615$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12612$1DOkPG)))) '#f))) ((case-lambda ((g$x$12616$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12616$1DOkPG) (begin '#f ((case-lambda ((g$q$12617$1DOkPG) (if g$q$12617$1DOkPG (begin '#f ((case-lambda ((g$r$12618$1DOkPG) (if g$r$12618$1DOkPG (begin '#f (append g$q$12617$1DOkPG g$r$12618$1DOkPG)) '#f))) ((case-lambda ((g$x$12619$1DOkPG) (list g$x$12619$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12616$1DOkPG)))) '#f))) ((case-lambda ((g$x$12620$1DOkPG) (list g$x$12620$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12616$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$12612$1DOkPG)))) '#f))) g$t$12604$1DOkPG)))) g$t$12602$1DOkPG)))) ((case-lambda ((g$x$12621$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12621$1DOkPG) '()) (begin '#f '()) '#f))) g$t$12602$1DOkPG)))) g$ls$12601$1DOkPG)))) (g$foo-rtd-code$12143$1DOkPG (case-lambda ((g$name$12472$1DOkPG g$clause*$12473$1DOkPG) (letrec* ((g$convert-field-spec*$12474$1DOkPG (case-lambda ((g$ls$12563$1DOkPG) (list->vector (map (case-lambda ((g$x$12564$1DOkPG) ((case-lambda ((g$t$12565$1DOkPG) ((case-lambda ((g$ls/false$12566$1DOkPG) (if (if g$ls/false$12566$1DOkPG (begin '#f (apply (case-lambda ((g$name$12567$1DOkPG g$rest$12568$1DOkPG) '#t)) g$ls/false$12566$1DOkPG)) '#f) (apply (case-lambda ((g$name$12569$1DOkPG g$rest$12570$1DOkPG) (list 'mutable g$name$12569$1DOkPG))) g$ls/false$12566$1DOkPG) ((case-lambda ((g$t$12571$1DOkPG) ((case-lambda ((g$ls/false$12572$1DOkPG) (if (if g$ls/false$12572$1DOkPG (begin '#f (apply (case-lambda ((g$name$12573$1DOkPG g$rest$12574$1DOkPG) '#t)) g$ls/false$12572$1DOkPG)) '#f) (apply (case-lambda ((g$name$12575$1DOkPG g$rest$12576$1DOkPG) (list 'immutable g$name$12575$1DOkPG))) g$ls/false$12572$1DOkPG) ((case-lambda ((g$t$12577$1DOkPG) ((case-lambda ((g$ls/false$12578$1DOkPG) (if (if g$ls/false$12578$1DOkPG (begin '#f (apply (case-lambda ((g$name$12579$1DOkPG) '#t)) g$ls/false$12578$1DOkPG)) '#f) (apply (case-lambda ((g$name$12580$1DOkPG) (list 'immutable g$name$12580$1DOkPG))) g$ls/false$12578$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12577$1DOkPG)))) ((case-lambda ((g$x$12581$1DOkPG) (list g$x$12581$1DOkPG))) g$t$12577$1DOkPG)))) g$t$12571$1DOkPG)))) ((case-lambda ((g$x$12582$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12582$1DOkPG) (begin '#f ((case-lambda ((g$q$12583$1DOkPG) (if g$q$12583$1DOkPG (begin '#f ((case-lambda ((g$r$12584$1DOkPG) (if g$r$12584$1DOkPG (begin '#f (append g$q$12583$1DOkPG g$r$12584$1DOkPG)) '#f))) ((case-lambda ((g$x$12585$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12585$1DOkPG) (begin '#f ((case-lambda ((g$q$12586$1DOkPG) (if g$q$12586$1DOkPG (begin '#f ((case-lambda ((g$r$12587$1DOkPG) (if g$r$12587$1DOkPG (begin '#f (append g$q$12586$1DOkPG g$r$12587$1DOkPG)) '#f))) ((case-lambda ((g$x$12588$1DOkPG) (list g$x$12588$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12585$1DOkPG)))) '#f))) ((case-lambda ((g$x$12589$1DOkPG) (list g$x$12589$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12585$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12582$1DOkPG)))) '#f))) ((case-lambda ((g$x$12590$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12590$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12590$1DOkPG (g$scheme-stx$9368$1DOkPG 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12582$1DOkPG)))) '#f))) g$t$12571$1DOkPG)))) g$t$12565$1DOkPG)))) ((case-lambda ((g$x$12591$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12591$1DOkPG) (begin '#f ((case-lambda ((g$q$12592$1DOkPG) (if g$q$12592$1DOkPG (begin '#f ((case-lambda ((g$r$12593$1DOkPG) (if g$r$12593$1DOkPG (begin '#f (append g$q$12592$1DOkPG g$r$12593$1DOkPG)) '#f))) ((case-lambda ((g$x$12594$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12594$1DOkPG) (begin '#f ((case-lambda ((g$q$12595$1DOkPG) (if g$q$12595$1DOkPG (begin '#f ((case-lambda ((g$r$12596$1DOkPG) (if g$r$12596$1DOkPG (begin '#f (append g$q$12595$1DOkPG g$r$12596$1DOkPG)) '#f))) ((case-lambda ((g$x$12597$1DOkPG) (list g$x$12597$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12594$1DOkPG)))) '#f))) ((case-lambda ((g$x$12598$1DOkPG) (list g$x$12598$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12594$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12591$1DOkPG)))) '#f))) ((case-lambda ((g$x$12599$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12599$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12599$1DOkPG (g$scheme-stx$9368$1DOkPG 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12591$1DOkPG)))) '#f))) g$t$12565$1DOkPG)))) g$x$12564$1DOkPG))) g$ls$12563$1DOkPG)))))) ((case-lambda ((g$parent-rtd-code$12475$1DOkPG g$uid-code$12476$1DOkPG g$sealed?$12477$1DOkPG g$opaque?$12478$1DOkPG g$fields$12479$1DOkPG) (g$bless$9388$1DOkPG (list 'make-record-type-descriptor (list 'quote g$name$12472$1DOkPG) g$parent-rtd-code$12475$1DOkPG g$uid-code$12476$1DOkPG g$sealed?$12477$1DOkPG g$opaque?$12478$1DOkPG g$fields$12479$1DOkPG)))) ((case-lambda ((g$t$12480$1DOkPG) ((case-lambda ((g$ls/false$12481$1DOkPG) (if (if g$ls/false$12481$1DOkPG (begin '#f (apply (case-lambda ((g$name$12482$1DOkPG) '#t)) g$ls/false$12481$1DOkPG)) '#f) (apply (case-lambda ((g$name$12483$1DOkPG) (list 'record-type-descriptor g$name$12483$1DOkPG))) g$ls/false$12481$1DOkPG) ((case-lambda ((g$t$12484$1DOkPG) ((case-lambda ((g$ls/false$12485$1DOkPG) (if (if g$ls/false$12485$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12485$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$12485$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12484$1DOkPG)))) ((case-lambda ((g$x$12486$1DOkPG) '())) g$t$12484$1DOkPG)))) g$t$12480$1DOkPG)))) ((case-lambda ((g$x$12487$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12487$1DOkPG) (begin '#f ((case-lambda ((g$q$12488$1DOkPG) (if g$q$12488$1DOkPG (begin '#f ((case-lambda ((g$r$12489$1DOkPG) (if g$r$12489$1DOkPG (begin '#f (append g$q$12488$1DOkPG g$r$12489$1DOkPG)) '#f))) ((case-lambda ((g$x$12490$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12490$1DOkPG) (begin '#f ((case-lambda ((g$q$12491$1DOkPG) (if g$q$12491$1DOkPG (begin '#f ((case-lambda ((g$r$12492$1DOkPG) (if g$r$12492$1DOkPG (begin '#f (append g$q$12491$1DOkPG g$r$12492$1DOkPG)) '#f))) ((case-lambda ((g$x$12493$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12493$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12490$1DOkPG)))) '#f))) ((case-lambda ((g$x$12494$1DOkPG) (list g$x$12494$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12490$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12487$1DOkPG)))) '#f))) ((case-lambda ((g$x$12495$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12487$1DOkPG)))) '#f))) g$t$12480$1DOkPG)))) (g$get-clause$12142$1DOkPG 'parent g$clause*$12473$1DOkPG)) ((case-lambda ((g$t$12496$1DOkPG) ((case-lambda ((g$ls/false$12497$1DOkPG) (if (if g$ls/false$12497$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12497$1DOkPG)) '#f) (apply (case-lambda (() (list 'quote (gensym)))) g$ls/false$12497$1DOkPG) ((case-lambda ((g$t$12498$1DOkPG) ((case-lambda ((g$ls/false$12499$1DOkPG) (if (if g$ls/false$12499$1DOkPG (begin '#f (apply (case-lambda ((g$uid$12500$1DOkPG) '#t)) g$ls/false$12499$1DOkPG)) '#f) (apply (case-lambda ((g$uid$12501$1DOkPG) (list 'quote g$uid$12501$1DOkPG))) g$ls/false$12499$1DOkPG) ((case-lambda ((g$t$12502$1DOkPG) ((case-lambda ((g$ls/false$12503$1DOkPG) (if (if g$ls/false$12503$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12503$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$12503$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12502$1DOkPG)))) ((case-lambda ((g$x$12504$1DOkPG) '())) g$t$12502$1DOkPG)))) g$t$12498$1DOkPG)))) ((case-lambda ((g$x$12505$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12505$1DOkPG) (begin '#f ((case-lambda ((g$q$12506$1DOkPG) (if g$q$12506$1DOkPG (begin '#f ((case-lambda ((g$r$12507$1DOkPG) (if g$r$12507$1DOkPG (begin '#f (append g$q$12506$1DOkPG g$r$12507$1DOkPG)) '#f))) ((case-lambda ((g$x$12508$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12508$1DOkPG) (begin '#f ((case-lambda ((g$q$12509$1DOkPG) (if g$q$12509$1DOkPG (begin '#f ((case-lambda ((g$r$12510$1DOkPG) (if g$r$12510$1DOkPG (begin '#f (append g$q$12509$1DOkPG g$r$12510$1DOkPG)) '#f))) ((case-lambda ((g$x$12511$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12511$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12508$1DOkPG)))) '#f))) ((case-lambda ((g$x$12512$1DOkPG) (list g$x$12512$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12508$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12505$1DOkPG)))) '#f))) ((case-lambda ((g$x$12513$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12505$1DOkPG)))) '#f))) g$t$12498$1DOkPG)))) g$t$12496$1DOkPG)))) ((case-lambda ((g$x$12514$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12514$1DOkPG) (begin '#f ((case-lambda ((g$q$12515$1DOkPG) (if g$q$12515$1DOkPG (begin '#f ((case-lambda ((g$r$12516$1DOkPG) (if g$r$12516$1DOkPG (begin '#f (append g$q$12515$1DOkPG g$r$12516$1DOkPG)) '#f))) ((case-lambda ((g$x$12517$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12517$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12514$1DOkPG)))) '#f))) ((case-lambda ((g$x$12518$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12514$1DOkPG)))) '#f))) g$t$12496$1DOkPG)))) (g$get-clause$12142$1DOkPG 'nongenerative g$clause*$12473$1DOkPG)) ((case-lambda ((g$t$12519$1DOkPG) ((case-lambda ((g$ls/false$12520$1DOkPG) (if (if g$ls/false$12520$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12520$1DOkPG)) '#f) (apply (case-lambda (() '#t)) g$ls/false$12520$1DOkPG) ((case-lambda ((g$t$12521$1DOkPG) ((case-lambda ((g$ls/false$12522$1DOkPG) (if (if g$ls/false$12522$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12522$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$12522$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12521$1DOkPG)))) ((case-lambda ((g$x$12523$1DOkPG) '())) g$t$12521$1DOkPG)))) g$t$12519$1DOkPG)))) ((case-lambda ((g$x$12524$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12524$1DOkPG) (begin '#f ((case-lambda ((g$q$12525$1DOkPG) (if g$q$12525$1DOkPG (begin '#f ((case-lambda ((g$r$12526$1DOkPG) (if g$r$12526$1DOkPG (begin '#f (append g$q$12525$1DOkPG g$r$12526$1DOkPG)) '#f))) ((case-lambda ((g$x$12527$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12527$1DOkPG) (begin '#f ((case-lambda ((g$q$12528$1DOkPG) (if g$q$12528$1DOkPG (begin '#f ((case-lambda ((g$r$12529$1DOkPG) (if g$r$12529$1DOkPG (begin '#f (append g$q$12528$1DOkPG g$r$12529$1DOkPG)) '#f))) ((case-lambda ((g$x$12530$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12530$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12527$1DOkPG)))) '#f))) ((case-lambda ((g$x$12531$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12531$1DOkPG) '#t) (begin '#f '()) '#f))) (g$syntax-car$9178$1DOkPG g$x$12527$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12524$1DOkPG)))) '#f))) ((case-lambda ((g$x$12532$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12524$1DOkPG)))) '#f))) g$t$12519$1DOkPG)))) (g$get-clause$12142$1DOkPG 'sealed g$clause*$12473$1DOkPG)) ((case-lambda ((g$t$12533$1DOkPG) ((case-lambda ((g$ls/false$12534$1DOkPG) (if (if g$ls/false$12534$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12534$1DOkPG)) '#f) (apply (case-lambda (() '#t)) g$ls/false$12534$1DOkPG) ((case-lambda ((g$t$12535$1DOkPG) ((case-lambda ((g$ls/false$12536$1DOkPG) (if (if g$ls/false$12536$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12536$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$12536$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12535$1DOkPG)))) ((case-lambda ((g$x$12537$1DOkPG) '())) g$t$12535$1DOkPG)))) g$t$12533$1DOkPG)))) ((case-lambda ((g$x$12538$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12538$1DOkPG) (begin '#f ((case-lambda ((g$q$12539$1DOkPG) (if g$q$12539$1DOkPG (begin '#f ((case-lambda ((g$r$12540$1DOkPG) (if g$r$12540$1DOkPG (begin '#f (append g$q$12539$1DOkPG g$r$12540$1DOkPG)) '#f))) ((case-lambda ((g$x$12541$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12541$1DOkPG) (begin '#f ((case-lambda ((g$q$12542$1DOkPG) (if g$q$12542$1DOkPG (begin '#f ((case-lambda ((g$r$12543$1DOkPG) (if g$r$12543$1DOkPG (begin '#f (append g$q$12542$1DOkPG g$r$12543$1DOkPG)) '#f))) ((case-lambda ((g$x$12544$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12544$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12541$1DOkPG)))) '#f))) ((case-lambda ((g$x$12545$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12545$1DOkPG) '#t) (begin '#f '()) '#f))) (g$syntax-car$9178$1DOkPG g$x$12541$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12538$1DOkPG)))) '#f))) ((case-lambda ((g$x$12546$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12538$1DOkPG)))) '#f))) g$t$12533$1DOkPG)))) (g$get-clause$12142$1DOkPG 'opaque g$clause*$12473$1DOkPG)) ((case-lambda ((g$t$12547$1DOkPG) ((case-lambda ((g$ls/false$12548$1DOkPG) (if (if g$ls/false$12548$1DOkPG (begin '#f (apply (case-lambda ((g$field-spec*$12549$1DOkPG) '#t)) g$ls/false$12548$1DOkPG)) '#f) (apply (case-lambda ((g$field-spec*$12550$1DOkPG) (list 'quote (g$convert-field-spec*$12474$1DOkPG g$field-spec*$12550$1DOkPG)))) g$ls/false$12548$1DOkPG) ((case-lambda ((g$t$12551$1DOkPG) ((case-lambda ((g$ls/false$12552$1DOkPG) (if (if g$ls/false$12552$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12552$1DOkPG)) '#f) (apply (case-lambda (() ''#())) g$ls/false$12552$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12551$1DOkPG)))) ((case-lambda ((g$x$12553$1DOkPG) '())) g$t$12551$1DOkPG)))) g$t$12547$1DOkPG)))) ((case-lambda ((g$x$12554$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12554$1DOkPG) (begin '#f ((case-lambda ((g$q$12555$1DOkPG) (if g$q$12555$1DOkPG (begin '#f ((case-lambda ((g$r$12556$1DOkPG) (if g$r$12556$1DOkPG (begin '#f (append g$q$12555$1DOkPG g$r$12556$1DOkPG)) '#f))) ((letrec ((g$f$12557$1DOkPG (case-lambda ((g$x$12558$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12558$1DOkPG) ((case-lambda ((g$cars/f$12559$1DOkPG) (if g$cars/f$12559$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12560$1DOkPG) (if g$cdrs/f$12560$1DOkPG (begin '#f (map cons g$cars/f$12559$1DOkPG g$cdrs/f$12560$1DOkPG)) '#f))) (g$f$12557$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12558$1DOkPG)))) '#f))) ((case-lambda ((g$x$12561$1DOkPG) (list g$x$12561$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12558$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12558$1DOkPG) (list (begin 'field-spec* '())) '#f)))))) g$f$12557$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$12554$1DOkPG)))) '#f))) ((case-lambda ((g$x$12562$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12554$1DOkPG)))) '#f))) g$t$12547$1DOkPG)))) (g$get-clause$12142$1DOkPG 'fields g$clause*$12473$1DOkPG))))))) (g$foo-rcd-code$12144$1DOkPG (case-lambda ((g$clause*$12452$1DOkPG g$foo-rtd$12453$1DOkPG g$protocol$12454$1DOkPG) ((case-lambda ((g$parent-rcd-code$12455$1DOkPG) (list 'make-record-constructor-descriptor g$foo-rtd$12453$1DOkPG g$parent-rcd-code$12455$1DOkPG g$protocol$12454$1DOkPG))) ((case-lambda ((g$t$12456$1DOkPG) ((case-lambda ((g$ls/false$12457$1DOkPG) (if (if g$ls/false$12457$1DOkPG (begin '#f (apply (case-lambda ((g$name$12458$1DOkPG) '#t)) g$ls/false$12457$1DOkPG)) '#f) (apply (case-lambda ((g$name$12459$1DOkPG) (list 'record-constructor-descriptor g$name$12459$1DOkPG))) g$ls/false$12457$1DOkPG) ((case-lambda ((g$t$12460$1DOkPG) ((case-lambda ((g$ls/false$12461$1DOkPG) (if (if g$ls/false$12461$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12461$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$12461$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12460$1DOkPG)))) ((case-lambda ((g$x$12462$1DOkPG) '())) g$t$12460$1DOkPG)))) g$t$12456$1DOkPG)))) ((case-lambda ((g$x$12463$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12463$1DOkPG) (begin '#f ((case-lambda ((g$q$12464$1DOkPG) (if g$q$12464$1DOkPG (begin '#f ((case-lambda ((g$r$12465$1DOkPG) (if g$r$12465$1DOkPG (begin '#f (append g$q$12464$1DOkPG g$r$12465$1DOkPG)) '#f))) ((case-lambda ((g$x$12466$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12466$1DOkPG) (begin '#f ((case-lambda ((g$q$12467$1DOkPG) (if g$q$12467$1DOkPG (begin '#f ((case-lambda ((g$r$12468$1DOkPG) (if g$r$12468$1DOkPG (begin '#f (append g$q$12467$1DOkPG g$r$12468$1DOkPG)) '#f))) ((case-lambda ((g$x$12469$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12469$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12466$1DOkPG)))) '#f))) ((case-lambda ((g$x$12470$1DOkPG) (list g$x$12470$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12466$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12463$1DOkPG)))) '#f))) ((case-lambda ((g$x$12471$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12463$1DOkPG)))) '#f))) g$t$12456$1DOkPG)))) (g$get-clause$12142$1DOkPG 'parent g$clause*$12452$1DOkPG)))))) (g$get-protocol-code$12145$1DOkPG (case-lambda ((g$clause*$12435$1DOkPG) ((case-lambda ((g$t$12436$1DOkPG) ((case-lambda ((g$ls/false$12437$1DOkPG) (if (if g$ls/false$12437$1DOkPG (begin '#f (apply (case-lambda ((g$expr$12438$1DOkPG) '#t)) g$ls/false$12437$1DOkPG)) '#f) (apply (case-lambda ((g$expr$12439$1DOkPG) g$expr$12439$1DOkPG)) g$ls/false$12437$1DOkPG) ((case-lambda ((g$t$12440$1DOkPG) ((case-lambda ((g$ls/false$12441$1DOkPG) (if (if g$ls/false$12441$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12441$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$12441$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12440$1DOkPG)))) ((case-lambda ((g$x$12442$1DOkPG) '())) g$t$12440$1DOkPG)))) g$t$12436$1DOkPG)))) ((case-lambda ((g$x$12443$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12443$1DOkPG) (begin '#f ((case-lambda ((g$q$12444$1DOkPG) (if g$q$12444$1DOkPG (begin '#f ((case-lambda ((g$r$12445$1DOkPG) (if g$r$12445$1DOkPG (begin '#f (append g$q$12444$1DOkPG g$r$12445$1DOkPG)) '#f))) ((case-lambda ((g$x$12446$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12446$1DOkPG) (begin '#f ((case-lambda ((g$q$12447$1DOkPG) (if g$q$12447$1DOkPG (begin '#f ((case-lambda ((g$r$12448$1DOkPG) (if g$r$12448$1DOkPG (begin '#f (append g$q$12447$1DOkPG g$r$12448$1DOkPG)) '#f))) ((case-lambda ((g$x$12449$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12449$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12446$1DOkPG)))) '#f))) ((case-lambda ((g$x$12450$1DOkPG) (list g$x$12450$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12446$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12443$1DOkPG)))) '#f))) ((case-lambda ((g$x$12451$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12443$1DOkPG)))) '#f))) g$t$12436$1DOkPG)))) (g$get-clause$12142$1DOkPG 'protocol g$clause*$12435$1DOkPG))))) (g$get-fields$12146$1DOkPG (case-lambda ((g$clause*$12405$1DOkPG) ((case-lambda ((g$t$12406$1DOkPG) ((case-lambda ((g$ls/false$12407$1DOkPG) (if (if g$ls/false$12407$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12407$1DOkPG)) '#f) (apply (case-lambda (() '())) g$ls/false$12407$1DOkPG) ((case-lambda ((g$t$12408$1DOkPG) ((case-lambda ((g$ls/false$12409$1DOkPG) (if (if g$ls/false$12409$1DOkPG (begin '#f (apply (case-lambda ((g$f*$12410$1DOkPG) '#t)) g$ls/false$12409$1DOkPG)) '#f) (apply (case-lambda ((g$f*$12411$1DOkPG) g$f*$12411$1DOkPG)) g$ls/false$12409$1DOkPG) ((case-lambda ((g$t$12412$1DOkPG) ((case-lambda ((g$ls/false$12413$1DOkPG) (if (if g$ls/false$12413$1DOkPG (begin '#f (apply (case-lambda ((g$rest$12414$1DOkPG) '#t)) g$ls/false$12413$1DOkPG)) '#f) (apply (case-lambda ((g$rest$12415$1DOkPG) (g$get-fields$12146$1DOkPG g$rest$12415$1DOkPG))) g$ls/false$12413$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12412$1DOkPG)))) ((case-lambda ((g$x$12416$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12416$1DOkPG) (begin '#f ((case-lambda ((g$q$12417$1DOkPG) (if g$q$12417$1DOkPG (begin '#f ((case-lambda ((g$r$12418$1DOkPG) (if g$r$12418$1DOkPG (begin '#f (append g$q$12417$1DOkPG g$r$12418$1DOkPG)) '#f))) ((case-lambda ((g$x$12419$1DOkPG) (list g$x$12419$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12416$1DOkPG)))) '#f))) ((case-lambda ((g$x$12420$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12416$1DOkPG)))) '#f))) g$t$12412$1DOkPG)))) g$t$12408$1DOkPG)))) ((case-lambda ((g$x$12421$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12421$1DOkPG) (begin '#f ((case-lambda ((g$q$12422$1DOkPG) (if g$q$12422$1DOkPG (begin '#f ((case-lambda ((g$r$12423$1DOkPG) (if g$r$12423$1DOkPG (begin '#f (append g$q$12422$1DOkPG g$r$12423$1DOkPG)) '#f))) ((case-lambda ((g$x$12424$1DOkPG) '())) (g$syntax-cdr$9179$1DOkPG g$x$12421$1DOkPG)))) '#f))) ((case-lambda ((g$x$12425$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12425$1DOkPG) (begin '#f ((case-lambda ((g$q$12426$1DOkPG) (if g$q$12426$1DOkPG (begin '#f ((case-lambda ((g$r$12427$1DOkPG) (if g$r$12427$1DOkPG (begin '#f (append g$q$12426$1DOkPG g$r$12427$1DOkPG)) '#f))) ((letrec ((g$f$12428$1DOkPG (case-lambda ((g$x$12429$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12429$1DOkPG) ((case-lambda ((g$cars/f$12430$1DOkPG) (if g$cars/f$12430$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12431$1DOkPG) (if g$cdrs/f$12431$1DOkPG (begin '#f (map cons g$cars/f$12430$1DOkPG g$cdrs/f$12431$1DOkPG)) '#f))) (g$f$12428$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12429$1DOkPG)))) '#f))) ((case-lambda ((g$x$12432$1DOkPG) (list g$x$12432$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12429$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12429$1DOkPG) (list (begin 'f* '())) '#f)))))) g$f$12428$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$12425$1DOkPG)))) '#f))) ((case-lambda ((g$x$12433$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12433$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12433$1DOkPG (g$scheme-stx$9368$1DOkPG 'fields)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12425$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$12421$1DOkPG)))) '#f))) g$t$12408$1DOkPG)))) g$t$12406$1DOkPG)))) ((case-lambda ((g$x$12434$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12434$1DOkPG) '()) (begin '#f '()) '#f))) g$t$12406$1DOkPG)))) g$clause*$12405$1DOkPG)))) (g$get-mutator-indices$12147$1DOkPG (case-lambda ((g$fields$12376$1DOkPG) ((letrec ((g$f$12377$1DOkPG (case-lambda ((g$fields$12378$1DOkPG g$i$12379$1DOkPG) ((case-lambda ((g$t$12380$1DOkPG) ((case-lambda ((g$ls/false$12381$1DOkPG) (if (if g$ls/false$12381$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12381$1DOkPG)) '#f) (apply (case-lambda (() '())) g$ls/false$12381$1DOkPG) ((case-lambda ((g$t$12382$1DOkPG) ((case-lambda ((g$ls/false$12383$1DOkPG) (if (if g$ls/false$12383$1DOkPG (begin '#f (apply (case-lambda ((g$rest$12384$1DOkPG) '#t)) g$ls/false$12383$1DOkPG)) '#f) (apply (case-lambda ((g$rest$12385$1DOkPG) (cons g$i$12379$1DOkPG (g$f$12377$1DOkPG g$rest$12385$1DOkPG (+ g$i$12379$1DOkPG '1))))) g$ls/false$12383$1DOkPG) ((case-lambda ((g$t$12386$1DOkPG) ((case-lambda ((g$ls/false$12387$1DOkPG) (if (if g$ls/false$12387$1DOkPG (begin '#f (apply (case-lambda ((g$rest$12388$1DOkPG) '#t)) g$ls/false$12387$1DOkPG)) '#f) (apply (case-lambda ((g$rest$12389$1DOkPG) (g$f$12377$1DOkPG g$rest$12389$1DOkPG (+ g$i$12379$1DOkPG '1)))) g$ls/false$12387$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12386$1DOkPG)))) ((case-lambda ((g$x$12390$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12390$1DOkPG) (begin '#f ((case-lambda ((g$q$12391$1DOkPG) (if g$q$12391$1DOkPG (begin '#f ((case-lambda ((g$r$12392$1DOkPG) (if g$r$12392$1DOkPG (begin '#f (append g$q$12391$1DOkPG g$r$12392$1DOkPG)) '#f))) ((case-lambda ((g$x$12393$1DOkPG) (list g$x$12393$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12390$1DOkPG)))) '#f))) ((case-lambda ((g$x$12394$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12390$1DOkPG)))) '#f))) g$t$12386$1DOkPG)))) g$t$12382$1DOkPG)))) ((case-lambda ((g$x$12395$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12395$1DOkPG) (begin '#f ((case-lambda ((g$q$12396$1DOkPG) (if g$q$12396$1DOkPG (begin '#f ((case-lambda ((g$r$12397$1DOkPG) (if g$r$12397$1DOkPG (begin '#f (append g$q$12396$1DOkPG g$r$12397$1DOkPG)) '#f))) ((case-lambda ((g$x$12398$1DOkPG) (list g$x$12398$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12395$1DOkPG)))) '#f))) ((case-lambda ((g$x$12399$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12399$1DOkPG) (begin '#f ((case-lambda ((g$q$12400$1DOkPG) (if g$q$12400$1DOkPG (begin '#f ((case-lambda ((g$r$12401$1DOkPG) (if g$r$12401$1DOkPG (begin '#f (append g$q$12400$1DOkPG g$r$12401$1DOkPG)) '#f))) ((case-lambda ((g$x$12402$1DOkPG) '())) (g$syntax-cdr$9179$1DOkPG g$x$12399$1DOkPG)))) '#f))) ((case-lambda ((g$x$12403$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12403$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12403$1DOkPG (g$scheme-stx$9368$1DOkPG 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12399$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$12395$1DOkPG)))) '#f))) g$t$12382$1DOkPG)))) g$t$12380$1DOkPG)))) ((case-lambda ((g$x$12404$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12404$1DOkPG) '()) (begin '#f '()) '#f))) g$t$12380$1DOkPG)))) g$fields$12378$1DOkPG))))) g$f$12377$1DOkPG) g$fields$12376$1DOkPG '0)))) (g$get-mutators$12148$1DOkPG (case-lambda ((g$foo$12308$1DOkPG g$fields$12309$1DOkPG) (letrec* ((g$gen-name$12310$1DOkPG (case-lambda ((g$x$12375$1DOkPG) (g$datum->syntax$9503$1DOkPG g$foo$12308$1DOkPG (string->symbol (string-append (symbol->string (g$syntax->datum$9504$1DOkPG g$foo$12308$1DOkPG)) '"-" (symbol->string (g$syntax->datum$9504$1DOkPG g$x$12375$1DOkPG)) '"-set!"))))))) ((letrec ((g$f$12311$1DOkPG (case-lambda ((g$fields$12312$1DOkPG) ((case-lambda ((g$t$12313$1DOkPG) ((case-lambda ((g$ls/false$12314$1DOkPG) (if (if g$ls/false$12314$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12314$1DOkPG)) '#f) (apply (case-lambda (() '())) g$ls/false$12314$1DOkPG) ((case-lambda ((g$t$12315$1DOkPG) ((case-lambda ((g$ls/false$12316$1DOkPG) (if (if g$ls/false$12316$1DOkPG (begin '#f (apply (case-lambda ((g$name$12317$1DOkPG g$accessor$12318$1DOkPG g$mutator$12319$1DOkPG g$rest$12320$1DOkPG) '#t)) g$ls/false$12316$1DOkPG)) '#f) (apply (case-lambda ((g$name$12321$1DOkPG g$accessor$12322$1DOkPG g$mutator$12323$1DOkPG g$rest$12324$1DOkPG) (cons g$mutator$12323$1DOkPG (g$f$12311$1DOkPG g$rest$12324$1DOkPG)))) g$ls/false$12316$1DOkPG) ((case-lambda ((g$t$12325$1DOkPG) ((case-lambda ((g$ls/false$12326$1DOkPG) (if (if g$ls/false$12326$1DOkPG (begin '#f (apply (case-lambda ((g$name$12327$1DOkPG g$rest$12328$1DOkPG) '#t)) g$ls/false$12326$1DOkPG)) '#f) (apply (case-lambda ((g$name$12329$1DOkPG g$rest$12330$1DOkPG) (cons (g$gen-name$12310$1DOkPG g$name$12329$1DOkPG) (g$f$12311$1DOkPG g$rest$12330$1DOkPG)))) g$ls/false$12326$1DOkPG) ((case-lambda ((g$t$12331$1DOkPG) ((case-lambda ((g$ls/false$12332$1DOkPG) (if (if g$ls/false$12332$1DOkPG (begin '#f (apply (case-lambda ((g$rest$12333$1DOkPG) '#t)) g$ls/false$12332$1DOkPG)) '#f) (apply (case-lambda ((g$rest$12334$1DOkPG) (g$f$12311$1DOkPG g$rest$12334$1DOkPG))) g$ls/false$12332$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12331$1DOkPG)))) ((case-lambda ((g$x$12335$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12335$1DOkPG) (begin '#f ((case-lambda ((g$q$12336$1DOkPG) (if g$q$12336$1DOkPG (begin '#f ((case-lambda ((g$r$12337$1DOkPG) (if g$r$12337$1DOkPG (begin '#f (append g$q$12336$1DOkPG g$r$12337$1DOkPG)) '#f))) ((case-lambda ((g$x$12338$1DOkPG) (list g$x$12338$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12335$1DOkPG)))) '#f))) ((case-lambda ((g$x$12339$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12335$1DOkPG)))) '#f))) g$t$12331$1DOkPG)))) g$t$12325$1DOkPG)))) ((case-lambda ((g$x$12340$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12340$1DOkPG) (begin '#f ((case-lambda ((g$q$12341$1DOkPG) (if g$q$12341$1DOkPG (begin '#f ((case-lambda ((g$r$12342$1DOkPG) (if g$r$12342$1DOkPG (begin '#f (append g$q$12341$1DOkPG g$r$12342$1DOkPG)) '#f))) ((case-lambda ((g$x$12343$1DOkPG) (list g$x$12343$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12340$1DOkPG)))) '#f))) ((case-lambda ((g$x$12344$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12344$1DOkPG) (begin '#f ((case-lambda ((g$q$12345$1DOkPG) (if g$q$12345$1DOkPG (begin '#f ((case-lambda ((g$r$12346$1DOkPG) (if g$r$12346$1DOkPG (begin '#f (append g$q$12345$1DOkPG g$r$12346$1DOkPG)) '#f))) ((case-lambda ((g$x$12347$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12347$1DOkPG) (begin '#f ((case-lambda ((g$q$12348$1DOkPG) (if g$q$12348$1DOkPG (begin '#f ((case-lambda ((g$r$12349$1DOkPG) (if g$r$12349$1DOkPG (begin '#f (append g$q$12348$1DOkPG g$r$12349$1DOkPG)) '#f))) ((case-lambda ((g$x$12350$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12350$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12347$1DOkPG)))) '#f))) ((case-lambda ((g$x$12351$1DOkPG) (list g$x$12351$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12347$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12344$1DOkPG)))) '#f))) ((case-lambda ((g$x$12352$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12352$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12352$1DOkPG (g$scheme-stx$9368$1DOkPG 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12344$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$12340$1DOkPG)))) '#f))) g$t$12325$1DOkPG)))) g$t$12315$1DOkPG)))) ((case-lambda ((g$x$12353$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12353$1DOkPG) (begin '#f ((case-lambda ((g$q$12354$1DOkPG) (if g$q$12354$1DOkPG (begin '#f ((case-lambda ((g$r$12355$1DOkPG) (if g$r$12355$1DOkPG (begin '#f (append g$q$12354$1DOkPG g$r$12355$1DOkPG)) '#f))) ((case-lambda ((g$x$12356$1DOkPG) (list g$x$12356$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12353$1DOkPG)))) '#f))) ((case-lambda ((g$x$12357$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12357$1DOkPG) (begin '#f ((case-lambda ((g$q$12358$1DOkPG) (if g$q$12358$1DOkPG (begin '#f ((case-lambda ((g$r$12359$1DOkPG) (if g$r$12359$1DOkPG (begin '#f (append g$q$12358$1DOkPG g$r$12359$1DOkPG)) '#f))) ((case-lambda ((g$x$12360$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12360$1DOkPG) (begin '#f ((case-lambda ((g$q$12361$1DOkPG) (if g$q$12361$1DOkPG (begin '#f ((case-lambda ((g$r$12362$1DOkPG) (if g$r$12362$1DOkPG (begin '#f (append g$q$12361$1DOkPG g$r$12362$1DOkPG)) '#f))) ((case-lambda ((g$x$12363$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12363$1DOkPG) (begin '#f ((case-lambda ((g$q$12364$1DOkPG) (if g$q$12364$1DOkPG (begin '#f ((case-lambda ((g$r$12365$1DOkPG) (if g$r$12365$1DOkPG (begin '#f (append g$q$12364$1DOkPG g$r$12365$1DOkPG)) '#f))) ((case-lambda ((g$x$12366$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12366$1DOkPG) (begin '#f ((case-lambda ((g$q$12367$1DOkPG) (if g$q$12367$1DOkPG (begin '#f ((case-lambda ((g$r$12368$1DOkPG) (if g$r$12368$1DOkPG (begin '#f (append g$q$12367$1DOkPG g$r$12368$1DOkPG)) '#f))) ((case-lambda ((g$x$12369$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12369$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12366$1DOkPG)))) '#f))) ((case-lambda ((g$x$12370$1DOkPG) (list g$x$12370$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12366$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12363$1DOkPG)))) '#f))) ((case-lambda ((g$x$12371$1DOkPG) (list g$x$12371$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12363$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12360$1DOkPG)))) '#f))) ((case-lambda ((g$x$12372$1DOkPG) (list g$x$12372$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12360$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12357$1DOkPG)))) '#f))) ((case-lambda ((g$x$12373$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12373$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12373$1DOkPG (g$scheme-stx$9368$1DOkPG 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12357$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$12353$1DOkPG)))) '#f))) g$t$12315$1DOkPG)))) g$t$12313$1DOkPG)))) ((case-lambda ((g$x$12374$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12374$1DOkPG) '()) (begin '#f '()) '#f))) g$t$12313$1DOkPG)))) g$fields$12312$1DOkPG))))) g$f$12311$1DOkPG) g$fields$12309$1DOkPG))))) (g$get-accessors$12149$1DOkPG (case-lambda ((g$foo$12223$1DOkPG g$fields$12224$1DOkPG) (letrec* ((g$gen-name$12225$1DOkPG (case-lambda ((g$x$12307$1DOkPG) (g$datum->syntax$9503$1DOkPG g$foo$12223$1DOkPG (string->symbol (string-append (symbol->string (g$syntax->datum$9504$1DOkPG g$foo$12223$1DOkPG)) '"-" (symbol->string (g$syntax->datum$9504$1DOkPG g$x$12307$1DOkPG))))))))) (map (case-lambda ((g$field$12226$1DOkPG) ((case-lambda ((g$t$12227$1DOkPG) ((case-lambda ((g$ls/false$12228$1DOkPG) (if (if g$ls/false$12228$1DOkPG (begin '#f (apply (case-lambda ((g$name$12229$1DOkPG g$accessor$12230$1DOkPG g$mutator$12231$1DOkPG) (g$id?$9181$1DOkPG g$accessor$12230$1DOkPG))) g$ls/false$12228$1DOkPG)) '#f) (apply (case-lambda ((g$name$12232$1DOkPG g$accessor$12233$1DOkPG g$mutator$12234$1DOkPG) g$accessor$12233$1DOkPG)) g$ls/false$12228$1DOkPG) ((case-lambda ((g$t$12235$1DOkPG) ((case-lambda ((g$ls/false$12236$1DOkPG) (if (if g$ls/false$12236$1DOkPG (begin '#f (apply (case-lambda ((g$name$12237$1DOkPG g$accessor$12238$1DOkPG) (g$id?$9181$1DOkPG g$accessor$12238$1DOkPG))) g$ls/false$12236$1DOkPG)) '#f) (apply (case-lambda ((g$name$12239$1DOkPG g$accessor$12240$1DOkPG) g$accessor$12240$1DOkPG)) g$ls/false$12236$1DOkPG) ((case-lambda ((g$t$12241$1DOkPG) ((case-lambda ((g$ls/false$12242$1DOkPG) (if (if g$ls/false$12242$1DOkPG (begin '#f (apply (case-lambda ((g$name$12243$1DOkPG) (g$id?$9181$1DOkPG g$name$12243$1DOkPG))) g$ls/false$12242$1DOkPG)) '#f) (apply (case-lambda ((g$name$12244$1DOkPG) (g$gen-name$12225$1DOkPG g$name$12244$1DOkPG))) g$ls/false$12242$1DOkPG) ((case-lambda ((g$t$12245$1DOkPG) ((case-lambda ((g$ls/false$12246$1DOkPG) (if (if g$ls/false$12246$1DOkPG (begin '#f (apply (case-lambda ((g$name$12247$1DOkPG) (g$id?$9181$1DOkPG g$name$12247$1DOkPG))) g$ls/false$12246$1DOkPG)) '#f) (apply (case-lambda ((g$name$12248$1DOkPG) (g$gen-name$12225$1DOkPG g$name$12248$1DOkPG))) g$ls/false$12246$1DOkPG) ((case-lambda ((g$t$12249$1DOkPG) ((case-lambda ((g$ls/false$12250$1DOkPG) (if (if g$ls/false$12250$1DOkPG (begin '#f (apply (case-lambda ((g$name$12251$1DOkPG) (g$id?$9181$1DOkPG g$name$12251$1DOkPG))) g$ls/false$12250$1DOkPG)) '#f) (apply (case-lambda ((g$name$12252$1DOkPG) (g$gen-name$12225$1DOkPG g$name$12252$1DOkPG))) g$ls/false$12250$1DOkPG) ((case-lambda ((g$t$12253$1DOkPG) ((case-lambda ((g$ls/false$12254$1DOkPG) (if (if g$ls/false$12254$1DOkPG (begin '#f (apply (case-lambda ((g$others$12255$1DOkPG) '#t)) g$ls/false$12254$1DOkPG)) '#f) (apply (case-lambda ((g$others$12256$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid field spec" g$field$12226$1DOkPG))) g$ls/false$12254$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12253$1DOkPG)))) ((case-lambda ((g$x$12257$1DOkPG) (list g$x$12257$1DOkPG))) g$t$12253$1DOkPG)))) g$t$12249$1DOkPG)))) ((case-lambda ((g$x$12258$1DOkPG) (list g$x$12258$1DOkPG))) g$t$12249$1DOkPG)))) g$t$12245$1DOkPG)))) ((case-lambda ((g$x$12259$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12259$1DOkPG) (begin '#f ((case-lambda ((g$q$12260$1DOkPG) (if g$q$12260$1DOkPG (begin '#f ((case-lambda ((g$r$12261$1DOkPG) (if g$r$12261$1DOkPG (begin '#f (append g$q$12260$1DOkPG g$r$12261$1DOkPG)) '#f))) ((case-lambda ((g$x$12262$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12262$1DOkPG) (begin '#f ((case-lambda ((g$q$12263$1DOkPG) (if g$q$12263$1DOkPG (begin '#f ((case-lambda ((g$r$12264$1DOkPG) (if g$r$12264$1DOkPG (begin '#f (append g$q$12263$1DOkPG g$r$12264$1DOkPG)) '#f))) ((case-lambda ((g$x$12265$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12265$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12262$1DOkPG)))) '#f))) ((case-lambda ((g$x$12266$1DOkPG) (list g$x$12266$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12262$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12259$1DOkPG)))) '#f))) ((case-lambda ((g$x$12267$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12267$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12267$1DOkPG (g$scheme-stx$9368$1DOkPG 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12259$1DOkPG)))) '#f))) g$t$12245$1DOkPG)))) g$t$12241$1DOkPG)))) ((case-lambda ((g$x$12268$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12268$1DOkPG) (begin '#f ((case-lambda ((g$q$12269$1DOkPG) (if g$q$12269$1DOkPG (begin '#f ((case-lambda ((g$r$12270$1DOkPG) (if g$r$12270$1DOkPG (begin '#f (append g$q$12269$1DOkPG g$r$12270$1DOkPG)) '#f))) ((case-lambda ((g$x$12271$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12271$1DOkPG) (begin '#f ((case-lambda ((g$q$12272$1DOkPG) (if g$q$12272$1DOkPG (begin '#f ((case-lambda ((g$r$12273$1DOkPG) (if g$r$12273$1DOkPG (begin '#f (append g$q$12272$1DOkPG g$r$12273$1DOkPG)) '#f))) ((case-lambda ((g$x$12274$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12274$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12271$1DOkPG)))) '#f))) ((case-lambda ((g$x$12275$1DOkPG) (list g$x$12275$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12271$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12268$1DOkPG)))) '#f))) ((case-lambda ((g$x$12276$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12276$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12276$1DOkPG (g$scheme-stx$9368$1DOkPG 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12268$1DOkPG)))) '#f))) g$t$12241$1DOkPG)))) g$t$12235$1DOkPG)))) ((case-lambda ((g$x$12277$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12277$1DOkPG) (begin '#f ((case-lambda ((g$q$12278$1DOkPG) (if g$q$12278$1DOkPG (begin '#f ((case-lambda ((g$r$12279$1DOkPG) (if g$r$12279$1DOkPG (begin '#f (append g$q$12278$1DOkPG g$r$12279$1DOkPG)) '#f))) ((case-lambda ((g$x$12280$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12280$1DOkPG) (begin '#f ((case-lambda ((g$q$12281$1DOkPG) (if g$q$12281$1DOkPG (begin '#f ((case-lambda ((g$r$12282$1DOkPG) (if g$r$12282$1DOkPG (begin '#f (append g$q$12281$1DOkPG g$r$12282$1DOkPG)) '#f))) ((case-lambda ((g$x$12283$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12283$1DOkPG) (begin '#f ((case-lambda ((g$q$12284$1DOkPG) (if g$q$12284$1DOkPG (begin '#f ((case-lambda ((g$r$12285$1DOkPG) (if g$r$12285$1DOkPG (begin '#f (append g$q$12284$1DOkPG g$r$12285$1DOkPG)) '#f))) ((case-lambda ((g$x$12286$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12286$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12283$1DOkPG)))) '#f))) ((case-lambda ((g$x$12287$1DOkPG) (list g$x$12287$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12283$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12280$1DOkPG)))) '#f))) ((case-lambda ((g$x$12288$1DOkPG) (list g$x$12288$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12280$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12277$1DOkPG)))) '#f))) ((case-lambda ((g$x$12289$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12289$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12289$1DOkPG (g$scheme-stx$9368$1DOkPG 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12277$1DOkPG)))) '#f))) g$t$12235$1DOkPG)))) g$t$12227$1DOkPG)))) ((case-lambda ((g$x$12290$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12290$1DOkPG) (begin '#f ((case-lambda ((g$q$12291$1DOkPG) (if g$q$12291$1DOkPG (begin '#f ((case-lambda ((g$r$12292$1DOkPG) (if g$r$12292$1DOkPG (begin '#f (append g$q$12291$1DOkPG g$r$12292$1DOkPG)) '#f))) ((case-lambda ((g$x$12293$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12293$1DOkPG) (begin '#f ((case-lambda ((g$q$12294$1DOkPG) (if g$q$12294$1DOkPG (begin '#f ((case-lambda ((g$r$12295$1DOkPG) (if g$r$12295$1DOkPG (begin '#f (append g$q$12294$1DOkPG g$r$12295$1DOkPG)) '#f))) ((case-lambda ((g$x$12296$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12296$1DOkPG) (begin '#f ((case-lambda ((g$q$12297$1DOkPG) (if g$q$12297$1DOkPG (begin '#f ((case-lambda ((g$r$12298$1DOkPG) (if g$r$12298$1DOkPG (begin '#f (append g$q$12297$1DOkPG g$r$12298$1DOkPG)) '#f))) ((case-lambda ((g$x$12299$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12299$1DOkPG) (begin '#f ((case-lambda ((g$q$12300$1DOkPG) (if g$q$12300$1DOkPG (begin '#f ((case-lambda ((g$r$12301$1DOkPG) (if g$r$12301$1DOkPG (begin '#f (append g$q$12300$1DOkPG g$r$12301$1DOkPG)) '#f))) ((case-lambda ((g$x$12302$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12302$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12299$1DOkPG)))) '#f))) ((case-lambda ((g$x$12303$1DOkPG) (list g$x$12303$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12299$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12296$1DOkPG)))) '#f))) ((case-lambda ((g$x$12304$1DOkPG) (list g$x$12304$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12296$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12293$1DOkPG)))) '#f))) ((case-lambda ((g$x$12305$1DOkPG) (list g$x$12305$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12293$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12290$1DOkPG)))) '#f))) ((case-lambda ((g$x$12306$1DOkPG) (if (g$id?$9181$1DOkPG g$x$12306$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$x$12306$1DOkPG (g$scheme-stx$9368$1DOkPG 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9178$1DOkPG g$x$12290$1DOkPG)))) '#f))) g$t$12227$1DOkPG)))) g$field$12226$1DOkPG))) g$fields$12224$1DOkPG))))) (g$enumerate$12150$1DOkPG (case-lambda ((g$ls$12219$1DOkPG) ((letrec ((g$f$12220$1DOkPG (case-lambda ((g$ls$12221$1DOkPG g$i$12222$1DOkPG) (if (null? g$ls$12221$1DOkPG) '() (cons g$i$12222$1DOkPG (g$f$12220$1DOkPG (cdr g$ls$12221$1DOkPG) (+ g$i$12222$1DOkPG '1)))))))) g$f$12220$1DOkPG) g$ls$12219$1DOkPG '0)))) (g$do-define-record$12151$1DOkPG (case-lambda ((g$namespec$12199$1DOkPG g$clause*$12200$1DOkPG) ((case-lambda ((g$foo$12201$1DOkPG) ((case-lambda ((g$foo-rtd$12202$1DOkPG) ((case-lambda ((g$foo-rcd$12203$1DOkPG) ((case-lambda ((g$protocol$12204$1DOkPG) ((case-lambda ((g$make-foo$12205$1DOkPG) ((case-lambda ((g$fields$12206$1DOkPG) ((case-lambda ((g$idx*$12207$1DOkPG) ((case-lambda ((g$foo-x*$12208$1DOkPG) ((case-lambda ((g$set-foo-x!*$12209$1DOkPG) ((case-lambda ((g$set-foo-idx*$12210$1DOkPG) ((case-lambda ((g$foo?$12211$1DOkPG) ((case-lambda ((g$foo-rtd-code$12212$1DOkPG) ((case-lambda ((g$foo-rcd-code$12213$1DOkPG) ((case-lambda ((g$protocol-code$12214$1DOkPG) ((case-lambda (() (g$bless$9388$1DOkPG (cons 'begin (cons (list 'define g$foo-rtd$12202$1DOkPG g$foo-rtd-code$12212$1DOkPG) (cons (list 'define g$protocol$12204$1DOkPG g$protocol-code$12214$1DOkPG) (cons (list 'define g$foo-rcd$12203$1DOkPG g$foo-rcd-code$12213$1DOkPG) (cons (list 'define-syntax g$foo$12201$1DOkPG (list 'list ''$rtd (list 'syntax g$foo-rtd$12202$1DOkPG) (list 'syntax g$foo-rcd$12203$1DOkPG))) (cons (list 'define g$foo?$12211$1DOkPG (list 'record-predicate g$foo-rtd$12202$1DOkPG)) (cons (list 'define g$make-foo$12205$1DOkPG (list 'record-constructor g$foo-rcd$12203$1DOkPG)) (append (map (case-lambda ((g$foo-x$12215$1DOkPG g$idx$12216$1DOkPG) (list 'define g$foo-x$12215$1DOkPG (list 'record-accessor g$foo-rtd$12202$1DOkPG g$idx$12216$1DOkPG)))) g$foo-x*$12208$1DOkPG g$idx*$12207$1DOkPG) (map (case-lambda ((g$set-foo-x!$12217$1DOkPG g$idx$12218$1DOkPG) (list 'define g$set-foo-x!$12217$1DOkPG (list 'record-mutator g$foo-rtd$12202$1DOkPG g$idx$12218$1DOkPG)))) g$set-foo-x!*$12209$1DOkPG g$set-foo-idx*$12210$1DOkPG))))))))))))))) (g$get-protocol-code$12145$1DOkPG g$clause*$12200$1DOkPG)))) (g$foo-rcd-code$12144$1DOkPG g$clause*$12200$1DOkPG g$foo-rtd$12202$1DOkPG g$protocol$12204$1DOkPG)))) (g$foo-rtd-code$12143$1DOkPG g$foo$12201$1DOkPG g$clause*$12200$1DOkPG)))) (g$get-record-predicate-name$12141$1DOkPG g$namespec$12199$1DOkPG)))) (g$get-mutator-indices$12147$1DOkPG g$fields$12206$1DOkPG)))) (g$get-mutators$12148$1DOkPG g$foo$12201$1DOkPG g$fields$12206$1DOkPG)))) (g$get-accessors$12149$1DOkPG g$foo$12201$1DOkPG g$fields$12206$1DOkPG)))) (g$enumerate$12150$1DOkPG g$fields$12206$1DOkPG)))) (g$get-fields$12146$1DOkPG g$clause*$12200$1DOkPG)))) (g$get-record-constructor-name$12140$1DOkPG g$namespec$12199$1DOkPG)))) (gensym)))) (gensym)))) (gensym)))) (g$get-record-name$12139$1DOkPG g$namespec$12199$1DOkPG))))) (g$verify-clauses$12152$1DOkPG (case-lambda ((g$x$12172$1DOkPG g$cls*$12173$1DOkPG) (letrec* ((g$valid-kwds$12174$1DOkPG (map g$bless$9388$1DOkPG '(fields parent parent-rtd protocol sealed opaque nongenerative))) (g$free-id-member?$12175$1DOkPG (case-lambda ((g$x$12196$1DOkPG g$ls$12197$1DOkPG) (if (pair? g$ls$12197$1DOkPG) (begin '#f ((case-lambda ((g$t$12198$1DOkPG) (if g$t$12198$1DOkPG g$t$12198$1DOkPG (begin '#f (g$free-id-member?$12175$1DOkPG g$x$12196$1DOkPG (cdr g$ls$12197$1DOkPG)))))) (g$free-id=?$9185$1DOkPG g$x$12196$1DOkPG (car g$ls$12197$1DOkPG)))) '#f))))) ((letrec ((g$f$12176$1DOkPG (case-lambda ((g$cls*$12177$1DOkPG g$seen*$12178$1DOkPG) (if (null? g$cls*$12177$1DOkPG) (void) ((case-lambda ((g$t$12179$1DOkPG) ((case-lambda ((g$ls/false$12180$1DOkPG) (if (if g$ls/false$12180$1DOkPG (begin '#f (apply (case-lambda ((g$kwd$12181$1DOkPG g$rest$12182$1DOkPG) '#t)) g$ls/false$12180$1DOkPG)) '#f) (apply (case-lambda ((g$kwd$12183$1DOkPG g$rest$12184$1DOkPG) (if ((case-lambda ((g$t$12185$1DOkPG) (if g$t$12185$1DOkPG g$t$12185$1DOkPG (begin '#f (not (g$free-id-member?$12175$1DOkPG g$kwd$12183$1DOkPG g$valid-kwds$12174$1DOkPG)))))) (not (g$id?$9181$1DOkPG g$kwd$12183$1DOkPG))) (g$syntax-violation$9501$1DOkPG '#f '"not a valid define-record-type keyword" g$kwd$12183$1DOkPG) (if (g$bound-id-member?$9188$1DOkPG g$kwd$12183$1DOkPG g$seen*$12178$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"duplicate use of keyword " g$x$12172$1DOkPG g$kwd$12183$1DOkPG) (g$f$12176$1DOkPG (cdr g$cls*$12177$1DOkPG) (cons g$kwd$12183$1DOkPG g$seen*$12178$1DOkPG)))))) g$ls/false$12180$1DOkPG) ((case-lambda ((g$t$12186$1DOkPG) ((case-lambda ((g$ls/false$12187$1DOkPG) (if (if g$ls/false$12187$1DOkPG (begin '#f (apply (case-lambda ((g$cls$12188$1DOkPG) '#t)) g$ls/false$12187$1DOkPG)) '#f) (apply (case-lambda ((g$cls$12189$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"malformed define-record-type clause" g$cls$12189$1DOkPG))) g$ls/false$12187$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12186$1DOkPG)))) ((case-lambda ((g$x$12190$1DOkPG) (list g$x$12190$1DOkPG))) g$t$12186$1DOkPG)))) g$t$12179$1DOkPG)))) ((case-lambda ((g$x$12191$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12191$1DOkPG) (begin '#f ((case-lambda ((g$q$12192$1DOkPG) (if g$q$12192$1DOkPG (begin '#f ((case-lambda ((g$r$12193$1DOkPG) (if g$r$12193$1DOkPG (begin '#f (append g$q$12192$1DOkPG g$r$12193$1DOkPG)) '#f))) ((case-lambda ((g$x$12194$1DOkPG) (list g$x$12194$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12191$1DOkPG)))) '#f))) ((case-lambda ((g$x$12195$1DOkPG) (list g$x$12195$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12191$1DOkPG)))) '#f))) g$t$12179$1DOkPG)))) (car g$cls*$12177$1DOkPG))))))) g$f$12176$1DOkPG) g$cls*$12173$1DOkPG '())))))) ((case-lambda ((g$t$12153$1DOkPG) ((case-lambda ((g$ls/false$12154$1DOkPG) (if (if g$ls/false$12154$1DOkPG (begin '#f (apply (case-lambda ((g$namespec$12155$1DOkPG g$clause*$12156$1DOkPG) '#t)) g$ls/false$12154$1DOkPG)) '#f) (apply (case-lambda ((g$namespec$12157$1DOkPG g$clause*$12158$1DOkPG) (begin (g$verify-clauses$12152$1DOkPG g$x$12137$1DOkPG g$clause*$12158$1DOkPG) (g$do-define-record$12151$1DOkPG g$namespec$12157$1DOkPG g$clause*$12158$1DOkPG)))) g$ls/false$12154$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12153$1DOkPG)))) ((case-lambda ((g$x$12159$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12159$1DOkPG) (begin '#f ((case-lambda ((g$q$12160$1DOkPG) (if g$q$12160$1DOkPG (begin '#f ((case-lambda ((g$r$12161$1DOkPG) (if g$r$12161$1DOkPG (begin '#f (append g$q$12160$1DOkPG g$r$12161$1DOkPG)) '#f))) ((case-lambda ((g$x$12162$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12162$1DOkPG) (begin '#f ((case-lambda ((g$q$12163$1DOkPG) (if g$q$12163$1DOkPG (begin '#f ((case-lambda ((g$r$12164$1DOkPG) (if g$r$12164$1DOkPG (begin '#f (append g$q$12163$1DOkPG g$r$12164$1DOkPG)) '#f))) ((letrec ((g$f$12165$1DOkPG (case-lambda ((g$x$12166$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12166$1DOkPG) ((case-lambda ((g$cars/f$12167$1DOkPG) (if g$cars/f$12167$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12168$1DOkPG) (if g$cdrs/f$12168$1DOkPG (begin '#f (map cons g$cars/f$12167$1DOkPG g$cdrs/f$12168$1DOkPG)) '#f))) (g$f$12165$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12166$1DOkPG)))) '#f))) ((case-lambda ((g$x$12169$1DOkPG) (list g$x$12169$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12166$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12166$1DOkPG) (list (begin 'clause* '())) '#f)))))) g$f$12165$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$12162$1DOkPG)))) '#f))) ((case-lambda ((g$x$12170$1DOkPG) (list g$x$12170$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12162$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12159$1DOkPG)))) '#f))) ((case-lambda ((g$x$12171$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12159$1DOkPG)))) '#f))) g$t$12153$1DOkPG)))) g$x$12137$1DOkPG))))) (g$define-condition-type-macro$9417$1DOkPG g$define-condition-type-macro$15471$1DOkPG (case-lambda ((g$x$12706$1DOkPG) (letrec* ((g$mkname$12707$1DOkPG (case-lambda ((g$name$12763$1DOkPG g$suffix$12764$1DOkPG) (g$datum->syntax$9503$1DOkPG g$name$12763$1DOkPG (string->symbol (string-append (symbol->string (g$syntax->datum$9504$1DOkPG g$name$12763$1DOkPG)) g$suffix$12764$1DOkPG))))))) ((case-lambda ((g$t$12708$1DOkPG) ((case-lambda ((g$ls/false$12709$1DOkPG) (if (if g$ls/false$12709$1DOkPG (begin '#f (apply (case-lambda ((g$ctxt$12710$1DOkPG g$name$12711$1DOkPG g$super$12712$1DOkPG g$constructor$12713$1DOkPG g$predicate$12714$1DOkPG g$field*$12715$1DOkPG g$accessor*$12716$1DOkPG) (if (g$id?$9181$1DOkPG g$name$12711$1DOkPG) (if (g$id?$9181$1DOkPG g$super$12712$1DOkPG) (if (g$id?$9181$1DOkPG g$constructor$12713$1DOkPG) (if (g$id?$9181$1DOkPG g$predicate$12714$1DOkPG) (if (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$field*$12715$1DOkPG) (begin '#f (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$accessor*$12716$1DOkPG)) '#f) '#f) '#f) '#f) '#f))) g$ls/false$12709$1DOkPG)) '#f) (apply (case-lambda ((g$ctxt$12717$1DOkPG g$name$12718$1DOkPG g$super$12719$1DOkPG g$constructor$12720$1DOkPG g$predicate$12721$1DOkPG g$field*$12722$1DOkPG g$accessor*$12723$1DOkPG) ((case-lambda ((g$aux-accessor*$12724$1DOkPG) (g$bless$9388$1DOkPG (cons 'begin (cons (cons 'define-record-type (cons (list g$name$12718$1DOkPG g$constructor$12720$1DOkPG (gensym)) (cons (list 'parent g$super$12719$1DOkPG) (cons (cons 'fields (map (case-lambda ((g$field$12725$1DOkPG g$aux$12726$1DOkPG) (list 'immutable g$field$12725$1DOkPG g$aux$12726$1DOkPG))) g$field*$12722$1DOkPG g$aux-accessor*$12724$1DOkPG)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$predicate$12721$1DOkPG (list 'condition-predicate (list 'record-type-descriptor g$name$12718$1DOkPG))) (map (case-lambda ((g$accessor$12727$1DOkPG g$aux$12728$1DOkPG) (list 'define g$accessor$12727$1DOkPG (list 'condition-accessor (list 'record-type-descriptor g$name$12718$1DOkPG) g$aux$12728$1DOkPG)))) g$accessor*$12723$1DOkPG g$aux-accessor*$12724$1DOkPG))))))) (map (case-lambda ((g$x$12729$1DOkPG) (gensym))) g$accessor*$12723$1DOkPG)))) g$ls/false$12709$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12708$1DOkPG)))) ((case-lambda ((g$x$12730$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12730$1DOkPG) (begin '#f ((case-lambda ((g$q$12731$1DOkPG) (if g$q$12731$1DOkPG (begin '#f ((case-lambda ((g$r$12732$1DOkPG) (if g$r$12732$1DOkPG (begin '#f (append g$q$12731$1DOkPG g$r$12732$1DOkPG)) '#f))) ((case-lambda ((g$x$12733$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12733$1DOkPG) (begin '#f ((case-lambda ((g$q$12734$1DOkPG) (if g$q$12734$1DOkPG (begin '#f ((case-lambda ((g$r$12735$1DOkPG) (if g$r$12735$1DOkPG (begin '#f (append g$q$12734$1DOkPG g$r$12735$1DOkPG)) '#f))) ((case-lambda ((g$x$12736$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12736$1DOkPG) (begin '#f ((case-lambda ((g$q$12737$1DOkPG) (if g$q$12737$1DOkPG (begin '#f ((case-lambda ((g$r$12738$1DOkPG) (if g$r$12738$1DOkPG (begin '#f (append g$q$12737$1DOkPG g$r$12738$1DOkPG)) '#f))) ((case-lambda ((g$x$12739$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12739$1DOkPG) (begin '#f ((case-lambda ((g$q$12740$1DOkPG) (if g$q$12740$1DOkPG (begin '#f ((case-lambda ((g$r$12741$1DOkPG) (if g$r$12741$1DOkPG (begin '#f (append g$q$12740$1DOkPG g$r$12741$1DOkPG)) '#f))) ((case-lambda ((g$x$12742$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12742$1DOkPG) (begin '#f ((case-lambda ((g$q$12743$1DOkPG) (if g$q$12743$1DOkPG (begin '#f ((case-lambda ((g$r$12744$1DOkPG) (if g$r$12744$1DOkPG (begin '#f (append g$q$12743$1DOkPG g$r$12744$1DOkPG)) '#f))) ((letrec ((g$f$12745$1DOkPG (case-lambda ((g$x$12746$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12746$1DOkPG) ((case-lambda ((g$cars/f$12747$1DOkPG) (if g$cars/f$12747$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12748$1DOkPG) (if g$cdrs/f$12748$1DOkPG (begin '#f (map cons g$cars/f$12747$1DOkPG g$cdrs/f$12748$1DOkPG)) '#f))) (g$f$12745$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12746$1DOkPG)))) '#f))) ((case-lambda ((g$x$12749$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12749$1DOkPG) (begin '#f ((case-lambda ((g$q$12750$1DOkPG) (if g$q$12750$1DOkPG (begin '#f ((case-lambda ((g$r$12751$1DOkPG) (if g$r$12751$1DOkPG (begin '#f (append g$q$12750$1DOkPG g$r$12751$1DOkPG)) '#f))) ((case-lambda ((g$x$12752$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12752$1DOkPG) (begin '#f ((case-lambda ((g$q$12753$1DOkPG) (if g$q$12753$1DOkPG (begin '#f ((case-lambda ((g$r$12754$1DOkPG) (if g$r$12754$1DOkPG (begin '#f (append g$q$12753$1DOkPG g$r$12754$1DOkPG)) '#f))) ((case-lambda ((g$x$12755$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12755$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12752$1DOkPG)))) '#f))) ((case-lambda ((g$x$12756$1DOkPG) (list g$x$12756$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12752$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12749$1DOkPG)))) '#f))) ((case-lambda ((g$x$12757$1DOkPG) (list g$x$12757$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12749$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$12746$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12746$1DOkPG) (list (begin 'field* '()) (begin 'accessor* '())) '#f)))))) g$f$12745$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$12742$1DOkPG)))) '#f))) ((case-lambda ((g$x$12758$1DOkPG) (list g$x$12758$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12742$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12739$1DOkPG)))) '#f))) ((case-lambda ((g$x$12759$1DOkPG) (list g$x$12759$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12739$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12736$1DOkPG)))) '#f))) ((case-lambda ((g$x$12760$1DOkPG) (list g$x$12760$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12736$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12733$1DOkPG)))) '#f))) ((case-lambda ((g$x$12761$1DOkPG) (list g$x$12761$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12733$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12730$1DOkPG)))) '#f))) ((case-lambda ((g$x$12762$1DOkPG) (list g$x$12762$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12730$1DOkPG)))) '#f))) g$t$12708$1DOkPG)))) g$x$12706$1DOkPG))))) (g$incorrect-usage-macro$9418$1DOkPG g$incorrect-usage-macro$15472$1DOkPG (case-lambda ((g$e$12765$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"incorrect usage of auxiliary keyword" g$e$12765$1DOkPG)))) (g$parameterize-transformer$9419$1DOkPG g$parameterize-transformer$15473$1DOkPG (case-lambda ((g$e$12766$1DOkPG g$r$12767$1DOkPG g$mr$12768$1DOkPG) ((case-lambda ((g$t$12769$1DOkPG) ((case-lambda ((g$ls/false$12770$1DOkPG) (if (if g$ls/false$12770$1DOkPG (begin '#f (apply (case-lambda ((g$b$12771$1DOkPG g$b*$12772$1DOkPG) '#t)) g$ls/false$12770$1DOkPG)) '#f) (apply (case-lambda ((g$b$12773$1DOkPG g$b*$12774$1DOkPG) (g$chi-internal$9447$1DOkPG (cons g$b$12773$1DOkPG g$b*$12774$1DOkPG) g$r$12767$1DOkPG g$mr$12768$1DOkPG))) g$ls/false$12770$1DOkPG) ((case-lambda ((g$t$12775$1DOkPG) ((case-lambda ((g$ls/false$12776$1DOkPG) (if (if g$ls/false$12776$1DOkPG (begin '#f (apply (case-lambda ((g$olhs*$12777$1DOkPG g$orhs*$12778$1DOkPG g$b$12779$1DOkPG g$b*$12780$1DOkPG) '#t)) g$ls/false$12776$1DOkPG)) '#f) (apply (case-lambda ((g$olhs*$12781$1DOkPG g$orhs*$12782$1DOkPG g$b$12783$1DOkPG g$b*$12784$1DOkPG) ((case-lambda ((g$lhs*$12785$1DOkPG g$rhs*$12786$1DOkPG g$t*$12787$1DOkPG g$swap$12788$1DOkPG) (g$build-let$9117$1DOkPG '#f (append g$lhs*$12785$1DOkPG g$rhs*$12786$1DOkPG) (append (g$chi-expr*$9436$1DOkPG g$olhs*$12781$1DOkPG g$r$12767$1DOkPG g$mr$12768$1DOkPG) (g$chi-expr*$9436$1DOkPG g$orhs*$12782$1DOkPG g$r$12767$1DOkPG g$mr$12768$1DOkPG)) (g$build-let$9117$1DOkPG '#f (list g$swap$12788$1DOkPG) (list (g$build-lambda$9115$1DOkPG '#f '() (g$build-sequence$9118$1DOkPG '#f (map (case-lambda ((g$t$12789$1DOkPG g$lhs$12790$1DOkPG g$rhs$12791$1DOkPG) (g$build-let$9117$1DOkPG '#f (list g$t$12789$1DOkPG) (list (list g$lhs$12790$1DOkPG)) (g$build-sequence$9118$1DOkPG '#f (list (list g$lhs$12790$1DOkPG g$rhs$12791$1DOkPG) (list 'set! g$rhs$12791$1DOkPG g$t$12789$1DOkPG)))))) g$t*$12787$1DOkPG g$lhs*$12785$1DOkPG g$rhs*$12786$1DOkPG)))) (list '(primitive dynamic-wind) g$swap$12788$1DOkPG (g$build-lambda$9115$1DOkPG '#f '() (g$chi-internal$9447$1DOkPG (cons g$b$12783$1DOkPG g$b*$12784$1DOkPG) g$r$12767$1DOkPG g$mr$12768$1DOkPG)) g$swap$12788$1DOkPG))))) (map (case-lambda ((g$x$12792$1DOkPG) (g$gen-lexical$9128$1DOkPG 'lhs))) g$olhs*$12781$1DOkPG) (map (case-lambda ((g$x$12793$1DOkPG) (g$gen-lexical$9128$1DOkPG 'rhs))) g$olhs*$12781$1DOkPG) (map (case-lambda ((g$x$12794$1DOkPG) (g$gen-lexical$9128$1DOkPG 't))) g$olhs*$12781$1DOkPG) (g$gen-lexical$9128$1DOkPG 'swap)))) g$ls/false$12776$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12775$1DOkPG)))) ((case-lambda ((g$x$12795$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12795$1DOkPG) (begin '#f ((case-lambda ((g$q$12796$1DOkPG) (if g$q$12796$1DOkPG (begin '#f ((case-lambda ((g$r$12797$1DOkPG) (if g$r$12797$1DOkPG (begin '#f (append g$q$12796$1DOkPG g$r$12797$1DOkPG)) '#f))) ((case-lambda ((g$x$12798$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12798$1DOkPG) (begin '#f ((case-lambda ((g$q$12799$1DOkPG) (if g$q$12799$1DOkPG (begin '#f ((case-lambda ((g$r$12800$1DOkPG) (if g$r$12800$1DOkPG (begin '#f (append g$q$12799$1DOkPG g$r$12800$1DOkPG)) '#f))) ((case-lambda ((g$x$12801$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12801$1DOkPG) (begin '#f ((case-lambda ((g$q$12802$1DOkPG) (if g$q$12802$1DOkPG (begin '#f ((case-lambda ((g$r$12803$1DOkPG) (if g$r$12803$1DOkPG (begin '#f (append g$q$12802$1DOkPG g$r$12803$1DOkPG)) '#f))) ((letrec ((g$f$12804$1DOkPG (case-lambda ((g$x$12805$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12805$1DOkPG) ((case-lambda ((g$cars/f$12806$1DOkPG) (if g$cars/f$12806$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12807$1DOkPG) (if g$cdrs/f$12807$1DOkPG (begin '#f (map cons g$cars/f$12806$1DOkPG g$cdrs/f$12807$1DOkPG)) '#f))) (g$f$12804$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12805$1DOkPG)))) '#f))) ((case-lambda ((g$x$12808$1DOkPG) (list g$x$12808$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12805$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12805$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$12804$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$12801$1DOkPG)))) '#f))) ((case-lambda ((g$x$12809$1DOkPG) (list g$x$12809$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12801$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12798$1DOkPG)))) '#f))) ((letrec ((g$f$12810$1DOkPG (case-lambda ((g$x$12811$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12811$1DOkPG) ((case-lambda ((g$cars/f$12812$1DOkPG) (if g$cars/f$12812$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12813$1DOkPG) (if g$cdrs/f$12813$1DOkPG (begin '#f (map cons g$cars/f$12812$1DOkPG g$cdrs/f$12813$1DOkPG)) '#f))) (g$f$12810$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12811$1DOkPG)))) '#f))) ((case-lambda ((g$x$12814$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12814$1DOkPG) (begin '#f ((case-lambda ((g$q$12815$1DOkPG) (if g$q$12815$1DOkPG (begin '#f ((case-lambda ((g$r$12816$1DOkPG) (if g$r$12816$1DOkPG (begin '#f (append g$q$12815$1DOkPG g$r$12816$1DOkPG)) '#f))) ((case-lambda ((g$x$12817$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12817$1DOkPG) (begin '#f ((case-lambda ((g$q$12818$1DOkPG) (if g$q$12818$1DOkPG (begin '#f ((case-lambda ((g$r$12819$1DOkPG) (if g$r$12819$1DOkPG (begin '#f (append g$q$12818$1DOkPG g$r$12819$1DOkPG)) '#f))) ((case-lambda ((g$x$12820$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12820$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12817$1DOkPG)))) '#f))) ((case-lambda ((g$x$12821$1DOkPG) (list g$x$12821$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12817$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12814$1DOkPG)))) '#f))) ((case-lambda ((g$x$12822$1DOkPG) (list g$x$12822$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12814$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$12811$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12811$1DOkPG) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f)))))) g$f$12810$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$12798$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12795$1DOkPG)))) '#f))) ((case-lambda ((g$x$12823$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12795$1DOkPG)))) '#f))) g$t$12775$1DOkPG)))) g$t$12769$1DOkPG)))) ((case-lambda ((g$x$12824$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12824$1DOkPG) (begin '#f ((case-lambda ((g$q$12825$1DOkPG) (if g$q$12825$1DOkPG (begin '#f ((case-lambda ((g$r$12826$1DOkPG) (if g$r$12826$1DOkPG (begin '#f (append g$q$12825$1DOkPG g$r$12826$1DOkPG)) '#f))) ((case-lambda ((g$x$12827$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12827$1DOkPG) (begin '#f ((case-lambda ((g$q$12828$1DOkPG) (if g$q$12828$1DOkPG (begin '#f ((case-lambda ((g$r$12829$1DOkPG) (if g$r$12829$1DOkPG (begin '#f (append g$q$12828$1DOkPG g$r$12829$1DOkPG)) '#f))) ((case-lambda ((g$x$12830$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12830$1DOkPG) (begin '#f ((case-lambda ((g$q$12831$1DOkPG) (if g$q$12831$1DOkPG (begin '#f ((case-lambda ((g$r$12832$1DOkPG) (if g$r$12832$1DOkPG (begin '#f (append g$q$12831$1DOkPG g$r$12832$1DOkPG)) '#f))) ((letrec ((g$f$12833$1DOkPG (case-lambda ((g$x$12834$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12834$1DOkPG) ((case-lambda ((g$cars/f$12835$1DOkPG) (if g$cars/f$12835$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12836$1DOkPG) (if g$cdrs/f$12836$1DOkPG (begin '#f (map cons g$cars/f$12835$1DOkPG g$cdrs/f$12836$1DOkPG)) '#f))) (g$f$12833$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12834$1DOkPG)))) '#f))) ((case-lambda ((g$x$12837$1DOkPG) (list g$x$12837$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12834$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12834$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$12833$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$12830$1DOkPG)))) '#f))) ((case-lambda ((g$x$12838$1DOkPG) (list g$x$12838$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12830$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12827$1DOkPG)))) '#f))) ((case-lambda ((g$x$12839$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12839$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-car$9178$1DOkPG g$x$12827$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12824$1DOkPG)))) '#f))) ((case-lambda ((g$x$12840$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12824$1DOkPG)))) '#f))) g$t$12769$1DOkPG)))) g$e$12766$1DOkPG)))) (g$foreign-call-transformer$9420$1DOkPG g$foreign-call-transformer$15474$1DOkPG (case-lambda ((g$e$12841$1DOkPG g$r$12842$1DOkPG g$mr$12843$1DOkPG) ((case-lambda ((g$t$12844$1DOkPG) ((case-lambda ((g$ls/false$12845$1DOkPG) (if (if g$ls/false$12845$1DOkPG (begin '#f (apply (case-lambda ((g$name$12846$1DOkPG g$arg*$12847$1DOkPG) '#t)) g$ls/false$12845$1DOkPG)) '#f) (apply (case-lambda ((g$name$12848$1DOkPG g$arg*$12849$1DOkPG) (cons 'foreign-call (cons (g$chi-expr$9438$1DOkPG g$name$12848$1DOkPG g$r$12842$1DOkPG g$mr$12843$1DOkPG) (g$chi-expr*$9436$1DOkPG g$arg*$12849$1DOkPG g$r$12842$1DOkPG g$mr$12843$1DOkPG))))) g$ls/false$12845$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12844$1DOkPG)))) ((case-lambda ((g$x$12850$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12850$1DOkPG) (begin '#f ((case-lambda ((g$q$12851$1DOkPG) (if g$q$12851$1DOkPG (begin '#f ((case-lambda ((g$r$12852$1DOkPG) (if g$r$12852$1DOkPG (begin '#f (append g$q$12851$1DOkPG g$r$12852$1DOkPG)) '#f))) ((case-lambda ((g$x$12853$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12853$1DOkPG) (begin '#f ((case-lambda ((g$q$12854$1DOkPG) (if g$q$12854$1DOkPG (begin '#f ((case-lambda ((g$r$12855$1DOkPG) (if g$r$12855$1DOkPG (begin '#f (append g$q$12854$1DOkPG g$r$12855$1DOkPG)) '#f))) ((letrec ((g$f$12856$1DOkPG (case-lambda ((g$x$12857$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12857$1DOkPG) ((case-lambda ((g$cars/f$12858$1DOkPG) (if g$cars/f$12858$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12859$1DOkPG) (if g$cdrs/f$12859$1DOkPG (begin '#f (map cons g$cars/f$12858$1DOkPG g$cdrs/f$12859$1DOkPG)) '#f))) (g$f$12856$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12857$1DOkPG)))) '#f))) ((case-lambda ((g$x$12860$1DOkPG) (list g$x$12860$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12857$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12857$1DOkPG) (list (begin 'arg* '())) '#f)))))) g$f$12856$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$12853$1DOkPG)))) '#f))) ((case-lambda ((g$x$12861$1DOkPG) (list g$x$12861$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12853$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12850$1DOkPG)))) '#f))) ((case-lambda ((g$x$12862$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$12850$1DOkPG)))) '#f))) g$t$12844$1DOkPG)))) g$e$12841$1DOkPG)))) (g$convert-pattern$9421$1DOkPG g$convert-pattern$15475$1DOkPG (case-lambda ((g$pattern$12863$1DOkPG g$keys$12864$1DOkPG) (letrec* ((g$cvt*$12865$1DOkPG (case-lambda ((g$p*$12988$1DOkPG g$n$12989$1DOkPG g$ids$12990$1DOkPG) (if (null? g$p*$12988$1DOkPG) (values '() g$ids$12990$1DOkPG) (call-with-values (case-lambda (() (g$cvt*$12865$1DOkPG (cdr g$p*$12988$1DOkPG) g$n$12989$1DOkPG g$ids$12990$1DOkPG))) (case-lambda ((g$y$12993$1DOkPG g$ids$12994$1DOkPG) ((case-lambda ((g$ids$12995$1DOkPG g$y$12996$1DOkPG) (call-with-values (case-lambda (() (g$cvt$12866$1DOkPG (car g$p*$12988$1DOkPG) g$n$12989$1DOkPG g$ids$12995$1DOkPG))) (case-lambda ((g$x$12999$1DOkPG g$ids$13000$1DOkPG) ((case-lambda ((g$ids$13001$1DOkPG g$x$13002$1DOkPG) (values (cons g$x$13002$1DOkPG g$y$12996$1DOkPG) g$ids$13001$1DOkPG))) g$ids$13000$1DOkPG g$x$12999$1DOkPG)))))) g$ids$12994$1DOkPG g$y$12993$1DOkPG)))))))) (g$cvt$12866$1DOkPG (case-lambda ((g$p$12867$1DOkPG g$n$12868$1DOkPG g$ids$12869$1DOkPG) ((case-lambda ((g$t$12870$1DOkPG) ((case-lambda ((g$ls/false$12871$1DOkPG) (if (if g$ls/false$12871$1DOkPG (begin '#f (apply (case-lambda ((g$id$12872$1DOkPG) (g$id?$9181$1DOkPG g$id$12872$1DOkPG))) g$ls/false$12871$1DOkPG)) '#f) (apply (case-lambda ((g$id$12873$1DOkPG) (if (g$bound-id-member?$9188$1DOkPG g$p$12867$1DOkPG g$keys$12864$1DOkPG) (values (vector 'free-id g$p$12867$1DOkPG) g$ids$12869$1DOkPG) (if (g$free-id=?$9185$1DOkPG g$p$12867$1DOkPG (g$scheme-stx$9368$1DOkPG '_)) (values '_ g$ids$12869$1DOkPG) (values 'any (cons (cons g$p$12867$1DOkPG g$n$12868$1DOkPG) g$ids$12869$1DOkPG)))))) g$ls/false$12871$1DOkPG) ((case-lambda ((g$t$12874$1DOkPG) ((case-lambda ((g$ls/false$12875$1DOkPG) (if (if g$ls/false$12875$1DOkPG (begin '#f (apply (case-lambda ((g$p$12876$1DOkPG g$dots$12877$1DOkPG) (g$ellipsis?$9423$1DOkPG g$dots$12877$1DOkPG))) g$ls/false$12875$1DOkPG)) '#f) (apply (case-lambda ((g$p$12878$1DOkPG g$dots$12879$1DOkPG) (call-with-values (case-lambda (() (g$cvt$12866$1DOkPG g$p$12878$1DOkPG (+ g$n$12868$1DOkPG '1) g$ids$12869$1DOkPG))) (case-lambda ((g$p$12882$1DOkPG g$ids$12883$1DOkPG) ((case-lambda ((g$ids$12884$1DOkPG g$p$12885$1DOkPG) (values (if (eq? g$p$12885$1DOkPG 'any) 'each-any (vector 'each g$p$12885$1DOkPG)) g$ids$12884$1DOkPG))) g$ids$12883$1DOkPG g$p$12882$1DOkPG)))))) g$ls/false$12875$1DOkPG) ((case-lambda ((g$t$12886$1DOkPG) ((case-lambda ((g$ls/false$12887$1DOkPG) (if (if g$ls/false$12887$1DOkPG (begin '#f (apply (case-lambda ((g$x$12888$1DOkPG g$dots$12889$1DOkPG g$ys$12890$1DOkPG g$z$12891$1DOkPG) (g$ellipsis?$9423$1DOkPG g$dots$12889$1DOkPG))) g$ls/false$12887$1DOkPG)) '#f) (apply (case-lambda ((g$x$12892$1DOkPG g$dots$12893$1DOkPG g$ys$12894$1DOkPG g$z$12895$1DOkPG) (call-with-values (case-lambda (() (g$cvt$12866$1DOkPG g$z$12895$1DOkPG g$n$12868$1DOkPG g$ids$12869$1DOkPG))) (case-lambda ((g$z$12898$1DOkPG g$ids$12899$1DOkPG) ((case-lambda ((g$ids$12900$1DOkPG g$z$12901$1DOkPG) (call-with-values (case-lambda (() (g$cvt*$12865$1DOkPG g$ys$12894$1DOkPG g$n$12868$1DOkPG g$ids$12900$1DOkPG))) (case-lambda ((g$ys$12904$1DOkPG g$ids$12905$1DOkPG) ((case-lambda ((g$ids$12906$1DOkPG g$ys$12907$1DOkPG) (call-with-values (case-lambda (() (g$cvt$12866$1DOkPG g$x$12892$1DOkPG (+ g$n$12868$1DOkPG '1) g$ids$12906$1DOkPG))) (case-lambda ((g$x$12910$1DOkPG g$ids$12911$1DOkPG) ((case-lambda ((g$ids$12912$1DOkPG g$x$12913$1DOkPG) (values (vector 'each+ g$x$12913$1DOkPG (reverse g$ys$12907$1DOkPG) g$z$12901$1DOkPG) g$ids$12912$1DOkPG))) g$ids$12911$1DOkPG g$x$12910$1DOkPG)))))) g$ids$12905$1DOkPG g$ys$12904$1DOkPG)))))) g$ids$12899$1DOkPG g$z$12898$1DOkPG)))))) g$ls/false$12887$1DOkPG) ((case-lambda ((g$t$12914$1DOkPG) ((case-lambda ((g$ls/false$12915$1DOkPG) (if (if g$ls/false$12915$1DOkPG (begin '#f (apply (case-lambda ((g$x$12916$1DOkPG g$y$12917$1DOkPG) '#t)) g$ls/false$12915$1DOkPG)) '#f) (apply (case-lambda ((g$x$12918$1DOkPG g$y$12919$1DOkPG) (call-with-values (case-lambda (() (g$cvt$12866$1DOkPG g$y$12919$1DOkPG g$n$12868$1DOkPG g$ids$12869$1DOkPG))) (case-lambda ((g$y$12922$1DOkPG g$ids$12923$1DOkPG) ((case-lambda ((g$ids$12924$1DOkPG g$y$12925$1DOkPG) (call-with-values (case-lambda (() (g$cvt$12866$1DOkPG g$x$12918$1DOkPG g$n$12868$1DOkPG g$ids$12924$1DOkPG))) (case-lambda ((g$x$12928$1DOkPG g$ids$12929$1DOkPG) ((case-lambda ((g$ids$12930$1DOkPG g$x$12931$1DOkPG) (values (cons g$x$12931$1DOkPG g$y$12925$1DOkPG) g$ids$12930$1DOkPG))) g$ids$12929$1DOkPG g$x$12928$1DOkPG)))))) g$ids$12923$1DOkPG g$y$12922$1DOkPG)))))) g$ls/false$12915$1DOkPG) ((case-lambda ((g$t$12932$1DOkPG) ((case-lambda ((g$ls/false$12933$1DOkPG) (if (if g$ls/false$12933$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12933$1DOkPG)) '#f) (apply (case-lambda (() (values '() g$ids$12869$1DOkPG))) g$ls/false$12933$1DOkPG) ((case-lambda ((g$t$12934$1DOkPG) ((case-lambda ((g$ls/false$12935$1DOkPG) (if (if g$ls/false$12935$1DOkPG (begin '#f (apply (case-lambda ((g$p$12936$1DOkPG) (not (g$stx?$9153$1DOkPG g$p$12936$1DOkPG)))) g$ls/false$12935$1DOkPG)) '#f) (apply (case-lambda ((g$p$12937$1DOkPG) (call-with-values (case-lambda (() (g$cvt$12866$1DOkPG g$p$12937$1DOkPG g$n$12868$1DOkPG g$ids$12869$1DOkPG))) (case-lambda ((g$p$12940$1DOkPG g$ids$12941$1DOkPG) ((case-lambda ((g$ids$12942$1DOkPG g$p$12943$1DOkPG) (values (vector 'vector g$p$12943$1DOkPG) g$ids$12942$1DOkPG))) g$ids$12941$1DOkPG g$p$12940$1DOkPG)))))) g$ls/false$12935$1DOkPG) ((case-lambda ((g$t$12944$1DOkPG) ((case-lambda ((g$ls/false$12945$1DOkPG) (if (if g$ls/false$12945$1DOkPG (begin '#f (apply (case-lambda ((g$datum$12946$1DOkPG) '#t)) g$ls/false$12945$1DOkPG)) '#f) (apply (case-lambda ((g$datum$12947$1DOkPG) (values (vector 'atom (g$stx->datum$9192$1DOkPG g$datum$12947$1DOkPG)) g$ids$12869$1DOkPG))) g$ls/false$12945$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$12944$1DOkPG)))) ((case-lambda ((g$x$12948$1DOkPG) (list g$x$12948$1DOkPG))) g$t$12944$1DOkPG)))) g$t$12934$1DOkPG)))) ((case-lambda ((g$x$12949$1DOkPG) (if (g$syntax-vector?$9175$1DOkPG g$x$12949$1DOkPG) (begin '#f ((letrec ((g$f$12950$1DOkPG (case-lambda ((g$x$12951$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12951$1DOkPG) ((case-lambda ((g$cars/f$12952$1DOkPG) (if g$cars/f$12952$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$12953$1DOkPG) (if g$cdrs/f$12953$1DOkPG (begin '#f (map cons g$cars/f$12952$1DOkPG g$cdrs/f$12953$1DOkPG)) '#f))) (g$f$12950$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12951$1DOkPG)))) '#f))) ((case-lambda ((g$x$12954$1DOkPG) (list g$x$12954$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12951$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$12951$1DOkPG) (list (begin 'p '())) '#f)))))) g$f$12950$1DOkPG) (g$syntax-vector->list$9173$1DOkPG g$x$12949$1DOkPG))) '#f))) g$t$12934$1DOkPG)))) g$t$12932$1DOkPG)))) ((case-lambda ((g$x$12955$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12955$1DOkPG) '()) (begin '#f '()) '#f))) g$t$12932$1DOkPG)))) g$t$12914$1DOkPG)))) ((case-lambda ((g$x$12956$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12956$1DOkPG) (begin '#f ((case-lambda ((g$q$12957$1DOkPG) (if g$q$12957$1DOkPG (begin '#f ((case-lambda ((g$r$12958$1DOkPG) (if g$r$12958$1DOkPG (begin '#f (append g$q$12957$1DOkPG g$r$12958$1DOkPG)) '#f))) ((case-lambda ((g$x$12959$1DOkPG) (list g$x$12959$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$12956$1DOkPG)))) '#f))) ((case-lambda ((g$x$12960$1DOkPG) (list g$x$12960$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12956$1DOkPG)))) '#f))) g$t$12914$1DOkPG)))) g$t$12886$1DOkPG)))) ((case-lambda ((g$x$12961$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12961$1DOkPG) (begin '#f ((case-lambda ((g$q$12962$1DOkPG) (if g$q$12962$1DOkPG (begin '#f ((case-lambda ((g$r$12963$1DOkPG) (if g$r$12963$1DOkPG (begin '#f (append g$q$12962$1DOkPG g$r$12963$1DOkPG)) '#f))) ((case-lambda ((g$x$12964$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12964$1DOkPG) (begin '#f ((case-lambda ((g$q$12965$1DOkPG) (if g$q$12965$1DOkPG (begin '#f ((case-lambda ((g$r$12966$1DOkPG) (if g$r$12966$1DOkPG (begin '#f (append g$q$12965$1DOkPG g$r$12966$1DOkPG)) '#f))) ((letrec ((g$f$12967$1DOkPG (case-lambda ((g$x$12970$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12970$1DOkPG) ((case-lambda ((g$cars/f$12971$1DOkPG) (if g$cars/f$12971$1DOkPG (begin '#f ((case-lambda ((g$d/f$12972$1DOkPG) (if g$d/f$12972$1DOkPG (begin '#f (cons (map cons g$cars/f$12971$1DOkPG (car g$d/f$12972$1DOkPG)) (cdr g$d/f$12972$1DOkPG))) '#f))) (g$f$12967$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$12970$1DOkPG)))) '#f))) ((case-lambda ((g$x$12973$1DOkPG) (list g$x$12973$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12970$1DOkPG))) ((case-lambda ((g$d$12974$1DOkPG) (if g$d$12974$1DOkPG (begin '#f (cons (list (begin 'ys '())) g$d$12974$1DOkPG)) '#f))) ((case-lambda ((g$x$12975$1DOkPG) (list g$x$12975$1DOkPG))) g$x$12970$1DOkPG))))))) (case-lambda ((g$x$12968$1DOkPG) ((case-lambda ((g$x$12969$1DOkPG) (if g$x$12969$1DOkPG (begin '#f (append (car g$x$12969$1DOkPG) (cdr g$x$12969$1DOkPG))) '#f))) (g$f$12967$1DOkPG g$x$12968$1DOkPG))))) (g$syntax-cdr$9179$1DOkPG g$x$12964$1DOkPG)))) '#f))) ((case-lambda ((g$x$12976$1DOkPG) (list g$x$12976$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12964$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12961$1DOkPG)))) '#f))) ((case-lambda ((g$x$12977$1DOkPG) (list g$x$12977$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12961$1DOkPG)))) '#f))) g$t$12886$1DOkPG)))) g$t$12874$1DOkPG)))) ((case-lambda ((g$x$12978$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12978$1DOkPG) (begin '#f ((case-lambda ((g$q$12979$1DOkPG) (if g$q$12979$1DOkPG (begin '#f ((case-lambda ((g$r$12980$1DOkPG) (if g$r$12980$1DOkPG (begin '#f (append g$q$12979$1DOkPG g$r$12980$1DOkPG)) '#f))) ((case-lambda ((g$x$12981$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$12981$1DOkPG) (begin '#f ((case-lambda ((g$q$12982$1DOkPG) (if g$q$12982$1DOkPG (begin '#f ((case-lambda ((g$r$12983$1DOkPG) (if g$r$12983$1DOkPG (begin '#f (append g$q$12982$1DOkPG g$r$12983$1DOkPG)) '#f))) ((case-lambda ((g$x$12984$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$12984$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12981$1DOkPG)))) '#f))) ((case-lambda ((g$x$12985$1DOkPG) (list g$x$12985$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12981$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$12978$1DOkPG)))) '#f))) ((case-lambda ((g$x$12986$1DOkPG) (list g$x$12986$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$12978$1DOkPG)))) '#f))) g$t$12874$1DOkPG)))) g$t$12870$1DOkPG)))) ((case-lambda ((g$x$12987$1DOkPG) (list g$x$12987$1DOkPG))) g$t$12870$1DOkPG)))) g$p$12867$1DOkPG))))) (g$cvt$12866$1DOkPG g$pattern$12863$1DOkPG '0 '()))))) (g$syntax-dispatch$9422$1DOkPG g$syntax-dispatch$15476$1DOkPG (case-lambda ((g$e$13003$1DOkPG g$p$13004$1DOkPG) (letrec* ((g$stx^$13005$1DOkPG (case-lambda ((g$e$13113$1DOkPG g$m*$13114$1DOkPG g$s*$13115$1DOkPG g$ae*$13116$1DOkPG) (if (if (null? g$m*$13114$1DOkPG) (begin '#f (null? g$s*$13115$1DOkPG)) '#f) g$e$13113$1DOkPG (g$mkstx$9169$1DOkPG g$e$13113$1DOkPG g$m*$13114$1DOkPG g$s*$13115$1DOkPG g$ae*$13116$1DOkPG))))) (g$match-each$13006$1DOkPG (case-lambda ((g$e$13097$1DOkPG g$p$13098$1DOkPG g$m*$13099$1DOkPG g$s*$13100$1DOkPG g$ae*$13101$1DOkPG) (if (pair? g$e$13097$1DOkPG) ((case-lambda ((g$first$13102$1DOkPG) (if g$first$13102$1DOkPG (begin '#f ((case-lambda ((g$rest$13103$1DOkPG) (if g$rest$13103$1DOkPG (begin '#f (cons g$first$13102$1DOkPG g$rest$13103$1DOkPG)) '#f))) (g$match-each$13006$1DOkPG (cdr g$e$13097$1DOkPG) g$p$13098$1DOkPG g$m*$13099$1DOkPG g$s*$13100$1DOkPG g$ae*$13101$1DOkPG))) '#f))) (g$match$13012$1DOkPG (car g$e$13097$1DOkPG) g$p$13098$1DOkPG g$m*$13099$1DOkPG g$s*$13100$1DOkPG g$ae*$13101$1DOkPG '())) (if (null? g$e$13097$1DOkPG) '() (if (g$stx?$9153$1DOkPG g$e$13097$1DOkPG) (call-with-values (case-lambda (() (g$join-wraps$9168$1DOkPG g$m*$13099$1DOkPG g$s*$13100$1DOkPG g$ae*$13101$1DOkPG g$e$13097$1DOkPG))) (case-lambda ((g$m*$13107$1DOkPG g$s*$13108$1DOkPG g$ae*$13109$1DOkPG) ((case-lambda ((g$ae*$13110$1DOkPG g$s*$13111$1DOkPG g$m*$13112$1DOkPG) (g$match-each$13006$1DOkPG (g$stx-expr$9155$1DOkPG g$e$13097$1DOkPG) g$p$13098$1DOkPG g$m*$13112$1DOkPG g$s*$13111$1DOkPG g$ae*$13110$1DOkPG))) g$ae*$13109$1DOkPG g$s*$13108$1DOkPG g$m*$13107$1DOkPG)))) (if (annotation? g$e$13097$1DOkPG) (g$match-each$13006$1DOkPG (annotation-expression g$e$13097$1DOkPG) g$p$13098$1DOkPG g$m*$13099$1DOkPG g$s*$13100$1DOkPG g$ae*$13101$1DOkPG) '#f))))))) (g$match-each+$13007$1DOkPG (case-lambda ((g$e$13065$1DOkPG g$x-pat$13066$1DOkPG g$y-pat$13067$1DOkPG g$z-pat$13068$1DOkPG g$m*$13069$1DOkPG g$s*$13070$1DOkPG g$ae*$13071$1DOkPG g$r$13072$1DOkPG) ((letrec ((g$f$13073$1DOkPG (case-lambda ((g$e$13074$1DOkPG g$m*$13075$1DOkPG g$s*$13076$1DOkPG g$ae*$13077$1DOkPG) (if (pair? g$e$13074$1DOkPG) (call-with-values (case-lambda (() (g$f$13073$1DOkPG (cdr g$e$13074$1DOkPG) g$m*$13075$1DOkPG g$s*$13076$1DOkPG g$ae*$13077$1DOkPG))) (case-lambda ((g$xr*$13081$1DOkPG g$y-pat$13082$1DOkPG g$r$13083$1DOkPG) ((case-lambda ((g$r$13084$1DOkPG g$y-pat$13085$1DOkPG g$xr*$13086$1DOkPG) (if g$r$13084$1DOkPG (if (null? g$y-pat$13085$1DOkPG) ((case-lambda ((g$xr$13087$1DOkPG) (if g$xr$13087$1DOkPG (values (cons g$xr$13087$1DOkPG g$xr*$13086$1DOkPG) g$y-pat$13085$1DOkPG g$r$13084$1DOkPG) (values '#f '#f '#f)))) (g$match$13012$1DOkPG (car g$e$13074$1DOkPG) g$x-pat$13066$1DOkPG g$m*$13075$1DOkPG g$s*$13076$1DOkPG g$ae*$13077$1DOkPG '())) (values '() (cdr g$y-pat$13085$1DOkPG) (g$match$13012$1DOkPG (car g$e$13074$1DOkPG) (car g$y-pat$13085$1DOkPG) g$m*$13075$1DOkPG g$s*$13076$1DOkPG g$ae*$13077$1DOkPG g$r$13084$1DOkPG))) (values '#f '#f '#f)))) g$r$13083$1DOkPG g$y-pat$13082$1DOkPG g$xr*$13081$1DOkPG)))) (if (g$stx?$9153$1DOkPG g$e$13074$1DOkPG) (call-with-values (case-lambda (() (g$join-wraps$9168$1DOkPG g$m*$13075$1DOkPG g$s*$13076$1DOkPG g$ae*$13077$1DOkPG g$e$13074$1DOkPG))) (case-lambda ((g$m*$13091$1DOkPG g$s*$13092$1DOkPG g$ae*$13093$1DOkPG) ((case-lambda ((g$ae*$13094$1DOkPG g$s*$13095$1DOkPG g$m*$13096$1DOkPG) (g$f$13073$1DOkPG (g$stx-expr$9155$1DOkPG g$e$13074$1DOkPG) g$m*$13096$1DOkPG g$s*$13095$1DOkPG g$ae*$13094$1DOkPG))) g$ae*$13093$1DOkPG g$s*$13092$1DOkPG g$m*$13091$1DOkPG)))) (if (annotation? g$e$13074$1DOkPG) (g$f$13073$1DOkPG (annotation-expression g$e$13074$1DOkPG) g$m*$13075$1DOkPG g$s*$13076$1DOkPG g$ae*$13077$1DOkPG) (values '() g$y-pat$13067$1DOkPG (g$match$13012$1DOkPG g$e$13074$1DOkPG g$z-pat$13068$1DOkPG g$m*$13075$1DOkPG g$s*$13076$1DOkPG g$ae*$13077$1DOkPG g$r$13072$1DOkPG))))))))) g$f$13073$1DOkPG) g$e$13065$1DOkPG g$m*$13069$1DOkPG g$s*$13070$1DOkPG g$ae*$13071$1DOkPG)))) (g$match-each-any$13008$1DOkPG (case-lambda ((g$e$13051$1DOkPG g$m*$13052$1DOkPG g$s*$13053$1DOkPG g$ae*$13054$1DOkPG) (if (pair? g$e$13051$1DOkPG) ((case-lambda ((g$l$13055$1DOkPG) (if g$l$13055$1DOkPG (begin '#f (cons (g$stx^$13005$1DOkPG (car g$e$13051$1DOkPG) g$m*$13052$1DOkPG g$s*$13053$1DOkPG g$ae*$13054$1DOkPG) g$l$13055$1DOkPG)) '#f))) (g$match-each-any$13008$1DOkPG (cdr g$e$13051$1DOkPG) g$m*$13052$1DOkPG g$s*$13053$1DOkPG g$ae*$13054$1DOkPG)) (if (null? g$e$13051$1DOkPG) '() (if (g$stx?$9153$1DOkPG g$e$13051$1DOkPG) (call-with-values (case-lambda (() (g$join-wraps$9168$1DOkPG g$m*$13052$1DOkPG g$s*$13053$1DOkPG g$ae*$13054$1DOkPG g$e$13051$1DOkPG))) (case-lambda ((g$m*$13059$1DOkPG g$s*$13060$1DOkPG g$ae*$13061$1DOkPG) ((case-lambda ((g$ae*$13062$1DOkPG g$s*$13063$1DOkPG g$m*$13064$1DOkPG) (g$match-each-any$13008$1DOkPG (g$stx-expr$9155$1DOkPG g$e$13051$1DOkPG) g$m*$13064$1DOkPG g$s*$13063$1DOkPG g$ae*$13062$1DOkPG))) g$ae*$13061$1DOkPG g$s*$13060$1DOkPG g$m*$13059$1DOkPG)))) (if (annotation? g$e$13051$1DOkPG) (g$match-each-any$13008$1DOkPG (annotation-expression g$e$13051$1DOkPG) g$m*$13052$1DOkPG g$s*$13053$1DOkPG g$ae*$13054$1DOkPG) '#f))))))) (g$match-empty$13009$1DOkPG (case-lambda ((g$p$13048$1DOkPG g$r$13049$1DOkPG) (if (null? g$p$13048$1DOkPG) g$r$13049$1DOkPG (if (eq? g$p$13048$1DOkPG '_) g$r$13049$1DOkPG (if (eq? g$p$13048$1DOkPG 'any) (cons '() g$r$13049$1DOkPG) (if (pair? g$p$13048$1DOkPG) (g$match-empty$13009$1DOkPG (car g$p$13048$1DOkPG) (g$match-empty$13009$1DOkPG (cdr g$p$13048$1DOkPG) g$r$13049$1DOkPG)) (if (eq? g$p$13048$1DOkPG 'each-any) (cons '() g$r$13049$1DOkPG) ((case-lambda ((g$t$13050$1DOkPG) (if (memv g$t$13050$1DOkPG '(each)) (g$match-empty$13009$1DOkPG (vector-ref g$p$13048$1DOkPG '1) g$r$13049$1DOkPG) (if (memv g$t$13050$1DOkPG '(each+)) (g$match-empty$13009$1DOkPG (vector-ref g$p$13048$1DOkPG '1) (g$match-empty$13009$1DOkPG (reverse (vector-ref g$p$13048$1DOkPG '2)) (g$match-empty$13009$1DOkPG (vector-ref g$p$13048$1DOkPG '3) g$r$13049$1DOkPG))) (if (memv g$t$13050$1DOkPG '(free-id atom)) g$r$13049$1DOkPG (if (memv g$t$13050$1DOkPG '(vector)) (g$match-empty$13009$1DOkPG (vector-ref g$p$13048$1DOkPG '1) g$r$13049$1DOkPG) (assertion-violation 'syntax-dispatch '"invalid pattern" g$p$13048$1DOkPG))))))) (vector-ref g$p$13048$1DOkPG '0)))))))))) (g$combine$13010$1DOkPG (case-lambda ((g$r*$13046$1DOkPG g$r$13047$1DOkPG) (if (null? (car g$r*$13046$1DOkPG)) g$r$13047$1DOkPG (cons (map car g$r*$13046$1DOkPG) (g$combine$13010$1DOkPG (map cdr g$r*$13046$1DOkPG) g$r$13047$1DOkPG)))))) (g$match*$13011$1DOkPG (case-lambda ((g$e$13028$1DOkPG g$p$13029$1DOkPG g$m*$13030$1DOkPG g$s*$13031$1DOkPG g$ae*$13032$1DOkPG g$r$13033$1DOkPG) (if (null? g$p$13029$1DOkPG) (if (null? g$e$13028$1DOkPG) (begin '#f g$r$13033$1DOkPG) '#f) (if (pair? g$p$13029$1DOkPG) (if (pair? g$e$13028$1DOkPG) (begin '#f (g$match$13012$1DOkPG (car g$e$13028$1DOkPG) (car g$p$13029$1DOkPG) g$m*$13030$1DOkPG g$s*$13031$1DOkPG g$ae*$13032$1DOkPG (g$match$13012$1DOkPG (cdr g$e$13028$1DOkPG) (cdr g$p$13029$1DOkPG) g$m*$13030$1DOkPG g$s*$13031$1DOkPG g$ae*$13032$1DOkPG g$r$13033$1DOkPG))) '#f) (if (eq? g$p$13029$1DOkPG 'each-any) ((case-lambda ((g$l$13034$1DOkPG) (if g$l$13034$1DOkPG (begin '#f (cons g$l$13034$1DOkPG g$r$13033$1DOkPG)) '#f))) (g$match-each-any$13008$1DOkPG g$e$13028$1DOkPG g$m*$13030$1DOkPG g$s*$13031$1DOkPG g$ae*$13032$1DOkPG)) ((case-lambda ((g$t$13035$1DOkPG) (if (memv g$t$13035$1DOkPG '(each)) (if (null? g$e$13028$1DOkPG) (g$match-empty$13009$1DOkPG (vector-ref g$p$13029$1DOkPG '1) g$r$13033$1DOkPG) ((case-lambda ((g$r*$13045$1DOkPG) (if g$r*$13045$1DOkPG (begin '#f (g$combine$13010$1DOkPG g$r*$13045$1DOkPG g$r$13033$1DOkPG)) '#f))) (g$match-each$13006$1DOkPG g$e$13028$1DOkPG (vector-ref g$p$13029$1DOkPG '1) g$m*$13030$1DOkPG g$s*$13031$1DOkPG g$ae*$13032$1DOkPG))) (if (memv g$t$13035$1DOkPG '(free-id)) (if (symbol? g$e$13028$1DOkPG) (if (g$free-id=?$9185$1DOkPG (g$stx^$13005$1DOkPG g$e$13028$1DOkPG g$m*$13030$1DOkPG g$s*$13031$1DOkPG g$ae*$13032$1DOkPG) (vector-ref g$p$13029$1DOkPG '1)) (begin '#f g$r$13033$1DOkPG) '#f) '#f) (if (memv g$t$13035$1DOkPG '(each+)) (call-with-values (case-lambda (() (g$match-each+$13007$1DOkPG g$e$13028$1DOkPG (vector-ref g$p$13029$1DOkPG '1) (vector-ref g$p$13029$1DOkPG '2) (vector-ref g$p$13029$1DOkPG '3) g$m*$13030$1DOkPG g$s*$13031$1DOkPG g$ae*$13032$1DOkPG g$r$13033$1DOkPG))) (case-lambda ((g$xr*$13039$1DOkPG g$y-pat$13040$1DOkPG g$r$13041$1DOkPG) ((case-lambda ((g$r$13042$1DOkPG g$y-pat$13043$1DOkPG g$xr*$13044$1DOkPG) (if g$r$13042$1DOkPG (if (null? g$y-pat$13043$1DOkPG) (begin '#f (if (null? g$xr*$13044$1DOkPG) (g$match-empty$13009$1DOkPG (vector-ref g$p$13029$1DOkPG '1) g$r$13042$1DOkPG) (g$combine$13010$1DOkPG g$xr*$13044$1DOkPG g$r$13042$1DOkPG))) '#f) '#f))) g$r$13041$1DOkPG g$y-pat$13040$1DOkPG g$xr*$13039$1DOkPG)))) (if (memv g$t$13035$1DOkPG '(atom)) (if (equal? (vector-ref g$p$13029$1DOkPG '1) (g$strip$9191$1DOkPG g$e$13028$1DOkPG g$m*$13030$1DOkPG)) (begin '#f g$r$13033$1DOkPG) '#f) (if (memv g$t$13035$1DOkPG '(vector)) (if (vector? g$e$13028$1DOkPG) (begin '#f (g$match$13012$1DOkPG (vector->list g$e$13028$1DOkPG) (vector-ref g$p$13029$1DOkPG '1) g$m*$13030$1DOkPG g$s*$13031$1DOkPG g$ae*$13032$1DOkPG g$r$13033$1DOkPG)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" g$p$13029$1DOkPG)))))))) (vector-ref g$p$13029$1DOkPG '0)))))))) (g$match$13012$1DOkPG (case-lambda ((g$e$13013$1DOkPG g$p$13014$1DOkPG g$m*$13015$1DOkPG g$s*$13016$1DOkPG g$ae*$13017$1DOkPG g$r$13018$1DOkPG) (if (not g$r$13018$1DOkPG) '#f (if (eq? g$p$13014$1DOkPG '_) g$r$13018$1DOkPG (if (eq? g$p$13014$1DOkPG 'any) (cons (g$stx^$13005$1DOkPG g$e$13013$1DOkPG g$m*$13015$1DOkPG g$s*$13016$1DOkPG g$ae*$13017$1DOkPG) g$r$13018$1DOkPG) (if (g$stx?$9153$1DOkPG g$e$13013$1DOkPG) (call-with-values (case-lambda (() (g$join-wraps$9168$1DOkPG g$m*$13015$1DOkPG g$s*$13016$1DOkPG g$ae*$13017$1DOkPG g$e$13013$1DOkPG))) (case-lambda ((g$m*$13022$1DOkPG g$s*$13023$1DOkPG g$ae*$13024$1DOkPG) ((case-lambda ((g$ae*$13025$1DOkPG g$s*$13026$1DOkPG g$m*$13027$1DOkPG) (g$match$13012$1DOkPG (g$stx-expr$9155$1DOkPG g$e$13013$1DOkPG) g$p$13014$1DOkPG g$m*$13027$1DOkPG g$s*$13026$1DOkPG g$ae*$13025$1DOkPG g$r$13018$1DOkPG))) g$ae*$13024$1DOkPG g$s*$13023$1DOkPG g$m*$13022$1DOkPG)))) (if (annotation? g$e$13013$1DOkPG) (g$match$13012$1DOkPG (annotation-expression g$e$13013$1DOkPG) g$p$13014$1DOkPG g$m*$13015$1DOkPG g$s*$13016$1DOkPG g$ae*$13017$1DOkPG g$r$13018$1DOkPG) (g$match*$13011$1DOkPG g$e$13013$1DOkPG g$p$13014$1DOkPG g$m*$13015$1DOkPG g$s*$13016$1DOkPG g$ae*$13017$1DOkPG g$r$13018$1DOkPG)))))))))) (g$match$13012$1DOkPG g$e$13003$1DOkPG g$p$13004$1DOkPG '() '() '() '()))))) (g$ellipsis?$9423$1DOkPG g$ellipsis?$15477$1DOkPG (case-lambda ((g$x$13117$1DOkPG) (if (g$id?$9181$1DOkPG g$x$13117$1DOkPG) (begin '#f (g$free-id=?$9185$1DOkPG g$x$13117$1DOkPG (g$scheme-stx$9368$1DOkPG '...))) '#f)))) (g$syntax-case-transformer$9424$1DOkPG g$syntax-case-transformer$15478$1DOkPG ((case-lambda (() (letrec* ((g$build-dispatch-call$13118$1DOkPG (case-lambda ((g$pvars$13227$1DOkPG g$expr$13228$1DOkPG g$y$13229$1DOkPG g$r$13230$1DOkPG g$mr$13231$1DOkPG) ((case-lambda ((g$ids$13232$1DOkPG g$levels$13233$1DOkPG) ((case-lambda ((g$labels$13234$1DOkPG g$new-vars$13235$1DOkPG) ((case-lambda ((g$body$13236$1DOkPG) (list '(primitive apply) (g$build-lambda$9115$1DOkPG '#f g$new-vars$13235$1DOkPG g$body$13236$1DOkPG) g$y$13229$1DOkPG))) (g$chi-expr$9438$1DOkPG (g$add-subst$9171$1DOkPG (g$make-full-rib$9149$1DOkPG g$ids$13232$1DOkPG g$labels$13234$1DOkPG) g$expr$13228$1DOkPG) (append (map (case-lambda ((g$label$13237$1DOkPG g$var$13238$1DOkPG g$level$13239$1DOkPG) (cons g$label$13237$1DOkPG (g$make-binding$9195$1DOkPG 'syntax (cons g$var$13238$1DOkPG g$level$13239$1DOkPG))))) g$labels$13234$1DOkPG g$new-vars$13235$1DOkPG (map cdr g$pvars$13227$1DOkPG)) g$r$13230$1DOkPG) g$mr$13231$1DOkPG)))) (map g$gen-label$9130$1DOkPG g$ids$13232$1DOkPG) (map g$gen-lexical$9128$1DOkPG g$ids$13232$1DOkPG)))) (map car g$pvars$13227$1DOkPG) (map cdr g$pvars$13227$1DOkPG))))) (g$invalid-ids-error$13119$1DOkPG (case-lambda ((g$id*$13221$1DOkPG g$e$13222$1DOkPG g$class$13223$1DOkPG) ((letrec ((g$find$13224$1DOkPG (case-lambda ((g$id*$13225$1DOkPG g$ok*$13226$1DOkPG) (if (null? g$id*$13225$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$e$13222$1DOkPG) (if (g$id?$9181$1DOkPG (car g$id*$13225$1DOkPG)) (if (g$bound-id-member?$9188$1DOkPG (car g$id*$13225$1DOkPG) g$ok*$13226$1DOkPG) (g$syntax-error$9498$1DOkPG (car g$id*$13225$1DOkPG) '"duplicate " g$class$13223$1DOkPG) (g$find$13224$1DOkPG (cdr g$id*$13225$1DOkPG) (cons (car g$id*$13225$1DOkPG) g$ok*$13226$1DOkPG))) (g$syntax-error$9498$1DOkPG (car g$id*$13225$1DOkPG) '"invalid " g$class$13223$1DOkPG))))))) g$find$13224$1DOkPG) g$id*$13221$1DOkPG '())))) (g$gen-clause$13120$1DOkPG (case-lambda ((g$x$13201$1DOkPG g$keys$13202$1DOkPG g$clauses$13203$1DOkPG g$r$13204$1DOkPG g$mr$13205$1DOkPG g$pat$13206$1DOkPG g$fender$13207$1DOkPG g$expr$13208$1DOkPG) (call-with-values (case-lambda (() (g$convert-pattern$9421$1DOkPG g$pat$13206$1DOkPG g$keys$13202$1DOkPG))) (case-lambda ((g$p$13211$1DOkPG g$pvars$13212$1DOkPG) ((case-lambda ((g$pvars$13213$1DOkPG g$p$13214$1DOkPG) (if (not (g$distinct-bound-ids?$9187$1DOkPG (map car g$pvars$13213$1DOkPG))) (g$invalid-ids-error$13119$1DOkPG (map car g$pvars$13213$1DOkPG) g$pat$13206$1DOkPG '"pattern variable") (if (not (g$for-all$7866$1DOkPG (case-lambda ((g$x$13215$1DOkPG) (not (g$ellipsis?$9423$1DOkPG (car g$x$13215$1DOkPG))))) g$pvars$13213$1DOkPG)) (g$syntax-violation$9501$1DOkPG '#f '"misplaced ellipsis in syntax-case pattern" g$pat$13206$1DOkPG) ((case-lambda ((g$y$13216$1DOkPG) ((case-lambda ((g$test$13217$1DOkPG) ((case-lambda ((g$conseq$13218$1DOkPG) ((case-lambda ((g$altern$13219$1DOkPG) (list (g$build-lambda$9115$1DOkPG '#f (list g$y$13216$1DOkPG) (list 'if g$test$13217$1DOkPG g$conseq$13218$1DOkPG g$altern$13219$1DOkPG)) (list '(primitive syntax-dispatch) g$x$13201$1DOkPG (list 'quote g$p$13214$1DOkPG))))) (g$gen-syntax-case$13121$1DOkPG g$x$13201$1DOkPG g$keys$13202$1DOkPG g$clauses$13203$1DOkPG g$r$13204$1DOkPG g$mr$13205$1DOkPG)))) (g$build-dispatch-call$13118$1DOkPG g$pvars$13213$1DOkPG g$expr$13208$1DOkPG g$y$13216$1DOkPG g$r$13204$1DOkPG g$mr$13205$1DOkPG)))) (if (eq? g$fender$13207$1DOkPG '#t) g$y$13216$1DOkPG ((case-lambda ((g$call$13220$1DOkPG) (list 'if g$y$13216$1DOkPG g$call$13220$1DOkPG (list 'quote '#f)))) (g$build-dispatch-call$13118$1DOkPG g$pvars$13213$1DOkPG g$fender$13207$1DOkPG g$y$13216$1DOkPG g$r$13204$1DOkPG g$mr$13205$1DOkPG)))))) (g$gen-lexical$9128$1DOkPG 'tmp)))))) g$pvars$13212$1DOkPG g$p$13211$1DOkPG))))))) (g$gen-syntax-case$13121$1DOkPG (case-lambda ((g$x$13157$1DOkPG g$keys$13158$1DOkPG g$clauses$13159$1DOkPG g$r$13160$1DOkPG g$mr$13161$1DOkPG) (if (null? g$clauses$13159$1DOkPG) (list '(primitive syntax-error) g$x$13157$1DOkPG) ((case-lambda ((g$t$13162$1DOkPG) ((case-lambda ((g$ls/false$13163$1DOkPG) (if (if g$ls/false$13163$1DOkPG (begin '#f (apply (case-lambda ((g$pat$13164$1DOkPG g$expr$13165$1DOkPG) '#t)) g$ls/false$13163$1DOkPG)) '#f) (apply (case-lambda ((g$pat$13166$1DOkPG g$expr$13167$1DOkPG) (if (if (g$id?$9181$1DOkPG g$pat$13166$1DOkPG) (if (not (g$bound-id-member?$9188$1DOkPG g$pat$13166$1DOkPG g$keys$13158$1DOkPG)) (begin '#f (not (g$ellipsis?$9423$1DOkPG g$pat$13166$1DOkPG))) '#f) '#f) (if (g$free-id=?$9185$1DOkPG g$pat$13166$1DOkPG (g$scheme-stx$9368$1DOkPG '_)) (g$chi-expr$9438$1DOkPG g$expr$13167$1DOkPG g$r$13160$1DOkPG g$mr$13161$1DOkPG) ((case-lambda ((g$lab$13168$1DOkPG g$lex$13169$1DOkPG) ((case-lambda ((g$body$13170$1DOkPG) (list (g$build-lambda$9115$1DOkPG '#f (list g$lex$13169$1DOkPG) g$body$13170$1DOkPG) g$x$13157$1DOkPG))) (g$chi-expr$9438$1DOkPG (g$add-subst$9171$1DOkPG (g$make-full-rib$9149$1DOkPG (list g$pat$13166$1DOkPG) (list g$lab$13168$1DOkPG)) g$expr$13167$1DOkPG) (cons (cons g$lab$13168$1DOkPG (g$make-binding$9195$1DOkPG 'syntax (cons g$lex$13169$1DOkPG '0))) g$r$13160$1DOkPG) g$mr$13161$1DOkPG)))) (g$gen-label$9130$1DOkPG g$pat$13166$1DOkPG) (g$gen-lexical$9128$1DOkPG g$pat$13166$1DOkPG))) (g$gen-clause$13120$1DOkPG g$x$13157$1DOkPG g$keys$13158$1DOkPG (cdr g$clauses$13159$1DOkPG) g$r$13160$1DOkPG g$mr$13161$1DOkPG g$pat$13166$1DOkPG '#t g$expr$13167$1DOkPG)))) g$ls/false$13163$1DOkPG) ((case-lambda ((g$t$13171$1DOkPG) ((case-lambda ((g$ls/false$13172$1DOkPG) (if (if g$ls/false$13172$1DOkPG (begin '#f (apply (case-lambda ((g$pat$13173$1DOkPG g$fender$13174$1DOkPG g$expr$13175$1DOkPG) '#t)) g$ls/false$13172$1DOkPG)) '#f) (apply (case-lambda ((g$pat$13176$1DOkPG g$fender$13177$1DOkPG g$expr$13178$1DOkPG) (g$gen-clause$13120$1DOkPG g$x$13157$1DOkPG g$keys$13158$1DOkPG (cdr g$clauses$13159$1DOkPG) g$r$13160$1DOkPG g$mr$13161$1DOkPG g$pat$13176$1DOkPG g$fender$13177$1DOkPG g$expr$13178$1DOkPG))) g$ls/false$13172$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13171$1DOkPG)))) ((case-lambda ((g$x$13179$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13179$1DOkPG) (begin '#f ((case-lambda ((g$q$13180$1DOkPG) (if g$q$13180$1DOkPG (begin '#f ((case-lambda ((g$r$13181$1DOkPG) (if g$r$13181$1DOkPG (begin '#f (append g$q$13180$1DOkPG g$r$13181$1DOkPG)) '#f))) ((case-lambda ((g$x$13182$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13182$1DOkPG) (begin '#f ((case-lambda ((g$q$13183$1DOkPG) (if g$q$13183$1DOkPG (begin '#f ((case-lambda ((g$r$13184$1DOkPG) (if g$r$13184$1DOkPG (begin '#f (append g$q$13183$1DOkPG g$r$13184$1DOkPG)) '#f))) ((case-lambda ((g$x$13185$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13185$1DOkPG) (begin '#f ((case-lambda ((g$q$13186$1DOkPG) (if g$q$13186$1DOkPG (begin '#f ((case-lambda ((g$r$13187$1DOkPG) (if g$r$13187$1DOkPG (begin '#f (append g$q$13186$1DOkPG g$r$13187$1DOkPG)) '#f))) ((case-lambda ((g$x$13188$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13188$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13185$1DOkPG)))) '#f))) ((case-lambda ((g$x$13189$1DOkPG) (list g$x$13189$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13185$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13182$1DOkPG)))) '#f))) ((case-lambda ((g$x$13190$1DOkPG) (list g$x$13190$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13182$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13179$1DOkPG)))) '#f))) ((case-lambda ((g$x$13191$1DOkPG) (list g$x$13191$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13179$1DOkPG)))) '#f))) g$t$13171$1DOkPG)))) g$t$13162$1DOkPG)))) ((case-lambda ((g$x$13192$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13192$1DOkPG) (begin '#f ((case-lambda ((g$q$13193$1DOkPG) (if g$q$13193$1DOkPG (begin '#f ((case-lambda ((g$r$13194$1DOkPG) (if g$r$13194$1DOkPG (begin '#f (append g$q$13193$1DOkPG g$r$13194$1DOkPG)) '#f))) ((case-lambda ((g$x$13195$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13195$1DOkPG) (begin '#f ((case-lambda ((g$q$13196$1DOkPG) (if g$q$13196$1DOkPG (begin '#f ((case-lambda ((g$r$13197$1DOkPG) (if g$r$13197$1DOkPG (begin '#f (append g$q$13196$1DOkPG g$r$13197$1DOkPG)) '#f))) ((case-lambda ((g$x$13198$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13198$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13195$1DOkPG)))) '#f))) ((case-lambda ((g$x$13199$1DOkPG) (list g$x$13199$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13195$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13192$1DOkPG)))) '#f))) ((case-lambda ((g$x$13200$1DOkPG) (list g$x$13200$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13192$1DOkPG)))) '#f))) g$t$13162$1DOkPG)))) (car g$clauses$13159$1DOkPG))))))) (case-lambda ((g$e$13122$1DOkPG g$r$13123$1DOkPG g$mr$13124$1DOkPG) ((case-lambda ((g$t$13125$1DOkPG) ((case-lambda ((g$ls/false$13126$1DOkPG) (if (if g$ls/false$13126$1DOkPG (begin '#f (apply (case-lambda ((g$expr$13127$1DOkPG g$keys$13128$1DOkPG g$clauses$13129$1DOkPG) '#t)) g$ls/false$13126$1DOkPG)) '#f) (apply (case-lambda ((g$expr$13130$1DOkPG g$keys$13131$1DOkPG g$clauses$13132$1DOkPG) (begin (if (g$for-all$7866$1DOkPG (case-lambda ((g$x$13133$1DOkPG) (if (g$id?$9181$1DOkPG g$x$13133$1DOkPG) (begin '#f (not (g$ellipsis?$9423$1DOkPG g$x$13133$1DOkPG))) '#f))) g$keys$13131$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"invalid literals" g$e$13122$1DOkPG)) ((case-lambda ((g$x$13134$1DOkPG) ((case-lambda ((g$body$13135$1DOkPG) (list (g$build-lambda$9115$1DOkPG '#f (list g$x$13134$1DOkPG) g$body$13135$1DOkPG) (g$chi-expr$9438$1DOkPG g$expr$13130$1DOkPG g$r$13123$1DOkPG g$mr$13124$1DOkPG)))) (g$gen-syntax-case$13121$1DOkPG g$x$13134$1DOkPG g$keys$13131$1DOkPG g$clauses$13132$1DOkPG g$r$13123$1DOkPG g$mr$13124$1DOkPG)))) (g$gen-lexical$9128$1DOkPG 'tmp))))) g$ls/false$13126$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13125$1DOkPG)))) ((case-lambda ((g$x$13136$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13136$1DOkPG) (begin '#f ((case-lambda ((g$q$13137$1DOkPG) (if g$q$13137$1DOkPG (begin '#f ((case-lambda ((g$r$13138$1DOkPG) (if g$r$13138$1DOkPG (begin '#f (append g$q$13137$1DOkPG g$r$13138$1DOkPG)) '#f))) ((case-lambda ((g$x$13139$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13139$1DOkPG) (begin '#f ((case-lambda ((g$q$13140$1DOkPG) (if g$q$13140$1DOkPG (begin '#f ((case-lambda ((g$r$13141$1DOkPG) (if g$r$13141$1DOkPG (begin '#f (append g$q$13140$1DOkPG g$r$13141$1DOkPG)) '#f))) ((case-lambda ((g$x$13142$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13142$1DOkPG) (begin '#f ((case-lambda ((g$q$13143$1DOkPG) (if g$q$13143$1DOkPG (begin '#f ((case-lambda ((g$r$13144$1DOkPG) (if g$r$13144$1DOkPG (begin '#f (append g$q$13143$1DOkPG g$r$13144$1DOkPG)) '#f))) ((letrec ((g$f$13145$1DOkPG (case-lambda ((g$x$13146$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13146$1DOkPG) ((case-lambda ((g$cars/f$13147$1DOkPG) (if g$cars/f$13147$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13148$1DOkPG) (if g$cdrs/f$13148$1DOkPG (begin '#f (map cons g$cars/f$13147$1DOkPG g$cdrs/f$13148$1DOkPG)) '#f))) (g$f$13145$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13146$1DOkPG)))) '#f))) ((case-lambda ((g$x$13149$1DOkPG) (list g$x$13149$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13146$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13146$1DOkPG) (list (begin 'clauses '())) '#f)))))) g$f$13145$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13142$1DOkPG)))) '#f))) ((letrec ((g$f$13150$1DOkPG (case-lambda ((g$x$13151$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13151$1DOkPG) ((case-lambda ((g$cars/f$13152$1DOkPG) (if g$cars/f$13152$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13153$1DOkPG) (if g$cdrs/f$13153$1DOkPG (begin '#f (map cons g$cars/f$13152$1DOkPG g$cdrs/f$13153$1DOkPG)) '#f))) (g$f$13150$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13151$1DOkPG)))) '#f))) ((case-lambda ((g$x$13154$1DOkPG) (list g$x$13154$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13151$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13151$1DOkPG) (list (begin 'keys '())) '#f)))))) g$f$13150$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$13142$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13139$1DOkPG)))) '#f))) ((case-lambda ((g$x$13155$1DOkPG) (list g$x$13155$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13139$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13136$1DOkPG)))) '#f))) ((case-lambda ((g$x$13156$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13136$1DOkPG)))) '#f))) g$t$13125$1DOkPG)))) g$e$13122$1DOkPG)))))))) (g$ellipsis-map$9425$1DOkPG g$ellipsis-map$15479$1DOkPG (case-lambda ((g$proc$13240$1DOkPG g$ls$13241$1DOkPG . g$ls*$13242$1DOkPG) (letrec* ((g$who$13243$1DOkPG '...)) (begin (if (list? g$ls$13241$1DOkPG) (void) (assertion-violation g$who$13243$1DOkPG '"not a list" g$ls$13241$1DOkPG)) (if (null? g$ls*$13242$1DOkPG) (void) ((case-lambda ((g$n$13244$1DOkPG) (for-each (case-lambda ((g$x$13245$1DOkPG) (begin (if (list? g$x$13245$1DOkPG) (void) (assertion-violation g$who$13243$1DOkPG '"not a list" g$x$13245$1DOkPG)) (if (= (length g$x$13245$1DOkPG) g$n$13244$1DOkPG) (void) (assertion-violation g$who$13243$1DOkPG '"length mismatch" g$ls$13241$1DOkPG g$x$13245$1DOkPG))))) g$ls*$13242$1DOkPG))) (length g$ls$13241$1DOkPG))) (apply map g$proc$13240$1DOkPG g$ls$13241$1DOkPG g$ls*$13242$1DOkPG)))))) (g$syntax-transformer$9426$1DOkPG g$syntax-transformer$15480$1DOkPG ((case-lambda (() (letrec* ((g$gen-syntax$13246$1DOkPG (case-lambda ((g$src$13316$1DOkPG g$e$13317$1DOkPG g$r$13318$1DOkPG g$maps$13319$1DOkPG g$ellipsis?$13320$1DOkPG g$vec?$13321$1DOkPG) ((case-lambda ((g$t$13322$1DOkPG) ((case-lambda ((g$ls/false$13323$1DOkPG) (if (if g$ls/false$13323$1DOkPG (begin '#f (apply (case-lambda ((g$dots$13324$1DOkPG) (g$ellipsis?$13320$1DOkPG g$dots$13324$1DOkPG))) g$ls/false$13323$1DOkPG)) '#f) (apply (case-lambda ((g$dots$13325$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"misplaced ellipsis in syntax form" g$src$13316$1DOkPG))) g$ls/false$13323$1DOkPG) ((case-lambda ((g$t$13326$1DOkPG) ((case-lambda ((g$ls/false$13327$1DOkPG) (if (if g$ls/false$13327$1DOkPG (begin '#f (apply (case-lambda ((g$id$13328$1DOkPG) (g$id?$9181$1DOkPG g$id$13328$1DOkPG))) g$ls/false$13327$1DOkPG)) '#f) (apply (case-lambda ((g$id$13329$1DOkPG) ((case-lambda ((g$label$13330$1DOkPG) ((case-lambda ((g$b$13331$1DOkPG) ((case-lambda (() (if (eq? (g$binding-type$9196$1DOkPG g$b$13331$1DOkPG) 'syntax) (call-with-values (case-lambda (() ((case-lambda ((g$var.lev$13334$1DOkPG) (g$gen-ref$13247$1DOkPG g$src$13316$1DOkPG (car g$var.lev$13334$1DOkPG) (cdr g$var.lev$13334$1DOkPG) g$maps$13319$1DOkPG))) (g$binding-value$9197$1DOkPG g$b$13331$1DOkPG)))) (case-lambda ((g$var$13335$1DOkPG g$maps$13336$1DOkPG) ((case-lambda ((g$maps$13337$1DOkPG g$var$13338$1DOkPG) (values (list 'ref g$var$13338$1DOkPG) g$maps$13337$1DOkPG))) g$maps$13336$1DOkPG g$var$13335$1DOkPG)))) (values (list 'quote g$e$13317$1DOkPG) g$maps$13319$1DOkPG))))))) (g$label->binding$9194$1DOkPG g$label$13330$1DOkPG g$r$13318$1DOkPG)))) (g$id->label$9193$1DOkPG g$e$13317$1DOkPG)))) g$ls/false$13327$1DOkPG) ((case-lambda ((g$t$13339$1DOkPG) ((case-lambda ((g$ls/false$13340$1DOkPG) (if (if g$ls/false$13340$1DOkPG (begin '#f (apply (case-lambda ((g$dots$13341$1DOkPG g$e$13342$1DOkPG) (g$ellipsis?$13320$1DOkPG g$dots$13341$1DOkPG))) g$ls/false$13340$1DOkPG)) '#f) (apply (case-lambda ((g$dots$13343$1DOkPG g$e$13344$1DOkPG) (if g$vec?$13321$1DOkPG (g$syntax-violation$9501$1DOkPG '#f '"misplaced ellipsis in syntax form" g$src$13316$1DOkPG) (g$gen-syntax$13246$1DOkPG g$src$13316$1DOkPG g$e$13344$1DOkPG g$r$13318$1DOkPG g$maps$13319$1DOkPG (case-lambda ((g$x$13345$1DOkPG) '#f)) '#f)))) g$ls/false$13340$1DOkPG) ((case-lambda ((g$t$13346$1DOkPG) ((case-lambda ((g$ls/false$13347$1DOkPG) (if (if g$ls/false$13347$1DOkPG (begin '#f (apply (case-lambda ((g$x$13348$1DOkPG g$dots$13349$1DOkPG g$y$13350$1DOkPG) (g$ellipsis?$13320$1DOkPG g$dots$13349$1DOkPG))) g$ls/false$13347$1DOkPG)) '#f) (apply (case-lambda ((g$x$13351$1DOkPG g$dots$13352$1DOkPG g$y$13353$1DOkPG) ((letrec ((g$f$13354$1DOkPG (case-lambda ((g$y$13355$1DOkPG g$k$13356$1DOkPG) ((case-lambda ((g$t$13357$1DOkPG) ((case-lambda ((g$ls/false$13358$1DOkPG) (if (if g$ls/false$13358$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13358$1DOkPG)) '#f) (apply (case-lambda (() (g$k$13356$1DOkPG g$maps$13319$1DOkPG))) g$ls/false$13358$1DOkPG) ((case-lambda ((g$t$13359$1DOkPG) ((case-lambda ((g$ls/false$13360$1DOkPG) (if (if g$ls/false$13360$1DOkPG (begin '#f (apply (case-lambda ((g$dots$13361$1DOkPG g$y$13362$1DOkPG) (g$ellipsis?$13320$1DOkPG g$dots$13361$1DOkPG))) g$ls/false$13360$1DOkPG)) '#f) (apply (case-lambda ((g$dots$13363$1DOkPG g$y$13364$1DOkPG) (g$f$13354$1DOkPG g$y$13364$1DOkPG (case-lambda ((g$maps$13365$1DOkPG) (call-with-values (case-lambda (() (g$k$13356$1DOkPG (cons '() g$maps$13365$1DOkPG)))) (case-lambda ((g$x$13368$1DOkPG g$maps$13369$1DOkPG) ((case-lambda ((g$maps$13370$1DOkPG g$x$13371$1DOkPG) (if (null? (car g$maps$13370$1DOkPG)) (g$syntax-violation$9501$1DOkPG '#f '"extra ellipsis in syntax form" g$src$13316$1DOkPG) (values (g$gen-mappend$13249$1DOkPG g$x$13371$1DOkPG (car g$maps$13370$1DOkPG)) (cdr g$maps$13370$1DOkPG))))) g$maps$13369$1DOkPG g$x$13368$1DOkPG))))))))) g$ls/false$13360$1DOkPG) ((case-lambda ((g$t$13372$1DOkPG) ((case-lambda ((g$ls/false$13373$1DOkPG) (if (if g$ls/false$13373$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13373$1DOkPG)) '#f) (apply (case-lambda (() (call-with-values (case-lambda (() (g$gen-syntax$13246$1DOkPG g$src$13316$1DOkPG g$y$13355$1DOkPG g$r$13318$1DOkPG g$maps$13319$1DOkPG g$ellipsis?$13320$1DOkPG g$vec?$13321$1DOkPG))) (case-lambda ((g$y$13376$1DOkPG g$maps$13377$1DOkPG) ((case-lambda ((g$maps$13378$1DOkPG g$y$13379$1DOkPG) (call-with-values (case-lambda (() (g$k$13356$1DOkPG g$maps$13378$1DOkPG))) (case-lambda ((g$x$13382$1DOkPG g$maps$13383$1DOkPG) ((case-lambda ((g$maps$13384$1DOkPG g$x$13385$1DOkPG) (values (g$gen-append$13248$1DOkPG g$x$13385$1DOkPG g$y$13379$1DOkPG) g$maps$13384$1DOkPG))) g$maps$13383$1DOkPG g$x$13382$1DOkPG)))))) g$maps$13377$1DOkPG g$y$13376$1DOkPG)))))) g$ls/false$13373$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13372$1DOkPG)))) ((case-lambda ((g$x$13386$1DOkPG) '())) g$t$13372$1DOkPG)))) g$t$13359$1DOkPG)))) ((case-lambda ((g$x$13387$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13387$1DOkPG) (begin '#f ((case-lambda ((g$q$13388$1DOkPG) (if g$q$13388$1DOkPG (begin '#f ((case-lambda ((g$r$13389$1DOkPG) (if g$r$13389$1DOkPG (begin '#f (append g$q$13388$1DOkPG g$r$13389$1DOkPG)) '#f))) ((case-lambda ((g$x$13390$1DOkPG) (list g$x$13390$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$13387$1DOkPG)))) '#f))) ((case-lambda ((g$x$13391$1DOkPG) (list g$x$13391$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13387$1DOkPG)))) '#f))) g$t$13359$1DOkPG)))) g$t$13357$1DOkPG)))) ((case-lambda ((g$x$13392$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13392$1DOkPG) '()) (begin '#f '()) '#f))) g$t$13357$1DOkPG)))) g$y$13355$1DOkPG))))) g$f$13354$1DOkPG) g$y$13353$1DOkPG (case-lambda ((g$maps$13393$1DOkPG) (call-with-values (case-lambda (() (g$gen-syntax$13246$1DOkPG g$src$13316$1DOkPG g$x$13351$1DOkPG g$r$13318$1DOkPG (cons '() g$maps$13393$1DOkPG) g$ellipsis?$13320$1DOkPG '#f))) (case-lambda ((g$x$13396$1DOkPG g$maps$13397$1DOkPG) ((case-lambda ((g$maps$13398$1DOkPG g$x$13399$1DOkPG) (if (null? (car g$maps$13398$1DOkPG)) (g$syntax-violation$9501$1DOkPG '#f '"extra ellipsis in syntax form" g$src$13316$1DOkPG) (values (g$gen-map$13250$1DOkPG g$x$13399$1DOkPG (car g$maps$13398$1DOkPG)) (cdr g$maps$13398$1DOkPG))))) g$maps$13397$1DOkPG g$x$13396$1DOkPG))))))))) g$ls/false$13347$1DOkPG) ((case-lambda ((g$t$13400$1DOkPG) ((case-lambda ((g$ls/false$13401$1DOkPG) (if (if g$ls/false$13401$1DOkPG (begin '#f (apply (case-lambda ((g$x$13402$1DOkPG g$y$13403$1DOkPG) '#t)) g$ls/false$13401$1DOkPG)) '#f) (apply (case-lambda ((g$x$13404$1DOkPG g$y$13405$1DOkPG) (call-with-values (case-lambda (() (g$gen-syntax$13246$1DOkPG g$src$13316$1DOkPG g$x$13404$1DOkPG g$r$13318$1DOkPG g$maps$13319$1DOkPG g$ellipsis?$13320$1DOkPG '#f))) (case-lambda ((g$xnew$13408$1DOkPG g$maps$13409$1DOkPG) ((case-lambda ((g$maps$13410$1DOkPG g$xnew$13411$1DOkPG) (call-with-values (case-lambda (() (g$gen-syntax$13246$1DOkPG g$src$13316$1DOkPG g$y$13405$1DOkPG g$r$13318$1DOkPG g$maps$13410$1DOkPG g$ellipsis?$13320$1DOkPG g$vec?$13321$1DOkPG))) (case-lambda ((g$ynew$13414$1DOkPG g$maps$13415$1DOkPG) ((case-lambda ((g$maps$13416$1DOkPG g$ynew$13417$1DOkPG) (values (g$gen-cons$13251$1DOkPG g$e$13317$1DOkPG g$x$13404$1DOkPG g$y$13405$1DOkPG g$xnew$13411$1DOkPG g$ynew$13417$1DOkPG) g$maps$13416$1DOkPG))) g$maps$13415$1DOkPG g$ynew$13414$1DOkPG)))))) g$maps$13409$1DOkPG g$xnew$13408$1DOkPG)))))) g$ls/false$13401$1DOkPG) ((case-lambda ((g$t$13418$1DOkPG) ((case-lambda ((g$ls/false$13419$1DOkPG) (if (if g$ls/false$13419$1DOkPG (begin '#f (apply (case-lambda ((g$ls$13420$1DOkPG) '#t)) g$ls/false$13419$1DOkPG)) '#f) (apply (case-lambda ((g$ls$13421$1DOkPG) (call-with-values (case-lambda (() (g$gen-syntax$13246$1DOkPG g$src$13316$1DOkPG g$ls$13421$1DOkPG g$r$13318$1DOkPG g$maps$13319$1DOkPG g$ellipsis?$13320$1DOkPG '#t))) (case-lambda ((g$lsnew$13424$1DOkPG g$maps$13425$1DOkPG) ((case-lambda ((g$maps$13426$1DOkPG g$lsnew$13427$1DOkPG) (values (g$gen-vector$13252$1DOkPG g$e$13317$1DOkPG g$ls$13421$1DOkPG g$lsnew$13427$1DOkPG) g$maps$13426$1DOkPG))) g$maps$13425$1DOkPG g$lsnew$13424$1DOkPG)))))) g$ls/false$13419$1DOkPG) ((case-lambda ((g$t$13428$1DOkPG) ((case-lambda ((g$ls/false$13429$1DOkPG) (if (if g$ls/false$13429$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13429$1DOkPG)) '#f) (apply (case-lambda (() (values (list 'quote g$e$13317$1DOkPG) g$maps$13319$1DOkPG))) g$ls/false$13429$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13428$1DOkPG)))) ((case-lambda ((g$x$13430$1DOkPG) '())) g$t$13428$1DOkPG)))) g$t$13418$1DOkPG)))) ((case-lambda ((g$x$13431$1DOkPG) (if (g$syntax-vector?$9175$1DOkPG g$x$13431$1DOkPG) (begin '#f ((letrec ((g$f$13432$1DOkPG (case-lambda ((g$x$13433$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13433$1DOkPG) ((case-lambda ((g$cars/f$13434$1DOkPG) (if g$cars/f$13434$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13435$1DOkPG) (if g$cdrs/f$13435$1DOkPG (begin '#f (map cons g$cars/f$13434$1DOkPG g$cdrs/f$13435$1DOkPG)) '#f))) (g$f$13432$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13433$1DOkPG)))) '#f))) ((case-lambda ((g$x$13436$1DOkPG) (list g$x$13436$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13433$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13433$1DOkPG) (list (begin 'ls '())) '#f)))))) g$f$13432$1DOkPG) (g$syntax-vector->list$9173$1DOkPG g$x$13431$1DOkPG))) '#f))) g$t$13418$1DOkPG)))) g$t$13400$1DOkPG)))) ((case-lambda ((g$x$13437$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13437$1DOkPG) (begin '#f ((case-lambda ((g$q$13438$1DOkPG) (if g$q$13438$1DOkPG (begin '#f ((case-lambda ((g$r$13439$1DOkPG) (if g$r$13439$1DOkPG (begin '#f (append g$q$13438$1DOkPG g$r$13439$1DOkPG)) '#f))) ((case-lambda ((g$x$13440$1DOkPG) (list g$x$13440$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$13437$1DOkPG)))) '#f))) ((case-lambda ((g$x$13441$1DOkPG) (list g$x$13441$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13437$1DOkPG)))) '#f))) g$t$13400$1DOkPG)))) g$t$13346$1DOkPG)))) ((case-lambda ((g$x$13442$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13442$1DOkPG) (begin '#f ((case-lambda ((g$q$13443$1DOkPG) (if g$q$13443$1DOkPG (begin '#f ((case-lambda ((g$r$13444$1DOkPG) (if g$r$13444$1DOkPG (begin '#f (append g$q$13443$1DOkPG g$r$13444$1DOkPG)) '#f))) ((case-lambda ((g$x$13445$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13445$1DOkPG) (begin '#f ((case-lambda ((g$q$13446$1DOkPG) (if g$q$13446$1DOkPG (begin '#f ((case-lambda ((g$r$13447$1DOkPG) (if g$r$13447$1DOkPG (begin '#f (append g$q$13446$1DOkPG g$r$13447$1DOkPG)) '#f))) ((case-lambda ((g$x$13448$1DOkPG) (list g$x$13448$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$13445$1DOkPG)))) '#f))) ((case-lambda ((g$x$13449$1DOkPG) (list g$x$13449$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13445$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13442$1DOkPG)))) '#f))) ((case-lambda ((g$x$13450$1DOkPG) (list g$x$13450$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13442$1DOkPG)))) '#f))) g$t$13346$1DOkPG)))) g$t$13339$1DOkPG)))) ((case-lambda ((g$x$13451$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13451$1DOkPG) (begin '#f ((case-lambda ((g$q$13452$1DOkPG) (if g$q$13452$1DOkPG (begin '#f ((case-lambda ((g$r$13453$1DOkPG) (if g$r$13453$1DOkPG (begin '#f (append g$q$13452$1DOkPG g$r$13453$1DOkPG)) '#f))) ((case-lambda ((g$x$13454$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13454$1DOkPG) (begin '#f ((case-lambda ((g$q$13455$1DOkPG) (if g$q$13455$1DOkPG (begin '#f ((case-lambda ((g$r$13456$1DOkPG) (if g$r$13456$1DOkPG (begin '#f (append g$q$13455$1DOkPG g$r$13456$1DOkPG)) '#f))) ((case-lambda ((g$x$13457$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13457$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13454$1DOkPG)))) '#f))) ((case-lambda ((g$x$13458$1DOkPG) (list g$x$13458$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13454$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13451$1DOkPG)))) '#f))) ((case-lambda ((g$x$13459$1DOkPG) (list g$x$13459$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13451$1DOkPG)))) '#f))) g$t$13339$1DOkPG)))) g$t$13326$1DOkPG)))) ((case-lambda ((g$x$13460$1DOkPG) (list g$x$13460$1DOkPG))) g$t$13326$1DOkPG)))) g$t$13322$1DOkPG)))) ((case-lambda ((g$x$13461$1DOkPG) (list g$x$13461$1DOkPG))) g$t$13322$1DOkPG)))) g$e$13317$1DOkPG)))) (g$gen-ref$13247$1DOkPG (case-lambda ((g$src$13303$1DOkPG g$var$13304$1DOkPG g$level$13305$1DOkPG g$maps$13306$1DOkPG) (if (= g$level$13305$1DOkPG '0) (values g$var$13304$1DOkPG g$maps$13306$1DOkPG) (if (null? g$maps$13306$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"missing ellipsis in syntax form" g$src$13303$1DOkPG) (call-with-values (case-lambda (() (g$gen-ref$13247$1DOkPG g$src$13303$1DOkPG g$var$13304$1DOkPG (- g$level$13305$1DOkPG '1) (cdr g$maps$13306$1DOkPG)))) (case-lambda ((g$outer-var$13309$1DOkPG g$outer-maps$13310$1DOkPG) ((case-lambda ((g$outer-maps$13311$1DOkPG g$outer-var$13312$1DOkPG) ((case-lambda ((g$t$13313$1DOkPG) (if g$t$13313$1DOkPG ((case-lambda ((g$b$13314$1DOkPG) (values (cdr g$b$13314$1DOkPG) g$maps$13306$1DOkPG))) g$t$13313$1DOkPG) ((case-lambda ((g$inner-var$13315$1DOkPG) (values g$inner-var$13315$1DOkPG (cons (cons (cons g$outer-var$13312$1DOkPG g$inner-var$13315$1DOkPG) (car g$maps$13306$1DOkPG)) g$outer-maps$13311$1DOkPG)))) (g$gen-lexical$9128$1DOkPG 'tmp))))) (assq g$outer-var$13312$1DOkPG (car g$maps$13306$1DOkPG))))) g$outer-maps$13310$1DOkPG g$outer-var$13309$1DOkPG))))))))) (g$gen-append$13248$1DOkPG (case-lambda ((g$x$13301$1DOkPG g$y$13302$1DOkPG) (if (equal? g$y$13302$1DOkPG ''()) g$x$13301$1DOkPG (list 'append g$x$13301$1DOkPG g$y$13302$1DOkPG))))) (g$gen-mappend$13249$1DOkPG (case-lambda ((g$e$13299$1DOkPG g$map-env$13300$1DOkPG) (list 'apply '(primitive append) (g$gen-map$13250$1DOkPG g$e$13299$1DOkPG g$map-env$13300$1DOkPG))))) (g$gen-map$13250$1DOkPG (case-lambda ((g$e$13290$1DOkPG g$map-env$13291$1DOkPG) ((case-lambda ((g$formals$13292$1DOkPG g$actuals$13293$1DOkPG) (if (eq? (car g$e$13290$1DOkPG) 'ref) (car g$actuals$13293$1DOkPG) (if (g$for-all$7866$1DOkPG (case-lambda ((g$x$13294$1DOkPG) (if (eq? (car g$x$13294$1DOkPG) 'ref) (begin '#f (memq (g$cadr$7446$1DOkPG g$x$13294$1DOkPG) g$formals$13292$1DOkPG)) '#f))) (cdr g$e$13290$1DOkPG)) ((case-lambda ((g$args$13295$1DOkPG) (cons 'map (cons (list 'primitive (car g$e$13290$1DOkPG)) g$args$13295$1DOkPG)))) (map ((case-lambda ((g$r$13296$1DOkPG) (case-lambda ((g$x$13297$1DOkPG) (cdr (assq (g$cadr$7446$1DOkPG g$x$13297$1DOkPG) g$r$13296$1DOkPG)))))) (map cons g$formals$13292$1DOkPG g$actuals$13293$1DOkPG)) (cdr g$e$13290$1DOkPG))) (g$cons*$7868$1DOkPG 'map (list 'lambda g$formals$13292$1DOkPG g$e$13290$1DOkPG) g$actuals$13293$1DOkPG))))) (map cdr g$map-env$13291$1DOkPG) (map (case-lambda ((g$x$13298$1DOkPG) (list 'ref (car g$x$13298$1DOkPG)))) g$map-env$13291$1DOkPG))))) (g$gen-cons$13251$1DOkPG (case-lambda ((g$e$13282$1DOkPG g$x$13283$1DOkPG g$y$13284$1DOkPG g$xnew$13285$1DOkPG g$ynew$13286$1DOkPG) ((case-lambda ((g$t$13287$1DOkPG) (if (memv g$t$13287$1DOkPG '(quote)) (if (eq? (car g$xnew$13285$1DOkPG) 'quote) ((case-lambda ((g$xnew$13288$1DOkPG g$ynew$13289$1DOkPG) (if (if (eq? g$xnew$13288$1DOkPG g$x$13283$1DOkPG) (begin '#f (eq? g$ynew$13289$1DOkPG g$y$13284$1DOkPG)) '#f) (list 'quote g$e$13282$1DOkPG) (list 'quote (cons g$xnew$13288$1DOkPG g$ynew$13289$1DOkPG))))) (g$cadr$7446$1DOkPG g$xnew$13285$1DOkPG) (g$cadr$7446$1DOkPG g$ynew$13286$1DOkPG)) (if (null? (g$cadr$7446$1DOkPG g$ynew$13286$1DOkPG)) (list 'list g$xnew$13285$1DOkPG) (list 'cons g$xnew$13285$1DOkPG g$ynew$13286$1DOkPG))) (if (memv g$t$13287$1DOkPG '(list)) (cons 'list (cons g$xnew$13285$1DOkPG (cdr g$ynew$13286$1DOkPG))) (list 'cons g$xnew$13285$1DOkPG g$ynew$13286$1DOkPG))))) (car g$ynew$13286$1DOkPG))))) (g$gen-vector$13252$1DOkPG (case-lambda ((g$e$13279$1DOkPG g$ls$13280$1DOkPG g$lsnew$13281$1DOkPG) (if (eq? (car g$lsnew$13281$1DOkPG) 'quote) (if (eq? (g$cadr$7446$1DOkPG g$lsnew$13281$1DOkPG) g$ls$13280$1DOkPG) (list 'quote g$e$13279$1DOkPG) (list 'quote (list->vector (g$cadr$7446$1DOkPG g$lsnew$13281$1DOkPG)))) (if (eq? (car g$lsnew$13281$1DOkPG) 'list) (cons 'vector (cdr g$lsnew$13281$1DOkPG)) (list 'list->vector g$lsnew$13281$1DOkPG)))))) (g$regen$13253$1DOkPG (case-lambda ((g$x$13276$1DOkPG) ((case-lambda ((g$t$13277$1DOkPG) (if (memv g$t$13277$1DOkPG '(ref)) (g$cadr$7446$1DOkPG g$x$13276$1DOkPG) (if (memv g$t$13277$1DOkPG '(primitive)) (list 'primitive (g$cadr$7446$1DOkPG g$x$13276$1DOkPG)) (if (memv g$t$13277$1DOkPG '(quote)) (list 'quote (g$cadr$7446$1DOkPG g$x$13276$1DOkPG)) (if (memv g$t$13277$1DOkPG '(lambda)) (g$build-lambda$9115$1DOkPG '#f (g$cadr$7446$1DOkPG g$x$13276$1DOkPG) (g$regen$13253$1DOkPG (g$caddr$7452$1DOkPG g$x$13276$1DOkPG))) (if (memv g$t$13277$1DOkPG '(map)) ((case-lambda ((g$ls$13278$1DOkPG) (cons '(primitive ellipsis-map) g$ls$13278$1DOkPG))) (map g$regen$13253$1DOkPG (cdr g$x$13276$1DOkPG))) (cons (list 'primitive (car g$x$13276$1DOkPG)) (map g$regen$13253$1DOkPG (cdr g$x$13276$1DOkPG)))))))))) (car g$x$13276$1DOkPG)))))) (case-lambda ((g$e$13254$1DOkPG g$r$13255$1DOkPG g$mr$13256$1DOkPG) ((case-lambda ((g$t$13257$1DOkPG) ((case-lambda ((g$ls/false$13258$1DOkPG) (if (if g$ls/false$13258$1DOkPG (begin '#f (apply (case-lambda ((g$x$13259$1DOkPG) '#t)) g$ls/false$13258$1DOkPG)) '#f) (apply (case-lambda ((g$x$13260$1DOkPG) (call-with-values (case-lambda (() (g$gen-syntax$13246$1DOkPG g$e$13254$1DOkPG g$x$13260$1DOkPG g$r$13255$1DOkPG '() g$ellipsis?$9423$1DOkPG '#f))) (case-lambda ((g$e$13263$1DOkPG g$maps$13264$1DOkPG) ((case-lambda ((g$maps$13265$1DOkPG g$e$13266$1DOkPG) (g$regen$13253$1DOkPG g$e$13266$1DOkPG))) g$maps$13264$1DOkPG g$e$13263$1DOkPG)))))) g$ls/false$13258$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13257$1DOkPG)))) ((case-lambda ((g$x$13267$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13267$1DOkPG) (begin '#f ((case-lambda ((g$q$13268$1DOkPG) (if g$q$13268$1DOkPG (begin '#f ((case-lambda ((g$r$13269$1DOkPG) (if g$r$13269$1DOkPG (begin '#f (append g$q$13268$1DOkPG g$r$13269$1DOkPG)) '#f))) ((case-lambda ((g$x$13270$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13270$1DOkPG) (begin '#f ((case-lambda ((g$q$13271$1DOkPG) (if g$q$13271$1DOkPG (begin '#f ((case-lambda ((g$r$13272$1DOkPG) (if g$r$13272$1DOkPG (begin '#f (append g$q$13271$1DOkPG g$r$13272$1DOkPG)) '#f))) ((case-lambda ((g$x$13273$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13273$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13270$1DOkPG)))) '#f))) ((case-lambda ((g$x$13274$1DOkPG) (list g$x$13274$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13270$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13267$1DOkPG)))) '#f))) ((case-lambda ((g$x$13275$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13267$1DOkPG)))) '#f))) g$t$13257$1DOkPG)))) g$e$13254$1DOkPG)))))))) (g$core-macro-transformer$9427$1DOkPG g$core-macro-transformer$15481$1DOkPG (case-lambda ((g$name$13462$1DOkPG) ((case-lambda ((g$t$13463$1DOkPG) (if (memv g$t$13463$1DOkPG '(quote)) g$quote-transformer$9385$1DOkPG (if (memv g$t$13463$1DOkPG '(lambda)) g$lambda-transformer$9387$1DOkPG (if (memv g$t$13463$1DOkPG '(case-lambda)) g$case-lambda-transformer$9386$1DOkPG (if (memv g$t$13463$1DOkPG '(letrec)) g$letrec-transformer$9375$1DOkPG (if (memv g$t$13463$1DOkPG '(letrec*)) g$letrec*-transformer$9376$1DOkPG (if (memv g$t$13463$1DOkPG '(case)) g$case-transformer$9384$1DOkPG (if (memv g$t$13463$1DOkPG '(if)) g$if-transformer$9383$1DOkPG (if (memv g$t$13463$1DOkPG '(when)) g$when-transformer$9381$1DOkPG (if (memv g$t$13463$1DOkPG '(unless)) g$unless-transformer$9382$1DOkPG (if (memv g$t$13463$1DOkPG '(parameterize)) g$parameterize-transformer$9419$1DOkPG (if (memv g$t$13463$1DOkPG '(foreign-call)) g$foreign-call-transformer$9420$1DOkPG (if (memv g$t$13463$1DOkPG '(syntax-case)) g$syntax-case-transformer$9424$1DOkPG (if (memv g$t$13463$1DOkPG '(syntax)) g$syntax-transformer$9426$1DOkPG (if (memv g$t$13463$1DOkPG '(type-descriptor)) g$type-descriptor-transformer$9378$1DOkPG (if (memv g$t$13463$1DOkPG '(record-type-descriptor)) g$record-type-descriptor-transformer$9379$1DOkPG (if (memv g$t$13463$1DOkPG '(record-constructor-descriptor)) g$record-constructor-descriptor-transformer$9380$1DOkPG (if (memv g$t$13463$1DOkPG '(fluid-let-syntax)) g$fluid-let-syntax-transformer$9377$1DOkPG (assertion-violation 'macro-transformer '"BUG: cannot find transformer" g$name$13462$1DOkPG)))))))))))))))))))) g$name$13462$1DOkPG)))) (g$file-options-macro$9428$1DOkPG g$file-options-macro$15482$1DOkPG (case-lambda ((g$x$13464$1DOkPG) ((case-lambda ((g$t$13465$1DOkPG) ((case-lambda ((g$ls/false$13466$1DOkPG) (if (if g$ls/false$13466$1DOkPG (begin '#f (apply (case-lambda ((g$opt*$13467$1DOkPG) (if (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$opt*$13467$1DOkPG) (begin '#f (g$file-options-spec$8658$1DOkPG (map g$id->sym$9182$1DOkPG g$opt*$13467$1DOkPG))) '#f))) g$ls/false$13466$1DOkPG)) '#f) (apply (case-lambda ((g$opt*$13468$1DOkPG) (g$bless$9388$1DOkPG (list 'quote (g$file-options-spec$8658$1DOkPG (map g$id->sym$9182$1DOkPG g$opt*$13468$1DOkPG)))))) g$ls/false$13466$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13465$1DOkPG)))) ((case-lambda ((g$x$13469$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13469$1DOkPG) (begin '#f ((case-lambda ((g$q$13470$1DOkPG) (if g$q$13470$1DOkPG (begin '#f ((case-lambda ((g$r$13471$1DOkPG) (if g$r$13471$1DOkPG (begin '#f (append g$q$13470$1DOkPG g$r$13471$1DOkPG)) '#f))) ((letrec ((g$f$13472$1DOkPG (case-lambda ((g$x$13473$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13473$1DOkPG) ((case-lambda ((g$cars/f$13474$1DOkPG) (if g$cars/f$13474$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13475$1DOkPG) (if g$cdrs/f$13475$1DOkPG (begin '#f (map cons g$cars/f$13474$1DOkPG g$cdrs/f$13475$1DOkPG)) '#f))) (g$f$13472$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13473$1DOkPG)))) '#f))) ((case-lambda ((g$x$13476$1DOkPG) (list g$x$13476$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13473$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13473$1DOkPG) (list (begin 'opt* '())) '#f)))))) g$f$13472$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13469$1DOkPG)))) '#f))) ((case-lambda ((g$x$13477$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13469$1DOkPG)))) '#f))) g$t$13465$1DOkPG)))) g$x$13464$1DOkPG)))) (g$symbol-macro$9429$1DOkPG g$symbol-macro$15483$1DOkPG (case-lambda ((g$x$13478$1DOkPG g$set$13479$1DOkPG) ((case-lambda ((g$t$13480$1DOkPG) ((case-lambda ((g$ls/false$13481$1DOkPG) (if (if g$ls/false$13481$1DOkPG (begin '#f (apply (case-lambda ((g$name$13482$1DOkPG) (if (g$id?$9181$1DOkPG g$name$13482$1DOkPG) (begin '#f (memq (g$id->sym$9182$1DOkPG g$name$13482$1DOkPG) g$set$13479$1DOkPG)) '#f))) g$ls/false$13481$1DOkPG)) '#f) (apply (case-lambda ((g$name$13483$1DOkPG) (g$bless$9388$1DOkPG (list 'quote g$name$13483$1DOkPG)))) g$ls/false$13481$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13480$1DOkPG)))) ((case-lambda ((g$x$13484$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13484$1DOkPG) (begin '#f ((case-lambda ((g$q$13485$1DOkPG) (if g$q$13485$1DOkPG (begin '#f ((case-lambda ((g$r$13486$1DOkPG) (if g$r$13486$1DOkPG (begin '#f (append g$q$13485$1DOkPG g$r$13486$1DOkPG)) '#f))) ((case-lambda ((g$x$13487$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13487$1DOkPG) (begin '#f ((case-lambda ((g$q$13488$1DOkPG) (if g$q$13488$1DOkPG (begin '#f ((case-lambda ((g$r$13489$1DOkPG) (if g$r$13489$1DOkPG (begin '#f (append g$q$13488$1DOkPG g$r$13489$1DOkPG)) '#f))) ((case-lambda ((g$x$13490$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13490$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13487$1DOkPG)))) '#f))) ((case-lambda ((g$x$13491$1DOkPG) (list g$x$13491$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13487$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13484$1DOkPG)))) '#f))) ((case-lambda ((g$x$13492$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13484$1DOkPG)))) '#f))) g$t$13480$1DOkPG)))) g$x$13478$1DOkPG)))) (g$macro-transformer$9430$1DOkPG g$macro-transformer$15484$1DOkPG (case-lambda ((g$x$13493$1DOkPG) (if (procedure? g$x$13493$1DOkPG) g$x$13493$1DOkPG (if (symbol? g$x$13493$1DOkPG) ((case-lambda ((g$t$13494$1DOkPG) (if (memv g$t$13494$1DOkPG '(define-record-type)) g$define-record-type-macro$9416$1DOkPG (if (memv g$t$13494$1DOkPG '(define-struct)) g$define-struct-macro$9415$1DOkPG (if (memv g$t$13494$1DOkPG '(include)) g$include-macro$9410$1DOkPG (if (memv g$t$13494$1DOkPG '(cond)) g$cond-macro$9408$1DOkPG (if (memv g$t$13494$1DOkPG '(let)) g$let-macro$9391$1DOkPG (if (memv g$t$13494$1DOkPG '(do)) g$do-macro$9404$1DOkPG (if (memv g$t$13494$1DOkPG '(or)) g$or-macro$9406$1DOkPG (if (memv g$t$13494$1DOkPG '(and)) g$and-macro$9407$1DOkPG (if (memv g$t$13494$1DOkPG '(let*)) g$let*-macro$9405$1DOkPG (if (memv g$t$13494$1DOkPG '(let-values)) g$let-values-macro$9392$1DOkPG (if (memv g$t$13494$1DOkPG '(let*-values)) g$let*-values-macro$9393$1DOkPG (if (memv g$t$13494$1DOkPG '(syntax-rules)) g$syntax-rules-macro$9412$1DOkPG (if (memv g$t$13494$1DOkPG '(quasiquote)) g$quasiquote-macro$9413$1DOkPG (if (memv g$t$13494$1DOkPG '(quasisyntax)) g$quasisyntax-macro$9414$1DOkPG (if (memv g$t$13494$1DOkPG '(with-syntax)) g$with-syntax-macro$9389$1DOkPG (if (memv g$t$13494$1DOkPG '(identifier-syntax)) g$identifier-syntax-macro$9403$1DOkPG (if (memv g$t$13494$1DOkPG '(time)) g$time-macro$9399$1DOkPG (if (memv g$t$13494$1DOkPG '(delay)) g$delay-macro$9400$1DOkPG (if (memv g$t$13494$1DOkPG '(assert)) g$assert-macro$9401$1DOkPG (if (memv g$t$13494$1DOkPG '(endianness)) g$endianness-macro$9402$1DOkPG (if (memv g$t$13494$1DOkPG '(guard)) g$guard-macro$9397$1DOkPG (if (memv g$t$13494$1DOkPG '(define-enumeration)) g$define-enumeration-macro$9398$1DOkPG (if (memv g$t$13494$1DOkPG '(trace-lambda)) g$trace-lambda-macro$9394$1DOkPG (if (memv g$t$13494$1DOkPG '(trace-define)) g$trace-define-macro$9395$1DOkPG (if (memv g$t$13494$1DOkPG '(trace-define-syntax)) g$trace-define-syntax-macro$9396$1DOkPG (if (memv g$t$13494$1DOkPG '(define-condition-type)) g$define-condition-type-macro$9417$1DOkPG (if (memv g$t$13494$1DOkPG '(include-into)) g$include-into-macro$9411$1DOkPG (if (memv g$t$13494$1DOkPG '(eol-style)) (case-lambda ((g$x$13497$1DOkPG) (g$symbol-macro$9429$1DOkPG g$x$13497$1DOkPG '(none lf cr crlf nel crnel ls)))) (if (memv g$t$13494$1DOkPG '(error-handling-mode)) (case-lambda ((g$x$13496$1DOkPG) (g$symbol-macro$9429$1DOkPG g$x$13496$1DOkPG '(ignore raise replace)))) (if (memv g$t$13494$1DOkPG '(buffer-mode)) (case-lambda ((g$x$13495$1DOkPG) (g$symbol-macro$9429$1DOkPG g$x$13495$1DOkPG '(none line block)))) (if (memv g$t$13494$1DOkPG '(file-options)) g$file-options-macro$9428$1DOkPG (if (memv g$t$13494$1DOkPG '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$incorrect-usage-macro$9418$1DOkPG (error 'macro-transformer '"BUG: invalid macro" g$x$13493$1DOkPG))))))))))))))))))))))))))))))))))) g$x$13493$1DOkPG) (error 'core-macro-transformer '"BUG: invalid macro" g$x$13493$1DOkPG)))))) (g$local-macro-transformer$9431$1DOkPG g$local-macro-transformer$15485$1DOkPG (case-lambda ((g$x$13498$1DOkPG) (car g$x$13498$1DOkPG)))) (g$do-macro-call$9432$1DOkPG g$do-macro-call$15486$1DOkPG (case-lambda ((g$transformer$13499$1DOkPG g$expr$13500$1DOkPG) ((case-lambda ((g$out$13501$1DOkPG) (begin ((letrec ((g$f$13502$1DOkPG (case-lambda ((g$x$13503$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$13503$1DOkPG) (void) (if (pair? g$x$13503$1DOkPG) (begin (g$f$13502$1DOkPG (car g$x$13503$1DOkPG)) (g$f$13502$1DOkPG (cdr g$x$13503$1DOkPG))) (if (vector? g$x$13503$1DOkPG) (vector-for-each g$f$13502$1DOkPG g$x$13503$1DOkPG) (if (symbol? g$x$13503$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"raw symbol encountered in output of macro" g$expr$13500$1DOkPG g$x$13503$1DOkPG) (void))))))))) g$f$13502$1DOkPG) g$out$13501$1DOkPG) (g$add-mark$9170$1DOkPG (g$gen-mark$9165$1DOkPG) g$out$13501$1DOkPG g$expr$13500$1DOkPG)))) (g$transformer$13499$1DOkPG (g$add-mark$9170$1DOkPG g$anti-mark$9166$1DOkPG g$expr$13500$1DOkPG '#f)))))) (g$chi-macro$9433$1DOkPG g$chi-macro$15487$1DOkPG (case-lambda ((g$p$13504$1DOkPG g$e$13505$1DOkPG) (g$do-macro-call$9432$1DOkPG (g$macro-transformer$9430$1DOkPG g$p$13504$1DOkPG) g$e$13505$1DOkPG)))) (g$chi-local-macro$9434$1DOkPG g$chi-local-macro$15488$1DOkPG (case-lambda ((g$p$13506$1DOkPG g$e$13507$1DOkPG) (g$do-macro-call$9432$1DOkPG (g$local-macro-transformer$9431$1DOkPG g$p$13506$1DOkPG) g$e$13507$1DOkPG)))) (g$chi-global-macro$9435$1DOkPG g$chi-global-macro$15489$1DOkPG (case-lambda ((g$p$13508$1DOkPG g$e$13509$1DOkPG) ((case-lambda ((g$lib$13510$1DOkPG g$loc$13511$1DOkPG) (begin (g$visit-library$9001$1DOkPG g$lib$13510$1DOkPG) ((case-lambda ((g$x$13512$1DOkPG) ((case-lambda ((g$transformer$13513$1DOkPG) (g$do-macro-call$9432$1DOkPG g$transformer$13513$1DOkPG g$e$13509$1DOkPG))) (if (procedure? g$x$13512$1DOkPG) g$x$13512$1DOkPG (assertion-violation 'chi-global-macro '"BUG: not a procedure" g$x$13512$1DOkPG))))) (symbol-value g$loc$13511$1DOkPG))))) (car g$p$13508$1DOkPG) (cdr g$p$13508$1DOkPG))))) (g$chi-expr*$9436$1DOkPG g$chi-expr*$15490$1DOkPG (case-lambda ((g$e*$13514$1DOkPG g$r$13515$1DOkPG g$mr$13516$1DOkPG) (if (null? g$e*$13514$1DOkPG) '() ((case-lambda ((g$e$13517$1DOkPG) (cons g$e$13517$1DOkPG (g$chi-expr*$9436$1DOkPG (cdr g$e*$13514$1DOkPG) g$r$13515$1DOkPG g$mr$13516$1DOkPG)))) (g$chi-expr$9438$1DOkPG (car g$e*$13514$1DOkPG) g$r$13515$1DOkPG g$mr$13516$1DOkPG)))))) (g$chi-application$9437$1DOkPG g$chi-application$15491$1DOkPG (case-lambda ((g$e$13518$1DOkPG g$r$13519$1DOkPG g$mr$13520$1DOkPG) ((case-lambda ((g$t$13521$1DOkPG) ((case-lambda ((g$ls/false$13522$1DOkPG) (if (if g$ls/false$13522$1DOkPG (begin '#f (apply (case-lambda ((g$rator$13523$1DOkPG g$rands$13524$1DOkPG) '#t)) g$ls/false$13522$1DOkPG)) '#f) (apply (case-lambda ((g$rator$13525$1DOkPG g$rands$13526$1DOkPG) ((case-lambda ((g$rator$13527$1DOkPG) (cons g$rator$13527$1DOkPG (g$chi-expr*$9436$1DOkPG g$rands$13526$1DOkPG g$r$13519$1DOkPG g$mr$13520$1DOkPG)))) (g$chi-expr$9438$1DOkPG g$rator$13525$1DOkPG g$r$13519$1DOkPG g$mr$13520$1DOkPG)))) g$ls/false$13522$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13521$1DOkPG)))) ((case-lambda ((g$x$13528$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13528$1DOkPG) (begin '#f ((case-lambda ((g$q$13529$1DOkPG) (if g$q$13529$1DOkPG (begin '#f ((case-lambda ((g$r$13530$1DOkPG) (if g$r$13530$1DOkPG (begin '#f (append g$q$13529$1DOkPG g$r$13530$1DOkPG)) '#f))) ((letrec ((g$f$13531$1DOkPG (case-lambda ((g$x$13532$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13532$1DOkPG) ((case-lambda ((g$cars/f$13533$1DOkPG) (if g$cars/f$13533$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13534$1DOkPG) (if g$cdrs/f$13534$1DOkPG (begin '#f (map cons g$cars/f$13533$1DOkPG g$cdrs/f$13534$1DOkPG)) '#f))) (g$f$13531$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13532$1DOkPG)))) '#f))) ((case-lambda ((g$x$13535$1DOkPG) (list g$x$13535$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13532$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13532$1DOkPG) (list (begin 'rands '())) '#f)))))) g$f$13531$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13528$1DOkPG)))) '#f))) ((case-lambda ((g$x$13536$1DOkPG) (list g$x$13536$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13528$1DOkPG)))) '#f))) g$t$13521$1DOkPG)))) g$e$13518$1DOkPG)))) (g$chi-expr$9438$1DOkPG g$chi-expr$15492$1DOkPG (case-lambda ((g$e$13537$1DOkPG g$r$13538$1DOkPG g$mr$13539$1DOkPG) (call-with-values (case-lambda (() (g$syntax-type$9199$1DOkPG g$e$13537$1DOkPG g$r$13538$1DOkPG))) (case-lambda ((g$type$13543$1DOkPG g$value$13544$1DOkPG g$kwd$13545$1DOkPG) ((case-lambda ((g$kwd$13546$1DOkPG g$value$13547$1DOkPG g$type$13548$1DOkPG) ((case-lambda ((g$t$13549$1DOkPG) (if (memv g$t$13549$1DOkPG '(core-macro)) ((case-lambda ((g$transformer$13619$1DOkPG) (g$transformer$13619$1DOkPG g$e$13537$1DOkPG g$r$13538$1DOkPG g$mr$13539$1DOkPG))) (g$core-macro-transformer$9427$1DOkPG g$value$13547$1DOkPG)) (if (memv g$t$13549$1DOkPG '(global)) ((case-lambda ((g$lib$13617$1DOkPG) ((case-lambda ((g$loc$13618$1DOkPG) ((case-lambda (() (begin ((g$inv-collector$9462$1DOkPG) g$lib$13617$1DOkPG) g$loc$13618$1DOkPG)))))) (cdr g$value$13547$1DOkPG)))) (car g$value$13547$1DOkPG)) (if (memv g$t$13549$1DOkPG '(core-prim)) ((case-lambda ((g$name$13616$1DOkPG) (list 'primitive g$name$13616$1DOkPG))) g$value$13547$1DOkPG) (if (memv g$t$13549$1DOkPG '(call)) (g$chi-application$9437$1DOkPG g$e$13537$1DOkPG g$r$13538$1DOkPG g$mr$13539$1DOkPG) (if (memv g$t$13549$1DOkPG '(lexical)) ((case-lambda ((g$lex$13615$1DOkPG) g$lex$13615$1DOkPG)) (g$lexical-var$9369$1DOkPG g$value$13547$1DOkPG)) (if (memv g$t$13549$1DOkPG '(global-macro global-macro!)) (g$chi-expr$9438$1DOkPG (g$chi-global-macro$9435$1DOkPG g$value$13547$1DOkPG g$e$13537$1DOkPG) g$r$13538$1DOkPG g$mr$13539$1DOkPG) (if (memv g$t$13549$1DOkPG '(local-macro local-macro!)) (g$chi-expr$9438$1DOkPG (g$chi-local-macro$9434$1DOkPG g$value$13547$1DOkPG g$e$13537$1DOkPG) g$r$13538$1DOkPG g$mr$13539$1DOkPG) (if (memv g$t$13549$1DOkPG '(macro macro!)) (g$chi-expr$9438$1DOkPG (g$chi-macro$9433$1DOkPG g$value$13547$1DOkPG g$e$13537$1DOkPG) g$r$13538$1DOkPG g$mr$13539$1DOkPG) (if (memv g$t$13549$1DOkPG '(constant)) ((case-lambda ((g$datum$13614$1DOkPG) (list 'quote g$datum$13614$1DOkPG))) g$value$13547$1DOkPG) (if (memv g$t$13549$1DOkPG '(set!)) (g$chi-set!$9439$1DOkPG g$e$13537$1DOkPG g$r$13538$1DOkPG g$mr$13539$1DOkPG) (if (memv g$t$13549$1DOkPG '(begin)) ((case-lambda ((g$t$13595$1DOkPG) ((case-lambda ((g$ls/false$13596$1DOkPG) (if (if g$ls/false$13596$1DOkPG (begin '#f (apply (case-lambda ((g$x$13597$1DOkPG g$x*$13598$1DOkPG) '#t)) g$ls/false$13596$1DOkPG)) '#f) (apply (case-lambda ((g$x$13599$1DOkPG g$x*$13600$1DOkPG) (g$build-sequence$9118$1DOkPG '#f (g$chi-expr*$9436$1DOkPG (cons g$x$13599$1DOkPG g$x*$13600$1DOkPG) g$r$13538$1DOkPG g$mr$13539$1DOkPG)))) g$ls/false$13596$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13595$1DOkPG)))) ((case-lambda ((g$x$13601$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13601$1DOkPG) (begin '#f ((case-lambda ((g$q$13602$1DOkPG) (if g$q$13602$1DOkPG (begin '#f ((case-lambda ((g$r$13603$1DOkPG) (if g$r$13603$1DOkPG (begin '#f (append g$q$13602$1DOkPG g$r$13603$1DOkPG)) '#f))) ((case-lambda ((g$x$13604$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13604$1DOkPG) (begin '#f ((case-lambda ((g$q$13605$1DOkPG) (if g$q$13605$1DOkPG (begin '#f ((case-lambda ((g$r$13606$1DOkPG) (if g$r$13606$1DOkPG (begin '#f (append g$q$13605$1DOkPG g$r$13606$1DOkPG)) '#f))) ((letrec ((g$f$13607$1DOkPG (case-lambda ((g$x$13608$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13608$1DOkPG) ((case-lambda ((g$cars/f$13609$1DOkPG) (if g$cars/f$13609$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13610$1DOkPG) (if g$cdrs/f$13610$1DOkPG (begin '#f (map cons g$cars/f$13609$1DOkPG g$cdrs/f$13610$1DOkPG)) '#f))) (g$f$13607$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13608$1DOkPG)))) '#f))) ((case-lambda ((g$x$13611$1DOkPG) (list g$x$13611$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13608$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13608$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$13607$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13604$1DOkPG)))) '#f))) ((case-lambda ((g$x$13612$1DOkPG) (list g$x$13612$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13604$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13601$1DOkPG)))) '#f))) ((case-lambda ((g$x$13613$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13601$1DOkPG)))) '#f))) g$t$13595$1DOkPG)))) g$e$13537$1DOkPG) (if (memv g$t$13549$1DOkPG '(let-syntax letrec-syntax)) ((case-lambda ((g$t$13551$1DOkPG) ((case-lambda ((g$ls/false$13552$1DOkPG) (if (if g$ls/false$13552$1DOkPG (begin '#f (apply (case-lambda ((g$xlhs*$13553$1DOkPG g$xrhs*$13554$1DOkPG g$xbody$13555$1DOkPG g$xbody*$13556$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$xlhs*$13553$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"invalid identifiers" g$e$13537$1DOkPG)))) g$ls/false$13552$1DOkPG)) '#f) (apply (case-lambda ((g$xlhs*$13557$1DOkPG g$xrhs*$13558$1DOkPG g$xbody$13559$1DOkPG g$xbody*$13560$1DOkPG) ((case-lambda ((g$xlab*$13561$1DOkPG) ((case-lambda ((g$xrib$13562$1DOkPG) ((case-lambda ((g$xb*$13563$1DOkPG) ((case-lambda (() (g$build-sequence$9118$1DOkPG '#f (g$chi-expr*$9436$1DOkPG (map (case-lambda ((g$x$13564$1DOkPG) (g$add-subst$9171$1DOkPG g$xrib$13562$1DOkPG g$x$13564$1DOkPG))) (cons g$xbody$13559$1DOkPG g$xbody*$13560$1DOkPG)) (append (map cons g$xlab*$13561$1DOkPG g$xb*$13563$1DOkPG) g$r$13538$1DOkPG) (append (map cons g$xlab*$13561$1DOkPG g$xb*$13563$1DOkPG) g$mr$13539$1DOkPG)))))))) (map (case-lambda ((g$x$13565$1DOkPG) (g$make-eval-transformer$9209$1DOkPG (g$expand-transformer$9455$1DOkPG (if (eq? g$type$13548$1DOkPG 'let-syntax) g$x$13565$1DOkPG (g$add-subst$9171$1DOkPG g$xrib$13562$1DOkPG g$x$13565$1DOkPG)) g$mr$13539$1DOkPG)))) g$xrhs*$13558$1DOkPG)))) (g$make-full-rib$9149$1DOkPG g$xlhs*$13557$1DOkPG g$xlab*$13561$1DOkPG)))) (map g$gen-label$9130$1DOkPG g$xlhs*$13557$1DOkPG)))) g$ls/false$13552$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13551$1DOkPG)))) ((case-lambda ((g$x$13566$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13566$1DOkPG) (begin '#f ((case-lambda ((g$q$13567$1DOkPG) (if g$q$13567$1DOkPG (begin '#f ((case-lambda ((g$r$13568$1DOkPG) (if g$r$13568$1DOkPG (begin '#f (append g$q$13567$1DOkPG g$r$13568$1DOkPG)) '#f))) ((case-lambda ((g$x$13569$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13569$1DOkPG) (begin '#f ((case-lambda ((g$q$13570$1DOkPG) (if g$q$13570$1DOkPG (begin '#f ((case-lambda ((g$r$13571$1DOkPG) (if g$r$13571$1DOkPG (begin '#f (append g$q$13570$1DOkPG g$r$13571$1DOkPG)) '#f))) ((case-lambda ((g$x$13572$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13572$1DOkPG) (begin '#f ((case-lambda ((g$q$13573$1DOkPG) (if g$q$13573$1DOkPG (begin '#f ((case-lambda ((g$r$13574$1DOkPG) (if g$r$13574$1DOkPG (begin '#f (append g$q$13573$1DOkPG g$r$13574$1DOkPG)) '#f))) ((letrec ((g$f$13575$1DOkPG (case-lambda ((g$x$13576$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13576$1DOkPG) ((case-lambda ((g$cars/f$13577$1DOkPG) (if g$cars/f$13577$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13578$1DOkPG) (if g$cdrs/f$13578$1DOkPG (begin '#f (map cons g$cars/f$13577$1DOkPG g$cdrs/f$13578$1DOkPG)) '#f))) (g$f$13575$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13576$1DOkPG)))) '#f))) ((case-lambda ((g$x$13579$1DOkPG) (list g$x$13579$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13576$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13576$1DOkPG) (list (begin 'xbody* '())) '#f)))))) g$f$13575$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13572$1DOkPG)))) '#f))) ((case-lambda ((g$x$13580$1DOkPG) (list g$x$13580$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13572$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13569$1DOkPG)))) '#f))) ((letrec ((g$f$13581$1DOkPG (case-lambda ((g$x$13582$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13582$1DOkPG) ((case-lambda ((g$cars/f$13583$1DOkPG) (if g$cars/f$13583$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13584$1DOkPG) (if g$cdrs/f$13584$1DOkPG (begin '#f (map cons g$cars/f$13583$1DOkPG g$cdrs/f$13584$1DOkPG)) '#f))) (g$f$13581$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13582$1DOkPG)))) '#f))) ((case-lambda ((g$x$13585$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13585$1DOkPG) (begin '#f ((case-lambda ((g$q$13586$1DOkPG) (if g$q$13586$1DOkPG (begin '#f ((case-lambda ((g$r$13587$1DOkPG) (if g$r$13587$1DOkPG (begin '#f (append g$q$13586$1DOkPG g$r$13587$1DOkPG)) '#f))) ((case-lambda ((g$x$13588$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13588$1DOkPG) (begin '#f ((case-lambda ((g$q$13589$1DOkPG) (if g$q$13589$1DOkPG (begin '#f ((case-lambda ((g$r$13590$1DOkPG) (if g$r$13590$1DOkPG (begin '#f (append g$q$13589$1DOkPG g$r$13590$1DOkPG)) '#f))) ((case-lambda ((g$x$13591$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13591$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13588$1DOkPG)))) '#f))) ((case-lambda ((g$x$13592$1DOkPG) (list g$x$13592$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13588$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13585$1DOkPG)))) '#f))) ((case-lambda ((g$x$13593$1DOkPG) (list g$x$13593$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13585$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$13582$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13582$1DOkPG) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f)))))) g$f$13581$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$13569$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13566$1DOkPG)))) '#f))) ((case-lambda ((g$x$13594$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13566$1DOkPG)))) '#f))) g$t$13551$1DOkPG)))) g$e$13537$1DOkPG) (if (memv g$t$13549$1DOkPG '(displaced-lexical)) (g$syntax-violation$9501$1DOkPG '#f '"identifier out of context" g$e$13537$1DOkPG) (if (memv g$t$13549$1DOkPG '(syntax)) (g$syntax-violation$9501$1DOkPG '#f '"reference to pattern variable outside a syntax form" g$e$13537$1DOkPG) (if (memv g$t$13549$1DOkPG '(define define-syntax module import library)) (g$syntax-violation$9501$1DOkPG '#f (string-append ((case-lambda ((g$t$13550$1DOkPG) (if (memv g$t$13550$1DOkPG '(define)) '"a definition" (if (memv g$t$13550$1DOkPG '(define-syntax)) '"a define-syntax" (if (memv g$t$13550$1DOkPG '(module)) '"a module definition" (if (memv g$t$13550$1DOkPG '(library)) '"a library definition" (if (memv g$t$13550$1DOkPG '(import)) '"an import declaration" '"a non-expression"))))))) g$type$13548$1DOkPG) '" was found where an expression was expected") g$e$13537$1DOkPG) (if (memv g$t$13549$1DOkPG '(mutable)) (g$syntax-violation$9501$1DOkPG '#f '"attempt to reference an unexportable variable" g$e$13537$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid expression" g$e$13537$1DOkPG))))))))))))))))))) g$type$13548$1DOkPG))) g$kwd$13545$1DOkPG g$value$13544$1DOkPG g$type$13543$1DOkPG))))))) (g$chi-set!$9439$1DOkPG g$chi-set!$15493$1DOkPG (case-lambda ((g$e$13620$1DOkPG g$r$13621$1DOkPG g$mr$13622$1DOkPG) ((case-lambda ((g$t$13623$1DOkPG) ((case-lambda ((g$ls/false$13624$1DOkPG) (if (if g$ls/false$13624$1DOkPG (begin '#f (apply (case-lambda ((g$x$13625$1DOkPG g$v$13626$1DOkPG) (g$id?$9181$1DOkPG g$x$13625$1DOkPG))) g$ls/false$13624$1DOkPG)) '#f) (apply (case-lambda ((g$x$13627$1DOkPG g$v$13628$1DOkPG) (call-with-values (case-lambda (() (g$syntax-type$9199$1DOkPG g$x$13627$1DOkPG g$r$13621$1DOkPG))) (case-lambda ((g$type$13632$1DOkPG g$value$13633$1DOkPG g$kwd$13634$1DOkPG) ((case-lambda ((g$kwd$13635$1DOkPG g$value$13636$1DOkPG g$type$13637$1DOkPG) ((case-lambda ((g$t$13638$1DOkPG) (if (memv g$t$13638$1DOkPG '(lexical)) (begin (g$set-lexical-mutable!$9371$1DOkPG g$value$13636$1DOkPG '#t) (list 'set! (g$lexical-var$9369$1DOkPG g$value$13636$1DOkPG) (g$chi-expr$9438$1DOkPG g$v$13628$1DOkPG g$r$13621$1DOkPG g$mr$13622$1DOkPG))) (if (memv g$t$13638$1DOkPG '(core-prim)) (g$syntax-violation$9501$1DOkPG '#f '"cannot modify imported core primitive" g$e$13620$1DOkPG) (if (memv g$t$13638$1DOkPG '(global)) ((case-lambda ((g$loc$13639$1DOkPG) ((case-lambda ((g$rhs$13640$1DOkPG) (list 'set! g$loc$13639$1DOkPG g$rhs$13640$1DOkPG))) (g$chi-expr$9438$1DOkPG g$v$13628$1DOkPG g$r$13621$1DOkPG g$mr$13622$1DOkPG)))) (g$gen-global-var-binding$9453$1DOkPG g$x$13627$1DOkPG g$e$13620$1DOkPG)) (if (memv g$t$13638$1DOkPG '(global-macro!)) (g$chi-expr$9438$1DOkPG (g$chi-global-macro$9435$1DOkPG g$value$13636$1DOkPG g$e$13620$1DOkPG) g$r$13621$1DOkPG g$mr$13622$1DOkPG) (if (memv g$t$13638$1DOkPG '(local-macro!)) (g$chi-expr$9438$1DOkPG (g$chi-local-macro$9434$1DOkPG g$value$13636$1DOkPG g$e$13620$1DOkPG) g$r$13621$1DOkPG g$mr$13622$1DOkPG) (if (memv g$t$13638$1DOkPG '(mutable)) (g$syntax-violation$9501$1DOkPG '#f '"attempt to assign to an unexportable variable" g$e$13620$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$e$13620$1DOkPG))))))))) g$type$13637$1DOkPG))) g$kwd$13634$1DOkPG g$value$13633$1DOkPG g$type$13632$1DOkPG)))))) g$ls/false$13624$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13623$1DOkPG)))) ((case-lambda ((g$x$13641$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13641$1DOkPG) (begin '#f ((case-lambda ((g$q$13642$1DOkPG) (if g$q$13642$1DOkPG (begin '#f ((case-lambda ((g$r$13643$1DOkPG) (if g$r$13643$1DOkPG (begin '#f (append g$q$13642$1DOkPG g$r$13643$1DOkPG)) '#f))) ((case-lambda ((g$x$13644$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13644$1DOkPG) (begin '#f ((case-lambda ((g$q$13645$1DOkPG) (if g$q$13645$1DOkPG (begin '#f ((case-lambda ((g$r$13646$1DOkPG) (if g$r$13646$1DOkPG (begin '#f (append g$q$13645$1DOkPG g$r$13646$1DOkPG)) '#f))) ((case-lambda ((g$x$13647$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13647$1DOkPG) (begin '#f ((case-lambda ((g$q$13648$1DOkPG) (if g$q$13648$1DOkPG (begin '#f ((case-lambda ((g$r$13649$1DOkPG) (if g$r$13649$1DOkPG (begin '#f (append g$q$13648$1DOkPG g$r$13649$1DOkPG)) '#f))) ((case-lambda ((g$x$13650$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13650$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13647$1DOkPG)))) '#f))) ((case-lambda ((g$x$13651$1DOkPG) (list g$x$13651$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13647$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13644$1DOkPG)))) '#f))) ((case-lambda ((g$x$13652$1DOkPG) (list g$x$13652$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13644$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13641$1DOkPG)))) '#f))) ((case-lambda ((g$x$13653$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13641$1DOkPG)))) '#f))) g$t$13623$1DOkPG)))) g$e$13620$1DOkPG)))) (g$verify-formals$9440$1DOkPG g$verify-formals$15494$1DOkPG (case-lambda ((g$fmls$13654$1DOkPG g$stx$13655$1DOkPG) ((case-lambda ((g$t$13656$1DOkPG) ((case-lambda ((g$ls/false$13657$1DOkPG) (if (if g$ls/false$13657$1DOkPG (begin '#f (apply (case-lambda ((g$x*$13658$1DOkPG) '#t)) g$ls/false$13657$1DOkPG)) '#f) (apply (case-lambda ((g$x*$13659$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$x*$13659$1DOkPG) (void) (g$invalid-fmls-error$9390$1DOkPG g$stx$13655$1DOkPG g$fmls$13654$1DOkPG)))) g$ls/false$13657$1DOkPG) ((case-lambda ((g$t$13660$1DOkPG) ((case-lambda ((g$ls/false$13661$1DOkPG) (if (if g$ls/false$13661$1DOkPG (begin '#f (apply (case-lambda ((g$x*$13662$1DOkPG g$x$13663$1DOkPG) '#t)) g$ls/false$13661$1DOkPG)) '#f) (apply (case-lambda ((g$x*$13664$1DOkPG g$x$13665$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG (cons g$x$13665$1DOkPG g$x*$13664$1DOkPG)) (void) (g$invalid-fmls-error$9390$1DOkPG g$stx$13655$1DOkPG g$fmls$13654$1DOkPG)))) g$ls/false$13661$1DOkPG) ((case-lambda ((g$t$13666$1DOkPG) ((case-lambda ((g$ls/false$13667$1DOkPG) (if (if g$ls/false$13667$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13667$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$stx$13655$1DOkPG))) g$ls/false$13667$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13666$1DOkPG)))) ((case-lambda ((g$x$13668$1DOkPG) '())) g$t$13666$1DOkPG)))) g$t$13660$1DOkPG)))) ((letrec ((g$f$13669$1DOkPG (case-lambda ((g$x$13672$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13672$1DOkPG) ((case-lambda ((g$cars/f$13673$1DOkPG) (if g$cars/f$13673$1DOkPG (begin '#f ((case-lambda ((g$d/f$13674$1DOkPG) (if g$d/f$13674$1DOkPG (begin '#f (cons (map cons g$cars/f$13673$1DOkPG (car g$d/f$13674$1DOkPG)) (cdr g$d/f$13674$1DOkPG))) '#f))) (g$f$13669$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13672$1DOkPG)))) '#f))) ((case-lambda ((g$x$13675$1DOkPG) (list g$x$13675$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13672$1DOkPG))) ((case-lambda ((g$d$13676$1DOkPG) (if g$d$13676$1DOkPG (begin '#f (cons (list (begin 'x* '())) g$d$13676$1DOkPG)) '#f))) ((case-lambda ((g$x$13677$1DOkPG) (list g$x$13677$1DOkPG))) g$x$13672$1DOkPG))))))) (case-lambda ((g$x$13670$1DOkPG) ((case-lambda ((g$x$13671$1DOkPG) (if g$x$13671$1DOkPG (begin '#f (append (car g$x$13671$1DOkPG) (cdr g$x$13671$1DOkPG))) '#f))) (g$f$13669$1DOkPG g$x$13670$1DOkPG))))) g$t$13660$1DOkPG)))) g$t$13656$1DOkPG)))) ((letrec ((g$f$13678$1DOkPG (case-lambda ((g$x$13679$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13679$1DOkPG) ((case-lambda ((g$cars/f$13680$1DOkPG) (if g$cars/f$13680$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13681$1DOkPG) (if g$cdrs/f$13681$1DOkPG (begin '#f (map cons g$cars/f$13680$1DOkPG g$cdrs/f$13681$1DOkPG)) '#f))) (g$f$13678$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13679$1DOkPG)))) '#f))) ((case-lambda ((g$x$13682$1DOkPG) (list g$x$13682$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13679$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13679$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$13678$1DOkPG) g$t$13656$1DOkPG)))) g$fmls$13654$1DOkPG)))) (g$chi-lambda-clause$9441$1DOkPG g$chi-lambda-clause$15495$1DOkPG (case-lambda ((g$stx$13683$1DOkPG g$fmls$13684$1DOkPG g$body*$13685$1DOkPG g$r$13686$1DOkPG g$mr$13687$1DOkPG) ((case-lambda ((g$t$13688$1DOkPG) ((case-lambda ((g$ls/false$13689$1DOkPG) (if (if g$ls/false$13689$1DOkPG (begin '#f (apply (case-lambda ((g$x*$13690$1DOkPG) '#t)) g$ls/false$13689$1DOkPG)) '#f) (apply (case-lambda ((g$x*$13691$1DOkPG) (begin (g$verify-formals$9440$1DOkPG g$fmls$13684$1DOkPG g$stx$13683$1DOkPG) ((case-lambda ((g$lex*$13692$1DOkPG g$lab*$13693$1DOkPG) (values g$lex*$13692$1DOkPG (g$chi-internal$9447$1DOkPG (g$add-subst$9171$1DOkPG (g$make-full-rib$9149$1DOkPG g$x*$13691$1DOkPG g$lab*$13693$1DOkPG) g$body*$13685$1DOkPG) (g$add-lexicals$9373$1DOkPG g$lab*$13693$1DOkPG g$lex*$13692$1DOkPG g$r$13686$1DOkPG) g$mr$13687$1DOkPG)))) (map g$gen-lexical$9128$1DOkPG g$x*$13691$1DOkPG) (map g$gen-label$9130$1DOkPG g$x*$13691$1DOkPG))))) g$ls/false$13689$1DOkPG) ((case-lambda ((g$t$13694$1DOkPG) ((case-lambda ((g$ls/false$13695$1DOkPG) (if (if g$ls/false$13695$1DOkPG (begin '#f (apply (case-lambda ((g$x*$13696$1DOkPG g$x$13697$1DOkPG) '#t)) g$ls/false$13695$1DOkPG)) '#f) (apply (case-lambda ((g$x*$13698$1DOkPG g$x$13699$1DOkPG) (begin (g$verify-formals$9440$1DOkPG g$fmls$13684$1DOkPG g$stx$13683$1DOkPG) ((case-lambda ((g$lex*$13700$1DOkPG g$lab*$13701$1DOkPG g$lex$13702$1DOkPG g$lab$13703$1DOkPG) (values (append g$lex*$13700$1DOkPG g$lex$13702$1DOkPG) (g$chi-internal$9447$1DOkPG (g$add-subst$9171$1DOkPG (g$make-full-rib$9149$1DOkPG (cons g$x$13699$1DOkPG g$x*$13698$1DOkPG) (cons g$lab$13703$1DOkPG g$lab*$13701$1DOkPG)) g$body*$13685$1DOkPG) (g$add-lexicals$9373$1DOkPG (cons g$lab$13703$1DOkPG g$lab*$13701$1DOkPG) (cons g$lex$13702$1DOkPG g$lex*$13700$1DOkPG) g$r$13686$1DOkPG) g$mr$13687$1DOkPG)))) (map g$gen-lexical$9128$1DOkPG g$x*$13698$1DOkPG) (map g$gen-label$9130$1DOkPG g$x*$13698$1DOkPG) (g$gen-lexical$9128$1DOkPG g$x$13699$1DOkPG) (g$gen-label$9130$1DOkPG g$x$13699$1DOkPG))))) g$ls/false$13695$1DOkPG) ((case-lambda ((g$t$13704$1DOkPG) ((case-lambda ((g$ls/false$13705$1DOkPG) (if (if g$ls/false$13705$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13705$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$fmls$13684$1DOkPG))) g$ls/false$13705$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13704$1DOkPG)))) ((case-lambda ((g$x$13706$1DOkPG) '())) g$t$13704$1DOkPG)))) g$t$13694$1DOkPG)))) ((letrec ((g$f$13707$1DOkPG (case-lambda ((g$x$13710$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13710$1DOkPG) ((case-lambda ((g$cars/f$13711$1DOkPG) (if g$cars/f$13711$1DOkPG (begin '#f ((case-lambda ((g$d/f$13712$1DOkPG) (if g$d/f$13712$1DOkPG (begin '#f (cons (map cons g$cars/f$13711$1DOkPG (car g$d/f$13712$1DOkPG)) (cdr g$d/f$13712$1DOkPG))) '#f))) (g$f$13707$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13710$1DOkPG)))) '#f))) ((case-lambda ((g$x$13713$1DOkPG) (list g$x$13713$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13710$1DOkPG))) ((case-lambda ((g$d$13714$1DOkPG) (if g$d$13714$1DOkPG (begin '#f (cons (list (begin 'x* '())) g$d$13714$1DOkPG)) '#f))) ((case-lambda ((g$x$13715$1DOkPG) (list g$x$13715$1DOkPG))) g$x$13710$1DOkPG))))))) (case-lambda ((g$x$13708$1DOkPG) ((case-lambda ((g$x$13709$1DOkPG) (if g$x$13709$1DOkPG (begin '#f (append (car g$x$13709$1DOkPG) (cdr g$x$13709$1DOkPG))) '#f))) (g$f$13707$1DOkPG g$x$13708$1DOkPG))))) g$t$13694$1DOkPG)))) g$t$13688$1DOkPG)))) ((letrec ((g$f$13716$1DOkPG (case-lambda ((g$x$13717$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13717$1DOkPG) ((case-lambda ((g$cars/f$13718$1DOkPG) (if g$cars/f$13718$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13719$1DOkPG) (if g$cdrs/f$13719$1DOkPG (begin '#f (map cons g$cars/f$13718$1DOkPG g$cdrs/f$13719$1DOkPG)) '#f))) (g$f$13716$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13717$1DOkPG)))) '#f))) ((case-lambda ((g$x$13720$1DOkPG) (list g$x$13720$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13717$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13717$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$13716$1DOkPG) g$t$13688$1DOkPG)))) g$fmls$13684$1DOkPG)))) (g$chi-lambda-clause*$9442$1DOkPG g$chi-lambda-clause*$15496$1DOkPG (case-lambda ((g$stx$13721$1DOkPG g$fmls*$13722$1DOkPG g$body**$13723$1DOkPG g$r$13724$1DOkPG g$mr$13725$1DOkPG) (if (null? g$fmls*$13722$1DOkPG) (values '() '()) (call-with-values (case-lambda (() (g$chi-lambda-clause$9441$1DOkPG g$stx$13721$1DOkPG (car g$fmls*$13722$1DOkPG) (car g$body**$13723$1DOkPG) g$r$13724$1DOkPG g$mr$13725$1DOkPG))) (case-lambda ((g$a$13728$1DOkPG g$b$13729$1DOkPG) ((case-lambda ((g$b$13730$1DOkPG g$a$13731$1DOkPG) (call-with-values (case-lambda (() (g$chi-lambda-clause*$9442$1DOkPG g$stx$13721$1DOkPG (cdr g$fmls*$13722$1DOkPG) (cdr g$body**$13723$1DOkPG) g$r$13724$1DOkPG g$mr$13725$1DOkPG))) (case-lambda ((g$a*$13734$1DOkPG g$b*$13735$1DOkPG) ((case-lambda ((g$b*$13736$1DOkPG g$a*$13737$1DOkPG) (values (cons g$a$13731$1DOkPG g$a*$13737$1DOkPG) (cons g$b$13730$1DOkPG g$b*$13736$1DOkPG)))) g$b*$13735$1DOkPG g$a*$13734$1DOkPG)))))) g$b$13729$1DOkPG g$a$13728$1DOkPG)))))))) (g$chi-rhs$9443$1DOkPG g$chi-rhs$15497$1DOkPG (case-lambda ((g$rhs$13738$1DOkPG g$r$13739$1DOkPG g$mr$13740$1DOkPG) ((case-lambda ((g$t$13741$1DOkPG) (if (memv g$t$13741$1DOkPG '(defun)) ((case-lambda ((g$x$13744$1DOkPG) ((case-lambda ((g$fmls$13745$1DOkPG g$body*$13746$1DOkPG) (call-with-values (case-lambda (() (g$chi-lambda-clause$9441$1DOkPG g$fmls$13745$1DOkPG g$fmls$13745$1DOkPG g$body*$13746$1DOkPG g$r$13739$1DOkPG g$mr$13740$1DOkPG))) (case-lambda ((g$fmls$13749$1DOkPG g$body$13750$1DOkPG) ((case-lambda ((g$body$13751$1DOkPG g$fmls$13752$1DOkPG) (g$build-lambda$9115$1DOkPG '#f g$fmls$13752$1DOkPG g$body$13751$1DOkPG))) g$body$13750$1DOkPG g$fmls$13749$1DOkPG)))))) (car g$x$13744$1DOkPG) (cdr g$x$13744$1DOkPG)))) (cdr g$rhs$13738$1DOkPG)) (if (memv g$t$13741$1DOkPG '(expr)) ((case-lambda ((g$expr$13743$1DOkPG) (g$chi-expr$9438$1DOkPG g$expr$13743$1DOkPG g$r$13739$1DOkPG g$mr$13740$1DOkPG))) (cdr g$rhs$13738$1DOkPG)) (if (memv g$t$13741$1DOkPG '(top-expr)) ((case-lambda ((g$expr$13742$1DOkPG) (g$build-sequence$9118$1DOkPG '#f (list (g$chi-expr$9438$1DOkPG g$expr$13742$1DOkPG g$r$13739$1DOkPG g$mr$13740$1DOkPG) (g$build-void$9119$1DOkPG))))) (cdr g$rhs$13738$1DOkPG)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" g$rhs$13738$1DOkPG)))))) (car g$rhs$13738$1DOkPG))))) (g$chi-rhs*$9444$1DOkPG g$chi-rhs*$15498$1DOkPG (case-lambda ((g$rhs*$13753$1DOkPG g$r$13754$1DOkPG g$mr$13755$1DOkPG) ((letrec ((g$f$13756$1DOkPG (case-lambda ((g$ls$13757$1DOkPG) (if (null? g$ls$13757$1DOkPG) '() ((case-lambda ((g$a$13758$1DOkPG) (cons g$a$13758$1DOkPG (g$f$13756$1DOkPG (cdr g$ls$13757$1DOkPG))))) (g$chi-rhs$9443$1DOkPG (car g$ls$13757$1DOkPG) g$r$13754$1DOkPG g$mr$13755$1DOkPG))))))) g$f$13756$1DOkPG) g$rhs*$13753$1DOkPG)))) (g$find-bound=?$9445$1DOkPG g$find-bound=?$15499$1DOkPG (case-lambda ((g$x$13759$1DOkPG g$lhs*$13760$1DOkPG g$rhs*$13761$1DOkPG) (if (null? g$lhs*$13760$1DOkPG) '#f (if (g$bound-id=?$9184$1DOkPG g$x$13759$1DOkPG (car g$lhs*$13760$1DOkPG)) (car g$rhs*$13761$1DOkPG) (g$find-bound=?$9445$1DOkPG g$x$13759$1DOkPG (cdr g$lhs*$13760$1DOkPG) (cdr g$rhs*$13761$1DOkPG))))))) (g$find-dups$9446$1DOkPG g$find-dups$15500$1DOkPG (case-lambda ((g$ls$13762$1DOkPG) ((letrec ((g$f$13763$1DOkPG (case-lambda ((g$ls$13764$1DOkPG g$dups$13765$1DOkPG) (if (null? g$ls$13764$1DOkPG) g$dups$13765$1DOkPG ((case-lambda ((g$t$13766$1DOkPG) (if g$t$13766$1DOkPG ((case-lambda ((g$x$13767$1DOkPG) (g$f$13763$1DOkPG (cdr g$ls$13764$1DOkPG) (cons (list (car g$ls$13764$1DOkPG) g$x$13767$1DOkPG) g$dups$13765$1DOkPG)))) g$t$13766$1DOkPG) (g$f$13763$1DOkPG (cdr g$ls$13764$1DOkPG) g$dups$13765$1DOkPG)))) (g$find-bound=?$9445$1DOkPG (car g$ls$13764$1DOkPG) (cdr g$ls$13764$1DOkPG) (cdr g$ls$13764$1DOkPG)))))))) g$f$13763$1DOkPG) g$ls$13762$1DOkPG '())))) (g$chi-internal$9447$1DOkPG g$chi-internal$15501$1DOkPG (case-lambda ((g$e*$13768$1DOkPG g$r$13769$1DOkPG g$mr$13770$1DOkPG) ((case-lambda ((g$rib$13771$1DOkPG) (call-with-values (case-lambda (() (g$chi-body*$9450$1DOkPG (map (case-lambda ((g$x$13779$1DOkPG) (g$add-subst$9171$1DOkPG g$rib$13771$1DOkPG g$x$13779$1DOkPG))) (g$syntax->list$9180$1DOkPG g$e*$13768$1DOkPG)) g$r$13769$1DOkPG g$mr$13770$1DOkPG '() '() '() '() g$rib$13771$1DOkPG '#f))) (case-lambda ((g$e*$13780$1DOkPG g$r$13781$1DOkPG g$mr$13782$1DOkPG g$lex*$13783$1DOkPG g$rhs*$13784$1DOkPG g$mod**$13785$1DOkPG g$kwd*$13786$1DOkPG) ((case-lambda ((g$kwd*$13787$1DOkPG g$mod**$13788$1DOkPG g$rhs*$13789$1DOkPG g$lex*$13790$1DOkPG g$mr$13791$1DOkPG g$r$13792$1DOkPG g$e*$13793$1DOkPG) (begin (if (null? g$e*$13793$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"no expression in body" g$e*$13793$1DOkPG) (void)) ((case-lambda ((g$init*$13794$1DOkPG) ((case-lambda ((g$rhs*$13795$1DOkPG) ((case-lambda (() (g$build-letrec*$9121$1DOkPG '#f (reverse g$lex*$13790$1DOkPG) (reverse g$rhs*$13795$1DOkPG) (g$build-sequence$9118$1DOkPG '#f g$init*$13794$1DOkPG))))))) (g$chi-rhs*$9444$1DOkPG g$rhs*$13789$1DOkPG g$r$13792$1DOkPG g$mr$13791$1DOkPG)))) (g$chi-expr*$9436$1DOkPG (append (apply append (reverse g$mod**$13788$1DOkPG)) g$e*$13793$1DOkPG) g$r$13792$1DOkPG g$mr$13791$1DOkPG))))) g$kwd*$13786$1DOkPG g$mod**$13785$1DOkPG g$rhs*$13784$1DOkPG g$lex*$13783$1DOkPG g$mr$13782$1DOkPG g$r$13781$1DOkPG g$e*$13780$1DOkPG)))))) (g$make-empty-rib$9144$1DOkPG))))) (g$parse-module$9448$1DOkPG g$parse-module$15502$1DOkPG (case-lambda ((g$e$13796$1DOkPG) ((case-lambda ((g$t$13797$1DOkPG) ((case-lambda ((g$ls/false$13798$1DOkPG) (if (if g$ls/false$13798$1DOkPG (begin '#f (apply (case-lambda ((g$export*$13799$1DOkPG g$b*$13800$1DOkPG) '#t)) g$ls/false$13798$1DOkPG)) '#f) (apply (case-lambda ((g$export*$13801$1DOkPG g$b*$13802$1DOkPG) (begin (if (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$export*$13801$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"module exports must be identifiers" g$e$13796$1DOkPG)) (values '#f (list->vector g$export*$13801$1DOkPG) g$b*$13802$1DOkPG)))) g$ls/false$13798$1DOkPG) ((case-lambda ((g$t$13803$1DOkPG) ((case-lambda ((g$ls/false$13804$1DOkPG) (if (if g$ls/false$13804$1DOkPG (begin '#f (apply (case-lambda ((g$name$13805$1DOkPG g$export*$13806$1DOkPG g$b*$13807$1DOkPG) '#t)) g$ls/false$13804$1DOkPG)) '#f) (apply (case-lambda ((g$name$13808$1DOkPG g$export*$13809$1DOkPG g$b*$13810$1DOkPG) (begin (if (g$id?$9181$1DOkPG g$name$13808$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"module name must be an identifier" g$e$13796$1DOkPG)) (if (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$export*$13809$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"module exports must be identifiers" g$e$13796$1DOkPG)) (values g$name$13808$1DOkPG (list->vector g$export*$13809$1DOkPG) g$b*$13810$1DOkPG)))) g$ls/false$13804$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13803$1DOkPG)))) ((case-lambda ((g$x$13811$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13811$1DOkPG) (begin '#f ((case-lambda ((g$q$13812$1DOkPG) (if g$q$13812$1DOkPG (begin '#f ((case-lambda ((g$r$13813$1DOkPG) (if g$r$13813$1DOkPG (begin '#f (append g$q$13812$1DOkPG g$r$13813$1DOkPG)) '#f))) ((case-lambda ((g$x$13814$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13814$1DOkPG) (begin '#f ((case-lambda ((g$q$13815$1DOkPG) (if g$q$13815$1DOkPG (begin '#f ((case-lambda ((g$r$13816$1DOkPG) (if g$r$13816$1DOkPG (begin '#f (append g$q$13815$1DOkPG g$r$13816$1DOkPG)) '#f))) ((case-lambda ((g$x$13817$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13817$1DOkPG) (begin '#f ((case-lambda ((g$q$13818$1DOkPG) (if g$q$13818$1DOkPG (begin '#f ((case-lambda ((g$r$13819$1DOkPG) (if g$r$13819$1DOkPG (begin '#f (append g$q$13818$1DOkPG g$r$13819$1DOkPG)) '#f))) ((letrec ((g$f$13820$1DOkPG (case-lambda ((g$x$13821$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13821$1DOkPG) ((case-lambda ((g$cars/f$13822$1DOkPG) (if g$cars/f$13822$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13823$1DOkPG) (if g$cdrs/f$13823$1DOkPG (begin '#f (map cons g$cars/f$13822$1DOkPG g$cdrs/f$13823$1DOkPG)) '#f))) (g$f$13820$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13821$1DOkPG)))) '#f))) ((case-lambda ((g$x$13824$1DOkPG) (list g$x$13824$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13821$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13821$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$13820$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13817$1DOkPG)))) '#f))) ((letrec ((g$f$13825$1DOkPG (case-lambda ((g$x$13826$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13826$1DOkPG) ((case-lambda ((g$cars/f$13827$1DOkPG) (if g$cars/f$13827$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13828$1DOkPG) (if g$cdrs/f$13828$1DOkPG (begin '#f (map cons g$cars/f$13827$1DOkPG g$cdrs/f$13828$1DOkPG)) '#f))) (g$f$13825$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13826$1DOkPG)))) '#f))) ((case-lambda ((g$x$13829$1DOkPG) (list g$x$13829$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13826$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13826$1DOkPG) (list (begin 'export* '())) '#f)))))) g$f$13825$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$13817$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13814$1DOkPG)))) '#f))) ((case-lambda ((g$x$13830$1DOkPG) (list g$x$13830$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13814$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13811$1DOkPG)))) '#f))) ((case-lambda ((g$x$13831$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13811$1DOkPG)))) '#f))) g$t$13803$1DOkPG)))) g$t$13797$1DOkPG)))) ((case-lambda ((g$x$13832$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13832$1DOkPG) (begin '#f ((case-lambda ((g$q$13833$1DOkPG) (if g$q$13833$1DOkPG (begin '#f ((case-lambda ((g$r$13834$1DOkPG) (if g$r$13834$1DOkPG (begin '#f (append g$q$13833$1DOkPG g$r$13834$1DOkPG)) '#f))) ((case-lambda ((g$x$13835$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13835$1DOkPG) (begin '#f ((case-lambda ((g$q$13836$1DOkPG) (if g$q$13836$1DOkPG (begin '#f ((case-lambda ((g$r$13837$1DOkPG) (if g$r$13837$1DOkPG (begin '#f (append g$q$13836$1DOkPG g$r$13837$1DOkPG)) '#f))) ((letrec ((g$f$13838$1DOkPG (case-lambda ((g$x$13839$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13839$1DOkPG) ((case-lambda ((g$cars/f$13840$1DOkPG) (if g$cars/f$13840$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13841$1DOkPG) (if g$cdrs/f$13841$1DOkPG (begin '#f (map cons g$cars/f$13840$1DOkPG g$cdrs/f$13841$1DOkPG)) '#f))) (g$f$13838$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13839$1DOkPG)))) '#f))) ((case-lambda ((g$x$13842$1DOkPG) (list g$x$13842$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13839$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13839$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$13838$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13835$1DOkPG)))) '#f))) ((letrec ((g$f$13843$1DOkPG (case-lambda ((g$x$13844$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13844$1DOkPG) ((case-lambda ((g$cars/f$13845$1DOkPG) (if g$cars/f$13845$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13846$1DOkPG) (if g$cdrs/f$13846$1DOkPG (begin '#f (map cons g$cars/f$13845$1DOkPG g$cdrs/f$13846$1DOkPG)) '#f))) (g$f$13843$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13844$1DOkPG)))) '#f))) ((case-lambda ((g$x$13847$1DOkPG) (list g$x$13847$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13844$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13844$1DOkPG) (list (begin 'export* '())) '#f)))))) g$f$13843$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$13835$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13832$1DOkPG)))) '#f))) ((case-lambda ((g$x$13848$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13832$1DOkPG)))) '#f))) g$t$13797$1DOkPG)))) g$e$13796$1DOkPG)))) (g$chi-internal-module$9449$1DOkPG g$chi-internal-module$15503$1DOkPG (case-lambda ((g$e$13849$1DOkPG g$r$13850$1DOkPG g$mr$13851$1DOkPG g$lex*$13852$1DOkPG g$rhs*$13853$1DOkPG g$mod**$13854$1DOkPG g$kwd*$13855$1DOkPG) (call-with-values (case-lambda (() (g$parse-module$9448$1DOkPG g$e$13849$1DOkPG))) (case-lambda ((g$name$13859$1DOkPG g$exp-id*$13860$1DOkPG g$e*$13861$1DOkPG) ((case-lambda ((g$e*$13862$1DOkPG g$exp-id*$13863$1DOkPG g$name$13864$1DOkPG) ((case-lambda ((g$rib$13865$1DOkPG) ((case-lambda ((g$e*$13866$1DOkPG) ((case-lambda (() (call-with-values (case-lambda (() (g$chi-body*$9450$1DOkPG g$e*$13866$1DOkPG g$r$13850$1DOkPG g$mr$13851$1DOkPG g$lex*$13852$1DOkPG g$rhs*$13853$1DOkPG g$mod**$13854$1DOkPG g$kwd*$13855$1DOkPG g$rib$13865$1DOkPG '#f))) (case-lambda ((g$e*$13874$1DOkPG g$r$13875$1DOkPG g$mr$13876$1DOkPG g$lex*$13877$1DOkPG g$rhs*$13878$1DOkPG g$mod**$13879$1DOkPG g$kwd*$13880$1DOkPG) ((case-lambda ((g$kwd*$13881$1DOkPG g$mod**$13882$1DOkPG g$rhs*$13883$1DOkPG g$lex*$13884$1DOkPG g$mr$13885$1DOkPG g$r$13886$1DOkPG g$e*$13887$1DOkPG) ((case-lambda ((g$exp-lab*$13888$1DOkPG g$mod**$13889$1DOkPG) (if (not g$name$13864$1DOkPG) (values g$lex*$13884$1DOkPG g$rhs*$13883$1DOkPG g$exp-id*$13863$1DOkPG g$exp-lab*$13888$1DOkPG g$r$13886$1DOkPG g$mr$13885$1DOkPG g$mod**$13889$1DOkPG g$kwd*$13881$1DOkPG) ((case-lambda ((g$lab$13890$1DOkPG g$iface$13891$1DOkPG) (values g$lex*$13884$1DOkPG g$rhs*$13883$1DOkPG (vector g$name$13864$1DOkPG) (vector g$lab$13890$1DOkPG) (cons (cons g$lab$13890$1DOkPG (cons '$module g$iface$13891$1DOkPG)) g$r$13886$1DOkPG) (cons (cons g$lab$13890$1DOkPG (cons '$module g$iface$13891$1DOkPG)) g$mr$13885$1DOkPG) g$mod**$13889$1DOkPG g$kwd*$13881$1DOkPG))) (g$gen-label$9130$1DOkPG 'module) (cons g$exp-id*$13863$1DOkPG g$exp-lab*$13888$1DOkPG))))) (vector-map (case-lambda ((g$x$13892$1DOkPG) ((case-lambda ((g$t$13893$1DOkPG) (if g$t$13893$1DOkPG g$t$13893$1DOkPG (begin '#f (g$syntax-violation$9501$1DOkPG '#f '"cannot find module export" g$x$13892$1DOkPG))))) (g$id->label$9193$1DOkPG (g$mkstx$9169$1DOkPG (g$id->sym$9182$1DOkPG g$x$13892$1DOkPG) (g$stx-mark*$9156$1DOkPG g$x$13892$1DOkPG) (list g$rib$13865$1DOkPG) '()))))) g$exp-id*$13863$1DOkPG) (cons g$e*$13887$1DOkPG g$mod**$13882$1DOkPG)))) g$kwd*$13880$1DOkPG g$mod**$13879$1DOkPG g$rhs*$13878$1DOkPG g$lex*$13877$1DOkPG g$mr$13876$1DOkPG g$r$13875$1DOkPG g$e*$13874$1DOkPG))))))))) (map (case-lambda ((g$x$13894$1DOkPG) (g$add-subst$9171$1DOkPG g$rib$13865$1DOkPG g$x$13894$1DOkPG))) (g$syntax->list$9180$1DOkPG g$e*$13862$1DOkPG))))) (g$make-empty-rib$9144$1DOkPG)))) g$e*$13861$1DOkPG g$exp-id*$13860$1DOkPG g$name$13859$1DOkPG))))))) (g$chi-body*$9450$1DOkPG g$chi-body*$15504$1DOkPG (case-lambda ((g$e*$13895$1DOkPG g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13901$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG) (if (null? g$e*$13895$1DOkPG) (values g$e*$13895$1DOkPG g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13901$1DOkPG) ((case-lambda ((g$e$13904$1DOkPG) (call-with-values (case-lambda (() (g$syntax-type$9199$1DOkPG g$e$13904$1DOkPG g$r$13896$1DOkPG))) (case-lambda ((g$type$13908$1DOkPG g$value$13909$1DOkPG g$kwd$13910$1DOkPG) ((case-lambda ((g$kwd$13911$1DOkPG g$value$13912$1DOkPG g$type$13913$1DOkPG) ((case-lambda ((g$kwd*$13914$1DOkPG) ((case-lambda ((g$t$13915$1DOkPG) (if (memv g$t$13915$1DOkPG '(define)) (call-with-values (case-lambda (() (g$parse-define$9365$1DOkPG g$e$13904$1DOkPG))) (case-lambda ((g$id$14099$1DOkPG g$rhs$14100$1DOkPG) ((case-lambda ((g$rhs$14101$1DOkPG g$id$14102$1DOkPG) (begin (if (g$bound-id-member?$9188$1DOkPG g$id$14102$1DOkPG g$kwd*$13914$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"cannot redefine keyword" g$e$13904$1DOkPG) (void)) ((case-lambda ((g$lex$14103$1DOkPG g$lab$14104$1DOkPG) (begin (g$extend-rib!$9145$1DOkPG g$rib$13902$1DOkPG g$id$14102$1DOkPG g$lab$14104$1DOkPG) (g$chi-body*$9450$1DOkPG (cdr g$e*$13895$1DOkPG) (g$add-lexical$9372$1DOkPG g$lab$14104$1DOkPG g$lex$14103$1DOkPG g$r$13896$1DOkPG) g$mr$13897$1DOkPG (cons g$lex$14103$1DOkPG g$lex*$13898$1DOkPG) (cons g$rhs$14101$1DOkPG g$rhs*$13899$1DOkPG) g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG)))) (g$gen-lexical$9128$1DOkPG g$id$14102$1DOkPG) (g$gen-label$9130$1DOkPG g$id$14102$1DOkPG))))) g$rhs$14100$1DOkPG g$id$14099$1DOkPG)))) (if (memv g$t$13915$1DOkPG '(define-syntax)) (call-with-values (case-lambda (() (g$parse-define-syntax$9366$1DOkPG g$e$13904$1DOkPG))) (case-lambda ((g$id$14090$1DOkPG g$rhs$14091$1DOkPG) ((case-lambda ((g$rhs$14092$1DOkPG g$id$14093$1DOkPG) (begin (if (g$bound-id-member?$9188$1DOkPG g$id$14093$1DOkPG g$kwd*$13914$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"cannot redefine keyword" g$e$13904$1DOkPG) (void)) ((case-lambda ((g$lab$14094$1DOkPG g$expanded-rhs$14095$1DOkPG) (begin (g$extend-rib!$9145$1DOkPG g$rib$13902$1DOkPG g$id$14093$1DOkPG g$lab$14094$1DOkPG) ((case-lambda ((g$b$14096$1DOkPG) (g$chi-body*$9450$1DOkPG (cdr g$e*$13895$1DOkPG) (cons (cons g$lab$14094$1DOkPG g$b$14096$1DOkPG) g$r$13896$1DOkPG) (cons (cons g$lab$14094$1DOkPG g$b$14096$1DOkPG) g$mr$13897$1DOkPG) g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG))) (g$make-eval-transformer$9209$1DOkPG g$expanded-rhs$14095$1DOkPG))))) (g$gen-label$9130$1DOkPG g$id$14093$1DOkPG) (g$expand-transformer$9455$1DOkPG g$rhs$14092$1DOkPG g$mr$13897$1DOkPG))))) g$rhs$14091$1DOkPG g$id$14090$1DOkPG)))) (if (memv g$t$13915$1DOkPG '(let-syntax letrec-syntax)) ((case-lambda ((g$t$14050$1DOkPG) ((case-lambda ((g$ls/false$14051$1DOkPG) (if (if g$ls/false$14051$1DOkPG (begin '#f (apply (case-lambda ((g$xlhs*$14052$1DOkPG g$xrhs*$14053$1DOkPG g$xbody*$14054$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$xlhs*$14052$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG '#f '"invalid identifiers" g$e$13904$1DOkPG)))) g$ls/false$14051$1DOkPG)) '#f) (apply (case-lambda ((g$xlhs*$14055$1DOkPG g$xrhs*$14056$1DOkPG g$xbody*$14057$1DOkPG) ((case-lambda ((g$xlab*$14058$1DOkPG) ((case-lambda ((g$xrib$14059$1DOkPG) ((case-lambda ((g$xb*$14060$1DOkPG) ((case-lambda (() (g$chi-body*$9450$1DOkPG (append (map (case-lambda ((g$x$14061$1DOkPG) (g$add-subst$9171$1DOkPG g$xrib$14059$1DOkPG g$x$14061$1DOkPG))) g$xbody*$14057$1DOkPG) (cdr g$e*$13895$1DOkPG)) (append (map cons g$xlab*$14058$1DOkPG g$xb*$14060$1DOkPG) g$r$13896$1DOkPG) (append (map cons g$xlab*$14058$1DOkPG g$xb*$14060$1DOkPG) g$mr$13897$1DOkPG) g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG)))))) (map (case-lambda ((g$x$14062$1DOkPG) (g$make-eval-transformer$9209$1DOkPG (g$expand-transformer$9455$1DOkPG (if (eq? g$type$13913$1DOkPG 'let-syntax) g$x$14062$1DOkPG (g$add-subst$9171$1DOkPG g$xrib$14059$1DOkPG g$x$14062$1DOkPG)) g$mr$13897$1DOkPG)))) g$xrhs*$14056$1DOkPG)))) (g$make-full-rib$9149$1DOkPG g$xlhs*$14055$1DOkPG g$xlab*$14058$1DOkPG)))) (map g$gen-label$9130$1DOkPG g$xlhs*$14055$1DOkPG)))) g$ls/false$14051$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14050$1DOkPG)))) ((case-lambda ((g$x$14063$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14063$1DOkPG) (begin '#f ((case-lambda ((g$q$14064$1DOkPG) (if g$q$14064$1DOkPG (begin '#f ((case-lambda ((g$r$14065$1DOkPG) (if g$r$14065$1DOkPG (begin '#f (append g$q$14064$1DOkPG g$r$14065$1DOkPG)) '#f))) ((case-lambda ((g$x$14066$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14066$1DOkPG) (begin '#f ((case-lambda ((g$q$14067$1DOkPG) (if g$q$14067$1DOkPG (begin '#f ((case-lambda ((g$r$14068$1DOkPG) (if g$r$14068$1DOkPG (begin '#f (append g$q$14067$1DOkPG g$r$14068$1DOkPG)) '#f))) ((letrec ((g$f$14069$1DOkPG (case-lambda ((g$x$14070$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14070$1DOkPG) ((case-lambda ((g$cars/f$14071$1DOkPG) (if g$cars/f$14071$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14072$1DOkPG) (if g$cdrs/f$14072$1DOkPG (begin '#f (map cons g$cars/f$14071$1DOkPG g$cdrs/f$14072$1DOkPG)) '#f))) (g$f$14069$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14070$1DOkPG)))) '#f))) ((case-lambda ((g$x$14073$1DOkPG) (list g$x$14073$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14070$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14070$1DOkPG) (list (begin 'xbody* '())) '#f)))))) g$f$14069$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14066$1DOkPG)))) '#f))) ((letrec ((g$f$14074$1DOkPG (case-lambda ((g$x$14075$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14075$1DOkPG) ((case-lambda ((g$cars/f$14076$1DOkPG) (if g$cars/f$14076$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14077$1DOkPG) (if g$cdrs/f$14077$1DOkPG (begin '#f (map cons g$cars/f$14076$1DOkPG g$cdrs/f$14077$1DOkPG)) '#f))) (g$f$14074$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14075$1DOkPG)))) '#f))) ((case-lambda ((g$x$14078$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14078$1DOkPG) (begin '#f ((case-lambda ((g$q$14079$1DOkPG) (if g$q$14079$1DOkPG (begin '#f ((case-lambda ((g$r$14080$1DOkPG) (if g$r$14080$1DOkPG (begin '#f (append g$q$14079$1DOkPG g$r$14080$1DOkPG)) '#f))) ((case-lambda ((g$x$14081$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14081$1DOkPG) (begin '#f ((case-lambda ((g$q$14082$1DOkPG) (if g$q$14082$1DOkPG (begin '#f ((case-lambda ((g$r$14083$1DOkPG) (if g$r$14083$1DOkPG (begin '#f (append g$q$14082$1DOkPG g$r$14083$1DOkPG)) '#f))) ((case-lambda ((g$x$14084$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14084$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14081$1DOkPG)))) '#f))) ((case-lambda ((g$x$14085$1DOkPG) (list g$x$14085$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14081$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14078$1DOkPG)))) '#f))) ((case-lambda ((g$x$14086$1DOkPG) (list g$x$14086$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14078$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$14075$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14075$1DOkPG) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f)))))) g$f$14074$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$14066$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14063$1DOkPG)))) '#f))) ((case-lambda ((g$x$14087$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$14063$1DOkPG)))) '#f))) g$t$14050$1DOkPG)))) g$e$13904$1DOkPG) (if (memv g$t$13915$1DOkPG '(begin)) ((case-lambda ((g$t$14037$1DOkPG) ((case-lambda ((g$ls/false$14038$1DOkPG) (if (if g$ls/false$14038$1DOkPG (begin '#f (apply (case-lambda ((g$x*$14039$1DOkPG) '#t)) g$ls/false$14038$1DOkPG)) '#f) (apply (case-lambda ((g$x*$14040$1DOkPG) (g$chi-body*$9450$1DOkPG (append g$x*$14040$1DOkPG (cdr g$e*$13895$1DOkPG)) g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG))) g$ls/false$14038$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14037$1DOkPG)))) ((case-lambda ((g$x$14041$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14041$1DOkPG) (begin '#f ((case-lambda ((g$q$14042$1DOkPG) (if g$q$14042$1DOkPG (begin '#f ((case-lambda ((g$r$14043$1DOkPG) (if g$r$14043$1DOkPG (begin '#f (append g$q$14042$1DOkPG g$r$14043$1DOkPG)) '#f))) ((letrec ((g$f$14044$1DOkPG (case-lambda ((g$x$14045$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14045$1DOkPG) ((case-lambda ((g$cars/f$14046$1DOkPG) (if g$cars/f$14046$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14047$1DOkPG) (if g$cdrs/f$14047$1DOkPG (begin '#f (map cons g$cars/f$14046$1DOkPG g$cdrs/f$14047$1DOkPG)) '#f))) (g$f$14044$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14045$1DOkPG)))) '#f))) ((case-lambda ((g$x$14048$1DOkPG) (list g$x$14048$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14045$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14045$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$14044$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14041$1DOkPG)))) '#f))) ((case-lambda ((g$x$14049$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$14041$1DOkPG)))) '#f))) g$t$14037$1DOkPG)))) g$e$13904$1DOkPG) (if (memv g$t$13915$1DOkPG '(global-macro global-macro!)) (g$chi-body*$9450$1DOkPG (cons (g$add-subst$9171$1DOkPG g$rib$13902$1DOkPG (g$chi-global-macro$9435$1DOkPG g$value$13912$1DOkPG g$e$13904$1DOkPG)) (cdr g$e*$13895$1DOkPG)) g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG) (if (memv g$t$13915$1DOkPG '(local-macro local-macro!)) (g$chi-body*$9450$1DOkPG (cons (g$add-subst$9171$1DOkPG g$rib$13902$1DOkPG (g$chi-local-macro$9434$1DOkPG g$value$13912$1DOkPG g$e$13904$1DOkPG)) (cdr g$e*$13895$1DOkPG)) g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG) (if (memv g$t$13915$1DOkPG '(macro macro!)) (g$chi-body*$9450$1DOkPG (cons (g$add-subst$9171$1DOkPG g$rib$13902$1DOkPG (g$chi-macro$9433$1DOkPG g$value$13912$1DOkPG g$e$13904$1DOkPG)) (cdr g$e*$13895$1DOkPG)) g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG) (if (memv g$t$13915$1DOkPG '(module)) (call-with-values (case-lambda (() (g$chi-internal-module$9449$1DOkPG g$e$13904$1DOkPG g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG))) (case-lambda ((g$lex*$14019$1DOkPG g$rhs*$14020$1DOkPG g$m-exp-id*$14021$1DOkPG g$m-exp-lab*$14022$1DOkPG g$r$14023$1DOkPG g$mr$14024$1DOkPG g$mod**$14025$1DOkPG g$kwd*$14026$1DOkPG) ((case-lambda ((g$kwd*$14027$1DOkPG g$mod**$14028$1DOkPG g$mr$14029$1DOkPG g$r$14030$1DOkPG g$m-exp-lab*$14031$1DOkPG g$m-exp-id*$14032$1DOkPG g$rhs*$14033$1DOkPG g$lex*$14034$1DOkPG) (begin (vector-for-each (case-lambda ((g$id$14035$1DOkPG g$lab$14036$1DOkPG) (g$extend-rib!$9145$1DOkPG g$rib$13902$1DOkPG g$id$14035$1DOkPG g$lab$14036$1DOkPG))) g$m-exp-id*$14032$1DOkPG g$m-exp-lab*$14031$1DOkPG) (g$chi-body*$9450$1DOkPG (cdr g$e*$13895$1DOkPG) g$r$14030$1DOkPG g$mr$14029$1DOkPG g$lex*$14034$1DOkPG g$rhs*$14033$1DOkPG g$mod**$14028$1DOkPG g$kwd*$14027$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG)))) g$kwd*$14026$1DOkPG g$mod**$14025$1DOkPG g$mr$14024$1DOkPG g$r$14023$1DOkPG g$m-exp-lab*$14022$1DOkPG g$m-exp-id*$14021$1DOkPG g$rhs*$14020$1DOkPG g$lex*$14019$1DOkPG)))) (if (memv g$t$13915$1DOkPG '(library)) (begin (g$library-expander$9488$1DOkPG (g$stx->datum$9192$1DOkPG g$e$13904$1DOkPG)) (g$chi-body*$9450$1DOkPG (cdr g$e*$13895$1DOkPG) g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG)) (if (memv g$t$13915$1DOkPG '(import)) (begin ((case-lambda (() (letrec* ((g$module-import?$13916$1DOkPG (case-lambda ((g$e$13981$1DOkPG) ((case-lambda ((g$t$13982$1DOkPG) ((case-lambda ((g$ls/false$13983$1DOkPG) (if (if g$ls/false$13983$1DOkPG (begin '#f (apply (case-lambda ((g$id$13984$1DOkPG) (g$id?$9181$1DOkPG g$id$13984$1DOkPG))) g$ls/false$13983$1DOkPG)) '#f) (apply (case-lambda ((g$id$13985$1DOkPG) '#t)) g$ls/false$13983$1DOkPG) ((case-lambda ((g$t$13986$1DOkPG) ((case-lambda ((g$ls/false$13987$1DOkPG) (if (if g$ls/false$13987$1DOkPG (begin '#f (apply (case-lambda ((g$imp*$13988$1DOkPG) '#t)) g$ls/false$13987$1DOkPG)) '#f) (apply (case-lambda ((g$imp*$13989$1DOkPG) '#f)) g$ls/false$13987$1DOkPG) ((case-lambda ((g$t$13990$1DOkPG) ((case-lambda ((g$ls/false$13991$1DOkPG) (if (if g$ls/false$13991$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13991$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"malformed import form" g$e$13981$1DOkPG))) g$ls/false$13991$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13990$1DOkPG)))) ((case-lambda ((g$x$13992$1DOkPG) '())) g$t$13990$1DOkPG)))) g$t$13986$1DOkPG)))) ((case-lambda ((g$x$13993$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13993$1DOkPG) (begin '#f ((case-lambda ((g$q$13994$1DOkPG) (if g$q$13994$1DOkPG (begin '#f ((case-lambda ((g$r$13995$1DOkPG) (if g$r$13995$1DOkPG (begin '#f (append g$q$13994$1DOkPG g$r$13995$1DOkPG)) '#f))) ((letrec ((g$f$13996$1DOkPG (case-lambda ((g$x$13997$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13997$1DOkPG) ((case-lambda ((g$cars/f$13998$1DOkPG) (if g$cars/f$13998$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13999$1DOkPG) (if g$cdrs/f$13999$1DOkPG (begin '#f (map cons g$cars/f$13998$1DOkPG g$cdrs/f$13999$1DOkPG)) '#f))) (g$f$13996$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13997$1DOkPG)))) '#f))) ((case-lambda ((g$x$14000$1DOkPG) (list g$x$14000$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13997$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13997$1DOkPG) (list (begin 'imp* '())) '#f)))))) g$f$13996$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13993$1DOkPG)))) '#f))) ((case-lambda ((g$x$14001$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13993$1DOkPG)))) '#f))) g$t$13986$1DOkPG)))) g$t$13982$1DOkPG)))) ((case-lambda ((g$x$14002$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14002$1DOkPG) (begin '#f ((case-lambda ((g$q$14003$1DOkPG) (if g$q$14003$1DOkPG (begin '#f ((case-lambda ((g$r$14004$1DOkPG) (if g$r$14004$1DOkPG (begin '#f (append g$q$14003$1DOkPG g$r$14004$1DOkPG)) '#f))) ((case-lambda ((g$x$14005$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14005$1DOkPG) (begin '#f ((case-lambda ((g$q$14006$1DOkPG) (if g$q$14006$1DOkPG (begin '#f ((case-lambda ((g$r$14007$1DOkPG) (if g$r$14007$1DOkPG (begin '#f (append g$q$14006$1DOkPG g$r$14007$1DOkPG)) '#f))) ((case-lambda ((g$x$14008$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14008$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14005$1DOkPG)))) '#f))) ((case-lambda ((g$x$14009$1DOkPG) (list g$x$14009$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14005$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14002$1DOkPG)))) '#f))) ((case-lambda ((g$x$14010$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$14002$1DOkPG)))) '#f))) g$t$13982$1DOkPG)))) g$e$13981$1DOkPG)))) (g$module-import$13917$1DOkPG (case-lambda ((g$e$13953$1DOkPG g$r$13954$1DOkPG) ((case-lambda ((g$t$13955$1DOkPG) ((case-lambda ((g$ls/false$13956$1DOkPG) (if (if g$ls/false$13956$1DOkPG (begin '#f (apply (case-lambda ((g$id$13957$1DOkPG) (g$id?$9181$1DOkPG g$id$13957$1DOkPG))) g$ls/false$13956$1DOkPG)) '#f) (apply (case-lambda ((g$id$13958$1DOkPG) (call-with-values (case-lambda (() (g$syntax-type$9199$1DOkPG g$id$13958$1DOkPG g$r$13954$1DOkPG))) (case-lambda ((g$type$13962$1DOkPG g$value$13963$1DOkPG g$kwd$13964$1DOkPG) ((case-lambda ((g$kwd$13965$1DOkPG g$value$13966$1DOkPG g$type$13967$1DOkPG) ((case-lambda ((g$t$13968$1DOkPG) (if (memv g$t$13968$1DOkPG '($module)) ((case-lambda ((g$iface$13969$1DOkPG) ((case-lambda ((g$id*$13970$1DOkPG g$lab*$13971$1DOkPG) (values g$id*$13970$1DOkPG g$lab*$13971$1DOkPG))) (car g$iface$13969$1DOkPG) (cdr g$iface$13969$1DOkPG)))) g$value$13966$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid import" g$e$13953$1DOkPG)))) g$type$13967$1DOkPG))) g$kwd$13964$1DOkPG g$value$13963$1DOkPG g$type$13962$1DOkPG)))))) g$ls/false$13956$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13955$1DOkPG)))) ((case-lambda ((g$x$13972$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13972$1DOkPG) (begin '#f ((case-lambda ((g$q$13973$1DOkPG) (if g$q$13973$1DOkPG (begin '#f ((case-lambda ((g$r$13974$1DOkPG) (if g$r$13974$1DOkPG (begin '#f (append g$q$13973$1DOkPG g$r$13974$1DOkPG)) '#f))) ((case-lambda ((g$x$13975$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13975$1DOkPG) (begin '#f ((case-lambda ((g$q$13976$1DOkPG) (if g$q$13976$1DOkPG (begin '#f ((case-lambda ((g$r$13977$1DOkPG) (if g$r$13977$1DOkPG (begin '#f (append g$q$13976$1DOkPG g$r$13977$1DOkPG)) '#f))) ((case-lambda ((g$x$13978$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$13978$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13975$1DOkPG)))) '#f))) ((case-lambda ((g$x$13979$1DOkPG) (list g$x$13979$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13975$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$13972$1DOkPG)))) '#f))) ((case-lambda ((g$x$13980$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$13972$1DOkPG)))) '#f))) g$t$13955$1DOkPG)))) g$e$13953$1DOkPG)))) (g$library-import$13918$1DOkPG (case-lambda ((g$e$13927$1DOkPG) ((case-lambda ((g$t$13928$1DOkPG) ((case-lambda ((g$ls/false$13929$1DOkPG) (if (if g$ls/false$13929$1DOkPG (begin '#f (apply (case-lambda ((g$ctxt$13930$1DOkPG g$imp*$13931$1DOkPG) '#t)) g$ls/false$13929$1DOkPG)) '#f) (apply (case-lambda ((g$ctxt$13932$1DOkPG g$imp*$13933$1DOkPG) (call-with-values (case-lambda (() (g$parse-import-spec*$9459$1DOkPG (g$syntax->datum$9504$1DOkPG g$imp*$13933$1DOkPG)))) (case-lambda ((g$subst-names$13936$1DOkPG g$subst-labels$13937$1DOkPG) ((case-lambda ((g$subst-labels$13938$1DOkPG g$subst-names$13939$1DOkPG) (values (vector-map (case-lambda ((g$name$13940$1DOkPG) (g$datum->stx$9164$1DOkPG g$ctxt$13932$1DOkPG g$name$13940$1DOkPG))) g$subst-names$13939$1DOkPG) g$subst-labels$13938$1DOkPG))) g$subst-labels$13937$1DOkPG g$subst-names$13936$1DOkPG)))))) g$ls/false$13929$1DOkPG) ((case-lambda ((g$t$13941$1DOkPG) ((case-lambda ((g$ls/false$13942$1DOkPG) (if (if g$ls/false$13942$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13942$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid import form" g$e$13927$1DOkPG))) g$ls/false$13942$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$13941$1DOkPG)))) ((case-lambda ((g$x$13943$1DOkPG) '())) g$t$13941$1DOkPG)))) g$t$13928$1DOkPG)))) ((case-lambda ((g$x$13944$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13944$1DOkPG) (begin '#f ((case-lambda ((g$q$13945$1DOkPG) (if g$q$13945$1DOkPG (begin '#f ((case-lambda ((g$r$13946$1DOkPG) (if g$r$13946$1DOkPG (begin '#f (append g$q$13945$1DOkPG g$r$13946$1DOkPG)) '#f))) ((letrec ((g$f$13947$1DOkPG (case-lambda ((g$x$13948$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$13948$1DOkPG) ((case-lambda ((g$cars/f$13949$1DOkPG) (if g$cars/f$13949$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$13950$1DOkPG) (if g$cdrs/f$13950$1DOkPG (begin '#f (map cons g$cars/f$13949$1DOkPG g$cdrs/f$13950$1DOkPG)) '#f))) (g$f$13947$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$13948$1DOkPG)))) '#f))) ((case-lambda ((g$x$13951$1DOkPG) (list g$x$13951$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13948$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$13948$1DOkPG) (list (begin 'imp* '())) '#f)))))) g$f$13947$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$13944$1DOkPG)))) '#f))) ((case-lambda ((g$x$13952$1DOkPG) (list g$x$13952$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$13944$1DOkPG)))) '#f))) g$t$13928$1DOkPG)))) g$e$13927$1DOkPG))))) (call-with-values (case-lambda (() (if (g$module-import?$13916$1DOkPG g$e$13904$1DOkPG) (g$module-import$13917$1DOkPG g$e$13904$1DOkPG g$r$13896$1DOkPG) (g$library-import$13918$1DOkPG g$e$13904$1DOkPG)))) (case-lambda ((g$id*$13921$1DOkPG g$lab*$13922$1DOkPG) ((case-lambda ((g$lab*$13923$1DOkPG g$id*$13924$1DOkPG) (vector-for-each (case-lambda ((g$id$13925$1DOkPG g$lab$13926$1DOkPG) (g$extend-rib!$9145$1DOkPG g$rib$13902$1DOkPG g$id$13925$1DOkPG g$lab$13926$1DOkPG))) g$id*$13924$1DOkPG g$lab*$13923$1DOkPG))) g$lab*$13922$1DOkPG g$id*$13921$1DOkPG)))))))) (g$chi-body*$9450$1DOkPG (cdr g$e*$13895$1DOkPG) g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG)) (if g$top?$13903$1DOkPG (g$chi-body*$9450$1DOkPG (cdr g$e*$13895$1DOkPG) g$r$13896$1DOkPG g$mr$13897$1DOkPG (cons (g$gen-lexical$9128$1DOkPG 'dummy) g$lex*$13898$1DOkPG) (cons (cons 'top-expr g$e$13904$1DOkPG) g$rhs*$13899$1DOkPG) g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG g$rib$13902$1DOkPG g$top?$13903$1DOkPG) (values g$e*$13895$1DOkPG g$r$13896$1DOkPG g$mr$13897$1DOkPG g$lex*$13898$1DOkPG g$rhs*$13899$1DOkPG g$mod**$13900$1DOkPG g$kwd*$13914$1DOkPG)))))))))))))) g$type$13913$1DOkPG))) (if (g$id?$9181$1DOkPG g$kwd$13911$1DOkPG) (cons g$kwd$13911$1DOkPG g$kwd*$13901$1DOkPG) g$kwd*$13901$1DOkPG)))) g$kwd$13910$1DOkPG g$value$13909$1DOkPG g$type$13908$1DOkPG)))))) (car g$e*$13895$1DOkPG)))))) (g$set-global-macro-binding!$9451$1DOkPG g$set-global-macro-binding!$15505$1DOkPG (case-lambda ((g$id$14105$1DOkPG g$loc$14106$1DOkPG g$b$14107$1DOkPG) (letrec* ((g$extend-macro!$14108$1DOkPG (case-lambda ((g$id$14110$1DOkPG g$loc$14111$1DOkPG g$type$14112$1DOkPG g$transformer$14113$1DOkPG) ((case-lambda ((g$sym$14114$1DOkPG g$label$14115$1DOkPG) (begin (set-symbol-value! g$loc$14111$1DOkPG g$transformer$14113$1DOkPG) (g$extend-library-subst!$8997$1DOkPG (g$interaction-library$9506$1DOkPG) g$sym$14114$1DOkPG g$label$14115$1DOkPG) (g$extend-library-env!$8998$1DOkPG (g$interaction-library$9506$1DOkPG) g$label$14115$1DOkPG (g$cons*$7868$1DOkPG g$type$14112$1DOkPG (g$interaction-library$9506$1DOkPG) g$loc$14111$1DOkPG))))) (g$id->sym$9182$1DOkPG g$id$14110$1DOkPG) (g$id->label$9193$1DOkPG g$id$14110$1DOkPG)))))) ((case-lambda ((g$t$14109$1DOkPG) (if (memv g$t$14109$1DOkPG '(local-macro)) (g$extend-macro!$14108$1DOkPG g$id$14105$1DOkPG g$loc$14106$1DOkPG 'global-macro (g$cadr$7446$1DOkPG g$b$14107$1DOkPG)) (if (memv g$t$14109$1DOkPG '(local-macro!)) (g$extend-macro!$14108$1DOkPG g$id$14105$1DOkPG g$loc$14106$1DOkPG 'global-macro! (g$cadr$7446$1DOkPG g$b$14107$1DOkPG)) (if (memv g$t$14109$1DOkPG '($rtd)) (g$extend-macro!$14108$1DOkPG g$id$14105$1DOkPG g$loc$14106$1DOkPG 'global-rtd (cdr g$b$14107$1DOkPG)) (assertion-violation 'set-global-macro-binding! '"BUG: invalid type" g$b$14107$1DOkPG)))))) (g$binding-type$9196$1DOkPG g$b$14107$1DOkPG)))))) (g$gen-global-macro-binding$9452$1DOkPG g$gen-global-macro-binding$15506$1DOkPG (case-lambda ((g$id$14116$1DOkPG g$ctxt$14117$1DOkPG) (g$gen-global-var-binding$9453$1DOkPG g$id$14116$1DOkPG g$ctxt$14117$1DOkPG)))) (g$gen-global-var-binding$9453$1DOkPG g$gen-global-var-binding$15507$1DOkPG (case-lambda ((g$id$14118$1DOkPG g$ctxt$14119$1DOkPG) ((case-lambda ((g$label$14120$1DOkPG) ((case-lambda ((g$b$14121$1DOkPG) ((case-lambda ((g$t$14122$1DOkPG) (if (memv g$t$14122$1DOkPG '(global global-macro global-macro! global-rtd)) ((case-lambda ((g$x$14123$1DOkPG) ((case-lambda ((g$lib$14124$1DOkPG g$loc$14125$1DOkPG) (if (eq? g$lib$14124$1DOkPG (g$interaction-library$9506$1DOkPG)) g$loc$14125$1DOkPG (g$syntax-violation$9501$1DOkPG '#f '"cannot modify imported binding" g$ctxt$14119$1DOkPG)))) (car g$x$14123$1DOkPG) (cdr g$x$14123$1DOkPG)))) (g$binding-value$9197$1DOkPG g$b$14121$1DOkPG)) (g$syntax-violation$9501$1DOkPG '#f '"cannot modify binding in" g$ctxt$14119$1DOkPG)))) (g$binding-type$9196$1DOkPG g$b$14121$1DOkPG)))) (g$imported-label->binding$8999$1DOkPG g$label$14120$1DOkPG)))) (g$id->label$9193$1DOkPG g$id$14118$1DOkPG))))) (g$chi-top*$9454$1DOkPG g$chi-top*$15508$1DOkPG (case-lambda ((g$e*$14126$1DOkPG g$init*$14127$1DOkPG) (if (null? g$e*$14126$1DOkPG) g$init*$14127$1DOkPG ((case-lambda ((g$e$14128$1DOkPG) (call-with-values (case-lambda (() (g$syntax-type$9199$1DOkPG g$e$14128$1DOkPG '()))) (case-lambda ((g$type$14132$1DOkPG g$value$14133$1DOkPG g$kwd$14134$1DOkPG) ((case-lambda ((g$kwd$14135$1DOkPG g$value$14136$1DOkPG g$type$14137$1DOkPG) ((case-lambda ((g$t$14138$1DOkPG) (if (memv g$t$14138$1DOkPG '(define)) (call-with-values (case-lambda (() (g$parse-define$9365$1DOkPG g$e$14128$1DOkPG))) (case-lambda ((g$id$14190$1DOkPG g$rhs$14191$1DOkPG) ((case-lambda ((g$rhs$14192$1DOkPG g$id$14193$1DOkPG) (begin (g$extend-library-subst!$8997$1DOkPG (g$interaction-library$9506$1DOkPG) (g$id->sym$9182$1DOkPG g$id$14193$1DOkPG) (g$id->label$9193$1DOkPG g$id$14193$1DOkPG)) ((case-lambda ((g$loc$14194$1DOkPG) (begin (g$extend-library-env!$8998$1DOkPG (g$interaction-library$9506$1DOkPG) (g$id->label$9193$1DOkPG g$id$14193$1DOkPG) (g$cons*$7868$1DOkPG 'global (g$interaction-library$9506$1DOkPG) g$loc$14194$1DOkPG)) ((case-lambda ((g$rhs$14195$1DOkPG) (g$chi-top*$9454$1DOkPG (cdr g$e*$14126$1DOkPG) (cons (cons g$loc$14194$1DOkPG g$rhs$14195$1DOkPG) g$init*$14127$1DOkPG)))) (g$chi-rhs$9443$1DOkPG g$rhs$14192$1DOkPG '() '()))))) (g$gen-global-var-binding$9453$1DOkPG g$id$14193$1DOkPG g$e$14128$1DOkPG))))) g$rhs$14191$1DOkPG g$id$14190$1DOkPG)))) (if (memv g$t$14138$1DOkPG '(define-syntax)) (call-with-values (case-lambda (() (g$parse-define-syntax$9366$1DOkPG g$e$14128$1DOkPG))) (case-lambda ((g$id$14181$1DOkPG g$rhs$14182$1DOkPG) ((case-lambda ((g$rhs$14183$1DOkPG g$id$14184$1DOkPG) ((case-lambda ((g$loc$14185$1DOkPG) ((case-lambda ((g$expanded-rhs$14186$1DOkPG) ((case-lambda ((g$b$14187$1DOkPG) (begin (g$set-global-macro-binding!$9451$1DOkPG g$id$14184$1DOkPG g$loc$14185$1DOkPG g$b$14187$1DOkPG) (g$chi-top*$9454$1DOkPG (cdr g$e*$14126$1DOkPG) g$init*$14127$1DOkPG)))) (g$make-eval-transformer$9209$1DOkPG g$expanded-rhs$14186$1DOkPG)))) (g$expand-transformer$9455$1DOkPG g$rhs$14183$1DOkPG '())))) (g$gen-global-macro-binding$9452$1DOkPG g$id$14184$1DOkPG g$e$14128$1DOkPG)))) g$rhs$14182$1DOkPG g$id$14181$1DOkPG)))) (if (memv g$t$14138$1DOkPG '(let-syntax letrec-syntax)) (assertion-violation 'chi-top* '"BUG: not supported yet at top level" g$type$14137$1DOkPG) (if (memv g$t$14138$1DOkPG '(begin)) ((case-lambda ((g$t$14166$1DOkPG) ((case-lambda ((g$ls/false$14167$1DOkPG) (if (if g$ls/false$14167$1DOkPG (begin '#f (apply (case-lambda ((g$x*$14168$1DOkPG) '#t)) g$ls/false$14167$1DOkPG)) '#f) (apply (case-lambda ((g$x*$14169$1DOkPG) (g$chi-top*$9454$1DOkPG (append g$x*$14169$1DOkPG (cdr g$e*$14126$1DOkPG)) g$init*$14127$1DOkPG))) g$ls/false$14167$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14166$1DOkPG)))) ((case-lambda ((g$x$14170$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14170$1DOkPG) (begin '#f ((case-lambda ((g$q$14171$1DOkPG) (if g$q$14171$1DOkPG (begin '#f ((case-lambda ((g$r$14172$1DOkPG) (if g$r$14172$1DOkPG (begin '#f (append g$q$14171$1DOkPG g$r$14172$1DOkPG)) '#f))) ((letrec ((g$f$14173$1DOkPG (case-lambda ((g$x$14174$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14174$1DOkPG) ((case-lambda ((g$cars/f$14175$1DOkPG) (if g$cars/f$14175$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14176$1DOkPG) (if g$cdrs/f$14176$1DOkPG (begin '#f (map cons g$cars/f$14175$1DOkPG g$cdrs/f$14176$1DOkPG)) '#f))) (g$f$14173$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14174$1DOkPG)))) '#f))) ((case-lambda ((g$x$14177$1DOkPG) (list g$x$14177$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14174$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14174$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$14173$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14170$1DOkPG)))) '#f))) ((case-lambda ((g$x$14178$1DOkPG) '())) (g$syntax-car$9178$1DOkPG g$x$14170$1DOkPG)))) '#f))) g$t$14166$1DOkPG)))) g$e$14128$1DOkPG) (if (memv g$t$14138$1DOkPG '(global-macro global-macro!)) (g$chi-top*$9454$1DOkPG (cons (g$chi-global-macro$9435$1DOkPG g$value$14136$1DOkPG g$e$14128$1DOkPG) (cdr g$e*$14126$1DOkPG)) g$init*$14127$1DOkPG) (if (memv g$t$14138$1DOkPG '(local-macro local-macro!)) (g$chi-top*$9454$1DOkPG (cons (g$chi-local-macro$9434$1DOkPG g$value$14136$1DOkPG g$e$14128$1DOkPG) (cdr g$e*$14126$1DOkPG)) g$init*$14127$1DOkPG) (if (memv g$t$14138$1DOkPG '(macro macro!)) (g$chi-top*$9454$1DOkPG (cons (g$chi-macro$9433$1DOkPG g$value$14136$1DOkPG g$e$14128$1DOkPG) (cdr g$e*$14126$1DOkPG)) g$init*$14127$1DOkPG) (if (memv g$t$14138$1DOkPG '(library)) (begin (g$library-expander$9488$1DOkPG (g$stx->datum$9192$1DOkPG g$e$14128$1DOkPG)) (g$chi-top*$9454$1DOkPG (cdr g$e*$14126$1DOkPG) g$init*$14127$1DOkPG)) (if (memv g$t$14138$1DOkPG '(import)) (begin ((case-lambda ((g$t$14139$1DOkPG) ((case-lambda ((g$ls/false$14140$1DOkPG) (if (if g$ls/false$14140$1DOkPG (begin '#f (apply (case-lambda ((g$ctxt$14141$1DOkPG g$imp*$14142$1DOkPG) '#t)) g$ls/false$14140$1DOkPG)) '#f) (apply (case-lambda ((g$ctxt$14143$1DOkPG g$imp*$14144$1DOkPG) (call-with-values (case-lambda (() (g$parse-import-spec*$9459$1DOkPG (g$syntax->datum$9504$1DOkPG g$imp*$14144$1DOkPG)))) (case-lambda ((g$subst-names$14147$1DOkPG g$subst-labels$14148$1DOkPG) ((case-lambda ((g$subst-labels$14149$1DOkPG g$subst-names$14150$1DOkPG) ((case-lambda ((g$t$14151$1DOkPG) (if g$t$14151$1DOkPG ((case-lambda ((g$lib$14152$1DOkPG) (vector-for-each (case-lambda ((g$sym$14153$1DOkPG g$label$14154$1DOkPG) ((case-lambda ((g$t$14155$1DOkPG) (if g$t$14155$1DOkPG ((case-lambda ((g$p$14156$1DOkPG) (if (eq? (cdr g$p$14156$1DOkPG) g$label$14154$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG 'import '"identifier conflict" g$e$14128$1DOkPG g$sym$14153$1DOkPG)))) g$t$14155$1DOkPG) (g$extend-library-subst!$8997$1DOkPG g$lib$14152$1DOkPG g$sym$14153$1DOkPG g$label$14154$1DOkPG)))) (assq g$sym$14153$1DOkPG (g$library-subst$8955$1DOkPG g$lib$14152$1DOkPG))))) g$subst-names$14150$1DOkPG g$subst-labels$14149$1DOkPG))) g$t$14151$1DOkPG) (assertion-violation 'import '"BUG: cannot happen")))) (g$interaction-library$9506$1DOkPG)))) g$subst-labels$14148$1DOkPG g$subst-names$14147$1DOkPG)))))) g$ls/false$14140$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14139$1DOkPG)))) ((case-lambda ((g$x$14157$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14157$1DOkPG) (begin '#f ((case-lambda ((g$q$14158$1DOkPG) (if g$q$14158$1DOkPG (begin '#f ((case-lambda ((g$r$14159$1DOkPG) (if g$r$14159$1DOkPG (begin '#f (append g$q$14158$1DOkPG g$r$14159$1DOkPG)) '#f))) ((letrec ((g$f$14160$1DOkPG (case-lambda ((g$x$14161$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14161$1DOkPG) ((case-lambda ((g$cars/f$14162$1DOkPG) (if g$cars/f$14162$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14163$1DOkPG) (if g$cdrs/f$14163$1DOkPG (begin '#f (map cons g$cars/f$14162$1DOkPG g$cdrs/f$14163$1DOkPG)) '#f))) (g$f$14160$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14161$1DOkPG)))) '#f))) ((case-lambda ((g$x$14164$1DOkPG) (list g$x$14164$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14161$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14161$1DOkPG) (list (begin 'imp* '())) '#f)))))) g$f$14160$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14157$1DOkPG)))) '#f))) ((case-lambda ((g$x$14165$1DOkPG) (list g$x$14165$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14157$1DOkPG)))) '#f))) g$t$14139$1DOkPG)))) g$e$14128$1DOkPG) (g$chi-top*$9454$1DOkPG (cdr g$e*$14126$1DOkPG) g$init*$14127$1DOkPG)) (g$chi-top*$9454$1DOkPG (cdr g$e*$14126$1DOkPG) (cons (cons '#f (g$chi-expr$9438$1DOkPG g$e$14128$1DOkPG '() '())) g$init*$14127$1DOkPG))))))))))))) g$type$14137$1DOkPG))) g$kwd$14134$1DOkPG g$value$14133$1DOkPG g$type$14132$1DOkPG)))))) (car g$e*$14126$1DOkPG)))))) (g$expand-transformer$9455$1DOkPG g$expand-transformer$15509$1DOkPG (case-lambda ((g$expr$14196$1DOkPG g$r$14197$1DOkPG) ((case-lambda ((g$rtc$14198$1DOkPG) ((case-lambda ((g$expanded-rhs$14199$1DOkPG) (begin (for-each ((case-lambda ((g$mark-visit$14200$1DOkPG) (case-lambda ((g$x$14201$1DOkPG) (begin (g$invoke-library$9000$1DOkPG g$x$14201$1DOkPG) (g$mark-visit$14200$1DOkPG g$x$14201$1DOkPG)))))) (g$vis-collector$9463$1DOkPG)) (g$rtc$14198$1DOkPG)) g$expanded-rhs$14199$1DOkPG))) ((case-lambda ((g$inv-collector$14206$1DOkPG g$vis-collector$14207$1DOkPG g$inv-collector$14208$1DOkPG g$vis-collector$14209$1DOkPG) ((case-lambda ((g$swap$14210$1DOkPG) (dynamic-wind g$swap$14210$1DOkPG (case-lambda (() (g$chi-expr$9438$1DOkPG g$expr$14196$1DOkPG g$r$14197$1DOkPG g$r$14197$1DOkPG))) g$swap$14210$1DOkPG))) (case-lambda (() (begin ((case-lambda ((g$t$14211$1DOkPG) (begin (g$inv-collector$14206$1DOkPG g$inv-collector$14208$1DOkPG) (set! g$inv-collector$14208$1DOkPG g$t$14211$1DOkPG)))) (g$inv-collector$14206$1DOkPG)) ((case-lambda ((g$t$14212$1DOkPG) (begin (g$vis-collector$14207$1DOkPG g$vis-collector$14209$1DOkPG) (set! g$vis-collector$14209$1DOkPG g$t$14212$1DOkPG)))) (g$vis-collector$14207$1DOkPG)))))))) g$inv-collector$9462$1DOkPG g$vis-collector$9463$1DOkPG g$rtc$14198$1DOkPG (case-lambda ((g$x$14213$1DOkPG) (values))))))) (g$make-collector$9461$1DOkPG))))) (g$parse-exports$9456$1DOkPG g$parse-exports$15510$1DOkPG (case-lambda ((g$exp*$14214$1DOkPG) ((letrec ((g$f$14215$1DOkPG (case-lambda ((g$exp*$14216$1DOkPG g$int*$14217$1DOkPG g$ext*$14218$1DOkPG) (if (null? g$exp*$14216$1DOkPG) (begin ((case-lambda ((g$id*$14219$1DOkPG) (if (g$valid-bound-ids?$9186$1DOkPG g$id*$14219$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG 'export '"invalid exports" (g$find-dups$9446$1DOkPG g$id*$14219$1DOkPG))))) (map (case-lambda ((g$x$14220$1DOkPG) (g$mkstx$9169$1DOkPG g$x$14220$1DOkPG g$top-mark*$9126$1DOkPG '() '()))) g$ext*$14218$1DOkPG)) (values (map g$syntax->datum$9504$1DOkPG g$int*$14217$1DOkPG) (map g$syntax->datum$9504$1DOkPG g$ext*$14218$1DOkPG))) ((case-lambda ((g$t$14221$1DOkPG) ((case-lambda ((g$ls/false$14222$1DOkPG) (if (if g$ls/false$14222$1DOkPG (begin '#f (apply (case-lambda ((g$rename$14223$1DOkPG g$i*$14224$1DOkPG g$e*$14225$1DOkPG) '#t)) g$ls/false$14222$1DOkPG)) '#f) (apply (case-lambda ((g$rename$14226$1DOkPG g$i*$14227$1DOkPG g$e*$14228$1DOkPG) (begin (if (if (eq? (g$syntax->datum$9504$1DOkPG g$rename$14226$1DOkPG) 'rename) (if (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$i*$14227$1DOkPG) (begin '#f (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$e*$14228$1DOkPG)) '#f) '#f) (void) (g$syntax-violation$9501$1DOkPG 'export '"invalid export specifier" (car g$exp*$14216$1DOkPG))) (g$f$14215$1DOkPG (cdr g$exp*$14216$1DOkPG) (append g$i*$14227$1DOkPG g$int*$14217$1DOkPG) (append g$e*$14228$1DOkPG g$ext*$14218$1DOkPG))))) g$ls/false$14222$1DOkPG) ((case-lambda ((g$t$14229$1DOkPG) ((case-lambda ((g$ls/false$14230$1DOkPG) (if (if g$ls/false$14230$1DOkPG (begin '#f (apply (case-lambda ((g$ie$14231$1DOkPG) '#t)) g$ls/false$14230$1DOkPG)) '#f) (apply (case-lambda ((g$ie$14232$1DOkPG) (begin (if (g$id?$9181$1DOkPG g$ie$14232$1DOkPG) (void) (g$syntax-violation$9501$1DOkPG 'export '"invalid export" g$ie$14232$1DOkPG)) (g$f$14215$1DOkPG (cdr g$exp*$14216$1DOkPG) (cons g$ie$14232$1DOkPG g$int*$14217$1DOkPG) (cons g$ie$14232$1DOkPG g$ext*$14218$1DOkPG))))) g$ls/false$14230$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14229$1DOkPG)))) ((case-lambda ((g$x$14233$1DOkPG) (list g$x$14233$1DOkPG))) g$t$14229$1DOkPG)))) g$t$14221$1DOkPG)))) ((case-lambda ((g$x$14234$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14234$1DOkPG) (begin '#f ((case-lambda ((g$q$14235$1DOkPG) (if g$q$14235$1DOkPG (begin '#f ((case-lambda ((g$r$14236$1DOkPG) (if g$r$14236$1DOkPG (begin '#f (append g$q$14235$1DOkPG g$r$14236$1DOkPG)) '#f))) ((letrec ((g$f$14237$1DOkPG (case-lambda ((g$x$14238$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14238$1DOkPG) ((case-lambda ((g$cars/f$14239$1DOkPG) (if g$cars/f$14239$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14240$1DOkPG) (if g$cdrs/f$14240$1DOkPG (begin '#f (map cons g$cars/f$14239$1DOkPG g$cdrs/f$14240$1DOkPG)) '#f))) (g$f$14237$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14238$1DOkPG)))) '#f))) ((case-lambda ((g$x$14241$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14241$1DOkPG) (begin '#f ((case-lambda ((g$q$14242$1DOkPG) (if g$q$14242$1DOkPG (begin '#f ((case-lambda ((g$r$14243$1DOkPG) (if g$r$14243$1DOkPG (begin '#f (append g$q$14242$1DOkPG g$r$14243$1DOkPG)) '#f))) ((case-lambda ((g$x$14244$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14244$1DOkPG) (begin '#f ((case-lambda ((g$q$14245$1DOkPG) (if g$q$14245$1DOkPG (begin '#f ((case-lambda ((g$r$14246$1DOkPG) (if g$r$14246$1DOkPG (begin '#f (append g$q$14245$1DOkPG g$r$14246$1DOkPG)) '#f))) ((case-lambda ((g$x$14247$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14247$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14244$1DOkPG)))) '#f))) ((case-lambda ((g$x$14248$1DOkPG) (list g$x$14248$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14244$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14241$1DOkPG)))) '#f))) ((case-lambda ((g$x$14249$1DOkPG) (list g$x$14249$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14241$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$14238$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14238$1DOkPG) (list (begin 'i* '()) (begin 'e* '())) '#f)))))) g$f$14237$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14234$1DOkPG)))) '#f))) ((case-lambda ((g$x$14250$1DOkPG) (list g$x$14250$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14234$1DOkPG)))) '#f))) g$t$14221$1DOkPG)))) (car g$exp*$14216$1DOkPG))))))) g$f$14215$1DOkPG) g$exp*$14214$1DOkPG '() '())))) (g$parse-library-name$9457$1DOkPG g$parse-library-name$15511$1DOkPG (case-lambda ((g$spec$14251$1DOkPG) (letrec* ((g$parse$14252$1DOkPG (case-lambda ((g$x$14259$1DOkPG) ((case-lambda ((g$t$14260$1DOkPG) ((case-lambda ((g$ls/false$14261$1DOkPG) (if (if g$ls/false$14261$1DOkPG (begin '#f (apply (case-lambda ((g$v*$14262$1DOkPG) (g$for-all$7866$1DOkPG (case-lambda ((g$x$14263$1DOkPG) ((case-lambda ((g$x$14264$1DOkPG) (if (integer? g$x$14264$1DOkPG) (begin '#f (exact? g$x$14264$1DOkPG)) '#f))) (g$syntax->datum$9504$1DOkPG g$x$14263$1DOkPG)))) g$v*$14262$1DOkPG))) g$ls/false$14261$1DOkPG)) '#f) (apply (case-lambda ((g$v*$14265$1DOkPG) (values '() (map g$syntax->datum$9504$1DOkPG g$v*$14265$1DOkPG)))) g$ls/false$14261$1DOkPG) ((case-lambda ((g$t$14266$1DOkPG) ((case-lambda ((g$ls/false$14267$1DOkPG) (if (if g$ls/false$14267$1DOkPG (begin '#f (apply (case-lambda ((g$x$14268$1DOkPG g$rest$14269$1DOkPG) (g$id?$9181$1DOkPG g$x$14268$1DOkPG))) g$ls/false$14267$1DOkPG)) '#f) (apply (case-lambda ((g$x$14270$1DOkPG g$rest$14271$1DOkPG) (call-with-values (case-lambda (() (g$parse$14252$1DOkPG g$rest$14271$1DOkPG))) (case-lambda ((g$x*$14274$1DOkPG g$v*$14275$1DOkPG) ((case-lambda ((g$v*$14276$1DOkPG g$x*$14277$1DOkPG) (values (cons (g$id->sym$9182$1DOkPG g$x$14270$1DOkPG) g$x*$14277$1DOkPG) g$v*$14276$1DOkPG))) g$v*$14275$1DOkPG g$x*$14274$1DOkPG)))))) g$ls/false$14267$1DOkPG) ((case-lambda ((g$t$14278$1DOkPG) ((case-lambda ((g$ls/false$14279$1DOkPG) (if (if g$ls/false$14279$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14279$1DOkPG)) '#f) (apply (case-lambda (() (values '() '()))) g$ls/false$14279$1DOkPG) ((case-lambda ((g$t$14280$1DOkPG) ((case-lambda ((g$ls/false$14281$1DOkPG) (if (if g$ls/false$14281$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14281$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid library name" g$spec$14251$1DOkPG))) g$ls/false$14281$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14280$1DOkPG)))) ((case-lambda ((g$x$14282$1DOkPG) '())) g$t$14280$1DOkPG)))) g$t$14278$1DOkPG)))) ((case-lambda ((g$x$14283$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14283$1DOkPG) '()) (begin '#f '()) '#f))) g$t$14278$1DOkPG)))) g$t$14266$1DOkPG)))) ((case-lambda ((g$x$14284$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14284$1DOkPG) (begin '#f ((case-lambda ((g$q$14285$1DOkPG) (if g$q$14285$1DOkPG (begin '#f ((case-lambda ((g$r$14286$1DOkPG) (if g$r$14286$1DOkPG (begin '#f (append g$q$14285$1DOkPG g$r$14286$1DOkPG)) '#f))) ((case-lambda ((g$x$14287$1DOkPG) (list g$x$14287$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$14284$1DOkPG)))) '#f))) ((case-lambda ((g$x$14288$1DOkPG) (list g$x$14288$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14284$1DOkPG)))) '#f))) g$t$14266$1DOkPG)))) g$t$14260$1DOkPG)))) ((case-lambda ((g$x$14289$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14289$1DOkPG) (begin '#f ((case-lambda ((g$q$14290$1DOkPG) (if g$q$14290$1DOkPG (begin '#f ((case-lambda ((g$r$14291$1DOkPG) (if g$r$14291$1DOkPG (begin '#f (append g$q$14290$1DOkPG g$r$14291$1DOkPG)) '#f))) ((case-lambda ((g$x$14292$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14292$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14289$1DOkPG)))) '#f))) ((letrec ((g$f$14293$1DOkPG (case-lambda ((g$x$14294$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14294$1DOkPG) ((case-lambda ((g$cars/f$14295$1DOkPG) (if g$cars/f$14295$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14296$1DOkPG) (if g$cdrs/f$14296$1DOkPG (begin '#f (map cons g$cars/f$14295$1DOkPG g$cdrs/f$14296$1DOkPG)) '#f))) (g$f$14293$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14294$1DOkPG)))) '#f))) ((case-lambda ((g$x$14297$1DOkPG) (list g$x$14297$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14294$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14294$1DOkPG) (list (begin 'v* '())) '#f)))))) g$f$14293$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$14289$1DOkPG)))) '#f))) g$t$14260$1DOkPG)))) g$x$14259$1DOkPG))))) (call-with-values (case-lambda (() (g$parse$14252$1DOkPG g$spec$14251$1DOkPG))) (case-lambda ((g$name*$14255$1DOkPG g$ver*$14256$1DOkPG) ((case-lambda ((g$ver*$14257$1DOkPG g$name*$14258$1DOkPG) (begin (if (null? g$name*$14258$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"empty library name" g$spec$14251$1DOkPG) (void)) (values g$name*$14258$1DOkPG g$ver*$14257$1DOkPG)))) g$ver*$14256$1DOkPG g$name*$14255$1DOkPG)))))))) (g$parse-library$9458$1DOkPG g$parse-library$15512$1DOkPG (case-lambda ((g$e$14298$1DOkPG) ((case-lambda ((g$t$14299$1DOkPG) ((case-lambda ((g$ls/false$14300$1DOkPG) (if (if g$ls/false$14300$1DOkPG (begin '#f (apply (case-lambda ((g$library$14301$1DOkPG g$name*$14302$1DOkPG g$export$14303$1DOkPG g$exp*$14304$1DOkPG g$import$14305$1DOkPG g$imp*$14306$1DOkPG g$b*$14307$1DOkPG) (if (eq? (g$syntax->datum$9504$1DOkPG g$export$14303$1DOkPG) 'export) (if (eq? (g$syntax->datum$9504$1DOkPG g$import$14305$1DOkPG) 'import) (begin '#f (eq? (g$syntax->datum$9504$1DOkPG g$library$14301$1DOkPG) 'library)) '#f) '#f))) g$ls/false$14300$1DOkPG)) '#f) (apply (case-lambda ((g$library$14308$1DOkPG g$name*$14309$1DOkPG g$export$14310$1DOkPG g$exp*$14311$1DOkPG g$import$14312$1DOkPG g$imp*$14313$1DOkPG g$b*$14314$1DOkPG) (values g$name*$14309$1DOkPG g$exp*$14311$1DOkPG g$imp*$14313$1DOkPG g$b*$14314$1DOkPG))) g$ls/false$14300$1DOkPG) ((case-lambda ((g$t$14315$1DOkPG) ((case-lambda ((g$ls/false$14316$1DOkPG) (if (if g$ls/false$14316$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14316$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"malformed library" g$e$14298$1DOkPG))) g$ls/false$14316$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14315$1DOkPG)))) ((case-lambda ((g$x$14317$1DOkPG) '())) g$t$14315$1DOkPG)))) g$t$14299$1DOkPG)))) ((case-lambda ((g$x$14318$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14318$1DOkPG) (begin '#f ((case-lambda ((g$q$14319$1DOkPG) (if g$q$14319$1DOkPG (begin '#f ((case-lambda ((g$r$14320$1DOkPG) (if g$r$14320$1DOkPG (begin '#f (append g$q$14319$1DOkPG g$r$14320$1DOkPG)) '#f))) ((case-lambda ((g$x$14321$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14321$1DOkPG) (begin '#f ((case-lambda ((g$q$14322$1DOkPG) (if g$q$14322$1DOkPG (begin '#f ((case-lambda ((g$r$14323$1DOkPG) (if g$r$14323$1DOkPG (begin '#f (append g$q$14322$1DOkPG g$r$14323$1DOkPG)) '#f))) ((case-lambda ((g$x$14324$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14324$1DOkPG) (begin '#f ((case-lambda ((g$q$14325$1DOkPG) (if g$q$14325$1DOkPG (begin '#f ((case-lambda ((g$r$14326$1DOkPG) (if g$r$14326$1DOkPG (begin '#f (append g$q$14325$1DOkPG g$r$14326$1DOkPG)) '#f))) ((case-lambda ((g$x$14327$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14327$1DOkPG) (begin '#f ((case-lambda ((g$q$14328$1DOkPG) (if g$q$14328$1DOkPG (begin '#f ((case-lambda ((g$r$14329$1DOkPG) (if g$r$14329$1DOkPG (begin '#f (append g$q$14328$1DOkPG g$r$14329$1DOkPG)) '#f))) ((letrec ((g$f$14330$1DOkPG (case-lambda ((g$x$14331$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14331$1DOkPG) ((case-lambda ((g$cars/f$14332$1DOkPG) (if g$cars/f$14332$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14333$1DOkPG) (if g$cdrs/f$14333$1DOkPG (begin '#f (map cons g$cars/f$14332$1DOkPG g$cdrs/f$14333$1DOkPG)) '#f))) (g$f$14330$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14331$1DOkPG)))) '#f))) ((case-lambda ((g$x$14334$1DOkPG) (list g$x$14334$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14331$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14331$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$14330$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14327$1DOkPG)))) '#f))) ((case-lambda ((g$x$14335$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14335$1DOkPG) (begin '#f ((case-lambda ((g$q$14336$1DOkPG) (if g$q$14336$1DOkPG (begin '#f ((case-lambda ((g$r$14337$1DOkPG) (if g$r$14337$1DOkPG (begin '#f (append g$q$14336$1DOkPG g$r$14337$1DOkPG)) '#f))) ((letrec ((g$f$14338$1DOkPG (case-lambda ((g$x$14339$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14339$1DOkPG) ((case-lambda ((g$cars/f$14340$1DOkPG) (if g$cars/f$14340$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14341$1DOkPG) (if g$cdrs/f$14341$1DOkPG (begin '#f (map cons g$cars/f$14340$1DOkPG g$cdrs/f$14341$1DOkPG)) '#f))) (g$f$14338$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14339$1DOkPG)))) '#f))) ((case-lambda ((g$x$14342$1DOkPG) (list g$x$14342$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14339$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14339$1DOkPG) (list (begin 'imp* '())) '#f)))))) g$f$14338$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14335$1DOkPG)))) '#f))) ((case-lambda ((g$x$14343$1DOkPG) (list g$x$14343$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14335$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$14327$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14324$1DOkPG)))) '#f))) ((case-lambda ((g$x$14344$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14344$1DOkPG) (begin '#f ((case-lambda ((g$q$14345$1DOkPG) (if g$q$14345$1DOkPG (begin '#f ((case-lambda ((g$r$14346$1DOkPG) (if g$r$14346$1DOkPG (begin '#f (append g$q$14345$1DOkPG g$r$14346$1DOkPG)) '#f))) ((letrec ((g$f$14347$1DOkPG (case-lambda ((g$x$14348$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14348$1DOkPG) ((case-lambda ((g$cars/f$14349$1DOkPG) (if g$cars/f$14349$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14350$1DOkPG) (if g$cdrs/f$14350$1DOkPG (begin '#f (map cons g$cars/f$14349$1DOkPG g$cdrs/f$14350$1DOkPG)) '#f))) (g$f$14347$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14348$1DOkPG)))) '#f))) ((case-lambda ((g$x$14351$1DOkPG) (list g$x$14351$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14348$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14348$1DOkPG) (list (begin 'exp* '())) '#f)))))) g$f$14347$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14344$1DOkPG)))) '#f))) ((case-lambda ((g$x$14352$1DOkPG) (list g$x$14352$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14344$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$14324$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14321$1DOkPG)))) '#f))) ((letrec ((g$f$14353$1DOkPG (case-lambda ((g$x$14354$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14354$1DOkPG) ((case-lambda ((g$cars/f$14355$1DOkPG) (if g$cars/f$14355$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14356$1DOkPG) (if g$cdrs/f$14356$1DOkPG (begin '#f (map cons g$cars/f$14355$1DOkPG g$cdrs/f$14356$1DOkPG)) '#f))) (g$f$14353$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14354$1DOkPG)))) '#f))) ((case-lambda ((g$x$14357$1DOkPG) (list g$x$14357$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14354$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14354$1DOkPG) (list (begin 'name* '())) '#f)))))) g$f$14353$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$14321$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14318$1DOkPG)))) '#f))) ((case-lambda ((g$x$14358$1DOkPG) (list g$x$14358$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14318$1DOkPG)))) '#f))) g$t$14299$1DOkPG)))) g$e$14298$1DOkPG)))) (g$parse-import-spec*$9459$1DOkPG g$parse-import-spec*$15513$1DOkPG (case-lambda ((g$imp*$14359$1DOkPG) (letrec* ((g$dup-error$14360$1DOkPG (case-lambda ((g$name$14809$1DOkPG) (g$syntax-violation$9501$1DOkPG 'import '"two imports with different bindings" g$name$14809$1DOkPG)))) (g$merge-substs$14361$1DOkPG (case-lambda ((g$s$14800$1DOkPG g$subst$14801$1DOkPG) (letrec* ((g$insert-to-subst$14802$1DOkPG (case-lambda ((g$a$14803$1DOkPG g$subst$14804$1DOkPG) ((case-lambda ((g$name$14805$1DOkPG g$label$14806$1DOkPG) ((case-lambda ((g$t$14807$1DOkPG) (if g$t$14807$1DOkPG ((case-lambda ((g$x$14808$1DOkPG) (if (eq? (cdr g$x$14808$1DOkPG) g$label$14806$1DOkPG) g$subst$14804$1DOkPG (g$dup-error$14360$1DOkPG g$name$14805$1DOkPG)))) g$t$14807$1DOkPG) (cons g$a$14803$1DOkPG g$subst$14804$1DOkPG)))) (assq g$name$14805$1DOkPG g$subst$14804$1DOkPG)))) (car g$a$14803$1DOkPG) (cdr g$a$14803$1DOkPG)))))) (if (null? g$s$14800$1DOkPG) g$subst$14801$1DOkPG (g$insert-to-subst$14802$1DOkPG (car g$s$14800$1DOkPG) (g$merge-substs$14361$1DOkPG (cdr g$s$14800$1DOkPG) g$subst$14801$1DOkPG))))))) (g$exclude*$14362$1DOkPG (case-lambda ((g$sym*$14776$1DOkPG g$subst$14777$1DOkPG) (letrec* ((g$exclude$14778$1DOkPG (case-lambda ((g$sym$14791$1DOkPG g$subst$14792$1DOkPG) (if (null? g$subst$14792$1DOkPG) (g$syntax-violation$9501$1DOkPG 'import '"cannot rename unbound identifier" g$sym$14791$1DOkPG) (if (eq? g$sym$14791$1DOkPG (g$caar$7445$1DOkPG g$subst$14792$1DOkPG)) (values (g$cdar$7447$1DOkPG g$subst$14792$1DOkPG) (cdr g$subst$14792$1DOkPG)) ((case-lambda ((g$a$14793$1DOkPG) (call-with-values (case-lambda (() (g$exclude$14778$1DOkPG g$sym$14791$1DOkPG (cdr g$subst$14792$1DOkPG)))) (case-lambda ((g$old$14796$1DOkPG g$subst$14797$1DOkPG) ((case-lambda ((g$subst$14798$1DOkPG g$old$14799$1DOkPG) (values g$old$14799$1DOkPG (cons g$a$14793$1DOkPG g$subst$14798$1DOkPG)))) g$subst$14797$1DOkPG g$old$14796$1DOkPG)))))) (car g$subst$14792$1DOkPG)))))))) (if (null? g$sym*$14776$1DOkPG) (values '() g$subst$14777$1DOkPG) (call-with-values (case-lambda (() (g$exclude$14778$1DOkPG (car g$sym*$14776$1DOkPG) g$subst$14777$1DOkPG))) (case-lambda ((g$old$14781$1DOkPG g$subst$14782$1DOkPG) ((case-lambda ((g$subst$14783$1DOkPG g$old$14784$1DOkPG) (call-with-values (case-lambda (() (g$exclude*$14362$1DOkPG (cdr g$sym*$14776$1DOkPG) g$subst$14783$1DOkPG))) (case-lambda ((g$old*$14787$1DOkPG g$subst$14788$1DOkPG) ((case-lambda ((g$subst$14789$1DOkPG g$old*$14790$1DOkPG) (values (cons g$old$14784$1DOkPG g$old*$14790$1DOkPG) g$subst$14789$1DOkPG))) g$subst$14788$1DOkPG g$old*$14787$1DOkPG)))))) g$subst$14782$1DOkPG g$old$14781$1DOkPG))))))))) (g$find*$14363$1DOkPG (case-lambda ((g$sym*$14772$1DOkPG g$subst$14773$1DOkPG) (map (case-lambda ((g$x$14774$1DOkPG) ((case-lambda ((g$t$14775$1DOkPG) (if g$t$14775$1DOkPG (cdr g$t$14775$1DOkPG) (g$syntax-violation$9501$1DOkPG 'import '"cannot find identifier" g$x$14774$1DOkPG)))) (assq g$x$14774$1DOkPG g$subst$14773$1DOkPG)))) g$sym*$14772$1DOkPG)))) (g$rem*$14364$1DOkPG (case-lambda ((g$sym*$14768$1DOkPG g$subst$14769$1DOkPG) ((letrec ((g$f$14770$1DOkPG (case-lambda ((g$subst$14771$1DOkPG) (if (null? g$subst$14771$1DOkPG) '() (if (memq (g$caar$7445$1DOkPG g$subst$14771$1DOkPG) g$sym*$14768$1DOkPG) (g$f$14770$1DOkPG (cdr g$subst$14771$1DOkPG)) (cons (car g$subst$14771$1DOkPG) (g$f$14770$1DOkPG (cdr g$subst$14771$1DOkPG))))))))) g$f$14770$1DOkPG) g$subst$14769$1DOkPG)))) (g$remove-dups$14365$1DOkPG (case-lambda ((g$ls$14767$1DOkPG) (if (null? g$ls$14767$1DOkPG) '() (if (memq (car g$ls$14767$1DOkPG) (cdr g$ls$14767$1DOkPG)) (g$remove-dups$14365$1DOkPG (cdr g$ls$14767$1DOkPG)) (cons (car g$ls$14767$1DOkPG) (g$remove-dups$14365$1DOkPG (cdr g$ls$14767$1DOkPG)))))))) (g$parse-library-name$14366$1DOkPG (case-lambda ((g$spec$14553$1DOkPG) (letrec* ((g$subversion?$14554$1DOkPG (case-lambda ((g$x$14766$1DOkPG) (if (integer? g$x$14766$1DOkPG) (if (exact? g$x$14766$1DOkPG) (begin '#f (>= g$x$14766$1DOkPG '0)) '#f) '#f)))) (g$subversion-pred$14555$1DOkPG (case-lambda ((g$x*$14671$1DOkPG) ((case-lambda ((g$t$14672$1DOkPG) ((case-lambda ((g$ls/false$14673$1DOkPG) (if (if g$ls/false$14673$1DOkPG (begin '#f (apply (case-lambda ((g$n$14674$1DOkPG) (g$subversion?$14554$1DOkPG (g$syntax->datum$9504$1DOkPG g$n$14674$1DOkPG)))) g$ls/false$14673$1DOkPG)) '#f) (apply (case-lambda ((g$n$14675$1DOkPG) (case-lambda ((g$x$14676$1DOkPG) (= g$x$14676$1DOkPG (g$syntax->datum$9504$1DOkPG g$n$14675$1DOkPG)))))) g$ls/false$14673$1DOkPG) ((case-lambda ((g$t$14677$1DOkPG) ((case-lambda ((g$ls/false$14678$1DOkPG) (if (if g$ls/false$14678$1DOkPG (begin '#f (apply (case-lambda ((g$p?$14679$1DOkPG g$sub*$14680$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$p?$14679$1DOkPG) 'and))) g$ls/false$14678$1DOkPG)) '#f) (apply (case-lambda ((g$p?$14681$1DOkPG g$sub*$14682$1DOkPG) ((case-lambda ((g$p*$14683$1DOkPG) (case-lambda ((g$x$14684$1DOkPG) (g$for-all$7866$1DOkPG (case-lambda ((g$p$14685$1DOkPG) (g$p$14685$1DOkPG g$x$14684$1DOkPG))) g$p*$14683$1DOkPG))))) (map g$subversion-pred$14555$1DOkPG g$sub*$14682$1DOkPG)))) g$ls/false$14678$1DOkPG) ((case-lambda ((g$t$14686$1DOkPG) ((case-lambda ((g$ls/false$14687$1DOkPG) (if (if g$ls/false$14687$1DOkPG (begin '#f (apply (case-lambda ((g$p?$14688$1DOkPG g$sub*$14689$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$p?$14688$1DOkPG) 'or))) g$ls/false$14687$1DOkPG)) '#f) (apply (case-lambda ((g$p?$14690$1DOkPG g$sub*$14691$1DOkPG) ((case-lambda ((g$p*$14692$1DOkPG) (case-lambda ((g$x$14693$1DOkPG) (g$exists$7867$1DOkPG (case-lambda ((g$p$14694$1DOkPG) (g$p$14694$1DOkPG g$x$14693$1DOkPG))) g$p*$14692$1DOkPG))))) (map g$subversion-pred$14555$1DOkPG g$sub*$14691$1DOkPG)))) g$ls/false$14687$1DOkPG) ((case-lambda ((g$t$14695$1DOkPG) ((case-lambda ((g$ls/false$14696$1DOkPG) (if (if g$ls/false$14696$1DOkPG (begin '#f (apply (case-lambda ((g$p?$14697$1DOkPG g$sub$14698$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$p?$14697$1DOkPG) 'not))) g$ls/false$14696$1DOkPG)) '#f) (apply (case-lambda ((g$p?$14699$1DOkPG g$sub$14700$1DOkPG) ((case-lambda ((g$p$14701$1DOkPG) (case-lambda ((g$x$14702$1DOkPG) (not (g$p$14701$1DOkPG g$x$14702$1DOkPG)))))) (g$subversion-pred$14555$1DOkPG g$sub$14700$1DOkPG)))) g$ls/false$14696$1DOkPG) ((case-lambda ((g$t$14703$1DOkPG) ((case-lambda ((g$ls/false$14704$1DOkPG) (if (if g$ls/false$14704$1DOkPG (begin '#f (apply (case-lambda ((g$p?$14705$1DOkPG g$n$14706$1DOkPG) (if (eq? (g$syntax->datum$9504$1DOkPG g$p?$14705$1DOkPG) '<=) (begin '#f (g$subversion?$14554$1DOkPG (g$syntax->datum$9504$1DOkPG g$n$14706$1DOkPG))) '#f))) g$ls/false$14704$1DOkPG)) '#f) (apply (case-lambda ((g$p?$14707$1DOkPG g$n$14708$1DOkPG) (case-lambda ((g$x$14709$1DOkPG) (<= g$x$14709$1DOkPG (g$syntax->datum$9504$1DOkPG g$n$14708$1DOkPG)))))) g$ls/false$14704$1DOkPG) ((case-lambda ((g$t$14710$1DOkPG) ((case-lambda ((g$ls/false$14711$1DOkPG) (if (if g$ls/false$14711$1DOkPG (begin '#f (apply (case-lambda ((g$p?$14712$1DOkPG g$n$14713$1DOkPG) (if (eq? (g$syntax->datum$9504$1DOkPG g$p?$14712$1DOkPG) '>=) (begin '#f (g$subversion?$14554$1DOkPG g$n$14713$1DOkPG)) '#f))) g$ls/false$14711$1DOkPG)) '#f) (apply (case-lambda ((g$p?$14714$1DOkPG g$n$14715$1DOkPG) (case-lambda ((g$x$14716$1DOkPG) (>= g$x$14716$1DOkPG (g$syntax->datum$9504$1DOkPG g$n$14715$1DOkPG)))))) g$ls/false$14711$1DOkPG) ((case-lambda ((g$t$14717$1DOkPG) ((case-lambda ((g$ls/false$14718$1DOkPG) (if (if g$ls/false$14718$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14718$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG 'import '"invalid sub-version spec" g$spec$14553$1DOkPG g$x*$14671$1DOkPG))) g$ls/false$14718$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14717$1DOkPG)))) ((case-lambda ((g$x$14719$1DOkPG) '())) g$t$14717$1DOkPG)))) g$t$14710$1DOkPG)))) ((case-lambda ((g$x$14720$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14720$1DOkPG) (begin '#f ((case-lambda ((g$q$14721$1DOkPG) (if g$q$14721$1DOkPG (begin '#f ((case-lambda ((g$r$14722$1DOkPG) (if g$r$14722$1DOkPG (begin '#f (append g$q$14721$1DOkPG g$r$14722$1DOkPG)) '#f))) ((case-lambda ((g$x$14723$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14723$1DOkPG) (begin '#f ((case-lambda ((g$q$14724$1DOkPG) (if g$q$14724$1DOkPG (begin '#f ((case-lambda ((g$r$14725$1DOkPG) (if g$r$14725$1DOkPG (begin '#f (append g$q$14724$1DOkPG g$r$14725$1DOkPG)) '#f))) ((case-lambda ((g$x$14726$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14726$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14723$1DOkPG)))) '#f))) ((case-lambda ((g$x$14727$1DOkPG) (list g$x$14727$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14723$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14720$1DOkPG)))) '#f))) ((case-lambda ((g$x$14728$1DOkPG) (list g$x$14728$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14720$1DOkPG)))) '#f))) g$t$14710$1DOkPG)))) g$t$14703$1DOkPG)))) ((case-lambda ((g$x$14729$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14729$1DOkPG) (begin '#f ((case-lambda ((g$q$14730$1DOkPG) (if g$q$14730$1DOkPG (begin '#f ((case-lambda ((g$r$14731$1DOkPG) (if g$r$14731$1DOkPG (begin '#f (append g$q$14730$1DOkPG g$r$14731$1DOkPG)) '#f))) ((case-lambda ((g$x$14732$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14732$1DOkPG) (begin '#f ((case-lambda ((g$q$14733$1DOkPG) (if g$q$14733$1DOkPG (begin '#f ((case-lambda ((g$r$14734$1DOkPG) (if g$r$14734$1DOkPG (begin '#f (append g$q$14733$1DOkPG g$r$14734$1DOkPG)) '#f))) ((case-lambda ((g$x$14735$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14735$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14732$1DOkPG)))) '#f))) ((case-lambda ((g$x$14736$1DOkPG) (list g$x$14736$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14732$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14729$1DOkPG)))) '#f))) ((case-lambda ((g$x$14737$1DOkPG) (list g$x$14737$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14729$1DOkPG)))) '#f))) g$t$14703$1DOkPG)))) g$t$14695$1DOkPG)))) ((case-lambda ((g$x$14738$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14738$1DOkPG) (begin '#f ((case-lambda ((g$q$14739$1DOkPG) (if g$q$14739$1DOkPG (begin '#f ((case-lambda ((g$r$14740$1DOkPG) (if g$r$14740$1DOkPG (begin '#f (append g$q$14739$1DOkPG g$r$14740$1DOkPG)) '#f))) ((case-lambda ((g$x$14741$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14741$1DOkPG) (begin '#f ((case-lambda ((g$q$14742$1DOkPG) (if g$q$14742$1DOkPG (begin '#f ((case-lambda ((g$r$14743$1DOkPG) (if g$r$14743$1DOkPG (begin '#f (append g$q$14742$1DOkPG g$r$14743$1DOkPG)) '#f))) ((case-lambda ((g$x$14744$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14744$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14741$1DOkPG)))) '#f))) ((case-lambda ((g$x$14745$1DOkPG) (list g$x$14745$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14741$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14738$1DOkPG)))) '#f))) ((case-lambda ((g$x$14746$1DOkPG) (list g$x$14746$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14738$1DOkPG)))) '#f))) g$t$14695$1DOkPG)))) g$t$14686$1DOkPG)))) ((case-lambda ((g$x$14747$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14747$1DOkPG) (begin '#f ((case-lambda ((g$q$14748$1DOkPG) (if g$q$14748$1DOkPG (begin '#f ((case-lambda ((g$r$14749$1DOkPG) (if g$r$14749$1DOkPG (begin '#f (append g$q$14748$1DOkPG g$r$14749$1DOkPG)) '#f))) ((letrec ((g$f$14750$1DOkPG (case-lambda ((g$x$14751$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14751$1DOkPG) ((case-lambda ((g$cars/f$14752$1DOkPG) (if g$cars/f$14752$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14753$1DOkPG) (if g$cdrs/f$14753$1DOkPG (begin '#f (map cons g$cars/f$14752$1DOkPG g$cdrs/f$14753$1DOkPG)) '#f))) (g$f$14750$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14751$1DOkPG)))) '#f))) ((case-lambda ((g$x$14754$1DOkPG) (list g$x$14754$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14751$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14751$1DOkPG) (list (begin 'sub* '())) '#f)))))) g$f$14750$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14747$1DOkPG)))) '#f))) ((case-lambda ((g$x$14755$1DOkPG) (list g$x$14755$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14747$1DOkPG)))) '#f))) g$t$14686$1DOkPG)))) g$t$14677$1DOkPG)))) ((case-lambda ((g$x$14756$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14756$1DOkPG) (begin '#f ((case-lambda ((g$q$14757$1DOkPG) (if g$q$14757$1DOkPG (begin '#f ((case-lambda ((g$r$14758$1DOkPG) (if g$r$14758$1DOkPG (begin '#f (append g$q$14757$1DOkPG g$r$14758$1DOkPG)) '#f))) ((letrec ((g$f$14759$1DOkPG (case-lambda ((g$x$14760$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14760$1DOkPG) ((case-lambda ((g$cars/f$14761$1DOkPG) (if g$cars/f$14761$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14762$1DOkPG) (if g$cdrs/f$14762$1DOkPG (begin '#f (map cons g$cars/f$14761$1DOkPG g$cdrs/f$14762$1DOkPG)) '#f))) (g$f$14759$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14760$1DOkPG)))) '#f))) ((case-lambda ((g$x$14763$1DOkPG) (list g$x$14763$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14760$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14760$1DOkPG) (list (begin 'sub* '())) '#f)))))) g$f$14759$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14756$1DOkPG)))) '#f))) ((case-lambda ((g$x$14764$1DOkPG) (list g$x$14764$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14756$1DOkPG)))) '#f))) g$t$14677$1DOkPG)))) g$t$14672$1DOkPG)))) ((case-lambda ((g$x$14765$1DOkPG) (list g$x$14765$1DOkPG))) g$t$14672$1DOkPG)))) g$x*$14671$1DOkPG)))) (g$version-pred$14556$1DOkPG (case-lambda ((g$x*$14596$1DOkPG) ((case-lambda ((g$t$14597$1DOkPG) ((case-lambda ((g$ls/false$14598$1DOkPG) (if (if g$ls/false$14598$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14598$1DOkPG)) '#f) (apply (case-lambda (() (case-lambda ((g$x$14599$1DOkPG) '#t)))) g$ls/false$14598$1DOkPG) ((case-lambda ((g$t$14600$1DOkPG) ((case-lambda ((g$ls/false$14601$1DOkPG) (if (if g$ls/false$14601$1DOkPG (begin '#f (apply (case-lambda ((g$c$14602$1DOkPG g$ver*$14603$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$c$14602$1DOkPG) 'and))) g$ls/false$14601$1DOkPG)) '#f) (apply (case-lambda ((g$c$14604$1DOkPG g$ver*$14605$1DOkPG) ((case-lambda ((g$p*$14606$1DOkPG) (case-lambda ((g$x$14607$1DOkPG) (g$for-all$7866$1DOkPG (case-lambda ((g$p$14608$1DOkPG) (g$p$14608$1DOkPG g$x$14607$1DOkPG))) g$p*$14606$1DOkPG))))) (map g$version-pred$14556$1DOkPG g$ver*$14605$1DOkPG)))) g$ls/false$14601$1DOkPG) ((case-lambda ((g$t$14609$1DOkPG) ((case-lambda ((g$ls/false$14610$1DOkPG) (if (if g$ls/false$14610$1DOkPG (begin '#f (apply (case-lambda ((g$c$14611$1DOkPG g$ver*$14612$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$c$14611$1DOkPG) 'or))) g$ls/false$14610$1DOkPG)) '#f) (apply (case-lambda ((g$c$14613$1DOkPG g$ver*$14614$1DOkPG) ((case-lambda ((g$p*$14615$1DOkPG) (case-lambda ((g$x$14616$1DOkPG) (g$exists$7867$1DOkPG (case-lambda ((g$p$14617$1DOkPG) (g$p$14617$1DOkPG g$x$14616$1DOkPG))) g$p*$14615$1DOkPG))))) (map g$version-pred$14556$1DOkPG g$ver*$14614$1DOkPG)))) g$ls/false$14610$1DOkPG) ((case-lambda ((g$t$14618$1DOkPG) ((case-lambda ((g$ls/false$14619$1DOkPG) (if (if g$ls/false$14619$1DOkPG (begin '#f (apply (case-lambda ((g$c$14620$1DOkPG g$ver$14621$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$c$14620$1DOkPG) 'not))) g$ls/false$14619$1DOkPG)) '#f) (apply (case-lambda ((g$c$14622$1DOkPG g$ver$14623$1DOkPG) ((case-lambda ((g$p$14624$1DOkPG) (case-lambda ((g$x$14625$1DOkPG) (not (g$p$14624$1DOkPG g$x$14625$1DOkPG)))))) (g$version-pred$14556$1DOkPG g$ver$14623$1DOkPG)))) g$ls/false$14619$1DOkPG) ((case-lambda ((g$t$14626$1DOkPG) ((case-lambda ((g$ls/false$14627$1DOkPG) (if (if g$ls/false$14627$1DOkPG (begin '#f (apply (case-lambda ((g$sub*$14628$1DOkPG) '#t)) g$ls/false$14627$1DOkPG)) '#f) (apply (case-lambda ((g$sub*$14629$1DOkPG) ((case-lambda ((g$p*$14630$1DOkPG) (case-lambda ((g$x$14631$1DOkPG) ((letrec ((g$f$14632$1DOkPG (case-lambda ((g$p*$14633$1DOkPG g$x$14634$1DOkPG) (if (null? g$p*$14633$1DOkPG) '#t (if (null? g$x$14634$1DOkPG) '#f (if ((car g$p*$14633$1DOkPG) (car g$x$14634$1DOkPG)) (begin '#f (g$f$14632$1DOkPG (cdr g$p*$14633$1DOkPG) (cdr g$x*$14596$1DOkPG))) '#f))))))) g$f$14632$1DOkPG) g$p*$14630$1DOkPG g$x$14631$1DOkPG))))) (map g$subversion-pred$14555$1DOkPG g$sub*$14629$1DOkPG)))) g$ls/false$14627$1DOkPG) ((case-lambda ((g$t$14635$1DOkPG) ((case-lambda ((g$ls/false$14636$1DOkPG) (if (if g$ls/false$14636$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14636$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG 'import '"invalid version spec" g$spec$14553$1DOkPG g$x*$14596$1DOkPG))) g$ls/false$14636$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14635$1DOkPG)))) ((case-lambda ((g$x$14637$1DOkPG) '())) g$t$14635$1DOkPG)))) g$t$14626$1DOkPG)))) ((letrec ((g$f$14638$1DOkPG (case-lambda ((g$x$14639$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14639$1DOkPG) ((case-lambda ((g$cars/f$14640$1DOkPG) (if g$cars/f$14640$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14641$1DOkPG) (if g$cdrs/f$14641$1DOkPG (begin '#f (map cons g$cars/f$14640$1DOkPG g$cdrs/f$14641$1DOkPG)) '#f))) (g$f$14638$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14639$1DOkPG)))) '#f))) ((case-lambda ((g$x$14642$1DOkPG) (list g$x$14642$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14639$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14639$1DOkPG) (list (begin 'sub* '())) '#f)))))) g$f$14638$1DOkPG) g$t$14626$1DOkPG)))) g$t$14618$1DOkPG)))) ((case-lambda ((g$x$14643$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14643$1DOkPG) (begin '#f ((case-lambda ((g$q$14644$1DOkPG) (if g$q$14644$1DOkPG (begin '#f ((case-lambda ((g$r$14645$1DOkPG) (if g$r$14645$1DOkPG (begin '#f (append g$q$14644$1DOkPG g$r$14645$1DOkPG)) '#f))) ((case-lambda ((g$x$14646$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14646$1DOkPG) (begin '#f ((case-lambda ((g$q$14647$1DOkPG) (if g$q$14647$1DOkPG (begin '#f ((case-lambda ((g$r$14648$1DOkPG) (if g$r$14648$1DOkPG (begin '#f (append g$q$14647$1DOkPG g$r$14648$1DOkPG)) '#f))) ((case-lambda ((g$x$14649$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14649$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14646$1DOkPG)))) '#f))) ((case-lambda ((g$x$14650$1DOkPG) (list g$x$14650$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14646$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14643$1DOkPG)))) '#f))) ((case-lambda ((g$x$14651$1DOkPG) (list g$x$14651$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14643$1DOkPG)))) '#f))) g$t$14618$1DOkPG)))) g$t$14609$1DOkPG)))) ((case-lambda ((g$x$14652$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14652$1DOkPG) (begin '#f ((case-lambda ((g$q$14653$1DOkPG) (if g$q$14653$1DOkPG (begin '#f ((case-lambda ((g$r$14654$1DOkPG) (if g$r$14654$1DOkPG (begin '#f (append g$q$14653$1DOkPG g$r$14654$1DOkPG)) '#f))) ((letrec ((g$f$14655$1DOkPG (case-lambda ((g$x$14656$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14656$1DOkPG) ((case-lambda ((g$cars/f$14657$1DOkPG) (if g$cars/f$14657$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14658$1DOkPG) (if g$cdrs/f$14658$1DOkPG (begin '#f (map cons g$cars/f$14657$1DOkPG g$cdrs/f$14658$1DOkPG)) '#f))) (g$f$14655$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14656$1DOkPG)))) '#f))) ((case-lambda ((g$x$14659$1DOkPG) (list g$x$14659$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14656$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14656$1DOkPG) (list (begin 'ver* '())) '#f)))))) g$f$14655$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14652$1DOkPG)))) '#f))) ((case-lambda ((g$x$14660$1DOkPG) (list g$x$14660$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14652$1DOkPG)))) '#f))) g$t$14609$1DOkPG)))) g$t$14600$1DOkPG)))) ((case-lambda ((g$x$14661$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14661$1DOkPG) (begin '#f ((case-lambda ((g$q$14662$1DOkPG) (if g$q$14662$1DOkPG (begin '#f ((case-lambda ((g$r$14663$1DOkPG) (if g$r$14663$1DOkPG (begin '#f (append g$q$14662$1DOkPG g$r$14663$1DOkPG)) '#f))) ((letrec ((g$f$14664$1DOkPG (case-lambda ((g$x$14665$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14665$1DOkPG) ((case-lambda ((g$cars/f$14666$1DOkPG) (if g$cars/f$14666$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14667$1DOkPG) (if g$cdrs/f$14667$1DOkPG (begin '#f (map cons g$cars/f$14666$1DOkPG g$cdrs/f$14667$1DOkPG)) '#f))) (g$f$14664$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14665$1DOkPG)))) '#f))) ((case-lambda ((g$x$14668$1DOkPG) (list g$x$14668$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14665$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14665$1DOkPG) (list (begin 'ver* '())) '#f)))))) g$f$14664$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14661$1DOkPG)))) '#f))) ((case-lambda ((g$x$14669$1DOkPG) (list g$x$14669$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14661$1DOkPG)))) '#f))) g$t$14600$1DOkPG)))) g$t$14597$1DOkPG)))) ((case-lambda ((g$x$14670$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14670$1DOkPG) '()) (begin '#f '()) '#f))) g$t$14597$1DOkPG)))) g$x*$14596$1DOkPG))))) ((letrec ((g$f$14557$1DOkPG (case-lambda ((g$x$14558$1DOkPG) ((case-lambda ((g$t$14559$1DOkPG) ((case-lambda ((g$ls/false$14560$1DOkPG) (if (if g$ls/false$14560$1DOkPG (begin '#f (apply (case-lambda ((g$version-spec*$14561$1DOkPG) '#t)) g$ls/false$14560$1DOkPG)) '#f) (apply (case-lambda ((g$version-spec*$14562$1DOkPG) (values '() (g$version-pred$14556$1DOkPG g$version-spec*$14562$1DOkPG)))) g$ls/false$14560$1DOkPG) ((case-lambda ((g$t$14563$1DOkPG) ((case-lambda ((g$ls/false$14564$1DOkPG) (if (if g$ls/false$14564$1DOkPG (begin '#f (apply (case-lambda ((g$x$14565$1DOkPG g$x*$14566$1DOkPG) (g$id?$9181$1DOkPG g$x$14565$1DOkPG))) g$ls/false$14564$1DOkPG)) '#f) (apply (case-lambda ((g$x$14567$1DOkPG g$x*$14568$1DOkPG) (call-with-values (case-lambda (() (g$f$14557$1DOkPG g$x*$14568$1DOkPG))) (case-lambda ((g$name$14571$1DOkPG g$pred$14572$1DOkPG) ((case-lambda ((g$pred$14573$1DOkPG g$name$14574$1DOkPG) (values (cons (g$id->sym$9182$1DOkPG g$x$14567$1DOkPG) g$name$14574$1DOkPG) g$pred$14573$1DOkPG))) g$pred$14572$1DOkPG g$name$14571$1DOkPG)))))) g$ls/false$14564$1DOkPG) ((case-lambda ((g$t$14575$1DOkPG) ((case-lambda ((g$ls/false$14576$1DOkPG) (if (if g$ls/false$14576$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14576$1DOkPG)) '#f) (apply (case-lambda (() (values '() (case-lambda ((g$x$14577$1DOkPG) '#t))))) g$ls/false$14576$1DOkPG) ((case-lambda ((g$t$14578$1DOkPG) ((case-lambda ((g$ls/false$14579$1DOkPG) (if (if g$ls/false$14579$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14579$1DOkPG)) '#f) (apply (case-lambda (() (g$syntax-violation$9501$1DOkPG '#f '"invalid import spec" g$spec$14553$1DOkPG))) g$ls/false$14579$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14578$1DOkPG)))) ((case-lambda ((g$x$14580$1DOkPG) '())) g$t$14578$1DOkPG)))) g$t$14575$1DOkPG)))) ((case-lambda ((g$x$14581$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14581$1DOkPG) '()) (begin '#f '()) '#f))) g$t$14575$1DOkPG)))) g$t$14563$1DOkPG)))) ((case-lambda ((g$x$14582$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14582$1DOkPG) (begin '#f ((case-lambda ((g$q$14583$1DOkPG) (if g$q$14583$1DOkPG (begin '#f ((case-lambda ((g$r$14584$1DOkPG) (if g$r$14584$1DOkPG (begin '#f (append g$q$14583$1DOkPG g$r$14584$1DOkPG)) '#f))) ((case-lambda ((g$x$14585$1DOkPG) (list g$x$14585$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$14582$1DOkPG)))) '#f))) ((case-lambda ((g$x$14586$1DOkPG) (list g$x$14586$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14582$1DOkPG)))) '#f))) g$t$14563$1DOkPG)))) g$t$14559$1DOkPG)))) ((case-lambda ((g$x$14587$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14587$1DOkPG) (begin '#f ((case-lambda ((g$q$14588$1DOkPG) (if g$q$14588$1DOkPG (begin '#f ((case-lambda ((g$r$14589$1DOkPG) (if g$r$14589$1DOkPG (begin '#f (append g$q$14588$1DOkPG g$r$14589$1DOkPG)) '#f))) ((case-lambda ((g$x$14590$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14590$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14587$1DOkPG)))) '#f))) ((letrec ((g$f$14591$1DOkPG (case-lambda ((g$x$14592$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14592$1DOkPG) ((case-lambda ((g$cars/f$14593$1DOkPG) (if g$cars/f$14593$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14594$1DOkPG) (if g$cdrs/f$14594$1DOkPG (begin '#f (map cons g$cars/f$14593$1DOkPG g$cdrs/f$14594$1DOkPG)) '#f))) (g$f$14591$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14592$1DOkPG)))) '#f))) ((case-lambda ((g$x$14595$1DOkPG) (list g$x$14595$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14592$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14592$1DOkPG) (list (begin 'version-spec* '())) '#f)))))) g$f$14591$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$14587$1DOkPG)))) '#f))) g$t$14559$1DOkPG)))) g$x$14558$1DOkPG))))) g$f$14557$1DOkPG) g$spec$14553$1DOkPG))))) (g$import-library$14367$1DOkPG (case-lambda ((g$spec*$14545$1DOkPG) (call-with-values (case-lambda (() (g$parse-library-name$14366$1DOkPG g$spec*$14545$1DOkPG))) (case-lambda ((g$name$14548$1DOkPG g$pred$14549$1DOkPG) ((case-lambda ((g$pred$14550$1DOkPG g$name$14551$1DOkPG) (begin (if (null? g$name$14551$1DOkPG) (g$syntax-violation$9501$1DOkPG 'import '"empty library name" g$spec*$14545$1DOkPG) (void)) ((case-lambda ((g$lib$14552$1DOkPG) (begin (if g$lib$14552$1DOkPG (void) (g$syntax-violation$9501$1DOkPG 'import '"cannot find library with required name" g$name$14551$1DOkPG)) (if (g$pred$14550$1DOkPG (g$library-version$8951$1DOkPG g$lib$14552$1DOkPG)) (void) (g$syntax-violation$9501$1DOkPG 'import '"library does not satisfy version specification" g$spec*$14545$1DOkPG g$lib$14552$1DOkPG)) ((g$imp-collector$9464$1DOkPG) g$lib$14552$1DOkPG) (g$library-subst$8955$1DOkPG g$lib$14552$1DOkPG)))) (g$find-library-by-name$8991$1DOkPG g$name$14551$1DOkPG))))) g$pred$14549$1DOkPG g$name$14548$1DOkPG))))))) (g$get-import$14368$1DOkPG (case-lambda ((g$spec$14381$1DOkPG) ((case-lambda ((g$t$14382$1DOkPG) ((case-lambda ((g$ls/false$14383$1DOkPG) (if (if g$ls/false$14383$1DOkPG (begin '#f (apply (case-lambda ((g$x$14384$1DOkPG g$x*$14385$1DOkPG) (not (memq (g$syntax->datum$9504$1DOkPG g$x$14384$1DOkPG) '(for rename except only prefix library))))) g$ls/false$14383$1DOkPG)) '#f) (apply (case-lambda ((g$x$14386$1DOkPG g$x*$14387$1DOkPG) (g$import-library$14367$1DOkPG (cons g$x$14386$1DOkPG g$x*$14387$1DOkPG)))) g$ls/false$14383$1DOkPG) ((case-lambda ((g$t$14388$1DOkPG) ((case-lambda ((g$ls/false$14389$1DOkPG) (if (if g$ls/false$14389$1DOkPG (begin '#f (apply (case-lambda ((g$rename$14390$1DOkPG g$isp$14391$1DOkPG g$old*$14392$1DOkPG g$new*$14393$1DOkPG) (if (eq? (g$syntax->datum$9504$1DOkPG g$rename$14390$1DOkPG) 'rename) (if (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$old*$14392$1DOkPG) (begin '#f (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$new*$14393$1DOkPG)) '#f) '#f))) g$ls/false$14389$1DOkPG)) '#f) (apply (case-lambda ((g$rename$14394$1DOkPG g$isp$14395$1DOkPG g$old*$14396$1DOkPG g$new*$14397$1DOkPG) ((case-lambda ((g$subst$14398$1DOkPG g$old*$14399$1DOkPG g$new*$14400$1DOkPG) ((case-lambda ((g$old-label*$14401$1DOkPG) ((case-lambda ((g$subst$14402$1DOkPG) (g$merge-substs$14361$1DOkPG (map cons g$new*$14400$1DOkPG g$old-label*$14401$1DOkPG) g$subst$14402$1DOkPG))) (g$rem*$14364$1DOkPG g$old*$14399$1DOkPG g$subst$14398$1DOkPG)))) (g$find*$14363$1DOkPG g$old*$14399$1DOkPG g$subst$14398$1DOkPG)))) (g$get-import$14368$1DOkPG g$isp$14395$1DOkPG) (map g$id->sym$9182$1DOkPG g$old*$14396$1DOkPG) (map g$id->sym$9182$1DOkPG g$new*$14397$1DOkPG)))) g$ls/false$14389$1DOkPG) ((case-lambda ((g$t$14403$1DOkPG) ((case-lambda ((g$ls/false$14404$1DOkPG) (if (if g$ls/false$14404$1DOkPG (begin '#f (apply (case-lambda ((g$except$14405$1DOkPG g$isp$14406$1DOkPG g$sym*$14407$1DOkPG) (if (eq? (g$syntax->datum$9504$1DOkPG g$except$14405$1DOkPG) 'except) (begin '#f (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$sym*$14407$1DOkPG)) '#f))) g$ls/false$14404$1DOkPG)) '#f) (apply (case-lambda ((g$except$14408$1DOkPG g$isp$14409$1DOkPG g$sym*$14410$1DOkPG) ((case-lambda ((g$subst$14411$1DOkPG) (g$rem*$14364$1DOkPG (map g$id->sym$9182$1DOkPG g$sym*$14410$1DOkPG) g$subst$14411$1DOkPG))) (g$get-import$14368$1DOkPG g$isp$14409$1DOkPG)))) g$ls/false$14404$1DOkPG) ((case-lambda ((g$t$14412$1DOkPG) ((case-lambda ((g$ls/false$14413$1DOkPG) (if (if g$ls/false$14413$1DOkPG (begin '#f (apply (case-lambda ((g$only$14414$1DOkPG g$isp$14415$1DOkPG g$sym*$14416$1DOkPG) (if (eq? (g$syntax->datum$9504$1DOkPG g$only$14414$1DOkPG) 'only) (begin '#f (g$for-all$7866$1DOkPG g$id?$9181$1DOkPG g$sym*$14416$1DOkPG)) '#f))) g$ls/false$14413$1DOkPG)) '#f) (apply (case-lambda ((g$only$14417$1DOkPG g$isp$14418$1DOkPG g$sym*$14419$1DOkPG) ((case-lambda ((g$subst$14420$1DOkPG g$sym*$14421$1DOkPG) ((case-lambda ((g$sym*$14422$1DOkPG) ((case-lambda ((g$lab*$14423$1DOkPG) (map cons g$sym*$14422$1DOkPG g$lab*$14423$1DOkPG))) (g$find*$14363$1DOkPG g$sym*$14422$1DOkPG g$subst$14420$1DOkPG)))) (g$remove-dups$14365$1DOkPG g$sym*$14421$1DOkPG)))) (g$get-import$14368$1DOkPG g$isp$14418$1DOkPG) (map g$id->sym$9182$1DOkPG g$sym*$14419$1DOkPG)))) g$ls/false$14413$1DOkPG) ((case-lambda ((g$t$14424$1DOkPG) ((case-lambda ((g$ls/false$14425$1DOkPG) (if (if g$ls/false$14425$1DOkPG (begin '#f (apply (case-lambda ((g$prefix$14426$1DOkPG g$isp$14427$1DOkPG g$p$14428$1DOkPG) (if (eq? (g$syntax->datum$9504$1DOkPG g$prefix$14426$1DOkPG) 'prefix) (begin '#f (g$id?$9181$1DOkPG g$p$14428$1DOkPG)) '#f))) g$ls/false$14425$1DOkPG)) '#f) (apply (case-lambda ((g$prefix$14429$1DOkPG g$isp$14430$1DOkPG g$p$14431$1DOkPG) ((case-lambda ((g$subst$14432$1DOkPG g$prefix$14433$1DOkPG) (map (case-lambda ((g$x$14434$1DOkPG) (cons (string->symbol (string-append g$prefix$14433$1DOkPG (symbol->string (car g$x$14434$1DOkPG)))) (cdr g$x$14434$1DOkPG)))) g$subst$14432$1DOkPG))) (g$get-import$14368$1DOkPG g$isp$14430$1DOkPG) (symbol->string (g$id->sym$9182$1DOkPG g$p$14431$1DOkPG))))) g$ls/false$14425$1DOkPG) ((case-lambda ((g$t$14435$1DOkPG) ((case-lambda ((g$ls/false$14436$1DOkPG) (if (if g$ls/false$14436$1DOkPG (begin '#f (apply (case-lambda ((g$library$14437$1DOkPG g$spec*$14438$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$library$14437$1DOkPG) 'library))) g$ls/false$14436$1DOkPG)) '#f) (apply (case-lambda ((g$library$14439$1DOkPG g$spec*$14440$1DOkPG) (g$import-library$14367$1DOkPG g$spec*$14440$1DOkPG))) g$ls/false$14436$1DOkPG) ((case-lambda ((g$t$14441$1DOkPG) ((case-lambda ((g$ls/false$14442$1DOkPG) (if (if g$ls/false$14442$1DOkPG (begin '#f (apply (case-lambda ((g$for$14443$1DOkPG g$isp$14444$1DOkPG g$rest$14445$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$for$14443$1DOkPG) 'for))) g$ls/false$14442$1DOkPG)) '#f) (apply (case-lambda ((g$for$14446$1DOkPG g$isp$14447$1DOkPG g$rest$14448$1DOkPG) (g$get-import$14368$1DOkPG g$isp$14447$1DOkPG))) g$ls/false$14442$1DOkPG) ((case-lambda ((g$t$14449$1DOkPG) ((case-lambda ((g$ls/false$14450$1DOkPG) (if (if g$ls/false$14450$1DOkPG (begin '#f (apply (case-lambda ((g$spec$14451$1DOkPG) '#t)) g$ls/false$14450$1DOkPG)) '#f) (apply (case-lambda ((g$spec$14452$1DOkPG) (g$syntax-violation$9501$1DOkPG 'import '"invalid import spec" g$spec$14452$1DOkPG))) g$ls/false$14450$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14449$1DOkPG)))) ((case-lambda ((g$x$14453$1DOkPG) (list g$x$14453$1DOkPG))) g$t$14449$1DOkPG)))) g$t$14441$1DOkPG)))) ((case-lambda ((g$x$14454$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14454$1DOkPG) (begin '#f ((case-lambda ((g$q$14455$1DOkPG) (if g$q$14455$1DOkPG (begin '#f ((case-lambda ((g$r$14456$1DOkPG) (if g$r$14456$1DOkPG (begin '#f (append g$q$14455$1DOkPG g$r$14456$1DOkPG)) '#f))) ((case-lambda ((g$x$14457$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14457$1DOkPG) (begin '#f ((case-lambda ((g$q$14458$1DOkPG) (if g$q$14458$1DOkPG (begin '#f ((case-lambda ((g$r$14459$1DOkPG) (if g$r$14459$1DOkPG (begin '#f (append g$q$14458$1DOkPG g$r$14459$1DOkPG)) '#f))) ((case-lambda ((g$x$14460$1DOkPG) (list g$x$14460$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$14457$1DOkPG)))) '#f))) ((case-lambda ((g$x$14461$1DOkPG) (list g$x$14461$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14457$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14454$1DOkPG)))) '#f))) ((case-lambda ((g$x$14462$1DOkPG) (list g$x$14462$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14454$1DOkPG)))) '#f))) g$t$14441$1DOkPG)))) g$t$14435$1DOkPG)))) ((case-lambda ((g$x$14463$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14463$1DOkPG) (begin '#f ((case-lambda ((g$q$14464$1DOkPG) (if g$q$14464$1DOkPG (begin '#f ((case-lambda ((g$r$14465$1DOkPG) (if g$r$14465$1DOkPG (begin '#f (append g$q$14464$1DOkPG g$r$14465$1DOkPG)) '#f))) ((case-lambda ((g$x$14466$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14466$1DOkPG) (begin '#f ((case-lambda ((g$q$14467$1DOkPG) (if g$q$14467$1DOkPG (begin '#f ((case-lambda ((g$r$14468$1DOkPG) (if g$r$14468$1DOkPG (begin '#f (append g$q$14467$1DOkPG g$r$14468$1DOkPG)) '#f))) ((case-lambda ((g$x$14469$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14469$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14466$1DOkPG)))) '#f))) ((letrec ((g$f$14470$1DOkPG (case-lambda ((g$x$14471$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14471$1DOkPG) ((case-lambda ((g$cars/f$14472$1DOkPG) (if g$cars/f$14472$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14473$1DOkPG) (if g$cdrs/f$14473$1DOkPG (begin '#f (map cons g$cars/f$14472$1DOkPG g$cdrs/f$14473$1DOkPG)) '#f))) (g$f$14470$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14471$1DOkPG)))) '#f))) ((case-lambda ((g$x$14474$1DOkPG) (list g$x$14474$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14471$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14471$1DOkPG) (list (begin 'spec* '())) '#f)))))) g$f$14470$1DOkPG) (g$syntax-car$9178$1DOkPG g$x$14466$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14463$1DOkPG)))) '#f))) ((case-lambda ((g$x$14475$1DOkPG) (list g$x$14475$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14463$1DOkPG)))) '#f))) g$t$14435$1DOkPG)))) g$t$14424$1DOkPG)))) ((case-lambda ((g$x$14476$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14476$1DOkPG) (begin '#f ((case-lambda ((g$q$14477$1DOkPG) (if g$q$14477$1DOkPG (begin '#f ((case-lambda ((g$r$14478$1DOkPG) (if g$r$14478$1DOkPG (begin '#f (append g$q$14477$1DOkPG g$r$14478$1DOkPG)) '#f))) ((case-lambda ((g$x$14479$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14479$1DOkPG) (begin '#f ((case-lambda ((g$q$14480$1DOkPG) (if g$q$14480$1DOkPG (begin '#f ((case-lambda ((g$r$14481$1DOkPG) (if g$r$14481$1DOkPG (begin '#f (append g$q$14480$1DOkPG g$r$14481$1DOkPG)) '#f))) ((case-lambda ((g$x$14482$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14482$1DOkPG) (begin '#f ((case-lambda ((g$q$14483$1DOkPG) (if g$q$14483$1DOkPG (begin '#f ((case-lambda ((g$r$14484$1DOkPG) (if g$r$14484$1DOkPG (begin '#f (append g$q$14483$1DOkPG g$r$14484$1DOkPG)) '#f))) ((case-lambda ((g$x$14485$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14485$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14482$1DOkPG)))) '#f))) ((case-lambda ((g$x$14486$1DOkPG) (list g$x$14486$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14482$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14479$1DOkPG)))) '#f))) ((case-lambda ((g$x$14487$1DOkPG) (list g$x$14487$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14479$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14476$1DOkPG)))) '#f))) ((case-lambda ((g$x$14488$1DOkPG) (list g$x$14488$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14476$1DOkPG)))) '#f))) g$t$14424$1DOkPG)))) g$t$14412$1DOkPG)))) ((case-lambda ((g$x$14489$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14489$1DOkPG) (begin '#f ((case-lambda ((g$q$14490$1DOkPG) (if g$q$14490$1DOkPG (begin '#f ((case-lambda ((g$r$14491$1DOkPG) (if g$r$14491$1DOkPG (begin '#f (append g$q$14490$1DOkPG g$r$14491$1DOkPG)) '#f))) ((case-lambda ((g$x$14492$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14492$1DOkPG) (begin '#f ((case-lambda ((g$q$14493$1DOkPG) (if g$q$14493$1DOkPG (begin '#f ((case-lambda ((g$r$14494$1DOkPG) (if g$r$14494$1DOkPG (begin '#f (append g$q$14493$1DOkPG g$r$14494$1DOkPG)) '#f))) ((letrec ((g$f$14495$1DOkPG (case-lambda ((g$x$14496$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14496$1DOkPG) ((case-lambda ((g$cars/f$14497$1DOkPG) (if g$cars/f$14497$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14498$1DOkPG) (if g$cdrs/f$14498$1DOkPG (begin '#f (map cons g$cars/f$14497$1DOkPG g$cdrs/f$14498$1DOkPG)) '#f))) (g$f$14495$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14496$1DOkPG)))) '#f))) ((case-lambda ((g$x$14499$1DOkPG) (list g$x$14499$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14496$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14496$1DOkPG) (list (begin 'sym* '())) '#f)))))) g$f$14495$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14492$1DOkPG)))) '#f))) ((case-lambda ((g$x$14500$1DOkPG) (list g$x$14500$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14492$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14489$1DOkPG)))) '#f))) ((case-lambda ((g$x$14501$1DOkPG) (list g$x$14501$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14489$1DOkPG)))) '#f))) g$t$14412$1DOkPG)))) g$t$14403$1DOkPG)))) ((case-lambda ((g$x$14502$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14502$1DOkPG) (begin '#f ((case-lambda ((g$q$14503$1DOkPG) (if g$q$14503$1DOkPG (begin '#f ((case-lambda ((g$r$14504$1DOkPG) (if g$r$14504$1DOkPG (begin '#f (append g$q$14503$1DOkPG g$r$14504$1DOkPG)) '#f))) ((case-lambda ((g$x$14505$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14505$1DOkPG) (begin '#f ((case-lambda ((g$q$14506$1DOkPG) (if g$q$14506$1DOkPG (begin '#f ((case-lambda ((g$r$14507$1DOkPG) (if g$r$14507$1DOkPG (begin '#f (append g$q$14506$1DOkPG g$r$14507$1DOkPG)) '#f))) ((letrec ((g$f$14508$1DOkPG (case-lambda ((g$x$14509$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14509$1DOkPG) ((case-lambda ((g$cars/f$14510$1DOkPG) (if g$cars/f$14510$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14511$1DOkPG) (if g$cdrs/f$14511$1DOkPG (begin '#f (map cons g$cars/f$14510$1DOkPG g$cdrs/f$14511$1DOkPG)) '#f))) (g$f$14508$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14509$1DOkPG)))) '#f))) ((case-lambda ((g$x$14512$1DOkPG) (list g$x$14512$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14509$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14509$1DOkPG) (list (begin 'sym* '())) '#f)))))) g$f$14508$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14505$1DOkPG)))) '#f))) ((case-lambda ((g$x$14513$1DOkPG) (list g$x$14513$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14505$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14502$1DOkPG)))) '#f))) ((case-lambda ((g$x$14514$1DOkPG) (list g$x$14514$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14502$1DOkPG)))) '#f))) g$t$14403$1DOkPG)))) g$t$14388$1DOkPG)))) ((case-lambda ((g$x$14515$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14515$1DOkPG) (begin '#f ((case-lambda ((g$q$14516$1DOkPG) (if g$q$14516$1DOkPG (begin '#f ((case-lambda ((g$r$14517$1DOkPG) (if g$r$14517$1DOkPG (begin '#f (append g$q$14516$1DOkPG g$r$14517$1DOkPG)) '#f))) ((case-lambda ((g$x$14518$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14518$1DOkPG) (begin '#f ((case-lambda ((g$q$14519$1DOkPG) (if g$q$14519$1DOkPG (begin '#f ((case-lambda ((g$r$14520$1DOkPG) (if g$r$14520$1DOkPG (begin '#f (append g$q$14519$1DOkPG g$r$14520$1DOkPG)) '#f))) ((letrec ((g$f$14521$1DOkPG (case-lambda ((g$x$14522$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14522$1DOkPG) ((case-lambda ((g$cars/f$14523$1DOkPG) (if g$cars/f$14523$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14524$1DOkPG) (if g$cdrs/f$14524$1DOkPG (begin '#f (map cons g$cars/f$14523$1DOkPG g$cdrs/f$14524$1DOkPG)) '#f))) (g$f$14521$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14522$1DOkPG)))) '#f))) ((case-lambda ((g$x$14525$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14525$1DOkPG) (begin '#f ((case-lambda ((g$q$14526$1DOkPG) (if g$q$14526$1DOkPG (begin '#f ((case-lambda ((g$r$14527$1DOkPG) (if g$r$14527$1DOkPG (begin '#f (append g$q$14526$1DOkPG g$r$14527$1DOkPG)) '#f))) ((case-lambda ((g$x$14528$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14528$1DOkPG) (begin '#f ((case-lambda ((g$q$14529$1DOkPG) (if g$q$14529$1DOkPG (begin '#f ((case-lambda ((g$r$14530$1DOkPG) (if g$r$14530$1DOkPG (begin '#f (append g$q$14529$1DOkPG g$r$14530$1DOkPG)) '#f))) ((case-lambda ((g$x$14531$1DOkPG) (if (equal? (g$stx->datum$9192$1DOkPG g$x$14531$1DOkPG) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14528$1DOkPG)))) '#f))) ((case-lambda ((g$x$14532$1DOkPG) (list g$x$14532$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14528$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14525$1DOkPG)))) '#f))) ((case-lambda ((g$x$14533$1DOkPG) (list g$x$14533$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14525$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$14522$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14522$1DOkPG) (list (begin 'old* '()) (begin 'new* '())) '#f)))))) g$f$14521$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14518$1DOkPG)))) '#f))) ((case-lambda ((g$x$14534$1DOkPG) (list g$x$14534$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14518$1DOkPG)))) '#f))) (g$syntax-cdr$9179$1DOkPG g$x$14515$1DOkPG)))) '#f))) ((case-lambda ((g$x$14535$1DOkPG) (list g$x$14535$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14515$1DOkPG)))) '#f))) g$t$14388$1DOkPG)))) g$t$14382$1DOkPG)))) ((case-lambda ((g$x$14536$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14536$1DOkPG) (begin '#f ((case-lambda ((g$q$14537$1DOkPG) (if g$q$14537$1DOkPG (begin '#f ((case-lambda ((g$r$14538$1DOkPG) (if g$r$14538$1DOkPG (begin '#f (append g$q$14537$1DOkPG g$r$14538$1DOkPG)) '#f))) ((letrec ((g$f$14539$1DOkPG (case-lambda ((g$x$14540$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14540$1DOkPG) ((case-lambda ((g$cars/f$14541$1DOkPG) (if g$cars/f$14541$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$14542$1DOkPG) (if g$cdrs/f$14542$1DOkPG (begin '#f (map cons g$cars/f$14541$1DOkPG g$cdrs/f$14542$1DOkPG)) '#f))) (g$f$14539$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$14540$1DOkPG)))) '#f))) ((case-lambda ((g$x$14543$1DOkPG) (list g$x$14543$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14540$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$14540$1DOkPG) (list (begin 'x* '())) '#f)))))) g$f$14539$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14536$1DOkPG)))) '#f))) ((case-lambda ((g$x$14544$1DOkPG) (list g$x$14544$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14536$1DOkPG)))) '#f))) g$t$14382$1DOkPG)))) g$spec$14381$1DOkPG)))) (g$add-imports!$14369$1DOkPG (case-lambda ((g$imp$14373$1DOkPG g$h$14374$1DOkPG) ((case-lambda ((g$subst$14375$1DOkPG) (for-each (case-lambda ((g$x$14376$1DOkPG) ((case-lambda ((g$name$14377$1DOkPG g$label$14378$1DOkPG) ((case-lambda ((g$t$14379$1DOkPG) (if g$t$14379$1DOkPG ((case-lambda ((g$l$14380$1DOkPG) (if (eq? g$l$14380$1DOkPG g$label$14378$1DOkPG) (void) (g$dup-error$14360$1DOkPG g$name$14377$1DOkPG)))) g$t$14379$1DOkPG) (g$hashtable-set!$7714$1DOkPG g$h$14374$1DOkPG g$name$14377$1DOkPG g$label$14378$1DOkPG)))) (g$hashtable-ref$7713$1DOkPG g$h$14374$1DOkPG g$name$14377$1DOkPG '#f)))) (car g$x$14376$1DOkPG) (cdr g$x$14376$1DOkPG)))) g$subst$14375$1DOkPG))) (g$get-import$14368$1DOkPG g$imp$14373$1DOkPG)))))) ((letrec ((g$f$14370$1DOkPG (case-lambda ((g$imp*$14371$1DOkPG g$h$14372$1DOkPG) (if (null? g$imp*$14371$1DOkPG) (hashtable-entries g$h$14372$1DOkPG) (begin (g$add-imports!$14369$1DOkPG (car g$imp*$14371$1DOkPG) g$h$14372$1DOkPG) (g$f$14370$1DOkPG (cdr g$imp*$14371$1DOkPG) g$h$14372$1DOkPG))))))) g$f$14370$1DOkPG) g$imp*$14359$1DOkPG (g$make-eq-hashtable$7710$1DOkPG)))))) (g$make-top-rib$9460$1DOkPG g$make-top-rib$15514$1DOkPG (case-lambda ((g$names$14810$1DOkPG g$labels$14811$1DOkPG) ((case-lambda ((g$rib$14812$1DOkPG) (begin (vector-for-each (case-lambda ((g$name$14813$1DOkPG g$label$14814$1DOkPG) (g$extend-rib!$9145$1DOkPG g$rib$14812$1DOkPG (g$mkstx$9169$1DOkPG g$name$14813$1DOkPG g$top-mark*$9126$1DOkPG '() '()) g$label$14814$1DOkPG))) g$names$14810$1DOkPG g$labels$14811$1DOkPG) g$rib$14812$1DOkPG))) (g$make-empty-rib$9144$1DOkPG))))) (g$make-collector$9461$1DOkPG g$make-collector$15515$1DOkPG (case-lambda (() ((case-lambda ((g$ls$14815$1DOkPG) (case-lambda (() g$ls$14815$1DOkPG) ((g$x$14816$1DOkPG) (set! g$ls$14815$1DOkPG (g$set-cons$9123$1DOkPG g$x$14816$1DOkPG g$ls$14815$1DOkPG)))))) '())))) (g$inv-collector$9462$1DOkPG g$inv-collector$15516$1DOkPG (g$make-parameter$8657$1DOkPG (case-lambda (g$args$14817$1DOkPG (assertion-violation 'inv-collector '"BUG: not initialized"))) (case-lambda ((g$x$14818$1DOkPG) (begin (if (procedure? g$x$14818$1DOkPG) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" g$x$14818$1DOkPG)) g$x$14818$1DOkPG))))) (g$vis-collector$9463$1DOkPG g$vis-collector$15517$1DOkPG (g$make-parameter$8657$1DOkPG (case-lambda (g$args$14819$1DOkPG (assertion-violation 'vis-collector '"BUG: not initialized"))) (case-lambda ((g$x$14820$1DOkPG) (begin (if (procedure? g$x$14820$1DOkPG) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" g$x$14820$1DOkPG)) g$x$14820$1DOkPG))))) (g$imp-collector$9464$1DOkPG g$imp-collector$15518$1DOkPG (g$make-parameter$8657$1DOkPG (case-lambda (g$args$14821$1DOkPG (assertion-violation 'imp-collector '"BUG: not initialized"))) (case-lambda ((g$x$14822$1DOkPG) (begin (if (procedure? g$x$14822$1DOkPG) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" g$x$14822$1DOkPG)) g$x$14822$1DOkPG))))) (g$chi-library-internal$9465$1DOkPG g$chi-library-internal$15519$1DOkPG (case-lambda ((g$e*$14823$1DOkPG g$rib$14824$1DOkPG g$top?$14825$1DOkPG) (call-with-values (case-lambda (() (g$chi-body*$9450$1DOkPG g$e*$14823$1DOkPG '() '() '() '() '() '() g$rib$14824$1DOkPG g$top?$14825$1DOkPG))) (case-lambda ((g$e*$14833$1DOkPG g$r$14834$1DOkPG g$mr$14835$1DOkPG g$lex*$14836$1DOkPG g$rhs*$14837$1DOkPG g$mod**$14838$1DOkPG g$_kwd*$14839$1DOkPG) ((case-lambda ((g$_kwd*$14840$1DOkPG g$mod**$14841$1DOkPG g$rhs*$14842$1DOkPG g$lex*$14843$1DOkPG g$mr$14844$1DOkPG g$r$14845$1DOkPG g$e*$14846$1DOkPG) (values (append (apply append (reverse g$mod**$14841$1DOkPG)) g$e*$14846$1DOkPG) g$r$14845$1DOkPG g$mr$14844$1DOkPG (reverse g$lex*$14843$1DOkPG) (reverse g$rhs*$14842$1DOkPG)))) g$_kwd*$14839$1DOkPG g$mod**$14838$1DOkPG g$rhs*$14837$1DOkPG g$lex*$14836$1DOkPG g$mr$14835$1DOkPG g$r$14834$1DOkPG g$e*$14833$1DOkPG))))))) (g$library-body-expander$9466$1DOkPG g$library-body-expander$15520$1DOkPG (case-lambda ((g$exp*$14847$1DOkPG g$imp*$14848$1DOkPG g$b*$14849$1DOkPG g$top?$14850$1DOkPG) (letrec* ((g$itc$14851$1DOkPG (g$make-collector$9461$1DOkPG))) ((case-lambda ((g$imp-collector$14854$1DOkPG g$imp-collector$14855$1DOkPG) ((case-lambda ((g$swap$14856$1DOkPG) (dynamic-wind g$swap$14856$1DOkPG (case-lambda (() (call-with-values (case-lambda (() (g$parse-exports$9456$1DOkPG g$exp*$14847$1DOkPG))) (case-lambda ((g$exp-int*$14859$1DOkPG g$exp-ext*$14860$1DOkPG) ((case-lambda ((g$exp-ext*$14861$1DOkPG g$exp-int*$14862$1DOkPG) (call-with-values (case-lambda (() (g$parse-import-spec*$9459$1DOkPG g$imp*$14848$1DOkPG))) (case-lambda ((g$subst-names$14865$1DOkPG g$subst-labels$14866$1DOkPG) ((case-lambda ((g$subst-labels$14867$1DOkPG g$subst-names$14868$1DOkPG) ((case-lambda ((g$rib$14869$1DOkPG) ((case-lambda ((g$b*$14870$1DOkPG g$rtc$14871$1DOkPG g$vtc$14872$1DOkPG) ((case-lambda ((g$inv-collector$14877$1DOkPG g$vis-collector$14878$1DOkPG g$inv-collector$14879$1DOkPG g$vis-collector$14880$1DOkPG) ((case-lambda ((g$swap$14881$1DOkPG) (dynamic-wind g$swap$14881$1DOkPG (case-lambda (() (call-with-values (case-lambda (() (g$chi-library-internal$9465$1DOkPG g$b*$14870$1DOkPG g$rib$14869$1DOkPG g$top?$14850$1DOkPG))) (case-lambda ((g$init*$14887$1DOkPG g$r$14888$1DOkPG g$mr$14889$1DOkPG g$lex*$14890$1DOkPG g$rhs*$14891$1DOkPG) ((case-lambda ((g$rhs*$14892$1DOkPG g$lex*$14893$1DOkPG g$mr$14894$1DOkPG g$r$14895$1DOkPG g$init*$14896$1DOkPG) (begin (g$seal-rib!$9146$1DOkPG g$rib$14869$1DOkPG) ((case-lambda ((g$init*$14897$1DOkPG) ((case-lambda ((g$rhs*$14898$1DOkPG) ((case-lambda (() (begin (g$unseal-rib!$9147$1DOkPG g$rib$14869$1DOkPG) ((case-lambda ((g$loc*$14899$1DOkPG g$export-subst$14900$1DOkPG) (letrec* ((g$errstr$14901$1DOkPG '"attempt to export mutated variable")) (call-with-values (case-lambda (() (g$make-export-env/macros$9493$1DOkPG g$lex*$14893$1DOkPG g$loc*$14899$1DOkPG g$r$14895$1DOkPG))) (case-lambda ((g$export-env$14905$1DOkPG g$global*$14906$1DOkPG g$macro*$14907$1DOkPG) ((case-lambda ((g$macro*$14908$1DOkPG g$global*$14909$1DOkPG g$export-env$14910$1DOkPG) (begin (for-each (case-lambda ((g$s$14911$1DOkPG) ((case-lambda ((g$name$14912$1DOkPG g$label$14913$1DOkPG) ((case-lambda ((g$p$14914$1DOkPG) (if g$p$14914$1DOkPG ((case-lambda ((g$b$14915$1DOkPG) ((case-lambda ((g$type$14916$1DOkPG) (if (eq? g$type$14916$1DOkPG 'mutable) (g$syntax-violation$9501$1DOkPG 'export g$errstr$14901$1DOkPG g$name$14912$1DOkPG) (void)))) (car g$b$14915$1DOkPG)))) (cdr g$p$14914$1DOkPG)) (void)))) (assq g$label$14913$1DOkPG g$export-env$14910$1DOkPG)))) (car g$s$14911$1DOkPG) (cdr g$s$14911$1DOkPG)))) g$export-subst$14900$1DOkPG) ((case-lambda ((g$invoke-body$14917$1DOkPG g$invoke-definitions$14918$1DOkPG) (values (g$itc$14851$1DOkPG) (g$rtc$14871$1DOkPG) (g$vtc$14872$1DOkPG) (g$build-sequence$9118$1DOkPG '#f (append g$invoke-definitions$14918$1DOkPG (list g$invoke-body$14917$1DOkPG))) g$macro*$14908$1DOkPG g$export-subst$14900$1DOkPG g$export-env$14910$1DOkPG))) (g$build-library-letrec*$9122$1DOkPG '#f g$lex*$14893$1DOkPG g$loc*$14899$1DOkPG g$rhs*$14898$1DOkPG (if (null? g$init*$14897$1DOkPG) (g$build-void$9119$1DOkPG) (g$build-sequence$9118$1DOkPG '#f g$init*$14897$1DOkPG))) (map g$build-global-define$9114$1DOkPG (map cdr g$global*$14909$1DOkPG)))))) g$macro*$14907$1DOkPG g$global*$14906$1DOkPG g$export-env$14905$1DOkPG))))))) (map g$gen-global$9129$1DOkPG g$lex*$14893$1DOkPG) (g$make-export-subst$9492$1DOkPG g$exp-int*$14862$1DOkPG g$exp-ext*$14861$1DOkPG g$rib$14869$1DOkPG)))))))) (g$chi-rhs*$9444$1DOkPG g$rhs*$14892$1DOkPG g$r$14895$1DOkPG g$mr$14894$1DOkPG)))) (g$chi-expr*$9436$1DOkPG g$init*$14896$1DOkPG g$r$14895$1DOkPG g$mr$14894$1DOkPG))))) g$rhs*$14891$1DOkPG g$lex*$14890$1DOkPG g$mr$14889$1DOkPG g$r$14888$1DOkPG g$init*$14887$1DOkPG)))))) g$swap$14881$1DOkPG))) (case-lambda (() (begin ((case-lambda ((g$t$14919$1DOkPG) (begin (g$inv-collector$14877$1DOkPG g$inv-collector$14879$1DOkPG) (set! g$inv-collector$14879$1DOkPG g$t$14919$1DOkPG)))) (g$inv-collector$14877$1DOkPG)) ((case-lambda ((g$t$14920$1DOkPG) (begin (g$vis-collector$14878$1DOkPG g$vis-collector$14880$1DOkPG) (set! g$vis-collector$14880$1DOkPG g$t$14920$1DOkPG)))) (g$vis-collector$14878$1DOkPG)))))))) g$inv-collector$9462$1DOkPG g$vis-collector$9463$1DOkPG g$rtc$14871$1DOkPG g$vtc$14872$1DOkPG))) (map (case-lambda ((g$x$14921$1DOkPG) (g$mkstx$9169$1DOkPG g$x$14921$1DOkPG g$top-mark*$9126$1DOkPG (list g$rib$14869$1DOkPG) '()))) g$b*$14849$1DOkPG) (g$make-collector$9461$1DOkPG) (g$make-collector$9461$1DOkPG)))) (g$make-top-rib$9460$1DOkPG g$subst-names$14868$1DOkPG g$subst-labels$14867$1DOkPG)))) g$subst-labels$14866$1DOkPG g$subst-names$14865$1DOkPG)))))) g$exp-ext*$14860$1DOkPG g$exp-int*$14859$1DOkPG)))))) g$swap$14856$1DOkPG))) (case-lambda (() ((case-lambda ((g$t$14922$1DOkPG) (begin (g$imp-collector$14854$1DOkPG g$imp-collector$14855$1DOkPG) (set! g$imp-collector$14855$1DOkPG g$t$14922$1DOkPG)))) (g$imp-collector$14854$1DOkPG))))))) g$imp-collector$9464$1DOkPG g$itc$14851$1DOkPG))))) (g$core-library-expander$9467$1DOkPG g$core-library-expander$15521$1DOkPG (case-lambda ((g$e$14923$1DOkPG) ((case-lambda ((g$interaction-library$14926$1DOkPG g$interaction-library$14927$1DOkPG) ((case-lambda ((g$swap$14928$1DOkPG) (dynamic-wind g$swap$14928$1DOkPG (case-lambda (() (call-with-values (case-lambda (() (g$parse-library$9458$1DOkPG g$e$14923$1DOkPG))) (case-lambda ((g$name*$14933$1DOkPG g$exp*$14934$1DOkPG g$imp*$14935$1DOkPG g$b*$14936$1DOkPG) ((case-lambda ((g$b*$14937$1DOkPG g$imp*$14938$1DOkPG g$exp*$14939$1DOkPG g$name*$14940$1DOkPG) (call-with-values (case-lambda (() (g$parse-library-name$9457$1DOkPG g$name*$14940$1DOkPG))) (case-lambda ((g$name$14943$1DOkPG g$ver$14944$1DOkPG) ((case-lambda ((g$ver$14945$1DOkPG g$name$14946$1DOkPG) (call-with-values (case-lambda (() (g$library-body-expander$9466$1DOkPG g$exp*$14939$1DOkPG g$imp*$14938$1DOkPG g$b*$14937$1DOkPG '#f))) (case-lambda ((g$imp*$14954$1DOkPG g$invoke-req*$14955$1DOkPG g$visit-req*$14956$1DOkPG g$invoke-code$14957$1DOkPG g$visit-code$14958$1DOkPG g$export-subst$14959$1DOkPG g$export-env$14960$1DOkPG) ((case-lambda ((g$export-env$14961$1DOkPG g$export-subst$14962$1DOkPG g$visit-code$14963$1DOkPG g$invoke-code$14964$1DOkPG g$visit-req*$14965$1DOkPG g$invoke-req*$14966$1DOkPG g$imp*$14967$1DOkPG) (values g$name$14946$1DOkPG g$ver$14945$1DOkPG g$imp*$14967$1DOkPG g$invoke-req*$14966$1DOkPG g$visit-req*$14965$1DOkPG g$invoke-code$14964$1DOkPG g$visit-code$14963$1DOkPG g$export-subst$14962$1DOkPG g$export-env$14961$1DOkPG))) g$export-env$14960$1DOkPG g$export-subst$14959$1DOkPG g$visit-code$14958$1DOkPG g$invoke-code$14957$1DOkPG g$visit-req*$14956$1DOkPG g$invoke-req*$14955$1DOkPG g$imp*$14954$1DOkPG)))))) g$ver$14944$1DOkPG g$name$14943$1DOkPG)))))) g$b*$14936$1DOkPG g$imp*$14935$1DOkPG g$exp*$14934$1DOkPG g$name*$14933$1DOkPG)))))) g$swap$14928$1DOkPG))) (case-lambda (() ((case-lambda ((g$t$14968$1DOkPG) (begin (g$interaction-library$14926$1DOkPG g$interaction-library$14927$1DOkPG) (set! g$interaction-library$14927$1DOkPG g$t$14968$1DOkPG)))) (g$interaction-library$14926$1DOkPG))))))) g$interaction-library$9506$1DOkPG '#f)))) (g$parse-top-level-program$9468$1DOkPG g$parse-top-level-program$15522$1DOkPG (case-lambda ((g$e*$14969$1DOkPG) ((case-lambda ((g$t$14970$1DOkPG) ((case-lambda ((g$ls/false$14971$1DOkPG) (if (if g$ls/false$14971$1DOkPG (begin '#f (apply (case-lambda ((g$import$14972$1DOkPG g$imp*$14973$1DOkPG g$b*$14974$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$import$14972$1DOkPG) 'import))) g$ls/false$14971$1DOkPG)) '#f) (apply (case-lambda ((g$import$14975$1DOkPG g$imp*$14976$1DOkPG g$b*$14977$1DOkPG) (values g$imp*$14976$1DOkPG g$b*$14977$1DOkPG))) g$ls/false$14971$1DOkPG) ((case-lambda ((g$t$14978$1DOkPG) ((case-lambda ((g$ls/false$14979$1DOkPG) (if (if g$ls/false$14979$1DOkPG (begin '#f (apply (case-lambda ((g$import$14980$1DOkPG g$x$14981$1DOkPG g$y$14982$1DOkPG) (eq? (g$syntax->datum$9504$1DOkPG g$import$14980$1DOkPG) 'import))) g$ls/false$14979$1DOkPG)) '#f) (apply (case-lambda ((g$import$14983$1DOkPG g$x$14984$1DOkPG g$y$14985$1DOkPG) (g$syntax-violation$9501$1DOkPG 'expander '"invalid syntax of top-level program" (g$syntax-car$9178$1DOkPG g$e*$14969$1DOkPG)))) g$ls/false$14979$1DOkPG) ((case-lambda ((g$t$14986$1DOkPG) ((case-lambda ((g$ls/false$14987$1DOkPG) (if (if g$ls/false$14987$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14987$1DOkPG)) '#f) (apply (case-lambda (() (assertion-violation 'expander '"top-level program is missing an (import ---) clause"))) g$ls/false$14987$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$14986$1DOkPG)))) ((case-lambda ((g$x$14988$1DOkPG) '())) g$t$14986$1DOkPG)))) g$t$14978$1DOkPG)))) ((case-lambda ((g$x$14989$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14989$1DOkPG) (begin '#f ((case-lambda ((g$q$14990$1DOkPG) (if g$q$14990$1DOkPG (begin '#f ((case-lambda ((g$r$14991$1DOkPG) (if g$r$14991$1DOkPG (begin '#f (append g$q$14990$1DOkPG g$r$14991$1DOkPG)) '#f))) ((case-lambda ((g$x$14992$1DOkPG) (list g$x$14992$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$14989$1DOkPG)))) '#f))) ((case-lambda ((g$x$14993$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14993$1DOkPG) (begin '#f ((case-lambda ((g$q$14994$1DOkPG) (if g$q$14994$1DOkPG (begin '#f ((case-lambda ((g$r$14995$1DOkPG) (if g$r$14995$1DOkPG (begin '#f (append g$q$14994$1DOkPG g$r$14995$1DOkPG)) '#f))) ((case-lambda ((g$x$14996$1DOkPG) (list g$x$14996$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$14993$1DOkPG)))) '#f))) ((case-lambda ((g$x$14997$1DOkPG) (list g$x$14997$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$14993$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$14989$1DOkPG)))) '#f))) g$t$14978$1DOkPG)))) g$t$14970$1DOkPG)))) ((case-lambda ((g$x$14998$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$14998$1DOkPG) (begin '#f ((case-lambda ((g$q$14999$1DOkPG) (if g$q$14999$1DOkPG (begin '#f ((case-lambda ((g$r$15000$1DOkPG) (if g$r$15000$1DOkPG (begin '#f (append g$q$14999$1DOkPG g$r$15000$1DOkPG)) '#f))) ((letrec ((g$f$15001$1DOkPG (case-lambda ((g$x$15002$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$15002$1DOkPG) ((case-lambda ((g$cars/f$15003$1DOkPG) (if g$cars/f$15003$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$15004$1DOkPG) (if g$cdrs/f$15004$1DOkPG (begin '#f (map cons g$cars/f$15003$1DOkPG g$cdrs/f$15004$1DOkPG)) '#f))) (g$f$15001$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$15002$1DOkPG)))) '#f))) ((case-lambda ((g$x$15005$1DOkPG) (list g$x$15005$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$15002$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$15002$1DOkPG) (list (begin 'b* '())) '#f)))))) g$f$15001$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$14998$1DOkPG)))) '#f))) ((case-lambda ((g$x$15006$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$15006$1DOkPG) (begin '#f ((case-lambda ((g$q$15007$1DOkPG) (if g$q$15007$1DOkPG (begin '#f ((case-lambda ((g$r$15008$1DOkPG) (if g$r$15008$1DOkPG (begin '#f (append g$q$15007$1DOkPG g$r$15008$1DOkPG)) '#f))) ((letrec ((g$f$15009$1DOkPG (case-lambda ((g$x$15010$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$15010$1DOkPG) ((case-lambda ((g$cars/f$15011$1DOkPG) (if g$cars/f$15011$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$15012$1DOkPG) (if g$cdrs/f$15012$1DOkPG (begin '#f (map cons g$cars/f$15011$1DOkPG g$cdrs/f$15012$1DOkPG)) '#f))) (g$f$15009$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$15010$1DOkPG)))) '#f))) ((case-lambda ((g$x$15013$1DOkPG) (list g$x$15013$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$15010$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$15010$1DOkPG) (list (begin 'imp* '())) '#f)))))) g$f$15009$1DOkPG) (g$syntax-cdr$9179$1DOkPG g$x$15006$1DOkPG)))) '#f))) ((case-lambda ((g$x$15014$1DOkPG) (list g$x$15014$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$15006$1DOkPG)))) '#f))) (g$syntax-car$9178$1DOkPG g$x$14998$1DOkPG)))) '#f))) g$t$14970$1DOkPG)))) g$e*$14969$1DOkPG)))) (g$top-level-expander$9469$1DOkPG g$top-level-expander$15523$1DOkPG (case-lambda ((g$e*$15015$1DOkPG) (call-with-values (case-lambda (() (g$parse-top-level-program$9468$1DOkPG g$e*$15015$1DOkPG))) (case-lambda ((g$imp*$15018$1DOkPG g$b*$15019$1DOkPG) ((case-lambda ((g$b*$15020$1DOkPG g$imp*$15021$1DOkPG) (call-with-values (case-lambda (() (g$library-body-expander$9466$1DOkPG '() g$imp*$15021$1DOkPG g$b*$15020$1DOkPG '#t))) (case-lambda ((g$imp*$15029$1DOkPG g$invoke-req*$15030$1DOkPG g$visit-req*$15031$1DOkPG g$invoke-code$15032$1DOkPG g$visit-code$15033$1DOkPG g$export-subst$15034$1DOkPG g$export-env$15035$1DOkPG) ((case-lambda ((g$export-env$15036$1DOkPG g$export-subst$15037$1DOkPG g$visit-code$15038$1DOkPG g$invoke-code$15039$1DOkPG g$visit-req*$15040$1DOkPG g$invoke-req*$15041$1DOkPG g$imp*$15042$1DOkPG) (values g$invoke-req*$15041$1DOkPG g$invoke-code$15039$1DOkPG))) g$export-env$15035$1DOkPG g$export-subst$15034$1DOkPG g$visit-code$15033$1DOkPG g$invoke-code$15032$1DOkPG g$visit-req*$15031$1DOkPG g$invoke-req*$15030$1DOkPG g$imp*$15029$1DOkPG)))))) g$b*$15019$1DOkPG g$imp*$15018$1DOkPG))))))) (g$10312$9470$1DOkPG g$10312$15524$1DOkPG (make-record-type-descriptor 'env '#f 'g$10315$1DOkPG '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (g$10314$9471$1DOkPG g$10314$15525$1DOkPG '#f) (g$10313$9472$1DOkPG g$10313$15526$1DOkPG (make-record-constructor-descriptor g$10312$9470$1DOkPG '#f g$10314$9471$1DOkPG)) (g$env?$9473$1DOkPG g$env?$15527$1DOkPG (record-predicate g$10312$9470$1DOkPG)) (g$make-env$9474$1DOkPG g$make-env$15528$1DOkPG (record-constructor g$10313$9472$1DOkPG)) (g$env-names$9475$1DOkPG g$env-names$15529$1DOkPG (record-accessor g$10312$9470$1DOkPG '0)) (g$env-labels$9476$1DOkPG g$env-labels$15530$1DOkPG (record-accessor g$10312$9470$1DOkPG '1)) (g$env-itc$9477$1DOkPG g$env-itc$15531$1DOkPG (record-accessor g$10312$9470$1DOkPG '2)) (g$set-env-names!$9478$1DOkPG g$set-env-names!$15532$1DOkPG (record-mutator g$10312$9470$1DOkPG '0)) (g$set-env-labels!$9479$1DOkPG g$set-env-labels!$15533$1DOkPG (record-mutator g$10312$9470$1DOkPG '1)) (g$set-env-itc!$9480$1DOkPG g$set-env-itc!$15534$1DOkPG (record-mutator g$10312$9470$1DOkPG '2)) (g$rp$9481$1DOkPG g$rp$15535$1DOkPG (make-record-printer 'env (case-lambda ((g$x$15043$1DOkPG g$p$15044$1DOkPG) (begin (if (g$env?$9473$1DOkPG g$x$15043$1DOkPG) (void) (assertion-violation 'record-type-printer '"not an environment")) (display '"#<environment>" g$p$15044$1DOkPG)))))) (g$environment?$9482$1DOkPG g$environment?$15536$1DOkPG (case-lambda ((g$x$15045$1DOkPG) (g$env?$9473$1DOkPG g$x$15045$1DOkPG)))) (g$environment$9483$1DOkPG g$environment$15537$1DOkPG (case-lambda (g$imp*$15046$1DOkPG ((case-lambda ((g$itc$15047$1DOkPG) ((case-lambda ((g$imp-collector$15050$1DOkPG g$imp-collector$15051$1DOkPG) ((case-lambda ((g$swap$15052$1DOkPG) (dynamic-wind g$swap$15052$1DOkPG (case-lambda (() (call-with-values (case-lambda (() (g$parse-import-spec*$9459$1DOkPG g$imp*$15046$1DOkPG))) (case-lambda ((g$subst-names$15055$1DOkPG g$subst-labels$15056$1DOkPG) ((case-lambda ((g$subst-labels$15057$1DOkPG g$subst-names$15058$1DOkPG) (g$make-env$9474$1DOkPG g$subst-names$15058$1DOkPG g$subst-labels$15057$1DOkPG g$itc$15047$1DOkPG))) g$subst-labels$15056$1DOkPG g$subst-names$15055$1DOkPG)))))) g$swap$15052$1DOkPG))) (case-lambda (() ((case-lambda ((g$t$15059$1DOkPG) (begin (g$imp-collector$15050$1DOkPG g$imp-collector$15051$1DOkPG) (set! g$imp-collector$15051$1DOkPG g$t$15059$1DOkPG)))) (g$imp-collector$15050$1DOkPG))))))) g$imp-collector$9464$1DOkPG g$itc$15047$1DOkPG))) (g$make-collector$9461$1DOkPG))))) (g$null-environment$9484$1DOkPG g$null-environment$15538$1DOkPG (case-lambda ((g$n$15060$1DOkPG) (begin (if (eqv? g$n$15060$1DOkPG '5) (void) (assertion-violation 'null-environment '"not 5" g$n$15060$1DOkPG)) (g$environment$9483$1DOkPG '(psyntax null-environment-5)))))) (g$scheme-report-environment$9485$1DOkPG g$scheme-report-environment$15539$1DOkPG (case-lambda ((g$n$15061$1DOkPG) (begin (if (eqv? g$n$15061$1DOkPG '5) (void) (assertion-violation 'scheme-report-environment '"not 5" g$n$15061$1DOkPG)) (g$environment$9483$1DOkPG '(psyntax scheme-report-environment-5)))))) (g$expand$9486$1DOkPG g$expand$15540$1DOkPG (case-lambda ((g$x$15062$1DOkPG g$env$15063$1DOkPG) (begin (if (g$env?$9473$1DOkPG g$env$15063$1DOkPG) (void) (assertion-violation 'expand '"not an environment" g$env$15063$1DOkPG)) ((case-lambda ((g$rib$15064$1DOkPG) ((case-lambda ((g$x$15065$1DOkPG g$itc$15066$1DOkPG g$rtc$15067$1DOkPG g$vtc$15068$1DOkPG) ((case-lambda ((g$x$15069$1DOkPG) (begin (g$seal-rib!$9146$1DOkPG g$rib$15064$1DOkPG) (values g$x$15069$1DOkPG (g$rtc$15067$1DOkPG))))) ((case-lambda ((g$inv-collector$15076$1DOkPG g$vis-collector$15077$1DOkPG g$imp-collector$15078$1DOkPG g$inv-collector$15079$1DOkPG g$vis-collector$15080$1DOkPG g$imp-collector$15081$1DOkPG) ((case-lambda ((g$swap$15082$1DOkPG) (dynamic-wind g$swap$15082$1DOkPG (case-lambda (() (g$chi-expr$9438$1DOkPG g$x$15065$1DOkPG '() '()))) g$swap$15082$1DOkPG))) (case-lambda (() (begin ((case-lambda ((g$t$15083$1DOkPG) (begin (g$inv-collector$15076$1DOkPG g$inv-collector$15079$1DOkPG) (set! g$inv-collector$15079$1DOkPG g$t$15083$1DOkPG)))) (g$inv-collector$15076$1DOkPG)) ((case-lambda ((g$t$15084$1DOkPG) (begin (g$vis-collector$15077$1DOkPG g$vis-collector$15080$1DOkPG) (set! g$vis-collector$15080$1DOkPG g$t$15084$1DOkPG)))) (g$vis-collector$15077$1DOkPG)) ((case-lambda ((g$t$15085$1DOkPG) (begin (g$imp-collector$15078$1DOkPG g$imp-collector$15081$1DOkPG) (set! g$imp-collector$15081$1DOkPG g$t$15085$1DOkPG)))) (g$imp-collector$15078$1DOkPG)))))))) g$inv-collector$9462$1DOkPG g$vis-collector$9463$1DOkPG g$imp-collector$9464$1DOkPG g$rtc$15067$1DOkPG g$vtc$15068$1DOkPG g$itc$15066$1DOkPG)))) (g$mkstx$9169$1DOkPG g$x$15062$1DOkPG g$top-mark*$9126$1DOkPG (list g$rib$15064$1DOkPG) '()) (g$env-itc$9477$1DOkPG g$env$15063$1DOkPG) (g$make-collector$9461$1DOkPG) (g$make-collector$9461$1DOkPG)))) (g$make-top-rib$9460$1DOkPG (g$env-names$9475$1DOkPG g$env$15063$1DOkPG) (g$env-labels$9476$1DOkPG g$env$15063$1DOkPG))))))) (g$eval$9487$1DOkPG g$eval$15541$1DOkPG (case-lambda ((g$x$15086$1DOkPG g$env$15087$1DOkPG) (begin (if (g$env?$9473$1DOkPG g$env$15087$1DOkPG) (void) (assertion-violation 'eval '"not an environment" g$env$15087$1DOkPG)) (call-with-values (case-lambda (() (g$expand$9486$1DOkPG g$x$15086$1DOkPG g$env$15087$1DOkPG))) (case-lambda ((g$x$15090$1DOkPG g$invoke-req*$15091$1DOkPG) ((case-lambda ((g$invoke-req*$15092$1DOkPG g$x$15093$1DOkPG) (begin (for-each g$invoke-library$9000$1DOkPG g$invoke-req*$15092$1DOkPG) (eval-core (g$expanded->core$8702$1DOkPG g$x$15093$1DOkPG))))) g$invoke-req*$15091$1DOkPG g$x$15090$1DOkPG)))))))) (g$library-expander$9488$1DOkPG g$library-expander$15542$1DOkPG (case-lambda ((g$x$15094$1DOkPG g$filename$15095$1DOkPG) (letrec* ((g$build-visit-code$15096$1DOkPG (case-lambda ((g$macro*$15139$1DOkPG) (if (null? g$macro*$15139$1DOkPG) (g$build-void$9119$1DOkPG) (g$build-sequence$9118$1DOkPG '#f (map (case-lambda ((g$x$15140$1DOkPG) ((case-lambda ((g$loc$15141$1DOkPG g$src$15142$1DOkPG) (list 'set! g$loc$15141$1DOkPG g$src$15142$1DOkPG))) (car g$x$15140$1DOkPG) (g$cddr$7448$1DOkPG g$x$15140$1DOkPG)))) g$macro*$15139$1DOkPG)))))) (g$visit!$15097$1DOkPG (case-lambda ((g$macro*$15135$1DOkPG) (for-each (case-lambda ((g$x$15136$1DOkPG) ((case-lambda ((g$loc$15137$1DOkPG g$proc$15138$1DOkPG) (set-symbol-value! g$loc$15137$1DOkPG g$proc$15138$1DOkPG))) (car g$x$15136$1DOkPG) (g$cadr$7446$1DOkPG g$x$15136$1DOkPG)))) g$macro*$15135$1DOkPG))))) (call-with-values (case-lambda (() (g$core-library-expander$9467$1DOkPG g$x$15094$1DOkPG))) (case-lambda ((g$name$15107$1DOkPG g$ver$15108$1DOkPG g$imp*$15109$1DOkPG g$inv*$15110$1DOkPG g$vis*$15111$1DOkPG g$invoke-code$15112$1DOkPG g$macro*$15113$1DOkPG g$export-subst$15114$1DOkPG g$export-env$15115$1DOkPG) ((case-lambda ((g$export-env$15116$1DOkPG g$export-subst$15117$1DOkPG g$macro*$15118$1DOkPG g$invoke-code$15119$1DOkPG g$vis*$15120$1DOkPG g$inv*$15121$1DOkPG g$imp*$15122$1DOkPG g$ver$15123$1DOkPG g$name$15124$1DOkPG) ((case-lambda ((g$id$15125$1DOkPG g$name$15126$1DOkPG g$ver$15127$1DOkPG g$imp*$15128$1DOkPG g$vis*$15129$1DOkPG g$inv*$15130$1DOkPG g$visit-proc$15131$1DOkPG g$invoke-proc$15132$1DOkPG g$visit-code$15133$1DOkPG g$invoke-code$15134$1DOkPG) (begin (g$install-library$8996$1DOkPG g$id$15125$1DOkPG g$name$15126$1DOkPG g$ver$15127$1DOkPG g$imp*$15128$1DOkPG g$vis*$15129$1DOkPG g$inv*$15130$1DOkPG g$export-subst$15117$1DOkPG g$export-env$15116$1DOkPG g$visit-proc$15131$1DOkPG g$invoke-proc$15132$1DOkPG g$visit-code$15133$1DOkPG g$invoke-code$15134$1DOkPG '#t g$filename$15095$1DOkPG) (values g$id$15125$1DOkPG g$name$15126$1DOkPG g$ver$15127$1DOkPG g$imp*$15128$1DOkPG g$vis*$15129$1DOkPG g$inv*$15130$1DOkPG g$invoke-code$15134$1DOkPG g$visit-code$15133$1DOkPG g$export-subst$15117$1DOkPG g$export-env$15116$1DOkPG)))) (gensym) g$name$15124$1DOkPG g$ver$15123$1DOkPG (map g$library-spec$9004$1DOkPG g$imp*$15122$1DOkPG) (map g$library-spec$9004$1DOkPG g$vis*$15120$1DOkPG) (map g$library-spec$9004$1DOkPG g$inv*$15121$1DOkPG) (case-lambda (() (g$visit!$15097$1DOkPG g$macro*$15118$1DOkPG))) (case-lambda (() (eval-core (g$expanded->core$8702$1DOkPG g$invoke-code$15119$1DOkPG)))) (g$build-visit-code$15096$1DOkPG g$macro*$15118$1DOkPG) g$invoke-code$15119$1DOkPG))) g$export-env$15115$1DOkPG g$export-subst$15114$1DOkPG g$macro*$15113$1DOkPG g$invoke-code$15112$1DOkPG g$vis*$15111$1DOkPG g$inv*$15110$1DOkPG g$imp*$15109$1DOkPG g$ver$15108$1DOkPG g$name$15107$1DOkPG)))))) ((g$x$15143$1DOkPG) (g$library-expander$9488$1DOkPG g$x$15143$1DOkPG '#f)))) (g$boot-library-expand$9489$1DOkPG g$boot-library-expand$15543$1DOkPG (case-lambda ((g$x$15144$1DOkPG) (call-with-values (case-lambda (() (g$library-expander$9488$1DOkPG g$x$15144$1DOkPG))) (case-lambda ((g$id$15155$1DOkPG g$name$15156$1DOkPG g$ver$15157$1DOkPG g$imp*$15158$1DOkPG g$vis*$15159$1DOkPG g$inv*$15160$1DOkPG g$invoke-code$15161$1DOkPG g$visit-code$15162$1DOkPG g$export-subst$15163$1DOkPG g$export-env$15164$1DOkPG) ((case-lambda ((g$export-env$15165$1DOkPG g$export-subst$15166$1DOkPG g$visit-code$15167$1DOkPG g$invoke-code$15168$1DOkPG g$inv*$15169$1DOkPG g$vis*$15170$1DOkPG g$imp*$15171$1DOkPG g$ver$15172$1DOkPG g$name$15173$1DOkPG g$id$15174$1DOkPG) (values g$invoke-code$15168$1DOkPG g$export-subst$15166$1DOkPG g$export-env$15165$1DOkPG))) g$export-env$15164$1DOkPG g$export-subst$15163$1DOkPG g$visit-code$15162$1DOkPG g$invoke-code$15161$1DOkPG g$inv*$15160$1DOkPG g$vis*$15159$1DOkPG g$imp*$15158$1DOkPG g$ver$15157$1DOkPG g$name$15156$1DOkPG g$id$15155$1DOkPG))))))) (g$rev-map-append$9490$1DOkPG g$rev-map-append$15544$1DOkPG (case-lambda ((g$f$15175$1DOkPG g$ls$15176$1DOkPG g$ac$15177$1DOkPG) (if (null? g$ls$15176$1DOkPG) g$ac$15177$1DOkPG (g$rev-map-append$9490$1DOkPG g$f$15175$1DOkPG (cdr g$ls$15176$1DOkPG) (cons (g$f$15175$1DOkPG (car g$ls$15176$1DOkPG)) g$ac$15177$1DOkPG)))))) (g$build-exports$9491$1DOkPG g$build-exports$15545$1DOkPG (case-lambda ((g$lex*+loc*$15178$1DOkPG g$init*$15179$1DOkPG) (g$build-sequence$9118$1DOkPG '#f (cons (g$build-void$9119$1DOkPG) (g$rev-map-append$9490$1DOkPG (case-lambda ((g$x$15180$1DOkPG) (list 'set! (cdr g$x$15180$1DOkPG) (car g$x$15180$1DOkPG)))) g$lex*+loc*$15178$1DOkPG g$init*$15179$1DOkPG)))))) (g$make-export-subst$9492$1DOkPG g$make-export-subst$15546$1DOkPG (case-lambda ((g$int*$15181$1DOkPG g$ext*$15182$1DOkPG g$rib$15183$1DOkPG) (map (case-lambda ((g$int$15184$1DOkPG g$ext$15185$1DOkPG) ((case-lambda ((g$id$15186$1DOkPG) ((case-lambda ((g$label$15187$1DOkPG) ((case-lambda (() (begin (if g$label$15187$1DOkPG (void) (g$syntax-violation$9501$1DOkPG '#f '"cannot export unbound identifier" g$id$15186$1DOkPG)) (cons g$ext$15185$1DOkPG g$label$15187$1DOkPG))))))) (g$id->label$9193$1DOkPG g$id$15186$1DOkPG)))) (g$mkstx$9169$1DOkPG g$int$15184$1DOkPG g$top-mark*$9126$1DOkPG (list g$rib$15183$1DOkPG) '())))) g$int*$15181$1DOkPG g$ext*$15182$1DOkPG)))) (g$make-export-env/macros$9493$1DOkPG g$make-export-env/macros$15547$1DOkPG (case-lambda ((g$lex*$15188$1DOkPG g$loc*$15189$1DOkPG g$r$15190$1DOkPG) (letrec* ((g$lookup$15191$1DOkPG (case-lambda ((g$x$15206$1DOkPG) ((letrec ((g$f$15207$1DOkPG (case-lambda ((g$x$15208$1DOkPG g$lex*$15209$1DOkPG g$loc*$15210$1DOkPG) (if (pair? g$lex*$15209$1DOkPG) (if (eq? g$x$15208$1DOkPG (car g$lex*$15209$1DOkPG)) (car g$loc*$15210$1DOkPG) (g$f$15207$1DOkPG g$x$15208$1DOkPG (cdr g$lex*$15209$1DOkPG) (cdr g$loc*$15210$1DOkPG))) (assertion-violation 'lookup-make-export '"BUG")))))) g$f$15207$1DOkPG) g$x$15206$1DOkPG g$lex*$15188$1DOkPG g$loc*$15189$1DOkPG))))) ((letrec ((g$f$15192$1DOkPG (case-lambda ((g$r$15193$1DOkPG g$env$15194$1DOkPG g$global*$15195$1DOkPG g$macro*$15196$1DOkPG) (if (null? g$r$15193$1DOkPG) (values g$env$15194$1DOkPG g$global*$15195$1DOkPG g$macro*$15196$1DOkPG) ((case-lambda ((g$x$15197$1DOkPG) ((case-lambda ((g$label$15198$1DOkPG g$b$15199$1DOkPG) ((case-lambda ((g$t$15200$1DOkPG) (if (memv g$t$15200$1DOkPG '(lexical)) ((case-lambda ((g$v$15203$1DOkPG) ((case-lambda ((g$loc$15204$1DOkPG g$type$15205$1DOkPG) (g$f$15192$1DOkPG (cdr g$r$15193$1DOkPG) (cons (g$cons*$7868$1DOkPG g$label$15198$1DOkPG g$type$15205$1DOkPG g$loc$15204$1DOkPG) g$env$15194$1DOkPG) (cons (cons (g$lexical-var$9369$1DOkPG g$v$15203$1DOkPG) g$loc$15204$1DOkPG) g$global*$15195$1DOkPG) g$macro*$15196$1DOkPG))) (g$lookup$15191$1DOkPG (g$lexical-var$9369$1DOkPG g$v$15203$1DOkPG)) (if (g$lexical-mutable?$9370$1DOkPG g$v$15203$1DOkPG) 'mutable 'global)))) (g$binding-value$9197$1DOkPG g$b$15199$1DOkPG)) (if (memv g$t$15200$1DOkPG '(local-macro)) ((case-lambda ((g$loc$15202$1DOkPG) (g$f$15192$1DOkPG (cdr g$r$15193$1DOkPG) (cons (g$cons*$7868$1DOkPG g$label$15198$1DOkPG 'global-macro g$loc$15202$1DOkPG) g$env$15194$1DOkPG) g$global*$15195$1DOkPG (cons (cons g$loc$15202$1DOkPG (g$binding-value$9197$1DOkPG g$b$15199$1DOkPG)) g$macro*$15196$1DOkPG)))) (gensym)) (if (memv g$t$15200$1DOkPG '(local-macro!)) ((case-lambda ((g$loc$15201$1DOkPG) (g$f$15192$1DOkPG (cdr g$r$15193$1DOkPG) (cons (g$cons*$7868$1DOkPG g$label$15198$1DOkPG 'global-macro! g$loc$15201$1DOkPG) g$env$15194$1DOkPG) g$global*$15195$1DOkPG (cons (cons g$loc$15201$1DOkPG (g$binding-value$9197$1DOkPG g$b$15199$1DOkPG)) g$macro*$15196$1DOkPG)))) (gensym)) (if (memv g$t$15200$1DOkPG '($rtd $module)) (g$f$15192$1DOkPG (cdr g$r$15193$1DOkPG) (cons g$x$15197$1DOkPG g$env$15194$1DOkPG) g$global*$15195$1DOkPG g$macro*$15196$1DOkPG) (assertion-violation 'expander '"BUG: do not know how to export" (g$binding-type$9196$1DOkPG g$b$15199$1DOkPG) (g$binding-value$9197$1DOkPG g$b$15199$1DOkPG)))))))) (g$binding-type$9196$1DOkPG g$b$15199$1DOkPG)))) (car g$x$15197$1DOkPG) (cdr g$x$15197$1DOkPG)))) (car g$r$15193$1DOkPG))))))) g$f$15192$1DOkPG) g$r$15190$1DOkPG '() '() '()))))) (g$generate-temporaries$9494$1DOkPG g$generate-temporaries$15548$1DOkPG (case-lambda ((g$ls$15211$1DOkPG) ((case-lambda ((g$t$15212$1DOkPG) ((case-lambda ((g$ls/false$15213$1DOkPG) (if (if g$ls/false$15213$1DOkPG (begin '#f (apply (case-lambda ((g$ls$15214$1DOkPG) '#t)) g$ls/false$15213$1DOkPG)) '#f) (apply (case-lambda ((g$ls$15215$1DOkPG) (map (case-lambda ((g$x$15216$1DOkPG) (g$make-stx$9154$1DOkPG ((case-lambda ((g$x$15217$1DOkPG) (if ((case-lambda ((g$t$15218$1DOkPG) (if g$t$15218$1DOkPG g$t$15218$1DOkPG (begin '#f (string? g$x$15217$1DOkPG))))) (symbol? g$x$15217$1DOkPG)) (gensym g$x$15217$1DOkPG) (gensym 't)))) (g$syntax->datum$9504$1DOkPG g$x$15216$1DOkPG)) g$top-mark*$9126$1DOkPG '() '()))) g$ls$15215$1DOkPG))) g$ls/false$15213$1DOkPG) ((case-lambda ((g$t$15219$1DOkPG) ((case-lambda ((g$ls/false$15220$1DOkPG) (if (if g$ls/false$15220$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15220$1DOkPG)) '#f) (apply (case-lambda (() (assertion-violation 'generate-temporaries '"not a list"))) g$ls/false$15220$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$15219$1DOkPG)))) ((case-lambda ((g$x$15221$1DOkPG) '())) g$t$15219$1DOkPG)))) g$t$15212$1DOkPG)))) ((letrec ((g$f$15222$1DOkPG (case-lambda ((g$x$15223$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$15223$1DOkPG) ((case-lambda ((g$cars/f$15224$1DOkPG) (if g$cars/f$15224$1DOkPG (begin '#f ((case-lambda ((g$cdrs/f$15225$1DOkPG) (if g$cdrs/f$15225$1DOkPG (begin '#f (map cons g$cars/f$15224$1DOkPG g$cdrs/f$15225$1DOkPG)) '#f))) (g$f$15222$1DOkPG (g$syntax-cdr$9179$1DOkPG g$x$15223$1DOkPG)))) '#f))) ((case-lambda ((g$x$15226$1DOkPG) (list g$x$15226$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$15223$1DOkPG))) (if (g$syntax-null?$9176$1DOkPG g$x$15223$1DOkPG) (list (begin 'ls '())) '#f)))))) g$f$15222$1DOkPG) g$t$15212$1DOkPG)))) g$ls$15211$1DOkPG)))) (g$free-identifier=?$9495$1DOkPG g$free-identifier=?$15549$1DOkPG (case-lambda ((g$x$15227$1DOkPG g$y$15228$1DOkPG) (if (g$id?$9181$1DOkPG g$x$15227$1DOkPG) (if (g$id?$9181$1DOkPG g$y$15228$1DOkPG) (g$free-id=?$9185$1DOkPG g$x$15227$1DOkPG g$y$15228$1DOkPG) (assertion-violation 'free-identifier=? '"not an identifier" g$y$15228$1DOkPG)) (assertion-violation 'free-identifier=? '"not an identifier" g$x$15227$1DOkPG))))) (g$bound-identifier=?$9496$1DOkPG g$bound-identifier=?$15550$1DOkPG (case-lambda ((g$x$15229$1DOkPG g$y$15230$1DOkPG) (if (g$id?$9181$1DOkPG g$x$15229$1DOkPG) (if (g$id?$9181$1DOkPG g$y$15230$1DOkPG) (g$bound-id=?$9184$1DOkPG g$x$15229$1DOkPG g$y$15230$1DOkPG) (assertion-violation 'bound-identifier=? '"not an identifier" g$y$15230$1DOkPG)) (assertion-violation 'bound-identifier=? '"not an identifier" g$x$15229$1DOkPG))))) (g$extract-position-condition$9497$1DOkPG g$extract-position-condition$15551$1DOkPG (case-lambda ((g$x$15231$1DOkPG) (letrec* ((g$15812$15232$1DOkPG (make-record-type-descriptor '&source-information &condition-rtd 'g$15815$1DOkPG '#f '#f '#((immutable file-name) (immutable character)))) (g$15814$15233$1DOkPG '#f) (g$15813$15234$1DOkPG (make-record-constructor-descriptor g$15812$15232$1DOkPG &condition-rcd g$15814$15233$1DOkPG)) (g$15811$15235$1DOkPG (record-predicate g$15812$15232$1DOkPG)) (g$make-source-condition$15236$1DOkPG (record-constructor g$15813$15234$1DOkPG)) (g$15809$15237$1DOkPG (record-accessor g$15812$15232$1DOkPG '0)) (g$15810$15238$1DOkPG (record-accessor g$15812$15232$1DOkPG '1)) (g$source-condition?$15239$1DOkPG (condition-predicate g$15812$15232$1DOkPG)) (g$source-filename$15240$1DOkPG (condition-accessor g$15812$15232$1DOkPG g$15809$15237$1DOkPG)) (g$source-character$15241$1DOkPG (condition-accessor g$15812$15232$1DOkPG g$15810$15238$1DOkPG))) (if (g$stx?$9153$1DOkPG g$x$15231$1DOkPG) ((case-lambda ((g$x$15242$1DOkPG) (if (annotation? g$x$15242$1DOkPG) ((case-lambda ((g$src$15243$1DOkPG) (if (pair? g$src$15243$1DOkPG) (g$make-source-condition$15236$1DOkPG (car g$src$15243$1DOkPG) (cdr g$src$15243$1DOkPG)) (condition)))) (annotation-source g$x$15242$1DOkPG)) (condition)))) (g$stx-expr$9155$1DOkPG g$x$15231$1DOkPG)) (condition)))))) (g$syntax-error$9498$1DOkPG g$syntax-error$15552$1DOkPG (case-lambda ((g$x$15244$1DOkPG . g$args$15245$1DOkPG) (begin (if (g$for-all$7866$1DOkPG string? g$args$15245$1DOkPG) (void) (assertion-violation 'syntax-error '"invalid argument" g$args$15245$1DOkPG)) (raise (condition (g$make-message-condition$8120$1DOkPG (if (null? g$args$15245$1DOkPG) '"invalid syntax" (apply string-append g$args$15245$1DOkPG))) (g$make-syntax-violation$8192$1DOkPG (g$syntax->datum$9504$1DOkPG g$x$15244$1DOkPG) '#f) (g$extract-position-condition$9497$1DOkPG g$x$15244$1DOkPG) (g$extract-trace$9499$1DOkPG g$x$15244$1DOkPG))))))) (g$extract-trace$9499$1DOkPG g$extract-trace$15553$1DOkPG (case-lambda ((g$x$15246$1DOkPG) (letrec* ((g$15836$15247$1DOkPG (make-record-type-descriptor '&trace &condition-rtd 'g$15839$1DOkPG '#f '#f '#((immutable form)))) (g$15838$15248$1DOkPG '#f) (g$15837$15249$1DOkPG (make-record-constructor-descriptor g$15836$15247$1DOkPG &condition-rcd g$15838$15248$1DOkPG)) (g$15835$15250$1DOkPG (record-predicate g$15836$15247$1DOkPG)) (g$make-trace$15251$1DOkPG (record-constructor g$15837$15249$1DOkPG)) (g$15834$15252$1DOkPG (record-accessor g$15836$15247$1DOkPG '0)) (g$trace?$15253$1DOkPG (condition-predicate g$15836$15247$1DOkPG)) (g$trace-form$15254$1DOkPG (condition-accessor g$15836$15247$1DOkPG g$15834$15252$1DOkPG))) ((letrec ((g$f$15255$1DOkPG (case-lambda ((g$x$15256$1DOkPG) (if (g$stx?$9153$1DOkPG g$x$15256$1DOkPG) (apply condition (g$make-trace$15251$1DOkPG g$x$15256$1DOkPG) (map g$f$15255$1DOkPG (g$stx-ae*$9158$1DOkPG g$x$15256$1DOkPG))) (if (annotation? g$x$15256$1DOkPG) (g$make-trace$15251$1DOkPG g$x$15256$1DOkPG) (condition))))))) g$f$15255$1DOkPG) g$x$15246$1DOkPG))))) (g$syntax-violation*$9500$1DOkPG g$syntax-violation*$15554$1DOkPG (case-lambda ((g$who$15257$1DOkPG g$msg$15258$1DOkPG g$form$15259$1DOkPG g$condition-object$15260$1DOkPG) (begin (if (string? g$msg$15258$1DOkPG) (void) (assertion-violation 'syntax-violation '"message is not a string" g$msg$15258$1DOkPG)) ((case-lambda ((g$who$15261$1DOkPG) (raise (condition (if g$who$15261$1DOkPG (g$make-who-condition$8166$1DOkPG g$who$15261$1DOkPG) (condition)) (g$make-message-condition$8120$1DOkPG g$msg$15258$1DOkPG) g$condition-object$15260$1DOkPG (g$extract-position-condition$9497$1DOkPG g$form$15259$1DOkPG) (g$extract-trace$9499$1DOkPG g$form$15259$1DOkPG))))) (if ((case-lambda ((g$t$15262$1DOkPG) (if g$t$15262$1DOkPG g$t$15262$1DOkPG (begin '#f (symbol? g$who$15257$1DOkPG))))) (string? g$who$15257$1DOkPG)) g$who$15257$1DOkPG (if (not g$who$15257$1DOkPG) ((case-lambda ((g$t$15263$1DOkPG) ((case-lambda ((g$ls/false$15264$1DOkPG) (if (if g$ls/false$15264$1DOkPG (begin '#f (apply (case-lambda ((g$id$15265$1DOkPG) (g$id?$9181$1DOkPG g$id$15265$1DOkPG))) g$ls/false$15264$1DOkPG)) '#f) (apply (case-lambda ((g$id$15266$1DOkPG) (g$syntax->datum$9504$1DOkPG g$id$15266$1DOkPG))) g$ls/false$15264$1DOkPG) ((case-lambda ((g$t$15267$1DOkPG) ((case-lambda ((g$ls/false$15268$1DOkPG) (if (if g$ls/false$15268$1DOkPG (begin '#f (apply (case-lambda ((g$id$15269$1DOkPG g$rest$15270$1DOkPG) (g$id?$9181$1DOkPG g$id$15269$1DOkPG))) g$ls/false$15268$1DOkPG)) '#f) (apply (case-lambda ((g$id$15271$1DOkPG g$rest$15272$1DOkPG) (g$syntax->datum$9504$1DOkPG g$id$15271$1DOkPG))) g$ls/false$15268$1DOkPG) ((case-lambda ((g$t$15273$1DOkPG) ((case-lambda ((g$ls/false$15274$1DOkPG) (if (if g$ls/false$15274$1DOkPG (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15274$1DOkPG)) '#f) (apply (case-lambda (() '#f)) g$ls/false$15274$1DOkPG) (g$syntax-violation$9501$1DOkPG '#f '"invalid syntax" g$t$15273$1DOkPG)))) ((case-lambda ((g$x$15275$1DOkPG) '())) g$t$15273$1DOkPG)))) g$t$15267$1DOkPG)))) ((case-lambda ((g$x$15276$1DOkPG) (if (g$syntax-pair?$9174$1DOkPG g$x$15276$1DOkPG) (begin '#f ((case-lambda ((g$q$15277$1DOkPG) (if g$q$15277$1DOkPG (begin '#f ((case-lambda ((g$r$15278$1DOkPG) (if g$r$15278$1DOkPG (begin '#f (append g$q$15277$1DOkPG g$r$15278$1DOkPG)) '#f))) ((case-lambda ((g$x$15279$1DOkPG) (list g$x$15279$1DOkPG))) (g$syntax-cdr$9179$1DOkPG g$x$15276$1DOkPG)))) '#f))) ((case-lambda ((g$x$15280$1DOkPG) (list g$x$15280$1DOkPG))) (g$syntax-car$9178$1DOkPG g$x$15276$1DOkPG)))) '#f))) g$t$15267$1DOkPG)))) g$t$15263$1DOkPG)))) ((case-lambda ((g$x$15281$1DOkPG) (list g$x$15281$1DOkPG))) g$t$15263$1DOkPG)))) g$form$15259$1DOkPG) (assertion-violation 'syntax-violation '"invalid who argument" g$who$15257$1DOkPG)))))))) (g$syntax-violation$9501$1DOkPG g$syntax-violation$15555$1DOkPG (case-lambda ((g$who$15282$1DOkPG g$msg$15283$1DOkPG g$form$15284$1DOkPG) (g$syntax-violation$9501$1DOkPG g$who$15282$1DOkPG g$msg$15283$1DOkPG g$form$15284$1DOkPG '#f)) ((g$who$15285$1DOkPG g$msg$15286$1DOkPG g$form$15287$1DOkPG g$subform$15288$1DOkPG) (g$syntax-violation*$9500$1DOkPG g$who$15285$1DOkPG g$msg$15286$1DOkPG g$form$15287$1DOkPG (g$make-syntax-violation$8192$1DOkPG (g$syntax->datum$9504$1DOkPG g$form$15287$1DOkPG) (g$syntax->datum$9504$1DOkPG g$subform$15288$1DOkPG)))))) (g$identifier?$9502$1DOkPG g$identifier?$15556$1DOkPG (case-lambda ((g$x$15289$1DOkPG) (g$id?$9181$1DOkPG g$x$15289$1DOkPG)))) (g$datum->syntax$9503$1DOkPG g$datum->syntax$15557$1DOkPG (case-lambda ((g$id$15290$1DOkPG g$datum$15291$1DOkPG) (if (g$id?$9181$1DOkPG g$id$15290$1DOkPG) (g$datum->stx$9164$1DOkPG g$id$15290$1DOkPG g$datum$15291$1DOkPG) (assertion-violation 'datum->syntax '"not an identifier" g$id$15290$1DOkPG))))) (g$syntax->datum$9504$1DOkPG g$syntax->datum$15558$1DOkPG (case-lambda ((g$x$15292$1DOkPG) (g$stx->datum$9192$1DOkPG g$x$15292$1DOkPG)))) (g$compile-r6rs-top-level$9505$1DOkPG g$compile-r6rs-top-level$15559$1DOkPG (case-lambda ((g$x*$15293$1DOkPG) (call-with-values (case-lambda (() (g$top-level-expander$9469$1DOkPG g$x*$15293$1DOkPG))) (case-lambda ((g$lib*$15296$1DOkPG g$invoke-code$15297$1DOkPG) ((case-lambda ((g$invoke-code$15298$1DOkPG g$lib*$15299$1DOkPG) (case-lambda (() (begin (for-each g$invoke-library$9000$1DOkPG g$lib*$15299$1DOkPG) (eval-core (g$expanded->core$8702$1DOkPG g$invoke-code$15298$1DOkPG))))))) g$invoke-code$15297$1DOkPG g$lib*$15296$1DOkPG))))))) (g$interaction-library$9506$1DOkPG g$interaction-library$15560$1DOkPG (g$make-parameter$8657$1DOkPG '#f)) (g$interaction-sym->label$9507$1DOkPG g$interaction-sym->label$15561$1DOkPG (case-lambda ((g$sym$15300$1DOkPG) ((case-lambda ((g$t$15301$1DOkPG) (if g$t$15301$1DOkPG ((case-lambda ((g$lib$15302$1DOkPG) ((case-lambda ((g$t$15303$1DOkPG) (if g$t$15303$1DOkPG (cdr g$t$15303$1DOkPG) ((case-lambda ((g$subst$15304$1DOkPG) ((case-lambda ((g$t$15305$1DOkPG) (if g$t$15305$1DOkPG ((case-lambda ((g$sym/lab$15306$1DOkPG) ((case-lambda ((g$label$15307$1DOkPG) (begin (g$extend-library-subst!$8997$1DOkPG g$lib$15302$1DOkPG g$sym$15300$1DOkPG g$label$15307$1DOkPG) g$label$15307$1DOkPG))) (cdr g$sym/lab$15306$1DOkPG)))) g$t$15305$1DOkPG) ((case-lambda ((g$label$15308$1DOkPG) (begin (g$extend-library-subst!$8997$1DOkPG g$lib$15302$1DOkPG g$sym$15300$1DOkPG g$label$15308$1DOkPG) (g$extend-library-env!$8998$1DOkPG g$lib$15302$1DOkPG g$label$15308$1DOkPG (cons 'global (cons g$lib$15302$1DOkPG (g$gen-global$9129$1DOkPG g$sym$15300$1DOkPG)))) g$label$15308$1DOkPG))) (g$gen-label$9130$1DOkPG g$sym$15300$1DOkPG))))) (assq g$sym$15300$1DOkPG g$subst$15304$1DOkPG)))) (if (g$library-exists?$8992$1DOkPG '(ironscheme)) (g$library-subst$8955$1DOkPG (g$find-library-by-name$8991$1DOkPG '(ironscheme))) '()))))) (assq g$sym$15300$1DOkPG (g$library-subst$8955$1DOkPG g$lib$15302$1DOkPG))))) g$t$15301$1DOkPG) '#f))) (g$interaction-library$9506$1DOkPG))))) (g$eval-top-level$9508$1DOkPG g$eval-top-level$15562$1DOkPG (case-lambda ((g$x$15309$1DOkPG) (letrec* ((g$eval-binding$15310$1DOkPG (case-lambda ((g$x$15336$1DOkPG) ((case-lambda ((g$loc$15337$1DOkPG g$expr$15338$1DOkPG) (if g$loc$15337$1DOkPG (set-symbol-value! g$loc$15337$1DOkPG ((case-lambda ((g$g$15339$1DOkPG) (eval-core (g$expanded->core$8702$1DOkPG (list (g$build-lambda$9115$1DOkPG '#f (list g$g$15339$1DOkPG) g$g$15339$1DOkPG) g$expr$15338$1DOkPG))))) (gensym g$loc$15337$1DOkPG))) (eval-core (g$expanded->core$8702$1DOkPG g$expr$15338$1DOkPG))))) (car g$x$15336$1DOkPG) (cdr g$x$15336$1DOkPG)))))) ((case-lambda ((g$rtc$15311$1DOkPG g$itc$15312$1DOkPG g$vtc$15313$1DOkPG) ((case-lambda ((g$init*$15314$1DOkPG) (begin (for-each g$invoke-library$9000$1DOkPG (g$rtc$15311$1DOkPG)) (if (null? g$init*$15314$1DOkPG) (void) (begin (for-each g$eval-binding$15310$1DOkPG (reverse (cdr g$init*$15314$1DOkPG))) (g$eval-binding$15310$1DOkPG (car g$init*$15314$1DOkPG))))))) ((case-lambda ((g$inv-collector$15323$1DOkPG g$vis-collector$15324$1DOkPG g$imp-collector$15325$1DOkPG g$interaction-library$15326$1DOkPG g$inv-collector$15327$1DOkPG g$vis-collector$15328$1DOkPG g$imp-collector$15329$1DOkPG g$interaction-library$15330$1DOkPG) ((case-lambda ((g$swap$15331$1DOkPG) (dynamic-wind g$swap$15331$1DOkPG (case-lambda (() (g$chi-top*$9454$1DOkPG (list (g$mkstx$9169$1DOkPG g$x$15309$1DOkPG g$top-mark*$9126$1DOkPG '() '())) '()))) g$swap$15331$1DOkPG))) (case-lambda (() (begin ((case-lambda ((g$t$15332$1DOkPG) (begin (g$inv-collector$15323$1DOkPG g$inv-collector$15327$1DOkPG) (set! g$inv-collector$15327$1DOkPG g$t$15332$1DOkPG)))) (g$inv-collector$15323$1DOkPG)) ((case-lambda ((g$t$15333$1DOkPG) (begin (g$vis-collector$15324$1DOkPG g$vis-collector$15328$1DOkPG) (set! g$vis-collector$15328$1DOkPG g$t$15333$1DOkPG)))) (g$vis-collector$15324$1DOkPG)) ((case-lambda ((g$t$15334$1DOkPG) (begin (g$imp-collector$15325$1DOkPG g$imp-collector$15329$1DOkPG) (set! g$imp-collector$15329$1DOkPG g$t$15334$1DOkPG)))) (g$imp-collector$15325$1DOkPG)) ((case-lambda ((g$t$15335$1DOkPG) (begin (g$interaction-library$15326$1DOkPG g$interaction-library$15330$1DOkPG) (set! g$interaction-library$15330$1DOkPG g$t$15335$1DOkPG)))) (g$interaction-library$15326$1DOkPG)))))))) g$inv-collector$9462$1DOkPG g$vis-collector$9463$1DOkPG g$imp-collector$9464$1DOkPG g$interaction-library$9506$1DOkPG g$rtc$15311$1DOkPG g$vtc$15313$1DOkPG g$itc$15312$1DOkPG (g$find-library-by-name$8991$1DOkPG '(ironscheme interaction)))))) (g$make-collector$9461$1DOkPG) (g$make-collector$9461$1DOkPG) (g$make-collector$9461$1DOkPG))))))) (g$current-library-expander$8988$1DOkPG g$library-expander$9488$1DOkPG))
(library-letrec* () (begin (g$current-primitive-locations$8698$1DOkPG (case-lambda ((g$x$15601$1DOkPG) ((case-lambda ((g$t$15602$1DOkPG) (if g$t$15602$1DOkPG (cdr g$t$15602$1DOkPG) '#f))) (assq g$x$15601$1DOkPG '((ellipsis-map . g$ellipsis-map$15479$1DOkPG) (ironscheme-build . g$ironscheme-build$8562$1DOkPG) (syntax-error . g$syntax-error$15552$1DOkPG) (syntax-dispatch . g$syntax-dispatch$15476$1DOkPG) (compile->closure . g$compile->closure$15599$1DOkPG) (compile . g$compile$15598$1DOkPG) (load . g$load$15597$1DOkPG) (make-variable-transformer . g$make-variable-transformer$15417$1DOkPG) (identifier? . g$identifier?$15556$1DOkPG) (generate-temporaries . g$generate-temporaries$15548$1DOkPG) (free-identifier=? . g$free-identifier=?$15549$1DOkPG) (syntax->datum . g$syntax->datum$15558$1DOkPG) (datum->syntax . g$datum->syntax$15557$1DOkPG) (bound-identifier=? . g$bound-identifier=?$15550$1DOkPG) (delete-file . g$delete-file$7791$1DOkPG) (file-exists? . g$file-exists?$7790$1DOkPG) (hashtable-equivalence-function . g$hashtable-equivalence-function$7719$1DOkPG) (hashtable-hash-function . g$hashtable-hash-function$7720$1DOkPG) (make-eqv-hashtable . g$make-eqv-hashtable$7711$1DOkPG) (make-eq-hashtable . g$make-eq-hashtable$7710$1DOkPG) (hashtable-update! . g$hashtable-update!$7717$1DOkPG) (hashtable-size . g$hashtable-size$7712$1DOkPG) (hashtable-set! . g$hashtable-set!$7714$1DOkPG) (hashtable-ref . g$hashtable-ref$7713$1DOkPG) (hashtable-delete! . g$hashtable-delete!$7715$1DOkPG) (hashtable-contains? . g$hashtable-contains?$7716$1DOkPG) (hashtable-clear! . g$hashtable-clear!$7718$1DOkPG) (open-string-output-port . g$open-string-output-port$8560$1DOkPG) (make-i/o-write-error . g$make-i/o-write-error$8489$1DOkPG) (make-i/o-read-error . g$make-i/o-read-error$8483$1DOkPG) (make-i/o-port-error . g$make-i/o-port-error$8535$1DOkPG) (make-i/o-invalid-position-error . g$make-i/o-invalid-position-error$8495$1DOkPG) (make-i/o-filename-error . g$make-i/o-filename-error$8503$1DOkPG) (make-i/o-file-protection-error . g$make-i/o-file-protection-error$8511$1DOkPG) (make-i/o-file-is-read-only-error . g$make-i/o-file-is-read-only-error$8517$1DOkPG) (make-i/o-file-does-not-exist-error . g$make-i/o-file-does-not-exist-error$8529$1DOkPG) (make-i/o-file-already-exists-error . g$make-i/o-file-already-exists-error$8523$1DOkPG) (make-i/o-error . g$make-i/o-error$8477$1DOkPG) (make-i/o-encoding-error . g$make-i/o-encoding-error$8549$1DOkPG) (make-i/o-decoding-error . g$make-i/o-decoding-error$8543$1DOkPG) (i/o-write-error? . g$i/o-write-error?$8490$1DOkPG) (i/o-read-error? . g$i/o-read-error?$8484$1DOkPG) (i/o-port-error? . g$i/o-port-error?$8537$1DOkPG) (i/o-invalid-position-error? . g$i/o-invalid-position-error?$8497$1DOkPG) (i/o-filename-error? . g$i/o-filename-error?$8505$1DOkPG) (i/o-file-protection-error? . g$i/o-file-protection-error?$8512$1DOkPG) (i/o-file-is-read-only-error? . g$i/o-file-is-read-only-error?$8518$1DOkPG) (i/o-file-does-not-exist-error? . g$i/o-file-does-not-exist-error?$8530$1DOkPG) (i/o-file-already-exists-error? . g$i/o-file-already-exists-error?$8524$1DOkPG) (i/o-error? . g$i/o-error?$8478$1DOkPG) (i/o-error-port . g$i/o-error-port$8538$1DOkPG) (i/o-error-filename . g$i/o-error-filename$8506$1DOkPG) (i/o-encoding-error? . g$i/o-encoding-error?$8551$1DOkPG) (i/o-encoding-error-char . g$i/o-encoding-error-char$8552$1DOkPG) (i/o-decoding-error? . g$i/o-decoding-error?$8544$1DOkPG) (scheme-report-environment . g$scheme-report-environment$15539$1DOkPG) (quotient . g$quotient$8216$1DOkPG) (null-environment . g$null-environment$15538$1DOkPG) (remainder . g$remainder$8217$1DOkPG) (modulo . g$modulo$8218$1DOkPG) (remove . g$remove$7871$1DOkPG) (remv . g$remv$7872$1DOkPG) (remq . g$remq$7873$1DOkPG) (exists . g$exists$7867$1DOkPG) (for-all . g$for-all$7866$1DOkPG) (fold-right . g$fold-right$7870$1DOkPG) (fold-left . g$fold-left$7869$1DOkPG) (cons* . g$cons*$7868$1DOkPG) (eval . g$eval$15541$1DOkPG) (environment . g$environment$15537$1DOkPG) (who-condition? . g$who-condition?$8168$1DOkPG) (warning? . g$warning?$8129$1DOkPG) (violation? . g$violation?$8147$1DOkPG) (undefined-violation? . g$undefined-violation?$8203$1DOkPG) (syntax-violation? . g$syntax-violation?$8195$1DOkPG) (syntax-violation-subform . g$syntax-violation-subform$8197$1DOkPG) (syntax-violation-form . g$syntax-violation-form$8196$1DOkPG) (syntax-violation . g$syntax-violation$15555$1DOkPG) (serious-condition? . g$serious-condition?$8135$1DOkPG) (non-continuable-violation? . g$non-continuable-violation?$8175$1DOkPG) (message-condition? . g$message-condition?$8122$1DOkPG) (make-who-condition . g$make-who-condition$8166$1DOkPG) (make-warning . g$make-warning$8128$1DOkPG) (make-violation . g$make-violation$8146$1DOkPG) (make-undefined-violation . g$make-undefined-violation$8202$1DOkPG) (make-syntax-violation . g$make-syntax-violation$8192$1DOkPG) (make-serious-condition . g$make-serious-condition$8134$1DOkPG) (make-non-continuable-violation . g$make-non-continuable-violation$8174$1DOkPG) (make-message-condition . g$make-message-condition$8120$1DOkPG) (make-lexical-violation . g$make-lexical-violation$8186$1DOkPG) (make-irritants-condition . g$make-irritants-condition$8158$1DOkPG) (make-implementation-restriction-violation . g$make-implementation-restriction-violation$8180$1DOkPG) (make-error . g$make-error$8140$1DOkPG) (make-assertion-violation . g$make-assertion-violation$8152$1DOkPG) (lexical-violation? . g$lexical-violation?$8187$1DOkPG) (irritants-condition? . g$irritants-condition?$8160$1DOkPG) (implementation-restriction-violation? . g$implementation-restriction-violation?$8181$1DOkPG) (error? . g$error?$8141$1DOkPG) (condition-who . g$condition-who$8169$1DOkPG) (condition-message . g$condition-message$8123$1DOkPG) (condition-irritants . g$condition-irritants$8161$1DOkPG) (assertion-violation? . g$assertion-violation?$8153$1DOkPG) (native-endianness . g$native-endianness$7985$1DOkPG) (bytevector-u64-set! . g$bytevector-u64-set!$8006$1DOkPG) (bytevector-u64-ref . g$bytevector-u64-ref$8002$1DOkPG) (bytevector-u64-native-set! . g$bytevector-u64-native-set!$8008$1DOkPG) (bytevector-u64-native-ref . g$bytevector-u64-native-ref$8004$1DOkPG) (bytevector-u32-set! . g$bytevector-u32-set!$7998$1DOkPG) (bytevector-u32-ref . g$bytevector-u32-ref$7994$1DOkPG) (bytevector-u32-native-set! . g$bytevector-u32-native-set!$8000$1DOkPG) (bytevector-u32-native-ref . g$bytevector-u32-native-ref$7996$1DOkPG) (bytevector-u16-set! . g$bytevector-u16-set!$7990$1DOkPG) (bytevector-u16-ref . g$bytevector-u16-ref$7986$1DOkPG) (bytevector-u16-native-set! . g$bytevector-u16-native-set!$7992$1DOkPG) (bytevector-u16-native-ref . g$bytevector-u16-native-ref$7988$1DOkPG) (bytevector-s64-set! . g$bytevector-s64-set!$8007$1DOkPG) (bytevector-s64-ref . g$bytevector-s64-ref$8003$1DOkPG) (bytevector-s64-native-set! . g$bytevector-s64-native-set!$8009$1DOkPG) (bytevector-s64-native-ref . g$bytevector-s64-native-ref$8005$1DOkPG) (bytevector-s32-set! . g$bytevector-s32-set!$7999$1DOkPG) (bytevector-s32-ref . g$bytevector-s32-ref$7995$1DOkPG) (bytevector-s32-native-set! . g$bytevector-s32-native-set!$8001$1DOkPG) (bytevector-s32-native-ref . g$bytevector-s32-native-ref$7997$1DOkPG) (bytevector-s16-set! . g$bytevector-s16-set!$7991$1DOkPG) (bytevector-s16-ref . g$bytevector-s16-ref$7987$1DOkPG) (bytevector-s16-native-set! . g$bytevector-s16-native-set!$7993$1DOkPG) (bytevector-s16-native-ref . g$bytevector-s16-native-ref$7989$1DOkPG) (bytevector-ieee-single-native-set! . g$bytevector-ieee-single-native-set!$8012$1DOkPG) (bytevector-ieee-single-native-ref . g$bytevector-ieee-single-native-ref$8010$1DOkPG) (bytevector-ieee-double-native-set! . g$bytevector-ieee-double-native-set!$8013$1DOkPG) (bytevector-ieee-double-native-ref . g$bytevector-ieee-double-native-ref$8011$1DOkPG) (no-nans-violation? . g$no-nans-violation?$8392$1DOkPG) (no-infinities-violation? . g$no-infinities-violation?$8386$1DOkPG) (make-no-nans-violation . g$make-no-nans-violation$8391$1DOkPG) (make-no-infinities-violation . g$make-no-infinities-violation$8385$1DOkPG) (fxrotate-bit-field . g$fxrotate-bit-field$8368$1DOkPG) (fxif . g$fxif$8362$1DOkPG) (fxcopy-bit-field . g$fxcopy-bit-field$8365$1DOkPG) (fxcopy-bit . g$fxcopy-bit$8363$1DOkPG) (fxbit-field . g$fxbit-field$8364$1DOkPG) (fxarithmetic-shift-right . g$fxarithmetic-shift-right$8367$1DOkPG) (fxarithmetic-shift-left . g$fxarithmetic-shift-left$8366$1DOkPG) (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$8313$1DOkPG) (bitwise-reverse-bit-field . g$bitwise-reverse-bit-field$8314$1DOkPG) (bitwise-if . g$bitwise-if$8307$1DOkPG) (bitwise-copy-bit-field . g$bitwise-copy-bit-field$8310$1DOkPG) (bitwise-copy-bit . g$bitwise-copy-bit$8308$1DOkPG) (bitwise-arithmetic-shift-right . g$bitwise-arithmetic-shift-right$8312$1DOkPG) (bitwise-arithmetic-shift-left . g$bitwise-arithmetic-shift-left$8311$1DOkPG) (rationalize . g$rationalize$7473$1DOkPG) (cddddr . g$cddddr$7472$1DOkPG) (cdddar . g$cdddar$7471$1DOkPG) (cddadr . g$cddadr$7470$1DOkPG) (cddaar . g$cddaar$7469$1DOkPG) (cdaddr . g$cdaddr$7468$1DOkPG) (cdadar . g$cdadar$7467$1DOkPG) (cdaadr . g$cdaadr$7466$1DOkPG) (cdaaar . g$cdaaar$7465$1DOkPG) (cadddr . g$cadddr$7464$1DOkPG) (caddar . g$caddar$7463$1DOkPG) (cadadr . g$cadadr$7462$1DOkPG) (cadaar . g$cadaar$7461$1DOkPG) (caaddr . g$caaddr$7460$1DOkPG) (caadar . g$caadar$7459$1DOkPG) (caaadr . g$caaadr$7458$1DOkPG) (caaaar . g$caaaar$7457$1DOkPG) (cdddr . g$cdddr$7456$1DOkPG) (cddar . g$cddar$7455$1DOkPG) (cdadr . g$cdadr$7454$1DOkPG) (cdaar . g$cdaar$7453$1DOkPG) (caddr . g$caddr$7452$1DOkPG) (cadar . g$cadar$7451$1DOkPG) (caadr . g$caadr$7450$1DOkPG) (caaar . g$caaar$7449$1DOkPG) (cddr . g$cddr$7448$1DOkPG) (cdar . g$cdar$7447$1DOkPG) (cadr . g$cadr$7446$1DOkPG) (caar . g$caar$7445$1DOkPG) (make-parameter . g$make-parameter$8657$1DOkPG) (library-path . g$library-path$8980$1DOkPG) (library-extensions . g$library-extensions$8981$1DOkPG) (installed-libraries . g$installed-libraries$9003$1DOkPG))))))) (g$install-library$8996$1DOkPG 'g$16611$1DOkPG '(ironscheme) '() '() '() '() '((tanh . g$16548$1DOkPG) (cosh . g$16547$1DOkPG) (sinh . g$16546$1DOkPG) (group-by . g$16545$1DOkPG) (make-guid . g$16544$1DOkPG) (unspecified? . g$16543$1DOkPG) (make-trace . g$16542$1DOkPG) (make-list . g$16541$1DOkPG) (last-pair . g$16540$1DOkPG) (ironscheme-build . g$9243$1DOkPG) (set-symbol-value! . g$16524$1DOkPG) (symbol-value . g$16523$1DOkPG) (gensym . g$16522$1DOkPG) (void . g$16521$1DOkPG) (compile->closure . g$15933$1DOkPG) (string-upcase . g$16516$1DOkPG) (string-titlecase . g$16515$1DOkPG) (string-normalize-nfkd . g$16514$1DOkPG) (string-normalize-nfkc . g$16513$1DOkPG) (string-normalize-nfd . g$16512$1DOkPG) (string-normalize-nfc . g$16511$1DOkPG) (string-foldcase . g$16510$1DOkPG) (string-downcase . g$16509$1DOkPG) (string-ci>? . g$16508$1DOkPG) (string-ci>=? . g$16507$1DOkPG) (string-ci=? . g$16506$1DOkPG) (string-ci<? . g$16505$1DOkPG) (string-ci<=? . g$16504$1DOkPG) (char-whitespace? . g$16503$1DOkPG) (char-upper-case? . g$16502$1DOkPG) (char-title-case? . g$16501$1DOkPG) (char-numeric? . g$16500$1DOkPG) (char-lower-case? . g$16499$1DOkPG) (char-general-category . g$16498$1DOkPG) (char-upcase . g$16497$1DOkPG) (char-titlecase . g$16496$1DOkPG) (char-foldcase . g$16495$1DOkPG) (char-downcase . g$16494$1DOkPG) (char-ci>? . g$16493$1DOkPG) (char-ci>=? . g$16492$1DOkPG) (char-ci=? . g$16491$1DOkPG) (char-ci<? . g$16490$1DOkPG) (char-ci<=? . g$16489$1DOkPG) (char-alphabetic? . g$16488$1DOkPG) (make-variable-transformer . g$9943$1DOkPG) (identifier? . g$10351$1DOkPG) (generate-temporaries . g$10343$1DOkPG) (free-identifier=? . g$10344$1DOkPG) (syntax->datum . g$10353$1DOkPG) (datum->syntax . g$10352$1DOkPG) (bound-identifier=? . g$10345$1DOkPG) (record-type-descriptor? . g$16487$1DOkPG) (record-predicate . g$16486$1DOkPG) (record-mutator . g$16485$1DOkPG) (record-constructor . g$16484$1DOkPG) (record-accessor . g$16483$1DOkPG) (make-record-type-descriptor . g$16482$1DOkPG) (make-record-constructor-descriptor . g$16481$1DOkPG) (record? . g$16480$1DOkPG) (record-type-uid . g$16479$1DOkPG) (record-type-sealed? . g$16478$1DOkPG) (record-type-parent . g$16477$1DOkPG) (record-type-opaque? . g$16476$1DOkPG) (record-type-name . g$16475$1DOkPG) (record-type-generative? . g$16474$1DOkPG) (record-type-field-names . g$16473$1DOkPG) (record-rtd . g$16472$1DOkPG) (record-field-mutable? . g$16471$1DOkPG) (delete-file . g$8413$1DOkPG) (file-exists? . g$8412$1DOkPG) (vector-sort! . g$16470$1DOkPG) (vector-sort . g$16469$1DOkPG) (list-sort . g$16468$1DOkPG) (symbol-hash . g$16467$1DOkPG) (string-ci-hash . g$16466$1DOkPG) (string-hash . g$16465$1DOkPG) (equal-hash . g$16464$1DOkPG) (hashtable-equivalence-function . g$8386$1DOkPG) (make-hashtable . g$16463$1DOkPG) (hashtable-hash-function . g$8387$1DOkPG) (make-eqv-hashtable . g$8378$1DOkPG) (make-eq-hashtable . g$8377$1DOkPG) (hashtable? . g$16462$1DOkPG) (hashtable-update! . g$8384$1DOkPG) (hashtable-size . g$8379$1DOkPG) (hashtable-set! . g$8381$1DOkPG) (hashtable-ref . g$8380$1DOkPG) (hashtable-mutable? . g$16461$1DOkPG) (hashtable-keys . g$16460$1DOkPG) (hashtable-entries . g$16459$1DOkPG) (hashtable-delete! . g$8382$1DOkPG) (hashtable-copy . g$16458$1DOkPG) (hashtable-contains? . g$8383$1DOkPG) (hashtable-clear! . g$8385$1DOkPG) (call-with-output-file . g$16457$1DOkPG) (call-with-input-file . g$16456$1DOkPG) (write-char . g$16455$1DOkPG) (write . g$16454$1DOkPG) (with-output-to-file . g$16453$1DOkPG) (with-input-from-file . g$16452$1DOkPG) (read-char . g$16451$1DOkPG) (read . g$16450$1DOkPG) (peek-char . g$16449$1DOkPG) (open-output-file . g$16448$1DOkPG) (open-input-file . g$16447$1DOkPG) (newline . g$16446$1DOkPG) (display . g$16445$1DOkPG) (close-output-port . g$16444$1DOkPG) (close-input-port . g$16443$1DOkPG) (eof-object? . g$16442$1DOkPG) (eof-object . g$16441$1DOkPG) (current-error-port . g$16440$1DOkPG) (current-output-port . g$16439$1DOkPG) (current-input-port . g$16438$1DOkPG) (output-port? . g$16437$1DOkPG) (input-port? . g$16436$1DOkPG) (utf-8-codec . g$16435$1DOkPG) (utf-16-codec . g$16434$1DOkPG) (transcoder-error-handling-mode . g$16433$1DOkPG) (transcoder-eol-style . g$16432$1DOkPG) (transcoder-codec . g$16431$1DOkPG) (transcoded-port . g$16430$1DOkPG) (textual-port? . g$16429$1DOkPG) (string->bytevector . g$16428$1DOkPG) (standard-output-port . g$16427$1DOkPG) (standard-input-port . g$16426$1DOkPG) (standard-error-port . g$16425$1DOkPG) (set-port-position! . g$16424$1DOkPG) (put-u8 . g$16423$1DOkPG) (put-string . g$16422$1DOkPG) (put-datum . g$16421$1DOkPG) (put-char . g$16420$1DOkPG) (put-bytevector . g$16419$1DOkPG) (port? . g$16418$1DOkPG) (port-transcoder . g$16417$1DOkPG) (port-position . g$16416$1DOkPG) (port-has-set-port-position!? . g$16415$1DOkPG) (port-has-port-position? . g$16414$1DOkPG) (port-eof? . g$16413$1DOkPG) (output-port-buffer-mode . g$16412$1DOkPG) (open-string-output-port . g$9235$1DOkPG) (open-string-input-port . g$16411$1DOkPG) (open-file-output-port . g$16410$1DOkPG) (open-file-input/output-port . g$16409$1DOkPG) (open-file-input-port . g$16408$1DOkPG) (open-bytevector-output-port . g$16407$1DOkPG) (open-bytevector-input-port . g$16406$1DOkPG) (native-transcoder . g$16405$1DOkPG) (native-eol-style . g$16404$1DOkPG) (make-transcoder . g$16403$1DOkPG) (latin-1-codec . g$16402$1DOkPG) (make-i/o-write-error . g$9092$1DOkPG) (make-i/o-read-error . g$9078$1DOkPG) (make-i/o-port-error . g$9197$1DOkPG) (make-i/o-invalid-position-error . g$9107$1DOkPG) (make-i/o-filename-error . g$9124$1DOkPG) (make-i/o-file-protection-error . g$9140$1DOkPG) (make-i/o-file-is-read-only-error . g$9154$1DOkPG) (make-i/o-file-does-not-exist-error . g$9182$1DOkPG) (make-i/o-file-already-exists-error . g$9168$1DOkPG) (make-i/o-error . g$9064$1DOkPG) (make-i/o-encoding-error . g$9228$1DOkPG) (make-i/o-decoding-error . g$9213$1DOkPG) (make-custom-textual-output-port . g$16401$1DOkPG) (make-custom-textual-input/output-port . g$16400$1DOkPG) (make-custom-textual-input-port . g$16399$1DOkPG) (make-custom-binary-output-port . g$16398$1DOkPG) (make-custom-binary-input/output-port . g$16397$1DOkPG) (make-custom-binary-input-port . g$16396$1DOkPG) (make-bytevector . g$16395$1DOkPG) (lookahead-u8 . g$16394$1DOkPG) (lookahead-char . g$16393$1DOkPG) (i/o-write-error? . g$9093$1DOkPG) (i/o-read-error? . g$9079$1DOkPG) (i/o-port-error? . g$9199$1DOkPG) (i/o-invalid-position-error? . g$9109$1DOkPG) (i/o-filename-error? . g$9126$1DOkPG) (i/o-file-protection-error? . g$9141$1DOkPG) (i/o-file-is-read-only-error? . g$9155$1DOkPG) (i/o-file-does-not-exist-error? . g$9183$1DOkPG) (i/o-file-already-exists-error? . g$9169$1DOkPG) (i/o-error? . g$9065$1DOkPG) (i/o-error-port . g$9200$1DOkPG) (i/o-error-filename . g$9127$1DOkPG) (i/o-encoding-error? . g$9230$1DOkPG) (i/o-encoding-error-char . g$9231$1DOkPG) (i/o-decoding-error? . g$9214$1DOkPG) (get-u8 . g$16392$1DOkPG) (get-string-n! . g$16391$1DOkPG) (get-string-n . g$16390$1DOkPG) (get-string-all . g$16389$1DOkPG) (get-line . g$16388$1DOkPG) (get-datum . g$16387$1DOkPG) (get-char . g$16386$1DOkPG) (get-bytevector-some . g$16385$1DOkPG) (get-bytevector-n! . g$16384$1DOkPG) (get-bytevector-n . g$16383$1DOkPG) (get-bytevector-all . g$16382$1DOkPG) (flush-output-port . g$16381$1DOkPG) (close-port . g$16380$1DOkPG) (call-with-string-output-port . g$16379$1DOkPG) (call-with-port . g$16378$1DOkPG) (call-with-bytevector-output-port . g$16377$1DOkPG) (bytevector->string . g$16376$1DOkPG) (buffer-mode? . g$16375$1DOkPG) (binary-port? . g$16374$1DOkPG) (scheme-report-environment . g$10334$1DOkPG) (quotient . g$8857$1DOkPG) (null-environment . g$10333$1DOkPG) (remainder . g$8858$1DOkPG) (modulo . g$8859$1DOkPG) (inexact->exact . g$16373$1DOkPG) (force . g$16372$1DOkPG) (exact->inexact . g$16371$1DOkPG) (exit . g$16370$1DOkPG) (command-line . g$16369$1DOkPG) (string-fill! . g$16368$1DOkPG) (string-set! . g$16367$1DOkPG) (set-cdr! . g$16366$1DOkPG) (set-car! . g$16365$1DOkPG) (remove . g$8484$1DOkPG) (remv . g$8485$1DOkPG) (remp . g$16364$1DOkPG) (remq . g$8486$1DOkPG) (partition . g$16363$1DOkPG) (memv . g$16362$1DOkPG) (memq . g$16361$1DOkPG) (memp . g$16360$1DOkPG) (member . g$16359$1DOkPG) (exists . g$8480$1DOkPG) (for-all . g$8479$1DOkPG) (fold-right . g$8483$1DOkPG) (fold-left . g$8482$1DOkPG) (find . g$16358$1DOkPG) (filter . g$16357$1DOkPG) (cons* . g$8481$1DOkPG) (assv . g$16356$1DOkPG) (assq . g$16355$1DOkPG) (assp . g$16354$1DOkPG) (assoc . g$16353$1DOkPG) (with-exception-handler . g$16352$1DOkPG) (raise-continuable . g$16351$1DOkPG) (raise . g$16350$1DOkPG) (eval . g$10336$1DOkPG) (environment . g$10332$1DOkPG) (make-enumeration . g$16349$1DOkPG) (enum-set=? . g$16348$1DOkPG) (enum-set-universe . g$16347$1DOkPG) (enum-set-union . g$16346$1DOkPG) (enum-set-subset? . g$16345$1DOkPG) (enum-set-projection . g$16344$1DOkPG) (enum-set-member? . g$16343$1DOkPG) (enum-set-intersection . g$16342$1DOkPG) (enum-set-indexer . g$16341$1DOkPG) (enum-set-difference . g$16340$1DOkPG) (enum-set-constructor . g$16339$1DOkPG) (enum-set-complement . g$16338$1DOkPG) (enum-set->list . g$16337$1DOkPG) (who-condition? . g$8774$1DOkPG) (warning? . g$8685$1DOkPG) (violation? . g$8727$1DOkPG) (undefined-violation? . g$8851$1DOkPG) (syntax-violation? . g$8835$1DOkPG) (syntax-violation-subform . g$8837$1DOkPG) (syntax-violation-form . g$8836$1DOkPG) (syntax-violation . g$10350$1DOkPG) (simple-conditions . g$16336$1DOkPG) (serious-condition? . g$8699$1DOkPG) (non-continuable-violation? . g$8789$1DOkPG) (message-condition? . g$8670$1DOkPG) (make-who-condition . g$8772$1DOkPG) (make-warning . g$8684$1DOkPG) (make-violation . g$8726$1DOkPG) (make-undefined-violation . g$8850$1DOkPG) (make-syntax-violation . g$8832$1DOkPG) (make-serious-condition . g$8698$1DOkPG) (make-non-continuable-violation . g$8788$1DOkPG) (make-message-condition . g$8668$1DOkPG) (make-lexical-violation . g$8816$1DOkPG) (make-irritants-condition . g$8755$1DOkPG) (make-implementation-restriction-violation . g$8802$1DOkPG) (make-error . g$8712$1DOkPG) (make-assertion-violation . g$8740$1DOkPG) (lexical-violation? . g$8817$1DOkPG) (irritants-condition? . g$8757$1DOkPG) (implementation-restriction-violation? . g$8803$1DOkPG) (error? . g$8713$1DOkPG) (condition-who . g$8775$1DOkPG) (condition-predicate . g$16335$1DOkPG) (condition-message . g$8671$1DOkPG) (condition-irritants . g$8758$1DOkPG) (condition-accessor . g$16334$1DOkPG) (condition . g$16333$1DOkPG) (assertion-violation? . g$8741$1DOkPG) (condition? . g$16332$1DOkPG) (utf32->string . g$16331$1DOkPG) (utf16->string . g$16330$1DOkPG) (utf8->string . g$16329$1DOkPG) (uint-list->bytevector . g$16328$1DOkPG) (u8-list->bytevector . g$16327$1DOkPG) (string->utf8 . g$16326$1DOkPG) (string->utf32 . g$16325$1DOkPG) (string->utf16 . g$16324$1DOkPG) (sint-list->bytevector . g$16323$1DOkPG) (native-endianness . g$8525$1DOkPG) (bytevector? . g$16322$1DOkPG) (bytevector=? . g$16321$1DOkPG) (bytevector-uint-set! . g$16320$1DOkPG) (bytevector-uint-ref . g$16319$1DOkPG) (bytevector-u8-set! . g$16318$1DOkPG) (bytevector-u8-ref . g$16317$1DOkPG) (bytevector-u64-set! . g$8546$1DOkPG) (bytevector-u64-ref . g$8542$1DOkPG) (bytevector-u64-native-set! . g$8548$1DOkPG) (bytevector-u64-native-ref . g$8544$1DOkPG) (bytevector-u32-set! . g$8538$1DOkPG) (bytevector-u32-ref . g$8534$1DOkPG) (bytevector-u32-native-set! . g$8540$1DOkPG) (bytevector-u32-native-ref . g$8536$1DOkPG) (bytevector-u16-set! . g$8530$1DOkPG) (bytevector-u16-ref . g$8526$1DOkPG) (bytevector-u16-native-set! . g$8532$1DOkPG) (bytevector-u16-native-ref . g$8528$1DOkPG) (bytevector-sint-set! . g$16316$1DOkPG) (bytevector-sint-ref . g$16315$1DOkPG) (bytevector-s8-set! . g$16314$1DOkPG) (bytevector-s8-ref . g$16313$1DOkPG) (bytevector-s64-set! . g$8547$1DOkPG) (bytevector-s64-ref . g$8543$1DOkPG) (bytevector-s64-native-set! . g$8549$1DOkPG) (bytevector-s64-native-ref . g$8545$1DOkPG) (bytevector-s32-set! . g$8539$1DOkPG) (bytevector-s32-ref . g$8535$1DOkPG) (bytevector-s32-native-set! . g$8541$1DOkPG) (bytevector-s32-native-ref . g$8537$1DOkPG) (bytevector-s16-set! . g$8531$1DOkPG) (bytevector-s16-ref . g$8527$1DOkPG) (bytevector-s16-native-set! . g$8533$1DOkPG) (bytevector-s16-native-ref . g$8529$1DOkPG) (bytevector-length . g$16312$1DOkPG) (bytevector-ieee-single-set! . g$16311$1DOkPG) (bytevector-ieee-single-ref . g$16310$1DOkPG) (bytevector-ieee-single-native-set! . g$8552$1DOkPG) (bytevector-ieee-single-native-ref . g$8550$1DOkPG) (bytevector-ieee-double-set! . g$16309$1DOkPG) (bytevector-ieee-double-ref . g$16308$1DOkPG) (bytevector-ieee-double-native-set! . g$8553$1DOkPG) (bytevector-ieee-double-native-ref . g$8551$1DOkPG) (bytevector-fill! . g$16307$1DOkPG) (bytevector-copy! . g$16306$1DOkPG) (bytevector-copy . g$16305$1DOkPG) (bytevector->uint-list . g$16304$1DOkPG) (bytevector->u8-list . g$16303$1DOkPG) (bytevector->sint-list . g$16302$1DOkPG) (no-nans-violation? . g$9050$1DOkPG) (no-infinities-violation? . g$9036$1DOkPG) (make-no-nans-violation . g$9049$1DOkPG) (make-no-infinities-violation . g$9035$1DOkPG) (real->flonum . g$16301$1DOkPG) (flzero? . g$16300$1DOkPG) (fltruncate . g$16299$1DOkPG) (fltan . g$16298$1DOkPG) (flsqrt . g$16297$1DOkPG) (flsin . g$16296$1DOkPG) (flround . g$16295$1DOkPG) (flpositive? . g$16294$1DOkPG) (flonum? . g$16293$1DOkPG) (flodd? . g$16292$1DOkPG) (flnumerator . g$16291$1DOkPG) (flnegative? . g$16290$1DOkPG) (flnan? . g$16289$1DOkPG) (flmod0 . g$16288$1DOkPG) (flmod . g$16287$1DOkPG) (flmin . g$16286$1DOkPG) (flmax . g$16285$1DOkPG) (fllog . g$16284$1DOkPG) (flinteger? . g$16283$1DOkPG) (flinfinite? . g$16282$1DOkPG) (flfloor . g$16281$1DOkPG) (flfinite? . g$16280$1DOkPG) (flexpt . g$16279$1DOkPG) (flexp . g$16278$1DOkPG) (fleven? . g$16277$1DOkPG) (fldiv0-and-mod0 . g$16276$1DOkPG) (fldiv0 . g$16275$1DOkPG) (fldiv-and-mod . g$16274$1DOkPG) (fldiv . g$16273$1DOkPG) (fldenominator . g$16272$1DOkPG) (flcos . g$16271$1DOkPG) (flceiling . g$16270$1DOkPG) (flatan . g$16269$1DOkPG) (flasin . g$16268$1DOkPG) (flacos . g$16267$1DOkPG) (flabs . g$16266$1DOkPG) (fl>? . g$16265$1DOkPG) (fl>=? . g$16264$1DOkPG) (fl=? . g$16263$1DOkPG) (fl<? . g$16262$1DOkPG) (fl<=? . g$16261$1DOkPG) (fl/ . g$16260$1DOkPG) (fl- . g$16259$1DOkPG) (fl+ . g$16258$1DOkPG) (fl* . g$16257$1DOkPG) (fixnum->flonum . g$16256$1DOkPG) (fxzero? . g$16255$1DOkPG) (fxxor . g$16254$1DOkPG) (fxrotate-bit-field . g$8981$1DOkPG) (fxreverse-bit-field . g$16253$1DOkPG) (fxpositive? . g$16252$1DOkPG) (fxodd? . g$16251$1DOkPG) (fxnot . g$16250$1DOkPG) (fxnegative? . g$16249$1DOkPG) (fxmod0 . g$16248$1DOkPG) (fxmod . g$16247$1DOkPG) (fxmin . g$16246$1DOkPG) (fxmax . g$16245$1DOkPG) (fxlength . g$16244$1DOkPG) (fxior . g$16243$1DOkPG) (fxif . g$8975$1DOkPG) (fxfirst-bit-set . g$16242$1DOkPG) (fxeven? . g$16241$1DOkPG) (fxdiv0-and-mod0 . g$16240$1DOkPG) (fxdiv0 . g$16239$1DOkPG) (fxdiv-and-mod . g$16238$1DOkPG) (fxdiv . g$16237$1DOkPG) (fxcopy-bit-field . g$8978$1DOkPG) (fxcopy-bit . g$8976$1DOkPG) (fxbit-set? . g$16236$1DOkPG) (fxbit-field . g$8977$1DOkPG) (fxbit-count . g$16235$1DOkPG) (fxarithmetic-shift-right . g$8980$1DOkPG) (fxarithmetic-shift-left . g$8979$1DOkPG) (fxarithmetic-shift . g$16234$1DOkPG) (fxand . g$16233$1DOkPG) (fx>? . g$16232$1DOkPG) (fx>=? . g$16231$1DOkPG) (fx=? . g$16230$1DOkPG) (fx<? . g$16229$1DOkPG) (fx<=? . g$16228$1DOkPG) (fx-/carry . g$16227$1DOkPG) (fx- . g$16226$1DOkPG) (fx+/carry . g$16225$1DOkPG) (fx+ . g$16224$1DOkPG) (fx*/carry . g$16223$1DOkPG) (fx* . g$16222$1DOkPG) (greatest-fixnum . g$16221$1DOkPG) (least-fixnum . g$16220$1DOkPG) (fixnum-width . g$16219$1DOkPG) (fixnum? . g$16218$1DOkPG) (bitwise-rotate-bit-field . g$8929$1DOkPG) (bitwise-reverse-bit-field . g$8930$1DOkPG) (bitwise-length . g$16217$1DOkPG) (bitwise-if . g$8923$1DOkPG) (bitwise-first-bit-set . g$16216$1DOkPG) (bitwise-copy-bit-field . g$8926$1DOkPG) (bitwise-copy-bit . g$8924$1DOkPG) (bitwise-bit-set? . g$16215$1DOkPG) (bitwise-bit-field . g$16214$1DOkPG) (bitwise-bit-count . g$16213$1DOkPG) (bitwise-xor . g$16212$1DOkPG) (bitwise-ior . g$16211$1DOkPG) (bitwise-and . g$16210$1DOkPG) (bitwise-not . g$16209$1DOkPG) (bitwise-arithmetic-shift-right . g$8928$1DOkPG) (bitwise-arithmetic-shift-left . g$8927$1DOkPG) (bitwise-arithmetic-shift . g$16208$1DOkPG) (zero? . g$16207$1DOkPG) (vector? . g$16206$1DOkPG) (vector-set! . g$16205$1DOkPG) (vector-ref . g$16204$1DOkPG) (vector-map . g$16203$1DOkPG) (vector-length . g$16202$1DOkPG) (vector-for-each . g$16201$1DOkPG) (vector-fill! . g$16200$1DOkPG) (vector->list . g$16199$1DOkPG) (vector . g$16198$1DOkPG) (values . g$16197$1DOkPG) (truncate . g$16196$1DOkPG) (tan . g$16195$1DOkPG) (symbol? . g$16194$1DOkPG) (symbol=? . g$16193$1DOkPG) (symbol->string . g$16192$1DOkPG) (substring . g$16191$1DOkPG) (string? . g$16190$1DOkPG) (string>? . g$16189$1DOkPG) (string>=? . g$16188$1DOkPG) (string=? . g$16187$1DOkPG) (string<? . g$16186$1DOkPG) (string<=? . g$16185$1DOkPG) (string-ref . g$16184$1DOkPG) (string-length . g$16183$1DOkPG) (string-for-each . g$16182$1DOkPG) (string-copy . g$16181$1DOkPG) (string-append . g$16180$1DOkPG) (string->symbol . g$16179$1DOkPG) (string->number . g$16178$1DOkPG) (string->list . g$16177$1DOkPG) (string . g$16176$1DOkPG) (sqrt . g$16175$1DOkPG) (sin . g$16174$1DOkPG) (round . g$16173$1DOkPG) (reverse . g$16172$1DOkPG) (real? . g$16171$1DOkPG) (real-valued? . g$16170$1DOkPG) (real-part . g$16169$1DOkPG) (rationalize . g$8028$1DOkPG) (rational? . g$16168$1DOkPG) (rational-valued? . g$16167$1DOkPG) (procedure? . g$16166$1DOkPG) (positive? . g$16165$1DOkPG) (pair? . g$16164$1DOkPG) (odd? . g$16163$1DOkPG) (numerator . g$16162$1DOkPG) (number? . g$16161$1DOkPG) (number->string . g$16160$1DOkPG) (null? . g$16159$1DOkPG) (not . g$16158$1DOkPG) (negative? . g$16157$1DOkPG) (nan? . g$16156$1DOkPG) (min . g$16155$1DOkPG) (max . g$16154$1DOkPG) (map . g$16153$1DOkPG) (make-vector . g$16152$1DOkPG) (make-string . g$16151$1DOkPG) (make-rectangular . g$16150$1DOkPG) (make-polar . g$16149$1DOkPG) (magnitude . g$16148$1DOkPG) (log . g$16147$1DOkPG) (list? . g$16146$1DOkPG) (list-tail . g$16145$1DOkPG) (list-ref . g$16144$1DOkPG) (list->vector . g$16143$1DOkPG) (list->string . g$16142$1DOkPG) (list . g$16141$1DOkPG) (length . g$16140$1DOkPG) (lcm . g$16139$1DOkPG) (integer? . g$16138$1DOkPG) (integer-valued? . g$16137$1DOkPG) (integer->char . g$16136$1DOkPG) (infinite? . g$16135$1DOkPG) (inexact? . g$16134$1DOkPG) (inexact . g$16133$1DOkPG) (imag-part . g$16132$1DOkPG) (gcd . g$16131$1DOkPG) (for-each . g$16130$1DOkPG) (floor . g$16129$1DOkPG) (finite? . g$16128$1DOkPG) (expt . g$16127$1DOkPG) (exp . g$16126$1DOkPG) (exact? . g$16125$1DOkPG) (exact-integer-sqrt . g$16124$1DOkPG) (exact . g$16123$1DOkPG) (even? . g$16122$1DOkPG) (error . g$16121$1DOkPG) (eqv? . g$16120$1DOkPG) (equal? . g$16119$1DOkPG) (eq? . g$16118$1DOkPG) (dynamic-wind . g$16117$1DOkPG) (div0-and-mod0 . g$16116$1DOkPG) (mod0 . g$16115$1DOkPG) (div0 . g$16114$1DOkPG) (div-and-mod . g$16113$1DOkPG) (mod . g$16112$1DOkPG) (div . g$16111$1DOkPG) (denominator . g$16110$1DOkPG) (cos . g$16109$1DOkPG) (cons . g$16108$1DOkPG) (complex? . g$16107$1DOkPG) (char? . g$16106$1DOkPG) (char>? . g$16105$1DOkPG) (char>=? . g$16104$1DOkPG) (char=? . g$16103$1DOkPG) (char<? . g$16102$1DOkPG) (char<=? . g$16101$1DOkPG) (char->integer . g$16100$1DOkPG) (ceiling . g$16099$1DOkPG) (call-with-values . g$16098$1DOkPG) (call/cc . g$16097$1DOkPG) (call-with-current-continuation . g$16096$1DOkPG) (cddddr . g$8027$1DOkPG) (cdddar . g$8026$1DOkPG) (cddadr . g$8025$1DOkPG) (cddaar . g$8024$1DOkPG) (cdaddr . g$8023$1DOkPG) (cdadar . g$8022$1DOkPG) (cdaadr . g$8021$1DOkPG) (cdaaar . g$8020$1DOkPG) (cadddr . g$8019$1DOkPG) (caddar . g$8018$1DOkPG) (cadadr . g$8017$1DOkPG) (cadaar . g$8016$1DOkPG) (caaddr . g$8015$1DOkPG) (caadar . g$8014$1DOkPG) (caaadr . g$8013$1DOkPG) (caaaar . g$8012$1DOkPG) (cdddr . g$8011$1DOkPG) (cddar . g$8010$1DOkPG) (cdadr . g$8009$1DOkPG) (cdaar . g$8008$1DOkPG) (caddr . g$8007$1DOkPG) (cadar . g$8006$1DOkPG) (caadr . g$8005$1DOkPG) (caaar . g$8004$1DOkPG) (cddr . g$8003$1DOkPG) (cdar . g$8002$1DOkPG) (cadr . g$8001$1DOkPG) (caar . g$8000$1DOkPG) (cdr . g$16095$1DOkPG) (car . g$16094$1DOkPG) (boolean? . g$16093$1DOkPG) (boolean=? . g$16092$1DOkPG) (atan . g$16091$1DOkPG) (assertion-violation . g$16090$1DOkPG) (asin . g$16089$1DOkPG) (apply . g$16088$1DOkPG) (append . g$16087$1DOkPG) (angle . g$16086$1DOkPG) (acos . g$16085$1DOkPG) (abs . g$16084$1DOkPG) (/ . g$16083$1DOkPG) (* . g$16082$1DOkPG) (- . g$16081$1DOkPG) (+ . g$16080$1DOkPG) (>= . g$16079$1DOkPG) (> . g$16078$1DOkPG) (= . g$16077$1DOkPG) (<= . g$16076$1DOkPG) (< . g$16075$1DOkPG) (vector-reverse! . g$16073$1DOkPG) (vector-contains? . g$16072$1DOkPG) (vector-index-of . g$16071$1DOkPG) (vector-copy . g$16070$1DOkPG) (vector-binary-search . g$16069$1DOkPG) (get-output-string . g$16068$1DOkPG) (open-output-string . g$16067$1DOkPG) (open-input-string . g$16066$1DOkPG) (string-format . g$16065$1DOkPG) (make-traced-procedure . g$16064$1DOkPG) (pmap . g$16063$1DOkPG) (time-it . g$16062$1DOkPG) (make-parameter . g$9268$1DOkPG) (library-locator . g$16061$1DOkPG) (get-library-paths . g$16060$1DOkPG) (library-path . g$9487$1DOkPG) (library-extensions . g$9488$1DOkPG) (installed-libraries . g$9510$1DOkPG) (&no-nans . g$16059$1DOkPG) (&no-infinities . g$16058$1DOkPG) (&i/o-encoding . g$16057$1DOkPG) (&i/o-decoding . g$16056$1DOkPG) (&i/o-port . g$16055$1DOkPG) (&i/o-file-does-not-exist . g$16054$1DOkPG) (&i/o-file-already-exists . g$16053$1DOkPG) (&i/o-file-is-read-only . g$16052$1DOkPG) (&i/o-file-protection . g$16051$1DOkPG) (&i/o-filename . g$16050$1DOkPG) (&i/o-invalid-position . g$16049$1DOkPG) (&i/o-write . g$16048$1DOkPG) (&i/o-read . g$16047$1DOkPG) (&i/o . g$16046$1DOkPG) (&non-continuable . g$16045$1DOkPG) (&undefined . g$16044$1DOkPG) (&syntax . g$16043$1DOkPG) (&lexical . g$16042$1DOkPG) (&implementation-restriction . g$16041$1DOkPG) (&who . g$16039$1DOkPG) (&irritants . g$16038$1DOkPG) (&assertion . g$16037$1DOkPG) (&violation . g$16036$1DOkPG) (&error . g$16035$1DOkPG) (&serious . g$16034$1DOkPG) (&warning . g$16033$1DOkPG) (&message . g$16032$1DOkPG) (&condition . g$16031$1DOkPG) (define-condition-type . g$16030$1DOkPG) (define-enumeration . g$16029$1DOkPG) (define-record-type . g$16028$1DOkPG) (parent-rtd . g$16027$1DOkPG) (nongenerative . g$16026$1DOkPG) (opaque . g$16025$1DOkPG) (sealed . g$16024$1DOkPG) (protocol . g$16023$1DOkPG) (parent . g$16022$1DOkPG) (immutable . g$16021$1DOkPG) (mutable . g$16020$1DOkPG) (fields . g$16019$1DOkPG) (error-handling-mode . g$16018$1DOkPG) (file-options . g$16017$1DOkPG) (buffer-mode . g$16016$1DOkPG) (eol-style . g$16015$1DOkPG) (guard . g$16014$1DOkPG) (trace-define-syntax . g$16013$1DOkPG) (trace-define . g$16012$1DOkPG) (trace-lambda . g$16011$1DOkPG) (unsyntax-splicing . g$16010$1DOkPG) (unsyntax . g$16009$1DOkPG) (unquote-splicing . g$16008$1DOkPG) (unquote . g$16007$1DOkPG) (_ . g$16006$1DOkPG) (else . g$16005$1DOkPG) (=> . g$16004$1DOkPG) (... . g$16003$1DOkPG) (assert . g$16002$1DOkPG) (endianness . g$16001$1DOkPG) (delay . g$16000$1DOkPG) (time . g$15999$1DOkPG) (or . g$15998$1DOkPG) (and . g$15997$1DOkPG) (do . g$15996$1DOkPG) (cond . g$15995$1DOkPG) (let* . g$15994$1DOkPG) (let . g$15993$1DOkPG) (identifier-syntax . g$15992$1DOkPG) (with-syntax . g$15991$1DOkPG) (quasisyntax . g$15990$1DOkPG) (quasiquote . g$15989$1DOkPG) (syntax-rules . g$15988$1DOkPG) (include-into . g$15987$1DOkPG) (include . g$15986$1DOkPG) (let-values . g$15984$1DOkPG) (let*-values . g$15983$1DOkPG) (record-constructor-descriptor . g$15982$1DOkPG) (record-type-descriptor . g$15981$1DOkPG) (fluid-let-syntax . g$15980$1DOkPG) (case . g$15979$1DOkPG) (parameterize . g$15978$1DOkPG) (unless . g$15977$1DOkPG) (when . g$15976$1DOkPG) (if . g$15975$1DOkPG) (letrec* . g$15974$1DOkPG) (letrec . g$15973$1DOkPG) (case-lambda . g$15971$1DOkPG) (lambda . g$15970$1DOkPG) (syntax . g$15969$1DOkPG) (syntax-case . g$15968$1DOkPG) (quote . g$15967$1DOkPG) (letrec-syntax . g$15965$1DOkPG) (let-syntax . g$15964$1DOkPG) (set! . g$15963$1DOkPG) (import . g$15962$1DOkPG) (library . g$15961$1DOkPG) (begin . g$15960$1DOkPG) (module . g$15959$1DOkPG) (define-syntax . g$15958$1DOkPG) (define . g$15957$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16612$1DOkPG '(ironscheme library) '() '() '() '() '((get-library-paths . g$16060$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16613$1DOkPG '(ironscheme reader) '() '() '() '() '((annotation-stripped . g$16553$1DOkPG) (annotation-source . g$16552$1DOkPG) (annotation-expression . g$16551$1DOkPG) (annotation? . g$16550$1DOkPG) (read-annotated . g$16549$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16614$1DOkPG '(ironscheme serialization) '() '() '() '() '((load-serialized-library . g$16520$1DOkPG) (serialize-library . g$16519$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16615$1DOkPG '(ironscheme records printer) '() '() '() '() '((make-record-printer . g$16074$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16616$1DOkPG '(ironscheme interaction) '() '() '() '() '((load-r5rs . g$16539$1DOkPG) (license . g$16538$1DOkPG) (stacktrace . g$16537$1DOkPG) (compile->closure . g$15933$1DOkPG) (compile . g$15932$1DOkPG) (load . g$15931$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16617$1DOkPG '(ironscheme clr internal) '() '() '() '() '((define-clr-class-internal . g$16536$1DOkPG) (clr-field-set!-internal . g$16535$1DOkPG) (clr-field-get-internal . g$16534$1DOkPG) (clr-cast-internal . g$16533$1DOkPG) (clr-call-internal . g$16532$1DOkPG) (clr-new-internal . g$16531$1DOkPG) (clr-new-array-internal . g$16530$1DOkPG) (clr-is-internal . g$16529$1DOkPG) (clr-reference-internal . g$16528$1DOkPG) (clr-using-internal . g$16527$1DOkPG) (clr-clear-usings-internal . g$16526$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16618$1DOkPG '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$16008$1DOkPG) (unquote . g$16007$1DOkPG) (delay . g$16000$1DOkPG) (or . g$15998$1DOkPG) (and . g$15997$1DOkPG) (do . g$15996$1DOkPG) (cond . g$15995$1DOkPG) (let* . g$15994$1DOkPG) (let . g$15993$1DOkPG) (quasiquote . g$15989$1DOkPG) (syntax-rules . g$15988$1DOkPG) (case . g$15979$1DOkPG) (if . g$15975$1DOkPG) (letrec . g$15973$1DOkPG) (lambda . g$15970$1DOkPG) (quote . g$15967$1DOkPG) (letrec-syntax . g$15965$1DOkPG) (let-syntax . g$15964$1DOkPG) (set! . g$15963$1DOkPG) (begin . g$15960$1DOkPG) (define-syntax . g$15958$1DOkPG) (define . g$15957$1DOkPG)) '() values values '#f '#f '#f '#f) (g$install-library$8996$1DOkPG 'g$16619$1DOkPG '(psyntax scheme-report-environment-5) '() '() '() '() '((interaction-environment . g$16518$1DOkPG) (char-ready? . g$16517$1DOkPG) (string-ci>? . g$16508$1DOkPG) (string-ci>=? . g$16507$1DOkPG) (string-ci=? . g$16506$1DOkPG) (string-ci<? . g$16505$1DOkPG) (string-ci<=? . g$16504$1DOkPG) (char-whitespace? . g$16503$1DOkPG) (char-upper-case? . g$16502$1DOkPG) (char-numeric? . g$16500$1DOkPG) (char-lower-case? . g$16499$1DOkPG) (char-upcase . g$16497$1DOkPG) (char-downcase . g$16494$1DOkPG) (char-ci>? . g$16493$1DOkPG) (char-ci>=? . g$16492$1DOkPG) (char-ci=? . g$16491$1DOkPG) (char-ci<? . g$16490$1DOkPG) (char-ci<=? . g$16489$1DOkPG) (char-alphabetic? . g$16488$1DOkPG) (call-with-output-file . g$16457$1DOkPG) (call-with-input-file . g$16456$1DOkPG) (write-char . g$16455$1DOkPG) (write . g$16454$1DOkPG) (with-output-to-file . g$16453$1DOkPG) (with-input-from-file . g$16452$1DOkPG) (read-char . g$16451$1DOkPG) (read . g$16450$1DOkPG) (peek-char . g$16449$1DOkPG) (open-output-file . g$16448$1DOkPG) (open-input-file . g$16447$1DOkPG) (newline . g$16446$1DOkPG) (display . g$16445$1DOkPG) (close-output-port . g$16444$1DOkPG) (close-input-port . g$16443$1DOkPG) (eof-object? . g$16442$1DOkPG) (eof-object . g$16441$1DOkPG) (current-error-port . g$16440$1DOkPG) (current-output-port . g$16439$1DOkPG) (current-input-port . g$16438$1DOkPG) (output-port? . g$16437$1DOkPG) (input-port? . g$16436$1DOkPG) (scheme-report-environment . g$10334$1DOkPG) (quotient . g$8857$1DOkPG) (null-environment . g$10333$1DOkPG) (remainder . g$8858$1DOkPG) (modulo . g$8859$1DOkPG) (inexact->exact . g$16373$1DOkPG) (force . g$16372$1DOkPG) (exact->inexact . g$16371$1DOkPG) (string-fill! . g$16368$1DOkPG) (string-set! . g$16367$1DOkPG) (set-cdr! . g$16366$1DOkPG) (set-car! . g$16365$1DOkPG) (memv . g$16362$1DOkPG) (memq . g$16361$1DOkPG) (member . g$16359$1DOkPG) (assv . g$16356$1DOkPG) (assq . g$16355$1DOkPG) (assoc . g$16353$1DOkPG) (eval . g$10336$1DOkPG) (zero? . g$16207$1DOkPG) (vector? . g$16206$1DOkPG) (vector-set! . g$16205$1DOkPG) (vector-ref . g$16204$1DOkPG) (vector-length . g$16202$1DOkPG) (vector-fill! . g$16200$1DOkPG) (vector->list . g$16199$1DOkPG) (vector . g$16198$1DOkPG) (values . g$16197$1DOkPG) (truncate . g$16196$1DOkPG) (tan . g$16195$1DOkPG) (symbol? . g$16194$1DOkPG) (symbol->string . g$16192$1DOkPG) (substring . g$16191$1DOkPG) (string? . g$16190$1DOkPG) (string>? . g$16189$1DOkPG) (string>=? . g$16188$1DOkPG) (string=? . g$16187$1DOkPG) (string<? . g$16186$1DOkPG) (string<=? . g$16185$1DOkPG) (string-ref . g$16184$1DOkPG) (string-length . g$16183$1DOkPG) (string-copy . g$16181$1DOkPG) (string-append . g$16180$1DOkPG) (string->symbol . g$16179$1DOkPG) (string->number . g$16178$1DOkPG) (string->list . g$16177$1DOkPG) (string . g$16176$1DOkPG) (sqrt . g$16175$1DOkPG) (sin . g$16174$1DOkPG) (round . g$16173$1DOkPG) (reverse . g$16172$1DOkPG) (real? . g$16171$1DOkPG) (real-part . g$16169$1DOkPG) (rationalize . g$8028$1DOkPG) (rational? . g$16168$1DOkPG) (procedure? . g$16166$1DOkPG) (positive? . g$16165$1DOkPG) (pair? . g$16164$1DOkPG) (odd? . g$16163$1DOkPG) (numerator . g$16162$1DOkPG) (number? . g$16161$1DOkPG) (number->string . g$16160$1DOkPG) (null? . g$16159$1DOkPG) (not . g$16158$1DOkPG) (negative? . g$16157$1DOkPG) (min . g$16155$1DOkPG) (max . g$16154$1DOkPG) (map . g$16153$1DOkPG) (make-vector . g$16152$1DOkPG) (make-string . g$16151$1DOkPG) (make-rectangular . g$16150$1DOkPG) (make-polar . g$16149$1DOkPG) (magnitude . g$16148$1DOkPG) (log . g$16147$1DOkPG) (list? . g$16146$1DOkPG) (list-tail . g$16145$1DOkPG) (list-ref . g$16144$1DOkPG) (list->vector . g$16143$1DOkPG) (list->string . g$16142$1DOkPG) (list . g$16141$1DOkPG) (length . g$16140$1DOkPG) (lcm . g$16139$1DOkPG) (integer? . g$16138$1DOkPG) (integer->char . g$16136$1DOkPG) (inexact? . g$16134$1DOkPG) (imag-part . g$16132$1DOkPG) (gcd . g$16131$1DOkPG) (for-each . g$16130$1DOkPG) (floor . g$16129$1DOkPG) (expt . g$16127$1DOkPG) (exp . g$16126$1DOkPG) (exact? . g$16125$1DOkPG) (even? . g$16122$1DOkPG) (eqv? . g$16120$1DOkPG) (equal? . g$16119$1DOkPG) (eq? . g$16118$1DOkPG) (dynamic-wind . g$16117$1DOkPG) (denominator . g$16110$1DOkPG) (cos . g$16109$1DOkPG) (cons . g$16108$1DOkPG) (complex? . g$16107$1DOkPG) (char? . g$16106$1DOkPG) (char>? . g$16105$1DOkPG) (char>=? . g$16104$1DOkPG) (char=? . g$16103$1DOkPG) (char<? . g$16102$1DOkPG) (char<=? . g$16101$1DOkPG) (char->integer . g$16100$1DOkPG) (ceiling . g$16099$1DOkPG) (call-with-values . g$16098$1DOkPG) (call-with-current-continuation . g$16096$1DOkPG) (cddddr . g$8027$1DOkPG) (cdddar . g$8026$1DOkPG) (cddadr . g$8025$1DOkPG) (cddaar . g$8024$1DOkPG) (cdaddr . g$8023$1DOkPG) (cdadar . g$8022$1DOkPG) (cdaadr . g$8021$1DOkPG) (cdaaar . g$8020$1DOkPG) (cadddr . g$8019$1DOkPG) (caddar . g$8018$1DOkPG) (cadadr . g$8017$1DOkPG) (cadaar . g$8016$1DOkPG) (caaddr . g$8015$1DOkPG) (caadar . g$8014$1DOkPG) (caaadr . g$8013$1DOkPG) (caaaar . g$8012$1DOkPG) (cdddr . g$8011$1DOkPG) (cddar . g$8010$1DOkPG) (cdadr . g$8009$1DOkPG) (cdaar . g$8008$1DOkPG) (caddr . g$8007$1DOkPG) (cadar . g$8006$1DOkPG) (caadr . g$8005$1DOkPG) (caaar . g$8004$1DOkPG) (cddr . g$8003$1DOkPG) (cdar . g$8002$1DOkPG) (cadr . g$8001$1DOkPG) (caar . g$8000$1DOkPG) (cdr . g$16095$1DOkPG) (car . g$16094$1DOkPG) (boolean? . g$16093$1DOkPG) (atan . g$16091$1DOkPG) (asin . g$16089$1DOkPG) (apply . g$16088$1DOkPG) (append . g$16087$1DOkPG) (angle . g$16086$1DOkPG) (acos . g$16085$1DOkPG) (abs . g$16084$1DOkPG) (/ . g$16083$1DOkPG) (* . g$16082$1DOkPG) (- . g$16081$1DOkPG) (+ . g$16080$1DOkPG) (>= . g$16079$1DOkPG) (> . g$16078$1DOkPG) (= . g$16077$1DOkPG) (<= . g$16076$1DOkPG) (< . g$16075$1DOkPG) (unquote-splicing . g$16008$1DOkPG) (unquote . g$16007$1DOkPG) (else . g$16005$1DOkPG) (=> . g$16004$1DOkPG) (... . g$16003$1DOkPG) (delay . g$16000$1DOkPG) (or . g$15998$1DOkPG) (and . g$15997$1DOkPG) (do . g$15996$1DOkPG) (cond . g$15995$1DOkPG) (let* . g$15994$1DOkPG) (let . g$15993$1DOkPG) (quasiquote . g$15989$1DOkPG) (syntax-rules . g$15988$1DOkPG) (case . g$15979$1DOkPG) (if . g$15975$1DOkPG) (letrec . g$15973$1DOkPG) (lambda . g$15970$1DOkPG) (quote . g$15967$1DOkPG) (letrec-syntax . g$15965$1DOkPG) (let-syntax . g$15964$1DOkPG) (set! . g$15963$1DOkPG) (begin . g$15960$1DOkPG) (define-syntax . g$15958$1DOkPG) (define . g$15957$1DOkPG)) '() values values '#f '#f '#f '#f) (g$install-library$8996$1DOkPG 'g$16620$1DOkPG '(rnrs) '(6) '() '() '() '((string-upcase . g$16516$1DOkPG) (string-titlecase . g$16515$1DOkPG) (string-normalize-nfkd . g$16514$1DOkPG) (string-normalize-nfkc . g$16513$1DOkPG) (string-normalize-nfd . g$16512$1DOkPG) (string-normalize-nfc . g$16511$1DOkPG) (string-foldcase . g$16510$1DOkPG) (string-downcase . g$16509$1DOkPG) (string-ci>? . g$16508$1DOkPG) (string-ci>=? . g$16507$1DOkPG) (string-ci=? . g$16506$1DOkPG) (string-ci<? . g$16505$1DOkPG) (string-ci<=? . g$16504$1DOkPG) (char-whitespace? . g$16503$1DOkPG) (char-upper-case? . g$16502$1DOkPG) (char-title-case? . g$16501$1DOkPG) (char-numeric? . g$16500$1DOkPG) (char-lower-case? . g$16499$1DOkPG) (char-general-category . g$16498$1DOkPG) (char-upcase . g$16497$1DOkPG) (char-titlecase . g$16496$1DOkPG) (char-foldcase . g$16495$1DOkPG) (char-downcase . g$16494$1DOkPG) (char-ci>? . g$16493$1DOkPG) (char-ci>=? . g$16492$1DOkPG) (char-ci=? . g$16491$1DOkPG) (char-ci<? . g$16490$1DOkPG) (char-ci<=? . g$16489$1DOkPG) (char-alphabetic? . g$16488$1DOkPG) (make-variable-transformer . g$9943$1DOkPG) (identifier? . g$10351$1DOkPG) (generate-temporaries . g$10343$1DOkPG) (free-identifier=? . g$10344$1DOkPG) (syntax->datum . g$10353$1DOkPG) (datum->syntax . g$10352$1DOkPG) (bound-identifier=? . g$10345$1DOkPG) (record-type-descriptor? . g$16487$1DOkPG) (record-predicate . g$16486$1DOkPG) (record-mutator . g$16485$1DOkPG) (record-constructor . g$16484$1DOkPG) (record-accessor . g$16483$1DOkPG) (make-record-type-descriptor . g$16482$1DOkPG) (make-record-constructor-descriptor . g$16481$1DOkPG) (record? . g$16480$1DOkPG) (record-type-uid . g$16479$1DOkPG) (record-type-sealed? . g$16478$1DOkPG) (record-type-parent . g$16477$1DOkPG) (record-type-opaque? . g$16476$1DOkPG) (record-type-name . g$16475$1DOkPG) (record-type-generative? . g$16474$1DOkPG) (record-type-field-names . g$16473$1DOkPG) (record-rtd . g$16472$1DOkPG) (record-field-mutable? . g$16471$1DOkPG) (delete-file . g$8413$1DOkPG) (file-exists? . g$8412$1DOkPG) (vector-sort! . g$16470$1DOkPG) (vector-sort . g$16469$1DOkPG) (list-sort . g$16468$1DOkPG) (symbol-hash . g$16467$1DOkPG) (string-ci-hash . g$16466$1DOkPG) (string-hash . g$16465$1DOkPG) (equal-hash . g$16464$1DOkPG) (hashtable-equivalence-function . g$8386$1DOkPG) (make-hashtable . g$16463$1DOkPG) (hashtable-hash-function . g$8387$1DOkPG) (make-eqv-hashtable . g$8378$1DOkPG) (make-eq-hashtable . g$8377$1DOkPG) (hashtable? . g$16462$1DOkPG) (hashtable-update! . g$8384$1DOkPG) (hashtable-size . g$8379$1DOkPG) (hashtable-set! . g$8381$1DOkPG) (hashtable-ref . g$8380$1DOkPG) (hashtable-mutable? . g$16461$1DOkPG) (hashtable-keys . g$16460$1DOkPG) (hashtable-entries . g$16459$1DOkPG) (hashtable-delete! . g$8382$1DOkPG) (hashtable-copy . g$16458$1DOkPG) (hashtable-contains? . g$8383$1DOkPG) (hashtable-clear! . g$8385$1DOkPG) (call-with-output-file . g$16457$1DOkPG) (call-with-input-file . g$16456$1DOkPG) (write-char . g$16455$1DOkPG) (write . g$16454$1DOkPG) (with-output-to-file . g$16453$1DOkPG) (with-input-from-file . g$16452$1DOkPG) (read-char . g$16451$1DOkPG) (read . g$16450$1DOkPG) (peek-char . g$16449$1DOkPG) (open-output-file . g$16448$1DOkPG) (open-input-file . g$16447$1DOkPG) (newline . g$16446$1DOkPG) (display . g$16445$1DOkPG) (close-output-port . g$16444$1DOkPG) (close-input-port . g$16443$1DOkPG) (eof-object? . g$16442$1DOkPG) (eof-object . g$16441$1DOkPG) (current-error-port . g$16440$1DOkPG) (current-output-port . g$16439$1DOkPG) (current-input-port . g$16438$1DOkPG) (output-port? . g$16437$1DOkPG) (input-port? . g$16436$1DOkPG) (utf-8-codec . g$16435$1DOkPG) (utf-16-codec . g$16434$1DOkPG) (transcoder-error-handling-mode . g$16433$1DOkPG) (transcoder-eol-style . g$16432$1DOkPG) (transcoder-codec . g$16431$1DOkPG) (transcoded-port . g$16430$1DOkPG) (textual-port? . g$16429$1DOkPG) (string->bytevector . g$16428$1DOkPG) (standard-output-port . g$16427$1DOkPG) (standard-input-port . g$16426$1DOkPG) (standard-error-port . g$16425$1DOkPG) (set-port-position! . g$16424$1DOkPG) (put-u8 . g$16423$1DOkPG) (put-string . g$16422$1DOkPG) (put-datum . g$16421$1DOkPG) (put-char . g$16420$1DOkPG) (put-bytevector . g$16419$1DOkPG) (port? . g$16418$1DOkPG) (port-transcoder . g$16417$1DOkPG) (port-position . g$16416$1DOkPG) (port-has-set-port-position!? . g$16415$1DOkPG) (port-has-port-position? . g$16414$1DOkPG) (port-eof? . g$16413$1DOkPG) (output-port-buffer-mode . g$16412$1DOkPG) (open-string-output-port . g$9235$1DOkPG) (open-string-input-port . g$16411$1DOkPG) (open-file-output-port . g$16410$1DOkPG) (open-file-input/output-port . g$16409$1DOkPG) (open-file-input-port . g$16408$1DOkPG) (open-bytevector-output-port . g$16407$1DOkPG) (open-bytevector-input-port . g$16406$1DOkPG) (native-transcoder . g$16405$1DOkPG) (native-eol-style . g$16404$1DOkPG) (make-transcoder . g$16403$1DOkPG) (latin-1-codec . g$16402$1DOkPG) (make-i/o-write-error . g$9092$1DOkPG) (make-i/o-read-error . g$9078$1DOkPG) (make-i/o-port-error . g$9197$1DOkPG) (make-i/o-invalid-position-error . g$9107$1DOkPG) (make-i/o-filename-error . g$9124$1DOkPG) (make-i/o-file-protection-error . g$9140$1DOkPG) (make-i/o-file-is-read-only-error . g$9154$1DOkPG) (make-i/o-file-does-not-exist-error . g$9182$1DOkPG) (make-i/o-file-already-exists-error . g$9168$1DOkPG) (make-i/o-error . g$9064$1DOkPG) (make-i/o-encoding-error . g$9228$1DOkPG) (make-i/o-decoding-error . g$9213$1DOkPG) (make-custom-textual-output-port . g$16401$1DOkPG) (make-custom-textual-input/output-port . g$16400$1DOkPG) (make-custom-textual-input-port . g$16399$1DOkPG) (make-custom-binary-output-port . g$16398$1DOkPG) (make-custom-binary-input/output-port . g$16397$1DOkPG) (make-custom-binary-input-port . g$16396$1DOkPG) (make-bytevector . g$16395$1DOkPG) (lookahead-u8 . g$16394$1DOkPG) (lookahead-char . g$16393$1DOkPG) (i/o-write-error? . g$9093$1DOkPG) (i/o-read-error? . g$9079$1DOkPG) (i/o-port-error? . g$9199$1DOkPG) (i/o-invalid-position-error? . g$9109$1DOkPG) (i/o-filename-error? . g$9126$1DOkPG) (i/o-file-protection-error? . g$9141$1DOkPG) (i/o-file-is-read-only-error? . g$9155$1DOkPG) (i/o-file-does-not-exist-error? . g$9183$1DOkPG) (i/o-file-already-exists-error? . g$9169$1DOkPG) (i/o-error? . g$9065$1DOkPG) (i/o-error-port . g$9200$1DOkPG) (i/o-error-filename . g$9127$1DOkPG) (i/o-encoding-error? . g$9230$1DOkPG) (i/o-encoding-error-char . g$9231$1DOkPG) (i/o-decoding-error? . g$9214$1DOkPG) (get-u8 . g$16392$1DOkPG) (get-string-n! . g$16391$1DOkPG) (get-string-n . g$16390$1DOkPG) (get-string-all . g$16389$1DOkPG) (get-line . g$16388$1DOkPG) (get-datum . g$16387$1DOkPG) (get-char . g$16386$1DOkPG) (get-bytevector-some . g$16385$1DOkPG) (get-bytevector-n! . g$16384$1DOkPG) (get-bytevector-n . g$16383$1DOkPG) (get-bytevector-all . g$16382$1DOkPG) (flush-output-port . g$16381$1DOkPG) (close-port . g$16380$1DOkPG) (call-with-string-output-port . g$16379$1DOkPG) (call-with-port . g$16378$1DOkPG) (call-with-bytevector-output-port . g$16377$1DOkPG) (bytevector->string . g$16376$1DOkPG) (buffer-mode? . g$16375$1DOkPG) (binary-port? . g$16374$1DOkPG) (exit . g$16370$1DOkPG) (command-line . g$16369$1DOkPG) (remove . g$8484$1DOkPG) (remv . g$8485$1DOkPG) (remp . g$16364$1DOkPG) (remq . g$8486$1DOkPG) (partition . g$16363$1DOkPG) (memv . g$16362$1DOkPG) (memq . g$16361$1DOkPG) (memp . g$16360$1DOkPG) (member . g$16359$1DOkPG) (exists . g$8480$1DOkPG) (for-all . g$8479$1DOkPG) (fold-right . g$8483$1DOkPG) (fold-left . g$8482$1DOkPG) (find . g$16358$1DOkPG) (filter . g$16357$1DOkPG) (cons* . g$8481$1DOkPG) (assv . g$16356$1DOkPG) (assq . g$16355$1DOkPG) (assp . g$16354$1DOkPG) (assoc . g$16353$1DOkPG) (with-exception-handler . g$16352$1DOkPG) (raise-continuable . g$16351$1DOkPG) (raise . g$16350$1DOkPG) (make-enumeration . g$16349$1DOkPG) (enum-set=? . g$16348$1DOkPG) (enum-set-universe . g$16347$1DOkPG) (enum-set-union . g$16346$1DOkPG) (enum-set-subset? . g$16345$1DOkPG) (enum-set-projection . g$16344$1DOkPG) (enum-set-member? . g$16343$1DOkPG) (enum-set-intersection . g$16342$1DOkPG) (enum-set-indexer . g$16341$1DOkPG) (enum-set-difference . g$16340$1DOkPG) (enum-set-constructor . g$16339$1DOkPG) (enum-set-complement . g$16338$1DOkPG) (enum-set->list . g$16337$1DOkPG) (who-condition? . g$8774$1DOkPG) (warning? . g$8685$1DOkPG) (violation? . g$8727$1DOkPG) (undefined-violation? . g$8851$1DOkPG) (syntax-violation? . g$8835$1DOkPG) (syntax-violation-subform . g$8837$1DOkPG) (syntax-violation-form . g$8836$1DOkPG) (syntax-violation . g$10350$1DOkPG) (simple-conditions . g$16336$1DOkPG) (serious-condition? . g$8699$1DOkPG) (non-continuable-violation? . g$8789$1DOkPG) (message-condition? . g$8670$1DOkPG) (make-who-condition . g$8772$1DOkPG) (make-warning . g$8684$1DOkPG) (make-violation . g$8726$1DOkPG) (make-undefined-violation . g$8850$1DOkPG) (make-syntax-violation . g$8832$1DOkPG) (make-serious-condition . g$8698$1DOkPG) (make-non-continuable-violation . g$8788$1DOkPG) (make-message-condition . g$8668$1DOkPG) (make-lexical-violation . g$8816$1DOkPG) (make-irritants-condition . g$8755$1DOkPG) (make-implementation-restriction-violation . g$8802$1DOkPG) (make-error . g$8712$1DOkPG) (make-assertion-violation . g$8740$1DOkPG) (lexical-violation? . g$8817$1DOkPG) (irritants-condition? . g$8757$1DOkPG) (implementation-restriction-violation? . g$8803$1DOkPG) (error? . g$8713$1DOkPG) (condition-who . g$8775$1DOkPG) (condition-predicate . g$16335$1DOkPG) (condition-message . g$8671$1DOkPG) (condition-irritants . g$8758$1DOkPG) (condition-accessor . g$16334$1DOkPG) (condition . g$16333$1DOkPG) (assertion-violation? . g$8741$1DOkPG) (condition? . g$16332$1DOkPG) (utf32->string . g$16331$1DOkPG) (utf16->string . g$16330$1DOkPG) (utf8->string . g$16329$1DOkPG) (uint-list->bytevector . g$16328$1DOkPG) (u8-list->bytevector . g$16327$1DOkPG) (string->utf8 . g$16326$1DOkPG) (string->utf32 . g$16325$1DOkPG) (string->utf16 . g$16324$1DOkPG) (sint-list->bytevector . g$16323$1DOkPG) (native-endianness . g$8525$1DOkPG) (bytevector? . g$16322$1DOkPG) (bytevector=? . g$16321$1DOkPG) (bytevector-uint-set! . g$16320$1DOkPG) (bytevector-uint-ref . g$16319$1DOkPG) (bytevector-u8-set! . g$16318$1DOkPG) (bytevector-u8-ref . g$16317$1DOkPG) (bytevector-u64-set! . g$8546$1DOkPG) (bytevector-u64-ref . g$8542$1DOkPG) (bytevector-u64-native-set! . g$8548$1DOkPG) (bytevector-u64-native-ref . g$8544$1DOkPG) (bytevector-u32-set! . g$8538$1DOkPG) (bytevector-u32-ref . g$8534$1DOkPG) (bytevector-u32-native-set! . g$8540$1DOkPG) (bytevector-u32-native-ref . g$8536$1DOkPG) (bytevector-u16-set! . g$8530$1DOkPG) (bytevector-u16-ref . g$8526$1DOkPG) (bytevector-u16-native-set! . g$8532$1DOkPG) (bytevector-u16-native-ref . g$8528$1DOkPG) (bytevector-sint-set! . g$16316$1DOkPG) (bytevector-sint-ref . g$16315$1DOkPG) (bytevector-s8-set! . g$16314$1DOkPG) (bytevector-s8-ref . g$16313$1DOkPG) (bytevector-s64-set! . g$8547$1DOkPG) (bytevector-s64-ref . g$8543$1DOkPG) (bytevector-s64-native-set! . g$8549$1DOkPG) (bytevector-s64-native-ref . g$8545$1DOkPG) (bytevector-s32-set! . g$8539$1DOkPG) (bytevector-s32-ref . g$8535$1DOkPG) (bytevector-s32-native-set! . g$8541$1DOkPG) (bytevector-s32-native-ref . g$8537$1DOkPG) (bytevector-s16-set! . g$8531$1DOkPG) (bytevector-s16-ref . g$8527$1DOkPG) (bytevector-s16-native-set! . g$8533$1DOkPG) (bytevector-s16-native-ref . g$8529$1DOkPG) (bytevector-length . g$16312$1DOkPG) (bytevector-ieee-single-set! . g$16311$1DOkPG) (bytevector-ieee-single-ref . g$16310$1DOkPG) (bytevector-ieee-single-native-set! . g$8552$1DOkPG) (bytevector-ieee-single-native-ref . g$8550$1DOkPG) (bytevector-ieee-double-set! . g$16309$1DOkPG) (bytevector-ieee-double-ref . g$16308$1DOkPG) (bytevector-ieee-double-native-set! . g$8553$1DOkPG) (bytevector-ieee-double-native-ref . g$8551$1DOkPG) (bytevector-fill! . g$16307$1DOkPG) (bytevector-copy! . g$16306$1DOkPG) (bytevector-copy . g$16305$1DOkPG) (bytevector->uint-list . g$16304$1DOkPG) (bytevector->u8-list . g$16303$1DOkPG) (bytevector->sint-list . g$16302$1DOkPG) (no-nans-violation? . g$9050$1DOkPG) (no-infinities-violation? . g$9036$1DOkPG) (make-no-nans-violation . g$9049$1DOkPG) (make-no-infinities-violation . g$9035$1DOkPG) (real->flonum . g$16301$1DOkPG) (flzero? . g$16300$1DOkPG) (fltruncate . g$16299$1DOkPG) (fltan . g$16298$1DOkPG) (flsqrt . g$16297$1DOkPG) (flsin . g$16296$1DOkPG) (flround . g$16295$1DOkPG) (flpositive? . g$16294$1DOkPG) (flonum? . g$16293$1DOkPG) (flodd? . g$16292$1DOkPG) (flnumerator . g$16291$1DOkPG) (flnegative? . g$16290$1DOkPG) (flnan? . g$16289$1DOkPG) (flmod0 . g$16288$1DOkPG) (flmod . g$16287$1DOkPG) (flmin . g$16286$1DOkPG) (flmax . g$16285$1DOkPG) (fllog . g$16284$1DOkPG) (flinteger? . g$16283$1DOkPG) (flinfinite? . g$16282$1DOkPG) (flfloor . g$16281$1DOkPG) (flfinite? . g$16280$1DOkPG) (flexpt . g$16279$1DOkPG) (flexp . g$16278$1DOkPG) (fleven? . g$16277$1DOkPG) (fldiv0-and-mod0 . g$16276$1DOkPG) (fldiv0 . g$16275$1DOkPG) (fldiv-and-mod . g$16274$1DOkPG) (fldiv . g$16273$1DOkPG) (fldenominator . g$16272$1DOkPG) (flcos . g$16271$1DOkPG) (flceiling . g$16270$1DOkPG) (flatan . g$16269$1DOkPG) (flasin . g$16268$1DOkPG) (flacos . g$16267$1DOkPG) (flabs . g$16266$1DOkPG) (fl>? . g$16265$1DOkPG) (fl>=? . g$16264$1DOkPG) (fl=? . g$16263$1DOkPG) (fl<? . g$16262$1DOkPG) (fl<=? . g$16261$1DOkPG) (fl/ . g$16260$1DOkPG) (fl- . g$16259$1DOkPG) (fl+ . g$16258$1DOkPG) (fl* . g$16257$1DOkPG) (fixnum->flonum . g$16256$1DOkPG) (fxzero? . g$16255$1DOkPG) (fxxor . g$16254$1DOkPG) (fxrotate-bit-field . g$8981$1DOkPG) (fxreverse-bit-field . g$16253$1DOkPG) (fxpositive? . g$16252$1DOkPG) (fxodd? . g$16251$1DOkPG) (fxnot . g$16250$1DOkPG) (fxnegative? . g$16249$1DOkPG) (fxmod0 . g$16248$1DOkPG) (fxmod . g$16247$1DOkPG) (fxmin . g$16246$1DOkPG) (fxmax . g$16245$1DOkPG) (fxlength . g$16244$1DOkPG) (fxior . g$16243$1DOkPG) (fxif . g$8975$1DOkPG) (fxfirst-bit-set . g$16242$1DOkPG) (fxeven? . g$16241$1DOkPG) (fxdiv0-and-mod0 . g$16240$1DOkPG) (fxdiv0 . g$16239$1DOkPG) (fxdiv-and-mod . g$16238$1DOkPG) (fxdiv . g$16237$1DOkPG) (fxcopy-bit-field . g$8978$1DOkPG) (fxcopy-bit . g$8976$1DOkPG) (fxbit-set? . g$16236$1DOkPG) (fxbit-field . g$8977$1DOkPG) (fxbit-count . g$16235$1DOkPG) (fxarithmetic-shift-right . g$8980$1DOkPG) (fxarithmetic-shift-left . g$8979$1DOkPG) (fxarithmetic-shift . g$16234$1DOkPG) (fxand . g$16233$1DOkPG) (fx>? . g$16232$1DOkPG) (fx>=? . g$16231$1DOkPG) (fx=? . g$16230$1DOkPG) (fx<? . g$16229$1DOkPG) (fx<=? . g$16228$1DOkPG) (fx-/carry . g$16227$1DOkPG) (fx- . g$16226$1DOkPG) (fx+/carry . g$16225$1DOkPG) (fx+ . g$16224$1DOkPG) (fx*/carry . g$16223$1DOkPG) (fx* . g$16222$1DOkPG) (greatest-fixnum . g$16221$1DOkPG) (least-fixnum . g$16220$1DOkPG) (fixnum-width . g$16219$1DOkPG) (fixnum? . g$16218$1DOkPG) (bitwise-rotate-bit-field . g$8929$1DOkPG) (bitwise-reverse-bit-field . g$8930$1DOkPG) (bitwise-length . g$16217$1DOkPG) (bitwise-if . g$8923$1DOkPG) (bitwise-first-bit-set . g$16216$1DOkPG) (bitwise-copy-bit-field . g$8926$1DOkPG) (bitwise-copy-bit . g$8924$1DOkPG) (bitwise-bit-set? . g$16215$1DOkPG) (bitwise-bit-field . g$16214$1DOkPG) (bitwise-bit-count . g$16213$1DOkPG) (bitwise-xor . g$16212$1DOkPG) (bitwise-ior . g$16211$1DOkPG) (bitwise-and . g$16210$1DOkPG) (bitwise-not . g$16209$1DOkPG) (bitwise-arithmetic-shift-right . g$8928$1DOkPG) (bitwise-arithmetic-shift-left . g$8927$1DOkPG) (bitwise-arithmetic-shift . g$16208$1DOkPG) (zero? . g$16207$1DOkPG) (vector? . g$16206$1DOkPG) (vector-set! . g$16205$1DOkPG) (vector-ref . g$16204$1DOkPG) (vector-map . g$16203$1DOkPG) (vector-length . g$16202$1DOkPG) (vector-for-each . g$16201$1DOkPG) (vector-fill! . g$16200$1DOkPG) (vector->list . g$16199$1DOkPG) (vector . g$16198$1DOkPG) (values . g$16197$1DOkPG) (truncate . g$16196$1DOkPG) (tan . g$16195$1DOkPG) (symbol? . g$16194$1DOkPG) (symbol=? . g$16193$1DOkPG) (symbol->string . g$16192$1DOkPG) (substring . g$16191$1DOkPG) (string? . g$16190$1DOkPG) (string>? . g$16189$1DOkPG) (string>=? . g$16188$1DOkPG) (string=? . g$16187$1DOkPG) (string<? . g$16186$1DOkPG) (string<=? . g$16185$1DOkPG) (string-ref . g$16184$1DOkPG) (string-length . g$16183$1DOkPG) (string-for-each . g$16182$1DOkPG) (string-copy . g$16181$1DOkPG) (string-append . g$16180$1DOkPG) (string->symbol . g$16179$1DOkPG) (string->number . g$16178$1DOkPG) (string->list . g$16177$1DOkPG) (string . g$16176$1DOkPG) (sqrt . g$16175$1DOkPG) (sin . g$16174$1DOkPG) (round . g$16173$1DOkPG) (reverse . g$16172$1DOkPG) (real? . g$16171$1DOkPG) (real-valued? . g$16170$1DOkPG) (real-part . g$16169$1DOkPG) (rationalize . g$8028$1DOkPG) (rational? . g$16168$1DOkPG) (rational-valued? . g$16167$1DOkPG) (procedure? . g$16166$1DOkPG) (positive? . g$16165$1DOkPG) (pair? . g$16164$1DOkPG) (odd? . g$16163$1DOkPG) (numerator . g$16162$1DOkPG) (number? . g$16161$1DOkPG) (number->string . g$16160$1DOkPG) (null? . g$16159$1DOkPG) (not . g$16158$1DOkPG) (negative? . g$16157$1DOkPG) (nan? . g$16156$1DOkPG) (min . g$16155$1DOkPG) (max . g$16154$1DOkPG) (map . g$16153$1DOkPG) (make-vector . g$16152$1DOkPG) (make-string . g$16151$1DOkPG) (make-rectangular . g$16150$1DOkPG) (make-polar . g$16149$1DOkPG) (magnitude . g$16148$1DOkPG) (log . g$16147$1DOkPG) (list? . g$16146$1DOkPG) (list-tail . g$16145$1DOkPG) (list-ref . g$16144$1DOkPG) (list->vector . g$16143$1DOkPG) (list->string . g$16142$1DOkPG) (list . g$16141$1DOkPG) (length . g$16140$1DOkPG) (lcm . g$16139$1DOkPG) (integer? . g$16138$1DOkPG) (integer-valued? . g$16137$1DOkPG) (integer->char . g$16136$1DOkPG) (infinite? . g$16135$1DOkPG) (inexact? . g$16134$1DOkPG) (inexact . g$16133$1DOkPG) (imag-part . g$16132$1DOkPG) (gcd . g$16131$1DOkPG) (for-each . g$16130$1DOkPG) (floor . g$16129$1DOkPG) (finite? . g$16128$1DOkPG) (expt . g$16127$1DOkPG) (exp . g$16126$1DOkPG) (exact? . g$16125$1DOkPG) (exact-integer-sqrt . g$16124$1DOkPG) (exact . g$16123$1DOkPG) (even? . g$16122$1DOkPG) (error . g$16121$1DOkPG) (eqv? . g$16120$1DOkPG) (equal? . g$16119$1DOkPG) (eq? . g$16118$1DOkPG) (dynamic-wind . g$16117$1DOkPG) (div0-and-mod0 . g$16116$1DOkPG) (mod0 . g$16115$1DOkPG) (div0 . g$16114$1DOkPG) (div-and-mod . g$16113$1DOkPG) (mod . g$16112$1DOkPG) (div . g$16111$1DOkPG) (denominator . g$16110$1DOkPG) (cos . g$16109$1DOkPG) (cons . g$16108$1DOkPG) (complex? . g$16107$1DOkPG) (char? . g$16106$1DOkPG) (char>? . g$16105$1DOkPG) (char>=? . g$16104$1DOkPG) (char=? . g$16103$1DOkPG) (char<? . g$16102$1DOkPG) (char<=? . g$16101$1DOkPG) (char->integer . g$16100$1DOkPG) (ceiling . g$16099$1DOkPG) (call-with-values . g$16098$1DOkPG) (call/cc . g$16097$1DOkPG) (call-with-current-continuation . g$16096$1DOkPG) (cddddr . g$8027$1DOkPG) (cdddar . g$8026$1DOkPG) (cddadr . g$8025$1DOkPG) (cddaar . g$8024$1DOkPG) (cdaddr . g$8023$1DOkPG) (cdadar . g$8022$1DOkPG) (cdaadr . g$8021$1DOkPG) (cdaaar . g$8020$1DOkPG) (cadddr . g$8019$1DOkPG) (caddar . g$8018$1DOkPG) (cadadr . g$8017$1DOkPG) (cadaar . g$8016$1DOkPG) (caaddr . g$8015$1DOkPG) (caadar . g$8014$1DOkPG) (caaadr . g$8013$1DOkPG) (caaaar . g$8012$1DOkPG) (cdddr . g$8011$1DOkPG) (cddar . g$8010$1DOkPG) (cdadr . g$8009$1DOkPG) (cdaar . g$8008$1DOkPG) (caddr . g$8007$1DOkPG) (cadar . g$8006$1DOkPG) (caadr . g$8005$1DOkPG) (caaar . g$8004$1DOkPG) (cddr . g$8003$1DOkPG) (cdar . g$8002$1DOkPG) (cadr . g$8001$1DOkPG) (caar . g$8000$1DOkPG) (cdr . g$16095$1DOkPG) (car . g$16094$1DOkPG) (boolean? . g$16093$1DOkPG) (boolean=? . g$16092$1DOkPG) (atan . g$16091$1DOkPG) (assertion-violation . g$16090$1DOkPG) (asin . g$16089$1DOkPG) (apply . g$16088$1DOkPG) (append . g$16087$1DOkPG) (angle . g$16086$1DOkPG) (acos . g$16085$1DOkPG) (abs . g$16084$1DOkPG) (/ . g$16083$1DOkPG) (* . g$16082$1DOkPG) (- . g$16081$1DOkPG) (+ . g$16080$1DOkPG) (>= . g$16079$1DOkPG) (> . g$16078$1DOkPG) (= . g$16077$1DOkPG) (<= . g$16076$1DOkPG) (< . g$16075$1DOkPG) (&no-nans . g$16059$1DOkPG) (&no-infinities . g$16058$1DOkPG) (&i/o-encoding . g$16057$1DOkPG) (&i/o-decoding . g$16056$1DOkPG) (&i/o-port . g$16055$1DOkPG) (&i/o-file-does-not-exist . g$16054$1DOkPG) (&i/o-file-already-exists . g$16053$1DOkPG) (&i/o-file-is-read-only . g$16052$1DOkPG) (&i/o-file-protection . g$16051$1DOkPG) (&i/o-filename . g$16050$1DOkPG) (&i/o-invalid-position . g$16049$1DOkPG) (&i/o-write . g$16048$1DOkPG) (&i/o-read . g$16047$1DOkPG) (&i/o . g$16046$1DOkPG) (&non-continuable . g$16045$1DOkPG) (&undefined . g$16044$1DOkPG) (&syntax . g$16043$1DOkPG) (&lexical . g$16042$1DOkPG) (&implementation-restriction . g$16041$1DOkPG) (&who . g$16039$1DOkPG) (&irritants . g$16038$1DOkPG) (&assertion . g$16037$1DOkPG) (&violation . g$16036$1DOkPG) (&error . g$16035$1DOkPG) (&serious . g$16034$1DOkPG) (&warning . g$16033$1DOkPG) (&message . g$16032$1DOkPG) (&condition . g$16031$1DOkPG) (define-condition-type . g$16030$1DOkPG) (define-enumeration . g$16029$1DOkPG) (define-record-type . g$16028$1DOkPG) (parent-rtd . g$16027$1DOkPG) (nongenerative . g$16026$1DOkPG) (opaque . g$16025$1DOkPG) (sealed . g$16024$1DOkPG) (protocol . g$16023$1DOkPG) (parent . g$16022$1DOkPG) (immutable . g$16021$1DOkPG) (mutable . g$16020$1DOkPG) (fields . g$16019$1DOkPG) (error-handling-mode . g$16018$1DOkPG) (file-options . g$16017$1DOkPG) (buffer-mode . g$16016$1DOkPG) (eol-style . g$16015$1DOkPG) (guard . g$16014$1DOkPG) (unsyntax-splicing . g$16010$1DOkPG) (unsyntax . g$16009$1DOkPG) (unquote-splicing . g$16008$1DOkPG) (unquote . g$16007$1DOkPG) (_ . g$16006$1DOkPG) (else . g$16005$1DOkPG) (=> . g$16004$1DOkPG) (... . g$16003$1DOkPG) (assert . g$16002$1DOkPG) (endianness . g$16001$1DOkPG) (or . g$15998$1DOkPG) (and . g$15997$1DOkPG) (do . g$15996$1DOkPG) (cond . g$15995$1DOkPG) (let* . g$15994$1DOkPG) (let . g$15993$1DOkPG) (identifier-syntax . g$15992$1DOkPG) (with-syntax . g$15991$1DOkPG) (quasisyntax . g$15990$1DOkPG) (quasiquote . g$15989$1DOkPG) (syntax-rules . g$15988$1DOkPG) (let-values . g$15984$1DOkPG) (let*-values . g$15983$1DOkPG) (record-constructor-descriptor . g$15982$1DOkPG) (record-type-descriptor . g$15981$1DOkPG) (case . g$15979$1DOkPG) (unless . g$15977$1DOkPG) (when . g$15976$1DOkPG) (if . g$15975$1DOkPG) (letrec* . g$15974$1DOkPG) (letrec . g$15973$1DOkPG) (case-lambda . g$15971$1DOkPG) (lambda . g$15970$1DOkPG) (syntax . g$15969$1DOkPG) (syntax-case . g$15968$1DOkPG) (quote . g$15967$1DOkPG) (letrec-syntax . g$15965$1DOkPG) (let-syntax . g$15964$1DOkPG) (set! . g$15963$1DOkPG) (import . g$15962$1DOkPG) (library . g$15961$1DOkPG) (begin . g$15960$1DOkPG) (define-syntax . g$15958$1DOkPG) (define . g$15957$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16621$1DOkPG '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$10334$1DOkPG) (quotient . g$8857$1DOkPG) (null-environment . g$10333$1DOkPG) (remainder . g$8858$1DOkPG) (modulo . g$8859$1DOkPG) (inexact->exact . g$16373$1DOkPG) (force . g$16372$1DOkPG) (exact->inexact . g$16371$1DOkPG) (delay . g$16000$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16622$1DOkPG '(rnrs control) '(6) '() '() '() '((do . g$15996$1DOkPG) (unless . g$15977$1DOkPG) (when . g$15976$1DOkPG) (case-lambda . g$15971$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16623$1DOkPG '(rnrs eval) '(6) '() '() '() '((eval . g$10336$1DOkPG) (environment . g$10332$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16624$1DOkPG '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$16366$1DOkPG) (set-car! . g$16365$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16625$1DOkPG '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$16368$1DOkPG) (string-set! . g$16367$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16626$1DOkPG '(rnrs programs) '(6) '() '() '() '((exit . g$16370$1DOkPG) (command-line . g$16369$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16627$1DOkPG '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$9943$1DOkPG) (identifier? . g$10351$1DOkPG) (generate-temporaries . g$10343$1DOkPG) (free-identifier=? . g$10344$1DOkPG) (syntax->datum . g$10353$1DOkPG) (datum->syntax . g$10352$1DOkPG) (bound-identifier=? . g$10345$1DOkPG) (syntax-violation . g$10350$1DOkPG) (unsyntax-splicing . g$16010$1DOkPG) (unsyntax . g$16009$1DOkPG) (_ . g$16006$1DOkPG) (... . g$16003$1DOkPG) (with-syntax . g$15991$1DOkPG) (quasisyntax . g$15990$1DOkPG) (syntax . g$15969$1DOkPG) (syntax-case . g$15968$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16628$1DOkPG '(rnrs files) '(6) '() '() '() '((delete-file . g$8413$1DOkPG) (file-exists? . g$8412$1DOkPG) (make-i/o-write-error . g$9092$1DOkPG) (make-i/o-read-error . g$9078$1DOkPG) (make-i/o-port-error . g$9197$1DOkPG) (make-i/o-invalid-position-error . g$9107$1DOkPG) (make-i/o-filename-error . g$9124$1DOkPG) (make-i/o-file-protection-error . g$9140$1DOkPG) (make-i/o-file-is-read-only-error . g$9154$1DOkPG) (make-i/o-file-does-not-exist-error . g$9182$1DOkPG) (make-i/o-file-already-exists-error . g$9168$1DOkPG) (make-i/o-error . g$9064$1DOkPG) (i/o-write-error? . g$9093$1DOkPG) (i/o-read-error? . g$9079$1DOkPG) (i/o-port-error? . g$9199$1DOkPG) (i/o-invalid-position-error? . g$9109$1DOkPG) (i/o-filename-error? . g$9126$1DOkPG) (i/o-file-protection-error? . g$9141$1DOkPG) (i/o-file-is-read-only-error? . g$9155$1DOkPG) (i/o-file-does-not-exist-error? . g$9183$1DOkPG) (i/o-file-already-exists-error? . g$9169$1DOkPG) (i/o-error? . g$9065$1DOkPG) (i/o-error-port . g$9200$1DOkPG) (i/o-error-filename . g$9127$1DOkPG) (&i/o-port . g$16055$1DOkPG) (&i/o-file-does-not-exist . g$16054$1DOkPG) (&i/o-file-already-exists . g$16053$1DOkPG) (&i/o-file-is-read-only . g$16052$1DOkPG) (&i/o-file-protection . g$16051$1DOkPG) (&i/o-filename . g$16050$1DOkPG) (&i/o-invalid-position . g$16049$1DOkPG) (&i/o-write . g$16048$1DOkPG) (&i/o-read . g$16047$1DOkPG) (&i/o . g$16046$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16629$1DOkPG '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$16470$1DOkPG) (vector-sort . g$16469$1DOkPG) (list-sort . g$16468$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16630$1DOkPG '(rnrs base) '(6) '() '() '() '((zero? . g$16207$1DOkPG) (vector? . g$16206$1DOkPG) (vector-set! . g$16205$1DOkPG) (vector-ref . g$16204$1DOkPG) (vector-map . g$16203$1DOkPG) (vector-length . g$16202$1DOkPG) (vector-for-each . g$16201$1DOkPG) (vector-fill! . g$16200$1DOkPG) (vector->list . g$16199$1DOkPG) (vector . g$16198$1DOkPG) (values . g$16197$1DOkPG) (truncate . g$16196$1DOkPG) (tan . g$16195$1DOkPG) (symbol? . g$16194$1DOkPG) (symbol=? . g$16193$1DOkPG) (symbol->string . g$16192$1DOkPG) (substring . g$16191$1DOkPG) (string? . g$16190$1DOkPG) (string>? . g$16189$1DOkPG) (string>=? . g$16188$1DOkPG) (string=? . g$16187$1DOkPG) (string<? . g$16186$1DOkPG) (string<=? . g$16185$1DOkPG) (string-ref . g$16184$1DOkPG) (string-length . g$16183$1DOkPG) (string-for-each . g$16182$1DOkPG) (string-copy . g$16181$1DOkPG) (string-append . g$16180$1DOkPG) (string->symbol . g$16179$1DOkPG) (string->number . g$16178$1DOkPG) (string->list . g$16177$1DOkPG) (string . g$16176$1DOkPG) (sqrt . g$16175$1DOkPG) (sin . g$16174$1DOkPG) (round . g$16173$1DOkPG) (reverse . g$16172$1DOkPG) (real? . g$16171$1DOkPG) (real-valued? . g$16170$1DOkPG) (real-part . g$16169$1DOkPG) (rationalize . g$8028$1DOkPG) (rational? . g$16168$1DOkPG) (rational-valued? . g$16167$1DOkPG) (procedure? . g$16166$1DOkPG) (positive? . g$16165$1DOkPG) (pair? . g$16164$1DOkPG) (odd? . g$16163$1DOkPG) (numerator . g$16162$1DOkPG) (number? . g$16161$1DOkPG) (number->string . g$16160$1DOkPG) (null? . g$16159$1DOkPG) (not . g$16158$1DOkPG) (negative? . g$16157$1DOkPG) (nan? . g$16156$1DOkPG) (min . g$16155$1DOkPG) (max . g$16154$1DOkPG) (map . g$16153$1DOkPG) (make-vector . g$16152$1DOkPG) (make-string . g$16151$1DOkPG) (make-rectangular . g$16150$1DOkPG) (make-polar . g$16149$1DOkPG) (magnitude . g$16148$1DOkPG) (log . g$16147$1DOkPG) (list? . g$16146$1DOkPG) (list-tail . g$16145$1DOkPG) (list-ref . g$16144$1DOkPG) (list->vector . g$16143$1DOkPG) (list->string . g$16142$1DOkPG) (list . g$16141$1DOkPG) (length . g$16140$1DOkPG) (lcm . g$16139$1DOkPG) (integer? . g$16138$1DOkPG) (integer-valued? . g$16137$1DOkPG) (integer->char . g$16136$1DOkPG) (infinite? . g$16135$1DOkPG) (inexact? . g$16134$1DOkPG) (inexact . g$16133$1DOkPG) (imag-part . g$16132$1DOkPG) (gcd . g$16131$1DOkPG) (for-each . g$16130$1DOkPG) (floor . g$16129$1DOkPG) (finite? . g$16128$1DOkPG) (expt . g$16127$1DOkPG) (exp . g$16126$1DOkPG) (exact? . g$16125$1DOkPG) (exact-integer-sqrt . g$16124$1DOkPG) (exact . g$16123$1DOkPG) (even? . g$16122$1DOkPG) (error . g$16121$1DOkPG) (eqv? . g$16120$1DOkPG) (equal? . g$16119$1DOkPG) (eq? . g$16118$1DOkPG) (dynamic-wind . g$16117$1DOkPG) (div0-and-mod0 . g$16116$1DOkPG) (mod0 . g$16115$1DOkPG) (div0 . g$16114$1DOkPG) (div-and-mod . g$16113$1DOkPG) (mod . g$16112$1DOkPG) (div . g$16111$1DOkPG) (denominator . g$16110$1DOkPG) (cos . g$16109$1DOkPG) (cons . g$16108$1DOkPG) (complex? . g$16107$1DOkPG) (char? . g$16106$1DOkPG) (char>? . g$16105$1DOkPG) (char>=? . g$16104$1DOkPG) (char=? . g$16103$1DOkPG) (char<? . g$16102$1DOkPG) (char<=? . g$16101$1DOkPG) (char->integer . g$16100$1DOkPG) (ceiling . g$16099$1DOkPG) (call-with-values . g$16098$1DOkPG) (call/cc . g$16097$1DOkPG) (call-with-current-continuation . g$16096$1DOkPG) (cddddr . g$8027$1DOkPG) (cdddar . g$8026$1DOkPG) (cddadr . g$8025$1DOkPG) (cddaar . g$8024$1DOkPG) (cdaddr . g$8023$1DOkPG) (cdadar . g$8022$1DOkPG) (cdaadr . g$8021$1DOkPG) (cdaaar . g$8020$1DOkPG) (cadddr . g$8019$1DOkPG) (caddar . g$8018$1DOkPG) (cadadr . g$8017$1DOkPG) (cadaar . g$8016$1DOkPG) (caaddr . g$8015$1DOkPG) (caadar . g$8014$1DOkPG) (caaadr . g$8013$1DOkPG) (caaaar . g$8012$1DOkPG) (cdddr . g$8011$1DOkPG) (cddar . g$8010$1DOkPG) (cdadr . g$8009$1DOkPG) (cdaar . g$8008$1DOkPG) (caddr . g$8007$1DOkPG) (cadar . g$8006$1DOkPG) (caadr . g$8005$1DOkPG) (caaar . g$8004$1DOkPG) (cddr . g$8003$1DOkPG) (cdar . g$8002$1DOkPG) (cadr . g$8001$1DOkPG) (caar . g$8000$1DOkPG) (cdr . g$16095$1DOkPG) (car . g$16094$1DOkPG) (boolean? . g$16093$1DOkPG) (boolean=? . g$16092$1DOkPG) (atan . g$16091$1DOkPG) (assertion-violation . g$16090$1DOkPG) (asin . g$16089$1DOkPG) (apply . g$16088$1DOkPG) (append . g$16087$1DOkPG) (angle . g$16086$1DOkPG) (acos . g$16085$1DOkPG) (abs . g$16084$1DOkPG) (/ . g$16083$1DOkPG) (* . g$16082$1DOkPG) (- . g$16081$1DOkPG) (+ . g$16080$1DOkPG) (>= . g$16079$1DOkPG) (> . g$16078$1DOkPG) (= . g$16077$1DOkPG) (<= . g$16076$1DOkPG) (< . g$16075$1DOkPG) (unquote-splicing . g$16008$1DOkPG) (unquote . g$16007$1DOkPG) (_ . g$16006$1DOkPG) (else . g$16005$1DOkPG) (=> . g$16004$1DOkPG) (... . g$16003$1DOkPG) (assert . g$16002$1DOkPG) (or . g$15998$1DOkPG) (and . g$15997$1DOkPG) (cond . g$15995$1DOkPG) (let* . g$15994$1DOkPG) (let . g$15993$1DOkPG) (identifier-syntax . g$15992$1DOkPG) (quasiquote . g$15989$1DOkPG) (syntax-rules . g$15988$1DOkPG) (let-values . g$15984$1DOkPG) (let*-values . g$15983$1DOkPG) (case . g$15979$1DOkPG) (if . g$15975$1DOkPG) (letrec* . g$15974$1DOkPG) (letrec . g$15973$1DOkPG) (lambda . g$15970$1DOkPG) (quote . g$15967$1DOkPG) (letrec-syntax . g$15965$1DOkPG) (let-syntax . g$15964$1DOkPG) (set! . g$15963$1DOkPG) (begin . g$15960$1DOkPG) (define-syntax . g$15958$1DOkPG) (define . g$15957$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16631$1DOkPG '(rnrs lists) '(6) '() '() '() '((remove . g$8484$1DOkPG) (remv . g$8485$1DOkPG) (remp . g$16364$1DOkPG) (remq . g$8486$1DOkPG) (partition . g$16363$1DOkPG) (memv . g$16362$1DOkPG) (memq . g$16361$1DOkPG) (memp . g$16360$1DOkPG) (member . g$16359$1DOkPG) (exists . g$8480$1DOkPG) (for-all . g$8479$1DOkPG) (fold-right . g$8483$1DOkPG) (fold-left . g$8482$1DOkPG) (find . g$16358$1DOkPG) (filter . g$16357$1DOkPG) (cons* . g$8481$1DOkPG) (assv . g$16356$1DOkPG) (assq . g$16355$1DOkPG) (assp . g$16354$1DOkPG) (assoc . g$16353$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16632$1DOkPG '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$16457$1DOkPG) (call-with-input-file . g$16456$1DOkPG) (write-char . g$16455$1DOkPG) (write . g$16454$1DOkPG) (with-output-to-file . g$16453$1DOkPG) (with-input-from-file . g$16452$1DOkPG) (read-char . g$16451$1DOkPG) (read . g$16450$1DOkPG) (peek-char . g$16449$1DOkPG) (open-output-file . g$16448$1DOkPG) (open-input-file . g$16447$1DOkPG) (newline . g$16446$1DOkPG) (display . g$16445$1DOkPG) (close-output-port . g$16444$1DOkPG) (close-input-port . g$16443$1DOkPG) (eof-object? . g$16442$1DOkPG) (eof-object . g$16441$1DOkPG) (current-error-port . g$16440$1DOkPG) (current-output-port . g$16439$1DOkPG) (current-input-port . g$16438$1DOkPG) (output-port? . g$16437$1DOkPG) (input-port? . g$16436$1DOkPG) (make-i/o-write-error . g$9092$1DOkPG) (make-i/o-read-error . g$9078$1DOkPG) (make-i/o-port-error . g$9197$1DOkPG) (make-i/o-invalid-position-error . g$9107$1DOkPG) (make-i/o-filename-error . g$9124$1DOkPG) (make-i/o-file-protection-error . g$9140$1DOkPG) (make-i/o-file-is-read-only-error . g$9154$1DOkPG) (make-i/o-file-does-not-exist-error . g$9182$1DOkPG) (make-i/o-file-already-exists-error . g$9168$1DOkPG) (make-i/o-error . g$9064$1DOkPG) (i/o-write-error? . g$9093$1DOkPG) (i/o-read-error? . g$9079$1DOkPG) (i/o-port-error? . g$9199$1DOkPG) (i/o-invalid-position-error? . g$9109$1DOkPG) (i/o-filename-error? . g$9126$1DOkPG) (i/o-file-protection-error? . g$9141$1DOkPG) (i/o-file-is-read-only-error? . g$9155$1DOkPG) (i/o-file-does-not-exist-error? . g$9183$1DOkPG) (i/o-file-already-exists-error? . g$9169$1DOkPG) (i/o-error? . g$9065$1DOkPG) (i/o-error-port . g$9200$1DOkPG) (i/o-error-filename . g$9127$1DOkPG) (&i/o-port . g$16055$1DOkPG) (&i/o-file-does-not-exist . g$16054$1DOkPG) (&i/o-file-already-exists . g$16053$1DOkPG) (&i/o-file-is-read-only . g$16052$1DOkPG) (&i/o-file-protection . g$16051$1DOkPG) (&i/o-filename . g$16050$1DOkPG) (&i/o-invalid-position . g$16049$1DOkPG) (&i/o-write . g$16048$1DOkPG) (&i/o-read . g$16047$1DOkPG) (&i/o . g$16046$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16633$1DOkPG '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$16395$1DOkPG) (utf32->string . g$16331$1DOkPG) (utf16->string . g$16330$1DOkPG) (utf8->string . g$16329$1DOkPG) (uint-list->bytevector . g$16328$1DOkPG) (u8-list->bytevector . g$16327$1DOkPG) (string->utf8 . g$16326$1DOkPG) (string->utf32 . g$16325$1DOkPG) (string->utf16 . g$16324$1DOkPG) (sint-list->bytevector . g$16323$1DOkPG) (native-endianness . g$8525$1DOkPG) (bytevector? . g$16322$1DOkPG) (bytevector=? . g$16321$1DOkPG) (bytevector-uint-set! . g$16320$1DOkPG) (bytevector-uint-ref . g$16319$1DOkPG) (bytevector-u8-set! . g$16318$1DOkPG) (bytevector-u8-ref . g$16317$1DOkPG) (bytevector-u64-set! . g$8546$1DOkPG) (bytevector-u64-ref . g$8542$1DOkPG) (bytevector-u64-native-set! . g$8548$1DOkPG) (bytevector-u64-native-ref . g$8544$1DOkPG) (bytevector-u32-set! . g$8538$1DOkPG) (bytevector-u32-ref . g$8534$1DOkPG) (bytevector-u32-native-set! . g$8540$1DOkPG) (bytevector-u32-native-ref . g$8536$1DOkPG) (bytevector-u16-set! . g$8530$1DOkPG) (bytevector-u16-ref . g$8526$1DOkPG) (bytevector-u16-native-set! . g$8532$1DOkPG) (bytevector-u16-native-ref . g$8528$1DOkPG) (bytevector-sint-set! . g$16316$1DOkPG) (bytevector-sint-ref . g$16315$1DOkPG) (bytevector-s8-set! . g$16314$1DOkPG) (bytevector-s8-ref . g$16313$1DOkPG) (bytevector-s64-set! . g$8547$1DOkPG) (bytevector-s64-ref . g$8543$1DOkPG) (bytevector-s64-native-set! . g$8549$1DOkPG) (bytevector-s64-native-ref . g$8545$1DOkPG) (bytevector-s32-set! . g$8539$1DOkPG) (bytevector-s32-ref . g$8535$1DOkPG) (bytevector-s32-native-set! . g$8541$1DOkPG) (bytevector-s32-native-ref . g$8537$1DOkPG) (bytevector-s16-set! . g$8531$1DOkPG) (bytevector-s16-ref . g$8527$1DOkPG) (bytevector-s16-native-set! . g$8533$1DOkPG) (bytevector-s16-native-ref . g$8529$1DOkPG) (bytevector-length . g$16312$1DOkPG) (bytevector-ieee-single-set! . g$16311$1DOkPG) (bytevector-ieee-single-ref . g$16310$1DOkPG) (bytevector-ieee-single-native-set! . g$8552$1DOkPG) (bytevector-ieee-single-native-ref . g$8550$1DOkPG) (bytevector-ieee-double-set! . g$16309$1DOkPG) (bytevector-ieee-double-ref . g$16308$1DOkPG) (bytevector-ieee-double-native-set! . g$8553$1DOkPG) (bytevector-ieee-double-native-ref . g$8551$1DOkPG) (bytevector-fill! . g$16307$1DOkPG) (bytevector-copy! . g$16306$1DOkPG) (bytevector-copy . g$16305$1DOkPG) (bytevector->uint-list . g$16304$1DOkPG) (bytevector->u8-list . g$16303$1DOkPG) (bytevector->sint-list . g$16302$1DOkPG) (endianness . g$16001$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16634$1DOkPG '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$16516$1DOkPG) (string-titlecase . g$16515$1DOkPG) (string-normalize-nfkd . g$16514$1DOkPG) (string-normalize-nfkc . g$16513$1DOkPG) (string-normalize-nfd . g$16512$1DOkPG) (string-normalize-nfc . g$16511$1DOkPG) (string-foldcase . g$16510$1DOkPG) (string-downcase . g$16509$1DOkPG) (string-ci>? . g$16508$1DOkPG) (string-ci>=? . g$16507$1DOkPG) (string-ci=? . g$16506$1DOkPG) (string-ci<? . g$16505$1DOkPG) (string-ci<=? . g$16504$1DOkPG) (char-whitespace? . g$16503$1DOkPG) (char-upper-case? . g$16502$1DOkPG) (char-title-case? . g$16501$1DOkPG) (char-numeric? . g$16500$1DOkPG) (char-lower-case? . g$16499$1DOkPG) (char-general-category . g$16498$1DOkPG) (char-upcase . g$16497$1DOkPG) (char-titlecase . g$16496$1DOkPG) (char-foldcase . g$16495$1DOkPG) (char-downcase . g$16494$1DOkPG) (char-ci>? . g$16493$1DOkPG) (char-ci>=? . g$16492$1DOkPG) (char-ci=? . g$16491$1DOkPG) (char-ci<? . g$16490$1DOkPG) (char-ci<=? . g$16489$1DOkPG) (char-alphabetic? . g$16488$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16635$1DOkPG '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$16352$1DOkPG) (raise-continuable . g$16351$1DOkPG) (raise . g$16350$1DOkPG) (guard . g$16014$1DOkPG) (else . g$16005$1DOkPG) (=> . g$16004$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16636$1DOkPG '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$8929$1DOkPG) (bitwise-reverse-bit-field . g$8930$1DOkPG) (bitwise-length . g$16217$1DOkPG) (bitwise-if . g$8923$1DOkPG) (bitwise-first-bit-set . g$16216$1DOkPG) (bitwise-copy-bit-field . g$8926$1DOkPG) (bitwise-copy-bit . g$8924$1DOkPG) (bitwise-bit-set? . g$16215$1DOkPG) (bitwise-bit-field . g$16214$1DOkPG) (bitwise-bit-count . g$16213$1DOkPG) (bitwise-xor . g$16212$1DOkPG) (bitwise-ior . g$16211$1DOkPG) (bitwise-and . g$16210$1DOkPG) (bitwise-not . g$16209$1DOkPG) (bitwise-arithmetic-shift-right . g$8928$1DOkPG) (bitwise-arithmetic-shift-left . g$8927$1DOkPG) (bitwise-arithmetic-shift . g$16208$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16637$1DOkPG '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$16255$1DOkPG) (fxxor . g$16254$1DOkPG) (fxrotate-bit-field . g$8981$1DOkPG) (fxreverse-bit-field . g$16253$1DOkPG) (fxpositive? . g$16252$1DOkPG) (fxodd? . g$16251$1DOkPG) (fxnot . g$16250$1DOkPG) (fxnegative? . g$16249$1DOkPG) (fxmod0 . g$16248$1DOkPG) (fxmod . g$16247$1DOkPG) (fxmin . g$16246$1DOkPG) (fxmax . g$16245$1DOkPG) (fxlength . g$16244$1DOkPG) (fxior . g$16243$1DOkPG) (fxif . g$8975$1DOkPG) (fxfirst-bit-set . g$16242$1DOkPG) (fxeven? . g$16241$1DOkPG) (fxdiv0-and-mod0 . g$16240$1DOkPG) (fxdiv0 . g$16239$1DOkPG) (fxdiv-and-mod . g$16238$1DOkPG) (fxdiv . g$16237$1DOkPG) (fxcopy-bit-field . g$8978$1DOkPG) (fxcopy-bit . g$8976$1DOkPG) (fxbit-set? . g$16236$1DOkPG) (fxbit-field . g$8977$1DOkPG) (fxbit-count . g$16235$1DOkPG) (fxarithmetic-shift-right . g$8980$1DOkPG) (fxarithmetic-shift-left . g$8979$1DOkPG) (fxarithmetic-shift . g$16234$1DOkPG) (fxand . g$16233$1DOkPG) (fx>? . g$16232$1DOkPG) (fx>=? . g$16231$1DOkPG) (fx=? . g$16230$1DOkPG) (fx<? . g$16229$1DOkPG) (fx<=? . g$16228$1DOkPG) (fx-/carry . g$16227$1DOkPG) (fx- . g$16226$1DOkPG) (fx+/carry . g$16225$1DOkPG) (fx+ . g$16224$1DOkPG) (fx*/carry . g$16223$1DOkPG) (fx* . g$16222$1DOkPG) (greatest-fixnum . g$16221$1DOkPG) (least-fixnum . g$16220$1DOkPG) (fixnum-width . g$16219$1DOkPG) (fixnum? . g$16218$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16638$1DOkPG '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$9050$1DOkPG) (no-infinities-violation? . g$9036$1DOkPG) (make-no-nans-violation . g$9049$1DOkPG) (make-no-infinities-violation . g$9035$1DOkPG) (real->flonum . g$16301$1DOkPG) (flzero? . g$16300$1DOkPG) (fltruncate . g$16299$1DOkPG) (fltan . g$16298$1DOkPG) (flsqrt . g$16297$1DOkPG) (flsin . g$16296$1DOkPG) (flround . g$16295$1DOkPG) (flpositive? . g$16294$1DOkPG) (flonum? . g$16293$1DOkPG) (flodd? . g$16292$1DOkPG) (flnumerator . g$16291$1DOkPG) (flnegative? . g$16290$1DOkPG) (flnan? . g$16289$1DOkPG) (flmod0 . g$16288$1DOkPG) (flmod . g$16287$1DOkPG) (flmin . g$16286$1DOkPG) (flmax . g$16285$1DOkPG) (fllog . g$16284$1DOkPG) (flinteger? . g$16283$1DOkPG) (flinfinite? . g$16282$1DOkPG) (flfloor . g$16281$1DOkPG) (flfinite? . g$16280$1DOkPG) (flexpt . g$16279$1DOkPG) (flexp . g$16278$1DOkPG) (fleven? . g$16277$1DOkPG) (fldiv0-and-mod0 . g$16276$1DOkPG) (fldiv0 . g$16275$1DOkPG) (fldiv-and-mod . g$16274$1DOkPG) (fldiv . g$16273$1DOkPG) (fldenominator . g$16272$1DOkPG) (flcos . g$16271$1DOkPG) (flceiling . g$16270$1DOkPG) (flatan . g$16269$1DOkPG) (flasin . g$16268$1DOkPG) (flacos . g$16267$1DOkPG) (flabs . g$16266$1DOkPG) (fl>? . g$16265$1DOkPG) (fl>=? . g$16264$1DOkPG) (fl=? . g$16263$1DOkPG) (fl<? . g$16262$1DOkPG) (fl<=? . g$16261$1DOkPG) (fl/ . g$16260$1DOkPG) (fl- . g$16259$1DOkPG) (fl+ . g$16258$1DOkPG) (fl* . g$16257$1DOkPG) (fixnum->flonum . g$16256$1DOkPG) (&no-nans . g$16059$1DOkPG) (&no-infinities . g$16058$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16639$1DOkPG '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$16467$1DOkPG) (string-ci-hash . g$16466$1DOkPG) (string-hash . g$16465$1DOkPG) (equal-hash . g$16464$1DOkPG) (hashtable-equivalence-function . g$8386$1DOkPG) (make-hashtable . g$16463$1DOkPG) (hashtable-hash-function . g$8387$1DOkPG) (make-eqv-hashtable . g$8378$1DOkPG) (make-eq-hashtable . g$8377$1DOkPG) (hashtable? . g$16462$1DOkPG) (hashtable-update! . g$8384$1DOkPG) (hashtable-size . g$8379$1DOkPG) (hashtable-set! . g$8381$1DOkPG) (hashtable-ref . g$8380$1DOkPG) (hashtable-mutable? . g$16461$1DOkPG) (hashtable-keys . g$16460$1DOkPG) (hashtable-entries . g$16459$1DOkPG) (hashtable-delete! . g$8382$1DOkPG) (hashtable-copy . g$16458$1DOkPG) (hashtable-contains? . g$8383$1DOkPG) (hashtable-clear! . g$8385$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16640$1DOkPG '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$16442$1DOkPG) (eof-object . g$16441$1DOkPG) (current-error-port . g$16440$1DOkPG) (current-output-port . g$16439$1DOkPG) (current-input-port . g$16438$1DOkPG) (output-port? . g$16437$1DOkPG) (input-port? . g$16436$1DOkPG) (utf-8-codec . g$16435$1DOkPG) (utf-16-codec . g$16434$1DOkPG) (transcoder-error-handling-mode . g$16433$1DOkPG) (transcoder-eol-style . g$16432$1DOkPG) (transcoder-codec . g$16431$1DOkPG) (transcoded-port . g$16430$1DOkPG) (textual-port? . g$16429$1DOkPG) (string->bytevector . g$16428$1DOkPG) (standard-output-port . g$16427$1DOkPG) (standard-input-port . g$16426$1DOkPG) (standard-error-port . g$16425$1DOkPG) (set-port-position! . g$16424$1DOkPG) (put-u8 . g$16423$1DOkPG) (put-string . g$16422$1DOkPG) (put-datum . g$16421$1DOkPG) (put-char . g$16420$1DOkPG) (put-bytevector . g$16419$1DOkPG) (port? . g$16418$1DOkPG) (port-transcoder . g$16417$1DOkPG) (port-position . g$16416$1DOkPG) (port-has-set-port-position!? . g$16415$1DOkPG) (port-has-port-position? . g$16414$1DOkPG) (port-eof? . g$16413$1DOkPG) (output-port-buffer-mode . g$16412$1DOkPG) (open-string-output-port . g$9235$1DOkPG) (open-string-input-port . g$16411$1DOkPG) (open-file-output-port . g$16410$1DOkPG) (open-file-input/output-port . g$16409$1DOkPG) (open-file-input-port . g$16408$1DOkPG) (open-bytevector-output-port . g$16407$1DOkPG) (open-bytevector-input-port . g$16406$1DOkPG) (native-transcoder . g$16405$1DOkPG) (native-eol-style . g$16404$1DOkPG) (make-transcoder . g$16403$1DOkPG) (latin-1-codec . g$16402$1DOkPG) (make-i/o-write-error . g$9092$1DOkPG) (make-i/o-read-error . g$9078$1DOkPG) (make-i/o-port-error . g$9197$1DOkPG) (make-i/o-invalid-position-error . g$9107$1DOkPG) (make-i/o-filename-error . g$9124$1DOkPG) (make-i/o-file-protection-error . g$9140$1DOkPG) (make-i/o-file-is-read-only-error . g$9154$1DOkPG) (make-i/o-file-does-not-exist-error . g$9182$1DOkPG) (make-i/o-file-already-exists-error . g$9168$1DOkPG) (make-i/o-error . g$9064$1DOkPG) (make-i/o-encoding-error . g$9228$1DOkPG) (make-i/o-decoding-error . g$9213$1DOkPG) (make-custom-textual-output-port . g$16401$1DOkPG) (make-custom-textual-input/output-port . g$16400$1DOkPG) (make-custom-textual-input-port . g$16399$1DOkPG) (make-custom-binary-output-port . g$16398$1DOkPG) (make-custom-binary-input/output-port . g$16397$1DOkPG) (make-custom-binary-input-port . g$16396$1DOkPG) (lookahead-u8 . g$16394$1DOkPG) (lookahead-char . g$16393$1DOkPG) (i/o-write-error? . g$9093$1DOkPG) (i/o-read-error? . g$9079$1DOkPG) (i/o-port-error? . g$9199$1DOkPG) (i/o-invalid-position-error? . g$9109$1DOkPG) (i/o-filename-error? . g$9126$1DOkPG) (i/o-file-protection-error? . g$9141$1DOkPG) (i/o-file-is-read-only-error? . g$9155$1DOkPG) (i/o-file-does-not-exist-error? . g$9183$1DOkPG) (i/o-file-already-exists-error? . g$9169$1DOkPG) (i/o-error? . g$9065$1DOkPG) (i/o-error-port . g$9200$1DOkPG) (i/o-error-filename . g$9127$1DOkPG) (i/o-encoding-error? . g$9230$1DOkPG) (i/o-encoding-error-char . g$9231$1DOkPG) (i/o-decoding-error? . g$9214$1DOkPG) (get-u8 . g$16392$1DOkPG) (get-string-n! . g$16391$1DOkPG) (get-string-n . g$16390$1DOkPG) (get-string-all . g$16389$1DOkPG) (get-line . g$16388$1DOkPG) (get-datum . g$16387$1DOkPG) (get-char . g$16386$1DOkPG) (get-bytevector-some . g$16385$1DOkPG) (get-bytevector-n! . g$16384$1DOkPG) (get-bytevector-n . g$16383$1DOkPG) (get-bytevector-all . g$16382$1DOkPG) (flush-output-port . g$16381$1DOkPG) (close-port . g$16380$1DOkPG) (call-with-string-output-port . g$16379$1DOkPG) (call-with-port . g$16378$1DOkPG) (call-with-bytevector-output-port . g$16377$1DOkPG) (bytevector->string . g$16376$1DOkPG) (buffer-mode? . g$16375$1DOkPG) (binary-port? . g$16374$1DOkPG) (&i/o-encoding . g$16057$1DOkPG) (&i/o-decoding . g$16056$1DOkPG) (&i/o-port . g$16055$1DOkPG) (&i/o-file-does-not-exist . g$16054$1DOkPG) (&i/o-file-already-exists . g$16053$1DOkPG) (&i/o-file-is-read-only . g$16052$1DOkPG) (&i/o-file-protection . g$16051$1DOkPG) (&i/o-filename . g$16050$1DOkPG) (&i/o-invalid-position . g$16049$1DOkPG) (&i/o-write . g$16048$1DOkPG) (&i/o-read . g$16047$1DOkPG) (&i/o . g$16046$1DOkPG) (error-handling-mode . g$16018$1DOkPG) (file-options . g$16017$1DOkPG) (buffer-mode . g$16016$1DOkPG) (eol-style . g$16015$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16641$1DOkPG '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$16349$1DOkPG) (enum-set=? . g$16348$1DOkPG) (enum-set-universe . g$16347$1DOkPG) (enum-set-union . g$16346$1DOkPG) (enum-set-subset? . g$16345$1DOkPG) (enum-set-projection . g$16344$1DOkPG) (enum-set-member? . g$16343$1DOkPG) (enum-set-intersection . g$16342$1DOkPG) (enum-set-indexer . g$16341$1DOkPG) (enum-set-difference . g$16340$1DOkPG) (enum-set-constructor . g$16339$1DOkPG) (enum-set-complement . g$16338$1DOkPG) (enum-set->list . g$16337$1DOkPG) (define-enumeration . g$16029$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16642$1DOkPG '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$8774$1DOkPG) (warning? . g$8685$1DOkPG) (violation? . g$8727$1DOkPG) (undefined-violation? . g$8851$1DOkPG) (syntax-violation? . g$8835$1DOkPG) (syntax-violation-subform . g$8837$1DOkPG) (syntax-violation-form . g$8836$1DOkPG) (syntax-violation . g$10350$1DOkPG) (simple-conditions . g$16336$1DOkPG) (serious-condition? . g$8699$1DOkPG) (non-continuable-violation? . g$8789$1DOkPG) (message-condition? . g$8670$1DOkPG) (make-who-condition . g$8772$1DOkPG) (make-warning . g$8684$1DOkPG) (make-violation . g$8726$1DOkPG) (make-undefined-violation . g$8850$1DOkPG) (make-syntax-violation . g$8832$1DOkPG) (make-serious-condition . g$8698$1DOkPG) (make-non-continuable-violation . g$8788$1DOkPG) (make-message-condition . g$8668$1DOkPG) (make-lexical-violation . g$8816$1DOkPG) (make-irritants-condition . g$8755$1DOkPG) (make-implementation-restriction-violation . g$8802$1DOkPG) (make-error . g$8712$1DOkPG) (make-assertion-violation . g$8740$1DOkPG) (lexical-violation? . g$8817$1DOkPG) (irritants-condition? . g$8757$1DOkPG) (implementation-restriction-violation? . g$8803$1DOkPG) (error? . g$8713$1DOkPG) (condition-who . g$8775$1DOkPG) (condition-predicate . g$16335$1DOkPG) (condition-message . g$8671$1DOkPG) (condition-irritants . g$8758$1DOkPG) (condition-accessor . g$16334$1DOkPG) (condition . g$16333$1DOkPG) (assertion-violation? . g$8741$1DOkPG) (condition? . g$16332$1DOkPG) (&non-continuable . g$16045$1DOkPG) (&undefined . g$16044$1DOkPG) (&syntax . g$16043$1DOkPG) (&lexical . g$16042$1DOkPG) (&implementation-restriction . g$16041$1DOkPG) (&who . g$16039$1DOkPG) (&irritants . g$16038$1DOkPG) (&assertion . g$16037$1DOkPG) (&violation . g$16036$1DOkPG) (&error . g$16035$1DOkPG) (&serious . g$16034$1DOkPG) (&warning . g$16033$1DOkPG) (&message . g$16032$1DOkPG) (&condition . g$16031$1DOkPG) (define-condition-type . g$16030$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16643$1DOkPG '(rnrs records inspection) '(6) '() '() '() '((record? . g$16480$1DOkPG) (record-type-uid . g$16479$1DOkPG) (record-type-sealed? . g$16478$1DOkPG) (record-type-parent . g$16477$1DOkPG) (record-type-opaque? . g$16476$1DOkPG) (record-type-name . g$16475$1DOkPG) (record-type-generative? . g$16474$1DOkPG) (record-type-field-names . g$16473$1DOkPG) (record-rtd . g$16472$1DOkPG) (record-field-mutable? . g$16471$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16644$1DOkPG '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$16487$1DOkPG) (record-predicate . g$16486$1DOkPG) (record-mutator . g$16485$1DOkPG) (record-constructor . g$16484$1DOkPG) (record-accessor . g$16483$1DOkPG) (make-record-type-descriptor . g$16482$1DOkPG) (make-record-constructor-descriptor . g$16481$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16645$1DOkPG '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$16028$1DOkPG) (parent-rtd . g$16027$1DOkPG) (nongenerative . g$16026$1DOkPG) (opaque . g$16025$1DOkPG) (sealed . g$16024$1DOkPG) (protocol . g$16023$1DOkPG) (parent . g$16022$1DOkPG) (immutable . g$16021$1DOkPG) (mutable . g$16020$1DOkPG) (fields . g$16019$1DOkPG) (record-constructor-descriptor . g$15982$1DOkPG) (record-type-descriptor . g$15981$1DOkPG)) '() values values '#f '#f '#t '#f) (g$install-library$8996$1DOkPG 'g$16646$1DOkPG '(psyntax system $all) '() '() '() '() '((ellipsis-map . g$10267$1DOkPG) (&no-nans-rcd . g$16610$1DOkPG) (&no-nans-rtd . g$16609$1DOkPG) (&no-infinities-rcd . g$16608$1DOkPG) (&no-infinities-rtd . g$16607$1DOkPG) (&i/o-encoding-rcd . g$16606$1DOkPG) (&i/o-encoding-rtd . g$16605$1DOkPG) (&i/o-decoding-rcd . g$16604$1DOkPG) (&i/o-decoding-rtd . g$16603$1DOkPG) (&i/o-port-rcd . g$16602$1DOkPG) (&i/o-port-rtd . g$16601$1DOkPG) (&i/o-file-does-not-exist-rcd . g$16600$1DOkPG) (&i/o-file-does-not-exist-rtd . g$16599$1DOkPG) (&i/o-file-already-exists-rcd . g$16598$1DOkPG) (&i/o-file-already-exists-rtd . g$16597$1DOkPG) (&i/o-fie-is-read-only-rcd . g$16596$1DOkPG) (&i/o-fie-is-read-only-rtd . g$16595$1DOkPG) (&i/o-file-protection-rcd . g$16594$1DOkPG) (&i/o-file-protection-rtd . g$16593$1DOkPG) (&i/o-filename-rcd . g$16592$1DOkPG) (&i/o-filename-rtd . g$16591$1DOkPG) (&i/o-invalid-position-rcd . g$16590$1DOkPG) (&i/o-invalid-position-rtd . g$16589$1DOkPG) (&i/o-write-rcd . g$16588$1DOkPG) (&i/o-write-rtd . g$16587$1DOkPG) (&i/o-read-rcd . g$16586$1DOkPG) (&i/o-read-rtd . g$16585$1DOkPG) (&i/o-rcd . g$16584$1DOkPG) (&i/o-rtd . g$16583$1DOkPG) (&undefined-rcd . g$16582$1DOkPG) (&undefined-rtd . g$16581$1DOkPG) (&syntax-rcd . g$16580$1DOkPG) (&syntax-rtd . g$16579$1DOkPG) (&lexical-rcd . g$16578$1DOkPG) (&lexical-rtd . g$16577$1DOkPG) (&implementation-restriction-rcd . g$16576$1DOkPG) (&implementation-restriction-rtd . g$16575$1DOkPG) (&non-continuable-rcd . g$16574$1DOkPG) (&non-continuable-rtd . g$16573$1DOkPG) (&who-rcd . g$16572$1DOkPG) (&who-rtd . g$16571$1DOkPG) (&irritants-rcd . g$16570$1DOkPG) (&irritants-rtd . g$16569$1DOkPG) (&assertion-rcd . g$16568$1DOkPG) (&assertion-rtd . g$16567$1DOkPG) (&violation-rcd . g$16566$1DOkPG) (&violation-rtd . g$16565$1DOkPG) (&error-rcd . g$16564$1DOkPG) (&error-rtd . g$16563$1DOkPG) (&serious-rcd . g$16562$1DOkPG) (&serious-rtd . g$16561$1DOkPG) (&warning-rcd . g$16560$1DOkPG) (&warning-rtd . g$16559$1DOkPG) (&message-rcd . g$16558$1DOkPG) (&message-rtd . g$16557$1DOkPG) (&condition-rcd . g$16556$1DOkPG) (&condition-rtd . g$16555$1DOkPG) (library-letrec* . g$16554$1DOkPG) (annotation-stripped . g$16553$1DOkPG) (annotation-source . g$16552$1DOkPG) (annotation-expression . g$16551$1DOkPG) (annotation? . g$16550$1DOkPG) (read-annotated . g$16549$1DOkPG) (tanh . g$16548$1DOkPG) (cosh . g$16547$1DOkPG) (sinh . g$16546$1DOkPG) (group-by . g$16545$1DOkPG) (make-guid . g$16544$1DOkPG) (unspecified? . g$16543$1DOkPG) (make-trace . g$16542$1DOkPG) (make-list . g$16541$1DOkPG) (last-pair . g$16540$1DOkPG) (load-r5rs . g$16539$1DOkPG) (license . g$16538$1DOkPG) (stacktrace . g$16537$1DOkPG) (ironscheme-build . g$9243$1DOkPG) (define-clr-class-internal . g$16536$1DOkPG) (clr-field-set!-internal . g$16535$1DOkPG) (clr-field-get-internal . g$16534$1DOkPG) (clr-cast-internal . g$16533$1DOkPG) (clr-call-internal . g$16532$1DOkPG) (clr-new-internal . g$16531$1DOkPG) (clr-new-array-internal . g$16530$1DOkPG) (clr-is-internal . g$16529$1DOkPG) (clr-reference-internal . g$16528$1DOkPG) (clr-using-internal . g$16527$1DOkPG) (clr-clear-usings-internal . g$16526$1DOkPG) (syntax-error . g$10347$1DOkPG) (syntax-dispatch . g$10264$1DOkPG) (eval-core . g$16525$1DOkPG) (set-symbol-value! . g$16524$1DOkPG) (symbol-value . g$16523$1DOkPG) (gensym . g$16522$1DOkPG) (void . g$16521$1DOkPG) (load-serialized-library . g$16520$1DOkPG) (serialize-library . g$16519$1DOkPG) (compile->closure . g$15933$1DOkPG) (compile . g$15932$1DOkPG) (load . g$15931$1DOkPG) (interaction-environment . g$16518$1DOkPG) (char-ready? . g$16517$1DOkPG) (string-upcase . g$16516$1DOkPG) (string-titlecase . g$16515$1DOkPG) (string-normalize-nfkd . g$16514$1DOkPG) (string-normalize-nfkc . g$16513$1DOkPG) (string-normalize-nfd . g$16512$1DOkPG) (string-normalize-nfc . g$16511$1DOkPG) (string-foldcase . g$16510$1DOkPG) (string-downcase . g$16509$1DOkPG) (string-ci>? . g$16508$1DOkPG) (string-ci>=? . g$16507$1DOkPG) (string-ci=? . g$16506$1DOkPG) (string-ci<? . g$16505$1DOkPG) (string-ci<=? . g$16504$1DOkPG) (char-whitespace? . g$16503$1DOkPG) (char-upper-case? . g$16502$1DOkPG) (char-title-case? . g$16501$1DOkPG) (char-numeric? . g$16500$1DOkPG) (char-lower-case? . g$16499$1DOkPG) (char-general-category . g$16498$1DOkPG) (char-upcase . g$16497$1DOkPG) (char-titlecase . g$16496$1DOkPG) (char-foldcase . g$16495$1DOkPG) (char-downcase . g$16494$1DOkPG) (char-ci>? . g$16493$1DOkPG) (char-ci>=? . g$16492$1DOkPG) (char-ci=? . g$16491$1DOkPG) (char-ci<? . g$16490$1DOkPG) (char-ci<=? . g$16489$1DOkPG) (char-alphabetic? . g$16488$1DOkPG) (make-variable-transformer . g$9943$1DOkPG) (identifier? . g$10351$1DOkPG) (generate-temporaries . g$10343$1DOkPG) (free-identifier=? . g$10344$1DOkPG) (syntax->datum . g$10353$1DOkPG) (datum->syntax . g$10352$1DOkPG) (bound-identifier=? . g$10345$1DOkPG) (record-type-descriptor? . g$16487$1DOkPG) (record-predicate . g$16486$1DOkPG) (record-mutator . g$16485$1DOkPG) (record-constructor . g$16484$1DOkPG) (record-accessor . g$16483$1DOkPG) (make-record-type-descriptor . g$16482$1DOkPG) (make-record-constructor-descriptor . g$16481$1DOkPG) (record? . g$16480$1DOkPG) (record-type-uid . g$16479$1DOkPG) (record-type-sealed? . g$16478$1DOkPG) (record-type-parent . g$16477$1DOkPG) (record-type-opaque? . g$16476$1DOkPG) (record-type-name . g$16475$1DOkPG) (record-type-generative? . g$16474$1DOkPG) (record-type-field-names . g$16473$1DOkPG) (record-rtd . g$16472$1DOkPG) (record-field-mutable? . g$16471$1DOkPG) (delete-file . g$8413$1DOkPG) (file-exists? . g$8412$1DOkPG) (vector-sort! . g$16470$1DOkPG) (vector-sort . g$16469$1DOkPG) (list-sort . g$16468$1DOkPG) (symbol-hash . g$16467$1DOkPG) (string-ci-hash . g$16466$1DOkPG) (string-hash . g$16465$1DOkPG) (equal-hash . g$16464$1DOkPG) (hashtable-equivalence-function . g$8386$1DOkPG) (make-hashtable . g$16463$1DOkPG) (hashtable-hash-function . g$8387$1DOkPG) (make-eqv-hashtable . g$8378$1DOkPG) (make-eq-hashtable . g$8377$1DOkPG) (hashtable? . g$16462$1DOkPG) (hashtable-update! . g$8384$1DOkPG) (hashtable-size . g$8379$1DOkPG) (hashtable-set! . g$8381$1DOkPG) (hashtable-ref . g$8380$1DOkPG) (hashtable-mutable? . g$16461$1DOkPG) (hashtable-keys . g$16460$1DOkPG) (hashtable-entries . g$16459$1DOkPG) (hashtable-delete! . g$8382$1DOkPG) (hashtable-copy . g$16458$1DOkPG) (hashtable-contains? . g$8383$1DOkPG) (hashtable-clear! . g$8385$1DOkPG) (call-with-output-file . g$16457$1DOkPG) (call-with-input-file . g$16456$1DOkPG) (write-char . g$16455$1DOkPG) (write . g$16454$1DOkPG) (with-output-to-file . g$16453$1DOkPG) (with-input-from-file . g$16452$1DOkPG) (read-char . g$16451$1DOkPG) (read . g$16450$1DOkPG) (peek-char . g$16449$1DOkPG) (open-output-file . g$16448$1DOkPG) (open-input-file . g$16447$1DOkPG) (newline . g$16446$1DOkPG) (display . g$16445$1DOkPG) (close-output-port . g$16444$1DOkPG) (close-input-port . g$16443$1DOkPG) (eof-object? . g$16442$1DOkPG) (eof-object . g$16441$1DOkPG) (current-error-port . g$16440$1DOkPG) (current-output-port . g$16439$1DOkPG) (current-input-port . g$16438$1DOkPG) (output-port? . g$16437$1DOkPG) (input-port? . g$16436$1DOkPG) (utf-8-codec . g$16435$1DOkPG) (utf-16-codec . g$16434$1DOkPG) (transcoder-error-handling-mode . g$16433$1DOkPG) (transcoder-eol-style . g$16432$1DOkPG) (transcoder-codec . g$16431$1DOkPG) (transcoded-port . g$16430$1DOkPG) (textual-port? . g$16429$1DOkPG) (string->bytevector . g$16428$1DOkPG) (standard-output-port . g$16427$1DOkPG) (standard-input-port . g$16426$1DOkPG) (standard-error-port . g$16425$1DOkPG) (set-port-position! . g$16424$1DOkPG) (put-u8 . g$16423$1DOkPG) (put-string . g$16422$1DOkPG) (put-datum . g$16421$1DOkPG) (put-char . g$16420$1DOkPG) (put-bytevector . g$16419$1DOkPG) (port? . g$16418$1DOkPG) (port-transcoder . g$16417$1DOkPG) (port-position . g$16416$1DOkPG) (port-has-set-port-position!? . g$16415$1DOkPG) (port-has-port-position? . g$16414$1DOkPG) (port-eof? . g$16413$1DOkPG) (output-port-buffer-mode . g$16412$1DOkPG) (open-string-output-port . g$9235$1DOkPG) (open-string-input-port . g$16411$1DOkPG) (open-file-output-port . g$16410$1DOkPG) (open-file-input/output-port . g$16409$1DOkPG) (open-file-input-port . g$16408$1DOkPG) (open-bytevector-output-port . g$16407$1DOkPG) (open-bytevector-input-port . g$16406$1DOkPG) (native-transcoder . g$16405$1DOkPG) (native-eol-style . g$16404$1DOkPG) (make-transcoder . g$16403$1DOkPG) (latin-1-codec . g$16402$1DOkPG) (make-i/o-write-error . g$9092$1DOkPG) (make-i/o-read-error . g$9078$1DOkPG) (make-i/o-port-error . g$9197$1DOkPG) (make-i/o-invalid-position-error . g$9107$1DOkPG) (make-i/o-filename-error . g$9124$1DOkPG) (make-i/o-file-protection-error . g$9140$1DOkPG) (make-i/o-file-is-read-only-error . g$9154$1DOkPG) (make-i/o-file-does-not-exist-error . g$9182$1DOkPG) (make-i/o-file-already-exists-error . g$9168$1DOkPG) (make-i/o-error . g$9064$1DOkPG) (make-i/o-encoding-error . g$9228$1DOkPG) (make-i/o-decoding-error . g$9213$1DOkPG) (make-custom-textual-output-port . g$16401$1DOkPG) (make-custom-textual-input/output-port . g$16400$1DOkPG) (make-custom-textual-input-port . g$16399$1DOkPG) (make-custom-binary-output-port . g$16398$1DOkPG) (make-custom-binary-input/output-port . g$16397$1DOkPG) (make-custom-binary-input-port . g$16396$1DOkPG) (make-bytevector . g$16395$1DOkPG) (lookahead-u8 . g$16394$1DOkPG) (lookahead-char . g$16393$1DOkPG) (i/o-write-error? . g$9093$1DOkPG) (i/o-read-error? . g$9079$1DOkPG) (i/o-port-error? . g$9199$1DOkPG) (i/o-invalid-position-error? . g$9109$1DOkPG) (i/o-filename-error? . g$9126$1DOkPG) (i/o-file-protection-error? . g$9141$1DOkPG) (i/o-file-is-read-only-error? . g$9155$1DOkPG) (i/o-file-does-not-exist-error? . g$9183$1DOkPG) (i/o-file-already-exists-error? . g$9169$1DOkPG) (i/o-error? . g$9065$1DOkPG) (i/o-error-port . g$9200$1DOkPG) (i/o-error-filename . g$9127$1DOkPG) (i/o-encoding-error? . g$9230$1DOkPG) (i/o-encoding-error-char . g$9231$1DOkPG) (i/o-decoding-error? . g$9214$1DOkPG) (get-u8 . g$16392$1DOkPG) (get-string-n! . g$16391$1DOkPG) (get-string-n . g$16390$1DOkPG) (get-string-all . g$16389$1DOkPG) (get-line . g$16388$1DOkPG) (get-datum . g$16387$1DOkPG) (get-char . g$16386$1DOkPG) (get-bytevector-some . g$16385$1DOkPG) (get-bytevector-n! . g$16384$1DOkPG) (get-bytevector-n . g$16383$1DOkPG) (get-bytevector-all . g$16382$1DOkPG) (flush-output-port . g$16381$1DOkPG) (close-port . g$16380$1DOkPG) (call-with-string-output-port . g$16379$1DOkPG) (call-with-port . g$16378$1DOkPG) (call-with-bytevector-output-port . g$16377$1DOkPG) (bytevector->string . g$16376$1DOkPG) (buffer-mode? . g$16375$1DOkPG) (binary-port? . g$16374$1DOkPG) (scheme-report-environment . g$10334$1DOkPG) (quotient . g$8857$1DOkPG) (null-environment . g$10333$1DOkPG) (remainder . g$8858$1DOkPG) (modulo . g$8859$1DOkPG) (inexact->exact . g$16373$1DOkPG) (force . g$16372$1DOkPG) (exact->inexact . g$16371$1DOkPG) (exit . g$16370$1DOkPG) (command-line . g$16369$1DOkPG) (string-fill! . g$16368$1DOkPG) (string-set! . g$16367$1DOkPG) (set-cdr! . g$16366$1DOkPG) (set-car! . g$16365$1DOkPG) (remove . g$8484$1DOkPG) (remv . g$8485$1DOkPG) (remp . g$16364$1DOkPG) (remq . g$8486$1DOkPG) (partition . g$16363$1DOkPG) (memv . g$16362$1DOkPG) (memq . g$16361$1DOkPG) (memp . g$16360$1DOkPG) (member . g$16359$1DOkPG) (exists . g$8480$1DOkPG) (for-all . g$8479$1DOkPG) (fold-right . g$8483$1DOkPG) (fold-left . g$8482$1DOkPG) (find . g$16358$1DOkPG) (filter . g$16357$1DOkPG) (cons* . g$8481$1DOkPG) (assv . g$16356$1DOkPG) (assq . g$16355$1DOkPG) (assp . g$16354$1DOkPG) (assoc . g$16353$1DOkPG) (with-exception-handler . g$16352$1DOkPG) (raise-continuable . g$16351$1DOkPG) (raise . g$16350$1DOkPG) (eval . g$10336$1DOkPG) (environment . g$10332$1DOkPG) (make-enumeration . g$16349$1DOkPG) (enum-set=? . g$16348$1DOkPG) (enum-set-universe . g$16347$1DOkPG) (enum-set-union . g$16346$1DOkPG) (enum-set-subset? . g$16345$1DOkPG) (enum-set-projection . g$16344$1DOkPG) (enum-set-member? . g$16343$1DOkPG) (enum-set-intersection . g$16342$1DOkPG) (enum-set-indexer . g$16341$1DOkPG) (enum-set-difference . g$16340$1DOkPG) (enum-set-constructor . g$16339$1DOkPG) (enum-set-complement . g$16338$1DOkPG) (enum-set->list . g$16337$1DOkPG) (who-condition? . g$8774$1DOkPG) (warning? . g$8685$1DOkPG) (violation? . g$8727$1DOkPG) (undefined-violation? . g$8851$1DOkPG) (syntax-violation? . g$8835$1DOkPG) (syntax-violation-subform . g$8837$1DOkPG) (syntax-violation-form . g$8836$1DOkPG) (syntax-violation . g$10350$1DOkPG) (simple-conditions . g$16336$1DOkPG) (serious-condition? . g$8699$1DOkPG) (non-continuable-violation? . g$8789$1DOkPG) (message-condition? . g$8670$1DOkPG) (make-who-condition . g$8772$1DOkPG) (make-warning . g$8684$1DOkPG) (make-violation . g$8726$1DOkPG) (make-undefined-violation . g$8850$1DOkPG) (make-syntax-violation . g$8832$1DOkPG) (make-serious-condition . g$8698$1DOkPG) (make-non-continuable-violation . g$8788$1DOkPG) (make-message-condition . g$8668$1DOkPG) (make-lexical-violation . g$8816$1DOkPG) (make-irritants-condition . g$8755$1DOkPG) (make-implementation-restriction-violation . g$8802$1DOkPG) (make-error . g$8712$1DOkPG) (make-assertion-violation . g$8740$1DOkPG) (lexical-violation? . g$8817$1DOkPG) (irritants-condition? . g$8757$1DOkPG) (implementation-restriction-violation? . g$8803$1DOkPG) (error? . g$8713$1DOkPG) (condition-who . g$8775$1DOkPG) (condition-predicate . g$16335$1DOkPG) (condition-message . g$8671$1DOkPG) (condition-irritants . g$8758$1DOkPG) (condition-accessor . g$16334$1DOkPG) (condition . g$16333$1DOkPG) (assertion-violation? . g$8741$1DOkPG) (condition? . g$16332$1DOkPG) (utf32->string . g$16331$1DOkPG) (utf16->string . g$16330$1DOkPG) (utf8->string . g$16329$1DOkPG) (uint-list->bytevector . g$16328$1DOkPG) (u8-list->bytevector . g$16327$1DOkPG) (string->utf8 . g$16326$1DOkPG) (string->utf32 . g$16325$1DOkPG) (string->utf16 . g$16324$1DOkPG) (sint-list->bytevector . g$16323$1DOkPG) (native-endianness . g$8525$1DOkPG) (bytevector? . g$16322$1DOkPG) (bytevector=? . g$16321$1DOkPG) (bytevector-uint-set! . g$16320$1DOkPG) (bytevector-uint-ref . g$16319$1DOkPG) (bytevector-u8-set! . g$16318$1DOkPG) (bytevector-u8-ref . g$16317$1DOkPG) (bytevector-u64-set! . g$8546$1DOkPG) (bytevector-u64-ref . g$8542$1DOkPG) (bytevector-u64-native-set! . g$8548$1DOkPG) (bytevector-u64-native-ref . g$8544$1DOkPG) (bytevector-u32-set! . g$8538$1DOkPG) (bytevector-u32-ref . g$8534$1DOkPG) (bytevector-u32-native-set! . g$8540$1DOkPG) (bytevector-u32-native-ref . g$8536$1DOkPG) (bytevector-u16-set! . g$8530$1DOkPG) (bytevector-u16-ref . g$8526$1DOkPG) (bytevector-u16-native-set! . g$8532$1DOkPG) (bytevector-u16-native-ref . g$8528$1DOkPG) (bytevector-sint-set! . g$16316$1DOkPG) (bytevector-sint-ref . g$16315$1DOkPG) (bytevector-s8-set! . g$16314$1DOkPG) (bytevector-s8-ref . g$16313$1DOkPG) (bytevector-s64-set! . g$8547$1DOkPG) (bytevector-s64-ref . g$8543$1DOkPG) (bytevector-s64-native-set! . g$8549$1DOkPG) (bytevector-s64-native-ref . g$8545$1DOkPG) (bytevector-s32-set! . g$8539$1DOkPG) (bytevector-s32-ref . g$8535$1DOkPG) (bytevector-s32-native-set! . g$8541$1DOkPG) (bytevector-s32-native-ref . g$8537$1DOkPG) (bytevector-s16-set! . g$8531$1DOkPG) (bytevector-s16-ref . g$8527$1DOkPG) (bytevector-s16-native-set! . g$8533$1DOkPG) (bytevector-s16-native-ref . g$8529$1DOkPG) (bytevector-length . g$16312$1DOkPG) (bytevector-ieee-single-set! . g$16311$1DOkPG) (bytevector-ieee-single-ref . g$16310$1DOkPG) (bytevector-ieee-single-native-set! . g$8552$1DOkPG) (bytevector-ieee-single-native-ref . g$8550$1DOkPG) (bytevector-ieee-double-set! . g$16309$1DOkPG) (bytevector-ieee-double-ref . g$16308$1DOkPG) (bytevector-ieee-double-native-set! . g$8553$1DOkPG) (bytevector-ieee-double-native-ref . g$8551$1DOkPG) (bytevector-fill! . g$16307$1DOkPG) (bytevector-copy! . g$16306$1DOkPG) (bytevector-copy . g$16305$1DOkPG) (bytevector->uint-list . g$16304$1DOkPG) (bytevector->u8-list . g$16303$1DOkPG) (bytevector->sint-list . g$16302$1DOkPG) (no-nans-violation? . g$9050$1DOkPG) (no-infinities-violation? . g$9036$1DOkPG) (make-no-nans-violation . g$9049$1DOkPG) (make-no-infinities-violation . g$9035$1DOkPG) (real->flonum . g$16301$1DOkPG) (flzero? . g$16300$1DOkPG) (fltruncate . g$16299$1DOkPG) (fltan . g$16298$1DOkPG) (flsqrt . g$16297$1DOkPG) (flsin . g$16296$1DOkPG) (flround . g$16295$1DOkPG) (flpositive? . g$16294$1DOkPG) (flonum? . g$16293$1DOkPG) (flodd? . g$16292$1DOkPG) (flnumerator . g$16291$1DOkPG) (flnegative? . g$16290$1DOkPG) (flnan? . g$16289$1DOkPG) (flmod0 . g$16288$1DOkPG) (flmod . g$16287$1DOkPG) (flmin . g$16286$1DOkPG) (flmax . g$16285$1DOkPG) (fllog . g$16284$1DOkPG) (flinteger? . g$16283$1DOkPG) (flinfinite? . g$16282$1DOkPG) (flfloor . g$16281$1DOkPG) (flfinite? . g$16280$1DOkPG) (flexpt . g$16279$1DOkPG) (flexp . g$16278$1DOkPG) (fleven? . g$16277$1DOkPG) (fldiv0-and-mod0 . g$16276$1DOkPG) (fldiv0 . g$16275$1DOkPG) (fldiv-and-mod . g$16274$1DOkPG) (fldiv . g$16273$1DOkPG) (fldenominator . g$16272$1DOkPG) (flcos . g$16271$1DOkPG) (flceiling . g$16270$1DOkPG) (flatan . g$16269$1DOkPG) (flasin . g$16268$1DOkPG) (flacos . g$16267$1DOkPG) (flabs . g$16266$1DOkPG) (fl>? . g$16265$1DOkPG) (fl>=? . g$16264$1DOkPG) (fl=? . g$16263$1DOkPG) (fl<? . g$16262$1DOkPG) (fl<=? . g$16261$1DOkPG) (fl/ . g$16260$1DOkPG) (fl- . g$16259$1DOkPG) (fl+ . g$16258$1DOkPG) (fl* . g$16257$1DOkPG) (fixnum->flonum . g$16256$1DOkPG) (fxzero? . g$16255$1DOkPG) (fxxor . g$16254$1DOkPG) (fxrotate-bit-field . g$8981$1DOkPG) (fxreverse-bit-field . g$16253$1DOkPG) (fxpositive? . g$16252$1DOkPG) (fxodd? . g$16251$1DOkPG) (fxnot . g$16250$1DOkPG) (fxnegative? . g$16249$1DOkPG) (fxmod0 . g$16248$1DOkPG) (fxmod . g$16247$1DOkPG) (fxmin . g$16246$1DOkPG) (fxmax . g$16245$1DOkPG) (fxlength . g$16244$1DOkPG) (fxior . g$16243$1DOkPG) (fxif . g$8975$1DOkPG) (fxfirst-bit-set . g$16242$1DOkPG) (fxeven? . g$16241$1DOkPG) (fxdiv0-and-mod0 . g$16240$1DOkPG) (fxdiv0 . g$16239$1DOkPG) (fxdiv-and-mod . g$16238$1DOkPG) (fxdiv . g$16237$1DOkPG) (fxcopy-bit-field . g$8978$1DOkPG) (fxcopy-bit . g$8976$1DOkPG) (fxbit-set? . g$16236$1DOkPG) (fxbit-field . g$8977$1DOkPG) (fxbit-count . g$16235$1DOkPG) (fxarithmetic-shift-right . g$8980$1DOkPG) (fxarithmetic-shift-left . g$8979$1DOkPG) (fxarithmetic-shift . g$16234$1DOkPG) (fxand . g$16233$1DOkPG) (fx>? . g$16232$1DOkPG) (fx>=? . g$16231$1DOkPG) (fx=? . g$16230$1DOkPG) (fx<? . g$16229$1DOkPG) (fx<=? . g$16228$1DOkPG) (fx-/carry . g$16227$1DOkPG) (fx- . g$16226$1DOkPG) (fx+/carry . g$16225$1DOkPG) (fx+ . g$16224$1DOkPG) (fx*/carry . g$16223$1DOkPG) (fx* . g$16222$1DOkPG) (greatest-fixnum . g$16221$1DOkPG) (least-fixnum . g$16220$1DOkPG) (fixnum-width . g$16219$1DOkPG) (fixnum? . g$16218$1DOkPG) (bitwise-rotate-bit-field . g$8929$1DOkPG) (bitwise-reverse-bit-field . g$8930$1DOkPG) (bitwise-length . g$16217$1DOkPG) (bitwise-if . g$8923$1DOkPG) (bitwise-first-bit-set . g$16216$1DOkPG) (bitwise-copy-bit-field . g$8926$1DOkPG) (bitwise-copy-bit . g$8924$1DOkPG) (bitwise-bit-set? . g$16215$1DOkPG) (bitwise-bit-field . g$16214$1DOkPG) (bitwise-bit-count . g$16213$1DOkPG) (bitwise-xor . g$16212$1DOkPG) (bitwise-ior . g$16211$1DOkPG) (bitwise-and . g$16210$1DOkPG) (bitwise-not . g$16209$1DOkPG) (bitwise-arithmetic-shift-right . g$8928$1DOkPG) (bitwise-arithmetic-shift-left . g$8927$1DOkPG) (bitwise-arithmetic-shift . g$16208$1DOkPG) (zero? . g$16207$1DOkPG) (vector? . g$16206$1DOkPG) (vector-set! . g$16205$1DOkPG) (vector-ref . g$16204$1DOkPG) (vector-map . g$16203$1DOkPG) (vector-length . g$16202$1DOkPG) (vector-for-each . g$16201$1DOkPG) (vector-fill! . g$16200$1DOkPG) (vector->list . g$16199$1DOkPG) (vector . g$16198$1DOkPG) (values . g$16197$1DOkPG) (truncate . g$16196$1DOkPG) (tan . g$16195$1DOkPG) (symbol? . g$16194$1DOkPG) (symbol=? . g$16193$1DOkPG) (symbol->string . g$16192$1DOkPG) (substring . g$16191$1DOkPG) (string? . g$16190$1DOkPG) (string>? . g$16189$1DOkPG) (string>=? . g$16188$1DOkPG) (string=? . g$16187$1DOkPG) (string<? . g$16186$1DOkPG) (string<=? . g$16185$1DOkPG) (string-ref . g$16184$1DOkPG) (string-length . g$16183$1DOkPG) (string-for-each . g$16182$1DOkPG) (string-copy . g$16181$1DOkPG) (string-append . g$16180$1DOkPG) (string->symbol . g$16179$1DOkPG) (string->number . g$16178$1DOkPG) (string->list . g$16177$1DOkPG) (string . g$16176$1DOkPG) (sqrt . g$16175$1DOkPG) (sin . g$16174$1DOkPG) (round . g$16173$1DOkPG) (reverse . g$16172$1DOkPG) (real? . g$16171$1DOkPG) (real-valued? . g$16170$1DOkPG) (real-part . g$16169$1DOkPG) (rationalize . g$8028$1DOkPG) (rational? . g$16168$1DOkPG) (rational-valued? . g$16167$1DOkPG) (procedure? . g$16166$1DOkPG) (positive? . g$16165$1DOkPG) (pair? . g$16164$1DOkPG) (odd? . g$16163$1DOkPG) (numerator . g$16162$1DOkPG) (number? . g$16161$1DOkPG) (number->string . g$16160$1DOkPG) (null? . g$16159$1DOkPG) (not . g$16158$1DOkPG) (negative? . g$16157$1DOkPG) (nan? . g$16156$1DOkPG) (min . g$16155$1DOkPG) (max . g$16154$1DOkPG) (map . g$16153$1DOkPG) (make-vector . g$16152$1DOkPG) (make-string . g$16151$1DOkPG) (make-rectangular . g$16150$1DOkPG) (make-polar . g$16149$1DOkPG) (magnitude . g$16148$1DOkPG) (log . g$16147$1DOkPG) (list? . g$16146$1DOkPG) (list-tail . g$16145$1DOkPG) (list-ref . g$16144$1DOkPG) (list->vector . g$16143$1DOkPG) (list->string . g$16142$1DOkPG) (list . g$16141$1DOkPG) (length . g$16140$1DOkPG) (lcm . g$16139$1DOkPG) (integer? . g$16138$1DOkPG) (integer-valued? . g$16137$1DOkPG) (integer->char . g$16136$1DOkPG) (infinite? . g$16135$1DOkPG) (inexact? . g$16134$1DOkPG) (inexact . g$16133$1DOkPG) (imag-part . g$16132$1DOkPG) (gcd . g$16131$1DOkPG) (for-each . g$16130$1DOkPG) (floor . g$16129$1DOkPG) (finite? . g$16128$1DOkPG) (expt . g$16127$1DOkPG) (exp . g$16126$1DOkPG) (exact? . g$16125$1DOkPG) (exact-integer-sqrt . g$16124$1DOkPG) (exact . g$16123$1DOkPG) (even? . g$16122$1DOkPG) (error . g$16121$1DOkPG) (eqv? . g$16120$1DOkPG) (equal? . g$16119$1DOkPG) (eq? . g$16118$1DOkPG) (dynamic-wind . g$16117$1DOkPG) (div0-and-mod0 . g$16116$1DOkPG) (mod0 . g$16115$1DOkPG) (div0 . g$16114$1DOkPG) (div-and-mod . g$16113$1DOkPG) (mod . g$16112$1DOkPG) (div . g$16111$1DOkPG) (denominator . g$16110$1DOkPG) (cos . g$16109$1DOkPG) (cons . g$16108$1DOkPG) (complex? . g$16107$1DOkPG) (char? . g$16106$1DOkPG) (char>? . g$16105$1DOkPG) (char>=? . g$16104$1DOkPG) (char=? . g$16103$1DOkPG) (char<? . g$16102$1DOkPG) (char<=? . g$16101$1DOkPG) (char->integer . g$16100$1DOkPG) (ceiling . g$16099$1DOkPG) (call-with-values . g$16098$1DOkPG) (call/cc . g$16097$1DOkPG) (call-with-current-continuation . g$16096$1DOkPG) (cddddr . g$8027$1DOkPG) (cdddar . g$8026$1DOkPG) (cddadr . g$8025$1DOkPG) (cddaar . g$8024$1DOkPG) (cdaddr . g$8023$1DOkPG) (cdadar . g$8022$1DOkPG) (cdaadr . g$8021$1DOkPG) (cdaaar . g$8020$1DOkPG) (cadddr . g$8019$1DOkPG) (caddar . g$8018$1DOkPG) (cadadr . g$8017$1DOkPG) (cadaar . g$8016$1DOkPG) (caaddr . g$8015$1DOkPG) (caadar . g$8014$1DOkPG) (caaadr . g$8013$1DOkPG) (caaaar . g$8012$1DOkPG) (cdddr . g$8011$1DOkPG) (cddar . g$8010$1DOkPG) (cdadr . g$8009$1DOkPG) (cdaar . g$8008$1DOkPG) (caddr . g$8007$1DOkPG) (cadar . g$8006$1DOkPG) (caadr . g$8005$1DOkPG) (caaar . g$8004$1DOkPG) (cddr . g$8003$1DOkPG) (cdar . g$8002$1DOkPG) (cadr . g$8001$1DOkPG) (caar . g$8000$1DOkPG) (cdr . g$16095$1DOkPG) (car . g$16094$1DOkPG) (boolean? . g$16093$1DOkPG) (boolean=? . g$16092$1DOkPG) (atan . g$16091$1DOkPG) (assertion-violation . g$16090$1DOkPG) (asin . g$16089$1DOkPG) (apply . g$16088$1DOkPG) (append . g$16087$1DOkPG) (angle . g$16086$1DOkPG) (acos . g$16085$1DOkPG) (abs . g$16084$1DOkPG) (/ . g$16083$1DOkPG) (* . g$16082$1DOkPG) (- . g$16081$1DOkPG) (+ . g$16080$1DOkPG) (>= . g$16079$1DOkPG) (> . g$16078$1DOkPG) (= . g$16077$1DOkPG) (<= . g$16076$1DOkPG) (< . g$16075$1DOkPG) (make-record-printer . g$16074$1DOkPG) (vector-reverse! . g$16073$1DOkPG) (vector-contains? . g$16072$1DOkPG) (vector-index-of . g$16071$1DOkPG) (vector-copy . g$16070$1DOkPG) (vector-binary-search . g$16069$1DOkPG) (get-output-string . g$16068$1DOkPG) (open-output-string . g$16067$1DOkPG) (open-input-string . g$16066$1DOkPG) (string-format . g$16065$1DOkPG) (make-traced-procedure . g$16064$1DOkPG) (pmap . g$16063$1DOkPG) (time-it . g$16062$1DOkPG) (make-parameter . g$9268$1DOkPG) (library-locator . g$16061$1DOkPG) (get-library-paths . g$16060$1DOkPG) (library-path . g$9487$1DOkPG) (library-extensions . g$9488$1DOkPG) (installed-libraries . g$9510$1DOkPG) (&no-nans . g$16059$1DOkPG) (&no-infinities . g$16058$1DOkPG) (&i/o-encoding . g$16057$1DOkPG) (&i/o-decoding . g$16056$1DOkPG) (&i/o-port . g$16055$1DOkPG) (&i/o-file-does-not-exist . g$16054$1DOkPG) (&i/o-file-already-exists . g$16053$1DOkPG) (&i/o-file-is-read-only . g$16052$1DOkPG) (&i/o-file-protection . g$16051$1DOkPG) (&i/o-filename . g$16050$1DOkPG) (&i/o-invalid-position . g$16049$1DOkPG) (&i/o-write . g$16048$1DOkPG) (&i/o-read . g$16047$1DOkPG) (&i/o . g$16046$1DOkPG) (&non-continuable . g$16045$1DOkPG) (&undefined . g$16044$1DOkPG) (&syntax . g$16043$1DOkPG) (&lexical . g$16042$1DOkPG) (&implementation-restriction . g$16041$1DOkPG) (&non . g$16040$1DOkPG) (&who . g$16039$1DOkPG) (&irritants . g$16038$1DOkPG) (&assertion . g$16037$1DOkPG) (&violation . g$16036$1DOkPG) (&error . g$16035$1DOkPG) (&serious . g$16034$1DOkPG) (&warning . g$16033$1DOkPG) (&message . g$16032$1DOkPG) (&condition . g$16031$1DOkPG) (define-condition-type . g$16030$1DOkPG) (define-enumeration . g$16029$1DOkPG) (define-record-type . g$16028$1DOkPG) (parent-rtd . g$16027$1DOkPG) (nongenerative . g$16026$1DOkPG) (opaque . g$16025$1DOkPG) (sealed . g$16024$1DOkPG) (protocol . g$16023$1DOkPG) (parent . g$16022$1DOkPG) (immutable . g$16021$1DOkPG) (mutable . g$16020$1DOkPG) (fields . g$16019$1DOkPG) (error-handling-mode . g$16018$1DOkPG) (file-options . g$16017$1DOkPG) (buffer-mode . g$16016$1DOkPG) (eol-style . g$16015$1DOkPG) (guard . g$16014$1DOkPG) (trace-define-syntax . g$16013$1DOkPG) (trace-define . g$16012$1DOkPG) (trace-lambda . g$16011$1DOkPG) (unsyntax-splicing . g$16010$1DOkPG) (unsyntax . g$16009$1DOkPG) (unquote-splicing . g$16008$1DOkPG) (unquote . g$16007$1DOkPG) (_ . g$16006$1DOkPG) (else . g$16005$1DOkPG) (=> . g$16004$1DOkPG) (... . g$16003$1DOkPG) (assert . g$16002$1DOkPG) (endianness . g$16001$1DOkPG) (delay . g$16000$1DOkPG) (time . g$15999$1DOkPG) (or . g$15998$1DOkPG) (and . g$15997$1DOkPG) (do . g$15996$1DOkPG) (cond . g$15995$1DOkPG) (let* . g$15994$1DOkPG) (let . g$15993$1DOkPG) (identifier-syntax . g$15992$1DOkPG) (with-syntax . g$15991$1DOkPG) (quasisyntax . g$15990$1DOkPG) (quasiquote . g$15989$1DOkPG) (syntax-rules . g$15988$1DOkPG) (include-into . g$15987$1DOkPG) (include . g$15986$1DOkPG) (define-struct . g$15985$1DOkPG) (let-values . g$15984$1DOkPG) (let*-values . g$15983$1DOkPG) (record-constructor-descriptor . g$15982$1DOkPG) (record-type-descriptor . g$15981$1DOkPG) (fluid-let-syntax . g$15980$1DOkPG) (case . g$15979$1DOkPG) (parameterize . g$15978$1DOkPG) (unless . g$15977$1DOkPG) (when . g$15976$1DOkPG) (if . g$15975$1DOkPG) (letrec* . g$15974$1DOkPG) (letrec . g$15973$1DOkPG) (type-descriptor . g$15972$1DOkPG) (case-lambda . g$15971$1DOkPG) (lambda . g$15970$1DOkPG) (syntax . g$15969$1DOkPG) (syntax-case . g$15968$1DOkPG) (quote . g$15967$1DOkPG) (foreign-call . g$15966$1DOkPG) (letrec-syntax . g$15965$1DOkPG) (let-syntax . g$15964$1DOkPG) (set! . g$15963$1DOkPG) (import . g$15962$1DOkPG) (library . g$15961$1DOkPG) (begin . g$15960$1DOkPG) (module . g$15959$1DOkPG) (define-syntax . g$15958$1DOkPG) (define . g$15957$1DOkPG)) '((g$10267$1DOkPG core-prim . ellipsis-map) (g$16610$1DOkPG core-prim . &no-nans-rcd) (g$16609$1DOkPG core-prim . &no-nans-rtd) (g$16608$1DOkPG core-prim . &no-infinities-rcd) (g$16607$1DOkPG core-prim . &no-infinities-rtd) (g$16606$1DOkPG core-prim . &i/o-encoding-rcd) (g$16605$1DOkPG core-prim . &i/o-encoding-rtd) (g$16604$1DOkPG core-prim . &i/o-decoding-rcd) (g$16603$1DOkPG core-prim . &i/o-decoding-rtd) (g$16602$1DOkPG core-prim . &i/o-port-rcd) (g$16601$1DOkPG core-prim . &i/o-port-rtd) (g$16600$1DOkPG core-prim . &i/o-file-does-not-exist-rcd) (g$16599$1DOkPG core-prim . &i/o-file-does-not-exist-rtd) (g$16598$1DOkPG core-prim . &i/o-file-already-exists-rcd) (g$16597$1DOkPG core-prim . &i/o-file-already-exists-rtd) (g$16596$1DOkPG core-prim . &i/o-fie-is-read-only-rcd) (g$16595$1DOkPG core-prim . &i/o-fie-is-read-only-rtd) (g$16594$1DOkPG core-prim . &i/o-file-protection-rcd) (g$16593$1DOkPG core-prim . &i/o-file-protection-rtd) (g$16592$1DOkPG core-prim . &i/o-filename-rcd) (g$16591$1DOkPG core-prim . &i/o-filename-rtd) (g$16590$1DOkPG core-prim . &i/o-invalid-position-rcd) (g$16589$1DOkPG core-prim . &i/o-invalid-position-rtd) (g$16588$1DOkPG core-prim . &i/o-write-rcd) (g$16587$1DOkPG core-prim . &i/o-write-rtd) (g$16586$1DOkPG core-prim . &i/o-read-rcd) (g$16585$1DOkPG core-prim . &i/o-read-rtd) (g$16584$1DOkPG core-prim . &i/o-rcd) (g$16583$1DOkPG core-prim . &i/o-rtd) (g$16582$1DOkPG core-prim . &undefined-rcd) (g$16581$1DOkPG core-prim . &undefined-rtd) (g$16580$1DOkPG core-prim . &syntax-rcd) (g$16579$1DOkPG core-prim . &syntax-rtd) (g$16578$1DOkPG core-prim . &lexical-rcd) (g$16577$1DOkPG core-prim . &lexical-rtd) (g$16576$1DOkPG core-prim . &implementation-restriction-rcd) (g$16575$1DOkPG core-prim . &implementation-restriction-rtd) (g$16574$1DOkPG core-prim . &non-continuable-rcd) (g$16573$1DOkPG core-prim . &non-continuable-rtd) (g$16572$1DOkPG core-prim . &who-rcd) (g$16571$1DOkPG core-prim . &who-rtd) (g$16570$1DOkPG core-prim . &irritants-rcd) (g$16569$1DOkPG core-prim . &irritants-rtd) (g$16568$1DOkPG core-prim . &assertion-rcd) (g$16567$1DOkPG core-prim . &assertion-rtd) (g$16566$1DOkPG core-prim . &violation-rcd) (g$16565$1DOkPG core-prim . &violation-rtd) (g$16564$1DOkPG core-prim . &error-rcd) (g$16563$1DOkPG core-prim . &error-rtd) (g$16562$1DOkPG core-prim . &serious-rcd) (g$16561$1DOkPG core-prim . &serious-rtd) (g$16560$1DOkPG core-prim . &warning-rcd) (g$16559$1DOkPG core-prim . &warning-rtd) (g$16558$1DOkPG core-prim . &message-rcd) (g$16557$1DOkPG core-prim . &message-rtd) (g$16556$1DOkPG core-prim . &condition-rcd) (g$16555$1DOkPG core-prim . &condition-rtd) (g$16554$1DOkPG core-prim . library-letrec*) (g$16553$1DOkPG core-prim . annotation-stripped) (g$16552$1DOkPG core-prim . annotation-source) (g$16551$1DOkPG core-prim . annotation-expression) (g$16550$1DOkPG core-prim . annotation?) (g$16549$1DOkPG core-prim . read-annotated) (g$16548$1DOkPG core-prim . tanh) (g$16547$1DOkPG core-prim . cosh) (g$16546$1DOkPG core-prim . sinh) (g$16545$1DOkPG core-prim . group-by) (g$16544$1DOkPG core-prim . make-guid) (g$16543$1DOkPG core-prim . unspecified?) (g$16542$1DOkPG core-prim . make-trace) (g$16541$1DOkPG core-prim . make-list) (g$16540$1DOkPG core-prim . last-pair) (g$16539$1DOkPG core-prim . load-r5rs) (g$16538$1DOkPG core-prim . license) (g$16537$1DOkPG core-prim . stacktrace) (g$9243$1DOkPG core-prim . ironscheme-build) (g$16536$1DOkPG core-prim . define-clr-class-internal) (g$16535$1DOkPG core-prim . clr-field-set!-internal) (g$16534$1DOkPG core-prim . clr-field-get-internal) (g$16533$1DOkPG core-prim . clr-cast-internal) (g$16532$1DOkPG core-prim . clr-call-internal) (g$16531$1DOkPG core-prim . clr-new-internal) (g$16530$1DOkPG core-prim . clr-new-array-internal) (g$16529$1DOkPG core-prim . clr-is-internal) (g$16528$1DOkPG core-prim . clr-reference-internal) (g$16527$1DOkPG core-prim . clr-using-internal) (g$16526$1DOkPG core-prim . clr-clear-usings-internal) (g$10347$1DOkPG core-prim . syntax-error) (g$10264$1DOkPG core-prim . syntax-dispatch) (g$16525$1DOkPG core-prim . eval-core) (g$16524$1DOkPG core-prim . set-symbol-value!) (g$16523$1DOkPG core-prim . symbol-value) (g$16522$1DOkPG core-prim . gensym) (g$16521$1DOkPG core-prim . void) (g$16520$1DOkPG core-prim . load-serialized-library) (g$16519$1DOkPG core-prim . serialize-library) (g$15933$1DOkPG core-prim . compile->closure) (g$15932$1DOkPG core-prim . compile) (g$15931$1DOkPG core-prim . load) (g$16518$1DOkPG core-prim . interaction-environment) (g$16517$1DOkPG core-prim . char-ready?) (g$16516$1DOkPG core-prim . string-upcase) (g$16515$1DOkPG core-prim . string-titlecase) (g$16514$1DOkPG core-prim . string-normalize-nfkd) (g$16513$1DOkPG core-prim . string-normalize-nfkc) (g$16512$1DOkPG core-prim . string-normalize-nfd) (g$16511$1DOkPG core-prim . string-normalize-nfc) (g$16510$1DOkPG core-prim . string-foldcase) (g$16509$1DOkPG core-prim . string-downcase) (g$16508$1DOkPG core-prim . string-ci>?) (g$16507$1DOkPG core-prim . string-ci>=?) (g$16506$1DOkPG core-prim . string-ci=?) (g$16505$1DOkPG core-prim . string-ci<?) (g$16504$1DOkPG core-prim . string-ci<=?) (g$16503$1DOkPG core-prim . char-whitespace?) (g$16502$1DOkPG core-prim . char-upper-case?) (g$16501$1DOkPG core-prim . char-title-case?) (g$16500$1DOkPG core-prim . char-numeric?) (g$16499$1DOkPG core-prim . char-lower-case?) (g$16498$1DOkPG core-prim . char-general-category) (g$16497$1DOkPG core-prim . char-upcase) (g$16496$1DOkPG core-prim . char-titlecase) (g$16495$1DOkPG core-prim . char-foldcase) (g$16494$1DOkPG core-prim . char-downcase) (g$16493$1DOkPG core-prim . char-ci>?) (g$16492$1DOkPG core-prim . char-ci>=?) (g$16491$1DOkPG core-prim . char-ci=?) (g$16490$1DOkPG core-prim . char-ci<?) (g$16489$1DOkPG core-prim . char-ci<=?) (g$16488$1DOkPG core-prim . char-alphabetic?) (g$9943$1DOkPG core-prim . make-variable-transformer) (g$10351$1DOkPG core-prim . identifier?) (g$10343$1DOkPG core-prim . generate-temporaries) (g$10344$1DOkPG core-prim . free-identifier=?) (g$10353$1DOkPG core-prim . syntax->datum) (g$10352$1DOkPG core-prim . datum->syntax) (g$10345$1DOkPG core-prim . bound-identifier=?) (g$16487$1DOkPG core-prim . record-type-descriptor?) (g$16486$1DOkPG core-prim . record-predicate) (g$16485$1DOkPG core-prim . record-mutator) (g$16484$1DOkPG core-prim . record-constructor) (g$16483$1DOkPG core-prim . record-accessor) (g$16482$1DOkPG core-prim . make-record-type-descriptor) (g$16481$1DOkPG core-prim . make-record-constructor-descriptor) (g$16480$1DOkPG core-prim . record?) (g$16479$1DOkPG core-prim . record-type-uid) (g$16478$1DOkPG core-prim . record-type-sealed?) (g$16477$1DOkPG core-prim . record-type-parent) (g$16476$1DOkPG core-prim . record-type-opaque?) (g$16475$1DOkPG core-prim . record-type-name) (g$16474$1DOkPG core-prim . record-type-generative?) (g$16473$1DOkPG core-prim . record-type-field-names) (g$16472$1DOkPG core-prim . record-rtd) (g$16471$1DOkPG core-prim . record-field-mutable?) (g$8413$1DOkPG core-prim . delete-file) (g$8412$1DOkPG core-prim . file-exists?) (g$16470$1DOkPG core-prim . vector-sort!) (g$16469$1DOkPG core-prim . vector-sort) (g$16468$1DOkPG core-prim . list-sort) (g$16467$1DOkPG core-prim . symbol-hash) (g$16466$1DOkPG core-prim . string-ci-hash) (g$16465$1DOkPG core-prim . string-hash) (g$16464$1DOkPG core-prim . equal-hash) (g$8386$1DOkPG core-prim . hashtable-equivalence-function) (g$16463$1DOkPG core-prim . make-hashtable) (g$8387$1DOkPG core-prim . hashtable-hash-function) (g$8378$1DOkPG core-prim . make-eqv-hashtable) (g$8377$1DOkPG core-prim . make-eq-hashtable) (g$16462$1DOkPG core-prim . hashtable?) (g$8384$1DOkPG core-prim . hashtable-update!) (g$8379$1DOkPG core-prim . hashtable-size) (g$8381$1DOkPG core-prim . hashtable-set!) (g$8380$1DOkPG core-prim . hashtable-ref) (g$16461$1DOkPG core-prim . hashtable-mutable?) (g$16460$1DOkPG core-prim . hashtable-keys) (g$16459$1DOkPG core-prim . hashtable-entries) (g$8382$1DOkPG core-prim . hashtable-delete!) (g$16458$1DOkPG core-prim . hashtable-copy) (g$8383$1DOkPG core-prim . hashtable-contains?) (g$8385$1DOkPG core-prim . hashtable-clear!) (g$16457$1DOkPG core-prim . call-with-output-file) (g$16456$1DOkPG core-prim . call-with-input-file) (g$16455$1DOkPG core-prim . write-char) (g$16454$1DOkPG core-prim . write) (g$16453$1DOkPG core-prim . with-output-to-file) (g$16452$1DOkPG core-prim . with-input-from-file) (g$16451$1DOkPG core-prim . read-char) (g$16450$1DOkPG core-prim . read) (g$16449$1DOkPG core-prim . peek-char) (g$16448$1DOkPG core-prim . open-output-file) (g$16447$1DOkPG core-prim . open-input-file) (g$16446$1DOkPG core-prim . newline) (g$16445$1DOkPG core-prim . display) (g$16444$1DOkPG core-prim . close-output-port) (g$16443$1DOkPG core-prim . close-input-port) (g$16442$1DOkPG core-prim . eof-object?) (g$16441$1DOkPG core-prim . eof-object) (g$16440$1DOkPG core-prim . current-error-port) (g$16439$1DOkPG core-prim . current-output-port) (g$16438$1DOkPG core-prim . current-input-port) (g$16437$1DOkPG core-prim . output-port?) (g$16436$1DOkPG core-prim . input-port?) (g$16435$1DOkPG core-prim . utf-8-codec) (g$16434$1DOkPG core-prim . utf-16-codec) (g$16433$1DOkPG core-prim . transcoder-error-handling-mode) (g$16432$1DOkPG core-prim . transcoder-eol-style) (g$16431$1DOkPG core-prim . transcoder-codec) (g$16430$1DOkPG core-prim . transcoded-port) (g$16429$1DOkPG core-prim . textual-port?) (g$16428$1DOkPG core-prim . string->bytevector) (g$16427$1DOkPG core-prim . standard-output-port) (g$16426$1DOkPG core-prim . standard-input-port) (g$16425$1DOkPG core-prim . standard-error-port) (g$16424$1DOkPG core-prim . set-port-position!) (g$16423$1DOkPG core-prim . put-u8) (g$16422$1DOkPG core-prim . put-string) (g$16421$1DOkPG core-prim . put-datum) (g$16420$1DOkPG core-prim . put-char) (g$16419$1DOkPG core-prim . put-bytevector) (g$16418$1DOkPG core-prim . port?) (g$16417$1DOkPG core-prim . port-transcoder) (g$16416$1DOkPG core-prim . port-position) (g$16415$1DOkPG core-prim . port-has-set-port-position!?) (g$16414$1DOkPG core-prim . port-has-port-position?) (g$16413$1DOkPG core-prim . port-eof?) (g$16412$1DOkPG core-prim . output-port-buffer-mode) (g$9235$1DOkPG core-prim . open-string-output-port) (g$16411$1DOkPG core-prim . open-string-input-port) (g$16410$1DOkPG core-prim . open-file-output-port) (g$16409$1DOkPG core-prim . open-file-input/output-port) (g$16408$1DOkPG core-prim . open-file-input-port) (g$16407$1DOkPG core-prim . open-bytevector-output-port) (g$16406$1DOkPG core-prim . open-bytevector-input-port) (g$16405$1DOkPG core-prim . native-transcoder) (g$16404$1DOkPG core-prim . native-eol-style) (g$16403$1DOkPG core-prim . make-transcoder) (g$16402$1DOkPG core-prim . latin-1-codec) (g$9092$1DOkPG core-prim . make-i/o-write-error) (g$9078$1DOkPG core-prim . make-i/o-read-error) (g$9197$1DOkPG core-prim . make-i/o-port-error) (g$9107$1DOkPG core-prim . make-i/o-invalid-position-error) (g$9124$1DOkPG core-prim . make-i/o-filename-error) (g$9140$1DOkPG core-prim . make-i/o-file-protection-error) (g$9154$1DOkPG core-prim . make-i/o-file-is-read-only-error) (g$9182$1DOkPG core-prim . make-i/o-file-does-not-exist-error) (g$9168$1DOkPG core-prim . make-i/o-file-already-exists-error) (g$9064$1DOkPG core-prim . make-i/o-error) (g$9228$1DOkPG core-prim . make-i/o-encoding-error) (g$9213$1DOkPG core-prim . make-i/o-decoding-error) (g$16401$1DOkPG core-prim . make-custom-textual-output-port) (g$16400$1DOkPG core-prim . make-custom-textual-input/output-port) (g$16399$1DOkPG core-prim . make-custom-textual-input-port) (g$16398$1DOkPG core-prim . make-custom-binary-output-port) (g$16397$1DOkPG core-prim . make-custom-binary-input/output-port) (g$16396$1DOkPG core-prim . make-custom-binary-input-port) (g$16395$1DOkPG core-prim . make-bytevector) (g$16394$1DOkPG core-prim . lookahead-u8) (g$16393$1DOkPG core-prim . lookahead-char) (g$9093$1DOkPG core-prim . i/o-write-error?) (g$9079$1DOkPG core-prim . i/o-read-error?) (g$9199$1DOkPG core-prim . i/o-port-error?) (g$9109$1DOkPG core-prim . i/o-invalid-position-error?) (g$9126$1DOkPG core-prim . i/o-filename-error?) (g$9141$1DOkPG core-prim . i/o-file-protection-error?) (g$9155$1DOkPG core-prim . i/o-file-is-read-only-error?) (g$9183$1DOkPG core-prim . i/o-file-does-not-exist-error?) (g$9169$1DOkPG core-prim . i/o-file-already-exists-error?) (g$9065$1DOkPG core-prim . i/o-error?) (g$9200$1DOkPG core-prim . i/o-error-port) (g$9127$1DOkPG core-prim . i/o-error-filename) (g$9230$1DOkPG core-prim . i/o-encoding-error?) (g$9231$1DOkPG core-prim . i/o-encoding-error-char) (g$9214$1DOkPG core-prim . i/o-decoding-error?) (g$16392$1DOkPG core-prim . get-u8) (g$16391$1DOkPG core-prim . get-string-n!) (g$16390$1DOkPG core-prim . get-string-n) (g$16389$1DOkPG core-prim . get-string-all) (g$16388$1DOkPG core-prim . get-line) (g$16387$1DOkPG core-prim . get-datum) (g$16386$1DOkPG core-prim . get-char) (g$16385$1DOkPG core-prim . get-bytevector-some) (g$16384$1DOkPG core-prim . get-bytevector-n!) (g$16383$1DOkPG core-prim . get-bytevector-n) (g$16382$1DOkPG core-prim . get-bytevector-all) (g$16381$1DOkPG core-prim . flush-output-port) (g$16380$1DOkPG core-prim . close-port) (g$16379$1DOkPG core-prim . call-with-string-output-port) (g$16378$1DOkPG core-prim . call-with-port) (g$16377$1DOkPG core-prim . call-with-bytevector-output-port) (g$16376$1DOkPG core-prim . bytevector->string) (g$16375$1DOkPG core-prim . buffer-mode?) (g$16374$1DOkPG core-prim . binary-port?) (g$10334$1DOkPG core-prim . scheme-report-environment) (g$8857$1DOkPG core-prim . quotient) (g$10333$1DOkPG core-prim . null-environment) (g$8858$1DOkPG core-prim . remainder) (g$8859$1DOkPG core-prim . modulo) (g$16373$1DOkPG core-prim . inexact->exact) (g$16372$1DOkPG core-prim . force) (g$16371$1DOkPG core-prim . exact->inexact) (g$16370$1DOkPG core-prim . exit) (g$16369$1DOkPG core-prim . command-line) (g$16368$1DOkPG core-prim . string-fill!) (g$16367$1DOkPG core-prim . string-set!) (g$16366$1DOkPG core-prim . set-cdr!) (g$16365$1DOkPG core-prim . set-car!) (g$8484$1DOkPG core-prim . remove) (g$8485$1DOkPG core-prim . remv) (g$16364$1DOkPG core-prim . remp) (g$8486$1DOkPG core-prim . remq) (g$16363$1DOkPG core-prim . partition) (g$16362$1DOkPG core-prim . memv) (g$16361$1DOkPG core-prim . memq) (g$16360$1DOkPG core-prim . memp) (g$16359$1DOkPG core-prim . member) (g$8480$1DOkPG core-prim . exists) (g$8479$1DOkPG core-prim . for-all) (g$8483$1DOkPG core-prim . fold-right) (g$8482$1DOkPG core-prim . fold-left) (g$16358$1DOkPG core-prim . find) (g$16357$1DOkPG core-prim . filter) (g$8481$1DOkPG core-prim . cons*) (g$16356$1DOkPG core-prim . assv) (g$16355$1DOkPG core-prim . assq) (g$16354$1DOkPG core-prim . assp) (g$16353$1DOkPG core-prim . assoc) (g$16352$1DOkPG core-prim . with-exception-handler) (g$16351$1DOkPG core-prim . raise-continuable) (g$16350$1DOkPG core-prim . raise) (g$10336$1DOkPG core-prim . eval) (g$10332$1DOkPG core-prim . environment) (g$16349$1DOkPG core-prim . make-enumeration) (g$16348$1DOkPG core-prim . enum-set=?) (g$16347$1DOkPG core-prim . enum-set-universe) (g$16346$1DOkPG core-prim . enum-set-union) (g$16345$1DOkPG core-prim . enum-set-subset?) (g$16344$1DOkPG core-prim . enum-set-projection) (g$16343$1DOkPG core-prim . enum-set-member?) (g$16342$1DOkPG core-prim . enum-set-intersection) (g$16341$1DOkPG core-prim . enum-set-indexer) (g$16340$1DOkPG core-prim . enum-set-difference) (g$16339$1DOkPG core-prim . enum-set-constructor) (g$16338$1DOkPG core-prim . enum-set-complement) (g$16337$1DOkPG core-prim . enum-set->list) (g$8774$1DOkPG core-prim . who-condition?) (g$8685$1DOkPG core-prim . warning?) (g$8727$1DOkPG core-prim . violation?) (g$8851$1DOkPG core-prim . undefined-violation?) (g$8835$1DOkPG core-prim . syntax-violation?) (g$8837$1DOkPG core-prim . syntax-violation-subform) (g$8836$1DOkPG core-prim . syntax-violation-form) (g$10350$1DOkPG core-prim . syntax-violation) (g$16336$1DOkPG core-prim . simple-conditions) (g$8699$1DOkPG core-prim . serious-condition?) (g$8789$1DOkPG core-prim . non-continuable-violation?) (g$8670$1DOkPG core-prim . message-condition?) (g$8772$1DOkPG core-prim . make-who-condition) (g$8684$1DOkPG core-prim . make-warning) (g$8726$1DOkPG core-prim . make-violation) (g$8850$1DOkPG core-prim . make-undefined-violation) (g$8832$1DOkPG core-prim . make-syntax-violation) (g$8698$1DOkPG core-prim . make-serious-condition) (g$8788$1DOkPG core-prim . make-non-continuable-violation) (g$8668$1DOkPG core-prim . make-message-condition) (g$8816$1DOkPG core-prim . make-lexical-violation) (g$8755$1DOkPG core-prim . make-irritants-condition) (g$8802$1DOkPG core-prim . make-implementation-restriction-violation) (g$8712$1DOkPG core-prim . make-error) (g$8740$1DOkPG core-prim . make-assertion-violation) (g$8817$1DOkPG core-prim . lexical-violation?) (g$8757$1DOkPG core-prim . irritants-condition?) (g$8803$1DOkPG core-prim . implementation-restriction-violation?) (g$8713$1DOkPG core-prim . error?) (g$8775$1DOkPG core-prim . condition-who) (g$16335$1DOkPG core-prim . condition-predicate) (g$8671$1DOkPG core-prim . condition-message) (g$8758$1DOkPG core-prim . condition-irritants) (g$16334$1DOkPG core-prim . condition-accessor) (g$16333$1DOkPG core-prim . condition) (g$8741$1DOkPG core-prim . assertion-violation?) (g$16332$1DOkPG core-prim . condition?) (g$16331$1DOkPG core-prim . utf32->string) (g$16330$1DOkPG core-prim . utf16->string) (g$16329$1DOkPG core-prim . utf8->string) (g$16328$1DOkPG core-prim . uint-list->bytevector) (g$16327$1DOkPG core-prim . u8-list->bytevector) (g$16326$1DOkPG core-prim . string->utf8) (g$16325$1DOkPG core-prim . string->utf32) (g$16324$1DOkPG core-prim . string->utf16) (g$16323$1DOkPG core-prim . sint-list->bytevector) (g$8525$1DOkPG core-prim . native-endianness) (g$16322$1DOkPG core-prim . bytevector?) (g$16321$1DOkPG core-prim . bytevector=?) (g$16320$1DOkPG core-prim . bytevector-uint-set!) (g$16319$1DOkPG core-prim . bytevector-uint-ref) (g$16318$1DOkPG core-prim . bytevector-u8-set!) (g$16317$1DOkPG core-prim . bytevector-u8-ref) (g$8546$1DOkPG core-prim . bytevector-u64-set!) (g$8542$1DOkPG core-prim . bytevector-u64-ref) (g$8548$1DOkPG core-prim . bytevector-u64-native-set!) (g$8544$1DOkPG core-prim . bytevector-u64-native-ref) (g$8538$1DOkPG core-prim . bytevector-u32-set!) (g$8534$1DOkPG core-prim . bytevector-u32-ref) (g$8540$1DOkPG core-prim . bytevector-u32-native-set!) (g$8536$1DOkPG core-prim . bytevector-u32-native-ref) (g$8530$1DOkPG core-prim . bytevector-u16-set!) (g$8526$1DOkPG core-prim . bytevector-u16-ref) (g$8532$1DOkPG core-prim . bytevector-u16-native-set!) (g$8528$1DOkPG core-prim . bytevector-u16-native-ref) (g$16316$1DOkPG core-prim . bytevector-sint-set!) (g$16315$1DOkPG core-prim . bytevector-sint-ref) (g$16314$1DOkPG core-prim . bytevector-s8-set!) (g$16313$1DOkPG core-prim . bytevector-s8-ref) (g$8547$1DOkPG core-prim . bytevector-s64-set!) (g$8543$1DOkPG core-prim . bytevector-s64-ref) (g$8549$1DOkPG core-prim . bytevector-s64-native-set!) (g$8545$1DOkPG core-prim . bytevector-s64-native-ref) (g$8539$1DOkPG core-prim . bytevector-s32-set!) (g$8535$1DOkPG core-prim . bytevector-s32-ref) (g$8541$1DOkPG core-prim . bytevector-s32-native-set!) (g$8537$1DOkPG core-prim . bytevector-s32-native-ref) (g$8531$1DOkPG core-prim . bytevector-s16-set!) (g$8527$1DOkPG core-prim . bytevector-s16-ref) (g$8533$1DOkPG core-prim . bytevector-s16-native-set!) (g$8529$1DOkPG core-prim . bytevector-s16-native-ref) (g$16312$1DOkPG core-prim . bytevector-length) (g$16311$1DOkPG core-prim . bytevector-ieee-single-set!) (g$16310$1DOkPG core-prim . bytevector-ieee-single-ref) (g$8552$1DOkPG core-prim . bytevector-ieee-single-native-set!) (g$8550$1DOkPG core-prim . bytevector-ieee-single-native-ref) (g$16309$1DOkPG core-prim . bytevector-ieee-double-set!) (g$16308$1DOkPG core-prim . bytevector-ieee-double-ref) (g$8553$1DOkPG core-prim . bytevector-ieee-double-native-set!) (g$8551$1DOkPG core-prim . bytevector-ieee-double-native-ref) (g$16307$1DOkPG core-prim . bytevector-fill!) (g$16306$1DOkPG core-prim . bytevector-copy!) (g$16305$1DOkPG core-prim . bytevector-copy) (g$16304$1DOkPG core-prim . bytevector->uint-list) (g$16303$1DOkPG core-prim . bytevector->u8-list) (g$16302$1DOkPG core-prim . bytevector->sint-list) (g$9050$1DOkPG core-prim . no-nans-violation?) (g$9036$1DOkPG core-prim . no-infinities-violation?) (g$9049$1DOkPG core-prim . make-no-nans-violation) (g$9035$1DOkPG core-prim . make-no-infinities-violation) (g$16301$1DOkPG core-prim . real->flonum) (g$16300$1DOkPG core-prim . flzero?) (g$16299$1DOkPG core-prim . fltruncate) (g$16298$1DOkPG core-prim . fltan) (g$16297$1DOkPG core-prim . flsqrt) (g$16296$1DOkPG core-prim . flsin) (g$16295$1DOkPG core-prim . flround) (g$16294$1DOkPG core-prim . flpositive?) (g$16293$1DOkPG core-prim . flonum?) (g$16292$1DOkPG core-prim . flodd?) (g$16291$1DOkPG core-prim . flnumerator) (g$16290$1DOkPG core-prim . flnegative?) (g$16289$1DOkPG core-prim . flnan?) (g$16288$1DOkPG core-prim . flmod0) (g$16287$1DOkPG core-prim . flmod) (g$16286$1DOkPG core-prim . flmin) (g$16285$1DOkPG core-prim . flmax) (g$16284$1DOkPG core-prim . fllog) (g$16283$1DOkPG core-prim . flinteger?) (g$16282$1DOkPG core-prim . flinfinite?) (g$16281$1DOkPG core-prim . flfloor) (g$16280$1DOkPG core-prim . flfinite?) (g$16279$1DOkPG core-prim . flexpt) (g$16278$1DOkPG core-prim . flexp) (g$16277$1DOkPG core-prim . fleven?) (g$16276$1DOkPG core-prim . fldiv0-and-mod0) (g$16275$1DOkPG core-prim . fldiv0) (g$16274$1DOkPG core-prim . fldiv-and-mod) (g$16273$1DOkPG core-prim . fldiv) (g$16272$1DOkPG core-prim . fldenominator) (g$16271$1DOkPG core-prim . flcos) (g$16270$1DOkPG core-prim . flceiling) (g$16269$1DOkPG core-prim . flatan) (g$16268$1DOkPG core-prim . flasin) (g$16267$1DOkPG core-prim . flacos) (g$16266$1DOkPG core-prim . flabs) (g$16265$1DOkPG core-prim . fl>?) (g$16264$1DOkPG core-prim . fl>=?) (g$16263$1DOkPG core-prim . fl=?) (g$16262$1DOkPG core-prim . fl<?) (g$16261$1DOkPG core-prim . fl<=?) (g$16260$1DOkPG core-prim . fl/) (g$16259$1DOkPG core-prim . fl-) (g$16258$1DOkPG core-prim . fl+) (g$16257$1DOkPG core-prim . fl*) (g$16256$1DOkPG core-prim . fixnum->flonum) (g$16255$1DOkPG core-prim . fxzero?) (g$16254$1DOkPG core-prim . fxxor) (g$8981$1DOkPG core-prim . fxrotate-bit-field) (g$16253$1DOkPG core-prim . fxreverse-bit-field) (g$16252$1DOkPG core-prim . fxpositive?) (g$16251$1DOkPG core-prim . fxodd?) (g$16250$1DOkPG core-prim . fxnot) (g$16249$1DOkPG core-prim . fxnegative?) (g$16248$1DOkPG core-prim . fxmod0) (g$16247$1DOkPG core-prim . fxmod) (g$16246$1DOkPG core-prim . fxmin) (g$16245$1DOkPG core-prim . fxmax) (g$16244$1DOkPG core-prim . fxlength) (g$16243$1DOkPG core-prim . fxior) (g$8975$1DOkPG core-prim . fxif) (g$16242$1DOkPG core-prim . fxfirst-bit-set) (g$16241$1DOkPG core-prim . fxeven?) (g$16240$1DOkPG core-prim . fxdiv0-and-mod0) (g$16239$1DOkPG core-prim . fxdiv0) (g$16238$1DOkPG core-prim . fxdiv-and-mod) (g$16237$1DOkPG core-prim . fxdiv) (g$8978$1DOkPG core-prim . fxcopy-bit-field) (g$8976$1DOkPG core-prim . fxcopy-bit) (g$16236$1DOkPG core-prim . fxbit-set?) (g$8977$1DOkPG core-prim . fxbit-field) (g$16235$1DOkPG core-prim . fxbit-count) (g$8980$1DOkPG core-prim . fxarithmetic-shift-right) (g$8979$1DOkPG core-prim . fxarithmetic-shift-left) (g$16234$1DOkPG core-prim . fxarithmetic-shift) (g$16233$1DOkPG core-prim . fxand) (g$16232$1DOkPG core-prim . fx>?) (g$16231$1DOkPG core-prim . fx>=?) (g$16230$1DOkPG core-prim . fx=?) (g$16229$1DOkPG core-prim . fx<?) (g$16228$1DOkPG core-prim . fx<=?) (g$16227$1DOkPG core-prim . fx-/carry) (g$16226$1DOkPG core-prim . fx-) (g$16225$1DOkPG core-prim . fx+/carry) (g$16224$1DOkPG core-prim . fx+) (g$16223$1DOkPG core-prim . fx*/carry) (g$16222$1DOkPG core-prim . fx*) (g$16221$1DOkPG core-prim . greatest-fixnum) (g$16220$1DOkPG core-prim . least-fixnum) (g$16219$1DOkPG core-prim . fixnum-width) (g$16218$1DOkPG core-prim . fixnum?) (g$8929$1DOkPG core-prim . bitwise-rotate-bit-field) (g$8930$1DOkPG core-prim . bitwise-reverse-bit-field) (g$16217$1DOkPG core-prim . bitwise-length) (g$8923$1DOkPG core-prim . bitwise-if) (g$16216$1DOkPG core-prim . bitwise-first-bit-set) (g$8926$1DOkPG core-prim . bitwise-copy-bit-field) (g$8924$1DOkPG core-prim . bitwise-copy-bit) (g$16215$1DOkPG core-prim . bitwise-bit-set?) (g$16214$1DOkPG core-prim . bitwise-bit-field) (g$16213$1DOkPG core-prim . bitwise-bit-count) (g$16212$1DOkPG core-prim . bitwise-xor) (g$16211$1DOkPG core-prim . bitwise-ior) (g$16210$1DOkPG core-prim . bitwise-and) (g$16209$1DOkPG core-prim . bitwise-not) (g$8928$1DOkPG core-prim . bitwise-arithmetic-shift-right) (g$8927$1DOkPG core-prim . bitwise-arithmetic-shift-left) (g$16208$1DOkPG core-prim . bitwise-arithmetic-shift) (g$16207$1DOkPG core-prim . zero?) (g$16206$1DOkPG core-prim . vector?) (g$16205$1DOkPG core-prim . vector-set!) (g$16204$1DOkPG core-prim . vector-ref) (g$16203$1DOkPG core-prim . vector-map) (g$16202$1DOkPG core-prim . vector-length) (g$16201$1DOkPG core-prim . vector-for-each) (g$16200$1DOkPG core-prim . vector-fill!) (g$16199$1DOkPG core-prim . vector->list) (g$16198$1DOkPG core-prim . vector) (g$16197$1DOkPG core-prim . values) (g$16196$1DOkPG core-prim . truncate) (g$16195$1DOkPG core-prim . tan) (g$16194$1DOkPG core-prim . symbol?) (g$16193$1DOkPG core-prim . symbol=?) (g$16192$1DOkPG core-prim . symbol->string) (g$16191$1DOkPG core-prim . substring) (g$16190$1DOkPG core-prim . string?) (g$16189$1DOkPG core-prim . string>?) (g$16188$1DOkPG core-prim . string>=?) (g$16187$1DOkPG core-prim . string=?) (g$16186$1DOkPG core-prim . string<?) (g$16185$1DOkPG core-prim . string<=?) (g$16184$1DOkPG core-prim . string-ref) (g$16183$1DOkPG core-prim . string-length) (g$16182$1DOkPG core-prim . string-for-each) (g$16181$1DOkPG core-prim . string-copy) (g$16180$1DOkPG core-prim . string-append) (g$16179$1DOkPG core-prim . string->symbol) (g$16178$1DOkPG core-prim . string->number) (g$16177$1DOkPG core-prim . string->list) (g$16176$1DOkPG core-prim . string) (g$16175$1DOkPG core-prim . sqrt) (g$16174$1DOkPG core-prim . sin) (g$16173$1DOkPG core-prim . round) (g$16172$1DOkPG core-prim . reverse) (g$16171$1DOkPG core-prim . real?) (g$16170$1DOkPG core-prim . real-valued?) (g$16169$1DOkPG core-prim . real-part) (g$8028$1DOkPG core-prim . rationalize) (g$16168$1DOkPG core-prim . rational?) (g$16167$1DOkPG core-prim . rational-valued?) (g$16166$1DOkPG core-prim . procedure?) (g$16165$1DOkPG core-prim . positive?) (g$16164$1DOkPG core-prim . pair?) (g$16163$1DOkPG core-prim . odd?) (g$16162$1DOkPG core-prim . numerator) (g$16161$1DOkPG core-prim . number?) (g$16160$1DOkPG core-prim . number->string) (g$16159$1DOkPG core-prim . null?) (g$16158$1DOkPG core-prim . not) (g$16157$1DOkPG core-prim . negative?) (g$16156$1DOkPG core-prim . nan?) (g$16155$1DOkPG core-prim . min) (g$16154$1DOkPG core-prim . max) (g$16153$1DOkPG core-prim . map) (g$16152$1DOkPG core-prim . make-vector) (g$16151$1DOkPG core-prim . make-string) (g$16150$1DOkPG core-prim . make-rectangular) (g$16149$1DOkPG core-prim . make-polar) (g$16148$1DOkPG core-prim . magnitude) (g$16147$1DOkPG core-prim . log) (g$16146$1DOkPG core-prim . list?) (g$16145$1DOkPG core-prim . list-tail) (g$16144$1DOkPG core-prim . list-ref) (g$16143$1DOkPG core-prim . list->vector) (g$16142$1DOkPG core-prim . list->string) (g$16141$1DOkPG core-prim . list) (g$16140$1DOkPG core-prim . length) (g$16139$1DOkPG core-prim . lcm) (g$16138$1DOkPG core-prim . integer?) (g$16137$1DOkPG core-prim . integer-valued?) (g$16136$1DOkPG core-prim . integer->char) (g$16135$1DOkPG core-prim . infinite?) (g$16134$1DOkPG core-prim . inexact?) (g$16133$1DOkPG core-prim . inexact) (g$16132$1DOkPG core-prim . imag-part) (g$16131$1DOkPG core-prim . gcd) (g$16130$1DOkPG core-prim . for-each) (g$16129$1DOkPG core-prim . floor) (g$16128$1DOkPG core-prim . finite?) (g$16127$1DOkPG core-prim . expt) (g$16126$1DOkPG core-prim . exp) (g$16125$1DOkPG core-prim . exact?) (g$16124$1DOkPG core-prim . exact-integer-sqrt) (g$16123$1DOkPG core-prim . exact) (g$16122$1DOkPG core-prim . even?) (g$16121$1DOkPG core-prim . error) (g$16120$1DOkPG core-prim . eqv?) (g$16119$1DOkPG core-prim . equal?) (g$16118$1DOkPG core-prim . eq?) (g$16117$1DOkPG core-prim . dynamic-wind) (g$16116$1DOkPG core-prim . div0-and-mod0) (g$16115$1DOkPG core-prim . mod0) (g$16114$1DOkPG core-prim . div0) (g$16113$1DOkPG core-prim . div-and-mod) (g$16112$1DOkPG core-prim . mod) (g$16111$1DOkPG core-prim . div) (g$16110$1DOkPG core-prim . denominator) (g$16109$1DOkPG core-prim . cos) (g$16108$1DOkPG core-prim . cons) (g$16107$1DOkPG core-prim . complex?) (g$16106$1DOkPG core-prim . char?) (g$16105$1DOkPG core-prim . char>?) (g$16104$1DOkPG core-prim . char>=?) (g$16103$1DOkPG core-prim . char=?) (g$16102$1DOkPG core-prim . char<?) (g$16101$1DOkPG core-prim . char<=?) (g$16100$1DOkPG core-prim . char->integer) (g$16099$1DOkPG core-prim . ceiling) (g$16098$1DOkPG core-prim . call-with-values) (g$16097$1DOkPG core-prim . call/cc) (g$16096$1DOkPG core-prim . call-with-current-continuation) (g$8027$1DOkPG core-prim . cddddr) (g$8026$1DOkPG core-prim . cdddar) (g$8025$1DOkPG core-prim . cddadr) (g$8024$1DOkPG core-prim . cddaar) (g$8023$1DOkPG core-prim . cdaddr) (g$8022$1DOkPG core-prim . cdadar) (g$8021$1DOkPG core-prim . cdaadr) (g$8020$1DOkPG core-prim . cdaaar) (g$8019$1DOkPG core-prim . cadddr) (g$8018$1DOkPG core-prim . caddar) (g$8017$1DOkPG core-prim . cadadr) (g$8016$1DOkPG core-prim . cadaar) (g$8015$1DOkPG core-prim . caaddr) (g$8014$1DOkPG core-prim . caadar) (g$8013$1DOkPG core-prim . caaadr) (g$8012$1DOkPG core-prim . caaaar) (g$8011$1DOkPG core-prim . cdddr) (g$8010$1DOkPG core-prim . cddar) (g$8009$1DOkPG core-prim . cdadr) (g$8008$1DOkPG core-prim . cdaar) (g$8007$1DOkPG core-prim . caddr) (g$8006$1DOkPG core-prim . cadar) (g$8005$1DOkPG core-prim . caadr) (g$8004$1DOkPG core-prim . caaar) (g$8003$1DOkPG core-prim . cddr) (g$8002$1DOkPG core-prim . cdar) (g$8001$1DOkPG core-prim . cadr) (g$8000$1DOkPG core-prim . caar) (g$16095$1DOkPG core-prim . cdr) (g$16094$1DOkPG core-prim . car) (g$16093$1DOkPG core-prim . boolean?) (g$16092$1DOkPG core-prim . boolean=?) (g$16091$1DOkPG core-prim . atan) (g$16090$1DOkPG core-prim . assertion-violation) (g$16089$1DOkPG core-prim . asin) (g$16088$1DOkPG core-prim . apply) (g$16087$1DOkPG core-prim . append) (g$16086$1DOkPG core-prim . angle) (g$16085$1DOkPG core-prim . acos) (g$16084$1DOkPG core-prim . abs) (g$16083$1DOkPG core-prim . /) (g$16082$1DOkPG core-prim . *) (g$16081$1DOkPG core-prim . -) (g$16080$1DOkPG core-prim . +) (g$16079$1DOkPG core-prim . >=) (g$16078$1DOkPG core-prim . >) (g$16077$1DOkPG core-prim . =) (g$16076$1DOkPG core-prim . <=) (g$16075$1DOkPG core-prim . <) (g$16074$1DOkPG core-prim . make-record-printer) (g$16073$1DOkPG core-prim . vector-reverse!) (g$16072$1DOkPG core-prim . vector-contains?) (g$16071$1DOkPG core-prim . vector-index-of) (g$16070$1DOkPG core-prim . vector-copy) (g$16069$1DOkPG core-prim . vector-binary-search) (g$16068$1DOkPG core-prim . get-output-string) (g$16067$1DOkPG core-prim . open-output-string) (g$16066$1DOkPG core-prim . open-input-string) (g$16065$1DOkPG core-prim . string-format) (g$16064$1DOkPG core-prim . make-traced-procedure) (g$16063$1DOkPG core-prim . pmap) (g$16062$1DOkPG core-prim . time-it) (g$9268$1DOkPG core-prim . make-parameter) (g$16061$1DOkPG core-prim . library-locator) (g$16060$1DOkPG core-prim . get-library-paths) (g$9487$1DOkPG core-prim . library-path) (g$9488$1DOkPG core-prim . library-extensions) (g$9510$1DOkPG core-prim . installed-libraries) (g$16059$1DOkPG $core-rtd &no-nans-rtd &no-nans-rcd) (g$16058$1DOkPG $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$16057$1DOkPG $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$16056$1DOkPG $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$16055$1DOkPG $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$16054$1DOkPG $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$16053$1DOkPG $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$16052$1DOkPG $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$16051$1DOkPG $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$16050$1DOkPG $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$16049$1DOkPG $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$16048$1DOkPG $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$16047$1DOkPG $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$16046$1DOkPG $core-rtd &i/o-rtd &i/o-rcd) (g$16045$1DOkPG $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$16044$1DOkPG $core-rtd &undefined-rtd &undefined-rcd) (g$16043$1DOkPG $core-rtd &syntax-rtd &syntax-rcd) (g$16042$1DOkPG $core-rtd &lexical-rtd &lexical-rcd) (g$16041$1DOkPG $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$16040$1DOkPG $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$16039$1DOkPG $core-rtd &who-rtd &who-rcd) (g$16038$1DOkPG $core-rtd &irritants-rtd &irritants-rcd) (g$16037$1DOkPG $core-rtd &assertion-rtd &assertion-rcd) (g$16036$1DOkPG $core-rtd &violation-rtd &violation-rcd) (g$16035$1DOkPG $core-rtd &error-rtd &error-rcd) (g$16034$1DOkPG $core-rtd &serious-rtd &serious-rcd) (g$16033$1DOkPG $core-rtd &warning-rtd &warning-rcd) (g$16032$1DOkPG $core-rtd &message-rtd &message-rcd) (g$16031$1DOkPG $core-rtd &condition-rtd &condition-rcd) (g$16030$1DOkPG macro . define-condition-type) (g$16029$1DOkPG macro . define-enumeration) (g$16028$1DOkPG macro . define-record-type) (g$16027$1DOkPG macro . parent-rtd) (g$16026$1DOkPG macro . nongenerative) (g$16025$1DOkPG macro . opaque) (g$16024$1DOkPG macro . sealed) (g$16023$1DOkPG macro . protocol) (g$16022$1DOkPG macro . parent) (g$16021$1DOkPG macro . immutable) (g$16020$1DOkPG macro . mutable) (g$16019$1DOkPG macro . fields) (g$16018$1DOkPG macro . error-handling-mode) (g$16017$1DOkPG macro . file-options) (g$16016$1DOkPG macro . buffer-mode) (g$16015$1DOkPG macro . eol-style) (g$16014$1DOkPG macro . guard) (g$16013$1DOkPG macro . trace-define-syntax) (g$16012$1DOkPG macro . trace-define) (g$16011$1DOkPG macro . trace-lambda) (g$16010$1DOkPG macro . unsyntax-splicing) (g$16009$1DOkPG macro . unsyntax) (g$16008$1DOkPG macro . unquote-splicing) (g$16007$1DOkPG macro . unquote) (g$16006$1DOkPG macro . _) (g$16005$1DOkPG macro . else) (g$16004$1DOkPG macro . =>) (g$16003$1DOkPG macro . ...) (g$16002$1DOkPG macro . assert) (g$16001$1DOkPG macro . endianness) (g$16000$1DOkPG macro . delay) (g$15999$1DOkPG macro . time) (g$15998$1DOkPG macro . or) (g$15997$1DOkPG macro . and) (g$15996$1DOkPG macro . do) (g$15995$1DOkPG macro . cond) (g$15994$1DOkPG macro . let*) (g$15993$1DOkPG macro . let) (g$15992$1DOkPG macro . identifier-syntax) (g$15991$1DOkPG macro . with-syntax) (g$15990$1DOkPG macro . quasisyntax) (g$15989$1DOkPG macro . quasiquote) (g$15988$1DOkPG macro . syntax-rules) (g$15987$1DOkPG macro . include-into) (g$15986$1DOkPG macro . include) (g$15985$1DOkPG macro . define-struct) (g$15984$1DOkPG macro . let-values) (g$15983$1DOkPG macro . let*-values) (g$15982$1DOkPG core-macro . record-constructor-descriptor) (g$15981$1DOkPG core-macro . record-type-descriptor) (g$15980$1DOkPG core-macro . fluid-let-syntax) (g$15979$1DOkPG core-macro . case) (g$15978$1DOkPG core-macro . parameterize) (g$15977$1DOkPG core-macro . unless) (g$15976$1DOkPG core-macro . when) (g$15975$1DOkPG core-macro . if) (g$15974$1DOkPG core-macro . letrec*) (g$15973$1DOkPG core-macro . letrec) (g$15972$1DOkPG core-macro . type-descriptor) (g$15971$1DOkPG core-macro . case-lambda) (g$15970$1DOkPG core-macro . lambda) (g$15969$1DOkPG core-macro . syntax) (g$15968$1DOkPG core-macro . syntax-case) (g$15967$1DOkPG core-macro . quote) (g$15966$1DOkPG core-macro . foreign-call) (g$15965$1DOkPG letrec-syntax) (g$15964$1DOkPG let-syntax) (g$15963$1DOkPG set!) (g$15962$1DOkPG import) (g$15961$1DOkPG library) (g$15960$1DOkPG begin) (g$15959$1DOkPG module) (g$15958$1DOkPG define-syntax) (g$15957$1DOkPG define)) values values '#f '#f '#f '#f) (g$install-library$8996$1DOkPG 'g$16647$1DOkPG '(psyntax system $bootstrap) '() '() '() '() '((eval-core . g$16525$1DOkPG) (set-symbol-value! . g$16524$1DOkPG) (symbol-value . g$16523$1DOkPG) (gensym . g$16522$1DOkPG) (void . g$16521$1DOkPG)) '() values values '#f '#f '#f '#f)))
(library-letrec* ((g$local-library-path$15563$1DOkPG g$local-library-path$15596$1DOkPG (case-lambda ((g$filename$15568$1DOkPG) (append (list (g$get-directory-name$7805$1DOkPG g$filename$15568$1DOkPG)) (g$library-path$8980$1DOkPG))))) (g$load$15564$1DOkPG g$load$15597$1DOkPG (case-lambda ((g$filename$15569$1DOkPG) ((case-lambda ((g$library-path$15572$1DOkPG g$library-path$15573$1DOkPG) ((case-lambda ((g$swap$15574$1DOkPG) (dynamic-wind g$swap$15574$1DOkPG (case-lambda (() (begin (g$load-r6rs-top-level$15567$1DOkPG g$filename$15569$1DOkPG 'load) (void)))) g$swap$15574$1DOkPG))) (case-lambda (() ((case-lambda ((g$t$15575$1DOkPG) (begin (g$library-path$15572$1DOkPG g$library-path$15573$1DOkPG) (set! g$library-path$15573$1DOkPG g$t$15575$1DOkPG)))) (g$library-path$15572$1DOkPG))))))) g$library-path$8980$1DOkPG (g$local-library-path$15563$1DOkPG g$filename$15569$1DOkPG))))) (g$compile$15565$1DOkPG g$compile$15598$1DOkPG (case-lambda ((g$filename$15576$1DOkPG) ((case-lambda ((g$library-path$15579$1DOkPG g$library-path$15580$1DOkPG) ((case-lambda ((g$swap$15581$1DOkPG) (dynamic-wind g$swap$15581$1DOkPG (case-lambda (() (g$load-r6rs-top-level$15567$1DOkPG g$filename$15576$1DOkPG 'compile))) g$swap$15581$1DOkPG))) (case-lambda (() ((case-lambda ((g$t$15582$1DOkPG) (begin (g$library-path$15579$1DOkPG g$library-path$15580$1DOkPG) (set! g$library-path$15580$1DOkPG g$t$15582$1DOkPG)))) (g$library-path$15579$1DOkPG))))))) g$library-path$8980$1DOkPG (g$local-library-path$15563$1DOkPG g$filename$15576$1DOkPG))))) (g$compile->closure$15566$1DOkPG g$compile->closure$15599$1DOkPG (case-lambda ((g$filename$15583$1DOkPG) ((case-lambda ((g$library-path$15586$1DOkPG g$library-path$15587$1DOkPG) ((case-lambda ((g$swap$15588$1DOkPG) (dynamic-wind g$swap$15588$1DOkPG (case-lambda (() (g$load-r6rs-top-level$15567$1DOkPG g$filename$15583$1DOkPG 'closure))) g$swap$15588$1DOkPG))) (case-lambda (() ((case-lambda ((g$t$15589$1DOkPG) (begin (g$library-path$15586$1DOkPG g$library-path$15587$1DOkPG) (set! g$library-path$15587$1DOkPG g$t$15589$1DOkPG)))) (g$library-path$15586$1DOkPG))))))) g$library-path$8980$1DOkPG (g$local-library-path$15563$1DOkPG g$filename$15583$1DOkPG))))) (g$load-r6rs-top-level$15567$1DOkPG g$load-r6rs-top-level$15600$1DOkPG (case-lambda ((g$filename$15590$1DOkPG g$how$15591$1DOkPG) ((case-lambda ((g$x*$15592$1DOkPG) ((case-lambda ((g$t$15593$1DOkPG) (if (memv g$t$15593$1DOkPG '(closure)) (g$compile-r6rs-top-level$15559$1DOkPG g$x*$15592$1DOkPG) (if (memv g$t$15593$1DOkPG '(load)) ((g$compile-r6rs-top-level$15559$1DOkPG g$x*$15592$1DOkPG)) (if (memv g$t$15593$1DOkPG '(compile)) (begin (g$compile-r6rs-top-level$15559$1DOkPG g$x*$15592$1DOkPG) (g$serialize-all$8984$1DOkPG serialize-library g$compile-core-expr$8703$1DOkPG)) (void)))))) g$how$15591$1DOkPG))) (with-input-from-file g$filename$15590$1DOkPG (case-lambda (() ((letrec ((g$f$15594$1DOkPG (case-lambda (() ((case-lambda ((g$x$15595$1DOkPG) (if (eof-object? g$x$15595$1DOkPG) '() (cons g$x$15595$1DOkPG (g$f$15594$1DOkPG))))) (read-annotated)))))) g$f$15594$1DOkPG)))))))))) (begin (g$current-precompiled-library-loader$8985$1DOkPG load-serialized-library) (set-symbol-value! 'load g$load$15564$1DOkPG) (set-symbol-value! 'compile g$compile$15565$1DOkPG) (set-symbol-value! 'compile->closure g$compile->closure$15566$1DOkPG) (set-symbol-value! 'eval-r6rs g$eval-top-level$15562$1DOkPG) (g$library-path$8980$1DOkPG (get-library-paths))))
