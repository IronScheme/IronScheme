;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$list-tail$4906$eZ1vL
     g$list-tail$5043$eZ1vL
     (case-lambda
       ((g$lst$4934$eZ1vL g$index$4935$eZ1vL)
        (if ((case-lambda
               ((g$t$4936$eZ1vL)
                (if g$t$4936$eZ1vL
                  g$t$4936$eZ1vL
                  (begin '#f (g$negative?$5292$eZ1vL g$index$4935$eZ1vL)))))
             (null? g$lst$4934$eZ1vL))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$4934$eZ1vL
            g$index$4935$eZ1vL)
          (if (g$zero?$5293$eZ1vL g$index$4935$eZ1vL)
            g$lst$4934$eZ1vL
            (g$list-tail$4906$eZ1vL
              (cdr g$lst$4934$eZ1vL)
              (- g$index$4935$eZ1vL '1)))))))
   (g$list-ref$4907$eZ1vL
     g$list-ref$5044$eZ1vL
     (case-lambda
       ((g$lst$4937$eZ1vL g$index$4938$eZ1vL)
        (car (g$list-tail$4906$eZ1vL g$lst$4937$eZ1vL g$index$4938$eZ1vL)))))
   (g$last-pair$4908$eZ1vL
     g$last-pair$5045$eZ1vL
     (case-lambda
       ((g$lst$4939$eZ1vL)
        (if (null? g$lst$4939$eZ1vL)
          g$lst$4939$eZ1vL
          (if (null? (cdr g$lst$4939$eZ1vL))
            g$lst$4939$eZ1vL
            (g$last-pair$4908$eZ1vL (cdr g$lst$4939$eZ1vL)))))))
   (g$make-list$4909$eZ1vL
     g$make-list$5046$eZ1vL
     (case-lambda
       ((g$n$4940$eZ1vL) (list->vector (make-vector g$n$4940$eZ1vL)))
       ((g$n$4941$eZ1vL g$fill$4942$eZ1vL)
        (list->vector (make-vector g$n$4941$eZ1vL g$fill$4942$eZ1vL)))))
   (g$find$4910$eZ1vL
     g$find$5047$eZ1vL
     (case-lambda
       ((g$proc$4943$eZ1vL g$l$4944$eZ1vL)
        (if (null? g$l$4944$eZ1vL)
          '#f
          ((case-lambda
             ((g$e$4945$eZ1vL g$r$4946$eZ1vL g$proc$4947$eZ1vL)
              (if (g$proc$4947$eZ1vL g$e$4945$eZ1vL)
                g$e$4945$eZ1vL
                (g$find$4910$eZ1vL g$proc$4947$eZ1vL g$r$4946$eZ1vL))))
           (car g$l$4944$eZ1vL)
           (cdr g$l$4944$eZ1vL)
           g$proc$4943$eZ1vL)))))
   (g$partition$4911$eZ1vL
     g$partition$5048$eZ1vL
     (case-lambda
       ((g$proc$4948$eZ1vL g$l$4949$eZ1vL)
        ((letrec ((g$f$4950$eZ1vL
                    (case-lambda
                      ((g$l$4951$eZ1vL g$a$4952$eZ1vL g$b$4953$eZ1vL)
                       (if (null? g$l$4951$eZ1vL)
                         (values
                           (reverse! g$a$4952$eZ1vL)
                           (reverse! g$b$4953$eZ1vL))
                         ((case-lambda
                            ((g$e$4954$eZ1vL)
                             (if (g$proc$4948$eZ1vL g$e$4954$eZ1vL)
                               (g$f$4950$eZ1vL
                                 (cdr g$l$4951$eZ1vL)
                                 (cons g$e$4954$eZ1vL g$a$4952$eZ1vL)
                                 g$b$4953$eZ1vL)
                               (g$f$4950$eZ1vL
                                 (cdr g$l$4951$eZ1vL)
                                 g$a$4952$eZ1vL
                                 (cons g$e$4954$eZ1vL g$b$4953$eZ1vL)))))
                          (car g$l$4951$eZ1vL)))))))
           g$f$4950$eZ1vL)
         g$l$4949$eZ1vL
         '()
         '()))))
   (g$remp$4912$eZ1vL
     g$remp$5049$eZ1vL
     (case-lambda
       ((g$proc$4955$eZ1vL g$l$4956$eZ1vL)
        ((letrec ((g$f$4957$eZ1vL
                    (case-lambda
                      ((g$l$4958$eZ1vL g$a$4959$eZ1vL)
                       (if (null? g$l$4958$eZ1vL)
                         (reverse! g$a$4959$eZ1vL)
                         ((case-lambda
                            ((g$e$4960$eZ1vL)
                             (if (g$proc$4955$eZ1vL g$e$4960$eZ1vL)
                               (g$f$4957$eZ1vL
                                 (cdr g$l$4958$eZ1vL)
                                 g$a$4959$eZ1vL)
                               (g$f$4957$eZ1vL
                                 (cdr g$l$4958$eZ1vL)
                                 (cons g$e$4960$eZ1vL g$a$4959$eZ1vL)))))
                          (car g$l$4958$eZ1vL)))))))
           g$f$4957$eZ1vL)
         g$l$4956$eZ1vL
         '()))))
   (g$filter$4913$eZ1vL
     g$filter$5050$eZ1vL
     (case-lambda
       ((g$proc$4961$eZ1vL g$l$4962$eZ1vL)
        ((letrec ((g$f$4963$eZ1vL
                    (case-lambda
                      ((g$l$4964$eZ1vL g$a$4965$eZ1vL)
                       (if (null? g$l$4964$eZ1vL)
                         (reverse! g$a$4965$eZ1vL)
                         ((case-lambda
                            ((g$e$4966$eZ1vL)
                             (if (g$proc$4961$eZ1vL g$e$4966$eZ1vL)
                               (g$f$4963$eZ1vL
                                 (cdr g$l$4964$eZ1vL)
                                 (cons g$e$4966$eZ1vL g$a$4965$eZ1vL))
                               (g$f$4963$eZ1vL
                                 (cdr g$l$4964$eZ1vL)
                                 g$a$4965$eZ1vL))))
                          (car g$l$4964$eZ1vL)))))))
           g$f$4963$eZ1vL)
         g$l$4962$eZ1vL
         '()))))
   (g$assq$4914$eZ1vL
     g$assq$5051$eZ1vL
     (case-lambda
       ((g$obj$4967$eZ1vL g$lst$4968$eZ1vL)
        (if (null? g$lst$4968$eZ1vL)
          '#f
          ((case-lambda
             ((g$obj$4969$eZ1vL g$t$4970$eZ1vL g$r$4971$eZ1vL)
              (if (eq? g$obj$4969$eZ1vL (car g$t$4970$eZ1vL))
                g$t$4970$eZ1vL
                (g$assq$4914$eZ1vL g$obj$4969$eZ1vL g$r$4971$eZ1vL))))
           g$obj$4967$eZ1vL
           (car g$lst$4968$eZ1vL)
           (cdr g$lst$4968$eZ1vL))))))
   (g$assv$4915$eZ1vL
     g$assv$5052$eZ1vL
     (case-lambda
       ((g$obj$4972$eZ1vL g$lst$4973$eZ1vL)
        (if (null? g$lst$4973$eZ1vL)
          '#f
          ((case-lambda
             ((g$obj$4974$eZ1vL g$t$4975$eZ1vL g$r$4976$eZ1vL)
              (if (eqv? g$obj$4974$eZ1vL (car g$t$4975$eZ1vL))
                g$t$4975$eZ1vL
                (g$assv$4915$eZ1vL g$obj$4974$eZ1vL g$r$4976$eZ1vL))))
           g$obj$4972$eZ1vL
           (car g$lst$4973$eZ1vL)
           (cdr g$lst$4973$eZ1vL))))))
   (g$assoc$4916$eZ1vL
     g$assoc$5053$eZ1vL
     (case-lambda
       ((g$obj$4977$eZ1vL g$lst$4978$eZ1vL)
        (if (null? g$lst$4978$eZ1vL)
          '#f
          ((case-lambda
             ((g$obj$4979$eZ1vL g$t$4980$eZ1vL g$r$4981$eZ1vL)
              (if (equal? g$obj$4979$eZ1vL (car g$t$4980$eZ1vL))
                g$t$4980$eZ1vL
                (g$assoc$4916$eZ1vL g$obj$4979$eZ1vL g$r$4981$eZ1vL))))
           g$obj$4977$eZ1vL
           (car g$lst$4978$eZ1vL)
           (cdr g$lst$4978$eZ1vL))))))
   (g$assp$4917$eZ1vL
     g$assp$5054$eZ1vL
     (case-lambda
       ((g$p?$4982$eZ1vL g$lst$4983$eZ1vL)
        (if (null? g$lst$4983$eZ1vL)
          '#f
          ((case-lambda
             ((g$p?$4984$eZ1vL g$t$4985$eZ1vL g$r$4986$eZ1vL)
              (if (g$p?$4984$eZ1vL (car g$t$4985$eZ1vL))
                g$t$4985$eZ1vL
                (g$assp$4917$eZ1vL g$p?$4984$eZ1vL g$r$4986$eZ1vL))))
           g$p?$4982$eZ1vL
           (car g$lst$4983$eZ1vL)
           (cdr g$lst$4983$eZ1vL))))))
   (g$memq$4918$eZ1vL
     g$memq$5055$eZ1vL
     (case-lambda
       ((g$obj$4987$eZ1vL g$lst$4988$eZ1vL)
        (if (null? g$lst$4988$eZ1vL)
          '#f
          (if (eq? g$obj$4987$eZ1vL (car g$lst$4988$eZ1vL))
            g$lst$4988$eZ1vL
            (g$memq$4918$eZ1vL g$obj$4987$eZ1vL (cdr g$lst$4988$eZ1vL)))))))
   (g$memv$4919$eZ1vL
     g$memv$5056$eZ1vL
     (case-lambda
       ((g$obj$4989$eZ1vL g$lst$4990$eZ1vL)
        (if (null? g$lst$4990$eZ1vL)
          '#f
          (if (eqv? g$obj$4989$eZ1vL (car g$lst$4990$eZ1vL))
            g$lst$4990$eZ1vL
            (g$memv$4919$eZ1vL g$obj$4989$eZ1vL (cdr g$lst$4990$eZ1vL)))))))
   (g$member$4920$eZ1vL
     g$member$5057$eZ1vL
     (case-lambda
       ((g$obj$4991$eZ1vL g$lst$4992$eZ1vL)
        (if (null? g$lst$4992$eZ1vL)
          '#f
          (if (equal? g$obj$4991$eZ1vL (car g$lst$4992$eZ1vL))
            g$lst$4992$eZ1vL
            (g$member$4920$eZ1vL g$obj$4991$eZ1vL (cdr g$lst$4992$eZ1vL)))))))
   (g$memp$4921$eZ1vL
     g$memp$5058$eZ1vL
     (case-lambda
       ((g$p?$4993$eZ1vL g$lst$4994$eZ1vL)
        (if (null? g$lst$4994$eZ1vL)
          '#f
          (if (g$p?$4993$eZ1vL (car g$lst$4994$eZ1vL))
            g$lst$4994$eZ1vL
            (g$memp$4921$eZ1vL g$p?$4993$eZ1vL (cdr g$lst$4994$eZ1vL)))))))
   (g$all-empty?$4922$eZ1vL
     g$all-empty?$5059$eZ1vL
     (case-lambda
       ((g$ls$4995$eZ1vL)
        ((case-lambda
           ((g$t$4996$eZ1vL)
            (if g$t$4996$eZ1vL
              g$t$4996$eZ1vL
              (begin
                '#f
                (if (null? (car g$ls$4995$eZ1vL))
                  (begin '#f (g$all-empty?$4922$eZ1vL (cdr g$ls$4995$eZ1vL)))
                  '#f)))))
         (null? g$ls$4995$eZ1vL)))))
   (g$split$4923$eZ1vL
     g$split$5060$eZ1vL
     (case-lambda
       ((g$ls$4997$eZ1vL)
        (if (null? g$ls$4997$eZ1vL)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4923$eZ1vL (cdr g$ls$4997$eZ1vL))))
            (case-lambda
              ((g$cars$4998$eZ1vL g$cdrs$4999$eZ1vL)
               ((case-lambda
                  ((g$a$5000$eZ1vL)
                   (values
                     (cons (car g$a$5000$eZ1vL) g$cars$4998$eZ1vL)
                     (cons (cdr g$a$5000$eZ1vL) g$cdrs$4999$eZ1vL))))
                (car g$ls$4997$eZ1vL)))))))))
   (g$for-all$4924$eZ1vL
     g$for-all$5061$eZ1vL
     (case-lambda
       ((g$f$5001$eZ1vL . g$args$5002$eZ1vL)
        (if (g$all-empty?$4922$eZ1vL g$args$5002$eZ1vL)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4923$eZ1vL g$args$5002$eZ1vL)))
            (case-lambda
              ((g$cars$5003$eZ1vL g$cdrs$5004$eZ1vL)
               (if (g$all-empty?$4922$eZ1vL g$cdrs$5004$eZ1vL)
                 (apply g$f$5001$eZ1vL g$cars$5003$eZ1vL)
                 (if (apply g$f$5001$eZ1vL g$cars$5003$eZ1vL)
                   (begin
                     '#f
                     (apply
                       g$for-all$4924$eZ1vL
                       g$f$5001$eZ1vL
                       g$cdrs$5004$eZ1vL))
                   '#f)))))))))
   (g$exists$4925$eZ1vL
     g$exists$5062$eZ1vL
     (case-lambda
       ((g$f$5005$eZ1vL . g$args$5006$eZ1vL)
        (if (g$all-empty?$4922$eZ1vL g$args$5006$eZ1vL)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4923$eZ1vL g$args$5006$eZ1vL)))
            (case-lambda
              ((g$cars$5007$eZ1vL g$cdrs$5008$eZ1vL)
               ((case-lambda
                  ((g$t$5009$eZ1vL)
                   (if g$t$5009$eZ1vL
                     g$t$5009$eZ1vL
                     (begin
                       '#f
                       (apply
                         g$exists$4925$eZ1vL
                         g$f$5005$eZ1vL
                         g$cdrs$5008$eZ1vL)))))
                (apply g$f$5005$eZ1vL g$cars$5007$eZ1vL)))))))))
   (g$map$4926$eZ1vL
     g$map$5063$eZ1vL
     (case-lambda
       ((g$proc$5010$eZ1vL . g$lists$5011$eZ1vL)
        ((letrec ((g$f$5012$eZ1vL
                    (case-lambda
                      ((g$lists$5013$eZ1vL g$a$5014$eZ1vL)
                       (if (g$all-empty?$4922$eZ1vL g$lists$5013$eZ1vL)
                         (reverse! g$a$5014$eZ1vL)
                         (call-with-values
                           (case-lambda
                             (() (g$split$4923$eZ1vL g$lists$5013$eZ1vL)))
                           (case-lambda
                             ((g$cars$5015$eZ1vL g$cdrs$5016$eZ1vL)
                              (g$f$5012$eZ1vL
                                g$cdrs$5016$eZ1vL
                                (cons
                                  (apply g$proc$5010$eZ1vL g$cars$5015$eZ1vL)
                                  g$a$5014$eZ1vL))))))))))
           g$f$5012$eZ1vL)
         g$lists$5011$eZ1vL
         '()))))
   (g$for-each$4927$eZ1vL
     g$for-each$5064$eZ1vL
     (case-lambda
       ((g$f$5017$eZ1vL . g$args$5018$eZ1vL)
        (if (not (g$all-empty?$4922$eZ1vL g$args$5018$eZ1vL))
          (call-with-values
            (case-lambda (() (g$split$4923$eZ1vL g$args$5018$eZ1vL)))
            (case-lambda
              ((g$cars$5019$eZ1vL g$cdrs$5020$eZ1vL)
               (begin
                 (apply g$f$5017$eZ1vL g$cars$5019$eZ1vL)
                 (apply
                   g$for-each$4927$eZ1vL
                   g$f$5017$eZ1vL
                   g$cdrs$5020$eZ1vL)))))
          (void)))))
   (g$cons*$4928$eZ1vL
     g$cons*$5065$eZ1vL
     (case-lambda
       ((g$a$5021$eZ1vL . g$rest$5022$eZ1vL)
        ((letrec ((g$f$5023$eZ1vL
                    (case-lambda
                      ((g$a$5024$eZ1vL g$rest$5025$eZ1vL)
                       (if (null? g$rest$5025$eZ1vL)
                         g$a$5024$eZ1vL
                         (cons
                           g$a$5024$eZ1vL
                           (g$f$5023$eZ1vL
                             (car g$rest$5025$eZ1vL)
                             (cdr g$rest$5025$eZ1vL))))))))
           g$f$5023$eZ1vL)
         g$a$5021$eZ1vL
         g$rest$5022$eZ1vL))))
   (g$fold-left$4929$eZ1vL
     g$fold-left$5066$eZ1vL
     (case-lambda
       ((g$combine$5026$eZ1vL
          g$nil$5027$eZ1vL
          g$list1$5028$eZ1vL
          .
          g$lists$5029$eZ1vL)
        (if (null? g$list1$5028$eZ1vL)
          g$nil$5027$eZ1vL
          (apply
            g$fold-left$4929$eZ1vL
            (g$cons*$4928$eZ1vL
              g$combine$5026$eZ1vL
              (apply
                g$combine$5026$eZ1vL
                (g$cons*$4928$eZ1vL
                  g$nil$5027$eZ1vL
                  (car g$list1$5028$eZ1vL)
                  (g$map$4926$eZ1vL car g$lists$5029$eZ1vL)))
              (cdr g$list1$5028$eZ1vL)
              (g$map$4926$eZ1vL cdr g$lists$5029$eZ1vL)))))))
   (g$fold-right$4930$eZ1vL
     g$fold-right$5067$eZ1vL
     (case-lambda
       ((g$combine$5030$eZ1vL
          g$nil$5031$eZ1vL
          g$list1$5032$eZ1vL
          .
          g$lists$5033$eZ1vL)
        (if (null? g$list1$5032$eZ1vL)
          g$nil$5031$eZ1vL
          (apply
            g$combine$5030$eZ1vL
            (append
              (list (car g$list1$5032$eZ1vL))
              (g$map$4926$eZ1vL car g$lists$5033$eZ1vL)
              (list
                (apply
                  g$fold-right$4930$eZ1vL
                  (g$cons*$4928$eZ1vL
                    g$combine$5030$eZ1vL
                    g$nil$5031$eZ1vL
                    (cdr g$list1$5032$eZ1vL)
                    (g$map$4926$eZ1vL cdr g$lists$5033$eZ1vL))))))))))
   (g$remove$4931$eZ1vL
     g$remove$5068$eZ1vL
     (case-lambda
       ((g$obj$5034$eZ1vL g$list$5035$eZ1vL)
        (g$remp$4912$eZ1vL
          (case-lambda
            ((g$x$5036$eZ1vL) (equal? g$obj$5034$eZ1vL g$x$5036$eZ1vL)))
          g$list$5035$eZ1vL))))
   (g$remv$4932$eZ1vL
     g$remv$5069$eZ1vL
     (case-lambda
       ((g$obj$5037$eZ1vL g$list$5038$eZ1vL)
        (g$remp$4912$eZ1vL
          (case-lambda
            ((g$x$5039$eZ1vL) (eqv? g$obj$5037$eZ1vL g$x$5039$eZ1vL)))
          g$list$5038$eZ1vL))))
   (g$remq$4933$eZ1vL
     g$remq$5070$eZ1vL
     (case-lambda
       ((g$obj$5040$eZ1vL g$list$5041$eZ1vL)
        (g$remp$4912$eZ1vL
          (case-lambda ((g$x$5042$eZ1vL) (eq? g$obj$5040$eZ1vL g$x$5042$eZ1vL)))
          g$list$5041$eZ1vL)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5071$eZ1vL
     g$caar$5263$eZ1vL
     (case-lambda ((g$x$5135$eZ1vL) (car (car g$x$5135$eZ1vL)))))
   (g$cadr$5072$eZ1vL
     g$cadr$5264$eZ1vL
     (case-lambda ((g$x$5136$eZ1vL) (car (cdr g$x$5136$eZ1vL)))))
   (g$cdar$5073$eZ1vL
     g$cdar$5265$eZ1vL
     (case-lambda ((g$x$5137$eZ1vL) (cdr (car g$x$5137$eZ1vL)))))
   (g$cddr$5074$eZ1vL
     g$cddr$5266$eZ1vL
     (case-lambda ((g$x$5138$eZ1vL) (cdr (cdr g$x$5138$eZ1vL)))))
   (g$caaar$5075$eZ1vL
     g$caaar$5267$eZ1vL
     (case-lambda
       ((g$x$5139$eZ1vL) (g$caar$5071$eZ1vL (car g$x$5139$eZ1vL)))))
   (g$caadr$5076$eZ1vL
     g$caadr$5268$eZ1vL
     (case-lambda
       ((g$x$5140$eZ1vL) (g$caar$5071$eZ1vL (cdr g$x$5140$eZ1vL)))))
   (g$cadar$5077$eZ1vL
     g$cadar$5269$eZ1vL
     (case-lambda
       ((g$x$5141$eZ1vL) (g$cadr$5072$eZ1vL (car g$x$5141$eZ1vL)))))
   (g$caddr$5078$eZ1vL
     g$caddr$5270$eZ1vL
     (case-lambda
       ((g$x$5142$eZ1vL) (g$cadr$5072$eZ1vL (cdr g$x$5142$eZ1vL)))))
   (g$cdaar$5079$eZ1vL
     g$cdaar$5271$eZ1vL
     (case-lambda
       ((g$x$5143$eZ1vL) (g$cdar$5073$eZ1vL (car g$x$5143$eZ1vL)))))
   (g$cdadr$5080$eZ1vL
     g$cdadr$5272$eZ1vL
     (case-lambda
       ((g$x$5144$eZ1vL) (g$cdar$5073$eZ1vL (cdr g$x$5144$eZ1vL)))))
   (g$cddar$5081$eZ1vL
     g$cddar$5273$eZ1vL
     (case-lambda
       ((g$x$5145$eZ1vL) (g$cddr$5074$eZ1vL (car g$x$5145$eZ1vL)))))
   (g$cdddr$5082$eZ1vL
     g$cdddr$5274$eZ1vL
     (case-lambda
       ((g$x$5146$eZ1vL) (g$cddr$5074$eZ1vL (cdr g$x$5146$eZ1vL)))))
   (g$caaaar$5083$eZ1vL
     g$caaaar$5275$eZ1vL
     (case-lambda
       ((g$x$5147$eZ1vL) (g$caaar$5075$eZ1vL (car g$x$5147$eZ1vL)))))
   (g$caaadr$5084$eZ1vL
     g$caaadr$5276$eZ1vL
     (case-lambda
       ((g$x$5148$eZ1vL) (g$caaar$5075$eZ1vL (cdr g$x$5148$eZ1vL)))))
   (g$caadar$5085$eZ1vL
     g$caadar$5277$eZ1vL
     (case-lambda
       ((g$x$5149$eZ1vL) (g$caadr$5076$eZ1vL (car g$x$5149$eZ1vL)))))
   (g$caaddr$5086$eZ1vL
     g$caaddr$5278$eZ1vL
     (case-lambda
       ((g$x$5150$eZ1vL) (g$caadr$5076$eZ1vL (cdr g$x$5150$eZ1vL)))))
   (g$cadaar$5087$eZ1vL
     g$cadaar$5279$eZ1vL
     (case-lambda
       ((g$x$5151$eZ1vL) (g$cadar$5077$eZ1vL (car g$x$5151$eZ1vL)))))
   (g$cadadr$5088$eZ1vL
     g$cadadr$5280$eZ1vL
     (case-lambda
       ((g$x$5152$eZ1vL) (g$cadar$5077$eZ1vL (cdr g$x$5152$eZ1vL)))))
   (g$caddar$5089$eZ1vL
     g$caddar$5281$eZ1vL
     (case-lambda
       ((g$x$5153$eZ1vL) (g$caddr$5078$eZ1vL (car g$x$5153$eZ1vL)))))
   (g$cadddr$5090$eZ1vL
     g$cadddr$5282$eZ1vL
     (case-lambda
       ((g$x$5154$eZ1vL) (g$caddr$5078$eZ1vL (cdr g$x$5154$eZ1vL)))))
   (g$cdaaar$5091$eZ1vL
     g$cdaaar$5283$eZ1vL
     (case-lambda
       ((g$x$5155$eZ1vL) (g$cdaar$5079$eZ1vL (car g$x$5155$eZ1vL)))))
   (g$cdaadr$5092$eZ1vL
     g$cdaadr$5284$eZ1vL
     (case-lambda
       ((g$x$5156$eZ1vL) (g$cdaar$5079$eZ1vL (cdr g$x$5156$eZ1vL)))))
   (g$cdadar$5093$eZ1vL
     g$cdadar$5285$eZ1vL
     (case-lambda
       ((g$x$5157$eZ1vL) (g$cdadr$5080$eZ1vL (car g$x$5157$eZ1vL)))))
   (g$cdaddr$5094$eZ1vL
     g$cdaddr$5286$eZ1vL
     (case-lambda
       ((g$x$5158$eZ1vL) (g$cdadr$5080$eZ1vL (cdr g$x$5158$eZ1vL)))))
   (g$cddaar$5095$eZ1vL
     g$cddaar$5287$eZ1vL
     (case-lambda
       ((g$x$5159$eZ1vL) (g$cddar$5081$eZ1vL (car g$x$5159$eZ1vL)))))
   (g$cddadr$5096$eZ1vL
     g$cddadr$5288$eZ1vL
     (case-lambda
       ((g$x$5160$eZ1vL) (g$cddar$5081$eZ1vL (cdr g$x$5160$eZ1vL)))))
   (g$cdddar$5097$eZ1vL
     g$cdddar$5289$eZ1vL
     (case-lambda
       ((g$x$5161$eZ1vL) (g$cdddr$5082$eZ1vL (car g$x$5161$eZ1vL)))))
   (g$cddddr$5098$eZ1vL
     g$cddddr$5290$eZ1vL
     (case-lambda
       ((g$x$5162$eZ1vL) (g$cdddr$5082$eZ1vL (cdr g$x$5162$eZ1vL)))))
   (g$positive?$5099$eZ1vL
     g$positive?$5291$eZ1vL
     (case-lambda
       ((g$r$5163$eZ1vL)
        (begin
          (if (not (real-valued? g$r$5163$eZ1vL))
            (assertion-violation 'positive? '"not a real" g$r$5163$eZ1vL)
            (void))
          (< '0 g$r$5163$eZ1vL)))))
   (g$negative?$5100$eZ1vL
     g$negative?$5292$eZ1vL
     (case-lambda
       ((g$r$5164$eZ1vL)
        (begin
          (if (not (real-valued? g$r$5164$eZ1vL))
            (assertion-violation 'negative? '"not a real" g$r$5164$eZ1vL)
            (void))
          (> '0 g$r$5164$eZ1vL)))))
   (g$zero?$5101$eZ1vL
     g$zero?$5293$eZ1vL
     (case-lambda
       ((g$r$5165$eZ1vL)
        (begin
          (if (not (real-valued? g$r$5165$eZ1vL))
            (assertion-violation 'zero? '"not a real" g$r$5165$eZ1vL)
            (void))
          (= '0 g$r$5165$eZ1vL)))))
   (g$even?$5102$eZ1vL
     g$even?$5294$eZ1vL
     (case-lambda
       ((g$n$5166$eZ1vL)
        (begin
          (if (not (integer-valued? g$n$5166$eZ1vL))
            (assertion-violation 'even? '"not a integer" g$n$5166$eZ1vL)
            (void))
          (= '0 (mod g$n$5166$eZ1vL '2))))))
   (g$odd?$5103$eZ1vL
     g$odd?$5295$eZ1vL
     (case-lambda
       ((g$n$5167$eZ1vL)
        (begin
          (if (not (integer-valued? g$n$5167$eZ1vL))
            (assertion-violation 'odd? '"not a integer" g$n$5167$eZ1vL)
            (void))
          (= '1 (mod g$n$5167$eZ1vL '2))))))
   (g$max$5104$eZ1vL
     g$max$5296$eZ1vL
     (case-lambda
       ((g$a$5168$eZ1vL . g$rest$5169$eZ1vL)
        (g$fold-left$5066$eZ1vL
          (case-lambda
            ((g$a$5170$eZ1vL g$b$5171$eZ1vL)
             ((case-lambda
                ((g$r$5172$eZ1vL)
                 (if ((case-lambda
                        ((g$t$5173$eZ1vL)
                         (if g$t$5173$eZ1vL
                           g$t$5173$eZ1vL
                           (begin '#f (inexact? g$b$5171$eZ1vL)))))
                      (inexact? g$a$5170$eZ1vL))
                   (inexact g$r$5172$eZ1vL)
                   g$r$5172$eZ1vL)))
              (if (< g$a$5170$eZ1vL g$b$5171$eZ1vL)
                g$b$5171$eZ1vL
                g$a$5170$eZ1vL))))
          g$a$5168$eZ1vL
          g$rest$5169$eZ1vL))))
   (g$min$5105$eZ1vL
     g$min$5297$eZ1vL
     (case-lambda
       ((g$a$5174$eZ1vL . g$rest$5175$eZ1vL)
        (g$fold-left$5066$eZ1vL
          (case-lambda
            ((g$a$5176$eZ1vL g$b$5177$eZ1vL)
             ((case-lambda
                ((g$r$5178$eZ1vL)
                 (if ((case-lambda
                        ((g$t$5179$eZ1vL)
                         (if g$t$5179$eZ1vL
                           g$t$5179$eZ1vL
                           (begin '#f (inexact? g$b$5177$eZ1vL)))))
                      (inexact? g$a$5176$eZ1vL))
                   (inexact g$r$5178$eZ1vL)
                   g$r$5178$eZ1vL)))
              (if (> g$a$5176$eZ1vL g$b$5177$eZ1vL)
                g$b$5177$eZ1vL
                g$a$5176$eZ1vL))))
          g$a$5174$eZ1vL
          g$rest$5175$eZ1vL))))
   (g$gcd$5106$eZ1vL
     g$gcd$5298$eZ1vL
     (case-lambda
       (g$nums$5180$eZ1vL
        ((case-lambda
           ((g$t$5181$eZ1vL)
            (if (g$memv$5056$eZ1vL g$t$5181$eZ1vL '(0))
              '0
              (if (g$memv$5056$eZ1vL g$t$5181$eZ1vL '(1))
                ((case-lambda
                   ((g$n$5182$eZ1vL)
                    (begin
                      (if (not (integer-valued? g$n$5182$eZ1vL))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$5182$eZ1vL)
                        (void))
                      (abs g$n$5182$eZ1vL))))
                 (car g$nums$5180$eZ1vL))
                (if (g$memv$5056$eZ1vL g$t$5181$eZ1vL '(2))
                  ((case-lambda
                     ((g$a$5183$eZ1vL g$b$5184$eZ1vL)
                      (begin
                        (if (not (integer-valued? g$a$5183$eZ1vL))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$5183$eZ1vL)
                          (void))
                        (if (not (integer-valued? g$b$5184$eZ1vL))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$5184$eZ1vL)
                          (void))
                        (if (g$zero?$5101$eZ1vL g$b$5184$eZ1vL)
                          (abs g$a$5183$eZ1vL)
                          (abs (g$gcd$5106$eZ1vL
                                 g$b$5184$eZ1vL
                                 (mod g$a$5183$eZ1vL g$b$5184$eZ1vL)))))))
                   (car g$nums$5180$eZ1vL)
                   (g$cadr$5072$eZ1vL g$nums$5180$eZ1vL))
                  (g$fold-left$5066$eZ1vL
                    g$gcd$5106$eZ1vL
                    (abs (car g$nums$5180$eZ1vL))
                    (cdr g$nums$5180$eZ1vL)))))))
         (length g$nums$5180$eZ1vL)))))
   (g$lcm$5107$eZ1vL
     g$lcm$5299$eZ1vL
     (case-lambda
       (g$nums$5185$eZ1vL
        ((case-lambda
           ((g$t$5186$eZ1vL)
            (if (g$memv$5056$eZ1vL g$t$5186$eZ1vL '(0))
              '1
              (if (g$memv$5056$eZ1vL g$t$5186$eZ1vL '(1))
                ((case-lambda
                   ((g$n$5187$eZ1vL)
                    (begin
                      (if (not (integer-valued? g$n$5187$eZ1vL))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$5187$eZ1vL)
                        (void))
                      (abs g$n$5187$eZ1vL))))
                 (car g$nums$5185$eZ1vL))
                (if (g$memv$5056$eZ1vL g$t$5186$eZ1vL '(2))
                  ((case-lambda
                     ((g$a$5188$eZ1vL g$b$5189$eZ1vL)
                      (begin
                        (if (not (integer-valued? g$a$5188$eZ1vL))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$5188$eZ1vL)
                          (void))
                        (if (not (integer-valued? g$b$5189$eZ1vL))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$5189$eZ1vL)
                          (void))
                        (if ((case-lambda
                               ((g$t$5190$eZ1vL)
                                (if g$t$5190$eZ1vL
                                  g$t$5190$eZ1vL
                                  (begin
                                    '#f
                                    (g$zero?$5101$eZ1vL g$b$5189$eZ1vL)))))
                             (g$zero?$5101$eZ1vL g$a$5188$eZ1vL))
                          '0
                          (abs (* (/ g$a$5188$eZ1vL
                                     (g$gcd$5106$eZ1vL
                                       g$a$5188$eZ1vL
                                       g$b$5189$eZ1vL))
                                  g$b$5189$eZ1vL))))))
                   (car g$nums$5185$eZ1vL)
                   (g$cadr$5072$eZ1vL g$nums$5185$eZ1vL))
                  (g$fold-left$5066$eZ1vL
                    g$lcm$5107$eZ1vL
                    (abs (car g$nums$5185$eZ1vL))
                    (cdr g$nums$5185$eZ1vL)))))))
         (length g$nums$5185$eZ1vL)))))
   (g$string=?$5114$eZ1vL
     g$string=?$5300$eZ1vL
     (case-lambda
       ((g$a$5191$eZ1vL g$b$5192$eZ1vL . g$rest$5193$eZ1vL)
        (begin
          (if (not (string? g$a$5191$eZ1vL))
            (assertion-violation 'string=? '"not a string" g$a$5191$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5194$eZ1vL)
               (begin
                 (if (not (string? g$x$5194$eZ1vL))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5194$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5195$eZ1vL)
                     (begin
                       (set! g$a$5191$eZ1vL g$x$5194$eZ1vL)
                       g$r$5195$eZ1vL)))
                  (= (string-compare g$a$5191$eZ1vL g$x$5194$eZ1vL) '0)))))
            (cons g$b$5192$eZ1vL g$rest$5193$eZ1vL))))))
   (g$string<?$5115$eZ1vL
     g$string<?$5301$eZ1vL
     (case-lambda
       ((g$a$5196$eZ1vL g$b$5197$eZ1vL . g$rest$5198$eZ1vL)
        (begin
          (if (not (string? g$a$5196$eZ1vL))
            (assertion-violation 'string<? '"not a string" g$a$5196$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5199$eZ1vL)
               (begin
                 (if (not (string? g$x$5199$eZ1vL))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5199$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5200$eZ1vL)
                     (begin
                       (set! g$a$5196$eZ1vL g$x$5199$eZ1vL)
                       g$r$5200$eZ1vL)))
                  (< (string-compare g$a$5196$eZ1vL g$x$5199$eZ1vL) '0)))))
            (cons g$b$5197$eZ1vL g$rest$5198$eZ1vL))))))
   (g$string>?$5116$eZ1vL
     g$string>?$5302$eZ1vL
     (case-lambda
       ((g$a$5201$eZ1vL g$b$5202$eZ1vL . g$rest$5203$eZ1vL)
        (begin
          (if (not (string? g$a$5201$eZ1vL))
            (assertion-violation 'string>? '"not a string" g$a$5201$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5204$eZ1vL)
               (begin
                 (if (not (string? g$x$5204$eZ1vL))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5204$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5205$eZ1vL)
                     (begin
                       (set! g$a$5201$eZ1vL g$x$5204$eZ1vL)
                       g$r$5205$eZ1vL)))
                  (> (string-compare g$a$5201$eZ1vL g$x$5204$eZ1vL) '0)))))
            (cons g$b$5202$eZ1vL g$rest$5203$eZ1vL))))))
   (g$string<=?$5117$eZ1vL
     g$string<=?$5303$eZ1vL
     (case-lambda
       ((g$a$5206$eZ1vL g$b$5207$eZ1vL . g$rest$5208$eZ1vL)
        (begin
          (if (not (string? g$a$5206$eZ1vL))
            (assertion-violation 'string<=? '"not a string" g$a$5206$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5209$eZ1vL)
               (begin
                 (if (not (string? g$x$5209$eZ1vL))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5209$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5210$eZ1vL)
                     (begin
                       (set! g$a$5206$eZ1vL g$x$5209$eZ1vL)
                       g$r$5210$eZ1vL)))
                  (<= (string-compare g$a$5206$eZ1vL g$x$5209$eZ1vL) '0)))))
            (cons g$b$5207$eZ1vL g$rest$5208$eZ1vL))))))
   (g$string>=?$5118$eZ1vL
     g$string>=?$5304$eZ1vL
     (case-lambda
       ((g$a$5211$eZ1vL g$b$5212$eZ1vL . g$rest$5213$eZ1vL)
        (begin
          (if (not (string? g$a$5211$eZ1vL))
            (assertion-violation 'string>=? '"not a string" g$a$5211$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5214$eZ1vL)
               (begin
                 (if (not (string? g$x$5214$eZ1vL))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5214$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5215$eZ1vL)
                     (begin
                       (set! g$a$5211$eZ1vL g$x$5214$eZ1vL)
                       g$r$5215$eZ1vL)))
                  (>= (string-compare g$a$5211$eZ1vL g$x$5214$eZ1vL) '0)))))
            (cons g$b$5212$eZ1vL g$rest$5213$eZ1vL))))))
   (g$symbol=?$5119$eZ1vL
     g$symbol=?$5305$eZ1vL
     (case-lambda
       ((g$a$5216$eZ1vL g$b$5217$eZ1vL . g$rest$5218$eZ1vL)
        (begin
          (if (not (symbol? g$a$5216$eZ1vL))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5216$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5219$eZ1vL)
               (begin
                 (if (not (symbol? g$x$5219$eZ1vL))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5219$eZ1vL)
                   (void))
                 (eq? g$a$5216$eZ1vL g$x$5219$eZ1vL))))
            (cons g$b$5217$eZ1vL g$rest$5218$eZ1vL))))))
   (g$boolean=?$5120$eZ1vL
     g$boolean=?$5306$eZ1vL
     (case-lambda
       ((g$a$5220$eZ1vL g$b$5221$eZ1vL . g$rest$5222$eZ1vL)
        (begin
          (if (not (boolean? g$a$5220$eZ1vL))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5220$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5223$eZ1vL)
               (begin
                 (if (not (boolean? g$x$5223$eZ1vL))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5223$eZ1vL)
                   (void))
                 (eq? g$a$5220$eZ1vL g$x$5223$eZ1vL))))
            (cons g$b$5221$eZ1vL g$rest$5222$eZ1vL))))))
   (g$char=?$5127$eZ1vL
     g$char=?$5307$eZ1vL
     (case-lambda
       ((g$a$5224$eZ1vL g$b$5225$eZ1vL . g$rest$5226$eZ1vL)
        (begin
          (if (not (char? g$a$5224$eZ1vL))
            (assertion-violation 'char=? '"not a char" g$a$5224$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5227$eZ1vL)
               (begin
                 (if (not (char? g$x$5227$eZ1vL))
                   (assertion-violation 'char=? '"not a char" g$x$5227$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5228$eZ1vL)
                     (begin
                       (set! g$a$5224$eZ1vL g$x$5227$eZ1vL)
                       g$r$5228$eZ1vL)))
                  (= (char->integer g$a$5224$eZ1vL)
                     (char->integer g$x$5227$eZ1vL))))))
            (cons g$b$5225$eZ1vL g$rest$5226$eZ1vL))))))
   (g$char<?$5128$eZ1vL
     g$char<?$5308$eZ1vL
     (case-lambda
       ((g$a$5229$eZ1vL g$b$5230$eZ1vL . g$rest$5231$eZ1vL)
        (begin
          (if (not (char? g$a$5229$eZ1vL))
            (assertion-violation 'char<? '"not a char" g$a$5229$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5232$eZ1vL)
               (begin
                 (if (not (char? g$x$5232$eZ1vL))
                   (assertion-violation 'char<? '"not a char" g$x$5232$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5233$eZ1vL)
                     (begin
                       (set! g$a$5229$eZ1vL g$x$5232$eZ1vL)
                       g$r$5233$eZ1vL)))
                  (< (char->integer g$a$5229$eZ1vL)
                     (char->integer g$x$5232$eZ1vL))))))
            (cons g$b$5230$eZ1vL g$rest$5231$eZ1vL))))))
   (g$char>?$5129$eZ1vL
     g$char>?$5309$eZ1vL
     (case-lambda
       ((g$a$5234$eZ1vL g$b$5235$eZ1vL . g$rest$5236$eZ1vL)
        (begin
          (if (not (char? g$a$5234$eZ1vL))
            (assertion-violation 'char>? '"not a char" g$a$5234$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5237$eZ1vL)
               (begin
                 (if (not (char? g$x$5237$eZ1vL))
                   (assertion-violation 'char>? '"not a char" g$x$5237$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5238$eZ1vL)
                     (begin
                       (set! g$a$5234$eZ1vL g$x$5237$eZ1vL)
                       g$r$5238$eZ1vL)))
                  (> (char->integer g$a$5234$eZ1vL)
                     (char->integer g$x$5237$eZ1vL))))))
            (cons g$b$5235$eZ1vL g$rest$5236$eZ1vL))))))
   (g$char<=?$5130$eZ1vL
     g$char<=?$5310$eZ1vL
     (case-lambda
       ((g$a$5239$eZ1vL g$b$5240$eZ1vL . g$rest$5241$eZ1vL)
        (begin
          (if (not (char? g$a$5239$eZ1vL))
            (assertion-violation 'char<=? '"not a char" g$a$5239$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5242$eZ1vL)
               (begin
                 (if (not (char? g$x$5242$eZ1vL))
                   (assertion-violation 'char<=? '"not a char" g$x$5242$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5243$eZ1vL)
                     (begin
                       (set! g$a$5239$eZ1vL g$x$5242$eZ1vL)
                       g$r$5243$eZ1vL)))
                  (<= (char->integer g$a$5239$eZ1vL)
                      (char->integer g$x$5242$eZ1vL))))))
            (cons g$b$5240$eZ1vL g$rest$5241$eZ1vL))))))
   (g$char>=?$5131$eZ1vL
     g$char>=?$5311$eZ1vL
     (case-lambda
       ((g$a$5244$eZ1vL g$b$5245$eZ1vL . g$rest$5246$eZ1vL)
        (begin
          (if (not (char? g$a$5244$eZ1vL))
            (assertion-violation 'char>=? '"not a char" g$a$5244$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5247$eZ1vL)
               (begin
                 (if (not (char? g$x$5247$eZ1vL))
                   (assertion-violation 'char>=? '"not a char" g$x$5247$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5248$eZ1vL)
                     (begin
                       (set! g$a$5244$eZ1vL g$x$5247$eZ1vL)
                       g$r$5248$eZ1vL)))
                  (>= (char->integer g$a$5244$eZ1vL)
                      (char->integer g$x$5247$eZ1vL))))))
            (cons g$b$5245$eZ1vL g$rest$5246$eZ1vL))))))
   (g$rationalize$5132$eZ1vL
     g$rationalize$5312$eZ1vL
     (case-lambda
       ((g$x$5249$eZ1vL g$e$5250$eZ1vL)
        (if (if (infinite? g$x$5249$eZ1vL)
              (begin '#f (infinite? g$e$5250$eZ1vL))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5251$eZ1vL)
              (if (if (exact? g$x$5249$eZ1vL)
                    (begin '#f (exact? g$e$5250$eZ1vL))
                    '#f)
                g$r$5251$eZ1vL
                (inexact g$r$5251$eZ1vL))))
           (apply
             /
             (g$find-ratio$5133$eZ1vL g$x$5249$eZ1vL g$e$5250$eZ1vL)))))))
   (g$find-ratio$5133$eZ1vL
     g$find-ratio$5313$eZ1vL
     (case-lambda
       ((g$x$5252$eZ1vL g$e$5253$eZ1vL)
        (g$find-ratio-between$5134$eZ1vL
          (- g$x$5252$eZ1vL g$e$5253$eZ1vL)
          (+ g$x$5252$eZ1vL g$e$5253$eZ1vL)))))
   (g$find-ratio-between$5134$eZ1vL
     g$find-ratio-between$5314$eZ1vL
     (case-lambda
       ((g$x$5254$eZ1vL g$y$5255$eZ1vL)
        (letrec* ((g$sr$5256$eZ1vL
                    (case-lambda
                      ((g$x$5258$eZ1vL g$y$5259$eZ1vL)
                       ((case-lambda
                          ((g$fx$5260$eZ1vL g$fy$5261$eZ1vL)
                           (if (>= g$fx$5260$eZ1vL g$x$5258$eZ1vL)
                             (list g$fx$5260$eZ1vL '1)
                             (if (= g$fx$5260$eZ1vL g$fy$5261$eZ1vL)
                               ((case-lambda
                                  ((g$rat$5262$eZ1vL)
                                   (list
                                     (+ (g$cadr$5072$eZ1vL g$rat$5262$eZ1vL)
                                        (* g$fx$5260$eZ1vL
                                           (car g$rat$5262$eZ1vL)))
                                     (car g$rat$5262$eZ1vL))))
                                (g$sr$5256$eZ1vL
                                  (/ (- g$y$5259$eZ1vL g$fy$5261$eZ1vL))
                                  (/ (- g$x$5258$eZ1vL g$fx$5260$eZ1vL))))
                               (list (+ '1 g$fx$5260$eZ1vL) '1)))))
                        (exact (floor g$x$5258$eZ1vL))
                        (exact (floor g$y$5259$eZ1vL)))))))
          (if (< g$y$5255$eZ1vL g$x$5254$eZ1vL)
            (g$find-ratio-between$5134$eZ1vL g$y$5255$eZ1vL g$x$5254$eZ1vL)
            (if (>= g$x$5254$eZ1vL g$y$5255$eZ1vL)
              (list g$x$5254$eZ1vL '1)
              (if (g$positive?$5099$eZ1vL g$x$5254$eZ1vL)
                (g$sr$5256$eZ1vL g$x$5254$eZ1vL g$y$5255$eZ1vL)
                (if (g$negative?$5100$eZ1vL g$y$5255$eZ1vL)
                  ((case-lambda
                     ((g$rat$5257$eZ1vL)
                      (list
                        (- (car g$rat$5257$eZ1vL))
                        (g$cadr$5072$eZ1vL g$rat$5257$eZ1vL))))
                   (g$sr$5256$eZ1vL (- g$y$5255$eZ1vL) (- g$x$5254$eZ1vL)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5503$eZ1vL g$using$5536$eZ1vL (clr-using-internal 'system))
   (g$using$5505$eZ1vL
     g$using$5537$eZ1vL
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5506$eZ1vL
     g$make-eq-hashtable$5538$eZ1vL
     (case-lambda
       (() (g$make-eq-hashtable$5506$eZ1vL '32))
       ((g$k$5515$eZ1vL)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5515$eZ1vL)))))
   (g$make-eqv-hashtable$5507$eZ1vL
     g$make-eqv-hashtable$5539$eZ1vL
     (case-lambda
       (() (g$make-eqv-hashtable$5507$eZ1vL '32))
       ((g$k$5516$eZ1vL) (make-hashtable eqv-hash eqv? g$k$5516$eZ1vL))))
   (g$hashtable-size$5508$eZ1vL
     g$hashtable-size$5540$eZ1vL
     (case-lambda
       ((g$ht$5517$eZ1vL)
        (clr-call-internal 'hashtable 'get_count g$ht$5517$eZ1vL))))
   (g$hashtable-ref$5509$eZ1vL
     g$hashtable-ref$5541$eZ1vL
     (case-lambda
       ((g$ht$5518$eZ1vL g$key$5519$eZ1vL g$default$5520$eZ1vL)
        (letrec* ((g$r$5521$eZ1vL
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5518$eZ1vL
                      g$key$5519$eZ1vL)))
          (if (not (null? g$r$5521$eZ1vL))
            g$r$5521$eZ1vL
            g$default$5520$eZ1vL)))))
   (g$hashtable-set!$5510$eZ1vL
     g$hashtable-set!$5542$eZ1vL
     (case-lambda
       ((g$ht$5522$eZ1vL g$key$5523$eZ1vL g$obj$5524$eZ1vL)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5522$eZ1vL
          g$key$5523$eZ1vL
          g$obj$5524$eZ1vL))))
   (g$hashtable-delete!$5511$eZ1vL
     g$hashtable-delete!$5543$eZ1vL
     (case-lambda
       ((g$ht$5525$eZ1vL g$key$5526$eZ1vL)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5525$eZ1vL
          g$key$5526$eZ1vL))))
   (g$hashtable-contains?$5512$eZ1vL
     g$hashtable-contains?$5544$eZ1vL
     (case-lambda
       ((g$ht$5527$eZ1vL g$key$5528$eZ1vL)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5527$eZ1vL
          g$key$5528$eZ1vL))))
   (g$hashtable-update!$5513$eZ1vL
     g$hashtable-update!$5545$eZ1vL
     (case-lambda
       ((g$ht$5529$eZ1vL
          g$key$5530$eZ1vL
          g$proc$5531$eZ1vL
          g$default$5532$eZ1vL)
        (g$hashtable-set!$5510$eZ1vL
          g$ht$5529$eZ1vL
          g$key$5530$eZ1vL
          (g$proc$5531$eZ1vL
            (g$hashtable-ref$5509$eZ1vL
              g$ht$5529$eZ1vL
              g$key$5530$eZ1vL
              g$default$5532$eZ1vL))))))
   (g$hashtable-clear!$5514$eZ1vL
     g$hashtable-clear!$5546$eZ1vL
     (case-lambda
       ((g$ht$5533$eZ1vL) (g$hashtable-clear!$5514$eZ1vL g$ht$5533$eZ1vL '32))
       ((g$ht$5534$eZ1vL g$k$5535$eZ1vL)
        (clr-call-internal 'hashtable 'clear g$ht$5534$eZ1vL)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5548$eZ1vL g$using$5555$eZ1vL (clr-using-internal 'system.io))
   (g$file-exists?$5549$eZ1vL
     g$file-exists?$5556$eZ1vL
     (case-lambda
       ((g$fn$5552$eZ1vL)
        (clr-call-internal 'file 'exists '() g$fn$5552$eZ1vL))))
   (g$delete-file$5550$eZ1vL
     g$delete-file$5557$eZ1vL
     (case-lambda
       ((g$fn$5553$eZ1vL)
        (clr-call-internal 'file 'delete '() g$fn$5553$eZ1vL))))
   (g$get-directory-name$5551$eZ1vL
     g$get-directory-name$5558$eZ1vL
     (case-lambda
       ((g$path$5554$eZ1vL)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5554$eZ1vL)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5559$eZ1vL
     g$native-endianness$5670$eZ1vL
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5560$eZ1vL
     g$bytevector-u16-ref$5671$eZ1vL
     (case-lambda
       ((g$bytevector$5588$eZ1vL g$k$5589$eZ1vL g$endianness$5590$eZ1vL)
        (bytevector-uint-ref
          g$bytevector$5588$eZ1vL
          g$k$5589$eZ1vL
          g$endianness$5590$eZ1vL
          '2))))
   (g$bytevector-s16-ref$5561$eZ1vL
     g$bytevector-s16-ref$5672$eZ1vL
     (case-lambda
       ((g$bytevector$5591$eZ1vL g$k$5592$eZ1vL g$endianness$5593$eZ1vL)
        (bytevector-sint-ref
          g$bytevector$5591$eZ1vL
          g$k$5592$eZ1vL
          g$endianness$5593$eZ1vL
          '2))))
   (g$bytevector-u16-native-ref$5562$eZ1vL
     g$bytevector-u16-native-ref$5673$eZ1vL
     (case-lambda
       ((g$bytevector$5594$eZ1vL g$k$5595$eZ1vL)
        (bytevector-uint-ref
          g$bytevector$5594$eZ1vL
          g$k$5595$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '2))))
   (g$bytevector-s16-native-ref$5563$eZ1vL
     g$bytevector-s16-native-ref$5674$eZ1vL
     (case-lambda
       ((g$bytevector$5596$eZ1vL g$k$5597$eZ1vL)
        (bytevector-sint-ref
          g$bytevector$5596$eZ1vL
          g$k$5597$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '2))))
   (g$bytevector-u16-set!$5564$eZ1vL
     g$bytevector-u16-set!$5675$eZ1vL
     (case-lambda
       ((g$bytevector$5598$eZ1vL
          g$k$5599$eZ1vL
          g$n$5600$eZ1vL
          g$endianness$5601$eZ1vL)
        (bytevector-uint-set!
          g$bytevector$5598$eZ1vL
          g$k$5599$eZ1vL
          g$n$5600$eZ1vL
          g$endianness$5601$eZ1vL
          '2))))
   (g$bytevector-s16-set!$5565$eZ1vL
     g$bytevector-s16-set!$5676$eZ1vL
     (case-lambda
       ((g$bytevector$5602$eZ1vL
          g$k$5603$eZ1vL
          g$n$5604$eZ1vL
          g$endianness$5605$eZ1vL)
        (bytevector-sint-set!
          g$bytevector$5602$eZ1vL
          g$k$5603$eZ1vL
          g$n$5604$eZ1vL
          g$endianness$5605$eZ1vL
          '2))))
   (g$bytevector-u16-native-set!$5566$eZ1vL
     g$bytevector-u16-native-set!$5677$eZ1vL
     (case-lambda
       ((g$bytevector$5606$eZ1vL g$k$5607$eZ1vL g$n$5608$eZ1vL)
        (bytevector-uint-set!
          g$bytevector$5606$eZ1vL
          g$k$5607$eZ1vL
          g$n$5608$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '2))))
   (g$bytevector-s16-native-set!$5567$eZ1vL
     g$bytevector-s16-native-set!$5678$eZ1vL
     (case-lambda
       ((g$bytevector$5609$eZ1vL g$k$5610$eZ1vL g$n$5611$eZ1vL)
        (bytevector-sint-set!
          g$bytevector$5609$eZ1vL
          g$k$5610$eZ1vL
          g$n$5611$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '2))))
   (g$bytevector-u32-ref$5568$eZ1vL
     g$bytevector-u32-ref$5679$eZ1vL
     (case-lambda
       ((g$bytevector$5612$eZ1vL g$k$5613$eZ1vL g$endianness$5614$eZ1vL)
        (bytevector-uint-ref
          g$bytevector$5612$eZ1vL
          g$k$5613$eZ1vL
          g$endianness$5614$eZ1vL
          '4))))
   (g$bytevector-s32-ref$5569$eZ1vL
     g$bytevector-s32-ref$5680$eZ1vL
     (case-lambda
       ((g$bytevector$5615$eZ1vL g$k$5616$eZ1vL g$endianness$5617$eZ1vL)
        (bytevector-sint-ref
          g$bytevector$5615$eZ1vL
          g$k$5616$eZ1vL
          g$endianness$5617$eZ1vL
          '4))))
   (g$bytevector-u32-native-ref$5570$eZ1vL
     g$bytevector-u32-native-ref$5681$eZ1vL
     (case-lambda
       ((g$bytevector$5618$eZ1vL g$k$5619$eZ1vL)
        (bytevector-uint-ref
          g$bytevector$5618$eZ1vL
          g$k$5619$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '4))))
   (g$bytevector-s32-native-ref$5571$eZ1vL
     g$bytevector-s32-native-ref$5682$eZ1vL
     (case-lambda
       ((g$bytevector$5620$eZ1vL g$k$5621$eZ1vL)
        (bytevector-sint-ref
          g$bytevector$5620$eZ1vL
          g$k$5621$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '4))))
   (g$bytevector-u32-set!$5572$eZ1vL
     g$bytevector-u32-set!$5683$eZ1vL
     (case-lambda
       ((g$bytevector$5622$eZ1vL
          g$k$5623$eZ1vL
          g$n$5624$eZ1vL
          g$endianness$5625$eZ1vL)
        (bytevector-uint-set!
          g$bytevector$5622$eZ1vL
          g$k$5623$eZ1vL
          g$n$5624$eZ1vL
          g$endianness$5625$eZ1vL
          '4))))
   (g$bytevector-s32-set!$5573$eZ1vL
     g$bytevector-s32-set!$5684$eZ1vL
     (case-lambda
       ((g$bytevector$5626$eZ1vL
          g$k$5627$eZ1vL
          g$n$5628$eZ1vL
          g$endianness$5629$eZ1vL)
        (bytevector-sint-set!
          g$bytevector$5626$eZ1vL
          g$k$5627$eZ1vL
          g$n$5628$eZ1vL
          g$endianness$5629$eZ1vL
          '4))))
   (g$bytevector-u32-native-set!$5574$eZ1vL
     g$bytevector-u32-native-set!$5685$eZ1vL
     (case-lambda
       ((g$bytevector$5630$eZ1vL g$k$5631$eZ1vL g$n$5632$eZ1vL)
        (bytevector-uint-set!
          g$bytevector$5630$eZ1vL
          g$k$5631$eZ1vL
          g$n$5632$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '4))))
   (g$bytevector-s32-native-set!$5575$eZ1vL
     g$bytevector-s32-native-set!$5686$eZ1vL
     (case-lambda
       ((g$bytevector$5633$eZ1vL g$k$5634$eZ1vL g$n$5635$eZ1vL)
        (bytevector-sint-set!
          g$bytevector$5633$eZ1vL
          g$k$5634$eZ1vL
          g$n$5635$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '4))))
   (g$bytevector-u64-ref$5576$eZ1vL
     g$bytevector-u64-ref$5687$eZ1vL
     (case-lambda
       ((g$bytevector$5636$eZ1vL g$k$5637$eZ1vL g$endianness$5638$eZ1vL)
        (bytevector-uint-ref
          g$bytevector$5636$eZ1vL
          g$k$5637$eZ1vL
          g$endianness$5638$eZ1vL
          '8))))
   (g$bytevector-s64-ref$5577$eZ1vL
     g$bytevector-s64-ref$5688$eZ1vL
     (case-lambda
       ((g$bytevector$5639$eZ1vL g$k$5640$eZ1vL g$endianness$5641$eZ1vL)
        (bytevector-sint-ref
          g$bytevector$5639$eZ1vL
          g$k$5640$eZ1vL
          g$endianness$5641$eZ1vL
          '8))))
   (g$bytevector-u64-native-ref$5578$eZ1vL
     g$bytevector-u64-native-ref$5689$eZ1vL
     (case-lambda
       ((g$bytevector$5642$eZ1vL g$k$5643$eZ1vL)
        (bytevector-uint-ref
          g$bytevector$5642$eZ1vL
          g$k$5643$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '8))))
   (g$bytevector-s64-native-ref$5579$eZ1vL
     g$bytevector-s64-native-ref$5690$eZ1vL
     (case-lambda
       ((g$bytevector$5644$eZ1vL g$k$5645$eZ1vL)
        (bytevector-sint-ref
          g$bytevector$5644$eZ1vL
          g$k$5645$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '8))))
   (g$bytevector-u64-set!$5580$eZ1vL
     g$bytevector-u64-set!$5691$eZ1vL
     (case-lambda
       ((g$bytevector$5646$eZ1vL
          g$k$5647$eZ1vL
          g$n$5648$eZ1vL
          g$endianness$5649$eZ1vL)
        (bytevector-uint-set!
          g$bytevector$5646$eZ1vL
          g$k$5647$eZ1vL
          g$n$5648$eZ1vL
          g$endianness$5649$eZ1vL
          '8))))
   (g$bytevector-s64-set!$5581$eZ1vL
     g$bytevector-s64-set!$5692$eZ1vL
     (case-lambda
       ((g$bytevector$5650$eZ1vL
          g$k$5651$eZ1vL
          g$n$5652$eZ1vL
          g$endianness$5653$eZ1vL)
        (bytevector-sint-set!
          g$bytevector$5650$eZ1vL
          g$k$5651$eZ1vL
          g$n$5652$eZ1vL
          g$endianness$5653$eZ1vL
          '8))))
   (g$bytevector-u64-native-set!$5582$eZ1vL
     g$bytevector-u64-native-set!$5693$eZ1vL
     (case-lambda
       ((g$bytevector$5654$eZ1vL g$k$5655$eZ1vL g$n$5656$eZ1vL)
        (bytevector-uint-set!
          g$bytevector$5654$eZ1vL
          g$k$5655$eZ1vL
          g$n$5656$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '8))))
   (g$bytevector-s64-native-set!$5583$eZ1vL
     g$bytevector-s64-native-set!$5694$eZ1vL
     (case-lambda
       ((g$bytevector$5657$eZ1vL g$k$5658$eZ1vL g$n$5659$eZ1vL)
        (bytevector-sint-set!
          g$bytevector$5657$eZ1vL
          g$k$5658$eZ1vL
          g$n$5659$eZ1vL
          (g$native-endianness$5559$eZ1vL)
          '8))))
   (g$bytevector-ieee-single-native-ref$5584$eZ1vL
     g$bytevector-ieee-single-native-ref$5695$eZ1vL
     (case-lambda
       ((g$bytevector$5660$eZ1vL g$k$5661$eZ1vL)
        (if (not (g$zero?$5293$eZ1vL (mod g$k$5661$eZ1vL '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5661$eZ1vL)
          (bytevector-ieee-single-ref
            g$bytevector$5660$eZ1vL
            g$k$5661$eZ1vL
            (g$native-endianness$5559$eZ1vL))))))
   (g$bytevector-ieee-double-native-ref$5585$eZ1vL
     g$bytevector-ieee-double-native-ref$5696$eZ1vL
     (case-lambda
       ((g$bytevector$5662$eZ1vL g$k$5663$eZ1vL)
        (if (not (g$zero?$5293$eZ1vL (mod g$k$5663$eZ1vL '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5663$eZ1vL)
          (bytevector-ieee-double-ref
            g$bytevector$5662$eZ1vL
            g$k$5663$eZ1vL
            (g$native-endianness$5559$eZ1vL))))))
   (g$bytevector-ieee-single-native-set!$5586$eZ1vL
     g$bytevector-ieee-single-native-set!$5697$eZ1vL
     (case-lambda
       ((g$bytevector$5664$eZ1vL g$k$5665$eZ1vL g$x$5666$eZ1vL)
        (if (not (g$zero?$5293$eZ1vL (mod g$k$5665$eZ1vL '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5665$eZ1vL)
          (bytevector-ieee-single-set!
            g$bytevector$5664$eZ1vL
            g$k$5665$eZ1vL
            g$x$5666$eZ1vL
            (g$native-endianness$5559$eZ1vL))))))
   (g$bytevector-ieee-double-native-set!$5587$eZ1vL
     g$bytevector-ieee-double-native-set!$5698$eZ1vL
     (case-lambda
       ((g$bytevector$5667$eZ1vL g$k$5668$eZ1vL g$x$5669$eZ1vL)
        (if (not (g$zero?$5293$eZ1vL (mod g$k$5668$eZ1vL '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5668$eZ1vL)
          (bytevector-ieee-double-set!
            g$bytevector$5667$eZ1vL
            g$k$5668$eZ1vL
            g$x$5669$eZ1vL
            (g$native-endianness$5559$eZ1vL)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6690$5699$eZ1vL
     g$6690$5794$eZ1vL
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6693$eZ1vL
       '#f
       '#f
       '#()))
   (g$6692$5700$eZ1vL g$6692$5795$eZ1vL '#f)
   (g$6691$5701$eZ1vL
     g$6691$5796$eZ1vL
     (make-record-constructor-descriptor
       g$6690$5699$eZ1vL
       '#f
       g$6692$5700$eZ1vL))
   (g$&condition?$5702$eZ1vL
     g$&condition?$5797$eZ1vL
     (record-predicate g$6690$5699$eZ1vL))
   (g$make-&condition$5703$eZ1vL
     g$make-&condition$5798$eZ1vL
     (record-constructor g$6691$5701$eZ1vL))
   (g$&condition-rtd$5704$eZ1vL
     g$&condition-rtd$5799$eZ1vL
     g$6690$5699$eZ1vL)
   (g$&condition-rcd$5705$eZ1vL
     g$&condition-rcd$5800$eZ1vL
     g$6691$5701$eZ1vL)
   (g$6706$5706$eZ1vL
     g$6706$5801$eZ1vL
     (make-record-type-descriptor
       '&message
       g$6690$5699$eZ1vL
       'g$6709$eZ1vL
       '#f
       '#f
       '#((immutable message))))
   (g$6708$5707$eZ1vL g$6708$5802$eZ1vL '#f)
   (g$6707$5708$eZ1vL
     g$6707$5803$eZ1vL
     (make-record-constructor-descriptor
       g$6706$5706$eZ1vL
       g$6691$5701$eZ1vL
       g$6708$5707$eZ1vL))
   (g$6705$5709$eZ1vL
     g$6705$5804$eZ1vL
     (record-predicate g$6706$5706$eZ1vL))
   (g$make-message-condition$5710$eZ1vL
     g$make-message-condition$5805$eZ1vL
     (record-constructor g$6707$5708$eZ1vL))
   (g$6704$5711$eZ1vL
     g$6704$5806$eZ1vL
     (record-accessor g$6706$5706$eZ1vL '0))
   (g$message-condition?$5712$eZ1vL
     g$message-condition?$5807$eZ1vL
     (condition-predicate g$6706$5706$eZ1vL))
   (g$condition-message$5713$eZ1vL
     g$condition-message$5808$eZ1vL
     (condition-accessor g$6706$5706$eZ1vL g$6704$5711$eZ1vL))
   (g$6722$5714$eZ1vL
     g$6722$5809$eZ1vL
     (make-record-type-descriptor
       '&warning
       g$6690$5699$eZ1vL
       'g$6725$eZ1vL
       '#f
       '#f
       '#()))
   (g$6724$5715$eZ1vL g$6724$5810$eZ1vL '#f)
   (g$6723$5716$eZ1vL
     g$6723$5811$eZ1vL
     (make-record-constructor-descriptor
       g$6722$5714$eZ1vL
       g$6691$5701$eZ1vL
       g$6724$5715$eZ1vL))
   (g$6721$5717$eZ1vL
     g$6721$5812$eZ1vL
     (record-predicate g$6722$5714$eZ1vL))
   (g$make-warning$5718$eZ1vL
     g$make-warning$5813$eZ1vL
     (record-constructor g$6723$5716$eZ1vL))
   (g$warning?$5719$eZ1vL
     g$warning?$5814$eZ1vL
     (condition-predicate g$6722$5714$eZ1vL))
   (g$6736$5720$eZ1vL
     g$6736$5815$eZ1vL
     (make-record-type-descriptor
       '&serious
       g$6690$5699$eZ1vL
       'g$6739$eZ1vL
       '#f
       '#f
       '#()))
   (g$6738$5721$eZ1vL g$6738$5816$eZ1vL '#f)
   (g$6737$5722$eZ1vL
     g$6737$5817$eZ1vL
     (make-record-constructor-descriptor
       g$6736$5720$eZ1vL
       g$6691$5701$eZ1vL
       g$6738$5721$eZ1vL))
   (g$6735$5723$eZ1vL
     g$6735$5818$eZ1vL
     (record-predicate g$6736$5720$eZ1vL))
   (g$make-serious-condition$5724$eZ1vL
     g$make-serious-condition$5819$eZ1vL
     (record-constructor g$6737$5722$eZ1vL))
   (g$serious-condition?$5725$eZ1vL
     g$serious-condition?$5820$eZ1vL
     (condition-predicate g$6736$5720$eZ1vL))
   (g$6750$5726$eZ1vL
     g$6750$5821$eZ1vL
     (make-record-type-descriptor
       '&error
       g$6736$5720$eZ1vL
       'g$6753$eZ1vL
       '#f
       '#f
       '#()))
   (g$6752$5727$eZ1vL g$6752$5822$eZ1vL '#f)
   (g$6751$5728$eZ1vL
     g$6751$5823$eZ1vL
     (make-record-constructor-descriptor
       g$6750$5726$eZ1vL
       g$6737$5722$eZ1vL
       g$6752$5727$eZ1vL))
   (g$6749$5729$eZ1vL
     g$6749$5824$eZ1vL
     (record-predicate g$6750$5726$eZ1vL))
   (g$make-error$5730$eZ1vL
     g$make-error$5825$eZ1vL
     (record-constructor g$6751$5728$eZ1vL))
   (g$error?$5731$eZ1vL
     g$error?$5826$eZ1vL
     (condition-predicate g$6750$5726$eZ1vL))
   (g$6764$5732$eZ1vL
     g$6764$5827$eZ1vL
     (make-record-type-descriptor
       '&violation
       g$6736$5720$eZ1vL
       'g$6767$eZ1vL
       '#f
       '#f
       '#()))
   (g$6766$5733$eZ1vL g$6766$5828$eZ1vL '#f)
   (g$6765$5734$eZ1vL
     g$6765$5829$eZ1vL
     (make-record-constructor-descriptor
       g$6764$5732$eZ1vL
       g$6737$5722$eZ1vL
       g$6766$5733$eZ1vL))
   (g$6763$5735$eZ1vL
     g$6763$5830$eZ1vL
     (record-predicate g$6764$5732$eZ1vL))
   (g$make-violation$5736$eZ1vL
     g$make-violation$5831$eZ1vL
     (record-constructor g$6765$5734$eZ1vL))
   (g$violation?$5737$eZ1vL
     g$violation?$5832$eZ1vL
     (condition-predicate g$6764$5732$eZ1vL))
   (g$6778$5738$eZ1vL
     g$6778$5833$eZ1vL
     (make-record-type-descriptor
       '&assertion
       g$6764$5732$eZ1vL
       'g$6781$eZ1vL
       '#f
       '#f
       '#()))
   (g$6780$5739$eZ1vL g$6780$5834$eZ1vL '#f)
   (g$6779$5740$eZ1vL
     g$6779$5835$eZ1vL
     (make-record-constructor-descriptor
       g$6778$5738$eZ1vL
       g$6765$5734$eZ1vL
       g$6780$5739$eZ1vL))
   (g$6777$5741$eZ1vL
     g$6777$5836$eZ1vL
     (record-predicate g$6778$5738$eZ1vL))
   (g$make-assertion-violation$5742$eZ1vL
     g$make-assertion-violation$5837$eZ1vL
     (record-constructor g$6779$5740$eZ1vL))
   (g$assertion-violation?$5743$eZ1vL
     g$assertion-violation?$5838$eZ1vL
     (condition-predicate g$6778$5738$eZ1vL))
   (g$6793$5744$eZ1vL
     g$6793$5839$eZ1vL
     (make-record-type-descriptor
       '&irritants
       g$6690$5699$eZ1vL
       'g$6796$eZ1vL
       '#f
       '#f
       '#((immutable irritants))))
   (g$6795$5745$eZ1vL g$6795$5840$eZ1vL '#f)
   (g$6794$5746$eZ1vL
     g$6794$5841$eZ1vL
     (make-record-constructor-descriptor
       g$6793$5744$eZ1vL
       g$6691$5701$eZ1vL
       g$6795$5745$eZ1vL))
   (g$6792$5747$eZ1vL
     g$6792$5842$eZ1vL
     (record-predicate g$6793$5744$eZ1vL))
   (g$make-irritants-condition$5748$eZ1vL
     g$make-irritants-condition$5843$eZ1vL
     (record-constructor g$6794$5746$eZ1vL))
   (g$6791$5749$eZ1vL
     g$6791$5844$eZ1vL
     (record-accessor g$6793$5744$eZ1vL '0))
   (g$irritants-condition?$5750$eZ1vL
     g$irritants-condition?$5845$eZ1vL
     (condition-predicate g$6793$5744$eZ1vL))
   (g$condition-irritants$5751$eZ1vL
     g$condition-irritants$5846$eZ1vL
     (condition-accessor g$6793$5744$eZ1vL g$6791$5749$eZ1vL))
   (g$6810$5752$eZ1vL
     g$6810$5847$eZ1vL
     (make-record-type-descriptor
       '&who
       g$6690$5699$eZ1vL
       'g$6813$eZ1vL
       '#f
       '#f
       '#((immutable who))))
   (g$6812$5753$eZ1vL g$6812$5848$eZ1vL '#f)
   (g$6811$5754$eZ1vL
     g$6811$5849$eZ1vL
     (make-record-constructor-descriptor
       g$6810$5752$eZ1vL
       g$6691$5701$eZ1vL
       g$6812$5753$eZ1vL))
   (g$6809$5755$eZ1vL
     g$6809$5850$eZ1vL
     (record-predicate g$6810$5752$eZ1vL))
   (g$make-who-condition$5756$eZ1vL
     g$make-who-condition$5851$eZ1vL
     (record-constructor g$6811$5754$eZ1vL))
   (g$6808$5757$eZ1vL
     g$6808$5852$eZ1vL
     (record-accessor g$6810$5752$eZ1vL '0))
   (g$who-condition?$5758$eZ1vL
     g$who-condition?$5853$eZ1vL
     (condition-predicate g$6810$5752$eZ1vL))
   (g$condition-who$5759$eZ1vL
     g$condition-who$5854$eZ1vL
     (condition-accessor g$6810$5752$eZ1vL g$6808$5757$eZ1vL))
   (g$6826$5760$eZ1vL
     g$6826$5855$eZ1vL
     (make-record-type-descriptor
       '&non-continuable
       g$6764$5732$eZ1vL
       'g$6829$eZ1vL
       '#f
       '#f
       '#()))
   (g$6828$5761$eZ1vL g$6828$5856$eZ1vL '#f)
   (g$6827$5762$eZ1vL
     g$6827$5857$eZ1vL
     (make-record-constructor-descriptor
       g$6826$5760$eZ1vL
       g$6765$5734$eZ1vL
       g$6828$5761$eZ1vL))
   (g$6825$5763$eZ1vL
     g$6825$5858$eZ1vL
     (record-predicate g$6826$5760$eZ1vL))
   (g$make-non-continuable-violation$5764$eZ1vL
     g$make-non-continuable-violation$5859$eZ1vL
     (record-constructor g$6827$5762$eZ1vL))
   (g$non-continuable-violation?$5765$eZ1vL
     g$non-continuable-violation?$5860$eZ1vL
     (condition-predicate g$6826$5760$eZ1vL))
   (g$6840$5766$eZ1vL
     g$6840$5861$eZ1vL
     (make-record-type-descriptor
       '&implementation-restriction
       g$6764$5732$eZ1vL
       'g$6843$eZ1vL
       '#f
       '#f
       '#()))
   (g$6842$5767$eZ1vL g$6842$5862$eZ1vL '#f)
   (g$6841$5768$eZ1vL
     g$6841$5863$eZ1vL
     (make-record-constructor-descriptor
       g$6840$5766$eZ1vL
       g$6765$5734$eZ1vL
       g$6842$5767$eZ1vL))
   (g$6839$5769$eZ1vL
     g$6839$5864$eZ1vL
     (record-predicate g$6840$5766$eZ1vL))
   (g$make-implementation-restriction-violation$5770$eZ1vL
     g$make-implementation-restriction-violation$5865$eZ1vL
     (record-constructor g$6841$5768$eZ1vL))
   (g$implementation-restriction-violation?$5771$eZ1vL
     g$implementation-restriction-violation?$5866$eZ1vL
     (condition-predicate g$6840$5766$eZ1vL))
   (g$6854$5772$eZ1vL
     g$6854$5867$eZ1vL
     (make-record-type-descriptor
       '&lexical
       g$6764$5732$eZ1vL
       'g$6857$eZ1vL
       '#f
       '#f
       '#()))
   (g$6856$5773$eZ1vL g$6856$5868$eZ1vL '#f)
   (g$6855$5774$eZ1vL
     g$6855$5869$eZ1vL
     (make-record-constructor-descriptor
       g$6854$5772$eZ1vL
       g$6765$5734$eZ1vL
       g$6856$5773$eZ1vL))
   (g$6853$5775$eZ1vL
     g$6853$5870$eZ1vL
     (record-predicate g$6854$5772$eZ1vL))
   (g$make-lexical-violation$5776$eZ1vL
     g$make-lexical-violation$5871$eZ1vL
     (record-constructor g$6855$5774$eZ1vL))
   (g$lexical-violation?$5777$eZ1vL
     g$lexical-violation?$5872$eZ1vL
     (condition-predicate g$6854$5772$eZ1vL))
   (g$6870$5778$eZ1vL
     g$6870$5873$eZ1vL
     (make-record-type-descriptor
       '&syntax
       g$6764$5732$eZ1vL
       'g$6873$eZ1vL
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6872$5779$eZ1vL g$6872$5874$eZ1vL '#f)
   (g$6871$5780$eZ1vL
     g$6871$5875$eZ1vL
     (make-record-constructor-descriptor
       g$6870$5778$eZ1vL
       g$6765$5734$eZ1vL
       g$6872$5779$eZ1vL))
   (g$6869$5781$eZ1vL
     g$6869$5876$eZ1vL
     (record-predicate g$6870$5778$eZ1vL))
   (g$make-syntax-violation$5782$eZ1vL
     g$make-syntax-violation$5877$eZ1vL
     (record-constructor g$6871$5780$eZ1vL))
   (g$6867$5783$eZ1vL
     g$6867$5878$eZ1vL
     (record-accessor g$6870$5778$eZ1vL '0))
   (g$6868$5784$eZ1vL
     g$6868$5879$eZ1vL
     (record-accessor g$6870$5778$eZ1vL '1))
   (g$syntax-violation?$5785$eZ1vL
     g$syntax-violation?$5880$eZ1vL
     (condition-predicate g$6870$5778$eZ1vL))
   (g$syntax-violation-form$5786$eZ1vL
     g$syntax-violation-form$5881$eZ1vL
     (condition-accessor g$6870$5778$eZ1vL g$6867$5783$eZ1vL))
   (g$syntax-violation-subform$5787$eZ1vL
     g$syntax-violation-subform$5882$eZ1vL
     (condition-accessor g$6870$5778$eZ1vL g$6868$5784$eZ1vL))
   (g$6888$5788$eZ1vL
     g$6888$5883$eZ1vL
     (make-record-type-descriptor
       '&undefined
       g$6764$5732$eZ1vL
       'g$6891$eZ1vL
       '#f
       '#f
       '#()))
   (g$6890$5789$eZ1vL g$6890$5884$eZ1vL '#f)
   (g$6889$5790$eZ1vL
     g$6889$5885$eZ1vL
     (make-record-constructor-descriptor
       g$6888$5788$eZ1vL
       g$6765$5734$eZ1vL
       g$6890$5789$eZ1vL))
   (g$6887$5791$eZ1vL
     g$6887$5886$eZ1vL
     (record-predicate g$6888$5788$eZ1vL))
   (g$make-undefined-violation$5792$eZ1vL
     g$make-undefined-violation$5887$eZ1vL
     (record-constructor g$6889$5790$eZ1vL))
   (g$undefined-violation?$5793$eZ1vL
     g$undefined-violation?$5888$eZ1vL
     (condition-predicate g$6888$5788$eZ1vL)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5889$eZ1vL
     g$append!$5895$eZ1vL
     (case-lambda
       ((g$a$5890$eZ1vL . g$b$5891$eZ1vL)
        (if (null? g$a$5890$eZ1vL)
          g$b$5891$eZ1vL
          (if (null? g$b$5891$eZ1vL)
            g$a$5890$eZ1vL
            (begin
              ((letrec ((g$f$5892$eZ1vL
                          (case-lambda
                            ((g$a$5893$eZ1vL)
                             ((case-lambda
                                ((g$n$5894$eZ1vL)
                                 (if (null? g$n$5894$eZ1vL)
                                   (set-cdr! g$a$5893$eZ1vL g$b$5891$eZ1vL)
                                   (g$f$5892$eZ1vL g$n$5894$eZ1vL))))
                              (cdr g$a$5893$eZ1vL))))))
                 g$f$5892$eZ1vL)
               g$a$5890$eZ1vL)
              g$a$5890$eZ1vL)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$5896$eZ1vL g$inexact->exact$5916$eZ1vL exact)
   (g$exact->inexact$5897$eZ1vL g$exact->inexact$5917$eZ1vL inexact)
   (g$sign$5898$eZ1vL
     g$sign$5918$eZ1vL
     (case-lambda
       ((g$n$5904$eZ1vL)
        (if (> g$n$5904$eZ1vL '0) '1 (if (< g$n$5904$eZ1vL '0) '-1 '0)))))
   (g$quotient$5899$eZ1vL
     g$quotient$5919$eZ1vL
     (case-lambda
       ((g$n1$5905$eZ1vL g$n2$5906$eZ1vL)
        (begin
          (if (not (integer-valued? g$n1$5905$eZ1vL))
            (assertion-violation 'quotient '"not an integer" g$n1$5905$eZ1vL)
            (void))
          (if (not (integer-valued? g$n2$5906$eZ1vL))
            (assertion-violation 'quotient '"not an integer" g$n2$5906$eZ1vL)
            (void))
          (* (g$sign$5898$eZ1vL g$n1$5905$eZ1vL)
             (g$sign$5898$eZ1vL g$n2$5906$eZ1vL)
             (div (abs g$n1$5905$eZ1vL) (abs g$n2$5906$eZ1vL)))))))
   (g$remainder$5900$eZ1vL
     g$remainder$5920$eZ1vL
     (case-lambda
       ((g$n1$5907$eZ1vL g$n2$5908$eZ1vL)
        (begin
          (if (not (integer-valued? g$n1$5907$eZ1vL))
            (assertion-violation 'remainder '"not an integer" g$n1$5907$eZ1vL)
            (void))
          (if (not (integer-valued? g$n2$5908$eZ1vL))
            (assertion-violation 'remainder '"not an integer" g$n2$5908$eZ1vL)
            (void))
          (* (g$sign$5898$eZ1vL g$n1$5907$eZ1vL)
             (mod (abs g$n1$5907$eZ1vL) (abs g$n2$5908$eZ1vL)))))))
   (g$modulo$5901$eZ1vL
     g$modulo$5921$eZ1vL
     (case-lambda
       ((g$n1$5909$eZ1vL g$n2$5910$eZ1vL)
        (begin
          (if (not (integer-valued? g$n1$5909$eZ1vL))
            (assertion-violation 'modulo '"not an integer" g$n1$5909$eZ1vL)
            (void))
          (if (not (integer-valued? g$n2$5910$eZ1vL))
            (assertion-violation 'modulo '"not an integer" g$n2$5910$eZ1vL)
            (void))
          (* (g$sign$5898$eZ1vL g$n2$5910$eZ1vL)
             (mod (* (g$sign$5898$eZ1vL g$n2$5910$eZ1vL) g$n1$5909$eZ1vL)
                  (abs g$n2$5910$eZ1vL)))))))
   (g$make-promise$5902$eZ1vL
     g$make-promise$5922$eZ1vL
     (case-lambda
       ((g$proc$5911$eZ1vL)
        ((case-lambda
           ((g$result-ready?$5912$eZ1vL g$result$5913$eZ1vL)
            (case-lambda
              (()
               (if g$result-ready?$5912$eZ1vL
                 g$result$5913$eZ1vL
                 ((case-lambda
                    ((g$x$5914$eZ1vL)
                     (if g$result-ready?$5912$eZ1vL
                       g$result$5913$eZ1vL
                       (begin
                         (set! g$result-ready?$5912$eZ1vL '#t)
                         (set! g$result$5913$eZ1vL g$x$5914$eZ1vL)
                         g$result$5913$eZ1vL))))
                  (g$proc$5911$eZ1vL)))))))
         '#f
         '#f))))
   (g$force$5903$eZ1vL
     g$force$5923$eZ1vL
     (case-lambda ((g$object$5915$eZ1vL) (g$object$5915$eZ1vL)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5924$eZ1vL
     g$split$5949$eZ1vL
     (case-lambda
       ((g$ls$5928$eZ1vL)
        ((letrec ((g$loop$5929$eZ1vL
                    (case-lambda
                      ((g$rest$5930$eZ1vL g$left$5931$eZ1vL g$right$5932$eZ1vL)
                       (if (null? g$rest$5930$eZ1vL)
                         (cons g$left$5931$eZ1vL g$right$5932$eZ1vL)
                         (if (null? (cdr g$rest$5930$eZ1vL))
                           (cons
                             (cons (car g$rest$5930$eZ1vL) g$left$5931$eZ1vL)
                             g$right$5932$eZ1vL)
                           (g$loop$5929$eZ1vL
                             (g$cddr$5266$eZ1vL g$rest$5930$eZ1vL)
                             (cons (car g$rest$5930$eZ1vL) g$left$5931$eZ1vL)
                             (cons
                               (g$cadr$5264$eZ1vL g$rest$5930$eZ1vL)
                               g$right$5932$eZ1vL))))))))
           g$loop$5929$eZ1vL)
         g$ls$5928$eZ1vL
         '()
         '()))))
   (g$reverse-it$5925$eZ1vL
     g$reverse-it$5950$eZ1vL
     (case-lambda
       ((g$head$5933$eZ1vL g$tail$5934$eZ1vL)
        (if (null? g$head$5933$eZ1vL)
          g$tail$5934$eZ1vL
          (g$reverse-it$5925$eZ1vL
            (cdr g$head$5933$eZ1vL)
            (cons (car g$head$5933$eZ1vL) g$tail$5934$eZ1vL))))))
   (g$merge$5926$eZ1vL
     g$merge$5951$eZ1vL
     (case-lambda
       ((g$list-1$5935$eZ1vL g$list-2$5936$eZ1vL g$precedes?$5937$eZ1vL)
        ((letrec ((g$loop$5938$eZ1vL
                    (case-lambda
                      ((g$source-1$5939$eZ1vL
                         g$source-2$5940$eZ1vL
                         g$so-far$5941$eZ1vL)
                       (if (null? g$source-1$5939$eZ1vL)
                         (g$reverse-it$5925$eZ1vL
                           g$so-far$5941$eZ1vL
                           g$source-2$5940$eZ1vL)
                         (if (null? g$source-2$5940$eZ1vL)
                           (g$reverse-it$5925$eZ1vL
                             g$so-far$5941$eZ1vL
                             g$source-1$5939$eZ1vL)
                           ((case-lambda
                              ((g$car-1$5942$eZ1vL g$car-2$5943$eZ1vL)
                               (if (g$precedes?$5937$eZ1vL
                                     g$car-2$5943$eZ1vL
                                     g$car-1$5942$eZ1vL)
                                 (g$loop$5938$eZ1vL
                                   g$source-1$5939$eZ1vL
                                   (cdr g$source-2$5940$eZ1vL)
                                   (cons
                                     g$car-2$5943$eZ1vL
                                     g$so-far$5941$eZ1vL))
                                 (g$loop$5938$eZ1vL
                                   g$source-2$5940$eZ1vL
                                   (cdr g$source-1$5939$eZ1vL)
                                   (cons
                                     g$car-1$5942$eZ1vL
                                     g$so-far$5941$eZ1vL)))))
                            (car g$source-1$5939$eZ1vL)
                            (car g$source-2$5940$eZ1vL))))))))
           g$loop$5938$eZ1vL)
         g$list-1$5935$eZ1vL
         g$list-2$5936$eZ1vL
         '()))))
   (g$list-sort$5927$eZ1vL
     g$list-sort$5952$eZ1vL
     (case-lambda
       ((g$precedes?$5944$eZ1vL g$ls$5945$eZ1vL)
        (if (null? g$ls$5945$eZ1vL)
          '()
          ((letrec ((g$helper$5946$eZ1vL
                      (case-lambda
                        ((g$piece$5947$eZ1vL)
                         (if (null? (cdr g$piece$5947$eZ1vL))
                           g$piece$5947$eZ1vL
                           ((case-lambda
                              ((g$parts$5948$eZ1vL)
                               (g$merge$5926$eZ1vL
                                 (g$helper$5946$eZ1vL (car g$parts$5948$eZ1vL))
                                 (g$helper$5946$eZ1vL (cdr g$parts$5948$eZ1vL))
                                 g$precedes?$5944$eZ1vL)))
                            (g$split$5924$eZ1vL g$piece$5947$eZ1vL)))))))
             g$helper$5946$eZ1vL)
           g$ls$5945$eZ1vL))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5959$eZ1vL
     g$string-ci=?$6025$eZ1vL
     (case-lambda
       ((g$a$5975$eZ1vL g$b$5976$eZ1vL . g$rest$5977$eZ1vL)
        (begin
          (if (not (string? g$a$5975$eZ1vL))
            (assertion-violation 'string-ci=? '"not a string" g$a$5975$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5978$eZ1vL)
               (begin
                 (if (not (string? g$x$5978$eZ1vL))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5978$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5979$eZ1vL)
                     (begin
                       (set! g$a$5975$eZ1vL g$x$5978$eZ1vL)
                       g$r$5979$eZ1vL)))
                  (= (string-ci-compare g$a$5975$eZ1vL g$x$5978$eZ1vL) '0)))))
            (cons g$b$5976$eZ1vL g$rest$5977$eZ1vL))))))
   (g$string-ci<?$5960$eZ1vL
     g$string-ci<?$6026$eZ1vL
     (case-lambda
       ((g$a$5980$eZ1vL g$b$5981$eZ1vL . g$rest$5982$eZ1vL)
        (begin
          (if (not (string? g$a$5980$eZ1vL))
            (assertion-violation 'string-ci<? '"not a string" g$a$5980$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5983$eZ1vL)
               (begin
                 (if (not (string? g$x$5983$eZ1vL))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5983$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5984$eZ1vL)
                     (begin
                       (set! g$a$5980$eZ1vL g$x$5983$eZ1vL)
                       g$r$5984$eZ1vL)))
                  (< (string-ci-compare g$a$5980$eZ1vL g$x$5983$eZ1vL) '0)))))
            (cons g$b$5981$eZ1vL g$rest$5982$eZ1vL))))))
   (g$string-ci>?$5961$eZ1vL
     g$string-ci>?$6027$eZ1vL
     (case-lambda
       ((g$a$5985$eZ1vL g$b$5986$eZ1vL . g$rest$5987$eZ1vL)
        (begin
          (if (not (string? g$a$5985$eZ1vL))
            (assertion-violation 'string-ci>? '"not a string" g$a$5985$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5988$eZ1vL)
               (begin
                 (if (not (string? g$x$5988$eZ1vL))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5988$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5989$eZ1vL)
                     (begin
                       (set! g$a$5985$eZ1vL g$x$5988$eZ1vL)
                       g$r$5989$eZ1vL)))
                  (> (string-ci-compare g$a$5985$eZ1vL g$x$5988$eZ1vL) '0)))))
            (cons g$b$5986$eZ1vL g$rest$5987$eZ1vL))))))
   (g$string-ci<=?$5962$eZ1vL
     g$string-ci<=?$6028$eZ1vL
     (case-lambda
       ((g$a$5990$eZ1vL g$b$5991$eZ1vL . g$rest$5992$eZ1vL)
        (begin
          (if (not (string? g$a$5990$eZ1vL))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5990$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5993$eZ1vL)
               (begin
                 (if (not (string? g$x$5993$eZ1vL))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5993$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5994$eZ1vL)
                     (begin
                       (set! g$a$5990$eZ1vL g$x$5993$eZ1vL)
                       g$r$5994$eZ1vL)))
                  (<= (string-ci-compare g$a$5990$eZ1vL g$x$5993$eZ1vL) '0)))))
            (cons g$b$5991$eZ1vL g$rest$5992$eZ1vL))))))
   (g$string-ci>=?$5963$eZ1vL
     g$string-ci>=?$6029$eZ1vL
     (case-lambda
       ((g$a$5995$eZ1vL g$b$5996$eZ1vL . g$rest$5997$eZ1vL)
        (begin
          (if (not (string? g$a$5995$eZ1vL))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5995$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$5998$eZ1vL)
               (begin
                 (if (not (string? g$x$5998$eZ1vL))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5998$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$5999$eZ1vL)
                     (begin
                       (set! g$a$5995$eZ1vL g$x$5998$eZ1vL)
                       g$r$5999$eZ1vL)))
                  (>= (string-ci-compare g$a$5995$eZ1vL g$x$5998$eZ1vL) '0)))))
            (cons g$b$5996$eZ1vL g$rest$5997$eZ1vL))))))
   (g$char-ci=?$5970$eZ1vL
     g$char-ci=?$6030$eZ1vL
     (case-lambda
       ((g$a$6000$eZ1vL g$b$6001$eZ1vL . g$rest$6002$eZ1vL)
        (begin
          (if (not (char? g$a$6000$eZ1vL))
            (assertion-violation 'char-ci=? '"not a char" g$a$6000$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$6003$eZ1vL)
               (begin
                 (if (not (char? g$x$6003$eZ1vL))
                   (assertion-violation 'char-ci=? '"not a char" g$x$6003$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$6004$eZ1vL)
                     (begin
                       (set! g$a$6000$eZ1vL g$x$6003$eZ1vL)
                       g$r$6004$eZ1vL)))
                  (= (char->integer (char-upcase g$a$6000$eZ1vL))
                     (char->integer (char-upcase g$x$6003$eZ1vL)))))))
            (cons g$b$6001$eZ1vL g$rest$6002$eZ1vL))))))
   (g$char-ci<?$5971$eZ1vL
     g$char-ci<?$6031$eZ1vL
     (case-lambda
       ((g$a$6005$eZ1vL g$b$6006$eZ1vL . g$rest$6007$eZ1vL)
        (begin
          (if (not (char? g$a$6005$eZ1vL))
            (assertion-violation 'char-ci<? '"not a char" g$a$6005$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$6008$eZ1vL)
               (begin
                 (if (not (char? g$x$6008$eZ1vL))
                   (assertion-violation 'char-ci<? '"not a char" g$x$6008$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$6009$eZ1vL)
                     (begin
                       (set! g$a$6005$eZ1vL g$x$6008$eZ1vL)
                       g$r$6009$eZ1vL)))
                  (< (char->integer (char-upcase g$a$6005$eZ1vL))
                     (char->integer (char-upcase g$x$6008$eZ1vL)))))))
            (cons g$b$6006$eZ1vL g$rest$6007$eZ1vL))))))
   (g$char-ci>?$5972$eZ1vL
     g$char-ci>?$6032$eZ1vL
     (case-lambda
       ((g$a$6010$eZ1vL g$b$6011$eZ1vL . g$rest$6012$eZ1vL)
        (begin
          (if (not (char? g$a$6010$eZ1vL))
            (assertion-violation 'char-ci>? '"not a char" g$a$6010$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$6013$eZ1vL)
               (begin
                 (if (not (char? g$x$6013$eZ1vL))
                   (assertion-violation 'char-ci>? '"not a char" g$x$6013$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$6014$eZ1vL)
                     (begin
                       (set! g$a$6010$eZ1vL g$x$6013$eZ1vL)
                       g$r$6014$eZ1vL)))
                  (> (char->integer (char-upcase g$a$6010$eZ1vL))
                     (char->integer (char-upcase g$x$6013$eZ1vL)))))))
            (cons g$b$6011$eZ1vL g$rest$6012$eZ1vL))))))
   (g$char-ci<=?$5973$eZ1vL
     g$char-ci<=?$6033$eZ1vL
     (case-lambda
       ((g$a$6015$eZ1vL g$b$6016$eZ1vL . g$rest$6017$eZ1vL)
        (begin
          (if (not (char? g$a$6015$eZ1vL))
            (assertion-violation 'char-ci<=? '"not a char" g$a$6015$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$6018$eZ1vL)
               (begin
                 (if (not (char? g$x$6018$eZ1vL))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$6018$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$6019$eZ1vL)
                     (begin
                       (set! g$a$6015$eZ1vL g$x$6018$eZ1vL)
                       g$r$6019$eZ1vL)))
                  (<= (char->integer (char-upcase g$a$6015$eZ1vL))
                      (char->integer (char-upcase g$x$6018$eZ1vL)))))))
            (cons g$b$6016$eZ1vL g$rest$6017$eZ1vL))))))
   (g$char-ci>=?$5974$eZ1vL
     g$char-ci>=?$6034$eZ1vL
     (case-lambda
       ((g$a$6020$eZ1vL g$b$6021$eZ1vL . g$rest$6022$eZ1vL)
        (begin
          (if (not (char? g$a$6020$eZ1vL))
            (assertion-violation 'char-ci>=? '"not a char" g$a$6020$eZ1vL)
            (void))
          (g$for-all$5061$eZ1vL
            (case-lambda
              ((g$x$6023$eZ1vL)
               (begin
                 (if (not (char? g$x$6023$eZ1vL))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$6023$eZ1vL)
                   (void))
                 ((case-lambda
                    ((g$r$6024$eZ1vL)
                     (begin
                       (set! g$a$6020$eZ1vL g$x$6023$eZ1vL)
                       g$r$6024$eZ1vL)))
                  (>= (char->integer (char-upcase g$a$6020$eZ1vL))
                      (char->integer (char-upcase g$x$6023$eZ1vL)))))))
            (cons g$b$6021$eZ1vL g$rest$6022$eZ1vL)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$6035$eZ1vL
     g$bitwise-if$6066$eZ1vL
     (case-lambda
       ((g$ei1$6042$eZ1vL g$ei2$6043$eZ1vL g$ei3$6044$eZ1vL)
        (bitwise-ior
          (bitwise-and g$ei1$6042$eZ1vL g$ei2$6043$eZ1vL)
          (bitwise-and (bitwise-not g$ei1$6042$eZ1vL) g$ei3$6044$eZ1vL)))))
   (g$bitwise-copy-bit$6036$eZ1vL
     g$bitwise-copy-bit$6067$eZ1vL
     (case-lambda
       ((g$ei1$6045$eZ1vL g$ei2$6046$eZ1vL g$ei3$6047$eZ1vL)
        (g$bitwise-if$6035$eZ1vL
          (g$bitwise-arithmetic-shift-left$6039$eZ1vL '1 g$ei2$6046$eZ1vL)
          (g$bitwise-arithmetic-shift-left$6039$eZ1vL
            g$ei3$6047$eZ1vL
            g$ei2$6046$eZ1vL)
          g$ei1$6045$eZ1vL))))
   (g$bitwise-bit-field$6037$eZ1vL
     g$bitwise-bit-field$6068$eZ1vL
     (case-lambda
       ((g$ei1$6048$eZ1vL g$ei2$6049$eZ1vL g$ei3$6050$eZ1vL)
        (g$bitwise-arithmetic-shift-right$6040$eZ1vL
          (bitwise-and
            g$ei1$6048$eZ1vL
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6039$eZ1vL
                '-1
                g$ei3$6050$eZ1vL)))
          g$ei2$6049$eZ1vL))))
   (g$bitwise-copy-bit-field$6038$eZ1vL
     g$bitwise-copy-bit-field$6069$eZ1vL
     (case-lambda
       ((g$to$6051$eZ1vL g$start$6052$eZ1vL g$end$6053$eZ1vL g$from$6054$eZ1vL)
        (g$bitwise-if$6035$eZ1vL
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$6039$eZ1vL '-1 g$start$6052$eZ1vL)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6039$eZ1vL
                '-1
                g$end$6053$eZ1vL)))
          (g$bitwise-arithmetic-shift-left$6039$eZ1vL
            g$from$6054$eZ1vL
            g$start$6052$eZ1vL)
          g$to$6051$eZ1vL))))
   (g$bitwise-arithmetic-shift-left$6039$eZ1vL
     g$bitwise-arithmetic-shift-left$6070$eZ1vL
     (case-lambda
       ((g$ei1$6055$eZ1vL g$ei2$6056$eZ1vL)
        (bitwise-arithmetic-shift g$ei1$6055$eZ1vL g$ei2$6056$eZ1vL))))
   (g$bitwise-arithmetic-shift-right$6040$eZ1vL
     g$bitwise-arithmetic-shift-right$6071$eZ1vL
     (case-lambda
       ((g$ei1$6057$eZ1vL g$ei2$6058$eZ1vL)
        (bitwise-arithmetic-shift g$ei1$6057$eZ1vL (- g$ei2$6058$eZ1vL)))))
   (g$bitwise-rotate-bit-field$6041$eZ1vL
     g$bitwise-rotate-bit-field$6072$eZ1vL
     (case-lambda
       ((g$n$6059$eZ1vL g$start$6060$eZ1vL g$end$6061$eZ1vL g$count$6062$eZ1vL)
        ((case-lambda
           ((g$width$6063$eZ1vL)
            (if (g$positive?$5291$eZ1vL g$width$6063$eZ1vL)
              ((case-lambda
                 ((g$count$6064$eZ1vL g$field$6065$eZ1vL)
                  (g$bitwise-copy-bit-field$6038$eZ1vL
                    g$n$6059$eZ1vL
                    g$start$6060$eZ1vL
                    g$end$6061$eZ1vL
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$6039$eZ1vL
                        g$field$6065$eZ1vL
                        g$count$6064$eZ1vL)
                      (g$bitwise-arithmetic-shift-right$6040$eZ1vL
                        g$field$6065$eZ1vL
                        (- g$width$6063$eZ1vL g$count$6064$eZ1vL))))))
               (mod g$count$6062$eZ1vL g$width$6063$eZ1vL)
               (g$bitwise-bit-field$6037$eZ1vL
                 g$n$6059$eZ1vL
                 g$start$6060$eZ1vL
                 g$end$6061$eZ1vL))
              g$n$6059$eZ1vL)))
         (- g$end$6061$eZ1vL g$start$6060$eZ1vL))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fx*/carry$6073$eZ1vL
     g$fx*/carry$6122$eZ1vL
     (case-lambda
       ((g$fx1$6083$eZ1vL g$fx2$6084$eZ1vL g$fx3$6085$eZ1vL)
        ((case-lambda
           ((g$s$6086$eZ1vL g$e$6087$eZ1vL)
            (values
              (mod0 g$s$6086$eZ1vL g$e$6087$eZ1vL)
              (div0 g$s$6086$eZ1vL g$e$6087$eZ1vL))))
         (+ (* g$fx1$6083$eZ1vL g$fx2$6084$eZ1vL) g$fx3$6085$eZ1vL)
         (expt '2 (fixnum-width))))))
   (g$fx-/carry$6074$eZ1vL
     g$fx-/carry$6123$eZ1vL
     (case-lambda
       ((g$fx1$6088$eZ1vL g$fx2$6089$eZ1vL g$fx3$6090$eZ1vL)
        ((case-lambda
           ((g$s$6091$eZ1vL g$e$6092$eZ1vL)
            (values
              (mod0 g$s$6091$eZ1vL g$e$6092$eZ1vL)
              (div0 g$s$6091$eZ1vL g$e$6092$eZ1vL))))
         (- g$fx1$6088$eZ1vL g$fx2$6089$eZ1vL g$fx3$6090$eZ1vL)
         (expt '2 (fixnum-width))))))
   (g$fx+/carry$6075$eZ1vL
     g$fx+/carry$6124$eZ1vL
     (case-lambda
       ((g$fx1$6093$eZ1vL g$fx2$6094$eZ1vL g$fx3$6095$eZ1vL)
        ((case-lambda
           ((g$s$6096$eZ1vL g$e$6097$eZ1vL)
            (values
              (mod0 g$s$6096$eZ1vL g$e$6097$eZ1vL)
              (div0 g$s$6096$eZ1vL g$e$6097$eZ1vL))))
         (+ g$fx1$6093$eZ1vL g$fx2$6094$eZ1vL g$fx3$6095$eZ1vL)
         (expt '2 (fixnum-width))))))
   (g$fxif$6076$eZ1vL
     g$fxif$6125$eZ1vL
     (case-lambda
       ((g$fx1$6098$eZ1vL g$fx2$6099$eZ1vL g$fx3$6100$eZ1vL)
        (fxior
          (fxand g$fx1$6098$eZ1vL g$fx2$6099$eZ1vL)
          (fxand (fxnot g$fx1$6098$eZ1vL) g$fx3$6100$eZ1vL)))))
   (g$fxcopy-bit$6077$eZ1vL
     g$fxcopy-bit$6126$eZ1vL
     (case-lambda
       ((g$fx1$6101$eZ1vL g$fx2$6102$eZ1vL g$fx3$6103$eZ1vL)
        (g$fxif$6076$eZ1vL
          (g$fxarithmetic-shift-left$6080$eZ1vL '1 g$fx2$6102$eZ1vL)
          (g$fxarithmetic-shift-left$6080$eZ1vL
            g$fx3$6103$eZ1vL
            g$fx2$6102$eZ1vL)
          g$fx1$6101$eZ1vL))))
   (g$fxbit-field$6078$eZ1vL
     g$fxbit-field$6127$eZ1vL
     (case-lambda
       ((g$fx1$6104$eZ1vL g$fx2$6105$eZ1vL g$fx3$6106$eZ1vL)
        (g$fxarithmetic-shift-right$6081$eZ1vL
          (fxand
            g$fx1$6104$eZ1vL
            (fxnot (g$fxarithmetic-shift-left$6080$eZ1vL '-1 g$fx3$6106$eZ1vL)))
          g$fx2$6105$eZ1vL))))
   (g$fxcopy-bit-field$6079$eZ1vL
     g$fxcopy-bit-field$6128$eZ1vL
     (case-lambda
       ((g$to$6107$eZ1vL g$start$6108$eZ1vL g$end$6109$eZ1vL g$from$6110$eZ1vL)
        (g$fxif$6076$eZ1vL
          (fxand
            (g$fxarithmetic-shift-left$6080$eZ1vL '-1 g$start$6108$eZ1vL)
            (fxnot (g$fxarithmetic-shift-left$6080$eZ1vL '-1 g$end$6109$eZ1vL)))
          (g$fxarithmetic-shift-left$6080$eZ1vL
            g$from$6110$eZ1vL
            g$start$6108$eZ1vL)
          g$to$6107$eZ1vL))))
   (g$fxarithmetic-shift-left$6080$eZ1vL
     g$fxarithmetic-shift-left$6129$eZ1vL
     (case-lambda
       ((g$fx1$6111$eZ1vL g$fx2$6112$eZ1vL)
        (fxarithmetic-shift g$fx1$6111$eZ1vL g$fx2$6112$eZ1vL))))
   (g$fxarithmetic-shift-right$6081$eZ1vL
     g$fxarithmetic-shift-right$6130$eZ1vL
     (case-lambda
       ((g$fx1$6113$eZ1vL g$fx2$6114$eZ1vL)
        (fxarithmetic-shift g$fx1$6113$eZ1vL (fx- g$fx2$6114$eZ1vL)))))
   (g$fxrotate-bit-field$6082$eZ1vL
     g$fxrotate-bit-field$6131$eZ1vL
     (case-lambda
       ((g$n$6115$eZ1vL g$start$6116$eZ1vL g$end$6117$eZ1vL g$count$6118$eZ1vL)
        ((case-lambda
           ((g$width$6119$eZ1vL)
            (if (fxpositive? g$width$6119$eZ1vL)
              ((case-lambda
                 ((g$count$6120$eZ1vL g$field$6121$eZ1vL)
                  (g$fxcopy-bit-field$6079$eZ1vL
                    g$n$6115$eZ1vL
                    g$start$6116$eZ1vL
                    g$end$6117$eZ1vL
                    (fxior
                      (g$fxarithmetic-shift-left$6080$eZ1vL
                        g$field$6121$eZ1vL
                        g$count$6120$eZ1vL)
                      (g$fxarithmetic-shift-right$6081$eZ1vL
                        g$field$6121$eZ1vL
                        (fx- g$width$6119$eZ1vL g$count$6120$eZ1vL))))))
               (fxmod g$count$6118$eZ1vL g$width$6119$eZ1vL)
               (g$fxbit-field$6078$eZ1vL
                 g$n$6115$eZ1vL
                 g$start$6116$eZ1vL
                 g$end$6117$eZ1vL))
              g$n$6115$eZ1vL)))
         (fx- g$end$6117$eZ1vL g$start$6116$eZ1vL))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7173$6132$eZ1vL
     g$7173$6144$eZ1vL
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7176$eZ1vL
       '#f
       '#f
       '#()))
   (g$7175$6133$eZ1vL g$7175$6145$eZ1vL '#f)
   (g$7174$6134$eZ1vL
     g$7174$6146$eZ1vL
     (make-record-constructor-descriptor
       g$7173$6132$eZ1vL
       &implementation-restriction-rcd
       g$7175$6133$eZ1vL))
   (g$7172$6135$eZ1vL
     g$7172$6147$eZ1vL
     (record-predicate g$7173$6132$eZ1vL))
   (g$make-no-infinities-violation$6136$eZ1vL
     g$make-no-infinities-violation$6148$eZ1vL
     (record-constructor g$7174$6134$eZ1vL))
   (g$no-infinities-violation?$6137$eZ1vL
     g$no-infinities-violation?$6149$eZ1vL
     (condition-predicate g$7173$6132$eZ1vL))
   (g$7187$6138$eZ1vL
     g$7187$6150$eZ1vL
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7190$eZ1vL
       '#f
       '#f
       '#()))
   (g$7189$6139$eZ1vL g$7189$6151$eZ1vL '#f)
   (g$7188$6140$eZ1vL
     g$7188$6152$eZ1vL
     (make-record-constructor-descriptor
       g$7187$6138$eZ1vL
       &implementation-restriction-rcd
       g$7189$6139$eZ1vL))
   (g$7186$6141$eZ1vL
     g$7186$6153$eZ1vL
     (record-predicate g$7187$6138$eZ1vL))
   (g$make-no-nans-violation$6142$eZ1vL
     g$make-no-nans-violation$6154$eZ1vL
     (record-constructor g$7188$6140$eZ1vL))
   (g$no-nans-violation?$6143$eZ1vL
     g$no-nans-violation?$6155$eZ1vL
     (condition-predicate g$7187$6138$eZ1vL)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7202$6156$eZ1vL
     g$7202$6236$eZ1vL
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7205$eZ1vL
       '#f
       '#f
       '#()))
   (g$7204$6157$eZ1vL g$7204$6237$eZ1vL '#f)
   (g$7203$6158$eZ1vL
     g$7203$6238$eZ1vL
     (make-record-constructor-descriptor
       g$7202$6156$eZ1vL
       &error-rcd
       g$7204$6157$eZ1vL))
   (g$7201$6159$eZ1vL
     g$7201$6239$eZ1vL
     (record-predicate g$7202$6156$eZ1vL))
   (g$make-i/o-error$6160$eZ1vL
     g$make-i/o-error$6240$eZ1vL
     (record-constructor g$7203$6158$eZ1vL))
   (g$i/o-error?$6161$eZ1vL
     g$i/o-error?$6241$eZ1vL
     (condition-predicate g$7202$6156$eZ1vL))
   (g$7216$6162$eZ1vL
     g$7216$6242$eZ1vL
     (make-record-type-descriptor
       '&i/o-read
       g$7202$6156$eZ1vL
       'g$7219$eZ1vL
       '#f
       '#f
       '#()))
   (g$7218$6163$eZ1vL g$7218$6243$eZ1vL '#f)
   (g$7217$6164$eZ1vL
     g$7217$6244$eZ1vL
     (make-record-constructor-descriptor
       g$7216$6162$eZ1vL
       g$7203$6158$eZ1vL
       g$7218$6163$eZ1vL))
   (g$7215$6165$eZ1vL
     g$7215$6245$eZ1vL
     (record-predicate g$7216$6162$eZ1vL))
   (g$make-i/o-read-error$6166$eZ1vL
     g$make-i/o-read-error$6246$eZ1vL
     (record-constructor g$7217$6164$eZ1vL))
   (g$i/o-read-error?$6167$eZ1vL
     g$i/o-read-error?$6247$eZ1vL
     (condition-predicate g$7216$6162$eZ1vL))
   (g$7230$6168$eZ1vL
     g$7230$6248$eZ1vL
     (make-record-type-descriptor
       '&i/o-write
       g$7202$6156$eZ1vL
       'g$7233$eZ1vL
       '#f
       '#f
       '#()))
   (g$7232$6169$eZ1vL g$7232$6249$eZ1vL '#f)
   (g$7231$6170$eZ1vL
     g$7231$6250$eZ1vL
     (make-record-constructor-descriptor
       g$7230$6168$eZ1vL
       g$7203$6158$eZ1vL
       g$7232$6169$eZ1vL))
   (g$7229$6171$eZ1vL
     g$7229$6251$eZ1vL
     (record-predicate g$7230$6168$eZ1vL))
   (g$make-i/o-write-error$6172$eZ1vL
     g$make-i/o-write-error$6252$eZ1vL
     (record-constructor g$7231$6170$eZ1vL))
   (g$i/o-write-error?$6173$eZ1vL
     g$i/o-write-error?$6253$eZ1vL
     (condition-predicate g$7230$6168$eZ1vL))
   (g$7245$6174$eZ1vL
     g$7245$6254$eZ1vL
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7202$6156$eZ1vL
       'g$7248$eZ1vL
       '#f
       '#f
       '#((immutable position))))
   (g$7247$6175$eZ1vL g$7247$6255$eZ1vL '#f)
   (g$7246$6176$eZ1vL
     g$7246$6256$eZ1vL
     (make-record-constructor-descriptor
       g$7245$6174$eZ1vL
       g$7203$6158$eZ1vL
       g$7247$6175$eZ1vL))
   (g$7244$6177$eZ1vL
     g$7244$6257$eZ1vL
     (record-predicate g$7245$6174$eZ1vL))
   (g$make-i/o-invalid-position-error$6178$eZ1vL
     g$make-i/o-invalid-position-error$6258$eZ1vL
     (record-constructor g$7246$6176$eZ1vL))
   (g$7243$6179$eZ1vL
     g$7243$6259$eZ1vL
     (record-accessor g$7245$6174$eZ1vL '0))
   (g$i/o-invalid-position-error?$6180$eZ1vL
     g$i/o-invalid-position-error?$6260$eZ1vL
     (condition-predicate g$7245$6174$eZ1vL))
   (g$i/o-error-position$6181$eZ1vL
     g$i/o-error-position$6261$eZ1vL
     (condition-accessor g$7245$6174$eZ1vL g$7243$6179$eZ1vL))
   (g$7262$6182$eZ1vL
     g$7262$6262$eZ1vL
     (make-record-type-descriptor
       '&i/o-filename
       g$7202$6156$eZ1vL
       'g$7265$eZ1vL
       '#f
       '#f
       '#((immutable filename))))
   (g$7264$6183$eZ1vL g$7264$6263$eZ1vL '#f)
   (g$7263$6184$eZ1vL
     g$7263$6264$eZ1vL
     (make-record-constructor-descriptor
       g$7262$6182$eZ1vL
       g$7203$6158$eZ1vL
       g$7264$6183$eZ1vL))
   (g$7261$6185$eZ1vL
     g$7261$6265$eZ1vL
     (record-predicate g$7262$6182$eZ1vL))
   (g$make-i/o-filename-error$6186$eZ1vL
     g$make-i/o-filename-error$6266$eZ1vL
     (record-constructor g$7263$6184$eZ1vL))
   (g$7260$6187$eZ1vL
     g$7260$6267$eZ1vL
     (record-accessor g$7262$6182$eZ1vL '0))
   (g$i/o-filename-error?$6188$eZ1vL
     g$i/o-filename-error?$6268$eZ1vL
     (condition-predicate g$7262$6182$eZ1vL))
   (g$i/o-error-filename$6189$eZ1vL
     g$i/o-error-filename$6269$eZ1vL
     (condition-accessor g$7262$6182$eZ1vL g$7260$6187$eZ1vL))
   (g$7278$6190$eZ1vL
     g$7278$6270$eZ1vL
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7262$6182$eZ1vL
       'g$7281$eZ1vL
       '#f
       '#f
       '#()))
   (g$7280$6191$eZ1vL g$7280$6271$eZ1vL '#f)
   (g$7279$6192$eZ1vL
     g$7279$6272$eZ1vL
     (make-record-constructor-descriptor
       g$7278$6190$eZ1vL
       g$7263$6184$eZ1vL
       g$7280$6191$eZ1vL))
   (g$7277$6193$eZ1vL
     g$7277$6273$eZ1vL
     (record-predicate g$7278$6190$eZ1vL))
   (g$make-i/o-file-protection-error$6194$eZ1vL
     g$make-i/o-file-protection-error$6274$eZ1vL
     (record-constructor g$7279$6192$eZ1vL))
   (g$i/o-file-protection-error?$6195$eZ1vL
     g$i/o-file-protection-error?$6275$eZ1vL
     (condition-predicate g$7278$6190$eZ1vL))
   (g$7292$6196$eZ1vL
     g$7292$6276$eZ1vL
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7278$6190$eZ1vL
       'g$7295$eZ1vL
       '#f
       '#f
       '#()))
   (g$7294$6197$eZ1vL g$7294$6277$eZ1vL '#f)
   (g$7293$6198$eZ1vL
     g$7293$6278$eZ1vL
     (make-record-constructor-descriptor
       g$7292$6196$eZ1vL
       g$7279$6192$eZ1vL
       g$7294$6197$eZ1vL))
   (g$7291$6199$eZ1vL
     g$7291$6279$eZ1vL
     (record-predicate g$7292$6196$eZ1vL))
   (g$make-i/o-file-is-read-only-error$6200$eZ1vL
     g$make-i/o-file-is-read-only-error$6280$eZ1vL
     (record-constructor g$7293$6198$eZ1vL))
   (g$i/o-file-is-read-only-error?$6201$eZ1vL
     g$i/o-file-is-read-only-error?$6281$eZ1vL
     (condition-predicate g$7292$6196$eZ1vL))
   (g$7306$6202$eZ1vL
     g$7306$6282$eZ1vL
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7262$6182$eZ1vL
       'g$7309$eZ1vL
       '#f
       '#f
       '#()))
   (g$7308$6203$eZ1vL g$7308$6283$eZ1vL '#f)
   (g$7307$6204$eZ1vL
     g$7307$6284$eZ1vL
     (make-record-constructor-descriptor
       g$7306$6202$eZ1vL
       g$7263$6184$eZ1vL
       g$7308$6203$eZ1vL))
   (g$7305$6205$eZ1vL
     g$7305$6285$eZ1vL
     (record-predicate g$7306$6202$eZ1vL))
   (g$make-i/o-file-already-exists-error$6206$eZ1vL
     g$make-i/o-file-already-exists-error$6286$eZ1vL
     (record-constructor g$7307$6204$eZ1vL))
   (g$i/o-file-already-exists-error?$6207$eZ1vL
     g$i/o-file-already-exists-error?$6287$eZ1vL
     (condition-predicate g$7306$6202$eZ1vL))
   (g$7320$6208$eZ1vL
     g$7320$6288$eZ1vL
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7262$6182$eZ1vL
       'g$7323$eZ1vL
       '#f
       '#f
       '#()))
   (g$7322$6209$eZ1vL g$7322$6289$eZ1vL '#f)
   (g$7321$6210$eZ1vL
     g$7321$6290$eZ1vL
     (make-record-constructor-descriptor
       g$7320$6208$eZ1vL
       g$7263$6184$eZ1vL
       g$7322$6209$eZ1vL))
   (g$7319$6211$eZ1vL
     g$7319$6291$eZ1vL
     (record-predicate g$7320$6208$eZ1vL))
   (g$make-i/o-file-does-not-exist-error$6212$eZ1vL
     g$make-i/o-file-does-not-exist-error$6292$eZ1vL
     (record-constructor g$7321$6210$eZ1vL))
   (g$i/o-file-does-not-exist-error?$6213$eZ1vL
     g$i/o-file-does-not-exist-error?$6293$eZ1vL
     (condition-predicate g$7320$6208$eZ1vL))
   (g$7335$6214$eZ1vL
     g$7335$6294$eZ1vL
     (make-record-type-descriptor
       '&i/o-port
       g$7202$6156$eZ1vL
       'g$7338$eZ1vL
       '#f
       '#f
       '#((immutable port))))
   (g$7337$6215$eZ1vL g$7337$6295$eZ1vL '#f)
   (g$7336$6216$eZ1vL
     g$7336$6296$eZ1vL
     (make-record-constructor-descriptor
       g$7335$6214$eZ1vL
       g$7203$6158$eZ1vL
       g$7337$6215$eZ1vL))
   (g$7334$6217$eZ1vL
     g$7334$6297$eZ1vL
     (record-predicate g$7335$6214$eZ1vL))
   (g$make-i/o-port-error$6218$eZ1vL
     g$make-i/o-port-error$6298$eZ1vL
     (record-constructor g$7336$6216$eZ1vL))
   (g$7333$6219$eZ1vL
     g$7333$6299$eZ1vL
     (record-accessor g$7335$6214$eZ1vL '0))
   (g$i/o-port-error?$6220$eZ1vL
     g$i/o-port-error?$6300$eZ1vL
     (condition-predicate g$7335$6214$eZ1vL))
   (g$i/o-error-port$6221$eZ1vL
     g$i/o-error-port$6301$eZ1vL
     (condition-accessor g$7335$6214$eZ1vL g$7333$6219$eZ1vL))
   (g$7351$6222$eZ1vL
     g$7351$6302$eZ1vL
     (make-record-type-descriptor
       '&i/o-decoding
       g$7335$6214$eZ1vL
       'g$7354$eZ1vL
       '#f
       '#f
       '#()))
   (g$7353$6223$eZ1vL g$7353$6303$eZ1vL '#f)
   (g$7352$6224$eZ1vL
     g$7352$6304$eZ1vL
     (make-record-constructor-descriptor
       g$7351$6222$eZ1vL
       g$7336$6216$eZ1vL
       g$7353$6223$eZ1vL))
   (g$7350$6225$eZ1vL
     g$7350$6305$eZ1vL
     (record-predicate g$7351$6222$eZ1vL))
   (g$make-i/o-decoding-error$6226$eZ1vL
     g$make-i/o-decoding-error$6306$eZ1vL
     (record-constructor g$7352$6224$eZ1vL))
   (g$i/o-decoding-error?$6227$eZ1vL
     g$i/o-decoding-error?$6307$eZ1vL
     (condition-predicate g$7351$6222$eZ1vL))
   (g$7366$6228$eZ1vL
     g$7366$6308$eZ1vL
     (make-record-type-descriptor
       '&i/o-encoding
       g$7335$6214$eZ1vL
       'g$7369$eZ1vL
       '#f
       '#f
       '#((immutable char))))
   (g$7368$6229$eZ1vL g$7368$6309$eZ1vL '#f)
   (g$7367$6230$eZ1vL
     g$7367$6310$eZ1vL
     (make-record-constructor-descriptor
       g$7366$6228$eZ1vL
       g$7336$6216$eZ1vL
       g$7368$6229$eZ1vL))
   (g$7365$6231$eZ1vL
     g$7365$6311$eZ1vL
     (record-predicate g$7366$6228$eZ1vL))
   (g$make-i/o-encoding-error$6232$eZ1vL
     g$make-i/o-encoding-error$6312$eZ1vL
     (record-constructor g$7367$6230$eZ1vL))
   (g$7364$6233$eZ1vL
     g$7364$6313$eZ1vL
     (record-accessor g$7366$6228$eZ1vL '0))
   (g$i/o-encoding-error?$6234$eZ1vL
     g$i/o-encoding-error?$6314$eZ1vL
     (condition-predicate g$7366$6228$eZ1vL))
   (g$i/o-encoding-error-char$6235$eZ1vL
     g$i/o-encoding-error-char$6315$eZ1vL
     (condition-accessor g$7366$6228$eZ1vL g$7364$6233$eZ1vL)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$6317$eZ1vL
     g$using$6333$eZ1vL
     (clr-using-internal 'ironscheme.runtime))
   (g$get-output-string$6318$eZ1vL
     g$get-output-string$6334$eZ1vL
     (case-lambda
       ((g$port$6324$eZ1vL)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6324$eZ1vL))))
   (g$open-output-string$6319$eZ1vL
     g$open-output-string$6335$eZ1vL
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6320$eZ1vL
     g$open-string-output-port$6336$eZ1vL
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6325$eZ1vL)
            (values
              g$p$6325$eZ1vL
              (case-lambda
                (() (g$get-output-string$6318$eZ1vL g$p$6325$eZ1vL))))))
         (g$open-output-string$6319$eZ1vL)))))
   (g$port?$6321$eZ1vL
     g$port?$6337$eZ1vL
     (case-lambda
       ((g$obj$6326$eZ1vL)
        ((case-lambda
           ((g$t$6327$eZ1vL)
            (if g$t$6327$eZ1vL
              g$t$6327$eZ1vL
              (begin '#f (binary-port? g$obj$6326$eZ1vL)))))
         (textual-port? g$obj$6326$eZ1vL)))))
   (g$call-with-string-output-port$6322$eZ1vL
     g$call-with-string-output-port$6338$eZ1vL
     (case-lambda
       ((g$proc$6328$eZ1vL)
        ((case-lambda
           ((g$p$6329$eZ1vL)
            (begin
              (g$call-with-port$6323$eZ1vL g$p$6329$eZ1vL g$proc$6328$eZ1vL)
              (g$get-output-string$6318$eZ1vL g$p$6329$eZ1vL))))
         (g$open-output-string$6319$eZ1vL)))))
   (g$call-with-port$6323$eZ1vL
     g$call-with-port$6339$eZ1vL
     (case-lambda
       ((g$port$6330$eZ1vL g$proc$6331$eZ1vL)
        ((case-lambda
           ((g$r$6332$eZ1vL)
            (begin (close-port g$port$6330$eZ1vL) g$r$6332$eZ1vL)))
         (g$proc$6331$eZ1vL g$port$6330$eZ1vL))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$6340$eZ1vL
     g$peek-char$6382$eZ1vL
     (case-lambda
       (() (g$peek-char$6340$eZ1vL (current-input-port)))
       ((g$port$6354$eZ1vL) (lookahead-char g$port$6354$eZ1vL))))
   (g$read-char$6341$eZ1vL
     g$read-char$6383$eZ1vL
     (case-lambda
       (() (g$read-char$6341$eZ1vL (current-input-port)))
       ((g$port$6355$eZ1vL) (get-char g$port$6355$eZ1vL))))
   (g$write-char$6342$eZ1vL
     g$write-char$6384$eZ1vL
     (case-lambda
       ((g$chr$6356$eZ1vL)
        (g$write-char$6342$eZ1vL g$chr$6356$eZ1vL (current-output-port)))
       ((g$chr$6357$eZ1vL g$port$6358$eZ1vL)
        (put-char g$port$6358$eZ1vL g$chr$6357$eZ1vL))))
   (g$with-input-from-file$6349$eZ1vL
     g$with-input-from-file$6385$eZ1vL
     (case-lambda
       ((g$filename$6359$eZ1vL g$thunk$6360$eZ1vL)
        ((case-lambda
           ((g$current-input-port$6363$eZ1vL g$t$6364$eZ1vL)
            ((case-lambda
               ((g$swap$6365$eZ1vL)
                (dynamic-wind
                  g$swap$6365$eZ1vL
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6360$eZ1vL)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6365$eZ1vL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6366$eZ1vL)
                    (begin
                      (g$current-input-port$6363$eZ1vL g$t$6364$eZ1vL)
                      (set! g$t$6364$eZ1vL g$t$6366$eZ1vL))))
                 (g$current-input-port$6363$eZ1vL)))))))
         current-input-port
         (open-input-file g$filename$6359$eZ1vL)))))
   (g$with-output-to-file$6350$eZ1vL
     g$with-output-to-file$6386$eZ1vL
     (case-lambda
       ((g$filename$6367$eZ1vL g$thunk$6368$eZ1vL)
        ((case-lambda
           ((g$current-output-port$6371$eZ1vL g$t$6372$eZ1vL)
            ((case-lambda
               ((g$swap$6373$eZ1vL)
                (dynamic-wind
                  g$swap$6373$eZ1vL
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6368$eZ1vL)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6373$eZ1vL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6374$eZ1vL)
                    (begin
                      (g$current-output-port$6371$eZ1vL g$t$6372$eZ1vL)
                      (set! g$t$6372$eZ1vL g$t$6374$eZ1vL))))
                 (g$current-output-port$6371$eZ1vL)))))))
         current-output-port
         (open-output-file g$filename$6367$eZ1vL)))))
   (g$call-with-input-file$6351$eZ1vL
     g$call-with-input-file$6387$eZ1vL
     (case-lambda
       ((g$filename$6375$eZ1vL g$proc$6376$eZ1vL)
        ((case-lambda
           ((g$p$6377$eZ1vL)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6376$eZ1vL g$p$6377$eZ1vL)))
              (case-lambda (() (close-input-port g$p$6377$eZ1vL))))))
         (open-input-file g$filename$6375$eZ1vL)))))
   (g$call-with-output-file$6352$eZ1vL
     g$call-with-output-file$6388$eZ1vL
     (case-lambda
       ((g$filename$6378$eZ1vL g$proc$6379$eZ1vL)
        ((case-lambda
           ((g$p$6380$eZ1vL)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6379$eZ1vL g$p$6380$eZ1vL)))
              (case-lambda (() (close-output-port g$p$6380$eZ1vL))))))
         (open-output-file g$filename$6378$eZ1vL)))))
   (g$newline$6353$eZ1vL
     g$newline$6389$eZ1vL
     (case-lambda
       (() (g$newline$6353$eZ1vL (current-output-port)))
       ((g$port$6381$eZ1vL) (display '"
" g$port$6381$eZ1vL)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7451$6390$eZ1vL
     g$7451$6499$eZ1vL
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7453$6391$eZ1vL g$7453$6500$eZ1vL '#f)
   (g$7452$6392$eZ1vL
     g$7452$6501$eZ1vL
     (make-record-constructor-descriptor
       g$7451$6390$eZ1vL
       '#f
       g$7453$6391$eZ1vL))
   (g$enum?$6393$eZ1vL
     g$enum?$6502$eZ1vL
     (record-predicate g$7451$6390$eZ1vL))
   (g$make-enum$6394$eZ1vL
     g$make-enum$6503$eZ1vL
     (record-constructor g$7452$6392$eZ1vL))
   (g$enum-value$6395$eZ1vL
     g$enum-value$6504$eZ1vL
     (record-accessor g$7451$6390$eZ1vL '0))
   (g$enum-info$6396$eZ1vL
     g$enum-info$6505$eZ1vL
     (record-accessor g$7451$6390$eZ1vL '1))
   (g$7464$6397$eZ1vL
     g$7464$6506$eZ1vL
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7466$6398$eZ1vL g$7466$6507$eZ1vL '#f)
   (g$7465$6399$eZ1vL
     g$7465$6508$eZ1vL
     (make-record-constructor-descriptor
       g$7464$6397$eZ1vL
       '#f
       g$7466$6398$eZ1vL))
   (g$enum-universe?$6400$eZ1vL
     g$enum-universe?$6509$eZ1vL
     (record-predicate g$7464$6397$eZ1vL))
   (g$make-enum-universe$6401$eZ1vL
     g$make-enum-universe$6510$eZ1vL
     (record-constructor g$7465$6399$eZ1vL))
   (g$enum-universe-id$6402$eZ1vL
     g$enum-universe-id$6511$eZ1vL
     (record-accessor g$7464$6397$eZ1vL '0))
   (g$enum-universe-symbols$6403$eZ1vL
     g$enum-universe-symbols$6512$eZ1vL
     (record-accessor g$7464$6397$eZ1vL '1))
   (g$enum-universe-mapping$6404$eZ1vL
     g$enum-universe-mapping$6513$eZ1vL
     (record-accessor g$7464$6397$eZ1vL '2))
   (g$enum-universe-value$6405$eZ1vL
     g$enum-universe-value$6514$eZ1vL
     (record-accessor g$7464$6397$eZ1vL '3))
   (g$enum-type=?$6406$eZ1vL
     g$enum-type=?$6515$eZ1vL
     (case-lambda
       ((g$enumset1$6428$eZ1vL g$enumset2$6429$eZ1vL)
        (eq? (g$enum-universe-id$6402$eZ1vL
               (g$enum-info$6396$eZ1vL g$enumset1$6428$eZ1vL))
             (g$enum-universe-id$6402$eZ1vL
               (g$enum-info$6396$eZ1vL g$enumset2$6429$eZ1vL))))))
   (g$get-symbols$6407$eZ1vL
     g$get-symbols$6516$eZ1vL
     (case-lambda
       ((g$enumset$6430$eZ1vL)
        (g$enum-universe-symbols$6403$eZ1vL
          (g$enum-info$6396$eZ1vL g$enumset$6430$eZ1vL)))))
   (g$get-value$6408$eZ1vL
     g$get-value$6517$eZ1vL
     (case-lambda
       ((g$enumset$6431$eZ1vL g$s$6432$eZ1vL)
        (g$hashtable-ref$5541$eZ1vL
          (g$enum-universe-mapping$6404$eZ1vL
            (g$enum-info$6396$eZ1vL g$enumset$6431$eZ1vL))
          g$s$6432$eZ1vL
          '#f))))
   (g$assert-enum$6409$eZ1vL
     g$assert-enum$6518$eZ1vL
     (case-lambda
       ((g$who$6433$eZ1vL g$enumset$6434$eZ1vL)
        (if (not (g$enum?$6393$eZ1vL g$enumset$6434$eZ1vL))
          (assertion-violation
            g$who$6433$eZ1vL
            '"not an enumeration"
            g$enumset$6434$eZ1vL)
          (void)))))
   (g$make-info$6410$eZ1vL
     g$make-info$6519$eZ1vL
     (case-lambda
       ((g$symbols$6435$eZ1vL)
        ((case-lambda
           ((g$ht$6436$eZ1vL)
            ((letrec ((g$f$6437$eZ1vL
                        (case-lambda
                          ((g$s$6438$eZ1vL g$a$6439$eZ1vL g$mask$6440$eZ1vL)
                           (if (null? g$s$6438$eZ1vL)
                             (values
                               (reverse! g$a$6439$eZ1vL)
                               g$ht$6436$eZ1vL
                               (- g$mask$6440$eZ1vL '1))
                             ((case-lambda
                                ((g$n$6441$eZ1vL)
                                 (if (symbol? g$n$6441$eZ1vL)
                                   (if (g$hashtable-contains?$5544$eZ1vL
                                         g$ht$6436$eZ1vL
                                         g$n$6441$eZ1vL)
                                     (g$f$6437$eZ1vL
                                       (cdr g$s$6438$eZ1vL)
                                       g$a$6439$eZ1vL
                                       g$mask$6440$eZ1vL)
                                     (begin
                                       (g$hashtable-set!$5542$eZ1vL
                                         g$ht$6436$eZ1vL
                                         g$n$6441$eZ1vL
                                         g$mask$6440$eZ1vL)
                                       (g$f$6437$eZ1vL
                                         (cdr g$s$6438$eZ1vL)
                                         (cons g$n$6441$eZ1vL g$a$6439$eZ1vL)
                                         (g$bitwise-arithmetic-shift-left$6070$eZ1vL
                                           g$mask$6440$eZ1vL
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6441$eZ1vL))))
                              (car g$s$6438$eZ1vL)))))))
               g$f$6437$eZ1vL)
             g$symbols$6435$eZ1vL
             '()
             '1)))
         (g$make-eq-hashtable$5538$eZ1vL)))))
   (g$make-name$6411$eZ1vL
     g$make-name$6520$eZ1vL
     (case-lambda
       ((g$symbols$6442$eZ1vL)
        (string->symbol (g$format$6559$eZ1vL '"~a" g$symbols$6442$eZ1vL)))))
   (g$make-enumeration$6412$eZ1vL
     g$make-enumeration$6521$eZ1vL
     (case-lambda
       ((g$symbols$6443$eZ1vL)
        (call-with-values
          (case-lambda (() (g$make-info$6410$eZ1vL g$symbols$6443$eZ1vL)))
          (case-lambda
            ((g$s$6447$eZ1vL g$mapping$6448$eZ1vL g$mask$6449$eZ1vL)
             ((case-lambda
                ((g$mask$6450$eZ1vL g$mapping$6451$eZ1vL g$s$6452$eZ1vL)
                 (g$make-enum$6394$eZ1vL
                   g$mask$6450$eZ1vL
                   (g$make-enum-universe$6401$eZ1vL
                     (g$make-name$6411$eZ1vL g$s$6452$eZ1vL)
                     g$s$6452$eZ1vL
                     g$mapping$6451$eZ1vL
                     g$mask$6450$eZ1vL))))
              g$mask$6449$eZ1vL
              g$mapping$6448$eZ1vL
              g$s$6447$eZ1vL)))))))
   (g$enum-set-universe$6413$eZ1vL
     g$enum-set-universe$6522$eZ1vL
     (case-lambda
       ((g$enumset$6453$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set-universe g$enumset$6453$eZ1vL)
          ((case-lambda
             ((g$ei$6454$eZ1vL)
              (g$make-enum$6394$eZ1vL
                (g$enum-universe-value$6405$eZ1vL g$ei$6454$eZ1vL)
                g$ei$6454$eZ1vL)))
           (g$enum-info$6396$eZ1vL g$enumset$6453$eZ1vL))))))
   (g$enum-set-indexer$6414$eZ1vL
     g$enum-set-indexer$6523$eZ1vL
     (case-lambda
       ((g$enumset$6455$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set-indexer g$enumset$6455$eZ1vL)
          (case-lambda
            ((g$symbol$6456$eZ1vL)
             (begin
               (if (not (symbol? g$symbol$6456$eZ1vL))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6456$eZ1vL)
                 (void))
               ((case-lambda
                  ((g$v$6457$eZ1vL)
                   (if g$v$6457$eZ1vL
                     (- (bitwise-length g$v$6457$eZ1vL) '1)
                     '#f)))
                (g$get-value$6408$eZ1vL
                  g$enumset$6455$eZ1vL
                  g$symbol$6456$eZ1vL)))))))))
   (g$enum-set-constructor$6415$eZ1vL
     g$enum-set-constructor$6524$eZ1vL
     (case-lambda
       ((g$enumset$6458$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set-constructor g$enumset$6458$eZ1vL)
          (case-lambda
            ((g$symbols$6459$eZ1vL)
             ((letrec ((g$f$6460$eZ1vL
                         (case-lambda
                           ((g$v$6461$eZ1vL g$s$6462$eZ1vL)
                            (if (null? g$s$6462$eZ1vL)
                              (g$make-enum$6394$eZ1vL
                                g$v$6461$eZ1vL
                                (g$enum-info$6396$eZ1vL g$enumset$6458$eZ1vL))
                              ((case-lambda
                                 ((g$n$6463$eZ1vL)
                                  (if (symbol? g$n$6463$eZ1vL)
                                    ((case-lambda
                                       ((g$v*$6464$eZ1vL)
                                        (if g$v*$6464$eZ1vL
                                          (g$f$6460$eZ1vL
                                            (bitwise-ior
                                              g$v$6461$eZ1vL
                                              g$v*$6464$eZ1vL)
                                            (cdr g$s$6462$eZ1vL))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6463$eZ1vL))))
                                     (g$get-value$6408$eZ1vL
                                       g$enumset$6458$eZ1vL
                                       g$n$6463$eZ1vL))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6463$eZ1vL))))
                               (car g$s$6462$eZ1vL)))))))
                g$f$6460$eZ1vL)
              '0
              g$symbols$6459$eZ1vL)))))))
   (g$enum-set->list$6416$eZ1vL
     g$enum-set->list$6525$eZ1vL
     (case-lambda
       ((g$enumset$6465$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set->list g$enumset$6465$eZ1vL)
          ((case-lambda
             ((g$value$6466$eZ1vL)
              ((letrec ((g$f$6467$eZ1vL
                          (case-lambda
                            ((g$s$6468$eZ1vL g$l$6469$eZ1vL)
                             (if (null? g$s$6468$eZ1vL)
                               (reverse! g$l$6469$eZ1vL)
                               (if (g$zero?$5293$eZ1vL
                                     (bitwise-and
                                       (g$get-value$6408$eZ1vL
                                         g$enumset$6465$eZ1vL
                                         (car g$s$6468$eZ1vL))
                                       g$value$6466$eZ1vL))
                                 (g$f$6467$eZ1vL
                                   (cdr g$s$6468$eZ1vL)
                                   g$l$6469$eZ1vL)
                                 (g$f$6467$eZ1vL
                                   (cdr g$s$6468$eZ1vL)
                                   (cons
                                     (car g$s$6468$eZ1vL)
                                     g$l$6469$eZ1vL))))))))
                 g$f$6467$eZ1vL)
               (g$get-symbols$6407$eZ1vL g$enumset$6465$eZ1vL)
               '())))
           (g$enum-value$6395$eZ1vL g$enumset$6465$eZ1vL))))))
   (g$enum-set-member?$6417$eZ1vL
     g$enum-set-member?$6526$eZ1vL
     (case-lambda
       ((g$symbol$6470$eZ1vL g$enumset$6471$eZ1vL)
        (begin
          (if (not (symbol? g$symbol$6470$eZ1vL))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6470$eZ1vL)
            (void))
          (g$assert-enum$6409$eZ1vL 'enum-set-member? g$enumset$6471$eZ1vL)
          ((case-lambda
             ((g$v$6472$eZ1vL)
              (if g$v$6472$eZ1vL
                (not (g$zero?$5293$eZ1vL
                       (bitwise-and
                         g$v$6472$eZ1vL
                         (g$enum-value$6395$eZ1vL g$enumset$6471$eZ1vL))))
                '#f)))
           (g$get-value$6408$eZ1vL
             g$enumset$6471$eZ1vL
             g$symbol$6470$eZ1vL))))))
   (g$enum-set-subset?$6418$eZ1vL
     g$enum-set-subset?$6527$eZ1vL
     (case-lambda
       ((g$enumset1$6473$eZ1vL g$enumset2$6474$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set-subset? g$enumset1$6473$eZ1vL)
          (g$assert-enum$6409$eZ1vL 'enum-set-subset? g$enumset2$6474$eZ1vL)
          ((case-lambda
             ((g$v1$6475$eZ1vL g$v2$6476$eZ1vL)
              (if (g$enum-type=?$6406$eZ1vL
                    g$enumset1$6473$eZ1vL
                    g$enumset2$6474$eZ1vL)
                (= (bitwise-and g$v1$6475$eZ1vL g$v2$6476$eZ1vL)
                   g$v1$6475$eZ1vL)
                ((letrec ((g$f$6477$eZ1vL
                            (case-lambda
                              ((g$s$6478$eZ1vL)
                               (if (null? g$s$6478$eZ1vL)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6479$eZ1vL g$v2*$6480$eZ1vL)
                                     (if g$v2*$6480$eZ1vL
                                       ((case-lambda
                                          ((g$has1$6481$eZ1vL g$has2$6482$eZ1vL)
                                           (if (if g$has1$6481$eZ1vL
                                                 (begin
                                                   '#f
                                                   (not g$has2$6482$eZ1vL))
                                                 '#f)
                                             '#f
                                             (g$f$6477$eZ1vL
                                               (cdr g$s$6478$eZ1vL)))))
                                        (not (g$zero?$5293$eZ1vL
                                               (bitwise-and
                                                 g$v1$6475$eZ1vL
                                                 g$v1*$6479$eZ1vL)))
                                        (not (g$zero?$5293$eZ1vL
                                               (bitwise-and
                                                 g$v2$6476$eZ1vL
                                                 g$v2*$6480$eZ1vL))))
                                       '#f)))
                                  (g$get-value$6408$eZ1vL
                                    g$enumset1$6473$eZ1vL
                                    (car g$s$6478$eZ1vL))
                                  (g$get-value$6408$eZ1vL
                                    g$enumset2$6474$eZ1vL
                                    (car g$s$6478$eZ1vL))))))))
                   g$f$6477$eZ1vL)
                 (g$get-symbols$6407$eZ1vL g$enumset1$6473$eZ1vL)))))
           (g$enum-value$6395$eZ1vL g$enumset1$6473$eZ1vL)
           (g$enum-value$6395$eZ1vL g$enumset2$6474$eZ1vL))))))
   (g$enum-set=?$6419$eZ1vL
     g$enum-set=?$6528$eZ1vL
     (case-lambda
       ((g$enumset1$6483$eZ1vL g$enumset2$6484$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set=? g$enumset1$6483$eZ1vL)
          (g$assert-enum$6409$eZ1vL 'enum-set=? g$enumset2$6484$eZ1vL)
          (if (g$enum-set-subset?$6418$eZ1vL
                g$enumset1$6483$eZ1vL
                g$enumset2$6484$eZ1vL)
            (begin
              '#f
              (g$enum-set-subset?$6418$eZ1vL
                g$enumset2$6484$eZ1vL
                g$enumset1$6483$eZ1vL))
            '#f)))))
   (g$enum-set-union$6420$eZ1vL
     g$enum-set-union$6529$eZ1vL
     (case-lambda
       ((g$enumset1$6485$eZ1vL g$enumset2$6486$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set-union g$enumset1$6485$eZ1vL)
          (g$assert-enum$6409$eZ1vL 'enum-set-union g$enumset2$6486$eZ1vL)
          (if (g$enum-type=?$6406$eZ1vL
                g$enumset1$6485$eZ1vL
                g$enumset2$6486$eZ1vL)
            (g$make-enum$6394$eZ1vL
              (bitwise-ior
                (g$enum-value$6395$eZ1vL g$enumset1$6485$eZ1vL)
                (g$enum-value$6395$eZ1vL g$enumset2$6486$eZ1vL))
              (g$enum-info$6396$eZ1vL g$enumset1$6485$eZ1vL))
            '#f)))))
   (g$enum-set-intersection$6421$eZ1vL
     g$enum-set-intersection$6530$eZ1vL
     (case-lambda
       ((g$enumset1$6487$eZ1vL g$enumset2$6488$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL
            'enum-set-intersection
            g$enumset1$6487$eZ1vL)
          (g$assert-enum$6409$eZ1vL
            'enum-set-intersection
            g$enumset2$6488$eZ1vL)
          (if (g$enum-type=?$6406$eZ1vL
                g$enumset1$6487$eZ1vL
                g$enumset2$6488$eZ1vL)
            (g$make-enum$6394$eZ1vL
              (bitwise-and
                (g$enum-value$6395$eZ1vL g$enumset1$6487$eZ1vL)
                (g$enum-value$6395$eZ1vL g$enumset2$6488$eZ1vL))
              (g$enum-info$6396$eZ1vL g$enumset1$6487$eZ1vL))
            '#f)))))
   (g$enum-set-difference$6422$eZ1vL
     g$enum-set-difference$6531$eZ1vL
     (case-lambda
       ((g$enumset1$6489$eZ1vL g$enumset2$6490$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set-difference g$enumset1$6489$eZ1vL)
          (g$assert-enum$6409$eZ1vL 'enum-set-difference g$enumset2$6490$eZ1vL)
          (if (g$enum-type=?$6406$eZ1vL
                g$enumset1$6489$eZ1vL
                g$enumset2$6490$eZ1vL)
            (g$make-enum$6394$eZ1vL
              (bitwise-and
                (g$enum-value$6395$eZ1vL g$enumset1$6489$eZ1vL)
                (bitwise-not (g$enum-value$6395$eZ1vL g$enumset2$6490$eZ1vL)))
              (g$enum-info$6396$eZ1vL g$enumset1$6489$eZ1vL))
            '#f)))))
   (g$enum-set-complement$6423$eZ1vL
     g$enum-set-complement$6532$eZ1vL
     (case-lambda
       ((g$enumset$6491$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set-complement g$enumset$6491$eZ1vL)
          (g$make-enum$6394$eZ1vL
            (bitwise-not (g$enum-value$6395$eZ1vL g$enumset$6491$eZ1vL))
            (g$enum-info$6396$eZ1vL g$enumset$6491$eZ1vL))))))
   (g$enum-set-projection$6424$eZ1vL
     g$enum-set-projection$6533$eZ1vL
     (case-lambda
       ((g$enumset1$6492$eZ1vL g$enumset2$6493$eZ1vL)
        (begin
          (g$assert-enum$6409$eZ1vL 'enum-set-projection g$enumset1$6492$eZ1vL)
          (g$assert-enum$6409$eZ1vL 'enum-set-projection g$enumset2$6493$eZ1vL)
          ((case-lambda
             ((g$v1$6494$eZ1vL)
              ((letrec ((g$f$6495$eZ1vL
                          (case-lambda
                            ((g$s$6496$eZ1vL g$v$6497$eZ1vL)
                             (if (null? g$s$6496$eZ1vL)
                               (g$make-enum$6394$eZ1vL
                                 g$v$6497$eZ1vL
                                 (g$enum-info$6396$eZ1vL g$enumset2$6493$eZ1vL))
                               (if (g$zero?$5293$eZ1vL
                                     (bitwise-and
                                       g$v1$6494$eZ1vL
                                       (g$get-value$6408$eZ1vL
                                         g$enumset1$6492$eZ1vL
                                         (car g$s$6496$eZ1vL))))
                                 (g$f$6495$eZ1vL
                                   (cdr g$s$6496$eZ1vL)
                                   g$v$6497$eZ1vL)
                                 ((case-lambda
                                    ((g$v2$6498$eZ1vL)
                                     (if g$v2$6498$eZ1vL
                                       (g$f$6495$eZ1vL
                                         (cdr g$s$6496$eZ1vL)
                                         (bitwise-ior
                                           g$v$6497$eZ1vL
                                           g$v2$6498$eZ1vL))
                                       (g$f$6495$eZ1vL
                                         (cdr g$s$6496$eZ1vL)
                                         g$v$6497$eZ1vL))))
                                  (g$get-value$6408$eZ1vL
                                    g$enumset2$6493$eZ1vL
                                    (car g$s$6496$eZ1vL)))))))))
                 g$f$6495$eZ1vL)
               (g$get-symbols$6407$eZ1vL g$enumset1$6492$eZ1vL)
               '0)))
           (g$enum-value$6395$eZ1vL g$enumset1$6492$eZ1vL)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6425$eZ1vL g$p$6426$eZ1vL g$wr$6427$eZ1vL)
       (g$fprintf$6558$eZ1vL
         g$p$6426$eZ1vL
         '"#[enum-set ~a]"
         (g$enum-set->list$6416$eZ1vL g$x$6425$eZ1vL))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6534$eZ1vL
     g$dofmt$6556$eZ1vL
     (case-lambda
       ((g$p$6538$eZ1vL g$cntl$6539$eZ1vL g$args$6540$eZ1vL)
        ((case-lambda
           ((g$nmax$6541$eZ1vL)
            ((letrec ((g$loop$6542$eZ1vL
                        (case-lambda
                          ((g$n$6543$eZ1vL g$a$6544$eZ1vL)
                           (if (fx<=? g$n$6543$eZ1vL g$nmax$6541$eZ1vL)
                             ((case-lambda
                                ((g$c$6545$eZ1vL)
                                 (if (if (g$char=?$5307$eZ1vL
                                           g$c$6545$eZ1vL
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6543$eZ1vL
                                           g$nmax$6541$eZ1vL))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6546$eZ1vL)
                                       (if (g$memv$5056$eZ1vL
                                             g$t$6546$eZ1vL
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6544$eZ1vL)
                                             g$p$6538$eZ1vL)
                                           (g$loop$6542$eZ1vL
                                             (fx+ g$n$6543$eZ1vL '2)
                                             (cdr g$a$6544$eZ1vL)))
                                         (if (g$memv$5056$eZ1vL
                                               g$t$6546$eZ1vL
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6544$eZ1vL)
                                               g$p$6538$eZ1vL)
                                             (g$loop$6542$eZ1vL
                                               (fx+ g$n$6543$eZ1vL '2)
                                               (cdr g$a$6544$eZ1vL)))
                                           (if (g$memv$5056$eZ1vL
                                                 g$t$6546$eZ1vL
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6544$eZ1vL)
                                                   '2)
                                                 g$p$6538$eZ1vL)
                                               (g$loop$6542$eZ1vL
                                                 (fx+ g$n$6543$eZ1vL '2)
                                                 (cdr g$a$6544$eZ1vL)))
                                             (if (g$memv$5056$eZ1vL
                                                   g$t$6546$eZ1vL
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6544$eZ1vL)
                                                     '8)
                                                   g$p$6538$eZ1vL)
                                                 (g$loop$6542$eZ1vL
                                                   (fx+ g$n$6543$eZ1vL '2)
                                                   (cdr g$a$6544$eZ1vL)))
                                               (if (g$memv$5056$eZ1vL
                                                     g$t$6546$eZ1vL
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6544$eZ1vL)
                                                       '16)
                                                     g$p$6538$eZ1vL)
                                                   (g$loop$6542$eZ1vL
                                                     (fx+ g$n$6543$eZ1vL '2)
                                                     (cdr g$a$6544$eZ1vL)))
                                                 (if (g$memv$5056$eZ1vL
                                                       g$t$6546$eZ1vL
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6544$eZ1vL)
                                                         '10)
                                                       g$p$6538$eZ1vL)
                                                     (g$loop$6542$eZ1vL
                                                       (fx+ g$n$6543$eZ1vL '2)
                                                       (cdr g$a$6544$eZ1vL)))
                                                   (if (g$memv$5056$eZ1vL
                                                         g$t$6546$eZ1vL
                                                         '(#\~))
                                                     (begin
                                                       (g$write-char$6384$eZ1vL
                                                         '#\~
                                                         g$p$6538$eZ1vL)
                                                       (g$loop$6542$eZ1vL
                                                         (fx+ g$n$6543$eZ1vL '2)
                                                         g$a$6544$eZ1vL))
                                                     (begin
                                                       (g$write-char$6384$eZ1vL
                                                         g$c$6545$eZ1vL
                                                         g$p$6538$eZ1vL)
                                                       (g$loop$6542$eZ1vL
                                                         (fx+ g$n$6543$eZ1vL '1)
                                                         g$a$6544$eZ1vL)))))))))))
                                    (string-ref
                                      g$cntl$6539$eZ1vL
                                      (fx+ g$n$6543$eZ1vL '1)))
                                   (begin
                                     (g$write-char$6384$eZ1vL
                                       g$c$6545$eZ1vL
                                       g$p$6538$eZ1vL)
                                     (g$loop$6542$eZ1vL
                                       (fx+ g$n$6543$eZ1vL '1)
                                       g$a$6544$eZ1vL)))))
                              (string-ref g$cntl$6539$eZ1vL g$n$6543$eZ1vL))
                             (void))))))
               g$loop$6542$eZ1vL)
             '0
             g$args$6540$eZ1vL)))
         (fx- (string-length g$cntl$6539$eZ1vL) '1)))))
   (g$printf$6535$eZ1vL
     g$printf$6557$eZ1vL
     (case-lambda
       ((g$control$6547$eZ1vL . g$args$6548$eZ1vL)
        (g$dofmt$6534$eZ1vL
          (current-output-port)
          g$control$6547$eZ1vL
          g$args$6548$eZ1vL))))
   (g$fprintf$6536$eZ1vL
     g$fprintf$6558$eZ1vL
     (case-lambda
       ((g$p$6549$eZ1vL g$control$6550$eZ1vL . g$args$6551$eZ1vL)
        (g$dofmt$6534$eZ1vL
          g$p$6549$eZ1vL
          g$control$6550$eZ1vL
          g$args$6551$eZ1vL))))
   (g$format$6537$eZ1vL
     g$format$6559$eZ1vL
     (case-lambda
       ((g$control$6552$eZ1vL . g$args$6553$eZ1vL)
        (call-with-values
          g$open-string-output-port$6336$eZ1vL
          (case-lambda
            ((g$p$6554$eZ1vL g$c$6555$eZ1vL)
             (begin
               (g$dofmt$6534$eZ1vL
                 g$p$6554$eZ1vL
                 g$control$6552$eZ1vL
                 g$args$6553$eZ1vL)
               (g$c$6555$eZ1vL)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6560$eZ1vL
     g$make-traced-macro$6563$eZ1vL
     (case-lambda
       ((g$name$6561$eZ1vL g$x$6562$eZ1vL)
        (if (procedure? g$x$6562$eZ1vL)
          (make-traced-procedure
            g$name$6561$eZ1vL
            g$x$6562$eZ1vL
            g$syntax->datum$11615$eZ1vL)
          (if (g$variable-transformer?$11437$eZ1vL g$x$6562$eZ1vL)
            (g$make-variable-transformer$11436$eZ1vL
              (make-traced-procedure
                g$name$6561$eZ1vL
                (g$variable-transformer-procedure$11438$eZ1vL g$x$6562$eZ1vL)
                g$syntax->datum$11615$eZ1vL))
            g$x$6562$eZ1vL))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$6564$eZ1vL
     g$cps/generate-reference$6837$eZ1vL
     (case-lambda
       ((g$variable$6619$eZ1vL)
        (g$cps/generate-operand$6568$eZ1vL
          (g$make-reference$6594$eZ1vL g$variable$6619$eZ1vL)))))
   (g$cps/generate-literal$6565$eZ1vL
     g$cps/generate-literal$6838$eZ1vL
     (case-lambda
       ((g$datum$6620$eZ1vL)
        (g$cps/generate-operand$6568$eZ1vL
          (g$make-literal$6593$eZ1vL g$datum$6620$eZ1vL)))))
   (g$cps/generate-abstraction$6566$eZ1vL
     g$cps/generate-abstraction$6839$eZ1vL
     (case-lambda
       ((g$bvl$6621$eZ1vL g$body-generator$6622$eZ1vL)
        (g$cps/generate-operand$6568$eZ1vL
          (g$make-user-abstraction$6595$eZ1vL
            g$bvl$6621$eZ1vL
            (case-lambda
              ((g$continuation-variable$6623$eZ1vL)
               (g$body-generator$6622$eZ1vL
                 (g$variable-continuator$6581$eZ1vL
                   g$continuation-variable$6623$eZ1vL)))))))))
   (g$cps/generate-abstractions$6567$eZ1vL
     g$cps/generate-abstractions$6840$eZ1vL
     (case-lambda
       ((g$bvls$6624$eZ1vL g$body-generators$6625$eZ1vL)
        (g$cps/generate-operand$6568$eZ1vL
          (g$make-user-abstractions$6596$eZ1vL
            g$bvls$6624$eZ1vL
            (g$map$5063$eZ1vL
              (case-lambda
                ((g$body-generator$6626$eZ1vL)
                 (case-lambda
                   ((g$continuation-variable$6627$eZ1vL)
                    (g$body-generator$6626$eZ1vL
                      (g$variable-continuator$6581$eZ1vL
                        g$continuation-variable$6627$eZ1vL))))))
              g$body-generators$6625$eZ1vL))))))
   (g$cps/generate-operand$6568$eZ1vL
     g$cps/generate-operand$6841$eZ1vL
     (case-lambda
       ((g$operand$6628$eZ1vL)
        (case-lambda
          ((g$continuator$6629$eZ1vL)
           (g$continue-with-operand$6584$eZ1vL
             g$continuator$6629$eZ1vL
             g$operand$6628$eZ1vL))))))
   (g$cps/generate-conditional$6569$eZ1vL
     g$cps/generate-conditional$6842$eZ1vL
     (case-lambda
       ((g$condition-generator$6630$eZ1vL
          g$consequent-generator$6631$eZ1vL
          g$alternative-generator$6632$eZ1vL)
        (case-lambda
          ((g$continuator$6633$eZ1vL)
           (letrec* ((g$if-variable$6634$eZ1vL
                       (case-lambda
                         ((g$continuation-variable$6636$eZ1vL)
                          ((case-lambda
                             ((g$continuator*$6637$eZ1vL)
                              (g$condition-generator$6630$eZ1vL
                                (g$conditional-continuator$6580$eZ1vL
                                  (case-lambda
                                    ((g$condition$6638$eZ1vL)
                                     (g$make-conditional$6603$eZ1vL
                                       g$condition$6638$eZ1vL
                                       (g$consequent-generator$6631$eZ1vL
                                         g$continuator*$6637$eZ1vL)
                                       (g$alternative-generator$6632$eZ1vL
                                         g$continuator*$6637$eZ1vL))))))))
                           (g$variable-continuator$6581$eZ1vL
                             g$continuation-variable$6636$eZ1vL))))))
             (g$reify-continuation*$6586$eZ1vL
               g$continuator$6633$eZ1vL
               g$if-variable$6634$eZ1vL
               (case-lambda
                 ((g$continuation-abstraction$6635$eZ1vL)
                  (g$make-conditional-join$6604$eZ1vL
                    g$continuation-abstraction$6635$eZ1vL
                    g$if-variable$6634$eZ1vL))))))))))
   (g$cps/generate-recursive-bind$6570$eZ1vL
     g$cps/generate-recursive-bind$6843$eZ1vL
     (case-lambda
       ((g$variables$6639$eZ1vL
          g$generators$6640$eZ1vL
          g$body-generator$6641$eZ1vL)
        (case-lambda
          ((g$continuator$6642$eZ1vL)
           (g$make-recursive-bind$6598$eZ1vL
             g$variables$6639$eZ1vL
             (g$map$5063$eZ1vL
               (case-lambda
                 ((g$generator$6643$eZ1vL)
                  (case-lambda
                    ((g$continuation-variable$6644$eZ1vL)
                     (g$generator$6643$eZ1vL
                       (g$variable-continuator$6581$eZ1vL
                         g$continuation-variable$6644$eZ1vL))))))
               g$generators$6640$eZ1vL)
             (g$body-generator$6641$eZ1vL
               (g$reified-continuator$6583$eZ1vL
                 g$continuator$6642$eZ1vL))))))))
   (g$cps/generate-recursive*-bind$6571$eZ1vL
     g$cps/generate-recursive*-bind$6844$eZ1vL
     (case-lambda
       ((g$variables$6645$eZ1vL
          g$generators$6646$eZ1vL
          g$body-generator$6647$eZ1vL)
        (case-lambda
          ((g$continuator$6648$eZ1vL)
           (g$make-recursive*-bind$6599$eZ1vL
             g$variables$6645$eZ1vL
             (g$map$5063$eZ1vL
               (case-lambda
                 ((g$generator$6649$eZ1vL)
                  (case-lambda
                    ((g$continuation-variable$6650$eZ1vL)
                     (g$generator$6649$eZ1vL
                       (g$variable-continuator$6581$eZ1vL
                         g$continuation-variable$6650$eZ1vL))))))
               g$generators$6646$eZ1vL)
             (g$body-generator$6647$eZ1vL
               (g$reified-continuator$6583$eZ1vL
                 g$continuator$6648$eZ1vL))))))))
   (g$cps/generate-recursive*-library-bind$6572$eZ1vL
     g$cps/generate-recursive*-library-bind$6845$eZ1vL
     (case-lambda
       ((g$name$6651$eZ1vL
          g$variables$6652$eZ1vL
          g$variables*$6653$eZ1vL
          g$generators$6654$eZ1vL
          g$body-generator$6655$eZ1vL)
        (case-lambda
          ((g$continuator$6656$eZ1vL)
           (g$make-recursive*-library-bind$6600$eZ1vL
             g$name$6651$eZ1vL
             g$variables$6652$eZ1vL
             g$variables*$6653$eZ1vL
             (g$map$5063$eZ1vL
               (case-lambda
                 ((g$generator$6657$eZ1vL)
                  (case-lambda
                    ((g$continuation-variable$6658$eZ1vL)
                     (g$generator$6657$eZ1vL
                       (g$variable-continuator$6581$eZ1vL
                         g$continuation-variable$6658$eZ1vL))))))
               g$generators$6654$eZ1vL)
             (g$body-generator$6655$eZ1vL
               (g$reified-continuator$6583$eZ1vL
                 g$continuator$6656$eZ1vL))))))))
   (g$cps/generate-sequence$6573$eZ1vL
     g$cps/generate-sequence$6846$eZ1vL
     (case-lambda
       ((g$generators$6659$eZ1vL)
        (case-lambda
          ((g$continuator$6660$eZ1vL)
           ((letrec ((g$recur$6661$eZ1vL
                       (case-lambda
                         ((g$generators$6662$eZ1vL)
                          ((car g$generators$6662$eZ1vL)
                           ((case-lambda
                              ((g$generators$6663$eZ1vL)
                               (if (pair? g$generators$6663$eZ1vL)
                                 (g$effect-continuator$6579$eZ1vL
                                   (case-lambda
                                     (()
                                      (g$recur$6661$eZ1vL
                                        g$generators$6663$eZ1vL))))
                                 g$continuator$6660$eZ1vL)))
                            (cdr g$generators$6662$eZ1vL)))))))
              g$recur$6661$eZ1vL)
            g$generators$6659$eZ1vL))))))
   (g$cps/generate-assignment$6574$eZ1vL
     g$cps/generate-assignment$6847$eZ1vL
     (case-lambda
       ((g$location$6664$eZ1vL g$expression-generator$6665$eZ1vL)
        (case-lambda
          ((g$continuator$6666$eZ1vL)
           (g$expression-generator$6665$eZ1vL
             (g$operand-continuator$6578$eZ1vL
               (case-lambda
                 ((g$operand$6667$eZ1vL)
                  (g$make-assignment$6606$eZ1vL
                    g$location$6664$eZ1vL
                    g$operand$6667$eZ1vL
                    (g$continue-with-operand$6584$eZ1vL
                      g$continuator$6666$eZ1vL
                      '(void))))))))))))
   (g$cps/generate-primitive$6575$eZ1vL
     g$cps/generate-primitive$6848$eZ1vL
     (case-lambda
       ((g$operator$6668$eZ1vL g$operand-generators$6669$eZ1vL)
        (case-lambda
          ((g$continuator$6670$eZ1vL)
           (g$continue-with-operand$6584$eZ1vL
             g$continuator$6670$eZ1vL
             (cons
               g$operator$6668$eZ1vL
               (g$map$5063$eZ1vL
                 (case-lambda
                   ((g$generator$6671$eZ1vL)
                    (case-lambda
                      ((g$continuation-variable$6672$eZ1vL)
                       (g$generator$6671$eZ1vL
                         (g$variable-continuator$6581$eZ1vL
                           g$continuation-variable$6672$eZ1vL))))))
                 g$operand-generators$6669$eZ1vL))))))))
   (g$cps/generate-combination$6576$eZ1vL
     g$cps/generate-combination$6849$eZ1vL
     (case-lambda
       ((g$operator-generator$6673$eZ1vL g$operand-generators$6674$eZ1vL)
        (g$cps/generate-subproblems$6577$eZ1vL
          (reverse
            (cons
              g$operator-generator$6673$eZ1vL
              g$operand-generators$6674$eZ1vL))
          (case-lambda
            ((g$operands$6675$eZ1vL g$continuator$6676$eZ1vL)
             (g$make-combination$6601$eZ1vL
               (car g$operands$6675$eZ1vL)
               (g$reify-continuation$6585$eZ1vL g$continuator$6676$eZ1vL)
               (cdr g$operands$6675$eZ1vL))))))))
   (g$cps/generate-subproblems$6577$eZ1vL
     g$cps/generate-subproblems$6850$eZ1vL
     (case-lambda
       ((g$generators$6677$eZ1vL g$combiner$6678$eZ1vL)
        (case-lambda
          ((g$continuator$6679$eZ1vL)
           ((letrec ((g$recur$6680$eZ1vL
                       (case-lambda
                         ((g$generators$6681$eZ1vL g$operands$6682$eZ1vL)
                          (if (pair? g$generators$6681$eZ1vL)
                            ((car g$generators$6681$eZ1vL)
                             ((case-lambda
                                ((g$generators$6683$eZ1vL)
                                 (g$operand-continuator$6578$eZ1vL
                                   (case-lambda
                                     ((g$operand$6684$eZ1vL)
                                      (g$recur$6680$eZ1vL
                                        g$generators$6683$eZ1vL
                                        (cons
                                          g$operand$6684$eZ1vL
                                          g$operands$6682$eZ1vL)))))))
                              (cdr g$generators$6681$eZ1vL)))
                            (g$combiner$6678$eZ1vL
                              g$operands$6682$eZ1vL
                              g$continuator$6679$eZ1vL))))))
              g$recur$6680$eZ1vL)
            g$generators$6677$eZ1vL
            '()))))))
   (g$operand-continuator$6578$eZ1vL
     g$operand-continuator$6851$eZ1vL
     (case-lambda
       ((g$generator$6685$eZ1vL)
        (case-lambda
          ((g$if-operand$6686$eZ1vL
             g$if-effect$6687$eZ1vL
             g$if-conditional$6688$eZ1vL
             g$if-variable$6689$eZ1vL
             g$if-inline$6690$eZ1vL)
           (begin
             g$if-effect$6687$eZ1vL
             g$if-conditional$6688$eZ1vL
             g$if-variable$6689$eZ1vL
             g$if-inline$6690$eZ1vL
             (g$if-operand$6686$eZ1vL g$generator$6685$eZ1vL)))))))
   (g$effect-continuator$6579$eZ1vL
     g$effect-continuator$6852$eZ1vL
     (case-lambda
       ((g$generator$6691$eZ1vL)
        (case-lambda
          ((g$if-operand$6692$eZ1vL
             g$if-effect$6693$eZ1vL
             g$if-conditional$6694$eZ1vL
             g$if-variable$6695$eZ1vL
             g$if-inline$6696$eZ1vL)
           (begin
             g$if-operand$6692$eZ1vL
             g$if-conditional$6694$eZ1vL
             g$if-variable$6695$eZ1vL
             g$if-inline$6696$eZ1vL
             (g$if-effect$6693$eZ1vL g$generator$6691$eZ1vL)))))))
   (g$conditional-continuator$6580$eZ1vL
     g$conditional-continuator$6853$eZ1vL
     (case-lambda
       ((g$generator$6697$eZ1vL)
        (case-lambda
          ((g$if-operand$6698$eZ1vL
             g$if-effect$6699$eZ1vL
             g$if-conditional$6700$eZ1vL
             g$if-variable$6701$eZ1vL
             g$if-inline$6702$eZ1vL)
           (begin
             g$if-operand$6698$eZ1vL
             g$if-effect$6699$eZ1vL
             g$if-variable$6701$eZ1vL
             g$if-inline$6702$eZ1vL
             (g$if-conditional$6700$eZ1vL g$generator$6697$eZ1vL)))))))
   (g$variable-continuator$6581$eZ1vL
     g$variable-continuator$6854$eZ1vL
     (case-lambda
       ((g$variable$6703$eZ1vL)
        (case-lambda
          ((g$if-operand$6704$eZ1vL
             g$if-effect$6705$eZ1vL
             g$if-conditional$6706$eZ1vL
             g$if-variable$6707$eZ1vL
             g$if-inline$6708$eZ1vL)
           (begin
             g$if-operand$6704$eZ1vL
             g$if-effect$6705$eZ1vL
             g$if-variable$6707$eZ1vL
             g$if-inline$6708$eZ1vL
             (g$if-variable$6707$eZ1vL g$variable$6703$eZ1vL)))))))
   (g$inline-continuator$6582$eZ1vL
     g$inline-continuator$6855$eZ1vL
     (case-lambda
       ((g$continuation$6709$eZ1vL)
        (case-lambda
          ((g$if-operand$6710$eZ1vL
             g$if-effect$6711$eZ1vL
             g$if-conditional$6712$eZ1vL
             g$if-variable$6713$eZ1vL
             g$if-inline$6714$eZ1vL)
           (begin
             g$if-operand$6710$eZ1vL
             g$if-effect$6711$eZ1vL
             g$if-conditional$6712$eZ1vL
             g$if-variable$6713$eZ1vL
             (g$if-inline$6714$eZ1vL g$continuation$6709$eZ1vL)))))))
   (g$reified-continuator$6583$eZ1vL
     g$reified-continuator$6856$eZ1vL
     (case-lambda
       ((g$continuator$6715$eZ1vL)
        (case-lambda
          ((g$if-operand$6716$eZ1vL
             g$if-effect$6717$eZ1vL
             g$if-conditional$6718$eZ1vL
             g$if-variable$6719$eZ1vL
             g$if-inline$6720$eZ1vL)
           (begin
             g$if-operand$6716$eZ1vL
             g$if-effect$6717$eZ1vL
             g$if-conditional$6718$eZ1vL
             (g$reify-continuation*$6586$eZ1vL
               g$continuator$6715$eZ1vL
               g$if-variable$6719$eZ1vL
               g$if-inline$6720$eZ1vL)))))))
   (g$continue-with-operand$6584$eZ1vL
     g$continue-with-operand$6857$eZ1vL
     (case-lambda
       ((g$continuator$6721$eZ1vL g$operand$6722$eZ1vL)
        (g$continuator$6721$eZ1vL
          (case-lambda
            ((g$generator$6723$eZ1vL)
             (g$generator$6723$eZ1vL g$operand$6722$eZ1vL)))
          (case-lambda ((g$generator$6724$eZ1vL) (g$generator$6724$eZ1vL)))
          (case-lambda
            ((g$generator$6725$eZ1vL)
             (g$generator$6725$eZ1vL
               (g$make-truth-test$6607$eZ1vL g$operand$6722$eZ1vL))))
          (case-lambda
            ((g$continuation-variable$6726$eZ1vL)
             (g$make-return$6602$eZ1vL
               (g$make-reference$6594$eZ1vL g$continuation-variable$6726$eZ1vL)
               (list g$operand$6722$eZ1vL))))
          (case-lambda
            ((g$continuation-abstraction$6727$eZ1vL)
             (g$make-return$6602$eZ1vL
               g$continuation-abstraction$6727$eZ1vL
               (list g$operand$6722$eZ1vL))))))))
   (g$reify-continuation$6585$eZ1vL
     g$reify-continuation$6858$eZ1vL
     (case-lambda
       ((g$continuator$6728$eZ1vL)
        (g$continuator$6728$eZ1vL
          g$operand-continuation-reifier$6588$eZ1vL
          g$effect-continuation-reifier$6590$eZ1vL
          g$conditional-continuation-reifier$6592$eZ1vL
          (case-lambda
            ((g$variable$6729$eZ1vL)
             (g$make-reference$6594$eZ1vL g$variable$6729$eZ1vL)))
          (case-lambda
            ((g$continuation$6730$eZ1vL) g$continuation$6730$eZ1vL))))))
   (g$reify-continuation*$6586$eZ1vL
     g$reify-continuation*$6859$eZ1vL
     (case-lambda
       ((g$continuator$6731$eZ1vL
          g$if-variable$6732$eZ1vL
          g$if-inline$6733$eZ1vL)
        (g$continuator$6731$eZ1vL
          (g$operand-continuation-reifier*$6587$eZ1vL g$if-inline$6733$eZ1vL)
          (g$effect-continuation-reifier*$6589$eZ1vL g$if-inline$6733$eZ1vL)
          (g$conditional-continuation-reifier*$6591$eZ1vL
            g$if-inline$6733$eZ1vL)
          g$if-variable$6732$eZ1vL
          g$if-inline$6733$eZ1vL))))
   (g$operand-continuation-reifier*$6587$eZ1vL
     g$operand-continuation-reifier*$6860$eZ1vL
     (case-lambda
       ((g$receiver$6734$eZ1vL)
        (case-lambda
          ((g$generator$6735$eZ1vL)
           (g$receiver$6734$eZ1vL
             ((case-lambda
                ((g$variable$6736$eZ1vL)
                 (g$make-continuation-abstraction$6597$eZ1vL
                   (list g$variable$6736$eZ1vL)
                   (g$generator$6735$eZ1vL
                     (g$make-reference$6594$eZ1vL g$variable$6736$eZ1vL)))))
              (g$generate-variable$6608$eZ1vL 'V))))))))
   (g$operand-continuation-reifier$6588$eZ1vL
     g$operand-continuation-reifier$6861$eZ1vL
     (g$operand-continuation-reifier*$6587$eZ1vL values))
   (g$effect-continuation-reifier*$6589$eZ1vL
     g$effect-continuation-reifier*$6862$eZ1vL
     (case-lambda
       ((g$receiver$6737$eZ1vL)
        (case-lambda
          ((g$generator$6738$eZ1vL)
           (g$receiver$6737$eZ1vL
             ((case-lambda
                ((g$variable$6739$eZ1vL)
                 (g$make-continuation-abstraction$6597$eZ1vL
                   g$variable$6739$eZ1vL
                   (g$generator$6738$eZ1vL))))
              (g$generate-variable$6608$eZ1vL 'IGNORE))))))))
   (g$effect-continuation-reifier$6590$eZ1vL
     g$effect-continuation-reifier$6863$eZ1vL
     (g$effect-continuation-reifier*$6589$eZ1vL values))
   (g$conditional-continuation-reifier*$6591$eZ1vL
     g$conditional-continuation-reifier*$6864$eZ1vL
     (case-lambda
       ((g$receiver$6740$eZ1vL)
        (case-lambda
          ((g$generator$6741$eZ1vL)
           (g$receiver$6740$eZ1vL
             ((case-lambda
                ((g$variable$6742$eZ1vL)
                 (g$make-continuation-abstraction$6597$eZ1vL
                   (list g$variable$6742$eZ1vL)
                   (g$generator$6741$eZ1vL
                     (g$make-truth-test$6607$eZ1vL
                       (g$make-reference$6594$eZ1vL g$variable$6742$eZ1vL))))))
              (g$generate-variable$6608$eZ1vL 'T))))))))
   (g$conditional-continuation-reifier$6592$eZ1vL
     g$conditional-continuation-reifier$6865$eZ1vL
     (g$conditional-continuation-reifier*$6591$eZ1vL values))
   (g$make-literal$6593$eZ1vL
     g$make-literal$6866$eZ1vL
     (case-lambda ((g$datum$6743$eZ1vL) (list 'quote g$datum$6743$eZ1vL))))
   (g$make-reference$6594$eZ1vL
     g$make-reference$6867$eZ1vL
     (case-lambda ((g$variable$6744$eZ1vL) g$variable$6744$eZ1vL)))
   (g$make-user-abstraction$6595$eZ1vL
     g$make-user-abstraction$6868$eZ1vL
     (case-lambda
       ((g$bvl$6745$eZ1vL g$body-constructor$6746$eZ1vL)
        ((case-lambda
           ((g$continuation$6747$eZ1vL)
            (list
              'case-lambda
              (list
                (cons g$continuation$6747$eZ1vL g$bvl$6745$eZ1vL)
                (g$body-constructor$6746$eZ1vL g$continuation$6747$eZ1vL)))))
         (g$generate-variable$6608$eZ1vL 'C)))))
   (g$make-user-abstractions$6596$eZ1vL
     g$make-user-abstractions$6869$eZ1vL
     (case-lambda
       ((g$bvls$6748$eZ1vL g$body-constructors$6749$eZ1vL)
        ((case-lambda
           ((g$continuation$6750$eZ1vL)
            (cons
              'case-lambda
              (g$map$5063$eZ1vL
                (case-lambda
                  ((g$bvl$6751$eZ1vL g$body-constructor$6752$eZ1vL)
                   (list
                     (cons g$continuation$6750$eZ1vL g$bvl$6751$eZ1vL)
                     (g$body-constructor$6752$eZ1vL
                       g$continuation$6750$eZ1vL))))
                g$bvls$6748$eZ1vL
                g$body-constructors$6749$eZ1vL))))
         (g$generate-variable$6608$eZ1vL 'C)))))
   (g$make-continuation-abstraction$6597$eZ1vL
     g$make-continuation-abstraction$6870$eZ1vL
     (case-lambda
       ((g$bvl$6753$eZ1vL g$body$6754$eZ1vL)
        (list 'case-lambda (list g$bvl$6753$eZ1vL g$body$6754$eZ1vL)))))
   (g$make-recursive-bind$6598$eZ1vL
     g$make-recursive-bind$6871$eZ1vL
     (case-lambda
       ((g$variables$6755$eZ1vL g$constructors$6756$eZ1vL g$body$6757$eZ1vL)
        (list
          'letrec
          (g$map$5063$eZ1vL
            (case-lambda
              ((g$variable$6758$eZ1vL g$constructor$6759$eZ1vL)
               (list
                 g$variable$6758$eZ1vL
                 (list
                   (g$make-user-abstraction$6595$eZ1vL
                     '()
                     g$constructor$6759$eZ1vL)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$6758$eZ1vL))))))
            g$variables$6755$eZ1vL
            g$constructors$6756$eZ1vL)
          g$body$6757$eZ1vL))))
   (g$make-recursive*-bind$6599$eZ1vL
     g$make-recursive*-bind$6872$eZ1vL
     (case-lambda
       ((g$variables$6760$eZ1vL g$constructors$6761$eZ1vL g$body$6762$eZ1vL)
        (list
          'letrec*
          (g$map$5063$eZ1vL
            (case-lambda
              ((g$variable$6763$eZ1vL g$constructor$6764$eZ1vL)
               (list
                 g$variable$6763$eZ1vL
                 (list
                   (g$make-user-abstraction$6595$eZ1vL
                     '()
                     g$constructor$6764$eZ1vL)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$6763$eZ1vL))))))
            g$variables$6760$eZ1vL
            g$constructors$6761$eZ1vL)
          g$body$6762$eZ1vL))))
   (g$make-recursive*-library-bind$6600$eZ1vL
     g$make-recursive*-library-bind$6873$eZ1vL
     (case-lambda
       ((g$name$6765$eZ1vL
          g$variables$6766$eZ1vL
          g$variables*$6767$eZ1vL
          g$constructors$6768$eZ1vL
          g$body$6769$eZ1vL)
        (list
          'library-letrec*
          g$name$6765$eZ1vL
          (g$map$5063$eZ1vL
            (case-lambda
              ((g$variable$6770$eZ1vL
                 g$variable*$6771$eZ1vL
                 g$constructor$6772$eZ1vL)
               (list
                 g$variable$6770$eZ1vL
                 g$variable*$6771$eZ1vL
                 (list
                   (g$make-user-abstraction$6595$eZ1vL
                     '()
                     g$constructor$6772$eZ1vL)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$6770$eZ1vL))))))
            g$variables$6766$eZ1vL
            g$variables*$6767$eZ1vL
            g$constructors$6768$eZ1vL)
          g$body$6769$eZ1vL))))
   (g$make-combination$6601$eZ1vL
     g$make-combination$6874$eZ1vL
     (case-lambda
       ((g$operator$6773$eZ1vL g$continuation$6774$eZ1vL g$operands$6775$eZ1vL)
        (cons
          g$operator$6773$eZ1vL
          (cons g$continuation$6774$eZ1vL g$operands$6775$eZ1vL)))))
   (g$make-return$6602$eZ1vL
     g$make-return$6875$eZ1vL
     (case-lambda
       ((g$continuation$6776$eZ1vL g$operands$6777$eZ1vL)
        (cons g$continuation$6776$eZ1vL g$operands$6777$eZ1vL))))
   (g$make-conditional$6603$eZ1vL
     g$make-conditional$6876$eZ1vL
     (case-lambda
       ((g$condition$6778$eZ1vL
          g$consequent$6779$eZ1vL
          g$alternative$6780$eZ1vL)
        (list
          'if
          g$condition$6778$eZ1vL
          g$consequent$6779$eZ1vL
          g$alternative$6780$eZ1vL))))
   (g$make-conditional-join$6604$eZ1vL
     g$make-conditional-join$6877$eZ1vL
     (case-lambda
       ((g$continuation$6781$eZ1vL g$constructor$6782$eZ1vL)
        ((case-lambda
           ((g$variable$6783$eZ1vL)
            (g$make-let$6605$eZ1vL
              (list g$variable$6783$eZ1vL)
              (list g$continuation$6781$eZ1vL)
              (g$constructor$6782$eZ1vL g$variable$6783$eZ1vL))))
         (g$generate-variable$6608$eZ1vL 'J)))))
   (g$make-let$6605$eZ1vL
     g$make-let$6878$eZ1vL
     (case-lambda
       ((g$variables$6784$eZ1vL g$expressions$6785$eZ1vL g$body$6786$eZ1vL)
        (cons
          (list 'case-lambda (list g$variables$6784$eZ1vL g$body$6786$eZ1vL))
          g$expressions$6785$eZ1vL))))
   (g$make-assignment$6606$eZ1vL
     g$make-assignment$6879$eZ1vL
     (case-lambda
       ((g$location$6787$eZ1vL g$operand$6788$eZ1vL g$expression$6789$eZ1vL)
        (list
          'begin
          (list 'set! g$location$6787$eZ1vL g$operand$6788$eZ1vL)
          g$expression$6789$eZ1vL))))
   (g$make-truth-test$6607$eZ1vL
     g$make-truth-test$6880$eZ1vL
     (case-lambda ((g$operand$6790$eZ1vL) g$operand$6790$eZ1vL)))
   (g$generate-variable$6608$eZ1vL
     g$generate-variable$6881$eZ1vL
     (case-lambda ((g$name$6791$eZ1vL) (gensym g$name$6791$eZ1vL))))
   (g$parse$6609$eZ1vL
     g$parse$6882$eZ1vL
     (case-lambda
       ((g$x$6792$eZ1vL)
        (if (pair? g$x$6792$eZ1vL)
          ((case-lambda
             ((g$t$6793$eZ1vL)
              (if (g$memv$5056$eZ1vL g$t$6793$eZ1vL '(quote))
                (g$cps/generate-literal$6565$eZ1vL
                  (g$cadr$5264$eZ1vL g$x$6792$eZ1vL))
                (if (g$memv$5056$eZ1vL g$t$6793$eZ1vL '(if))
                  (g$cps/generate-conditional$6569$eZ1vL
                    (g$parse$6609$eZ1vL (g$cadr$5264$eZ1vL g$x$6792$eZ1vL))
                    (g$parse$6609$eZ1vL (g$caddr$5270$eZ1vL g$x$6792$eZ1vL))
                    (g$parse$6609$eZ1vL (g$cadddr$5282$eZ1vL g$x$6792$eZ1vL)))
                  (if (g$memv$5056$eZ1vL g$t$6793$eZ1vL '(case-lambda))
                    ((case-lambda
                       ((g$d$6794$eZ1vL)
                        (g$cps/generate-abstractions$6567$eZ1vL
                          (g$map$5063$eZ1vL car g$d$6794$eZ1vL)
                          (g$map$5063$eZ1vL
                            (case-lambda
                              ((g$e$6795$eZ1vL)
                               (g$cps/generate-sequence$6573$eZ1vL
                                 (g$map$5063$eZ1vL
                                   g$parse$6609$eZ1vL
                                   (cdr g$e$6795$eZ1vL)))))
                            g$d$6794$eZ1vL))))
                     (cdr g$x$6792$eZ1vL))
                    (if (g$memv$5056$eZ1vL g$t$6793$eZ1vL '(letrec))
                      ((case-lambda
                         ((g$bindings$6796$eZ1vL g$body*$6797$eZ1vL)
                          ((case-lambda
                             ((g$lhs*$6798$eZ1vL g$rhs*$6799$eZ1vL)
                              (g$cps/generate-recursive-bind$6570$eZ1vL
                                g$lhs*$6798$eZ1vL
                                (g$map$5063$eZ1vL
                                  g$parse$6609$eZ1vL
                                  g$rhs*$6799$eZ1vL)
                                (g$parse$6609$eZ1vL
                                  (cons 'begin g$body*$6797$eZ1vL)))))
                           (g$map$5063$eZ1vL car g$bindings$6796$eZ1vL)
                           (g$map$5063$eZ1vL
                             g$cadr$5264$eZ1vL
                             g$bindings$6796$eZ1vL))))
                       (g$cadr$5264$eZ1vL g$x$6792$eZ1vL)
                       (g$cddr$5266$eZ1vL g$x$6792$eZ1vL))
                      (if (g$memv$5056$eZ1vL g$t$6793$eZ1vL '(letrec*))
                        ((case-lambda
                           ((g$bindings$6800$eZ1vL g$body*$6801$eZ1vL)
                            ((case-lambda
                               ((g$lhs*$6802$eZ1vL g$rhs*$6803$eZ1vL)
                                (g$cps/generate-recursive*-bind$6571$eZ1vL
                                  g$lhs*$6802$eZ1vL
                                  (g$map$5063$eZ1vL
                                    g$parse$6609$eZ1vL
                                    g$rhs*$6803$eZ1vL)
                                  (g$parse$6609$eZ1vL
                                    (cons 'begin g$body*$6801$eZ1vL)))))
                             (g$map$5063$eZ1vL car g$bindings$6800$eZ1vL)
                             (g$map$5063$eZ1vL
                               g$cadr$5264$eZ1vL
                               g$bindings$6800$eZ1vL))))
                         (g$cadr$5264$eZ1vL g$x$6792$eZ1vL)
                         (g$cddr$5266$eZ1vL g$x$6792$eZ1vL))
                        (if (g$memv$5056$eZ1vL
                              g$t$6793$eZ1vL
                              '(library-letrec*))
                          ((case-lambda
                             ((g$name$6804$eZ1vL g$x$6805$eZ1vL)
                              ((case-lambda
                                 ((g$bindings$6806$eZ1vL g$body*$6807$eZ1vL)
                                  ((case-lambda
                                     ((g$lhs*$6808$eZ1vL
                                        g$lhs**$6809$eZ1vL
                                        g$rhs*$6810$eZ1vL)
                                      (g$cps/generate-recursive*-library-bind$6572$eZ1vL
                                        g$name$6804$eZ1vL
                                        g$lhs*$6808$eZ1vL
                                        g$lhs**$6809$eZ1vL
                                        (g$map$5063$eZ1vL
                                          g$parse$6609$eZ1vL
                                          g$rhs*$6810$eZ1vL)
                                        (g$parse$6609$eZ1vL
                                          (cons 'begin g$body*$6807$eZ1vL)))))
                                   (g$map$5063$eZ1vL car g$bindings$6806$eZ1vL)
                                   (g$map$5063$eZ1vL
                                     g$cadr$5264$eZ1vL
                                     g$bindings$6806$eZ1vL)
                                   (g$map$5063$eZ1vL
                                     g$caddr$5270$eZ1vL
                                     g$bindings$6806$eZ1vL))))
                               (g$cadr$5264$eZ1vL g$x$6805$eZ1vL)
                               (g$cddr$5266$eZ1vL g$x$6805$eZ1vL))))
                           (g$cadr$5264$eZ1vL g$x$6792$eZ1vL)
                           (cdr g$x$6792$eZ1vL))
                          (if (g$memv$5056$eZ1vL g$t$6793$eZ1vL '(begin))
                            (g$cps/generate-sequence$6573$eZ1vL
                              (g$map$5063$eZ1vL
                                g$parse$6609$eZ1vL
                                (cdr g$x$6792$eZ1vL)))
                            (if (g$memv$5056$eZ1vL g$t$6793$eZ1vL '(set!))
                              (g$cps/generate-assignment$6574$eZ1vL
                                (g$cadr$5264$eZ1vL g$x$6792$eZ1vL)
                                (g$parse$6609$eZ1vL
                                  (g$caddr$5270$eZ1vL g$x$6792$eZ1vL)))
                              (if (list? g$x$6792$eZ1vL)
                                (g$cps/generate-combination$6576$eZ1vL
                                  (g$parse$6609$eZ1vL (car g$x$6792$eZ1vL))
                                  (g$map$5063$eZ1vL
                                    g$parse$6609$eZ1vL
                                    (cdr g$x$6792$eZ1vL)))
                                (error
                                  'rewrite
                                  '"invalid form ~s ~s"
                                  g$x$6792$eZ1vL
                                  (list? g$x$6792$eZ1vL)))))))))))))
           (car g$x$6792$eZ1vL))
          (if (symbol? g$x$6792$eZ1vL)
            (g$cps/generate-reference$6564$eZ1vL g$x$6792$eZ1vL)
            (g$cps/generate-literal$6565$eZ1vL g$x$6792$eZ1vL))))))
   (g$starts-with?$6610$eZ1vL
     g$starts-with?$6883$eZ1vL
     (case-lambda
       ((g$str$6811$eZ1vL g$sub$6812$eZ1vL)
        (clr-call-internal
          'system.string
          'startswith
          g$str$6811$eZ1vL
          g$sub$6812$eZ1vL))))
   (g$special$6611$eZ1vL
     g$special$6884$eZ1vL
     '(identity-for-cps
        letrec-identity
        library-letrec*-identity
        letrec*-identity
        cps-prim
        values
        apply
        call-with-values
        call/cc
        call-with-current-continuation))
   (g$primitive?$6612$eZ1vL
     g$primitive?$6885$eZ1vL
     (case-lambda
       ((g$o$6813$eZ1vL)
        (if (if (symbol? g$o$6813$eZ1vL)
              (begin
                '#f
                (not (g$memq$5055$eZ1vL g$o$6813$eZ1vL g$special$6611$eZ1vL)))
              '#f)
          ((case-lambda
             ((g$b$6814$eZ1vL)
              ((case-lambda
                 ((g$t$6815$eZ1vL)
                  (if g$t$6815$eZ1vL
                    g$t$6815$eZ1vL
                    (begin
                      '#f
                      (g$starts-with?$6610$eZ1vL
                        (symbol->string g$o$6813$eZ1vL)
                        '"clr-")))))
               (clr-is-internal
                 'ironscheme.runtime.builtinmethod
                 g$b$6814$eZ1vL))))
           (symbol-value? g$o$6813$eZ1vL))
          '#f))))
   (g$fix-primitives$6613$eZ1vL
     g$fix-primitives$6886$eZ1vL
     (case-lambda
       ((g$e$6816$eZ1vL)
        (if (if (pair? g$e$6816$eZ1vL) (begin '#f (list? g$e$6816$eZ1vL)) '#f)
          ((case-lambda
             ((g$o$6817$eZ1vL)
              (if (eq? g$o$6817$eZ1vL 'quote)
                g$e$6816$eZ1vL
                (if (eq? g$o$6817$eZ1vL 'library-letrec*)
                  ((case-lambda
                     ((g$name$6818$eZ1vL g$e$6819$eZ1vL)
                      ((case-lambda
                         ((g$bindings$6820$eZ1vL g$body*$6821$eZ1vL)
                          ((case-lambda
                             ((g$lhs*$6822$eZ1vL
                                g$lhs**$6823$eZ1vL
                                g$rhs*$6824$eZ1vL)
                              (cons
                                'library-letrec*
                                (cons
                                  g$name$6818$eZ1vL
                                  (cons
                                    (g$map$5063$eZ1vL
                                      list
                                      g$lhs*$6822$eZ1vL
                                      g$lhs**$6823$eZ1vL
                                      (g$map$5063$eZ1vL
                                        g$fix-primitives$6613$eZ1vL
                                        g$rhs*$6824$eZ1vL))
                                    (g$map$5063$eZ1vL
                                      g$fix-primitives$6613$eZ1vL
                                      g$body*$6821$eZ1vL))))))
                           (g$map$5063$eZ1vL car g$bindings$6820$eZ1vL)
                           (g$map$5063$eZ1vL
                             g$cadr$5264$eZ1vL
                             g$bindings$6820$eZ1vL)
                           (g$map$5063$eZ1vL
                             g$caddr$5270$eZ1vL
                             g$bindings$6820$eZ1vL))))
                       (g$cadr$5264$eZ1vL g$e$6819$eZ1vL)
                       (g$cddr$5266$eZ1vL g$e$6819$eZ1vL))))
                   (g$cadr$5264$eZ1vL g$e$6816$eZ1vL)
                   (cdr g$e$6816$eZ1vL))
                  (if (begin '#f (g$primitive?$6612$eZ1vL g$o$6817$eZ1vL))
                    (if (pair? (cdr g$e$6816$eZ1vL))
                      (list
                        (g$fix-primitives$6613$eZ1vL
                          (g$cadr$5264$eZ1vL g$e$6816$eZ1vL))
                        (cons
                          g$o$6817$eZ1vL
                          (g$map$5063$eZ1vL
                            g$fix-primitives$6613$eZ1vL
                            (g$cddr$5266$eZ1vL g$e$6816$eZ1vL))))
                      g$e$6816$eZ1vL)
                    (cons
                      (g$fix-primitives$6613$eZ1vL g$o$6817$eZ1vL)
                      (g$map$5063$eZ1vL
                        g$fix-primitives$6613$eZ1vL
                        (cdr g$e$6816$eZ1vL))))))))
           (car g$e$6816$eZ1vL))
          (if (g$primitive?$6612$eZ1vL g$e$6816$eZ1vL)
            (list 'cps-prim g$e$6816$eZ1vL)
            g$e$6816$eZ1vL)))))
   (g$parse->cps$6614$eZ1vL
     g$parse->cps$6887$eZ1vL
     (case-lambda
       ((g$e$6825$eZ1vL)
        ((g$parse$6609$eZ1vL g$e$6825$eZ1vL)
         (g$variable-continuator$6581$eZ1vL 'identity-for-cps)))))
   (g$convert->cps$6615$eZ1vL
     g$convert->cps$6888$eZ1vL
     (case-lambda
       ((g$e$6826$eZ1vL)
        (g$fix-primitives$6613$eZ1vL
          (g$parse->cps$6614$eZ1vL g$e$6826$eZ1vL)))))
   (g$bootfile$6616$eZ1vL g$bootfile$6889$eZ1vL '"ironscheme.boot.pp")
   (g$bootfile-cps$6617$eZ1vL
     g$bootfile-cps$6890$eZ1vL
     '"ironscheme.boot-cps.pp")
   (g$expand-boot-cps$6618$eZ1vL
     g$expand-boot-cps$6891$eZ1vL
     (case-lambda
       ((g$pretty-print$6827$eZ1vL)
        (letrec* ((g$read-file$6828$eZ1vL
                    (case-lambda
                      ((g$port$6832$eZ1vL)
                       ((letrec ((g$f$6833$eZ1vL
                                   (case-lambda
                                     ((g$e$6834$eZ1vL g$a$6835$eZ1vL)
                                      (if (eof-object? g$e$6834$eZ1vL)
                                        (reverse g$a$6835$eZ1vL)
                                        ((case-lambda
                                           ((g$r$6836$eZ1vL)
                                            (g$f$6833$eZ1vL
                                              (read g$port$6832$eZ1vL)
                                              (cons
                                                g$r$6836$eZ1vL
                                                g$a$6835$eZ1vL))))
                                         (g$convert->cps$6615$eZ1vL
                                           g$e$6834$eZ1vL)))))))
                          g$f$6833$eZ1vL)
                        (read g$port$6832$eZ1vL)
                        '())))))
          (begin
            (if (g$file-exists?$5556$eZ1vL g$bootfile-cps$6617$eZ1vL)
              (g$delete-file$5557$eZ1vL g$bootfile-cps$6617$eZ1vL)
              (void))
            (g$call-with-input-file$6387$eZ1vL
              g$bootfile$6616$eZ1vL
              (case-lambda
                ((g$in$6829$eZ1vL)
                 (g$call-with-output-file$6388$eZ1vL
                   g$bootfile-cps$6617$eZ1vL
                   (case-lambda
                     ((g$out$6830$eZ1vL)
                      (g$for-each$5064$eZ1vL
                        (case-lambda
                          ((g$e$6831$eZ1vL)
                           (g$pretty-print$6827$eZ1vL
                             g$e$6831$eZ1vL
                             g$out$6830$eZ1vL)))
                        (g$read-file$6828$eZ1vL g$in$6829$eZ1vL))))))))))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6892$eZ1vL
     g$library-version-mismatch-warning$6988$eZ1vL
     (case-lambda
       ((g$name$6965$eZ1vL g$depname$6966$eZ1vL g$filename$6967$eZ1vL)
        (g$fprintf$6558$eZ1vL
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$6965$eZ1vL
          g$depname$6966$eZ1vL
          g$filename$6967$eZ1vL))))
   (g$file-locator-resolution-error$6893$eZ1vL
     g$file-locator-resolution-error$6989$eZ1vL
     (case-lambda
       ((g$libname$6968$eZ1vL g$failed-list$6969$eZ1vL)
        (letrec* ((g$7970$6970$eZ1vL
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$7973$eZ1vL
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$7972$6971$eZ1vL '#f)
                  (g$7971$6972$eZ1vL
                    (make-record-constructor-descriptor
                      g$7970$6970$eZ1vL
                      &condition-rcd
                      g$7972$6971$eZ1vL))
                  (g$7969$6973$eZ1vL (record-predicate g$7970$6970$eZ1vL))
                  (g$make-library-resolution-condition$6974$eZ1vL
                    (record-constructor g$7971$6972$eZ1vL))
                  (g$7967$6975$eZ1vL (record-accessor g$7970$6970$eZ1vL '0))
                  (g$7968$6976$eZ1vL (record-accessor g$7970$6970$eZ1vL '1))
                  (g$library-resolution-condition?$6977$eZ1vL
                    (condition-predicate g$7970$6970$eZ1vL))
                  (g$condition-library$6978$eZ1vL
                    (condition-accessor g$7970$6970$eZ1vL g$7967$6975$eZ1vL))
                  (g$condition-files$6979$eZ1vL
                    (condition-accessor g$7970$6970$eZ1vL g$7968$6976$eZ1vL)))
          (raise
            (condition
              (g$make-error$5825$eZ1vL)
              (g$make-who-condition$5851$eZ1vL 'expander)
              (g$make-message-condition$5805$eZ1vL
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$6974$eZ1vL
                g$libname$6968$eZ1vL
                g$failed-list$6969$eZ1vL)))))))
   (g$read-library-source-file$6894$eZ1vL
     g$read-library-source-file$6990$eZ1vL
     (case-lambda
       ((g$file-name$6980$eZ1vL)
        (g$with-input-from-file$6385$eZ1vL
          g$file-name$6980$eZ1vL
          read-annotated))))
   (g$make-parameter$6895$eZ1vL
     g$make-parameter$6991$eZ1vL
     (case-lambda
       ((g$x$6981$eZ1vL)
        (g$make-parameter$6895$eZ1vL
          g$x$6981$eZ1vL
          (case-lambda ((g$x$6982$eZ1vL) g$x$6982$eZ1vL))))
       ((g$x$6983$eZ1vL g$fender$6984$eZ1vL)
        (begin
          (if (not (procedure? g$fender$6984$eZ1vL))
            (g$assertion-error$11608$eZ1vL
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(89,8) - (89,36)"))
            (void))
          ((case-lambda
             ((g$x$6985$eZ1vL)
              (case-lambda
                (() g$x$6985$eZ1vL)
                ((g$v$6986$eZ1vL)
                 (set! g$x$6985$eZ1vL (g$fender$6984$eZ1vL g$v$6986$eZ1vL))))))
           (g$fender$6984$eZ1vL g$x$6983$eZ1vL))))))
   (g$file-options-constructor$6963$eZ1vL
     g$file-options-constructor$6992$eZ1vL
     (g$make-parameter$6895$eZ1vL '#f))
   (g$file-options-spec$6964$eZ1vL
     g$file-options-spec$6993$eZ1vL
     (case-lambda
       ((g$x$6987$eZ1vL)
        ((g$file-options-constructor$6963$eZ1vL) g$x$6987$eZ1vL)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$7189$eZ1vL
     g$current-primitive-locations$7234$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (case-lambda ((g$x$7195$eZ1vL) '#f))
       (case-lambda
         ((g$p$7196$eZ1vL)
          (begin
            (if (not (procedure? g$p$7196$eZ1vL))
              (g$assertion-error$11608$eZ1vL
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$7196$eZ1vL)))))
   (g$mutable?$7190$eZ1vL
     g$mutable?$7235$eZ1vL
     (case-lambda
       ((g$x$7197$eZ1vL)
        (letrec* ((g$simple?$7198$eZ1vL
                    (case-lambda
                      ((g$x$7199$eZ1vL)
                       ((case-lambda
                          ((g$t$7200$eZ1vL)
                           (if g$t$7200$eZ1vL
                             g$t$7200$eZ1vL
                             ((case-lambda
                                ((g$t$7201$eZ1vL)
                                 (if g$t$7201$eZ1vL
                                   g$t$7201$eZ1vL
                                   ((case-lambda
                                      ((g$t$7202$eZ1vL)
                                       (if g$t$7202$eZ1vL
                                         g$t$7202$eZ1vL
                                         ((case-lambda
                                            ((g$t$7203$eZ1vL)
                                             (if g$t$7203$eZ1vL
                                               g$t$7203$eZ1vL
                                               ((case-lambda
                                                  ((g$t$7204$eZ1vL)
                                                   (if g$t$7204$eZ1vL
                                                     g$t$7204$eZ1vL
                                                     ((case-lambda
                                                        ((g$t$7205$eZ1vL)
                                                         (if g$t$7205$eZ1vL
                                                           g$t$7205$eZ1vL
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$7199$eZ1vL)))))
                                                      (bytevector?
                                                        g$x$7199$eZ1vL)))))
                                                (string? g$x$7199$eZ1vL)))))
                                          (boolean? g$x$7199$eZ1vL)))))
                                    (symbol? g$x$7199$eZ1vL)))))
                              (char? g$x$7199$eZ1vL)))))
                        (null? g$x$7199$eZ1vL))))))
          (not (g$simple?$7198$eZ1vL g$x$7197$eZ1vL))))))
   (g$rewriter$7191$eZ1vL
     g$rewriter$7236$eZ1vL
     (case-lambda
       ((g$quote-hack?$7206$eZ1vL)
        (letrec* ((g$f$7207$eZ1vL
                    (case-lambda
                      ((g$x$7208$eZ1vL)
                       (if (pair? g$x$7208$eZ1vL)
                         ((case-lambda
                            ((g$t$7209$eZ1vL)
                             (if (g$memv$5056$eZ1vL g$t$7209$eZ1vL '(quote))
                               (if (if g$quote-hack?$7206$eZ1vL
                                     (begin
                                       '#f
                                       (g$mutable?$7190$eZ1vL
                                         (g$cadr$5264$eZ1vL g$x$7208$eZ1vL)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$7210$eZ1vL)
                                     (begin
                                       (set-symbol-value!
                                         g$g$7210$eZ1vL
                                         (g$cadr$5264$eZ1vL g$x$7208$eZ1vL))
                                       g$g$7210$eZ1vL)))
                                  (gensym))
                                 g$x$7208$eZ1vL)
                               (if (g$memv$5056$eZ1vL
                                     g$t$7209$eZ1vL
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (g$map$5063$eZ1vL
                                     (case-lambda
                                       ((g$x$7211$eZ1vL)
                                        (cons
                                          (car g$x$7211$eZ1vL)
                                          (g$map$5063$eZ1vL
                                            g$f$7207$eZ1vL
                                            (cdr g$x$7211$eZ1vL)))))
                                     (cdr g$x$7208$eZ1vL)))
                                 (if (g$memv$5056$eZ1vL
                                       g$t$7209$eZ1vL
                                       '(lambda))
                                   (g$cons*$5065$eZ1vL
                                     'lambda
                                     (g$cadr$5264$eZ1vL g$x$7208$eZ1vL)
                                     (g$map$5063$eZ1vL
                                       g$f$7207$eZ1vL
                                       (g$cddr$5266$eZ1vL g$x$7208$eZ1vL)))
                                   (if (g$memv$5056$eZ1vL
                                         g$t$7209$eZ1vL
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$7212$eZ1vL
                                           g$body*$7213$eZ1vL)
                                         ((case-lambda
                                            ((g$lhs*$7214$eZ1vL
                                               g$rhs*$7215$eZ1vL)
                                             (g$cons*$5065$eZ1vL
                                               'letrec
                                               (g$map$5063$eZ1vL
                                                 list
                                                 g$lhs*$7214$eZ1vL
                                                 (g$map$5063$eZ1vL
                                                   g$f$7207$eZ1vL
                                                   g$rhs*$7215$eZ1vL))
                                               (g$map$5063$eZ1vL
                                                 g$f$7207$eZ1vL
                                                 g$body*$7213$eZ1vL))))
                                          (g$map$5063$eZ1vL
                                            car
                                            g$bindings$7212$eZ1vL)
                                          (g$map$5063$eZ1vL
                                            g$cadr$5264$eZ1vL
                                            g$bindings$7212$eZ1vL))))
                                      (g$cadr$5264$eZ1vL g$x$7208$eZ1vL)
                                      (g$cddr$5266$eZ1vL g$x$7208$eZ1vL))
                                     (if (g$memv$5056$eZ1vL
                                           g$t$7209$eZ1vL
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$7216$eZ1vL
                                             g$body*$7217$eZ1vL)
                                           ((case-lambda
                                              ((g$lhs*$7218$eZ1vL
                                                 g$rhs*$7219$eZ1vL)
                                               (g$cons*$5065$eZ1vL
                                                 'letrec*
                                                 (g$map$5063$eZ1vL
                                                   list
                                                   g$lhs*$7218$eZ1vL
                                                   (g$map$5063$eZ1vL
                                                     g$f$7207$eZ1vL
                                                     g$rhs*$7219$eZ1vL))
                                                 (g$map$5063$eZ1vL
                                                   g$f$7207$eZ1vL
                                                   g$body*$7217$eZ1vL))))
                                            (g$map$5063$eZ1vL
                                              car
                                              g$bindings$7216$eZ1vL)
                                            (g$map$5063$eZ1vL
                                              g$cadr$5264$eZ1vL
                                              g$bindings$7216$eZ1vL))))
                                        (g$cadr$5264$eZ1vL g$x$7208$eZ1vL)
                                        (g$cddr$5266$eZ1vL g$x$7208$eZ1vL))
                                       (if (g$memv$5056$eZ1vL
                                             g$t$7209$eZ1vL
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$7220$eZ1vL g$x$7221$eZ1vL)
                                             ((case-lambda
                                                ((g$bindings$7222$eZ1vL
                                                   g$body*$7223$eZ1vL)
                                                 ((case-lambda
                                                    ((g$lhs*$7224$eZ1vL
                                                       g$lhs**$7225$eZ1vL
                                                       g$rhs*$7226$eZ1vL)
                                                     (g$cons*$5065$eZ1vL
                                                       'library-letrec*
                                                       g$name$7220$eZ1vL
                                                       (g$map$5063$eZ1vL
                                                         list
                                                         g$lhs*$7224$eZ1vL
                                                         g$lhs**$7225$eZ1vL
                                                         (g$map$5063$eZ1vL
                                                           g$f$7207$eZ1vL
                                                           g$rhs*$7226$eZ1vL))
                                                       (g$map$5063$eZ1vL
                                                         g$f$7207$eZ1vL
                                                         g$body*$7223$eZ1vL))))
                                                  (g$map$5063$eZ1vL
                                                    car
                                                    g$bindings$7222$eZ1vL)
                                                  (g$map$5063$eZ1vL
                                                    g$cadr$5264$eZ1vL
                                                    g$bindings$7222$eZ1vL)
                                                  (g$map$5063$eZ1vL
                                                    g$caddr$5270$eZ1vL
                                                    g$bindings$7222$eZ1vL))))
                                              (g$cadr$5264$eZ1vL g$x$7221$eZ1vL)
                                              (g$cddr$5266$eZ1vL
                                                g$x$7221$eZ1vL))))
                                          (g$cadr$5264$eZ1vL g$x$7208$eZ1vL)
                                          (cdr g$x$7208$eZ1vL))
                                         (if (g$memv$5056$eZ1vL
                                               g$t$7209$eZ1vL
                                               '(begin))
                                           (cons
                                             'begin
                                             (g$map$5063$eZ1vL
                                               g$f$7207$eZ1vL
                                               (cdr g$x$7208$eZ1vL)))
                                           (if (g$memv$5056$eZ1vL
                                                 g$t$7209$eZ1vL
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5264$eZ1vL
                                                 g$x$7208$eZ1vL)
                                               (g$f$7207$eZ1vL
                                                 (g$caddr$5270$eZ1vL
                                                   g$x$7208$eZ1vL)))
                                             (if (g$memv$5056$eZ1vL
                                                   g$t$7209$eZ1vL
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$7227$eZ1vL)
                                                   ((case-lambda
                                                      ((g$t$7228$eZ1vL)
                                                       (if g$t$7228$eZ1vL
                                                         ((case-lambda
                                                            ((g$loc$7229$eZ1vL)
                                                             g$loc$7229$eZ1vL))
                                                          g$t$7228$eZ1vL)
                                                         g$op$7227$eZ1vL)))
                                                    ((g$current-primitive-locations$7189$eZ1vL)
                                                     g$op$7227$eZ1vL))))
                                                (g$cadr$5264$eZ1vL
                                                  g$x$7208$eZ1vL))
                                               (if (g$memv$5056$eZ1vL
                                                     g$t$7209$eZ1vL
                                                     '(define))
                                                 g$x$7208$eZ1vL
                                                 (if (list? g$x$7208$eZ1vL)
                                                   (g$map$5063$eZ1vL
                                                     g$f$7207$eZ1vL
                                                     g$x$7208$eZ1vL)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$7208$eZ1vL
                                                     (list?
                                                       g$x$7208$eZ1vL)))))))))))))))
                          (car g$x$7208$eZ1vL))
                         g$x$7208$eZ1vL)))))
          g$f$7207$eZ1vL))))
   (g$expanded->core$7192$eZ1vL
     g$expanded->core$7237$eZ1vL
     (case-lambda
       ((g$x$7230$eZ1vL) ((g$rewriter$7191$eZ1vL '#t) g$x$7230$eZ1vL))))
   (g$compile-core-expr$7193$eZ1vL
     g$compile-core-expr$7238$eZ1vL
     (case-lambda
       ((g$x$7231$eZ1vL) ((g$rewriter$7191$eZ1vL '#f) g$x$7231$eZ1vL))))
   (g$compile-core-expr-to-port$7194$eZ1vL
     g$compile-core-expr-to-port$7239$eZ1vL
     (case-lambda
       ((g$x$7232$eZ1vL g$p$7233$eZ1vL)
        (g$pretty-print$7188$eZ1vL
          ((g$rewriter$7191$eZ1vL '#f) g$x$7232$eZ1vL)
          g$p$7233$eZ1vL)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$7278$eZ1vL
     g$make-collection$7473$eZ1vL
     (case-lambda
       (()
        ((case-lambda
           ((g$set$7339$eZ1vL)
            (letrec* ((g$set-cons$7340$eZ1vL
                        (case-lambda
                          ((g$x$7342$eZ1vL g$ls$7343$eZ1vL)
                           (if (g$memq$5055$eZ1vL
                                 g$x$7342$eZ1vL
                                 g$ls$7343$eZ1vL)
                             g$ls$7343$eZ1vL
                             (cons g$x$7342$eZ1vL g$ls$7343$eZ1vL))))))
              (case-lambda
                (() g$set$7339$eZ1vL)
                ((g$x$7341$eZ1vL)
                 (set! g$set$7339$eZ1vL
                   (g$set-cons$7340$eZ1vL g$x$7341$eZ1vL g$set$7339$eZ1vL)))))))
         '()))))
   (g$current-library-collection$7279$eZ1vL
     g$current-library-collection$7474$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (g$make-collection$7278$eZ1vL)
       (case-lambda
         ((g$x$7344$eZ1vL)
          (begin
            (if (not (procedure? g$x$7344$eZ1vL))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$7344$eZ1vL)
              (void))
            g$x$7344$eZ1vL)))))
   (g$8286$7280$eZ1vL
     g$8286$7475$eZ1vL
     (make-record-type-descriptor
       'library
       '#f
       'g$8289$eZ1vL
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8288$7281$eZ1vL g$8288$7476$eZ1vL '#f)
   (g$8287$7282$eZ1vL
     g$8287$7477$eZ1vL
     (make-record-constructor-descriptor
       g$8286$7280$eZ1vL
       '#f
       g$8288$7281$eZ1vL))
   (g$library?$7283$eZ1vL
     g$library?$7478$eZ1vL
     (record-predicate g$8286$7280$eZ1vL))
   (g$make-library$7284$eZ1vL
     g$make-library$7479$eZ1vL
     (record-constructor g$8287$7282$eZ1vL))
   (g$library-id$7285$eZ1vL
     g$library-id$7480$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '0))
   (g$library-name$7286$eZ1vL
     g$library-name$7481$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '1))
   (g$library-version$7287$eZ1vL
     g$library-version$7482$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '2))
   (g$library-imp*$7288$eZ1vL
     g$library-imp*$7483$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '3))
   (g$library-vis*$7289$eZ1vL
     g$library-vis*$7484$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '4))
   (g$library-inv*$7290$eZ1vL
     g$library-inv*$7485$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '5))
   (g$library-subst$7291$eZ1vL
     g$library-subst$7486$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '6))
   (g$library-env$7292$eZ1vL
     g$library-env$7487$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '7))
   (g$library-visit-state$7293$eZ1vL
     g$library-visit-state$7488$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '8))
   (g$library-invoke-state$7294$eZ1vL
     g$library-invoke-state$7489$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '9))
   (g$library-visit-code$7295$eZ1vL
     g$library-visit-code$7490$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '10))
   (g$library-invoke-code$7296$eZ1vL
     g$library-invoke-code$7491$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '11))
   (g$library-visible?$7297$eZ1vL
     g$library-visible?$7492$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '12))
   (g$library-source-file-name$7298$eZ1vL
     g$library-source-file-name$7493$eZ1vL
     (record-accessor g$8286$7280$eZ1vL '13))
   (g$set-library-id!$7299$eZ1vL
     g$set-library-id!$7494$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '0))
   (g$set-library-name!$7300$eZ1vL
     g$set-library-name!$7495$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '1))
   (g$set-library-version!$7301$eZ1vL
     g$set-library-version!$7496$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '2))
   (g$set-library-imp*!$7302$eZ1vL
     g$set-library-imp*!$7497$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '3))
   (g$set-library-vis*!$7303$eZ1vL
     g$set-library-vis*!$7498$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '4))
   (g$set-library-inv*!$7304$eZ1vL
     g$set-library-inv*!$7499$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '5))
   (g$set-library-subst!$7305$eZ1vL
     g$set-library-subst!$7500$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '6))
   (g$set-library-env!$7306$eZ1vL
     g$set-library-env!$7501$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '7))
   (g$set-library-visit-state!$7307$eZ1vL
     g$set-library-visit-state!$7502$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '8))
   (g$set-library-invoke-state!$7308$eZ1vL
     g$set-library-invoke-state!$7503$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '9))
   (g$set-library-visit-code!$7309$eZ1vL
     g$set-library-visit-code!$7504$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '10))
   (g$set-library-invoke-code!$7310$eZ1vL
     g$set-library-invoke-code!$7505$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '11))
   (g$set-library-visible?!$7311$eZ1vL
     g$set-library-visible?!$7506$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '12))
   (g$set-library-source-file-name!$7312$eZ1vL
     g$set-library-source-file-name!$7507$eZ1vL
     (record-mutator g$8286$7280$eZ1vL '13))
   (g$rp$7313$eZ1vL
     g$rp$7508$eZ1vL
     (make-record-printer
       'library
       (case-lambda
         ((g$x$7345$eZ1vL g$p$7346$eZ1vL g$wr$7347$eZ1vL)
          (begin
            (if (not (g$library?$7283$eZ1vL g$x$7345$eZ1vL))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6559$eZ1vL
                '"#<library ~s>"
                (if (null? (g$library-version$7287$eZ1vL g$x$7345$eZ1vL))
                  (g$library-name$7286$eZ1vL g$x$7345$eZ1vL)
                  (append
                    (g$library-name$7286$eZ1vL g$x$7345$eZ1vL)
                    (list (g$library-version$7287$eZ1vL g$x$7345$eZ1vL)))))
              g$p$7346$eZ1vL))))))
   (g$find-dependencies$7314$eZ1vL
     g$find-dependencies$7509$eZ1vL
     (case-lambda
       ((g$ls$7348$eZ1vL)
        (if (null? g$ls$7348$eZ1vL)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$7315$eZ1vL
     g$find-library-by$7510$eZ1vL
     (case-lambda
       ((g$pred$7349$eZ1vL)
        ((letrec ((g$f$7350$eZ1vL
                    (case-lambda
                      ((g$ls$7351$eZ1vL)
                       (if (null? g$ls$7351$eZ1vL)
                         '#f
                         (if (g$pred$7349$eZ1vL (car g$ls$7351$eZ1vL))
                           (car g$ls$7351$eZ1vL)
                           (g$f$7350$eZ1vL (cdr g$ls$7351$eZ1vL))))))))
           g$f$7350$eZ1vL)
         ((g$current-library-collection$7279$eZ1vL))))))
   (g$library-path$7316$eZ1vL
     g$library-path$7511$eZ1vL
     (g$make-parameter$6991$eZ1vL
       '(".")
       (case-lambda
         ((g$x$7352$eZ1vL)
          (if (if (list? g$x$7352$eZ1vL)
                (begin '#f (g$for-all$5061$eZ1vL string? g$x$7352$eZ1vL))
                '#f)
            (g$map$5063$eZ1vL
              (case-lambda ((g$x$7353$eZ1vL) g$x$7353$eZ1vL))
              g$x$7352$eZ1vL)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$7352$eZ1vL))))))
   (g$library-extensions$7317$eZ1vL
     g$library-extensions$7512$eZ1vL
     (g$make-parameter$6991$eZ1vL
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$7354$eZ1vL)
          (if (if (list? g$x$7354$eZ1vL)
                (begin '#f (g$for-all$5061$eZ1vL string? g$x$7354$eZ1vL))
                '#f)
            (g$map$5063$eZ1vL
              (case-lambda ((g$x$7355$eZ1vL) g$x$7355$eZ1vL))
              g$x$7354$eZ1vL)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$7354$eZ1vL))))))
   (g$library-name->file-name$7318$eZ1vL
     g$library-name->file-name$7513$eZ1vL
     (case-lambda
       ((g$x$7356$eZ1vL)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6336$eZ1vL)))
          (case-lambda
            ((g$p$7359$eZ1vL g$extract$7360$eZ1vL)
             ((case-lambda
                ((g$extract$7361$eZ1vL g$p$7362$eZ1vL)
                 (letrec* ((g$display-hex$7363$eZ1vL
                             (case-lambda
                               ((g$n$7371$eZ1vL)
                                (if (<= '0 g$n$7371$eZ1vL '9)
                                  (display g$n$7371$eZ1vL g$p$7362$eZ1vL)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$7371$eZ1vL '10)))
                                    g$p$7362$eZ1vL))))))
                   (begin
                     ((letrec ((g$f$7364$eZ1vL
                                 (case-lambda
                                   ((g$ls$7365$eZ1vL)
                                    (if (not (null? g$ls$7365$eZ1vL))
                                      (begin
                                        (display '"/" g$p$7362$eZ1vL)
                                        (g$for-each$5064$eZ1vL
                                          (case-lambda
                                            ((g$c$7366$eZ1vL)
                                             (if ((case-lambda
                                                    ((g$t$7367$eZ1vL)
                                                     (if g$t$7367$eZ1vL
                                                       g$t$7367$eZ1vL
                                                       ((case-lambda
                                                          ((g$t$7368$eZ1vL)
                                                           (if g$t$7368$eZ1vL
                                                             g$t$7368$eZ1vL
                                                             ((case-lambda
                                                                ((g$t$7369$eZ1vL)
                                                                 (if g$t$7369$eZ1vL
                                                                   g$t$7369$eZ1vL
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5056$eZ1vL
                                                                       g$c$7366$eZ1vL
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5310$eZ1vL
                                                                '#\0
                                                                g$c$7366$eZ1vL
                                                                '#\9)))))
                                                        (g$char<=?$5310$eZ1vL
                                                          '#\A
                                                          g$c$7366$eZ1vL
                                                          '#\Z)))))
                                                  (g$char<=?$5310$eZ1vL
                                                    '#\a
                                                    g$c$7366$eZ1vL
                                                    '#\z))
                                               (display
                                                 g$c$7366$eZ1vL
                                                 g$p$7362$eZ1vL)
                                               (begin
                                                 (display '"%" g$p$7362$eZ1vL)
                                                 ((case-lambda
                                                    ((g$n$7370$eZ1vL)
                                                     (begin
                                                       (g$display-hex$7363$eZ1vL
                                                         (g$quotient$5919$eZ1vL
                                                           g$n$7370$eZ1vL
                                                           '16))
                                                       (g$display-hex$7363$eZ1vL
                                                         (g$remainder$5920$eZ1vL
                                                           g$n$7370$eZ1vL
                                                           '16)))))
                                                  (char->integer
                                                    g$c$7366$eZ1vL))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$7365$eZ1vL))))
                                        (g$f$7364$eZ1vL (cdr g$ls$7365$eZ1vL)))
                                      (void))))))
                        g$f$7364$eZ1vL)
                      g$x$7356$eZ1vL)
                     (g$extract$7361$eZ1vL)))))
              g$extract$7360$eZ1vL
              g$p$7359$eZ1vL)))))))
   (g$file-locator$7319$eZ1vL
     g$file-locator$7514$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (case-lambda
         ((g$x$7372$eZ1vL)
          ((case-lambda
             ((g$str$7373$eZ1vL)
              ((letrec ((g$f$7374$eZ1vL
                          (case-lambda
                            ((g$ls$7375$eZ1vL
                               g$exts$7376$eZ1vL
                               g$failed-list$7377$eZ1vL)
                             (if (null? g$ls$7375$eZ1vL)
                               (g$file-locator-resolution-error$6989$eZ1vL
                                 g$x$7372$eZ1vL
                                 (reverse g$failed-list$7377$eZ1vL))
                               (if (null? g$exts$7376$eZ1vL)
                                 (g$f$7374$eZ1vL
                                   (cdr g$ls$7375$eZ1vL)
                                   (g$library-extensions$7317$eZ1vL)
                                   g$failed-list$7377$eZ1vL)
                                 ((case-lambda
                                    ((g$name$7378$eZ1vL)
                                     (if (g$file-exists?$5556$eZ1vL
                                           g$name$7378$eZ1vL)
                                       g$name$7378$eZ1vL
                                       (g$f$7374$eZ1vL
                                         g$ls$7375$eZ1vL
                                         (cdr g$exts$7376$eZ1vL)
                                         (cons
                                           g$name$7378$eZ1vL
                                           g$failed-list$7377$eZ1vL)))))
                                  (string-append
                                    (car g$ls$7375$eZ1vL)
                                    g$str$7373$eZ1vL
                                    (car g$exts$7376$eZ1vL)))))))))
                 g$f$7374$eZ1vL)
               (g$library-path$7316$eZ1vL)
               (g$library-extensions$7317$eZ1vL)
               '())))
           (g$library-name->file-name$7318$eZ1vL g$x$7372$eZ1vL))))
       (case-lambda
         ((g$f$7379$eZ1vL)
          (if (procedure? g$f$7379$eZ1vL)
            g$f$7379$eZ1vL
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$7379$eZ1vL))))))
   (g$serialize-all$7320$eZ1vL
     g$serialize-all$7515$eZ1vL
     (case-lambda
       ((g$serialize$7380$eZ1vL g$compile$7381$eZ1vL)
        (letrec* ((g$library-desc$7382$eZ1vL
                    (case-lambda
                      ((g$x$7384$eZ1vL)
                       (list
                         (g$library-id$7285$eZ1vL g$x$7384$eZ1vL)
                         (g$library-name$7286$eZ1vL g$x$7384$eZ1vL))))))
          (g$for-each$5064$eZ1vL
            (case-lambda
              ((g$x$7383$eZ1vL)
               (if (g$library-source-file-name$7298$eZ1vL g$x$7383$eZ1vL)
                 (g$serialize$7380$eZ1vL
                   (g$library-source-file-name$7298$eZ1vL g$x$7383$eZ1vL)
                   (list
                     (g$library-id$7285$eZ1vL g$x$7383$eZ1vL)
                     (g$library-name$7286$eZ1vL g$x$7383$eZ1vL)
                     (g$library-version$7287$eZ1vL g$x$7383$eZ1vL)
                     (g$map$5063$eZ1vL
                       g$library-desc$7382$eZ1vL
                       (g$library-imp*$7288$eZ1vL g$x$7383$eZ1vL))
                     (g$map$5063$eZ1vL
                       g$library-desc$7382$eZ1vL
                       (g$library-vis*$7289$eZ1vL g$x$7383$eZ1vL))
                     (g$map$5063$eZ1vL
                       g$library-desc$7382$eZ1vL
                       (g$library-inv*$7290$eZ1vL g$x$7383$eZ1vL))
                     (g$library-subst$7291$eZ1vL g$x$7383$eZ1vL)
                     (g$library-env$7292$eZ1vL g$x$7383$eZ1vL)
                     (g$compile$7381$eZ1vL
                       (g$library-visit-code$7295$eZ1vL g$x$7383$eZ1vL))
                     (g$compile$7381$eZ1vL
                       (g$library-invoke-code$7296$eZ1vL g$x$7383$eZ1vL))
                     (g$library-visible?$7297$eZ1vL g$x$7383$eZ1vL)))
                 (void))))
            ((g$current-library-collection$7279$eZ1vL)))))))
   (g$current-precompiled-library-loader$7321$eZ1vL
     g$current-precompiled-library-loader$7516$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (case-lambda ((g$filename$7385$eZ1vL g$sk$7386$eZ1vL) '#f))))
   (g$try-load-from-file$7322$eZ1vL
     g$try-load-from-file$7517$eZ1vL
     (case-lambda
       ((g$filename$7387$eZ1vL)
        ((g$current-precompiled-library-loader$7321$eZ1vL)
         g$filename$7387$eZ1vL
         (case-lambda
           ((g$id$7388$eZ1vL
              g$name$7389$eZ1vL
              g$ver$7390$eZ1vL
              g$imp*$7391$eZ1vL
              g$vis*$7392$eZ1vL
              g$inv*$7393$eZ1vL
              g$exp-subst$7394$eZ1vL
              g$exp-env$7395$eZ1vL
              g$visit-proc$7396$eZ1vL
              g$invoke-proc$7397$eZ1vL
              g$visible?$7398$eZ1vL)
            ((letrec ((g$f$7399$eZ1vL
                        (case-lambda
                          ((g$deps$7400$eZ1vL)
                           (if (null? g$deps$7400$eZ1vL)
                             (begin
                               (g$install-library$7332$eZ1vL
                                 g$id$7388$eZ1vL
                                 g$name$7389$eZ1vL
                                 g$ver$7390$eZ1vL
                                 g$imp*$7391$eZ1vL
                                 g$vis*$7392$eZ1vL
                                 g$inv*$7393$eZ1vL
                                 g$exp-subst$7394$eZ1vL
                                 g$exp-env$7395$eZ1vL
                                 g$visit-proc$7396$eZ1vL
                                 g$invoke-proc$7397$eZ1vL
                                 '#f
                                 '#f
                                 g$visible?$7398$eZ1vL
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7401$eZ1vL)
                                 ((case-lambda
                                    ((g$label$7402$eZ1vL g$dname$7403$eZ1vL)
                                     ((case-lambda
                                        ((g$l$7404$eZ1vL)
                                         (if (if (g$library?$7283$eZ1vL
                                                   g$l$7404$eZ1vL)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7402$eZ1vL
                                                      (g$library-id$7285$eZ1vL
                                                        g$l$7404$eZ1vL)))
                                               '#f)
                                           (g$f$7399$eZ1vL
                                             (cdr g$deps$7400$eZ1vL))
                                           (begin
                                             (g$library-version-mismatch-warning$6988$eZ1vL
                                               g$name$7389$eZ1vL
                                               g$dname$7403$eZ1vL
                                               g$filename$7387$eZ1vL)
                                             '#f))))
                                      (g$find-library-by-name$7327$eZ1vL
                                        g$dname$7403$eZ1vL))))
                                  (car g$d$7401$eZ1vL)
                                  (g$cadr$5264$eZ1vL g$d$7401$eZ1vL))))
                              (car g$deps$7400$eZ1vL)))))))
               g$f$7399$eZ1vL)
             (append g$imp*$7391$eZ1vL g$vis*$7392$eZ1vL g$inv*$7393$eZ1vL)))
           (g$others$7405$eZ1vL '#f))))))
   (g$library-loader$7323$eZ1vL
     g$library-loader$7518$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (case-lambda
         ((g$x$7406$eZ1vL)
          ((case-lambda
             ((g$file-name$7407$eZ1vL)
              (if (not g$file-name$7407$eZ1vL)
                (assertion-violation '#f '"cannot file library" g$x$7406$eZ1vL)
                ((case-lambda
                   ((g$t$7408$eZ1vL)
                    (if g$t$7408$eZ1vL
                      g$t$7408$eZ1vL
                      (begin
                        '#f
                        ((g$current-library-expander$7324$eZ1vL)
                         (g$read-library-source-file$6990$eZ1vL
                           g$file-name$7407$eZ1vL)
                         g$file-name$7407$eZ1vL
                         (case-lambda
                           ((g$name$7409$eZ1vL)
                            (if (not (equal? g$name$7409$eZ1vL g$x$7406$eZ1vL))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6336$eZ1vL)))
                                  (case-lambda
                                    ((g$p$7412$eZ1vL g$e$7413$eZ1vL)
                                     ((case-lambda
                                        ((g$e$7414$eZ1vL g$p$7415$eZ1vL)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7415$eZ1vL)
                                           (write g$x$7406$eZ1vL g$p$7415$eZ1vL)
                                           (display '" in file " g$p$7415$eZ1vL)
                                           (display
                                             g$file-name$7407$eZ1vL
                                             g$p$7415$eZ1vL)
                                           (display '", found " g$p$7415$eZ1vL)
                                           (write
                                             g$name$7409$eZ1vL
                                             g$p$7415$eZ1vL)
                                           (display '" instead" g$p$7415$eZ1vL)
                                           (g$e$7414$eZ1vL))))
                                      g$e$7413$eZ1vL
                                      g$p$7412$eZ1vL)))))
                              (void)))))))))
                 (g$try-load-from-file$7322$eZ1vL g$file-name$7407$eZ1vL)))))
           ((g$file-locator$7319$eZ1vL) g$x$7406$eZ1vL))))
       (case-lambda
         ((g$f$7416$eZ1vL)
          (if (procedure? g$f$7416$eZ1vL)
            g$f$7416$eZ1vL
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7416$eZ1vL))))))
   (g$current-library-expander$7324$eZ1vL
     g$current-library-expander$7519$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (case-lambda
         ((g$x$7417$eZ1vL)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7418$eZ1vL)
          (if (procedure? g$f$7418$eZ1vL)
            g$f$7418$eZ1vL
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7418$eZ1vL))))))
   (g$external-pending-libraries$7325$eZ1vL
     g$external-pending-libraries$7520$eZ1vL
     (g$make-parameter$6991$eZ1vL '()))
   (g$find-external-library$7326$eZ1vL
     g$find-external-library$7521$eZ1vL
     (case-lambda
       ((g$name$7419$eZ1vL)
        (begin
          (if (g$member$5057$eZ1vL
                g$name$7419$eZ1vL
                (g$external-pending-libraries$7325$eZ1vL))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7419$eZ1vL)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7422$eZ1vL
                g$external-pending-libraries$7423$eZ1vL)
              ((case-lambda
                 ((g$swap$7424$eZ1vL)
                  (dynamic-wind
                    g$swap$7424$eZ1vL
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$7323$eZ1vL) g$name$7419$eZ1vL)
                         ((case-lambda
                            ((g$t$7425$eZ1vL)
                             (if g$t$7425$eZ1vL
                               g$t$7425$eZ1vL
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7419$eZ1vL)))))
                          (g$find-library-by$7315$eZ1vL
                            (case-lambda
                              ((g$x$7426$eZ1vL)
                               (equal?
                                 (g$library-name$7286$eZ1vL g$x$7426$eZ1vL)
                                 g$name$7419$eZ1vL))))))))
                    g$swap$7424$eZ1vL)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7427$eZ1vL)
                      (begin
                        (g$external-pending-libraries$7422$eZ1vL
                          g$external-pending-libraries$7423$eZ1vL)
                        (set! g$external-pending-libraries$7423$eZ1vL
                          g$t$7427$eZ1vL))))
                   (g$external-pending-libraries$7422$eZ1vL)))))))
           g$external-pending-libraries$7325$eZ1vL
           (cons
             g$name$7419$eZ1vL
             (g$external-pending-libraries$7325$eZ1vL)))))))
   (g$find-library-by-name$7327$eZ1vL
     g$find-library-by-name$7522$eZ1vL
     (case-lambda
       ((g$name$7428$eZ1vL)
        ((case-lambda
           ((g$t$7429$eZ1vL)
            (if g$t$7429$eZ1vL
              g$t$7429$eZ1vL
              (begin
                '#f
                (g$find-external-library$7326$eZ1vL g$name$7428$eZ1vL)))))
         (g$find-library-by$7315$eZ1vL
           (case-lambda
             ((g$x$7430$eZ1vL)
              (equal?
                (g$library-name$7286$eZ1vL g$x$7430$eZ1vL)
                g$name$7428$eZ1vL))))))))
   (g$library-exists?$7328$eZ1vL
     g$library-exists?$7523$eZ1vL
     (case-lambda
       ((g$name$7431$eZ1vL)
        (if (g$find-library-by$7315$eZ1vL
              (case-lambda
                ((g$x$7432$eZ1vL)
                 (equal?
                   (g$library-name$7286$eZ1vL g$x$7432$eZ1vL)
                   g$name$7431$eZ1vL))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$7329$eZ1vL
     g$find-library-by-spec/die$7524$eZ1vL
     (case-lambda
       ((g$spec$7433$eZ1vL)
        ((case-lambda
           ((g$id$7434$eZ1vL)
            ((case-lambda
               ((g$t$7435$eZ1vL)
                (if g$t$7435$eZ1vL
                  g$t$7435$eZ1vL
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7433$eZ1vL)))))
             (g$find-library-by$7315$eZ1vL
               (case-lambda
                 ((g$x$7436$eZ1vL)
                  (eq? g$id$7434$eZ1vL
                       (g$library-id$7285$eZ1vL g$x$7436$eZ1vL))))))))
         (car g$spec$7433$eZ1vL)))))
   (g$label->binding-table$7330$eZ1vL
     g$label->binding-table$7525$eZ1vL
     (g$make-eq-hashtable$5538$eZ1vL))
   (g$install-library-record$7331$eZ1vL
     g$install-library-record$7526$eZ1vL
     (case-lambda
       ((g$lib$7437$eZ1vL)
        (begin
          ((case-lambda
             ((g$exp-env$7438$eZ1vL)
              (g$for-each$5064$eZ1vL
                (case-lambda
                  ((g$x$7439$eZ1vL)
                   ((case-lambda
                      ((g$label$7440$eZ1vL g$binding$7441$eZ1vL)
                       ((case-lambda
                          ((g$binding$7442$eZ1vL)
                           (g$hashtable-set!$5542$eZ1vL
                             g$label->binding-table$7330$eZ1vL
                             g$label$7440$eZ1vL
                             g$binding$7442$eZ1vL)))
                        ((case-lambda
                           ((g$t$7443$eZ1vL)
                            (if (g$memv$5056$eZ1vL g$t$7443$eZ1vL '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7437$eZ1vL
                                  (cdr g$binding$7441$eZ1vL)))
                              (if (g$memv$5056$eZ1vL
                                    g$t$7443$eZ1vL
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7437$eZ1vL
                                    (cdr g$binding$7441$eZ1vL)))
                                (if (g$memv$5056$eZ1vL
                                      g$t$7443$eZ1vL
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7437$eZ1vL
                                      (cdr g$binding$7441$eZ1vL)))
                                  g$binding$7441$eZ1vL)))))
                         (car g$binding$7441$eZ1vL)))))
                    (car g$x$7439$eZ1vL)
                    (cdr g$x$7439$eZ1vL))))
                g$exp-env$7438$eZ1vL)))
           (g$library-env$7292$eZ1vL g$lib$7437$eZ1vL))
          ((g$current-library-collection$7279$eZ1vL) g$lib$7437$eZ1vL)))))
   (g$install-library$7332$eZ1vL
     g$install-library$7527$eZ1vL
     (case-lambda
       ((g$id$7444$eZ1vL
          g$name$7445$eZ1vL
          g$ver$7446$eZ1vL
          g$imp*$7447$eZ1vL
          g$vis*$7448$eZ1vL
          g$inv*$7449$eZ1vL
          g$exp-subst$7450$eZ1vL
          g$exp-env$7451$eZ1vL
          g$visit-proc$7452$eZ1vL
          g$invoke-proc$7453$eZ1vL
          g$visit-code$7454$eZ1vL
          g$invoke-code$7455$eZ1vL
          g$visible?$7456$eZ1vL
          g$source-file-name$7457$eZ1vL)
        ((case-lambda
           ((g$imp-lib*$7458$eZ1vL g$vis-lib*$7459$eZ1vL g$inv-lib*$7460$eZ1vL)
            (begin
              (if (not (if (symbol? g$id$7444$eZ1vL)
                         (if (list? g$name$7445$eZ1vL)
                           (begin '#f (list? g$ver$7446$eZ1vL))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7444$eZ1vL
                  g$name$7445$eZ1vL
                  g$ver$7446$eZ1vL)
                (void))
              (if (g$library-exists?$7328$eZ1vL g$name$7445$eZ1vL)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7445$eZ1vL)
                (void))
              ((case-lambda
                 ((g$lib$7461$eZ1vL)
                  (g$install-library-record$7331$eZ1vL g$lib$7461$eZ1vL)))
               (g$make-library$7284$eZ1vL
                 g$id$7444$eZ1vL
                 g$name$7445$eZ1vL
                 g$ver$7446$eZ1vL
                 g$imp-lib*$7458$eZ1vL
                 g$vis-lib*$7459$eZ1vL
                 g$inv-lib*$7460$eZ1vL
                 g$exp-subst$7450$eZ1vL
                 g$exp-env$7451$eZ1vL
                 g$visit-proc$7452$eZ1vL
                 g$invoke-proc$7453$eZ1vL
                 g$visit-code$7454$eZ1vL
                 g$invoke-code$7455$eZ1vL
                 g$visible?$7456$eZ1vL
                 g$source-file-name$7457$eZ1vL)))))
         (g$map$5063$eZ1vL
           g$find-library-by-spec/die$7329$eZ1vL
           g$imp*$7447$eZ1vL)
         (g$map$5063$eZ1vL
           g$find-library-by-spec/die$7329$eZ1vL
           g$vis*$7448$eZ1vL)
         (g$map$5063$eZ1vL
           g$find-library-by-spec/die$7329$eZ1vL
           g$inv*$7449$eZ1vL)))))
   (g$imported-label->binding$7333$eZ1vL
     g$imported-label->binding$7528$eZ1vL
     (case-lambda
       ((g$lab$7462$eZ1vL)
        (g$hashtable-ref$5541$eZ1vL
          g$label->binding-table$7330$eZ1vL
          g$lab$7462$eZ1vL
          '#f))))
   (g$invoke-library$7334$eZ1vL
     g$invoke-library$7529$eZ1vL
     (case-lambda
       ((g$lib$7463$eZ1vL)
        ((case-lambda
           ((g$invoke$7464$eZ1vL)
            (if (procedure? g$invoke$7464$eZ1vL)
              (begin
                (g$set-library-invoke-state!$7308$eZ1vL
                  g$lib$7463$eZ1vL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7463$eZ1vL))))
                (g$for-each$5064$eZ1vL
                  g$invoke-library$7334$eZ1vL
                  (g$library-inv*$7290$eZ1vL g$lib$7463$eZ1vL))
                (g$set-library-invoke-state!$7308$eZ1vL
                  g$lib$7463$eZ1vL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7463$eZ1vL))))
                (g$invoke$7464$eZ1vL)
                (g$set-library-invoke-state!$7308$eZ1vL g$lib$7463$eZ1vL '#t))
              (void))))
         (g$library-invoke-state$7294$eZ1vL g$lib$7463$eZ1vL)))))
   (g$visit-library$7335$eZ1vL
     g$visit-library$7530$eZ1vL
     (case-lambda
       ((g$lib$7465$eZ1vL)
        ((case-lambda
           ((g$visit$7466$eZ1vL)
            (if (procedure? g$visit$7466$eZ1vL)
              (begin
                (g$set-library-visit-state!$7307$eZ1vL
                  g$lib$7465$eZ1vL
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7465$eZ1vL))))
                (g$for-each$5064$eZ1vL
                  g$invoke-library$7334$eZ1vL
                  (g$library-vis*$7289$eZ1vL g$lib$7465$eZ1vL))
                (g$set-library-visit-state!$7307$eZ1vL
                  g$lib$7465$eZ1vL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7465$eZ1vL))))
                (g$visit$7466$eZ1vL)
                (g$set-library-visit-state!$7307$eZ1vL g$lib$7465$eZ1vL '#t))
              (void))))
         (g$library-visit-state$7293$eZ1vL g$lib$7465$eZ1vL)))))
   (g$invoke-library-by-spec$7336$eZ1vL
     g$invoke-library-by-spec$7531$eZ1vL
     (case-lambda
       ((g$spec$7467$eZ1vL)
        (g$invoke-library$7334$eZ1vL
          (g$find-library-by-spec/die$7329$eZ1vL g$spec$7467$eZ1vL)))))
   (g$installed-libraries$7337$eZ1vL
     g$installed-libraries$7532$eZ1vL
     (case-lambda
       ((g$all?$7468$eZ1vL)
        ((letrec ((g$f$7469$eZ1vL
                    (case-lambda
                      ((g$ls$7470$eZ1vL)
                       (if (null? g$ls$7470$eZ1vL)
                         '()
                         (if ((case-lambda
                                ((g$t$7471$eZ1vL)
                                 (if g$t$7471$eZ1vL
                                   g$t$7471$eZ1vL
                                   (begin
                                     '#f
                                     (g$library-visible?$7297$eZ1vL
                                       (car g$ls$7470$eZ1vL))))))
                              g$all?$7468$eZ1vL)
                           (cons
                             (car g$ls$7470$eZ1vL)
                             (g$f$7469$eZ1vL (cdr g$ls$7470$eZ1vL)))
                           (g$f$7469$eZ1vL (cdr g$ls$7470$eZ1vL))))))))
           g$f$7469$eZ1vL)
         ((g$current-library-collection$7279$eZ1vL))))
       (() (g$installed-libraries$7337$eZ1vL '#f))))
   (g$library-spec$7338$eZ1vL
     g$library-spec$7533$eZ1vL
     (case-lambda
       ((g$x$7472$eZ1vL)
        (begin
          (if (not (g$library?$7283$eZ1vL g$x$7472$eZ1vL))
            (assertion-violation 'library-spec '"not a library" g$x$7472$eZ1vL)
            (void))
          (list
            (g$library-id$7285$eZ1vL g$x$7472$eZ1vL)
            (g$library-name$7286$eZ1vL g$x$7472$eZ1vL)
            (g$library-version$7287$eZ1vL g$x$7472$eZ1vL)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7534$eZ1vL
     g$build-global-define$7644$eZ1vL
     (case-lambda ((g$x$7615$eZ1vL) (g$build-void$7611$eZ1vL))))
   (g$build-lambda$7583$eZ1vL
     g$build-lambda$7645$eZ1vL
     (case-lambda
       ((g$ae$7616$eZ1vL g$vars$7617$eZ1vL g$exp$7618$eZ1vL)
        (list 'case-lambda (list g$vars$7617$eZ1vL g$exp$7618$eZ1vL)))))
   (g$build-case-lambda$7584$eZ1vL
     g$build-case-lambda$7646$eZ1vL
     (case-lambda
       ((g$ae$7619$eZ1vL g$vars*$7620$eZ1vL g$exp*$7621$eZ1vL)
        (cons
          'case-lambda
          (g$map$5063$eZ1vL list g$vars*$7620$eZ1vL g$exp*$7621$eZ1vL)))))
   (g$build-let$7585$eZ1vL
     g$build-let$7647$eZ1vL
     (case-lambda
       ((g$ae$7622$eZ1vL g$lhs*$7623$eZ1vL g$rhs*$7624$eZ1vL g$body$7625$eZ1vL)
        (cons
          (g$build-lambda$7583$eZ1vL
            g$ae$7622$eZ1vL
            g$lhs*$7623$eZ1vL
            g$body$7625$eZ1vL)
          g$rhs*$7624$eZ1vL))))
   (g$build-sequence$7610$eZ1vL
     g$build-sequence$7648$eZ1vL
     (case-lambda
       ((g$ae$7626$eZ1vL g$exps$7627$eZ1vL)
        ((letrec ((g$loop$7628$eZ1vL
                    (case-lambda
                      ((g$exps$7629$eZ1vL)
                       (if (null? (cdr g$exps$7629$eZ1vL))
                         (car g$exps$7629$eZ1vL)
                         (if (equal?
                               (car g$exps$7629$eZ1vL)
                               (g$build-void$7611$eZ1vL))
                           (g$loop$7628$eZ1vL (cdr g$exps$7629$eZ1vL))
                           (cons 'begin g$exps$7629$eZ1vL)))))))
           g$loop$7628$eZ1vL)
         g$exps$7627$eZ1vL))))
   (g$build-void$7611$eZ1vL
     g$build-void$7649$eZ1vL
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7612$eZ1vL
     g$build-letrec$7650$eZ1vL
     (case-lambda
       ((g$ae$7630$eZ1vL
          g$vars$7631$eZ1vL
          g$val-exps$7632$eZ1vL
          g$body-exp$7633$eZ1vL)
        (if (null? g$vars$7631$eZ1vL)
          g$body-exp$7633$eZ1vL
          (list
            'letrec
            (g$map$5063$eZ1vL list g$vars$7631$eZ1vL g$val-exps$7632$eZ1vL)
            g$body-exp$7633$eZ1vL)))))
   (g$build-letrec*$7613$eZ1vL
     g$build-letrec*$7651$eZ1vL
     (case-lambda
       ((g$ae$7634$eZ1vL
          g$vars$7635$eZ1vL
          g$val-exps$7636$eZ1vL
          g$body-exp$7637$eZ1vL)
        (if (null? g$vars$7635$eZ1vL)
          g$body-exp$7637$eZ1vL
          (list
            'letrec*
            (g$map$5063$eZ1vL list g$vars$7635$eZ1vL g$val-exps$7636$eZ1vL)
            g$body-exp$7637$eZ1vL)))))
   (g$build-library-letrec*$7614$eZ1vL
     g$build-library-letrec*$7652$eZ1vL
     (case-lambda
       ((g$ae$7638$eZ1vL
          g$name$7639$eZ1vL
          g$vars$7640$eZ1vL
          g$locs$7641$eZ1vL
          g$val-exps$7642$eZ1vL
          g$body-exp$7643$eZ1vL)
        (list
          'library-letrec*
          g$name$7639$eZ1vL
          (g$map$5063$eZ1vL
            list
            g$vars$7640$eZ1vL
            g$locs$7641$eZ1vL
            g$val-exps$7642$eZ1vL)
          g$body-exp$7643$eZ1vL)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7653$eZ1vL
     g$set-cons$11349$eZ1vL
     (case-lambda
       ((g$x$8118$eZ1vL g$ls$8119$eZ1vL)
        (if (g$memq$5055$eZ1vL g$x$8118$eZ1vL g$ls$8119$eZ1vL)
          g$ls$8119$eZ1vL
          (cons g$x$8118$eZ1vL g$ls$8119$eZ1vL)))))
   (g$set-union$7654$eZ1vL
     g$set-union$11350$eZ1vL
     (case-lambda
       ((g$ls1$8120$eZ1vL g$ls2$8121$eZ1vL)
        (if (null? g$ls1$8120$eZ1vL)
          g$ls2$8121$eZ1vL
          (if (g$memq$5055$eZ1vL (car g$ls1$8120$eZ1vL) g$ls2$8121$eZ1vL)
            (g$set-union$7654$eZ1vL (cdr g$ls1$8120$eZ1vL) g$ls2$8121$eZ1vL)
            (cons
              (car g$ls1$8120$eZ1vL)
              (g$set-union$7654$eZ1vL
                (cdr g$ls1$8120$eZ1vL)
                g$ls2$8121$eZ1vL)))))))
   (g$top-mark*$7656$eZ1vL g$top-mark*$11351$eZ1vL '(top))
   (g$top-marked?$7657$eZ1vL
     g$top-marked?$11352$eZ1vL
     (case-lambda
       ((g$m*$8122$eZ1vL) (g$memq$5055$eZ1vL 'top g$m*$8122$eZ1vL))))
   (g$gen-lexical$7658$eZ1vL
     g$gen-lexical$11353$eZ1vL
     (case-lambda
       ((g$sym$8123$eZ1vL)
        (if (symbol? g$sym$8123$eZ1vL)
          (gensym g$sym$8123$eZ1vL)
          (if (g$stx?$7691$eZ1vL g$sym$8123$eZ1vL)
            (g$gen-lexical$7658$eZ1vL (g$id->sym$7720$eZ1vL g$sym$8123$eZ1vL))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$8123$eZ1vL))))))
   (g$gen-global$7659$eZ1vL
     g$gen-global$11354$eZ1vL
     (case-lambda
       ((g$x$8124$eZ1vL) (g$gen-lexical$7658$eZ1vL g$x$8124$eZ1vL))))
   (g$gen-label$7660$eZ1vL
     g$gen-label$11355$eZ1vL
     (case-lambda ((g$_$8125$eZ1vL) (gensym))))
   (g$gen-top-level-label$7661$eZ1vL
     g$gen-top-level-label$11356$eZ1vL
     (case-lambda
       ((g$id$8126$eZ1vL g$rib$8127$eZ1vL)
        (letrec* ((g$find$8128$eZ1vL
                    (case-lambda
                      ((g$sym$8134$eZ1vL
                         g$mark*$8135$eZ1vL
                         g$sym*$8136$eZ1vL
                         g$mark**$8137$eZ1vL
                         g$label*$8138$eZ1vL)
                       (if (pair? g$sym*$8136$eZ1vL)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8134$eZ1vL
                                        (car g$sym*$8136$eZ1vL))
                                 (begin
                                   '#f
                                   (g$same-marks?$7721$eZ1vL
                                     g$mark*$8135$eZ1vL
                                     (car g$mark**$8137$eZ1vL)))
                                 '#f)
                             (car g$label*$8138$eZ1vL)
                             (g$find$8128$eZ1vL
                               g$sym$8134$eZ1vL
                               g$mark*$8135$eZ1vL
                               (cdr g$sym*$8136$eZ1vL)
                               (cdr g$mark**$8137$eZ1vL)
                               (cdr g$label*$8138$eZ1vL))))
                         '#f)))))
          ((case-lambda
             ((g$sym$8129$eZ1vL g$mark*$8130$eZ1vL)
              ((case-lambda
                 ((g$sym*$8131$eZ1vL)
                  ((case-lambda
                     ((g$t$8132$eZ1vL)
                      (if g$t$8132$eZ1vL
                        ((case-lambda
                           ((g$label$8133$eZ1vL)
                            (if (g$imported-label->binding$7528$eZ1vL
                                  g$label$8133$eZ1vL)
                              (gensym)
                              g$label$8133$eZ1vL)))
                         g$t$8132$eZ1vL)
                        (gensym))))
                   (if (g$memq$5055$eZ1vL
                         g$sym$8129$eZ1vL
                         (g$rib-sym*$7669$eZ1vL g$rib$8127$eZ1vL))
                     (begin
                       '#f
                       (g$find$8128$eZ1vL
                         g$sym$8129$eZ1vL
                         g$mark*$8130$eZ1vL
                         g$sym*$8131$eZ1vL
                         (g$rib-mark**$7670$eZ1vL g$rib$8127$eZ1vL)
                         (g$rib-label*$7671$eZ1vL g$rib$8127$eZ1vL)))
                     '#f))))
               (g$rib-sym*$7669$eZ1vL g$rib$8127$eZ1vL))))
           (g$id->sym$7720$eZ1vL g$id$8126$eZ1vL)
           (g$stx-mark*$7694$eZ1vL g$id$8126$eZ1vL))))))
   (g$gen-define-label+loc$7662$eZ1vL
     g$gen-define-label+loc$11357$eZ1vL
     (case-lambda
       ((g$id$8139$eZ1vL g$rib$8140$eZ1vL g$sd?$8141$eZ1vL)
        (if g$sd?$8141$eZ1vL
          (values (gensym) (g$gen-lexical$7658$eZ1vL g$id$8139$eZ1vL))
          ((case-lambda
             ((g$env$8142$eZ1vL)
              ((case-lambda
                 ((g$label$8143$eZ1vL g$locs$8144$eZ1vL)
                  (values
                    g$label$8143$eZ1vL
                    ((case-lambda
                       ((g$t$8145$eZ1vL)
                        (if g$t$8145$eZ1vL
                          (cdr g$t$8145$eZ1vL)
                          ((case-lambda
                             ((g$loc$8146$eZ1vL)
                              (begin
                                (g$set-interaction-env-locs!$8080$eZ1vL
                                  g$env$8142$eZ1vL
                                  (cons
                                    (cons g$label$8143$eZ1vL g$loc$8146$eZ1vL)
                                    g$locs$8144$eZ1vL))
                                g$loc$8146$eZ1vL)))
                           (g$gen-lexical$7658$eZ1vL g$id$8139$eZ1vL)))))
                     (g$assq$5051$eZ1vL
                       g$label$8143$eZ1vL
                       g$locs$8144$eZ1vL)))))
               (g$gen-top-level-label$7661$eZ1vL
                 g$id$8139$eZ1vL
                 g$rib$8140$eZ1vL)
               (g$interaction-env-locs$8077$eZ1vL g$env$8142$eZ1vL))))
           (g$top-level-context$8117$eZ1vL))))))
   (g$gen-define-label$7663$eZ1vL
     g$gen-define-label$11358$eZ1vL
     (case-lambda
       ((g$id$8147$eZ1vL g$rib$8148$eZ1vL g$sd?$8149$eZ1vL)
        (if g$sd?$8149$eZ1vL
          (gensym)
          (g$gen-top-level-label$7661$eZ1vL
            g$id$8147$eZ1vL
            g$rib$8148$eZ1vL)))))
   (g$8670$7664$eZ1vL
     g$8670$11359$eZ1vL
     (make-record-type-descriptor
       'rib
       '#f
       'g$8673$eZ1vL
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8672$7665$eZ1vL g$8672$11360$eZ1vL '#f)
   (g$8671$7666$eZ1vL
     g$8671$11361$eZ1vL
     (make-record-constructor-descriptor
       g$8670$7664$eZ1vL
       '#f
       g$8672$7665$eZ1vL))
   (g$rib?$7667$eZ1vL
     g$rib?$11362$eZ1vL
     (record-predicate g$8670$7664$eZ1vL))
   (g$make-rib$7668$eZ1vL
     g$make-rib$11363$eZ1vL
     (record-constructor g$8671$7666$eZ1vL))
   (g$rib-sym*$7669$eZ1vL
     g$rib-sym*$11364$eZ1vL
     (record-accessor g$8670$7664$eZ1vL '0))
   (g$rib-mark**$7670$eZ1vL
     g$rib-mark**$11365$eZ1vL
     (record-accessor g$8670$7664$eZ1vL '1))
   (g$rib-label*$7671$eZ1vL
     g$rib-label*$11366$eZ1vL
     (record-accessor g$8670$7664$eZ1vL '2))
   (g$rib-sealed/freq$7672$eZ1vL
     g$rib-sealed/freq$11367$eZ1vL
     (record-accessor g$8670$7664$eZ1vL '3))
   (g$rib-cache$7673$eZ1vL
     g$rib-cache$11368$eZ1vL
     (record-accessor g$8670$7664$eZ1vL '4))
   (g$set-rib-sym*!$7674$eZ1vL
     g$set-rib-sym*!$11369$eZ1vL
     (record-mutator g$8670$7664$eZ1vL '0))
   (g$set-rib-mark**!$7675$eZ1vL
     g$set-rib-mark**!$11370$eZ1vL
     (record-mutator g$8670$7664$eZ1vL '1))
   (g$set-rib-label*!$7676$eZ1vL
     g$set-rib-label*!$11371$eZ1vL
     (record-mutator g$8670$7664$eZ1vL '2))
   (g$set-rib-sealed/freq!$7677$eZ1vL
     g$set-rib-sealed/freq!$11372$eZ1vL
     (record-mutator g$8670$7664$eZ1vL '3))
   (g$set-rib-cache!$7678$eZ1vL
     g$set-rib-cache!$11373$eZ1vL
     (record-mutator g$8670$7664$eZ1vL '4))
   (g$make-empty-rib$7679$eZ1vL
     g$make-empty-rib$11374$eZ1vL
     (case-lambda (() (g$make-rib$7668$eZ1vL '() '() '() '#f '#f))))
   (g$make-cache-rib$7680$eZ1vL
     g$make-cache-rib$11375$eZ1vL
     (case-lambda
       (()
        (g$make-rib$7668$eZ1vL
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5538$eZ1vL)))))
   (g$find-label$7681$eZ1vL
     g$find-label$11376$eZ1vL
     (case-lambda
       ((g$rib$8150$eZ1vL g$sym$8151$eZ1vL g$mark*$8152$eZ1vL)
        ((case-lambda
           ((g$ht$8153$eZ1vL)
            (if g$ht$8153$eZ1vL
              (begin
                '#f
                ((case-lambda
                   ((g$cv$8154$eZ1vL)
                    ((case-lambda
                       ((g$t$8155$eZ1vL)
                        (if g$t$8155$eZ1vL (cdr g$t$8155$eZ1vL) '#f)))
                     (if g$cv$8154$eZ1vL
                       (begin
                         '#f
                         (g$assp$5054$eZ1vL
                           (case-lambda
                             ((g$m$8156$eZ1vL)
                              (g$same-marks?$7721$eZ1vL
                                g$mark*$8152$eZ1vL
                                g$m$8156$eZ1vL)))
                           g$cv$8154$eZ1vL))
                       '#f))))
                 (g$hashtable-ref$5541$eZ1vL
                   g$ht$8153$eZ1vL
                   g$sym$8151$eZ1vL
                   '#f)))
              '#f)))
         (g$rib-cache$7673$eZ1vL g$rib$8150$eZ1vL)))))
   (g$extend-rib!$7682$eZ1vL
     g$extend-rib!$11377$eZ1vL
     (case-lambda
       ((g$rib$8157$eZ1vL g$id$8158$eZ1vL g$label$8159$eZ1vL g$sd?$8160$eZ1vL)
        (letrec* ((g$find$8161$eZ1vL
                    (case-lambda
                      ((g$sym$8170$eZ1vL
                         g$mark*$8171$eZ1vL
                         g$sym*$8172$eZ1vL
                         g$mark**$8173$eZ1vL
                         g$label*$8174$eZ1vL)
                       (if (pair? g$sym*$8172$eZ1vL)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8170$eZ1vL
                                        (car g$sym*$8172$eZ1vL))
                                 (begin
                                   '#f
                                   (g$same-marks?$7721$eZ1vL
                                     g$mark*$8171$eZ1vL
                                     (car g$mark**$8173$eZ1vL)))
                                 '#f)
                             g$label*$8174$eZ1vL
                             (g$find$8161$eZ1vL
                               g$sym$8170$eZ1vL
                               g$mark*$8171$eZ1vL
                               (cdr g$sym*$8172$eZ1vL)
                               (cdr g$mark**$8173$eZ1vL)
                               (cdr g$label*$8174$eZ1vL))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7672$eZ1vL g$rib$8157$eZ1vL)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$8157$eZ1vL)
              (void))
            ((case-lambda
               ((g$sym$8162$eZ1vL g$mark*$8163$eZ1vL)
                ((case-lambda
                   ((g$sym*$8164$eZ1vL)
                    ((case-lambda
                       ((g$t$8165$eZ1vL)
                        (if g$t$8165$eZ1vL
                          ((case-lambda
                             ((g$p$8166$eZ1vL)
                              (if (not (eq? g$label$8159$eZ1vL g$p$8166$eZ1vL))
                                (g$syntax-violation$8109$eZ1vL
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$8158$eZ1vL)
                                (void))))
                           g$t$8165$eZ1vL)
                          ((case-lambda
                             ((g$t$8167$eZ1vL)
                              (if g$t$8167$eZ1vL
                                ((case-lambda
                                   ((g$p$8168$eZ1vL)
                                    (if (not (eq? g$label$8159$eZ1vL
                                                  (car g$p$8168$eZ1vL)))
                                      (if (not g$sd?$8160$eZ1vL)
                                        (set-car!
                                          g$p$8168$eZ1vL
                                          g$label$8159$eZ1vL)
                                        (g$syntax-violation$8109$eZ1vL
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$8158$eZ1vL))
                                      (void))))
                                 g$t$8167$eZ1vL)
                                (begin
                                  (if (g$rib-cache$7673$eZ1vL g$rib$8157$eZ1vL)
                                    (g$hashtable-update!$5545$eZ1vL
                                      (g$rib-cache$7673$eZ1vL g$rib$8157$eZ1vL)
                                      g$sym$8162$eZ1vL
                                      (case-lambda
                                        ((g$e$8169$eZ1vL)
                                         (cons
                                           (cons
                                             g$mark*$8163$eZ1vL
                                             g$label$8159$eZ1vL)
                                           g$e$8169$eZ1vL)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7674$eZ1vL
                                    g$rib$8157$eZ1vL
                                    (cons g$sym$8162$eZ1vL g$sym*$8164$eZ1vL))
                                  (g$set-rib-mark**!$7675$eZ1vL
                                    g$rib$8157$eZ1vL
                                    (cons
                                      g$mark*$8163$eZ1vL
                                      (g$rib-mark**$7670$eZ1vL
                                        g$rib$8157$eZ1vL)))
                                  (g$set-rib-label*!$7676$eZ1vL
                                    g$rib$8157$eZ1vL
                                    (cons
                                      g$label$8159$eZ1vL
                                      (g$rib-label*$7671$eZ1vL
                                        g$rib$8157$eZ1vL)))))))
                           (if (g$memq$5055$eZ1vL
                                 g$sym$8162$eZ1vL
                                 (g$rib-sym*$7669$eZ1vL g$rib$8157$eZ1vL))
                             (begin
                               '#f
                               (g$find$8161$eZ1vL
                                 g$sym$8162$eZ1vL
                                 g$mark*$8163$eZ1vL
                                 g$sym*$8164$eZ1vL
                                 (g$rib-mark**$7670$eZ1vL g$rib$8157$eZ1vL)
                                 (g$rib-label*$7671$eZ1vL g$rib$8157$eZ1vL)))
                             '#f)))))
                     (g$find-label$7681$eZ1vL
                       g$rib$8157$eZ1vL
                       g$sym$8162$eZ1vL
                       g$mark*$8163$eZ1vL))))
                 (g$rib-sym*$7669$eZ1vL g$rib$8157$eZ1vL))))
             (g$id->sym$7720$eZ1vL g$id$8158$eZ1vL)
             (g$stx-mark*$7694$eZ1vL g$id$8158$eZ1vL)))))))
   (g$extend-rib/nc!$7683$eZ1vL
     g$extend-rib/nc!$11378$eZ1vL
     (case-lambda
       ((g$rib$8175$eZ1vL g$id$8176$eZ1vL g$label$8177$eZ1vL)
        ((case-lambda
           ((g$sym$8178$eZ1vL g$mark*$8179$eZ1vL)
            ((case-lambda
               ((g$sym*$8180$eZ1vL)
                (begin
                  (if (g$rib-cache$7673$eZ1vL g$rib$8175$eZ1vL)
                    (g$hashtable-update!$5545$eZ1vL
                      (g$rib-cache$7673$eZ1vL g$rib$8175$eZ1vL)
                      g$sym$8178$eZ1vL
                      (case-lambda
                        ((g$e$8181$eZ1vL)
                         (cons
                           (cons g$mark*$8179$eZ1vL g$label$8177$eZ1vL)
                           g$e$8181$eZ1vL)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7674$eZ1vL
                    g$rib$8175$eZ1vL
                    (cons g$sym$8178$eZ1vL g$sym*$8180$eZ1vL))
                  (g$set-rib-mark**!$7675$eZ1vL
                    g$rib$8175$eZ1vL
                    (cons
                      g$mark*$8179$eZ1vL
                      (g$rib-mark**$7670$eZ1vL g$rib$8175$eZ1vL)))
                  (g$set-rib-label*!$7676$eZ1vL
                    g$rib$8175$eZ1vL
                    (cons
                      g$label$8177$eZ1vL
                      (g$rib-label*$7671$eZ1vL g$rib$8175$eZ1vL))))))
             (g$rib-sym*$7669$eZ1vL g$rib$8175$eZ1vL))))
         (g$id->sym$7720$eZ1vL g$id$8176$eZ1vL)
         (g$stx-mark*$7694$eZ1vL g$id$8176$eZ1vL)))))
   (g$make-rib-map$7684$eZ1vL
     g$make-rib-map$11379$eZ1vL
     (case-lambda
       ((g$sym*$8182$eZ1vL)
        ((case-lambda
           ((g$ht$8183$eZ1vL)
            ((letrec ((g$f$8184$eZ1vL
                        (case-lambda
                          ((g$i$8185$eZ1vL g$sym*$8186$eZ1vL)
                           (if (null? g$sym*$8186$eZ1vL)
                             g$ht$8183$eZ1vL
                             (begin
                               (g$hashtable-update!$5545$eZ1vL
                                 g$ht$8183$eZ1vL
                                 (car g$sym*$8186$eZ1vL)
                                 (case-lambda
                                   ((g$x$8187$eZ1vL)
                                    (cons g$i$8185$eZ1vL g$x$8187$eZ1vL)))
                                 '())
                               (g$f$8184$eZ1vL
                                 (+ g$i$8185$eZ1vL '1)
                                 (cdr g$sym*$8186$eZ1vL))))))))
               g$f$8184$eZ1vL)
             '0
             g$sym*$8182$eZ1vL)))
         (g$make-eq-hashtable$5538$eZ1vL)))))
   (g$seal-rib!$7685$eZ1vL
     g$seal-rib!$11380$eZ1vL
     (case-lambda
       ((g$rib$8188$eZ1vL)
        ((case-lambda
           ((g$sym*$8189$eZ1vL)
            (if (not (null? g$sym*$8189$eZ1vL))
              (begin
                (g$set-rib-sym*!$7674$eZ1vL
                  g$rib$8188$eZ1vL
                  (list->vector g$sym*$8189$eZ1vL))
                (g$set-rib-mark**!$7675$eZ1vL
                  g$rib$8188$eZ1vL
                  (list->vector (g$rib-mark**$7670$eZ1vL g$rib$8188$eZ1vL)))
                (g$set-rib-label*!$7676$eZ1vL
                  g$rib$8188$eZ1vL
                  (list->vector (g$rib-label*$7671$eZ1vL g$rib$8188$eZ1vL)))
                (g$set-rib-sealed/freq!$7677$eZ1vL
                  g$rib$8188$eZ1vL
                  (g$make-rib-map$7684$eZ1vL g$sym*$8189$eZ1vL)))
              (void))))
         (g$rib-sym*$7669$eZ1vL g$rib$8188$eZ1vL)))))
   (g$unseal-rib!$7686$eZ1vL
     g$unseal-rib!$11381$eZ1vL
     (case-lambda
       ((g$rib$8190$eZ1vL)
        (if (g$rib-sealed/freq$7672$eZ1vL g$rib$8190$eZ1vL)
          (begin
            (g$set-rib-sealed/freq!$7677$eZ1vL g$rib$8190$eZ1vL '#f)
            (g$set-rib-sym*!$7674$eZ1vL
              g$rib$8190$eZ1vL
              (vector->list (g$rib-sym*$7669$eZ1vL g$rib$8190$eZ1vL)))
            (g$set-rib-mark**!$7675$eZ1vL
              g$rib$8190$eZ1vL
              (vector->list (g$rib-mark**$7670$eZ1vL g$rib$8190$eZ1vL)))
            (g$set-rib-label*!$7676$eZ1vL
              g$rib$8190$eZ1vL
              (vector->list (g$rib-label*$7671$eZ1vL g$rib$8190$eZ1vL))))
          (void)))))
   (g$make-full-rib$7687$eZ1vL
     g$make-full-rib$11382$eZ1vL
     (case-lambda
       ((g$id*$8191$eZ1vL g$label*$8192$eZ1vL)
        ((case-lambda
           ((g$r$8193$eZ1vL)
            (begin (g$seal-rib!$7685$eZ1vL g$r$8193$eZ1vL) g$r$8193$eZ1vL)))
         (g$make-rib$7668$eZ1vL
           (g$map$5063$eZ1vL g$id->sym$7720$eZ1vL g$id*$8191$eZ1vL)
           (g$map$5063$eZ1vL g$stx-mark*$7694$eZ1vL g$id*$8191$eZ1vL)
           g$label*$8192$eZ1vL
           '#f
           '#f)))))
   (g$8701$7688$eZ1vL
     g$8701$11383$eZ1vL
     (make-record-type-descriptor
       'stx
       '#f
       'g$8704$eZ1vL
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8703$7689$eZ1vL g$8703$11384$eZ1vL '#f)
   (g$8702$7690$eZ1vL
     g$8702$11385$eZ1vL
     (make-record-constructor-descriptor
       g$8701$7688$eZ1vL
       '#f
       g$8703$7689$eZ1vL))
   (g$stx?$7691$eZ1vL
     g$stx?$11386$eZ1vL
     (record-predicate g$8701$7688$eZ1vL))
   (g$make-stx$7692$eZ1vL
     g$make-stx$11387$eZ1vL
     (record-constructor g$8702$7690$eZ1vL))
   (g$stx-expr$7693$eZ1vL
     g$stx-expr$11388$eZ1vL
     (record-accessor g$8701$7688$eZ1vL '0))
   (g$stx-mark*$7694$eZ1vL
     g$stx-mark*$11389$eZ1vL
     (record-accessor g$8701$7688$eZ1vL '1))
   (g$stx-subst*$7695$eZ1vL
     g$stx-subst*$11390$eZ1vL
     (record-accessor g$8701$7688$eZ1vL '2))
   (g$stx-ae*$7696$eZ1vL
     g$stx-ae*$11391$eZ1vL
     (record-accessor g$8701$7688$eZ1vL '3))
   (g$set-stx-expr!$7697$eZ1vL
     g$set-stx-expr!$11392$eZ1vL
     (record-mutator g$8701$7688$eZ1vL '0))
   (g$set-stx-mark*!$7698$eZ1vL
     g$set-stx-mark*!$11393$eZ1vL
     (record-mutator g$8701$7688$eZ1vL '1))
   (g$set-stx-subst*!$7699$eZ1vL
     g$set-stx-subst*!$11394$eZ1vL
     (record-mutator g$8701$7688$eZ1vL '2))
   (g$set-stx-ae*!$7700$eZ1vL
     g$set-stx-ae*!$11395$eZ1vL
     (record-mutator g$8701$7688$eZ1vL '3))
   (g$rp$7701$eZ1vL
     g$rp$11396$eZ1vL
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$8194$eZ1vL g$p$8195$eZ1vL g$wr$8196$eZ1vL)
          (begin
            (display '"#<syntax " g$p$8195$eZ1vL)
            (write (g$stx->datum$7730$eZ1vL g$x$8194$eZ1vL) g$p$8195$eZ1vL)
            ((case-lambda
               ((g$expr$8197$eZ1vL)
                (if (annotation? g$expr$8197$eZ1vL)
                  ((case-lambda
                     ((g$src$8198$eZ1vL)
                      (if (pair? g$src$8198$eZ1vL)
                        (begin
                          (display '" (" g$p$8195$eZ1vL)
                          (display (cdr g$src$8198$eZ1vL) g$p$8195$eZ1vL)
                          (display '" of " g$p$8195$eZ1vL)
                          (display (car g$src$8198$eZ1vL) g$p$8195$eZ1vL)
                          (display '")" g$p$8195$eZ1vL))
                        (void))))
                   (annotation-source g$expr$8197$eZ1vL))
                  (void))))
             (g$stx-expr$7693$eZ1vL g$x$8194$eZ1vL))
            (display '">" g$p$8195$eZ1vL))))))
   (g$datum->stx$7702$eZ1vL
     g$datum->stx$11397$eZ1vL
     (case-lambda
       ((g$id$8199$eZ1vL g$datum$8200$eZ1vL)
        (g$make-stx$7692$eZ1vL
          g$datum$8200$eZ1vL
          (g$stx-mark*$7694$eZ1vL g$id$8199$eZ1vL)
          (g$stx-subst*$7695$eZ1vL g$id$8199$eZ1vL)
          (g$stx-ae*$7696$eZ1vL g$id$8199$eZ1vL)))))
   (g$gen-mark$7703$eZ1vL
     g$gen-mark$11398$eZ1vL
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7704$eZ1vL g$anti-mark$11399$eZ1vL '#f)
   (g$anti-mark?$7705$eZ1vL g$anti-mark?$11400$eZ1vL not)
   (g$join-wraps$7706$eZ1vL
     g$join-wraps$11401$eZ1vL
     (case-lambda
       ((g$m1*$8201$eZ1vL g$s1*$8202$eZ1vL g$ae1*$8203$eZ1vL g$e$8204$eZ1vL)
        (letrec* ((g$cancel$8205$eZ1vL
                    (case-lambda
                      ((g$ls1$8209$eZ1vL g$ls2$8210$eZ1vL)
                       ((letrec ((g$f$8211$eZ1vL
                                   (case-lambda
                                     ((g$x$8212$eZ1vL g$ls1$8213$eZ1vL)
                                      (if (null? g$ls1$8213$eZ1vL)
                                        (cdr g$ls2$8210$eZ1vL)
                                        (cons
                                          g$x$8212$eZ1vL
                                          (g$f$8211$eZ1vL
                                            (car g$ls1$8213$eZ1vL)
                                            (cdr g$ls1$8213$eZ1vL))))))))
                          g$f$8211$eZ1vL)
                        (car g$ls1$8209$eZ1vL)
                        (cdr g$ls1$8209$eZ1vL))))))
          ((case-lambda
             ((g$m2*$8206$eZ1vL g$s2*$8207$eZ1vL g$ae2*$8208$eZ1vL)
              (if (if (not (null? g$m1*$8201$eZ1vL))
                    (if (not (null? g$m2*$8206$eZ1vL))
                      (begin
                        '#f
                        (g$anti-mark?$7705$eZ1vL (car g$m2*$8206$eZ1vL)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$8205$eZ1vL g$m1*$8201$eZ1vL g$m2*$8206$eZ1vL)
                  (g$cancel$8205$eZ1vL g$s1*$8202$eZ1vL g$s2*$8207$eZ1vL)
                  (g$cancel$8205$eZ1vL g$ae1*$8203$eZ1vL g$ae2*$8208$eZ1vL))
                (values
                  (append g$m1*$8201$eZ1vL g$m2*$8206$eZ1vL)
                  (append g$s1*$8202$eZ1vL g$s2*$8207$eZ1vL)
                  (append g$ae1*$8203$eZ1vL g$ae2*$8208$eZ1vL)))))
           (g$stx-mark*$7694$eZ1vL g$e$8204$eZ1vL)
           (g$stx-subst*$7695$eZ1vL g$e$8204$eZ1vL)
           (g$stx-ae*$7696$eZ1vL g$e$8204$eZ1vL))))))
   (g$mkstx$7707$eZ1vL
     g$mkstx$11402$eZ1vL
     (case-lambda
       ((g$e$8214$eZ1vL g$m*$8215$eZ1vL g$s*$8216$eZ1vL g$ae*$8217$eZ1vL)
        (if (if (g$stx?$7691$eZ1vL g$e$8214$eZ1vL)
              (begin '#f (not (g$top-marked?$7657$eZ1vL g$m*$8215$eZ1vL)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7706$eZ1vL
                 g$m*$8215$eZ1vL
                 g$s*$8216$eZ1vL
                 g$ae*$8217$eZ1vL
                 g$e$8214$eZ1vL)))
            (case-lambda
              ((g$m*$8221$eZ1vL g$s*$8222$eZ1vL g$ae*$8223$eZ1vL)
               ((case-lambda
                  ((g$ae*$8224$eZ1vL g$s*$8225$eZ1vL g$m*$8226$eZ1vL)
                   (g$make-stx$7692$eZ1vL
                     (g$stx-expr$7693$eZ1vL g$e$8214$eZ1vL)
                     g$m*$8226$eZ1vL
                     g$s*$8225$eZ1vL
                     g$ae*$8224$eZ1vL)))
                g$ae*$8223$eZ1vL
                g$s*$8222$eZ1vL
                g$m*$8221$eZ1vL))))
          (g$make-stx$7692$eZ1vL
            g$e$8214$eZ1vL
            g$m*$8215$eZ1vL
            g$s*$8216$eZ1vL
            g$ae*$8217$eZ1vL)))))
   (g$add-mark$7708$eZ1vL
     g$add-mark$11403$eZ1vL
     (case-lambda
       ((g$m$8227$eZ1vL g$e$8228$eZ1vL g$ae$8229$eZ1vL)
        (g$mkstx$7707$eZ1vL
          g$e$8228$eZ1vL
          (list g$m$8227$eZ1vL)
          '(shift)
          (list g$ae$8229$eZ1vL)))))
   (g$add-subst$7709$eZ1vL
     g$add-subst$11404$eZ1vL
     (case-lambda
       ((g$subst$8230$eZ1vL g$e$8231$eZ1vL)
        (g$mkstx$7707$eZ1vL g$e$8231$eZ1vL '() (list g$subst$8230$eZ1vL) '()))))
   (g$syntax-kind?$7710$eZ1vL
     g$syntax-kind?$11405$eZ1vL
     (case-lambda
       ((g$x$8232$eZ1vL g$p?$8233$eZ1vL)
        (if (g$stx?$7691$eZ1vL g$x$8232$eZ1vL)
          (g$syntax-kind?$7710$eZ1vL
            (g$stx-expr$7693$eZ1vL g$x$8232$eZ1vL)
            g$p?$8233$eZ1vL)
          (if (annotation? g$x$8232$eZ1vL)
            (g$syntax-kind?$7710$eZ1vL
              (annotation-expression g$x$8232$eZ1vL)
              g$p?$8233$eZ1vL)
            (g$p?$8233$eZ1vL g$x$8232$eZ1vL))))))
   (g$syntax-vector->list$7711$eZ1vL
     g$syntax-vector->list$11406$eZ1vL
     (case-lambda
       ((g$x$8234$eZ1vL)
        (if (g$stx?$7691$eZ1vL g$x$8234$eZ1vL)
          ((case-lambda
             ((g$ls$8235$eZ1vL g$m*$8236$eZ1vL g$s*$8237$eZ1vL g$ae*$8238$eZ1vL)
              (g$map$5063$eZ1vL
                (case-lambda
                  ((g$x$8239$eZ1vL)
                   (g$mkstx$7707$eZ1vL
                     g$x$8239$eZ1vL
                     g$m*$8236$eZ1vL
                     g$s*$8237$eZ1vL
                     g$ae*$8238$eZ1vL)))
                g$ls$8235$eZ1vL)))
           (g$syntax-vector->list$7711$eZ1vL
             (g$stx-expr$7693$eZ1vL g$x$8234$eZ1vL))
           (g$stx-mark*$7694$eZ1vL g$x$8234$eZ1vL)
           (g$stx-subst*$7695$eZ1vL g$x$8234$eZ1vL)
           (g$stx-ae*$7696$eZ1vL g$x$8234$eZ1vL))
          (if (annotation? g$x$8234$eZ1vL)
            (g$syntax-vector->list$7711$eZ1vL
              (annotation-expression g$x$8234$eZ1vL))
            (if (vector? g$x$8234$eZ1vL)
              (vector->list g$x$8234$eZ1vL)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$8234$eZ1vL)))))))
   (g$syntax-pair?$7712$eZ1vL
     g$syntax-pair?$11407$eZ1vL
     (case-lambda
       ((g$x$8240$eZ1vL) (g$syntax-kind?$7710$eZ1vL g$x$8240$eZ1vL pair?))))
   (g$syntax-vector?$7713$eZ1vL
     g$syntax-vector?$11408$eZ1vL
     (case-lambda
       ((g$x$8241$eZ1vL) (g$syntax-kind?$7710$eZ1vL g$x$8241$eZ1vL vector?))))
   (g$syntax-null?$7714$eZ1vL
     g$syntax-null?$11409$eZ1vL
     (case-lambda
       ((g$x$8242$eZ1vL) (g$syntax-kind?$7710$eZ1vL g$x$8242$eZ1vL null?))))
   (g$syntax-list?$7715$eZ1vL
     g$syntax-list?$11410$eZ1vL
     (case-lambda
       ((g$x$8243$eZ1vL)
        ((case-lambda
           ((g$t$8244$eZ1vL)
            (if g$t$8244$eZ1vL
              g$t$8244$eZ1vL
              (begin
                '#f
                (if (g$syntax-pair?$7712$eZ1vL g$x$8243$eZ1vL)
                  (begin
                    '#f
                    (g$syntax-list?$7715$eZ1vL
                      (g$syntax-cdr$7717$eZ1vL g$x$8243$eZ1vL)))
                  '#f)))))
         (g$syntax-null?$7714$eZ1vL g$x$8243$eZ1vL)))))
   (g$syntax-car$7716$eZ1vL
     g$syntax-car$11411$eZ1vL
     (case-lambda
       ((g$x$8245$eZ1vL)
        (if (g$stx?$7691$eZ1vL g$x$8245$eZ1vL)
          (g$mkstx$7707$eZ1vL
            (g$syntax-car$7716$eZ1vL (g$stx-expr$7693$eZ1vL g$x$8245$eZ1vL))
            (g$stx-mark*$7694$eZ1vL g$x$8245$eZ1vL)
            (g$stx-subst*$7695$eZ1vL g$x$8245$eZ1vL)
            (g$stx-ae*$7696$eZ1vL g$x$8245$eZ1vL))
          (if (annotation? g$x$8245$eZ1vL)
            (g$syntax-car$7716$eZ1vL (annotation-expression g$x$8245$eZ1vL))
            (if (pair? g$x$8245$eZ1vL)
              (car g$x$8245$eZ1vL)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$8245$eZ1vL)))))))
   (g$syntax-cdr$7717$eZ1vL
     g$syntax-cdr$11412$eZ1vL
     (case-lambda
       ((g$x$8246$eZ1vL)
        (if (g$stx?$7691$eZ1vL g$x$8246$eZ1vL)
          (g$mkstx$7707$eZ1vL
            (g$syntax-cdr$7717$eZ1vL (g$stx-expr$7693$eZ1vL g$x$8246$eZ1vL))
            (g$stx-mark*$7694$eZ1vL g$x$8246$eZ1vL)
            (g$stx-subst*$7695$eZ1vL g$x$8246$eZ1vL)
            (g$stx-ae*$7696$eZ1vL g$x$8246$eZ1vL))
          (if (annotation? g$x$8246$eZ1vL)
            (g$syntax-cdr$7717$eZ1vL (annotation-expression g$x$8246$eZ1vL))
            (if (pair? g$x$8246$eZ1vL)
              (cdr g$x$8246$eZ1vL)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$8246$eZ1vL)))))))
   (g$syntax->list$7718$eZ1vL
     g$syntax->list$11413$eZ1vL
     (case-lambda
       ((g$x$8247$eZ1vL)
        (if (g$syntax-pair?$7712$eZ1vL g$x$8247$eZ1vL)
          (cons
            (g$syntax-car$7716$eZ1vL g$x$8247$eZ1vL)
            (g$syntax->list$7718$eZ1vL
              (g$syntax-cdr$7717$eZ1vL g$x$8247$eZ1vL)))
          (if (g$syntax-null?$7714$eZ1vL g$x$8247$eZ1vL)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$8247$eZ1vL))))))
   (g$id?$7719$eZ1vL
     g$id?$11414$eZ1vL
     (case-lambda
       ((g$x$8248$eZ1vL)
        (if (g$stx?$7691$eZ1vL g$x$8248$eZ1vL)
          (begin
            '#f
            ((case-lambda
               ((g$expr$8249$eZ1vL)
                (symbol?
                  (if (annotation? g$expr$8249$eZ1vL)
                    (annotation-stripped g$expr$8249$eZ1vL)
                    g$expr$8249$eZ1vL))))
             (g$stx-expr$7693$eZ1vL g$x$8248$eZ1vL)))
          '#f))))
   (g$id->sym$7720$eZ1vL
     g$id->sym$11415$eZ1vL
     (case-lambda
       ((g$x$8250$eZ1vL)
        (begin
          (if (not (g$stx?$7691$eZ1vL g$x$8250$eZ1vL))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$8250$eZ1vL)
            (void))
          ((case-lambda
             ((g$expr$8251$eZ1vL)
              ((case-lambda
                 ((g$sym$8252$eZ1vL)
                  (if (symbol? g$sym$8252$eZ1vL)
                    g$sym$8252$eZ1vL
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$8250$eZ1vL))))
               (if (annotation? g$expr$8251$eZ1vL)
                 (annotation-stripped g$expr$8251$eZ1vL)
                 g$expr$8251$eZ1vL))))
           (g$stx-expr$7693$eZ1vL g$x$8250$eZ1vL))))))
   (g$same-marks?$7721$eZ1vL
     g$same-marks?$11416$eZ1vL
     (case-lambda
       ((g$x$8253$eZ1vL g$y$8254$eZ1vL)
        ((case-lambda
           ((g$t$8255$eZ1vL)
            (if g$t$8255$eZ1vL
              g$t$8255$eZ1vL
              (begin
                '#f
                (if (pair? g$x$8253$eZ1vL)
                  (if (pair? g$y$8254$eZ1vL)
                    (if (eq? (car g$x$8253$eZ1vL) (car g$y$8254$eZ1vL))
                      (begin
                        '#f
                        (g$same-marks?$7721$eZ1vL
                          (cdr g$x$8253$eZ1vL)
                          (cdr g$y$8254$eZ1vL)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$8253$eZ1vL) (begin '#f (null? g$y$8254$eZ1vL)) '#f)))))
   (g$bound-id=?$7722$eZ1vL
     g$bound-id=?$11417$eZ1vL
     (case-lambda
       ((g$x$8256$eZ1vL g$y$8257$eZ1vL)
        (if (eq? (g$id->sym$7720$eZ1vL g$x$8256$eZ1vL)
                 (g$id->sym$7720$eZ1vL g$y$8257$eZ1vL))
          (begin
            '#f
            (g$same-marks?$7721$eZ1vL
              (g$stx-mark*$7694$eZ1vL g$x$8256$eZ1vL)
              (g$stx-mark*$7694$eZ1vL g$y$8257$eZ1vL)))
          '#f))))
   (g$free-id=?$7723$eZ1vL
     g$free-id=?$11418$eZ1vL
     (case-lambda
       ((g$i$8258$eZ1vL g$j$8259$eZ1vL)
        ((case-lambda
           ((g$t0$8260$eZ1vL g$t1$8261$eZ1vL)
            (if ((case-lambda
                   ((g$t$8262$eZ1vL)
                    (if g$t$8262$eZ1vL
                      g$t$8262$eZ1vL
                      (begin '#f g$t1$8261$eZ1vL))))
                 g$t0$8260$eZ1vL)
              (eq? g$t0$8260$eZ1vL g$t1$8261$eZ1vL)
              (eq? (g$id->sym$7720$eZ1vL g$i$8258$eZ1vL)
                   (g$id->sym$7720$eZ1vL g$j$8259$eZ1vL)))))
         (g$id->real-label$7733$eZ1vL g$i$8258$eZ1vL)
         (g$id->real-label$7733$eZ1vL g$j$8259$eZ1vL)))))
   (g$valid-bound-ids?$7724$eZ1vL
     g$valid-bound-ids?$11419$eZ1vL
     (case-lambda
       ((g$id*$8263$eZ1vL)
        (if (g$for-all$5061$eZ1vL g$id?$7719$eZ1vL g$id*$8263$eZ1vL)
          (begin '#f (g$distinct-bound-ids?$7725$eZ1vL g$id*$8263$eZ1vL))
          '#f))))
   (g$distinct-bound-ids?$7725$eZ1vL
     g$distinct-bound-ids?$11420$eZ1vL
     (case-lambda
       ((g$id*$8264$eZ1vL)
        ((case-lambda
           ((g$t$8265$eZ1vL)
            (if g$t$8265$eZ1vL
              g$t$8265$eZ1vL
              (begin
                '#f
                (if (not (g$bound-id-member?$7726$eZ1vL
                           (car g$id*$8264$eZ1vL)
                           (cdr g$id*$8264$eZ1vL)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7725$eZ1vL (cdr g$id*$8264$eZ1vL)))
                  '#f)))))
         (null? g$id*$8264$eZ1vL)))))
   (g$bound-id-member?$7726$eZ1vL
     g$bound-id-member?$11421$eZ1vL
     (case-lambda
       ((g$id$8266$eZ1vL g$id*$8267$eZ1vL)
        (if (pair? g$id*$8267$eZ1vL)
          (begin
            '#f
            ((case-lambda
               ((g$t$8268$eZ1vL)
                (if g$t$8268$eZ1vL
                  g$t$8268$eZ1vL
                  (begin
                    '#f
                    (g$bound-id-member?$7726$eZ1vL
                      g$id$8266$eZ1vL
                      (cdr g$id*$8267$eZ1vL))))))
             (g$bound-id=?$7722$eZ1vL g$id$8266$eZ1vL (car g$id*$8267$eZ1vL))))
          '#f))))
   (g$self-evaluating?$7727$eZ1vL
     g$self-evaluating?$11422$eZ1vL
     (case-lambda
       ((g$x$8269$eZ1vL)
        ((case-lambda
           ((g$t$8270$eZ1vL)
            (if g$t$8270$eZ1vL
              g$t$8270$eZ1vL
              ((case-lambda
                 ((g$t$8271$eZ1vL)
                  (if g$t$8271$eZ1vL
                    g$t$8271$eZ1vL
                    ((case-lambda
                       ((g$t$8272$eZ1vL)
                        (if g$t$8272$eZ1vL
                          g$t$8272$eZ1vL
                          ((case-lambda
                             ((g$t$8273$eZ1vL)
                              (if g$t$8273$eZ1vL
                                g$t$8273$eZ1vL
                                (begin '#f (bytevector? g$x$8269$eZ1vL)))))
                           (boolean? g$x$8269$eZ1vL)))))
                     (char? g$x$8269$eZ1vL)))))
               (string? g$x$8269$eZ1vL)))))
         (number? g$x$8269$eZ1vL)))))
   (g$strip-annotations$7728$eZ1vL
     g$strip-annotations$11423$eZ1vL
     (case-lambda
       ((g$x$8274$eZ1vL)
        (if (pair? g$x$8274$eZ1vL)
          (cons
            (g$strip-annotations$7728$eZ1vL (car g$x$8274$eZ1vL))
            (g$strip-annotations$7728$eZ1vL (cdr g$x$8274$eZ1vL)))
          (if (vector? g$x$8274$eZ1vL)
            (vector-map g$strip-annotations$7728$eZ1vL g$x$8274$eZ1vL)
            (if (annotation? g$x$8274$eZ1vL)
              (annotation-stripped g$x$8274$eZ1vL)
              g$x$8274$eZ1vL))))))
   (g$strip$7729$eZ1vL
     g$strip$11424$eZ1vL
     (case-lambda
       ((g$x$8275$eZ1vL g$m*$8276$eZ1vL)
        (if (g$top-marked?$7657$eZ1vL g$m*$8276$eZ1vL)
          (if ((case-lambda
                 ((g$t$8277$eZ1vL)
                  (if g$t$8277$eZ1vL
                    g$t$8277$eZ1vL
                    ((case-lambda
                       ((g$t$8278$eZ1vL)
                        (if g$t$8278$eZ1vL
                          g$t$8278$eZ1vL
                          (begin
                            '#f
                            (if (vector? g$x$8275$eZ1vL)
                              (if (> (vector-length g$x$8275$eZ1vL) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$8275$eZ1vL '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$8275$eZ1vL)
                       (begin '#f (annotation? (car g$x$8275$eZ1vL)))
                       '#f)))))
               (annotation? g$x$8275$eZ1vL))
            (g$strip-annotations$7728$eZ1vL g$x$8275$eZ1vL)
            g$x$8275$eZ1vL)
          ((letrec ((g$f$8279$eZ1vL
                      (case-lambda
                        ((g$x$8280$eZ1vL)
                         (if (g$stx?$7691$eZ1vL g$x$8280$eZ1vL)
                           (g$strip$7729$eZ1vL
                             (g$stx-expr$7693$eZ1vL g$x$8280$eZ1vL)
                             (g$stx-mark*$7694$eZ1vL g$x$8280$eZ1vL))
                           (if (annotation? g$x$8280$eZ1vL)
                             (annotation-stripped g$x$8280$eZ1vL)
                             (if (pair? g$x$8280$eZ1vL)
                               ((case-lambda
                                  ((g$a$8281$eZ1vL g$d$8282$eZ1vL)
                                   (if (if (eq? g$a$8281$eZ1vL
                                                (car g$x$8280$eZ1vL))
                                         (begin
                                           '#f
                                           (eq? g$d$8282$eZ1vL
                                                (cdr g$x$8280$eZ1vL)))
                                         '#f)
                                     g$x$8280$eZ1vL
                                     (cons g$a$8281$eZ1vL g$d$8282$eZ1vL))))
                                (g$f$8279$eZ1vL (car g$x$8280$eZ1vL))
                                (g$f$8279$eZ1vL (cdr g$x$8280$eZ1vL)))
                               (if (vector? g$x$8280$eZ1vL)
                                 ((case-lambda
                                    ((g$old$8283$eZ1vL)
                                     ((case-lambda
                                        ((g$new$8284$eZ1vL)
                                         (if (g$for-all$5061$eZ1vL
                                               eq?
                                               g$old$8283$eZ1vL
                                               g$new$8284$eZ1vL)
                                           g$x$8280$eZ1vL
                                           (list->vector g$new$8284$eZ1vL))))
                                      (g$map$5063$eZ1vL
                                        g$f$8279$eZ1vL
                                        g$old$8283$eZ1vL))))
                                  (vector->list g$x$8280$eZ1vL))
                                 g$x$8280$eZ1vL))))))))
             g$f$8279$eZ1vL)
           g$x$8275$eZ1vL)))))
   (g$stx->datum$7730$eZ1vL
     g$stx->datum$11425$eZ1vL
     (case-lambda
       ((g$x$8285$eZ1vL) (g$strip$7729$eZ1vL g$x$8285$eZ1vL '()))))
   (g$same-marks*?$7731$eZ1vL
     g$same-marks*?$11426$eZ1vL
     (case-lambda
       ((g$mark*$8286$eZ1vL g$mark**$8287$eZ1vL g$si$8288$eZ1vL)
        (if (null? g$si$8288$eZ1vL)
          '#f
          (if (g$same-marks?$7721$eZ1vL
                g$mark*$8286$eZ1vL
                (vector-ref g$mark**$8287$eZ1vL (car g$si$8288$eZ1vL)))
            (car g$si$8288$eZ1vL)
            (g$same-marks*?$7731$eZ1vL
              g$mark*$8286$eZ1vL
              g$mark**$8287$eZ1vL
              (cdr g$si$8288$eZ1vL)))))))
   (g$id->label$7732$eZ1vL
     g$id->label$11427$eZ1vL
     (case-lambda
       ((g$id$8289$eZ1vL)
        ((case-lambda
           ((g$t$8290$eZ1vL)
            (if g$t$8290$eZ1vL
              g$t$8290$eZ1vL
              (begin
                '#f
                ((case-lambda
                   ((g$t$8291$eZ1vL)
                    (if g$t$8291$eZ1vL
                      ((case-lambda
                         ((g$env$8292$eZ1vL)
                          ((case-lambda
                             ((g$rib$8293$eZ1vL)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7662$eZ1vL
                                     g$id$8289$eZ1vL
                                     g$rib$8293$eZ1vL
                                     '#f)))
                                (case-lambda
                                  ((g$lab$8296$eZ1vL g$_loc$8297$eZ1vL)
                                   ((case-lambda
                                      ((g$_loc$8298$eZ1vL g$lab$8299$eZ1vL)
                                       (begin
                                         (g$extend-rib!$7682$eZ1vL
                                           g$rib$8293$eZ1vL
                                           g$id$8289$eZ1vL
                                           g$lab$8299$eZ1vL
                                           '#t)
                                         g$lab$8299$eZ1vL)))
                                    g$_loc$8297$eZ1vL
                                    g$lab$8296$eZ1vL))))))
                           (g$interaction-env-rib$8075$eZ1vL
                             g$env$8292$eZ1vL))))
                       g$t$8291$eZ1vL)
                      '#f)))
                 (g$top-level-context$8117$eZ1vL))))))
         (g$id->real-label$7733$eZ1vL g$id$8289$eZ1vL)))))
   (g$id->real-label$7733$eZ1vL
     g$id->real-label$11428$eZ1vL
     (case-lambda
       ((g$id$8300$eZ1vL)
        ((case-lambda
           ((g$sym$8301$eZ1vL)
            ((letrec ((g$search$8302$eZ1vL
                        (case-lambda
                          ((g$subst*$8303$eZ1vL g$mark*$8304$eZ1vL)
                           (if (null? g$subst*$8303$eZ1vL)
                             '#f
                             (if (eq? (car g$subst*$8303$eZ1vL) 'shift)
                               (g$search$8302$eZ1vL
                                 (cdr g$subst*$8303$eZ1vL)
                                 (cdr g$mark*$8304$eZ1vL))
                               ((case-lambda
                                  ((g$rib$8305$eZ1vL)
                                   ((case-lambda
                                      ((g$t$8306$eZ1vL)
                                       (if g$t$8306$eZ1vL
                                         ((case-lambda
                                            ((g$ht$8307$eZ1vL)
                                             ((case-lambda
                                                ((g$si$8308$eZ1vL)
                                                 ((case-lambda
                                                    ((g$i$8309$eZ1vL)
                                                     (if g$i$8309$eZ1vL
                                                       (vector-ref
                                                         (g$rib-label*$7671$eZ1vL
                                                           g$rib$8305$eZ1vL)
                                                         g$i$8309$eZ1vL)
                                                       (g$search$8302$eZ1vL
                                                         (cdr g$subst*$8303$eZ1vL)
                                                         g$mark*$8304$eZ1vL))))
                                                  (if g$si$8308$eZ1vL
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7731$eZ1vL
                                                        g$mark*$8304$eZ1vL
                                                        (g$rib-mark**$7670$eZ1vL
                                                          g$rib$8305$eZ1vL)
                                                        (reverse
                                                          g$si$8308$eZ1vL)))
                                                    '#f))))
                                              (g$hashtable-ref$5541$eZ1vL
                                                g$ht$8307$eZ1vL
                                                g$sym$8301$eZ1vL
                                                '#f))))
                                          g$t$8306$eZ1vL)
                                         ((case-lambda
                                            ((g$t$8310$eZ1vL)
                                             (if g$t$8310$eZ1vL
                                               g$t$8310$eZ1vL
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$8311$eZ1vL
                                                             (case-lambda
                                                               ((g$sym*$8312$eZ1vL
                                                                  g$mark**$8313$eZ1vL
                                                                  g$label*$8314$eZ1vL)
                                                                (if (null?
                                                                      g$sym*$8312$eZ1vL)
                                                                  (g$search$8302$eZ1vL
                                                                    (cdr g$subst*$8303$eZ1vL)
                                                                    g$mark*$8304$eZ1vL)
                                                                  (if (if (eq? (car g$sym*$8312$eZ1vL)
                                                                               g$sym$8301$eZ1vL)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7721$eZ1vL
                                                                            (car g$mark**$8313$eZ1vL)
                                                                            g$mark*$8304$eZ1vL))
                                                                        '#f)
                                                                    (car g$label*$8314$eZ1vL)
                                                                    (g$f$8311$eZ1vL
                                                                      (cdr g$sym*$8312$eZ1vL)
                                                                      (cdr g$mark**$8313$eZ1vL)
                                                                      (cdr g$label*$8314$eZ1vL))))))))
                                                    g$f$8311$eZ1vL)
                                                  (g$rib-sym*$7669$eZ1vL
                                                    g$rib$8305$eZ1vL)
                                                  (g$rib-mark**$7670$eZ1vL
                                                    g$rib$8305$eZ1vL)
                                                  (g$rib-label*$7671$eZ1vL
                                                    g$rib$8305$eZ1vL))))))
                                          (g$find-label$7681$eZ1vL
                                            g$rib$8305$eZ1vL
                                            g$sym$8301$eZ1vL
                                            g$mark*$8304$eZ1vL)))))
                                    (g$rib-sealed/freq$7672$eZ1vL
                                      g$rib$8305$eZ1vL))))
                                (car g$subst*$8303$eZ1vL))))))))
               g$search$8302$eZ1vL)
             (g$stx-subst*$7695$eZ1vL g$id$8300$eZ1vL)
             (g$stx-mark*$7694$eZ1vL g$id$8300$eZ1vL))))
         (g$id->sym$7720$eZ1vL g$id$8300$eZ1vL)))))
   (g$label->binding$7734$eZ1vL
     g$label->binding$11429$eZ1vL
     (case-lambda
       ((g$x$8315$eZ1vL g$r$8316$eZ1vL)
        ((case-lambda
           ((g$t$8317$eZ1vL)
            (if g$t$8317$eZ1vL
              ((case-lambda
                 ((g$b$8318$eZ1vL)
                  (if (if (pair? g$b$8318$eZ1vL)
                        (begin '#f (eq? (car g$b$8318$eZ1vL) '$core-rtd))
                        '#f)
                    (cons
                      '$rtd
                      (g$map$5063$eZ1vL
                        g$bless$7960$eZ1vL
                        (cdr g$b$8318$eZ1vL)))
                    (if (if (pair? g$b$8318$eZ1vL)
                          (begin '#f (eq? (car g$b$8318$eZ1vL) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$8319$eZ1vL g$loc$8320$eZ1vL)
                          (cons '$rtd (symbol-value g$loc$8320$eZ1vL))))
                       (g$cadr$5264$eZ1vL g$b$8318$eZ1vL)
                       (g$cddr$5266$eZ1vL g$b$8318$eZ1vL))
                      g$b$8318$eZ1vL))))
               g$t$8317$eZ1vL)
              ((case-lambda
                 ((g$t$8321$eZ1vL)
                  (if g$t$8321$eZ1vL
                    (cdr g$t$8321$eZ1vL)
                    ((case-lambda
                       ((g$t$8322$eZ1vL)
                        (if g$t$8322$eZ1vL
                          ((case-lambda
                             ((g$env$8323$eZ1vL)
                              ((case-lambda
                                 ((g$t$8324$eZ1vL)
                                  (if g$t$8324$eZ1vL
                                    ((case-lambda
                                       ((g$p$8325$eZ1vL)
                                        (g$cons*$5065$eZ1vL
                                          'lexical
                                          (cdr g$p$8325$eZ1vL)
                                          '#f)))
                                     g$t$8324$eZ1vL)
                                    '(displaced-lexical . #f))))
                               (g$assq$5051$eZ1vL
                                 g$x$8315$eZ1vL
                                 (g$interaction-env-locs$8077$eZ1vL
                                   g$env$8323$eZ1vL)))))
                           g$t$8322$eZ1vL)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$8117$eZ1vL)))))
               (g$assq$5051$eZ1vL g$x$8315$eZ1vL g$r$8316$eZ1vL)))))
         (g$imported-label->binding$7528$eZ1vL g$x$8315$eZ1vL)))))
   (g$make-binding$7735$eZ1vL g$make-binding$11430$eZ1vL cons)
   (g$binding-type$7736$eZ1vL g$binding-type$11431$eZ1vL car)
   (g$binding-value$7737$eZ1vL g$binding-value$11432$eZ1vL cdr)
   (g$raise-unbound-error$7738$eZ1vL
     g$raise-unbound-error$11433$eZ1vL
     (case-lambda
       ((g$id$8326$eZ1vL)
        (g$syntax-violation*$8108$eZ1vL
          '#f
          '"unbound identifier"
          g$id$8326$eZ1vL
          (g$make-undefined-violation$5887$eZ1vL)))))
   (g$syntax-type$7739$eZ1vL
     g$syntax-type$11434$eZ1vL
     (case-lambda
       ((g$e$8327$eZ1vL g$r$8328$eZ1vL)
        (if (g$id?$7719$eZ1vL g$e$8327$eZ1vL)
          ((case-lambda
             ((g$id$8329$eZ1vL)
              ((case-lambda
                 ((g$label$8330$eZ1vL)
                  ((case-lambda
                     ((g$b$8331$eZ1vL)
                      ((case-lambda
                         ((g$type$8332$eZ1vL)
                          (begin
                            (if (not g$label$8330$eZ1vL)
                              (g$raise-unbound-error$7738$eZ1vL g$id$8329$eZ1vL)
                              (void))
                            ((case-lambda
                               ((g$t$8333$eZ1vL)
                                (if (g$memv$5056$eZ1vL
                                      g$t$8333$eZ1vL
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable))
                                  (values
                                    g$type$8332$eZ1vL
                                    (g$binding-value$7737$eZ1vL g$b$8331$eZ1vL)
                                    g$id$8329$eZ1vL)
                                  (values 'other '#f '#f))))
                             g$type$8332$eZ1vL))))
                       (g$binding-type$7736$eZ1vL g$b$8331$eZ1vL))))
                   (g$label->binding$7734$eZ1vL
                     g$label$8330$eZ1vL
                     g$r$8328$eZ1vL))))
               (g$id->label$7732$eZ1vL g$id$8329$eZ1vL))))
           g$e$8327$eZ1vL)
          (if (g$syntax-pair?$7712$eZ1vL g$e$8327$eZ1vL)
            ((case-lambda
               ((g$id$8334$eZ1vL)
                (if (g$id?$7719$eZ1vL g$id$8334$eZ1vL)
                  ((case-lambda
                     ((g$label$8335$eZ1vL)
                      ((case-lambda
                         ((g$b$8336$eZ1vL)
                          ((case-lambda
                             ((g$type$8337$eZ1vL)
                              (begin
                                (if (not g$label$8335$eZ1vL)
                                  (g$raise-unbound-error$7738$eZ1vL
                                    g$id$8334$eZ1vL)
                                  (void))
                                ((case-lambda
                                   ((g$t$8338$eZ1vL)
                                    (if (g$memv$5056$eZ1vL
                                          g$t$8338$eZ1vL
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd))
                                      (values
                                        g$type$8337$eZ1vL
                                        (g$binding-value$7737$eZ1vL
                                          g$b$8336$eZ1vL)
                                        g$id$8334$eZ1vL)
                                      (values 'call '#f '#f))))
                                 g$type$8337$eZ1vL))))
                           (g$binding-type$7736$eZ1vL g$b$8336$eZ1vL))))
                       (g$label->binding$7734$eZ1vL
                         g$label$8335$eZ1vL
                         g$r$8328$eZ1vL))))
                   (g$id->label$7732$eZ1vL g$id$8334$eZ1vL))
                  (values 'call '#f '#f))))
             (g$syntax-car$7716$eZ1vL g$e$8327$eZ1vL))
            ((case-lambda
               ((g$d$8339$eZ1vL)
                (if (g$self-evaluating?$7727$eZ1vL g$d$8339$eZ1vL)
                  (values 'constant g$d$8339$eZ1vL '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7730$eZ1vL g$e$8327$eZ1vL)))))))
   (g$sanitize-binding$7747$eZ1vL
     g$sanitize-binding$11435$eZ1vL
     (case-lambda
       ((g$x$8340$eZ1vL g$src$8341$eZ1vL)
        (if (procedure? g$x$8340$eZ1vL)
          (g$cons*$5065$eZ1vL 'local-macro g$x$8340$eZ1vL g$src$8341$eZ1vL)
          (if (if (pair? g$x$8340$eZ1vL)
                (if (eq? (car g$x$8340$eZ1vL) 'macro!)
                  (begin '#f (procedure? (cdr g$x$8340$eZ1vL)))
                  '#f)
                '#f)
            (g$cons*$5065$eZ1vL
              'local-macro!
              (cdr g$x$8340$eZ1vL)
              g$src$8341$eZ1vL)
            (if (if (pair? g$x$8340$eZ1vL)
                  (begin '#f (eq? (car g$x$8340$eZ1vL) '$rtd))
                  '#f)
              g$x$8340$eZ1vL
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$8340$eZ1vL)))))))
   (g$make-variable-transformer$7748$eZ1vL
     g$make-variable-transformer$11436$eZ1vL
     (case-lambda
       ((g$x$8342$eZ1vL)
        (if (procedure? g$x$8342$eZ1vL)
          (cons 'macro! g$x$8342$eZ1vL)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$8342$eZ1vL)))))
   (g$variable-transformer?$7749$eZ1vL
     g$variable-transformer?$11437$eZ1vL
     (case-lambda
       ((g$x$8343$eZ1vL)
        (if (pair? g$x$8343$eZ1vL)
          (if (eq? (car g$x$8343$eZ1vL) 'macro!)
            (begin '#f (procedure? (cdr g$x$8343$eZ1vL)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7750$eZ1vL
     g$variable-transformer-procedure$11438$eZ1vL
     (case-lambda
       ((g$x$8344$eZ1vL)
        (if (g$variable-transformer?$7749$eZ1vL g$x$8344$eZ1vL)
          (cdr g$x$8344$eZ1vL)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$8344$eZ1vL)))))
   (g$make-eval-transformer$7751$eZ1vL
     g$make-eval-transformer$11439$eZ1vL
     (case-lambda
       ((g$x$8345$eZ1vL)
        (g$sanitize-binding$7747$eZ1vL
          (eval-core (g$expanded->core$7237$eZ1vL g$x$8345$eZ1vL))
          g$x$8345$eZ1vL))))
   (g$parse-define$7937$eZ1vL
     g$parse-define$11440$eZ1vL
     (case-lambda
       ((g$x$8346$eZ1vL)
        ((case-lambda
           ((g$t$8347$eZ1vL)
            ((case-lambda
               ((g$ls/false$8348$eZ1vL)
                (if (if g$ls/false$8348$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8349$eZ1vL
                               g$fmls$8350$eZ1vL
                               g$b$8351$eZ1vL
                               g$b*$8352$eZ1vL)
                             (g$id?$7719$eZ1vL g$id$8349$eZ1vL)))
                          g$ls/false$8348$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8353$eZ1vL
                         g$fmls$8354$eZ1vL
                         g$b$8355$eZ1vL
                         g$b*$8356$eZ1vL)
                       (begin
                         (g$verify-formals$8017$eZ1vL
                           g$fmls$8354$eZ1vL
                           g$x$8346$eZ1vL)
                         (values
                           g$id$8353$eZ1vL
                           (cons
                             'defun
                             (cons
                               g$fmls$8354$eZ1vL
                               (cons g$b$8355$eZ1vL g$b*$8356$eZ1vL)))))))
                    g$ls/false$8348$eZ1vL)
                  ((case-lambda
                     ((g$t$8357$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8358$eZ1vL)
                          (if (if g$ls/false$8358$eZ1vL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$8359$eZ1vL g$val$8360$eZ1vL)
                                       (g$id?$7719$eZ1vL g$id$8359$eZ1vL)))
                                    g$ls/false$8358$eZ1vL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$8361$eZ1vL g$val$8362$eZ1vL)
                                 (values
                                   g$id$8361$eZ1vL
                                   (cons 'expr g$val$8362$eZ1vL))))
                              g$ls/false$8358$eZ1vL)
                            ((case-lambda
                               ((g$t$8363$eZ1vL)
                                ((case-lambda
                                   ((g$ls/false$8364$eZ1vL)
                                    (if (if g$ls/false$8364$eZ1vL
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$8365$eZ1vL)
                                                 (g$id?$7719$eZ1vL
                                                   g$id$8365$eZ1vL)))
                                              g$ls/false$8364$eZ1vL))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$8366$eZ1vL)
                                           (values
                                             g$id$8366$eZ1vL
                                             (cons
                                               'expr
                                               (g$bless$7960$eZ1vL '(void))))))
                                        g$ls/false$8364$eZ1vL)
                                      (g$syntax-violation$8109$eZ1vL
                                        '#f
                                        '"invalid syntax"
                                        g$t$8363$eZ1vL))))
                                 (g$syntax-dispatch$7997$eZ1vL
                                   g$t$8363$eZ1vL
                                   '(_ any)))))
                             g$t$8357$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$8357$eZ1vL
                         '(_ any any)))))
                   g$t$8347$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8347$eZ1vL
               '(_ (any . any) any . each-any)))))
         g$x$8346$eZ1vL))))
   (g$parse-define-syntax$7938$eZ1vL
     g$parse-define-syntax$11441$eZ1vL
     (case-lambda
       ((g$x$8367$eZ1vL)
        ((case-lambda
           ((g$t$8368$eZ1vL)
            ((case-lambda
               ((g$ls/false$8369$eZ1vL)
                (if (if g$ls/false$8369$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8370$eZ1vL g$val$8371$eZ1vL)
                             (g$id?$7719$eZ1vL g$id$8370$eZ1vL)))
                          g$ls/false$8369$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8372$eZ1vL g$val$8373$eZ1vL)
                       (values g$id$8372$eZ1vL g$val$8373$eZ1vL)))
                    g$ls/false$8369$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8368$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8368$eZ1vL '(_ any any)))))
         g$x$8367$eZ1vL))))
   (g$scheme-stx-hashtable$7939$eZ1vL
     g$scheme-stx-hashtable$11442$eZ1vL
     (g$make-eq-hashtable$5538$eZ1vL))
   (g$scheme-stx$7940$eZ1vL
     g$scheme-stx$11443$eZ1vL
     (case-lambda
       ((g$sym$8374$eZ1vL)
        ((case-lambda
           ((g$t$8375$eZ1vL)
            (if g$t$8375$eZ1vL
              g$t$8375$eZ1vL
              (begin
                '#f
                ((case-lambda
                   ((g$subst$8376$eZ1vL)
                    ((case-lambda
                       ((g$stx$8377$eZ1vL)
                        ((case-lambda
                           ((g$stx$8378$eZ1vL)
                            (begin
                              (g$hashtable-set!$5542$eZ1vL
                                g$scheme-stx-hashtable$7939$eZ1vL
                                g$sym$8374$eZ1vL
                                g$stx$8378$eZ1vL)
                              g$stx$8378$eZ1vL)))
                         ((case-lambda
                            ((g$t$8379$eZ1vL)
                             (if g$t$8379$eZ1vL
                               ((case-lambda
                                  ((g$x$8380$eZ1vL)
                                   ((case-lambda
                                      ((g$name$8381$eZ1vL g$label$8382$eZ1vL)
                                       (g$add-subst$7709$eZ1vL
                                         (g$make-rib$7668$eZ1vL
                                           (list g$name$8381$eZ1vL)
                                           (list g$top-mark*$7656$eZ1vL)
                                           (list g$label$8382$eZ1vL)
                                           '#f
                                           '#f)
                                         g$stx$8377$eZ1vL)))
                                    (car g$x$8380$eZ1vL)
                                    (cdr g$x$8380$eZ1vL))))
                                g$t$8379$eZ1vL)
                               g$stx$8377$eZ1vL)))
                          (g$assq$5051$eZ1vL
                            g$sym$8374$eZ1vL
                            g$subst$8376$eZ1vL)))))
                     (g$make-stx$7692$eZ1vL
                       g$sym$8374$eZ1vL
                       g$top-mark*$7656$eZ1vL
                       '()
                       '()))))
                 (g$library-subst$7486$eZ1vL
                   (g$find-library-by-name$7522$eZ1vL
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5541$eZ1vL
           g$scheme-stx-hashtable$7939$eZ1vL
           g$sym$8374$eZ1vL
           '#f)))))
   (g$lexical-var$7941$eZ1vL g$lexical-var$11444$eZ1vL car)
   (g$lexical-mutable?$7942$eZ1vL g$lexical-mutable?$11445$eZ1vL cdr)
   (g$set-lexical-mutable!$7943$eZ1vL
     g$set-lexical-mutable!$11446$eZ1vL
     set-cdr!)
   (g$add-lexical$7944$eZ1vL
     g$add-lexical$11447$eZ1vL
     (case-lambda
       ((g$lab$8383$eZ1vL g$lex$8384$eZ1vL g$r$8385$eZ1vL)
        (cons
          (g$cons*$5065$eZ1vL g$lab$8383$eZ1vL 'lexical g$lex$8384$eZ1vL '#f)
          g$r$8385$eZ1vL))))
   (g$add-lexicals$7945$eZ1vL
     g$add-lexicals$11448$eZ1vL
     (case-lambda
       ((g$lab*$8386$eZ1vL g$lex*$8387$eZ1vL g$r$8388$eZ1vL)
        (if (null? g$lab*$8386$eZ1vL)
          g$r$8388$eZ1vL
          (g$add-lexicals$7945$eZ1vL
            (cdr g$lab*$8386$eZ1vL)
            (cdr g$lex*$8387$eZ1vL)
            (g$add-lexical$7944$eZ1vL
              (car g$lab*$8386$eZ1vL)
              (car g$lex*$8387$eZ1vL)
              g$r$8388$eZ1vL))))))
   (g$letrec-helper$7946$eZ1vL
     g$letrec-helper$11449$eZ1vL
     (case-lambda
       ((g$e$8389$eZ1vL g$r$8390$eZ1vL g$mr$8391$eZ1vL g$build$8392$eZ1vL)
        ((case-lambda
           ((g$t$8393$eZ1vL)
            ((case-lambda
               ((g$ls/false$8394$eZ1vL)
                (if g$ls/false$8394$eZ1vL
                  (apply
                    (case-lambda
                      ((g$lhs*$8395$eZ1vL
                         g$rhs*$8396$eZ1vL
                         g$b$8397$eZ1vL
                         g$b*$8398$eZ1vL)
                       (if (not (g$valid-bound-ids?$7724$eZ1vL
                                  g$lhs*$8395$eZ1vL))
                         (g$invalid-fmls-error$7962$eZ1vL
                           g$e$8389$eZ1vL
                           g$lhs*$8395$eZ1vL)
                         ((case-lambda
                            ((g$lex*$8399$eZ1vL g$lab*$8400$eZ1vL)
                             ((case-lambda
                                ((g$rib$8401$eZ1vL g$r$8402$eZ1vL)
                                 ((case-lambda
                                    ((g$body$8403$eZ1vL g$rhs*$8404$eZ1vL)
                                     (g$build$8392$eZ1vL
                                       '#f
                                       g$lex*$8399$eZ1vL
                                       g$rhs*$8404$eZ1vL
                                       g$body$8403$eZ1vL)))
                                  (g$chi-internal$8026$eZ1vL
                                    (g$add-subst$7709$eZ1vL
                                      g$rib$8401$eZ1vL
                                      (cons g$b$8397$eZ1vL g$b*$8398$eZ1vL))
                                    g$r$8402$eZ1vL
                                    g$mr$8391$eZ1vL)
                                  (g$chi-expr*$8013$eZ1vL
                                    (g$map$5063$eZ1vL
                                      (case-lambda
                                        ((g$x$8405$eZ1vL)
                                         (g$add-subst$7709$eZ1vL
                                           g$rib$8401$eZ1vL
                                           g$x$8405$eZ1vL)))
                                      g$rhs*$8396$eZ1vL)
                                    g$r$8402$eZ1vL
                                    g$mr$8391$eZ1vL))))
                              (g$make-full-rib$7687$eZ1vL
                                g$lhs*$8395$eZ1vL
                                g$lab*$8400$eZ1vL)
                              (g$add-lexicals$7945$eZ1vL
                                g$lab*$8400$eZ1vL
                                g$lex*$8399$eZ1vL
                                g$r$8390$eZ1vL))))
                          (g$map$5063$eZ1vL
                            g$gen-lexical$7658$eZ1vL
                            g$lhs*$8395$eZ1vL)
                          (g$map$5063$eZ1vL
                            g$gen-label$7660$eZ1vL
                            g$lhs*$8395$eZ1vL)))))
                    g$ls/false$8394$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8393$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8393$eZ1vL
               '(_ #(each (any any)) any . each-any)))))
         g$e$8389$eZ1vL))))
   (g$letrec-transformer$7947$eZ1vL
     g$letrec-transformer$11450$eZ1vL
     (case-lambda
       ((g$e$8406$eZ1vL g$r$8407$eZ1vL g$mr$8408$eZ1vL)
        (g$letrec-helper$7946$eZ1vL
          g$e$8406$eZ1vL
          g$r$8407$eZ1vL
          g$mr$8408$eZ1vL
          g$build-letrec$7650$eZ1vL))))
   (g$letrec*-transformer$7948$eZ1vL
     g$letrec*-transformer$11451$eZ1vL
     (case-lambda
       ((g$e$8409$eZ1vL g$r$8410$eZ1vL g$mr$8411$eZ1vL)
        (g$letrec-helper$7946$eZ1vL
          g$e$8409$eZ1vL
          g$r$8410$eZ1vL
          g$mr$8411$eZ1vL
          g$build-letrec*$7651$eZ1vL))))
   (g$fluid-let-syntax-transformer$7949$eZ1vL
     g$fluid-let-syntax-transformer$11452$eZ1vL
     (case-lambda
       ((g$e$8412$eZ1vL g$r$8413$eZ1vL g$mr$8414$eZ1vL)
        (letrec* ((g$lookup$8415$eZ1vL
                    (case-lambda
                      ((g$x$8425$eZ1vL)
                       ((case-lambda
                          ((g$t$8426$eZ1vL)
                           (if g$t$8426$eZ1vL
                             g$t$8426$eZ1vL
                             (begin
                               '#f
                               (g$syntax-violation$8109$eZ1vL
                                 '#f
                                 '"unbound identifier"
                                 g$e$8412$eZ1vL
                                 g$x$8425$eZ1vL)))))
                        (g$id->label$7732$eZ1vL g$x$8425$eZ1vL))))))
          ((case-lambda
             ((g$t$8416$eZ1vL)
              ((case-lambda
                 ((g$ls/false$8417$eZ1vL)
                  (if g$ls/false$8417$eZ1vL
                    (apply
                      (case-lambda
                        ((g$lhs*$8418$eZ1vL
                           g$rhs*$8419$eZ1vL
                           g$b$8420$eZ1vL
                           g$b*$8421$eZ1vL)
                         (if (not (g$valid-bound-ids?$7724$eZ1vL
                                    g$lhs*$8418$eZ1vL))
                           (g$invalid-fmls-error$7962$eZ1vL
                             g$e$8412$eZ1vL
                             g$lhs*$8418$eZ1vL)
                           ((case-lambda
                              ((g$lab*$8422$eZ1vL g$rhs*$8423$eZ1vL)
                               (g$chi-internal$8026$eZ1vL
                                 (cons g$b$8420$eZ1vL g$b*$8421$eZ1vL)
                                 (append
                                   (g$map$5063$eZ1vL
                                     cons
                                     g$lab*$8422$eZ1vL
                                     g$rhs*$8423$eZ1vL)
                                   g$r$8413$eZ1vL)
                                 (append
                                   (g$map$5063$eZ1vL
                                     cons
                                     g$lab*$8422$eZ1vL
                                     g$rhs*$8423$eZ1vL)
                                   g$mr$8414$eZ1vL))))
                            (g$map$5063$eZ1vL
                              g$lookup$8415$eZ1vL
                              g$lhs*$8418$eZ1vL)
                            (g$map$5063$eZ1vL
                              (case-lambda
                                ((g$x$8424$eZ1vL)
                                 (g$make-eval-transformer$7751$eZ1vL
                                   (g$expand-transformer$8042$eZ1vL
                                     g$x$8424$eZ1vL
                                     g$mr$8414$eZ1vL))))
                              g$rhs*$8419$eZ1vL)))))
                      g$ls/false$8417$eZ1vL)
                    (g$syntax-violation$8109$eZ1vL
                      '#f
                      '"invalid syntax"
                      g$t$8416$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL
                 g$t$8416$eZ1vL
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8412$eZ1vL)))))
   (g$type-descriptor-transformer$7950$eZ1vL
     g$type-descriptor-transformer$11453$eZ1vL
     (case-lambda
       ((g$e$8427$eZ1vL g$r$8428$eZ1vL g$mr$8429$eZ1vL)
        ((case-lambda
           ((g$t$8430$eZ1vL)
            ((case-lambda
               ((g$ls/false$8431$eZ1vL)
                (if (if g$ls/false$8431$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8432$eZ1vL)
                             (g$id?$7719$eZ1vL g$id$8432$eZ1vL)))
                          g$ls/false$8431$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8433$eZ1vL)
                       ((case-lambda
                          ((g$lab$8434$eZ1vL)
                           ((case-lambda
                              ((g$b$8435$eZ1vL)
                               ((case-lambda
                                  ((g$type$8436$eZ1vL)
                                   (begin
                                     (if (not g$lab$8434$eZ1vL)
                                       (g$raise-unbound-error$7738$eZ1vL
                                         g$id$8433$eZ1vL)
                                       (void))
                                     (if (not (if (eq? g$type$8436$eZ1vL '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$7737$eZ1vL
                                                           g$b$8435$eZ1vL))))
                                                '#f))
                                       (g$syntax-violation$8109$eZ1vL
                                         '#f
                                         '"not a record type"
                                         g$e$8427$eZ1vL)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$7737$eZ1vL
                                         g$b$8435$eZ1vL)))))
                                (g$binding-type$7736$eZ1vL g$b$8435$eZ1vL))))
                            (g$label->binding$7734$eZ1vL
                              g$lab$8434$eZ1vL
                              g$r$8428$eZ1vL))))
                        (g$id->label$7732$eZ1vL g$id$8433$eZ1vL))))
                    g$ls/false$8431$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8430$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8430$eZ1vL '(_ any)))))
         g$e$8427$eZ1vL))))
   (g$record-type-descriptor-transformer$7951$eZ1vL
     g$record-type-descriptor-transformer$11454$eZ1vL
     (case-lambda
       ((g$e$8437$eZ1vL g$r$8438$eZ1vL g$mr$8439$eZ1vL)
        ((case-lambda
           ((g$t$8440$eZ1vL)
            ((case-lambda
               ((g$ls/false$8441$eZ1vL)
                (if (if g$ls/false$8441$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8442$eZ1vL)
                             (g$id?$7719$eZ1vL g$id$8442$eZ1vL)))
                          g$ls/false$8441$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8443$eZ1vL)
                       ((case-lambda
                          ((g$lab$8444$eZ1vL)
                           ((case-lambda
                              ((g$b$8445$eZ1vL)
                               ((case-lambda
                                  ((g$type$8446$eZ1vL)
                                   (begin
                                     (if (not g$lab$8444$eZ1vL)
                                       (g$raise-unbound-error$7738$eZ1vL
                                         g$id$8443$eZ1vL)
                                       (void))
                                     (if (not (if (eq? g$type$8446$eZ1vL '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7737$eZ1vL
                                                      g$b$8445$eZ1vL)))
                                                '#f))
                                       (g$syntax-violation$8109$eZ1vL
                                         '#f
                                         '"not a record type"
                                         g$e$8437$eZ1vL)
                                       (void))
                                     (g$chi-expr$8015$eZ1vL
                                       (car (g$binding-value$7737$eZ1vL
                                              g$b$8445$eZ1vL))
                                       g$r$8438$eZ1vL
                                       g$mr$8439$eZ1vL))))
                                (g$binding-type$7736$eZ1vL g$b$8445$eZ1vL))))
                            (g$label->binding$7734$eZ1vL
                              g$lab$8444$eZ1vL
                              g$r$8438$eZ1vL))))
                        (g$id->label$7732$eZ1vL g$id$8443$eZ1vL))))
                    g$ls/false$8441$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8440$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8440$eZ1vL '(_ any)))))
         g$e$8437$eZ1vL))))
   (g$record-constructor-descriptor-transformer$7952$eZ1vL
     g$record-constructor-descriptor-transformer$11455$eZ1vL
     (case-lambda
       ((g$e$8447$eZ1vL g$r$8448$eZ1vL g$mr$8449$eZ1vL)
        ((case-lambda
           ((g$t$8450$eZ1vL)
            ((case-lambda
               ((g$ls/false$8451$eZ1vL)
                (if (if g$ls/false$8451$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8452$eZ1vL)
                             (g$id?$7719$eZ1vL g$id$8452$eZ1vL)))
                          g$ls/false$8451$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8453$eZ1vL)
                       ((case-lambda
                          ((g$lab$8454$eZ1vL)
                           ((case-lambda
                              ((g$b$8455$eZ1vL)
                               ((case-lambda
                                  ((g$type$8456$eZ1vL)
                                   (begin
                                     (if (not g$lab$8454$eZ1vL)
                                       (g$raise-unbound-error$7738$eZ1vL
                                         g$id$8453$eZ1vL)
                                       (void))
                                     (if (not (if (eq? g$type$8456$eZ1vL '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7737$eZ1vL
                                                      g$b$8455$eZ1vL)))
                                                '#f))
                                       (g$syntax-violation$8109$eZ1vL
                                         '#f
                                         '"invalid type"
                                         g$e$8447$eZ1vL)
                                       (void))
                                     (g$chi-expr$8015$eZ1vL
                                       (g$cadr$5264$eZ1vL
                                         (g$binding-value$7737$eZ1vL
                                           g$b$8455$eZ1vL))
                                       g$r$8448$eZ1vL
                                       g$mr$8449$eZ1vL))))
                                (g$binding-type$7736$eZ1vL g$b$8455$eZ1vL))))
                            (g$label->binding$7734$eZ1vL
                              g$lab$8454$eZ1vL
                              g$r$8448$eZ1vL))))
                        (g$id->label$7732$eZ1vL g$id$8453$eZ1vL))))
                    g$ls/false$8451$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8450$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8450$eZ1vL '(_ any)))))
         g$e$8447$eZ1vL))))
   (g$when-macro$7953$eZ1vL
     g$when-macro$11456$eZ1vL
     (case-lambda
       ((g$e$8457$eZ1vL)
        ((case-lambda
           ((g$t$8458$eZ1vL)
            ((case-lambda
               ((g$ls/false$8459$eZ1vL)
                (if g$ls/false$8459$eZ1vL
                  (apply
                    (case-lambda
                      ((g$test$8460$eZ1vL g$e$8461$eZ1vL g$e*$8462$eZ1vL)
                       (g$bless$7960$eZ1vL
                         (list
                           'if
                           g$test$8460$eZ1vL
                           (cons
                             'begin
                             (cons g$e$8461$eZ1vL g$e*$8462$eZ1vL))))))
                    g$ls/false$8459$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8458$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8458$eZ1vL
               '(_ any any . each-any)))))
         g$e$8457$eZ1vL))))
   (g$unless-macro$7954$eZ1vL
     g$unless-macro$11457$eZ1vL
     (case-lambda
       ((g$e$8463$eZ1vL)
        ((case-lambda
           ((g$t$8464$eZ1vL)
            ((case-lambda
               ((g$ls/false$8465$eZ1vL)
                (if g$ls/false$8465$eZ1vL
                  (apply
                    (case-lambda
                      ((g$test$8466$eZ1vL g$e$8467$eZ1vL g$e*$8468$eZ1vL)
                       (g$bless$7960$eZ1vL
                         (list
                           'if
                           (list 'not g$test$8466$eZ1vL)
                           (cons
                             'begin
                             (cons g$e$8467$eZ1vL g$e*$8468$eZ1vL))))))
                    g$ls/false$8465$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8464$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8464$eZ1vL
               '(_ any any . each-any)))))
         g$e$8463$eZ1vL))))
   (g$if-transformer$7955$eZ1vL
     g$if-transformer$11458$eZ1vL
     (case-lambda
       ((g$e$8469$eZ1vL g$r$8470$eZ1vL g$mr$8471$eZ1vL)
        ((case-lambda
           ((g$t$8472$eZ1vL)
            ((case-lambda
               ((g$ls/false$8473$eZ1vL)
                (if g$ls/false$8473$eZ1vL
                  (apply
                    (case-lambda
                      ((g$e0$8474$eZ1vL g$e1$8475$eZ1vL g$e2$8476$eZ1vL)
                       (list
                         'if
                         (g$chi-expr$8015$eZ1vL
                           g$e0$8474$eZ1vL
                           g$r$8470$eZ1vL
                           g$mr$8471$eZ1vL)
                         (g$chi-expr$8015$eZ1vL
                           g$e1$8475$eZ1vL
                           g$r$8470$eZ1vL
                           g$mr$8471$eZ1vL)
                         (g$chi-expr$8015$eZ1vL
                           g$e2$8476$eZ1vL
                           g$r$8470$eZ1vL
                           g$mr$8471$eZ1vL))))
                    g$ls/false$8473$eZ1vL)
                  ((case-lambda
                     ((g$t$8477$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8478$eZ1vL)
                          (if g$ls/false$8478$eZ1vL
                            (apply
                              (case-lambda
                                ((g$e0$8479$eZ1vL g$e1$8480$eZ1vL)
                                 (list
                                   'if
                                   (g$chi-expr$8015$eZ1vL
                                     g$e0$8479$eZ1vL
                                     g$r$8470$eZ1vL
                                     g$mr$8471$eZ1vL)
                                   (g$chi-expr$8015$eZ1vL
                                     g$e1$8480$eZ1vL
                                     g$r$8470$eZ1vL
                                     g$mr$8471$eZ1vL)
                                   (g$build-void$7649$eZ1vL))))
                              g$ls/false$8478$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$8477$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$8477$eZ1vL
                         '(_ any any)))))
                   g$t$8472$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8472$eZ1vL '(_ any any any)))))
         g$e$8469$eZ1vL))))
   (g$case-macro$7956$eZ1vL
     g$case-macro$11459$eZ1vL
     (case-lambda
       ((g$e$8481$eZ1vL)
        (letrec* ((g$build-last$8482$eZ1vL
                    (case-lambda
                      ((g$cls$8502$eZ1vL)
                       ((case-lambda
                          ((g$t$8503$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$8504$eZ1vL)
                               (if g$ls/false$8504$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$e$8505$eZ1vL g$e*$8506$eZ1vL)
                                      (cons
                                        'begin
                                        (cons g$e$8505$eZ1vL g$e*$8506$eZ1vL))))
                                   g$ls/false$8504$eZ1vL)
                                 ((case-lambda
                                    ((g$t$8507$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$8508$eZ1vL)
                                         (if g$ls/false$8508$eZ1vL
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8483$eZ1vL
                                                  g$cls$8502$eZ1vL
                                                  '(if #f #f))))
                                             g$ls/false$8508$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8507$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$8507$eZ1vL
                                        '_))))
                                  g$t$8503$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$8503$eZ1vL
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8502$eZ1vL))))
                  (g$build-one$8483$eZ1vL
                    (case-lambda
                      ((g$cls$8495$eZ1vL g$k$8496$eZ1vL)
                       ((case-lambda
                          ((g$t$8497$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$8498$eZ1vL)
                               (if g$ls/false$8498$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$d*$8499$eZ1vL
                                        g$e$8500$eZ1vL
                                        g$e*$8501$eZ1vL)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8499$eZ1vL))
                                        (cons
                                          'begin
                                          (cons g$e$8500$eZ1vL g$e*$8501$eZ1vL))
                                        g$k$8496$eZ1vL)))
                                   g$ls/false$8498$eZ1vL)
                                 (g$syntax-violation$8109$eZ1vL
                                   '#f
                                   '"invalid syntax"
                                   g$t$8497$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$8497$eZ1vL
                              '(each-any any . each-any)))))
                        g$cls$8495$eZ1vL)))))
          ((case-lambda
             ((g$t$8484$eZ1vL)
              ((case-lambda
                 ((g$ls/false$8485$eZ1vL)
                  (if g$ls/false$8485$eZ1vL
                    (apply
                      (case-lambda
                        ((g$expr$8486$eZ1vL)
                         (g$bless$7960$eZ1vL
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8486$eZ1vL))
                               '((if #f #f)))))))
                      g$ls/false$8485$eZ1vL)
                    ((case-lambda
                       ((g$t$8487$eZ1vL)
                        ((case-lambda
                           ((g$ls/false$8488$eZ1vL)
                            (if g$ls/false$8488$eZ1vL
                              (apply
                                (case-lambda
                                  ((g$expr$8489$eZ1vL
                                     g$cls$8490$eZ1vL
                                     g$cls*$8491$eZ1vL)
                                   (g$bless$7960$eZ1vL
                                     (list
                                       'let
                                       (list (list 't g$expr$8489$eZ1vL))
                                       ((letrec ((g$f$8492$eZ1vL
                                                   (case-lambda
                                                     ((g$cls$8493$eZ1vL
                                                        g$cls*$8494$eZ1vL)
                                                      (if (null?
                                                            g$cls*$8494$eZ1vL)
                                                        (g$build-last$8482$eZ1vL
                                                          g$cls$8493$eZ1vL)
                                                        (g$build-one$8483$eZ1vL
                                                          g$cls$8493$eZ1vL
                                                          (g$f$8492$eZ1vL
                                                            (car g$cls*$8494$eZ1vL)
                                                            (cdr g$cls*$8494$eZ1vL))))))))
                                          g$f$8492$eZ1vL)
                                        g$cls$8490$eZ1vL
                                        g$cls*$8491$eZ1vL)))))
                                g$ls/false$8488$eZ1vL)
                              (g$syntax-violation$8109$eZ1vL
                                '#f
                                '"invalid syntax"
                                g$t$8487$eZ1vL))))
                         (g$syntax-dispatch$7997$eZ1vL
                           g$t$8487$eZ1vL
                           '(_ any any . each-any)))))
                     g$t$8484$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL g$t$8484$eZ1vL '(_ any)))))
           g$e$8481$eZ1vL)))))
   (g$quote-transformer$7957$eZ1vL
     g$quote-transformer$11460$eZ1vL
     (case-lambda
       ((g$e$8509$eZ1vL g$r$8510$eZ1vL g$mr$8511$eZ1vL)
        ((case-lambda
           ((g$t$8512$eZ1vL)
            ((case-lambda
               ((g$ls/false$8513$eZ1vL)
                (if g$ls/false$8513$eZ1vL
                  (apply
                    (case-lambda
                      ((g$datum$8514$eZ1vL)
                       (list
                         'quote
                         (g$stx->datum$7730$eZ1vL g$datum$8514$eZ1vL))))
                    g$ls/false$8513$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8512$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8512$eZ1vL '(_ any)))))
         g$e$8509$eZ1vL))))
   (g$case-lambda-transformer$7958$eZ1vL
     g$case-lambda-transformer$11461$eZ1vL
     (case-lambda
       ((g$e$8515$eZ1vL g$r$8516$eZ1vL g$mr$8517$eZ1vL)
        ((case-lambda
           ((g$t$8518$eZ1vL)
            ((case-lambda
               ((g$ls/false$8519$eZ1vL)
                (if g$ls/false$8519$eZ1vL
                  (apply
                    (case-lambda
                      ((g$fmls*$8520$eZ1vL g$b*$8521$eZ1vL g$b**$8522$eZ1vL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$8019$eZ1vL
                              g$e$8515$eZ1vL
                              g$fmls*$8520$eZ1vL
                              (g$map$5063$eZ1vL
                                cons
                                g$b*$8521$eZ1vL
                                g$b**$8522$eZ1vL)
                              g$r$8516$eZ1vL
                              g$mr$8517$eZ1vL)))
                         (case-lambda
                           ((g$fmls*$8525$eZ1vL g$body*$8526$eZ1vL)
                            ((case-lambda
                               ((g$body*$8527$eZ1vL g$fmls*$8528$eZ1vL)
                                (g$build-case-lambda$7646$eZ1vL
                                  '#f
                                  g$fmls*$8528$eZ1vL
                                  g$body*$8527$eZ1vL)))
                             g$body*$8526$eZ1vL
                             g$fmls*$8525$eZ1vL))))))
                    g$ls/false$8519$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8518$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8518$eZ1vL
               '(_ . #(each (any any . each-any)))))))
         g$e$8515$eZ1vL))))
   (g$lambda-transformer$7959$eZ1vL
     g$lambda-transformer$11462$eZ1vL
     (case-lambda
       ((g$e$8529$eZ1vL g$r$8530$eZ1vL g$mr$8531$eZ1vL)
        ((case-lambda
           ((g$t$8532$eZ1vL)
            ((case-lambda
               ((g$ls/false$8533$eZ1vL)
                (if g$ls/false$8533$eZ1vL
                  (apply
                    (case-lambda
                      ((g$fmls$8534$eZ1vL g$b$8535$eZ1vL g$b*$8536$eZ1vL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$8018$eZ1vL
                              g$e$8529$eZ1vL
                              g$fmls$8534$eZ1vL
                              (cons g$b$8535$eZ1vL g$b*$8536$eZ1vL)
                              g$r$8530$eZ1vL
                              g$mr$8531$eZ1vL)))
                         (case-lambda
                           ((g$fmls$8539$eZ1vL g$body$8540$eZ1vL)
                            ((case-lambda
                               ((g$body$8541$eZ1vL g$fmls$8542$eZ1vL)
                                (g$build-lambda$7645$eZ1vL
                                  '#f
                                  g$fmls$8542$eZ1vL
                                  g$body$8541$eZ1vL)))
                             g$body$8540$eZ1vL
                             g$fmls$8539$eZ1vL))))))
                    g$ls/false$8533$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8532$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8532$eZ1vL
               '(_ any any . each-any)))))
         g$e$8529$eZ1vL))))
   (g$bless$7960$eZ1vL
     g$bless$11463$eZ1vL
     (case-lambda
       ((g$x$8543$eZ1vL)
        (g$mkstx$7707$eZ1vL
          ((letrec ((g$f$8544$eZ1vL
                      (case-lambda
                        ((g$x$8545$eZ1vL)
                         (if (g$stx?$7691$eZ1vL g$x$8545$eZ1vL)
                           g$x$8545$eZ1vL
                           (if (pair? g$x$8545$eZ1vL)
                             (cons
                               (g$f$8544$eZ1vL (car g$x$8545$eZ1vL))
                               (g$f$8544$eZ1vL (cdr g$x$8545$eZ1vL)))
                             (if (symbol? g$x$8545$eZ1vL)
                               (g$scheme-stx$7940$eZ1vL g$x$8545$eZ1vL)
                               (if (vector? g$x$8545$eZ1vL)
                                 (vector-map g$f$8544$eZ1vL g$x$8545$eZ1vL)
                                 g$x$8545$eZ1vL))))))))
             g$f$8544$eZ1vL)
           g$x$8543$eZ1vL)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7961$eZ1vL
     g$with-syntax-macro$11464$eZ1vL
     (case-lambda
       ((g$e$8546$eZ1vL)
        ((case-lambda
           ((g$t$8547$eZ1vL)
            ((case-lambda
               ((g$ls/false$8548$eZ1vL)
                (if g$ls/false$8548$eZ1vL
                  (apply
                    (case-lambda
                      ((g$pat*$8549$eZ1vL
                         g$expr*$8550$eZ1vL
                         g$b$8551$eZ1vL
                         g$b*$8552$eZ1vL)
                       ((case-lambda
                          ((g$idn*$8553$eZ1vL)
                           (begin
                             (g$verify-formals$8017$eZ1vL
                               (g$map$5063$eZ1vL car g$idn*$8553$eZ1vL)
                               g$e$8546$eZ1vL)
                             ((case-lambda
                                ((g$t*$8554$eZ1vL)
                                 (g$bless$7960$eZ1vL
                                   (list
                                     'let
                                     (g$map$5063$eZ1vL
                                       list
                                       g$t*$8554$eZ1vL
                                       g$expr*$8550$eZ1vL)
                                     ((letrec ((g$f$8555$eZ1vL
                                                 (case-lambda
                                                   ((g$pat*$8556$eZ1vL
                                                      g$t*$8557$eZ1vL)
                                                    (if (null?
                                                          g$pat*$8556$eZ1vL)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8551$eZ1vL
                                                            g$b*$8552$eZ1vL)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8557$eZ1vL)
                                                        '()
                                                        (list
                                                          (car g$pat*$8556$eZ1vL)
                                                          (g$f$8555$eZ1vL
                                                            (cdr g$pat*$8556$eZ1vL)
                                                            (cdr g$t*$8557$eZ1vL)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8556$eZ1vL))
                                                            (car g$t*$8557$eZ1vL)))))))))
                                        g$f$8555$eZ1vL)
                                      g$pat*$8549$eZ1vL
                                      g$t*$8554$eZ1vL)))))
                              (g$generate-temporaries$8099$eZ1vL
                                g$expr*$8550$eZ1vL)))))
                        ((letrec ((g$f$8558$eZ1vL
                                    (case-lambda
                                      ((g$pat*$8559$eZ1vL)
                                       (if (null? g$pat*$8559$eZ1vL)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7996$eZ1vL
                                                (car g$pat*$8559$eZ1vL)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8562$eZ1vL
                                                g$idn*$8563$eZ1vL)
                                              ((case-lambda
                                                 ((g$idn*$8564$eZ1vL
                                                    g$pat$8565$eZ1vL)
                                                  (append
                                                    g$idn*$8564$eZ1vL
                                                    (g$f$8558$eZ1vL
                                                      (cdr g$pat*$8559$eZ1vL)))))
                                               g$idn*$8563$eZ1vL
                                               g$pat$8562$eZ1vL)))))))))
                           g$f$8558$eZ1vL)
                         g$pat*$8549$eZ1vL))))
                    g$ls/false$8548$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8547$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8547$eZ1vL
               '(_ #(each (any any)) any . each-any)))))
         g$e$8546$eZ1vL))))
   (g$invalid-fmls-error$7962$eZ1vL
     g$invalid-fmls-error$11465$eZ1vL
     (case-lambda
       ((g$stx$8566$eZ1vL g$fmls$8567$eZ1vL)
        ((case-lambda
           ((g$t$8568$eZ1vL)
            ((case-lambda
               ((g$ls/false$8569$eZ1vL)
                (if g$ls/false$8569$eZ1vL
                  (apply
                    (case-lambda
                      ((g$id*$8570$eZ1vL g$last$8571$eZ1vL)
                       ((letrec ((g$f$8572$eZ1vL
                                   (case-lambda
                                     ((g$id*$8573$eZ1vL)
                                      (if (null? g$id*$8573$eZ1vL)
                                        (values)
                                        (if (not (g$id?$7719$eZ1vL
                                                   (car g$id*$8573$eZ1vL)))
                                          (g$syntax-violation$8109$eZ1vL
                                            '#f
                                            '"not an identifier"
                                            g$stx$8566$eZ1vL
                                            (car g$id*$8573$eZ1vL))
                                          (begin
                                            (g$f$8572$eZ1vL
                                              (cdr g$id*$8573$eZ1vL))
                                            (if (g$bound-id-member?$7726$eZ1vL
                                                  (car g$id*$8573$eZ1vL)
                                                  (cdr g$id*$8573$eZ1vL))
                                              (g$syntax-violation$8109$eZ1vL
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8566$eZ1vL
                                                (car g$id*$8573$eZ1vL))
                                              (void)))))))))
                          g$f$8572$eZ1vL)
                        (if (g$id?$7719$eZ1vL g$last$8571$eZ1vL)
                          (cons g$last$8571$eZ1vL g$id*$8570$eZ1vL)
                          (if (g$syntax-null?$7714$eZ1vL g$last$8571$eZ1vL)
                            g$id*$8570$eZ1vL
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"not an identifier"
                              g$stx$8566$eZ1vL
                              g$last$8571$eZ1vL))))))
                    g$ls/false$8569$eZ1vL)
                  ((case-lambda
                     ((g$t$8574$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8575$eZ1vL)
                          (if g$ls/false$8575$eZ1vL
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8109$eZ1vL
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8566$eZ1vL
                                   g$fmls$8567$eZ1vL)))
                              g$ls/false$8575$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$8574$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL g$t$8574$eZ1vL '_))))
                   g$t$8568$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8568$eZ1vL
               '#(each+ any () any)))))
         g$fmls$8567$eZ1vL))))
   (g$let-macro$7963$eZ1vL
     g$let-macro$11466$eZ1vL
     (case-lambda
       ((g$stx$8576$eZ1vL)
        ((case-lambda
           ((g$t$8577$eZ1vL)
            ((case-lambda
               ((g$ls/false$8578$eZ1vL)
                (if g$ls/false$8578$eZ1vL
                  (apply
                    (case-lambda
                      ((g$lhs*$8579$eZ1vL
                         g$rhs*$8580$eZ1vL
                         g$b$8581$eZ1vL
                         g$b*$8582$eZ1vL)
                       (if (g$valid-bound-ids?$7724$eZ1vL g$lhs*$8579$eZ1vL)
                         (g$bless$7960$eZ1vL
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8579$eZ1vL
                                 (cons g$b$8581$eZ1vL g$b*$8582$eZ1vL)))
                             g$rhs*$8580$eZ1vL))
                         (g$invalid-fmls-error$7962$eZ1vL
                           g$stx$8576$eZ1vL
                           g$lhs*$8579$eZ1vL))))
                    g$ls/false$8578$eZ1vL)
                  ((case-lambda
                     ((g$t$8583$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8584$eZ1vL)
                          (if (if g$ls/false$8584$eZ1vL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8585$eZ1vL
                                         g$lhs*$8586$eZ1vL
                                         g$rhs*$8587$eZ1vL
                                         g$b$8588$eZ1vL
                                         g$b*$8589$eZ1vL)
                                       (g$id?$7719$eZ1vL g$f$8585$eZ1vL)))
                                    g$ls/false$8584$eZ1vL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8590$eZ1vL
                                   g$lhs*$8591$eZ1vL
                                   g$rhs*$8592$eZ1vL
                                   g$b$8593$eZ1vL
                                   g$b*$8594$eZ1vL)
                                 (if (g$valid-bound-ids?$7724$eZ1vL
                                       g$lhs*$8591$eZ1vL)
                                   (g$bless$7960$eZ1vL
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8590$eZ1vL
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8591$eZ1vL
                                                 (cons
                                                   g$b$8593$eZ1vL
                                                   g$b*$8594$eZ1vL)))))
                                         g$f$8590$eZ1vL)
                                       g$rhs*$8592$eZ1vL))
                                   (g$invalid-fmls-error$7962$eZ1vL
                                     g$stx$8576$eZ1vL
                                     g$lhs*$8591$eZ1vL))))
                              g$ls/false$8584$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$8583$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$8583$eZ1vL
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8577$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8577$eZ1vL
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8576$eZ1vL))))
   (g$let-values-macro$7964$eZ1vL
     g$let-values-macro$11467$eZ1vL
     (case-lambda
       ((g$stx$8595$eZ1vL)
        (letrec* ((g$rename$8596$eZ1vL
                    (case-lambda
                      ((g$x$8647$eZ1vL g$old*$8648$eZ1vL g$new*$8649$eZ1vL)
                       (begin
                         (if (not (g$id?$7719$eZ1vL g$x$8647$eZ1vL))
                           (g$syntax-violation$8109$eZ1vL
                             '#f
                             '"not an indentifier"
                             g$stx$8595$eZ1vL
                             g$x$8647$eZ1vL)
                           (void))
                         (if (g$bound-id-member?$7726$eZ1vL
                               g$x$8647$eZ1vL
                               g$old*$8648$eZ1vL)
                           (g$syntax-violation$8109$eZ1vL
                             '#f
                             '"duplicate binding"
                             g$stx$8595$eZ1vL
                             g$x$8647$eZ1vL)
                           (void))
                         ((case-lambda
                            ((g$y$8650$eZ1vL)
                             (values
                               g$y$8650$eZ1vL
                               (cons g$x$8647$eZ1vL g$old*$8648$eZ1vL)
                               (cons g$y$8650$eZ1vL g$new*$8649$eZ1vL))))
                          (gensym
                            (g$syntax->datum$8112$eZ1vL g$x$8647$eZ1vL)))))))
                  (g$rename*$8597$eZ1vL
                    (case-lambda
                      ((g$x*$8638$eZ1vL g$old*$8639$eZ1vL g$new*$8640$eZ1vL)
                       (if (null? g$x*$8638$eZ1vL)
                         (values '() g$old*$8639$eZ1vL g$new*$8640$eZ1vL)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8596$eZ1vL
                                (car g$x*$8638$eZ1vL)
                                g$old*$8639$eZ1vL
                                g$new*$8640$eZ1vL)))
                           (case-lambda
                             ((g$x$8641$eZ1vL
                                g$old*$8642$eZ1vL
                                g$new*$8643$eZ1vL)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8597$eZ1vL
                                     (cdr g$x*$8638$eZ1vL)
                                     g$old*$8642$eZ1vL
                                     g$new*$8643$eZ1vL)))
                                (case-lambda
                                  ((g$x*$8644$eZ1vL
                                     g$old*$8645$eZ1vL
                                     g$new*$8646$eZ1vL)
                                   (values
                                     (cons g$x$8641$eZ1vL g$x*$8644$eZ1vL)
                                     g$old*$8645$eZ1vL
                                     g$new*$8646$eZ1vL))))))))))))
          ((case-lambda
             ((g$t$8598$eZ1vL)
              ((case-lambda
                 ((g$ls/false$8599$eZ1vL)
                  (if g$ls/false$8599$eZ1vL
                    (apply
                      (case-lambda
                        ((g$b$8600$eZ1vL g$b*$8601$eZ1vL)
                         (g$cons*$5065$eZ1vL
                           (g$bless$7960$eZ1vL 'let)
                           '()
                           g$b$8600$eZ1vL
                           g$b*$8601$eZ1vL)))
                      g$ls/false$8599$eZ1vL)
                    ((case-lambda
                       ((g$t$8602$eZ1vL)
                        ((case-lambda
                           ((g$ls/false$8603$eZ1vL)
                            (if g$ls/false$8603$eZ1vL
                              (apply
                                (case-lambda
                                  ((g$lhs*$8604$eZ1vL
                                     g$rhs*$8605$eZ1vL
                                     g$b$8606$eZ1vL
                                     g$b*$8607$eZ1vL)
                                   (g$bless$7960$eZ1vL
                                     ((letrec ((g$f$8608$eZ1vL
                                                 (case-lambda
                                                   ((g$lhs*$8609$eZ1vL
                                                      g$rhs*$8610$eZ1vL
                                                      g$old*$8611$eZ1vL
                                                      g$new*$8612$eZ1vL)
                                                    (if (null?
                                                          g$lhs*$8609$eZ1vL)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5063$eZ1vL
                                                            list
                                                            g$old*$8611$eZ1vL
                                                            g$new*$8612$eZ1vL)
                                                          (cons
                                                            g$b$8606$eZ1vL
                                                            g$b*$8607$eZ1vL)))
                                                      ((case-lambda
                                                         ((g$t$8613$eZ1vL)
                                                          ((case-lambda
                                                             ((g$ls/false$8614$eZ1vL)
                                                              (if g$ls/false$8614$eZ1vL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8615$eZ1vL)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8597$eZ1vL
                                                                            g$x*$8615$eZ1vL
                                                                            g$old*$8611$eZ1vL
                                                                            g$new*$8612$eZ1vL)))
                                                                       (case-lambda
                                                                         ((g$y*$8619$eZ1vL
                                                                            g$old*$8620$eZ1vL
                                                                            g$new*$8621$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$new*$8622$eZ1vL
                                                                                g$old*$8623$eZ1vL
                                                                                g$y*$8624$eZ1vL)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8610$eZ1vL))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8624$eZ1vL
                                                                                  (g$f$8608$eZ1vL
                                                                                    (cdr g$lhs*$8609$eZ1vL)
                                                                                    (cdr g$rhs*$8610$eZ1vL)
                                                                                    g$old*$8623$eZ1vL
                                                                                    g$new*$8622$eZ1vL)))))
                                                                           g$new*$8621$eZ1vL
                                                                           g$old*$8620$eZ1vL
                                                                           g$y*$8619$eZ1vL))))))
                                                                  g$ls/false$8614$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$t$8625$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8626$eZ1vL)
                                                                        (if g$ls/false$8626$eZ1vL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8627$eZ1vL
                                                                                 g$x$8628$eZ1vL)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8596$eZ1vL
                                                                                      g$x$8628$eZ1vL
                                                                                      g$old*$8611$eZ1vL
                                                                                      g$new*$8612$eZ1vL)))
                                                                                 (case-lambda
                                                                                   ((g$y$8629$eZ1vL
                                                                                      g$old*$8630$eZ1vL
                                                                                      g$new*$8631$eZ1vL)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8597$eZ1vL
                                                                                           g$x*$8627$eZ1vL
                                                                                           g$old*$8630$eZ1vL
                                                                                           g$new*$8631$eZ1vL)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8632$eZ1vL
                                                                                           g$old*$8633$eZ1vL
                                                                                           g$new*$8634$eZ1vL)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8610$eZ1vL))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8632$eZ1vL
                                                                                               g$y$8629$eZ1vL)
                                                                                             (g$f$8608$eZ1vL
                                                                                               (cdr g$lhs*$8609$eZ1vL)
                                                                                               (cdr g$rhs*$8610$eZ1vL)
                                                                                               g$old*$8633$eZ1vL
                                                                                               g$new*$8634$eZ1vL)))))))))))
                                                                            g$ls/false$8626$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$t$8635$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8636$eZ1vL)
                                                                                  (if g$ls/false$8636$eZ1vL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8637$eZ1vL)
                                                                                         (g$syntax-violation$8109$eZ1vL
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8595$eZ1vL
                                                                                           g$others$8637$eZ1vL)))
                                                                                      g$ls/false$8636$eZ1vL)
                                                                                    (g$syntax-violation$8109$eZ1vL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8635$eZ1vL))))
                                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                                 g$t$8635$eZ1vL
                                                                                 'any))))
                                                                           g$t$8625$eZ1vL))))
                                                                     (g$syntax-dispatch$7997$eZ1vL
                                                                       g$t$8625$eZ1vL
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8613$eZ1vL))))
                                                           (g$syntax-dispatch$7997$eZ1vL
                                                             g$t$8613$eZ1vL
                                                             'each-any))))
                                                       (car g$lhs*$8609$eZ1vL)))))))
                                        g$f$8608$eZ1vL)
                                      g$lhs*$8604$eZ1vL
                                      g$rhs*$8605$eZ1vL
                                      '()
                                      '()))))
                                g$ls/false$8603$eZ1vL)
                              (g$syntax-violation$8109$eZ1vL
                                '#f
                                '"invalid syntax"
                                g$t$8602$eZ1vL))))
                         (g$syntax-dispatch$7997$eZ1vL
                           g$t$8602$eZ1vL
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8598$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL
                 g$t$8598$eZ1vL
                 '(_ () any . each-any)))))
           g$stx$8595$eZ1vL)))))
   (g$let*-values-macro$7965$eZ1vL
     g$let*-values-macro$11468$eZ1vL
     (case-lambda
       ((g$stx$8651$eZ1vL)
        (letrec* ((g$check$8652$eZ1vL
                    (case-lambda
                      ((g$x*$8676$eZ1vL)
                       (if (not (null? g$x*$8676$eZ1vL))
                         ((case-lambda
                            ((g$x$8677$eZ1vL)
                             (begin
                               (if (not (g$id?$7719$eZ1vL g$x$8677$eZ1vL))
                                 (g$syntax-violation$8109$eZ1vL
                                   '#f
                                   '"not an identifier"
                                   g$stx$8651$eZ1vL
                                   g$x$8677$eZ1vL)
                                 (void))
                               (g$check$8652$eZ1vL (cdr g$x*$8676$eZ1vL))
                               (if (g$bound-id-member?$7726$eZ1vL
                                     g$x$8677$eZ1vL
                                     (cdr g$x*$8676$eZ1vL))
                                 (g$syntax-violation$8109$eZ1vL
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8651$eZ1vL
                                   g$x$8677$eZ1vL)
                                 (void)))))
                          (car g$x*$8676$eZ1vL))
                         (void))))))
          ((case-lambda
             ((g$t$8653$eZ1vL)
              ((case-lambda
                 ((g$ls/false$8654$eZ1vL)
                  (if g$ls/false$8654$eZ1vL
                    (apply
                      (case-lambda
                        ((g$b$8655$eZ1vL g$b*$8656$eZ1vL)
                         (g$cons*$5065$eZ1vL
                           (g$bless$7960$eZ1vL 'let)
                           '()
                           g$b$8655$eZ1vL
                           g$b*$8656$eZ1vL)))
                      g$ls/false$8654$eZ1vL)
                    ((case-lambda
                       ((g$t$8657$eZ1vL)
                        ((case-lambda
                           ((g$ls/false$8658$eZ1vL)
                            (if g$ls/false$8658$eZ1vL
                              (apply
                                (case-lambda
                                  ((g$lhs*$8659$eZ1vL
                                     g$rhs*$8660$eZ1vL
                                     g$b$8661$eZ1vL
                                     g$b*$8662$eZ1vL)
                                   (g$bless$7960$eZ1vL
                                     ((letrec ((g$f$8663$eZ1vL
                                                 (case-lambda
                                                   ((g$lhs*$8664$eZ1vL
                                                      g$rhs*$8665$eZ1vL)
                                                    (if (null?
                                                          g$lhs*$8664$eZ1vL)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8661$eZ1vL
                                                          g$b*$8662$eZ1vL))
                                                      ((case-lambda
                                                         ((g$t$8666$eZ1vL)
                                                          ((case-lambda
                                                             ((g$ls/false$8667$eZ1vL)
                                                              (if g$ls/false$8667$eZ1vL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8668$eZ1vL)
                                                                     (begin
                                                                       (g$check$8652$eZ1vL
                                                                         g$x*$8668$eZ1vL)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8665$eZ1vL))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8668$eZ1vL
                                                                           (g$f$8663$eZ1vL
                                                                             (cdr g$lhs*$8664$eZ1vL)
                                                                             (cdr g$rhs*$8665$eZ1vL)))))))
                                                                  g$ls/false$8667$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$t$8669$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8670$eZ1vL)
                                                                        (if g$ls/false$8670$eZ1vL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8671$eZ1vL
                                                                                 g$x$8672$eZ1vL)
                                                                               (begin
                                                                                 (g$check$8652$eZ1vL
                                                                                   (cons
                                                                                     g$x$8672$eZ1vL
                                                                                     g$x*$8671$eZ1vL))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8665$eZ1vL))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8671$eZ1vL
                                                                                       g$x$8672$eZ1vL)
                                                                                     (g$f$8663$eZ1vL
                                                                                       (cdr g$lhs*$8664$eZ1vL)
                                                                                       (cdr g$rhs*$8665$eZ1vL)))))))
                                                                            g$ls/false$8670$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$t$8673$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8674$eZ1vL)
                                                                                  (if g$ls/false$8674$eZ1vL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8675$eZ1vL)
                                                                                         (g$syntax-violation$8109$eZ1vL
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8651$eZ1vL
                                                                                           g$others$8675$eZ1vL)))
                                                                                      g$ls/false$8674$eZ1vL)
                                                                                    (g$syntax-violation$8109$eZ1vL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8673$eZ1vL))))
                                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                                 g$t$8673$eZ1vL
                                                                                 'any))))
                                                                           g$t$8669$eZ1vL))))
                                                                     (g$syntax-dispatch$7997$eZ1vL
                                                                       g$t$8669$eZ1vL
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8666$eZ1vL))))
                                                           (g$syntax-dispatch$7997$eZ1vL
                                                             g$t$8666$eZ1vL
                                                             'each-any))))
                                                       (car g$lhs*$8664$eZ1vL)))))))
                                        g$f$8663$eZ1vL)
                                      g$lhs*$8659$eZ1vL
                                      g$rhs*$8660$eZ1vL))))
                                g$ls/false$8658$eZ1vL)
                              (g$syntax-violation$8109$eZ1vL
                                '#f
                                '"invalid syntax"
                                g$t$8657$eZ1vL))))
                         (g$syntax-dispatch$7997$eZ1vL
                           g$t$8657$eZ1vL
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8653$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL
                 g$t$8653$eZ1vL
                 '(_ () any . each-any)))))
           g$stx$8651$eZ1vL)))))
   (g$trace-lambda-macro$7966$eZ1vL
     g$trace-lambda-macro$11469$eZ1vL
     (case-lambda
       ((g$stx$8678$eZ1vL)
        ((case-lambda
           ((g$t$8679$eZ1vL)
            ((case-lambda
               ((g$ls/false$8680$eZ1vL)
                (if g$ls/false$8680$eZ1vL
                  (apply
                    (case-lambda
                      ((g$who$8681$eZ1vL
                         g$fmls$8682$eZ1vL
                         g$b$8683$eZ1vL
                         g$b*$8684$eZ1vL)
                       (if (g$valid-bound-ids?$7724$eZ1vL g$fmls$8682$eZ1vL)
                         (g$bless$7960$eZ1vL
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8681$eZ1vL)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8682$eZ1vL
                                 (cons g$b$8683$eZ1vL g$b*$8684$eZ1vL)))))
                         (g$invalid-fmls-error$7962$eZ1vL
                           g$stx$8678$eZ1vL
                           g$fmls$8682$eZ1vL))))
                    g$ls/false$8680$eZ1vL)
                  ((case-lambda
                     ((g$t$8685$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8686$eZ1vL)
                          (if g$ls/false$8686$eZ1vL
                            (apply
                              (case-lambda
                                ((g$who$8687$eZ1vL
                                   g$fmls$8688$eZ1vL
                                   g$last$8689$eZ1vL
                                   g$b$8690$eZ1vL
                                   g$b*$8691$eZ1vL)
                                 (if (g$valid-bound-ids?$7724$eZ1vL
                                       (cons
                                         g$last$8689$eZ1vL
                                         g$fmls$8688$eZ1vL))
                                   (g$bless$7960$eZ1vL
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8687$eZ1vL)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8688$eZ1vL
                                             g$last$8689$eZ1vL)
                                           (cons
                                             g$b$8690$eZ1vL
                                             g$b*$8691$eZ1vL)))))
                                   (g$invalid-fmls-error$7962$eZ1vL
                                     g$stx$8678$eZ1vL
                                     (append
                                       g$fmls$8688$eZ1vL
                                       g$last$8689$eZ1vL)))))
                              g$ls/false$8686$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$8685$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$8685$eZ1vL
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8679$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8679$eZ1vL
               '(_ any each-any any . each-any)))))
         g$stx$8678$eZ1vL))))
   (g$trace-define-macro$7967$eZ1vL
     g$trace-define-macro$11470$eZ1vL
     (case-lambda
       ((g$stx$8692$eZ1vL)
        ((case-lambda
           ((g$t$8693$eZ1vL)
            ((case-lambda
               ((g$ls/false$8694$eZ1vL)
                (if g$ls/false$8694$eZ1vL
                  (apply
                    (case-lambda
                      ((g$who$8695$eZ1vL
                         g$fmls$8696$eZ1vL
                         g$b$8697$eZ1vL
                         g$b*$8698$eZ1vL)
                       (if (g$valid-bound-ids?$7724$eZ1vL g$fmls$8696$eZ1vL)
                         (g$bless$7960$eZ1vL
                           (list
                             'define
                             g$who$8695$eZ1vL
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8695$eZ1vL)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8696$eZ1vL
                                   (cons g$b$8697$eZ1vL g$b*$8698$eZ1vL))))))
                         (g$invalid-fmls-error$7962$eZ1vL
                           g$stx$8692$eZ1vL
                           g$fmls$8696$eZ1vL))))
                    g$ls/false$8694$eZ1vL)
                  ((case-lambda
                     ((g$t$8699$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8700$eZ1vL)
                          (if g$ls/false$8700$eZ1vL
                            (apply
                              (case-lambda
                                ((g$who$8701$eZ1vL
                                   g$fmls$8702$eZ1vL
                                   g$last$8703$eZ1vL
                                   g$b$8704$eZ1vL
                                   g$b*$8705$eZ1vL)
                                 (if (g$valid-bound-ids?$7724$eZ1vL
                                       (cons
                                         g$last$8703$eZ1vL
                                         g$fmls$8702$eZ1vL))
                                   (g$bless$7960$eZ1vL
                                     (list
                                       'define
                                       g$who$8701$eZ1vL
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8701$eZ1vL)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8702$eZ1vL
                                               g$last$8703$eZ1vL)
                                             (cons
                                               g$b$8704$eZ1vL
                                               g$b*$8705$eZ1vL))))))
                                   (g$invalid-fmls-error$7962$eZ1vL
                                     g$stx$8692$eZ1vL
                                     (append
                                       g$fmls$8702$eZ1vL
                                       g$last$8703$eZ1vL)))))
                              g$ls/false$8700$eZ1vL)
                            ((case-lambda
                               ((g$t$8706$eZ1vL)
                                ((case-lambda
                                   ((g$ls/false$8707$eZ1vL)
                                    (if g$ls/false$8707$eZ1vL
                                      (apply
                                        (case-lambda
                                          ((g$who$8708$eZ1vL g$expr$8709$eZ1vL)
                                           (if (g$id?$7719$eZ1vL
                                                 g$who$8708$eZ1vL)
                                             (g$bless$7960$eZ1vL
                                               (list
                                                 'define
                                                 g$who$8708$eZ1vL
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8709$eZ1vL))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8708$eZ1vL)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$8109$eZ1vL
                                               '#f
                                               '"invalid name"
                                               g$stx$8692$eZ1vL))))
                                        g$ls/false$8707$eZ1vL)
                                      (g$syntax-violation$8109$eZ1vL
                                        '#f
                                        '"invalid syntax"
                                        g$t$8706$eZ1vL))))
                                 (g$syntax-dispatch$7997$eZ1vL
                                   g$t$8706$eZ1vL
                                   '(_ any any)))))
                             g$t$8699$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$8699$eZ1vL
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8693$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8693$eZ1vL
               '(_ (any . each-any) any . each-any)))))
         g$stx$8692$eZ1vL))))
   (g$trace-define-syntax-macro$7968$eZ1vL
     g$trace-define-syntax-macro$11471$eZ1vL
     (case-lambda
       ((g$stx$8710$eZ1vL)
        ((case-lambda
           ((g$t$8711$eZ1vL)
            ((case-lambda
               ((g$ls/false$8712$eZ1vL)
                (if g$ls/false$8712$eZ1vL
                  (apply
                    (case-lambda
                      ((g$who$8713$eZ1vL g$expr$8714$eZ1vL)
                       (if (g$id?$7719$eZ1vL g$who$8713$eZ1vL)
                         (g$bless$7960$eZ1vL
                           (list
                             'define-syntax
                             g$who$8713$eZ1vL
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8713$eZ1vL)
                               g$expr$8714$eZ1vL)))
                         (g$syntax-violation$8109$eZ1vL
                           '#f
                           '"invalid name"
                           g$stx$8710$eZ1vL))))
                    g$ls/false$8712$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8711$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8711$eZ1vL '(_ any any)))))
         g$stx$8710$eZ1vL))))
   (g$trace-let/rec-syntax$7969$eZ1vL
     g$trace-let/rec-syntax$11472$eZ1vL
     (case-lambda
       ((g$who$8715$eZ1vL)
        (case-lambda
          ((g$stx$8716$eZ1vL)
           ((case-lambda
              ((g$t$8717$eZ1vL)
               ((case-lambda
                  ((g$ls/false$8718$eZ1vL)
                   (if g$ls/false$8718$eZ1vL
                     (apply
                       (case-lambda
                         ((g$lhs*$8719$eZ1vL
                            g$rhs*$8720$eZ1vL
                            g$b$8721$eZ1vL
                            g$b*$8722$eZ1vL)
                          (if (g$valid-bound-ids?$7724$eZ1vL g$lhs*$8719$eZ1vL)
                            ((case-lambda
                               ((g$rhs*$8723$eZ1vL)
                                (g$bless$7960$eZ1vL
                                  (cons
                                    g$who$8715$eZ1vL
                                    (cons
                                      (g$map$5063$eZ1vL
                                        list
                                        g$lhs*$8719$eZ1vL
                                        g$rhs*$8723$eZ1vL)
                                      (cons g$b$8721$eZ1vL g$b*$8722$eZ1vL))))))
                             (g$map$5063$eZ1vL
                               (case-lambda
                                 ((g$lhs$8724$eZ1vL g$rhs$8725$eZ1vL)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$8724$eZ1vL)
                                    g$rhs$8725$eZ1vL)))
                               g$lhs*$8719$eZ1vL
                               g$rhs*$8720$eZ1vL))
                            (g$invalid-fmls-error$7962$eZ1vL
                              g$stx$8716$eZ1vL
                              g$lhs*$8719$eZ1vL))))
                       g$ls/false$8718$eZ1vL)
                     (g$syntax-violation$8109$eZ1vL
                       '#f
                       '"invalid syntax"
                       g$t$8717$eZ1vL))))
                (g$syntax-dispatch$7997$eZ1vL
                  g$t$8717$eZ1vL
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8716$eZ1vL))))))
   (g$trace-let-syntax-macro$7970$eZ1vL
     g$trace-let-syntax-macro$11473$eZ1vL
     (g$trace-let/rec-syntax$7969$eZ1vL 'let-syntax))
   (g$trace-letrec-syntax-macro$7971$eZ1vL
     g$trace-letrec-syntax-macro$11474$eZ1vL
     (g$trace-let/rec-syntax$7969$eZ1vL 'letrec-syntax))
   (g$guard-macro$7972$eZ1vL
     g$guard-macro$11475$eZ1vL
     (case-lambda
       ((g$x$8726$eZ1vL)
        (letrec* ((g$gen-clauses$8727$eZ1vL
                    (case-lambda
                      ((g$con$8739$eZ1vL
                         g$outerk$8740$eZ1vL
                         g$clause*$8741$eZ1vL)
                       (letrec* ((g$f$8742$eZ1vL
                                   (case-lambda
                                     ((g$x$8770$eZ1vL g$k$8771$eZ1vL)
                                      ((case-lambda
                                         ((g$t$8772$eZ1vL)
                                          ((case-lambda
                                             ((g$ls/false$8773$eZ1vL)
                                              (if g$ls/false$8773$eZ1vL
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8774$eZ1vL
                                                       g$p$8775$eZ1vL)
                                                     ((case-lambda
                                                        ((g$t$8776$eZ1vL)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8776$eZ1vL
                                                               g$e$8774$eZ1vL))
                                                           (list
                                                             'if
                                                             g$t$8776$eZ1vL
                                                             (list
                                                               g$p$8775$eZ1vL
                                                               g$t$8776$eZ1vL)
                                                             g$k$8771$eZ1vL))))
                                                      (gensym))))
                                                  g$ls/false$8773$eZ1vL)
                                                ((case-lambda
                                                   ((g$t$8777$eZ1vL)
                                                    ((case-lambda
                                                       ((g$ls/false$8778$eZ1vL)
                                                        (if g$ls/false$8778$eZ1vL
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8779$eZ1vL)
                                                               ((case-lambda
                                                                  ((g$t$8780$eZ1vL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8780$eZ1vL
                                                                         g$e$8779$eZ1vL))
                                                                     (list
                                                                       'if
                                                                       g$t$8780$eZ1vL
                                                                       g$t$8780$eZ1vL
                                                                       g$k$8771$eZ1vL))))
                                                                (gensym))))
                                                            g$ls/false$8778$eZ1vL)
                                                          ((case-lambda
                                                             ((g$t$8781$eZ1vL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8782$eZ1vL)
                                                                  (if g$ls/false$8782$eZ1vL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8783$eZ1vL
                                                                           g$v$8784$eZ1vL
                                                                           g$v*$8785$eZ1vL)
                                                                         (list
                                                                           'if
                                                                           g$e$8783$eZ1vL
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8784$eZ1vL
                                                                               g$v*$8785$eZ1vL))
                                                                           g$k$8771$eZ1vL)))
                                                                      g$ls/false$8782$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$t$8786$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8787$eZ1vL)
                                                                            (if g$ls/false$8787$eZ1vL
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$8109$eZ1vL
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8770$eZ1vL)))
                                                                                g$ls/false$8787$eZ1vL)
                                                                              (g$syntax-violation$8109$eZ1vL
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8786$eZ1vL))))
                                                                         (g$syntax-dispatch$7997$eZ1vL
                                                                           g$t$8786$eZ1vL
                                                                           '_))))
                                                                     g$t$8781$eZ1vL))))
                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                 g$t$8781$eZ1vL
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8777$eZ1vL))))
                                                     (g$syntax-dispatch$7997$eZ1vL
                                                       g$t$8777$eZ1vL
                                                       '(any)))))
                                                 g$t$8772$eZ1vL))))
                                           (g$syntax-dispatch$7997$eZ1vL
                                             g$t$8772$eZ1vL
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8770$eZ1vL))))
                                 (g$f*$8743$eZ1vL
                                   (case-lambda
                                     ((g$x*$8750$eZ1vL)
                                      ((case-lambda
                                         ((g$t$8751$eZ1vL)
                                          ((case-lambda
                                             ((g$ls/false$8752$eZ1vL)
                                              (if g$ls/false$8752$eZ1vL
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8739$eZ1vL)
                                                       '#t)))
                                                  g$ls/false$8752$eZ1vL)
                                                ((case-lambda
                                                   ((g$t$8753$eZ1vL)
                                                    ((case-lambda
                                                       ((g$ls/false$8754$eZ1vL)
                                                        (if g$ls/false$8754$eZ1vL
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8755$eZ1vL
                                                                 g$e*$8756$eZ1vL)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8755$eZ1vL
                                                                     g$e*$8756$eZ1vL))
                                                                 '#f)))
                                                            g$ls/false$8754$eZ1vL)
                                                          ((case-lambda
                                                             ((g$t$8757$eZ1vL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8758$eZ1vL)
                                                                  (if g$ls/false$8758$eZ1vL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8759$eZ1vL
                                                                           g$cls*$8760$eZ1vL)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8743$eZ1vL
                                                                                g$cls*$8760$eZ1vL)))
                                                                           (case-lambda
                                                                             ((g$e$8763$eZ1vL
                                                                                g$g$8764$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$g$8765$eZ1vL
                                                                                    g$e$8766$eZ1vL)
                                                                                  (values
                                                                                    (g$f$8742$eZ1vL
                                                                                      g$cls$8759$eZ1vL
                                                                                      g$e$8766$eZ1vL)
                                                                                    g$g$8765$eZ1vL)))
                                                                               g$g$8764$eZ1vL
                                                                               g$e$8763$eZ1vL))))))
                                                                      g$ls/false$8758$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$t$8767$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8768$eZ1vL)
                                                                            (if g$ls/false$8768$eZ1vL
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8769$eZ1vL)
                                                                                   (g$syntax-violation$8109$eZ1vL
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8769$eZ1vL)))
                                                                                g$ls/false$8768$eZ1vL)
                                                                              (g$syntax-violation$8109$eZ1vL
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8767$eZ1vL))))
                                                                         (g$syntax-dispatch$7997$eZ1vL
                                                                           g$t$8767$eZ1vL
                                                                           'any))))
                                                                     g$t$8757$eZ1vL))))
                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                 g$t$8757$eZ1vL
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8753$eZ1vL))))
                                                     (g$syntax-dispatch$7997$eZ1vL
                                                       g$t$8753$eZ1vL
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8751$eZ1vL))))
                                           (g$syntax-dispatch$7997$eZ1vL
                                             g$t$8751$eZ1vL
                                             '()))))
                                       g$x*$8750$eZ1vL)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8743$eZ1vL g$clause*$8741$eZ1vL)))
                           (case-lambda
                             ((g$code$8746$eZ1vL g$raisek$8747$eZ1vL)
                              ((case-lambda
                                 ((g$raisek$8748$eZ1vL g$code$8749$eZ1vL)
                                  (if g$raisek$8748$eZ1vL
                                    (list g$outerk$8740$eZ1vL g$code$8749$eZ1vL)
                                    g$code$8749$eZ1vL)))
                               g$raisek$8747$eZ1vL
                               g$code$8746$eZ1vL)))))))))
          ((case-lambda
             ((g$t$8728$eZ1vL)
              ((case-lambda
                 ((g$ls/false$8729$eZ1vL)
                  (if (if g$ls/false$8729$eZ1vL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8730$eZ1vL
                                 g$clause*$8731$eZ1vL
                                 g$b$8732$eZ1vL
                                 g$b*$8733$eZ1vL)
                               (g$id?$7719$eZ1vL g$con$8730$eZ1vL)))
                            g$ls/false$8729$eZ1vL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8734$eZ1vL
                           g$clause*$8735$eZ1vL
                           g$b$8736$eZ1vL
                           g$b*$8737$eZ1vL)
                         ((case-lambda
                            ((g$outerk$8738$eZ1vL)
                             (g$bless$7960$eZ1vL
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8738$eZ1vL)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8734$eZ1vL)
                                           (g$gen-clauses$8727$eZ1vL
                                             g$con$8734$eZ1vL
                                             g$outerk$8738$eZ1vL
                                             g$clause*$8735$eZ1vL))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8736$eZ1vL
                                                 g$b*$8737$eZ1vL))))))))))))
                          (gensym))))
                      g$ls/false$8729$eZ1vL)
                    (g$syntax-violation$8109$eZ1vL
                      '#f
                      '"invalid syntax"
                      g$t$8728$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL
                 g$t$8728$eZ1vL
                 '(_ (any . each-any) any . each-any)))))
           g$x$8726$eZ1vL)))))
   (g$define-enumeration-macro$7973$eZ1vL
     g$define-enumeration-macro$11476$eZ1vL
     (case-lambda
       ((g$stx$8788$eZ1vL)
        (letrec* ((g$set?$8789$eZ1vL
                    (case-lambda
                      ((g$x$8802$eZ1vL)
                       ((case-lambda
                          ((g$t$8803$eZ1vL)
                           (if g$t$8803$eZ1vL
                             g$t$8803$eZ1vL
                             (begin
                               '#f
                               (if (not (g$memq$5055$eZ1vL
                                          (car g$x$8802$eZ1vL)
                                          (cdr g$x$8802$eZ1vL)))
                                 (begin
                                   '#f
                                   (g$set?$8789$eZ1vL (cdr g$x$8802$eZ1vL)))
                                 '#f)))))
                        (null? g$x$8802$eZ1vL)))))
                  (g$remove-dups$8790$eZ1vL
                    (case-lambda
                      ((g$ls$8801$eZ1vL)
                       (if (null? g$ls$8801$eZ1vL)
                         '()
                         (cons
                           (car g$ls$8801$eZ1vL)
                           (g$remove-dups$8790$eZ1vL
                             (g$remq$5070$eZ1vL
                               (car g$ls$8801$eZ1vL)
                               (cdr g$ls$8801$eZ1vL)))))))))
          ((case-lambda
             ((g$t$8791$eZ1vL)
              ((case-lambda
                 ((g$ls/false$8792$eZ1vL)
                  (if (if g$ls/false$8792$eZ1vL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8793$eZ1vL
                                 g$id*$8794$eZ1vL
                                 g$maker$8795$eZ1vL)
                               (if (g$id?$7719$eZ1vL g$name$8793$eZ1vL)
                                 (if (g$id?$7719$eZ1vL g$maker$8795$eZ1vL)
                                   (begin
                                     '#f
                                     (g$for-all$5061$eZ1vL
                                       g$id?$7719$eZ1vL
                                       g$id*$8794$eZ1vL))
                                   '#f)
                                 '#f)))
                            g$ls/false$8792$eZ1vL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8796$eZ1vL g$id*$8797$eZ1vL g$maker$8798$eZ1vL)
                         ((case-lambda
                            ((g$name*$8799$eZ1vL g$mk$8800$eZ1vL)
                             (g$bless$7960$eZ1vL
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8800$eZ1vL
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8799$eZ1vL))))
                                 (list
                                   'define-syntax
                                   g$name$8796$eZ1vL
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8799$eZ1vL))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8796$eZ1vL)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8798$eZ1vL
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8798$eZ1vL)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8799$eZ1vL))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8798$eZ1vL)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8800$eZ1vL
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8790$eZ1vL
                            (g$syntax->datum$8112$eZ1vL g$id*$8797$eZ1vL))
                          (gensym))))
                      g$ls/false$8792$eZ1vL)
                    (g$syntax-violation$8109$eZ1vL
                      '#f
                      '"invalid syntax"
                      g$t$8791$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL
                 g$t$8791$eZ1vL
                 '(_ any each-any any)))))
           g$stx$8788$eZ1vL)))))
   (g$time-macro$7974$eZ1vL
     g$time-macro$11477$eZ1vL
     (case-lambda
       ((g$stx$8804$eZ1vL)
        ((case-lambda
           ((g$t$8805$eZ1vL)
            ((case-lambda
               ((g$ls/false$8806$eZ1vL)
                (if g$ls/false$8806$eZ1vL
                  (apply
                    (case-lambda
                      ((g$expr$8807$eZ1vL)
                       ((case-lambda
                          ((g$str$8808$eZ1vL)
                           (g$bless$7960$eZ1vL
                             (list
                               'time-it
                               g$str$8808$eZ1vL
                               (list 'lambda '() g$expr$8807$eZ1vL)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6336$eZ1vL)))
                          (case-lambda
                            ((g$p$8811$eZ1vL g$e$8812$eZ1vL)
                             ((case-lambda
                                ((g$e$8813$eZ1vL g$p$8814$eZ1vL)
                                 (begin
                                   (write
                                     (g$syntax->datum$8112$eZ1vL
                                       g$expr$8807$eZ1vL)
                                     g$p$8814$eZ1vL)
                                   (g$e$8813$eZ1vL))))
                              g$e$8812$eZ1vL
                              g$p$8811$eZ1vL)))))))
                    g$ls/false$8806$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8805$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8805$eZ1vL '(_ any)))))
         g$stx$8804$eZ1vL))))
   (g$delay-macro$7975$eZ1vL
     g$delay-macro$11478$eZ1vL
     (case-lambda
       ((g$stx$8815$eZ1vL)
        ((case-lambda
           ((g$t$8816$eZ1vL)
            ((case-lambda
               ((g$ls/false$8817$eZ1vL)
                (if g$ls/false$8817$eZ1vL
                  (apply
                    (case-lambda
                      ((g$expr$8818$eZ1vL)
                       (g$bless$7960$eZ1vL
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8818$eZ1vL)))))
                    g$ls/false$8817$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8816$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8816$eZ1vL '(_ any)))))
         g$stx$8815$eZ1vL))))
   (g$assert-macro$7976$eZ1vL
     g$assert-macro$11479$eZ1vL
     (case-lambda
       ((g$stx$8819$eZ1vL)
        ((case-lambda
           ((g$t$8820$eZ1vL)
            ((case-lambda
               ((g$ls/false$8821$eZ1vL)
                (if g$ls/false$8821$eZ1vL
                  (apply
                    (case-lambda
                      ((g$expr$8822$eZ1vL)
                       ((case-lambda
                          ((g$pos$8823$eZ1vL)
                           (g$bless$7960$eZ1vL
                             (list
                               'unless
                               g$expr$8822$eZ1vL
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8822$eZ1vL)
                                 (list 'quote g$pos$8823$eZ1vL))))))
                        ((case-lambda
                           ((g$t$8824$eZ1vL)
                            (if g$t$8824$eZ1vL
                              g$t$8824$eZ1vL
                              (begin
                                '#f
                                (g$expression-position$8104$eZ1vL
                                  g$expr$8822$eZ1vL)))))
                         (g$expression-position$8104$eZ1vL g$stx$8819$eZ1vL)))))
                    g$ls/false$8821$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8820$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8820$eZ1vL '(_ any)))))
         g$stx$8819$eZ1vL))))
   (g$endianness-macro$7977$eZ1vL
     g$endianness-macro$11480$eZ1vL
     (case-lambda
       ((g$stx$8825$eZ1vL)
        ((case-lambda
           ((g$t$8826$eZ1vL)
            ((case-lambda
               ((g$ls/false$8827$eZ1vL)
                (if g$ls/false$8827$eZ1vL
                  (apply
                    (case-lambda
                      ((g$e$8828$eZ1vL)
                       ((case-lambda
                          ((g$t$8829$eZ1vL)
                           (if (g$memv$5056$eZ1vL g$t$8829$eZ1vL '(little))
                             (g$bless$7960$eZ1vL ''little)
                             (if (g$memv$5056$eZ1vL g$t$8829$eZ1vL '(big))
                               (g$bless$7960$eZ1vL ''big)
                               (g$syntax-violation$8109$eZ1vL
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8825$eZ1vL)))))
                        (g$syntax->datum$8112$eZ1vL g$e$8828$eZ1vL))))
                    g$ls/false$8827$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8826$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8826$eZ1vL '(_ any)))))
         g$stx$8825$eZ1vL))))
   (g$identifier-syntax-macro$7978$eZ1vL
     g$identifier-syntax-macro$11481$eZ1vL
     (case-lambda
       ((g$stx$8830$eZ1vL)
        ((case-lambda
           ((g$t$8831$eZ1vL)
            ((case-lambda
               ((g$ls/false$8832$eZ1vL)
                (if g$ls/false$8832$eZ1vL
                  (apply
                    (case-lambda
                      ((g$expr$8833$eZ1vL)
                       (g$bless$7960$eZ1vL
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8833$eZ1vL))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8833$eZ1vL)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8832$eZ1vL)
                  ((case-lambda
                     ((g$t$8834$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8835$eZ1vL)
                          (if (if g$ls/false$8835$eZ1vL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8836$eZ1vL
                                         g$expr1$8837$eZ1vL
                                         g$id2$8838$eZ1vL
                                         g$expr2$8839$eZ1vL
                                         g$expr3$8840$eZ1vL)
                                       (if (g$id?$7719$eZ1vL g$id1$8836$eZ1vL)
                                         (if (g$id?$7719$eZ1vL g$id2$8838$eZ1vL)
                                           (begin
                                             '#f
                                             (g$id?$7719$eZ1vL
                                               g$expr2$8839$eZ1vL))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8835$eZ1vL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8841$eZ1vL
                                   g$expr1$8842$eZ1vL
                                   g$id2$8843$eZ1vL
                                   g$expr2$8844$eZ1vL
                                   g$expr3$8845$eZ1vL)
                                 (g$bless$7960$eZ1vL
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8842$eZ1vL))
                                         (list
                                           (list 'set! 'id g$expr2$8844$eZ1vL)
                                           (list 'syntax g$expr3$8845$eZ1vL))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8842$eZ1vL
                                               '(e* ...))))))))))
                              g$ls/false$8835$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$8834$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$8834$eZ1vL
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8831$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8831$eZ1vL '(_ any)))))
         g$stx$8830$eZ1vL))))
   (g$do-macro$7979$eZ1vL
     g$do-macro$11482$eZ1vL
     (case-lambda
       ((g$stx$8846$eZ1vL)
        (letrec* ((g$bind$8847$eZ1vL
                    (case-lambda
                      ((g$x$8859$eZ1vL)
                       ((case-lambda
                          ((g$t$8860$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$8861$eZ1vL)
                               (if g$ls/false$8861$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$x$8862$eZ1vL g$init$8863$eZ1vL)
                                      (list
                                        g$x$8862$eZ1vL
                                        g$init$8863$eZ1vL
                                        g$x$8862$eZ1vL)))
                                   g$ls/false$8861$eZ1vL)
                                 ((case-lambda
                                    ((g$t$8864$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$8865$eZ1vL)
                                         (if g$ls/false$8865$eZ1vL
                                           (apply
                                             (case-lambda
                                               ((g$x$8866$eZ1vL
                                                  g$init$8867$eZ1vL
                                                  g$step$8868$eZ1vL)
                                                (list
                                                  g$x$8866$eZ1vL
                                                  g$init$8867$eZ1vL
                                                  g$step$8868$eZ1vL)))
                                             g$ls/false$8865$eZ1vL)
                                           ((case-lambda
                                              ((g$t$8869$eZ1vL)
                                               ((case-lambda
                                                  ((g$ls/false$8870$eZ1vL)
                                                   (if g$ls/false$8870$eZ1vL
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$8109$eZ1vL
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8846$eZ1vL)))
                                                       g$ls/false$8870$eZ1vL)
                                                     (g$syntax-violation$8109$eZ1vL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8869$eZ1vL))))
                                                (g$syntax-dispatch$7997$eZ1vL
                                                  g$t$8869$eZ1vL
                                                  '_))))
                                            g$t$8864$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$8864$eZ1vL
                                        '(any any any)))))
                                  g$t$8860$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$8860$eZ1vL
                              '(any any)))))
                        g$x$8859$eZ1vL)))))
          ((case-lambda
             ((g$t$8848$eZ1vL)
              ((case-lambda
                 ((g$ls/false$8849$eZ1vL)
                  (if g$ls/false$8849$eZ1vL
                    (apply
                      (case-lambda
                        ((g$binding*$8850$eZ1vL
                           g$test$8851$eZ1vL
                           g$expr*$8852$eZ1vL
                           g$command*$8853$eZ1vL)
                         ((case-lambda
                            ((g$t$8854$eZ1vL)
                             ((case-lambda
                                ((g$ls/false$8855$eZ1vL)
                                 (if g$ls/false$8855$eZ1vL
                                   (apply
                                     (case-lambda
                                       ((g$x*$8856$eZ1vL
                                          g$init*$8857$eZ1vL
                                          g$step*$8858$eZ1vL)
                                        (if (g$valid-bound-ids?$7724$eZ1vL
                                              g$x*$8856$eZ1vL)
                                          (g$bless$7960$eZ1vL
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8856$eZ1vL
                                                    (list
                                                      'if
                                                      g$test$8851$eZ1vL
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8852$eZ1vL))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8853$eZ1vL
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8858$eZ1vL))))))))
                                              (cons 'loop g$init*$8857$eZ1vL)))
                                          (g$syntax-violation$8109$eZ1vL
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8846$eZ1vL))))
                                     g$ls/false$8855$eZ1vL)
                                   (g$syntax-violation$8109$eZ1vL
                                     '#f
                                     '"invalid syntax"
                                     g$t$8854$eZ1vL))))
                              (g$syntax-dispatch$7997$eZ1vL
                                g$t$8854$eZ1vL
                                '#(each (any any any))))))
                          (g$map$5063$eZ1vL
                            g$bind$8847$eZ1vL
                            g$binding*$8850$eZ1vL))))
                      g$ls/false$8849$eZ1vL)
                    (g$syntax-violation$8109$eZ1vL
                      '#f
                      '"invalid syntax"
                      g$t$8848$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL
                 g$t$8848$eZ1vL
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8846$eZ1vL)))))
   (g$let*-macro$7980$eZ1vL
     g$let*-macro$11483$eZ1vL
     (case-lambda
       ((g$stx$8871$eZ1vL)
        ((case-lambda
           ((g$t$8872$eZ1vL)
            ((case-lambda
               ((g$ls/false$8873$eZ1vL)
                (if (if g$ls/false$8873$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8874$eZ1vL
                               g$rhs*$8875$eZ1vL
                               g$b$8876$eZ1vL
                               g$b*$8877$eZ1vL)
                             (g$for-all$5061$eZ1vL
                               g$id?$7719$eZ1vL
                               g$lhs*$8874$eZ1vL)))
                          g$ls/false$8873$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8878$eZ1vL
                         g$rhs*$8879$eZ1vL
                         g$b$8880$eZ1vL
                         g$b*$8881$eZ1vL)
                       (g$bless$7960$eZ1vL
                         ((letrec ((g$f$8882$eZ1vL
                                     (case-lambda
                                       ((g$x*$8883$eZ1vL)
                                        (if (null? g$x*$8883$eZ1vL)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8880$eZ1vL
                                                g$b*$8881$eZ1vL)))
                                          (if (null? (cdr g$x*$8883$eZ1vL))
                                            (cons
                                              'let
                                              (cons
                                                (list (car g$x*$8883$eZ1vL))
                                                (cons
                                                  g$b$8880$eZ1vL
                                                  g$b*$8881$eZ1vL)))
                                            (list
                                              'let
                                              (list (car g$x*$8883$eZ1vL))
                                              (g$f$8882$eZ1vL
                                                (cdr g$x*$8883$eZ1vL)))))))))
                            g$f$8882$eZ1vL)
                          (g$map$5063$eZ1vL
                            list
                            g$lhs*$8878$eZ1vL
                            g$rhs*$8879$eZ1vL)))))
                    g$ls/false$8873$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8872$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8872$eZ1vL
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8871$eZ1vL))))
   (g$or-macro$7981$eZ1vL
     g$or-macro$11484$eZ1vL
     (case-lambda
       ((g$stx$8884$eZ1vL)
        ((case-lambda
           ((g$t$8885$eZ1vL)
            ((case-lambda
               ((g$ls/false$8886$eZ1vL)
                (if g$ls/false$8886$eZ1vL
                  (apply (case-lambda (() '#f)) g$ls/false$8886$eZ1vL)
                  ((case-lambda
                     ((g$t$8887$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8888$eZ1vL)
                          (if g$ls/false$8888$eZ1vL
                            (apply
                              (case-lambda
                                ((g$e$8889$eZ1vL g$e*$8890$eZ1vL)
                                 (g$bless$7960$eZ1vL
                                   ((letrec ((g$f$8891$eZ1vL
                                               (case-lambda
                                                 ((g$e$8892$eZ1vL
                                                    g$e*$8893$eZ1vL)
                                                  (if (null? g$e*$8893$eZ1vL)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8892$eZ1vL)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8892$eZ1vL))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8891$eZ1vL
                                                          (car g$e*$8893$eZ1vL)
                                                          (cdr g$e*$8893$eZ1vL)))))))))
                                      g$f$8891$eZ1vL)
                                    g$e$8889$eZ1vL
                                    g$e*$8890$eZ1vL))))
                              g$ls/false$8888$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$8887$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$8887$eZ1vL
                         '(_ any . each-any)))))
                   g$t$8885$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8885$eZ1vL '(_)))))
         g$stx$8884$eZ1vL))))
   (g$and-macro$7982$eZ1vL
     g$and-macro$11485$eZ1vL
     (case-lambda
       ((g$stx$8894$eZ1vL)
        ((case-lambda
           ((g$t$8895$eZ1vL)
            ((case-lambda
               ((g$ls/false$8896$eZ1vL)
                (if g$ls/false$8896$eZ1vL
                  (apply (case-lambda (() '#t)) g$ls/false$8896$eZ1vL)
                  ((case-lambda
                     ((g$t$8897$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$8898$eZ1vL)
                          (if g$ls/false$8898$eZ1vL
                            (apply
                              (case-lambda
                                ((g$e$8899$eZ1vL g$e*$8900$eZ1vL)
                                 (g$bless$7960$eZ1vL
                                   ((letrec ((g$f$8901$eZ1vL
                                               (case-lambda
                                                 ((g$e$8902$eZ1vL
                                                    g$e*$8903$eZ1vL)
                                                  (if (null? g$e*$8903$eZ1vL)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8902$eZ1vL)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8902$eZ1vL
                                                        (cons
                                                          (g$f$8901$eZ1vL
                                                            (car g$e*$8903$eZ1vL)
                                                            (cdr g$e*$8903$eZ1vL))
                                                          '(#f)))))))))
                                      g$f$8901$eZ1vL)
                                    g$e$8899$eZ1vL
                                    g$e*$8900$eZ1vL))))
                              g$ls/false$8898$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$8897$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$8897$eZ1vL
                         '(_ any . each-any)))))
                   g$t$8895$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8895$eZ1vL '(_)))))
         g$stx$8894$eZ1vL))))
   (g$cond-macro$7983$eZ1vL
     g$cond-macro$11486$eZ1vL
     (case-lambda
       ((g$stx$8904$eZ1vL)
        ((case-lambda
           ((g$t$8905$eZ1vL)
            ((case-lambda
               ((g$ls/false$8906$eZ1vL)
                (if g$ls/false$8906$eZ1vL
                  (apply
                    (case-lambda
                      ((g$cls$8907$eZ1vL g$cls*$8908$eZ1vL)
                       (g$bless$7960$eZ1vL
                         ((letrec ((g$f$8909$eZ1vL
                                     (case-lambda
                                       ((g$cls$8910$eZ1vL g$cls*$8911$eZ1vL)
                                        (if (null? g$cls*$8911$eZ1vL)
                                          ((case-lambda
                                             ((g$t$8912$eZ1vL)
                                              ((case-lambda
                                                 ((g$ls/false$8913$eZ1vL)
                                                  (if g$ls/false$8913$eZ1vL
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8914$eZ1vL
                                                           g$e*$8915$eZ1vL)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8914$eZ1vL
                                                             g$e*$8915$eZ1vL))))
                                                      g$ls/false$8913$eZ1vL)
                                                    ((case-lambda
                                                       ((g$t$8916$eZ1vL)
                                                        ((case-lambda
                                                           ((g$ls/false$8917$eZ1vL)
                                                            (if g$ls/false$8917$eZ1vL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8918$eZ1vL
                                                                     g$p$8919$eZ1vL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8918$eZ1vL))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8919$eZ1vL
                                                                         '(t))))))
                                                                g$ls/false$8917$eZ1vL)
                                                              ((case-lambda
                                                                 ((g$t$8920$eZ1vL)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8921$eZ1vL)
                                                                      (if g$ls/false$8921$eZ1vL
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8922$eZ1vL)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8922$eZ1vL
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8921$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$t$8923$eZ1vL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8924$eZ1vL)
                                                                                (if g$ls/false$8924$eZ1vL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8925$eZ1vL
                                                                                         g$e*$8926$eZ1vL)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8925$eZ1vL
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8926$eZ1vL))))
                                                                                    g$ls/false$8924$eZ1vL)
                                                                                  ((case-lambda
                                                                                     ((g$t$8927$eZ1vL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8928$eZ1vL)
                                                                                          (if g$ls/false$8928$eZ1vL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8109$eZ1vL
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8904$eZ1vL)))
                                                                                              g$ls/false$8928$eZ1vL)
                                                                                            (g$syntax-violation$8109$eZ1vL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8927$eZ1vL))))
                                                                                       (g$syntax-dispatch$7997$eZ1vL
                                                                                         g$t$8927$eZ1vL
                                                                                         '_))))
                                                                                   g$t$8923$eZ1vL))))
                                                                             (g$syntax-dispatch$7997$eZ1vL
                                                                               g$t$8923$eZ1vL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8920$eZ1vL))))
                                                                   (g$syntax-dispatch$7997$eZ1vL
                                                                     g$t$8920$eZ1vL
                                                                     '(any)))))
                                                               g$t$8916$eZ1vL))))
                                                         (g$syntax-dispatch$7997$eZ1vL
                                                           g$t$8916$eZ1vL
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8912$eZ1vL))))
                                               (g$syntax-dispatch$7997$eZ1vL
                                                 g$t$8912$eZ1vL
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8910$eZ1vL)
                                          ((case-lambda
                                             ((g$t$8929$eZ1vL)
                                              ((case-lambda
                                                 ((g$ls/false$8930$eZ1vL)
                                                  (if g$ls/false$8930$eZ1vL
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8931$eZ1vL
                                                           g$e*$8932$eZ1vL)
                                                         (g$syntax-violation$8109$eZ1vL
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8904$eZ1vL)))
                                                      g$ls/false$8930$eZ1vL)
                                                    ((case-lambda
                                                       ((g$t$8933$eZ1vL)
                                                        ((case-lambda
                                                           ((g$ls/false$8934$eZ1vL)
                                                            (if g$ls/false$8934$eZ1vL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8935$eZ1vL
                                                                     g$p$8936$eZ1vL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8935$eZ1vL))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8936$eZ1vL
                                                                         '(t))
                                                                       (g$f$8909$eZ1vL
                                                                         (car g$cls*$8911$eZ1vL)
                                                                         (cdr g$cls*$8911$eZ1vL))))))
                                                                g$ls/false$8934$eZ1vL)
                                                              ((case-lambda
                                                                 ((g$t$8937$eZ1vL)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8938$eZ1vL)
                                                                      (if g$ls/false$8938$eZ1vL
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8939$eZ1vL)
                                                                             (list
                                                                               'or
                                                                               g$e$8939$eZ1vL
                                                                               (g$f$8909$eZ1vL
                                                                                 (car g$cls*$8911$eZ1vL)
                                                                                 (cdr g$cls*$8911$eZ1vL)))))
                                                                          g$ls/false$8938$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$t$8940$eZ1vL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8941$eZ1vL)
                                                                                (if g$ls/false$8941$eZ1vL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8942$eZ1vL
                                                                                         g$e*$8943$eZ1vL)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8942$eZ1vL
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8943$eZ1vL)
                                                                                         (g$f$8909$eZ1vL
                                                                                           (car g$cls*$8911$eZ1vL)
                                                                                           (cdr g$cls*$8911$eZ1vL)))))
                                                                                    g$ls/false$8941$eZ1vL)
                                                                                  ((case-lambda
                                                                                     ((g$t$8944$eZ1vL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8945$eZ1vL)
                                                                                          (if g$ls/false$8945$eZ1vL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8109$eZ1vL
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8904$eZ1vL)))
                                                                                              g$ls/false$8945$eZ1vL)
                                                                                            (g$syntax-violation$8109$eZ1vL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8944$eZ1vL))))
                                                                                       (g$syntax-dispatch$7997$eZ1vL
                                                                                         g$t$8944$eZ1vL
                                                                                         '_))))
                                                                                   g$t$8940$eZ1vL))))
                                                                             (g$syntax-dispatch$7997$eZ1vL
                                                                               g$t$8940$eZ1vL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8937$eZ1vL))))
                                                                   (g$syntax-dispatch$7997$eZ1vL
                                                                     g$t$8937$eZ1vL
                                                                     '(any)))))
                                                               g$t$8933$eZ1vL))))
                                                         (g$syntax-dispatch$7997$eZ1vL
                                                           g$t$8933$eZ1vL
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8929$eZ1vL))))
                                               (g$syntax-dispatch$7997$eZ1vL
                                                 g$t$8929$eZ1vL
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8910$eZ1vL))))))
                            g$f$8909$eZ1vL)
                          g$cls$8907$eZ1vL
                          g$cls*$8908$eZ1vL))))
                    g$ls/false$8906$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8905$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8905$eZ1vL
               '(_ any . each-any)))))
         g$stx$8904$eZ1vL))))
   (g$do-include$7984$eZ1vL
     g$do-include$11487$eZ1vL
     (case-lambda
       ((g$stx$8946$eZ1vL g$id$8947$eZ1vL g$filename$8948$eZ1vL)
        ((case-lambda
           ((g$filename$8949$eZ1vL)
            (begin
              (if (not (if (string? g$filename$8949$eZ1vL)
                         (begin '#f (g$id?$7719$eZ1vL g$id$8947$eZ1vL))
                         '#f))
                (g$syntax-violation$8109$eZ1vL
                  '#f
                  '"invalid syntax"
                  g$stx$8946$eZ1vL)
                (void))
              (cons
                (g$bless$7960$eZ1vL 'begin)
                (g$with-input-from-file$6385$eZ1vL
                  g$filename$8949$eZ1vL
                  (case-lambda
                    (()
                     ((letrec ((g$f$8950$eZ1vL
                                 (case-lambda
                                   ((g$ls$8951$eZ1vL)
                                    ((case-lambda
                                       ((g$x$8952$eZ1vL)
                                        (if (eof-object? g$x$8952$eZ1vL)
                                          (reverse g$ls$8951$eZ1vL)
                                          (g$f$8950$eZ1vL
                                            (cons
                                              (g$datum->stx$7702$eZ1vL
                                                g$id$8947$eZ1vL
                                                g$x$8952$eZ1vL)
                                              g$ls$8951$eZ1vL)))))
                                     (read-annotated))))))
                        g$f$8950$eZ1vL)
                      '()))))))))
         (g$stx->datum$7730$eZ1vL g$filename$8948$eZ1vL)))))
   (g$include-macro$7985$eZ1vL
     g$include-macro$11488$eZ1vL
     (case-lambda
       ((g$e$8953$eZ1vL)
        ((case-lambda
           ((g$t$8954$eZ1vL)
            ((case-lambda
               ((g$ls/false$8955$eZ1vL)
                (if g$ls/false$8955$eZ1vL
                  (apply
                    (case-lambda
                      ((g$id$8956$eZ1vL g$filename$8957$eZ1vL)
                       (g$do-include$7984$eZ1vL
                         g$e$8953$eZ1vL
                         g$id$8956$eZ1vL
                         g$filename$8957$eZ1vL)))
                    g$ls/false$8955$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8954$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8954$eZ1vL '(any any)))))
         g$e$8953$eZ1vL))))
   (g$include-into-macro$7986$eZ1vL
     g$include-into-macro$11489$eZ1vL
     (case-lambda
       ((g$e$8958$eZ1vL)
        ((case-lambda
           ((g$t$8959$eZ1vL)
            ((case-lambda
               ((g$ls/false$8960$eZ1vL)
                (if g$ls/false$8960$eZ1vL
                  (apply
                    (case-lambda
                      ((g$id$8961$eZ1vL g$filename$8962$eZ1vL)
                       (g$do-include$7984$eZ1vL
                         g$e$8958$eZ1vL
                         g$id$8961$eZ1vL
                         g$filename$8962$eZ1vL)))
                    g$ls/false$8960$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8959$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$8959$eZ1vL '(_ any any)))))
         g$e$8958$eZ1vL))))
   (g$syntax-rules-macro$7987$eZ1vL
     g$syntax-rules-macro$11490$eZ1vL
     (case-lambda
       ((g$e$8963$eZ1vL)
        ((case-lambda
           ((g$t$8964$eZ1vL)
            ((case-lambda
               ((g$ls/false$8965$eZ1vL)
                (if g$ls/false$8965$eZ1vL
                  (apply
                    (case-lambda
                      ((g$lits$8966$eZ1vL g$pat*$8967$eZ1vL g$tmp*$8968$eZ1vL)
                       (begin
                         (g$verify-literals$8000$eZ1vL
                           g$lits$8966$eZ1vL
                           g$e$8963$eZ1vL)
                         (g$bless$7960$eZ1vL
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8966$eZ1vL
                                   (g$map$5063$eZ1vL
                                     (case-lambda
                                       ((g$pat$8969$eZ1vL g$tmp$8970$eZ1vL)
                                        ((case-lambda
                                           ((g$t$8971$eZ1vL)
                                            ((case-lambda
                                               ((g$ls/false$8972$eZ1vL)
                                                (if g$ls/false$8972$eZ1vL
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$8973$eZ1vL)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$8973$eZ1vL)
                                                         (list
                                                           'syntax
                                                           g$tmp$8970$eZ1vL))))
                                                    g$ls/false$8972$eZ1vL)
                                                  ((case-lambda
                                                     ((g$t$8974$eZ1vL)
                                                      ((case-lambda
                                                         ((g$ls/false$8975$eZ1vL)
                                                          (if g$ls/false$8975$eZ1vL
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$8109$eZ1vL
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$8963$eZ1vL
                                                                   g$pat$8969$eZ1vL)))
                                                              g$ls/false$8975$eZ1vL)
                                                            (g$syntax-violation$8109$eZ1vL
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$8974$eZ1vL))))
                                                       (g$syntax-dispatch$7997$eZ1vL
                                                         g$t$8974$eZ1vL
                                                         '_))))
                                                   g$t$8971$eZ1vL))))
                                             (g$syntax-dispatch$7997$eZ1vL
                                               g$t$8971$eZ1vL
                                               '(_ . any)))))
                                         g$pat$8969$eZ1vL)))
                                     g$pat*$8967$eZ1vL
                                     g$tmp*$8968$eZ1vL)))))))))
                    g$ls/false$8965$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$8964$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$8964$eZ1vL
               '(_ each-any . #(each (any any)))))))
         g$e$8963$eZ1vL))))
   (g$quasiquote-macro$7988$eZ1vL
     g$quasiquote-macro$11491$eZ1vL
     ((case-lambda
        (()
         (letrec* ((g$datum$8976$eZ1vL
                     (case-lambda
                       ((g$x$9107$eZ1vL)
                        (list
                          (g$scheme-stx$7940$eZ1vL 'quote)
                          (g$mkstx$7707$eZ1vL g$x$9107$eZ1vL '() '() '())))))
                   (g$quasicons*$8992$eZ1vL
                     (case-lambda
                       ((g$x$9103$eZ1vL g$y$9104$eZ1vL)
                        ((letrec ((g$f$9105$eZ1vL
                                    (case-lambda
                                      ((g$x$9106$eZ1vL)
                                       (if (null? g$x$9106$eZ1vL)
                                         g$y$9104$eZ1vL
                                         (g$quasicons$8993$eZ1vL
                                           (car g$x$9106$eZ1vL)
                                           (g$f$9105$eZ1vL
                                             (cdr g$x$9106$eZ1vL))))))))
                           g$f$9105$eZ1vL)
                         g$x$9103$eZ1vL))))
                   (g$quasicons$8993$eZ1vL
                     (case-lambda
                       ((g$x$9084$eZ1vL g$y$9085$eZ1vL)
                        ((case-lambda
                           ((g$t$9086$eZ1vL)
                            ((case-lambda
                               ((g$ls/false$9087$eZ1vL)
                                (if g$ls/false$9087$eZ1vL
                                  (apply
                                    (case-lambda
                                      ((g$dy$9088$eZ1vL)
                                       ((case-lambda
                                          ((g$t$9089$eZ1vL)
                                           ((case-lambda
                                              ((g$ls/false$9090$eZ1vL)
                                               (if g$ls/false$9090$eZ1vL
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$9091$eZ1vL)
                                                      (list
                                                        (g$scheme-stx$7940$eZ1vL
                                                          'quote)
                                                        (cons
                                                          g$dx$9091$eZ1vL
                                                          g$dy$9088$eZ1vL))))
                                                   g$ls/false$9090$eZ1vL)
                                                 ((case-lambda
                                                    ((g$t$9092$eZ1vL)
                                                     ((case-lambda
                                                        ((g$ls/false$9093$eZ1vL)
                                                         (if g$ls/false$9093$eZ1vL
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$9094$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9095$eZ1vL)
                                                                        (if g$ls/false$9095$eZ1vL
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7940$eZ1vL
                                                                                   'list)
                                                                                 g$x$9084$eZ1vL)))
                                                                            g$ls/false$9095$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$t$9096$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9097$eZ1vL)
                                                                                  (if g$ls/false$9097$eZ1vL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7940$eZ1vL
                                                                                             'cons)
                                                                                           g$x$9084$eZ1vL
                                                                                           g$y$9085$eZ1vL)))
                                                                                      g$ls/false$9097$eZ1vL)
                                                                                    (g$syntax-violation$8109$eZ1vL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9096$eZ1vL))))
                                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                                 g$t$9096$eZ1vL
                                                                                 '_))))
                                                                           g$t$9094$eZ1vL))))
                                                                     (g$syntax-dispatch$7997$eZ1vL
                                                                       g$t$9094$eZ1vL
                                                                       '()))))
                                                                 g$dy$9088$eZ1vL)))
                                                             g$ls/false$9093$eZ1vL)
                                                           (g$syntax-violation$8109$eZ1vL
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$9092$eZ1vL))))
                                                      (g$syntax-dispatch$7997$eZ1vL
                                                        g$t$9092$eZ1vL
                                                        '_))))
                                                  g$t$9089$eZ1vL))))
                                            (g$syntax-dispatch$7997$eZ1vL
                                              g$t$9089$eZ1vL
                                              '(#(scheme-id quote) any)))))
                                        g$x$9084$eZ1vL)))
                                    g$ls/false$9087$eZ1vL)
                                  ((case-lambda
                                     ((g$t$9098$eZ1vL)
                                      ((case-lambda
                                         ((g$ls/false$9099$eZ1vL)
                                          (if g$ls/false$9099$eZ1vL
                                            (apply
                                              (case-lambda
                                                ((g$stuff$9100$eZ1vL)
                                                 (g$cons*$5065$eZ1vL
                                                   (g$scheme-stx$7940$eZ1vL
                                                     'list)
                                                   g$x$9084$eZ1vL
                                                   g$stuff$9100$eZ1vL)))
                                              g$ls/false$9099$eZ1vL)
                                            ((case-lambda
                                               ((g$t$9101$eZ1vL)
                                                ((case-lambda
                                                   ((g$ls/false$9102$eZ1vL)
                                                    (if g$ls/false$9102$eZ1vL
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7940$eZ1vL
                                                               'cons)
                                                             g$x$9084$eZ1vL
                                                             g$y$9085$eZ1vL)))
                                                        g$ls/false$9102$eZ1vL)
                                                      (g$syntax-violation$8109$eZ1vL
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$9101$eZ1vL))))
                                                 (g$syntax-dispatch$7997$eZ1vL
                                                   g$t$9101$eZ1vL
                                                   '_))))
                                             g$t$9098$eZ1vL))))
                                       (g$syntax-dispatch$7997$eZ1vL
                                         g$t$9098$eZ1vL
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$9086$eZ1vL))))
                             (g$syntax-dispatch$7997$eZ1vL
                               g$t$9086$eZ1vL
                               '(#(scheme-id quote) any)))))
                         g$y$9085$eZ1vL))))
                   (g$quasiappend$8994$eZ1vL
                     (case-lambda
                       ((g$x$9071$eZ1vL g$y$9072$eZ1vL)
                        ((case-lambda
                           ((g$ls$9073$eZ1vL)
                            (if (null? g$ls$9073$eZ1vL)
                              (list (g$scheme-stx$7940$eZ1vL 'quote) '())
                              (if (null? (cdr g$ls$9073$eZ1vL))
                                (car g$ls$9073$eZ1vL)
                                (g$cons*$5065$eZ1vL
                                  (g$scheme-stx$7940$eZ1vL 'append)
                                  g$ls$9073$eZ1vL)))))
                         ((letrec ((g$f$9074$eZ1vL
                                     (case-lambda
                                       ((g$x$9075$eZ1vL)
                                        (if (null? g$x$9075$eZ1vL)
                                          ((case-lambda
                                             ((g$t$9076$eZ1vL)
                                              ((case-lambda
                                                 ((g$ls/false$9077$eZ1vL)
                                                  (if g$ls/false$9077$eZ1vL
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$9077$eZ1vL)
                                                    ((case-lambda
                                                       ((g$t$9078$eZ1vL)
                                                        ((case-lambda
                                                           ((g$ls/false$9079$eZ1vL)
                                                            (if g$ls/false$9079$eZ1vL
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$9072$eZ1vL)))
                                                                g$ls/false$9079$eZ1vL)
                                                              (g$syntax-violation$8109$eZ1vL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9078$eZ1vL))))
                                                         (g$syntax-dispatch$7997$eZ1vL
                                                           g$t$9078$eZ1vL
                                                           '_))))
                                                     g$t$9076$eZ1vL))))
                                               (g$syntax-dispatch$7997$eZ1vL
                                                 g$t$9076$eZ1vL
                                                 '(#(scheme-id quote) ())))))
                                           g$y$9072$eZ1vL)
                                          ((case-lambda
                                             ((g$t$9080$eZ1vL)
                                              ((case-lambda
                                                 ((g$ls/false$9081$eZ1vL)
                                                  (if g$ls/false$9081$eZ1vL
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$9074$eZ1vL
                                                           (cdr g$x$9075$eZ1vL))))
                                                      g$ls/false$9081$eZ1vL)
                                                    ((case-lambda
                                                       ((g$t$9082$eZ1vL)
                                                        ((case-lambda
                                                           ((g$ls/false$9083$eZ1vL)
                                                            (if g$ls/false$9083$eZ1vL
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$9075$eZ1vL)
                                                                     (g$f$9074$eZ1vL
                                                                       (cdr g$x$9075$eZ1vL)))))
                                                                g$ls/false$9083$eZ1vL)
                                                              (g$syntax-violation$8109$eZ1vL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9082$eZ1vL))))
                                                         (g$syntax-dispatch$7997$eZ1vL
                                                           g$t$9082$eZ1vL
                                                           '_))))
                                                     g$t$9080$eZ1vL))))
                                               (g$syntax-dispatch$7997$eZ1vL
                                                 g$t$9080$eZ1vL
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$9075$eZ1vL)))))))
                            g$f$9074$eZ1vL)
                          g$x$9071$eZ1vL)))))
                   (g$quasivector$8995$eZ1vL
                     (case-lambda
                       ((g$x$9046$eZ1vL)
                        ((case-lambda
                           ((g$pat-x$9047$eZ1vL)
                            ((case-lambda
                               ((g$t$9048$eZ1vL)
                                ((case-lambda
                                   ((g$ls/false$9049$eZ1vL)
                                    (if g$ls/false$9049$eZ1vL
                                      (apply
                                        (case-lambda
                                          ((g$x*$9050$eZ1vL)
                                           (list
                                             (g$scheme-stx$7940$eZ1vL 'quote)
                                             (list->vector g$x*$9050$eZ1vL))))
                                        g$ls/false$9049$eZ1vL)
                                      ((case-lambda
                                         ((g$t$9051$eZ1vL)
                                          ((case-lambda
                                             ((g$ls/false$9052$eZ1vL)
                                              (if g$ls/false$9052$eZ1vL
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$9053$eZ1vL
                                                                 (case-lambda
                                                                   ((g$x$9054$eZ1vL
                                                                      g$k$9055$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$t$9056$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9057$eZ1vL)
                                                                            (if g$ls/false$9057$eZ1vL
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$9058$eZ1vL)
                                                                                   (g$k$9055$eZ1vL
                                                                                     (g$map$5063$eZ1vL
                                                                                       (case-lambda
                                                                                         ((g$x$9059$eZ1vL)
                                                                                          (list
                                                                                            (g$scheme-stx$7940$eZ1vL
                                                                                              'quote)
                                                                                            g$x$9059$eZ1vL)))
                                                                                       g$x*$9058$eZ1vL))))
                                                                                g$ls/false$9057$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$t$9060$eZ1vL)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9061$eZ1vL)
                                                                                      (if g$ls/false$9061$eZ1vL
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$9062$eZ1vL)
                                                                                             (g$k$9055$eZ1vL
                                                                                               g$x*$9062$eZ1vL)))
                                                                                          g$ls/false$9061$eZ1vL)
                                                                                        ((case-lambda
                                                                                           ((g$t$9063$eZ1vL)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9064$eZ1vL)
                                                                                                (if g$ls/false$9064$eZ1vL
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$9065$eZ1vL
                                                                                                         g$y$9066$eZ1vL)
                                                                                                       (g$f$9053$eZ1vL
                                                                                                         g$y$9066$eZ1vL
                                                                                                         (case-lambda
                                                                                                           ((g$ls$9067$eZ1vL)
                                                                                                            (g$k$9055$eZ1vL
                                                                                                              (cons
                                                                                                                g$x$9065$eZ1vL
                                                                                                                g$ls$9067$eZ1vL)))))))
                                                                                                    g$ls/false$9064$eZ1vL)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$9068$eZ1vL)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$9069$eZ1vL)
                                                                                                          (if g$ls/false$9069$eZ1vL
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7940$eZ1vL
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$9047$eZ1vL)))
                                                                                                              g$ls/false$9069$eZ1vL)
                                                                                                            (g$syntax-violation$8109$eZ1vL
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$9068$eZ1vL))))
                                                                                                       (g$syntax-dispatch$7997$eZ1vL
                                                                                                         g$t$9068$eZ1vL
                                                                                                         '_))))
                                                                                                   g$t$9063$eZ1vL))))
                                                                                             (g$syntax-dispatch$7997$eZ1vL
                                                                                               g$t$9063$eZ1vL
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$9060$eZ1vL))))
                                                                                   (g$syntax-dispatch$7997$eZ1vL
                                                                                     g$t$9060$eZ1vL
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$9056$eZ1vL))))
                                                                         (g$syntax-dispatch$7997$eZ1vL
                                                                           g$t$9056$eZ1vL
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$9054$eZ1vL)))))
                                                        g$f$9053$eZ1vL)
                                                      g$x$9046$eZ1vL
                                                      (case-lambda
                                                        ((g$ls$9070$eZ1vL)
                                                         (g$cons*$5065$eZ1vL
                                                           (g$scheme-stx$7940$eZ1vL
                                                             'vector)
                                                           g$ls$9070$eZ1vL))))))
                                                  g$ls/false$9052$eZ1vL)
                                                (g$syntax-violation$8109$eZ1vL
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$9051$eZ1vL))))
                                           (g$syntax-dispatch$7997$eZ1vL
                                             g$t$9051$eZ1vL
                                             '_))))
                                       g$t$9048$eZ1vL))))
                                 (g$syntax-dispatch$7997$eZ1vL
                                   g$t$9048$eZ1vL
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$9047$eZ1vL)))
                         g$x$9046$eZ1vL))))
                   (g$vquasi$8996$eZ1vL
                     (case-lambda
                       ((g$p$9029$eZ1vL g$lev$9030$eZ1vL)
                        ((case-lambda
                           ((g$t$9031$eZ1vL)
                            ((case-lambda
                               ((g$ls/false$9032$eZ1vL)
                                (if g$ls/false$9032$eZ1vL
                                  (apply
                                    (case-lambda
                                      ((g$p$9033$eZ1vL g$q$9034$eZ1vL)
                                       ((case-lambda
                                          ((g$t$9035$eZ1vL)
                                           ((case-lambda
                                              ((g$ls/false$9036$eZ1vL)
                                               (if g$ls/false$9036$eZ1vL
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9037$eZ1vL)
                                                      (if (= g$lev$9030$eZ1vL
                                                             '0)
                                                        (g$quasicons*$8992$eZ1vL
                                                          g$p$9037$eZ1vL
                                                          (g$vquasi$8996$eZ1vL
                                                            g$q$9034$eZ1vL
                                                            g$lev$9030$eZ1vL))
                                                        (g$quasicons$8993$eZ1vL
                                                          (g$quasicons$8993$eZ1vL
                                                            (g$datum$8976$eZ1vL
                                                              'unquote)
                                                            (g$quasi$8997$eZ1vL
                                                              g$p$9037$eZ1vL
                                                              (- g$lev$9030$eZ1vL
                                                                 '1)))
                                                          (g$vquasi$8996$eZ1vL
                                                            g$q$9034$eZ1vL
                                                            g$lev$9030$eZ1vL)))))
                                                   g$ls/false$9036$eZ1vL)
                                                 ((case-lambda
                                                    ((g$t$9038$eZ1vL)
                                                     ((case-lambda
                                                        ((g$ls/false$9039$eZ1vL)
                                                         (if g$ls/false$9039$eZ1vL
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$9040$eZ1vL)
                                                                (if (= g$lev$9030$eZ1vL
                                                                       '0)
                                                                  (g$quasiappend$8994$eZ1vL
                                                                    g$p$9040$eZ1vL
                                                                    (g$vquasi$8996$eZ1vL
                                                                      g$q$9034$eZ1vL
                                                                      g$lev$9030$eZ1vL))
                                                                  (g$quasicons$8993$eZ1vL
                                                                    (g$quasicons$8993$eZ1vL
                                                                      (g$datum$8976$eZ1vL
                                                                        'unquote-splicing)
                                                                      (g$quasi$8997$eZ1vL
                                                                        g$p$9040$eZ1vL
                                                                        (- g$lev$9030$eZ1vL
                                                                           '1)))
                                                                    (g$vquasi$8996$eZ1vL
                                                                      g$q$9034$eZ1vL
                                                                      g$lev$9030$eZ1vL)))))
                                                             g$ls/false$9039$eZ1vL)
                                                           ((case-lambda
                                                              ((g$t$9041$eZ1vL)
                                                               ((case-lambda
                                                                  ((g$ls/false$9042$eZ1vL)
                                                                   (if g$ls/false$9042$eZ1vL
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$9043$eZ1vL)
                                                                          (g$quasicons$8993$eZ1vL
                                                                            (g$quasi$8997$eZ1vL
                                                                              g$p$9043$eZ1vL
                                                                              g$lev$9030$eZ1vL)
                                                                            (g$vquasi$8996$eZ1vL
                                                                              g$q$9034$eZ1vL
                                                                              g$lev$9030$eZ1vL))))
                                                                       g$ls/false$9042$eZ1vL)
                                                                     (g$syntax-violation$8109$eZ1vL
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$9041$eZ1vL))))
                                                                (g$syntax-dispatch$7997$eZ1vL
                                                                  g$t$9041$eZ1vL
                                                                  'any))))
                                                            g$t$9038$eZ1vL))))
                                                      (g$syntax-dispatch$7997$eZ1vL
                                                        g$t$9038$eZ1vL
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$9035$eZ1vL))))
                                            (g$syntax-dispatch$7997$eZ1vL
                                              g$t$9035$eZ1vL
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$9033$eZ1vL)))
                                    g$ls/false$9032$eZ1vL)
                                  ((case-lambda
                                     ((g$t$9044$eZ1vL)
                                      ((case-lambda
                                         ((g$ls/false$9045$eZ1vL)
                                          (if g$ls/false$9045$eZ1vL
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7940$eZ1vL
                                                     'quote)
                                                   '())))
                                              g$ls/false$9045$eZ1vL)
                                            (g$syntax-violation$8109$eZ1vL
                                              '#f
                                              '"invalid syntax"
                                              g$t$9044$eZ1vL))))
                                       (g$syntax-dispatch$7997$eZ1vL
                                         g$t$9044$eZ1vL
                                         '()))))
                                   g$t$9031$eZ1vL))))
                             (g$syntax-dispatch$7997$eZ1vL
                               g$t$9031$eZ1vL
                               '(any . any)))))
                         g$p$9029$eZ1vL))))
                   (g$quasi$8997$eZ1vL
                     (case-lambda
                       ((g$p$9002$eZ1vL g$lev$9003$eZ1vL)
                        ((case-lambda
                           ((g$t$9004$eZ1vL)
                            ((case-lambda
                               ((g$ls/false$9005$eZ1vL)
                                (if g$ls/false$9005$eZ1vL
                                  (apply
                                    (case-lambda
                                      ((g$p$9006$eZ1vL)
                                       (if (= g$lev$9003$eZ1vL '0)
                                         g$p$9006$eZ1vL
                                         (g$quasicons$8993$eZ1vL
                                           (g$datum$8976$eZ1vL 'unquote)
                                           (g$quasi$8997$eZ1vL
                                             (list g$p$9006$eZ1vL)
                                             (- g$lev$9003$eZ1vL '1))))))
                                    g$ls/false$9005$eZ1vL)
                                  ((case-lambda
                                     ((g$t$9007$eZ1vL)
                                      ((case-lambda
                                         ((g$ls/false$9008$eZ1vL)
                                          (if g$ls/false$9008$eZ1vL
                                            (apply
                                              (case-lambda
                                                ((g$p$9009$eZ1vL g$q$9010$eZ1vL)
                                                 (if (= g$lev$9003$eZ1vL '0)
                                                   (g$quasicons*$8992$eZ1vL
                                                     g$p$9009$eZ1vL
                                                     (g$quasi$8997$eZ1vL
                                                       g$q$9010$eZ1vL
                                                       g$lev$9003$eZ1vL))
                                                   (g$quasicons$8993$eZ1vL
                                                     (g$quasicons$8993$eZ1vL
                                                       (g$datum$8976$eZ1vL
                                                         'unquote)
                                                       (g$quasi$8997$eZ1vL
                                                         g$p$9009$eZ1vL
                                                         (- g$lev$9003$eZ1vL
                                                            '1)))
                                                     (g$quasi$8997$eZ1vL
                                                       g$q$9010$eZ1vL
                                                       g$lev$9003$eZ1vL)))))
                                              g$ls/false$9008$eZ1vL)
                                            ((case-lambda
                                               ((g$t$9011$eZ1vL)
                                                ((case-lambda
                                                   ((g$ls/false$9012$eZ1vL)
                                                    (if g$ls/false$9012$eZ1vL
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$9013$eZ1vL
                                                             g$q$9014$eZ1vL)
                                                           (if (= g$lev$9003$eZ1vL
                                                                  '0)
                                                             (g$quasiappend$8994$eZ1vL
                                                               g$p$9013$eZ1vL
                                                               (g$quasi$8997$eZ1vL
                                                                 g$q$9014$eZ1vL
                                                                 g$lev$9003$eZ1vL))
                                                             (g$quasicons$8993$eZ1vL
                                                               (g$quasicons$8993$eZ1vL
                                                                 (g$datum$8976$eZ1vL
                                                                   'unquote-splicing)
                                                                 (g$quasi$8997$eZ1vL
                                                                   g$p$9013$eZ1vL
                                                                   (- g$lev$9003$eZ1vL
                                                                      '1)))
                                                               (g$quasi$8997$eZ1vL
                                                                 g$q$9014$eZ1vL
                                                                 g$lev$9003$eZ1vL)))))
                                                        g$ls/false$9012$eZ1vL)
                                                      ((case-lambda
                                                         ((g$t$9015$eZ1vL)
                                                          ((case-lambda
                                                             ((g$ls/false$9016$eZ1vL)
                                                              (if g$ls/false$9016$eZ1vL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$9017$eZ1vL)
                                                                     (g$quasicons$8993$eZ1vL
                                                                       (g$datum$8976$eZ1vL
                                                                         'quasiquote)
                                                                       (g$quasi$8997$eZ1vL
                                                                         (list
                                                                           g$p$9017$eZ1vL)
                                                                         (+ g$lev$9003$eZ1vL
                                                                            '1)))))
                                                                  g$ls/false$9016$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$t$9018$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9019$eZ1vL)
                                                                        (if g$ls/false$9019$eZ1vL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$9020$eZ1vL
                                                                                 g$q$9021$eZ1vL)
                                                                               (g$quasicons$8993$eZ1vL
                                                                                 (g$quasi$8997$eZ1vL
                                                                                   g$p$9020$eZ1vL
                                                                                   g$lev$9003$eZ1vL)
                                                                                 (g$quasi$8997$eZ1vL
                                                                                   g$q$9021$eZ1vL
                                                                                   g$lev$9003$eZ1vL))))
                                                                            g$ls/false$9019$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$t$9022$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9023$eZ1vL)
                                                                                  (if (if g$ls/false$9023$eZ1vL
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$9024$eZ1vL)
                                                                                               (not (g$stx?$7691$eZ1vL
                                                                                                      g$x$9024$eZ1vL))))
                                                                                            g$ls/false$9023$eZ1vL))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$9025$eZ1vL)
                                                                                         (g$quasivector$8995$eZ1vL
                                                                                           (g$vquasi$8996$eZ1vL
                                                                                             g$x$9025$eZ1vL
                                                                                             g$lev$9003$eZ1vL))))
                                                                                      g$ls/false$9023$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$t$9026$eZ1vL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9027$eZ1vL)
                                                                                            (if g$ls/false$9027$eZ1vL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9028$eZ1vL)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7940$eZ1vL
                                                                                                       'quote)
                                                                                                     g$p$9028$eZ1vL)))
                                                                                                g$ls/false$9027$eZ1vL)
                                                                                              (g$syntax-violation$8109$eZ1vL
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9026$eZ1vL))))
                                                                                         (g$syntax-dispatch$7997$eZ1vL
                                                                                           g$t$9026$eZ1vL
                                                                                           'any))))
                                                                                     g$t$9022$eZ1vL))))
                                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                                 g$t$9022$eZ1vL
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9018$eZ1vL))))
                                                                     (g$syntax-dispatch$7997$eZ1vL
                                                                       g$t$9018$eZ1vL
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9015$eZ1vL))))
                                                           (g$syntax-dispatch$7997$eZ1vL
                                                             g$t$9015$eZ1vL
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$9011$eZ1vL))))
                                                 (g$syntax-dispatch$7997$eZ1vL
                                                   g$t$9011$eZ1vL
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9007$eZ1vL))))
                                       (g$syntax-dispatch$7997$eZ1vL
                                         g$t$9007$eZ1vL
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$9004$eZ1vL))))
                             (g$syntax-dispatch$7997$eZ1vL
                               g$t$9004$eZ1vL
                               '(#(scheme-id unquote) any)))))
                         g$p$9002$eZ1vL)))))
           (case-lambda
             ((g$x$8998$eZ1vL)
              ((case-lambda
                 ((g$t$8999$eZ1vL)
                  ((case-lambda
                     ((g$ls/false$9000$eZ1vL)
                      (if g$ls/false$9000$eZ1vL
                        (apply
                          (case-lambda
                            ((g$e$9001$eZ1vL)
                             (g$quasi$8997$eZ1vL g$e$9001$eZ1vL '0)))
                          g$ls/false$9000$eZ1vL)
                        (g$syntax-violation$8109$eZ1vL
                          '#f
                          '"invalid syntax"
                          g$t$8999$eZ1vL))))
                   (g$syntax-dispatch$7997$eZ1vL g$t$8999$eZ1vL '(_ any)))))
               g$x$8998$eZ1vL))))))))
   (g$quasisyntax-macro$7989$eZ1vL
     g$quasisyntax-macro$11492$eZ1vL
     ((case-lambda
        (()
         (letrec* ((g$quasi$9108$eZ1vL
                     (case-lambda
                       ((g$p$9122$eZ1vL g$lev$9123$eZ1vL)
                        ((case-lambda
                           ((g$t$9124$eZ1vL)
                            ((case-lambda
                               ((g$ls/false$9125$eZ1vL)
                                (if g$ls/false$9125$eZ1vL
                                  (apply
                                    (case-lambda
                                      ((g$p$9126$eZ1vL)
                                       (if (= g$lev$9123$eZ1vL '0)
                                         ((case-lambda
                                            ((g$g$9127$eZ1vL)
                                             (values
                                               (list g$g$9127$eZ1vL)
                                               (list g$p$9126$eZ1vL)
                                               g$g$9127$eZ1vL)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$9108$eZ1vL
                                                g$p$9126$eZ1vL
                                                (- g$lev$9123$eZ1vL '1))))
                                           (case-lambda
                                             ((g$lhs*$9131$eZ1vL
                                                g$rhs*$9132$eZ1vL
                                                g$p$9133$eZ1vL)
                                              ((case-lambda
                                                 ((g$p$9134$eZ1vL
                                                    g$rhs*$9135$eZ1vL
                                                    g$lhs*$9136$eZ1vL)
                                                  (values
                                                    g$lhs*$9136$eZ1vL
                                                    g$rhs*$9135$eZ1vL
                                                    (list
                                                      'unsyntax
                                                      g$p$9134$eZ1vL))))
                                               g$p$9133$eZ1vL
                                               g$rhs*$9132$eZ1vL
                                               g$lhs*$9131$eZ1vL)))))))
                                    g$ls/false$9125$eZ1vL)
                                  ((case-lambda
                                     ((g$t$9137$eZ1vL)
                                      ((case-lambda
                                         ((g$ls/false$9138$eZ1vL)
                                          (if (if g$ls/false$9138$eZ1vL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$9123$eZ1vL '0)))
                                                    g$ls/false$9138$eZ1vL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$8109$eZ1vL
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$9122$eZ1vL)))
                                              g$ls/false$9138$eZ1vL)
                                            ((case-lambda
                                               ((g$t$9139$eZ1vL)
                                                ((case-lambda
                                                   ((g$ls/false$9140$eZ1vL)
                                                    (if g$ls/false$9140$eZ1vL
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$9141$eZ1vL
                                                             g$q$9142$eZ1vL)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$9108$eZ1vL
                                                                  g$q$9142$eZ1vL
                                                                  g$lev$9123$eZ1vL)))
                                                             (case-lambda
                                                               ((g$lhs*$9146$eZ1vL
                                                                  g$rhs*$9147$eZ1vL
                                                                  g$q$9148$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$q$9149$eZ1vL
                                                                      g$rhs*$9150$eZ1vL
                                                                      g$lhs*$9151$eZ1vL)
                                                                    (if (= g$lev$9123$eZ1vL
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$9152$eZ1vL)
                                                                          (values
                                                                            (append
                                                                              g$g*$9152$eZ1vL
                                                                              g$lhs*$9151$eZ1vL)
                                                                            (append
                                                                              g$p*$9141$eZ1vL
                                                                              g$rhs*$9150$eZ1vL)
                                                                            (append
                                                                              g$g*$9152$eZ1vL
                                                                              g$q$9149$eZ1vL))))
                                                                       (g$map$5063$eZ1vL
                                                                         (case-lambda
                                                                           ((g$x$9153$eZ1vL)
                                                                            (gensym)))
                                                                         g$p*$9141$eZ1vL))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$9108$eZ1vL
                                                                             g$p*$9141$eZ1vL
                                                                             (- g$lev$9123$eZ1vL
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$9157$eZ1vL
                                                                             g$rhs2*$9158$eZ1vL
                                                                             g$p*$9159$eZ1vL)
                                                                           ((case-lambda
                                                                              ((g$p*$9160$eZ1vL
                                                                                 g$rhs2*$9161$eZ1vL
                                                                                 g$lhs2*$9162$eZ1vL)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$9162$eZ1vL
                                                                                   g$lhs*$9151$eZ1vL)
                                                                                 (append
                                                                                   g$rhs2*$9161$eZ1vL
                                                                                   g$rhs*$9150$eZ1vL)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$9160$eZ1vL)
                                                                                   g$q$9149$eZ1vL))))
                                                                            g$p*$9159$eZ1vL
                                                                            g$rhs2*$9158$eZ1vL
                                                                            g$lhs2*$9157$eZ1vL)))))))
                                                                 g$q$9148$eZ1vL
                                                                 g$rhs*$9147$eZ1vL
                                                                 g$lhs*$9146$eZ1vL))))))
                                                        g$ls/false$9140$eZ1vL)
                                                      ((case-lambda
                                                         ((g$t$9163$eZ1vL)
                                                          ((case-lambda
                                                             ((g$ls/false$9164$eZ1vL)
                                                              (if g$ls/false$9164$eZ1vL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$9165$eZ1vL
                                                                       g$q$9166$eZ1vL)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$9108$eZ1vL
                                                                            g$q$9166$eZ1vL
                                                                            g$lev$9123$eZ1vL)))
                                                                       (case-lambda
                                                                         ((g$lhs*$9170$eZ1vL
                                                                            g$rhs*$9171$eZ1vL
                                                                            g$q$9172$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$q$9173$eZ1vL
                                                                                g$rhs*$9174$eZ1vL
                                                                                g$lhs*$9175$eZ1vL)
                                                                              (if (= g$lev$9123$eZ1vL
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$9176$eZ1vL)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5063$eZ1vL
                                                                                          (case-lambda
                                                                                            ((g$g$9177$eZ1vL)
                                                                                             (cons
                                                                                               g$g$9177$eZ1vL
                                                                                               '(...))))
                                                                                          g$g*$9176$eZ1vL)
                                                                                        g$lhs*$9175$eZ1vL)
                                                                                      (append
                                                                                        g$p*$9165$eZ1vL
                                                                                        g$rhs*$9174$eZ1vL)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5063$eZ1vL
                                                                                            (case-lambda
                                                                                              ((g$g$9178$eZ1vL)
                                                                                               (cons
                                                                                                 g$g$9178$eZ1vL
                                                                                                 '(...))))
                                                                                            g$g*$9176$eZ1vL))
                                                                                        g$q$9173$eZ1vL))))
                                                                                 (g$map$5063$eZ1vL
                                                                                   (case-lambda
                                                                                     ((g$x$9179$eZ1vL)
                                                                                      (gensym)))
                                                                                   g$p*$9165$eZ1vL))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$9108$eZ1vL
                                                                                       g$p*$9165$eZ1vL
                                                                                       (- g$lev$9123$eZ1vL
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$9183$eZ1vL
                                                                                       g$rhs2*$9184$eZ1vL
                                                                                       g$p*$9185$eZ1vL)
                                                                                     ((case-lambda
                                                                                        ((g$p*$9186$eZ1vL
                                                                                           g$rhs2*$9187$eZ1vL
                                                                                           g$lhs2*$9188$eZ1vL)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$9188$eZ1vL
                                                                                             g$lhs*$9175$eZ1vL)
                                                                                           (append
                                                                                             g$rhs2*$9187$eZ1vL
                                                                                             g$rhs*$9174$eZ1vL)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$9186$eZ1vL)
                                                                                             g$q$9173$eZ1vL))))
                                                                                      g$p*$9185$eZ1vL
                                                                                      g$rhs2*$9184$eZ1vL
                                                                                      g$lhs2*$9183$eZ1vL)))))))
                                                                           g$q$9172$eZ1vL
                                                                           g$rhs*$9171$eZ1vL
                                                                           g$lhs*$9170$eZ1vL))))))
                                                                  g$ls/false$9164$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$t$9189$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9190$eZ1vL)
                                                                        (if (if g$ls/false$9190$eZ1vL
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$9123$eZ1vL
                                                                                        '0)))
                                                                                  g$ls/false$9190$eZ1vL))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$8109$eZ1vL
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$9122$eZ1vL)))
                                                                            g$ls/false$9190$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$t$9191$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9192$eZ1vL)
                                                                                  (if g$ls/false$9192$eZ1vL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$9193$eZ1vL)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$9108$eZ1vL
                                                                                                g$p$9193$eZ1vL
                                                                                                (+ g$lev$9123$eZ1vL
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$9197$eZ1vL
                                                                                                g$rhs*$9198$eZ1vL
                                                                                                g$p$9199$eZ1vL)
                                                                                              ((case-lambda
                                                                                                 ((g$p$9200$eZ1vL
                                                                                                    g$rhs*$9201$eZ1vL
                                                                                                    g$lhs*$9202$eZ1vL)
                                                                                                  (values
                                                                                                    g$lhs*$9202$eZ1vL
                                                                                                    g$rhs*$9201$eZ1vL
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$9200$eZ1vL))))
                                                                                               g$p$9199$eZ1vL
                                                                                               g$rhs*$9198$eZ1vL
                                                                                               g$lhs*$9197$eZ1vL))))))
                                                                                      g$ls/false$9192$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$t$9203$eZ1vL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9204$eZ1vL)
                                                                                            (if g$ls/false$9204$eZ1vL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9205$eZ1vL
                                                                                                     g$q$9206$eZ1vL)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$9108$eZ1vL
                                                                                                          g$p$9205$eZ1vL
                                                                                                          g$lev$9123$eZ1vL)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$9213$eZ1vL
                                                                                                          g$rhs*$9214$eZ1vL
                                                                                                          g$p$9215$eZ1vL)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$9108$eZ1vL
                                                                                                               g$q$9206$eZ1vL
                                                                                                               g$lev$9123$eZ1vL)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$9216$eZ1vL
                                                                                                               g$rhs2*$9217$eZ1vL
                                                                                                               g$q$9218$eZ1vL)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$9219$eZ1vL
                                                                                                                   g$rhs2*$9220$eZ1vL
                                                                                                                   g$lhs2*$9221$eZ1vL
                                                                                                                   g$p$9222$eZ1vL
                                                                                                                   g$rhs*$9223$eZ1vL
                                                                                                                   g$lhs*$9224$eZ1vL)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$9221$eZ1vL
                                                                                                                     g$lhs*$9224$eZ1vL)
                                                                                                                   (append
                                                                                                                     g$rhs2*$9220$eZ1vL
                                                                                                                     g$rhs*$9223$eZ1vL)
                                                                                                                   (cons
                                                                                                                     g$p$9222$eZ1vL
                                                                                                                     g$q$9219$eZ1vL))))
                                                                                                              g$q$9218$eZ1vL
                                                                                                              g$rhs2*$9217$eZ1vL
                                                                                                              g$lhs2*$9216$eZ1vL
                                                                                                              g$p$9215$eZ1vL
                                                                                                              g$rhs*$9214$eZ1vL
                                                                                                              g$lhs*$9213$eZ1vL)))))))))
                                                                                                g$ls/false$9204$eZ1vL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9225$eZ1vL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9226$eZ1vL)
                                                                                                      (if g$ls/false$9226$eZ1vL
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$9227$eZ1vL)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$9108$eZ1vL
                                                                                                                    g$x*$9227$eZ1vL
                                                                                                                    g$lev$9123$eZ1vL)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$9231$eZ1vL
                                                                                                                    g$rhs*$9232$eZ1vL
                                                                                                                    g$x*$9233$eZ1vL)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$9234$eZ1vL
                                                                                                                        g$rhs*$9235$eZ1vL
                                                                                                                        g$lhs*$9236$eZ1vL)
                                                                                                                      (values
                                                                                                                        g$lhs*$9236$eZ1vL
                                                                                                                        g$rhs*$9235$eZ1vL
                                                                                                                        (list->vector
                                                                                                                          g$x*$9234$eZ1vL))))
                                                                                                                   g$x*$9233$eZ1vL
                                                                                                                   g$rhs*$9232$eZ1vL
                                                                                                                   g$lhs*$9231$eZ1vL))))))
                                                                                                          g$ls/false$9226$eZ1vL)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9237$eZ1vL)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9238$eZ1vL)
                                                                                                                (if g$ls/false$9238$eZ1vL
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$9122$eZ1vL)))
                                                                                                                    g$ls/false$9238$eZ1vL)
                                                                                                                  (g$syntax-violation$8109$eZ1vL
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9237$eZ1vL))))
                                                                                                             (g$syntax-dispatch$7997$eZ1vL
                                                                                                               g$t$9237$eZ1vL
                                                                                                               '_))))
                                                                                                         g$t$9225$eZ1vL))))
                                                                                                   (g$syntax-dispatch$7997$eZ1vL
                                                                                                     g$t$9225$eZ1vL
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$9203$eZ1vL))))
                                                                                         (g$syntax-dispatch$7997$eZ1vL
                                                                                           g$t$9203$eZ1vL
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$9191$eZ1vL))))
                                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                                 g$t$9191$eZ1vL
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$9189$eZ1vL))))
                                                                     (g$syntax-dispatch$7997$eZ1vL
                                                                       g$t$9189$eZ1vL
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$9163$eZ1vL))))
                                                           (g$syntax-dispatch$7997$eZ1vL
                                                             g$t$9163$eZ1vL
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$9139$eZ1vL))))
                                                 (g$syntax-dispatch$7997$eZ1vL
                                                   g$t$9139$eZ1vL
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9137$eZ1vL))))
                                       (g$syntax-dispatch$7997$eZ1vL
                                         g$t$9137$eZ1vL
                                         '#(scheme-id unsyntax)))))
                                   g$t$9124$eZ1vL))))
                             (g$syntax-dispatch$7997$eZ1vL
                               g$t$9124$eZ1vL
                               '(#(scheme-id unsyntax) any)))))
                         g$p$9122$eZ1vL)))))
           (case-lambda
             ((g$x$9109$eZ1vL)
              ((case-lambda
                 ((g$t$9110$eZ1vL)
                  ((case-lambda
                     ((g$ls/false$9111$eZ1vL)
                      (if g$ls/false$9111$eZ1vL
                        (apply
                          (case-lambda
                            ((g$e$9112$eZ1vL)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$9108$eZ1vL g$e$9112$eZ1vL '0)))
                               (case-lambda
                                 ((g$lhs*$9116$eZ1vL
                                    g$rhs*$9117$eZ1vL
                                    g$v$9118$eZ1vL)
                                  ((case-lambda
                                     ((g$v$9119$eZ1vL
                                        g$rhs*$9120$eZ1vL
                                        g$lhs*$9121$eZ1vL)
                                      (g$bless$7960$eZ1vL
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$9120$eZ1vL)
                                          '()
                                          (list
                                            g$lhs*$9121$eZ1vL
                                            (list 'syntax g$v$9119$eZ1vL))))))
                                   g$v$9118$eZ1vL
                                   g$rhs*$9117$eZ1vL
                                   g$lhs*$9116$eZ1vL))))))
                          g$ls/false$9111$eZ1vL)
                        (g$syntax-violation$8109$eZ1vL
                          '#f
                          '"invalid syntax"
                          g$t$9110$eZ1vL))))
                   (g$syntax-dispatch$7997$eZ1vL g$t$9110$eZ1vL '(_ any)))))
               g$x$9109$eZ1vL))))))))
   (g$define-struct-macro$7990$eZ1vL
     g$define-struct-macro$11493$eZ1vL
     (case-lambda
       ((g$stx$9239$eZ1vL)
        (g$syntax-violation$8109$eZ1vL
          '#f
          '"define-struct not supported"
          g$stx$9239$eZ1vL))))
   (g$define-record-type-macro$7991$eZ1vL
     g$define-record-type-macro$11494$eZ1vL
     (case-lambda
       ((g$x$9240$eZ1vL)
        (letrec* ((g$id$9241$eZ1vL
                    (case-lambda
                      ((g$ctxt$9493$eZ1vL . g$str*$9494$eZ1vL)
                       (g$datum->syntax$8111$eZ1vL
                         g$ctxt$9493$eZ1vL
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5063$eZ1vL
                               (case-lambda
                                 ((g$x$9495$eZ1vL)
                                  (if (symbol? g$x$9495$eZ1vL)
                                    (symbol->string g$x$9495$eZ1vL)
                                    (if (string? g$x$9495$eZ1vL)
                                      g$x$9495$eZ1vL
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$9494$eZ1vL)))))))
                  (g$get-record-name$9242$eZ1vL
                    (case-lambda
                      ((g$spec$9484$eZ1vL)
                       ((case-lambda
                          ((g$t$9485$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9486$eZ1vL)
                               (if g$ls/false$9486$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9487$eZ1vL
                                        g$make-foo$9488$eZ1vL
                                        g$foo?$9489$eZ1vL)
                                      g$foo$9487$eZ1vL))
                                   g$ls/false$9486$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9490$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9491$eZ1vL)
                                         (if g$ls/false$9491$eZ1vL
                                           (apply
                                             (case-lambda
                                               ((g$foo$9492$eZ1vL)
                                                g$foo$9492$eZ1vL))
                                             g$ls/false$9491$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9490$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9490$eZ1vL
                                        'any))))
                                  g$t$9485$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$9485$eZ1vL
                              '(any any any)))))
                        g$spec$9484$eZ1vL))))
                  (g$get-record-constructor-name$9243$eZ1vL
                    (case-lambda
                      ((g$spec$9474$eZ1vL)
                       ((case-lambda
                          ((g$t$9475$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9476$eZ1vL)
                               (if g$ls/false$9476$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9477$eZ1vL
                                        g$make-foo$9478$eZ1vL
                                        g$foo?$9479$eZ1vL)
                                      g$make-foo$9478$eZ1vL))
                                   g$ls/false$9476$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9480$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9481$eZ1vL)
                                         (if (if g$ls/false$9481$eZ1vL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9482$eZ1vL)
                                                      (g$id?$7719$eZ1vL
                                                        g$foo$9482$eZ1vL)))
                                                   g$ls/false$9481$eZ1vL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9483$eZ1vL)
                                                (g$id$9241$eZ1vL
                                                  g$foo$9483$eZ1vL
                                                  '"make-"
                                                  (g$stx->datum$7730$eZ1vL
                                                    g$foo$9483$eZ1vL))))
                                             g$ls/false$9481$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9480$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9480$eZ1vL
                                        'any))))
                                  g$t$9475$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$9475$eZ1vL
                              '(any any any)))))
                        g$spec$9474$eZ1vL))))
                  (g$get-record-predicate-name$9244$eZ1vL
                    (case-lambda
                      ((g$spec$9464$eZ1vL)
                       ((case-lambda
                          ((g$t$9465$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9466$eZ1vL)
                               (if g$ls/false$9466$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9467$eZ1vL
                                        g$make-foo$9468$eZ1vL
                                        g$foo?$9469$eZ1vL)
                                      g$foo?$9469$eZ1vL))
                                   g$ls/false$9466$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9470$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9471$eZ1vL)
                                         (if (if g$ls/false$9471$eZ1vL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9472$eZ1vL)
                                                      (g$id?$7719$eZ1vL
                                                        g$foo$9472$eZ1vL)))
                                                   g$ls/false$9471$eZ1vL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9473$eZ1vL)
                                                (g$id$9241$eZ1vL
                                                  g$foo$9473$eZ1vL
                                                  (g$stx->datum$7730$eZ1vL
                                                    g$foo$9473$eZ1vL)
                                                  '"?")))
                                             g$ls/false$9471$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9470$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9470$eZ1vL
                                        'any))))
                                  g$t$9465$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$9465$eZ1vL
                              '(any any any)))))
                        g$spec$9464$eZ1vL))))
                  (g$get-clause$9245$eZ1vL
                    (case-lambda
                      ((g$id$9455$eZ1vL g$ls$9456$eZ1vL)
                       ((case-lambda
                          ((g$t$9457$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9458$eZ1vL)
                               (if g$ls/false$9458$eZ1vL
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9458$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9459$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9460$eZ1vL)
                                         (if g$ls/false$9460$eZ1vL
                                           (apply
                                             (case-lambda
                                               ((g$x$9461$eZ1vL
                                                  g$rest$9462$eZ1vL
                                                  g$ls$9463$eZ1vL)
                                                (if (g$free-id=?$7723$eZ1vL
                                                      (g$bless$7960$eZ1vL
                                                        g$id$9455$eZ1vL)
                                                      g$x$9461$eZ1vL)
                                                  (cons
                                                    g$x$9461$eZ1vL
                                                    g$rest$9462$eZ1vL)
                                                  (g$get-clause$9245$eZ1vL
                                                    g$id$9455$eZ1vL
                                                    g$ls$9463$eZ1vL))))
                                             g$ls/false$9460$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9459$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9459$eZ1vL
                                        '((any . any) . any)))))
                                  g$t$9457$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL g$t$9457$eZ1vL '()))))
                        g$ls$9456$eZ1vL))))
                  (g$foo-rtd-code$9246$eZ1vL
                    (case-lambda
                      ((g$name$9414$eZ1vL
                         g$clause*$9415$eZ1vL
                         g$parent-rtd-code$9416$eZ1vL)
                       (letrec* ((g$convert-field-spec*$9417$eZ1vL
                                   (case-lambda
                                     ((g$ls$9442$eZ1vL)
                                      (list->vector
                                        (g$map$5063$eZ1vL
                                          (case-lambda
                                            ((g$x$9443$eZ1vL)
                                             ((case-lambda
                                                ((g$t$9444$eZ1vL)
                                                 ((case-lambda
                                                    ((g$ls/false$9445$eZ1vL)
                                                     (if g$ls/false$9445$eZ1vL
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$9446$eZ1vL
                                                              g$rest$9447$eZ1vL)
                                                            (list
                                                              'mutable
                                                              g$name$9446$eZ1vL)))
                                                         g$ls/false$9445$eZ1vL)
                                                       ((case-lambda
                                                          ((g$t$9448$eZ1vL)
                                                           ((case-lambda
                                                              ((g$ls/false$9449$eZ1vL)
                                                               (if g$ls/false$9449$eZ1vL
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$9450$eZ1vL
                                                                        g$rest$9451$eZ1vL)
                                                                      (list
                                                                        'immutable
                                                                        g$name$9450$eZ1vL)))
                                                                   g$ls/false$9449$eZ1vL)
                                                                 ((case-lambda
                                                                    ((g$t$9452$eZ1vL)
                                                                     ((case-lambda
                                                                        ((g$ls/false$9453$eZ1vL)
                                                                         (if g$ls/false$9453$eZ1vL
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$9454$eZ1vL)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$9454$eZ1vL)))
                                                                             g$ls/false$9453$eZ1vL)
                                                                           (g$syntax-violation$8109$eZ1vL
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$9452$eZ1vL))))
                                                                      (g$syntax-dispatch$7997$eZ1vL
                                                                        g$t$9452$eZ1vL
                                                                        'any))))
                                                                  g$t$9448$eZ1vL))))
                                                            (g$syntax-dispatch$7997$eZ1vL
                                                              g$t$9448$eZ1vL
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$9444$eZ1vL))))
                                                  (g$syntax-dispatch$7997$eZ1vL
                                                    g$t$9444$eZ1vL
                                                    '(#(scheme-id mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$9443$eZ1vL)))
                                          g$ls$9442$eZ1vL))))))
                         ((case-lambda
                            ((g$uid-code$9418$eZ1vL
                               g$sealed?$9419$eZ1vL
                               g$opaque?$9420$eZ1vL
                               g$fields$9421$eZ1vL)
                             (g$bless$7960$eZ1vL
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9414$eZ1vL)
                                 g$parent-rtd-code$9416$eZ1vL
                                 g$uid-code$9418$eZ1vL
                                 g$sealed?$9419$eZ1vL
                                 g$opaque?$9420$eZ1vL
                                 g$fields$9421$eZ1vL))))
                          ((case-lambda
                             ((g$t$9422$eZ1vL)
                              ((case-lambda
                                 ((g$ls/false$9423$eZ1vL)
                                  (if g$ls/false$9423$eZ1vL
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9423$eZ1vL)
                                    ((case-lambda
                                       ((g$t$9424$eZ1vL)
                                        ((case-lambda
                                           ((g$ls/false$9425$eZ1vL)
                                            (if g$ls/false$9425$eZ1vL
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9426$eZ1vL)
                                                   (list
                                                     'quote
                                                     g$uid$9426$eZ1vL)))
                                                g$ls/false$9425$eZ1vL)
                                              ((case-lambda
                                                 ((g$t$9427$eZ1vL)
                                                  ((case-lambda
                                                     ((g$ls/false$9428$eZ1vL)
                                                      (if g$ls/false$9428$eZ1vL
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9428$eZ1vL)
                                                        (g$syntax-violation$8109$eZ1vL
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9427$eZ1vL))))
                                                   (g$syntax-dispatch$7997$eZ1vL
                                                     g$t$9427$eZ1vL
                                                     '_))))
                                               g$t$9424$eZ1vL))))
                                         (g$syntax-dispatch$7997$eZ1vL
                                           g$t$9424$eZ1vL
                                           '(_ any)))))
                                     g$t$9422$eZ1vL))))
                               (g$syntax-dispatch$7997$eZ1vL
                                 g$t$9422$eZ1vL
                                 '(_)))))
                           (g$get-clause$9245$eZ1vL
                             'nongenerative
                             g$clause*$9415$eZ1vL))
                          ((case-lambda
                             ((g$t$9429$eZ1vL)
                              ((case-lambda
                                 ((g$ls/false$9430$eZ1vL)
                                  (if g$ls/false$9430$eZ1vL
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9430$eZ1vL)
                                    ((case-lambda
                                       ((g$t$9431$eZ1vL)
                                        ((case-lambda
                                           ((g$ls/false$9432$eZ1vL)
                                            (if g$ls/false$9432$eZ1vL
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9432$eZ1vL)
                                              (g$syntax-violation$8109$eZ1vL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9431$eZ1vL))))
                                         (g$syntax-dispatch$7997$eZ1vL
                                           g$t$9431$eZ1vL
                                           '_))))
                                     g$t$9429$eZ1vL))))
                               (g$syntax-dispatch$7997$eZ1vL
                                 g$t$9429$eZ1vL
                                 '(_ #(atom #t))))))
                           (g$get-clause$9245$eZ1vL
                             'sealed
                             g$clause*$9415$eZ1vL))
                          ((case-lambda
                             ((g$t$9433$eZ1vL)
                              ((case-lambda
                                 ((g$ls/false$9434$eZ1vL)
                                  (if g$ls/false$9434$eZ1vL
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9434$eZ1vL)
                                    ((case-lambda
                                       ((g$t$9435$eZ1vL)
                                        ((case-lambda
                                           ((g$ls/false$9436$eZ1vL)
                                            (if g$ls/false$9436$eZ1vL
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9436$eZ1vL)
                                              (g$syntax-violation$8109$eZ1vL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9435$eZ1vL))))
                                         (g$syntax-dispatch$7997$eZ1vL
                                           g$t$9435$eZ1vL
                                           '_))))
                                     g$t$9433$eZ1vL))))
                               (g$syntax-dispatch$7997$eZ1vL
                                 g$t$9433$eZ1vL
                                 '(_ #(atom #t))))))
                           (g$get-clause$9245$eZ1vL
                             'opaque
                             g$clause*$9415$eZ1vL))
                          ((case-lambda
                             ((g$t$9437$eZ1vL)
                              ((case-lambda
                                 ((g$ls/false$9438$eZ1vL)
                                  (if g$ls/false$9438$eZ1vL
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9439$eZ1vL)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9417$eZ1vL
                                             g$field-spec*$9439$eZ1vL))))
                                      g$ls/false$9438$eZ1vL)
                                    ((case-lambda
                                       ((g$t$9440$eZ1vL)
                                        ((case-lambda
                                           ((g$ls/false$9441$eZ1vL)
                                            (if g$ls/false$9441$eZ1vL
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9441$eZ1vL)
                                              (g$syntax-violation$8109$eZ1vL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9440$eZ1vL))))
                                         (g$syntax-dispatch$7997$eZ1vL
                                           g$t$9440$eZ1vL
                                           '_))))
                                     g$t$9437$eZ1vL))))
                               (g$syntax-dispatch$7997$eZ1vL
                                 g$t$9437$eZ1vL
                                 '(_ . each-any)))))
                           (g$get-clause$9245$eZ1vL
                             'fields
                             g$clause*$9415$eZ1vL)))))))
                  (g$parent-rtd-code$9247$eZ1vL
                    (case-lambda
                      ((g$clause*$9402$eZ1vL)
                       ((case-lambda
                          ((g$t$9403$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9404$eZ1vL)
                               (if g$ls/false$9404$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$name$9405$eZ1vL)
                                      (list
                                        'record-type-descriptor
                                        g$name$9405$eZ1vL)))
                                   g$ls/false$9404$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9406$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9407$eZ1vL)
                                         (if g$ls/false$9407$eZ1vL
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9408$eZ1vL)
                                                    ((case-lambda
                                                       ((g$ls/false$9409$eZ1vL)
                                                        (if g$ls/false$9409$eZ1vL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9410$eZ1vL
                                                                 g$rcd$9411$eZ1vL)
                                                               g$rtd$9410$eZ1vL))
                                                            g$ls/false$9409$eZ1vL)
                                                          ((case-lambda
                                                             ((g$t$9412$eZ1vL)
                                                              ((case-lambda
                                                                 ((g$ls/false$9413$eZ1vL)
                                                                  (if g$ls/false$9413$eZ1vL
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9413$eZ1vL)
                                                                    (g$syntax-violation$8109$eZ1vL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9412$eZ1vL))))
                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                 g$t$9412$eZ1vL
                                                                 '#(atom #f)))))
                                                           g$t$9408$eZ1vL))))
                                                     (g$syntax-dispatch$7997$eZ1vL
                                                       g$t$9408$eZ1vL
                                                       '(_ any any)))))
                                                 (g$get-clause$9245$eZ1vL
                                                   'parent-rtd
                                                   g$clause*$9402$eZ1vL))))
                                             g$ls/false$9407$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9406$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9406$eZ1vL
                                        '#(atom #f)))))
                                  g$t$9403$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$9403$eZ1vL
                              '(_ any)))))
                        (g$get-clause$9245$eZ1vL
                          'parent
                          g$clause*$9402$eZ1vL)))))
                  (g$parent-rcd-code$9248$eZ1vL
                    (case-lambda
                      ((g$clause*$9390$eZ1vL)
                       ((case-lambda
                          ((g$t$9391$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9392$eZ1vL)
                               (if g$ls/false$9392$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$name$9393$eZ1vL)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$9393$eZ1vL)))
                                   g$ls/false$9392$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9394$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9395$eZ1vL)
                                         (if g$ls/false$9395$eZ1vL
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9396$eZ1vL)
                                                    ((case-lambda
                                                       ((g$ls/false$9397$eZ1vL)
                                                        (if g$ls/false$9397$eZ1vL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9398$eZ1vL
                                                                 g$rcd$9399$eZ1vL)
                                                               g$rcd$9399$eZ1vL))
                                                            g$ls/false$9397$eZ1vL)
                                                          ((case-lambda
                                                             ((g$t$9400$eZ1vL)
                                                              ((case-lambda
                                                                 ((g$ls/false$9401$eZ1vL)
                                                                  (if g$ls/false$9401$eZ1vL
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9401$eZ1vL)
                                                                    (g$syntax-violation$8109$eZ1vL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9400$eZ1vL))))
                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                 g$t$9400$eZ1vL
                                                                 '#(atom #f)))))
                                                           g$t$9396$eZ1vL))))
                                                     (g$syntax-dispatch$7997$eZ1vL
                                                       g$t$9396$eZ1vL
                                                       '(_ any any)))))
                                                 (g$get-clause$9245$eZ1vL
                                                   'parent-rtd
                                                   g$clause*$9390$eZ1vL))))
                                             g$ls/false$9395$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9394$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9394$eZ1vL
                                        '#(atom #f)))))
                                  g$t$9391$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$9391$eZ1vL
                              '(_ any)))))
                        (g$get-clause$9245$eZ1vL
                          'parent
                          g$clause*$9390$eZ1vL)))))
                  (g$foo-rcd-code$9249$eZ1vL
                    (case-lambda
                      ((g$clause*$9386$eZ1vL
                         g$foo-rtd$9387$eZ1vL
                         g$protocol$9388$eZ1vL
                         g$parent-rcd-code$9389$eZ1vL)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$9387$eZ1vL
                         g$parent-rcd-code$9389$eZ1vL
                         g$protocol$9388$eZ1vL))))
                  (g$get-protocol-code$9250$eZ1vL
                    (case-lambda
                      ((g$clause*$9380$eZ1vL)
                       ((case-lambda
                          ((g$t$9381$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9382$eZ1vL)
                               (if g$ls/false$9382$eZ1vL
                                 (apply
                                   (case-lambda
                                     ((g$expr$9383$eZ1vL) g$expr$9383$eZ1vL))
                                   g$ls/false$9382$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9384$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9385$eZ1vL)
                                         (if g$ls/false$9385$eZ1vL
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$9385$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9384$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9384$eZ1vL
                                        '_))))
                                  g$t$9381$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$9381$eZ1vL
                              '(_ any)))))
                        (g$get-clause$9245$eZ1vL
                          'protocol
                          g$clause*$9380$eZ1vL)))))
                  (g$get-fields$9251$eZ1vL
                    (case-lambda
                      ((g$clause*$9371$eZ1vL)
                       ((case-lambda
                          ((g$t$9372$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9373$eZ1vL)
                               (if g$ls/false$9373$eZ1vL
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$9373$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9374$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9375$eZ1vL)
                                         (if g$ls/false$9375$eZ1vL
                                           (apply
                                             (case-lambda
                                               ((g$f*$9376$eZ1vL)
                                                g$f*$9376$eZ1vL))
                                             g$ls/false$9375$eZ1vL)
                                           ((case-lambda
                                              ((g$t$9377$eZ1vL)
                                               ((case-lambda
                                                  ((g$ls/false$9378$eZ1vL)
                                                   (if g$ls/false$9378$eZ1vL
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9379$eZ1vL)
                                                          (g$get-fields$9251$eZ1vL
                                                            g$rest$9379$eZ1vL)))
                                                       g$ls/false$9378$eZ1vL)
                                                     (g$syntax-violation$8109$eZ1vL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9377$eZ1vL))))
                                                (g$syntax-dispatch$7997$eZ1vL
                                                  g$t$9377$eZ1vL
                                                  '(_ . any)))))
                                            g$t$9374$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9374$eZ1vL
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$9372$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL g$t$9372$eZ1vL '()))))
                        g$clause*$9371$eZ1vL))))
                  (g$get-mutator-indices$9252$eZ1vL
                    (case-lambda
                      ((g$fields$9359$eZ1vL)
                       ((letrec ((g$f$9360$eZ1vL
                                   (case-lambda
                                     ((g$fields$9361$eZ1vL g$i$9362$eZ1vL)
                                      ((case-lambda
                                         ((g$t$9363$eZ1vL)
                                          ((case-lambda
                                             ((g$ls/false$9364$eZ1vL)
                                              (if g$ls/false$9364$eZ1vL
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$9364$eZ1vL)
                                                ((case-lambda
                                                   ((g$t$9365$eZ1vL)
                                                    ((case-lambda
                                                       ((g$ls/false$9366$eZ1vL)
                                                        (if g$ls/false$9366$eZ1vL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$9367$eZ1vL)
                                                               (cons
                                                                 g$i$9362$eZ1vL
                                                                 (g$f$9360$eZ1vL
                                                                   g$rest$9367$eZ1vL
                                                                   (+ g$i$9362$eZ1vL
                                                                      '1)))))
                                                            g$ls/false$9366$eZ1vL)
                                                          ((case-lambda
                                                             ((g$t$9368$eZ1vL)
                                                              ((case-lambda
                                                                 ((g$ls/false$9369$eZ1vL)
                                                                  (if g$ls/false$9369$eZ1vL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$9370$eZ1vL)
                                                                         (g$f$9360$eZ1vL
                                                                           g$rest$9370$eZ1vL
                                                                           (+ g$i$9362$eZ1vL
                                                                              '1))))
                                                                      g$ls/false$9369$eZ1vL)
                                                                    (g$syntax-violation$8109$eZ1vL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9368$eZ1vL))))
                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                 g$t$9368$eZ1vL
                                                                 '(_ . any)))))
                                                           g$t$9365$eZ1vL))))
                                                     (g$syntax-dispatch$7997$eZ1vL
                                                       g$t$9365$eZ1vL
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$9363$eZ1vL))))
                                           (g$syntax-dispatch$7997$eZ1vL
                                             g$t$9363$eZ1vL
                                             '()))))
                                       g$fields$9361$eZ1vL)))))
                          g$f$9360$eZ1vL)
                        g$fields$9359$eZ1vL
                        '0))))
                  (g$get-mutators$9253$eZ1vL
                    (case-lambda
                      ((g$foo$9338$eZ1vL g$fields$9339$eZ1vL)
                       (letrec* ((g$gen-name$9340$eZ1vL
                                   (case-lambda
                                     ((g$x$9358$eZ1vL)
                                      (g$datum->syntax$8111$eZ1vL
                                        g$foo$9338$eZ1vL
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8112$eZ1vL
                                                g$foo$9338$eZ1vL))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8112$eZ1vL
                                                g$x$9358$eZ1vL))
                                            '"-set!")))))))
                         ((letrec ((g$f$9341$eZ1vL
                                     (case-lambda
                                       ((g$fields$9342$eZ1vL)
                                        ((case-lambda
                                           ((g$t$9343$eZ1vL)
                                            ((case-lambda
                                               ((g$ls/false$9344$eZ1vL)
                                                (if g$ls/false$9344$eZ1vL
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$9344$eZ1vL)
                                                  ((case-lambda
                                                     ((g$t$9345$eZ1vL)
                                                      ((case-lambda
                                                         ((g$ls/false$9346$eZ1vL)
                                                          (if g$ls/false$9346$eZ1vL
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9347$eZ1vL
                                                                   g$accessor$9348$eZ1vL
                                                                   g$mutator$9349$eZ1vL
                                                                   g$rest$9350$eZ1vL)
                                                                 (cons
                                                                   g$mutator$9349$eZ1vL
                                                                   (g$f$9341$eZ1vL
                                                                     g$rest$9350$eZ1vL))))
                                                              g$ls/false$9346$eZ1vL)
                                                            ((case-lambda
                                                               ((g$t$9351$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$ls/false$9352$eZ1vL)
                                                                    (if g$ls/false$9352$eZ1vL
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9353$eZ1vL
                                                                             g$rest$9354$eZ1vL)
                                                                           (cons
                                                                             (g$gen-name$9340$eZ1vL
                                                                               g$name$9353$eZ1vL)
                                                                             (g$f$9341$eZ1vL
                                                                               g$rest$9354$eZ1vL))))
                                                                        g$ls/false$9352$eZ1vL)
                                                                      ((case-lambda
                                                                         ((g$t$9355$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9356$eZ1vL)
                                                                              (if g$ls/false$9356$eZ1vL
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$9357$eZ1vL)
                                                                                     (g$f$9341$eZ1vL
                                                                                       g$rest$9357$eZ1vL)))
                                                                                  g$ls/false$9356$eZ1vL)
                                                                                (g$syntax-violation$8109$eZ1vL
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9355$eZ1vL))))
                                                                           (g$syntax-dispatch$7997$eZ1vL
                                                                             g$t$9355$eZ1vL
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$9351$eZ1vL))))
                                                                 (g$syntax-dispatch$7997$eZ1vL
                                                                   g$t$9351$eZ1vL
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$9345$eZ1vL))))
                                                       (g$syntax-dispatch$7997$eZ1vL
                                                         g$t$9345$eZ1vL
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$9343$eZ1vL))))
                                             (g$syntax-dispatch$7997$eZ1vL
                                               g$t$9343$eZ1vL
                                               '()))))
                                         g$fields$9342$eZ1vL)))))
                            g$f$9341$eZ1vL)
                          g$fields$9339$eZ1vL)))))
                  (g$get-accessors$9254$eZ1vL
                    (case-lambda
                      ((g$foo$9304$eZ1vL g$fields$9305$eZ1vL)
                       (letrec* ((g$gen-name$9306$eZ1vL
                                   (case-lambda
                                     ((g$x$9337$eZ1vL)
                                      (g$datum->syntax$8111$eZ1vL
                                        g$foo$9304$eZ1vL
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8112$eZ1vL
                                                g$foo$9304$eZ1vL))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8112$eZ1vL
                                                g$x$9337$eZ1vL)))))))))
                         (g$map$5063$eZ1vL
                           (case-lambda
                             ((g$field$9307$eZ1vL)
                              ((case-lambda
                                 ((g$t$9308$eZ1vL)
                                  ((case-lambda
                                     ((g$ls/false$9309$eZ1vL)
                                      (if (if g$ls/false$9309$eZ1vL
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$9310$eZ1vL
                                                     g$accessor$9311$eZ1vL
                                                     g$mutator$9312$eZ1vL)
                                                   (g$id?$7719$eZ1vL
                                                     g$accessor$9311$eZ1vL)))
                                                g$ls/false$9309$eZ1vL))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$9313$eZ1vL
                                               g$accessor$9314$eZ1vL
                                               g$mutator$9315$eZ1vL)
                                             g$accessor$9314$eZ1vL))
                                          g$ls/false$9309$eZ1vL)
                                        ((case-lambda
                                           ((g$t$9316$eZ1vL)
                                            ((case-lambda
                                               ((g$ls/false$9317$eZ1vL)
                                                (if (if g$ls/false$9317$eZ1vL
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$9318$eZ1vL
                                                               g$accessor$9319$eZ1vL)
                                                             (g$id?$7719$eZ1vL
                                                               g$accessor$9319$eZ1vL)))
                                                          g$ls/false$9317$eZ1vL))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$9320$eZ1vL
                                                         g$accessor$9321$eZ1vL)
                                                       g$accessor$9321$eZ1vL))
                                                    g$ls/false$9317$eZ1vL)
                                                  ((case-lambda
                                                     ((g$t$9322$eZ1vL)
                                                      ((case-lambda
                                                         ((g$ls/false$9323$eZ1vL)
                                                          (if (if g$ls/false$9323$eZ1vL
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$9324$eZ1vL)
                                                                       (g$id?$7719$eZ1vL
                                                                         g$name$9324$eZ1vL)))
                                                                    g$ls/false$9323$eZ1vL))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9325$eZ1vL)
                                                                 (g$gen-name$9306$eZ1vL
                                                                   g$name$9325$eZ1vL)))
                                                              g$ls/false$9323$eZ1vL)
                                                            ((case-lambda
                                                               ((g$t$9326$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$ls/false$9327$eZ1vL)
                                                                    (if (if g$ls/false$9327$eZ1vL
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$9328$eZ1vL)
                                                                                 (g$id?$7719$eZ1vL
                                                                                   g$name$9328$eZ1vL)))
                                                                              g$ls/false$9327$eZ1vL))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9329$eZ1vL)
                                                                           (g$gen-name$9306$eZ1vL
                                                                             g$name$9329$eZ1vL)))
                                                                        g$ls/false$9327$eZ1vL)
                                                                      ((case-lambda
                                                                         ((g$t$9330$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9331$eZ1vL)
                                                                              (if (if g$ls/false$9331$eZ1vL
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$9332$eZ1vL)
                                                                                           (g$id?$7719$eZ1vL
                                                                                             g$name$9332$eZ1vL)))
                                                                                        g$ls/false$9331$eZ1vL))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$9333$eZ1vL)
                                                                                     (g$gen-name$9306$eZ1vL
                                                                                       g$name$9333$eZ1vL)))
                                                                                  g$ls/false$9331$eZ1vL)
                                                                                ((case-lambda
                                                                                   ((g$t$9334$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$9335$eZ1vL)
                                                                                        (if g$ls/false$9335$eZ1vL
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$9336$eZ1vL)
                                                                                               (g$syntax-violation$8109$eZ1vL
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$9307$eZ1vL)))
                                                                                            g$ls/false$9335$eZ1vL)
                                                                                          (g$syntax-violation$8109$eZ1vL
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$9334$eZ1vL))))
                                                                                     (g$syntax-dispatch$7997$eZ1vL
                                                                                       g$t$9334$eZ1vL
                                                                                       'any))))
                                                                                 g$t$9330$eZ1vL))))
                                                                           (g$syntax-dispatch$7997$eZ1vL
                                                                             g$t$9330$eZ1vL
                                                                             'any))))
                                                                       g$t$9326$eZ1vL))))
                                                                 (g$syntax-dispatch$7997$eZ1vL
                                                                   g$t$9326$eZ1vL
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$9322$eZ1vL))))
                                                       (g$syntax-dispatch$7997$eZ1vL
                                                         g$t$9322$eZ1vL
                                                         '(#(scheme-id mutable)
                                                           any)))))
                                                   g$t$9316$eZ1vL))))
                                             (g$syntax-dispatch$7997$eZ1vL
                                               g$t$9316$eZ1vL
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$9308$eZ1vL))))
                                   (g$syntax-dispatch$7997$eZ1vL
                                     g$t$9308$eZ1vL
                                     '(#(scheme-id mutable) any any any)))))
                               g$field$9307$eZ1vL)))
                           g$fields$9305$eZ1vL)))))
                  (g$enumerate$9255$eZ1vL
                    (case-lambda
                      ((g$ls$9300$eZ1vL)
                       ((letrec ((g$f$9301$eZ1vL
                                   (case-lambda
                                     ((g$ls$9302$eZ1vL g$i$9303$eZ1vL)
                                      (if (null? g$ls$9302$eZ1vL)
                                        '()
                                        (cons
                                          g$i$9303$eZ1vL
                                          (g$f$9301$eZ1vL
                                            (cdr g$ls$9302$eZ1vL)
                                            (+ g$i$9303$eZ1vL '1))))))))
                          g$f$9301$eZ1vL)
                        g$ls$9300$eZ1vL
                        '0))))
                  (g$do-define-record$9256$eZ1vL
                    (case-lambda
                      ((g$namespec$9280$eZ1vL g$clause*$9281$eZ1vL)
                       ((case-lambda
                          ((g$foo$9282$eZ1vL)
                           ((case-lambda
                              ((g$foo-rtd$9283$eZ1vL)
                               ((case-lambda
                                  ((g$foo-rcd$9284$eZ1vL)
                                   ((case-lambda
                                      ((g$protocol$9285$eZ1vL)
                                       ((case-lambda
                                          ((g$make-foo$9286$eZ1vL)
                                           ((case-lambda
                                              ((g$fields$9287$eZ1vL)
                                               ((case-lambda
                                                  ((g$idx*$9288$eZ1vL)
                                                   ((case-lambda
                                                      ((g$foo-x*$9289$eZ1vL)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$9290$eZ1vL)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$9291$eZ1vL)
                                                               ((case-lambda
                                                                  ((g$foo?$9292$eZ1vL)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$9293$eZ1vL)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$9294$eZ1vL)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$9295$eZ1vL)
                                                                               (g$bless$7960$eZ1vL
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$9283$eZ1vL
                                                                                       g$foo-rtd-code$9293$eZ1vL)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$9285$eZ1vL
                                                                                         g$protocol-code$9295$eZ1vL)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$9284$eZ1vL
                                                                                           g$foo-rcd-code$9294$eZ1vL)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$9282$eZ1vL
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$9283$eZ1vL)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$9284$eZ1vL)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$9292$eZ1vL
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$9283$eZ1vL))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$9286$eZ1vL
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$9284$eZ1vL))
                                                                                               (append
                                                                                                 (g$map$5063$eZ1vL
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$9296$eZ1vL
                                                                                                        g$idx$9297$eZ1vL)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$9296$eZ1vL
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$9283$eZ1vL
                                                                                                          g$idx$9297$eZ1vL))))
                                                                                                   g$foo-x*$9289$eZ1vL
                                                                                                   g$idx*$9288$eZ1vL)
                                                                                                 (g$map$5063$eZ1vL
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$9298$eZ1vL
                                                                                                        g$idx$9299$eZ1vL)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$9298$eZ1vL
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$9283$eZ1vL
                                                                                                          g$idx$9299$eZ1vL))))
                                                                                                   g$set-foo-x!*$9290$eZ1vL
                                                                                                   g$set-foo-idx*$9291$eZ1vL))))))))))))
                                                                            (g$get-protocol-code$9250$eZ1vL
                                                                              g$clause*$9281$eZ1vL))))
                                                                        (g$foo-rcd-code$9249$eZ1vL
                                                                          g$clause*$9281$eZ1vL
                                                                          g$foo-rtd$9283$eZ1vL
                                                                          g$protocol$9285$eZ1vL
                                                                          (g$parent-rcd-code$9248$eZ1vL
                                                                            g$clause*$9281$eZ1vL)))))
                                                                    (g$foo-rtd-code$9246$eZ1vL
                                                                      g$foo$9282$eZ1vL
                                                                      g$clause*$9281$eZ1vL
                                                                      (g$parent-rtd-code$9247$eZ1vL
                                                                        g$clause*$9281$eZ1vL)))))
                                                                (g$get-record-predicate-name$9244$eZ1vL
                                                                  g$namespec$9280$eZ1vL))))
                                                            (g$get-mutator-indices$9252$eZ1vL
                                                              g$fields$9287$eZ1vL))))
                                                        (g$get-mutators$9253$eZ1vL
                                                          g$foo$9282$eZ1vL
                                                          g$fields$9287$eZ1vL))))
                                                    (g$get-accessors$9254$eZ1vL
                                                      g$foo$9282$eZ1vL
                                                      g$fields$9287$eZ1vL))))
                                                (g$enumerate$9255$eZ1vL
                                                  g$fields$9287$eZ1vL))))
                                            (g$get-fields$9251$eZ1vL
                                              g$clause*$9281$eZ1vL))))
                                        (g$get-record-constructor-name$9243$eZ1vL
                                          g$namespec$9280$eZ1vL))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$9242$eZ1vL g$namespec$9280$eZ1vL)))))
                  (g$verify-clauses$9257$eZ1vL
                    (case-lambda
                      ((g$x$9262$eZ1vL g$cls*$9263$eZ1vL)
                       (letrec* ((g$valid-kwds$9264$eZ1vL
                                   (g$map$5063$eZ1vL
                                     g$bless$7960$eZ1vL
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$9265$eZ1vL
                                   (case-lambda
                                     ((g$x$9277$eZ1vL g$ls$9278$eZ1vL)
                                      (if (pair? g$ls$9278$eZ1vL)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$9279$eZ1vL)
                                              (if g$t$9279$eZ1vL
                                                g$t$9279$eZ1vL
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$9265$eZ1vL
                                                    g$x$9277$eZ1vL
                                                    (cdr g$ls$9278$eZ1vL))))))
                                           (g$free-id=?$7723$eZ1vL
                                             g$x$9277$eZ1vL
                                             (car g$ls$9278$eZ1vL))))
                                        '#f)))))
                         ((letrec ((g$f$9266$eZ1vL
                                     (case-lambda
                                       ((g$cls*$9267$eZ1vL g$seen*$9268$eZ1vL)
                                        (if (not (null? g$cls*$9267$eZ1vL))
                                          ((case-lambda
                                             ((g$t$9269$eZ1vL)
                                              ((case-lambda
                                                 ((g$ls/false$9270$eZ1vL)
                                                  (if g$ls/false$9270$eZ1vL
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$9271$eZ1vL
                                                           g$rest$9272$eZ1vL)
                                                         (if ((case-lambda
                                                                ((g$t$9273$eZ1vL)
                                                                 (if g$t$9273$eZ1vL
                                                                   g$t$9273$eZ1vL
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$9265$eZ1vL
                                                                            g$kwd$9271$eZ1vL
                                                                            g$valid-kwds$9264$eZ1vL))))))
                                                              (not (g$id?$7719$eZ1vL
                                                                     g$kwd$9271$eZ1vL)))
                                                           (g$syntax-violation$8109$eZ1vL
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$9271$eZ1vL)
                                                           (if (g$bound-id-member?$7726$eZ1vL
                                                                 g$kwd$9271$eZ1vL
                                                                 g$seen*$9268$eZ1vL)
                                                             (g$syntax-violation$8109$eZ1vL
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$9262$eZ1vL
                                                               g$kwd$9271$eZ1vL)
                                                             (g$f$9266$eZ1vL
                                                               (cdr g$cls*$9267$eZ1vL)
                                                               (cons
                                                                 g$kwd$9271$eZ1vL
                                                                 g$seen*$9268$eZ1vL))))))
                                                      g$ls/false$9270$eZ1vL)
                                                    ((case-lambda
                                                       ((g$t$9274$eZ1vL)
                                                        ((case-lambda
                                                           ((g$ls/false$9275$eZ1vL)
                                                            (if g$ls/false$9275$eZ1vL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$9276$eZ1vL)
                                                                   (g$syntax-violation$8109$eZ1vL
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$9276$eZ1vL)))
                                                                g$ls/false$9275$eZ1vL)
                                                              (g$syntax-violation$8109$eZ1vL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9274$eZ1vL))))
                                                         (g$syntax-dispatch$7997$eZ1vL
                                                           g$t$9274$eZ1vL
                                                           'any))))
                                                     g$t$9269$eZ1vL))))
                                               (g$syntax-dispatch$7997$eZ1vL
                                                 g$t$9269$eZ1vL
                                                 '(any . any)))))
                                           (car g$cls*$9267$eZ1vL))
                                          (void))))))
                            g$f$9266$eZ1vL)
                          g$cls*$9263$eZ1vL
                          '()))))))
          ((case-lambda
             ((g$t$9258$eZ1vL)
              ((case-lambda
                 ((g$ls/false$9259$eZ1vL)
                  (if g$ls/false$9259$eZ1vL
                    (apply
                      (case-lambda
                        ((g$namespec$9260$eZ1vL g$clause*$9261$eZ1vL)
                         (begin
                           (g$verify-clauses$9257$eZ1vL
                             g$x$9240$eZ1vL
                             g$clause*$9261$eZ1vL)
                           (g$do-define-record$9256$eZ1vL
                             g$namespec$9260$eZ1vL
                             g$clause*$9261$eZ1vL))))
                      g$ls/false$9259$eZ1vL)
                    (g$syntax-violation$8109$eZ1vL
                      '#f
                      '"invalid syntax"
                      g$t$9258$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL
                 g$t$9258$eZ1vL
                 '(_ any . each-any)))))
           g$x$9240$eZ1vL)))))
   (g$define-condition-type-macro$7992$eZ1vL
     g$define-condition-type-macro$11495$eZ1vL
     (case-lambda
       ((g$x$9496$eZ1vL)
        (letrec* ((g$mkname$9497$eZ1vL
                    (case-lambda
                      ((g$name$9520$eZ1vL g$suffix$9521$eZ1vL)
                       (g$datum->syntax$8111$eZ1vL
                         g$name$9520$eZ1vL
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$8112$eZ1vL g$name$9520$eZ1vL))
                             g$suffix$9521$eZ1vL)))))))
          ((case-lambda
             ((g$t$9498$eZ1vL)
              ((case-lambda
                 ((g$ls/false$9499$eZ1vL)
                  (if (if g$ls/false$9499$eZ1vL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9500$eZ1vL
                                 g$name$9501$eZ1vL
                                 g$super$9502$eZ1vL
                                 g$constructor$9503$eZ1vL
                                 g$predicate$9504$eZ1vL
                                 g$field*$9505$eZ1vL
                                 g$accessor*$9506$eZ1vL)
                               (if (g$id?$7719$eZ1vL g$name$9501$eZ1vL)
                                 (if (g$id?$7719$eZ1vL g$super$9502$eZ1vL)
                                   (if (g$id?$7719$eZ1vL
                                         g$constructor$9503$eZ1vL)
                                     (if (g$id?$7719$eZ1vL
                                           g$predicate$9504$eZ1vL)
                                       (if (g$for-all$5061$eZ1vL
                                             g$id?$7719$eZ1vL
                                             g$field*$9505$eZ1vL)
                                         (begin
                                           '#f
                                           (g$for-all$5061$eZ1vL
                                             g$id?$7719$eZ1vL
                                             g$accessor*$9506$eZ1vL))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9499$eZ1vL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9507$eZ1vL
                           g$name$9508$eZ1vL
                           g$super$9509$eZ1vL
                           g$constructor$9510$eZ1vL
                           g$predicate$9511$eZ1vL
                           g$field*$9512$eZ1vL
                           g$accessor*$9513$eZ1vL)
                         ((case-lambda
                            ((g$aux-accessor*$9514$eZ1vL)
                             (g$bless$7960$eZ1vL
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9508$eZ1vL
                                         g$constructor$9510$eZ1vL
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9509$eZ1vL)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5063$eZ1vL
                                               (case-lambda
                                                 ((g$field$9515$eZ1vL
                                                    g$aux$9516$eZ1vL)
                                                  (list
                                                    'immutable
                                                    g$field$9515$eZ1vL
                                                    g$aux$9516$eZ1vL)))
                                               g$field*$9512$eZ1vL
                                               g$aux-accessor*$9514$eZ1vL))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9511$eZ1vL
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9508$eZ1vL)))
                                     (g$map$5063$eZ1vL
                                       (case-lambda
                                         ((g$accessor$9517$eZ1vL
                                            g$aux$9518$eZ1vL)
                                          (list
                                            'define
                                            g$accessor$9517$eZ1vL
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$9508$eZ1vL)
                                              g$aux$9518$eZ1vL))))
                                       g$accessor*$9513$eZ1vL
                                       g$aux-accessor*$9514$eZ1vL)))))))
                          (g$map$5063$eZ1vL
                            (case-lambda ((g$x$9519$eZ1vL) (gensym)))
                            g$accessor*$9513$eZ1vL))))
                      g$ls/false$9499$eZ1vL)
                    (g$syntax-violation$8109$eZ1vL
                      '#f
                      '"invalid syntax"
                      g$t$9498$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL
                 g$t$9498$eZ1vL
                 '(any any any any any . #(each (any any)))))))
           g$x$9496$eZ1vL)))))
   (g$incorrect-usage-macro$7993$eZ1vL
     g$incorrect-usage-macro$11496$eZ1vL
     (case-lambda
       ((g$e$9522$eZ1vL)
        (g$syntax-violation$8109$eZ1vL
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9522$eZ1vL))))
   (g$parameterize-macro$7994$eZ1vL
     g$parameterize-macro$11497$eZ1vL
     (case-lambda
       ((g$e$9523$eZ1vL)
        ((case-lambda
           ((g$t$9524$eZ1vL)
            ((case-lambda
               ((g$ls/false$9525$eZ1vL)
                (if g$ls/false$9525$eZ1vL
                  (apply
                    (case-lambda
                      ((g$b$9526$eZ1vL g$b*$9527$eZ1vL)
                       (g$bless$7960$eZ1vL
                         (cons
                           'let
                           (cons '() (cons g$b$9526$eZ1vL g$b*$9527$eZ1vL))))))
                    g$ls/false$9525$eZ1vL)
                  ((case-lambda
                     ((g$t$9528$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$9529$eZ1vL)
                          (if g$ls/false$9529$eZ1vL
                            (apply
                              (case-lambda
                                ((g$olhs*$9530$eZ1vL
                                   g$orhs*$9531$eZ1vL
                                   g$b$9532$eZ1vL
                                   g$b*$9533$eZ1vL)
                                 ((case-lambda
                                    ((g$lhs*$9534$eZ1vL g$rhs*$9535$eZ1vL)
                                     (g$bless$7960$eZ1vL
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9534$eZ1vL
                                             g$rhs*$9535$eZ1vL)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5063$eZ1vL
                                                       (case-lambda
                                                         ((g$lhs$9536$eZ1vL
                                                            g$rhs$9537$eZ1vL)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$9536$eZ1vL)))
                                                            (list
                                                              g$lhs$9536$eZ1vL
                                                              g$rhs$9537$eZ1vL)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$9537$eZ1vL
                                                                '(t))))))
                                                       g$lhs*$9534$eZ1vL
                                                       g$rhs*$9535$eZ1vL)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9532$eZ1vL
                                                         g$b*$9533$eZ1vL)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9530$eZ1vL
                                           g$orhs*$9531$eZ1vL)))))
                                  (g$generate-temporaries$8099$eZ1vL
                                    g$olhs*$9530$eZ1vL)
                                  (g$generate-temporaries$8099$eZ1vL
                                    g$orhs*$9531$eZ1vL))))
                              g$ls/false$9529$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$9528$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$9528$eZ1vL
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9524$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$9524$eZ1vL
               '(_ () any . each-any)))))
         g$e$9523$eZ1vL))))
   (g$foreign-call-transformer$7995$eZ1vL
     g$foreign-call-transformer$11498$eZ1vL
     (case-lambda
       ((g$e$9538$eZ1vL g$r$9539$eZ1vL g$mr$9540$eZ1vL)
        ((case-lambda
           ((g$t$9541$eZ1vL)
            ((case-lambda
               ((g$ls/false$9542$eZ1vL)
                (if g$ls/false$9542$eZ1vL
                  (apply
                    (case-lambda
                      ((g$name$9543$eZ1vL g$arg*$9544$eZ1vL)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$8015$eZ1vL
                             g$name$9543$eZ1vL
                             g$r$9539$eZ1vL
                             g$mr$9540$eZ1vL)
                           (g$chi-expr*$8013$eZ1vL
                             g$arg*$9544$eZ1vL
                             g$r$9539$eZ1vL
                             g$mr$9540$eZ1vL)))))
                    g$ls/false$9542$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$9541$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$9541$eZ1vL
               '(_ any . each-any)))))
         g$e$9538$eZ1vL))))
   (g$convert-pattern$7996$eZ1vL
     g$convert-pattern$11499$eZ1vL
     (case-lambda
       ((g$pattern$9545$eZ1vL g$keys$9546$eZ1vL)
        (letrec* ((g$cvt*$9547$eZ1vL
                    (case-lambda
                      ((g$p*$9627$eZ1vL g$n$9628$eZ1vL g$ids$9629$eZ1vL)
                       (if (null? g$p*$9627$eZ1vL)
                         (values '() g$ids$9629$eZ1vL)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9547$eZ1vL
                                (cdr g$p*$9627$eZ1vL)
                                g$n$9628$eZ1vL
                                g$ids$9629$eZ1vL)))
                           (case-lambda
                             ((g$y$9632$eZ1vL g$ids$9633$eZ1vL)
                              ((case-lambda
                                 ((g$ids$9634$eZ1vL g$y$9635$eZ1vL)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9548$eZ1vL
                                         (car g$p*$9627$eZ1vL)
                                         g$n$9628$eZ1vL
                                         g$ids$9634$eZ1vL)))
                                    (case-lambda
                                      ((g$x$9638$eZ1vL g$ids$9639$eZ1vL)
                                       ((case-lambda
                                          ((g$ids$9640$eZ1vL g$x$9641$eZ1vL)
                                           (values
                                             (cons
                                               g$x$9641$eZ1vL
                                               g$y$9635$eZ1vL)
                                             g$ids$9640$eZ1vL)))
                                        g$ids$9639$eZ1vL
                                        g$x$9638$eZ1vL))))))
                               g$ids$9633$eZ1vL
                               g$y$9632$eZ1vL))))))))
                  (g$cvt$9548$eZ1vL
                    (case-lambda
                      ((g$p$9549$eZ1vL g$n$9550$eZ1vL g$ids$9551$eZ1vL)
                       ((case-lambda
                          ((g$t$9552$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$9553$eZ1vL)
                               (if (if g$ls/false$9553$eZ1vL
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9554$eZ1vL)
                                            (g$id?$7719$eZ1vL g$id$9554$eZ1vL)))
                                         g$ls/false$9553$eZ1vL))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9555$eZ1vL)
                                      (if (g$bound-id-member?$7726$eZ1vL
                                            g$p$9549$eZ1vL
                                            g$keys$9546$eZ1vL)
                                        (values
                                          (vector 'free-id g$p$9549$eZ1vL)
                                          g$ids$9551$eZ1vL)
                                        (if (g$free-id=?$7723$eZ1vL
                                              g$p$9549$eZ1vL
                                              (g$scheme-stx$7940$eZ1vL '_))
                                          (values '_ g$ids$9551$eZ1vL)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9549$eZ1vL
                                                g$n$9550$eZ1vL)
                                              g$ids$9551$eZ1vL))))))
                                   g$ls/false$9553$eZ1vL)
                                 ((case-lambda
                                    ((g$t$9556$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$9557$eZ1vL)
                                         (if (if g$ls/false$9557$eZ1vL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9558$eZ1vL
                                                        g$dots$9559$eZ1vL)
                                                      (g$ellipsis?$7998$eZ1vL
                                                        g$dots$9559$eZ1vL)))
                                                   g$ls/false$9557$eZ1vL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9560$eZ1vL
                                                  g$dots$9561$eZ1vL)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9548$eZ1vL
                                                       g$p$9560$eZ1vL
                                                       (+ g$n$9550$eZ1vL '1)
                                                       g$ids$9551$eZ1vL)))
                                                  (case-lambda
                                                    ((g$p$9564$eZ1vL
                                                       g$ids$9565$eZ1vL)
                                                     ((case-lambda
                                                        ((g$ids$9566$eZ1vL
                                                           g$p$9567$eZ1vL)
                                                         (values
                                                           (if (eq? g$p$9567$eZ1vL
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9567$eZ1vL))
                                                           g$ids$9566$eZ1vL)))
                                                      g$ids$9565$eZ1vL
                                                      g$p$9564$eZ1vL))))))
                                             g$ls/false$9557$eZ1vL)
                                           ((case-lambda
                                              ((g$t$9568$eZ1vL)
                                               ((case-lambda
                                                  ((g$ls/false$9569$eZ1vL)
                                                   (if (if g$ls/false$9569$eZ1vL
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9570$eZ1vL
                                                                  g$dots$9571$eZ1vL
                                                                  g$ys$9572$eZ1vL
                                                                  g$z$9573$eZ1vL)
                                                                (g$ellipsis?$7998$eZ1vL
                                                                  g$dots$9571$eZ1vL)))
                                                             g$ls/false$9569$eZ1vL))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9574$eZ1vL
                                                            g$dots$9575$eZ1vL
                                                            g$ys$9576$eZ1vL
                                                            g$z$9577$eZ1vL)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9548$eZ1vL
                                                                 g$z$9577$eZ1vL
                                                                 g$n$9550$eZ1vL
                                                                 g$ids$9551$eZ1vL)))
                                                            (case-lambda
                                                              ((g$z$9580$eZ1vL
                                                                 g$ids$9581$eZ1vL)
                                                               ((case-lambda
                                                                  ((g$ids$9582$eZ1vL
                                                                     g$z$9583$eZ1vL)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9547$eZ1vL
                                                                          g$ys$9576$eZ1vL
                                                                          g$n$9550$eZ1vL
                                                                          g$ids$9582$eZ1vL)))
                                                                     (case-lambda
                                                                       ((g$ys$9586$eZ1vL
                                                                          g$ids$9587$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$ids$9588$eZ1vL
                                                                              g$ys$9589$eZ1vL)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9548$eZ1vL
                                                                                   g$x$9574$eZ1vL
                                                                                   (+ g$n$9550$eZ1vL
                                                                                      '1)
                                                                                   g$ids$9588$eZ1vL)))
                                                                              (case-lambda
                                                                                ((g$x$9592$eZ1vL
                                                                                   g$ids$9593$eZ1vL)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9594$eZ1vL
                                                                                       g$x$9595$eZ1vL)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9595$eZ1vL
                                                                                         (reverse
                                                                                           g$ys$9589$eZ1vL)
                                                                                         g$z$9583$eZ1vL)
                                                                                       g$ids$9594$eZ1vL)))
                                                                                  g$ids$9593$eZ1vL
                                                                                  g$x$9592$eZ1vL))))))
                                                                         g$ids$9587$eZ1vL
                                                                         g$ys$9586$eZ1vL))))))
                                                                g$ids$9581$eZ1vL
                                                                g$z$9580$eZ1vL))))))
                                                       g$ls/false$9569$eZ1vL)
                                                     ((case-lambda
                                                        ((g$t$9596$eZ1vL)
                                                         ((case-lambda
                                                            ((g$ls/false$9597$eZ1vL)
                                                             (if g$ls/false$9597$eZ1vL
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9598$eZ1vL
                                                                      g$y$9599$eZ1vL)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9548$eZ1vL
                                                                           g$y$9599$eZ1vL
                                                                           g$n$9550$eZ1vL
                                                                           g$ids$9551$eZ1vL)))
                                                                      (case-lambda
                                                                        ((g$y$9602$eZ1vL
                                                                           g$ids$9603$eZ1vL)
                                                                         ((case-lambda
                                                                            ((g$ids$9604$eZ1vL
                                                                               g$y$9605$eZ1vL)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9548$eZ1vL
                                                                                    g$x$9598$eZ1vL
                                                                                    g$n$9550$eZ1vL
                                                                                    g$ids$9604$eZ1vL)))
                                                                               (case-lambda
                                                                                 ((g$x$9608$eZ1vL
                                                                                    g$ids$9609$eZ1vL)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9610$eZ1vL
                                                                                        g$x$9611$eZ1vL)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9611$eZ1vL
                                                                                          g$y$9605$eZ1vL)
                                                                                        g$ids$9610$eZ1vL)))
                                                                                   g$ids$9609$eZ1vL
                                                                                   g$x$9608$eZ1vL))))))
                                                                          g$ids$9603$eZ1vL
                                                                          g$y$9602$eZ1vL))))))
                                                                 g$ls/false$9597$eZ1vL)
                                                               ((case-lambda
                                                                  ((g$t$9612$eZ1vL)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9613$eZ1vL)
                                                                       (if g$ls/false$9613$eZ1vL
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9551$eZ1vL)))
                                                                           g$ls/false$9613$eZ1vL)
                                                                         ((case-lambda
                                                                            ((g$t$9614$eZ1vL)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9615$eZ1vL)
                                                                                 (if (if g$ls/false$9615$eZ1vL
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9616$eZ1vL)
                                                                                              (not (g$stx?$7691$eZ1vL
                                                                                                     g$p$9616$eZ1vL))))
                                                                                           g$ls/false$9615$eZ1vL))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9617$eZ1vL)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9548$eZ1vL
                                                                                               g$p$9617$eZ1vL
                                                                                               g$n$9550$eZ1vL
                                                                                               g$ids$9551$eZ1vL)))
                                                                                          (case-lambda
                                                                                            ((g$p$9620$eZ1vL
                                                                                               g$ids$9621$eZ1vL)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9622$eZ1vL
                                                                                                   g$p$9623$eZ1vL)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9623$eZ1vL)
                                                                                                   g$ids$9622$eZ1vL)))
                                                                                              g$ids$9621$eZ1vL
                                                                                              g$p$9620$eZ1vL))))))
                                                                                     g$ls/false$9615$eZ1vL)
                                                                                   ((case-lambda
                                                                                      ((g$t$9624$eZ1vL)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9625$eZ1vL)
                                                                                           (if g$ls/false$9625$eZ1vL
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9626$eZ1vL)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7730$eZ1vL
                                                                                                        g$datum$9626$eZ1vL))
                                                                                                    g$ids$9551$eZ1vL)))
                                                                                               g$ls/false$9625$eZ1vL)
                                                                                             (g$syntax-violation$8109$eZ1vL
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9624$eZ1vL))))
                                                                                        (g$syntax-dispatch$7997$eZ1vL
                                                                                          g$t$9624$eZ1vL
                                                                                          'any))))
                                                                                    g$t$9614$eZ1vL))))
                                                                              (g$syntax-dispatch$7997$eZ1vL
                                                                                g$t$9614$eZ1vL
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9612$eZ1vL))))
                                                                    (g$syntax-dispatch$7997$eZ1vL
                                                                      g$t$9612$eZ1vL
                                                                      '()))))
                                                                g$t$9596$eZ1vL))))
                                                          (g$syntax-dispatch$7997$eZ1vL
                                                            g$t$9596$eZ1vL
                                                            '(any . any)))))
                                                      g$t$9568$eZ1vL))))
                                                (g$syntax-dispatch$7997$eZ1vL
                                                  g$t$9568$eZ1vL
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9556$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$9556$eZ1vL
                                        '(any any)))))
                                  g$t$9552$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$9552$eZ1vL
                              'any))))
                        g$p$9549$eZ1vL)))))
          (g$cvt$9548$eZ1vL g$pattern$9545$eZ1vL '0 '())))))
   (g$syntax-dispatch$7997$eZ1vL
     g$syntax-dispatch$11500$eZ1vL
     ((case-lambda
        (()
         (letrec* ((g$stx^$9642$eZ1vL
                     (case-lambda
                       ((g$e$9752$eZ1vL
                          g$m*$9753$eZ1vL
                          g$s*$9754$eZ1vL
                          g$ae*$9755$eZ1vL)
                        (if (if (null? g$m*$9753$eZ1vL)
                              (if (null? g$s*$9754$eZ1vL)
                                (begin '#f (null? g$ae*$9755$eZ1vL))
                                '#f)
                              '#f)
                          g$e$9752$eZ1vL
                          (g$mkstx$7707$eZ1vL
                            g$e$9752$eZ1vL
                            g$m*$9753$eZ1vL
                            g$s*$9754$eZ1vL
                            g$ae*$9755$eZ1vL)))))
                   (g$match-each$9643$eZ1vL
                     (case-lambda
                       ((g$e$9736$eZ1vL
                          g$p$9737$eZ1vL
                          g$m*$9738$eZ1vL
                          g$s*$9739$eZ1vL
                          g$ae*$9740$eZ1vL)
                        (if (pair? g$e$9736$eZ1vL)
                          ((case-lambda
                             ((g$first$9741$eZ1vL)
                              (if g$first$9741$eZ1vL
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9742$eZ1vL)
                                      (if g$rest$9742$eZ1vL
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9741$eZ1vL
                                            g$rest$9742$eZ1vL))
                                        '#f)))
                                   (g$match-each$9643$eZ1vL
                                     (cdr g$e$9736$eZ1vL)
                                     g$p$9737$eZ1vL
                                     g$m*$9738$eZ1vL
                                     g$s*$9739$eZ1vL
                                     g$ae*$9740$eZ1vL)))
                                '#f)))
                           (g$match$9649$eZ1vL
                             (car g$e$9736$eZ1vL)
                             g$p$9737$eZ1vL
                             g$m*$9738$eZ1vL
                             g$s*$9739$eZ1vL
                             g$ae*$9740$eZ1vL
                             '()))
                          (if (null? g$e$9736$eZ1vL)
                            '()
                            (if (g$stx?$7691$eZ1vL g$e$9736$eZ1vL)
                              (if (not (g$top-marked?$7657$eZ1vL
                                         g$m*$9738$eZ1vL))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7706$eZ1vL
                                         g$m*$9738$eZ1vL
                                         g$s*$9739$eZ1vL
                                         g$ae*$9740$eZ1vL
                                         g$e$9736$eZ1vL)))
                                    (case-lambda
                                      ((g$m*$9746$eZ1vL
                                         g$s*$9747$eZ1vL
                                         g$ae*$9748$eZ1vL)
                                       ((case-lambda
                                          ((g$ae*$9749$eZ1vL
                                             g$s*$9750$eZ1vL
                                             g$m*$9751$eZ1vL)
                                           (g$match-each$9643$eZ1vL
                                             (g$stx-expr$7693$eZ1vL
                                               g$e$9736$eZ1vL)
                                             g$p$9737$eZ1vL
                                             g$m*$9751$eZ1vL
                                             g$s*$9750$eZ1vL
                                             g$ae*$9749$eZ1vL)))
                                        g$ae*$9748$eZ1vL
                                        g$s*$9747$eZ1vL
                                        g$m*$9746$eZ1vL)))))
                                '#f)
                              (if (annotation? g$e$9736$eZ1vL)
                                (g$match-each$9643$eZ1vL
                                  (annotation-expression g$e$9736$eZ1vL)
                                  g$p$9737$eZ1vL
                                  g$m*$9738$eZ1vL
                                  g$s*$9739$eZ1vL
                                  g$ae*$9740$eZ1vL)
                                '#f)))))))
                   (g$match-each+$9644$eZ1vL
                     (case-lambda
                       ((g$e$9704$eZ1vL
                          g$x-pat$9705$eZ1vL
                          g$y-pat$9706$eZ1vL
                          g$z-pat$9707$eZ1vL
                          g$m*$9708$eZ1vL
                          g$s*$9709$eZ1vL
                          g$ae*$9710$eZ1vL
                          g$r$9711$eZ1vL)
                        ((letrec ((g$f$9712$eZ1vL
                                    (case-lambda
                                      ((g$e$9713$eZ1vL
                                         g$m*$9714$eZ1vL
                                         g$s*$9715$eZ1vL
                                         g$ae*$9716$eZ1vL)
                                       (if (pair? g$e$9713$eZ1vL)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9712$eZ1vL
                                                (cdr g$e$9713$eZ1vL)
                                                g$m*$9714$eZ1vL
                                                g$s*$9715$eZ1vL
                                                g$ae*$9716$eZ1vL)))
                                           (case-lambda
                                             ((g$xr*$9720$eZ1vL
                                                g$y-pat$9721$eZ1vL
                                                g$r$9722$eZ1vL)
                                              ((case-lambda
                                                 ((g$r$9723$eZ1vL
                                                    g$y-pat$9724$eZ1vL
                                                    g$xr*$9725$eZ1vL)
                                                  (if g$r$9723$eZ1vL
                                                    (if (null?
                                                          g$y-pat$9724$eZ1vL)
                                                      ((case-lambda
                                                         ((g$xr$9726$eZ1vL)
                                                          (if g$xr$9726$eZ1vL
                                                            (values
                                                              (cons
                                                                g$xr$9726$eZ1vL
                                                                g$xr*$9725$eZ1vL)
                                                              g$y-pat$9724$eZ1vL
                                                              g$r$9723$eZ1vL)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9649$eZ1vL
                                                         (car g$e$9713$eZ1vL)
                                                         g$x-pat$9705$eZ1vL
                                                         g$m*$9714$eZ1vL
                                                         g$s*$9715$eZ1vL
                                                         g$ae*$9716$eZ1vL
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9724$eZ1vL)
                                                        (g$match$9649$eZ1vL
                                                          (car g$e$9713$eZ1vL)
                                                          (car g$y-pat$9724$eZ1vL)
                                                          g$m*$9714$eZ1vL
                                                          g$s*$9715$eZ1vL
                                                          g$ae*$9716$eZ1vL
                                                          g$r$9723$eZ1vL)))
                                                    (values '#f '#f '#f))))
                                               g$r$9722$eZ1vL
                                               g$y-pat$9721$eZ1vL
                                               g$xr*$9720$eZ1vL))))
                                         (if (g$stx?$7691$eZ1vL g$e$9713$eZ1vL)
                                           (if (g$top-marked?$7657$eZ1vL
                                                 g$m*$9714$eZ1vL)
                                             (values
                                               '()
                                               g$y-pat$9706$eZ1vL
                                               (g$match$9649$eZ1vL
                                                 g$e$9713$eZ1vL
                                                 g$z-pat$9707$eZ1vL
                                                 g$m*$9714$eZ1vL
                                                 g$s*$9715$eZ1vL
                                                 g$ae*$9716$eZ1vL
                                                 g$r$9711$eZ1vL))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7706$eZ1vL
                                                    g$m*$9714$eZ1vL
                                                    g$s*$9715$eZ1vL
                                                    g$ae*$9716$eZ1vL
                                                    g$e$9713$eZ1vL)))
                                               (case-lambda
                                                 ((g$m*$9730$eZ1vL
                                                    g$s*$9731$eZ1vL
                                                    g$ae*$9732$eZ1vL)
                                                  ((case-lambda
                                                     ((g$ae*$9733$eZ1vL
                                                        g$s*$9734$eZ1vL
                                                        g$m*$9735$eZ1vL)
                                                      (g$f$9712$eZ1vL
                                                        (g$stx-expr$7693$eZ1vL
                                                          g$e$9713$eZ1vL)
                                                        g$m*$9735$eZ1vL
                                                        g$s*$9734$eZ1vL
                                                        g$ae*$9733$eZ1vL)))
                                                   g$ae*$9732$eZ1vL
                                                   g$s*$9731$eZ1vL
                                                   g$m*$9730$eZ1vL)))))
                                           (if (annotation? g$e$9713$eZ1vL)
                                             (g$f$9712$eZ1vL
                                               (annotation-expression
                                                 g$e$9713$eZ1vL)
                                               g$m*$9714$eZ1vL
                                               g$s*$9715$eZ1vL
                                               g$ae*$9716$eZ1vL)
                                             (values
                                               '()
                                               g$y-pat$9706$eZ1vL
                                               (g$match$9649$eZ1vL
                                                 g$e$9713$eZ1vL
                                                 g$z-pat$9707$eZ1vL
                                                 g$m*$9714$eZ1vL
                                                 g$s*$9715$eZ1vL
                                                 g$ae*$9716$eZ1vL
                                                 g$r$9711$eZ1vL)))))))))
                           g$f$9712$eZ1vL)
                         g$e$9704$eZ1vL
                         g$m*$9708$eZ1vL
                         g$s*$9709$eZ1vL
                         g$ae*$9710$eZ1vL))))
                   (g$match-each-any$9645$eZ1vL
                     (case-lambda
                       ((g$e$9690$eZ1vL
                          g$m*$9691$eZ1vL
                          g$s*$9692$eZ1vL
                          g$ae*$9693$eZ1vL)
                        (if (pair? g$e$9690$eZ1vL)
                          ((case-lambda
                             ((g$l$9694$eZ1vL)
                              (if g$l$9694$eZ1vL
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9642$eZ1vL
                                      (car g$e$9690$eZ1vL)
                                      g$m*$9691$eZ1vL
                                      g$s*$9692$eZ1vL
                                      g$ae*$9693$eZ1vL)
                                    g$l$9694$eZ1vL))
                                '#f)))
                           (g$match-each-any$9645$eZ1vL
                             (cdr g$e$9690$eZ1vL)
                             g$m*$9691$eZ1vL
                             g$s*$9692$eZ1vL
                             g$ae*$9693$eZ1vL))
                          (if (null? g$e$9690$eZ1vL)
                            '()
                            (if (g$stx?$7691$eZ1vL g$e$9690$eZ1vL)
                              (if (not (g$top-marked?$7657$eZ1vL
                                         g$m*$9691$eZ1vL))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7706$eZ1vL
                                         g$m*$9691$eZ1vL
                                         g$s*$9692$eZ1vL
                                         g$ae*$9693$eZ1vL
                                         g$e$9690$eZ1vL)))
                                    (case-lambda
                                      ((g$m*$9698$eZ1vL
                                         g$s*$9699$eZ1vL
                                         g$ae*$9700$eZ1vL)
                                       ((case-lambda
                                          ((g$ae*$9701$eZ1vL
                                             g$s*$9702$eZ1vL
                                             g$m*$9703$eZ1vL)
                                           (g$match-each-any$9645$eZ1vL
                                             (g$stx-expr$7693$eZ1vL
                                               g$e$9690$eZ1vL)
                                             g$m*$9703$eZ1vL
                                             g$s*$9702$eZ1vL
                                             g$ae*$9701$eZ1vL)))
                                        g$ae*$9700$eZ1vL
                                        g$s*$9699$eZ1vL
                                        g$m*$9698$eZ1vL)))))
                                '#f)
                              (if (annotation? g$e$9690$eZ1vL)
                                (g$match-each-any$9645$eZ1vL
                                  (annotation-expression g$e$9690$eZ1vL)
                                  g$m*$9691$eZ1vL
                                  g$s*$9692$eZ1vL
                                  g$ae*$9693$eZ1vL)
                                '#f)))))))
                   (g$match-empty$9646$eZ1vL
                     (case-lambda
                       ((g$p$9687$eZ1vL g$r$9688$eZ1vL)
                        (if (null? g$p$9687$eZ1vL)
                          g$r$9688$eZ1vL
                          (if (eq? g$p$9687$eZ1vL '_)
                            g$r$9688$eZ1vL
                            (if (eq? g$p$9687$eZ1vL 'any)
                              (cons '() g$r$9688$eZ1vL)
                              (if (pair? g$p$9687$eZ1vL)
                                (g$match-empty$9646$eZ1vL
                                  (car g$p$9687$eZ1vL)
                                  (g$match-empty$9646$eZ1vL
                                    (cdr g$p$9687$eZ1vL)
                                    g$r$9688$eZ1vL))
                                (if (eq? g$p$9687$eZ1vL 'each-any)
                                  (cons '() g$r$9688$eZ1vL)
                                  ((case-lambda
                                     ((g$t$9689$eZ1vL)
                                      (if (g$memv$5056$eZ1vL
                                            g$t$9689$eZ1vL
                                            '(each))
                                        (g$match-empty$9646$eZ1vL
                                          (vector-ref g$p$9687$eZ1vL '1)
                                          g$r$9688$eZ1vL)
                                        (if (g$memv$5056$eZ1vL
                                              g$t$9689$eZ1vL
                                              '(each+))
                                          (g$match-empty$9646$eZ1vL
                                            (vector-ref g$p$9687$eZ1vL '1)
                                            (g$match-empty$9646$eZ1vL
                                              (reverse
                                                (vector-ref g$p$9687$eZ1vL '2))
                                              (g$match-empty$9646$eZ1vL
                                                (vector-ref g$p$9687$eZ1vL '3)
                                                g$r$9688$eZ1vL)))
                                          (if (g$memv$5056$eZ1vL
                                                g$t$9689$eZ1vL
                                                '(free-id atom))
                                            g$r$9688$eZ1vL
                                            (if (g$memv$5056$eZ1vL
                                                  g$t$9689$eZ1vL
                                                  '(scheme-id atom))
                                              g$r$9688$eZ1vL
                                              (if (g$memv$5056$eZ1vL
                                                    g$t$9689$eZ1vL
                                                    '(vector))
                                                (g$match-empty$9646$eZ1vL
                                                  (vector-ref g$p$9687$eZ1vL '1)
                                                  g$r$9688$eZ1vL)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9687$eZ1vL))))))))
                                   (vector-ref g$p$9687$eZ1vL '0))))))))))
                   (g$combine$9647$eZ1vL
                     (case-lambda
                       ((g$r*$9685$eZ1vL g$r$9686$eZ1vL)
                        (if (null? (car g$r*$9685$eZ1vL))
                          g$r$9686$eZ1vL
                          (cons
                            (g$map$5063$eZ1vL car g$r*$9685$eZ1vL)
                            (g$combine$9647$eZ1vL
                              (g$map$5063$eZ1vL cdr g$r*$9685$eZ1vL)
                              g$r$9686$eZ1vL))))))
                   (g$match*$9648$eZ1vL
                     (case-lambda
                       ((g$e$9667$eZ1vL
                          g$p$9668$eZ1vL
                          g$m*$9669$eZ1vL
                          g$s*$9670$eZ1vL
                          g$ae*$9671$eZ1vL
                          g$r$9672$eZ1vL)
                        (if (null? g$p$9668$eZ1vL)
                          (if (null? g$e$9667$eZ1vL)
                            (begin '#f g$r$9672$eZ1vL)
                            '#f)
                          (if (pair? g$p$9668$eZ1vL)
                            (if (pair? g$e$9667$eZ1vL)
                              (begin
                                '#f
                                (g$match$9649$eZ1vL
                                  (car g$e$9667$eZ1vL)
                                  (car g$p$9668$eZ1vL)
                                  g$m*$9669$eZ1vL
                                  g$s*$9670$eZ1vL
                                  g$ae*$9671$eZ1vL
                                  (g$match$9649$eZ1vL
                                    (cdr g$e$9667$eZ1vL)
                                    (cdr g$p$9668$eZ1vL)
                                    g$m*$9669$eZ1vL
                                    g$s*$9670$eZ1vL
                                    g$ae*$9671$eZ1vL
                                    g$r$9672$eZ1vL)))
                              '#f)
                            (if (eq? g$p$9668$eZ1vL 'each-any)
                              ((case-lambda
                                 ((g$l$9673$eZ1vL)
                                  (if g$l$9673$eZ1vL
                                    (begin
                                      '#f
                                      (cons g$l$9673$eZ1vL g$r$9672$eZ1vL))
                                    '#f)))
                               (g$match-each-any$9645$eZ1vL
                                 g$e$9667$eZ1vL
                                 g$m*$9669$eZ1vL
                                 g$s*$9670$eZ1vL
                                 g$ae*$9671$eZ1vL))
                              ((case-lambda
                                 ((g$t$9674$eZ1vL)
                                  (if (g$memv$5056$eZ1vL g$t$9674$eZ1vL '(each))
                                    (if (null? g$e$9667$eZ1vL)
                                      (g$match-empty$9646$eZ1vL
                                        (vector-ref g$p$9668$eZ1vL '1)
                                        g$r$9672$eZ1vL)
                                      ((case-lambda
                                         ((g$r*$9675$eZ1vL)
                                          (if g$r*$9675$eZ1vL
                                            (begin
                                              '#f
                                              (g$combine$9647$eZ1vL
                                                g$r*$9675$eZ1vL
                                                g$r$9672$eZ1vL))
                                            '#f)))
                                       (g$match-each$9643$eZ1vL
                                         g$e$9667$eZ1vL
                                         (vector-ref g$p$9668$eZ1vL '1)
                                         g$m*$9669$eZ1vL
                                         g$s*$9670$eZ1vL
                                         g$ae*$9671$eZ1vL)))
                                    (if (g$memv$5056$eZ1vL
                                          g$t$9674$eZ1vL
                                          '(free-id))
                                      (if (symbol? g$e$9667$eZ1vL)
                                        (if (g$top-marked?$7657$eZ1vL
                                              g$m*$9669$eZ1vL)
                                          (if (g$free-id=?$7723$eZ1vL
                                                (g$stx^$9642$eZ1vL
                                                  g$e$9667$eZ1vL
                                                  g$m*$9669$eZ1vL
                                                  g$s*$9670$eZ1vL
                                                  g$ae*$9671$eZ1vL)
                                                (vector-ref g$p$9668$eZ1vL '1))
                                            (begin '#f g$r$9672$eZ1vL)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5056$eZ1vL
                                            g$t$9674$eZ1vL
                                            '(scheme-id))
                                        (if (symbol? g$e$9667$eZ1vL)
                                          (if (g$top-marked?$7657$eZ1vL
                                                g$m*$9669$eZ1vL)
                                            (if (g$free-id=?$7723$eZ1vL
                                                  (g$stx^$9642$eZ1vL
                                                    g$e$9667$eZ1vL
                                                    g$m*$9669$eZ1vL
                                                    g$s*$9670$eZ1vL
                                                    g$ae*$9671$eZ1vL)
                                                  (g$scheme-stx$7940$eZ1vL
                                                    (vector-ref
                                                      g$p$9668$eZ1vL
                                                      '1)))
                                              (begin '#f g$r$9672$eZ1vL)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5056$eZ1vL
                                              g$t$9674$eZ1vL
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9644$eZ1vL
                                                 g$e$9667$eZ1vL
                                                 (vector-ref g$p$9668$eZ1vL '1)
                                                 (vector-ref g$p$9668$eZ1vL '2)
                                                 (vector-ref g$p$9668$eZ1vL '3)
                                                 g$m*$9669$eZ1vL
                                                 g$s*$9670$eZ1vL
                                                 g$ae*$9671$eZ1vL
                                                 g$r$9672$eZ1vL)))
                                            (case-lambda
                                              ((g$xr*$9679$eZ1vL
                                                 g$y-pat$9680$eZ1vL
                                                 g$r$9681$eZ1vL)
                                               ((case-lambda
                                                  ((g$r$9682$eZ1vL
                                                     g$y-pat$9683$eZ1vL
                                                     g$xr*$9684$eZ1vL)
                                                   (if g$r$9682$eZ1vL
                                                     (if (null?
                                                           g$y-pat$9683$eZ1vL)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9684$eZ1vL)
                                                           (g$match-empty$9646$eZ1vL
                                                             (vector-ref
                                                               g$p$9668$eZ1vL
                                                               '1)
                                                             g$r$9682$eZ1vL)
                                                           (g$combine$9647$eZ1vL
                                                             g$xr*$9684$eZ1vL
                                                             g$r$9682$eZ1vL)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9681$eZ1vL
                                                g$y-pat$9680$eZ1vL
                                                g$xr*$9679$eZ1vL))))
                                          (if (g$memv$5056$eZ1vL
                                                g$t$9674$eZ1vL
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref g$p$9668$eZ1vL '1)
                                                  (g$strip$7729$eZ1vL
                                                    g$e$9667$eZ1vL
                                                    g$m*$9669$eZ1vL))
                                              (begin '#f g$r$9672$eZ1vL)
                                              '#f)
                                            (if (g$memv$5056$eZ1vL
                                                  g$t$9674$eZ1vL
                                                  '(vector))
                                              (if (vector? g$e$9667$eZ1vL)
                                                (begin
                                                  '#f
                                                  (g$match$9649$eZ1vL
                                                    (vector->list
                                                      g$e$9667$eZ1vL)
                                                    (vector-ref
                                                      g$p$9668$eZ1vL
                                                      '1)
                                                    g$m*$9669$eZ1vL
                                                    g$s*$9670$eZ1vL
                                                    g$ae*$9671$eZ1vL
                                                    g$r$9672$eZ1vL))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9668$eZ1vL)))))))))
                               (vector-ref g$p$9668$eZ1vL '0))))))))
                   (g$match$9649$eZ1vL
                     (case-lambda
                       ((g$e$9652$eZ1vL
                          g$p$9653$eZ1vL
                          g$m*$9654$eZ1vL
                          g$s*$9655$eZ1vL
                          g$ae*$9656$eZ1vL
                          g$r$9657$eZ1vL)
                        (if (not g$r$9657$eZ1vL)
                          '#f
                          (if (eq? g$p$9653$eZ1vL '_)
                            g$r$9657$eZ1vL
                            (if (eq? g$p$9653$eZ1vL 'any)
                              (cons
                                (g$stx^$9642$eZ1vL
                                  g$e$9652$eZ1vL
                                  g$m*$9654$eZ1vL
                                  g$s*$9655$eZ1vL
                                  g$ae*$9656$eZ1vL)
                                g$r$9657$eZ1vL)
                              (if (g$stx?$7691$eZ1vL g$e$9652$eZ1vL)
                                (if (not (g$top-marked?$7657$eZ1vL
                                           g$m*$9654$eZ1vL))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7706$eZ1vL
                                           g$m*$9654$eZ1vL
                                           g$s*$9655$eZ1vL
                                           g$ae*$9656$eZ1vL
                                           g$e$9652$eZ1vL)))
                                      (case-lambda
                                        ((g$m*$9661$eZ1vL
                                           g$s*$9662$eZ1vL
                                           g$ae*$9663$eZ1vL)
                                         ((case-lambda
                                            ((g$ae*$9664$eZ1vL
                                               g$s*$9665$eZ1vL
                                               g$m*$9666$eZ1vL)
                                             (g$match$9649$eZ1vL
                                               (g$stx-expr$7693$eZ1vL
                                                 g$e$9652$eZ1vL)
                                               g$p$9653$eZ1vL
                                               g$m*$9666$eZ1vL
                                               g$s*$9665$eZ1vL
                                               g$ae*$9664$eZ1vL
                                               g$r$9657$eZ1vL)))
                                          g$ae*$9663$eZ1vL
                                          g$s*$9662$eZ1vL
                                          g$m*$9661$eZ1vL)))))
                                  '#f)
                                (if (annotation? g$e$9652$eZ1vL)
                                  (g$match$9649$eZ1vL
                                    (annotation-expression g$e$9652$eZ1vL)
                                    g$p$9653$eZ1vL
                                    g$m*$9654$eZ1vL
                                    g$s*$9655$eZ1vL
                                    g$ae*$9656$eZ1vL
                                    g$r$9657$eZ1vL)
                                  (g$match*$9648$eZ1vL
                                    g$e$9652$eZ1vL
                                    g$p$9653$eZ1vL
                                    g$m*$9654$eZ1vL
                                    g$s*$9655$eZ1vL
                                    g$ae*$9656$eZ1vL
                                    g$r$9657$eZ1vL))))))))))
           (case-lambda
             ((g$e$9650$eZ1vL g$p$9651$eZ1vL)
              (g$match$9649$eZ1vL
                g$e$9650$eZ1vL
                g$p$9651$eZ1vL
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7998$eZ1vL
     g$ellipsis?$11501$eZ1vL
     (case-lambda
       ((g$x$9756$eZ1vL)
        (if (g$id?$7719$eZ1vL g$x$9756$eZ1vL)
          (begin
            '#f
            (g$free-id=?$7723$eZ1vL
              g$x$9756$eZ1vL
              (g$scheme-stx$7940$eZ1vL '...)))
          '#f))))
   (g$underscore?$7999$eZ1vL
     g$underscore?$11502$eZ1vL
     (case-lambda
       ((g$x$9757$eZ1vL)
        (if (g$id?$7719$eZ1vL g$x$9757$eZ1vL)
          (begin
            '#f
            (g$free-id=?$7723$eZ1vL
              g$x$9757$eZ1vL
              (g$scheme-stx$7940$eZ1vL '_)))
          '#f))))
   (g$verify-literals$8000$eZ1vL
     g$verify-literals$11503$eZ1vL
     (case-lambda
       ((g$lits$9758$eZ1vL g$expr$9759$eZ1vL)
        (g$for-each$5064$eZ1vL
          (case-lambda
            ((g$x$9760$eZ1vL)
             (if ((case-lambda
                    ((g$t$9761$eZ1vL)
                     (if g$t$9761$eZ1vL
                       g$t$9761$eZ1vL
                       ((case-lambda
                          ((g$t$9762$eZ1vL)
                           (if g$t$9762$eZ1vL
                             g$t$9762$eZ1vL
                             (begin
                               '#f
                               (g$underscore?$7999$eZ1vL g$x$9760$eZ1vL)))))
                        (g$ellipsis?$7998$eZ1vL g$x$9760$eZ1vL)))))
                  (not (g$id?$7719$eZ1vL g$x$9760$eZ1vL)))
               (g$syntax-violation$8109$eZ1vL
                 '#f
                 '"invalid literal"
                 g$expr$9759$eZ1vL
                 g$x$9760$eZ1vL)
               (void))))
          g$lits$9758$eZ1vL))))
   (g$syntax-case-transformer$8001$eZ1vL
     g$syntax-case-transformer$11504$eZ1vL
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9763$eZ1vL
                     (case-lambda
                       ((g$pvars$9820$eZ1vL
                          g$expr$9821$eZ1vL
                          g$y$9822$eZ1vL
                          g$r$9823$eZ1vL
                          g$mr$9824$eZ1vL)
                        ((case-lambda
                           ((g$ids$9825$eZ1vL g$levels$9826$eZ1vL)
                            ((case-lambda
                               ((g$labels$9827$eZ1vL g$new-vars$9828$eZ1vL)
                                ((case-lambda
                                   ((g$body$9829$eZ1vL)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7645$eZ1vL
                                        '#f
                                        g$new-vars$9828$eZ1vL
                                        g$body$9829$eZ1vL)
                                      g$y$9822$eZ1vL)))
                                 (g$chi-expr$8015$eZ1vL
                                   (g$add-subst$7709$eZ1vL
                                     (g$make-full-rib$7687$eZ1vL
                                       g$ids$9825$eZ1vL
                                       g$labels$9827$eZ1vL)
                                     g$expr$9821$eZ1vL)
                                   (append
                                     (g$map$5063$eZ1vL
                                       (case-lambda
                                         ((g$label$9830$eZ1vL
                                            g$var$9831$eZ1vL
                                            g$level$9832$eZ1vL)
                                          (cons
                                            g$label$9830$eZ1vL
                                            (g$make-binding$7735$eZ1vL
                                              'syntax
                                              (cons
                                                g$var$9831$eZ1vL
                                                g$level$9832$eZ1vL)))))
                                       g$labels$9827$eZ1vL
                                       g$new-vars$9828$eZ1vL
                                       (g$map$5063$eZ1vL
                                         cdr
                                         g$pvars$9820$eZ1vL))
                                     g$r$9823$eZ1vL)
                                   g$mr$9824$eZ1vL))))
                             (g$map$5063$eZ1vL
                               g$gen-label$7660$eZ1vL
                               g$ids$9825$eZ1vL)
                             (g$map$5063$eZ1vL
                               g$gen-lexical$7658$eZ1vL
                               g$ids$9825$eZ1vL))))
                         (g$map$5063$eZ1vL car g$pvars$9820$eZ1vL)
                         (g$map$5063$eZ1vL cdr g$pvars$9820$eZ1vL)))))
                   (g$invalid-ids-error$9764$eZ1vL
                     (case-lambda
                       ((g$id*$9814$eZ1vL g$e$9815$eZ1vL g$class$9816$eZ1vL)
                        ((letrec ((g$find$9817$eZ1vL
                                    (case-lambda
                                      ((g$id*$9818$eZ1vL g$ok*$9819$eZ1vL)
                                       (if (null? g$id*$9818$eZ1vL)
                                         (g$syntax-violation$8109$eZ1vL
                                           '#f
                                           '"invalid syntax"
                                           g$e$9815$eZ1vL)
                                         (if (g$id?$7719$eZ1vL
                                               (car g$id*$9818$eZ1vL))
                                           (if (g$bound-id-member?$7726$eZ1vL
                                                 (car g$id*$9818$eZ1vL)
                                                 g$ok*$9819$eZ1vL)
                                             (g$syntax-error$8106$eZ1vL
                                               (car g$id*$9818$eZ1vL)
                                               '"duplicate "
                                               g$class$9816$eZ1vL)
                                             (g$find$9817$eZ1vL
                                               (cdr g$id*$9818$eZ1vL)
                                               (cons
                                                 (car g$id*$9818$eZ1vL)
                                                 g$ok*$9819$eZ1vL)))
                                           (g$syntax-error$8106$eZ1vL
                                             (car g$id*$9818$eZ1vL)
                                             '"invalid "
                                             g$class$9816$eZ1vL)))))))
                           g$find$9817$eZ1vL)
                         g$id*$9814$eZ1vL
                         '()))))
                   (g$gen-clause$9765$eZ1vL
                     (case-lambda
                       ((g$x$9794$eZ1vL
                          g$keys$9795$eZ1vL
                          g$clauses$9796$eZ1vL
                          g$r$9797$eZ1vL
                          g$mr$9798$eZ1vL
                          g$pat$9799$eZ1vL
                          g$fender$9800$eZ1vL
                          g$expr$9801$eZ1vL)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7996$eZ1vL
                               g$pat$9799$eZ1vL
                               g$keys$9795$eZ1vL)))
                          (case-lambda
                            ((g$p$9804$eZ1vL g$pvars$9805$eZ1vL)
                             ((case-lambda
                                ((g$pvars$9806$eZ1vL g$p$9807$eZ1vL)
                                 (if (not (g$distinct-bound-ids?$7725$eZ1vL
                                            (g$map$5063$eZ1vL
                                              car
                                              g$pvars$9806$eZ1vL)))
                                   (g$invalid-ids-error$9764$eZ1vL
                                     (g$map$5063$eZ1vL car g$pvars$9806$eZ1vL)
                                     g$pat$9799$eZ1vL
                                     '"pattern variable")
                                   (if (not (g$for-all$5061$eZ1vL
                                              (case-lambda
                                                ((g$x$9808$eZ1vL)
                                                 (not (g$ellipsis?$7998$eZ1vL
                                                        (car g$x$9808$eZ1vL)))))
                                              g$pvars$9806$eZ1vL))
                                     (g$syntax-violation$8109$eZ1vL
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9799$eZ1vL)
                                     ((case-lambda
                                        ((g$y$9809$eZ1vL)
                                         ((case-lambda
                                            ((g$test$9810$eZ1vL)
                                             ((case-lambda
                                                ((g$conseq$9811$eZ1vL)
                                                 ((case-lambda
                                                    ((g$altern$9812$eZ1vL)
                                                     (list
                                                       (g$build-lambda$7645$eZ1vL
                                                         '#f
                                                         (list g$y$9809$eZ1vL)
                                                         (list
                                                           'if
                                                           g$test$9810$eZ1vL
                                                           g$conseq$9811$eZ1vL
                                                           g$altern$9812$eZ1vL))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9794$eZ1vL
                                                         (list
                                                           'quote
                                                           g$p$9807$eZ1vL)))))
                                                  (g$gen-syntax-case$9766$eZ1vL
                                                    g$x$9794$eZ1vL
                                                    g$keys$9795$eZ1vL
                                                    g$clauses$9796$eZ1vL
                                                    g$r$9797$eZ1vL
                                                    g$mr$9798$eZ1vL))))
                                              (g$build-dispatch-call$9763$eZ1vL
                                                g$pvars$9806$eZ1vL
                                                g$expr$9801$eZ1vL
                                                g$y$9809$eZ1vL
                                                g$r$9797$eZ1vL
                                                g$mr$9798$eZ1vL))))
                                          (if (eq? g$fender$9800$eZ1vL '#t)
                                            g$y$9809$eZ1vL
                                            ((case-lambda
                                               ((g$call$9813$eZ1vL)
                                                (list
                                                  'if
                                                  g$y$9809$eZ1vL
                                                  g$call$9813$eZ1vL
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9763$eZ1vL
                                               g$pvars$9806$eZ1vL
                                               g$fender$9800$eZ1vL
                                               g$y$9809$eZ1vL
                                               g$r$9797$eZ1vL
                                               g$mr$9798$eZ1vL))))))
                                      (g$gen-lexical$7658$eZ1vL 'tmp))))))
                              g$pvars$9805$eZ1vL
                              g$p$9804$eZ1vL)))))))
                   (g$gen-syntax-case$9766$eZ1vL
                     (case-lambda
                       ((g$x$9777$eZ1vL
                          g$keys$9778$eZ1vL
                          g$clauses$9779$eZ1vL
                          g$r$9780$eZ1vL
                          g$mr$9781$eZ1vL)
                        (if (null? g$clauses$9779$eZ1vL)
                          (list '(primitive syntax-error) g$x$9777$eZ1vL)
                          ((case-lambda
                             ((g$t$9782$eZ1vL)
                              ((case-lambda
                                 ((g$ls/false$9783$eZ1vL)
                                  (if g$ls/false$9783$eZ1vL
                                    (apply
                                      (case-lambda
                                        ((g$pat$9784$eZ1vL g$expr$9785$eZ1vL)
                                         (if (if (g$id?$7719$eZ1vL
                                                   g$pat$9784$eZ1vL)
                                               (if (not (g$bound-id-member?$7726$eZ1vL
                                                          g$pat$9784$eZ1vL
                                                          g$keys$9778$eZ1vL))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7998$eZ1vL
                                                          g$pat$9784$eZ1vL)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7723$eZ1vL
                                                 g$pat$9784$eZ1vL
                                                 (g$scheme-stx$7940$eZ1vL '_))
                                             (g$chi-expr$8015$eZ1vL
                                               g$expr$9785$eZ1vL
                                               g$r$9780$eZ1vL
                                               g$mr$9781$eZ1vL)
                                             ((case-lambda
                                                ((g$lab$9786$eZ1vL
                                                   g$lex$9787$eZ1vL)
                                                 ((case-lambda
                                                    ((g$body$9788$eZ1vL)
                                                     (list
                                                       (g$build-lambda$7645$eZ1vL
                                                         '#f
                                                         (list g$lex$9787$eZ1vL)
                                                         g$body$9788$eZ1vL)
                                                       g$x$9777$eZ1vL)))
                                                  (g$chi-expr$8015$eZ1vL
                                                    (g$add-subst$7709$eZ1vL
                                                      (g$make-full-rib$7687$eZ1vL
                                                        (list g$pat$9784$eZ1vL)
                                                        (list g$lab$9786$eZ1vL))
                                                      g$expr$9785$eZ1vL)
                                                    (cons
                                                      (cons
                                                        g$lab$9786$eZ1vL
                                                        (g$make-binding$7735$eZ1vL
                                                          'syntax
                                                          (cons
                                                            g$lex$9787$eZ1vL
                                                            '0)))
                                                      g$r$9780$eZ1vL)
                                                    g$mr$9781$eZ1vL))))
                                              (g$gen-label$7660$eZ1vL
                                                g$pat$9784$eZ1vL)
                                              (g$gen-lexical$7658$eZ1vL
                                                g$pat$9784$eZ1vL)))
                                           (g$gen-clause$9765$eZ1vL
                                             g$x$9777$eZ1vL
                                             g$keys$9778$eZ1vL
                                             (cdr g$clauses$9779$eZ1vL)
                                             g$r$9780$eZ1vL
                                             g$mr$9781$eZ1vL
                                             g$pat$9784$eZ1vL
                                             '#t
                                             g$expr$9785$eZ1vL))))
                                      g$ls/false$9783$eZ1vL)
                                    ((case-lambda
                                       ((g$t$9789$eZ1vL)
                                        ((case-lambda
                                           ((g$ls/false$9790$eZ1vL)
                                            (if g$ls/false$9790$eZ1vL
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9791$eZ1vL
                                                     g$fender$9792$eZ1vL
                                                     g$expr$9793$eZ1vL)
                                                   (g$gen-clause$9765$eZ1vL
                                                     g$x$9777$eZ1vL
                                                     g$keys$9778$eZ1vL
                                                     (cdr g$clauses$9779$eZ1vL)
                                                     g$r$9780$eZ1vL
                                                     g$mr$9781$eZ1vL
                                                     g$pat$9791$eZ1vL
                                                     g$fender$9792$eZ1vL
                                                     g$expr$9793$eZ1vL)))
                                                g$ls/false$9790$eZ1vL)
                                              (g$syntax-violation$8109$eZ1vL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9789$eZ1vL))))
                                         (g$syntax-dispatch$7997$eZ1vL
                                           g$t$9789$eZ1vL
                                           '(any any any)))))
                                     g$t$9782$eZ1vL))))
                               (g$syntax-dispatch$7997$eZ1vL
                                 g$t$9782$eZ1vL
                                 '(any any)))))
                           (car g$clauses$9779$eZ1vL)))))))
           (case-lambda
             ((g$e$9767$eZ1vL g$r$9768$eZ1vL g$mr$9769$eZ1vL)
              ((case-lambda
                 ((g$t$9770$eZ1vL)
                  ((case-lambda
                     ((g$ls/false$9771$eZ1vL)
                      (if g$ls/false$9771$eZ1vL
                        (apply
                          (case-lambda
                            ((g$expr$9772$eZ1vL
                               g$keys$9773$eZ1vL
                               g$clauses$9774$eZ1vL)
                             (begin
                               (g$verify-literals$8000$eZ1vL
                                 g$keys$9773$eZ1vL
                                 g$e$9767$eZ1vL)
                               ((case-lambda
                                  ((g$x$9775$eZ1vL)
                                   ((case-lambda
                                      ((g$body$9776$eZ1vL)
                                       (list
                                         (g$build-lambda$7645$eZ1vL
                                           '#f
                                           (list g$x$9775$eZ1vL)
                                           g$body$9776$eZ1vL)
                                         (g$chi-expr$8015$eZ1vL
                                           g$expr$9772$eZ1vL
                                           g$r$9768$eZ1vL
                                           g$mr$9769$eZ1vL))))
                                    (g$gen-syntax-case$9766$eZ1vL
                                      g$x$9775$eZ1vL
                                      g$keys$9773$eZ1vL
                                      g$clauses$9774$eZ1vL
                                      g$r$9768$eZ1vL
                                      g$mr$9769$eZ1vL))))
                                (g$gen-lexical$7658$eZ1vL 'tmp)))))
                          g$ls/false$9771$eZ1vL)
                        (g$syntax-violation$8109$eZ1vL
                          '#f
                          '"invalid syntax"
                          g$t$9770$eZ1vL))))
                   (g$syntax-dispatch$7997$eZ1vL
                     g$t$9770$eZ1vL
                     '(_ any each-any . each-any)))))
               g$e$9767$eZ1vL))))))))
   (g$ellipsis-map$8002$eZ1vL
     g$ellipsis-map$11505$eZ1vL
     (case-lambda
       ((g$proc$9833$eZ1vL g$ls$9834$eZ1vL . g$ls*$9835$eZ1vL)
        (letrec* ((g$who$9836$eZ1vL '...))
          (begin
            (if (not (list? g$ls$9834$eZ1vL))
              (assertion-violation
                g$who$9836$eZ1vL
                '"not a list"
                g$ls$9834$eZ1vL)
              (void))
            (if (not (null? g$ls*$9835$eZ1vL))
              ((case-lambda
                 ((g$n$9837$eZ1vL)
                  (g$for-each$5064$eZ1vL
                    (case-lambda
                      ((g$x$9838$eZ1vL)
                       (begin
                         (if (not (list? g$x$9838$eZ1vL))
                           (assertion-violation
                             g$who$9836$eZ1vL
                             '"not a list"
                             g$x$9838$eZ1vL)
                           (void))
                         (if (not (= (length g$x$9838$eZ1vL) g$n$9837$eZ1vL))
                           (assertion-violation
                             g$who$9836$eZ1vL
                             '"length mismatch"
                             g$ls$9834$eZ1vL
                             g$x$9838$eZ1vL)
                           (void)))))
                    g$ls*$9835$eZ1vL)))
               (length g$ls$9834$eZ1vL))
              (void))
            (apply
              g$map$5063$eZ1vL
              g$proc$9833$eZ1vL
              g$ls$9834$eZ1vL
              g$ls*$9835$eZ1vL))))))
   (g$syntax-transformer$8003$eZ1vL
     g$syntax-transformer$11506$eZ1vL
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9839$eZ1vL
                     (case-lambda
                       ((g$src$9899$eZ1vL
                          g$e$9900$eZ1vL
                          g$r$9901$eZ1vL
                          g$maps$9902$eZ1vL
                          g$ellipsis?$9903$eZ1vL
                          g$vec?$9904$eZ1vL)
                        ((case-lambda
                           ((g$t$9905$eZ1vL)
                            ((case-lambda
                               ((g$ls/false$9906$eZ1vL)
                                (if (if g$ls/false$9906$eZ1vL
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9907$eZ1vL)
                                             (g$ellipsis?$9903$eZ1vL
                                               g$dots$9907$eZ1vL)))
                                          g$ls/false$9906$eZ1vL))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9908$eZ1vL)
                                       (g$syntax-violation$8109$eZ1vL
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9899$eZ1vL)))
                                    g$ls/false$9906$eZ1vL)
                                  ((case-lambda
                                     ((g$t$9909$eZ1vL)
                                      ((case-lambda
                                         ((g$ls/false$9910$eZ1vL)
                                          (if (if g$ls/false$9910$eZ1vL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9911$eZ1vL)
                                                       (g$id?$7719$eZ1vL
                                                         g$id$9911$eZ1vL)))
                                                    g$ls/false$9910$eZ1vL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9912$eZ1vL)
                                                 ((case-lambda
                                                    ((g$label$9913$eZ1vL)
                                                     ((case-lambda
                                                        ((g$b$9914$eZ1vL)
                                                         (if (eq? (g$binding-type$7736$eZ1vL
                                                                    g$b$9914$eZ1vL)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$9917$eZ1vL)
                                                                    (g$gen-ref$9840$eZ1vL
                                                                      g$src$9899$eZ1vL
                                                                      (car g$var.lev$9917$eZ1vL)
                                                                      (cdr g$var.lev$9917$eZ1vL)
                                                                      g$maps$9902$eZ1vL)))
                                                                 (g$binding-value$7737$eZ1vL
                                                                   g$b$9914$eZ1vL))))
                                                             (case-lambda
                                                               ((g$var$9918$eZ1vL
                                                                  g$maps$9919$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$maps$9920$eZ1vL
                                                                      g$var$9921$eZ1vL)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$9921$eZ1vL)
                                                                      g$maps$9920$eZ1vL)))
                                                                 g$maps$9919$eZ1vL
                                                                 g$var$9918$eZ1vL))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$9900$eZ1vL)
                                                             g$maps$9902$eZ1vL))))
                                                      (g$label->binding$7734$eZ1vL
                                                        g$label$9913$eZ1vL
                                                        g$r$9901$eZ1vL))))
                                                  (g$id->label$7732$eZ1vL
                                                    g$e$9900$eZ1vL))))
                                              g$ls/false$9910$eZ1vL)
                                            ((case-lambda
                                               ((g$t$9922$eZ1vL)
                                                ((case-lambda
                                                   ((g$ls/false$9923$eZ1vL)
                                                    (if (if g$ls/false$9923$eZ1vL
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9924$eZ1vL
                                                                   g$e$9925$eZ1vL)
                                                                 (g$ellipsis?$9903$eZ1vL
                                                                   g$dots$9924$eZ1vL)))
                                                              g$ls/false$9923$eZ1vL))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9926$eZ1vL
                                                             g$e$9927$eZ1vL)
                                                           (if g$vec?$9904$eZ1vL
                                                             (g$syntax-violation$8109$eZ1vL
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9899$eZ1vL)
                                                             (g$gen-syntax$9839$eZ1vL
                                                               g$src$9899$eZ1vL
                                                               g$e$9927$eZ1vL
                                                               g$r$9901$eZ1vL
                                                               g$maps$9902$eZ1vL
                                                               (case-lambda
                                                                 ((g$x$9928$eZ1vL)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9923$eZ1vL)
                                                      ((case-lambda
                                                         ((g$t$9929$eZ1vL)
                                                          ((case-lambda
                                                             ((g$ls/false$9930$eZ1vL)
                                                              (if (if g$ls/false$9930$eZ1vL
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9931$eZ1vL
                                                                             g$dots$9932$eZ1vL
                                                                             g$y$9933$eZ1vL)
                                                                           (g$ellipsis?$9903$eZ1vL
                                                                             g$dots$9932$eZ1vL)))
                                                                        g$ls/false$9930$eZ1vL))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9934$eZ1vL
                                                                       g$dots$9935$eZ1vL
                                                                       g$y$9936$eZ1vL)
                                                                     ((letrec ((g$f$9937$eZ1vL
                                                                                 (case-lambda
                                                                                   ((g$y$9938$eZ1vL
                                                                                      g$k$9939$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$t$9940$eZ1vL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9941$eZ1vL)
                                                                                            (if g$ls/false$9941$eZ1vL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9939$eZ1vL
                                                                                                     g$maps$9902$eZ1vL)))
                                                                                                g$ls/false$9941$eZ1vL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9942$eZ1vL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9943$eZ1vL)
                                                                                                      (if (if g$ls/false$9943$eZ1vL
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9944$eZ1vL
                                                                                                                     g$y$9945$eZ1vL)
                                                                                                                   (g$ellipsis?$9903$eZ1vL
                                                                                                                     g$dots$9944$eZ1vL)))
                                                                                                                g$ls/false$9943$eZ1vL))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9946$eZ1vL
                                                                                                               g$y$9947$eZ1vL)
                                                                                                             (g$f$9937$eZ1vL
                                                                                                               g$y$9947$eZ1vL
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9948$eZ1vL)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9939$eZ1vL
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9948$eZ1vL))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9951$eZ1vL
                                                                                                                         g$maps$9952$eZ1vL)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9953$eZ1vL
                                                                                                                             g$x$9954$eZ1vL)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9953$eZ1vL))
                                                                                                                             (g$syntax-violation$8109$eZ1vL
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9899$eZ1vL)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9842$eZ1vL
                                                                                                                                 g$x$9954$eZ1vL
                                                                                                                                 (car g$maps$9953$eZ1vL))
                                                                                                                               (cdr g$maps$9953$eZ1vL)))))
                                                                                                                        g$maps$9952$eZ1vL
                                                                                                                        g$x$9951$eZ1vL)))))))))
                                                                                                          g$ls/false$9943$eZ1vL)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9955$eZ1vL)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9956$eZ1vL)
                                                                                                                (if g$ls/false$9956$eZ1vL
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9839$eZ1vL
                                                                                                                              g$src$9899$eZ1vL
                                                                                                                              g$y$9938$eZ1vL
                                                                                                                              g$r$9901$eZ1vL
                                                                                                                              g$maps$9902$eZ1vL
                                                                                                                              g$ellipsis?$9903$eZ1vL
                                                                                                                              g$vec?$9904$eZ1vL)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9959$eZ1vL
                                                                                                                              g$maps$9960$eZ1vL)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9961$eZ1vL
                                                                                                                                  g$y$9962$eZ1vL)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9939$eZ1vL
                                                                                                                                       g$maps$9961$eZ1vL)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9965$eZ1vL
                                                                                                                                       g$maps$9966$eZ1vL)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9967$eZ1vL
                                                                                                                                           g$x$9968$eZ1vL)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9841$eZ1vL
                                                                                                                                             g$x$9968$eZ1vL
                                                                                                                                             g$y$9962$eZ1vL)
                                                                                                                                           g$maps$9967$eZ1vL)))
                                                                                                                                      g$maps$9966$eZ1vL
                                                                                                                                      g$x$9965$eZ1vL))))))
                                                                                                                             g$maps$9960$eZ1vL
                                                                                                                             g$y$9959$eZ1vL))))))
                                                                                                                    g$ls/false$9956$eZ1vL)
                                                                                                                  (g$syntax-violation$8109$eZ1vL
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9955$eZ1vL))))
                                                                                                             (g$syntax-dispatch$7997$eZ1vL
                                                                                                               g$t$9955$eZ1vL
                                                                                                               '_))))
                                                                                                         g$t$9942$eZ1vL))))
                                                                                                   (g$syntax-dispatch$7997$eZ1vL
                                                                                                     g$t$9942$eZ1vL
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9940$eZ1vL))))
                                                                                         (g$syntax-dispatch$7997$eZ1vL
                                                                                           g$t$9940$eZ1vL
                                                                                           '()))))
                                                                                     g$y$9938$eZ1vL)))))
                                                                        g$f$9937$eZ1vL)
                                                                      g$y$9936$eZ1vL
                                                                      (case-lambda
                                                                        ((g$maps$9969$eZ1vL)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9839$eZ1vL
                                                                                g$src$9899$eZ1vL
                                                                                g$x$9934$eZ1vL
                                                                                g$r$9901$eZ1vL
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9969$eZ1vL)
                                                                                g$ellipsis?$9903$eZ1vL
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9972$eZ1vL
                                                                                g$maps$9973$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$maps$9974$eZ1vL
                                                                                    g$x$9975$eZ1vL)
                                                                                  (if (null?
                                                                                        (car g$maps$9974$eZ1vL))
                                                                                    (g$syntax-violation$8109$eZ1vL
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9899$eZ1vL)
                                                                                    (values
                                                                                      (g$gen-map$9843$eZ1vL
                                                                                        g$x$9975$eZ1vL
                                                                                        (car g$maps$9974$eZ1vL))
                                                                                      (cdr g$maps$9974$eZ1vL)))))
                                                                               g$maps$9973$eZ1vL
                                                                               g$x$9972$eZ1vL)))))))))
                                                                  g$ls/false$9930$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$t$9976$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9977$eZ1vL)
                                                                        (if g$ls/false$9977$eZ1vL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9978$eZ1vL
                                                                                 g$y$9979$eZ1vL)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9839$eZ1vL
                                                                                      g$src$9899$eZ1vL
                                                                                      g$x$9978$eZ1vL
                                                                                      g$r$9901$eZ1vL
                                                                                      g$maps$9902$eZ1vL
                                                                                      g$ellipsis?$9903$eZ1vL
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9982$eZ1vL
                                                                                      g$maps$9983$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9984$eZ1vL
                                                                                          g$xnew$9985$eZ1vL)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9839$eZ1vL
                                                                                               g$src$9899$eZ1vL
                                                                                               g$y$9979$eZ1vL
                                                                                               g$r$9901$eZ1vL
                                                                                               g$maps$9984$eZ1vL
                                                                                               g$ellipsis?$9903$eZ1vL
                                                                                               g$vec?$9904$eZ1vL)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9988$eZ1vL
                                                                                               g$maps$9989$eZ1vL)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9990$eZ1vL
                                                                                                   g$ynew$9991$eZ1vL)
                                                                                                 (values
                                                                                                   (g$gen-cons$9844$eZ1vL
                                                                                                     g$e$9900$eZ1vL
                                                                                                     g$x$9978$eZ1vL
                                                                                                     g$y$9979$eZ1vL
                                                                                                     g$xnew$9985$eZ1vL
                                                                                                     g$ynew$9991$eZ1vL)
                                                                                                   g$maps$9990$eZ1vL)))
                                                                                              g$maps$9989$eZ1vL
                                                                                              g$ynew$9988$eZ1vL))))))
                                                                                     g$maps$9983$eZ1vL
                                                                                     g$xnew$9982$eZ1vL))))))
                                                                            g$ls/false$9977$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$t$9992$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9993$eZ1vL)
                                                                                  (if g$ls/false$9993$eZ1vL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9994$eZ1vL)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9839$eZ1vL
                                                                                                g$src$9899$eZ1vL
                                                                                                g$ls$9994$eZ1vL
                                                                                                g$r$9901$eZ1vL
                                                                                                g$maps$9902$eZ1vL
                                                                                                g$ellipsis?$9903$eZ1vL
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9997$eZ1vL
                                                                                                g$maps$9998$eZ1vL)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9999$eZ1vL
                                                                                                    g$lsnew$10000$eZ1vL)
                                                                                                  (values
                                                                                                    (g$gen-vector$9845$eZ1vL
                                                                                                      g$e$9900$eZ1vL
                                                                                                      g$ls$9994$eZ1vL
                                                                                                      g$lsnew$10000$eZ1vL)
                                                                                                    g$maps$9999$eZ1vL)))
                                                                                               g$maps$9998$eZ1vL
                                                                                               g$lsnew$9997$eZ1vL))))))
                                                                                      g$ls/false$9993$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$t$10001$eZ1vL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10002$eZ1vL)
                                                                                            (if g$ls/false$10002$eZ1vL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9900$eZ1vL)
                                                                                                     g$maps$9902$eZ1vL)))
                                                                                                g$ls/false$10002$eZ1vL)
                                                                                              (g$syntax-violation$8109$eZ1vL
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10001$eZ1vL))))
                                                                                         (g$syntax-dispatch$7997$eZ1vL
                                                                                           g$t$10001$eZ1vL
                                                                                           '_))))
                                                                                     g$t$9992$eZ1vL))))
                                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                                 g$t$9992$eZ1vL
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9976$eZ1vL))))
                                                                     (g$syntax-dispatch$7997$eZ1vL
                                                                       g$t$9976$eZ1vL
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9929$eZ1vL))))
                                                           (g$syntax-dispatch$7997$eZ1vL
                                                             g$t$9929$eZ1vL
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9922$eZ1vL))))
                                                 (g$syntax-dispatch$7997$eZ1vL
                                                   g$t$9922$eZ1vL
                                                   '(any any)))))
                                             g$t$9909$eZ1vL))))
                                       (g$syntax-dispatch$7997$eZ1vL
                                         g$t$9909$eZ1vL
                                         'any))))
                                   g$t$9905$eZ1vL))))
                             (g$syntax-dispatch$7997$eZ1vL
                               g$t$9905$eZ1vL
                               'any))))
                         g$e$9900$eZ1vL))))
                   (g$gen-ref$9840$eZ1vL
                     (case-lambda
                       ((g$src$9886$eZ1vL
                          g$var$9887$eZ1vL
                          g$level$9888$eZ1vL
                          g$maps$9889$eZ1vL)
                        (if (= g$level$9888$eZ1vL '0)
                          (values g$var$9887$eZ1vL g$maps$9889$eZ1vL)
                          (if (null? g$maps$9889$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9886$eZ1vL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9840$eZ1vL
                                   g$src$9886$eZ1vL
                                   g$var$9887$eZ1vL
                                   (- g$level$9888$eZ1vL '1)
                                   (cdr g$maps$9889$eZ1vL))))
                              (case-lambda
                                ((g$outer-var$9892$eZ1vL
                                   g$outer-maps$9893$eZ1vL)
                                 ((case-lambda
                                    ((g$outer-maps$9894$eZ1vL
                                       g$outer-var$9895$eZ1vL)
                                     ((case-lambda
                                        ((g$t$9896$eZ1vL)
                                         (if g$t$9896$eZ1vL
                                           ((case-lambda
                                              ((g$b$9897$eZ1vL)
                                               (values
                                                 (cdr g$b$9897$eZ1vL)
                                                 g$maps$9889$eZ1vL)))
                                            g$t$9896$eZ1vL)
                                           ((case-lambda
                                              ((g$inner-var$9898$eZ1vL)
                                               (values
                                                 g$inner-var$9898$eZ1vL
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9895$eZ1vL
                                                       g$inner-var$9898$eZ1vL)
                                                     (car g$maps$9889$eZ1vL))
                                                   g$outer-maps$9894$eZ1vL))))
                                            (g$gen-lexical$7658$eZ1vL 'tmp)))))
                                      (g$assq$5051$eZ1vL
                                        g$outer-var$9895$eZ1vL
                                        (car g$maps$9889$eZ1vL)))))
                                  g$outer-maps$9893$eZ1vL
                                  g$outer-var$9892$eZ1vL)))))))))
                   (g$gen-append$9841$eZ1vL
                     (case-lambda
                       ((g$x$9884$eZ1vL g$y$9885$eZ1vL)
                        (if (equal? g$y$9885$eZ1vL ''())
                          g$x$9884$eZ1vL
                          (list 'append g$x$9884$eZ1vL g$y$9885$eZ1vL)))))
                   (g$gen-mappend$9842$eZ1vL
                     (case-lambda
                       ((g$e$9882$eZ1vL g$map-env$9883$eZ1vL)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9843$eZ1vL
                            g$e$9882$eZ1vL
                            g$map-env$9883$eZ1vL)))))
                   (g$gen-map$9843$eZ1vL
                     (case-lambda
                       ((g$e$9873$eZ1vL g$map-env$9874$eZ1vL)
                        ((case-lambda
                           ((g$formals$9875$eZ1vL g$actuals$9876$eZ1vL)
                            (if (eq? (car g$e$9873$eZ1vL) 'ref)
                              (car g$actuals$9876$eZ1vL)
                              (if (g$for-all$5061$eZ1vL
                                    (case-lambda
                                      ((g$x$9877$eZ1vL)
                                       (if (eq? (car g$x$9877$eZ1vL) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5055$eZ1vL
                                             (g$cadr$5264$eZ1vL g$x$9877$eZ1vL)
                                             g$formals$9875$eZ1vL))
                                         '#f)))
                                    (cdr g$e$9873$eZ1vL))
                                ((case-lambda
                                   ((g$args$9878$eZ1vL)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9873$eZ1vL))
                                        g$args$9878$eZ1vL))))
                                 (g$map$5063$eZ1vL
                                   ((case-lambda
                                      ((g$r$9879$eZ1vL)
                                       (case-lambda
                                         ((g$x$9880$eZ1vL)
                                          (cdr (g$assq$5051$eZ1vL
                                                 (g$cadr$5264$eZ1vL
                                                   g$x$9880$eZ1vL)
                                                 g$r$9879$eZ1vL))))))
                                    (g$map$5063$eZ1vL
                                      cons
                                      g$formals$9875$eZ1vL
                                      g$actuals$9876$eZ1vL))
                                   (cdr g$e$9873$eZ1vL)))
                                (g$cons*$5065$eZ1vL
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9875$eZ1vL
                                    g$e$9873$eZ1vL)
                                  g$actuals$9876$eZ1vL)))))
                         (g$map$5063$eZ1vL cdr g$map-env$9874$eZ1vL)
                         (g$map$5063$eZ1vL
                           (case-lambda
                             ((g$x$9881$eZ1vL)
                              (list 'ref (car g$x$9881$eZ1vL))))
                           g$map-env$9874$eZ1vL)))))
                   (g$gen-cons$9844$eZ1vL
                     (case-lambda
                       ((g$e$9865$eZ1vL
                          g$x$9866$eZ1vL
                          g$y$9867$eZ1vL
                          g$xnew$9868$eZ1vL
                          g$ynew$9869$eZ1vL)
                        ((case-lambda
                           ((g$t$9870$eZ1vL)
                            (if (g$memv$5056$eZ1vL g$t$9870$eZ1vL '(quote))
                              (if (eq? (car g$xnew$9868$eZ1vL) 'quote)
                                ((case-lambda
                                   ((g$xnew$9871$eZ1vL g$ynew$9872$eZ1vL)
                                    (if (if (eq? g$xnew$9871$eZ1vL
                                                 g$x$9866$eZ1vL)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9872$eZ1vL
                                                 g$y$9867$eZ1vL))
                                          '#f)
                                      (list 'quote g$e$9865$eZ1vL)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9871$eZ1vL
                                          g$ynew$9872$eZ1vL)))))
                                 (g$cadr$5264$eZ1vL g$xnew$9868$eZ1vL)
                                 (g$cadr$5264$eZ1vL g$ynew$9869$eZ1vL))
                                (if (null?
                                      (g$cadr$5264$eZ1vL g$ynew$9869$eZ1vL))
                                  (list 'list g$xnew$9868$eZ1vL)
                                  (list
                                    'cons
                                    g$xnew$9868$eZ1vL
                                    g$ynew$9869$eZ1vL)))
                              (if (g$memv$5056$eZ1vL g$t$9870$eZ1vL '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9868$eZ1vL
                                    (cdr g$ynew$9869$eZ1vL)))
                                (list
                                  'cons
                                  g$xnew$9868$eZ1vL
                                  g$ynew$9869$eZ1vL)))))
                         (car g$ynew$9869$eZ1vL)))))
                   (g$gen-vector$9845$eZ1vL
                     (case-lambda
                       ((g$e$9862$eZ1vL g$ls$9863$eZ1vL g$lsnew$9864$eZ1vL)
                        (if (eq? (car g$lsnew$9864$eZ1vL) 'quote)
                          (if (eq? (g$cadr$5264$eZ1vL g$lsnew$9864$eZ1vL)
                                   g$ls$9863$eZ1vL)
                            (list 'quote g$e$9862$eZ1vL)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5264$eZ1vL g$lsnew$9864$eZ1vL))))
                          (if (eq? (car g$lsnew$9864$eZ1vL) 'list)
                            (cons 'vector (cdr g$lsnew$9864$eZ1vL))
                            (list 'list->vector g$lsnew$9864$eZ1vL))))))
                   (g$regen$9846$eZ1vL
                     (case-lambda
                       ((g$x$9859$eZ1vL)
                        ((case-lambda
                           ((g$t$9860$eZ1vL)
                            (if (g$memv$5056$eZ1vL g$t$9860$eZ1vL '(ref))
                              (g$cadr$5264$eZ1vL g$x$9859$eZ1vL)
                              (if (g$memv$5056$eZ1vL
                                    g$t$9860$eZ1vL
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5264$eZ1vL g$x$9859$eZ1vL))
                                (if (g$memv$5056$eZ1vL g$t$9860$eZ1vL '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5264$eZ1vL g$x$9859$eZ1vL))
                                  (if (g$memv$5056$eZ1vL
                                        g$t$9860$eZ1vL
                                        '(lambda))
                                    (g$build-lambda$7645$eZ1vL
                                      '#f
                                      (g$cadr$5264$eZ1vL g$x$9859$eZ1vL)
                                      (g$regen$9846$eZ1vL
                                        (g$caddr$5270$eZ1vL g$x$9859$eZ1vL)))
                                    (if (g$memv$5056$eZ1vL
                                          g$t$9860$eZ1vL
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9861$eZ1vL)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9861$eZ1vL)))
                                       (g$map$5063$eZ1vL
                                         g$regen$9846$eZ1vL
                                         (cdr g$x$9859$eZ1vL)))
                                      (cons
                                        (list 'primitive (car g$x$9859$eZ1vL))
                                        (g$map$5063$eZ1vL
                                          g$regen$9846$eZ1vL
                                          (cdr g$x$9859$eZ1vL))))))))))
                         (car g$x$9859$eZ1vL))))))
           (case-lambda
             ((g$e$9847$eZ1vL g$r$9848$eZ1vL g$mr$9849$eZ1vL)
              ((case-lambda
                 ((g$t$9850$eZ1vL)
                  ((case-lambda
                     ((g$ls/false$9851$eZ1vL)
                      (if g$ls/false$9851$eZ1vL
                        (apply
                          (case-lambda
                            ((g$x$9852$eZ1vL)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9839$eZ1vL
                                    g$e$9847$eZ1vL
                                    g$x$9852$eZ1vL
                                    g$r$9848$eZ1vL
                                    '()
                                    g$ellipsis?$7998$eZ1vL
                                    '#f)))
                               (case-lambda
                                 ((g$e$9855$eZ1vL g$maps$9856$eZ1vL)
                                  ((case-lambda
                                     ((g$maps$9857$eZ1vL g$e$9858$eZ1vL)
                                      (g$regen$9846$eZ1vL g$e$9858$eZ1vL)))
                                   g$maps$9856$eZ1vL
                                   g$e$9855$eZ1vL))))))
                          g$ls/false$9851$eZ1vL)
                        (g$syntax-violation$8109$eZ1vL
                          '#f
                          '"invalid syntax"
                          g$t$9850$eZ1vL))))
                   (g$syntax-dispatch$7997$eZ1vL g$t$9850$eZ1vL '(_ any)))))
               g$e$9847$eZ1vL))))))))
   (g$core-macro-transformer$8004$eZ1vL
     g$core-macro-transformer$11507$eZ1vL
     (case-lambda
       ((g$name$10003$eZ1vL)
        ((case-lambda
           ((g$t$10004$eZ1vL)
            (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(quote))
              g$quote-transformer$7957$eZ1vL
              (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(lambda))
                g$lambda-transformer$7959$eZ1vL
                (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(case-lambda))
                  g$case-lambda-transformer$7958$eZ1vL
                  (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(letrec))
                    g$letrec-transformer$7947$eZ1vL
                    (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(letrec*))
                      g$letrec*-transformer$7948$eZ1vL
                      (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(if))
                        g$if-transformer$7955$eZ1vL
                        (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(foreign-call))
                          g$foreign-call-transformer$7995$eZ1vL
                          (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(syntax-case))
                            g$syntax-case-transformer$8001$eZ1vL
                            (if (g$memv$5056$eZ1vL g$t$10004$eZ1vL '(syntax))
                              g$syntax-transformer$8003$eZ1vL
                              (if (g$memv$5056$eZ1vL
                                    g$t$10004$eZ1vL
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7950$eZ1vL
                                (if (g$memv$5056$eZ1vL
                                      g$t$10004$eZ1vL
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7951$eZ1vL
                                  (if (g$memv$5056$eZ1vL
                                        g$t$10004$eZ1vL
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7952$eZ1vL
                                    (if (g$memv$5056$eZ1vL
                                          g$t$10004$eZ1vL
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7949$eZ1vL
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$10003$eZ1vL))))))))))))))))
         g$name$10003$eZ1vL))))
   (g$file-options-macro$8005$eZ1vL
     g$file-options-macro$11508$eZ1vL
     (case-lambda
       ((g$x$10005$eZ1vL)
        (letrec* ((g$valid-option?$10006$eZ1vL
                    (case-lambda
                      ((g$x$10011$eZ1vL)
                       (if (g$id?$7719$eZ1vL g$x$10011$eZ1vL)
                         (begin
                           '#f
                           (g$memq$5055$eZ1vL
                             (g$id->sym$7720$eZ1vL g$x$10011$eZ1vL)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$10007$eZ1vL)
              ((case-lambda
                 ((g$ls/false$10008$eZ1vL)
                  (if (if g$ls/false$10008$eZ1vL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$10009$eZ1vL)
                               (if (g$for-all$5061$eZ1vL
                                     g$valid-option?$10006$eZ1vL
                                     g$opt*$10009$eZ1vL)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6993$eZ1vL
                                     (g$map$5063$eZ1vL
                                       g$id->sym$7720$eZ1vL
                                       g$opt*$10009$eZ1vL)))
                                 '#f)))
                            g$ls/false$10008$eZ1vL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$10010$eZ1vL)
                         (g$bless$7960$eZ1vL
                           (list
                             'quote
                             (g$file-options-spec$6993$eZ1vL
                               (g$map$5063$eZ1vL
                                 g$id->sym$7720$eZ1vL
                                 g$opt*$10010$eZ1vL))))))
                      g$ls/false$10008$eZ1vL)
                    (g$syntax-violation$8109$eZ1vL
                      '#f
                      '"invalid syntax"
                      g$t$10007$eZ1vL))))
               (g$syntax-dispatch$7997$eZ1vL g$t$10007$eZ1vL '(_ . each-any)))))
           g$x$10005$eZ1vL)))))
   (g$symbol-macro$8006$eZ1vL
     g$symbol-macro$11509$eZ1vL
     (case-lambda
       ((g$x$10012$eZ1vL g$set$10013$eZ1vL)
        ((case-lambda
           ((g$t$10014$eZ1vL)
            ((case-lambda
               ((g$ls/false$10015$eZ1vL)
                (if (if g$ls/false$10015$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$10016$eZ1vL)
                             (if (g$id?$7719$eZ1vL g$name$10016$eZ1vL)
                               (begin
                                 '#f
                                 (g$memq$5055$eZ1vL
                                   (g$id->sym$7720$eZ1vL g$name$10016$eZ1vL)
                                   g$set$10013$eZ1vL))
                               '#f)))
                          g$ls/false$10015$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$10017$eZ1vL)
                       (g$bless$7960$eZ1vL (list 'quote g$name$10017$eZ1vL))))
                    g$ls/false$10015$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$10014$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$10014$eZ1vL '(_ any)))))
         g$x$10012$eZ1vL))))
   (g$macro-transformer$8007$eZ1vL
     g$macro-transformer$11510$eZ1vL
     (case-lambda
       ((g$x$10018$eZ1vL)
        (if (procedure? g$x$10018$eZ1vL)
          g$x$10018$eZ1vL
          (if (symbol? g$x$10018$eZ1vL)
            ((case-lambda
               ((g$t$10019$eZ1vL)
                (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(define-record-type))
                  g$define-record-type-macro$7991$eZ1vL
                  (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(define-struct))
                    g$define-struct-macro$7990$eZ1vL
                    (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(include))
                      g$include-macro$7985$eZ1vL
                      (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(cond))
                        g$cond-macro$7983$eZ1vL
                        (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(let))
                          g$let-macro$7963$eZ1vL
                          (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(do))
                            g$do-macro$7979$eZ1vL
                            (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(or))
                              g$or-macro$7981$eZ1vL
                              (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(and))
                                g$and-macro$7982$eZ1vL
                                (if (g$memv$5056$eZ1vL g$t$10019$eZ1vL '(let*))
                                  g$let*-macro$7980$eZ1vL
                                  (if (g$memv$5056$eZ1vL
                                        g$t$10019$eZ1vL
                                        '(let-values))
                                    g$let-values-macro$7964$eZ1vL
                                    (if (g$memv$5056$eZ1vL
                                          g$t$10019$eZ1vL
                                          '(let*-values))
                                      g$let*-values-macro$7965$eZ1vL
                                      (if (g$memv$5056$eZ1vL
                                            g$t$10019$eZ1vL
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7987$eZ1vL
                                        (if (g$memv$5056$eZ1vL
                                              g$t$10019$eZ1vL
                                              '(quasiquote))
                                          g$quasiquote-macro$7988$eZ1vL
                                          (if (g$memv$5056$eZ1vL
                                                g$t$10019$eZ1vL
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7989$eZ1vL
                                            (if (g$memv$5056$eZ1vL
                                                  g$t$10019$eZ1vL
                                                  '(with-syntax))
                                              g$with-syntax-macro$7961$eZ1vL
                                              (if (g$memv$5056$eZ1vL
                                                    g$t$10019$eZ1vL
                                                    '(when))
                                                g$when-macro$7953$eZ1vL
                                                (if (g$memv$5056$eZ1vL
                                                      g$t$10019$eZ1vL
                                                      '(unless))
                                                  g$unless-macro$7954$eZ1vL
                                                  (if (g$memv$5056$eZ1vL
                                                        g$t$10019$eZ1vL
                                                        '(case))
                                                    g$case-macro$7956$eZ1vL
                                                    (if (g$memv$5056$eZ1vL
                                                          g$t$10019$eZ1vL
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7978$eZ1vL
                                                      (if (g$memv$5056$eZ1vL
                                                            g$t$10019$eZ1vL
                                                            '(time))
                                                        g$time-macro$7974$eZ1vL
                                                        (if (g$memv$5056$eZ1vL
                                                              g$t$10019$eZ1vL
                                                              '(delay))
                                                          g$delay-macro$7975$eZ1vL
                                                          (if (g$memv$5056$eZ1vL
                                                                g$t$10019$eZ1vL
                                                                '(assert))
                                                            g$assert-macro$7976$eZ1vL
                                                            (if (g$memv$5056$eZ1vL
                                                                  g$t$10019$eZ1vL
                                                                  '(endianness))
                                                              g$endianness-macro$7977$eZ1vL
                                                              (if (g$memv$5056$eZ1vL
                                                                    g$t$10019$eZ1vL
                                                                    '(guard))
                                                                g$guard-macro$7972$eZ1vL
                                                                (if (g$memv$5056$eZ1vL
                                                                      g$t$10019$eZ1vL
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7973$eZ1vL
                                                                  (if (g$memv$5056$eZ1vL
                                                                        g$t$10019$eZ1vL
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7966$eZ1vL
                                                                    (if (g$memv$5056$eZ1vL
                                                                          g$t$10019$eZ1vL
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7967$eZ1vL
                                                                      (if (g$memv$5056$eZ1vL
                                                                            g$t$10019$eZ1vL
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7968$eZ1vL
                                                                        (if (g$memv$5056$eZ1vL
                                                                              g$t$10019$eZ1vL
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7970$eZ1vL
                                                                          (if (g$memv$5056$eZ1vL
                                                                                g$t$10019$eZ1vL
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7971$eZ1vL
                                                                            (if (g$memv$5056$eZ1vL
                                                                                  g$t$10019$eZ1vL
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7992$eZ1vL
                                                                              (if (g$memv$5056$eZ1vL
                                                                                    g$t$10019$eZ1vL
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7994$eZ1vL
                                                                                (if (g$memv$5056$eZ1vL
                                                                                      g$t$10019$eZ1vL
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7986$eZ1vL
                                                                                  (if (g$memv$5056$eZ1vL
                                                                                        g$t$10019$eZ1vL
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$10020$eZ1vL)
                                                                                       (g$symbol-macro$8006$eZ1vL
                                                                                         g$x$10020$eZ1vL
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5056$eZ1vL
                                                                                          g$t$10019$eZ1vL
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$10021$eZ1vL)
                                                                                         (g$symbol-macro$8006$eZ1vL
                                                                                           g$x$10021$eZ1vL
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5056$eZ1vL
                                                                                            g$t$10019$eZ1vL
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$10022$eZ1vL)
                                                                                           (g$symbol-macro$8006$eZ1vL
                                                                                             g$x$10022$eZ1vL
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5056$eZ1vL
                                                                                              g$t$10019$eZ1vL
                                                                                              '(file-options))
                                                                                          g$file-options-macro$8005$eZ1vL
                                                                                          (if (g$memv$5056$eZ1vL
                                                                                                g$t$10019$eZ1vL
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7993$eZ1vL
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$10018$eZ1vL)))))))))))))))))))))))))))))))))))))))))
             g$x$10018$eZ1vL)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$10018$eZ1vL))))))
   (g$local-macro-transformer$8008$eZ1vL
     g$local-macro-transformer$11511$eZ1vL
     (case-lambda ((g$x$10023$eZ1vL) (car g$x$10023$eZ1vL))))
   (g$do-macro-call$8009$eZ1vL
     g$do-macro-call$11512$eZ1vL
     (case-lambda
       ((g$transformer$10024$eZ1vL g$expr$10025$eZ1vL)
        ((case-lambda
           ((g$out$10026$eZ1vL)
            (begin
              ((letrec ((g$f$10027$eZ1vL
                          (case-lambda
                            ((g$x$10028$eZ1vL)
                             (if (not (g$stx?$7691$eZ1vL g$x$10028$eZ1vL))
                               (if (pair? g$x$10028$eZ1vL)
                                 (begin
                                   (g$f$10027$eZ1vL (car g$x$10028$eZ1vL))
                                   (g$f$10027$eZ1vL (cdr g$x$10028$eZ1vL)))
                                 (if (vector? g$x$10028$eZ1vL)
                                   (vector-for-each
                                     g$f$10027$eZ1vL
                                     g$x$10028$eZ1vL)
                                   (if (symbol? g$x$10028$eZ1vL)
                                     (g$syntax-violation$8109$eZ1vL
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$10025$eZ1vL
                                       g$x$10028$eZ1vL)
                                     (void))))
                               (void))))))
                 g$f$10027$eZ1vL)
               g$out$10026$eZ1vL)
              (g$add-mark$7708$eZ1vL
                (g$gen-mark$7703$eZ1vL)
                g$out$10026$eZ1vL
                g$expr$10025$eZ1vL))))
         (g$transformer$10024$eZ1vL
           (g$add-mark$7708$eZ1vL
             g$anti-mark$7704$eZ1vL
             g$expr$10025$eZ1vL
             '#f))))))
   (g$chi-macro$8010$eZ1vL
     g$chi-macro$11513$eZ1vL
     (case-lambda
       ((g$p$10029$eZ1vL g$e$10030$eZ1vL)
        (g$do-macro-call$8009$eZ1vL
          (g$macro-transformer$8007$eZ1vL g$p$10029$eZ1vL)
          g$e$10030$eZ1vL))))
   (g$chi-local-macro$8011$eZ1vL
     g$chi-local-macro$11514$eZ1vL
     (case-lambda
       ((g$p$10031$eZ1vL g$e$10032$eZ1vL)
        (g$do-macro-call$8009$eZ1vL
          (g$local-macro-transformer$8008$eZ1vL g$p$10031$eZ1vL)
          g$e$10032$eZ1vL))))
   (g$chi-global-macro$8012$eZ1vL
     g$chi-global-macro$11515$eZ1vL
     (case-lambda
       ((g$p$10033$eZ1vL g$e$10034$eZ1vL)
        ((case-lambda
           ((g$lib$10035$eZ1vL g$loc$10036$eZ1vL)
            (begin
              (g$visit-library$7530$eZ1vL g$lib$10035$eZ1vL)
              ((case-lambda
                 ((g$x$10037$eZ1vL)
                  ((case-lambda
                     ((g$transformer$10038$eZ1vL)
                      (g$do-macro-call$8009$eZ1vL
                        g$transformer$10038$eZ1vL
                        g$e$10034$eZ1vL)))
                   (if (procedure? g$x$10037$eZ1vL)
                     g$x$10037$eZ1vL
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$10037$eZ1vL)))))
               (symbol-value g$loc$10036$eZ1vL)))))
         (car g$p$10033$eZ1vL)
         (cdr g$p$10033$eZ1vL)))))
   (g$chi-expr*$8013$eZ1vL
     g$chi-expr*$11516$eZ1vL
     (case-lambda
       ((g$e*$10039$eZ1vL g$r$10040$eZ1vL g$mr$10041$eZ1vL)
        (if (null? g$e*$10039$eZ1vL)
          '()
          ((case-lambda
             ((g$e$10042$eZ1vL)
              (cons
                g$e$10042$eZ1vL
                (g$chi-expr*$8013$eZ1vL
                  (cdr g$e*$10039$eZ1vL)
                  g$r$10040$eZ1vL
                  g$mr$10041$eZ1vL))))
           (g$chi-expr$8015$eZ1vL
             (car g$e*$10039$eZ1vL)
             g$r$10040$eZ1vL
             g$mr$10041$eZ1vL))))))
   (g$chi-application$8014$eZ1vL
     g$chi-application$11517$eZ1vL
     (case-lambda
       ((g$e$10043$eZ1vL g$r$10044$eZ1vL g$mr$10045$eZ1vL)
        ((case-lambda
           ((g$t$10046$eZ1vL)
            ((case-lambda
               ((g$ls/false$10047$eZ1vL)
                (if g$ls/false$10047$eZ1vL
                  (apply
                    (case-lambda
                      ((g$rator$10048$eZ1vL g$rands$10049$eZ1vL)
                       ((case-lambda
                          ((g$rator$10050$eZ1vL)
                           (cons
                             g$rator$10050$eZ1vL
                             (g$chi-expr*$8013$eZ1vL
                               g$rands$10049$eZ1vL
                               g$r$10044$eZ1vL
                               g$mr$10045$eZ1vL))))
                        (g$chi-expr$8015$eZ1vL
                          g$rator$10048$eZ1vL
                          g$r$10044$eZ1vL
                          g$mr$10045$eZ1vL))))
                    g$ls/false$10047$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$10046$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$10046$eZ1vL '(any . each-any)))))
         g$e$10043$eZ1vL))))
   (g$chi-expr$8015$eZ1vL
     g$chi-expr$11518$eZ1vL
     (case-lambda
       ((g$e$10051$eZ1vL g$r$10052$eZ1vL g$mr$10053$eZ1vL)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7739$eZ1vL g$e$10051$eZ1vL g$r$10052$eZ1vL)))
          (case-lambda
            ((g$type$10057$eZ1vL g$value$10058$eZ1vL g$kwd$10059$eZ1vL)
             ((case-lambda
                ((g$kwd$10060$eZ1vL g$value$10061$eZ1vL g$type$10062$eZ1vL)
                 ((case-lambda
                    ((g$t$10063$eZ1vL)
                     (if (g$memv$5056$eZ1vL g$t$10063$eZ1vL '(core-macro))
                       ((case-lambda
                          ((g$transformer$10064$eZ1vL)
                           (g$transformer$10064$eZ1vL
                             g$e$10051$eZ1vL
                             g$r$10052$eZ1vL
                             g$mr$10053$eZ1vL)))
                        (g$core-macro-transformer$8004$eZ1vL
                          g$value$10061$eZ1vL))
                       (if (g$memv$5056$eZ1vL g$t$10063$eZ1vL '(global))
                         ((case-lambda
                            ((g$lib$10065$eZ1vL)
                             ((case-lambda
                                ((g$loc$10066$eZ1vL)
                                 (begin
                                   ((g$inv-collector$8049$eZ1vL)
                                    g$lib$10065$eZ1vL)
                                   g$loc$10066$eZ1vL)))
                              (cdr g$value$10061$eZ1vL))))
                          (car g$value$10061$eZ1vL))
                         (if (g$memv$5056$eZ1vL g$t$10063$eZ1vL '(core-prim))
                           ((case-lambda
                              ((g$name$10067$eZ1vL)
                               (list 'primitive g$name$10067$eZ1vL)))
                            g$value$10061$eZ1vL)
                           (if (g$memv$5056$eZ1vL g$t$10063$eZ1vL '(call))
                             (g$chi-application$8014$eZ1vL
                               g$e$10051$eZ1vL
                               g$r$10052$eZ1vL
                               g$mr$10053$eZ1vL)
                             (if (g$memv$5056$eZ1vL g$t$10063$eZ1vL '(lexical))
                               ((case-lambda
                                  ((g$lex$10068$eZ1vL) g$lex$10068$eZ1vL))
                                (g$lexical-var$7941$eZ1vL g$value$10061$eZ1vL))
                               (if (g$memv$5056$eZ1vL
                                     g$t$10063$eZ1vL
                                     '(global-macro global-macro!))
                                 (g$chi-expr$8015$eZ1vL
                                   (g$chi-global-macro$8012$eZ1vL
                                     g$value$10061$eZ1vL
                                     g$e$10051$eZ1vL)
                                   g$r$10052$eZ1vL
                                   g$mr$10053$eZ1vL)
                                 (if (g$memv$5056$eZ1vL
                                       g$t$10063$eZ1vL
                                       '(local-macro local-macro!))
                                   (g$chi-expr$8015$eZ1vL
                                     (g$chi-local-macro$8011$eZ1vL
                                       g$value$10061$eZ1vL
                                       g$e$10051$eZ1vL)
                                     g$r$10052$eZ1vL
                                     g$mr$10053$eZ1vL)
                                   (if (g$memv$5056$eZ1vL
                                         g$t$10063$eZ1vL
                                         '(macro macro!))
                                     (g$chi-expr$8015$eZ1vL
                                       (g$chi-macro$8010$eZ1vL
                                         g$value$10061$eZ1vL
                                         g$e$10051$eZ1vL)
                                       g$r$10052$eZ1vL
                                       g$mr$10053$eZ1vL)
                                     (if (g$memv$5056$eZ1vL
                                           g$t$10063$eZ1vL
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$10069$eZ1vL)
                                           (list 'quote g$datum$10069$eZ1vL)))
                                        g$value$10061$eZ1vL)
                                       (if (g$memv$5056$eZ1vL
                                             g$t$10063$eZ1vL
                                             '(set!))
                                         (g$chi-set!$8016$eZ1vL
                                           g$e$10051$eZ1vL
                                           g$r$10052$eZ1vL
                                           g$mr$10053$eZ1vL)
                                         (if (g$memv$5056$eZ1vL
                                               g$t$10063$eZ1vL
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$10070$eZ1vL)
                                               ((case-lambda
                                                  ((g$ls/false$10071$eZ1vL)
                                                   (if g$ls/false$10071$eZ1vL
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10072$eZ1vL
                                                            g$x*$10073$eZ1vL)
                                                          (g$build-sequence$7648$eZ1vL
                                                            '#f
                                                            (g$chi-expr*$8013$eZ1vL
                                                              (cons
                                                                g$x$10072$eZ1vL
                                                                g$x*$10073$eZ1vL)
                                                              g$r$10052$eZ1vL
                                                              g$mr$10053$eZ1vL))))
                                                       g$ls/false$10071$eZ1vL)
                                                     (g$syntax-violation$8109$eZ1vL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10070$eZ1vL))))
                                                (g$syntax-dispatch$7997$eZ1vL
                                                  g$t$10070$eZ1vL
                                                  '(_ any . each-any)))))
                                            g$e$10051$eZ1vL)
                                           (if (g$memv$5056$eZ1vL
                                                 g$t$10063$eZ1vL
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$10074$eZ1vL)
                                                 ((case-lambda
                                                    ((g$ls/false$10075$eZ1vL)
                                                     (if (if g$ls/false$10075$eZ1vL
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$10076$eZ1vL
                                                                    g$xrhs*$10077$eZ1vL
                                                                    g$xbody$10078$eZ1vL
                                                                    g$xbody*$10079$eZ1vL)
                                                                  (if (not (g$valid-bound-ids?$7724$eZ1vL
                                                                             g$xlhs*$10076$eZ1vL))
                                                                    (g$syntax-violation$8109$eZ1vL
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$10051$eZ1vL)
                                                                    (void))))
                                                               g$ls/false$10075$eZ1vL))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$10080$eZ1vL
                                                              g$xrhs*$10081$eZ1vL
                                                              g$xbody$10082$eZ1vL
                                                              g$xbody*$10083$eZ1vL)
                                                            ((case-lambda
                                                               ((g$xlab*$10084$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$xrib$10085$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$xb*$10086$eZ1vL)
                                                                        (g$build-sequence$7648$eZ1vL
                                                                          '#f
                                                                          (g$chi-expr*$8013$eZ1vL
                                                                            (g$map$5063$eZ1vL
                                                                              (case-lambda
                                                                                ((g$x$10087$eZ1vL)
                                                                                 (g$add-subst$7709$eZ1vL
                                                                                   g$xrib$10085$eZ1vL
                                                                                   g$x$10087$eZ1vL)))
                                                                              (cons
                                                                                g$xbody$10082$eZ1vL
                                                                                g$xbody*$10083$eZ1vL))
                                                                            (append
                                                                              (g$map$5063$eZ1vL
                                                                                cons
                                                                                g$xlab*$10084$eZ1vL
                                                                                g$xb*$10086$eZ1vL)
                                                                              g$r$10052$eZ1vL)
                                                                            (append
                                                                              (g$map$5063$eZ1vL
                                                                                cons
                                                                                g$xlab*$10084$eZ1vL
                                                                                g$xb*$10086$eZ1vL)
                                                                              g$mr$10053$eZ1vL)))))
                                                                     (g$map$5063$eZ1vL
                                                                       (case-lambda
                                                                         ((g$x$10088$eZ1vL)
                                                                          (g$make-eval-transformer$7751$eZ1vL
                                                                            (g$expand-transformer$8042$eZ1vL
                                                                              (if (eq? g$type$10062$eZ1vL
                                                                                       'let-syntax)
                                                                                g$x$10088$eZ1vL
                                                                                (g$add-subst$7709$eZ1vL
                                                                                  g$xrib$10085$eZ1vL
                                                                                  g$x$10088$eZ1vL))
                                                                              g$mr$10053$eZ1vL))))
                                                                       g$xrhs*$10081$eZ1vL))))
                                                                 (g$make-full-rib$7687$eZ1vL
                                                                   g$xlhs*$10080$eZ1vL
                                                                   g$xlab*$10084$eZ1vL))))
                                                             (g$map$5063$eZ1vL
                                                               g$gen-label$7660$eZ1vL
                                                               g$xlhs*$10080$eZ1vL))))
                                                         g$ls/false$10075$eZ1vL)
                                                       (g$syntax-violation$8109$eZ1vL
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$10074$eZ1vL))))
                                                  (g$syntax-dispatch$7997$eZ1vL
                                                    g$t$10074$eZ1vL
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$10051$eZ1vL)
                                             (if (g$memv$5056$eZ1vL
                                                   g$t$10063$eZ1vL
                                                   '(displaced-lexical))
                                               (g$syntax-violation$8109$eZ1vL
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$10051$eZ1vL)
                                               (if (g$memv$5056$eZ1vL
                                                     g$t$10063$eZ1vL
                                                     '(syntax))
                                                 (g$syntax-violation$8109$eZ1vL
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$10051$eZ1vL)
                                                 (if (g$memv$5056$eZ1vL
                                                       g$t$10063$eZ1vL
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$8109$eZ1vL
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$10089$eZ1vL)
                                                           (if (g$memv$5056$eZ1vL
                                                                 g$t$10089$eZ1vL
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5056$eZ1vL
                                                                   g$t$10089$eZ1vL
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5056$eZ1vL
                                                                     g$t$10089$eZ1vL
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5056$eZ1vL
                                                                       g$t$10089$eZ1vL
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5056$eZ1vL
                                                                         g$t$10089$eZ1vL
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5056$eZ1vL
                                                                           g$t$10089$eZ1vL
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$10062$eZ1vL)
                                                       '" was found where an expression was expected")
                                                     g$e$10051$eZ1vL)
                                                   (if (g$memv$5056$eZ1vL
                                                         g$t$10063$eZ1vL
                                                         '(mutable))
                                                     (g$syntax-violation$8109$eZ1vL
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$10051$eZ1vL)
                                                     (g$syntax-violation$8109$eZ1vL
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$10051$eZ1vL)))))))))))))))))))
                  g$type$10062$eZ1vL)))
              g$kwd$10059$eZ1vL
              g$value$10058$eZ1vL
              g$type$10057$eZ1vL)))))))
   (g$chi-set!$8016$eZ1vL
     g$chi-set!$11519$eZ1vL
     (case-lambda
       ((g$e$10090$eZ1vL g$r$10091$eZ1vL g$mr$10092$eZ1vL)
        ((case-lambda
           ((g$t$10093$eZ1vL)
            ((case-lambda
               ((g$ls/false$10094$eZ1vL)
                (if (if g$ls/false$10094$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$10095$eZ1vL g$v$10096$eZ1vL)
                             (g$id?$7719$eZ1vL g$x$10095$eZ1vL)))
                          g$ls/false$10094$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$10097$eZ1vL g$v$10098$eZ1vL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7739$eZ1vL
                              g$x$10097$eZ1vL
                              g$r$10091$eZ1vL)))
                         (case-lambda
                           ((g$type$10102$eZ1vL
                              g$value$10103$eZ1vL
                              g$kwd$10104$eZ1vL)
                            ((case-lambda
                               ((g$kwd$10105$eZ1vL
                                  g$value$10106$eZ1vL
                                  g$type$10107$eZ1vL)
                                ((case-lambda
                                   ((g$t$10108$eZ1vL)
                                    (if (g$memv$5056$eZ1vL
                                          g$t$10108$eZ1vL
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7943$eZ1vL
                                          g$value$10106$eZ1vL
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7941$eZ1vL
                                            g$value$10106$eZ1vL)
                                          (g$chi-expr$8015$eZ1vL
                                            g$v$10098$eZ1vL
                                            g$r$10091$eZ1vL
                                            g$mr$10092$eZ1vL)))
                                      (if (g$memv$5056$eZ1vL
                                            g$t$10108$eZ1vL
                                            '(core-prim))
                                        (g$syntax-violation$8109$eZ1vL
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$10090$eZ1vL)
                                        (if (g$memv$5056$eZ1vL
                                              g$t$10108$eZ1vL
                                              '(global))
                                          (g$syntax-violation$8109$eZ1vL
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$10090$eZ1vL)
                                          (if (g$memv$5056$eZ1vL
                                                g$t$10108$eZ1vL
                                                '(global-macro!))
                                            (g$chi-expr$8015$eZ1vL
                                              (g$chi-global-macro$8012$eZ1vL
                                                g$value$10106$eZ1vL
                                                g$e$10090$eZ1vL)
                                              g$r$10091$eZ1vL
                                              g$mr$10092$eZ1vL)
                                            (if (g$memv$5056$eZ1vL
                                                  g$t$10108$eZ1vL
                                                  '(local-macro!))
                                              (g$chi-expr$8015$eZ1vL
                                                (g$chi-local-macro$8011$eZ1vL
                                                  g$value$10106$eZ1vL
                                                  g$e$10090$eZ1vL)
                                                g$r$10091$eZ1vL
                                                g$mr$10092$eZ1vL)
                                              (if (g$memv$5056$eZ1vL
                                                    g$t$10108$eZ1vL
                                                    '(mutable))
                                                (g$syntax-violation$8109$eZ1vL
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$10090$eZ1vL)
                                                (g$syntax-violation$8109$eZ1vL
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$10090$eZ1vL)))))))))
                                 g$type$10107$eZ1vL)))
                             g$kwd$10104$eZ1vL
                             g$value$10103$eZ1vL
                             g$type$10102$eZ1vL))))))
                    g$ls/false$10094$eZ1vL)
                  (g$syntax-violation$8109$eZ1vL
                    '#f
                    '"invalid syntax"
                    g$t$10093$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$10093$eZ1vL '(_ any any)))))
         g$e$10090$eZ1vL))))
   (g$verify-formals$8017$eZ1vL
     g$verify-formals$11520$eZ1vL
     (case-lambda
       ((g$fmls$10109$eZ1vL g$stx$10110$eZ1vL)
        ((case-lambda
           ((g$t$10111$eZ1vL)
            ((case-lambda
               ((g$ls/false$10112$eZ1vL)
                (if g$ls/false$10112$eZ1vL
                  (apply
                    (case-lambda
                      ((g$x*$10113$eZ1vL)
                       (if (not (g$valid-bound-ids?$7724$eZ1vL
                                  g$x*$10113$eZ1vL))
                         (g$invalid-fmls-error$7962$eZ1vL
                           g$stx$10110$eZ1vL
                           g$fmls$10109$eZ1vL)
                         (void))))
                    g$ls/false$10112$eZ1vL)
                  ((case-lambda
                     ((g$t$10114$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$10115$eZ1vL)
                          (if g$ls/false$10115$eZ1vL
                            (apply
                              (case-lambda
                                ((g$x*$10116$eZ1vL g$x$10117$eZ1vL)
                                 (if (not (g$valid-bound-ids?$7724$eZ1vL
                                            (cons
                                              g$x$10117$eZ1vL
                                              g$x*$10116$eZ1vL)))
                                   (g$invalid-fmls-error$7962$eZ1vL
                                     g$stx$10110$eZ1vL
                                     g$fmls$10109$eZ1vL)
                                   (void))))
                              g$ls/false$10115$eZ1vL)
                            ((case-lambda
                               ((g$t$10118$eZ1vL)
                                ((case-lambda
                                   ((g$ls/false$10119$eZ1vL)
                                    (if g$ls/false$10119$eZ1vL
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$stx$10110$eZ1vL)))
                                        g$ls/false$10119$eZ1vL)
                                      (g$syntax-violation$8109$eZ1vL
                                        '#f
                                        '"invalid syntax"
                                        g$t$10118$eZ1vL))))
                                 (g$syntax-dispatch$7997$eZ1vL
                                   g$t$10118$eZ1vL
                                   '_))))
                             g$t$10114$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$10114$eZ1vL
                         '#(each+ any () any)))))
                   g$t$10111$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$10111$eZ1vL 'each-any))))
         g$fmls$10109$eZ1vL))))
   (g$chi-lambda-clause$8018$eZ1vL
     g$chi-lambda-clause$11521$eZ1vL
     (case-lambda
       ((g$stx$10120$eZ1vL
          g$fmls$10121$eZ1vL
          g$body*$10122$eZ1vL
          g$r$10123$eZ1vL
          g$mr$10124$eZ1vL)
        ((case-lambda
           ((g$t$10125$eZ1vL)
            ((case-lambda
               ((g$ls/false$10126$eZ1vL)
                (if g$ls/false$10126$eZ1vL
                  (apply
                    (case-lambda
                      ((g$x*$10127$eZ1vL)
                       (begin
                         (g$verify-formals$8017$eZ1vL
                           g$fmls$10121$eZ1vL
                           g$stx$10120$eZ1vL)
                         ((case-lambda
                            ((g$lex*$10128$eZ1vL g$lab*$10129$eZ1vL)
                             (values
                               g$lex*$10128$eZ1vL
                               (g$chi-internal$8026$eZ1vL
                                 (g$add-subst$7709$eZ1vL
                                   (g$make-full-rib$7687$eZ1vL
                                     g$x*$10127$eZ1vL
                                     g$lab*$10129$eZ1vL)
                                   g$body*$10122$eZ1vL)
                                 (g$add-lexicals$7945$eZ1vL
                                   g$lab*$10129$eZ1vL
                                   g$lex*$10128$eZ1vL
                                   g$r$10123$eZ1vL)
                                 g$mr$10124$eZ1vL))))
                          (g$map$5063$eZ1vL
                            g$gen-lexical$7658$eZ1vL
                            g$x*$10127$eZ1vL)
                          (g$map$5063$eZ1vL
                            g$gen-label$7660$eZ1vL
                            g$x*$10127$eZ1vL)))))
                    g$ls/false$10126$eZ1vL)
                  ((case-lambda
                     ((g$t$10130$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$10131$eZ1vL)
                          (if g$ls/false$10131$eZ1vL
                            (apply
                              (case-lambda
                                ((g$x*$10132$eZ1vL g$x$10133$eZ1vL)
                                 (begin
                                   (g$verify-formals$8017$eZ1vL
                                     g$fmls$10121$eZ1vL
                                     g$stx$10120$eZ1vL)
                                   ((case-lambda
                                      ((g$lex*$10134$eZ1vL
                                         g$lab*$10135$eZ1vL
                                         g$lex$10136$eZ1vL
                                         g$lab$10137$eZ1vL)
                                       (values
                                         (append
                                           g$lex*$10134$eZ1vL
                                           g$lex$10136$eZ1vL)
                                         (g$chi-internal$8026$eZ1vL
                                           (g$add-subst$7709$eZ1vL
                                             (g$make-full-rib$7687$eZ1vL
                                               (cons
                                                 g$x$10133$eZ1vL
                                                 g$x*$10132$eZ1vL)
                                               (cons
                                                 g$lab$10137$eZ1vL
                                                 g$lab*$10135$eZ1vL))
                                             g$body*$10122$eZ1vL)
                                           (g$add-lexicals$7945$eZ1vL
                                             (cons
                                               g$lab$10137$eZ1vL
                                               g$lab*$10135$eZ1vL)
                                             (cons
                                               g$lex$10136$eZ1vL
                                               g$lex*$10134$eZ1vL)
                                             g$r$10123$eZ1vL)
                                           g$mr$10124$eZ1vL))))
                                    (g$map$5063$eZ1vL
                                      g$gen-lexical$7658$eZ1vL
                                      g$x*$10132$eZ1vL)
                                    (g$map$5063$eZ1vL
                                      g$gen-label$7660$eZ1vL
                                      g$x*$10132$eZ1vL)
                                    (g$gen-lexical$7658$eZ1vL g$x$10133$eZ1vL)
                                    (g$gen-label$7660$eZ1vL g$x$10133$eZ1vL)))))
                              g$ls/false$10131$eZ1vL)
                            ((case-lambda
                               ((g$t$10138$eZ1vL)
                                ((case-lambda
                                   ((g$ls/false$10139$eZ1vL)
                                    (if g$ls/false$10139$eZ1vL
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8109$eZ1vL
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$10121$eZ1vL)))
                                        g$ls/false$10139$eZ1vL)
                                      (g$syntax-violation$8109$eZ1vL
                                        '#f
                                        '"invalid syntax"
                                        g$t$10138$eZ1vL))))
                                 (g$syntax-dispatch$7997$eZ1vL
                                   g$t$10138$eZ1vL
                                   '_))))
                             g$t$10130$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$10130$eZ1vL
                         '#(each+ any () any)))))
                   g$t$10125$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$10125$eZ1vL 'each-any))))
         g$fmls$10121$eZ1vL))))
   (g$chi-lambda-clause*$8019$eZ1vL
     g$chi-lambda-clause*$11522$eZ1vL
     (case-lambda
       ((g$stx$10140$eZ1vL
          g$fmls*$10141$eZ1vL
          g$body**$10142$eZ1vL
          g$r$10143$eZ1vL
          g$mr$10144$eZ1vL)
        (if (null? g$fmls*$10141$eZ1vL)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$8018$eZ1vL
                 g$stx$10140$eZ1vL
                 (car g$fmls*$10141$eZ1vL)
                 (car g$body**$10142$eZ1vL)
                 g$r$10143$eZ1vL
                 g$mr$10144$eZ1vL)))
            (case-lambda
              ((g$a$10147$eZ1vL g$b$10148$eZ1vL)
               ((case-lambda
                  ((g$b$10149$eZ1vL g$a$10150$eZ1vL)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$8019$eZ1vL
                          g$stx$10140$eZ1vL
                          (cdr g$fmls*$10141$eZ1vL)
                          (cdr g$body**$10142$eZ1vL)
                          g$r$10143$eZ1vL
                          g$mr$10144$eZ1vL)))
                     (case-lambda
                       ((g$a*$10153$eZ1vL g$b*$10154$eZ1vL)
                        ((case-lambda
                           ((g$b*$10155$eZ1vL g$a*$10156$eZ1vL)
                            (values
                              (cons g$a$10150$eZ1vL g$a*$10156$eZ1vL)
                              (cons g$b$10149$eZ1vL g$b*$10155$eZ1vL))))
                         g$b*$10154$eZ1vL
                         g$a*$10153$eZ1vL))))))
                g$b$10148$eZ1vL
                g$a$10147$eZ1vL))))))))
   (g$chi-defun$8020$eZ1vL
     g$chi-defun$11523$eZ1vL
     (case-lambda
       ((g$x$10157$eZ1vL g$r$10158$eZ1vL g$mr$10159$eZ1vL)
        ((case-lambda
           ((g$fmls$10160$eZ1vL g$body*$10161$eZ1vL)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$8018$eZ1vL
                   g$fmls$10160$eZ1vL
                   g$fmls$10160$eZ1vL
                   g$body*$10161$eZ1vL
                   g$r$10158$eZ1vL
                   g$mr$10159$eZ1vL)))
              (case-lambda
                ((g$fmls$10164$eZ1vL g$body$10165$eZ1vL)
                 ((case-lambda
                    ((g$body$10166$eZ1vL g$fmls$10167$eZ1vL)
                     (g$build-lambda$7645$eZ1vL
                       '#f
                       g$fmls$10167$eZ1vL
                       g$body$10166$eZ1vL)))
                  g$body$10165$eZ1vL
                  g$fmls$10164$eZ1vL))))))
         (car g$x$10157$eZ1vL)
         (cdr g$x$10157$eZ1vL)))))
   (g$chi-rhs$8021$eZ1vL
     g$chi-rhs$11524$eZ1vL
     (case-lambda
       ((g$rhs$10168$eZ1vL g$r$10169$eZ1vL g$mr$10170$eZ1vL)
        ((case-lambda
           ((g$t$10171$eZ1vL)
            (if (g$memv$5056$eZ1vL g$t$10171$eZ1vL '(defun))
              (g$chi-defun$8020$eZ1vL
                (cdr g$rhs$10168$eZ1vL)
                g$r$10169$eZ1vL
                g$mr$10170$eZ1vL)
              (if (g$memv$5056$eZ1vL g$t$10171$eZ1vL '(expr))
                ((case-lambda
                   ((g$expr$10172$eZ1vL)
                    (g$chi-expr$8015$eZ1vL
                      g$expr$10172$eZ1vL
                      g$r$10169$eZ1vL
                      g$mr$10170$eZ1vL)))
                 (cdr g$rhs$10168$eZ1vL))
                (if (g$memv$5056$eZ1vL g$t$10171$eZ1vL '(top-expr))
                  ((case-lambda
                     ((g$expr$10173$eZ1vL)
                      (g$build-sequence$7648$eZ1vL
                        '#f
                        (list
                          (g$chi-expr$8015$eZ1vL
                            g$expr$10173$eZ1vL
                            g$r$10169$eZ1vL
                            g$mr$10170$eZ1vL)
                          (g$build-void$7649$eZ1vL)))))
                   (cdr g$rhs$10168$eZ1vL))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$10168$eZ1vL))))))
         (car g$rhs$10168$eZ1vL)))))
   (g$expand-interaction-rhs*/init*$8022$eZ1vL
     g$expand-interaction-rhs*/init*$11525$eZ1vL
     (case-lambda
       ((g$lhs*$10174$eZ1vL
          g$rhs*$10175$eZ1vL
          g$init*$10176$eZ1vL
          g$r$10177$eZ1vL
          g$mr$10178$eZ1vL)
        ((letrec ((g$f$10179$eZ1vL
                    (case-lambda
                      ((g$lhs*$10180$eZ1vL g$rhs*$10181$eZ1vL)
                       (if (null? g$lhs*$10180$eZ1vL)
                         (g$map$5063$eZ1vL
                           (case-lambda
                             ((g$x$10182$eZ1vL)
                              (g$chi-expr$8015$eZ1vL
                                g$x$10182$eZ1vL
                                g$r$10177$eZ1vL
                                g$mr$10178$eZ1vL)))
                           g$init*$10176$eZ1vL)
                         ((case-lambda
                            ((g$lhs$10183$eZ1vL g$rhs$10184$eZ1vL)
                             ((case-lambda
                                ((g$t$10185$eZ1vL)
                                 (if (g$memv$5056$eZ1vL
                                       g$t$10185$eZ1vL
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$10186$eZ1vL)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$10183$eZ1vL
                                           g$rhs$10186$eZ1vL)
                                         (g$f$10179$eZ1vL
                                           (cdr g$lhs*$10180$eZ1vL)
                                           (cdr g$rhs*$10181$eZ1vL)))))
                                    (g$chi-defun$8020$eZ1vL
                                      (cdr g$rhs$10184$eZ1vL)
                                      g$r$10177$eZ1vL
                                      g$mr$10178$eZ1vL))
                                   (if (g$memv$5056$eZ1vL
                                         g$t$10185$eZ1vL
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$10187$eZ1vL)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$10183$eZ1vL
                                             g$rhs$10187$eZ1vL)
                                           (g$f$10179$eZ1vL
                                             (cdr g$lhs*$10180$eZ1vL)
                                             (cdr g$rhs*$10181$eZ1vL)))))
                                      (g$chi-expr$8015$eZ1vL
                                        (cdr g$rhs$10184$eZ1vL)
                                        g$r$10177$eZ1vL
                                        g$mr$10178$eZ1vL))
                                     (if (g$memv$5056$eZ1vL
                                           g$t$10185$eZ1vL
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$10188$eZ1vL)
                                           (cons
                                             g$e$10188$eZ1vL
                                             (g$f$10179$eZ1vL
                                               (cdr g$lhs*$10180$eZ1vL)
                                               (cdr g$rhs*$10181$eZ1vL)))))
                                        (g$chi-expr$8015$eZ1vL
                                          (cdr g$rhs$10184$eZ1vL)
                                          g$r$10177$eZ1vL
                                          g$mr$10178$eZ1vL))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$10184$eZ1vL))))))
                              (car g$rhs$10184$eZ1vL))))
                          (car g$lhs*$10180$eZ1vL)
                          (car g$rhs*$10181$eZ1vL)))))))
           g$f$10179$eZ1vL)
         g$lhs*$10174$eZ1vL
         g$rhs*$10175$eZ1vL))))
   (g$chi-rhs*$8023$eZ1vL
     g$chi-rhs*$11526$eZ1vL
     (case-lambda
       ((g$rhs*$10189$eZ1vL g$r$10190$eZ1vL g$mr$10191$eZ1vL)
        ((letrec ((g$f$10192$eZ1vL
                    (case-lambda
                      ((g$ls$10193$eZ1vL)
                       (if (null? g$ls$10193$eZ1vL)
                         '()
                         ((case-lambda
                            ((g$a$10194$eZ1vL)
                             (cons
                               g$a$10194$eZ1vL
                               (g$f$10192$eZ1vL (cdr g$ls$10193$eZ1vL)))))
                          (g$chi-rhs$8021$eZ1vL
                            (car g$ls$10193$eZ1vL)
                            g$r$10190$eZ1vL
                            g$mr$10191$eZ1vL)))))))
           g$f$10192$eZ1vL)
         g$rhs*$10189$eZ1vL))))
   (g$find-bound=?$8024$eZ1vL
     g$find-bound=?$11527$eZ1vL
     (case-lambda
       ((g$x$10195$eZ1vL g$lhs*$10196$eZ1vL g$rhs*$10197$eZ1vL)
        (if (null? g$lhs*$10196$eZ1vL)
          '#f
          (if (g$bound-id=?$7722$eZ1vL g$x$10195$eZ1vL (car g$lhs*$10196$eZ1vL))
            (car g$rhs*$10197$eZ1vL)
            (g$find-bound=?$8024$eZ1vL
              g$x$10195$eZ1vL
              (cdr g$lhs*$10196$eZ1vL)
              (cdr g$rhs*$10197$eZ1vL)))))))
   (g$find-dups$8025$eZ1vL
     g$find-dups$11528$eZ1vL
     (case-lambda
       ((g$ls$10198$eZ1vL)
        ((letrec ((g$f$10199$eZ1vL
                    (case-lambda
                      ((g$ls$10200$eZ1vL g$dups$10201$eZ1vL)
                       (if (null? g$ls$10200$eZ1vL)
                         g$dups$10201$eZ1vL
                         ((case-lambda
                            ((g$t$10202$eZ1vL)
                             (if g$t$10202$eZ1vL
                               ((case-lambda
                                  ((g$x$10203$eZ1vL)
                                   (g$f$10199$eZ1vL
                                     (cdr g$ls$10200$eZ1vL)
                                     (cons
                                       (list
                                         (car g$ls$10200$eZ1vL)
                                         g$x$10203$eZ1vL)
                                       g$dups$10201$eZ1vL))))
                                g$t$10202$eZ1vL)
                               (g$f$10199$eZ1vL
                                 (cdr g$ls$10200$eZ1vL)
                                 g$dups$10201$eZ1vL))))
                          (g$find-bound=?$8024$eZ1vL
                            (car g$ls$10200$eZ1vL)
                            (cdr g$ls$10200$eZ1vL)
                            (cdr g$ls$10200$eZ1vL))))))))
           g$f$10199$eZ1vL)
         g$ls$10198$eZ1vL
         '()))))
   (g$chi-internal$8026$eZ1vL
     g$chi-internal$11529$eZ1vL
     (case-lambda
       ((g$e*$10204$eZ1vL g$r$10205$eZ1vL g$mr$10206$eZ1vL)
        ((case-lambda
           ((g$rib$10207$eZ1vL)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$8041$eZ1vL
                   (g$map$5063$eZ1vL
                     (case-lambda
                       ((g$x$10216$eZ1vL)
                        (g$add-subst$7709$eZ1vL
                          g$rib$10207$eZ1vL
                          g$x$10216$eZ1vL)))
                     (g$syntax->list$7718$eZ1vL g$e*$10204$eZ1vL))
                   g$r$10205$eZ1vL
                   g$mr$10206$eZ1vL
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$10207$eZ1vL
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$10217$eZ1vL
                   g$r$10218$eZ1vL
                   g$mr$10219$eZ1vL
                   g$lex*$10220$eZ1vL
                   g$rhs*$10221$eZ1vL
                   g$mod**$10222$eZ1vL
                   g$kwd*$10223$eZ1vL
                   g$_exp*$10224$eZ1vL)
                 ((case-lambda
                    ((g$_exp*$10225$eZ1vL
                       g$kwd*$10226$eZ1vL
                       g$mod**$10227$eZ1vL
                       g$rhs*$10228$eZ1vL
                       g$lex*$10229$eZ1vL
                       g$mr$10230$eZ1vL
                       g$r$10231$eZ1vL
                       g$e*$10232$eZ1vL)
                     (begin
                       (if (null? g$e*$10232$eZ1vL)
                         (g$syntax-violation$8109$eZ1vL
                           '#f
                           '"no expression in body"
                           g$e*$10232$eZ1vL)
                         (void))
                       ((case-lambda
                          ((g$init*$10233$eZ1vL)
                           ((case-lambda
                              ((g$rhs*$10234$eZ1vL)
                               (g$build-letrec*$7651$eZ1vL
                                 '#f
                                 (reverse g$lex*$10229$eZ1vL)
                                 (reverse g$rhs*$10234$eZ1vL)
                                 (g$build-sequence$7648$eZ1vL
                                   '#f
                                   g$init*$10233$eZ1vL))))
                            (g$chi-rhs*$8023$eZ1vL
                              g$rhs*$10228$eZ1vL
                              g$r$10231$eZ1vL
                              g$mr$10230$eZ1vL))))
                        (g$chi-expr*$8013$eZ1vL
                          (append
                            (apply append (reverse g$mod**$10227$eZ1vL))
                            g$e*$10232$eZ1vL)
                          g$r$10231$eZ1vL
                          g$mr$10230$eZ1vL)))))
                  g$_exp*$10224$eZ1vL
                  g$kwd*$10223$eZ1vL
                  g$mod**$10222$eZ1vL
                  g$rhs*$10221$eZ1vL
                  g$lex*$10220$eZ1vL
                  g$mr$10219$eZ1vL
                  g$r$10218$eZ1vL
                  g$e*$10217$eZ1vL))))))
         (g$make-empty-rib$7679$eZ1vL)))))
   (g$parse-module$8027$eZ1vL
     g$parse-module$11530$eZ1vL
     (case-lambda
       ((g$e$10235$eZ1vL)
        ((case-lambda
           ((g$t$10236$eZ1vL)
            ((case-lambda
               ((g$ls/false$10237$eZ1vL)
                (if g$ls/false$10237$eZ1vL
                  (apply
                    (case-lambda
                      ((g$export*$10238$eZ1vL g$b*$10239$eZ1vL)
                       (begin
                         (if (not (g$for-all$5061$eZ1vL
                                    g$id?$7719$eZ1vL
                                    g$export*$10238$eZ1vL))
                           (g$syntax-violation$8109$eZ1vL
                             '#f
                             '"module exports must be identifiers"
                             g$e$10235$eZ1vL)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$10238$eZ1vL)
                           g$b*$10239$eZ1vL))))
                    g$ls/false$10237$eZ1vL)
                  ((case-lambda
                     ((g$t$10240$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$10241$eZ1vL)
                          (if g$ls/false$10241$eZ1vL
                            (apply
                              (case-lambda
                                ((g$name$10242$eZ1vL
                                   g$export*$10243$eZ1vL
                                   g$b*$10244$eZ1vL)
                                 (begin
                                   (if (not (g$id?$7719$eZ1vL
                                              g$name$10242$eZ1vL))
                                     (g$syntax-violation$8109$eZ1vL
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$10235$eZ1vL)
                                     (void))
                                   (if (not (g$for-all$5061$eZ1vL
                                              g$id?$7719$eZ1vL
                                              g$export*$10243$eZ1vL))
                                     (g$syntax-violation$8109$eZ1vL
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$10235$eZ1vL)
                                     (void))
                                   (values
                                     g$name$10242$eZ1vL
                                     (list->vector g$export*$10243$eZ1vL)
                                     g$b*$10244$eZ1vL))))
                              g$ls/false$10241$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$10240$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$10240$eZ1vL
                         '(_ any each-any . each-any)))))
                   g$t$10236$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$10236$eZ1vL
               '(_ each-any . each-any)))))
         g$e$10235$eZ1vL))))
   (g$9071$8028$eZ1vL
     g$9071$11531$eZ1vL
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9074$eZ1vL
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$9073$8029$eZ1vL g$9073$11532$eZ1vL '#f)
   (g$9072$8030$eZ1vL
     g$9072$11533$eZ1vL
     (make-record-constructor-descriptor
       g$9071$8028$eZ1vL
       '#f
       g$9073$8029$eZ1vL))
   (g$module-interface?$8031$eZ1vL
     g$module-interface?$11534$eZ1vL
     (record-predicate g$9071$8028$eZ1vL))
   (g$make-module-interface$8032$eZ1vL
     g$make-module-interface$11535$eZ1vL
     (record-constructor g$9072$8030$eZ1vL))
   (g$module-interface-first-mark$8033$eZ1vL
     g$module-interface-first-mark$11536$eZ1vL
     (record-accessor g$9071$8028$eZ1vL '0))
   (g$module-interface-exp-id-vec$8034$eZ1vL
     g$module-interface-exp-id-vec$11537$eZ1vL
     (record-accessor g$9071$8028$eZ1vL '1))
   (g$module-interface-exp-lab-vec$8035$eZ1vL
     g$module-interface-exp-lab-vec$11538$eZ1vL
     (record-accessor g$9071$8028$eZ1vL '2))
   (g$set-module-interface-first-mark!$8036$eZ1vL
     g$set-module-interface-first-mark!$11539$eZ1vL
     (record-mutator g$9071$8028$eZ1vL '0))
   (g$set-module-interface-exp-id-vec!$8037$eZ1vL
     g$set-module-interface-exp-id-vec!$11540$eZ1vL
     (record-mutator g$9071$8028$eZ1vL '1))
   (g$set-module-interface-exp-lab-vec!$8038$eZ1vL
     g$set-module-interface-exp-lab-vec!$11541$eZ1vL
     (record-mutator g$9071$8028$eZ1vL '2))
   (g$module-interface-exp-id*$8039$eZ1vL
     g$module-interface-exp-id*$11542$eZ1vL
     (case-lambda
       ((g$iface$10245$eZ1vL g$id$10246$eZ1vL)
        (letrec* ((g$diff-marks$10247$eZ1vL
                    (case-lambda
                      ((g$ls$10251$eZ1vL g$x$10252$eZ1vL)
                       (begin
                         (if (null? g$ls$10251$eZ1vL)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$10253$eZ1vL)
                             (if (eq? g$a$10253$eZ1vL g$x$10252$eZ1vL)
                               '()
                               (cons
                                 g$a$10253$eZ1vL
                                 (g$diff-marks$10247$eZ1vL
                                   (cdr g$ls$10251$eZ1vL)
                                   g$x$10252$eZ1vL)))))
                          (car g$ls$10251$eZ1vL)))))))
          ((case-lambda
             ((g$diff$10248$eZ1vL g$id-vec$10249$eZ1vL)
              (if (null? g$diff$10248$eZ1vL)
                g$id-vec$10249$eZ1vL
                (vector-map
                  (case-lambda
                    ((g$x$10250$eZ1vL)
                     (g$make-stx$7692$eZ1vL
                       (g$stx-expr$7693$eZ1vL g$x$10250$eZ1vL)
                       (append
                         g$diff$10248$eZ1vL
                         (g$stx-mark*$7694$eZ1vL g$x$10250$eZ1vL))
                       '()
                       '())))
                  g$id-vec$10249$eZ1vL))))
           (g$diff-marks$10247$eZ1vL
             (g$stx-mark*$7694$eZ1vL g$id$10246$eZ1vL)
             (g$module-interface-first-mark$8033$eZ1vL g$iface$10245$eZ1vL))
           (g$module-interface-exp-id-vec$8034$eZ1vL g$iface$10245$eZ1vL))))))
   (g$chi-internal-module$8040$eZ1vL
     g$chi-internal-module$11543$eZ1vL
     (case-lambda
       ((g$e$10254$eZ1vL
          g$r$10255$eZ1vL
          g$mr$10256$eZ1vL
          g$lex*$10257$eZ1vL
          g$rhs*$10258$eZ1vL
          g$mod**$10259$eZ1vL
          g$kwd*$10260$eZ1vL)
        (call-with-values
          (case-lambda (() (g$parse-module$8027$eZ1vL g$e$10254$eZ1vL)))
          (case-lambda
            ((g$name$10264$eZ1vL g$exp-id*$10265$eZ1vL g$e*$10266$eZ1vL)
             ((case-lambda
                ((g$e*$10267$eZ1vL g$exp-id*$10268$eZ1vL g$name$10269$eZ1vL)
                 ((case-lambda
                    ((g$rib$10270$eZ1vL)
                     ((case-lambda
                        ((g$e*$10271$eZ1vL)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$8041$eZ1vL
                                g$e*$10271$eZ1vL
                                g$r$10255$eZ1vL
                                g$mr$10256$eZ1vL
                                g$lex*$10257$eZ1vL
                                g$rhs*$10258$eZ1vL
                                g$mod**$10259$eZ1vL
                                g$kwd*$10260$eZ1vL
                                '()
                                g$rib$10270$eZ1vL
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$10280$eZ1vL
                                g$r$10281$eZ1vL
                                g$mr$10282$eZ1vL
                                g$lex*$10283$eZ1vL
                                g$rhs*$10284$eZ1vL
                                g$mod**$10285$eZ1vL
                                g$kwd*$10286$eZ1vL
                                g$_exp*$10287$eZ1vL)
                              ((case-lambda
                                 ((g$_exp*$10288$eZ1vL
                                    g$kwd*$10289$eZ1vL
                                    g$mod**$10290$eZ1vL
                                    g$rhs*$10291$eZ1vL
                                    g$lex*$10292$eZ1vL
                                    g$mr$10293$eZ1vL
                                    g$r$10294$eZ1vL
                                    g$e*$10295$eZ1vL)
                                  ((case-lambda
                                     ((g$exp-lab*$10296$eZ1vL
                                        g$mod**$10297$eZ1vL)
                                      (if (not g$name$10269$eZ1vL)
                                        (values
                                          g$lex*$10292$eZ1vL
                                          g$rhs*$10291$eZ1vL
                                          g$exp-id*$10268$eZ1vL
                                          g$exp-lab*$10296$eZ1vL
                                          g$r$10294$eZ1vL
                                          g$mr$10293$eZ1vL
                                          g$mod**$10297$eZ1vL
                                          g$kwd*$10289$eZ1vL)
                                        ((case-lambda
                                           ((g$lab$10298$eZ1vL
                                              g$iface$10299$eZ1vL)
                                            (values
                                              g$lex*$10292$eZ1vL
                                              g$rhs*$10291$eZ1vL
                                              (vector g$name$10269$eZ1vL)
                                              (vector g$lab$10298$eZ1vL)
                                              (cons
                                                (cons
                                                  g$lab$10298$eZ1vL
                                                  (cons
                                                    '$module
                                                    g$iface$10299$eZ1vL))
                                                g$r$10294$eZ1vL)
                                              (cons
                                                (cons
                                                  g$lab$10298$eZ1vL
                                                  (cons
                                                    '$module
                                                    g$iface$10299$eZ1vL))
                                                g$mr$10293$eZ1vL)
                                              g$mod**$10297$eZ1vL
                                              g$kwd*$10289$eZ1vL)))
                                         (g$gen-label$7660$eZ1vL 'module)
                                         (g$make-module-interface$8032$eZ1vL
                                           (car (g$stx-mark*$7694$eZ1vL
                                                  g$name$10269$eZ1vL))
                                           (vector-map
                                             (case-lambda
                                               ((g$x$10300$eZ1vL)
                                                (g$make-stx$7692$eZ1vL
                                                  (g$stx-expr$7693$eZ1vL
                                                    g$x$10300$eZ1vL)
                                                  (g$stx-mark*$7694$eZ1vL
                                                    g$x$10300$eZ1vL)
                                                  '()
                                                  '())))
                                             g$exp-id*$10268$eZ1vL)
                                           g$exp-lab*$10296$eZ1vL)))))
                                   (vector-map
                                     (case-lambda
                                       ((g$x$10301$eZ1vL)
                                        ((case-lambda
                                           ((g$t$10302$eZ1vL)
                                            (if g$t$10302$eZ1vL
                                              g$t$10302$eZ1vL
                                              (begin
                                                '#f
                                                (g$syntax-violation$8109$eZ1vL
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$10301$eZ1vL)))))
                                         (g$id->label$7732$eZ1vL
                                           (g$make-stx$7692$eZ1vL
                                             (g$id->sym$7720$eZ1vL
                                               g$x$10301$eZ1vL)
                                             (g$stx-mark*$7694$eZ1vL
                                               g$x$10301$eZ1vL)
                                             (list g$rib$10270$eZ1vL)
                                             '())))))
                                     g$exp-id*$10268$eZ1vL)
                                   (cons
                                     g$e*$10295$eZ1vL
                                     g$mod**$10290$eZ1vL))))
                               g$_exp*$10287$eZ1vL
                               g$kwd*$10286$eZ1vL
                               g$mod**$10285$eZ1vL
                               g$rhs*$10284$eZ1vL
                               g$lex*$10283$eZ1vL
                               g$mr$10282$eZ1vL
                               g$r$10281$eZ1vL
                               g$e*$10280$eZ1vL))))))
                      (g$map$5063$eZ1vL
                        (case-lambda
                          ((g$x$10303$eZ1vL)
                           (g$add-subst$7709$eZ1vL
                             g$rib$10270$eZ1vL
                             g$x$10303$eZ1vL)))
                        (g$syntax->list$7718$eZ1vL g$e*$10267$eZ1vL)))))
                  (g$make-empty-rib$7679$eZ1vL))))
              g$e*$10266$eZ1vL
              g$exp-id*$10265$eZ1vL
              g$name$10264$eZ1vL)))))))
   (g$chi-body*$8041$eZ1vL
     g$chi-body*$11544$eZ1vL
     (case-lambda
       ((g$e*$10304$eZ1vL
          g$r$10305$eZ1vL
          g$mr$10306$eZ1vL
          g$lex*$10307$eZ1vL
          g$rhs*$10308$eZ1vL
          g$mod**$10309$eZ1vL
          g$kwd*$10310$eZ1vL
          g$exp*$10311$eZ1vL
          g$rib$10312$eZ1vL
          g$mix?$10313$eZ1vL
          g$sd?$10314$eZ1vL)
        (if (null? g$e*$10304$eZ1vL)
          (values
            g$e*$10304$eZ1vL
            g$r$10305$eZ1vL
            g$mr$10306$eZ1vL
            g$lex*$10307$eZ1vL
            g$rhs*$10308$eZ1vL
            g$mod**$10309$eZ1vL
            g$kwd*$10310$eZ1vL
            g$exp*$10311$eZ1vL)
          ((case-lambda
             ((g$e$10315$eZ1vL)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7739$eZ1vL g$e$10315$eZ1vL g$r$10305$eZ1vL)))
                (case-lambda
                  ((g$type$10319$eZ1vL g$value$10320$eZ1vL g$kwd$10321$eZ1vL)
                   ((case-lambda
                      ((g$kwd$10322$eZ1vL
                         g$value$10323$eZ1vL
                         g$type$10324$eZ1vL)
                       ((case-lambda
                          ((g$kwd*$10325$eZ1vL)
                           ((case-lambda
                              ((g$t$10326$eZ1vL)
                               (if (g$memv$5056$eZ1vL g$t$10326$eZ1vL '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7937$eZ1vL
                                        g$e$10315$eZ1vL)))
                                   (case-lambda
                                     ((g$id$10329$eZ1vL g$rhs$10330$eZ1vL)
                                      ((case-lambda
                                         ((g$rhs$10331$eZ1vL g$id$10332$eZ1vL)
                                          (begin
                                            (if (g$bound-id-member?$7726$eZ1vL
                                                  g$id$10332$eZ1vL
                                                  g$kwd*$10325$eZ1vL)
                                              (g$syntax-violation$8109$eZ1vL
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$10315$eZ1vL)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7662$eZ1vL
                                                   g$id$10332$eZ1vL
                                                   g$rib$10312$eZ1vL
                                                   g$sd?$10314$eZ1vL)))
                                              (case-lambda
                                                ((g$lab$10335$eZ1vL
                                                   g$lex$10336$eZ1vL)
                                                 ((case-lambda
                                                    ((g$lex$10337$eZ1vL
                                                       g$lab$10338$eZ1vL)
                                                     (begin
                                                       (g$extend-rib!$7682$eZ1vL
                                                         g$rib$10312$eZ1vL
                                                         g$id$10332$eZ1vL
                                                         g$lab$10338$eZ1vL
                                                         g$sd?$10314$eZ1vL)
                                                       (g$chi-body*$8041$eZ1vL
                                                         (cdr g$e*$10304$eZ1vL)
                                                         (g$add-lexical$7944$eZ1vL
                                                           g$lab$10338$eZ1vL
                                                           g$lex$10337$eZ1vL
                                                           g$r$10305$eZ1vL)
                                                         g$mr$10306$eZ1vL
                                                         (cons
                                                           g$lex$10337$eZ1vL
                                                           g$lex*$10307$eZ1vL)
                                                         (cons
                                                           g$rhs$10331$eZ1vL
                                                           g$rhs*$10308$eZ1vL)
                                                         g$mod**$10309$eZ1vL
                                                         g$kwd*$10325$eZ1vL
                                                         g$exp*$10311$eZ1vL
                                                         g$rib$10312$eZ1vL
                                                         g$mix?$10313$eZ1vL
                                                         g$sd?$10314$eZ1vL))))
                                                  g$lex$10336$eZ1vL
                                                  g$lab$10335$eZ1vL)))))))
                                       g$rhs$10330$eZ1vL
                                       g$id$10329$eZ1vL))))
                                 (if (g$memv$5056$eZ1vL
                                       g$t$10326$eZ1vL
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7938$eZ1vL
                                          g$e$10315$eZ1vL)))
                                     (case-lambda
                                       ((g$id$10341$eZ1vL g$rhs$10342$eZ1vL)
                                        ((case-lambda
                                           ((g$rhs$10343$eZ1vL g$id$10344$eZ1vL)
                                            (begin
                                              (if (g$bound-id-member?$7726$eZ1vL
                                                    g$id$10344$eZ1vL
                                                    g$kwd*$10325$eZ1vL)
                                                (g$syntax-violation$8109$eZ1vL
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$10315$eZ1vL)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$10345$eZ1vL)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$10346$eZ1vL)
                                                      (begin
                                                        (g$extend-rib!$7682$eZ1vL
                                                          g$rib$10312$eZ1vL
                                                          g$id$10344$eZ1vL
                                                          g$lab$10345$eZ1vL
                                                          g$sd?$10314$eZ1vL)
                                                        ((case-lambda
                                                           ((g$b$10347$eZ1vL)
                                                            (g$chi-body*$8041$eZ1vL
                                                              (cdr g$e*$10304$eZ1vL)
                                                              (cons
                                                                (cons
                                                                  g$lab$10345$eZ1vL
                                                                  g$b$10347$eZ1vL)
                                                                g$r$10305$eZ1vL)
                                                              (cons
                                                                (cons
                                                                  g$lab$10345$eZ1vL
                                                                  g$b$10347$eZ1vL)
                                                                g$mr$10306$eZ1vL)
                                                              g$lex*$10307$eZ1vL
                                                              g$rhs*$10308$eZ1vL
                                                              g$mod**$10309$eZ1vL
                                                              g$kwd*$10325$eZ1vL
                                                              g$exp*$10311$eZ1vL
                                                              g$rib$10312$eZ1vL
                                                              g$mix?$10313$eZ1vL
                                                              g$sd?$10314$eZ1vL)))
                                                         (g$make-eval-transformer$7751$eZ1vL
                                                           g$expanded-rhs$10346$eZ1vL)))))
                                                   (g$expand-transformer$8042$eZ1vL
                                                     g$rhs$10343$eZ1vL
                                                     g$mr$10306$eZ1vL))))
                                               (g$gen-define-label$7663$eZ1vL
                                                 g$id$10344$eZ1vL
                                                 g$rib$10312$eZ1vL
                                                 g$sd?$10314$eZ1vL)))))
                                         g$rhs$10342$eZ1vL
                                         g$id$10341$eZ1vL))))
                                   (if (g$memv$5056$eZ1vL
                                         g$t$10326$eZ1vL
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$10348$eZ1vL)
                                         ((case-lambda
                                            ((g$ls/false$10349$eZ1vL)
                                             (if (if g$ls/false$10349$eZ1vL
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$10350$eZ1vL
                                                            g$xrhs*$10351$eZ1vL
                                                            g$xbody*$10352$eZ1vL)
                                                          (if (not (g$valid-bound-ids?$7724$eZ1vL
                                                                     g$xlhs*$10350$eZ1vL))
                                                            (g$syntax-violation$8109$eZ1vL
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$10315$eZ1vL)
                                                            (void))))
                                                       g$ls/false$10349$eZ1vL))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$10353$eZ1vL
                                                      g$xrhs*$10354$eZ1vL
                                                      g$xbody*$10355$eZ1vL)
                                                    ((case-lambda
                                                       ((g$xlab*$10356$eZ1vL)
                                                        ((case-lambda
                                                           ((g$xrib$10357$eZ1vL)
                                                            ((case-lambda
                                                               ((g$xb*$10358$eZ1vL)
                                                                (g$chi-body*$8041$eZ1vL
                                                                  (append
                                                                    (g$map$5063$eZ1vL
                                                                      (case-lambda
                                                                        ((g$x$10359$eZ1vL)
                                                                         (g$add-subst$7709$eZ1vL
                                                                           g$xrib$10357$eZ1vL
                                                                           g$x$10359$eZ1vL)))
                                                                      g$xbody*$10355$eZ1vL)
                                                                    (cdr g$e*$10304$eZ1vL))
                                                                  (append
                                                                    (g$map$5063$eZ1vL
                                                                      cons
                                                                      g$xlab*$10356$eZ1vL
                                                                      g$xb*$10358$eZ1vL)
                                                                    g$r$10305$eZ1vL)
                                                                  (append
                                                                    (g$map$5063$eZ1vL
                                                                      cons
                                                                      g$xlab*$10356$eZ1vL
                                                                      g$xb*$10358$eZ1vL)
                                                                    g$mr$10306$eZ1vL)
                                                                  g$lex*$10307$eZ1vL
                                                                  g$rhs*$10308$eZ1vL
                                                                  g$mod**$10309$eZ1vL
                                                                  g$kwd*$10325$eZ1vL
                                                                  g$exp*$10311$eZ1vL
                                                                  g$rib$10312$eZ1vL
                                                                  g$mix?$10313$eZ1vL
                                                                  g$sd?$10314$eZ1vL)))
                                                             (g$map$5063$eZ1vL
                                                               (case-lambda
                                                                 ((g$x$10360$eZ1vL)
                                                                  (g$make-eval-transformer$7751$eZ1vL
                                                                    (g$expand-transformer$8042$eZ1vL
                                                                      (if (eq? g$type$10324$eZ1vL
                                                                               'let-syntax)
                                                                        g$x$10360$eZ1vL
                                                                        (g$add-subst$7709$eZ1vL
                                                                          g$xrib$10357$eZ1vL
                                                                          g$x$10360$eZ1vL))
                                                                      g$mr$10306$eZ1vL))))
                                                               g$xrhs*$10354$eZ1vL))))
                                                         (g$make-full-rib$7687$eZ1vL
                                                           g$xlhs*$10353$eZ1vL
                                                           g$xlab*$10356$eZ1vL))))
                                                     (g$map$5063$eZ1vL
                                                       g$gen-label$7660$eZ1vL
                                                       g$xlhs*$10353$eZ1vL))))
                                                 g$ls/false$10349$eZ1vL)
                                               (g$syntax-violation$8109$eZ1vL
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10348$eZ1vL))))
                                          (g$syntax-dispatch$7997$eZ1vL
                                            g$t$10348$eZ1vL
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$10315$eZ1vL)
                                     (if (g$memv$5056$eZ1vL
                                           g$t$10326$eZ1vL
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$10361$eZ1vL)
                                           ((case-lambda
                                              ((g$ls/false$10362$eZ1vL)
                                               (if g$ls/false$10362$eZ1vL
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$10363$eZ1vL)
                                                      (g$chi-body*$8041$eZ1vL
                                                        (append
                                                          g$x*$10363$eZ1vL
                                                          (cdr g$e*$10304$eZ1vL))
                                                        g$r$10305$eZ1vL
                                                        g$mr$10306$eZ1vL
                                                        g$lex*$10307$eZ1vL
                                                        g$rhs*$10308$eZ1vL
                                                        g$mod**$10309$eZ1vL
                                                        g$kwd*$10325$eZ1vL
                                                        g$exp*$10311$eZ1vL
                                                        g$rib$10312$eZ1vL
                                                        g$mix?$10313$eZ1vL
                                                        g$sd?$10314$eZ1vL)))
                                                   g$ls/false$10362$eZ1vL)
                                                 (g$syntax-violation$8109$eZ1vL
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$10361$eZ1vL))))
                                            (g$syntax-dispatch$7997$eZ1vL
                                              g$t$10361$eZ1vL
                                              '(_ . each-any)))))
                                        g$e$10315$eZ1vL)
                                       (if (g$memv$5056$eZ1vL
                                             g$t$10326$eZ1vL
                                             '(global-macro global-macro!))
                                         (g$chi-body*$8041$eZ1vL
                                           (cons
                                             (g$add-subst$7709$eZ1vL
                                               g$rib$10312$eZ1vL
                                               (g$chi-global-macro$8012$eZ1vL
                                                 g$value$10323$eZ1vL
                                                 g$e$10315$eZ1vL))
                                             (cdr g$e*$10304$eZ1vL))
                                           g$r$10305$eZ1vL
                                           g$mr$10306$eZ1vL
                                           g$lex*$10307$eZ1vL
                                           g$rhs*$10308$eZ1vL
                                           g$mod**$10309$eZ1vL
                                           g$kwd*$10325$eZ1vL
                                           g$exp*$10311$eZ1vL
                                           g$rib$10312$eZ1vL
                                           g$mix?$10313$eZ1vL
                                           g$sd?$10314$eZ1vL)
                                         (if (g$memv$5056$eZ1vL
                                               g$t$10326$eZ1vL
                                               '(local-macro local-macro!))
                                           (g$chi-body*$8041$eZ1vL
                                             (cons
                                               (g$add-subst$7709$eZ1vL
                                                 g$rib$10312$eZ1vL
                                                 (g$chi-local-macro$8011$eZ1vL
                                                   g$value$10323$eZ1vL
                                                   g$e$10315$eZ1vL))
                                               (cdr g$e*$10304$eZ1vL))
                                             g$r$10305$eZ1vL
                                             g$mr$10306$eZ1vL
                                             g$lex*$10307$eZ1vL
                                             g$rhs*$10308$eZ1vL
                                             g$mod**$10309$eZ1vL
                                             g$kwd*$10325$eZ1vL
                                             g$exp*$10311$eZ1vL
                                             g$rib$10312$eZ1vL
                                             g$mix?$10313$eZ1vL
                                             g$sd?$10314$eZ1vL)
                                           (if (g$memv$5056$eZ1vL
                                                 g$t$10326$eZ1vL
                                                 '(macro macro!))
                                             (g$chi-body*$8041$eZ1vL
                                               (cons
                                                 (g$add-subst$7709$eZ1vL
                                                   g$rib$10312$eZ1vL
                                                   (g$chi-macro$8010$eZ1vL
                                                     g$value$10323$eZ1vL
                                                     g$e$10315$eZ1vL))
                                                 (cdr g$e*$10304$eZ1vL))
                                               g$r$10305$eZ1vL
                                               g$mr$10306$eZ1vL
                                               g$lex*$10307$eZ1vL
                                               g$rhs*$10308$eZ1vL
                                               g$mod**$10309$eZ1vL
                                               g$kwd*$10325$eZ1vL
                                               g$exp*$10311$eZ1vL
                                               g$rib$10312$eZ1vL
                                               g$mix?$10313$eZ1vL
                                               g$sd?$10314$eZ1vL)
                                             (if (g$memv$5056$eZ1vL
                                                   g$t$10326$eZ1vL
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$8040$eZ1vL
                                                      g$e$10315$eZ1vL
                                                      g$r$10305$eZ1vL
                                                      g$mr$10306$eZ1vL
                                                      g$lex*$10307$eZ1vL
                                                      g$rhs*$10308$eZ1vL
                                                      g$mod**$10309$eZ1vL
                                                      g$kwd*$10325$eZ1vL)))
                                                 (case-lambda
                                                   ((g$lex*$10372$eZ1vL
                                                      g$rhs*$10373$eZ1vL
                                                      g$m-exp-id*$10374$eZ1vL
                                                      g$m-exp-lab*$10375$eZ1vL
                                                      g$r$10376$eZ1vL
                                                      g$mr$10377$eZ1vL
                                                      g$mod**$10378$eZ1vL
                                                      g$kwd*$10379$eZ1vL)
                                                    ((case-lambda
                                                       ((g$kwd*$10380$eZ1vL
                                                          g$mod**$10381$eZ1vL
                                                          g$mr$10382$eZ1vL
                                                          g$r$10383$eZ1vL
                                                          g$m-exp-lab*$10384$eZ1vL
                                                          g$m-exp-id*$10385$eZ1vL
                                                          g$rhs*$10386$eZ1vL
                                                          g$lex*$10387$eZ1vL)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$10388$eZ1vL
                                                                 g$lab$10389$eZ1vL)
                                                               (g$extend-rib!$7682$eZ1vL
                                                                 g$rib$10312$eZ1vL
                                                                 g$id$10388$eZ1vL
                                                                 g$lab$10389$eZ1vL
                                                                 g$sd?$10314$eZ1vL)))
                                                            g$m-exp-id*$10385$eZ1vL
                                                            g$m-exp-lab*$10384$eZ1vL)
                                                          (g$chi-body*$8041$eZ1vL
                                                            (cdr g$e*$10304$eZ1vL)
                                                            g$r$10383$eZ1vL
                                                            g$mr$10382$eZ1vL
                                                            g$lex*$10387$eZ1vL
                                                            g$rhs*$10386$eZ1vL
                                                            g$mod**$10381$eZ1vL
                                                            g$kwd*$10380$eZ1vL
                                                            g$exp*$10311$eZ1vL
                                                            g$rib$10312$eZ1vL
                                                            g$mix?$10313$eZ1vL
                                                            g$sd?$10314$eZ1vL))))
                                                     g$kwd*$10379$eZ1vL
                                                     g$mod**$10378$eZ1vL
                                                     g$mr$10377$eZ1vL
                                                     g$r$10376$eZ1vL
                                                     g$m-exp-lab*$10375$eZ1vL
                                                     g$m-exp-id*$10374$eZ1vL
                                                     g$rhs*$10373$eZ1vL
                                                     g$lex*$10372$eZ1vL))))
                                               (if (g$memv$5056$eZ1vL
                                                     g$t$10326$eZ1vL
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$8093$eZ1vL
                                                     (g$stx->datum$7730$eZ1vL
                                                       g$e$10315$eZ1vL))
                                                   (g$chi-body*$8041$eZ1vL
                                                     (cdr g$e*$10304$eZ1vL)
                                                     g$r$10305$eZ1vL
                                                     g$mr$10306$eZ1vL
                                                     g$lex*$10307$eZ1vL
                                                     g$rhs*$10308$eZ1vL
                                                     g$mod**$10309$eZ1vL
                                                     g$kwd*$10325$eZ1vL
                                                     g$exp*$10311$eZ1vL
                                                     g$rib$10312$eZ1vL
                                                     g$mix?$10313$eZ1vL
                                                     g$sd?$10314$eZ1vL))
                                                 (if (g$memv$5056$eZ1vL
                                                       g$t$10326$eZ1vL
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$10390$eZ1vL)
                                                       ((case-lambda
                                                          ((g$ls/false$10391$eZ1vL)
                                                           (if g$ls/false$10391$eZ1vL
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$10392$eZ1vL)
                                                                  (g$chi-body*$8041$eZ1vL
                                                                    (cdr g$e*$10304$eZ1vL)
                                                                    g$r$10305$eZ1vL
                                                                    g$mr$10306$eZ1vL
                                                                    g$lex*$10307$eZ1vL
                                                                    g$rhs*$10308$eZ1vL
                                                                    g$mod**$10309$eZ1vL
                                                                    g$kwd*$10325$eZ1vL
                                                                    (append
                                                                      g$exp-decl*$10392$eZ1vL
                                                                      g$exp*$10311$eZ1vL)
                                                                    g$rib$10312$eZ1vL
                                                                    g$mix?$10313$eZ1vL
                                                                    g$sd?$10314$eZ1vL)))
                                                               g$ls/false$10391$eZ1vL)
                                                             (g$syntax-violation$8109$eZ1vL
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$10390$eZ1vL))))
                                                        (g$syntax-dispatch$7997$eZ1vL
                                                          g$t$10390$eZ1vL
                                                          '(_ . each-any)))))
                                                    g$e$10315$eZ1vL)
                                                   (if (g$memv$5056$eZ1vL
                                                         g$t$10326$eZ1vL
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$10393$eZ1vL
                                                                     (case-lambda
                                                                       ((g$e$10435$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$t$10436$eZ1vL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10437$eZ1vL)
                                                                                (if (if g$ls/false$10437$eZ1vL
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10438$eZ1vL)
                                                                                             (g$id?$7719$eZ1vL
                                                                                               g$id$10438$eZ1vL)))
                                                                                          g$ls/false$10437$eZ1vL))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10439$eZ1vL)
                                                                                       '#t))
                                                                                    g$ls/false$10437$eZ1vL)
                                                                                  ((case-lambda
                                                                                     ((g$t$10440$eZ1vL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10441$eZ1vL)
                                                                                          (if g$ls/false$10441$eZ1vL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10442$eZ1vL)
                                                                                                 '#f))
                                                                                              g$ls/false$10441$eZ1vL)
                                                                                            ((case-lambda
                                                                                               ((g$t$10443$eZ1vL)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10444$eZ1vL)
                                                                                                    (if g$ls/false$10444$eZ1vL
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$8109$eZ1vL
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10435$eZ1vL)))
                                                                                                        g$ls/false$10444$eZ1vL)
                                                                                                      (g$syntax-violation$8109$eZ1vL
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10443$eZ1vL))))
                                                                                                 (g$syntax-dispatch$7997$eZ1vL
                                                                                                   g$t$10443$eZ1vL
                                                                                                   '_))))
                                                                                             g$t$10440$eZ1vL))))
                                                                                       (g$syntax-dispatch$7997$eZ1vL
                                                                                         g$t$10440$eZ1vL
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10436$eZ1vL))))
                                                                             (g$syntax-dispatch$7997$eZ1vL
                                                                               g$t$10436$eZ1vL
                                                                               '(_ any)))))
                                                                         g$e$10435$eZ1vL))))
                                                                   (g$module-import$10394$eZ1vL
                                                                     (case-lambda
                                                                       ((g$e$10418$eZ1vL
                                                                          g$r$10419$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$t$10420$eZ1vL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10421$eZ1vL)
                                                                                (if (if g$ls/false$10421$eZ1vL
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10422$eZ1vL)
                                                                                             (g$id?$7719$eZ1vL
                                                                                               g$id$10422$eZ1vL)))
                                                                                          g$ls/false$10421$eZ1vL))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10423$eZ1vL)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7739$eZ1vL
                                                                                              g$id$10423$eZ1vL
                                                                                              g$r$10419$eZ1vL)))
                                                                                         (case-lambda
                                                                                           ((g$type$10427$eZ1vL
                                                                                              g$value$10428$eZ1vL
                                                                                              g$kwd$10429$eZ1vL)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$10430$eZ1vL
                                                                                                  g$value$10431$eZ1vL
                                                                                                  g$type$10432$eZ1vL)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10433$eZ1vL)
                                                                                                    (if (g$memv$5056$eZ1vL
                                                                                                          g$t$10433$eZ1vL
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10434$eZ1vL)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$8039$eZ1vL
                                                                                                              g$iface$10434$eZ1vL
                                                                                                              g$id$10423$eZ1vL)
                                                                                                            (g$module-interface-exp-lab-vec$8035$eZ1vL
                                                                                                              g$iface$10434$eZ1vL))))
                                                                                                       g$value$10431$eZ1vL)
                                                                                                      (g$syntax-violation$8109$eZ1vL
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10418$eZ1vL))))
                                                                                                 g$type$10432$eZ1vL)))
                                                                                             g$kwd$10429$eZ1vL
                                                                                             g$value$10428$eZ1vL
                                                                                             g$type$10427$eZ1vL))))))
                                                                                    g$ls/false$10421$eZ1vL)
                                                                                  (g$syntax-violation$8109$eZ1vL
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10420$eZ1vL))))
                                                                             (g$syntax-dispatch$7997$eZ1vL
                                                                               g$t$10420$eZ1vL
                                                                               '(_ any)))))
                                                                         g$e$10418$eZ1vL))))
                                                                   (g$library-import$10395$eZ1vL
                                                                     (case-lambda
                                                                       ((g$e$10404$eZ1vL)
                                                                        ((case-lambda
                                                                           ((g$t$10405$eZ1vL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10406$eZ1vL)
                                                                                (if g$ls/false$10406$eZ1vL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$10407$eZ1vL
                                                                                         g$imp*$10408$eZ1vL)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$8046$eZ1vL
                                                                                              (g$syntax->datum$8112$eZ1vL
                                                                                                g$imp*$10408$eZ1vL))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$10411$eZ1vL
                                                                                              g$subst-labels$10412$eZ1vL)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$10413$eZ1vL
                                                                                                  g$subst-names$10414$eZ1vL)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$10415$eZ1vL)
                                                                                                       (g$datum->stx$7702$eZ1vL
                                                                                                         g$ctxt$10407$eZ1vL
                                                                                                         g$name$10415$eZ1vL)))
                                                                                                    g$subst-names$10414$eZ1vL)
                                                                                                  g$subst-labels$10413$eZ1vL)))
                                                                                             g$subst-labels$10412$eZ1vL
                                                                                             g$subst-names$10411$eZ1vL))))))
                                                                                    g$ls/false$10406$eZ1vL)
                                                                                  ((case-lambda
                                                                                     ((g$t$10416$eZ1vL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10417$eZ1vL)
                                                                                          (if g$ls/false$10417$eZ1vL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8109$eZ1vL
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$10404$eZ1vL)))
                                                                                              g$ls/false$10417$eZ1vL)
                                                                                            (g$syntax-violation$8109$eZ1vL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10416$eZ1vL))))
                                                                                       (g$syntax-dispatch$7997$eZ1vL
                                                                                         g$t$10416$eZ1vL
                                                                                         '_))))
                                                                                   g$t$10405$eZ1vL))))
                                                                             (g$syntax-dispatch$7997$eZ1vL
                                                                               g$t$10405$eZ1vL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$10404$eZ1vL)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$10393$eZ1vL
                                                                        g$e$10315$eZ1vL)
                                                                    (g$module-import$10394$eZ1vL
                                                                      g$e$10315$eZ1vL
                                                                      g$r$10305$eZ1vL)
                                                                    (g$library-import$10395$eZ1vL
                                                                      g$e$10315$eZ1vL))))
                                                               (case-lambda
                                                                 ((g$id*$10398$eZ1vL
                                                                    g$lab*$10399$eZ1vL)
                                                                  ((case-lambda
                                                                     ((g$lab*$10400$eZ1vL
                                                                        g$id*$10401$eZ1vL)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$10402$eZ1vL
                                                                             g$lab$10403$eZ1vL)
                                                                           (g$extend-rib!$7682$eZ1vL
                                                                             g$rib$10312$eZ1vL
                                                                             g$id$10402$eZ1vL
                                                                             g$lab$10403$eZ1vL
                                                                             g$sd?$10314$eZ1vL)))
                                                                        g$id*$10401$eZ1vL
                                                                        g$lab*$10400$eZ1vL)))
                                                                   g$lab*$10399$eZ1vL
                                                                   g$id*$10398$eZ1vL))))
                                                             (g$chi-body*$8041$eZ1vL
                                                               (cdr g$e*$10304$eZ1vL)
                                                               g$r$10305$eZ1vL
                                                               g$mr$10306$eZ1vL
                                                               g$lex*$10307$eZ1vL
                                                               g$rhs*$10308$eZ1vL
                                                               g$mod**$10309$eZ1vL
                                                               g$kwd*$10325$eZ1vL
                                                               g$exp*$10311$eZ1vL
                                                               g$rib$10312$eZ1vL
                                                               g$mix?$10313$eZ1vL
                                                               g$sd?$10314$eZ1vL))))))
                                                     (if g$mix?$10313$eZ1vL
                                                       (g$chi-body*$8041$eZ1vL
                                                         (cdr g$e*$10304$eZ1vL)
                                                         g$r$10305$eZ1vL
                                                         g$mr$10306$eZ1vL
                                                         (cons
                                                           (g$gen-lexical$7658$eZ1vL
                                                             'dummy)
                                                           g$lex*$10307$eZ1vL)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$10315$eZ1vL)
                                                           g$rhs*$10308$eZ1vL)
                                                         g$mod**$10309$eZ1vL
                                                         g$kwd*$10325$eZ1vL
                                                         g$exp*$10311$eZ1vL
                                                         g$rib$10312$eZ1vL
                                                         '#t
                                                         g$sd?$10314$eZ1vL)
                                                       (values
                                                         g$e*$10304$eZ1vL
                                                         g$r$10305$eZ1vL
                                                         g$mr$10306$eZ1vL
                                                         g$lex*$10307$eZ1vL
                                                         g$rhs*$10308$eZ1vL
                                                         g$mod**$10309$eZ1vL
                                                         g$kwd*$10325$eZ1vL
                                                         g$exp*$10311$eZ1vL)))))))))))))))
                            g$type$10324$eZ1vL)))
                        (if (g$id?$7719$eZ1vL g$kwd$10322$eZ1vL)
                          (cons g$kwd$10322$eZ1vL g$kwd*$10310$eZ1vL)
                          g$kwd*$10310$eZ1vL))))
                    g$kwd$10321$eZ1vL
                    g$value$10320$eZ1vL
                    g$type$10319$eZ1vL))))))
           (car g$e*$10304$eZ1vL))))))
   (g$expand-transformer$8042$eZ1vL
     g$expand-transformer$11545$eZ1vL
     (case-lambda
       ((g$expr$10445$eZ1vL g$r$10446$eZ1vL)
        ((case-lambda
           ((g$rtc$10447$eZ1vL)
            ((case-lambda
               ((g$expanded-rhs$10448$eZ1vL)
                (begin
                  (g$for-each$5064$eZ1vL
                    ((case-lambda
                       ((g$mark-visit$10449$eZ1vL)
                        (case-lambda
                          ((g$x$10450$eZ1vL)
                           (begin
                             (g$invoke-library$7529$eZ1vL g$x$10450$eZ1vL)
                             (g$mark-visit$10449$eZ1vL g$x$10450$eZ1vL))))))
                     (g$vis-collector$8050$eZ1vL))
                    (g$rtc$10447$eZ1vL))
                  g$expanded-rhs$10448$eZ1vL)))
             ((case-lambda
                ((g$inv-collector$10455$eZ1vL
                   g$vis-collector$10456$eZ1vL
                   g$inv-collector$10457$eZ1vL
                   g$vis-collector$10458$eZ1vL)
                 ((case-lambda
                    ((g$swap$10459$eZ1vL)
                     (dynamic-wind
                       g$swap$10459$eZ1vL
                       (case-lambda
                         (()
                          (g$chi-expr$8015$eZ1vL
                            g$expr$10445$eZ1vL
                            g$r$10446$eZ1vL
                            g$r$10446$eZ1vL)))
                       g$swap$10459$eZ1vL)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10460$eZ1vL)
                           (begin
                             (g$inv-collector$10455$eZ1vL
                               g$inv-collector$10457$eZ1vL)
                             (set! g$inv-collector$10457$eZ1vL
                               g$t$10460$eZ1vL))))
                        (g$inv-collector$10455$eZ1vL))
                       ((case-lambda
                          ((g$t$10461$eZ1vL)
                           (begin
                             (g$vis-collector$10456$eZ1vL
                               g$vis-collector$10458$eZ1vL)
                             (set! g$vis-collector$10458$eZ1vL
                               g$t$10461$eZ1vL))))
                        (g$vis-collector$10456$eZ1vL))))))))
              g$inv-collector$8049$eZ1vL
              g$vis-collector$8050$eZ1vL
              g$rtc$10447$eZ1vL
              (case-lambda ((g$x$10462$eZ1vL) (values)))))))
         (g$make-collector$8048$eZ1vL)))))
   (g$parse-exports$8043$eZ1vL
     g$parse-exports$11546$eZ1vL
     (case-lambda
       ((g$exp*$10463$eZ1vL)
        ((letrec ((g$f$10464$eZ1vL
                    (case-lambda
                      ((g$exp*$10465$eZ1vL
                         g$int*$10466$eZ1vL
                         g$ext*$10467$eZ1vL)
                       (if (null? g$exp*$10465$eZ1vL)
                         (begin
                           (if (not (g$valid-bound-ids?$7724$eZ1vL
                                      g$ext*$10467$eZ1vL))
                             (g$syntax-violation$8109$eZ1vL
                               'export
                               '"invalid exports"
                               (g$find-dups$8025$eZ1vL g$ext*$10467$eZ1vL))
                             (void))
                           (values
                             (g$map$5063$eZ1vL
                               g$syntax->datum$8112$eZ1vL
                               g$ext*$10467$eZ1vL)
                             g$int*$10466$eZ1vL))
                         ((case-lambda
                            ((g$t$10468$eZ1vL)
                             ((case-lambda
                                ((g$ls/false$10469$eZ1vL)
                                 (if g$ls/false$10469$eZ1vL
                                   (apply
                                     (case-lambda
                                       ((g$rename$10470$eZ1vL
                                          g$i*$10471$eZ1vL
                                          g$e*$10472$eZ1vL)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$8112$eZ1vL
                                                              g$rename$10470$eZ1vL)
                                                            'rename)
                                                     (if (g$for-all$5061$eZ1vL
                                                           g$id?$7719$eZ1vL
                                                           g$i*$10471$eZ1vL)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5061$eZ1vL
                                                           g$id?$7719$eZ1vL
                                                           g$e*$10472$eZ1vL))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$8109$eZ1vL
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10465$eZ1vL))
                                            (void))
                                          (g$f$10464$eZ1vL
                                            (cdr g$exp*$10465$eZ1vL)
                                            (append
                                              g$i*$10471$eZ1vL
                                              g$int*$10466$eZ1vL)
                                            (append
                                              g$e*$10472$eZ1vL
                                              g$ext*$10467$eZ1vL)))))
                                     g$ls/false$10469$eZ1vL)
                                   ((case-lambda
                                      ((g$t$10473$eZ1vL)
                                       ((case-lambda
                                          ((g$ls/false$10474$eZ1vL)
                                           (if g$ls/false$10474$eZ1vL
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10475$eZ1vL)
                                                  (begin
                                                    (if (not (g$id?$7719$eZ1vL
                                                               g$ie$10475$eZ1vL))
                                                      (g$syntax-violation$8109$eZ1vL
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10475$eZ1vL)
                                                      (void))
                                                    (g$f$10464$eZ1vL
                                                      (cdr g$exp*$10465$eZ1vL)
                                                      (cons
                                                        g$ie$10475$eZ1vL
                                                        g$int*$10466$eZ1vL)
                                                      (cons
                                                        g$ie$10475$eZ1vL
                                                        g$ext*$10467$eZ1vL)))))
                                               g$ls/false$10474$eZ1vL)
                                             (g$syntax-violation$8109$eZ1vL
                                               '#f
                                               '"invalid syntax"
                                               g$t$10473$eZ1vL))))
                                        (g$syntax-dispatch$7997$eZ1vL
                                          g$t$10473$eZ1vL
                                          'any))))
                                    g$t$10468$eZ1vL))))
                              (g$syntax-dispatch$7997$eZ1vL
                                g$t$10468$eZ1vL
                                '(any . #(each (any any)))))))
                          (car g$exp*$10465$eZ1vL)))))))
           g$f$10464$eZ1vL)
         g$exp*$10463$eZ1vL
         '()
         '()))))
   (g$parse-library-name$8044$eZ1vL
     g$parse-library-name$11547$eZ1vL
     (case-lambda
       ((g$spec$10476$eZ1vL)
        (letrec* ((g$parse$10477$eZ1vL
                    (case-lambda
                      ((g$x$10484$eZ1vL)
                       ((case-lambda
                          ((g$t$10485$eZ1vL)
                           ((case-lambda
                              ((g$ls/false$10486$eZ1vL)
                               (if (if g$ls/false$10486$eZ1vL
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10487$eZ1vL)
                                            (g$for-all$5061$eZ1vL
                                              (case-lambda
                                                ((g$x$10488$eZ1vL)
                                                 ((case-lambda
                                                    ((g$x$10489$eZ1vL)
                                                     (if (integer?
                                                           g$x$10489$eZ1vL)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10489$eZ1vL))
                                                       '#f)))
                                                  (g$syntax->datum$8112$eZ1vL
                                                    g$x$10488$eZ1vL))))
                                              g$v*$10487$eZ1vL)))
                                         g$ls/false$10486$eZ1vL))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10490$eZ1vL)
                                      (values
                                        '()
                                        (g$map$5063$eZ1vL
                                          g$syntax->datum$8112$eZ1vL
                                          g$v*$10490$eZ1vL))))
                                   g$ls/false$10486$eZ1vL)
                                 ((case-lambda
                                    ((g$t$10491$eZ1vL)
                                     ((case-lambda
                                        ((g$ls/false$10492$eZ1vL)
                                         (if (if g$ls/false$10492$eZ1vL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10493$eZ1vL
                                                        g$rest$10494$eZ1vL)
                                                      (symbol?
                                                        (g$syntax->datum$8112$eZ1vL
                                                          g$x$10493$eZ1vL))))
                                                   g$ls/false$10492$eZ1vL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10495$eZ1vL
                                                  g$rest$10496$eZ1vL)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10477$eZ1vL
                                                       g$rest$10496$eZ1vL)))
                                                  (case-lambda
                                                    ((g$x*$10499$eZ1vL
                                                       g$v*$10500$eZ1vL)
                                                     ((case-lambda
                                                        ((g$v*$10501$eZ1vL
                                                           g$x*$10502$eZ1vL)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$8112$eZ1vL
                                                               g$x$10495$eZ1vL)
                                                             g$x*$10502$eZ1vL)
                                                           g$v*$10501$eZ1vL)))
                                                      g$v*$10500$eZ1vL
                                                      g$x*$10499$eZ1vL))))))
                                             g$ls/false$10492$eZ1vL)
                                           ((case-lambda
                                              ((g$t$10503$eZ1vL)
                                               ((case-lambda
                                                  ((g$ls/false$10504$eZ1vL)
                                                   (if g$ls/false$10504$eZ1vL
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10504$eZ1vL)
                                                     ((case-lambda
                                                        ((g$t$10505$eZ1vL)
                                                         ((case-lambda
                                                            ((g$ls/false$10506$eZ1vL)
                                                             (if g$ls/false$10506$eZ1vL
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8109$eZ1vL
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10476$eZ1vL)))
                                                                 g$ls/false$10506$eZ1vL)
                                                               (g$syntax-violation$8109$eZ1vL
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10505$eZ1vL))))
                                                          (g$syntax-dispatch$7997$eZ1vL
                                                            g$t$10505$eZ1vL
                                                            '_))))
                                                      g$t$10503$eZ1vL))))
                                                (g$syntax-dispatch$7997$eZ1vL
                                                  g$t$10503$eZ1vL
                                                  '()))))
                                            g$t$10491$eZ1vL))))
                                      (g$syntax-dispatch$7997$eZ1vL
                                        g$t$10491$eZ1vL
                                        '(any . any)))))
                                  g$t$10485$eZ1vL))))
                            (g$syntax-dispatch$7997$eZ1vL
                              g$t$10485$eZ1vL
                              '(each-any)))))
                        g$x$10484$eZ1vL)))))
          (call-with-values
            (case-lambda (() (g$parse$10477$eZ1vL g$spec$10476$eZ1vL)))
            (case-lambda
              ((g$name*$10480$eZ1vL g$ver*$10481$eZ1vL)
               ((case-lambda
                  ((g$ver*$10482$eZ1vL g$name*$10483$eZ1vL)
                   (begin
                     (if (null? g$name*$10483$eZ1vL)
                       (g$syntax-violation$8109$eZ1vL
                         '#f
                         '"empty library name"
                         g$spec$10476$eZ1vL)
                       (void))
                     (values g$name*$10483$eZ1vL g$ver*$10482$eZ1vL))))
                g$ver*$10481$eZ1vL
                g$name*$10480$eZ1vL))))))))
   (g$parse-library$8045$eZ1vL
     g$parse-library$11548$eZ1vL
     (case-lambda
       ((g$e$10507$eZ1vL)
        ((case-lambda
           ((g$t$10508$eZ1vL)
            ((case-lambda
               ((g$ls/false$10509$eZ1vL)
                (if (if g$ls/false$10509$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10510$eZ1vL
                               g$name*$10511$eZ1vL
                               g$export$10512$eZ1vL
                               g$exp*$10513$eZ1vL
                               g$import$10514$eZ1vL
                               g$imp*$10515$eZ1vL
                               g$b*$10516$eZ1vL)
                             (if (eq? (g$syntax->datum$8112$eZ1vL
                                        g$export$10512$eZ1vL)
                                      'export)
                               (if (eq? (g$syntax->datum$8112$eZ1vL
                                          g$import$10514$eZ1vL)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$8112$eZ1vL
                                          g$library$10510$eZ1vL)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10509$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10517$eZ1vL
                         g$name*$10518$eZ1vL
                         g$export$10519$eZ1vL
                         g$exp*$10520$eZ1vL
                         g$import$10521$eZ1vL
                         g$imp*$10522$eZ1vL
                         g$b*$10523$eZ1vL)
                       (values
                         g$name*$10518$eZ1vL
                         g$exp*$10520$eZ1vL
                         g$imp*$10522$eZ1vL
                         g$b*$10523$eZ1vL)))
                    g$ls/false$10509$eZ1vL)
                  ((case-lambda
                     ((g$t$10524$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$10525$eZ1vL)
                          (if g$ls/false$10525$eZ1vL
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8109$eZ1vL
                                   '#f
                                   '"malformed library"
                                   g$e$10507$eZ1vL)))
                              g$ls/false$10525$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$10524$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL g$t$10524$eZ1vL '_))))
                   g$t$10508$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$10508$eZ1vL
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10507$eZ1vL))))
   (g$parse-import-spec*$8046$eZ1vL
     g$parse-import-spec*$11549$eZ1vL
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10526$eZ1vL
                     (case-lambda
                       ((g$x$10787$eZ1vL)
                        (symbol?
                          (g$syntax->datum$8112$eZ1vL g$x$10787$eZ1vL)))))
                   (g$dup-error$10527$eZ1vL
                     (case-lambda
                       ((g$name$10786$eZ1vL)
                        (g$syntax-violation$8109$eZ1vL
                          'import
                          '"two imports with different bindings"
                          g$name$10786$eZ1vL))))
                   (g$merge-substs$10528$eZ1vL
                     (case-lambda
                       ((g$s$10777$eZ1vL g$subst$10778$eZ1vL)
                        (letrec* ((g$insert-to-subst$10779$eZ1vL
                                    (case-lambda
                                      ((g$a$10780$eZ1vL g$subst$10781$eZ1vL)
                                       ((case-lambda
                                          ((g$name$10782$eZ1vL
                                             g$label$10783$eZ1vL)
                                           ((case-lambda
                                              ((g$t$10784$eZ1vL)
                                               (if g$t$10784$eZ1vL
                                                 ((case-lambda
                                                    ((g$x$10785$eZ1vL)
                                                     (if (eq? (cdr g$x$10785$eZ1vL)
                                                              g$label$10783$eZ1vL)
                                                       g$subst$10781$eZ1vL
                                                       (g$dup-error$10527$eZ1vL
                                                         g$name$10782$eZ1vL))))
                                                  g$t$10784$eZ1vL)
                                                 (cons
                                                   g$a$10780$eZ1vL
                                                   g$subst$10781$eZ1vL))))
                                            (g$assq$5051$eZ1vL
                                              g$name$10782$eZ1vL
                                              g$subst$10781$eZ1vL))))
                                        (car g$a$10780$eZ1vL)
                                        (cdr g$a$10780$eZ1vL))))))
                          (if (null? g$s$10777$eZ1vL)
                            g$subst$10778$eZ1vL
                            (g$insert-to-subst$10779$eZ1vL
                              (car g$s$10777$eZ1vL)
                              (g$merge-substs$10528$eZ1vL
                                (cdr g$s$10777$eZ1vL)
                                g$subst$10778$eZ1vL)))))))
                   (g$exclude*$10529$eZ1vL
                     (case-lambda
                       ((g$sym*$10753$eZ1vL g$subst$10754$eZ1vL)
                        (letrec* ((g$exclude$10755$eZ1vL
                                    (case-lambda
                                      ((g$sym$10768$eZ1vL g$subst$10769$eZ1vL)
                                       (if (null? g$subst$10769$eZ1vL)
                                         (g$syntax-violation$8109$eZ1vL
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10768$eZ1vL)
                                         (if (eq? g$sym$10768$eZ1vL
                                                  (g$caar$5263$eZ1vL
                                                    g$subst$10769$eZ1vL))
                                           (values
                                             (g$cdar$5265$eZ1vL
                                               g$subst$10769$eZ1vL)
                                             (cdr g$subst$10769$eZ1vL))
                                           ((case-lambda
                                              ((g$a$10770$eZ1vL)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10755$eZ1vL
                                                      g$sym$10768$eZ1vL
                                                      (cdr g$subst$10769$eZ1vL))))
                                                 (case-lambda
                                                   ((g$old$10773$eZ1vL
                                                      g$subst$10774$eZ1vL)
                                                    ((case-lambda
                                                       ((g$subst$10775$eZ1vL
                                                          g$old$10776$eZ1vL)
                                                        (values
                                                          g$old$10776$eZ1vL
                                                          (cons
                                                            g$a$10770$eZ1vL
                                                            g$subst$10775$eZ1vL))))
                                                     g$subst$10774$eZ1vL
                                                     g$old$10773$eZ1vL))))))
                                            (car g$subst$10769$eZ1vL))))))))
                          (if (null? g$sym*$10753$eZ1vL)
                            (values '() g$subst$10754$eZ1vL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10755$eZ1vL
                                   (car g$sym*$10753$eZ1vL)
                                   g$subst$10754$eZ1vL)))
                              (case-lambda
                                ((g$old$10758$eZ1vL g$subst$10759$eZ1vL)
                                 ((case-lambda
                                    ((g$subst$10760$eZ1vL g$old$10761$eZ1vL)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10529$eZ1vL
                                            (cdr g$sym*$10753$eZ1vL)
                                            g$subst$10760$eZ1vL)))
                                       (case-lambda
                                         ((g$old*$10764$eZ1vL
                                            g$subst$10765$eZ1vL)
                                          ((case-lambda
                                             ((g$subst$10766$eZ1vL
                                                g$old*$10767$eZ1vL)
                                              (values
                                                (cons
                                                  g$old$10761$eZ1vL
                                                  g$old*$10767$eZ1vL)
                                                g$subst$10766$eZ1vL)))
                                           g$subst$10765$eZ1vL
                                           g$old*$10764$eZ1vL))))))
                                  g$subst$10759$eZ1vL
                                  g$old$10758$eZ1vL)))))))))
                   (g$find*$10530$eZ1vL
                     (case-lambda
                       ((g$sym*$10749$eZ1vL g$subst$10750$eZ1vL)
                        (g$map$5063$eZ1vL
                          (case-lambda
                            ((g$x$10751$eZ1vL)
                             ((case-lambda
                                ((g$t$10752$eZ1vL)
                                 (if g$t$10752$eZ1vL
                                   (cdr g$t$10752$eZ1vL)
                                   (g$syntax-violation$8109$eZ1vL
                                     'import
                                     '"cannot find identifier"
                                     g$x$10751$eZ1vL))))
                              (g$assq$5051$eZ1vL
                                g$x$10751$eZ1vL
                                g$subst$10750$eZ1vL))))
                          g$sym*$10749$eZ1vL))))
                   (g$rem*$10531$eZ1vL
                     (case-lambda
                       ((g$sym*$10745$eZ1vL g$subst$10746$eZ1vL)
                        ((letrec ((g$f$10747$eZ1vL
                                    (case-lambda
                                      ((g$subst$10748$eZ1vL)
                                       (if (null? g$subst$10748$eZ1vL)
                                         '()
                                         (if (g$memq$5055$eZ1vL
                                               (g$caar$5263$eZ1vL
                                                 g$subst$10748$eZ1vL)
                                               g$sym*$10745$eZ1vL)
                                           (g$f$10747$eZ1vL
                                             (cdr g$subst$10748$eZ1vL))
                                           (cons
                                             (car g$subst$10748$eZ1vL)
                                             (g$f$10747$eZ1vL
                                               (cdr g$subst$10748$eZ1vL)))))))))
                           g$f$10747$eZ1vL)
                         g$subst$10746$eZ1vL))))
                   (g$remove-dups$10532$eZ1vL
                     (case-lambda
                       ((g$ls$10744$eZ1vL)
                        (if (null? g$ls$10744$eZ1vL)
                          '()
                          (if (g$memq$5055$eZ1vL
                                (car g$ls$10744$eZ1vL)
                                (cdr g$ls$10744$eZ1vL))
                            (g$remove-dups$10532$eZ1vL (cdr g$ls$10744$eZ1vL))
                            (cons
                              (car g$ls$10744$eZ1vL)
                              (g$remove-dups$10532$eZ1vL
                                (cdr g$ls$10744$eZ1vL))))))))
                   (g$parse-library-name$10533$eZ1vL
                     (case-lambda
                       ((g$spec$10628$eZ1vL)
                        (letrec* ((g$subversion?$10629$eZ1vL
                                    (case-lambda
                                      ((g$x$10742$eZ1vL)
                                       ((case-lambda
                                          ((g$x$10743$eZ1vL)
                                           (if (integer? g$x$10743$eZ1vL)
                                             (if (exact? g$x$10743$eZ1vL)
                                               (begin
                                                 '#f
                                                 (>= g$x$10743$eZ1vL '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$8112$eZ1vL
                                          g$x$10742$eZ1vL)))))
                                  (g$subversion-pred$10630$eZ1vL
                                    (case-lambda
                                      ((g$x*$10694$eZ1vL)
                                       ((case-lambda
                                          ((g$t$10695$eZ1vL)
                                           ((case-lambda
                                              ((g$ls/false$10696$eZ1vL)
                                               (if (if g$ls/false$10696$eZ1vL
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10697$eZ1vL)
                                                            (g$subversion?$10629$eZ1vL
                                                              g$n$10697$eZ1vL)))
                                                         g$ls/false$10696$eZ1vL))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10698$eZ1vL)
                                                      (case-lambda
                                                        ((g$x$10699$eZ1vL)
                                                         (= g$x$10699$eZ1vL
                                                            (g$syntax->datum$8112$eZ1vL
                                                              g$n$10698$eZ1vL))))))
                                                   g$ls/false$10696$eZ1vL)
                                                 ((case-lambda
                                                    ((g$t$10700$eZ1vL)
                                                     ((case-lambda
                                                        ((g$ls/false$10701$eZ1vL)
                                                         (if (if g$ls/false$10701$eZ1vL
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10702$eZ1vL
                                                                        g$sub*$10703$eZ1vL)
                                                                      (eq? (g$syntax->datum$8112$eZ1vL
                                                                             g$p?$10702$eZ1vL)
                                                                           'and)))
                                                                   g$ls/false$10701$eZ1vL))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10704$eZ1vL
                                                                  g$sub*$10705$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$p*$10706$eZ1vL)
                                                                    (case-lambda
                                                                      ((g$x$10707$eZ1vL)
                                                                       (g$for-all$5061$eZ1vL
                                                                         (case-lambda
                                                                           ((g$p$10708$eZ1vL)
                                                                            (g$p$10708$eZ1vL
                                                                              g$x$10707$eZ1vL)))
                                                                         g$p*$10706$eZ1vL)))))
                                                                 (g$map$5063$eZ1vL
                                                                   g$subversion-pred$10630$eZ1vL
                                                                   g$sub*$10705$eZ1vL))))
                                                             g$ls/false$10701$eZ1vL)
                                                           ((case-lambda
                                                              ((g$t$10709$eZ1vL)
                                                               ((case-lambda
                                                                  ((g$ls/false$10710$eZ1vL)
                                                                   (if (if g$ls/false$10710$eZ1vL
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10711$eZ1vL
                                                                                  g$sub*$10712$eZ1vL)
                                                                                (eq? (g$syntax->datum$8112$eZ1vL
                                                                                       g$p?$10711$eZ1vL)
                                                                                     'or)))
                                                                             g$ls/false$10710$eZ1vL))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10713$eZ1vL
                                                                            g$sub*$10714$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$p*$10715$eZ1vL)
                                                                              (case-lambda
                                                                                ((g$x$10716$eZ1vL)
                                                                                 (g$exists$5062$eZ1vL
                                                                                   (case-lambda
                                                                                     ((g$p$10717$eZ1vL)
                                                                                      (g$p$10717$eZ1vL
                                                                                        g$x$10716$eZ1vL)))
                                                                                   g$p*$10715$eZ1vL)))))
                                                                           (g$map$5063$eZ1vL
                                                                             g$subversion-pred$10630$eZ1vL
                                                                             g$sub*$10714$eZ1vL))))
                                                                       g$ls/false$10710$eZ1vL)
                                                                     ((case-lambda
                                                                        ((g$t$10718$eZ1vL)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10719$eZ1vL)
                                                                             (if (if g$ls/false$10719$eZ1vL
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10720$eZ1vL
                                                                                            g$sub$10721$eZ1vL)
                                                                                          (eq? (g$syntax->datum$8112$eZ1vL
                                                                                                 g$p?$10720$eZ1vL)
                                                                                               'not)))
                                                                                       g$ls/false$10719$eZ1vL))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10722$eZ1vL
                                                                                      g$sub$10723$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$p$10724$eZ1vL)
                                                                                        (case-lambda
                                                                                          ((g$x$10725$eZ1vL)
                                                                                           (not (g$p$10724$eZ1vL
                                                                                                  g$x$10725$eZ1vL))))))
                                                                                     (g$subversion-pred$10630$eZ1vL
                                                                                       g$sub$10723$eZ1vL))))
                                                                                 g$ls/false$10719$eZ1vL)
                                                                               ((case-lambda
                                                                                  ((g$t$10726$eZ1vL)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10727$eZ1vL)
                                                                                       (if (if g$ls/false$10727$eZ1vL
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10728$eZ1vL
                                                                                                      g$n$10729$eZ1vL)
                                                                                                    (if (eq? (g$syntax->datum$8112$eZ1vL
                                                                                                               g$p?$10728$eZ1vL)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10629$eZ1vL
                                                                                                          g$n$10729$eZ1vL))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10727$eZ1vL))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10730$eZ1vL
                                                                                                g$n$10731$eZ1vL)
                                                                                              (case-lambda
                                                                                                ((g$x$10732$eZ1vL)
                                                                                                 (<= g$x$10732$eZ1vL
                                                                                                     (g$syntax->datum$8112$eZ1vL
                                                                                                       g$n$10731$eZ1vL))))))
                                                                                           g$ls/false$10727$eZ1vL)
                                                                                         ((case-lambda
                                                                                            ((g$t$10733$eZ1vL)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10734$eZ1vL)
                                                                                                 (if (if g$ls/false$10734$eZ1vL
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10735$eZ1vL
                                                                                                                g$n$10736$eZ1vL)
                                                                                                              (if (eq? (g$syntax->datum$8112$eZ1vL
                                                                                                                         g$p?$10735$eZ1vL)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10629$eZ1vL
                                                                                                                    g$n$10736$eZ1vL))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10734$eZ1vL))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10737$eZ1vL
                                                                                                          g$n$10738$eZ1vL)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10739$eZ1vL)
                                                                                                           (>= g$x$10739$eZ1vL
                                                                                                               (g$syntax->datum$8112$eZ1vL
                                                                                                                 g$n$10738$eZ1vL))))))
                                                                                                     g$ls/false$10734$eZ1vL)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10740$eZ1vL)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10741$eZ1vL)
                                                                                                           (if g$ls/false$10741$eZ1vL
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$8109$eZ1vL
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10628$eZ1vL
                                                                                                                    g$x*$10694$eZ1vL)))
                                                                                                               g$ls/false$10741$eZ1vL)
                                                                                                             (g$syntax-violation$8109$eZ1vL
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10740$eZ1vL))))
                                                                                                        (g$syntax-dispatch$7997$eZ1vL
                                                                                                          g$t$10740$eZ1vL
                                                                                                          '_))))
                                                                                                    g$t$10733$eZ1vL))))
                                                                                              (g$syntax-dispatch$7997$eZ1vL
                                                                                                g$t$10733$eZ1vL
                                                                                                '(any any)))))
                                                                                          g$t$10726$eZ1vL))))
                                                                                    (g$syntax-dispatch$7997$eZ1vL
                                                                                      g$t$10726$eZ1vL
                                                                                      '(any any)))))
                                                                                g$t$10718$eZ1vL))))
                                                                          (g$syntax-dispatch$7997$eZ1vL
                                                                            g$t$10718$eZ1vL
                                                                            '(any any)))))
                                                                      g$t$10709$eZ1vL))))
                                                                (g$syntax-dispatch$7997$eZ1vL
                                                                  g$t$10709$eZ1vL
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10700$eZ1vL))))
                                                      (g$syntax-dispatch$7997$eZ1vL
                                                        g$t$10700$eZ1vL
                                                        '(any . each-any)))))
                                                  g$t$10695$eZ1vL))))
                                            (g$syntax-dispatch$7997$eZ1vL
                                              g$t$10695$eZ1vL
                                              'any))))
                                        g$x*$10694$eZ1vL))))
                                  (g$version-pred$10631$eZ1vL
                                    (case-lambda
                                      ((g$x*$10654$eZ1vL)
                                       ((case-lambda
                                          ((g$t$10655$eZ1vL)
                                           ((case-lambda
                                              ((g$ls/false$10656$eZ1vL)
                                               (if g$ls/false$10656$eZ1vL
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10657$eZ1vL)
                                                         '#t))))
                                                   g$ls/false$10656$eZ1vL)
                                                 ((case-lambda
                                                    ((g$t$10658$eZ1vL)
                                                     ((case-lambda
                                                        ((g$ls/false$10659$eZ1vL)
                                                         (if (if g$ls/false$10659$eZ1vL
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10660$eZ1vL
                                                                        g$ver*$10661$eZ1vL)
                                                                      (eq? (g$syntax->datum$8112$eZ1vL
                                                                             g$c$10660$eZ1vL)
                                                                           'and)))
                                                                   g$ls/false$10659$eZ1vL))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10662$eZ1vL
                                                                  g$ver*$10663$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$p*$10664$eZ1vL)
                                                                    (case-lambda
                                                                      ((g$x$10665$eZ1vL)
                                                                       (g$for-all$5061$eZ1vL
                                                                         (case-lambda
                                                                           ((g$p$10666$eZ1vL)
                                                                            (g$p$10666$eZ1vL
                                                                              g$x$10665$eZ1vL)))
                                                                         g$p*$10664$eZ1vL)))))
                                                                 (g$map$5063$eZ1vL
                                                                   g$version-pred$10631$eZ1vL
                                                                   g$ver*$10663$eZ1vL))))
                                                             g$ls/false$10659$eZ1vL)
                                                           ((case-lambda
                                                              ((g$t$10667$eZ1vL)
                                                               ((case-lambda
                                                                  ((g$ls/false$10668$eZ1vL)
                                                                   (if (if g$ls/false$10668$eZ1vL
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10669$eZ1vL
                                                                                  g$ver*$10670$eZ1vL)
                                                                                (eq? (g$syntax->datum$8112$eZ1vL
                                                                                       g$c$10669$eZ1vL)
                                                                                     'or)))
                                                                             g$ls/false$10668$eZ1vL))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10671$eZ1vL
                                                                            g$ver*$10672$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$p*$10673$eZ1vL)
                                                                              (case-lambda
                                                                                ((g$x$10674$eZ1vL)
                                                                                 (g$exists$5062$eZ1vL
                                                                                   (case-lambda
                                                                                     ((g$p$10675$eZ1vL)
                                                                                      (g$p$10675$eZ1vL
                                                                                        g$x$10674$eZ1vL)))
                                                                                   g$p*$10673$eZ1vL)))))
                                                                           (g$map$5063$eZ1vL
                                                                             g$version-pred$10631$eZ1vL
                                                                             g$ver*$10672$eZ1vL))))
                                                                       g$ls/false$10668$eZ1vL)
                                                                     ((case-lambda
                                                                        ((g$t$10676$eZ1vL)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10677$eZ1vL)
                                                                             (if (if g$ls/false$10677$eZ1vL
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10678$eZ1vL
                                                                                            g$ver$10679$eZ1vL)
                                                                                          (eq? (g$syntax->datum$8112$eZ1vL
                                                                                                 g$c$10678$eZ1vL)
                                                                                               'not)))
                                                                                       g$ls/false$10677$eZ1vL))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10680$eZ1vL
                                                                                      g$ver$10681$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$p$10682$eZ1vL)
                                                                                        (case-lambda
                                                                                          ((g$x$10683$eZ1vL)
                                                                                           (not (g$p$10682$eZ1vL
                                                                                                  g$x$10683$eZ1vL))))))
                                                                                     (g$version-pred$10631$eZ1vL
                                                                                       g$ver$10681$eZ1vL))))
                                                                                 g$ls/false$10677$eZ1vL)
                                                                               ((case-lambda
                                                                                  ((g$t$10684$eZ1vL)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10685$eZ1vL)
                                                                                       (if g$ls/false$10685$eZ1vL
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10686$eZ1vL)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10687$eZ1vL)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10688$eZ1vL)
                                                                                                     ((letrec ((g$f$10689$eZ1vL
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10690$eZ1vL
                                                                                                                      g$x$10691$eZ1vL)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10690$eZ1vL)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10691$eZ1vL)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10690$eZ1vL)
                                                                                                                             (car g$x$10691$eZ1vL))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10689$eZ1vL
                                                                                                                              (cdr g$p*$10690$eZ1vL)
                                                                                                                              (cdr g$x$10691$eZ1vL)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10689$eZ1vL)
                                                                                                      g$p*$10687$eZ1vL
                                                                                                      g$x$10688$eZ1vL)))))
                                                                                               (g$map$5063$eZ1vL
                                                                                                 g$subversion-pred$10630$eZ1vL
                                                                                                 g$sub*$10686$eZ1vL))))
                                                                                           g$ls/false$10685$eZ1vL)
                                                                                         ((case-lambda
                                                                                            ((g$t$10692$eZ1vL)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10693$eZ1vL)
                                                                                                 (if g$ls/false$10693$eZ1vL
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$8109$eZ1vL
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10628$eZ1vL
                                                                                                          g$x*$10654$eZ1vL)))
                                                                                                     g$ls/false$10693$eZ1vL)
                                                                                                   (g$syntax-violation$8109$eZ1vL
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10692$eZ1vL))))
                                                                                              (g$syntax-dispatch$7997$eZ1vL
                                                                                                g$t$10692$eZ1vL
                                                                                                '_))))
                                                                                          g$t$10684$eZ1vL))))
                                                                                    (g$syntax-dispatch$7997$eZ1vL
                                                                                      g$t$10684$eZ1vL
                                                                                      'each-any))))
                                                                                g$t$10676$eZ1vL))))
                                                                          (g$syntax-dispatch$7997$eZ1vL
                                                                            g$t$10676$eZ1vL
                                                                            '(any any)))))
                                                                      g$t$10667$eZ1vL))))
                                                                (g$syntax-dispatch$7997$eZ1vL
                                                                  g$t$10667$eZ1vL
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10658$eZ1vL))))
                                                      (g$syntax-dispatch$7997$eZ1vL
                                                        g$t$10658$eZ1vL
                                                        '(any . each-any)))))
                                                  g$t$10655$eZ1vL))))
                                            (g$syntax-dispatch$7997$eZ1vL
                                              g$t$10655$eZ1vL
                                              '()))))
                                        g$x*$10654$eZ1vL)))))
                          ((letrec ((g$f$10632$eZ1vL
                                      (case-lambda
                                        ((g$x$10633$eZ1vL)
                                         ((case-lambda
                                            ((g$t$10634$eZ1vL)
                                             ((case-lambda
                                                ((g$ls/false$10635$eZ1vL)
                                                 (if g$ls/false$10635$eZ1vL
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10636$eZ1vL)
                                                        (values
                                                          '()
                                                          (g$version-pred$10631$eZ1vL
                                                            g$version-spec*$10636$eZ1vL))))
                                                     g$ls/false$10635$eZ1vL)
                                                   ((case-lambda
                                                      ((g$t$10637$eZ1vL)
                                                       ((case-lambda
                                                          ((g$ls/false$10638$eZ1vL)
                                                           (if (if g$ls/false$10638$eZ1vL
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10639$eZ1vL
                                                                          g$x*$10640$eZ1vL)
                                                                        (g$idsyn?$10526$eZ1vL
                                                                          g$x$10639$eZ1vL)))
                                                                     g$ls/false$10638$eZ1vL))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10641$eZ1vL
                                                                    g$x*$10642$eZ1vL)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10632$eZ1vL
                                                                         g$x*$10642$eZ1vL)))
                                                                    (case-lambda
                                                                      ((g$name$10645$eZ1vL
                                                                         g$pred$10646$eZ1vL)
                                                                       ((case-lambda
                                                                          ((g$pred$10647$eZ1vL
                                                                             g$name$10648$eZ1vL)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$8112$eZ1vL
                                                                                 g$x$10641$eZ1vL)
                                                                               g$name$10648$eZ1vL)
                                                                             g$pred$10647$eZ1vL)))
                                                                        g$pred$10646$eZ1vL
                                                                        g$name$10645$eZ1vL))))))
                                                               g$ls/false$10638$eZ1vL)
                                                             ((case-lambda
                                                                ((g$t$10649$eZ1vL)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10650$eZ1vL)
                                                                     (if g$ls/false$10650$eZ1vL
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10651$eZ1vL)
                                                                                 '#t)))))
                                                                         g$ls/false$10650$eZ1vL)
                                                                       ((case-lambda
                                                                          ((g$t$10652$eZ1vL)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10653$eZ1vL)
                                                                               (if g$ls/false$10653$eZ1vL
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$8109$eZ1vL
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10628$eZ1vL)))
                                                                                   g$ls/false$10653$eZ1vL)
                                                                                 (g$syntax-violation$8109$eZ1vL
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10652$eZ1vL))))
                                                                            (g$syntax-dispatch$7997$eZ1vL
                                                                              g$t$10652$eZ1vL
                                                                              '_))))
                                                                        g$t$10649$eZ1vL))))
                                                                  (g$syntax-dispatch$7997$eZ1vL
                                                                    g$t$10649$eZ1vL
                                                                    '()))))
                                                              g$t$10637$eZ1vL))))
                                                        (g$syntax-dispatch$7997$eZ1vL
                                                          g$t$10637$eZ1vL
                                                          '(any . any)))))
                                                    g$t$10634$eZ1vL))))
                                              (g$syntax-dispatch$7997$eZ1vL
                                                g$t$10634$eZ1vL
                                                '(each-any)))))
                                          g$x$10633$eZ1vL)))))
                             g$f$10632$eZ1vL)
                           g$spec$10628$eZ1vL)))))
                   (g$import-library$10534$eZ1vL
                     (case-lambda
                       ((g$spec*$10620$eZ1vL)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10533$eZ1vL
                               g$spec*$10620$eZ1vL)))
                          (case-lambda
                            ((g$name$10623$eZ1vL g$pred$10624$eZ1vL)
                             ((case-lambda
                                ((g$pred$10625$eZ1vL g$name$10626$eZ1vL)
                                 (begin
                                   (if (null? g$name$10626$eZ1vL)
                                     (g$syntax-violation$8109$eZ1vL
                                       'import
                                       '"empty library name"
                                       g$spec*$10620$eZ1vL)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10627$eZ1vL)
                                       (begin
                                         (if (not g$lib$10627$eZ1vL)
                                           (g$syntax-violation$8109$eZ1vL
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10626$eZ1vL)
                                           (void))
                                         (if (not (g$pred$10625$eZ1vL
                                                    (g$library-version$7482$eZ1vL
                                                      g$lib$10627$eZ1vL)))
                                           (g$syntax-violation$8109$eZ1vL
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10620$eZ1vL
                                             g$lib$10627$eZ1vL)
                                           (void))
                                         ((g$imp-collector$8051$eZ1vL)
                                          g$lib$10627$eZ1vL)
                                         (g$library-subst$7486$eZ1vL
                                           g$lib$10627$eZ1vL))))
                                    (g$find-library-by-name$7522$eZ1vL
                                      g$name$10626$eZ1vL)))))
                              g$pred$10624$eZ1vL
                              g$name$10623$eZ1vL)))))))
                   (g$get-import$10535$eZ1vL
                     (case-lambda
                       ((g$spec$10549$eZ1vL)
                        ((case-lambda
                           ((g$t$10550$eZ1vL)
                            ((case-lambda
                               ((g$ls/false$10551$eZ1vL)
                                (if (if g$ls/false$10551$eZ1vL
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10552$eZ1vL g$x*$10553$eZ1vL)
                                             (not (g$memq$5055$eZ1vL
                                                    (g$syntax->datum$8112$eZ1vL
                                                      g$x$10552$eZ1vL)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10551$eZ1vL))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10554$eZ1vL g$x*$10555$eZ1vL)
                                       (g$import-library$10534$eZ1vL
                                         (cons
                                           g$x$10554$eZ1vL
                                           g$x*$10555$eZ1vL))))
                                    g$ls/false$10551$eZ1vL)
                                  ((case-lambda
                                     ((g$t$10556$eZ1vL)
                                      ((case-lambda
                                         ((g$ls/false$10557$eZ1vL)
                                          (if (if g$ls/false$10557$eZ1vL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10558$eZ1vL
                                                         g$isp$10559$eZ1vL
                                                         g$old*$10560$eZ1vL
                                                         g$new*$10561$eZ1vL)
                                                       (if (eq? (g$syntax->datum$8112$eZ1vL
                                                                  g$rename$10558$eZ1vL)
                                                                'rename)
                                                         (if (g$for-all$5061$eZ1vL
                                                               g$idsyn?$10526$eZ1vL
                                                               g$old*$10560$eZ1vL)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5061$eZ1vL
                                                               g$idsyn?$10526$eZ1vL
                                                               g$new*$10561$eZ1vL))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10557$eZ1vL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10562$eZ1vL
                                                   g$isp$10563$eZ1vL
                                                   g$old*$10564$eZ1vL
                                                   g$new*$10565$eZ1vL)
                                                 ((case-lambda
                                                    ((g$subst$10566$eZ1vL
                                                       g$old*$10567$eZ1vL
                                                       g$new*$10568$eZ1vL)
                                                     ((case-lambda
                                                        ((g$old-label*$10569$eZ1vL)
                                                         ((case-lambda
                                                            ((g$subst$10570$eZ1vL)
                                                             (g$merge-substs$10528$eZ1vL
                                                               (g$map$5063$eZ1vL
                                                                 cons
                                                                 g$new*$10568$eZ1vL
                                                                 g$old-label*$10569$eZ1vL)
                                                               g$subst$10570$eZ1vL)))
                                                          (g$rem*$10531$eZ1vL
                                                            g$old*$10567$eZ1vL
                                                            g$subst$10566$eZ1vL))))
                                                      (g$find*$10530$eZ1vL
                                                        g$old*$10567$eZ1vL
                                                        g$subst$10566$eZ1vL))))
                                                  (g$get-import$10535$eZ1vL
                                                    g$isp$10563$eZ1vL)
                                                  (g$map$5063$eZ1vL
                                                    g$syntax->datum$8112$eZ1vL
                                                    g$old*$10564$eZ1vL)
                                                  (g$map$5063$eZ1vL
                                                    g$syntax->datum$8112$eZ1vL
                                                    g$new*$10565$eZ1vL))))
                                              g$ls/false$10557$eZ1vL)
                                            ((case-lambda
                                               ((g$t$10571$eZ1vL)
                                                ((case-lambda
                                                   ((g$ls/false$10572$eZ1vL)
                                                    (if (if g$ls/false$10572$eZ1vL
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10573$eZ1vL
                                                                   g$isp$10574$eZ1vL
                                                                   g$sym*$10575$eZ1vL)
                                                                 (if (eq? (g$syntax->datum$8112$eZ1vL
                                                                            g$except$10573$eZ1vL)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5061$eZ1vL
                                                                       g$idsyn?$10526$eZ1vL
                                                                       g$sym*$10575$eZ1vL))
                                                                   '#f)))
                                                              g$ls/false$10572$eZ1vL))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10576$eZ1vL
                                                             g$isp$10577$eZ1vL
                                                             g$sym*$10578$eZ1vL)
                                                           ((case-lambda
                                                              ((g$subst$10579$eZ1vL)
                                                               (g$rem*$10531$eZ1vL
                                                                 (g$map$5063$eZ1vL
                                                                   g$syntax->datum$8112$eZ1vL
                                                                   g$sym*$10578$eZ1vL)
                                                                 g$subst$10579$eZ1vL)))
                                                            (g$get-import$10535$eZ1vL
                                                              g$isp$10577$eZ1vL))))
                                                        g$ls/false$10572$eZ1vL)
                                                      ((case-lambda
                                                         ((g$t$10580$eZ1vL)
                                                          ((case-lambda
                                                             ((g$ls/false$10581$eZ1vL)
                                                              (if (if g$ls/false$10581$eZ1vL
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10582$eZ1vL
                                                                             g$isp$10583$eZ1vL
                                                                             g$sym*$10584$eZ1vL)
                                                                           (if (eq? (g$syntax->datum$8112$eZ1vL
                                                                                      g$only$10582$eZ1vL)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5061$eZ1vL
                                                                                 g$idsyn?$10526$eZ1vL
                                                                                 g$sym*$10584$eZ1vL))
                                                                             '#f)))
                                                                        g$ls/false$10581$eZ1vL))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10585$eZ1vL
                                                                       g$isp$10586$eZ1vL
                                                                       g$sym*$10587$eZ1vL)
                                                                     ((case-lambda
                                                                        ((g$subst$10588$eZ1vL
                                                                           g$sym*$10589$eZ1vL)
                                                                         ((case-lambda
                                                                            ((g$sym*$10590$eZ1vL)
                                                                             ((case-lambda
                                                                                ((g$lab*$10591$eZ1vL)
                                                                                 (g$map$5063$eZ1vL
                                                                                   cons
                                                                                   g$sym*$10590$eZ1vL
                                                                                   g$lab*$10591$eZ1vL)))
                                                                              (g$find*$10530$eZ1vL
                                                                                g$sym*$10590$eZ1vL
                                                                                g$subst$10588$eZ1vL))))
                                                                          (g$remove-dups$10532$eZ1vL
                                                                            g$sym*$10589$eZ1vL))))
                                                                      (g$get-import$10535$eZ1vL
                                                                        g$isp$10586$eZ1vL)
                                                                      (g$map$5063$eZ1vL
                                                                        g$syntax->datum$8112$eZ1vL
                                                                        g$sym*$10587$eZ1vL))))
                                                                  g$ls/false$10581$eZ1vL)
                                                                ((case-lambda
                                                                   ((g$t$10592$eZ1vL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10593$eZ1vL)
                                                                        (if (if g$ls/false$10593$eZ1vL
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10594$eZ1vL
                                                                                       g$isp$10595$eZ1vL
                                                                                       g$p$10596$eZ1vL)
                                                                                     (if (eq? (g$syntax->datum$8112$eZ1vL
                                                                                                g$prefix$10594$eZ1vL)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10526$eZ1vL
                                                                                           g$p$10596$eZ1vL))
                                                                                       '#f)))
                                                                                  g$ls/false$10593$eZ1vL))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10597$eZ1vL
                                                                                 g$isp$10598$eZ1vL
                                                                                 g$p$10599$eZ1vL)
                                                                               ((case-lambda
                                                                                  ((g$subst$10600$eZ1vL
                                                                                     g$prefix$10601$eZ1vL)
                                                                                   (g$map$5063$eZ1vL
                                                                                     (case-lambda
                                                                                       ((g$x$10602$eZ1vL)
                                                                                        (cons
                                                                                          (string->symbol
                                                                                            (string-append
                                                                                              g$prefix$10601$eZ1vL
                                                                                              (symbol->string
                                                                                                (car g$x$10602$eZ1vL))))
                                                                                          (cdr g$x$10602$eZ1vL))))
                                                                                     g$subst$10600$eZ1vL)))
                                                                                (g$get-import$10535$eZ1vL
                                                                                  g$isp$10598$eZ1vL)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$8112$eZ1vL
                                                                                    g$p$10599$eZ1vL)))))
                                                                            g$ls/false$10593$eZ1vL)
                                                                          ((case-lambda
                                                                             ((g$t$10603$eZ1vL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10604$eZ1vL)
                                                                                  (if (if g$ls/false$10604$eZ1vL
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10605$eZ1vL
                                                                                                 g$spec*$10606$eZ1vL)
                                                                                               (eq? (g$syntax->datum$8112$eZ1vL
                                                                                                      g$library$10605$eZ1vL)
                                                                                                    'library)))
                                                                                            g$ls/false$10604$eZ1vL))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10607$eZ1vL
                                                                                           g$spec*$10608$eZ1vL)
                                                                                         (g$import-library$10534$eZ1vL
                                                                                           g$spec*$10608$eZ1vL)))
                                                                                      g$ls/false$10604$eZ1vL)
                                                                                    ((case-lambda
                                                                                       ((g$t$10609$eZ1vL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10610$eZ1vL)
                                                                                            (if (if g$ls/false$10610$eZ1vL
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10611$eZ1vL
                                                                                                           g$isp$10612$eZ1vL
                                                                                                           g$rest$10613$eZ1vL)
                                                                                                         (eq? (g$syntax->datum$8112$eZ1vL
                                                                                                                g$for$10611$eZ1vL)
                                                                                                              'for)))
                                                                                                      g$ls/false$10610$eZ1vL))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10614$eZ1vL
                                                                                                     g$isp$10615$eZ1vL
                                                                                                     g$rest$10616$eZ1vL)
                                                                                                   (g$get-import$10535$eZ1vL
                                                                                                     g$isp$10615$eZ1vL)))
                                                                                                g$ls/false$10610$eZ1vL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10617$eZ1vL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10618$eZ1vL)
                                                                                                      (if g$ls/false$10618$eZ1vL
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10619$eZ1vL)
                                                                                                             (g$syntax-violation$8109$eZ1vL
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10619$eZ1vL)))
                                                                                                          g$ls/false$10618$eZ1vL)
                                                                                                        (g$syntax-violation$8109$eZ1vL
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10617$eZ1vL))))
                                                                                                   (g$syntax-dispatch$7997$eZ1vL
                                                                                                     g$t$10617$eZ1vL
                                                                                                     'any))))
                                                                                               g$t$10609$eZ1vL))))
                                                                                         (g$syntax-dispatch$7997$eZ1vL
                                                                                           g$t$10609$eZ1vL
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10603$eZ1vL))))
                                                                               (g$syntax-dispatch$7997$eZ1vL
                                                                                 g$t$10603$eZ1vL
                                                                                 '(any each-any)))))
                                                                           g$t$10592$eZ1vL))))
                                                                     (g$syntax-dispatch$7997$eZ1vL
                                                                       g$t$10592$eZ1vL
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10580$eZ1vL))))
                                                           (g$syntax-dispatch$7997$eZ1vL
                                                             g$t$10580$eZ1vL
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10571$eZ1vL))))
                                                 (g$syntax-dispatch$7997$eZ1vL
                                                   g$t$10571$eZ1vL
                                                   '(any any . each-any)))))
                                             g$t$10556$eZ1vL))))
                                       (g$syntax-dispatch$7997$eZ1vL
                                         g$t$10556$eZ1vL
                                         '(any any . #(each (any any)))))))
                                   g$t$10550$eZ1vL))))
                             (g$syntax-dispatch$7997$eZ1vL
                               g$t$10550$eZ1vL
                               '(any . each-any)))))
                         g$spec$10549$eZ1vL))))
                   (g$add-imports!$10536$eZ1vL
                     (case-lambda
                       ((g$imp$10541$eZ1vL g$h$10542$eZ1vL)
                        ((case-lambda
                           ((g$subst$10543$eZ1vL)
                            (g$for-each$5064$eZ1vL
                              (case-lambda
                                ((g$x$10544$eZ1vL)
                                 ((case-lambda
                                    ((g$name$10545$eZ1vL g$label$10546$eZ1vL)
                                     ((case-lambda
                                        ((g$t$10547$eZ1vL)
                                         (if g$t$10547$eZ1vL
                                           ((case-lambda
                                              ((g$l$10548$eZ1vL)
                                               (if (not (eq? g$l$10548$eZ1vL
                                                             g$label$10546$eZ1vL))
                                                 (g$dup-error$10527$eZ1vL
                                                   g$name$10545$eZ1vL)
                                                 (void))))
                                            g$t$10547$eZ1vL)
                                           (g$hashtable-set!$5542$eZ1vL
                                             g$h$10542$eZ1vL
                                             g$name$10545$eZ1vL
                                             g$label$10546$eZ1vL))))
                                      (g$hashtable-ref$5541$eZ1vL
                                        g$h$10542$eZ1vL
                                        g$name$10545$eZ1vL
                                        '#f))))
                                  (car g$x$10544$eZ1vL)
                                  (cdr g$x$10544$eZ1vL))))
                              g$subst$10543$eZ1vL)))
                         (g$get-import$10535$eZ1vL g$imp$10541$eZ1vL))))))
           (case-lambda
             ((g$imp*$10537$eZ1vL)
              ((letrec ((g$f$10538$eZ1vL
                          (case-lambda
                            ((g$imp*$10539$eZ1vL g$h$10540$eZ1vL)
                             (if (null? g$imp*$10539$eZ1vL)
                               (hashtable-entries g$h$10540$eZ1vL)
                               (begin
                                 (g$add-imports!$10536$eZ1vL
                                   (car g$imp*$10539$eZ1vL)
                                   g$h$10540$eZ1vL)
                                 (g$f$10538$eZ1vL
                                   (cdr g$imp*$10539$eZ1vL)
                                   g$h$10540$eZ1vL)))))))
                 g$f$10538$eZ1vL)
               g$imp*$10537$eZ1vL
               (g$make-eq-hashtable$5538$eZ1vL)))))))))
   (g$make-top-rib$8047$eZ1vL
     g$make-top-rib$11550$eZ1vL
     (case-lambda
       ((g$names$10788$eZ1vL g$labels$10789$eZ1vL)
        ((case-lambda
           ((g$rib$10790$eZ1vL)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10791$eZ1vL g$label$10792$eZ1vL)
                   (begin
                     (if (not (symbol? g$name$10791$eZ1vL))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10791$eZ1vL)
                       (void))
                     (g$extend-rib/nc!$7683$eZ1vL
                       g$rib$10790$eZ1vL
                       (g$make-stx$7692$eZ1vL
                         g$name$10791$eZ1vL
                         g$top-mark*$7656$eZ1vL
                         '()
                         '())
                       g$label$10792$eZ1vL))))
                g$names$10788$eZ1vL
                g$labels$10789$eZ1vL)
              g$rib$10790$eZ1vL)))
         (g$make-cache-rib$7680$eZ1vL)))))
   (g$make-collector$8048$eZ1vL
     g$make-collector$11551$eZ1vL
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10793$eZ1vL)
            (case-lambda
              (() g$ls$10793$eZ1vL)
              ((g$x$10794$eZ1vL)
               (set! g$ls$10793$eZ1vL
                 (g$set-cons$7653$eZ1vL g$x$10794$eZ1vL g$ls$10793$eZ1vL))))))
         '()))))
   (g$inv-collector$8049$eZ1vL
     g$inv-collector$11552$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (case-lambda
         (g$args$10795$eZ1vL
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10796$eZ1vL)
          (begin
            (if (not (procedure? g$x$10796$eZ1vL))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10796$eZ1vL)
              (void))
            g$x$10796$eZ1vL)))))
   (g$vis-collector$8050$eZ1vL
     g$vis-collector$11553$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (case-lambda
         (g$args$10797$eZ1vL
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10798$eZ1vL)
          (begin
            (if (not (procedure? g$x$10798$eZ1vL))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10798$eZ1vL)
              (void))
            g$x$10798$eZ1vL)))))
   (g$imp-collector$8051$eZ1vL
     g$imp-collector$11554$eZ1vL
     (g$make-parameter$6991$eZ1vL
       (case-lambda
         (g$args$10799$eZ1vL
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10800$eZ1vL)
          (begin
            (if (not (procedure? g$x$10800$eZ1vL))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10800$eZ1vL)
              (void))
            g$x$10800$eZ1vL)))))
   (g$chi-library-internal$8052$eZ1vL
     g$chi-library-internal$11555$eZ1vL
     (case-lambda
       ((g$e*$10801$eZ1vL g$rib$10802$eZ1vL g$mix?$10803$eZ1vL)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8041$eZ1vL
               g$e*$10801$eZ1vL
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10802$eZ1vL
               g$mix?$10803$eZ1vL
               '#t)))
          (case-lambda
            ((g$e*$10812$eZ1vL
               g$r$10813$eZ1vL
               g$mr$10814$eZ1vL
               g$lex*$10815$eZ1vL
               g$rhs*$10816$eZ1vL
               g$mod**$10817$eZ1vL
               g$_kwd*$10818$eZ1vL
               g$exp*$10819$eZ1vL)
             ((case-lambda
                ((g$exp*$10820$eZ1vL
                   g$_kwd*$10821$eZ1vL
                   g$mod**$10822$eZ1vL
                   g$rhs*$10823$eZ1vL
                   g$lex*$10824$eZ1vL
                   g$mr$10825$eZ1vL
                   g$r$10826$eZ1vL
                   g$e*$10827$eZ1vL)
                 (values
                   (append
                     (apply append (reverse g$mod**$10822$eZ1vL))
                     g$e*$10827$eZ1vL)
                   g$r$10826$eZ1vL
                   g$mr$10825$eZ1vL
                   (reverse g$lex*$10824$eZ1vL)
                   (reverse g$rhs*$10823$eZ1vL)
                   g$exp*$10820$eZ1vL)))
              g$exp*$10819$eZ1vL
              g$_kwd*$10818$eZ1vL
              g$mod**$10817$eZ1vL
              g$rhs*$10816$eZ1vL
              g$lex*$10815$eZ1vL
              g$mr$10814$eZ1vL
              g$r$10813$eZ1vL
              g$e*$10812$eZ1vL)))))))
   (g$chi-interaction-expr$8053$eZ1vL
     g$chi-interaction-expr$11556$eZ1vL
     (case-lambda
       ((g$e$10828$eZ1vL g$rib$10829$eZ1vL g$r$10830$eZ1vL)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8041$eZ1vL
               (list g$e$10828$eZ1vL)
               g$r$10830$eZ1vL
               g$r$10830$eZ1vL
               '()
               '()
               '()
               '()
               '()
               g$rib$10829$eZ1vL
               '#t
               '#f)))
          (case-lambda
            ((g$e*$10839$eZ1vL
               g$r$10840$eZ1vL
               g$mr$10841$eZ1vL
               g$lex*$10842$eZ1vL
               g$rhs*$10843$eZ1vL
               g$mod**$10844$eZ1vL
               g$_kwd*$10845$eZ1vL
               g$_exp*$10846$eZ1vL)
             ((case-lambda
                ((g$_exp*$10847$eZ1vL
                   g$_kwd*$10848$eZ1vL
                   g$mod**$10849$eZ1vL
                   g$rhs*$10850$eZ1vL
                   g$lex*$10851$eZ1vL
                   g$mr$10852$eZ1vL
                   g$r$10853$eZ1vL
                   g$e*$10854$eZ1vL)
                 ((case-lambda
                    ((g$e*$10855$eZ1vL)
                     ((case-lambda
                        ((g$e$10856$eZ1vL)
                         (values g$e$10856$eZ1vL g$r$10853$eZ1vL)))
                      (if (null? g$e*$10855$eZ1vL)
                        (g$build-void$7649$eZ1vL)
                        (if (null? (cdr g$e*$10855$eZ1vL))
                          (car g$e*$10855$eZ1vL)
                          (g$build-sequence$7648$eZ1vL
                            '#f
                            g$e*$10855$eZ1vL))))))
                  (g$expand-interaction-rhs*/init*$8022$eZ1vL
                    (reverse g$lex*$10851$eZ1vL)
                    (reverse g$rhs*$10850$eZ1vL)
                    (append
                      (apply append (reverse g$mod**$10849$eZ1vL))
                      g$e*$10854$eZ1vL)
                    g$r$10853$eZ1vL
                    g$mr$10852$eZ1vL))))
              g$_exp*$10846$eZ1vL
              g$_kwd*$10845$eZ1vL
              g$mod**$10844$eZ1vL
              g$rhs*$10843$eZ1vL
              g$lex*$10842$eZ1vL
              g$mr$10841$eZ1vL
              g$r$10840$eZ1vL
              g$e*$10839$eZ1vL)))))))
   (g$library-body-expander$8054$eZ1vL
     g$library-body-expander$11557$eZ1vL
     (case-lambda
       ((g$name$10857$eZ1vL
          g$main-exp*$10858$eZ1vL
          g$imp*$10859$eZ1vL
          g$b*$10860$eZ1vL
          g$mix?$10861$eZ1vL)
        (letrec* ((g$itc$10862$eZ1vL (g$make-collector$8048$eZ1vL)))
          ((case-lambda
             ((g$imp-collector$10867$eZ1vL
                g$top-level-context$10868$eZ1vL
                g$imp-collector$10869$eZ1vL
                g$top-level-context$10870$eZ1vL)
              ((case-lambda
                 ((g$swap$10871$eZ1vL)
                  (dynamic-wind
                    g$swap$10871$eZ1vL
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$8046$eZ1vL
                              g$imp*$10859$eZ1vL)))
                         (case-lambda
                           ((g$subst-names$10874$eZ1vL
                              g$subst-labels$10875$eZ1vL)
                            ((case-lambda
                               ((g$subst-labels$10876$eZ1vL
                                  g$subst-names$10877$eZ1vL)
                                ((case-lambda
                                   ((g$rib$10878$eZ1vL)
                                    (letrec* ((g$wrap$10879$eZ1vL
                                                (case-lambda
                                                  ((g$x$10941$eZ1vL)
                                                   (g$make-stx$7692$eZ1vL
                                                     g$x$10941$eZ1vL
                                                     g$top-mark*$7656$eZ1vL
                                                     (list g$rib$10878$eZ1vL)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10880$eZ1vL
                                            g$main-exp*$10881$eZ1vL
                                            g$rtc$10882$eZ1vL
                                            g$vtc$10883$eZ1vL)
                                          ((case-lambda
                                             ((g$inv-collector$10888$eZ1vL
                                                g$vis-collector$10889$eZ1vL
                                                g$inv-collector$10890$eZ1vL
                                                g$vis-collector$10891$eZ1vL)
                                              ((case-lambda
                                                 ((g$swap$10892$eZ1vL)
                                                  (dynamic-wind
                                                    g$swap$10892$eZ1vL
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$8052$eZ1vL
                                                              g$b*$10880$eZ1vL
                                                              g$rib$10878$eZ1vL
                                                              g$mix?$10861$eZ1vL)))
                                                         (case-lambda
                                                           ((g$init*$10899$eZ1vL
                                                              g$r$10900$eZ1vL
                                                              g$mr$10901$eZ1vL
                                                              g$lex*$10902$eZ1vL
                                                              g$rhs*$10903$eZ1vL
                                                              g$internal-exp*$10904$eZ1vL)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10905$eZ1vL
                                                                  g$rhs*$10906$eZ1vL
                                                                  g$lex*$10907$eZ1vL
                                                                  g$mr$10908$eZ1vL
                                                                  g$r$10909$eZ1vL
                                                                  g$init*$10910$eZ1vL)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$8043$eZ1vL
                                                                       (append
                                                                         g$main-exp*$10881$eZ1vL
                                                                         g$internal-exp*$10905$eZ1vL))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10913$eZ1vL
                                                                       g$exp-id*$10914$eZ1vL)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10915$eZ1vL
                                                                           g$exp-name*$10916$eZ1vL)
                                                                         (begin
                                                                           (g$seal-rib!$7685$eZ1vL
                                                                             g$rib$10878$eZ1vL)
                                                                           ((case-lambda
                                                                              ((g$init*$10917$eZ1vL)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10918$eZ1vL)
                                                                                   (begin
                                                                                     (g$unseal-rib!$7686$eZ1vL
                                                                                       g$rib$10878$eZ1vL)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$10919$eZ1vL
                                                                                           g$export-subst$10920$eZ1vL)
                                                                                         (letrec* ((g$errstr$10921$eZ1vL
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$8098$eZ1vL
                                                                                                  g$lex*$10907$eZ1vL
                                                                                                  g$loc*$10919$eZ1vL
                                                                                                  g$r$10909$eZ1vL)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$10925$eZ1vL
                                                                                                  g$global*$10926$eZ1vL
                                                                                                  g$macro*$10927$eZ1vL)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$10928$eZ1vL
                                                                                                      g$global*$10929$eZ1vL
                                                                                                      g$export-env$10930$eZ1vL)
                                                                                                    (begin
                                                                                                      (g$for-each$5064$eZ1vL
                                                                                                        (case-lambda
                                                                                                          ((g$s$10931$eZ1vL)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$10932$eZ1vL
                                                                                                                 g$label$10933$eZ1vL)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$10934$eZ1vL)
                                                                                                                   (if g$p$10934$eZ1vL
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$10935$eZ1vL)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$10936$eZ1vL)
                                                                                                                             (if (eq? g$type$10936$eZ1vL
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$8109$eZ1vL
                                                                                                                                 'export
                                                                                                                                 g$errstr$10921$eZ1vL
                                                                                                                                 g$name$10932$eZ1vL)
                                                                                                                               (void))))
                                                                                                                          (car g$b$10935$eZ1vL))))
                                                                                                                      (cdr g$p$10934$eZ1vL))
                                                                                                                     (void))))
                                                                                                                (g$assq$5051$eZ1vL
                                                                                                                  g$label$10933$eZ1vL
                                                                                                                  g$export-env$10930$eZ1vL))))
                                                                                                            (car g$s$10931$eZ1vL)
                                                                                                            (cdr g$s$10931$eZ1vL))))
                                                                                                        g$export-subst$10920$eZ1vL)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$10937$eZ1vL
                                                                                                            g$invoke-definitions$10938$eZ1vL)
                                                                                                          (values
                                                                                                            (g$itc$10862$eZ1vL)
                                                                                                            (g$rtc$10882$eZ1vL)
                                                                                                            (g$vtc$10883$eZ1vL)
                                                                                                            (g$build-sequence$7648$eZ1vL
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$10938$eZ1vL
                                                                                                                (list
                                                                                                                  g$invoke-body$10937$eZ1vL)))
                                                                                                            g$macro*$10928$eZ1vL
                                                                                                            g$export-subst$10920$eZ1vL
                                                                                                            g$export-env$10930$eZ1vL)))
                                                                                                       (g$build-library-letrec*$7652$eZ1vL
                                                                                                         '#f
                                                                                                         g$name$10857$eZ1vL
                                                                                                         g$lex*$10907$eZ1vL
                                                                                                         g$loc*$10919$eZ1vL
                                                                                                         g$rhs*$10918$eZ1vL
                                                                                                         (if (null?
                                                                                                               g$init*$10917$eZ1vL)
                                                                                                           (g$build-void$7649$eZ1vL)
                                                                                                           (g$build-sequence$7648$eZ1vL
                                                                                                             '#f
                                                                                                             g$init*$10917$eZ1vL)))
                                                                                                       (g$map$5063$eZ1vL
                                                                                                         g$build-global-define$7644$eZ1vL
                                                                                                         (g$map$5063$eZ1vL
                                                                                                           cdr
                                                                                                           g$global*$10929$eZ1vL))))))
                                                                                                 g$macro*$10927$eZ1vL
                                                                                                 g$global*$10926$eZ1vL
                                                                                                 g$export-env$10925$eZ1vL)))))))
                                                                                      (g$map$5063$eZ1vL
                                                                                        g$gen-global$7659$eZ1vL
                                                                                        g$lex*$10907$eZ1vL)
                                                                                      (g$make-export-subst$8097$eZ1vL
                                                                                        g$exp-name*$10916$eZ1vL
                                                                                        g$exp-id*$10915$eZ1vL)))))
                                                                                (g$chi-rhs*$8023$eZ1vL
                                                                                  g$rhs*$10906$eZ1vL
                                                                                  g$r$10909$eZ1vL
                                                                                  g$mr$10908$eZ1vL))))
                                                                            (g$chi-expr*$8013$eZ1vL
                                                                              g$init*$10910$eZ1vL
                                                                              g$r$10909$eZ1vL
                                                                              g$mr$10908$eZ1vL)))))
                                                                      g$exp-id*$10914$eZ1vL
                                                                      g$exp-name*$10913$eZ1vL))))))
                                                             g$internal-exp*$10904$eZ1vL
                                                             g$rhs*$10903$eZ1vL
                                                             g$lex*$10902$eZ1vL
                                                             g$mr$10901$eZ1vL
                                                             g$r$10900$eZ1vL
                                                             g$init*$10899$eZ1vL))))))
                                                    g$swap$10892$eZ1vL)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10939$eZ1vL)
                                                        (begin
                                                          (g$inv-collector$10888$eZ1vL
                                                            g$inv-collector$10890$eZ1vL)
                                                          (set! g$inv-collector$10890$eZ1vL
                                                            g$t$10939$eZ1vL))))
                                                     (g$inv-collector$10888$eZ1vL))
                                                    ((case-lambda
                                                       ((g$t$10940$eZ1vL)
                                                        (begin
                                                          (g$vis-collector$10889$eZ1vL
                                                            g$vis-collector$10891$eZ1vL)
                                                          (set! g$vis-collector$10891$eZ1vL
                                                            g$t$10940$eZ1vL))))
                                                     (g$vis-collector$10889$eZ1vL))))))))
                                           g$inv-collector$8049$eZ1vL
                                           g$vis-collector$8050$eZ1vL
                                           g$rtc$10882$eZ1vL
                                           g$vtc$10883$eZ1vL)))
                                       (g$map$5063$eZ1vL
                                         g$wrap$10879$eZ1vL
                                         g$b*$10860$eZ1vL)
                                       (g$map$5063$eZ1vL
                                         g$wrap$10879$eZ1vL
                                         g$main-exp*$10858$eZ1vL)
                                       (g$make-collector$8048$eZ1vL)
                                       (g$make-collector$8048$eZ1vL)))))
                                 (g$make-top-rib$8047$eZ1vL
                                   g$subst-names$10877$eZ1vL
                                   g$subst-labels$10876$eZ1vL))))
                             g$subst-labels$10875$eZ1vL
                             g$subst-names$10874$eZ1vL))))))
                    g$swap$10871$eZ1vL)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10942$eZ1vL)
                        (begin
                          (g$imp-collector$10867$eZ1vL
                            g$imp-collector$10869$eZ1vL)
                          (set! g$imp-collector$10869$eZ1vL g$t$10942$eZ1vL))))
                     (g$imp-collector$10867$eZ1vL))
                    ((case-lambda
                       ((g$t$10943$eZ1vL)
                        (begin
                          (g$top-level-context$10868$eZ1vL
                            g$top-level-context$10870$eZ1vL)
                          (set! g$top-level-context$10870$eZ1vL
                            g$t$10943$eZ1vL))))
                     (g$top-level-context$10868$eZ1vL))))))))
           g$imp-collector$8051$eZ1vL
           g$top-level-context$8117$eZ1vL
           g$itc$10862$eZ1vL
           '#f)))))
   (g$core-library-expander$8055$eZ1vL
     g$core-library-expander$11558$eZ1vL
     (case-lambda
       ((g$e$10944$eZ1vL g$verify-name$10945$eZ1vL)
        (call-with-values
          (case-lambda (() (g$parse-library$8045$eZ1vL g$e$10944$eZ1vL)))
          (case-lambda
            ((g$name*$10950$eZ1vL
               g$exp*$10951$eZ1vL
               g$imp*$10952$eZ1vL
               g$b*$10953$eZ1vL)
             ((case-lambda
                ((g$b*$10954$eZ1vL
                   g$imp*$10955$eZ1vL
                   g$exp*$10956$eZ1vL
                   g$name*$10957$eZ1vL)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$8044$eZ1vL g$name*$10957$eZ1vL)))
                   (case-lambda
                     ((g$name$10960$eZ1vL g$ver$10961$eZ1vL)
                      ((case-lambda
                         ((g$ver$10962$eZ1vL g$name$10963$eZ1vL)
                          (begin
                            (g$verify-name$10945$eZ1vL g$name$10963$eZ1vL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$8054$eZ1vL
                                   g$name$10963$eZ1vL
                                   g$exp*$10956$eZ1vL
                                   g$imp*$10955$eZ1vL
                                   g$b*$10954$eZ1vL
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10971$eZ1vL
                                   g$invoke-req*$10972$eZ1vL
                                   g$visit-req*$10973$eZ1vL
                                   g$invoke-code$10974$eZ1vL
                                   g$visit-code$10975$eZ1vL
                                   g$export-subst$10976$eZ1vL
                                   g$export-env$10977$eZ1vL)
                                 ((case-lambda
                                    ((g$export-env$10978$eZ1vL
                                       g$export-subst$10979$eZ1vL
                                       g$visit-code$10980$eZ1vL
                                       g$invoke-code$10981$eZ1vL
                                       g$visit-req*$10982$eZ1vL
                                       g$invoke-req*$10983$eZ1vL
                                       g$imp*$10984$eZ1vL)
                                     (values
                                       g$name$10963$eZ1vL
                                       g$ver$10962$eZ1vL
                                       g$imp*$10984$eZ1vL
                                       g$invoke-req*$10983$eZ1vL
                                       g$visit-req*$10982$eZ1vL
                                       g$invoke-code$10981$eZ1vL
                                       g$visit-code$10980$eZ1vL
                                       g$export-subst$10979$eZ1vL
                                       g$export-env$10978$eZ1vL)))
                                  g$export-env$10977$eZ1vL
                                  g$export-subst$10976$eZ1vL
                                  g$visit-code$10975$eZ1vL
                                  g$invoke-code$10974$eZ1vL
                                  g$visit-req*$10973$eZ1vL
                                  g$invoke-req*$10972$eZ1vL
                                  g$imp*$10971$eZ1vL)))))))
                       g$ver$10961$eZ1vL
                       g$name$10960$eZ1vL))))))
              g$b*$10953$eZ1vL
              g$imp*$10952$eZ1vL
              g$exp*$10951$eZ1vL
              g$name*$10950$eZ1vL)))))))
   (g$parse-top-level-program$8056$eZ1vL
     g$parse-top-level-program$11559$eZ1vL
     (case-lambda
       ((g$e*$10985$eZ1vL)
        ((case-lambda
           ((g$t$10986$eZ1vL)
            ((case-lambda
               ((g$ls/false$10987$eZ1vL)
                (if (if g$ls/false$10987$eZ1vL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10988$eZ1vL
                               g$imp*$10989$eZ1vL
                               g$b*$10990$eZ1vL)
                             (eq? (g$syntax->datum$8112$eZ1vL
                                    g$import$10988$eZ1vL)
                                  'import)))
                          g$ls/false$10987$eZ1vL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10991$eZ1vL
                         g$imp*$10992$eZ1vL
                         g$b*$10993$eZ1vL)
                       (values g$imp*$10992$eZ1vL g$b*$10993$eZ1vL)))
                    g$ls/false$10987$eZ1vL)
                  ((case-lambda
                     ((g$t$10994$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$10995$eZ1vL)
                          (if (if g$ls/false$10995$eZ1vL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10996$eZ1vL
                                         g$x$10997$eZ1vL
                                         g$y$10998$eZ1vL)
                                       (eq? (g$syntax->datum$8112$eZ1vL
                                              g$import$10996$eZ1vL)
                                            'import)))
                                    g$ls/false$10995$eZ1vL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10999$eZ1vL
                                   g$x$11000$eZ1vL
                                   g$y$11001$eZ1vL)
                                 (g$syntax-violation$8109$eZ1vL
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7716$eZ1vL g$e*$10985$eZ1vL))))
                              g$ls/false$10995$eZ1vL)
                            ((case-lambda
                               ((g$t$11002$eZ1vL)
                                ((case-lambda
                                   ((g$ls/false$11003$eZ1vL)
                                    (if g$ls/false$11003$eZ1vL
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$11003$eZ1vL)
                                      (g$syntax-violation$8109$eZ1vL
                                        '#f
                                        '"invalid syntax"
                                        g$t$11002$eZ1vL))))
                                 (g$syntax-dispatch$7997$eZ1vL
                                   g$t$11002$eZ1vL
                                   '_))))
                             g$t$10994$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL
                         g$t$10994$eZ1vL
                         '((any . any) . any)))))
                   g$t$10986$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL
               g$t$10986$eZ1vL
               '((any . each-any) . each-any)))))
         g$e*$10985$eZ1vL))))
   (g$top-level-expander$8057$eZ1vL
     g$top-level-expander$11560$eZ1vL
     (case-lambda
       ((g$e*$11004$eZ1vL)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$8056$eZ1vL g$e*$11004$eZ1vL)))
          (case-lambda
            ((g$imp*$11007$eZ1vL g$b*$11008$eZ1vL)
             ((case-lambda
                ((g$b*$11009$eZ1vL g$imp*$11010$eZ1vL)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$8054$eZ1vL
                        '()
                        '()
                        g$imp*$11010$eZ1vL
                        g$b*$11009$eZ1vL
                        '#t)))
                   (case-lambda
                     ((g$imp*$11018$eZ1vL
                        g$invoke-req*$11019$eZ1vL
                        g$visit-req*$11020$eZ1vL
                        g$invoke-code$11021$eZ1vL
                        g$visit-code$11022$eZ1vL
                        g$export-subst$11023$eZ1vL
                        g$export-env$11024$eZ1vL)
                      ((case-lambda
                         ((g$export-env$11025$eZ1vL
                            g$export-subst$11026$eZ1vL
                            g$visit-code$11027$eZ1vL
                            g$invoke-code$11028$eZ1vL
                            g$visit-req*$11029$eZ1vL
                            g$invoke-req*$11030$eZ1vL
                            g$imp*$11031$eZ1vL)
                          (values
                            g$invoke-req*$11030$eZ1vL
                            g$invoke-code$11028$eZ1vL)))
                       g$export-env$11024$eZ1vL
                       g$export-subst$11023$eZ1vL
                       g$visit-code$11022$eZ1vL
                       g$invoke-code$11021$eZ1vL
                       g$visit-req*$11020$eZ1vL
                       g$invoke-req*$11019$eZ1vL
                       g$imp*$11018$eZ1vL))))))
              g$b*$11008$eZ1vL
              g$imp*$11007$eZ1vL)))))))
   (g$9108$8058$eZ1vL
     g$9108$11561$eZ1vL
     (make-record-type-descriptor
       'env
       '#f
       'g$9111$eZ1vL
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9110$8059$eZ1vL g$9110$11562$eZ1vL '#f)
   (g$9109$8060$eZ1vL
     g$9109$11563$eZ1vL
     (make-record-constructor-descriptor
       g$9108$8058$eZ1vL
       '#f
       g$9110$8059$eZ1vL))
   (g$env?$8061$eZ1vL
     g$env?$11564$eZ1vL
     (record-predicate g$9108$8058$eZ1vL))
   (g$make-env$8062$eZ1vL
     g$make-env$11565$eZ1vL
     (record-constructor g$9109$8060$eZ1vL))
   (g$env-names$8063$eZ1vL
     g$env-names$11566$eZ1vL
     (record-accessor g$9108$8058$eZ1vL '0))
   (g$env-labels$8064$eZ1vL
     g$env-labels$11567$eZ1vL
     (record-accessor g$9108$8058$eZ1vL '1))
   (g$env-itc$8065$eZ1vL
     g$env-itc$11568$eZ1vL
     (record-accessor g$9108$8058$eZ1vL '2))
   (g$set-env-names!$8066$eZ1vL
     g$set-env-names!$11569$eZ1vL
     (record-mutator g$9108$8058$eZ1vL '0))
   (g$set-env-labels!$8067$eZ1vL
     g$set-env-labels!$11570$eZ1vL
     (record-mutator g$9108$8058$eZ1vL '1))
   (g$set-env-itc!$8068$eZ1vL
     g$set-env-itc!$11571$eZ1vL
     (record-mutator g$9108$8058$eZ1vL '2))
   (g$rp$8069$eZ1vL
     g$rp$11572$eZ1vL
     (make-record-printer
       'env
       (case-lambda
         ((g$x$11032$eZ1vL g$p$11033$eZ1vL g$wr$11034$eZ1vL)
          (display '"#<environment>" g$p$11033$eZ1vL)))))
   (g$9127$8070$eZ1vL
     g$9127$11573$eZ1vL
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9130$eZ1vL
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9129$8071$eZ1vL g$9129$11574$eZ1vL '#f)
   (g$9128$8072$eZ1vL
     g$9128$11575$eZ1vL
     (make-record-constructor-descriptor
       g$9127$8070$eZ1vL
       '#f
       g$9129$8071$eZ1vL))
   (g$interaction-env?$8073$eZ1vL
     g$interaction-env?$11576$eZ1vL
     (record-predicate g$9127$8070$eZ1vL))
   (g$make-interaction-env$8074$eZ1vL
     g$make-interaction-env$11577$eZ1vL
     (record-constructor g$9128$8072$eZ1vL))
   (g$interaction-env-rib$8075$eZ1vL
     g$interaction-env-rib$11578$eZ1vL
     (record-accessor g$9127$8070$eZ1vL '0))
   (g$interaction-env-r$8076$eZ1vL
     g$interaction-env-r$11579$eZ1vL
     (record-accessor g$9127$8070$eZ1vL '1))
   (g$interaction-env-locs$8077$eZ1vL
     g$interaction-env-locs$11580$eZ1vL
     (record-accessor g$9127$8070$eZ1vL '2))
   (g$set-interaction-env-rib!$8078$eZ1vL
     g$set-interaction-env-rib!$11581$eZ1vL
     (record-mutator g$9127$8070$eZ1vL '0))
   (g$set-interaction-env-r!$8079$eZ1vL
     g$set-interaction-env-r!$11582$eZ1vL
     (record-mutator g$9127$8070$eZ1vL '1))
   (g$set-interaction-env-locs!$8080$eZ1vL
     g$set-interaction-env-locs!$11583$eZ1vL
     (record-mutator g$9127$8070$eZ1vL '2))
   (g$rp$8081$eZ1vL
     g$rp$11584$eZ1vL
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$11035$eZ1vL g$p$11036$eZ1vL g$wr$11037$eZ1vL)
          (display '"#<environment>" g$p$11036$eZ1vL)))))
   (g$interaction-environment-symbols$8082$eZ1vL
     g$interaction-environment-symbols$11585$eZ1vL
     (case-lambda
       (()
        (g$environment-symbols$8086$eZ1vL
          (g$interaction-environment$8116$eZ1vL)))))
   (g$environment-bindings$8083$eZ1vL
     g$environment-bindings$11586$eZ1vL
     (case-lambda
       ((g$e$11038$eZ1vL)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$11039$eZ1vL g$label$11040$eZ1vL)
               (g$parse-binding$8084$eZ1vL
                 (cons
                   g$name$11039$eZ1vL
                   (g$imported-label->binding$7528$eZ1vL
                     g$label$11040$eZ1vL)))))
            (g$env-names$8063$eZ1vL g$e$11038$eZ1vL)
            (g$env-labels$8064$eZ1vL g$e$11038$eZ1vL))))))
   (g$parse-binding$8084$eZ1vL
     g$parse-binding$11587$eZ1vL
     (case-lambda
       ((g$b$11041$eZ1vL)
        (cons
          (car g$b$11041$eZ1vL)
          ((case-lambda
             ((g$t$11042$eZ1vL)
              (if (g$memv$5056$eZ1vL g$t$11042$eZ1vL '(core-prim global))
                'procedure
                (if (g$memv$5056$eZ1vL
                      g$t$11042$eZ1vL
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5056$eZ1vL g$t$11042$eZ1vL '($core-rtd))
                    'record
                    (if (eq? (car g$b$11041$eZ1vL)
                             (g$cadr$5264$eZ1vL g$b$11041$eZ1vL))
                      'syntax
                      'unknown))))))
           (g$cadr$5264$eZ1vL g$b$11041$eZ1vL))))))
   (g$environment?$8085$eZ1vL
     g$environment?$11588$eZ1vL
     (case-lambda
       ((g$x$11043$eZ1vL)
        ((case-lambda
           ((g$t$11044$eZ1vL)
            (if g$t$11044$eZ1vL
              g$t$11044$eZ1vL
              (begin '#f (g$interaction-env?$8073$eZ1vL g$x$11043$eZ1vL)))))
         (g$env?$8061$eZ1vL g$x$11043$eZ1vL)))))
   (g$environment-symbols$8086$eZ1vL
     g$environment-symbols$11589$eZ1vL
     (case-lambda
       ((g$x$11045$eZ1vL)
        (if (g$env?$8061$eZ1vL g$x$11045$eZ1vL)
          (vector->list (g$env-names$8063$eZ1vL g$x$11045$eZ1vL))
          (if (g$interaction-env?$8073$eZ1vL g$x$11045$eZ1vL)
            (g$map$5063$eZ1vL
              values
              (g$rib-sym*$7669$eZ1vL
                (g$interaction-env-rib$8075$eZ1vL g$x$11045$eZ1vL)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$11045$eZ1vL))))))
   (g$environment$8087$eZ1vL
     g$environment$11590$eZ1vL
     (case-lambda
       (g$imp*$11046$eZ1vL
        ((case-lambda
           ((g$itc$11047$eZ1vL)
            ((case-lambda
               ((g$imp-collector$11050$eZ1vL g$imp-collector$11051$eZ1vL)
                ((case-lambda
                   ((g$swap$11052$eZ1vL)
                    (dynamic-wind
                      g$swap$11052$eZ1vL
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$8046$eZ1vL
                                g$imp*$11046$eZ1vL)))
                           (case-lambda
                             ((g$subst-names$11055$eZ1vL
                                g$subst-labels$11056$eZ1vL)
                              ((case-lambda
                                 ((g$subst-labels$11057$eZ1vL
                                    g$subst-names$11058$eZ1vL)
                                  (g$make-env$8062$eZ1vL
                                    g$subst-names$11058$eZ1vL
                                    g$subst-labels$11057$eZ1vL
                                    g$itc$11047$eZ1vL)))
                               g$subst-labels$11056$eZ1vL
                               g$subst-names$11055$eZ1vL))))))
                      g$swap$11052$eZ1vL)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$11059$eZ1vL)
                        (begin
                          (g$imp-collector$11050$eZ1vL
                            g$imp-collector$11051$eZ1vL)
                          (set! g$imp-collector$11051$eZ1vL g$t$11059$eZ1vL))))
                     (g$imp-collector$11050$eZ1vL)))))))
             g$imp-collector$8051$eZ1vL
             g$itc$11047$eZ1vL)))
         (g$make-collector$8048$eZ1vL)))))
   (g$null-environment$8088$eZ1vL
     g$null-environment$11591$eZ1vL
     (case-lambda
       ((g$n$11060$eZ1vL)
        (begin
          (if (not (eqv? g$n$11060$eZ1vL '5))
            (assertion-violation 'null-environment '"not 5" g$n$11060$eZ1vL)
            (void))
          (g$environment$8087$eZ1vL '(psyntax null-environment-5))))))
   (g$scheme-report-environment$8089$eZ1vL
     g$scheme-report-environment$11592$eZ1vL
     (case-lambda
       ((g$n$11061$eZ1vL)
        (begin
          (if (not (eqv? g$n$11061$eZ1vL '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$11061$eZ1vL)
            (void))
          (g$environment$8087$eZ1vL '(psyntax scheme-report-environment-5))))))
   (g$expand$8090$eZ1vL
     g$expand$11593$eZ1vL
     (case-lambda
       ((g$x$11062$eZ1vL g$env$11063$eZ1vL)
        (if (g$env?$8061$eZ1vL g$env$11063$eZ1vL)
          ((case-lambda
             ((g$rib$11064$eZ1vL)
              ((case-lambda
                 ((g$x$11065$eZ1vL
                    g$itc$11066$eZ1vL
                    g$rtc$11067$eZ1vL
                    g$vtc$11068$eZ1vL)
                  ((case-lambda
                     ((g$x$11069$eZ1vL)
                      (begin
                        (g$seal-rib!$7685$eZ1vL g$rib$11064$eZ1vL)
                        (values g$x$11069$eZ1vL (g$rtc$11067$eZ1vL)))))
                   ((case-lambda
                      ((g$top-level-context$11078$eZ1vL
                         g$inv-collector$11079$eZ1vL
                         g$vis-collector$11080$eZ1vL
                         g$imp-collector$11081$eZ1vL
                         g$top-level-context$11082$eZ1vL
                         g$inv-collector$11083$eZ1vL
                         g$vis-collector$11084$eZ1vL
                         g$imp-collector$11085$eZ1vL)
                       ((case-lambda
                          ((g$swap$11086$eZ1vL)
                           (dynamic-wind
                             g$swap$11086$eZ1vL
                             (case-lambda
                               (()
                                (g$chi-expr$8015$eZ1vL
                                  g$x$11065$eZ1vL
                                  '()
                                  '())))
                             g$swap$11086$eZ1vL)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$11087$eZ1vL)
                                 (begin
                                   (g$top-level-context$11078$eZ1vL
                                     g$top-level-context$11082$eZ1vL)
                                   (set! g$top-level-context$11082$eZ1vL
                                     g$t$11087$eZ1vL))))
                              (g$top-level-context$11078$eZ1vL))
                             ((case-lambda
                                ((g$t$11088$eZ1vL)
                                 (begin
                                   (g$inv-collector$11079$eZ1vL
                                     g$inv-collector$11083$eZ1vL)
                                   (set! g$inv-collector$11083$eZ1vL
                                     g$t$11088$eZ1vL))))
                              (g$inv-collector$11079$eZ1vL))
                             ((case-lambda
                                ((g$t$11089$eZ1vL)
                                 (begin
                                   (g$vis-collector$11080$eZ1vL
                                     g$vis-collector$11084$eZ1vL)
                                   (set! g$vis-collector$11084$eZ1vL
                                     g$t$11089$eZ1vL))))
                              (g$vis-collector$11080$eZ1vL))
                             ((case-lambda
                                ((g$t$11090$eZ1vL)
                                 (begin
                                   (g$imp-collector$11081$eZ1vL
                                     g$imp-collector$11085$eZ1vL)
                                   (set! g$imp-collector$11085$eZ1vL
                                     g$t$11090$eZ1vL))))
                              (g$imp-collector$11081$eZ1vL))))))))
                    g$top-level-context$8117$eZ1vL
                    g$inv-collector$8049$eZ1vL
                    g$vis-collector$8050$eZ1vL
                    g$imp-collector$8051$eZ1vL
                    '#f
                    g$rtc$11067$eZ1vL
                    g$vtc$11068$eZ1vL
                    g$itc$11066$eZ1vL))))
               (g$make-stx$7692$eZ1vL
                 g$x$11062$eZ1vL
                 g$top-mark*$7656$eZ1vL
                 (list g$rib$11064$eZ1vL)
                 '())
               (g$env-itc$8065$eZ1vL g$env$11063$eZ1vL)
               (g$make-collector$8048$eZ1vL)
               (g$make-collector$8048$eZ1vL))))
           (g$make-top-rib$8047$eZ1vL
             (g$env-names$8063$eZ1vL g$env$11063$eZ1vL)
             (g$env-labels$8064$eZ1vL g$env$11063$eZ1vL)))
          (if (g$interaction-env?$8073$eZ1vL g$env$11063$eZ1vL)
            ((case-lambda
               ((g$rib$11091$eZ1vL g$r$11092$eZ1vL g$rtc$11093$eZ1vL)
                ((case-lambda
                   ((g$x$11094$eZ1vL)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$11105$eZ1vL
                               g$inv-collector$11106$eZ1vL
                               g$vis-collector$11107$eZ1vL
                               g$imp-collector$11108$eZ1vL
                               g$top-level-context$11109$eZ1vL
                               g$inv-collector$11110$eZ1vL
                               g$vis-collector$11111$eZ1vL
                               g$imp-collector$11112$eZ1vL)
                             ((case-lambda
                                ((g$swap$11113$eZ1vL)
                                 (dynamic-wind
                                   g$swap$11113$eZ1vL
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$8053$eZ1vL
                                        g$x$11094$eZ1vL
                                        g$rib$11091$eZ1vL
                                        g$r$11092$eZ1vL)))
                                   g$swap$11113$eZ1vL)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$11114$eZ1vL)
                                       (begin
                                         (g$top-level-context$11105$eZ1vL
                                           g$top-level-context$11109$eZ1vL)
                                         (set! g$top-level-context$11109$eZ1vL
                                           g$t$11114$eZ1vL))))
                                    (g$top-level-context$11105$eZ1vL))
                                   ((case-lambda
                                      ((g$t$11115$eZ1vL)
                                       (begin
                                         (g$inv-collector$11106$eZ1vL
                                           g$inv-collector$11110$eZ1vL)
                                         (set! g$inv-collector$11110$eZ1vL
                                           g$t$11115$eZ1vL))))
                                    (g$inv-collector$11106$eZ1vL))
                                   ((case-lambda
                                      ((g$t$11116$eZ1vL)
                                       (begin
                                         (g$vis-collector$11107$eZ1vL
                                           g$vis-collector$11111$eZ1vL)
                                         (set! g$vis-collector$11111$eZ1vL
                                           g$t$11116$eZ1vL))))
                                    (g$vis-collector$11107$eZ1vL))
                                   ((case-lambda
                                      ((g$t$11117$eZ1vL)
                                       (begin
                                         (g$imp-collector$11108$eZ1vL
                                           g$imp-collector$11112$eZ1vL)
                                         (set! g$imp-collector$11112$eZ1vL
                                           g$t$11117$eZ1vL))))
                                    (g$imp-collector$11108$eZ1vL))))))))
                          g$top-level-context$8117$eZ1vL
                          g$inv-collector$8049$eZ1vL
                          g$vis-collector$8050$eZ1vL
                          g$imp-collector$8051$eZ1vL
                          g$env$11063$eZ1vL
                          g$rtc$11093$eZ1vL
                          (g$make-collector$8048$eZ1vL)
                          (g$make-collector$8048$eZ1vL))))
                      (case-lambda
                        ((g$e$11118$eZ1vL g$r^$11119$eZ1vL)
                         ((case-lambda
                            ((g$r^$11120$eZ1vL g$e$11121$eZ1vL)
                             (begin
                               (g$set-interaction-env-r!$8079$eZ1vL
                                 g$env$11063$eZ1vL
                                 g$r^$11120$eZ1vL)
                               (values g$e$11121$eZ1vL (g$rtc$11093$eZ1vL)))))
                          g$r^$11119$eZ1vL
                          g$e$11118$eZ1vL))))))
                 (g$make-stx$7692$eZ1vL
                   g$x$11062$eZ1vL
                   g$top-mark*$7656$eZ1vL
                   (list g$rib$11091$eZ1vL)
                   '()))))
             (g$interaction-env-rib$8075$eZ1vL g$env$11063$eZ1vL)
             (g$interaction-env-r$8076$eZ1vL g$env$11063$eZ1vL)
             (g$make-collector$8048$eZ1vL))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$11063$eZ1vL))))))
   (g$eval$8091$eZ1vL
     g$eval$11594$eZ1vL
     (case-lambda
       ((g$x$11122$eZ1vL g$env$11123$eZ1vL)
        (begin
          (if (not (g$environment?$8085$eZ1vL g$env$11123$eZ1vL))
            (error 'eval '"not an environment" g$env$11123$eZ1vL)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8090$eZ1vL g$x$11122$eZ1vL g$env$11123$eZ1vL)))
            (case-lambda
              ((g$x$11126$eZ1vL g$invoke-req*$11127$eZ1vL)
               ((case-lambda
                  ((g$invoke-req*$11128$eZ1vL g$x$11129$eZ1vL)
                   (begin
                     (g$for-each$5064$eZ1vL
                       g$invoke-library$7529$eZ1vL
                       g$invoke-req*$11128$eZ1vL)
                     (eval-core
                       (g$expanded->core$7237$eZ1vL g$x$11129$eZ1vL)))))
                g$invoke-req*$11127$eZ1vL
                g$x$11126$eZ1vL))))))))
   (g$expand->core$8092$eZ1vL
     g$expand->core$11595$eZ1vL
     (case-lambda
       ((g$x$11130$eZ1vL g$env$11131$eZ1vL)
        (begin
          (if (not (g$environment?$8085$eZ1vL g$env$11131$eZ1vL))
            (error 'eval '"not an environment" g$env$11131$eZ1vL)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8090$eZ1vL g$x$11130$eZ1vL g$env$11131$eZ1vL)))
            (case-lambda
              ((g$x$11134$eZ1vL g$invoke-req*$11135$eZ1vL)
               ((case-lambda
                  ((g$invoke-req*$11136$eZ1vL g$x$11137$eZ1vL)
                   (begin
                     (g$for-each$5064$eZ1vL
                       g$invoke-library$7529$eZ1vL
                       g$invoke-req*$11136$eZ1vL)
                     (g$expanded->core$7237$eZ1vL g$x$11137$eZ1vL))))
                g$invoke-req*$11135$eZ1vL
                g$x$11134$eZ1vL))))))))
   (g$library-expander$8093$eZ1vL
     g$library-expander$11596$eZ1vL
     (case-lambda
       ((g$x$11138$eZ1vL g$filename$11139$eZ1vL g$verify-name$11140$eZ1vL)
        (letrec* ((g$build-visit-code$11141$eZ1vL
                    (case-lambda
                      ((g$macro*$11184$eZ1vL)
                       (if (null? g$macro*$11184$eZ1vL)
                         (g$build-void$7649$eZ1vL)
                         (g$build-sequence$7648$eZ1vL
                           '#f
                           (g$map$5063$eZ1vL
                             (case-lambda
                               ((g$x$11185$eZ1vL)
                                ((case-lambda
                                   ((g$loc$11186$eZ1vL g$src$11187$eZ1vL)
                                    (list
                                      'set!
                                      g$loc$11186$eZ1vL
                                      g$src$11187$eZ1vL)))
                                 (car g$x$11185$eZ1vL)
                                 (g$cddr$5266$eZ1vL g$x$11185$eZ1vL))))
                             g$macro*$11184$eZ1vL))))))
                  (g$visit!$11142$eZ1vL
                    (case-lambda
                      ((g$macro*$11180$eZ1vL)
                       (g$for-each$5064$eZ1vL
                         (case-lambda
                           ((g$x$11181$eZ1vL)
                            ((case-lambda
                               ((g$loc$11182$eZ1vL g$proc$11183$eZ1vL)
                                (set-symbol-value!
                                  g$loc$11182$eZ1vL
                                  g$proc$11183$eZ1vL)))
                             (car g$x$11181$eZ1vL)
                             (g$cadr$5264$eZ1vL g$x$11181$eZ1vL))))
                         g$macro*$11180$eZ1vL)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$8055$eZ1vL
                 g$x$11138$eZ1vL
                 g$verify-name$11140$eZ1vL)))
            (case-lambda
              ((g$name$11152$eZ1vL
                 g$ver$11153$eZ1vL
                 g$imp*$11154$eZ1vL
                 g$inv*$11155$eZ1vL
                 g$vis*$11156$eZ1vL
                 g$invoke-code$11157$eZ1vL
                 g$macro*$11158$eZ1vL
                 g$export-subst$11159$eZ1vL
                 g$export-env$11160$eZ1vL)
               ((case-lambda
                  ((g$export-env$11161$eZ1vL
                     g$export-subst$11162$eZ1vL
                     g$macro*$11163$eZ1vL
                     g$invoke-code$11164$eZ1vL
                     g$vis*$11165$eZ1vL
                     g$inv*$11166$eZ1vL
                     g$imp*$11167$eZ1vL
                     g$ver$11168$eZ1vL
                     g$name$11169$eZ1vL)
                   ((case-lambda
                      ((g$id$11170$eZ1vL
                         g$name$11171$eZ1vL
                         g$ver$11172$eZ1vL
                         g$imp*$11173$eZ1vL
                         g$vis*$11174$eZ1vL
                         g$inv*$11175$eZ1vL
                         g$visit-proc$11176$eZ1vL
                         g$invoke-proc$11177$eZ1vL
                         g$visit-code$11178$eZ1vL
                         g$invoke-code$11179$eZ1vL)
                       (begin
                         (g$install-library$7527$eZ1vL
                           g$id$11170$eZ1vL
                           g$name$11171$eZ1vL
                           g$ver$11172$eZ1vL
                           g$imp*$11173$eZ1vL
                           g$vis*$11174$eZ1vL
                           g$inv*$11175$eZ1vL
                           g$export-subst$11162$eZ1vL
                           g$export-env$11161$eZ1vL
                           g$visit-proc$11176$eZ1vL
                           g$invoke-proc$11177$eZ1vL
                           g$visit-code$11178$eZ1vL
                           g$invoke-code$11179$eZ1vL
                           '#t
                           g$filename$11139$eZ1vL)
                         (values
                           g$id$11170$eZ1vL
                           g$name$11171$eZ1vL
                           g$ver$11172$eZ1vL
                           g$imp*$11173$eZ1vL
                           g$vis*$11174$eZ1vL
                           g$inv*$11175$eZ1vL
                           g$invoke-code$11179$eZ1vL
                           g$visit-code$11178$eZ1vL
                           g$export-subst$11162$eZ1vL
                           g$export-env$11161$eZ1vL))))
                    (gensym)
                    g$name$11169$eZ1vL
                    g$ver$11168$eZ1vL
                    (g$map$5063$eZ1vL
                      g$library-spec$7533$eZ1vL
                      g$imp*$11167$eZ1vL)
                    (g$map$5063$eZ1vL
                      g$library-spec$7533$eZ1vL
                      g$vis*$11165$eZ1vL)
                    (g$map$5063$eZ1vL
                      g$library-spec$7533$eZ1vL
                      g$inv*$11166$eZ1vL)
                    (case-lambda
                      (() (g$visit!$11142$eZ1vL g$macro*$11163$eZ1vL)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$7237$eZ1vL
                           g$invoke-code$11164$eZ1vL))))
                    (g$build-visit-code$11141$eZ1vL g$macro*$11163$eZ1vL)
                    g$invoke-code$11164$eZ1vL)))
                g$export-env$11160$eZ1vL
                g$export-subst$11159$eZ1vL
                g$macro*$11158$eZ1vL
                g$invoke-code$11157$eZ1vL
                g$vis*$11156$eZ1vL
                g$inv*$11155$eZ1vL
                g$imp*$11154$eZ1vL
                g$ver$11153$eZ1vL
                g$name$11152$eZ1vL))))))
       ((g$x$11188$eZ1vL g$filename$11189$eZ1vL)
        (g$library-expander$8093$eZ1vL
          g$x$11188$eZ1vL
          g$filename$11189$eZ1vL
          (case-lambda ((g$x$11190$eZ1vL) (values)))))
       ((g$x$11191$eZ1vL)
        (g$library-expander$8093$eZ1vL
          g$x$11191$eZ1vL
          '#f
          (case-lambda ((g$x$11192$eZ1vL) (values)))))))
   (g$boot-library-expand$8094$eZ1vL
     g$boot-library-expand$11597$eZ1vL
     (case-lambda
       ((g$x$11193$eZ1vL)
        (call-with-values
          (case-lambda (() (g$library-expander$8093$eZ1vL g$x$11193$eZ1vL)))
          (case-lambda
            ((g$id$11204$eZ1vL
               g$name$11205$eZ1vL
               g$ver$11206$eZ1vL
               g$imp*$11207$eZ1vL
               g$vis*$11208$eZ1vL
               g$inv*$11209$eZ1vL
               g$invoke-code$11210$eZ1vL
               g$visit-code$11211$eZ1vL
               g$export-subst$11212$eZ1vL
               g$export-env$11213$eZ1vL)
             ((case-lambda
                ((g$export-env$11214$eZ1vL
                   g$export-subst$11215$eZ1vL
                   g$visit-code$11216$eZ1vL
                   g$invoke-code$11217$eZ1vL
                   g$inv*$11218$eZ1vL
                   g$vis*$11219$eZ1vL
                   g$imp*$11220$eZ1vL
                   g$ver$11221$eZ1vL
                   g$name$11222$eZ1vL
                   g$id$11223$eZ1vL)
                 (values
                   g$name$11222$eZ1vL
                   g$invoke-code$11217$eZ1vL
                   g$export-subst$11215$eZ1vL
                   g$export-env$11214$eZ1vL)))
              g$export-env$11213$eZ1vL
              g$export-subst$11212$eZ1vL
              g$visit-code$11211$eZ1vL
              g$invoke-code$11210$eZ1vL
              g$inv*$11209$eZ1vL
              g$vis*$11208$eZ1vL
              g$imp*$11207$eZ1vL
              g$ver$11206$eZ1vL
              g$name$11205$eZ1vL
              g$id$11204$eZ1vL)))))))
   (g$rev-map-append$8095$eZ1vL
     g$rev-map-append$11598$eZ1vL
     (case-lambda
       ((g$f$11224$eZ1vL g$ls$11225$eZ1vL g$ac$11226$eZ1vL)
        (if (null? g$ls$11225$eZ1vL)
          g$ac$11226$eZ1vL
          (g$rev-map-append$8095$eZ1vL
            g$f$11224$eZ1vL
            (cdr g$ls$11225$eZ1vL)
            (cons
              (g$f$11224$eZ1vL (car g$ls$11225$eZ1vL))
              g$ac$11226$eZ1vL))))))
   (g$build-exports$8096$eZ1vL
     g$build-exports$11599$eZ1vL
     (case-lambda
       ((g$lex*+loc*$11227$eZ1vL g$init*$11228$eZ1vL)
        (g$build-sequence$7648$eZ1vL
          '#f
          (cons
            (g$build-void$7649$eZ1vL)
            (g$rev-map-append$8095$eZ1vL
              (case-lambda
                ((g$x$11229$eZ1vL)
                 (list 'set! (cdr g$x$11229$eZ1vL) (car g$x$11229$eZ1vL))))
              g$lex*+loc*$11227$eZ1vL
              g$init*$11228$eZ1vL))))))
   (g$make-export-subst$8097$eZ1vL
     g$make-export-subst$11600$eZ1vL
     (case-lambda
       ((g$name*$11230$eZ1vL g$id*$11231$eZ1vL)
        (g$map$5063$eZ1vL
          (case-lambda
            ((g$name$11232$eZ1vL g$id$11233$eZ1vL)
             ((case-lambda
                ((g$label$11234$eZ1vL)
                 (begin
                   (if (not g$label$11234$eZ1vL)
                     (g$syntax-violation$8109$eZ1vL
                       '#f
                       '"cannot export unbound identifier"
                       g$id$11233$eZ1vL)
                     (void))
                   (cons g$name$11232$eZ1vL g$label$11234$eZ1vL))))
              (g$id->label$7732$eZ1vL g$id$11233$eZ1vL))))
          g$name*$11230$eZ1vL
          g$id*$11231$eZ1vL))))
   (g$make-export-env/macros$8098$eZ1vL
     g$make-export-env/macros$11601$eZ1vL
     (case-lambda
       ((g$lex*$11235$eZ1vL g$loc*$11236$eZ1vL g$r$11237$eZ1vL)
        (letrec* ((g$lookup$11238$eZ1vL
                    (case-lambda
                      ((g$x$11253$eZ1vL)
                       ((letrec ((g$f$11254$eZ1vL
                                   (case-lambda
                                     ((g$x$11255$eZ1vL
                                        g$lex*$11256$eZ1vL
                                        g$loc*$11257$eZ1vL)
                                      (if (pair? g$lex*$11256$eZ1vL)
                                        (if (eq? g$x$11255$eZ1vL
                                                 (car g$lex*$11256$eZ1vL))
                                          (car g$loc*$11257$eZ1vL)
                                          (g$f$11254$eZ1vL
                                            g$x$11255$eZ1vL
                                            (cdr g$lex*$11256$eZ1vL)
                                            (cdr g$loc*$11257$eZ1vL)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$11254$eZ1vL)
                        g$x$11253$eZ1vL
                        g$lex*$11235$eZ1vL
                        g$loc*$11236$eZ1vL)))))
          ((letrec ((g$f$11239$eZ1vL
                      (case-lambda
                        ((g$r$11240$eZ1vL
                           g$env$11241$eZ1vL
                           g$global*$11242$eZ1vL
                           g$macro*$11243$eZ1vL)
                         (if (null? g$r$11240$eZ1vL)
                           (values
                             g$env$11241$eZ1vL
                             g$global*$11242$eZ1vL
                             g$macro*$11243$eZ1vL)
                           ((case-lambda
                              ((g$x$11244$eZ1vL)
                               ((case-lambda
                                  ((g$label$11245$eZ1vL g$b$11246$eZ1vL)
                                   ((case-lambda
                                      ((g$t$11247$eZ1vL)
                                       (if (g$memv$5056$eZ1vL
                                             g$t$11247$eZ1vL
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$11248$eZ1vL)
                                             ((case-lambda
                                                ((g$loc$11249$eZ1vL
                                                   g$type$11250$eZ1vL)
                                                 (g$f$11239$eZ1vL
                                                   (cdr g$r$11240$eZ1vL)
                                                   (cons
                                                     (g$cons*$5065$eZ1vL
                                                       g$label$11245$eZ1vL
                                                       g$type$11250$eZ1vL
                                                       g$loc$11249$eZ1vL)
                                                     g$env$11241$eZ1vL)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7941$eZ1vL
                                                         g$v$11248$eZ1vL)
                                                       g$loc$11249$eZ1vL)
                                                     g$global*$11242$eZ1vL)
                                                   g$macro*$11243$eZ1vL)))
                                              (g$lookup$11238$eZ1vL
                                                (g$lexical-var$7941$eZ1vL
                                                  g$v$11248$eZ1vL))
                                              (if (g$lexical-mutable?$7942$eZ1vL
                                                    g$v$11248$eZ1vL)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7737$eZ1vL
                                            g$b$11246$eZ1vL))
                                         (if (g$memv$5056$eZ1vL
                                               g$t$11247$eZ1vL
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$11251$eZ1vL)
                                               (g$f$11239$eZ1vL
                                                 (cdr g$r$11240$eZ1vL)
                                                 (cons
                                                   (g$cons*$5065$eZ1vL
                                                     g$label$11245$eZ1vL
                                                     'global-macro
                                                     g$loc$11251$eZ1vL)
                                                   g$env$11241$eZ1vL)
                                                 g$global*$11242$eZ1vL
                                                 (cons
                                                   (cons
                                                     g$loc$11251$eZ1vL
                                                     (g$binding-value$7737$eZ1vL
                                                       g$b$11246$eZ1vL))
                                                   g$macro*$11243$eZ1vL))))
                                            (gensym))
                                           (if (g$memv$5056$eZ1vL
                                                 g$t$11247$eZ1vL
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$11252$eZ1vL)
                                                 (g$f$11239$eZ1vL
                                                   (cdr g$r$11240$eZ1vL)
                                                   (cons
                                                     (g$cons*$5065$eZ1vL
                                                       g$label$11245$eZ1vL
                                                       'global-macro!
                                                       g$loc$11252$eZ1vL)
                                                     g$env$11241$eZ1vL)
                                                   g$global*$11242$eZ1vL
                                                   (cons
                                                     (cons
                                                       g$loc$11252$eZ1vL
                                                       (g$binding-value$7737$eZ1vL
                                                         g$b$11246$eZ1vL))
                                                     g$macro*$11243$eZ1vL))))
                                              (gensym))
                                             (if (g$memv$5056$eZ1vL
                                                   g$t$11247$eZ1vL
                                                   '($rtd $module))
                                               (g$f$11239$eZ1vL
                                                 (cdr g$r$11240$eZ1vL)
                                                 (cons
                                                   g$x$11244$eZ1vL
                                                   g$env$11241$eZ1vL)
                                                 g$global*$11242$eZ1vL
                                                 g$macro*$11243$eZ1vL)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7736$eZ1vL
                                                   g$b$11246$eZ1vL)
                                                 (g$binding-value$7737$eZ1vL
                                                   g$b$11246$eZ1vL))))))))
                                    (g$binding-type$7736$eZ1vL
                                      g$b$11246$eZ1vL))))
                                (car g$x$11244$eZ1vL)
                                (cdr g$x$11244$eZ1vL))))
                            (car g$r$11240$eZ1vL)))))))
             g$f$11239$eZ1vL)
           g$r$11237$eZ1vL
           '()
           '()
           '())))))
   (g$generate-temporaries$8099$eZ1vL
     g$generate-temporaries$11602$eZ1vL
     (case-lambda
       ((g$ls$11258$eZ1vL)
        ((case-lambda
           ((g$t$11259$eZ1vL)
            ((case-lambda
               ((g$ls/false$11260$eZ1vL)
                (if g$ls/false$11260$eZ1vL
                  (apply
                    (case-lambda
                      ((g$ls$11261$eZ1vL)
                       (g$map$5063$eZ1vL
                         (case-lambda
                           ((g$x$11262$eZ1vL)
                            (g$make-stx$7692$eZ1vL
                              ((case-lambda
                                 ((g$x$11263$eZ1vL)
                                  (if ((case-lambda
                                         ((g$t$11264$eZ1vL)
                                          (if g$t$11264$eZ1vL
                                            g$t$11264$eZ1vL
                                            (begin
                                              '#f
                                              (string? g$x$11263$eZ1vL)))))
                                       (symbol? g$x$11263$eZ1vL))
                                    (gensym g$x$11263$eZ1vL)
                                    (gensym 't))))
                               (g$syntax->datum$8112$eZ1vL g$x$11262$eZ1vL))
                              g$top-mark*$7656$eZ1vL
                              '()
                              '())))
                         g$ls$11261$eZ1vL)))
                    g$ls/false$11260$eZ1vL)
                  ((case-lambda
                     ((g$t$11265$eZ1vL)
                      ((case-lambda
                         ((g$ls/false$11266$eZ1vL)
                          (if g$ls/false$11266$eZ1vL
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$11266$eZ1vL)
                            (g$syntax-violation$8109$eZ1vL
                              '#f
                              '"invalid syntax"
                              g$t$11265$eZ1vL))))
                       (g$syntax-dispatch$7997$eZ1vL g$t$11265$eZ1vL '_))))
                   g$t$11259$eZ1vL))))
             (g$syntax-dispatch$7997$eZ1vL g$t$11259$eZ1vL 'each-any))))
         g$ls$11258$eZ1vL))))
   (g$free-identifier=?$8100$eZ1vL
     g$free-identifier=?$11603$eZ1vL
     (case-lambda
       ((g$x$11267$eZ1vL g$y$11268$eZ1vL)
        (if (g$id?$7719$eZ1vL g$x$11267$eZ1vL)
          (if (g$id?$7719$eZ1vL g$y$11268$eZ1vL)
            (g$free-id=?$7723$eZ1vL g$x$11267$eZ1vL g$y$11268$eZ1vL)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$11268$eZ1vL))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$11267$eZ1vL)))))
   (g$bound-identifier=?$8101$eZ1vL
     g$bound-identifier=?$11604$eZ1vL
     (case-lambda
       ((g$x$11269$eZ1vL g$y$11270$eZ1vL)
        (if (g$id?$7719$eZ1vL g$x$11269$eZ1vL)
          (if (g$id?$7719$eZ1vL g$y$11270$eZ1vL)
            (g$bound-id=?$7722$eZ1vL g$x$11269$eZ1vL g$y$11270$eZ1vL)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$11270$eZ1vL))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$11269$eZ1vL)))))
   (g$make-source-condition$8102$eZ1vL
     g$make-source-condition$11605$eZ1vL
     (case-lambda
       ((g$x$11271$eZ1vL)
        (letrec* ((g$12063$11272$eZ1vL
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$12066$eZ1vL
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12065$11273$eZ1vL '#f)
                  (g$12064$11274$eZ1vL
                    (make-record-constructor-descriptor
                      g$12063$11272$eZ1vL
                      &condition-rcd
                      g$12065$11273$eZ1vL))
                  (g$12062$11275$eZ1vL (record-predicate g$12063$11272$eZ1vL))
                  (g$make-source-condition$11276$eZ1vL
                    (record-constructor g$12064$11274$eZ1vL))
                  (g$12060$11277$eZ1vL (record-accessor g$12063$11272$eZ1vL '0))
                  (g$12061$11278$eZ1vL (record-accessor g$12063$11272$eZ1vL '1))
                  (g$source-condition?$11279$eZ1vL
                    (condition-predicate g$12063$11272$eZ1vL))
                  (g$source-filename$11280$eZ1vL
                    (condition-accessor
                      g$12063$11272$eZ1vL
                      g$12060$11277$eZ1vL))
                  (g$source-character$11281$eZ1vL
                    (condition-accessor
                      g$12063$11272$eZ1vL
                      g$12061$11278$eZ1vL)))
          (if (pair? g$x$11271$eZ1vL)
            (g$make-source-condition$11276$eZ1vL
              (car g$x$11271$eZ1vL)
              (cdr g$x$11271$eZ1vL))
            (condition))))))
   (g$extract-position-condition$8103$eZ1vL
     g$extract-position-condition$11606$eZ1vL
     (case-lambda
       ((g$x$11282$eZ1vL)
        (g$make-source-condition$8102$eZ1vL
          (g$expression-position$8104$eZ1vL g$x$11282$eZ1vL)))))
   (g$expression-position$8104$eZ1vL
     g$expression-position$11607$eZ1vL
     (case-lambda
       ((g$x$11283$eZ1vL)
        (if (g$stx?$7691$eZ1vL g$x$11283$eZ1vL)
          (begin
            '#f
            ((case-lambda
               ((g$x$11284$eZ1vL)
                (if (annotation? g$x$11284$eZ1vL)
                  (begin '#f (annotation-source g$x$11284$eZ1vL))
                  '#f)))
             (g$stx-expr$7693$eZ1vL g$x$11283$eZ1vL)))
          '#f))))
   (g$assertion-error$8105$eZ1vL
     g$assertion-error$11608$eZ1vL
     (case-lambda
       ((g$expr$11285$eZ1vL g$pos$11286$eZ1vL)
        (raise
          (condition
            (g$make-assertion-violation$5837$eZ1vL)
            (g$make-who-condition$5851$eZ1vL 'assert)
            (g$make-message-condition$5805$eZ1vL '"assertion failed")
            (g$make-irritants-condition$5843$eZ1vL (list g$expr$11285$eZ1vL))
            (g$make-source-condition$8102$eZ1vL g$pos$11286$eZ1vL))))))
   (g$syntax-error$8106$eZ1vL
     g$syntax-error$11609$eZ1vL
     (case-lambda
       ((g$x$11287$eZ1vL . g$args$11288$eZ1vL)
        (begin
          (if (not (g$for-all$5061$eZ1vL string? g$args$11288$eZ1vL))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$11288$eZ1vL)
            (void))
          (raise
            (condition
              (g$make-message-condition$5805$eZ1vL
                (if (null? g$args$11288$eZ1vL)
                  '"invalid syntax"
                  (apply string-append g$args$11288$eZ1vL)))
              (g$make-syntax-violation$5877$eZ1vL
                (g$syntax->datum$8112$eZ1vL g$x$11287$eZ1vL)
                '#f)
              (g$extract-position-condition$8103$eZ1vL g$x$11287$eZ1vL)
              (g$extract-trace$8107$eZ1vL g$x$11287$eZ1vL)))))))
   (g$extract-trace$8107$eZ1vL
     g$extract-trace$11610$eZ1vL
     (case-lambda
       ((g$x$11289$eZ1vL)
        (letrec* ((g$12090$11290$eZ1vL
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$12093$eZ1vL
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12092$11291$eZ1vL '#f)
                  (g$12091$11292$eZ1vL
                    (make-record-constructor-descriptor
                      g$12090$11290$eZ1vL
                      &condition-rcd
                      g$12092$11291$eZ1vL))
                  (g$12089$11293$eZ1vL (record-predicate g$12090$11290$eZ1vL))
                  (g$make-trace$11294$eZ1vL
                    (record-constructor g$12091$11292$eZ1vL))
                  (g$12088$11295$eZ1vL (record-accessor g$12090$11290$eZ1vL '0))
                  (g$trace?$11296$eZ1vL
                    (condition-predicate g$12090$11290$eZ1vL))
                  (g$trace-form$11297$eZ1vL
                    (condition-accessor
                      g$12090$11290$eZ1vL
                      g$12088$11295$eZ1vL)))
          ((letrec ((g$f$11298$eZ1vL
                      (case-lambda
                        ((g$x$11299$eZ1vL)
                         (if (g$stx?$7691$eZ1vL g$x$11299$eZ1vL)
                           (apply
                             condition
                             (g$make-trace$11294$eZ1vL g$x$11299$eZ1vL)
                             (g$map$5063$eZ1vL
                               g$f$11298$eZ1vL
                               (g$stx-ae*$7696$eZ1vL g$x$11299$eZ1vL)))
                           (if (annotation? g$x$11299$eZ1vL)
                             (g$make-trace$11294$eZ1vL
                               (g$make-stx$7692$eZ1vL
                                 g$x$11299$eZ1vL
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$11298$eZ1vL)
           g$x$11289$eZ1vL)))))
   (g$syntax-violation*$8108$eZ1vL
     g$syntax-violation*$11611$eZ1vL
     (case-lambda
       ((g$who$11300$eZ1vL
          g$msg$11301$eZ1vL
          g$form$11302$eZ1vL
          g$condition-object$11303$eZ1vL)
        (begin
          (if (not (string? g$msg$11301$eZ1vL))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$11301$eZ1vL)
            (void))
          ((case-lambda
             ((g$who$11304$eZ1vL)
              (raise
                (condition
                  (if g$who$11304$eZ1vL
                    (g$make-who-condition$5851$eZ1vL g$who$11304$eZ1vL)
                    (condition))
                  (g$make-message-condition$5805$eZ1vL g$msg$11301$eZ1vL)
                  g$condition-object$11303$eZ1vL
                  (g$extract-position-condition$8103$eZ1vL g$form$11302$eZ1vL)
                  (g$extract-trace$8107$eZ1vL g$form$11302$eZ1vL)))))
           (if ((case-lambda
                  ((g$t$11305$eZ1vL)
                   (if g$t$11305$eZ1vL
                     g$t$11305$eZ1vL
                     (begin '#f (symbol? g$who$11300$eZ1vL)))))
                (string? g$who$11300$eZ1vL))
             g$who$11300$eZ1vL
             (if (not g$who$11300$eZ1vL)
               ((case-lambda
                  ((g$t$11306$eZ1vL)
                   ((case-lambda
                      ((g$ls/false$11307$eZ1vL)
                       (if (if g$ls/false$11307$eZ1vL
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$11308$eZ1vL)
                                    (g$id?$7719$eZ1vL g$id$11308$eZ1vL)))
                                 g$ls/false$11307$eZ1vL))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$11309$eZ1vL)
                              (g$syntax->datum$8112$eZ1vL g$id$11309$eZ1vL)))
                           g$ls/false$11307$eZ1vL)
                         ((case-lambda
                            ((g$t$11310$eZ1vL)
                             ((case-lambda
                                ((g$ls/false$11311$eZ1vL)
                                 (if (if g$ls/false$11311$eZ1vL
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$11312$eZ1vL
                                                g$rest$11313$eZ1vL)
                                              (g$id?$7719$eZ1vL
                                                g$id$11312$eZ1vL)))
                                           g$ls/false$11311$eZ1vL))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$11314$eZ1vL g$rest$11315$eZ1vL)
                                        (g$syntax->datum$8112$eZ1vL
                                          g$id$11314$eZ1vL)))
                                     g$ls/false$11311$eZ1vL)
                                   ((case-lambda
                                      ((g$t$11316$eZ1vL)
                                       ((case-lambda
                                          ((g$ls/false$11317$eZ1vL)
                                           (if g$ls/false$11317$eZ1vL
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$11317$eZ1vL)
                                             (g$syntax-violation$8109$eZ1vL
                                               '#f
                                               '"invalid syntax"
                                               g$t$11316$eZ1vL))))
                                        (g$syntax-dispatch$7997$eZ1vL
                                          g$t$11316$eZ1vL
                                          '_))))
                                    g$t$11310$eZ1vL))))
                              (g$syntax-dispatch$7997$eZ1vL
                                g$t$11310$eZ1vL
                                '(any . any)))))
                          g$t$11306$eZ1vL))))
                    (g$syntax-dispatch$7997$eZ1vL g$t$11306$eZ1vL 'any))))
                g$form$11302$eZ1vL)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$11300$eZ1vL))))))))
   (g$syntax-violation$8109$eZ1vL
     g$syntax-violation$11612$eZ1vL
     (case-lambda
       ((g$who$11318$eZ1vL g$msg$11319$eZ1vL g$form$11320$eZ1vL)
        (g$syntax-violation$8109$eZ1vL
          g$who$11318$eZ1vL
          g$msg$11319$eZ1vL
          g$form$11320$eZ1vL
          '#f))
       ((g$who$11321$eZ1vL
          g$msg$11322$eZ1vL
          g$form$11323$eZ1vL
          g$subform$11324$eZ1vL)
        (g$syntax-violation*$8108$eZ1vL
          g$who$11321$eZ1vL
          g$msg$11322$eZ1vL
          g$form$11323$eZ1vL
          (g$make-syntax-violation$5877$eZ1vL
            (g$syntax->datum$8112$eZ1vL g$form$11323$eZ1vL)
            (g$syntax->datum$8112$eZ1vL g$subform$11324$eZ1vL))))))
   (g$identifier?$8110$eZ1vL
     g$identifier?$11613$eZ1vL
     (case-lambda ((g$x$11325$eZ1vL) (g$id?$7719$eZ1vL g$x$11325$eZ1vL))))
   (g$datum->syntax$8111$eZ1vL
     g$datum->syntax$11614$eZ1vL
     (case-lambda
       ((g$id$11326$eZ1vL g$datum$11327$eZ1vL)
        (if (g$id?$7719$eZ1vL g$id$11326$eZ1vL)
          (g$datum->stx$7702$eZ1vL g$id$11326$eZ1vL g$datum$11327$eZ1vL)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$11326$eZ1vL)))))
   (g$syntax->datum$8112$eZ1vL
     g$syntax->datum$11615$eZ1vL
     (case-lambda
       ((g$x$11328$eZ1vL) (g$stx->datum$7730$eZ1vL g$x$11328$eZ1vL))))
   (g$compile-r6rs-top-level$8113$eZ1vL
     g$compile-r6rs-top-level$11616$eZ1vL
     (case-lambda
       ((g$x*$11329$eZ1vL)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8057$eZ1vL g$x*$11329$eZ1vL)))
          (case-lambda
            ((g$lib*$11332$eZ1vL g$invoke-code$11333$eZ1vL)
             ((case-lambda
                ((g$invoke-code$11334$eZ1vL g$lib*$11335$eZ1vL)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5064$eZ1vL
                        g$invoke-library$7529$eZ1vL
                        g$lib*$11335$eZ1vL)
                      (eval-core
                        (g$expanded->core$7237$eZ1vL
                          g$invoke-code$11334$eZ1vL)))))))
              g$invoke-code$11333$eZ1vL
              g$lib*$11332$eZ1vL)))))))
   (g$pre-compile-r6rs-top-level$8114$eZ1vL
     g$pre-compile-r6rs-top-level$11617$eZ1vL
     (case-lambda
       ((g$x*$11336$eZ1vL)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8057$eZ1vL g$x*$11336$eZ1vL)))
          (case-lambda
            ((g$lib*$11339$eZ1vL g$invoke-code$11340$eZ1vL)
             ((case-lambda
                ((g$invoke-code$11341$eZ1vL g$lib*$11342$eZ1vL)
                 (begin
                   (g$for-each$5064$eZ1vL
                     g$invoke-library$7529$eZ1vL
                     g$lib*$11342$eZ1vL)
                   (compile-core
                     (g$expanded->core$7237$eZ1vL g$invoke-code$11341$eZ1vL)))))
              g$invoke-code$11340$eZ1vL
              g$lib*$11339$eZ1vL)))))))
   (g$new-interaction-environment$8115$eZ1vL
     g$new-interaction-environment$11618$eZ1vL
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$11343$eZ1vL g$rib$11344$eZ1vL)
            (begin
              ((case-lambda
                 ((g$subst$11345$eZ1vL)
                  (begin
                    (g$set-rib-sym*!$7674$eZ1vL
                      g$rib$11344$eZ1vL
                      (g$map$5063$eZ1vL car g$subst$11345$eZ1vL))
                    (g$set-rib-mark**!$7675$eZ1vL
                      g$rib$11344$eZ1vL
                      (g$map$5063$eZ1vL
                        (case-lambda ((g$x$11346$eZ1vL) g$top-mark*$7656$eZ1vL))
                        g$subst$11345$eZ1vL))
                    (g$set-rib-label*!$7676$eZ1vL
                      g$rib$11344$eZ1vL
                      (g$map$5063$eZ1vL cdr g$subst$11345$eZ1vL)))))
               (g$library-subst$7486$eZ1vL g$lib$11343$eZ1vL))
              (g$make-interaction-env$8074$eZ1vL g$rib$11344$eZ1vL '() '()))))
         (g$find-library-by-name$7522$eZ1vL '(ironscheme))
         (g$make-empty-rib$7679$eZ1vL)))))
   (g$interaction-environment$8116$eZ1vL
     g$interaction-environment$11619$eZ1vL
     ((case-lambda
        ((g$e$11347$eZ1vL)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$11348$eZ1vL)
                (if g$t$11348$eZ1vL
                  g$t$11348$eZ1vL
                  (begin
                    '#f
                    (begin
                      (set! g$e$11347$eZ1vL
                        (g$new-interaction-environment$8115$eZ1vL))
                      g$e$11347$eZ1vL)))))
             g$e$11347$eZ1vL)))))
      '#f))
   (g$top-level-context$8117$eZ1vL
     g$top-level-context$11620$eZ1vL
     (g$make-parameter$6991$eZ1vL '#f)))
  (g$current-library-expander$7519$eZ1vL g$library-expander$8093$eZ1vL))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$7234$eZ1vL
      (case-lambda
        ((g$x$11673$eZ1vL)
         ((case-lambda
            ((g$t$11674$eZ1vL) (if g$t$11674$eZ1vL (cdr g$t$11674$eZ1vL) '#f)))
          (g$assq$5051$eZ1vL
            g$x$11673$eZ1vL
            '((ellipsis-map . g$ellipsis-map$11505$eZ1vL)
              (make-list . g$make-list$5046$eZ1vL)
              (last-pair . g$last-pair$5045$eZ1vL)
              (ironscheme-build . g$ironscheme-build$11666$eZ1vL)
              (syntax-error . g$syntax-error$11609$eZ1vL)
              (syntax-dispatch . g$syntax-dispatch$11500$eZ1vL)
              (compile-system-libraries
                .
                g$compile-system-libraries$11668$eZ1vL)
              (compile->closure . g$compile->closure$11670$eZ1vL)
              (compile . g$compile$11669$eZ1vL)
              (load . g$load$11665$eZ1vL)
              (interaction-environment . g$interaction-environment$11619$eZ1vL)
              (string-ci>? . g$string-ci>?$6027$eZ1vL)
              (string-ci>=? . g$string-ci>=?$6029$eZ1vL)
              (string-ci=? . g$string-ci=?$6025$eZ1vL)
              (string-ci<? . g$string-ci<?$6026$eZ1vL)
              (string-ci<=? . g$string-ci<=?$6028$eZ1vL)
              (char-ci>? . g$char-ci>?$6032$eZ1vL)
              (char-ci>=? . g$char-ci>=?$6034$eZ1vL)
              (char-ci=? . g$char-ci=?$6030$eZ1vL)
              (char-ci<? . g$char-ci<?$6031$eZ1vL)
              (char-ci<=? . g$char-ci<=?$6033$eZ1vL)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11438$eZ1vL)
              (variable-transformer? . g$variable-transformer?$11437$eZ1vL)
              (make-variable-transformer
                .
                g$make-variable-transformer$11436$eZ1vL)
              (identifier? . g$identifier?$11613$eZ1vL)
              (generate-temporaries . g$generate-temporaries$11602$eZ1vL)
              (free-identifier=? . g$free-identifier=?$11603$eZ1vL)
              (syntax->datum . g$syntax->datum$11615$eZ1vL)
              (datum->syntax . g$datum->syntax$11614$eZ1vL)
              (bound-identifier=? . g$bound-identifier=?$11604$eZ1vL)
              (delete-file . g$delete-file$5557$eZ1vL)
              (file-exists? . g$file-exists?$5556$eZ1vL)
              (list-sort . g$list-sort$5952$eZ1vL)
              (make-eqv-hashtable . g$make-eqv-hashtable$5539$eZ1vL)
              (make-eq-hashtable . g$make-eq-hashtable$5538$eZ1vL)
              (hashtable-update! . g$hashtable-update!$5545$eZ1vL)
              (hashtable-size . g$hashtable-size$5540$eZ1vL)
              (hashtable-set! . g$hashtable-set!$5542$eZ1vL)
              (hashtable-ref . g$hashtable-ref$5541$eZ1vL)
              (hashtable-delete! . g$hashtable-delete!$5543$eZ1vL)
              (hashtable-contains? . g$hashtable-contains?$5544$eZ1vL)
              (hashtable-clear! . g$hashtable-clear!$5546$eZ1vL)
              (call-with-output-file . g$call-with-output-file$6388$eZ1vL)
              (call-with-input-file . g$call-with-input-file$6387$eZ1vL)
              (write-char . g$write-char$6384$eZ1vL)
              (with-output-to-file . g$with-output-to-file$6386$eZ1vL)
              (with-input-from-file . g$with-input-from-file$6385$eZ1vL)
              (read-char . g$read-char$6383$eZ1vL)
              (peek-char . g$peek-char$6382$eZ1vL)
              (newline . g$newline$6389$eZ1vL)
              (port? . g$port?$6337$eZ1vL)
              (open-string-output-port . g$open-string-output-port$6336$eZ1vL)
              (make-i/o-write-error . g$make-i/o-write-error$6252$eZ1vL)
              (make-i/o-read-error . g$make-i/o-read-error$6246$eZ1vL)
              (make-i/o-port-error . g$make-i/o-port-error$6298$eZ1vL)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6258$eZ1vL)
              (make-i/o-filename-error . g$make-i/o-filename-error$6266$eZ1vL)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6274$eZ1vL)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6280$eZ1vL)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6292$eZ1vL)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6286$eZ1vL)
              (make-i/o-error . g$make-i/o-error$6240$eZ1vL)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6312$eZ1vL)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6306$eZ1vL)
              (i/o-write-error? . g$i/o-write-error?$6253$eZ1vL)
              (i/o-read-error? . g$i/o-read-error?$6247$eZ1vL)
              (i/o-port-error? . g$i/o-port-error?$6300$eZ1vL)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6260$eZ1vL)
              (i/o-error-position . g$i/o-error-position$6261$eZ1vL)
              (i/o-filename-error? . g$i/o-filename-error?$6268$eZ1vL)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6275$eZ1vL)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6281$eZ1vL)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6293$eZ1vL)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6287$eZ1vL)
              (i/o-error? . g$i/o-error?$6241$eZ1vL)
              (i/o-error-port . g$i/o-error-port$6301$eZ1vL)
              (i/o-error-filename . g$i/o-error-filename$6269$eZ1vL)
              (i/o-encoding-error? . g$i/o-encoding-error?$6314$eZ1vL)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6315$eZ1vL)
              (i/o-decoding-error? . g$i/o-decoding-error?$6307$eZ1vL)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6338$eZ1vL)
              (call-with-port . g$call-with-port$6339$eZ1vL)
              (scheme-report-environment
                .
                g$scheme-report-environment$11592$eZ1vL)
              (quotient . g$quotient$5919$eZ1vL)
              (null-environment . g$null-environment$11591$eZ1vL)
              (remainder . g$remainder$5920$eZ1vL)
              (modulo . g$modulo$5921$eZ1vL)
              (inexact->exact . g$inexact->exact$5916$eZ1vL)
              (force . g$force$5923$eZ1vL)
              (exact->inexact . g$exact->inexact$5917$eZ1vL)
              (command-line . g$command-line$11662$eZ1vL)
              (remove . g$remove$5068$eZ1vL)
              (remv . g$remv$5069$eZ1vL)
              (remp . g$remp$5049$eZ1vL)
              (remq . g$remq$5070$eZ1vL)
              (partition . g$partition$5048$eZ1vL)
              (memv . g$memv$5056$eZ1vL)
              (memq . g$memq$5055$eZ1vL)
              (memp . g$memp$5058$eZ1vL)
              (member . g$member$5057$eZ1vL)
              (exists . g$exists$5062$eZ1vL)
              (for-all . g$for-all$5061$eZ1vL)
              (fold-right . g$fold-right$5067$eZ1vL)
              (fold-left . g$fold-left$5066$eZ1vL)
              (find . g$find$5047$eZ1vL)
              (filter . g$filter$5050$eZ1vL)
              (cons* . g$cons*$5065$eZ1vL)
              (assv . g$assv$5052$eZ1vL)
              (assq . g$assq$5051$eZ1vL)
              (assp . g$assp$5054$eZ1vL)
              (assoc . g$assoc$5053$eZ1vL)
              (eval . g$eval$11594$eZ1vL)
              (environment . g$environment$11590$eZ1vL)
              (make-enumeration . g$make-enumeration$6521$eZ1vL)
              (enum-set=? . g$enum-set=?$6528$eZ1vL)
              (enum-set-universe . g$enum-set-universe$6522$eZ1vL)
              (enum-set-union . g$enum-set-union$6529$eZ1vL)
              (enum-set-subset? . g$enum-set-subset?$6527$eZ1vL)
              (enum-set-projection . g$enum-set-projection$6533$eZ1vL)
              (enum-set-member? . g$enum-set-member?$6526$eZ1vL)
              (enum-set-intersection . g$enum-set-intersection$6530$eZ1vL)
              (enum-set-indexer . g$enum-set-indexer$6523$eZ1vL)
              (enum-set-difference . g$enum-set-difference$6531$eZ1vL)
              (enum-set-constructor . g$enum-set-constructor$6524$eZ1vL)
              (enum-set-complement . g$enum-set-complement$6532$eZ1vL)
              (enum-set->list . g$enum-set->list$6525$eZ1vL)
              (who-condition? . g$who-condition?$5853$eZ1vL)
              (warning? . g$warning?$5814$eZ1vL)
              (violation? . g$violation?$5832$eZ1vL)
              (undefined-violation? . g$undefined-violation?$5888$eZ1vL)
              (syntax-violation? . g$syntax-violation?$5880$eZ1vL)
              (syntax-violation-subform . g$syntax-violation-subform$5882$eZ1vL)
              (syntax-violation-form . g$syntax-violation-form$5881$eZ1vL)
              (syntax-violation . g$syntax-violation$11612$eZ1vL)
              (serious-condition? . g$serious-condition?$5820$eZ1vL)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5860$eZ1vL)
              (message-condition? . g$message-condition?$5807$eZ1vL)
              (make-who-condition . g$make-who-condition$5851$eZ1vL)
              (make-warning . g$make-warning$5813$eZ1vL)
              (make-violation . g$make-violation$5831$eZ1vL)
              (make-undefined-violation . g$make-undefined-violation$5887$eZ1vL)
              (make-syntax-violation . g$make-syntax-violation$5877$eZ1vL)
              (make-serious-condition . g$make-serious-condition$5819$eZ1vL)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5859$eZ1vL)
              (make-message-condition . g$make-message-condition$5805$eZ1vL)
              (make-lexical-violation . g$make-lexical-violation$5871$eZ1vL)
              (make-irritants-condition . g$make-irritants-condition$5843$eZ1vL)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5865$eZ1vL)
              (make-error . g$make-error$5825$eZ1vL)
              (make-assertion-violation . g$make-assertion-violation$5837$eZ1vL)
              (lexical-violation? . g$lexical-violation?$5872$eZ1vL)
              (irritants-condition? . g$irritants-condition?$5845$eZ1vL)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5866$eZ1vL)
              (error? . g$error?$5826$eZ1vL)
              (condition-who . g$condition-who$5854$eZ1vL)
              (condition-message . g$condition-message$5808$eZ1vL)
              (condition-irritants . g$condition-irritants$5846$eZ1vL)
              (assertion-violation? . g$assertion-violation?$5838$eZ1vL)
              (native-endianness . g$native-endianness$5670$eZ1vL)
              (bytevector-u64-set! . g$bytevector-u64-set!$5691$eZ1vL)
              (bytevector-u64-ref . g$bytevector-u64-ref$5687$eZ1vL)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5693$eZ1vL)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5689$eZ1vL)
              (bytevector-u32-set! . g$bytevector-u32-set!$5683$eZ1vL)
              (bytevector-u32-ref . g$bytevector-u32-ref$5679$eZ1vL)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5685$eZ1vL)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5681$eZ1vL)
              (bytevector-u16-set! . g$bytevector-u16-set!$5675$eZ1vL)
              (bytevector-u16-ref . g$bytevector-u16-ref$5671$eZ1vL)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5677$eZ1vL)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5673$eZ1vL)
              (bytevector-s64-set! . g$bytevector-s64-set!$5692$eZ1vL)
              (bytevector-s64-ref . g$bytevector-s64-ref$5688$eZ1vL)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5694$eZ1vL)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5690$eZ1vL)
              (bytevector-s32-set! . g$bytevector-s32-set!$5684$eZ1vL)
              (bytevector-s32-ref . g$bytevector-s32-ref$5680$eZ1vL)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5686$eZ1vL)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5682$eZ1vL)
              (bytevector-s16-set! . g$bytevector-s16-set!$5676$eZ1vL)
              (bytevector-s16-ref . g$bytevector-s16-ref$5672$eZ1vL)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5678$eZ1vL)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5674$eZ1vL)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5697$eZ1vL)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5695$eZ1vL)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5698$eZ1vL)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5696$eZ1vL)
              (no-nans-violation? . g$no-nans-violation?$6155$eZ1vL)
              (no-infinities-violation? . g$no-infinities-violation?$6149$eZ1vL)
              (make-no-nans-violation . g$make-no-nans-violation$6154$eZ1vL)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6148$eZ1vL)
              (fxrotate-bit-field . g$fxrotate-bit-field$6131$eZ1vL)
              (fxif . g$fxif$6125$eZ1vL)
              (fxcopy-bit-field . g$fxcopy-bit-field$6128$eZ1vL)
              (fxcopy-bit . g$fxcopy-bit$6126$eZ1vL)
              (fxbit-field . g$fxbit-field$6127$eZ1vL)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6130$eZ1vL)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6129$eZ1vL)
              (fx-/carry . g$fx-/carry$6123$eZ1vL)
              (fx+/carry . g$fx+/carry$6124$eZ1vL)
              (fx*/carry . g$fx*/carry$6122$eZ1vL)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$6072$eZ1vL)
              (bitwise-if . g$bitwise-if$6066$eZ1vL)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6069$eZ1vL)
              (bitwise-copy-bit . g$bitwise-copy-bit$6067$eZ1vL)
              (bitwise-bit-field . g$bitwise-bit-field$6068$eZ1vL)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6071$eZ1vL)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6070$eZ1vL)
              (zero? . g$zero?$5293$eZ1vL)
              (symbol=? . g$symbol=?$5305$eZ1vL)
              (string>? . g$string>?$5302$eZ1vL)
              (string>=? . g$string>=?$5304$eZ1vL)
              (string=? . g$string=?$5300$eZ1vL)
              (string<? . g$string<?$5301$eZ1vL)
              (string<=? . g$string<=?$5303$eZ1vL)
              (rationalize . g$rationalize$5312$eZ1vL)
              (positive? . g$positive?$5291$eZ1vL)
              (odd? . g$odd?$5295$eZ1vL)
              (negative? . g$negative?$5292$eZ1vL)
              (min . g$min$5297$eZ1vL)
              (max . g$max$5296$eZ1vL)
              (map . g$map$5063$eZ1vL)
              (list-tail . g$list-tail$5043$eZ1vL)
              (list-ref . g$list-ref$5044$eZ1vL)
              (lcm . g$lcm$5299$eZ1vL)
              (gcd . g$gcd$5298$eZ1vL)
              (for-each . g$for-each$5064$eZ1vL)
              (even? . g$even?$5294$eZ1vL)
              (char>? . g$char>?$5309$eZ1vL)
              (char>=? . g$char>=?$5311$eZ1vL)
              (char=? . g$char=?$5307$eZ1vL)
              (char<? . g$char<?$5308$eZ1vL)
              (char<=? . g$char<=?$5310$eZ1vL)
              (cddddr . g$cddddr$5290$eZ1vL)
              (cdddar . g$cdddar$5289$eZ1vL)
              (cddadr . g$cddadr$5288$eZ1vL)
              (cddaar . g$cddaar$5287$eZ1vL)
              (cdaddr . g$cdaddr$5286$eZ1vL)
              (cdadar . g$cdadar$5285$eZ1vL)
              (cdaadr . g$cdaadr$5284$eZ1vL)
              (cdaaar . g$cdaaar$5283$eZ1vL)
              (cadddr . g$cadddr$5282$eZ1vL)
              (caddar . g$caddar$5281$eZ1vL)
              (cadadr . g$cadadr$5280$eZ1vL)
              (cadaar . g$cadaar$5279$eZ1vL)
              (caaddr . g$caaddr$5278$eZ1vL)
              (caadar . g$caadar$5277$eZ1vL)
              (caaadr . g$caaadr$5276$eZ1vL)
              (caaaar . g$caaaar$5275$eZ1vL)
              (cdddr . g$cdddr$5274$eZ1vL)
              (cddar . g$cddar$5273$eZ1vL)
              (cdadr . g$cdadr$5272$eZ1vL)
              (cdaar . g$cdaar$5271$eZ1vL)
              (caddr . g$caddr$5270$eZ1vL)
              (cadar . g$cadar$5269$eZ1vL)
              (caadr . g$caadr$5268$eZ1vL)
              (caaar . g$caaar$5267$eZ1vL)
              (cddr . g$cddr$5266$eZ1vL)
              (cdar . g$cdar$5265$eZ1vL)
              (cadr . g$cadr$5264$eZ1vL)
              (caar . g$caar$5263$eZ1vL)
              (boolean=? . g$boolean=?$5306$eZ1vL)
              (enum-set? . g$enum?$6502$eZ1vL)
              (make-promise . g$make-promise$5922$eZ1vL)
              (load/args . g$load/args$11664$eZ1vL)
              (printf . g$printf$6557$eZ1vL)
              (fprintf . g$fprintf$6558$eZ1vL)
              (format . g$format$6559$eZ1vL)
              (trace-printer . g$trace-printer$11661$eZ1vL)
              (make-traced-macro . g$make-traced-macro$6563$eZ1vL)
              (assertion-error . g$assertion-error$11608$eZ1vL)
              (make-parameter . g$make-parameter$6991$eZ1vL)
              (environment-bindings . g$environment-bindings$11586$eZ1vL)
              (environment-symbols . g$environment-symbols$11589$eZ1vL)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11585$eZ1vL)
              (library-path . g$library-path$7511$eZ1vL)
              (expand->core . g$expand->core$11595$eZ1vL)
              (expand . g$expand$11593$eZ1vL)
              (expand-boot-cps . g$expand-boot-cps$6891$eZ1vL)
              (convert->cps . g$convert->cps$6888$eZ1vL)))))))
    (g$install-library$7527$eZ1vL
      'g$12785$eZ1vL
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12722$eZ1vL)
        (cosh . g$12721$eZ1vL)
        (sinh . g$12720$eZ1vL)
        (make-guid . g$12719$eZ1vL)
        (unspecified? . g$12718$eZ1vL)
        (make-list . g$5856$eZ1vL)
        (last-pair . g$5855$eZ1vL)
        (load-r5rs . g$12717$eZ1vL)
        (license . g$12716$eZ1vL)
        (stacktrace . g$12715$eZ1vL)
        (ironscheme-build . g$12161$eZ1vL)
        (set-symbol-value! . g$12702$eZ1vL)
        (symbol-value . g$12701$eZ1vL)
        (symbol-value? . g$12700$eZ1vL)
        (ungensym . g$12699$eZ1vL)
        (gensym . g$12698$eZ1vL)
        (void . g$12697$eZ1vL)
        (compile-system-libraries . g$12163$eZ1vL)
        (compile->closure . g$12165$eZ1vL)
        (compile . g$12164$eZ1vL)
        (load . g$12160$eZ1vL)
        (interaction-environment . g$9180$eZ1vL)
        (string-upcase . g$12693$eZ1vL)
        (string-titlecase . g$12692$eZ1vL)
        (string-normalize-nfkd . g$12691$eZ1vL)
        (string-normalize-nfkc . g$12690$eZ1vL)
        (string-normalize-nfd . g$12689$eZ1vL)
        (string-normalize-nfc . g$12688$eZ1vL)
        (string-foldcase . g$12687$eZ1vL)
        (string-downcase . g$12686$eZ1vL)
        (string-ci>? . g$6995$eZ1vL)
        (string-ci>=? . g$6997$eZ1vL)
        (string-ci=? . g$6993$eZ1vL)
        (string-ci<? . g$6994$eZ1vL)
        (string-ci<=? . g$6996$eZ1vL)
        (char-whitespace? . g$12685$eZ1vL)
        (char-upper-case? . g$12684$eZ1vL)
        (char-title-case? . g$12683$eZ1vL)
        (char-numeric? . g$12682$eZ1vL)
        (char-lower-case? . g$12681$eZ1vL)
        (char-general-category . g$12680$eZ1vL)
        (char-upcase . g$12679$eZ1vL)
        (char-titlecase . g$12678$eZ1vL)
        (char-foldcase . g$12677$eZ1vL)
        (char-downcase . g$12676$eZ1vL)
        (char-ci>? . g$7034$eZ1vL)
        (char-ci>=? . g$7036$eZ1vL)
        (char-ci=? . g$7032$eZ1vL)
        (char-ci<? . g$7033$eZ1vL)
        (char-ci<=? . g$7035$eZ1vL)
        (char-alphabetic? . g$12675$eZ1vL)
        (make-variable-transformer . g$8775$eZ1vL)
        (identifier? . g$9174$eZ1vL)
        (generate-temporaries . g$9163$eZ1vL)
        (free-identifier=? . g$9164$eZ1vL)
        (syntax->datum . g$9176$eZ1vL)
        (datum->syntax . g$9175$eZ1vL)
        (bound-identifier=? . g$9165$eZ1vL)
        (record-type-descriptor? . g$12674$eZ1vL)
        (record-predicate . g$12673$eZ1vL)
        (record-mutator . g$12672$eZ1vL)
        (record-constructor . g$12671$eZ1vL)
        (record-accessor . g$12670$eZ1vL)
        (make-record-type-descriptor . g$12669$eZ1vL)
        (make-record-constructor-descriptor . g$12668$eZ1vL)
        (record? . g$12667$eZ1vL)
        (record-type-uid . g$12666$eZ1vL)
        (record-type-sealed? . g$12665$eZ1vL)
        (record-type-parent . g$12664$eZ1vL)
        (record-type-opaque? . g$12663$eZ1vL)
        (record-type-name . g$12662$eZ1vL)
        (record-type-generative? . g$12661$eZ1vL)
        (record-type-field-names . g$12660$eZ1vL)
        (record-rtd . g$12659$eZ1vL)
        (record-field-mutable? . g$12658$eZ1vL)
        (delete-file . g$6569$eZ1vL)
        (file-exists? . g$6568$eZ1vL)
        (vector-sort! . g$12657$eZ1vL)
        (vector-sort . g$12656$eZ1vL)
        (list-sort . g$6935$eZ1vL)
        (symbol-hash . g$12655$eZ1vL)
        (string-ci-hash . g$12654$eZ1vL)
        (string-hash . g$12653$eZ1vL)
        (equal-hash . g$12652$eZ1vL)
        (hashtable-equivalence-function . g$12651$eZ1vL)
        (make-hashtable . g$12650$eZ1vL)
        (hashtable-hash-function . g$12649$eZ1vL)
        (make-eqv-hashtable . g$6537$eZ1vL)
        (make-eq-hashtable . g$6536$eZ1vL)
        (hashtable? . g$12648$eZ1vL)
        (hashtable-update! . g$6543$eZ1vL)
        (hashtable-size . g$6538$eZ1vL)
        (hashtable-set! . g$6540$eZ1vL)
        (hashtable-ref . g$6539$eZ1vL)
        (hashtable-mutable? . g$12647$eZ1vL)
        (hashtable-keys . g$12646$eZ1vL)
        (hashtable-entries . g$12645$eZ1vL)
        (hashtable-delete! . g$6541$eZ1vL)
        (hashtable-copy . g$12644$eZ1vL)
        (hashtable-contains? . g$6542$eZ1vL)
        (hashtable-clear! . g$6544$eZ1vL)
        (call-with-output-file . g$7420$eZ1vL)
        (call-with-input-file . g$7419$eZ1vL)
        (write-char . g$7401$eZ1vL)
        (write . g$12643$eZ1vL)
        (with-output-to-file . g$7418$eZ1vL)
        (with-input-from-file . g$7417$eZ1vL)
        (read-char . g$7400$eZ1vL)
        (read . g$12642$eZ1vL)
        (peek-char . g$7399$eZ1vL)
        (open-output-file . g$12641$eZ1vL)
        (open-input-file . g$12640$eZ1vL)
        (newline . g$7421$eZ1vL)
        (display . g$12639$eZ1vL)
        (close-output-port . g$12638$eZ1vL)
        (close-input-port . g$12637$eZ1vL)
        (eof-object? . g$12636$eZ1vL)
        (eof-object . g$12635$eZ1vL)
        (current-error-port . g$12634$eZ1vL)
        (current-output-port . g$12633$eZ1vL)
        (current-input-port . g$12632$eZ1vL)
        (output-port? . g$12631$eZ1vL)
        (input-port? . g$12630$eZ1vL)
        (utf-8-codec . g$12629$eZ1vL)
        (utf-16-codec . g$12628$eZ1vL)
        (transcoder-error-handling-mode . g$12627$eZ1vL)
        (transcoder-eol-style . g$12626$eZ1vL)
        (transcoder-codec . g$12625$eZ1vL)
        (transcoded-port . g$12624$eZ1vL)
        (textual-port? . g$12623$eZ1vL)
        (string->bytevector . g$12622$eZ1vL)
        (standard-output-port . g$12621$eZ1vL)
        (standard-input-port . g$12620$eZ1vL)
        (standard-error-port . g$12619$eZ1vL)
        (set-port-position! . g$12618$eZ1vL)
        (put-u8 . g$12617$eZ1vL)
        (put-string . g$12616$eZ1vL)
        (put-datum . g$12615$eZ1vL)
        (put-char . g$12614$eZ1vL)
        (put-bytevector . g$12613$eZ1vL)
        (port? . g$7386$eZ1vL)
        (port-transcoder . g$12612$eZ1vL)
        (port-position . g$12611$eZ1vL)
        (port-has-set-port-position!? . g$12610$eZ1vL)
        (port-has-port-position? . g$12609$eZ1vL)
        (port-eof? . g$12608$eZ1vL)
        (output-port-buffer-mode . g$12607$eZ1vL)
        (open-string-output-port . g$7385$eZ1vL)
        (open-string-input-port . g$12606$eZ1vL)
        (open-file-output-port . g$12605$eZ1vL)
        (open-file-input/output-port . g$12604$eZ1vL)
        (open-file-input-port . g$12603$eZ1vL)
        (open-bytevector-output-port . g$12602$eZ1vL)
        (open-bytevector-input-port . g$12601$eZ1vL)
        (native-transcoder . g$12600$eZ1vL)
        (native-eol-style . g$12599$eZ1vL)
        (make-transcoder . g$12598$eZ1vL)
        (latin-1-codec . g$12597$eZ1vL)
        (make-i/o-write-error . g$7241$eZ1vL)
        (make-i/o-read-error . g$7227$eZ1vL)
        (make-i/o-port-error . g$7346$eZ1vL)
        (make-i/o-invalid-position-error . g$7256$eZ1vL)
        (make-i/o-filename-error . g$7273$eZ1vL)
        (make-i/o-file-protection-error . g$7289$eZ1vL)
        (make-i/o-file-is-read-only-error . g$7303$eZ1vL)
        (make-i/o-file-does-not-exist-error . g$7331$eZ1vL)
        (make-i/o-file-already-exists-error . g$7317$eZ1vL)
        (make-i/o-error . g$7213$eZ1vL)
        (make-i/o-encoding-error . g$7377$eZ1vL)
        (make-i/o-decoding-error . g$7362$eZ1vL)
        (make-custom-textual-output-port . g$12596$eZ1vL)
        (make-custom-textual-input/output-port . g$12595$eZ1vL)
        (make-custom-textual-input-port . g$12594$eZ1vL)
        (make-custom-binary-output-port . g$12593$eZ1vL)
        (make-custom-binary-input/output-port . g$12592$eZ1vL)
        (make-custom-binary-input-port . g$12591$eZ1vL)
        (make-bytevector . g$12590$eZ1vL)
        (lookahead-u8 . g$12589$eZ1vL)
        (lookahead-char . g$12588$eZ1vL)
        (i/o-write-error? . g$7242$eZ1vL)
        (i/o-read-error? . g$7228$eZ1vL)
        (i/o-port-error? . g$7348$eZ1vL)
        (i/o-invalid-position-error? . g$7258$eZ1vL)
        (i/o-error-position . g$7259$eZ1vL)
        (i/o-filename-error? . g$7275$eZ1vL)
        (i/o-file-protection-error? . g$7290$eZ1vL)
        (i/o-file-is-read-only-error? . g$7304$eZ1vL)
        (i/o-file-does-not-exist-error? . g$7332$eZ1vL)
        (i/o-file-already-exists-error? . g$7318$eZ1vL)
        (i/o-error? . g$7214$eZ1vL)
        (i/o-error-port . g$7349$eZ1vL)
        (i/o-error-filename . g$7276$eZ1vL)
        (i/o-encoding-error? . g$7379$eZ1vL)
        (i/o-encoding-error-char . g$7380$eZ1vL)
        (i/o-decoding-error? . g$7363$eZ1vL)
        (get-u8 . g$12587$eZ1vL)
        (get-string-n! . g$12586$eZ1vL)
        (get-string-n . g$12585$eZ1vL)
        (get-string-all . g$12584$eZ1vL)
        (get-line . g$12583$eZ1vL)
        (get-datum . g$12582$eZ1vL)
        (get-char . g$12581$eZ1vL)
        (get-bytevector-some . g$12580$eZ1vL)
        (get-bytevector-n! . g$12579$eZ1vL)
        (get-bytevector-n . g$12578$eZ1vL)
        (get-bytevector-all . g$12577$eZ1vL)
        (flush-output-port . g$12576$eZ1vL)
        (close-port . g$12575$eZ1vL)
        (call-with-string-output-port . g$7387$eZ1vL)
        (call-with-port . g$7388$eZ1vL)
        (call-with-bytevector-output-port . g$12574$eZ1vL)
        (bytevector->string . g$12573$eZ1vL)
        (buffer-mode? . g$12572$eZ1vL)
        (binary-port? . g$12571$eZ1vL)
        (scheme-report-environment . g$9153$eZ1vL)
        (quotient . g$6914$eZ1vL)
        (null-environment . g$9152$eZ1vL)
        (remainder . g$6915$eZ1vL)
        (modulo . g$6916$eZ1vL)
        (inexact->exact . g$6911$eZ1vL)
        (force . g$6918$eZ1vL)
        (exact->inexact . g$6912$eZ1vL)
        (exit . g$12570$eZ1vL)
        (command-line . g$12157$eZ1vL)
        (string-fill! . g$12569$eZ1vL)
        (string-set! . g$12568$eZ1vL)
        (set-cdr! . g$12567$eZ1vL)
        (set-car! . g$12566$eZ1vL)
        (remove . g$5878$eZ1vL)
        (remv . g$5879$eZ1vL)
        (remp . g$5859$eZ1vL)
        (remq . g$5880$eZ1vL)
        (partition . g$5858$eZ1vL)
        (memv . g$5866$eZ1vL)
        (memq . g$5865$eZ1vL)
        (memp . g$5868$eZ1vL)
        (member . g$5867$eZ1vL)
        (exists . g$5872$eZ1vL)
        (for-all . g$5871$eZ1vL)
        (fold-right . g$5877$eZ1vL)
        (fold-left . g$5876$eZ1vL)
        (find . g$5857$eZ1vL)
        (filter . g$5860$eZ1vL)
        (cons* . g$5875$eZ1vL)
        (assv . g$5862$eZ1vL)
        (assq . g$5861$eZ1vL)
        (assp . g$5864$eZ1vL)
        (assoc . g$5863$eZ1vL)
        (with-exception-handler . g$12565$eZ1vL)
        (raise-continuable . g$12564$eZ1vL)
        (raise . g$12563$eZ1vL)
        (eval . g$9155$eZ1vL)
        (environment . g$9151$eZ1vL)
        (make-enumeration . g$7485$eZ1vL)
        (enum-set=? . g$7492$eZ1vL)
        (enum-set-universe . g$7486$eZ1vL)
        (enum-set-union . g$7493$eZ1vL)
        (enum-set-subset? . g$7491$eZ1vL)
        (enum-set-projection . g$7497$eZ1vL)
        (enum-set-member? . g$7490$eZ1vL)
        (enum-set-intersection . g$7494$eZ1vL)
        (enum-set-indexer . g$7487$eZ1vL)
        (enum-set-difference . g$7495$eZ1vL)
        (enum-set-constructor . g$7488$eZ1vL)
        (enum-set-complement . g$7496$eZ1vL)
        (enum-set->list . g$7489$eZ1vL)
        (who-condition? . g$6823$eZ1vL)
        (warning? . g$6734$eZ1vL)
        (violation? . g$6776$eZ1vL)
        (undefined-violation? . g$6900$eZ1vL)
        (syntax-violation? . g$6884$eZ1vL)
        (syntax-violation-subform . g$6886$eZ1vL)
        (syntax-violation-form . g$6885$eZ1vL)
        (syntax-violation . g$9173$eZ1vL)
        (simple-conditions . g$12562$eZ1vL)
        (serious-condition? . g$6748$eZ1vL)
        (non-continuable-violation? . g$6838$eZ1vL)
        (message-condition? . g$6719$eZ1vL)
        (make-who-condition . g$6821$eZ1vL)
        (make-warning . g$6733$eZ1vL)
        (make-violation . g$6775$eZ1vL)
        (make-undefined-violation . g$6899$eZ1vL)
        (make-syntax-violation . g$6881$eZ1vL)
        (make-serious-condition . g$6747$eZ1vL)
        (make-non-continuable-violation . g$6837$eZ1vL)
        (make-message-condition . g$6717$eZ1vL)
        (make-lexical-violation . g$6865$eZ1vL)
        (make-irritants-condition . g$6804$eZ1vL)
        (make-implementation-restriction-violation . g$6851$eZ1vL)
        (make-error . g$6761$eZ1vL)
        (make-assertion-violation . g$6789$eZ1vL)
        (lexical-violation? . g$6866$eZ1vL)
        (irritants-condition? . g$6806$eZ1vL)
        (implementation-restriction-violation? . g$6852$eZ1vL)
        (error? . g$6762$eZ1vL)
        (condition-who . g$6824$eZ1vL)
        (condition-predicate . g$12561$eZ1vL)
        (condition-message . g$6720$eZ1vL)
        (condition-irritants . g$6807$eZ1vL)
        (condition-accessor . g$12560$eZ1vL)
        (condition . g$12559$eZ1vL)
        (assertion-violation? . g$6790$eZ1vL)
        (condition? . g$12558$eZ1vL)
        (utf32->string . g$12557$eZ1vL)
        (utf16->string . g$12556$eZ1vL)
        (utf8->string . g$12555$eZ1vL)
        (uint-list->bytevector . g$12554$eZ1vL)
        (u8-list->bytevector . g$12553$eZ1vL)
        (string->utf8 . g$12552$eZ1vL)
        (string->utf32 . g$12551$eZ1vL)
        (string->utf16 . g$12550$eZ1vL)
        (sint-list->bytevector . g$12549$eZ1vL)
        (native-endianness . g$6575$eZ1vL)
        (bytevector? . g$12548$eZ1vL)
        (bytevector=? . g$12547$eZ1vL)
        (bytevector-uint-set! . g$12546$eZ1vL)
        (bytevector-uint-ref . g$12545$eZ1vL)
        (bytevector-u8-set! . g$12544$eZ1vL)
        (bytevector-u8-ref . g$12543$eZ1vL)
        (bytevector-u64-set! . g$6596$eZ1vL)
        (bytevector-u64-ref . g$6592$eZ1vL)
        (bytevector-u64-native-set! . g$6598$eZ1vL)
        (bytevector-u64-native-ref . g$6594$eZ1vL)
        (bytevector-u32-set! . g$6588$eZ1vL)
        (bytevector-u32-ref . g$6584$eZ1vL)
        (bytevector-u32-native-set! . g$6590$eZ1vL)
        (bytevector-u32-native-ref . g$6586$eZ1vL)
        (bytevector-u16-set! . g$6580$eZ1vL)
        (bytevector-u16-ref . g$6576$eZ1vL)
        (bytevector-u16-native-set! . g$6582$eZ1vL)
        (bytevector-u16-native-ref . g$6578$eZ1vL)
        (bytevector-sint-set! . g$12542$eZ1vL)
        (bytevector-sint-ref . g$12541$eZ1vL)
        (bytevector-s8-set! . g$12540$eZ1vL)
        (bytevector-s8-ref . g$12539$eZ1vL)
        (bytevector-s64-set! . g$6597$eZ1vL)
        (bytevector-s64-ref . g$6593$eZ1vL)
        (bytevector-s64-native-set! . g$6599$eZ1vL)
        (bytevector-s64-native-ref . g$6595$eZ1vL)
        (bytevector-s32-set! . g$6589$eZ1vL)
        (bytevector-s32-ref . g$6585$eZ1vL)
        (bytevector-s32-native-set! . g$6591$eZ1vL)
        (bytevector-s32-native-ref . g$6587$eZ1vL)
        (bytevector-s16-set! . g$6581$eZ1vL)
        (bytevector-s16-ref . g$6577$eZ1vL)
        (bytevector-s16-native-set! . g$6583$eZ1vL)
        (bytevector-s16-native-ref . g$6579$eZ1vL)
        (bytevector-length . g$12538$eZ1vL)
        (bytevector-ieee-single-set! . g$12537$eZ1vL)
        (bytevector-ieee-single-ref . g$12536$eZ1vL)
        (bytevector-ieee-single-native-set! . g$6602$eZ1vL)
        (bytevector-ieee-single-native-ref . g$6600$eZ1vL)
        (bytevector-ieee-double-set! . g$12535$eZ1vL)
        (bytevector-ieee-double-ref . g$12534$eZ1vL)
        (bytevector-ieee-double-native-set! . g$6603$eZ1vL)
        (bytevector-ieee-double-native-ref . g$6601$eZ1vL)
        (bytevector-fill! . g$12533$eZ1vL)
        (bytevector-copy! . g$12532$eZ1vL)
        (bytevector-copy . g$12531$eZ1vL)
        (bytevector->uint-list . g$12530$eZ1vL)
        (bytevector->u8-list . g$12529$eZ1vL)
        (bytevector->sint-list . g$12528$eZ1vL)
        (no-nans-violation? . g$7199$eZ1vL)
        (no-infinities-violation? . g$7185$eZ1vL)
        (make-no-nans-violation . g$7198$eZ1vL)
        (make-no-infinities-violation . g$7184$eZ1vL)
        (real->flonum . g$12527$eZ1vL)
        (flzero? . g$12526$eZ1vL)
        (fltruncate . g$12525$eZ1vL)
        (fltan . g$12524$eZ1vL)
        (flsqrt . g$12523$eZ1vL)
        (flsin . g$12522$eZ1vL)
        (flround . g$12521$eZ1vL)
        (flpositive? . g$12520$eZ1vL)
        (flonum? . g$12519$eZ1vL)
        (flodd? . g$12518$eZ1vL)
        (flnumerator . g$12517$eZ1vL)
        (flnegative? . g$12516$eZ1vL)
        (flnan? . g$12515$eZ1vL)
        (flmod0 . g$12514$eZ1vL)
        (flmod . g$12513$eZ1vL)
        (flmin . g$12512$eZ1vL)
        (flmax . g$12511$eZ1vL)
        (fllog . g$12510$eZ1vL)
        (flinteger? . g$12509$eZ1vL)
        (flinfinite? . g$12508$eZ1vL)
        (flfloor . g$12507$eZ1vL)
        (flfinite? . g$12506$eZ1vL)
        (flexpt . g$12505$eZ1vL)
        (flexp . g$12504$eZ1vL)
        (fleven? . g$12503$eZ1vL)
        (fldiv0-and-mod0 . g$12502$eZ1vL)
        (fldiv0 . g$12501$eZ1vL)
        (fldiv-and-mod . g$12500$eZ1vL)
        (fldiv . g$12499$eZ1vL)
        (fldenominator . g$12498$eZ1vL)
        (flcos . g$12497$eZ1vL)
        (flceiling . g$12496$eZ1vL)
        (flatan . g$12495$eZ1vL)
        (flasin . g$12494$eZ1vL)
        (flacos . g$12493$eZ1vL)
        (flabs . g$12492$eZ1vL)
        (fl>? . g$12491$eZ1vL)
        (fl>=? . g$12490$eZ1vL)
        (fl=? . g$12489$eZ1vL)
        (fl<? . g$12488$eZ1vL)
        (fl<=? . g$12487$eZ1vL)
        (fl/ . g$12486$eZ1vL)
        (fl- . g$12485$eZ1vL)
        (fl+ . g$12484$eZ1vL)
        (fl* . g$12483$eZ1vL)
        (fixnum->flonum . g$12482$eZ1vL)
        (fxzero? . g$12481$eZ1vL)
        (fxxor . g$12480$eZ1vL)
        (fxrotate-bit-field . g$7131$eZ1vL)
        (fxreverse-bit-field . g$12479$eZ1vL)
        (fxpositive? . g$12478$eZ1vL)
        (fxodd? . g$12477$eZ1vL)
        (fxnot . g$12476$eZ1vL)
        (fxnegative? . g$12475$eZ1vL)
        (fxmod0 . g$12474$eZ1vL)
        (fxmod . g$12473$eZ1vL)
        (fxmin . g$12472$eZ1vL)
        (fxmax . g$12471$eZ1vL)
        (fxlength . g$12470$eZ1vL)
        (fxior . g$12469$eZ1vL)
        (fxif . g$7125$eZ1vL)
        (fxfirst-bit-set . g$12468$eZ1vL)
        (fxeven? . g$12467$eZ1vL)
        (fxdiv0-and-mod0 . g$12466$eZ1vL)
        (fxdiv0 . g$12465$eZ1vL)
        (fxdiv-and-mod . g$12464$eZ1vL)
        (fxdiv . g$12463$eZ1vL)
        (fxcopy-bit-field . g$7128$eZ1vL)
        (fxcopy-bit . g$7126$eZ1vL)
        (fxbit-set? . g$12462$eZ1vL)
        (fxbit-field . g$7127$eZ1vL)
        (fxbit-count . g$12461$eZ1vL)
        (fxarithmetic-shift-right . g$7130$eZ1vL)
        (fxarithmetic-shift-left . g$7129$eZ1vL)
        (fxarithmetic-shift . g$12460$eZ1vL)
        (fxand . g$12459$eZ1vL)
        (fx>? . g$12458$eZ1vL)
        (fx>=? . g$12457$eZ1vL)
        (fx=? . g$12456$eZ1vL)
        (fx<? . g$12455$eZ1vL)
        (fx<=? . g$12454$eZ1vL)
        (fx-/carry . g$7123$eZ1vL)
        (fx- . g$12453$eZ1vL)
        (fx+/carry . g$7124$eZ1vL)
        (fx+ . g$12452$eZ1vL)
        (fx*/carry . g$7122$eZ1vL)
        (fx* . g$12451$eZ1vL)
        (greatest-fixnum . g$12450$eZ1vL)
        (least-fixnum . g$12449$eZ1vL)
        (fixnum-width . g$12448$eZ1vL)
        (fixnum? . g$12447$eZ1vL)
        (bitwise-rotate-bit-field . g$7096$eZ1vL)
        (bitwise-reverse-bit-field . g$12446$eZ1vL)
        (bitwise-length . g$12445$eZ1vL)
        (bitwise-if . g$7090$eZ1vL)
        (bitwise-first-bit-set . g$12444$eZ1vL)
        (bitwise-copy-bit-field . g$7093$eZ1vL)
        (bitwise-copy-bit . g$7091$eZ1vL)
        (bitwise-bit-set? . g$12443$eZ1vL)
        (bitwise-bit-field . g$7092$eZ1vL)
        (bitwise-bit-count . g$12442$eZ1vL)
        (bitwise-xor . g$12441$eZ1vL)
        (bitwise-ior . g$12440$eZ1vL)
        (bitwise-and . g$12439$eZ1vL)
        (bitwise-not . g$12438$eZ1vL)
        (bitwise-arithmetic-shift-right . g$7095$eZ1vL)
        (bitwise-arithmetic-shift-left . g$7094$eZ1vL)
        (bitwise-arithmetic-shift . g$12437$eZ1vL)
        (zero? . g$6021$eZ1vL)
        (vector? . g$12436$eZ1vL)
        (vector-set! . g$12435$eZ1vL)
        (vector-ref . g$12434$eZ1vL)
        (vector-map . g$12433$eZ1vL)
        (vector-length . g$12432$eZ1vL)
        (vector-for-each . g$12431$eZ1vL)
        (vector-fill! . g$12430$eZ1vL)
        (vector->list . g$12429$eZ1vL)
        (vector . g$12428$eZ1vL)
        (values . g$12427$eZ1vL)
        (truncate . g$12426$eZ1vL)
        (tan . g$12425$eZ1vL)
        (symbol? . g$12424$eZ1vL)
        (symbol=? . g$6067$eZ1vL)
        (symbol->string . g$12423$eZ1vL)
        (substring . g$12422$eZ1vL)
        (string? . g$12421$eZ1vL)
        (string>? . g$6064$eZ1vL)
        (string>=? . g$6066$eZ1vL)
        (string=? . g$6062$eZ1vL)
        (string<? . g$6063$eZ1vL)
        (string<=? . g$6065$eZ1vL)
        (string-ref . g$12420$eZ1vL)
        (string-length . g$12419$eZ1vL)
        (string-for-each . g$12418$eZ1vL)
        (string-copy . g$12417$eZ1vL)
        (string-append . g$12416$eZ1vL)
        (string->symbol . g$12415$eZ1vL)
        (string->number . g$12414$eZ1vL)
        (string->list . g$12413$eZ1vL)
        (string . g$12412$eZ1vL)
        (sqrt . g$12411$eZ1vL)
        (sin . g$12410$eZ1vL)
        (round . g$12409$eZ1vL)
        (reverse . g$12408$eZ1vL)
        (real? . g$12407$eZ1vL)
        (real-valued? . g$12406$eZ1vL)
        (real-part . g$12405$eZ1vL)
        (rationalize . g$6108$eZ1vL)
        (rational? . g$12404$eZ1vL)
        (rational-valued? . g$12403$eZ1vL)
        (procedure? . g$12402$eZ1vL)
        (positive? . g$6019$eZ1vL)
        (pair? . g$12401$eZ1vL)
        (odd? . g$6023$eZ1vL)
        (numerator . g$12400$eZ1vL)
        (number? . g$12399$eZ1vL)
        (number->string . g$12398$eZ1vL)
        (null? . g$12397$eZ1vL)
        (not . g$12396$eZ1vL)
        (negative? . g$6020$eZ1vL)
        (nan? . g$12395$eZ1vL)
        (min . g$6025$eZ1vL)
        (max . g$6024$eZ1vL)
        (map . g$5873$eZ1vL)
        (make-vector . g$12394$eZ1vL)
        (make-string . g$12393$eZ1vL)
        (make-rectangular . g$12392$eZ1vL)
        (make-polar . g$12391$eZ1vL)
        (magnitude . g$12390$eZ1vL)
        (log . g$12389$eZ1vL)
        (list? . g$12388$eZ1vL)
        (list-tail . g$5853$eZ1vL)
        (list-ref . g$5854$eZ1vL)
        (list->vector . g$12387$eZ1vL)
        (list->string . g$12386$eZ1vL)
        (list . g$12385$eZ1vL)
        (length . g$12384$eZ1vL)
        (lcm . g$6027$eZ1vL)
        (integer? . g$12383$eZ1vL)
        (integer-valued? . g$12382$eZ1vL)
        (integer->char . g$12381$eZ1vL)
        (infinite? . g$12380$eZ1vL)
        (inexact? . g$12379$eZ1vL)
        (inexact . g$12378$eZ1vL)
        (imag-part . g$12377$eZ1vL)
        (gcd . g$6026$eZ1vL)
        (for-each . g$5874$eZ1vL)
        (floor . g$12376$eZ1vL)
        (finite? . g$12375$eZ1vL)
        (expt . g$12374$eZ1vL)
        (exp . g$12373$eZ1vL)
        (exact? . g$12372$eZ1vL)
        (exact-integer-sqrt . g$12371$eZ1vL)
        (exact . g$12370$eZ1vL)
        (even? . g$6022$eZ1vL)
        (error . g$12369$eZ1vL)
        (eqv? . g$12368$eZ1vL)
        (equal? . g$12367$eZ1vL)
        (eq? . g$12366$eZ1vL)
        (dynamic-wind . g$12365$eZ1vL)
        (div0-and-mod0 . g$12364$eZ1vL)
        (mod0 . g$12363$eZ1vL)
        (div0 . g$12362$eZ1vL)
        (div-and-mod . g$12361$eZ1vL)
        (mod . g$12360$eZ1vL)
        (div . g$12359$eZ1vL)
        (denominator . g$12358$eZ1vL)
        (cos . g$12357$eZ1vL)
        (cons . g$12356$eZ1vL)
        (complex? . g$12355$eZ1vL)
        (char? . g$12354$eZ1vL)
        (char>? . g$6105$eZ1vL)
        (char>=? . g$6107$eZ1vL)
        (char=? . g$6103$eZ1vL)
        (char<? . g$6104$eZ1vL)
        (char<=? . g$6106$eZ1vL)
        (char->integer . g$12353$eZ1vL)
        (ceiling . g$12352$eZ1vL)
        (call-with-values . g$12351$eZ1vL)
        (call/cc . g$12350$eZ1vL)
        (call-with-current-continuation . g$12349$eZ1vL)
        (cddddr . g$6018$eZ1vL)
        (cdddar . g$6017$eZ1vL)
        (cddadr . g$6016$eZ1vL)
        (cddaar . g$6015$eZ1vL)
        (cdaddr . g$6014$eZ1vL)
        (cdadar . g$6013$eZ1vL)
        (cdaadr . g$6012$eZ1vL)
        (cdaaar . g$6011$eZ1vL)
        (cadddr . g$6010$eZ1vL)
        (caddar . g$6009$eZ1vL)
        (cadadr . g$6008$eZ1vL)
        (cadaar . g$6007$eZ1vL)
        (caaddr . g$6006$eZ1vL)
        (caadar . g$6005$eZ1vL)
        (caaadr . g$6004$eZ1vL)
        (caaaar . g$6003$eZ1vL)
        (cdddr . g$6002$eZ1vL)
        (cddar . g$6001$eZ1vL)
        (cdadr . g$6000$eZ1vL)
        (cdaar . g$5999$eZ1vL)
        (caddr . g$5998$eZ1vL)
        (cadar . g$5997$eZ1vL)
        (caadr . g$5996$eZ1vL)
        (caaar . g$5995$eZ1vL)
        (cddr . g$5994$eZ1vL)
        (cdar . g$5993$eZ1vL)
        (cadr . g$5992$eZ1vL)
        (caar . g$5991$eZ1vL)
        (cdr . g$12348$eZ1vL)
        (car . g$12347$eZ1vL)
        (boolean? . g$12346$eZ1vL)
        (boolean=? . g$6068$eZ1vL)
        (atan . g$12345$eZ1vL)
        (assertion-violation . g$12344$eZ1vL)
        (asin . g$12343$eZ1vL)
        (apply . g$12342$eZ1vL)
        (append . g$12341$eZ1vL)
        (angle . g$12340$eZ1vL)
        (acos . g$12339$eZ1vL)
        (abs . g$12338$eZ1vL)
        (/ . g$12337$eZ1vL)
        (* . g$12336$eZ1vL)
        (- . g$12335$eZ1vL)
        (+ . g$12334$eZ1vL)
        (>= . g$12333$eZ1vL)
        (> . g$12332$eZ1vL)
        (= . g$12331$eZ1vL)
        (<= . g$12330$eZ1vL)
        (< . g$12329$eZ1vL)
        (deserialize-port . g$12325$eZ1vL)
        (serialize-port . g$12324$eZ1vL)
        (enum-set? . g$7460$eZ1vL)
        (load/args . g$12159$eZ1vL)
        (printf . g$7571$eZ1vL)
        (fprintf . g$7572$eZ1vL)
        (format . g$7573$eZ1vL)
        (procedure-form . g$12323$eZ1vL)
        (procedure-environment . g$12322$eZ1vL)
        (procedure-name . g$12321$eZ1vL)
        (procedure-arity . g$12320$eZ1vL)
        (gc-collect . g$12319$eZ1vL)
        (clr-type? . g$12318$eZ1vL)
        (get-clr-type . g$12317$eZ1vL)
        (vector-append . g$12315$eZ1vL)
        (vector-filter . g$12314$eZ1vL)
        (vector-reverse! . g$12313$eZ1vL)
        (vector-contains? . g$12312$eZ1vL)
        (vector-index-of . g$12311$eZ1vL)
        (vector-copy . g$12310$eZ1vL)
        (vector-binary-search . g$12309$eZ1vL)
        (string-ci-compare . g$12308$eZ1vL)
        (string-compare . g$12307$eZ1vL)
        (string-format . g$12306$eZ1vL)
        (trace-printer . g$12156$eZ1vL)
        (time-it . g$12304$eZ1vL)
        (make-parameter . g$7874$eZ1vL)
        (open-tcp-input/output-port . g$12301$eZ1vL)
        (hashtable-for-each . g$12300$eZ1vL)
        (hashtable-map . g$12299$eZ1vL)
        (environment-bindings . g$9147$eZ1vL)
        (environment-symbols . g$9150$eZ1vL)
        (interaction-environment-symbols . g$9146$eZ1vL)
        (optimization-level . g$12298$eZ1vL)
        (library-path . g$8329$eZ1vL)
        (expand->core . g$9156$eZ1vL)
        (expand . g$9154$eZ1vL)
        (expand-boot-cps . g$7651$eZ1vL)
        (convert->cps . g$7648$eZ1vL)
        (&no-nans . g$12297$eZ1vL)
        (&no-infinities . g$12296$eZ1vL)
        (&i/o-encoding . g$12295$eZ1vL)
        (&i/o-decoding . g$12294$eZ1vL)
        (&i/o-port . g$12293$eZ1vL)
        (&i/o-file-does-not-exist . g$12292$eZ1vL)
        (&i/o-file-already-exists . g$12291$eZ1vL)
        (&i/o-file-is-read-only . g$12290$eZ1vL)
        (&i/o-file-protection . g$12289$eZ1vL)
        (&i/o-filename . g$12288$eZ1vL)
        (&i/o-invalid-position . g$12287$eZ1vL)
        (&i/o-write . g$12286$eZ1vL)
        (&i/o-read . g$12285$eZ1vL)
        (&i/o . g$12284$eZ1vL)
        (&non-continuable . g$12283$eZ1vL)
        (&undefined . g$12282$eZ1vL)
        (&syntax . g$12281$eZ1vL)
        (&lexical . g$12280$eZ1vL)
        (&implementation-restriction . g$12279$eZ1vL)
        (&who . g$12278$eZ1vL)
        (&irritants . g$12277$eZ1vL)
        (&assertion . g$12276$eZ1vL)
        (&violation . g$12275$eZ1vL)
        (&error . g$12274$eZ1vL)
        (&serious . g$12273$eZ1vL)
        (&warning . g$12272$eZ1vL)
        (&message . g$12271$eZ1vL)
        (&condition . g$12270$eZ1vL)
        (define-condition-type . g$12269$eZ1vL)
        (define-enumeration . g$12268$eZ1vL)
        (define-record-type . g$12267$eZ1vL)
        (parent-rtd . g$12266$eZ1vL)
        (nongenerative . g$12265$eZ1vL)
        (opaque . g$12264$eZ1vL)
        (sealed . g$12263$eZ1vL)
        (protocol . g$12262$eZ1vL)
        (parent . g$12261$eZ1vL)
        (immutable . g$12260$eZ1vL)
        (mutable . g$12259$eZ1vL)
        (fields . g$12258$eZ1vL)
        (error-handling-mode . g$12257$eZ1vL)
        (file-options . g$12256$eZ1vL)
        (buffer-mode . g$12255$eZ1vL)
        (eol-style . g$12254$eZ1vL)
        (guard . g$12253$eZ1vL)
        (trace-letrec-syntax . g$12252$eZ1vL)
        (trace-let-syntax . g$12251$eZ1vL)
        (trace-define-syntax . g$12250$eZ1vL)
        (trace-define . g$12249$eZ1vL)
        (trace-lambda . g$12248$eZ1vL)
        (unsyntax-splicing . g$12247$eZ1vL)
        (unsyntax . g$12246$eZ1vL)
        (unquote-splicing . g$12245$eZ1vL)
        (unquote . g$12244$eZ1vL)
        (_ . g$12243$eZ1vL)
        (else . g$12242$eZ1vL)
        (=> . g$12241$eZ1vL)
        (... . g$12240$eZ1vL)
        (assert . g$12239$eZ1vL)
        (endianness . g$12238$eZ1vL)
        (delay . g$12237$eZ1vL)
        (time . g$12236$eZ1vL)
        (or . g$12235$eZ1vL)
        (and . g$12234$eZ1vL)
        (do . g$12233$eZ1vL)
        (cond . g$12232$eZ1vL)
        (let* . g$12231$eZ1vL)
        (let . g$12230$eZ1vL)
        (identifier-syntax . g$12229$eZ1vL)
        (with-syntax . g$12228$eZ1vL)
        (quasisyntax . g$12227$eZ1vL)
        (quasiquote . g$12226$eZ1vL)
        (syntax-rules . g$12225$eZ1vL)
        (include-into . g$12224$eZ1vL)
        (include . g$12223$eZ1vL)
        (let-values . g$12221$eZ1vL)
        (let*-values . g$12220$eZ1vL)
        (record-constructor-descriptor . g$12219$eZ1vL)
        (record-type-descriptor . g$12218$eZ1vL)
        (fluid-let-syntax . g$12217$eZ1vL)
        (case . g$12216$eZ1vL)
        (parameterize . g$12215$eZ1vL)
        (unless . g$12214$eZ1vL)
        (when . g$12213$eZ1vL)
        (if . g$12212$eZ1vL)
        (letrec* . g$12211$eZ1vL)
        (letrec . g$12210$eZ1vL)
        (case-lambda . g$12208$eZ1vL)
        (lambda . g$12207$eZ1vL)
        (syntax . g$12206$eZ1vL)
        (syntax-case . g$12205$eZ1vL)
        (quote . g$12204$eZ1vL)
        (letrec-syntax . g$12202$eZ1vL)
        (let-syntax . g$12201$eZ1vL)
        (set! . g$12200$eZ1vL)
        (export . g$12199$eZ1vL)
        (import . g$12198$eZ1vL)
        (library . g$12197$eZ1vL)
        (begin . g$12196$eZ1vL)
        (module . g$12195$eZ1vL)
        (define-syntax . g$12194$eZ1vL)
        (define . g$12193$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12786$eZ1vL
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12302$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12787$eZ1vL
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12727$eZ1vL)
        (annotation-source . g$12726$eZ1vL)
        (annotation-expression . g$12725$eZ1vL)
        (annotation? . g$12724$eZ1vL)
        (read-annotated . g$12723$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12788$eZ1vL
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12696$eZ1vL)
        (serialize-library . g$12695$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12789$eZ1vL
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8777$eZ1vL)
        (variable-transformer? . g$8776$eZ1vL)
        (eqv-hash . g$12327$eZ1vL)
        (reverse! . g$12326$eZ1vL)
        (make-promise . g$6917$eZ1vL)
        (format . g$7573$eZ1vL)
        (get-command-line . g$12316$eZ1vL)
        (make-traced-procedure . g$12305$eZ1vL)
        (make-traced-macro . g$7593$eZ1vL)
        (assertion-error . g$9169$eZ1vL)
        (library-locator . g$12303$eZ1vL)
        (get-library-paths . g$12302$eZ1vL)
        (library-path . g$8329$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12790$eZ1vL
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12328$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12791$eZ1vL
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12714$eZ1vL)
        (clr-field-set!-internal . g$12713$eZ1vL)
        (clr-field-get-internal . g$12712$eZ1vL)
        (clr-cast-internal . g$12711$eZ1vL)
        (clr-call-internal . g$12710$eZ1vL)
        (clr-new-internal . g$12709$eZ1vL)
        (clr-new-array-internal . g$12708$eZ1vL)
        (clr-is-internal . g$12707$eZ1vL)
        (clr-reference-internal . g$12706$eZ1vL)
        (clr-using-internal . g$12705$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12792$eZ1vL
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12245$eZ1vL)
        (unquote . g$12244$eZ1vL)
        (else . g$12242$eZ1vL)
        (=> . g$12241$eZ1vL)
        (delay . g$12237$eZ1vL)
        (or . g$12235$eZ1vL)
        (and . g$12234$eZ1vL)
        (do . g$12233$eZ1vL)
        (cond . g$12232$eZ1vL)
        (let* . g$12231$eZ1vL)
        (let . g$12230$eZ1vL)
        (quasiquote . g$12226$eZ1vL)
        (syntax-rules . g$12225$eZ1vL)
        (case . g$12216$eZ1vL)
        (if . g$12212$eZ1vL)
        (letrec . g$12210$eZ1vL)
        (lambda . g$12207$eZ1vL)
        (quote . g$12204$eZ1vL)
        (letrec-syntax . g$12202$eZ1vL)
        (let-syntax . g$12201$eZ1vL)
        (set! . g$12200$eZ1vL)
        (begin . g$12196$eZ1vL)
        (define-syntax . g$12194$eZ1vL)
        (define . g$12193$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12793$eZ1vL
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$9180$eZ1vL)
        (char-ready? . g$12694$eZ1vL)
        (string-ci>? . g$6995$eZ1vL)
        (string-ci>=? . g$6997$eZ1vL)
        (string-ci=? . g$6993$eZ1vL)
        (string-ci<? . g$6994$eZ1vL)
        (string-ci<=? . g$6996$eZ1vL)
        (char-whitespace? . g$12685$eZ1vL)
        (char-upper-case? . g$12684$eZ1vL)
        (char-numeric? . g$12682$eZ1vL)
        (char-lower-case? . g$12681$eZ1vL)
        (char-upcase . g$12679$eZ1vL)
        (char-downcase . g$12676$eZ1vL)
        (char-ci>? . g$7034$eZ1vL)
        (char-ci>=? . g$7036$eZ1vL)
        (char-ci=? . g$7032$eZ1vL)
        (char-ci<? . g$7033$eZ1vL)
        (char-ci<=? . g$7035$eZ1vL)
        (char-alphabetic? . g$12675$eZ1vL)
        (call-with-output-file . g$7420$eZ1vL)
        (call-with-input-file . g$7419$eZ1vL)
        (write-char . g$7401$eZ1vL)
        (write . g$12643$eZ1vL)
        (with-output-to-file . g$7418$eZ1vL)
        (with-input-from-file . g$7417$eZ1vL)
        (read-char . g$7400$eZ1vL)
        (read . g$12642$eZ1vL)
        (peek-char . g$7399$eZ1vL)
        (open-output-file . g$12641$eZ1vL)
        (open-input-file . g$12640$eZ1vL)
        (newline . g$7421$eZ1vL)
        (display . g$12639$eZ1vL)
        (close-output-port . g$12638$eZ1vL)
        (close-input-port . g$12637$eZ1vL)
        (eof-object? . g$12636$eZ1vL)
        (eof-object . g$12635$eZ1vL)
        (current-error-port . g$12634$eZ1vL)
        (current-output-port . g$12633$eZ1vL)
        (current-input-port . g$12632$eZ1vL)
        (output-port? . g$12631$eZ1vL)
        (input-port? . g$12630$eZ1vL)
        (scheme-report-environment . g$9153$eZ1vL)
        (quotient . g$6914$eZ1vL)
        (null-environment . g$9152$eZ1vL)
        (remainder . g$6915$eZ1vL)
        (modulo . g$6916$eZ1vL)
        (inexact->exact . g$6911$eZ1vL)
        (force . g$6918$eZ1vL)
        (exact->inexact . g$6912$eZ1vL)
        (string-fill! . g$12569$eZ1vL)
        (string-set! . g$12568$eZ1vL)
        (set-cdr! . g$12567$eZ1vL)
        (set-car! . g$12566$eZ1vL)
        (memv . g$5866$eZ1vL)
        (memq . g$5865$eZ1vL)
        (member . g$5867$eZ1vL)
        (assv . g$5862$eZ1vL)
        (assq . g$5861$eZ1vL)
        (assoc . g$5863$eZ1vL)
        (eval . g$9155$eZ1vL)
        (zero? . g$6021$eZ1vL)
        (vector? . g$12436$eZ1vL)
        (vector-set! . g$12435$eZ1vL)
        (vector-ref . g$12434$eZ1vL)
        (vector-length . g$12432$eZ1vL)
        (vector-fill! . g$12430$eZ1vL)
        (vector->list . g$12429$eZ1vL)
        (vector . g$12428$eZ1vL)
        (values . g$12427$eZ1vL)
        (truncate . g$12426$eZ1vL)
        (tan . g$12425$eZ1vL)
        (symbol? . g$12424$eZ1vL)
        (symbol->string . g$12423$eZ1vL)
        (substring . g$12422$eZ1vL)
        (string? . g$12421$eZ1vL)
        (string>? . g$6064$eZ1vL)
        (string>=? . g$6066$eZ1vL)
        (string=? . g$6062$eZ1vL)
        (string<? . g$6063$eZ1vL)
        (string<=? . g$6065$eZ1vL)
        (string-ref . g$12420$eZ1vL)
        (string-length . g$12419$eZ1vL)
        (string-copy . g$12417$eZ1vL)
        (string-append . g$12416$eZ1vL)
        (string->symbol . g$12415$eZ1vL)
        (string->number . g$12414$eZ1vL)
        (string->list . g$12413$eZ1vL)
        (string . g$12412$eZ1vL)
        (sqrt . g$12411$eZ1vL)
        (sin . g$12410$eZ1vL)
        (round . g$12409$eZ1vL)
        (reverse . g$12408$eZ1vL)
        (real? . g$12407$eZ1vL)
        (real-part . g$12405$eZ1vL)
        (rationalize . g$6108$eZ1vL)
        (rational? . g$12404$eZ1vL)
        (procedure? . g$12402$eZ1vL)
        (positive? . g$6019$eZ1vL)
        (pair? . g$12401$eZ1vL)
        (odd? . g$6023$eZ1vL)
        (numerator . g$12400$eZ1vL)
        (number? . g$12399$eZ1vL)
        (number->string . g$12398$eZ1vL)
        (null? . g$12397$eZ1vL)
        (not . g$12396$eZ1vL)
        (negative? . g$6020$eZ1vL)
        (min . g$6025$eZ1vL)
        (max . g$6024$eZ1vL)
        (map . g$5873$eZ1vL)
        (make-vector . g$12394$eZ1vL)
        (make-string . g$12393$eZ1vL)
        (make-rectangular . g$12392$eZ1vL)
        (make-polar . g$12391$eZ1vL)
        (magnitude . g$12390$eZ1vL)
        (log . g$12389$eZ1vL)
        (list? . g$12388$eZ1vL)
        (list-tail . g$5853$eZ1vL)
        (list-ref . g$5854$eZ1vL)
        (list->vector . g$12387$eZ1vL)
        (list->string . g$12386$eZ1vL)
        (list . g$12385$eZ1vL)
        (length . g$12384$eZ1vL)
        (lcm . g$6027$eZ1vL)
        (integer? . g$12383$eZ1vL)
        (integer->char . g$12381$eZ1vL)
        (inexact? . g$12379$eZ1vL)
        (imag-part . g$12377$eZ1vL)
        (gcd . g$6026$eZ1vL)
        (for-each . g$5874$eZ1vL)
        (floor . g$12376$eZ1vL)
        (expt . g$12374$eZ1vL)
        (exp . g$12373$eZ1vL)
        (exact? . g$12372$eZ1vL)
        (even? . g$6022$eZ1vL)
        (eqv? . g$12368$eZ1vL)
        (equal? . g$12367$eZ1vL)
        (eq? . g$12366$eZ1vL)
        (dynamic-wind . g$12365$eZ1vL)
        (denominator . g$12358$eZ1vL)
        (cos . g$12357$eZ1vL)
        (cons . g$12356$eZ1vL)
        (complex? . g$12355$eZ1vL)
        (char? . g$12354$eZ1vL)
        (char>? . g$6105$eZ1vL)
        (char>=? . g$6107$eZ1vL)
        (char=? . g$6103$eZ1vL)
        (char<? . g$6104$eZ1vL)
        (char<=? . g$6106$eZ1vL)
        (char->integer . g$12353$eZ1vL)
        (ceiling . g$12352$eZ1vL)
        (call-with-values . g$12351$eZ1vL)
        (call-with-current-continuation . g$12349$eZ1vL)
        (cddddr . g$6018$eZ1vL)
        (cdddar . g$6017$eZ1vL)
        (cddadr . g$6016$eZ1vL)
        (cddaar . g$6015$eZ1vL)
        (cdaddr . g$6014$eZ1vL)
        (cdadar . g$6013$eZ1vL)
        (cdaadr . g$6012$eZ1vL)
        (cdaaar . g$6011$eZ1vL)
        (cadddr . g$6010$eZ1vL)
        (caddar . g$6009$eZ1vL)
        (cadadr . g$6008$eZ1vL)
        (cadaar . g$6007$eZ1vL)
        (caaddr . g$6006$eZ1vL)
        (caadar . g$6005$eZ1vL)
        (caaadr . g$6004$eZ1vL)
        (caaaar . g$6003$eZ1vL)
        (cdddr . g$6002$eZ1vL)
        (cddar . g$6001$eZ1vL)
        (cdadr . g$6000$eZ1vL)
        (cdaar . g$5999$eZ1vL)
        (caddr . g$5998$eZ1vL)
        (cadar . g$5997$eZ1vL)
        (caadr . g$5996$eZ1vL)
        (caaar . g$5995$eZ1vL)
        (cddr . g$5994$eZ1vL)
        (cdar . g$5993$eZ1vL)
        (cadr . g$5992$eZ1vL)
        (caar . g$5991$eZ1vL)
        (cdr . g$12348$eZ1vL)
        (car . g$12347$eZ1vL)
        (boolean? . g$12346$eZ1vL)
        (atan . g$12345$eZ1vL)
        (asin . g$12343$eZ1vL)
        (apply . g$12342$eZ1vL)
        (append . g$12341$eZ1vL)
        (angle . g$12340$eZ1vL)
        (acos . g$12339$eZ1vL)
        (abs . g$12338$eZ1vL)
        (/ . g$12337$eZ1vL)
        (* . g$12336$eZ1vL)
        (- . g$12335$eZ1vL)
        (+ . g$12334$eZ1vL)
        (>= . g$12333$eZ1vL)
        (> . g$12332$eZ1vL)
        (= . g$12331$eZ1vL)
        (<= . g$12330$eZ1vL)
        (< . g$12329$eZ1vL)
        (unquote-splicing . g$12245$eZ1vL)
        (unquote . g$12244$eZ1vL)
        (else . g$12242$eZ1vL)
        (=> . g$12241$eZ1vL)
        (... . g$12240$eZ1vL)
        (delay . g$12237$eZ1vL)
        (or . g$12235$eZ1vL)
        (and . g$12234$eZ1vL)
        (do . g$12233$eZ1vL)
        (cond . g$12232$eZ1vL)
        (let* . g$12231$eZ1vL)
        (let . g$12230$eZ1vL)
        (quasiquote . g$12226$eZ1vL)
        (syntax-rules . g$12225$eZ1vL)
        (case . g$12216$eZ1vL)
        (if . g$12212$eZ1vL)
        (letrec . g$12210$eZ1vL)
        (lambda . g$12207$eZ1vL)
        (quote . g$12204$eZ1vL)
        (letrec-syntax . g$12202$eZ1vL)
        (let-syntax . g$12201$eZ1vL)
        (set! . g$12200$eZ1vL)
        (begin . g$12196$eZ1vL)
        (define-syntax . g$12194$eZ1vL)
        (define . g$12193$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12794$eZ1vL
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12693$eZ1vL)
        (string-titlecase . g$12692$eZ1vL)
        (string-normalize-nfkd . g$12691$eZ1vL)
        (string-normalize-nfkc . g$12690$eZ1vL)
        (string-normalize-nfd . g$12689$eZ1vL)
        (string-normalize-nfc . g$12688$eZ1vL)
        (string-foldcase . g$12687$eZ1vL)
        (string-downcase . g$12686$eZ1vL)
        (string-ci>? . g$6995$eZ1vL)
        (string-ci>=? . g$6997$eZ1vL)
        (string-ci=? . g$6993$eZ1vL)
        (string-ci<? . g$6994$eZ1vL)
        (string-ci<=? . g$6996$eZ1vL)
        (char-whitespace? . g$12685$eZ1vL)
        (char-upper-case? . g$12684$eZ1vL)
        (char-title-case? . g$12683$eZ1vL)
        (char-numeric? . g$12682$eZ1vL)
        (char-lower-case? . g$12681$eZ1vL)
        (char-general-category . g$12680$eZ1vL)
        (char-upcase . g$12679$eZ1vL)
        (char-titlecase . g$12678$eZ1vL)
        (char-foldcase . g$12677$eZ1vL)
        (char-downcase . g$12676$eZ1vL)
        (char-ci>? . g$7034$eZ1vL)
        (char-ci>=? . g$7036$eZ1vL)
        (char-ci=? . g$7032$eZ1vL)
        (char-ci<? . g$7033$eZ1vL)
        (char-ci<=? . g$7035$eZ1vL)
        (char-alphabetic? . g$12675$eZ1vL)
        (make-variable-transformer . g$8775$eZ1vL)
        (identifier? . g$9174$eZ1vL)
        (generate-temporaries . g$9163$eZ1vL)
        (free-identifier=? . g$9164$eZ1vL)
        (syntax->datum . g$9176$eZ1vL)
        (datum->syntax . g$9175$eZ1vL)
        (bound-identifier=? . g$9165$eZ1vL)
        (record-type-descriptor? . g$12674$eZ1vL)
        (record-predicate . g$12673$eZ1vL)
        (record-mutator . g$12672$eZ1vL)
        (record-constructor . g$12671$eZ1vL)
        (record-accessor . g$12670$eZ1vL)
        (make-record-type-descriptor . g$12669$eZ1vL)
        (make-record-constructor-descriptor . g$12668$eZ1vL)
        (record? . g$12667$eZ1vL)
        (record-type-uid . g$12666$eZ1vL)
        (record-type-sealed? . g$12665$eZ1vL)
        (record-type-parent . g$12664$eZ1vL)
        (record-type-opaque? . g$12663$eZ1vL)
        (record-type-name . g$12662$eZ1vL)
        (record-type-generative? . g$12661$eZ1vL)
        (record-type-field-names . g$12660$eZ1vL)
        (record-rtd . g$12659$eZ1vL)
        (record-field-mutable? . g$12658$eZ1vL)
        (delete-file . g$6569$eZ1vL)
        (file-exists? . g$6568$eZ1vL)
        (vector-sort! . g$12657$eZ1vL)
        (vector-sort . g$12656$eZ1vL)
        (list-sort . g$6935$eZ1vL)
        (symbol-hash . g$12655$eZ1vL)
        (string-ci-hash . g$12654$eZ1vL)
        (string-hash . g$12653$eZ1vL)
        (equal-hash . g$12652$eZ1vL)
        (hashtable-equivalence-function . g$12651$eZ1vL)
        (make-hashtable . g$12650$eZ1vL)
        (hashtable-hash-function . g$12649$eZ1vL)
        (make-eqv-hashtable . g$6537$eZ1vL)
        (make-eq-hashtable . g$6536$eZ1vL)
        (hashtable? . g$12648$eZ1vL)
        (hashtable-update! . g$6543$eZ1vL)
        (hashtable-size . g$6538$eZ1vL)
        (hashtable-set! . g$6540$eZ1vL)
        (hashtable-ref . g$6539$eZ1vL)
        (hashtable-mutable? . g$12647$eZ1vL)
        (hashtable-keys . g$12646$eZ1vL)
        (hashtable-entries . g$12645$eZ1vL)
        (hashtable-delete! . g$6541$eZ1vL)
        (hashtable-copy . g$12644$eZ1vL)
        (hashtable-contains? . g$6542$eZ1vL)
        (hashtable-clear! . g$6544$eZ1vL)
        (call-with-output-file . g$7420$eZ1vL)
        (call-with-input-file . g$7419$eZ1vL)
        (write-char . g$7401$eZ1vL)
        (write . g$12643$eZ1vL)
        (with-output-to-file . g$7418$eZ1vL)
        (with-input-from-file . g$7417$eZ1vL)
        (read-char . g$7400$eZ1vL)
        (read . g$12642$eZ1vL)
        (peek-char . g$7399$eZ1vL)
        (open-output-file . g$12641$eZ1vL)
        (open-input-file . g$12640$eZ1vL)
        (newline . g$7421$eZ1vL)
        (display . g$12639$eZ1vL)
        (close-output-port . g$12638$eZ1vL)
        (close-input-port . g$12637$eZ1vL)
        (eof-object? . g$12636$eZ1vL)
        (eof-object . g$12635$eZ1vL)
        (current-error-port . g$12634$eZ1vL)
        (current-output-port . g$12633$eZ1vL)
        (current-input-port . g$12632$eZ1vL)
        (output-port? . g$12631$eZ1vL)
        (input-port? . g$12630$eZ1vL)
        (utf-8-codec . g$12629$eZ1vL)
        (utf-16-codec . g$12628$eZ1vL)
        (transcoder-error-handling-mode . g$12627$eZ1vL)
        (transcoder-eol-style . g$12626$eZ1vL)
        (transcoder-codec . g$12625$eZ1vL)
        (transcoded-port . g$12624$eZ1vL)
        (textual-port? . g$12623$eZ1vL)
        (string->bytevector . g$12622$eZ1vL)
        (standard-output-port . g$12621$eZ1vL)
        (standard-input-port . g$12620$eZ1vL)
        (standard-error-port . g$12619$eZ1vL)
        (set-port-position! . g$12618$eZ1vL)
        (put-u8 . g$12617$eZ1vL)
        (put-string . g$12616$eZ1vL)
        (put-datum . g$12615$eZ1vL)
        (put-char . g$12614$eZ1vL)
        (put-bytevector . g$12613$eZ1vL)
        (port? . g$7386$eZ1vL)
        (port-transcoder . g$12612$eZ1vL)
        (port-position . g$12611$eZ1vL)
        (port-has-set-port-position!? . g$12610$eZ1vL)
        (port-has-port-position? . g$12609$eZ1vL)
        (port-eof? . g$12608$eZ1vL)
        (output-port-buffer-mode . g$12607$eZ1vL)
        (open-string-output-port . g$7385$eZ1vL)
        (open-string-input-port . g$12606$eZ1vL)
        (open-file-output-port . g$12605$eZ1vL)
        (open-file-input/output-port . g$12604$eZ1vL)
        (open-file-input-port . g$12603$eZ1vL)
        (open-bytevector-output-port . g$12602$eZ1vL)
        (open-bytevector-input-port . g$12601$eZ1vL)
        (native-transcoder . g$12600$eZ1vL)
        (native-eol-style . g$12599$eZ1vL)
        (make-transcoder . g$12598$eZ1vL)
        (latin-1-codec . g$12597$eZ1vL)
        (make-i/o-write-error . g$7241$eZ1vL)
        (make-i/o-read-error . g$7227$eZ1vL)
        (make-i/o-port-error . g$7346$eZ1vL)
        (make-i/o-invalid-position-error . g$7256$eZ1vL)
        (make-i/o-filename-error . g$7273$eZ1vL)
        (make-i/o-file-protection-error . g$7289$eZ1vL)
        (make-i/o-file-is-read-only-error . g$7303$eZ1vL)
        (make-i/o-file-does-not-exist-error . g$7331$eZ1vL)
        (make-i/o-file-already-exists-error . g$7317$eZ1vL)
        (make-i/o-error . g$7213$eZ1vL)
        (make-i/o-encoding-error . g$7377$eZ1vL)
        (make-i/o-decoding-error . g$7362$eZ1vL)
        (make-custom-textual-output-port . g$12596$eZ1vL)
        (make-custom-textual-input/output-port . g$12595$eZ1vL)
        (make-custom-textual-input-port . g$12594$eZ1vL)
        (make-custom-binary-output-port . g$12593$eZ1vL)
        (make-custom-binary-input/output-port . g$12592$eZ1vL)
        (make-custom-binary-input-port . g$12591$eZ1vL)
        (make-bytevector . g$12590$eZ1vL)
        (lookahead-u8 . g$12589$eZ1vL)
        (lookahead-char . g$12588$eZ1vL)
        (i/o-write-error? . g$7242$eZ1vL)
        (i/o-read-error? . g$7228$eZ1vL)
        (i/o-port-error? . g$7348$eZ1vL)
        (i/o-invalid-position-error? . g$7258$eZ1vL)
        (i/o-error-position . g$7259$eZ1vL)
        (i/o-filename-error? . g$7275$eZ1vL)
        (i/o-file-protection-error? . g$7290$eZ1vL)
        (i/o-file-is-read-only-error? . g$7304$eZ1vL)
        (i/o-file-does-not-exist-error? . g$7332$eZ1vL)
        (i/o-file-already-exists-error? . g$7318$eZ1vL)
        (i/o-error? . g$7214$eZ1vL)
        (i/o-error-port . g$7349$eZ1vL)
        (i/o-error-filename . g$7276$eZ1vL)
        (i/o-encoding-error? . g$7379$eZ1vL)
        (i/o-encoding-error-char . g$7380$eZ1vL)
        (i/o-decoding-error? . g$7363$eZ1vL)
        (get-u8 . g$12587$eZ1vL)
        (get-string-n! . g$12586$eZ1vL)
        (get-string-n . g$12585$eZ1vL)
        (get-string-all . g$12584$eZ1vL)
        (get-line . g$12583$eZ1vL)
        (get-datum . g$12582$eZ1vL)
        (get-char . g$12581$eZ1vL)
        (get-bytevector-some . g$12580$eZ1vL)
        (get-bytevector-n! . g$12579$eZ1vL)
        (get-bytevector-n . g$12578$eZ1vL)
        (get-bytevector-all . g$12577$eZ1vL)
        (flush-output-port . g$12576$eZ1vL)
        (close-port . g$12575$eZ1vL)
        (call-with-string-output-port . g$7387$eZ1vL)
        (call-with-port . g$7388$eZ1vL)
        (call-with-bytevector-output-port . g$12574$eZ1vL)
        (bytevector->string . g$12573$eZ1vL)
        (buffer-mode? . g$12572$eZ1vL)
        (binary-port? . g$12571$eZ1vL)
        (exit . g$12570$eZ1vL)
        (command-line . g$12157$eZ1vL)
        (remove . g$5878$eZ1vL)
        (remv . g$5879$eZ1vL)
        (remp . g$5859$eZ1vL)
        (remq . g$5880$eZ1vL)
        (partition . g$5858$eZ1vL)
        (memv . g$5866$eZ1vL)
        (memq . g$5865$eZ1vL)
        (memp . g$5868$eZ1vL)
        (member . g$5867$eZ1vL)
        (exists . g$5872$eZ1vL)
        (for-all . g$5871$eZ1vL)
        (fold-right . g$5877$eZ1vL)
        (fold-left . g$5876$eZ1vL)
        (find . g$5857$eZ1vL)
        (filter . g$5860$eZ1vL)
        (cons* . g$5875$eZ1vL)
        (assv . g$5862$eZ1vL)
        (assq . g$5861$eZ1vL)
        (assp . g$5864$eZ1vL)
        (assoc . g$5863$eZ1vL)
        (with-exception-handler . g$12565$eZ1vL)
        (raise-continuable . g$12564$eZ1vL)
        (raise . g$12563$eZ1vL)
        (make-enumeration . g$7485$eZ1vL)
        (enum-set=? . g$7492$eZ1vL)
        (enum-set-universe . g$7486$eZ1vL)
        (enum-set-union . g$7493$eZ1vL)
        (enum-set-subset? . g$7491$eZ1vL)
        (enum-set-projection . g$7497$eZ1vL)
        (enum-set-member? . g$7490$eZ1vL)
        (enum-set-intersection . g$7494$eZ1vL)
        (enum-set-indexer . g$7487$eZ1vL)
        (enum-set-difference . g$7495$eZ1vL)
        (enum-set-constructor . g$7488$eZ1vL)
        (enum-set-complement . g$7496$eZ1vL)
        (enum-set->list . g$7489$eZ1vL)
        (who-condition? . g$6823$eZ1vL)
        (warning? . g$6734$eZ1vL)
        (violation? . g$6776$eZ1vL)
        (undefined-violation? . g$6900$eZ1vL)
        (syntax-violation? . g$6884$eZ1vL)
        (syntax-violation-subform . g$6886$eZ1vL)
        (syntax-violation-form . g$6885$eZ1vL)
        (syntax-violation . g$9173$eZ1vL)
        (simple-conditions . g$12562$eZ1vL)
        (serious-condition? . g$6748$eZ1vL)
        (non-continuable-violation? . g$6838$eZ1vL)
        (message-condition? . g$6719$eZ1vL)
        (make-who-condition . g$6821$eZ1vL)
        (make-warning . g$6733$eZ1vL)
        (make-violation . g$6775$eZ1vL)
        (make-undefined-violation . g$6899$eZ1vL)
        (make-syntax-violation . g$6881$eZ1vL)
        (make-serious-condition . g$6747$eZ1vL)
        (make-non-continuable-violation . g$6837$eZ1vL)
        (make-message-condition . g$6717$eZ1vL)
        (make-lexical-violation . g$6865$eZ1vL)
        (make-irritants-condition . g$6804$eZ1vL)
        (make-implementation-restriction-violation . g$6851$eZ1vL)
        (make-error . g$6761$eZ1vL)
        (make-assertion-violation . g$6789$eZ1vL)
        (lexical-violation? . g$6866$eZ1vL)
        (irritants-condition? . g$6806$eZ1vL)
        (implementation-restriction-violation? . g$6852$eZ1vL)
        (error? . g$6762$eZ1vL)
        (condition-who . g$6824$eZ1vL)
        (condition-predicate . g$12561$eZ1vL)
        (condition-message . g$6720$eZ1vL)
        (condition-irritants . g$6807$eZ1vL)
        (condition-accessor . g$12560$eZ1vL)
        (condition . g$12559$eZ1vL)
        (assertion-violation? . g$6790$eZ1vL)
        (condition? . g$12558$eZ1vL)
        (utf32->string . g$12557$eZ1vL)
        (utf16->string . g$12556$eZ1vL)
        (utf8->string . g$12555$eZ1vL)
        (uint-list->bytevector . g$12554$eZ1vL)
        (u8-list->bytevector . g$12553$eZ1vL)
        (string->utf8 . g$12552$eZ1vL)
        (string->utf32 . g$12551$eZ1vL)
        (string->utf16 . g$12550$eZ1vL)
        (sint-list->bytevector . g$12549$eZ1vL)
        (native-endianness . g$6575$eZ1vL)
        (bytevector? . g$12548$eZ1vL)
        (bytevector=? . g$12547$eZ1vL)
        (bytevector-uint-set! . g$12546$eZ1vL)
        (bytevector-uint-ref . g$12545$eZ1vL)
        (bytevector-u8-set! . g$12544$eZ1vL)
        (bytevector-u8-ref . g$12543$eZ1vL)
        (bytevector-u64-set! . g$6596$eZ1vL)
        (bytevector-u64-ref . g$6592$eZ1vL)
        (bytevector-u64-native-set! . g$6598$eZ1vL)
        (bytevector-u64-native-ref . g$6594$eZ1vL)
        (bytevector-u32-set! . g$6588$eZ1vL)
        (bytevector-u32-ref . g$6584$eZ1vL)
        (bytevector-u32-native-set! . g$6590$eZ1vL)
        (bytevector-u32-native-ref . g$6586$eZ1vL)
        (bytevector-u16-set! . g$6580$eZ1vL)
        (bytevector-u16-ref . g$6576$eZ1vL)
        (bytevector-u16-native-set! . g$6582$eZ1vL)
        (bytevector-u16-native-ref . g$6578$eZ1vL)
        (bytevector-sint-set! . g$12542$eZ1vL)
        (bytevector-sint-ref . g$12541$eZ1vL)
        (bytevector-s8-set! . g$12540$eZ1vL)
        (bytevector-s8-ref . g$12539$eZ1vL)
        (bytevector-s64-set! . g$6597$eZ1vL)
        (bytevector-s64-ref . g$6593$eZ1vL)
        (bytevector-s64-native-set! . g$6599$eZ1vL)
        (bytevector-s64-native-ref . g$6595$eZ1vL)
        (bytevector-s32-set! . g$6589$eZ1vL)
        (bytevector-s32-ref . g$6585$eZ1vL)
        (bytevector-s32-native-set! . g$6591$eZ1vL)
        (bytevector-s32-native-ref . g$6587$eZ1vL)
        (bytevector-s16-set! . g$6581$eZ1vL)
        (bytevector-s16-ref . g$6577$eZ1vL)
        (bytevector-s16-native-set! . g$6583$eZ1vL)
        (bytevector-s16-native-ref . g$6579$eZ1vL)
        (bytevector-length . g$12538$eZ1vL)
        (bytevector-ieee-single-set! . g$12537$eZ1vL)
        (bytevector-ieee-single-ref . g$12536$eZ1vL)
        (bytevector-ieee-single-native-set! . g$6602$eZ1vL)
        (bytevector-ieee-single-native-ref . g$6600$eZ1vL)
        (bytevector-ieee-double-set! . g$12535$eZ1vL)
        (bytevector-ieee-double-ref . g$12534$eZ1vL)
        (bytevector-ieee-double-native-set! . g$6603$eZ1vL)
        (bytevector-ieee-double-native-ref . g$6601$eZ1vL)
        (bytevector-fill! . g$12533$eZ1vL)
        (bytevector-copy! . g$12532$eZ1vL)
        (bytevector-copy . g$12531$eZ1vL)
        (bytevector->uint-list . g$12530$eZ1vL)
        (bytevector->u8-list . g$12529$eZ1vL)
        (bytevector->sint-list . g$12528$eZ1vL)
        (no-nans-violation? . g$7199$eZ1vL)
        (no-infinities-violation? . g$7185$eZ1vL)
        (make-no-nans-violation . g$7198$eZ1vL)
        (make-no-infinities-violation . g$7184$eZ1vL)
        (real->flonum . g$12527$eZ1vL)
        (flzero? . g$12526$eZ1vL)
        (fltruncate . g$12525$eZ1vL)
        (fltan . g$12524$eZ1vL)
        (flsqrt . g$12523$eZ1vL)
        (flsin . g$12522$eZ1vL)
        (flround . g$12521$eZ1vL)
        (flpositive? . g$12520$eZ1vL)
        (flonum? . g$12519$eZ1vL)
        (flodd? . g$12518$eZ1vL)
        (flnumerator . g$12517$eZ1vL)
        (flnegative? . g$12516$eZ1vL)
        (flnan? . g$12515$eZ1vL)
        (flmod0 . g$12514$eZ1vL)
        (flmod . g$12513$eZ1vL)
        (flmin . g$12512$eZ1vL)
        (flmax . g$12511$eZ1vL)
        (fllog . g$12510$eZ1vL)
        (flinteger? . g$12509$eZ1vL)
        (flinfinite? . g$12508$eZ1vL)
        (flfloor . g$12507$eZ1vL)
        (flfinite? . g$12506$eZ1vL)
        (flexpt . g$12505$eZ1vL)
        (flexp . g$12504$eZ1vL)
        (fleven? . g$12503$eZ1vL)
        (fldiv0-and-mod0 . g$12502$eZ1vL)
        (fldiv0 . g$12501$eZ1vL)
        (fldiv-and-mod . g$12500$eZ1vL)
        (fldiv . g$12499$eZ1vL)
        (fldenominator . g$12498$eZ1vL)
        (flcos . g$12497$eZ1vL)
        (flceiling . g$12496$eZ1vL)
        (flatan . g$12495$eZ1vL)
        (flasin . g$12494$eZ1vL)
        (flacos . g$12493$eZ1vL)
        (flabs . g$12492$eZ1vL)
        (fl>? . g$12491$eZ1vL)
        (fl>=? . g$12490$eZ1vL)
        (fl=? . g$12489$eZ1vL)
        (fl<? . g$12488$eZ1vL)
        (fl<=? . g$12487$eZ1vL)
        (fl/ . g$12486$eZ1vL)
        (fl- . g$12485$eZ1vL)
        (fl+ . g$12484$eZ1vL)
        (fl* . g$12483$eZ1vL)
        (fixnum->flonum . g$12482$eZ1vL)
        (fxzero? . g$12481$eZ1vL)
        (fxxor . g$12480$eZ1vL)
        (fxrotate-bit-field . g$7131$eZ1vL)
        (fxreverse-bit-field . g$12479$eZ1vL)
        (fxpositive? . g$12478$eZ1vL)
        (fxodd? . g$12477$eZ1vL)
        (fxnot . g$12476$eZ1vL)
        (fxnegative? . g$12475$eZ1vL)
        (fxmod0 . g$12474$eZ1vL)
        (fxmod . g$12473$eZ1vL)
        (fxmin . g$12472$eZ1vL)
        (fxmax . g$12471$eZ1vL)
        (fxlength . g$12470$eZ1vL)
        (fxior . g$12469$eZ1vL)
        (fxif . g$7125$eZ1vL)
        (fxfirst-bit-set . g$12468$eZ1vL)
        (fxeven? . g$12467$eZ1vL)
        (fxdiv0-and-mod0 . g$12466$eZ1vL)
        (fxdiv0 . g$12465$eZ1vL)
        (fxdiv-and-mod . g$12464$eZ1vL)
        (fxdiv . g$12463$eZ1vL)
        (fxcopy-bit-field . g$7128$eZ1vL)
        (fxcopy-bit . g$7126$eZ1vL)
        (fxbit-set? . g$12462$eZ1vL)
        (fxbit-field . g$7127$eZ1vL)
        (fxbit-count . g$12461$eZ1vL)
        (fxarithmetic-shift-right . g$7130$eZ1vL)
        (fxarithmetic-shift-left . g$7129$eZ1vL)
        (fxarithmetic-shift . g$12460$eZ1vL)
        (fxand . g$12459$eZ1vL)
        (fx>? . g$12458$eZ1vL)
        (fx>=? . g$12457$eZ1vL)
        (fx=? . g$12456$eZ1vL)
        (fx<? . g$12455$eZ1vL)
        (fx<=? . g$12454$eZ1vL)
        (fx-/carry . g$7123$eZ1vL)
        (fx- . g$12453$eZ1vL)
        (fx+/carry . g$7124$eZ1vL)
        (fx+ . g$12452$eZ1vL)
        (fx*/carry . g$7122$eZ1vL)
        (fx* . g$12451$eZ1vL)
        (greatest-fixnum . g$12450$eZ1vL)
        (least-fixnum . g$12449$eZ1vL)
        (fixnum-width . g$12448$eZ1vL)
        (fixnum? . g$12447$eZ1vL)
        (bitwise-rotate-bit-field . g$7096$eZ1vL)
        (bitwise-reverse-bit-field . g$12446$eZ1vL)
        (bitwise-length . g$12445$eZ1vL)
        (bitwise-if . g$7090$eZ1vL)
        (bitwise-first-bit-set . g$12444$eZ1vL)
        (bitwise-copy-bit-field . g$7093$eZ1vL)
        (bitwise-copy-bit . g$7091$eZ1vL)
        (bitwise-bit-set? . g$12443$eZ1vL)
        (bitwise-bit-field . g$7092$eZ1vL)
        (bitwise-bit-count . g$12442$eZ1vL)
        (bitwise-xor . g$12441$eZ1vL)
        (bitwise-ior . g$12440$eZ1vL)
        (bitwise-and . g$12439$eZ1vL)
        (bitwise-not . g$12438$eZ1vL)
        (bitwise-arithmetic-shift-right . g$7095$eZ1vL)
        (bitwise-arithmetic-shift-left . g$7094$eZ1vL)
        (bitwise-arithmetic-shift . g$12437$eZ1vL)
        (zero? . g$6021$eZ1vL)
        (vector? . g$12436$eZ1vL)
        (vector-set! . g$12435$eZ1vL)
        (vector-ref . g$12434$eZ1vL)
        (vector-map . g$12433$eZ1vL)
        (vector-length . g$12432$eZ1vL)
        (vector-for-each . g$12431$eZ1vL)
        (vector-fill! . g$12430$eZ1vL)
        (vector->list . g$12429$eZ1vL)
        (vector . g$12428$eZ1vL)
        (values . g$12427$eZ1vL)
        (truncate . g$12426$eZ1vL)
        (tan . g$12425$eZ1vL)
        (symbol? . g$12424$eZ1vL)
        (symbol=? . g$6067$eZ1vL)
        (symbol->string . g$12423$eZ1vL)
        (substring . g$12422$eZ1vL)
        (string? . g$12421$eZ1vL)
        (string>? . g$6064$eZ1vL)
        (string>=? . g$6066$eZ1vL)
        (string=? . g$6062$eZ1vL)
        (string<? . g$6063$eZ1vL)
        (string<=? . g$6065$eZ1vL)
        (string-ref . g$12420$eZ1vL)
        (string-length . g$12419$eZ1vL)
        (string-for-each . g$12418$eZ1vL)
        (string-copy . g$12417$eZ1vL)
        (string-append . g$12416$eZ1vL)
        (string->symbol . g$12415$eZ1vL)
        (string->number . g$12414$eZ1vL)
        (string->list . g$12413$eZ1vL)
        (string . g$12412$eZ1vL)
        (sqrt . g$12411$eZ1vL)
        (sin . g$12410$eZ1vL)
        (round . g$12409$eZ1vL)
        (reverse . g$12408$eZ1vL)
        (real? . g$12407$eZ1vL)
        (real-valued? . g$12406$eZ1vL)
        (real-part . g$12405$eZ1vL)
        (rationalize . g$6108$eZ1vL)
        (rational? . g$12404$eZ1vL)
        (rational-valued? . g$12403$eZ1vL)
        (procedure? . g$12402$eZ1vL)
        (positive? . g$6019$eZ1vL)
        (pair? . g$12401$eZ1vL)
        (odd? . g$6023$eZ1vL)
        (numerator . g$12400$eZ1vL)
        (number? . g$12399$eZ1vL)
        (number->string . g$12398$eZ1vL)
        (null? . g$12397$eZ1vL)
        (not . g$12396$eZ1vL)
        (negative? . g$6020$eZ1vL)
        (nan? . g$12395$eZ1vL)
        (min . g$6025$eZ1vL)
        (max . g$6024$eZ1vL)
        (map . g$5873$eZ1vL)
        (make-vector . g$12394$eZ1vL)
        (make-string . g$12393$eZ1vL)
        (make-rectangular . g$12392$eZ1vL)
        (make-polar . g$12391$eZ1vL)
        (magnitude . g$12390$eZ1vL)
        (log . g$12389$eZ1vL)
        (list? . g$12388$eZ1vL)
        (list-tail . g$5853$eZ1vL)
        (list-ref . g$5854$eZ1vL)
        (list->vector . g$12387$eZ1vL)
        (list->string . g$12386$eZ1vL)
        (list . g$12385$eZ1vL)
        (length . g$12384$eZ1vL)
        (lcm . g$6027$eZ1vL)
        (integer? . g$12383$eZ1vL)
        (integer-valued? . g$12382$eZ1vL)
        (integer->char . g$12381$eZ1vL)
        (infinite? . g$12380$eZ1vL)
        (inexact? . g$12379$eZ1vL)
        (inexact . g$12378$eZ1vL)
        (imag-part . g$12377$eZ1vL)
        (gcd . g$6026$eZ1vL)
        (for-each . g$5874$eZ1vL)
        (floor . g$12376$eZ1vL)
        (finite? . g$12375$eZ1vL)
        (expt . g$12374$eZ1vL)
        (exp . g$12373$eZ1vL)
        (exact? . g$12372$eZ1vL)
        (exact-integer-sqrt . g$12371$eZ1vL)
        (exact . g$12370$eZ1vL)
        (even? . g$6022$eZ1vL)
        (error . g$12369$eZ1vL)
        (eqv? . g$12368$eZ1vL)
        (equal? . g$12367$eZ1vL)
        (eq? . g$12366$eZ1vL)
        (dynamic-wind . g$12365$eZ1vL)
        (div0-and-mod0 . g$12364$eZ1vL)
        (mod0 . g$12363$eZ1vL)
        (div0 . g$12362$eZ1vL)
        (div-and-mod . g$12361$eZ1vL)
        (mod . g$12360$eZ1vL)
        (div . g$12359$eZ1vL)
        (denominator . g$12358$eZ1vL)
        (cos . g$12357$eZ1vL)
        (cons . g$12356$eZ1vL)
        (complex? . g$12355$eZ1vL)
        (char? . g$12354$eZ1vL)
        (char>? . g$6105$eZ1vL)
        (char>=? . g$6107$eZ1vL)
        (char=? . g$6103$eZ1vL)
        (char<? . g$6104$eZ1vL)
        (char<=? . g$6106$eZ1vL)
        (char->integer . g$12353$eZ1vL)
        (ceiling . g$12352$eZ1vL)
        (call-with-values . g$12351$eZ1vL)
        (call/cc . g$12350$eZ1vL)
        (call-with-current-continuation . g$12349$eZ1vL)
        (cddddr . g$6018$eZ1vL)
        (cdddar . g$6017$eZ1vL)
        (cddadr . g$6016$eZ1vL)
        (cddaar . g$6015$eZ1vL)
        (cdaddr . g$6014$eZ1vL)
        (cdadar . g$6013$eZ1vL)
        (cdaadr . g$6012$eZ1vL)
        (cdaaar . g$6011$eZ1vL)
        (cadddr . g$6010$eZ1vL)
        (caddar . g$6009$eZ1vL)
        (cadadr . g$6008$eZ1vL)
        (cadaar . g$6007$eZ1vL)
        (caaddr . g$6006$eZ1vL)
        (caadar . g$6005$eZ1vL)
        (caaadr . g$6004$eZ1vL)
        (caaaar . g$6003$eZ1vL)
        (cdddr . g$6002$eZ1vL)
        (cddar . g$6001$eZ1vL)
        (cdadr . g$6000$eZ1vL)
        (cdaar . g$5999$eZ1vL)
        (caddr . g$5998$eZ1vL)
        (cadar . g$5997$eZ1vL)
        (caadr . g$5996$eZ1vL)
        (caaar . g$5995$eZ1vL)
        (cddr . g$5994$eZ1vL)
        (cdar . g$5993$eZ1vL)
        (cadr . g$5992$eZ1vL)
        (caar . g$5991$eZ1vL)
        (cdr . g$12348$eZ1vL)
        (car . g$12347$eZ1vL)
        (boolean? . g$12346$eZ1vL)
        (boolean=? . g$6068$eZ1vL)
        (atan . g$12345$eZ1vL)
        (assertion-violation . g$12344$eZ1vL)
        (asin . g$12343$eZ1vL)
        (apply . g$12342$eZ1vL)
        (append . g$12341$eZ1vL)
        (angle . g$12340$eZ1vL)
        (acos . g$12339$eZ1vL)
        (abs . g$12338$eZ1vL)
        (/ . g$12337$eZ1vL)
        (* . g$12336$eZ1vL)
        (- . g$12335$eZ1vL)
        (+ . g$12334$eZ1vL)
        (>= . g$12333$eZ1vL)
        (> . g$12332$eZ1vL)
        (= . g$12331$eZ1vL)
        (<= . g$12330$eZ1vL)
        (< . g$12329$eZ1vL)
        (&no-nans . g$12297$eZ1vL)
        (&no-infinities . g$12296$eZ1vL)
        (&i/o-encoding . g$12295$eZ1vL)
        (&i/o-decoding . g$12294$eZ1vL)
        (&i/o-port . g$12293$eZ1vL)
        (&i/o-file-does-not-exist . g$12292$eZ1vL)
        (&i/o-file-already-exists . g$12291$eZ1vL)
        (&i/o-file-is-read-only . g$12290$eZ1vL)
        (&i/o-file-protection . g$12289$eZ1vL)
        (&i/o-filename . g$12288$eZ1vL)
        (&i/o-invalid-position . g$12287$eZ1vL)
        (&i/o-write . g$12286$eZ1vL)
        (&i/o-read . g$12285$eZ1vL)
        (&i/o . g$12284$eZ1vL)
        (&non-continuable . g$12283$eZ1vL)
        (&undefined . g$12282$eZ1vL)
        (&syntax . g$12281$eZ1vL)
        (&lexical . g$12280$eZ1vL)
        (&implementation-restriction . g$12279$eZ1vL)
        (&who . g$12278$eZ1vL)
        (&irritants . g$12277$eZ1vL)
        (&assertion . g$12276$eZ1vL)
        (&violation . g$12275$eZ1vL)
        (&error . g$12274$eZ1vL)
        (&serious . g$12273$eZ1vL)
        (&warning . g$12272$eZ1vL)
        (&message . g$12271$eZ1vL)
        (&condition . g$12270$eZ1vL)
        (define-condition-type . g$12269$eZ1vL)
        (define-enumeration . g$12268$eZ1vL)
        (define-record-type . g$12267$eZ1vL)
        (parent-rtd . g$12266$eZ1vL)
        (nongenerative . g$12265$eZ1vL)
        (opaque . g$12264$eZ1vL)
        (sealed . g$12263$eZ1vL)
        (protocol . g$12262$eZ1vL)
        (parent . g$12261$eZ1vL)
        (immutable . g$12260$eZ1vL)
        (mutable . g$12259$eZ1vL)
        (fields . g$12258$eZ1vL)
        (error-handling-mode . g$12257$eZ1vL)
        (file-options . g$12256$eZ1vL)
        (buffer-mode . g$12255$eZ1vL)
        (eol-style . g$12254$eZ1vL)
        (guard . g$12253$eZ1vL)
        (unsyntax-splicing . g$12247$eZ1vL)
        (unsyntax . g$12246$eZ1vL)
        (unquote-splicing . g$12245$eZ1vL)
        (unquote . g$12244$eZ1vL)
        (_ . g$12243$eZ1vL)
        (else . g$12242$eZ1vL)
        (=> . g$12241$eZ1vL)
        (... . g$12240$eZ1vL)
        (assert . g$12239$eZ1vL)
        (endianness . g$12238$eZ1vL)
        (or . g$12235$eZ1vL)
        (and . g$12234$eZ1vL)
        (do . g$12233$eZ1vL)
        (cond . g$12232$eZ1vL)
        (let* . g$12231$eZ1vL)
        (let . g$12230$eZ1vL)
        (identifier-syntax . g$12229$eZ1vL)
        (with-syntax . g$12228$eZ1vL)
        (quasisyntax . g$12227$eZ1vL)
        (quasiquote . g$12226$eZ1vL)
        (syntax-rules . g$12225$eZ1vL)
        (let-values . g$12221$eZ1vL)
        (let*-values . g$12220$eZ1vL)
        (record-constructor-descriptor . g$12219$eZ1vL)
        (record-type-descriptor . g$12218$eZ1vL)
        (case . g$12216$eZ1vL)
        (unless . g$12214$eZ1vL)
        (when . g$12213$eZ1vL)
        (if . g$12212$eZ1vL)
        (letrec* . g$12211$eZ1vL)
        (letrec . g$12210$eZ1vL)
        (case-lambda . g$12208$eZ1vL)
        (lambda . g$12207$eZ1vL)
        (syntax . g$12206$eZ1vL)
        (syntax-case . g$12205$eZ1vL)
        (quote . g$12204$eZ1vL)
        (letrec-syntax . g$12202$eZ1vL)
        (let-syntax . g$12201$eZ1vL)
        (set! . g$12200$eZ1vL)
        (begin . g$12196$eZ1vL)
        (define-syntax . g$12194$eZ1vL)
        (define . g$12193$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12795$eZ1vL
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$9180$eZ1vL)
        (scheme-report-environment . g$9153$eZ1vL)
        (quotient . g$6914$eZ1vL)
        (null-environment . g$9152$eZ1vL)
        (remainder . g$6915$eZ1vL)
        (modulo . g$6916$eZ1vL)
        (inexact->exact . g$6911$eZ1vL)
        (force . g$6918$eZ1vL)
        (exact->inexact . g$6912$eZ1vL)
        (delay . g$12237$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12796$eZ1vL
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12233$eZ1vL)
        (unless . g$12214$eZ1vL)
        (when . g$12213$eZ1vL)
        (case-lambda . g$12208$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12797$eZ1vL
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9155$eZ1vL) (environment . g$9151$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12798$eZ1vL
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12567$eZ1vL) (set-car! . g$12566$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12799$eZ1vL
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12569$eZ1vL) (string-set! . g$12568$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12800$eZ1vL
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12570$eZ1vL) (command-line . g$12157$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12801$eZ1vL
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8775$eZ1vL)
        (identifier? . g$9174$eZ1vL)
        (generate-temporaries . g$9163$eZ1vL)
        (free-identifier=? . g$9164$eZ1vL)
        (syntax->datum . g$9176$eZ1vL)
        (datum->syntax . g$9175$eZ1vL)
        (bound-identifier=? . g$9165$eZ1vL)
        (syntax-violation . g$9173$eZ1vL)
        (unsyntax-splicing . g$12247$eZ1vL)
        (unsyntax . g$12246$eZ1vL)
        (_ . g$12243$eZ1vL)
        (... . g$12240$eZ1vL)
        (with-syntax . g$12228$eZ1vL)
        (quasisyntax . g$12227$eZ1vL)
        (syntax . g$12206$eZ1vL)
        (syntax-case . g$12205$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12802$eZ1vL
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6569$eZ1vL)
        (file-exists? . g$6568$eZ1vL)
        (make-i/o-write-error . g$7241$eZ1vL)
        (make-i/o-read-error . g$7227$eZ1vL)
        (make-i/o-port-error . g$7346$eZ1vL)
        (make-i/o-invalid-position-error . g$7256$eZ1vL)
        (make-i/o-filename-error . g$7273$eZ1vL)
        (make-i/o-file-protection-error . g$7289$eZ1vL)
        (make-i/o-file-is-read-only-error . g$7303$eZ1vL)
        (make-i/o-file-does-not-exist-error . g$7331$eZ1vL)
        (make-i/o-file-already-exists-error . g$7317$eZ1vL)
        (make-i/o-error . g$7213$eZ1vL)
        (i/o-write-error? . g$7242$eZ1vL)
        (i/o-read-error? . g$7228$eZ1vL)
        (i/o-port-error? . g$7348$eZ1vL)
        (i/o-invalid-position-error? . g$7258$eZ1vL)
        (i/o-error-position . g$7259$eZ1vL)
        (i/o-filename-error? . g$7275$eZ1vL)
        (i/o-file-protection-error? . g$7290$eZ1vL)
        (i/o-file-is-read-only-error? . g$7304$eZ1vL)
        (i/o-file-does-not-exist-error? . g$7332$eZ1vL)
        (i/o-file-already-exists-error? . g$7318$eZ1vL)
        (i/o-error? . g$7214$eZ1vL)
        (i/o-error-port . g$7349$eZ1vL)
        (i/o-error-filename . g$7276$eZ1vL)
        (&i/o-port . g$12293$eZ1vL)
        (&i/o-file-does-not-exist . g$12292$eZ1vL)
        (&i/o-file-already-exists . g$12291$eZ1vL)
        (&i/o-file-is-read-only . g$12290$eZ1vL)
        (&i/o-file-protection . g$12289$eZ1vL)
        (&i/o-filename . g$12288$eZ1vL)
        (&i/o-invalid-position . g$12287$eZ1vL)
        (&i/o-write . g$12286$eZ1vL)
        (&i/o-read . g$12285$eZ1vL)
        (&i/o . g$12284$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12803$eZ1vL
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12657$eZ1vL)
        (vector-sort . g$12656$eZ1vL)
        (list-sort . g$6935$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12804$eZ1vL
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$6021$eZ1vL)
        (vector? . g$12436$eZ1vL)
        (vector-set! . g$12435$eZ1vL)
        (vector-ref . g$12434$eZ1vL)
        (vector-map . g$12433$eZ1vL)
        (vector-length . g$12432$eZ1vL)
        (vector-for-each . g$12431$eZ1vL)
        (vector-fill! . g$12430$eZ1vL)
        (vector->list . g$12429$eZ1vL)
        (vector . g$12428$eZ1vL)
        (values . g$12427$eZ1vL)
        (truncate . g$12426$eZ1vL)
        (tan . g$12425$eZ1vL)
        (symbol? . g$12424$eZ1vL)
        (symbol=? . g$6067$eZ1vL)
        (symbol->string . g$12423$eZ1vL)
        (substring . g$12422$eZ1vL)
        (string? . g$12421$eZ1vL)
        (string>? . g$6064$eZ1vL)
        (string>=? . g$6066$eZ1vL)
        (string=? . g$6062$eZ1vL)
        (string<? . g$6063$eZ1vL)
        (string<=? . g$6065$eZ1vL)
        (string-ref . g$12420$eZ1vL)
        (string-length . g$12419$eZ1vL)
        (string-for-each . g$12418$eZ1vL)
        (string-copy . g$12417$eZ1vL)
        (string-append . g$12416$eZ1vL)
        (string->symbol . g$12415$eZ1vL)
        (string->number . g$12414$eZ1vL)
        (string->list . g$12413$eZ1vL)
        (string . g$12412$eZ1vL)
        (sqrt . g$12411$eZ1vL)
        (sin . g$12410$eZ1vL)
        (round . g$12409$eZ1vL)
        (reverse . g$12408$eZ1vL)
        (real? . g$12407$eZ1vL)
        (real-valued? . g$12406$eZ1vL)
        (real-part . g$12405$eZ1vL)
        (rationalize . g$6108$eZ1vL)
        (rational? . g$12404$eZ1vL)
        (rational-valued? . g$12403$eZ1vL)
        (procedure? . g$12402$eZ1vL)
        (positive? . g$6019$eZ1vL)
        (pair? . g$12401$eZ1vL)
        (odd? . g$6023$eZ1vL)
        (numerator . g$12400$eZ1vL)
        (number? . g$12399$eZ1vL)
        (number->string . g$12398$eZ1vL)
        (null? . g$12397$eZ1vL)
        (not . g$12396$eZ1vL)
        (negative? . g$6020$eZ1vL)
        (nan? . g$12395$eZ1vL)
        (min . g$6025$eZ1vL)
        (max . g$6024$eZ1vL)
        (map . g$5873$eZ1vL)
        (make-vector . g$12394$eZ1vL)
        (make-string . g$12393$eZ1vL)
        (make-rectangular . g$12392$eZ1vL)
        (make-polar . g$12391$eZ1vL)
        (magnitude . g$12390$eZ1vL)
        (log . g$12389$eZ1vL)
        (list? . g$12388$eZ1vL)
        (list-tail . g$5853$eZ1vL)
        (list-ref . g$5854$eZ1vL)
        (list->vector . g$12387$eZ1vL)
        (list->string . g$12386$eZ1vL)
        (list . g$12385$eZ1vL)
        (length . g$12384$eZ1vL)
        (lcm . g$6027$eZ1vL)
        (integer? . g$12383$eZ1vL)
        (integer-valued? . g$12382$eZ1vL)
        (integer->char . g$12381$eZ1vL)
        (infinite? . g$12380$eZ1vL)
        (inexact? . g$12379$eZ1vL)
        (inexact . g$12378$eZ1vL)
        (imag-part . g$12377$eZ1vL)
        (gcd . g$6026$eZ1vL)
        (for-each . g$5874$eZ1vL)
        (floor . g$12376$eZ1vL)
        (finite? . g$12375$eZ1vL)
        (expt . g$12374$eZ1vL)
        (exp . g$12373$eZ1vL)
        (exact? . g$12372$eZ1vL)
        (exact-integer-sqrt . g$12371$eZ1vL)
        (exact . g$12370$eZ1vL)
        (even? . g$6022$eZ1vL)
        (error . g$12369$eZ1vL)
        (eqv? . g$12368$eZ1vL)
        (equal? . g$12367$eZ1vL)
        (eq? . g$12366$eZ1vL)
        (dynamic-wind . g$12365$eZ1vL)
        (div0-and-mod0 . g$12364$eZ1vL)
        (mod0 . g$12363$eZ1vL)
        (div0 . g$12362$eZ1vL)
        (div-and-mod . g$12361$eZ1vL)
        (mod . g$12360$eZ1vL)
        (div . g$12359$eZ1vL)
        (denominator . g$12358$eZ1vL)
        (cos . g$12357$eZ1vL)
        (cons . g$12356$eZ1vL)
        (complex? . g$12355$eZ1vL)
        (char? . g$12354$eZ1vL)
        (char>? . g$6105$eZ1vL)
        (char>=? . g$6107$eZ1vL)
        (char=? . g$6103$eZ1vL)
        (char<? . g$6104$eZ1vL)
        (char<=? . g$6106$eZ1vL)
        (char->integer . g$12353$eZ1vL)
        (ceiling . g$12352$eZ1vL)
        (call-with-values . g$12351$eZ1vL)
        (call/cc . g$12350$eZ1vL)
        (call-with-current-continuation . g$12349$eZ1vL)
        (cddddr . g$6018$eZ1vL)
        (cdddar . g$6017$eZ1vL)
        (cddadr . g$6016$eZ1vL)
        (cddaar . g$6015$eZ1vL)
        (cdaddr . g$6014$eZ1vL)
        (cdadar . g$6013$eZ1vL)
        (cdaadr . g$6012$eZ1vL)
        (cdaaar . g$6011$eZ1vL)
        (cadddr . g$6010$eZ1vL)
        (caddar . g$6009$eZ1vL)
        (cadadr . g$6008$eZ1vL)
        (cadaar . g$6007$eZ1vL)
        (caaddr . g$6006$eZ1vL)
        (caadar . g$6005$eZ1vL)
        (caaadr . g$6004$eZ1vL)
        (caaaar . g$6003$eZ1vL)
        (cdddr . g$6002$eZ1vL)
        (cddar . g$6001$eZ1vL)
        (cdadr . g$6000$eZ1vL)
        (cdaar . g$5999$eZ1vL)
        (caddr . g$5998$eZ1vL)
        (cadar . g$5997$eZ1vL)
        (caadr . g$5996$eZ1vL)
        (caaar . g$5995$eZ1vL)
        (cddr . g$5994$eZ1vL)
        (cdar . g$5993$eZ1vL)
        (cadr . g$5992$eZ1vL)
        (caar . g$5991$eZ1vL)
        (cdr . g$12348$eZ1vL)
        (car . g$12347$eZ1vL)
        (boolean? . g$12346$eZ1vL)
        (boolean=? . g$6068$eZ1vL)
        (atan . g$12345$eZ1vL)
        (assertion-violation . g$12344$eZ1vL)
        (asin . g$12343$eZ1vL)
        (apply . g$12342$eZ1vL)
        (append . g$12341$eZ1vL)
        (angle . g$12340$eZ1vL)
        (acos . g$12339$eZ1vL)
        (abs . g$12338$eZ1vL)
        (/ . g$12337$eZ1vL)
        (* . g$12336$eZ1vL)
        (- . g$12335$eZ1vL)
        (+ . g$12334$eZ1vL)
        (>= . g$12333$eZ1vL)
        (> . g$12332$eZ1vL)
        (= . g$12331$eZ1vL)
        (<= . g$12330$eZ1vL)
        (< . g$12329$eZ1vL)
        (unquote-splicing . g$12245$eZ1vL)
        (unquote . g$12244$eZ1vL)
        (_ . g$12243$eZ1vL)
        (else . g$12242$eZ1vL)
        (=> . g$12241$eZ1vL)
        (... . g$12240$eZ1vL)
        (assert . g$12239$eZ1vL)
        (or . g$12235$eZ1vL)
        (and . g$12234$eZ1vL)
        (cond . g$12232$eZ1vL)
        (let* . g$12231$eZ1vL)
        (let . g$12230$eZ1vL)
        (identifier-syntax . g$12229$eZ1vL)
        (quasiquote . g$12226$eZ1vL)
        (syntax-rules . g$12225$eZ1vL)
        (let-values . g$12221$eZ1vL)
        (let*-values . g$12220$eZ1vL)
        (case . g$12216$eZ1vL)
        (if . g$12212$eZ1vL)
        (letrec* . g$12211$eZ1vL)
        (letrec . g$12210$eZ1vL)
        (lambda . g$12207$eZ1vL)
        (quote . g$12204$eZ1vL)
        (letrec-syntax . g$12202$eZ1vL)
        (let-syntax . g$12201$eZ1vL)
        (set! . g$12200$eZ1vL)
        (begin . g$12196$eZ1vL)
        (define-syntax . g$12194$eZ1vL)
        (define . g$12193$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12805$eZ1vL
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5878$eZ1vL)
        (remv . g$5879$eZ1vL)
        (remp . g$5859$eZ1vL)
        (remq . g$5880$eZ1vL)
        (partition . g$5858$eZ1vL)
        (memv . g$5866$eZ1vL)
        (memq . g$5865$eZ1vL)
        (memp . g$5868$eZ1vL)
        (member . g$5867$eZ1vL)
        (exists . g$5872$eZ1vL)
        (for-all . g$5871$eZ1vL)
        (fold-right . g$5877$eZ1vL)
        (fold-left . g$5876$eZ1vL)
        (find . g$5857$eZ1vL)
        (filter . g$5860$eZ1vL)
        (cons* . g$5875$eZ1vL)
        (assv . g$5862$eZ1vL)
        (assq . g$5861$eZ1vL)
        (assp . g$5864$eZ1vL)
        (assoc . g$5863$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12806$eZ1vL
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7420$eZ1vL)
        (call-with-input-file . g$7419$eZ1vL)
        (write-char . g$7401$eZ1vL)
        (write . g$12643$eZ1vL)
        (with-output-to-file . g$7418$eZ1vL)
        (with-input-from-file . g$7417$eZ1vL)
        (read-char . g$7400$eZ1vL)
        (read . g$12642$eZ1vL)
        (peek-char . g$7399$eZ1vL)
        (open-output-file . g$12641$eZ1vL)
        (open-input-file . g$12640$eZ1vL)
        (newline . g$7421$eZ1vL)
        (display . g$12639$eZ1vL)
        (close-output-port . g$12638$eZ1vL)
        (close-input-port . g$12637$eZ1vL)
        (eof-object? . g$12636$eZ1vL)
        (eof-object . g$12635$eZ1vL)
        (current-error-port . g$12634$eZ1vL)
        (current-output-port . g$12633$eZ1vL)
        (current-input-port . g$12632$eZ1vL)
        (output-port? . g$12631$eZ1vL)
        (input-port? . g$12630$eZ1vL)
        (make-i/o-write-error . g$7241$eZ1vL)
        (make-i/o-read-error . g$7227$eZ1vL)
        (make-i/o-port-error . g$7346$eZ1vL)
        (make-i/o-invalid-position-error . g$7256$eZ1vL)
        (make-i/o-filename-error . g$7273$eZ1vL)
        (make-i/o-file-protection-error . g$7289$eZ1vL)
        (make-i/o-file-is-read-only-error . g$7303$eZ1vL)
        (make-i/o-file-does-not-exist-error . g$7331$eZ1vL)
        (make-i/o-file-already-exists-error . g$7317$eZ1vL)
        (make-i/o-error . g$7213$eZ1vL)
        (i/o-write-error? . g$7242$eZ1vL)
        (i/o-read-error? . g$7228$eZ1vL)
        (i/o-port-error? . g$7348$eZ1vL)
        (i/o-invalid-position-error? . g$7258$eZ1vL)
        (i/o-error-position . g$7259$eZ1vL)
        (i/o-filename-error? . g$7275$eZ1vL)
        (i/o-file-protection-error? . g$7290$eZ1vL)
        (i/o-file-is-read-only-error? . g$7304$eZ1vL)
        (i/o-file-does-not-exist-error? . g$7332$eZ1vL)
        (i/o-file-already-exists-error? . g$7318$eZ1vL)
        (i/o-error? . g$7214$eZ1vL)
        (i/o-error-port . g$7349$eZ1vL)
        (i/o-error-filename . g$7276$eZ1vL)
        (&i/o-port . g$12293$eZ1vL)
        (&i/o-file-does-not-exist . g$12292$eZ1vL)
        (&i/o-file-already-exists . g$12291$eZ1vL)
        (&i/o-file-is-read-only . g$12290$eZ1vL)
        (&i/o-file-protection . g$12289$eZ1vL)
        (&i/o-filename . g$12288$eZ1vL)
        (&i/o-invalid-position . g$12287$eZ1vL)
        (&i/o-write . g$12286$eZ1vL)
        (&i/o-read . g$12285$eZ1vL)
        (&i/o . g$12284$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12807$eZ1vL
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12590$eZ1vL)
        (utf32->string . g$12557$eZ1vL)
        (utf16->string . g$12556$eZ1vL)
        (utf8->string . g$12555$eZ1vL)
        (uint-list->bytevector . g$12554$eZ1vL)
        (u8-list->bytevector . g$12553$eZ1vL)
        (string->utf8 . g$12552$eZ1vL)
        (string->utf32 . g$12551$eZ1vL)
        (string->utf16 . g$12550$eZ1vL)
        (sint-list->bytevector . g$12549$eZ1vL)
        (native-endianness . g$6575$eZ1vL)
        (bytevector? . g$12548$eZ1vL)
        (bytevector=? . g$12547$eZ1vL)
        (bytevector-uint-set! . g$12546$eZ1vL)
        (bytevector-uint-ref . g$12545$eZ1vL)
        (bytevector-u8-set! . g$12544$eZ1vL)
        (bytevector-u8-ref . g$12543$eZ1vL)
        (bytevector-u64-set! . g$6596$eZ1vL)
        (bytevector-u64-ref . g$6592$eZ1vL)
        (bytevector-u64-native-set! . g$6598$eZ1vL)
        (bytevector-u64-native-ref . g$6594$eZ1vL)
        (bytevector-u32-set! . g$6588$eZ1vL)
        (bytevector-u32-ref . g$6584$eZ1vL)
        (bytevector-u32-native-set! . g$6590$eZ1vL)
        (bytevector-u32-native-ref . g$6586$eZ1vL)
        (bytevector-u16-set! . g$6580$eZ1vL)
        (bytevector-u16-ref . g$6576$eZ1vL)
        (bytevector-u16-native-set! . g$6582$eZ1vL)
        (bytevector-u16-native-ref . g$6578$eZ1vL)
        (bytevector-sint-set! . g$12542$eZ1vL)
        (bytevector-sint-ref . g$12541$eZ1vL)
        (bytevector-s8-set! . g$12540$eZ1vL)
        (bytevector-s8-ref . g$12539$eZ1vL)
        (bytevector-s64-set! . g$6597$eZ1vL)
        (bytevector-s64-ref . g$6593$eZ1vL)
        (bytevector-s64-native-set! . g$6599$eZ1vL)
        (bytevector-s64-native-ref . g$6595$eZ1vL)
        (bytevector-s32-set! . g$6589$eZ1vL)
        (bytevector-s32-ref . g$6585$eZ1vL)
        (bytevector-s32-native-set! . g$6591$eZ1vL)
        (bytevector-s32-native-ref . g$6587$eZ1vL)
        (bytevector-s16-set! . g$6581$eZ1vL)
        (bytevector-s16-ref . g$6577$eZ1vL)
        (bytevector-s16-native-set! . g$6583$eZ1vL)
        (bytevector-s16-native-ref . g$6579$eZ1vL)
        (bytevector-length . g$12538$eZ1vL)
        (bytevector-ieee-single-set! . g$12537$eZ1vL)
        (bytevector-ieee-single-ref . g$12536$eZ1vL)
        (bytevector-ieee-single-native-set! . g$6602$eZ1vL)
        (bytevector-ieee-single-native-ref . g$6600$eZ1vL)
        (bytevector-ieee-double-set! . g$12535$eZ1vL)
        (bytevector-ieee-double-ref . g$12534$eZ1vL)
        (bytevector-ieee-double-native-set! . g$6603$eZ1vL)
        (bytevector-ieee-double-native-ref . g$6601$eZ1vL)
        (bytevector-fill! . g$12533$eZ1vL)
        (bytevector-copy! . g$12532$eZ1vL)
        (bytevector-copy . g$12531$eZ1vL)
        (bytevector->uint-list . g$12530$eZ1vL)
        (bytevector->u8-list . g$12529$eZ1vL)
        (bytevector->sint-list . g$12528$eZ1vL)
        (endianness . g$12238$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12808$eZ1vL
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12693$eZ1vL)
        (string-titlecase . g$12692$eZ1vL)
        (string-normalize-nfkd . g$12691$eZ1vL)
        (string-normalize-nfkc . g$12690$eZ1vL)
        (string-normalize-nfd . g$12689$eZ1vL)
        (string-normalize-nfc . g$12688$eZ1vL)
        (string-foldcase . g$12687$eZ1vL)
        (string-downcase . g$12686$eZ1vL)
        (string-ci>? . g$6995$eZ1vL)
        (string-ci>=? . g$6997$eZ1vL)
        (string-ci=? . g$6993$eZ1vL)
        (string-ci<? . g$6994$eZ1vL)
        (string-ci<=? . g$6996$eZ1vL)
        (char-whitespace? . g$12685$eZ1vL)
        (char-upper-case? . g$12684$eZ1vL)
        (char-title-case? . g$12683$eZ1vL)
        (char-numeric? . g$12682$eZ1vL)
        (char-lower-case? . g$12681$eZ1vL)
        (char-general-category . g$12680$eZ1vL)
        (char-upcase . g$12679$eZ1vL)
        (char-titlecase . g$12678$eZ1vL)
        (char-foldcase . g$12677$eZ1vL)
        (char-downcase . g$12676$eZ1vL)
        (char-ci>? . g$7034$eZ1vL)
        (char-ci>=? . g$7036$eZ1vL)
        (char-ci=? . g$7032$eZ1vL)
        (char-ci<? . g$7033$eZ1vL)
        (char-ci<=? . g$7035$eZ1vL)
        (char-alphabetic? . g$12675$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12809$eZ1vL
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12565$eZ1vL)
        (raise-continuable . g$12564$eZ1vL)
        (raise . g$12563$eZ1vL)
        (guard . g$12253$eZ1vL)
        (else . g$12242$eZ1vL)
        (=> . g$12241$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12810$eZ1vL
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7096$eZ1vL)
        (bitwise-reverse-bit-field . g$12446$eZ1vL)
        (bitwise-length . g$12445$eZ1vL)
        (bitwise-if . g$7090$eZ1vL)
        (bitwise-first-bit-set . g$12444$eZ1vL)
        (bitwise-copy-bit-field . g$7093$eZ1vL)
        (bitwise-copy-bit . g$7091$eZ1vL)
        (bitwise-bit-set? . g$12443$eZ1vL)
        (bitwise-bit-field . g$7092$eZ1vL)
        (bitwise-bit-count . g$12442$eZ1vL)
        (bitwise-xor . g$12441$eZ1vL)
        (bitwise-ior . g$12440$eZ1vL)
        (bitwise-and . g$12439$eZ1vL)
        (bitwise-not . g$12438$eZ1vL)
        (bitwise-arithmetic-shift-right . g$7095$eZ1vL)
        (bitwise-arithmetic-shift-left . g$7094$eZ1vL)
        (bitwise-arithmetic-shift . g$12437$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12811$eZ1vL
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12481$eZ1vL)
        (fxxor . g$12480$eZ1vL)
        (fxrotate-bit-field . g$7131$eZ1vL)
        (fxreverse-bit-field . g$12479$eZ1vL)
        (fxpositive? . g$12478$eZ1vL)
        (fxodd? . g$12477$eZ1vL)
        (fxnot . g$12476$eZ1vL)
        (fxnegative? . g$12475$eZ1vL)
        (fxmod0 . g$12474$eZ1vL)
        (fxmod . g$12473$eZ1vL)
        (fxmin . g$12472$eZ1vL)
        (fxmax . g$12471$eZ1vL)
        (fxlength . g$12470$eZ1vL)
        (fxior . g$12469$eZ1vL)
        (fxif . g$7125$eZ1vL)
        (fxfirst-bit-set . g$12468$eZ1vL)
        (fxeven? . g$12467$eZ1vL)
        (fxdiv0-and-mod0 . g$12466$eZ1vL)
        (fxdiv0 . g$12465$eZ1vL)
        (fxdiv-and-mod . g$12464$eZ1vL)
        (fxdiv . g$12463$eZ1vL)
        (fxcopy-bit-field . g$7128$eZ1vL)
        (fxcopy-bit . g$7126$eZ1vL)
        (fxbit-set? . g$12462$eZ1vL)
        (fxbit-field . g$7127$eZ1vL)
        (fxbit-count . g$12461$eZ1vL)
        (fxarithmetic-shift-right . g$7130$eZ1vL)
        (fxarithmetic-shift-left . g$7129$eZ1vL)
        (fxarithmetic-shift . g$12460$eZ1vL)
        (fxand . g$12459$eZ1vL)
        (fx>? . g$12458$eZ1vL)
        (fx>=? . g$12457$eZ1vL)
        (fx=? . g$12456$eZ1vL)
        (fx<? . g$12455$eZ1vL)
        (fx<=? . g$12454$eZ1vL)
        (fx-/carry . g$7123$eZ1vL)
        (fx- . g$12453$eZ1vL)
        (fx+/carry . g$7124$eZ1vL)
        (fx+ . g$12452$eZ1vL)
        (fx*/carry . g$7122$eZ1vL)
        (fx* . g$12451$eZ1vL)
        (greatest-fixnum . g$12450$eZ1vL)
        (least-fixnum . g$12449$eZ1vL)
        (fixnum-width . g$12448$eZ1vL)
        (fixnum? . g$12447$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12812$eZ1vL
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7199$eZ1vL)
        (no-infinities-violation? . g$7185$eZ1vL)
        (make-no-nans-violation . g$7198$eZ1vL)
        (make-no-infinities-violation . g$7184$eZ1vL)
        (real->flonum . g$12527$eZ1vL)
        (flzero? . g$12526$eZ1vL)
        (fltruncate . g$12525$eZ1vL)
        (fltan . g$12524$eZ1vL)
        (flsqrt . g$12523$eZ1vL)
        (flsin . g$12522$eZ1vL)
        (flround . g$12521$eZ1vL)
        (flpositive? . g$12520$eZ1vL)
        (flonum? . g$12519$eZ1vL)
        (flodd? . g$12518$eZ1vL)
        (flnumerator . g$12517$eZ1vL)
        (flnegative? . g$12516$eZ1vL)
        (flnan? . g$12515$eZ1vL)
        (flmod0 . g$12514$eZ1vL)
        (flmod . g$12513$eZ1vL)
        (flmin . g$12512$eZ1vL)
        (flmax . g$12511$eZ1vL)
        (fllog . g$12510$eZ1vL)
        (flinteger? . g$12509$eZ1vL)
        (flinfinite? . g$12508$eZ1vL)
        (flfloor . g$12507$eZ1vL)
        (flfinite? . g$12506$eZ1vL)
        (flexpt . g$12505$eZ1vL)
        (flexp . g$12504$eZ1vL)
        (fleven? . g$12503$eZ1vL)
        (fldiv0-and-mod0 . g$12502$eZ1vL)
        (fldiv0 . g$12501$eZ1vL)
        (fldiv-and-mod . g$12500$eZ1vL)
        (fldiv . g$12499$eZ1vL)
        (fldenominator . g$12498$eZ1vL)
        (flcos . g$12497$eZ1vL)
        (flceiling . g$12496$eZ1vL)
        (flatan . g$12495$eZ1vL)
        (flasin . g$12494$eZ1vL)
        (flacos . g$12493$eZ1vL)
        (flabs . g$12492$eZ1vL)
        (fl>? . g$12491$eZ1vL)
        (fl>=? . g$12490$eZ1vL)
        (fl=? . g$12489$eZ1vL)
        (fl<? . g$12488$eZ1vL)
        (fl<=? . g$12487$eZ1vL)
        (fl/ . g$12486$eZ1vL)
        (fl- . g$12485$eZ1vL)
        (fl+ . g$12484$eZ1vL)
        (fl* . g$12483$eZ1vL)
        (fixnum->flonum . g$12482$eZ1vL)
        (&no-nans . g$12297$eZ1vL)
        (&no-infinities . g$12296$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12813$eZ1vL
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12655$eZ1vL)
        (string-ci-hash . g$12654$eZ1vL)
        (string-hash . g$12653$eZ1vL)
        (equal-hash . g$12652$eZ1vL)
        (hashtable-equivalence-function . g$12651$eZ1vL)
        (make-hashtable . g$12650$eZ1vL)
        (hashtable-hash-function . g$12649$eZ1vL)
        (make-eqv-hashtable . g$6537$eZ1vL)
        (make-eq-hashtable . g$6536$eZ1vL)
        (hashtable? . g$12648$eZ1vL)
        (hashtable-update! . g$6543$eZ1vL)
        (hashtable-size . g$6538$eZ1vL)
        (hashtable-set! . g$6540$eZ1vL)
        (hashtable-ref . g$6539$eZ1vL)
        (hashtable-mutable? . g$12647$eZ1vL)
        (hashtable-keys . g$12646$eZ1vL)
        (hashtable-entries . g$12645$eZ1vL)
        (hashtable-delete! . g$6541$eZ1vL)
        (hashtable-copy . g$12644$eZ1vL)
        (hashtable-contains? . g$6542$eZ1vL)
        (hashtable-clear! . g$6544$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12814$eZ1vL
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12636$eZ1vL)
        (eof-object . g$12635$eZ1vL)
        (current-error-port . g$12634$eZ1vL)
        (current-output-port . g$12633$eZ1vL)
        (current-input-port . g$12632$eZ1vL)
        (output-port? . g$12631$eZ1vL)
        (input-port? . g$12630$eZ1vL)
        (utf-8-codec . g$12629$eZ1vL)
        (utf-16-codec . g$12628$eZ1vL)
        (transcoder-error-handling-mode . g$12627$eZ1vL)
        (transcoder-eol-style . g$12626$eZ1vL)
        (transcoder-codec . g$12625$eZ1vL)
        (transcoded-port . g$12624$eZ1vL)
        (textual-port? . g$12623$eZ1vL)
        (string->bytevector . g$12622$eZ1vL)
        (standard-output-port . g$12621$eZ1vL)
        (standard-input-port . g$12620$eZ1vL)
        (standard-error-port . g$12619$eZ1vL)
        (set-port-position! . g$12618$eZ1vL)
        (put-u8 . g$12617$eZ1vL)
        (put-string . g$12616$eZ1vL)
        (put-datum . g$12615$eZ1vL)
        (put-char . g$12614$eZ1vL)
        (put-bytevector . g$12613$eZ1vL)
        (port? . g$7386$eZ1vL)
        (port-transcoder . g$12612$eZ1vL)
        (port-position . g$12611$eZ1vL)
        (port-has-set-port-position!? . g$12610$eZ1vL)
        (port-has-port-position? . g$12609$eZ1vL)
        (port-eof? . g$12608$eZ1vL)
        (output-port-buffer-mode . g$12607$eZ1vL)
        (open-string-output-port . g$7385$eZ1vL)
        (open-string-input-port . g$12606$eZ1vL)
        (open-file-output-port . g$12605$eZ1vL)
        (open-file-input/output-port . g$12604$eZ1vL)
        (open-file-input-port . g$12603$eZ1vL)
        (open-bytevector-output-port . g$12602$eZ1vL)
        (open-bytevector-input-port . g$12601$eZ1vL)
        (native-transcoder . g$12600$eZ1vL)
        (native-eol-style . g$12599$eZ1vL)
        (make-transcoder . g$12598$eZ1vL)
        (latin-1-codec . g$12597$eZ1vL)
        (make-i/o-write-error . g$7241$eZ1vL)
        (make-i/o-read-error . g$7227$eZ1vL)
        (make-i/o-port-error . g$7346$eZ1vL)
        (make-i/o-invalid-position-error . g$7256$eZ1vL)
        (make-i/o-filename-error . g$7273$eZ1vL)
        (make-i/o-file-protection-error . g$7289$eZ1vL)
        (make-i/o-file-is-read-only-error . g$7303$eZ1vL)
        (make-i/o-file-does-not-exist-error . g$7331$eZ1vL)
        (make-i/o-file-already-exists-error . g$7317$eZ1vL)
        (make-i/o-error . g$7213$eZ1vL)
        (make-i/o-encoding-error . g$7377$eZ1vL)
        (make-i/o-decoding-error . g$7362$eZ1vL)
        (make-custom-textual-output-port . g$12596$eZ1vL)
        (make-custom-textual-input/output-port . g$12595$eZ1vL)
        (make-custom-textual-input-port . g$12594$eZ1vL)
        (make-custom-binary-output-port . g$12593$eZ1vL)
        (make-custom-binary-input/output-port . g$12592$eZ1vL)
        (make-custom-binary-input-port . g$12591$eZ1vL)
        (lookahead-u8 . g$12589$eZ1vL)
        (lookahead-char . g$12588$eZ1vL)
        (i/o-write-error? . g$7242$eZ1vL)
        (i/o-read-error? . g$7228$eZ1vL)
        (i/o-port-error? . g$7348$eZ1vL)
        (i/o-invalid-position-error? . g$7258$eZ1vL)
        (i/o-error-position . g$7259$eZ1vL)
        (i/o-filename-error? . g$7275$eZ1vL)
        (i/o-file-protection-error? . g$7290$eZ1vL)
        (i/o-file-is-read-only-error? . g$7304$eZ1vL)
        (i/o-file-does-not-exist-error? . g$7332$eZ1vL)
        (i/o-file-already-exists-error? . g$7318$eZ1vL)
        (i/o-error? . g$7214$eZ1vL)
        (i/o-error-port . g$7349$eZ1vL)
        (i/o-error-filename . g$7276$eZ1vL)
        (i/o-encoding-error? . g$7379$eZ1vL)
        (i/o-encoding-error-char . g$7380$eZ1vL)
        (i/o-decoding-error? . g$7363$eZ1vL)
        (get-u8 . g$12587$eZ1vL)
        (get-string-n! . g$12586$eZ1vL)
        (get-string-n . g$12585$eZ1vL)
        (get-string-all . g$12584$eZ1vL)
        (get-line . g$12583$eZ1vL)
        (get-datum . g$12582$eZ1vL)
        (get-char . g$12581$eZ1vL)
        (get-bytevector-some . g$12580$eZ1vL)
        (get-bytevector-n! . g$12579$eZ1vL)
        (get-bytevector-n . g$12578$eZ1vL)
        (get-bytevector-all . g$12577$eZ1vL)
        (flush-output-port . g$12576$eZ1vL)
        (close-port . g$12575$eZ1vL)
        (call-with-string-output-port . g$7387$eZ1vL)
        (call-with-port . g$7388$eZ1vL)
        (call-with-bytevector-output-port . g$12574$eZ1vL)
        (bytevector->string . g$12573$eZ1vL)
        (buffer-mode? . g$12572$eZ1vL)
        (binary-port? . g$12571$eZ1vL)
        (&i/o-encoding . g$12295$eZ1vL)
        (&i/o-decoding . g$12294$eZ1vL)
        (&i/o-port . g$12293$eZ1vL)
        (&i/o-file-does-not-exist . g$12292$eZ1vL)
        (&i/o-file-already-exists . g$12291$eZ1vL)
        (&i/o-file-is-read-only . g$12290$eZ1vL)
        (&i/o-file-protection . g$12289$eZ1vL)
        (&i/o-filename . g$12288$eZ1vL)
        (&i/o-invalid-position . g$12287$eZ1vL)
        (&i/o-write . g$12286$eZ1vL)
        (&i/o-read . g$12285$eZ1vL)
        (&i/o . g$12284$eZ1vL)
        (error-handling-mode . g$12257$eZ1vL)
        (file-options . g$12256$eZ1vL)
        (buffer-mode . g$12255$eZ1vL)
        (eol-style . g$12254$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12815$eZ1vL
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7485$eZ1vL)
        (enum-set=? . g$7492$eZ1vL)
        (enum-set-universe . g$7486$eZ1vL)
        (enum-set-union . g$7493$eZ1vL)
        (enum-set-subset? . g$7491$eZ1vL)
        (enum-set-projection . g$7497$eZ1vL)
        (enum-set-member? . g$7490$eZ1vL)
        (enum-set-intersection . g$7494$eZ1vL)
        (enum-set-indexer . g$7487$eZ1vL)
        (enum-set-difference . g$7495$eZ1vL)
        (enum-set-constructor . g$7488$eZ1vL)
        (enum-set-complement . g$7496$eZ1vL)
        (enum-set->list . g$7489$eZ1vL)
        (define-enumeration . g$12268$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12816$eZ1vL
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6823$eZ1vL)
        (warning? . g$6734$eZ1vL)
        (violation? . g$6776$eZ1vL)
        (undefined-violation? . g$6900$eZ1vL)
        (syntax-violation? . g$6884$eZ1vL)
        (syntax-violation-subform . g$6886$eZ1vL)
        (syntax-violation-form . g$6885$eZ1vL)
        (syntax-violation . g$9173$eZ1vL)
        (simple-conditions . g$12562$eZ1vL)
        (serious-condition? . g$6748$eZ1vL)
        (non-continuable-violation? . g$6838$eZ1vL)
        (message-condition? . g$6719$eZ1vL)
        (make-who-condition . g$6821$eZ1vL)
        (make-warning . g$6733$eZ1vL)
        (make-violation . g$6775$eZ1vL)
        (make-undefined-violation . g$6899$eZ1vL)
        (make-syntax-violation . g$6881$eZ1vL)
        (make-serious-condition . g$6747$eZ1vL)
        (make-non-continuable-violation . g$6837$eZ1vL)
        (make-message-condition . g$6717$eZ1vL)
        (make-lexical-violation . g$6865$eZ1vL)
        (make-irritants-condition . g$6804$eZ1vL)
        (make-implementation-restriction-violation . g$6851$eZ1vL)
        (make-error . g$6761$eZ1vL)
        (make-assertion-violation . g$6789$eZ1vL)
        (lexical-violation? . g$6866$eZ1vL)
        (irritants-condition? . g$6806$eZ1vL)
        (implementation-restriction-violation? . g$6852$eZ1vL)
        (error? . g$6762$eZ1vL)
        (condition-who . g$6824$eZ1vL)
        (condition-predicate . g$12561$eZ1vL)
        (condition-message . g$6720$eZ1vL)
        (condition-irritants . g$6807$eZ1vL)
        (condition-accessor . g$12560$eZ1vL)
        (condition . g$12559$eZ1vL)
        (assertion-violation? . g$6790$eZ1vL)
        (condition? . g$12558$eZ1vL)
        (&non-continuable . g$12283$eZ1vL)
        (&undefined . g$12282$eZ1vL)
        (&syntax . g$12281$eZ1vL)
        (&lexical . g$12280$eZ1vL)
        (&implementation-restriction . g$12279$eZ1vL)
        (&who . g$12278$eZ1vL)
        (&irritants . g$12277$eZ1vL)
        (&assertion . g$12276$eZ1vL)
        (&violation . g$12275$eZ1vL)
        (&error . g$12274$eZ1vL)
        (&serious . g$12273$eZ1vL)
        (&warning . g$12272$eZ1vL)
        (&message . g$12271$eZ1vL)
        (&condition . g$12270$eZ1vL)
        (define-condition-type . g$12269$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12817$eZ1vL
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12667$eZ1vL)
        (record-type-uid . g$12666$eZ1vL)
        (record-type-sealed? . g$12665$eZ1vL)
        (record-type-parent . g$12664$eZ1vL)
        (record-type-opaque? . g$12663$eZ1vL)
        (record-type-name . g$12662$eZ1vL)
        (record-type-generative? . g$12661$eZ1vL)
        (record-type-field-names . g$12660$eZ1vL)
        (record-rtd . g$12659$eZ1vL)
        (record-field-mutable? . g$12658$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12818$eZ1vL
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12674$eZ1vL)
        (record-predicate . g$12673$eZ1vL)
        (record-mutator . g$12672$eZ1vL)
        (record-constructor . g$12671$eZ1vL)
        (record-accessor . g$12670$eZ1vL)
        (make-record-type-descriptor . g$12669$eZ1vL)
        (make-record-constructor-descriptor . g$12668$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12819$eZ1vL
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12267$eZ1vL)
        (parent-rtd . g$12266$eZ1vL)
        (nongenerative . g$12265$eZ1vL)
        (opaque . g$12264$eZ1vL)
        (sealed . g$12263$eZ1vL)
        (protocol . g$12262$eZ1vL)
        (parent . g$12261$eZ1vL)
        (immutable . g$12260$eZ1vL)
        (mutable . g$12259$eZ1vL)
        (fields . g$12258$eZ1vL)
        (record-constructor-descriptor . g$12219$eZ1vL)
        (record-type-descriptor . g$12218$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12820$eZ1vL
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9045$eZ1vL)
        (&no-nans-rcd . g$12784$eZ1vL)
        (&no-nans-rtd . g$12783$eZ1vL)
        (&no-infinities-rcd . g$12782$eZ1vL)
        (&no-infinities-rtd . g$12781$eZ1vL)
        (&i/o-encoding-rcd . g$12780$eZ1vL)
        (&i/o-encoding-rtd . g$12779$eZ1vL)
        (&i/o-decoding-rcd . g$12778$eZ1vL)
        (&i/o-decoding-rtd . g$12777$eZ1vL)
        (&i/o-port-rcd . g$12776$eZ1vL)
        (&i/o-port-rtd . g$12775$eZ1vL)
        (&i/o-file-does-not-exist-rcd . g$12774$eZ1vL)
        (&i/o-file-does-not-exist-rtd . g$12773$eZ1vL)
        (&i/o-file-already-exists-rcd . g$12772$eZ1vL)
        (&i/o-file-already-exists-rtd . g$12771$eZ1vL)
        (&i/o-file-is-read-only-rcd . g$12770$eZ1vL)
        (&i/o-file-is-read-only-rtd . g$12769$eZ1vL)
        (&i/o-file-protection-rcd . g$12768$eZ1vL)
        (&i/o-file-protection-rtd . g$12767$eZ1vL)
        (&i/o-filename-rcd . g$12766$eZ1vL)
        (&i/o-filename-rtd . g$12765$eZ1vL)
        (&i/o-invalid-position-rcd . g$12764$eZ1vL)
        (&i/o-invalid-position-rtd . g$12763$eZ1vL)
        (&i/o-write-rcd . g$12762$eZ1vL)
        (&i/o-write-rtd . g$12761$eZ1vL)
        (&i/o-read-rcd . g$12760$eZ1vL)
        (&i/o-read-rtd . g$12759$eZ1vL)
        (&i/o-rcd . g$12758$eZ1vL)
        (&i/o-rtd . g$12757$eZ1vL)
        (&undefined-rcd . g$12756$eZ1vL)
        (&undefined-rtd . g$12755$eZ1vL)
        (&syntax-rcd . g$12754$eZ1vL)
        (&syntax-rtd . g$12753$eZ1vL)
        (&lexical-rcd . g$12752$eZ1vL)
        (&lexical-rtd . g$12751$eZ1vL)
        (&implementation-restriction-rcd . g$12750$eZ1vL)
        (&implementation-restriction-rtd . g$12749$eZ1vL)
        (&non-continuable-rcd . g$12748$eZ1vL)
        (&non-continuable-rtd . g$12747$eZ1vL)
        (&who-rcd . g$12746$eZ1vL)
        (&who-rtd . g$12745$eZ1vL)
        (&irritants-rcd . g$12744$eZ1vL)
        (&irritants-rtd . g$12743$eZ1vL)
        (&assertion-rcd . g$12742$eZ1vL)
        (&assertion-rtd . g$12741$eZ1vL)
        (&violation-rcd . g$12740$eZ1vL)
        (&violation-rtd . g$12739$eZ1vL)
        (&error-rcd . g$12738$eZ1vL)
        (&error-rtd . g$12737$eZ1vL)
        (&serious-rcd . g$12736$eZ1vL)
        (&serious-rtd . g$12735$eZ1vL)
        (&warning-rcd . g$12734$eZ1vL)
        (&warning-rtd . g$12733$eZ1vL)
        (&message-rcd . g$12732$eZ1vL)
        (&message-rtd . g$12731$eZ1vL)
        (&condition-rcd . g$12730$eZ1vL)
        (&condition-rtd . g$12729$eZ1vL)
        (library-letrec* . g$12728$eZ1vL)
        (annotation-stripped . g$12727$eZ1vL)
        (annotation-source . g$12726$eZ1vL)
        (annotation-expression . g$12725$eZ1vL)
        (annotation? . g$12724$eZ1vL)
        (read-annotated . g$12723$eZ1vL)
        (tanh . g$12722$eZ1vL)
        (cosh . g$12721$eZ1vL)
        (sinh . g$12720$eZ1vL)
        (make-guid . g$12719$eZ1vL)
        (unspecified? . g$12718$eZ1vL)
        (make-list . g$5856$eZ1vL)
        (last-pair . g$5855$eZ1vL)
        (load-r5rs . g$12717$eZ1vL)
        (license . g$12716$eZ1vL)
        (stacktrace . g$12715$eZ1vL)
        (ironscheme-build . g$12161$eZ1vL)
        (define-clr-class-internal . g$12714$eZ1vL)
        (clr-field-set!-internal . g$12713$eZ1vL)
        (clr-field-get-internal . g$12712$eZ1vL)
        (clr-cast-internal . g$12711$eZ1vL)
        (clr-call-internal . g$12710$eZ1vL)
        (clr-new-internal . g$12709$eZ1vL)
        (clr-new-array-internal . g$12708$eZ1vL)
        (clr-is-internal . g$12707$eZ1vL)
        (clr-reference-internal . g$12706$eZ1vL)
        (clr-using-internal . g$12705$eZ1vL)
        (syntax-error . g$9170$eZ1vL)
        (syntax-dispatch . g$9040$eZ1vL)
        (compile-core . g$12704$eZ1vL)
        (eval-core . g$12703$eZ1vL)
        (set-symbol-value! . g$12702$eZ1vL)
        (symbol-value . g$12701$eZ1vL)
        (symbol-value? . g$12700$eZ1vL)
        (ungensym . g$12699$eZ1vL)
        (gensym . g$12698$eZ1vL)
        (void . g$12697$eZ1vL)
        (load-serialized-library . g$12696$eZ1vL)
        (serialize-library . g$12695$eZ1vL)
        (compile-system-libraries . g$12163$eZ1vL)
        (compile->closure . g$12165$eZ1vL)
        (compile . g$12164$eZ1vL)
        (load . g$12160$eZ1vL)
        (interaction-environment . g$9180$eZ1vL)
        (char-ready? . g$12694$eZ1vL)
        (string-upcase . g$12693$eZ1vL)
        (string-titlecase . g$12692$eZ1vL)
        (string-normalize-nfkd . g$12691$eZ1vL)
        (string-normalize-nfkc . g$12690$eZ1vL)
        (string-normalize-nfd . g$12689$eZ1vL)
        (string-normalize-nfc . g$12688$eZ1vL)
        (string-foldcase . g$12687$eZ1vL)
        (string-downcase . g$12686$eZ1vL)
        (string-ci>? . g$6995$eZ1vL)
        (string-ci>=? . g$6997$eZ1vL)
        (string-ci=? . g$6993$eZ1vL)
        (string-ci<? . g$6994$eZ1vL)
        (string-ci<=? . g$6996$eZ1vL)
        (char-whitespace? . g$12685$eZ1vL)
        (char-upper-case? . g$12684$eZ1vL)
        (char-title-case? . g$12683$eZ1vL)
        (char-numeric? . g$12682$eZ1vL)
        (char-lower-case? . g$12681$eZ1vL)
        (char-general-category . g$12680$eZ1vL)
        (char-upcase . g$12679$eZ1vL)
        (char-titlecase . g$12678$eZ1vL)
        (char-foldcase . g$12677$eZ1vL)
        (char-downcase . g$12676$eZ1vL)
        (char-ci>? . g$7034$eZ1vL)
        (char-ci>=? . g$7036$eZ1vL)
        (char-ci=? . g$7032$eZ1vL)
        (char-ci<? . g$7033$eZ1vL)
        (char-ci<=? . g$7035$eZ1vL)
        (char-alphabetic? . g$12675$eZ1vL)
        (variable-transformer-procedure . g$8777$eZ1vL)
        (variable-transformer? . g$8776$eZ1vL)
        (make-variable-transformer . g$8775$eZ1vL)
        (identifier? . g$9174$eZ1vL)
        (generate-temporaries . g$9163$eZ1vL)
        (free-identifier=? . g$9164$eZ1vL)
        (syntax->datum . g$9176$eZ1vL)
        (datum->syntax . g$9175$eZ1vL)
        (bound-identifier=? . g$9165$eZ1vL)
        (record-type-descriptor? . g$12674$eZ1vL)
        (record-predicate . g$12673$eZ1vL)
        (record-mutator . g$12672$eZ1vL)
        (record-constructor . g$12671$eZ1vL)
        (record-accessor . g$12670$eZ1vL)
        (make-record-type-descriptor . g$12669$eZ1vL)
        (make-record-constructor-descriptor . g$12668$eZ1vL)
        (record? . g$12667$eZ1vL)
        (record-type-uid . g$12666$eZ1vL)
        (record-type-sealed? . g$12665$eZ1vL)
        (record-type-parent . g$12664$eZ1vL)
        (record-type-opaque? . g$12663$eZ1vL)
        (record-type-name . g$12662$eZ1vL)
        (record-type-generative? . g$12661$eZ1vL)
        (record-type-field-names . g$12660$eZ1vL)
        (record-rtd . g$12659$eZ1vL)
        (record-field-mutable? . g$12658$eZ1vL)
        (delete-file . g$6569$eZ1vL)
        (file-exists? . g$6568$eZ1vL)
        (vector-sort! . g$12657$eZ1vL)
        (vector-sort . g$12656$eZ1vL)
        (list-sort . g$6935$eZ1vL)
        (symbol-hash . g$12655$eZ1vL)
        (string-ci-hash . g$12654$eZ1vL)
        (string-hash . g$12653$eZ1vL)
        (equal-hash . g$12652$eZ1vL)
        (hashtable-equivalence-function . g$12651$eZ1vL)
        (make-hashtable . g$12650$eZ1vL)
        (hashtable-hash-function . g$12649$eZ1vL)
        (make-eqv-hashtable . g$6537$eZ1vL)
        (make-eq-hashtable . g$6536$eZ1vL)
        (hashtable? . g$12648$eZ1vL)
        (hashtable-update! . g$6543$eZ1vL)
        (hashtable-size . g$6538$eZ1vL)
        (hashtable-set! . g$6540$eZ1vL)
        (hashtable-ref . g$6539$eZ1vL)
        (hashtable-mutable? . g$12647$eZ1vL)
        (hashtable-keys . g$12646$eZ1vL)
        (hashtable-entries . g$12645$eZ1vL)
        (hashtable-delete! . g$6541$eZ1vL)
        (hashtable-copy . g$12644$eZ1vL)
        (hashtable-contains? . g$6542$eZ1vL)
        (hashtable-clear! . g$6544$eZ1vL)
        (call-with-output-file . g$7420$eZ1vL)
        (call-with-input-file . g$7419$eZ1vL)
        (write-char . g$7401$eZ1vL)
        (write . g$12643$eZ1vL)
        (with-output-to-file . g$7418$eZ1vL)
        (with-input-from-file . g$7417$eZ1vL)
        (read-char . g$7400$eZ1vL)
        (read . g$12642$eZ1vL)
        (peek-char . g$7399$eZ1vL)
        (open-output-file . g$12641$eZ1vL)
        (open-input-file . g$12640$eZ1vL)
        (newline . g$7421$eZ1vL)
        (display . g$12639$eZ1vL)
        (close-output-port . g$12638$eZ1vL)
        (close-input-port . g$12637$eZ1vL)
        (eof-object? . g$12636$eZ1vL)
        (eof-object . g$12635$eZ1vL)
        (current-error-port . g$12634$eZ1vL)
        (current-output-port . g$12633$eZ1vL)
        (current-input-port . g$12632$eZ1vL)
        (output-port? . g$12631$eZ1vL)
        (input-port? . g$12630$eZ1vL)
        (utf-8-codec . g$12629$eZ1vL)
        (utf-16-codec . g$12628$eZ1vL)
        (transcoder-error-handling-mode . g$12627$eZ1vL)
        (transcoder-eol-style . g$12626$eZ1vL)
        (transcoder-codec . g$12625$eZ1vL)
        (transcoded-port . g$12624$eZ1vL)
        (textual-port? . g$12623$eZ1vL)
        (string->bytevector . g$12622$eZ1vL)
        (standard-output-port . g$12621$eZ1vL)
        (standard-input-port . g$12620$eZ1vL)
        (standard-error-port . g$12619$eZ1vL)
        (set-port-position! . g$12618$eZ1vL)
        (put-u8 . g$12617$eZ1vL)
        (put-string . g$12616$eZ1vL)
        (put-datum . g$12615$eZ1vL)
        (put-char . g$12614$eZ1vL)
        (put-bytevector . g$12613$eZ1vL)
        (port? . g$7386$eZ1vL)
        (port-transcoder . g$12612$eZ1vL)
        (port-position . g$12611$eZ1vL)
        (port-has-set-port-position!? . g$12610$eZ1vL)
        (port-has-port-position? . g$12609$eZ1vL)
        (port-eof? . g$12608$eZ1vL)
        (output-port-buffer-mode . g$12607$eZ1vL)
        (open-string-output-port . g$7385$eZ1vL)
        (open-string-input-port . g$12606$eZ1vL)
        (open-file-output-port . g$12605$eZ1vL)
        (open-file-input/output-port . g$12604$eZ1vL)
        (open-file-input-port . g$12603$eZ1vL)
        (open-bytevector-output-port . g$12602$eZ1vL)
        (open-bytevector-input-port . g$12601$eZ1vL)
        (native-transcoder . g$12600$eZ1vL)
        (native-eol-style . g$12599$eZ1vL)
        (make-transcoder . g$12598$eZ1vL)
        (latin-1-codec . g$12597$eZ1vL)
        (make-i/o-write-error . g$7241$eZ1vL)
        (make-i/o-read-error . g$7227$eZ1vL)
        (make-i/o-port-error . g$7346$eZ1vL)
        (make-i/o-invalid-position-error . g$7256$eZ1vL)
        (make-i/o-filename-error . g$7273$eZ1vL)
        (make-i/o-file-protection-error . g$7289$eZ1vL)
        (make-i/o-file-is-read-only-error . g$7303$eZ1vL)
        (make-i/o-file-does-not-exist-error . g$7331$eZ1vL)
        (make-i/o-file-already-exists-error . g$7317$eZ1vL)
        (make-i/o-error . g$7213$eZ1vL)
        (make-i/o-encoding-error . g$7377$eZ1vL)
        (make-i/o-decoding-error . g$7362$eZ1vL)
        (make-custom-textual-output-port . g$12596$eZ1vL)
        (make-custom-textual-input/output-port . g$12595$eZ1vL)
        (make-custom-textual-input-port . g$12594$eZ1vL)
        (make-custom-binary-output-port . g$12593$eZ1vL)
        (make-custom-binary-input/output-port . g$12592$eZ1vL)
        (make-custom-binary-input-port . g$12591$eZ1vL)
        (make-bytevector . g$12590$eZ1vL)
        (lookahead-u8 . g$12589$eZ1vL)
        (lookahead-char . g$12588$eZ1vL)
        (i/o-write-error? . g$7242$eZ1vL)
        (i/o-read-error? . g$7228$eZ1vL)
        (i/o-port-error? . g$7348$eZ1vL)
        (i/o-invalid-position-error? . g$7258$eZ1vL)
        (i/o-error-position . g$7259$eZ1vL)
        (i/o-filename-error? . g$7275$eZ1vL)
        (i/o-file-protection-error? . g$7290$eZ1vL)
        (i/o-file-is-read-only-error? . g$7304$eZ1vL)
        (i/o-file-does-not-exist-error? . g$7332$eZ1vL)
        (i/o-file-already-exists-error? . g$7318$eZ1vL)
        (i/o-error? . g$7214$eZ1vL)
        (i/o-error-port . g$7349$eZ1vL)
        (i/o-error-filename . g$7276$eZ1vL)
        (i/o-encoding-error? . g$7379$eZ1vL)
        (i/o-encoding-error-char . g$7380$eZ1vL)
        (i/o-decoding-error? . g$7363$eZ1vL)
        (get-u8 . g$12587$eZ1vL)
        (get-string-n! . g$12586$eZ1vL)
        (get-string-n . g$12585$eZ1vL)
        (get-string-all . g$12584$eZ1vL)
        (get-line . g$12583$eZ1vL)
        (get-datum . g$12582$eZ1vL)
        (get-char . g$12581$eZ1vL)
        (get-bytevector-some . g$12580$eZ1vL)
        (get-bytevector-n! . g$12579$eZ1vL)
        (get-bytevector-n . g$12578$eZ1vL)
        (get-bytevector-all . g$12577$eZ1vL)
        (flush-output-port . g$12576$eZ1vL)
        (close-port . g$12575$eZ1vL)
        (call-with-string-output-port . g$7387$eZ1vL)
        (call-with-port . g$7388$eZ1vL)
        (call-with-bytevector-output-port . g$12574$eZ1vL)
        (bytevector->string . g$12573$eZ1vL)
        (buffer-mode? . g$12572$eZ1vL)
        (binary-port? . g$12571$eZ1vL)
        (scheme-report-environment . g$9153$eZ1vL)
        (quotient . g$6914$eZ1vL)
        (null-environment . g$9152$eZ1vL)
        (remainder . g$6915$eZ1vL)
        (modulo . g$6916$eZ1vL)
        (inexact->exact . g$6911$eZ1vL)
        (force . g$6918$eZ1vL)
        (exact->inexact . g$6912$eZ1vL)
        (exit . g$12570$eZ1vL)
        (command-line . g$12157$eZ1vL)
        (string-fill! . g$12569$eZ1vL)
        (string-set! . g$12568$eZ1vL)
        (set-cdr! . g$12567$eZ1vL)
        (set-car! . g$12566$eZ1vL)
        (remove . g$5878$eZ1vL)
        (remv . g$5879$eZ1vL)
        (remp . g$5859$eZ1vL)
        (remq . g$5880$eZ1vL)
        (partition . g$5858$eZ1vL)
        (memv . g$5866$eZ1vL)
        (memq . g$5865$eZ1vL)
        (memp . g$5868$eZ1vL)
        (member . g$5867$eZ1vL)
        (exists . g$5872$eZ1vL)
        (for-all . g$5871$eZ1vL)
        (fold-right . g$5877$eZ1vL)
        (fold-left . g$5876$eZ1vL)
        (find . g$5857$eZ1vL)
        (filter . g$5860$eZ1vL)
        (cons* . g$5875$eZ1vL)
        (assv . g$5862$eZ1vL)
        (assq . g$5861$eZ1vL)
        (assp . g$5864$eZ1vL)
        (assoc . g$5863$eZ1vL)
        (with-exception-handler . g$12565$eZ1vL)
        (raise-continuable . g$12564$eZ1vL)
        (raise . g$12563$eZ1vL)
        (eval . g$9155$eZ1vL)
        (environment . g$9151$eZ1vL)
        (make-enumeration . g$7485$eZ1vL)
        (enum-set=? . g$7492$eZ1vL)
        (enum-set-universe . g$7486$eZ1vL)
        (enum-set-union . g$7493$eZ1vL)
        (enum-set-subset? . g$7491$eZ1vL)
        (enum-set-projection . g$7497$eZ1vL)
        (enum-set-member? . g$7490$eZ1vL)
        (enum-set-intersection . g$7494$eZ1vL)
        (enum-set-indexer . g$7487$eZ1vL)
        (enum-set-difference . g$7495$eZ1vL)
        (enum-set-constructor . g$7488$eZ1vL)
        (enum-set-complement . g$7496$eZ1vL)
        (enum-set->list . g$7489$eZ1vL)
        (who-condition? . g$6823$eZ1vL)
        (warning? . g$6734$eZ1vL)
        (violation? . g$6776$eZ1vL)
        (undefined-violation? . g$6900$eZ1vL)
        (syntax-violation? . g$6884$eZ1vL)
        (syntax-violation-subform . g$6886$eZ1vL)
        (syntax-violation-form . g$6885$eZ1vL)
        (syntax-violation . g$9173$eZ1vL)
        (simple-conditions . g$12562$eZ1vL)
        (serious-condition? . g$6748$eZ1vL)
        (non-continuable-violation? . g$6838$eZ1vL)
        (message-condition? . g$6719$eZ1vL)
        (make-who-condition . g$6821$eZ1vL)
        (make-warning . g$6733$eZ1vL)
        (make-violation . g$6775$eZ1vL)
        (make-undefined-violation . g$6899$eZ1vL)
        (make-syntax-violation . g$6881$eZ1vL)
        (make-serious-condition . g$6747$eZ1vL)
        (make-non-continuable-violation . g$6837$eZ1vL)
        (make-message-condition . g$6717$eZ1vL)
        (make-lexical-violation . g$6865$eZ1vL)
        (make-irritants-condition . g$6804$eZ1vL)
        (make-implementation-restriction-violation . g$6851$eZ1vL)
        (make-error . g$6761$eZ1vL)
        (make-assertion-violation . g$6789$eZ1vL)
        (lexical-violation? . g$6866$eZ1vL)
        (irritants-condition? . g$6806$eZ1vL)
        (implementation-restriction-violation? . g$6852$eZ1vL)
        (error? . g$6762$eZ1vL)
        (condition-who . g$6824$eZ1vL)
        (condition-predicate . g$12561$eZ1vL)
        (condition-message . g$6720$eZ1vL)
        (condition-irritants . g$6807$eZ1vL)
        (condition-accessor . g$12560$eZ1vL)
        (condition . g$12559$eZ1vL)
        (assertion-violation? . g$6790$eZ1vL)
        (condition? . g$12558$eZ1vL)
        (utf32->string . g$12557$eZ1vL)
        (utf16->string . g$12556$eZ1vL)
        (utf8->string . g$12555$eZ1vL)
        (uint-list->bytevector . g$12554$eZ1vL)
        (u8-list->bytevector . g$12553$eZ1vL)
        (string->utf8 . g$12552$eZ1vL)
        (string->utf32 . g$12551$eZ1vL)
        (string->utf16 . g$12550$eZ1vL)
        (sint-list->bytevector . g$12549$eZ1vL)
        (native-endianness . g$6575$eZ1vL)
        (bytevector? . g$12548$eZ1vL)
        (bytevector=? . g$12547$eZ1vL)
        (bytevector-uint-set! . g$12546$eZ1vL)
        (bytevector-uint-ref . g$12545$eZ1vL)
        (bytevector-u8-set! . g$12544$eZ1vL)
        (bytevector-u8-ref . g$12543$eZ1vL)
        (bytevector-u64-set! . g$6596$eZ1vL)
        (bytevector-u64-ref . g$6592$eZ1vL)
        (bytevector-u64-native-set! . g$6598$eZ1vL)
        (bytevector-u64-native-ref . g$6594$eZ1vL)
        (bytevector-u32-set! . g$6588$eZ1vL)
        (bytevector-u32-ref . g$6584$eZ1vL)
        (bytevector-u32-native-set! . g$6590$eZ1vL)
        (bytevector-u32-native-ref . g$6586$eZ1vL)
        (bytevector-u16-set! . g$6580$eZ1vL)
        (bytevector-u16-ref . g$6576$eZ1vL)
        (bytevector-u16-native-set! . g$6582$eZ1vL)
        (bytevector-u16-native-ref . g$6578$eZ1vL)
        (bytevector-sint-set! . g$12542$eZ1vL)
        (bytevector-sint-ref . g$12541$eZ1vL)
        (bytevector-s8-set! . g$12540$eZ1vL)
        (bytevector-s8-ref . g$12539$eZ1vL)
        (bytevector-s64-set! . g$6597$eZ1vL)
        (bytevector-s64-ref . g$6593$eZ1vL)
        (bytevector-s64-native-set! . g$6599$eZ1vL)
        (bytevector-s64-native-ref . g$6595$eZ1vL)
        (bytevector-s32-set! . g$6589$eZ1vL)
        (bytevector-s32-ref . g$6585$eZ1vL)
        (bytevector-s32-native-set! . g$6591$eZ1vL)
        (bytevector-s32-native-ref . g$6587$eZ1vL)
        (bytevector-s16-set! . g$6581$eZ1vL)
        (bytevector-s16-ref . g$6577$eZ1vL)
        (bytevector-s16-native-set! . g$6583$eZ1vL)
        (bytevector-s16-native-ref . g$6579$eZ1vL)
        (bytevector-length . g$12538$eZ1vL)
        (bytevector-ieee-single-set! . g$12537$eZ1vL)
        (bytevector-ieee-single-ref . g$12536$eZ1vL)
        (bytevector-ieee-single-native-set! . g$6602$eZ1vL)
        (bytevector-ieee-single-native-ref . g$6600$eZ1vL)
        (bytevector-ieee-double-set! . g$12535$eZ1vL)
        (bytevector-ieee-double-ref . g$12534$eZ1vL)
        (bytevector-ieee-double-native-set! . g$6603$eZ1vL)
        (bytevector-ieee-double-native-ref . g$6601$eZ1vL)
        (bytevector-fill! . g$12533$eZ1vL)
        (bytevector-copy! . g$12532$eZ1vL)
        (bytevector-copy . g$12531$eZ1vL)
        (bytevector->uint-list . g$12530$eZ1vL)
        (bytevector->u8-list . g$12529$eZ1vL)
        (bytevector->sint-list . g$12528$eZ1vL)
        (no-nans-violation? . g$7199$eZ1vL)
        (no-infinities-violation? . g$7185$eZ1vL)
        (make-no-nans-violation . g$7198$eZ1vL)
        (make-no-infinities-violation . g$7184$eZ1vL)
        (real->flonum . g$12527$eZ1vL)
        (flzero? . g$12526$eZ1vL)
        (fltruncate . g$12525$eZ1vL)
        (fltan . g$12524$eZ1vL)
        (flsqrt . g$12523$eZ1vL)
        (flsin . g$12522$eZ1vL)
        (flround . g$12521$eZ1vL)
        (flpositive? . g$12520$eZ1vL)
        (flonum? . g$12519$eZ1vL)
        (flodd? . g$12518$eZ1vL)
        (flnumerator . g$12517$eZ1vL)
        (flnegative? . g$12516$eZ1vL)
        (flnan? . g$12515$eZ1vL)
        (flmod0 . g$12514$eZ1vL)
        (flmod . g$12513$eZ1vL)
        (flmin . g$12512$eZ1vL)
        (flmax . g$12511$eZ1vL)
        (fllog . g$12510$eZ1vL)
        (flinteger? . g$12509$eZ1vL)
        (flinfinite? . g$12508$eZ1vL)
        (flfloor . g$12507$eZ1vL)
        (flfinite? . g$12506$eZ1vL)
        (flexpt . g$12505$eZ1vL)
        (flexp . g$12504$eZ1vL)
        (fleven? . g$12503$eZ1vL)
        (fldiv0-and-mod0 . g$12502$eZ1vL)
        (fldiv0 . g$12501$eZ1vL)
        (fldiv-and-mod . g$12500$eZ1vL)
        (fldiv . g$12499$eZ1vL)
        (fldenominator . g$12498$eZ1vL)
        (flcos . g$12497$eZ1vL)
        (flceiling . g$12496$eZ1vL)
        (flatan . g$12495$eZ1vL)
        (flasin . g$12494$eZ1vL)
        (flacos . g$12493$eZ1vL)
        (flabs . g$12492$eZ1vL)
        (fl>? . g$12491$eZ1vL)
        (fl>=? . g$12490$eZ1vL)
        (fl=? . g$12489$eZ1vL)
        (fl<? . g$12488$eZ1vL)
        (fl<=? . g$12487$eZ1vL)
        (fl/ . g$12486$eZ1vL)
        (fl- . g$12485$eZ1vL)
        (fl+ . g$12484$eZ1vL)
        (fl* . g$12483$eZ1vL)
        (fixnum->flonum . g$12482$eZ1vL)
        (fxzero? . g$12481$eZ1vL)
        (fxxor . g$12480$eZ1vL)
        (fxrotate-bit-field . g$7131$eZ1vL)
        (fxreverse-bit-field . g$12479$eZ1vL)
        (fxpositive? . g$12478$eZ1vL)
        (fxodd? . g$12477$eZ1vL)
        (fxnot . g$12476$eZ1vL)
        (fxnegative? . g$12475$eZ1vL)
        (fxmod0 . g$12474$eZ1vL)
        (fxmod . g$12473$eZ1vL)
        (fxmin . g$12472$eZ1vL)
        (fxmax . g$12471$eZ1vL)
        (fxlength . g$12470$eZ1vL)
        (fxior . g$12469$eZ1vL)
        (fxif . g$7125$eZ1vL)
        (fxfirst-bit-set . g$12468$eZ1vL)
        (fxeven? . g$12467$eZ1vL)
        (fxdiv0-and-mod0 . g$12466$eZ1vL)
        (fxdiv0 . g$12465$eZ1vL)
        (fxdiv-and-mod . g$12464$eZ1vL)
        (fxdiv . g$12463$eZ1vL)
        (fxcopy-bit-field . g$7128$eZ1vL)
        (fxcopy-bit . g$7126$eZ1vL)
        (fxbit-set? . g$12462$eZ1vL)
        (fxbit-field . g$7127$eZ1vL)
        (fxbit-count . g$12461$eZ1vL)
        (fxarithmetic-shift-right . g$7130$eZ1vL)
        (fxarithmetic-shift-left . g$7129$eZ1vL)
        (fxarithmetic-shift . g$12460$eZ1vL)
        (fxand . g$12459$eZ1vL)
        (fx>? . g$12458$eZ1vL)
        (fx>=? . g$12457$eZ1vL)
        (fx=? . g$12456$eZ1vL)
        (fx<? . g$12455$eZ1vL)
        (fx<=? . g$12454$eZ1vL)
        (fx-/carry . g$7123$eZ1vL)
        (fx- . g$12453$eZ1vL)
        (fx+/carry . g$7124$eZ1vL)
        (fx+ . g$12452$eZ1vL)
        (fx*/carry . g$7122$eZ1vL)
        (fx* . g$12451$eZ1vL)
        (greatest-fixnum . g$12450$eZ1vL)
        (least-fixnum . g$12449$eZ1vL)
        (fixnum-width . g$12448$eZ1vL)
        (fixnum? . g$12447$eZ1vL)
        (bitwise-rotate-bit-field . g$7096$eZ1vL)
        (bitwise-reverse-bit-field . g$12446$eZ1vL)
        (bitwise-length . g$12445$eZ1vL)
        (bitwise-if . g$7090$eZ1vL)
        (bitwise-first-bit-set . g$12444$eZ1vL)
        (bitwise-copy-bit-field . g$7093$eZ1vL)
        (bitwise-copy-bit . g$7091$eZ1vL)
        (bitwise-bit-set? . g$12443$eZ1vL)
        (bitwise-bit-field . g$7092$eZ1vL)
        (bitwise-bit-count . g$12442$eZ1vL)
        (bitwise-xor . g$12441$eZ1vL)
        (bitwise-ior . g$12440$eZ1vL)
        (bitwise-and . g$12439$eZ1vL)
        (bitwise-not . g$12438$eZ1vL)
        (bitwise-arithmetic-shift-right . g$7095$eZ1vL)
        (bitwise-arithmetic-shift-left . g$7094$eZ1vL)
        (bitwise-arithmetic-shift . g$12437$eZ1vL)
        (zero? . g$6021$eZ1vL)
        (vector? . g$12436$eZ1vL)
        (vector-set! . g$12435$eZ1vL)
        (vector-ref . g$12434$eZ1vL)
        (vector-map . g$12433$eZ1vL)
        (vector-length . g$12432$eZ1vL)
        (vector-for-each . g$12431$eZ1vL)
        (vector-fill! . g$12430$eZ1vL)
        (vector->list . g$12429$eZ1vL)
        (vector . g$12428$eZ1vL)
        (values . g$12427$eZ1vL)
        (truncate . g$12426$eZ1vL)
        (tan . g$12425$eZ1vL)
        (symbol? . g$12424$eZ1vL)
        (symbol=? . g$6067$eZ1vL)
        (symbol->string . g$12423$eZ1vL)
        (substring . g$12422$eZ1vL)
        (string? . g$12421$eZ1vL)
        (string>? . g$6064$eZ1vL)
        (string>=? . g$6066$eZ1vL)
        (string=? . g$6062$eZ1vL)
        (string<? . g$6063$eZ1vL)
        (string<=? . g$6065$eZ1vL)
        (string-ref . g$12420$eZ1vL)
        (string-length . g$12419$eZ1vL)
        (string-for-each . g$12418$eZ1vL)
        (string-copy . g$12417$eZ1vL)
        (string-append . g$12416$eZ1vL)
        (string->symbol . g$12415$eZ1vL)
        (string->number . g$12414$eZ1vL)
        (string->list . g$12413$eZ1vL)
        (string . g$12412$eZ1vL)
        (sqrt . g$12411$eZ1vL)
        (sin . g$12410$eZ1vL)
        (round . g$12409$eZ1vL)
        (reverse . g$12408$eZ1vL)
        (real? . g$12407$eZ1vL)
        (real-valued? . g$12406$eZ1vL)
        (real-part . g$12405$eZ1vL)
        (rationalize . g$6108$eZ1vL)
        (rational? . g$12404$eZ1vL)
        (rational-valued? . g$12403$eZ1vL)
        (procedure? . g$12402$eZ1vL)
        (positive? . g$6019$eZ1vL)
        (pair? . g$12401$eZ1vL)
        (odd? . g$6023$eZ1vL)
        (numerator . g$12400$eZ1vL)
        (number? . g$12399$eZ1vL)
        (number->string . g$12398$eZ1vL)
        (null? . g$12397$eZ1vL)
        (not . g$12396$eZ1vL)
        (negative? . g$6020$eZ1vL)
        (nan? . g$12395$eZ1vL)
        (min . g$6025$eZ1vL)
        (max . g$6024$eZ1vL)
        (map . g$5873$eZ1vL)
        (make-vector . g$12394$eZ1vL)
        (make-string . g$12393$eZ1vL)
        (make-rectangular . g$12392$eZ1vL)
        (make-polar . g$12391$eZ1vL)
        (magnitude . g$12390$eZ1vL)
        (log . g$12389$eZ1vL)
        (list? . g$12388$eZ1vL)
        (list-tail . g$5853$eZ1vL)
        (list-ref . g$5854$eZ1vL)
        (list->vector . g$12387$eZ1vL)
        (list->string . g$12386$eZ1vL)
        (list . g$12385$eZ1vL)
        (length . g$12384$eZ1vL)
        (lcm . g$6027$eZ1vL)
        (integer? . g$12383$eZ1vL)
        (integer-valued? . g$12382$eZ1vL)
        (integer->char . g$12381$eZ1vL)
        (infinite? . g$12380$eZ1vL)
        (inexact? . g$12379$eZ1vL)
        (inexact . g$12378$eZ1vL)
        (imag-part . g$12377$eZ1vL)
        (gcd . g$6026$eZ1vL)
        (for-each . g$5874$eZ1vL)
        (floor . g$12376$eZ1vL)
        (finite? . g$12375$eZ1vL)
        (expt . g$12374$eZ1vL)
        (exp . g$12373$eZ1vL)
        (exact? . g$12372$eZ1vL)
        (exact-integer-sqrt . g$12371$eZ1vL)
        (exact . g$12370$eZ1vL)
        (even? . g$6022$eZ1vL)
        (error . g$12369$eZ1vL)
        (eqv? . g$12368$eZ1vL)
        (equal? . g$12367$eZ1vL)
        (eq? . g$12366$eZ1vL)
        (dynamic-wind . g$12365$eZ1vL)
        (div0-and-mod0 . g$12364$eZ1vL)
        (mod0 . g$12363$eZ1vL)
        (div0 . g$12362$eZ1vL)
        (div-and-mod . g$12361$eZ1vL)
        (mod . g$12360$eZ1vL)
        (div . g$12359$eZ1vL)
        (denominator . g$12358$eZ1vL)
        (cos . g$12357$eZ1vL)
        (cons . g$12356$eZ1vL)
        (complex? . g$12355$eZ1vL)
        (char? . g$12354$eZ1vL)
        (char>? . g$6105$eZ1vL)
        (char>=? . g$6107$eZ1vL)
        (char=? . g$6103$eZ1vL)
        (char<? . g$6104$eZ1vL)
        (char<=? . g$6106$eZ1vL)
        (char->integer . g$12353$eZ1vL)
        (ceiling . g$12352$eZ1vL)
        (call-with-values . g$12351$eZ1vL)
        (call/cc . g$12350$eZ1vL)
        (call-with-current-continuation . g$12349$eZ1vL)
        (cddddr . g$6018$eZ1vL)
        (cdddar . g$6017$eZ1vL)
        (cddadr . g$6016$eZ1vL)
        (cddaar . g$6015$eZ1vL)
        (cdaddr . g$6014$eZ1vL)
        (cdadar . g$6013$eZ1vL)
        (cdaadr . g$6012$eZ1vL)
        (cdaaar . g$6011$eZ1vL)
        (cadddr . g$6010$eZ1vL)
        (caddar . g$6009$eZ1vL)
        (cadadr . g$6008$eZ1vL)
        (cadaar . g$6007$eZ1vL)
        (caaddr . g$6006$eZ1vL)
        (caadar . g$6005$eZ1vL)
        (caaadr . g$6004$eZ1vL)
        (caaaar . g$6003$eZ1vL)
        (cdddr . g$6002$eZ1vL)
        (cddar . g$6001$eZ1vL)
        (cdadr . g$6000$eZ1vL)
        (cdaar . g$5999$eZ1vL)
        (caddr . g$5998$eZ1vL)
        (cadar . g$5997$eZ1vL)
        (caadr . g$5996$eZ1vL)
        (caaar . g$5995$eZ1vL)
        (cddr . g$5994$eZ1vL)
        (cdar . g$5993$eZ1vL)
        (cadr . g$5992$eZ1vL)
        (caar . g$5991$eZ1vL)
        (cdr . g$12348$eZ1vL)
        (car . g$12347$eZ1vL)
        (boolean? . g$12346$eZ1vL)
        (boolean=? . g$6068$eZ1vL)
        (atan . g$12345$eZ1vL)
        (assertion-violation . g$12344$eZ1vL)
        (asin . g$12343$eZ1vL)
        (apply . g$12342$eZ1vL)
        (append . g$12341$eZ1vL)
        (angle . g$12340$eZ1vL)
        (acos . g$12339$eZ1vL)
        (abs . g$12338$eZ1vL)
        (/ . g$12337$eZ1vL)
        (* . g$12336$eZ1vL)
        (- . g$12335$eZ1vL)
        (+ . g$12334$eZ1vL)
        (>= . g$12333$eZ1vL)
        (> . g$12332$eZ1vL)
        (= . g$12331$eZ1vL)
        (<= . g$12330$eZ1vL)
        (< . g$12329$eZ1vL)
        (make-record-printer . g$12328$eZ1vL)
        (eqv-hash . g$12327$eZ1vL)
        (reverse! . g$12326$eZ1vL)
        (deserialize-port . g$12325$eZ1vL)
        (serialize-port . g$12324$eZ1vL)
        (enum-set? . g$7460$eZ1vL)
        (make-promise . g$6917$eZ1vL)
        (load/args . g$12159$eZ1vL)
        (printf . g$7571$eZ1vL)
        (fprintf . g$7572$eZ1vL)
        (format . g$7573$eZ1vL)
        (procedure-form . g$12323$eZ1vL)
        (procedure-environment . g$12322$eZ1vL)
        (procedure-name . g$12321$eZ1vL)
        (procedure-arity . g$12320$eZ1vL)
        (gc-collect . g$12319$eZ1vL)
        (clr-type? . g$12318$eZ1vL)
        (get-clr-type . g$12317$eZ1vL)
        (get-command-line . g$12316$eZ1vL)
        (vector-append . g$12315$eZ1vL)
        (vector-filter . g$12314$eZ1vL)
        (vector-reverse! . g$12313$eZ1vL)
        (vector-contains? . g$12312$eZ1vL)
        (vector-index-of . g$12311$eZ1vL)
        (vector-copy . g$12310$eZ1vL)
        (vector-binary-search . g$12309$eZ1vL)
        (string-ci-compare . g$12308$eZ1vL)
        (string-compare . g$12307$eZ1vL)
        (string-format . g$12306$eZ1vL)
        (trace-printer . g$12156$eZ1vL)
        (make-traced-procedure . g$12305$eZ1vL)
        (make-traced-macro . g$7593$eZ1vL)
        (assertion-error . g$9169$eZ1vL)
        (time-it . g$12304$eZ1vL)
        (make-parameter . g$7874$eZ1vL)
        (library-locator . g$12303$eZ1vL)
        (get-library-paths . g$12302$eZ1vL)
        (open-tcp-input/output-port . g$12301$eZ1vL)
        (hashtable-for-each . g$12300$eZ1vL)
        (hashtable-map . g$12299$eZ1vL)
        (environment-bindings . g$9147$eZ1vL)
        (environment-symbols . g$9150$eZ1vL)
        (interaction-environment-symbols . g$9146$eZ1vL)
        (optimization-level . g$12298$eZ1vL)
        (library-path . g$8329$eZ1vL)
        (expand->core . g$9156$eZ1vL)
        (expand . g$9154$eZ1vL)
        (expand-boot-cps . g$7651$eZ1vL)
        (convert->cps . g$7648$eZ1vL)
        (&no-nans . g$12297$eZ1vL)
        (&no-infinities . g$12296$eZ1vL)
        (&i/o-encoding . g$12295$eZ1vL)
        (&i/o-decoding . g$12294$eZ1vL)
        (&i/o-port . g$12293$eZ1vL)
        (&i/o-file-does-not-exist . g$12292$eZ1vL)
        (&i/o-file-already-exists . g$12291$eZ1vL)
        (&i/o-file-is-read-only . g$12290$eZ1vL)
        (&i/o-file-protection . g$12289$eZ1vL)
        (&i/o-filename . g$12288$eZ1vL)
        (&i/o-invalid-position . g$12287$eZ1vL)
        (&i/o-write . g$12286$eZ1vL)
        (&i/o-read . g$12285$eZ1vL)
        (&i/o . g$12284$eZ1vL)
        (&non-continuable . g$12283$eZ1vL)
        (&undefined . g$12282$eZ1vL)
        (&syntax . g$12281$eZ1vL)
        (&lexical . g$12280$eZ1vL)
        (&implementation-restriction . g$12279$eZ1vL)
        (&who . g$12278$eZ1vL)
        (&irritants . g$12277$eZ1vL)
        (&assertion . g$12276$eZ1vL)
        (&violation . g$12275$eZ1vL)
        (&error . g$12274$eZ1vL)
        (&serious . g$12273$eZ1vL)
        (&warning . g$12272$eZ1vL)
        (&message . g$12271$eZ1vL)
        (&condition . g$12270$eZ1vL)
        (define-condition-type . g$12269$eZ1vL)
        (define-enumeration . g$12268$eZ1vL)
        (define-record-type . g$12267$eZ1vL)
        (parent-rtd . g$12266$eZ1vL)
        (nongenerative . g$12265$eZ1vL)
        (opaque . g$12264$eZ1vL)
        (sealed . g$12263$eZ1vL)
        (protocol . g$12262$eZ1vL)
        (parent . g$12261$eZ1vL)
        (immutable . g$12260$eZ1vL)
        (mutable . g$12259$eZ1vL)
        (fields . g$12258$eZ1vL)
        (error-handling-mode . g$12257$eZ1vL)
        (file-options . g$12256$eZ1vL)
        (buffer-mode . g$12255$eZ1vL)
        (eol-style . g$12254$eZ1vL)
        (guard . g$12253$eZ1vL)
        (trace-letrec-syntax . g$12252$eZ1vL)
        (trace-let-syntax . g$12251$eZ1vL)
        (trace-define-syntax . g$12250$eZ1vL)
        (trace-define . g$12249$eZ1vL)
        (trace-lambda . g$12248$eZ1vL)
        (unsyntax-splicing . g$12247$eZ1vL)
        (unsyntax . g$12246$eZ1vL)
        (unquote-splicing . g$12245$eZ1vL)
        (unquote . g$12244$eZ1vL)
        (_ . g$12243$eZ1vL)
        (else . g$12242$eZ1vL)
        (=> . g$12241$eZ1vL)
        (... . g$12240$eZ1vL)
        (assert . g$12239$eZ1vL)
        (endianness . g$12238$eZ1vL)
        (delay . g$12237$eZ1vL)
        (time . g$12236$eZ1vL)
        (or . g$12235$eZ1vL)
        (and . g$12234$eZ1vL)
        (do . g$12233$eZ1vL)
        (cond . g$12232$eZ1vL)
        (let* . g$12231$eZ1vL)
        (let . g$12230$eZ1vL)
        (identifier-syntax . g$12229$eZ1vL)
        (with-syntax . g$12228$eZ1vL)
        (quasisyntax . g$12227$eZ1vL)
        (quasiquote . g$12226$eZ1vL)
        (syntax-rules . g$12225$eZ1vL)
        (include-into . g$12224$eZ1vL)
        (include . g$12223$eZ1vL)
        (define-struct . g$12222$eZ1vL)
        (let-values . g$12221$eZ1vL)
        (let*-values . g$12220$eZ1vL)
        (record-constructor-descriptor . g$12219$eZ1vL)
        (record-type-descriptor . g$12218$eZ1vL)
        (fluid-let-syntax . g$12217$eZ1vL)
        (case . g$12216$eZ1vL)
        (parameterize . g$12215$eZ1vL)
        (unless . g$12214$eZ1vL)
        (when . g$12213$eZ1vL)
        (if . g$12212$eZ1vL)
        (letrec* . g$12211$eZ1vL)
        (letrec . g$12210$eZ1vL)
        (type-descriptor . g$12209$eZ1vL)
        (case-lambda . g$12208$eZ1vL)
        (lambda . g$12207$eZ1vL)
        (syntax . g$12206$eZ1vL)
        (syntax-case . g$12205$eZ1vL)
        (quote . g$12204$eZ1vL)
        (foreign-call . g$12203$eZ1vL)
        (letrec-syntax . g$12202$eZ1vL)
        (let-syntax . g$12201$eZ1vL)
        (set! . g$12200$eZ1vL)
        (export . g$12199$eZ1vL)
        (import . g$12198$eZ1vL)
        (library . g$12197$eZ1vL)
        (begin . g$12196$eZ1vL)
        (module . g$12195$eZ1vL)
        (define-syntax . g$12194$eZ1vL)
        (define . g$12193$eZ1vL))
      '((g$9045$eZ1vL core-prim . ellipsis-map)
        (g$12784$eZ1vL core-prim . &no-nans-rcd)
        (g$12783$eZ1vL core-prim . &no-nans-rtd)
        (g$12782$eZ1vL core-prim . &no-infinities-rcd)
        (g$12781$eZ1vL core-prim . &no-infinities-rtd)
        (g$12780$eZ1vL core-prim . &i/o-encoding-rcd)
        (g$12779$eZ1vL core-prim . &i/o-encoding-rtd)
        (g$12778$eZ1vL core-prim . &i/o-decoding-rcd)
        (g$12777$eZ1vL core-prim . &i/o-decoding-rtd)
        (g$12776$eZ1vL core-prim . &i/o-port-rcd)
        (g$12775$eZ1vL core-prim . &i/o-port-rtd)
        (g$12774$eZ1vL core-prim . &i/o-file-does-not-exist-rcd)
        (g$12773$eZ1vL core-prim . &i/o-file-does-not-exist-rtd)
        (g$12772$eZ1vL core-prim . &i/o-file-already-exists-rcd)
        (g$12771$eZ1vL core-prim . &i/o-file-already-exists-rtd)
        (g$12770$eZ1vL core-prim . &i/o-file-is-read-only-rcd)
        (g$12769$eZ1vL core-prim . &i/o-file-is-read-only-rtd)
        (g$12768$eZ1vL core-prim . &i/o-file-protection-rcd)
        (g$12767$eZ1vL core-prim . &i/o-file-protection-rtd)
        (g$12766$eZ1vL core-prim . &i/o-filename-rcd)
        (g$12765$eZ1vL core-prim . &i/o-filename-rtd)
        (g$12764$eZ1vL core-prim . &i/o-invalid-position-rcd)
        (g$12763$eZ1vL core-prim . &i/o-invalid-position-rtd)
        (g$12762$eZ1vL core-prim . &i/o-write-rcd)
        (g$12761$eZ1vL core-prim . &i/o-write-rtd)
        (g$12760$eZ1vL core-prim . &i/o-read-rcd)
        (g$12759$eZ1vL core-prim . &i/o-read-rtd)
        (g$12758$eZ1vL core-prim . &i/o-rcd)
        (g$12757$eZ1vL core-prim . &i/o-rtd)
        (g$12756$eZ1vL core-prim . &undefined-rcd)
        (g$12755$eZ1vL core-prim . &undefined-rtd)
        (g$12754$eZ1vL core-prim . &syntax-rcd)
        (g$12753$eZ1vL core-prim . &syntax-rtd)
        (g$12752$eZ1vL core-prim . &lexical-rcd)
        (g$12751$eZ1vL core-prim . &lexical-rtd)
        (g$12750$eZ1vL core-prim . &implementation-restriction-rcd)
        (g$12749$eZ1vL core-prim . &implementation-restriction-rtd)
        (g$12748$eZ1vL core-prim . &non-continuable-rcd)
        (g$12747$eZ1vL core-prim . &non-continuable-rtd)
        (g$12746$eZ1vL core-prim . &who-rcd)
        (g$12745$eZ1vL core-prim . &who-rtd)
        (g$12744$eZ1vL core-prim . &irritants-rcd)
        (g$12743$eZ1vL core-prim . &irritants-rtd)
        (g$12742$eZ1vL core-prim . &assertion-rcd)
        (g$12741$eZ1vL core-prim . &assertion-rtd)
        (g$12740$eZ1vL core-prim . &violation-rcd)
        (g$12739$eZ1vL core-prim . &violation-rtd)
        (g$12738$eZ1vL core-prim . &error-rcd)
        (g$12737$eZ1vL core-prim . &error-rtd)
        (g$12736$eZ1vL core-prim . &serious-rcd)
        (g$12735$eZ1vL core-prim . &serious-rtd)
        (g$12734$eZ1vL core-prim . &warning-rcd)
        (g$12733$eZ1vL core-prim . &warning-rtd)
        (g$12732$eZ1vL core-prim . &message-rcd)
        (g$12731$eZ1vL core-prim . &message-rtd)
        (g$12730$eZ1vL core-prim . &condition-rcd)
        (g$12729$eZ1vL core-prim . &condition-rtd)
        (g$12728$eZ1vL core-prim . library-letrec*)
        (g$12727$eZ1vL core-prim . annotation-stripped)
        (g$12726$eZ1vL core-prim . annotation-source)
        (g$12725$eZ1vL core-prim . annotation-expression)
        (g$12724$eZ1vL core-prim . annotation?)
        (g$12723$eZ1vL core-prim . read-annotated)
        (g$12722$eZ1vL core-prim . tanh)
        (g$12721$eZ1vL core-prim . cosh)
        (g$12720$eZ1vL core-prim . sinh)
        (g$12719$eZ1vL core-prim . make-guid)
        (g$12718$eZ1vL core-prim . unspecified?)
        (g$5856$eZ1vL core-prim . make-list)
        (g$5855$eZ1vL core-prim . last-pair)
        (g$12717$eZ1vL core-prim . load-r5rs)
        (g$12716$eZ1vL core-prim . license)
        (g$12715$eZ1vL core-prim . stacktrace)
        (g$12161$eZ1vL core-prim . ironscheme-build)
        (g$12714$eZ1vL core-prim . define-clr-class-internal)
        (g$12713$eZ1vL core-prim . clr-field-set!-internal)
        (g$12712$eZ1vL core-prim . clr-field-get-internal)
        (g$12711$eZ1vL core-prim . clr-cast-internal)
        (g$12710$eZ1vL core-prim . clr-call-internal)
        (g$12709$eZ1vL core-prim . clr-new-internal)
        (g$12708$eZ1vL core-prim . clr-new-array-internal)
        (g$12707$eZ1vL core-prim . clr-is-internal)
        (g$12706$eZ1vL core-prim . clr-reference-internal)
        (g$12705$eZ1vL core-prim . clr-using-internal)
        (g$9170$eZ1vL core-prim . syntax-error)
        (g$9040$eZ1vL core-prim . syntax-dispatch)
        (g$12704$eZ1vL core-prim . compile-core)
        (g$12703$eZ1vL core-prim . eval-core)
        (g$12702$eZ1vL core-prim . set-symbol-value!)
        (g$12701$eZ1vL core-prim . symbol-value)
        (g$12700$eZ1vL core-prim . symbol-value?)
        (g$12699$eZ1vL core-prim . ungensym)
        (g$12698$eZ1vL core-prim . gensym)
        (g$12697$eZ1vL core-prim . void)
        (g$12696$eZ1vL core-prim . load-serialized-library)
        (g$12695$eZ1vL core-prim . serialize-library)
        (g$12163$eZ1vL core-prim . compile-system-libraries)
        (g$12165$eZ1vL core-prim . compile->closure)
        (g$12164$eZ1vL core-prim . compile)
        (g$12160$eZ1vL core-prim . load)
        (g$9180$eZ1vL core-prim . interaction-environment)
        (g$12694$eZ1vL core-prim . char-ready?)
        (g$12693$eZ1vL core-prim . string-upcase)
        (g$12692$eZ1vL core-prim . string-titlecase)
        (g$12691$eZ1vL core-prim . string-normalize-nfkd)
        (g$12690$eZ1vL core-prim . string-normalize-nfkc)
        (g$12689$eZ1vL core-prim . string-normalize-nfd)
        (g$12688$eZ1vL core-prim . string-normalize-nfc)
        (g$12687$eZ1vL core-prim . string-foldcase)
        (g$12686$eZ1vL core-prim . string-downcase)
        (g$6995$eZ1vL core-prim . string-ci>?)
        (g$6997$eZ1vL core-prim . string-ci>=?)
        (g$6993$eZ1vL core-prim . string-ci=?)
        (g$6994$eZ1vL core-prim . string-ci<?)
        (g$6996$eZ1vL core-prim . string-ci<=?)
        (g$12685$eZ1vL core-prim . char-whitespace?)
        (g$12684$eZ1vL core-prim . char-upper-case?)
        (g$12683$eZ1vL core-prim . char-title-case?)
        (g$12682$eZ1vL core-prim . char-numeric?)
        (g$12681$eZ1vL core-prim . char-lower-case?)
        (g$12680$eZ1vL core-prim . char-general-category)
        (g$12679$eZ1vL core-prim . char-upcase)
        (g$12678$eZ1vL core-prim . char-titlecase)
        (g$12677$eZ1vL core-prim . char-foldcase)
        (g$12676$eZ1vL core-prim . char-downcase)
        (g$7034$eZ1vL core-prim . char-ci>?)
        (g$7036$eZ1vL core-prim . char-ci>=?)
        (g$7032$eZ1vL core-prim . char-ci=?)
        (g$7033$eZ1vL core-prim . char-ci<?)
        (g$7035$eZ1vL core-prim . char-ci<=?)
        (g$12675$eZ1vL core-prim . char-alphabetic?)
        (g$8777$eZ1vL core-prim . variable-transformer-procedure)
        (g$8776$eZ1vL core-prim . variable-transformer?)
        (g$8775$eZ1vL core-prim . make-variable-transformer)
        (g$9174$eZ1vL core-prim . identifier?)
        (g$9163$eZ1vL core-prim . generate-temporaries)
        (g$9164$eZ1vL core-prim . free-identifier=?)
        (g$9176$eZ1vL core-prim . syntax->datum)
        (g$9175$eZ1vL core-prim . datum->syntax)
        (g$9165$eZ1vL core-prim . bound-identifier=?)
        (g$12674$eZ1vL core-prim . record-type-descriptor?)
        (g$12673$eZ1vL core-prim . record-predicate)
        (g$12672$eZ1vL core-prim . record-mutator)
        (g$12671$eZ1vL core-prim . record-constructor)
        (g$12670$eZ1vL core-prim . record-accessor)
        (g$12669$eZ1vL core-prim . make-record-type-descriptor)
        (g$12668$eZ1vL core-prim . make-record-constructor-descriptor)
        (g$12667$eZ1vL core-prim . record?)
        (g$12666$eZ1vL core-prim . record-type-uid)
        (g$12665$eZ1vL core-prim . record-type-sealed?)
        (g$12664$eZ1vL core-prim . record-type-parent)
        (g$12663$eZ1vL core-prim . record-type-opaque?)
        (g$12662$eZ1vL core-prim . record-type-name)
        (g$12661$eZ1vL core-prim . record-type-generative?)
        (g$12660$eZ1vL core-prim . record-type-field-names)
        (g$12659$eZ1vL core-prim . record-rtd)
        (g$12658$eZ1vL core-prim . record-field-mutable?)
        (g$6569$eZ1vL core-prim . delete-file)
        (g$6568$eZ1vL core-prim . file-exists?)
        (g$12657$eZ1vL core-prim . vector-sort!)
        (g$12656$eZ1vL core-prim . vector-sort)
        (g$6935$eZ1vL core-prim . list-sort)
        (g$12655$eZ1vL core-prim . symbol-hash)
        (g$12654$eZ1vL core-prim . string-ci-hash)
        (g$12653$eZ1vL core-prim . string-hash)
        (g$12652$eZ1vL core-prim . equal-hash)
        (g$12651$eZ1vL core-prim . hashtable-equivalence-function)
        (g$12650$eZ1vL core-prim . make-hashtable)
        (g$12649$eZ1vL core-prim . hashtable-hash-function)
        (g$6537$eZ1vL core-prim . make-eqv-hashtable)
        (g$6536$eZ1vL core-prim . make-eq-hashtable)
        (g$12648$eZ1vL core-prim . hashtable?)
        (g$6543$eZ1vL core-prim . hashtable-update!)
        (g$6538$eZ1vL core-prim . hashtable-size)
        (g$6540$eZ1vL core-prim . hashtable-set!)
        (g$6539$eZ1vL core-prim . hashtable-ref)
        (g$12647$eZ1vL core-prim . hashtable-mutable?)
        (g$12646$eZ1vL core-prim . hashtable-keys)
        (g$12645$eZ1vL core-prim . hashtable-entries)
        (g$6541$eZ1vL core-prim . hashtable-delete!)
        (g$12644$eZ1vL core-prim . hashtable-copy)
        (g$6542$eZ1vL core-prim . hashtable-contains?)
        (g$6544$eZ1vL core-prim . hashtable-clear!)
        (g$7420$eZ1vL core-prim . call-with-output-file)
        (g$7419$eZ1vL core-prim . call-with-input-file)
        (g$7401$eZ1vL core-prim . write-char)
        (g$12643$eZ1vL core-prim . write)
        (g$7418$eZ1vL core-prim . with-output-to-file)
        (g$7417$eZ1vL core-prim . with-input-from-file)
        (g$7400$eZ1vL core-prim . read-char)
        (g$12642$eZ1vL core-prim . read)
        (g$7399$eZ1vL core-prim . peek-char)
        (g$12641$eZ1vL core-prim . open-output-file)
        (g$12640$eZ1vL core-prim . open-input-file)
        (g$7421$eZ1vL core-prim . newline)
        (g$12639$eZ1vL core-prim . display)
        (g$12638$eZ1vL core-prim . close-output-port)
        (g$12637$eZ1vL core-prim . close-input-port)
        (g$12636$eZ1vL core-prim . eof-object?)
        (g$12635$eZ1vL core-prim . eof-object)
        (g$12634$eZ1vL core-prim . current-error-port)
        (g$12633$eZ1vL core-prim . current-output-port)
        (g$12632$eZ1vL core-prim . current-input-port)
        (g$12631$eZ1vL core-prim . output-port?)
        (g$12630$eZ1vL core-prim . input-port?)
        (g$12629$eZ1vL core-prim . utf-8-codec)
        (g$12628$eZ1vL core-prim . utf-16-codec)
        (g$12627$eZ1vL core-prim . transcoder-error-handling-mode)
        (g$12626$eZ1vL core-prim . transcoder-eol-style)
        (g$12625$eZ1vL core-prim . transcoder-codec)
        (g$12624$eZ1vL core-prim . transcoded-port)
        (g$12623$eZ1vL core-prim . textual-port?)
        (g$12622$eZ1vL core-prim . string->bytevector)
        (g$12621$eZ1vL core-prim . standard-output-port)
        (g$12620$eZ1vL core-prim . standard-input-port)
        (g$12619$eZ1vL core-prim . standard-error-port)
        (g$12618$eZ1vL core-prim . set-port-position!)
        (g$12617$eZ1vL core-prim . put-u8)
        (g$12616$eZ1vL core-prim . put-string)
        (g$12615$eZ1vL core-prim . put-datum)
        (g$12614$eZ1vL core-prim . put-char)
        (g$12613$eZ1vL core-prim . put-bytevector)
        (g$7386$eZ1vL core-prim . port?)
        (g$12612$eZ1vL core-prim . port-transcoder)
        (g$12611$eZ1vL core-prim . port-position)
        (g$12610$eZ1vL core-prim . port-has-set-port-position!?)
        (g$12609$eZ1vL core-prim . port-has-port-position?)
        (g$12608$eZ1vL core-prim . port-eof?)
        (g$12607$eZ1vL core-prim . output-port-buffer-mode)
        (g$7385$eZ1vL core-prim . open-string-output-port)
        (g$12606$eZ1vL core-prim . open-string-input-port)
        (g$12605$eZ1vL core-prim . open-file-output-port)
        (g$12604$eZ1vL core-prim . open-file-input/output-port)
        (g$12603$eZ1vL core-prim . open-file-input-port)
        (g$12602$eZ1vL core-prim . open-bytevector-output-port)
        (g$12601$eZ1vL core-prim . open-bytevector-input-port)
        (g$12600$eZ1vL core-prim . native-transcoder)
        (g$12599$eZ1vL core-prim . native-eol-style)
        (g$12598$eZ1vL core-prim . make-transcoder)
        (g$12597$eZ1vL core-prim . latin-1-codec)
        (g$7241$eZ1vL core-prim . make-i/o-write-error)
        (g$7227$eZ1vL core-prim . make-i/o-read-error)
        (g$7346$eZ1vL core-prim . make-i/o-port-error)
        (g$7256$eZ1vL core-prim . make-i/o-invalid-position-error)
        (g$7273$eZ1vL core-prim . make-i/o-filename-error)
        (g$7289$eZ1vL core-prim . make-i/o-file-protection-error)
        (g$7303$eZ1vL core-prim . make-i/o-file-is-read-only-error)
        (g$7331$eZ1vL core-prim . make-i/o-file-does-not-exist-error)
        (g$7317$eZ1vL core-prim . make-i/o-file-already-exists-error)
        (g$7213$eZ1vL core-prim . make-i/o-error)
        (g$7377$eZ1vL core-prim . make-i/o-encoding-error)
        (g$7362$eZ1vL core-prim . make-i/o-decoding-error)
        (g$12596$eZ1vL core-prim . make-custom-textual-output-port)
        (g$12595$eZ1vL core-prim . make-custom-textual-input/output-port)
        (g$12594$eZ1vL core-prim . make-custom-textual-input-port)
        (g$12593$eZ1vL core-prim . make-custom-binary-output-port)
        (g$12592$eZ1vL core-prim . make-custom-binary-input/output-port)
        (g$12591$eZ1vL core-prim . make-custom-binary-input-port)
        (g$12590$eZ1vL core-prim . make-bytevector)
        (g$12589$eZ1vL core-prim . lookahead-u8)
        (g$12588$eZ1vL core-prim . lookahead-char)
        (g$7242$eZ1vL core-prim . i/o-write-error?)
        (g$7228$eZ1vL core-prim . i/o-read-error?)
        (g$7348$eZ1vL core-prim . i/o-port-error?)
        (g$7258$eZ1vL core-prim . i/o-invalid-position-error?)
        (g$7259$eZ1vL core-prim . i/o-error-position)
        (g$7275$eZ1vL core-prim . i/o-filename-error?)
        (g$7290$eZ1vL core-prim . i/o-file-protection-error?)
        (g$7304$eZ1vL core-prim . i/o-file-is-read-only-error?)
        (g$7332$eZ1vL core-prim . i/o-file-does-not-exist-error?)
        (g$7318$eZ1vL core-prim . i/o-file-already-exists-error?)
        (g$7214$eZ1vL core-prim . i/o-error?)
        (g$7349$eZ1vL core-prim . i/o-error-port)
        (g$7276$eZ1vL core-prim . i/o-error-filename)
        (g$7379$eZ1vL core-prim . i/o-encoding-error?)
        (g$7380$eZ1vL core-prim . i/o-encoding-error-char)
        (g$7363$eZ1vL core-prim . i/o-decoding-error?)
        (g$12587$eZ1vL core-prim . get-u8)
        (g$12586$eZ1vL core-prim . get-string-n!)
        (g$12585$eZ1vL core-prim . get-string-n)
        (g$12584$eZ1vL core-prim . get-string-all)
        (g$12583$eZ1vL core-prim . get-line)
        (g$12582$eZ1vL core-prim . get-datum)
        (g$12581$eZ1vL core-prim . get-char)
        (g$12580$eZ1vL core-prim . get-bytevector-some)
        (g$12579$eZ1vL core-prim . get-bytevector-n!)
        (g$12578$eZ1vL core-prim . get-bytevector-n)
        (g$12577$eZ1vL core-prim . get-bytevector-all)
        (g$12576$eZ1vL core-prim . flush-output-port)
        (g$12575$eZ1vL core-prim . close-port)
        (g$7387$eZ1vL core-prim . call-with-string-output-port)
        (g$7388$eZ1vL core-prim . call-with-port)
        (g$12574$eZ1vL core-prim . call-with-bytevector-output-port)
        (g$12573$eZ1vL core-prim . bytevector->string)
        (g$12572$eZ1vL core-prim . buffer-mode?)
        (g$12571$eZ1vL core-prim . binary-port?)
        (g$9153$eZ1vL core-prim . scheme-report-environment)
        (g$6914$eZ1vL core-prim . quotient)
        (g$9152$eZ1vL core-prim . null-environment)
        (g$6915$eZ1vL core-prim . remainder)
        (g$6916$eZ1vL core-prim . modulo)
        (g$6911$eZ1vL core-prim . inexact->exact)
        (g$6918$eZ1vL core-prim . force)
        (g$6912$eZ1vL core-prim . exact->inexact)
        (g$12570$eZ1vL core-prim . exit)
        (g$12157$eZ1vL core-prim . command-line)
        (g$12569$eZ1vL core-prim . string-fill!)
        (g$12568$eZ1vL core-prim . string-set!)
        (g$12567$eZ1vL core-prim . set-cdr!)
        (g$12566$eZ1vL core-prim . set-car!)
        (g$5878$eZ1vL core-prim . remove)
        (g$5879$eZ1vL core-prim . remv)
        (g$5859$eZ1vL core-prim . remp)
        (g$5880$eZ1vL core-prim . remq)
        (g$5858$eZ1vL core-prim . partition)
        (g$5866$eZ1vL core-prim . memv)
        (g$5865$eZ1vL core-prim . memq)
        (g$5868$eZ1vL core-prim . memp)
        (g$5867$eZ1vL core-prim . member)
        (g$5872$eZ1vL core-prim . exists)
        (g$5871$eZ1vL core-prim . for-all)
        (g$5877$eZ1vL core-prim . fold-right)
        (g$5876$eZ1vL core-prim . fold-left)
        (g$5857$eZ1vL core-prim . find)
        (g$5860$eZ1vL core-prim . filter)
        (g$5875$eZ1vL core-prim . cons*)
        (g$5862$eZ1vL core-prim . assv)
        (g$5861$eZ1vL core-prim . assq)
        (g$5864$eZ1vL core-prim . assp)
        (g$5863$eZ1vL core-prim . assoc)
        (g$12565$eZ1vL core-prim . with-exception-handler)
        (g$12564$eZ1vL core-prim . raise-continuable)
        (g$12563$eZ1vL core-prim . raise)
        (g$9155$eZ1vL core-prim . eval)
        (g$9151$eZ1vL core-prim . environment)
        (g$7485$eZ1vL core-prim . make-enumeration)
        (g$7492$eZ1vL core-prim . enum-set=?)
        (g$7486$eZ1vL core-prim . enum-set-universe)
        (g$7493$eZ1vL core-prim . enum-set-union)
        (g$7491$eZ1vL core-prim . enum-set-subset?)
        (g$7497$eZ1vL core-prim . enum-set-projection)
        (g$7490$eZ1vL core-prim . enum-set-member?)
        (g$7494$eZ1vL core-prim . enum-set-intersection)
        (g$7487$eZ1vL core-prim . enum-set-indexer)
        (g$7495$eZ1vL core-prim . enum-set-difference)
        (g$7488$eZ1vL core-prim . enum-set-constructor)
        (g$7496$eZ1vL core-prim . enum-set-complement)
        (g$7489$eZ1vL core-prim . enum-set->list)
        (g$6823$eZ1vL core-prim . who-condition?)
        (g$6734$eZ1vL core-prim . warning?)
        (g$6776$eZ1vL core-prim . violation?)
        (g$6900$eZ1vL core-prim . undefined-violation?)
        (g$6884$eZ1vL core-prim . syntax-violation?)
        (g$6886$eZ1vL core-prim . syntax-violation-subform)
        (g$6885$eZ1vL core-prim . syntax-violation-form)
        (g$9173$eZ1vL core-prim . syntax-violation)
        (g$12562$eZ1vL core-prim . simple-conditions)
        (g$6748$eZ1vL core-prim . serious-condition?)
        (g$6838$eZ1vL core-prim . non-continuable-violation?)
        (g$6719$eZ1vL core-prim . message-condition?)
        (g$6821$eZ1vL core-prim . make-who-condition)
        (g$6733$eZ1vL core-prim . make-warning)
        (g$6775$eZ1vL core-prim . make-violation)
        (g$6899$eZ1vL core-prim . make-undefined-violation)
        (g$6881$eZ1vL core-prim . make-syntax-violation)
        (g$6747$eZ1vL core-prim . make-serious-condition)
        (g$6837$eZ1vL core-prim . make-non-continuable-violation)
        (g$6717$eZ1vL core-prim . make-message-condition)
        (g$6865$eZ1vL core-prim . make-lexical-violation)
        (g$6804$eZ1vL core-prim . make-irritants-condition)
        (g$6851$eZ1vL core-prim . make-implementation-restriction-violation)
        (g$6761$eZ1vL core-prim . make-error)
        (g$6789$eZ1vL core-prim . make-assertion-violation)
        (g$6866$eZ1vL core-prim . lexical-violation?)
        (g$6806$eZ1vL core-prim . irritants-condition?)
        (g$6852$eZ1vL core-prim . implementation-restriction-violation?)
        (g$6762$eZ1vL core-prim . error?)
        (g$6824$eZ1vL core-prim . condition-who)
        (g$12561$eZ1vL core-prim . condition-predicate)
        (g$6720$eZ1vL core-prim . condition-message)
        (g$6807$eZ1vL core-prim . condition-irritants)
        (g$12560$eZ1vL core-prim . condition-accessor)
        (g$12559$eZ1vL core-prim . condition)
        (g$6790$eZ1vL core-prim . assertion-violation?)
        (g$12558$eZ1vL core-prim . condition?)
        (g$12557$eZ1vL core-prim . utf32->string)
        (g$12556$eZ1vL core-prim . utf16->string)
        (g$12555$eZ1vL core-prim . utf8->string)
        (g$12554$eZ1vL core-prim . uint-list->bytevector)
        (g$12553$eZ1vL core-prim . u8-list->bytevector)
        (g$12552$eZ1vL core-prim . string->utf8)
        (g$12551$eZ1vL core-prim . string->utf32)
        (g$12550$eZ1vL core-prim . string->utf16)
        (g$12549$eZ1vL core-prim . sint-list->bytevector)
        (g$6575$eZ1vL core-prim . native-endianness)
        (g$12548$eZ1vL core-prim . bytevector?)
        (g$12547$eZ1vL core-prim . bytevector=?)
        (g$12546$eZ1vL core-prim . bytevector-uint-set!)
        (g$12545$eZ1vL core-prim . bytevector-uint-ref)
        (g$12544$eZ1vL core-prim . bytevector-u8-set!)
        (g$12543$eZ1vL core-prim . bytevector-u8-ref)
        (g$6596$eZ1vL core-prim . bytevector-u64-set!)
        (g$6592$eZ1vL core-prim . bytevector-u64-ref)
        (g$6598$eZ1vL core-prim . bytevector-u64-native-set!)
        (g$6594$eZ1vL core-prim . bytevector-u64-native-ref)
        (g$6588$eZ1vL core-prim . bytevector-u32-set!)
        (g$6584$eZ1vL core-prim . bytevector-u32-ref)
        (g$6590$eZ1vL core-prim . bytevector-u32-native-set!)
        (g$6586$eZ1vL core-prim . bytevector-u32-native-ref)
        (g$6580$eZ1vL core-prim . bytevector-u16-set!)
        (g$6576$eZ1vL core-prim . bytevector-u16-ref)
        (g$6582$eZ1vL core-prim . bytevector-u16-native-set!)
        (g$6578$eZ1vL core-prim . bytevector-u16-native-ref)
        (g$12542$eZ1vL core-prim . bytevector-sint-set!)
        (g$12541$eZ1vL core-prim . bytevector-sint-ref)
        (g$12540$eZ1vL core-prim . bytevector-s8-set!)
        (g$12539$eZ1vL core-prim . bytevector-s8-ref)
        (g$6597$eZ1vL core-prim . bytevector-s64-set!)
        (g$6593$eZ1vL core-prim . bytevector-s64-ref)
        (g$6599$eZ1vL core-prim . bytevector-s64-native-set!)
        (g$6595$eZ1vL core-prim . bytevector-s64-native-ref)
        (g$6589$eZ1vL core-prim . bytevector-s32-set!)
        (g$6585$eZ1vL core-prim . bytevector-s32-ref)
        (g$6591$eZ1vL core-prim . bytevector-s32-native-set!)
        (g$6587$eZ1vL core-prim . bytevector-s32-native-ref)
        (g$6581$eZ1vL core-prim . bytevector-s16-set!)
        (g$6577$eZ1vL core-prim . bytevector-s16-ref)
        (g$6583$eZ1vL core-prim . bytevector-s16-native-set!)
        (g$6579$eZ1vL core-prim . bytevector-s16-native-ref)
        (g$12538$eZ1vL core-prim . bytevector-length)
        (g$12537$eZ1vL core-prim . bytevector-ieee-single-set!)
        (g$12536$eZ1vL core-prim . bytevector-ieee-single-ref)
        (g$6602$eZ1vL core-prim . bytevector-ieee-single-native-set!)
        (g$6600$eZ1vL core-prim . bytevector-ieee-single-native-ref)
        (g$12535$eZ1vL core-prim . bytevector-ieee-double-set!)
        (g$12534$eZ1vL core-prim . bytevector-ieee-double-ref)
        (g$6603$eZ1vL core-prim . bytevector-ieee-double-native-set!)
        (g$6601$eZ1vL core-prim . bytevector-ieee-double-native-ref)
        (g$12533$eZ1vL core-prim . bytevector-fill!)
        (g$12532$eZ1vL core-prim . bytevector-copy!)
        (g$12531$eZ1vL core-prim . bytevector-copy)
        (g$12530$eZ1vL core-prim . bytevector->uint-list)
        (g$12529$eZ1vL core-prim . bytevector->u8-list)
        (g$12528$eZ1vL core-prim . bytevector->sint-list)
        (g$7199$eZ1vL core-prim . no-nans-violation?)
        (g$7185$eZ1vL core-prim . no-infinities-violation?)
        (g$7198$eZ1vL core-prim . make-no-nans-violation)
        (g$7184$eZ1vL core-prim . make-no-infinities-violation)
        (g$12527$eZ1vL core-prim . real->flonum)
        (g$12526$eZ1vL core-prim . flzero?)
        (g$12525$eZ1vL core-prim . fltruncate)
        (g$12524$eZ1vL core-prim . fltan)
        (g$12523$eZ1vL core-prim . flsqrt)
        (g$12522$eZ1vL core-prim . flsin)
        (g$12521$eZ1vL core-prim . flround)
        (g$12520$eZ1vL core-prim . flpositive?)
        (g$12519$eZ1vL core-prim . flonum?)
        (g$12518$eZ1vL core-prim . flodd?)
        (g$12517$eZ1vL core-prim . flnumerator)
        (g$12516$eZ1vL core-prim . flnegative?)
        (g$12515$eZ1vL core-prim . flnan?)
        (g$12514$eZ1vL core-prim . flmod0)
        (g$12513$eZ1vL core-prim . flmod)
        (g$12512$eZ1vL core-prim . flmin)
        (g$12511$eZ1vL core-prim . flmax)
        (g$12510$eZ1vL core-prim . fllog)
        (g$12509$eZ1vL core-prim . flinteger?)
        (g$12508$eZ1vL core-prim . flinfinite?)
        (g$12507$eZ1vL core-prim . flfloor)
        (g$12506$eZ1vL core-prim . flfinite?)
        (g$12505$eZ1vL core-prim . flexpt)
        (g$12504$eZ1vL core-prim . flexp)
        (g$12503$eZ1vL core-prim . fleven?)
        (g$12502$eZ1vL core-prim . fldiv0-and-mod0)
        (g$12501$eZ1vL core-prim . fldiv0)
        (g$12500$eZ1vL core-prim . fldiv-and-mod)
        (g$12499$eZ1vL core-prim . fldiv)
        (g$12498$eZ1vL core-prim . fldenominator)
        (g$12497$eZ1vL core-prim . flcos)
        (g$12496$eZ1vL core-prim . flceiling)
        (g$12495$eZ1vL core-prim . flatan)
        (g$12494$eZ1vL core-prim . flasin)
        (g$12493$eZ1vL core-prim . flacos)
        (g$12492$eZ1vL core-prim . flabs)
        (g$12491$eZ1vL core-prim . fl>?)
        (g$12490$eZ1vL core-prim . fl>=?)
        (g$12489$eZ1vL core-prim . fl=?)
        (g$12488$eZ1vL core-prim . fl<?)
        (g$12487$eZ1vL core-prim . fl<=?)
        (g$12486$eZ1vL core-prim . fl/)
        (g$12485$eZ1vL core-prim . fl-)
        (g$12484$eZ1vL core-prim . fl+)
        (g$12483$eZ1vL core-prim . fl*)
        (g$12482$eZ1vL core-prim . fixnum->flonum)
        (g$12481$eZ1vL core-prim . fxzero?)
        (g$12480$eZ1vL core-prim . fxxor)
        (g$7131$eZ1vL core-prim . fxrotate-bit-field)
        (g$12479$eZ1vL core-prim . fxreverse-bit-field)
        (g$12478$eZ1vL core-prim . fxpositive?)
        (g$12477$eZ1vL core-prim . fxodd?)
        (g$12476$eZ1vL core-prim . fxnot)
        (g$12475$eZ1vL core-prim . fxnegative?)
        (g$12474$eZ1vL core-prim . fxmod0)
        (g$12473$eZ1vL core-prim . fxmod)
        (g$12472$eZ1vL core-prim . fxmin)
        (g$12471$eZ1vL core-prim . fxmax)
        (g$12470$eZ1vL core-prim . fxlength)
        (g$12469$eZ1vL core-prim . fxior)
        (g$7125$eZ1vL core-prim . fxif)
        (g$12468$eZ1vL core-prim . fxfirst-bit-set)
        (g$12467$eZ1vL core-prim . fxeven?)
        (g$12466$eZ1vL core-prim . fxdiv0-and-mod0)
        (g$12465$eZ1vL core-prim . fxdiv0)
        (g$12464$eZ1vL core-prim . fxdiv-and-mod)
        (g$12463$eZ1vL core-prim . fxdiv)
        (g$7128$eZ1vL core-prim . fxcopy-bit-field)
        (g$7126$eZ1vL core-prim . fxcopy-bit)
        (g$12462$eZ1vL core-prim . fxbit-set?)
        (g$7127$eZ1vL core-prim . fxbit-field)
        (g$12461$eZ1vL core-prim . fxbit-count)
        (g$7130$eZ1vL core-prim . fxarithmetic-shift-right)
        (g$7129$eZ1vL core-prim . fxarithmetic-shift-left)
        (g$12460$eZ1vL core-prim . fxarithmetic-shift)
        (g$12459$eZ1vL core-prim . fxand)
        (g$12458$eZ1vL core-prim . fx>?)
        (g$12457$eZ1vL core-prim . fx>=?)
        (g$12456$eZ1vL core-prim . fx=?)
        (g$12455$eZ1vL core-prim . fx<?)
        (g$12454$eZ1vL core-prim . fx<=?)
        (g$7123$eZ1vL core-prim . fx-/carry)
        (g$12453$eZ1vL core-prim . fx-)
        (g$7124$eZ1vL core-prim . fx+/carry)
        (g$12452$eZ1vL core-prim . fx+)
        (g$7122$eZ1vL core-prim . fx*/carry)
        (g$12451$eZ1vL core-prim . fx*)
        (g$12450$eZ1vL core-prim . greatest-fixnum)
        (g$12449$eZ1vL core-prim . least-fixnum)
        (g$12448$eZ1vL core-prim . fixnum-width)
        (g$12447$eZ1vL core-prim . fixnum?)
        (g$7096$eZ1vL core-prim . bitwise-rotate-bit-field)
        (g$12446$eZ1vL core-prim . bitwise-reverse-bit-field)
        (g$12445$eZ1vL core-prim . bitwise-length)
        (g$7090$eZ1vL core-prim . bitwise-if)
        (g$12444$eZ1vL core-prim . bitwise-first-bit-set)
        (g$7093$eZ1vL core-prim . bitwise-copy-bit-field)
        (g$7091$eZ1vL core-prim . bitwise-copy-bit)
        (g$12443$eZ1vL core-prim . bitwise-bit-set?)
        (g$7092$eZ1vL core-prim . bitwise-bit-field)
        (g$12442$eZ1vL core-prim . bitwise-bit-count)
        (g$12441$eZ1vL core-prim . bitwise-xor)
        (g$12440$eZ1vL core-prim . bitwise-ior)
        (g$12439$eZ1vL core-prim . bitwise-and)
        (g$12438$eZ1vL core-prim . bitwise-not)
        (g$7095$eZ1vL core-prim . bitwise-arithmetic-shift-right)
        (g$7094$eZ1vL core-prim . bitwise-arithmetic-shift-left)
        (g$12437$eZ1vL core-prim . bitwise-arithmetic-shift)
        (g$6021$eZ1vL core-prim . zero?)
        (g$12436$eZ1vL core-prim . vector?)
        (g$12435$eZ1vL core-prim . vector-set!)
        (g$12434$eZ1vL core-prim . vector-ref)
        (g$12433$eZ1vL core-prim . vector-map)
        (g$12432$eZ1vL core-prim . vector-length)
        (g$12431$eZ1vL core-prim . vector-for-each)
        (g$12430$eZ1vL core-prim . vector-fill!)
        (g$12429$eZ1vL core-prim . vector->list)
        (g$12428$eZ1vL core-prim . vector)
        (g$12427$eZ1vL core-prim . values)
        (g$12426$eZ1vL core-prim . truncate)
        (g$12425$eZ1vL core-prim . tan)
        (g$12424$eZ1vL core-prim . symbol?)
        (g$6067$eZ1vL core-prim . symbol=?)
        (g$12423$eZ1vL core-prim . symbol->string)
        (g$12422$eZ1vL core-prim . substring)
        (g$12421$eZ1vL core-prim . string?)
        (g$6064$eZ1vL core-prim . string>?)
        (g$6066$eZ1vL core-prim . string>=?)
        (g$6062$eZ1vL core-prim . string=?)
        (g$6063$eZ1vL core-prim . string<?)
        (g$6065$eZ1vL core-prim . string<=?)
        (g$12420$eZ1vL core-prim . string-ref)
        (g$12419$eZ1vL core-prim . string-length)
        (g$12418$eZ1vL core-prim . string-for-each)
        (g$12417$eZ1vL core-prim . string-copy)
        (g$12416$eZ1vL core-prim . string-append)
        (g$12415$eZ1vL core-prim . string->symbol)
        (g$12414$eZ1vL core-prim . string->number)
        (g$12413$eZ1vL core-prim . string->list)
        (g$12412$eZ1vL core-prim . string)
        (g$12411$eZ1vL core-prim . sqrt)
        (g$12410$eZ1vL core-prim . sin)
        (g$12409$eZ1vL core-prim . round)
        (g$12408$eZ1vL core-prim . reverse)
        (g$12407$eZ1vL core-prim . real?)
        (g$12406$eZ1vL core-prim . real-valued?)
        (g$12405$eZ1vL core-prim . real-part)
        (g$6108$eZ1vL core-prim . rationalize)
        (g$12404$eZ1vL core-prim . rational?)
        (g$12403$eZ1vL core-prim . rational-valued?)
        (g$12402$eZ1vL core-prim . procedure?)
        (g$6019$eZ1vL core-prim . positive?)
        (g$12401$eZ1vL core-prim . pair?)
        (g$6023$eZ1vL core-prim . odd?)
        (g$12400$eZ1vL core-prim . numerator)
        (g$12399$eZ1vL core-prim . number?)
        (g$12398$eZ1vL core-prim . number->string)
        (g$12397$eZ1vL core-prim . null?)
        (g$12396$eZ1vL core-prim . not)
        (g$6020$eZ1vL core-prim . negative?)
        (g$12395$eZ1vL core-prim . nan?)
        (g$6025$eZ1vL core-prim . min)
        (g$6024$eZ1vL core-prim . max)
        (g$5873$eZ1vL core-prim . map)
        (g$12394$eZ1vL core-prim . make-vector)
        (g$12393$eZ1vL core-prim . make-string)
        (g$12392$eZ1vL core-prim . make-rectangular)
        (g$12391$eZ1vL core-prim . make-polar)
        (g$12390$eZ1vL core-prim . magnitude)
        (g$12389$eZ1vL core-prim . log)
        (g$12388$eZ1vL core-prim . list?)
        (g$5853$eZ1vL core-prim . list-tail)
        (g$5854$eZ1vL core-prim . list-ref)
        (g$12387$eZ1vL core-prim . list->vector)
        (g$12386$eZ1vL core-prim . list->string)
        (g$12385$eZ1vL core-prim . list)
        (g$12384$eZ1vL core-prim . length)
        (g$6027$eZ1vL core-prim . lcm)
        (g$12383$eZ1vL core-prim . integer?)
        (g$12382$eZ1vL core-prim . integer-valued?)
        (g$12381$eZ1vL core-prim . integer->char)
        (g$12380$eZ1vL core-prim . infinite?)
        (g$12379$eZ1vL core-prim . inexact?)
        (g$12378$eZ1vL core-prim . inexact)
        (g$12377$eZ1vL core-prim . imag-part)
        (g$6026$eZ1vL core-prim . gcd)
        (g$5874$eZ1vL core-prim . for-each)
        (g$12376$eZ1vL core-prim . floor)
        (g$12375$eZ1vL core-prim . finite?)
        (g$12374$eZ1vL core-prim . expt)
        (g$12373$eZ1vL core-prim . exp)
        (g$12372$eZ1vL core-prim . exact?)
        (g$12371$eZ1vL core-prim . exact-integer-sqrt)
        (g$12370$eZ1vL core-prim . exact)
        (g$6022$eZ1vL core-prim . even?)
        (g$12369$eZ1vL core-prim . error)
        (g$12368$eZ1vL core-prim . eqv?)
        (g$12367$eZ1vL core-prim . equal?)
        (g$12366$eZ1vL core-prim . eq?)
        (g$12365$eZ1vL core-prim . dynamic-wind)
        (g$12364$eZ1vL core-prim . div0-and-mod0)
        (g$12363$eZ1vL core-prim . mod0)
        (g$12362$eZ1vL core-prim . div0)
        (g$12361$eZ1vL core-prim . div-and-mod)
        (g$12360$eZ1vL core-prim . mod)
        (g$12359$eZ1vL core-prim . div)
        (g$12358$eZ1vL core-prim . denominator)
        (g$12357$eZ1vL core-prim . cos)
        (g$12356$eZ1vL core-prim . cons)
        (g$12355$eZ1vL core-prim . complex?)
        (g$12354$eZ1vL core-prim . char?)
        (g$6105$eZ1vL core-prim . char>?)
        (g$6107$eZ1vL core-prim . char>=?)
        (g$6103$eZ1vL core-prim . char=?)
        (g$6104$eZ1vL core-prim . char<?)
        (g$6106$eZ1vL core-prim . char<=?)
        (g$12353$eZ1vL core-prim . char->integer)
        (g$12352$eZ1vL core-prim . ceiling)
        (g$12351$eZ1vL core-prim . call-with-values)
        (g$12350$eZ1vL core-prim . call/cc)
        (g$12349$eZ1vL core-prim . call-with-current-continuation)
        (g$6018$eZ1vL core-prim . cddddr)
        (g$6017$eZ1vL core-prim . cdddar)
        (g$6016$eZ1vL core-prim . cddadr)
        (g$6015$eZ1vL core-prim . cddaar)
        (g$6014$eZ1vL core-prim . cdaddr)
        (g$6013$eZ1vL core-prim . cdadar)
        (g$6012$eZ1vL core-prim . cdaadr)
        (g$6011$eZ1vL core-prim . cdaaar)
        (g$6010$eZ1vL core-prim . cadddr)
        (g$6009$eZ1vL core-prim . caddar)
        (g$6008$eZ1vL core-prim . cadadr)
        (g$6007$eZ1vL core-prim . cadaar)
        (g$6006$eZ1vL core-prim . caaddr)
        (g$6005$eZ1vL core-prim . caadar)
        (g$6004$eZ1vL core-prim . caaadr)
        (g$6003$eZ1vL core-prim . caaaar)
        (g$6002$eZ1vL core-prim . cdddr)
        (g$6001$eZ1vL core-prim . cddar)
        (g$6000$eZ1vL core-prim . cdadr)
        (g$5999$eZ1vL core-prim . cdaar)
        (g$5998$eZ1vL core-prim . caddr)
        (g$5997$eZ1vL core-prim . cadar)
        (g$5996$eZ1vL core-prim . caadr)
        (g$5995$eZ1vL core-prim . caaar)
        (g$5994$eZ1vL core-prim . cddr)
        (g$5993$eZ1vL core-prim . cdar)
        (g$5992$eZ1vL core-prim . cadr)
        (g$5991$eZ1vL core-prim . caar)
        (g$12348$eZ1vL core-prim . cdr)
        (g$12347$eZ1vL core-prim . car)
        (g$12346$eZ1vL core-prim . boolean?)
        (g$6068$eZ1vL core-prim . boolean=?)
        (g$12345$eZ1vL core-prim . atan)
        (g$12344$eZ1vL core-prim . assertion-violation)
        (g$12343$eZ1vL core-prim . asin)
        (g$12342$eZ1vL core-prim . apply)
        (g$12341$eZ1vL core-prim . append)
        (g$12340$eZ1vL core-prim . angle)
        (g$12339$eZ1vL core-prim . acos)
        (g$12338$eZ1vL core-prim . abs)
        (g$12337$eZ1vL core-prim . /)
        (g$12336$eZ1vL core-prim . *)
        (g$12335$eZ1vL core-prim . -)
        (g$12334$eZ1vL core-prim . +)
        (g$12333$eZ1vL core-prim . >=)
        (g$12332$eZ1vL core-prim . >)
        (g$12331$eZ1vL core-prim . =)
        (g$12330$eZ1vL core-prim . <=)
        (g$12329$eZ1vL core-prim . <)
        (g$12328$eZ1vL core-prim . make-record-printer)
        (g$12327$eZ1vL core-prim . eqv-hash)
        (g$12326$eZ1vL core-prim . reverse!)
        (g$12325$eZ1vL core-prim . deserialize-port)
        (g$12324$eZ1vL core-prim . serialize-port)
        (g$7460$eZ1vL core-prim . enum-set?)
        (g$6917$eZ1vL core-prim . make-promise)
        (g$12159$eZ1vL core-prim . load/args)
        (g$7571$eZ1vL core-prim . printf)
        (g$7572$eZ1vL core-prim . fprintf)
        (g$7573$eZ1vL core-prim . format)
        (g$12323$eZ1vL core-prim . procedure-form)
        (g$12322$eZ1vL core-prim . procedure-environment)
        (g$12321$eZ1vL core-prim . procedure-name)
        (g$12320$eZ1vL core-prim . procedure-arity)
        (g$12319$eZ1vL core-prim . gc-collect)
        (g$12318$eZ1vL core-prim . clr-type?)
        (g$12317$eZ1vL core-prim . get-clr-type)
        (g$12316$eZ1vL core-prim . get-command-line)
        (g$12315$eZ1vL core-prim . vector-append)
        (g$12314$eZ1vL core-prim . vector-filter)
        (g$12313$eZ1vL core-prim . vector-reverse!)
        (g$12312$eZ1vL core-prim . vector-contains?)
        (g$12311$eZ1vL core-prim . vector-index-of)
        (g$12310$eZ1vL core-prim . vector-copy)
        (g$12309$eZ1vL core-prim . vector-binary-search)
        (g$12308$eZ1vL core-prim . string-ci-compare)
        (g$12307$eZ1vL core-prim . string-compare)
        (g$12306$eZ1vL core-prim . string-format)
        (g$12156$eZ1vL core-prim . trace-printer)
        (g$12305$eZ1vL core-prim . make-traced-procedure)
        (g$7593$eZ1vL core-prim . make-traced-macro)
        (g$9169$eZ1vL core-prim . assertion-error)
        (g$12304$eZ1vL core-prim . time-it)
        (g$7874$eZ1vL core-prim . make-parameter)
        (g$12303$eZ1vL core-prim . library-locator)
        (g$12302$eZ1vL core-prim . get-library-paths)
        (g$12301$eZ1vL core-prim . open-tcp-input/output-port)
        (g$12300$eZ1vL core-prim . hashtable-for-each)
        (g$12299$eZ1vL core-prim . hashtable-map)
        (g$9147$eZ1vL core-prim . environment-bindings)
        (g$9150$eZ1vL core-prim . environment-symbols)
        (g$9146$eZ1vL core-prim . interaction-environment-symbols)
        (g$12298$eZ1vL core-prim . optimization-level)
        (g$8329$eZ1vL core-prim . library-path)
        (g$9156$eZ1vL core-prim . expand->core)
        (g$9154$eZ1vL core-prim . expand)
        (g$7651$eZ1vL core-prim . expand-boot-cps)
        (g$7648$eZ1vL core-prim . convert->cps)
        (g$12297$eZ1vL $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12296$eZ1vL $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12295$eZ1vL $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12294$eZ1vL $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12293$eZ1vL $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12292$eZ1vL
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12291$eZ1vL
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12290$eZ1vL
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12289$eZ1vL
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12288$eZ1vL $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12287$eZ1vL
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12286$eZ1vL $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12285$eZ1vL $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12284$eZ1vL $core-rtd &i/o-rtd &i/o-rcd)
        (g$12283$eZ1vL $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12282$eZ1vL $core-rtd &undefined-rtd &undefined-rcd)
        (g$12281$eZ1vL $core-rtd &syntax-rtd &syntax-rcd)
        (g$12280$eZ1vL $core-rtd &lexical-rtd &lexical-rcd)
        (g$12279$eZ1vL
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12278$eZ1vL $core-rtd &who-rtd &who-rcd)
        (g$12277$eZ1vL $core-rtd &irritants-rtd &irritants-rcd)
        (g$12276$eZ1vL $core-rtd &assertion-rtd &assertion-rcd)
        (g$12275$eZ1vL $core-rtd &violation-rtd &violation-rcd)
        (g$12274$eZ1vL $core-rtd &error-rtd &error-rcd)
        (g$12273$eZ1vL $core-rtd &serious-rtd &serious-rcd)
        (g$12272$eZ1vL $core-rtd &warning-rtd &warning-rcd)
        (g$12271$eZ1vL $core-rtd &message-rtd &message-rcd)
        (g$12270$eZ1vL $core-rtd &condition-rtd &condition-rcd)
        (g$12269$eZ1vL macro . define-condition-type)
        (g$12268$eZ1vL macro . define-enumeration)
        (g$12267$eZ1vL macro . define-record-type)
        (g$12266$eZ1vL macro . parent-rtd)
        (g$12265$eZ1vL macro . nongenerative)
        (g$12264$eZ1vL macro . opaque)
        (g$12263$eZ1vL macro . sealed)
        (g$12262$eZ1vL macro . protocol)
        (g$12261$eZ1vL macro . parent)
        (g$12260$eZ1vL macro . immutable)
        (g$12259$eZ1vL macro . mutable)
        (g$12258$eZ1vL macro . fields)
        (g$12257$eZ1vL macro . error-handling-mode)
        (g$12256$eZ1vL macro . file-options)
        (g$12255$eZ1vL macro . buffer-mode)
        (g$12254$eZ1vL macro . eol-style)
        (g$12253$eZ1vL macro . guard)
        (g$12252$eZ1vL macro . trace-letrec-syntax)
        (g$12251$eZ1vL macro . trace-let-syntax)
        (g$12250$eZ1vL macro . trace-define-syntax)
        (g$12249$eZ1vL macro . trace-define)
        (g$12248$eZ1vL macro . trace-lambda)
        (g$12247$eZ1vL macro . unsyntax-splicing)
        (g$12246$eZ1vL macro . unsyntax)
        (g$12245$eZ1vL macro . unquote-splicing)
        (g$12244$eZ1vL macro . unquote)
        (g$12243$eZ1vL macro . _)
        (g$12242$eZ1vL macro . else)
        (g$12241$eZ1vL macro . =>)
        (g$12240$eZ1vL macro . ...)
        (g$12239$eZ1vL macro . assert)
        (g$12238$eZ1vL macro . endianness)
        (g$12237$eZ1vL macro . delay)
        (g$12236$eZ1vL macro . time)
        (g$12235$eZ1vL macro . or)
        (g$12234$eZ1vL macro . and)
        (g$12233$eZ1vL macro . do)
        (g$12232$eZ1vL macro . cond)
        (g$12231$eZ1vL macro . let*)
        (g$12230$eZ1vL macro . let)
        (g$12229$eZ1vL macro . identifier-syntax)
        (g$12228$eZ1vL macro . with-syntax)
        (g$12227$eZ1vL macro . quasisyntax)
        (g$12226$eZ1vL macro . quasiquote)
        (g$12225$eZ1vL macro . syntax-rules)
        (g$12224$eZ1vL macro . include-into)
        (g$12223$eZ1vL macro . include)
        (g$12222$eZ1vL macro . define-struct)
        (g$12221$eZ1vL macro . let-values)
        (g$12220$eZ1vL macro . let*-values)
        (g$12219$eZ1vL core-macro . record-constructor-descriptor)
        (g$12218$eZ1vL core-macro . record-type-descriptor)
        (g$12217$eZ1vL core-macro . fluid-let-syntax)
        (g$12216$eZ1vL macro . case)
        (g$12215$eZ1vL macro . parameterize)
        (g$12214$eZ1vL macro . unless)
        (g$12213$eZ1vL macro . when)
        (g$12212$eZ1vL core-macro . if)
        (g$12211$eZ1vL core-macro . letrec*)
        (g$12210$eZ1vL core-macro . letrec)
        (g$12209$eZ1vL core-macro . type-descriptor)
        (g$12208$eZ1vL core-macro . case-lambda)
        (g$12207$eZ1vL core-macro . lambda)
        (g$12206$eZ1vL core-macro . syntax)
        (g$12205$eZ1vL core-macro . syntax-case)
        (g$12204$eZ1vL core-macro . quote)
        (g$12203$eZ1vL core-macro . foreign-call)
        (g$12202$eZ1vL letrec-syntax)
        (g$12201$eZ1vL let-syntax)
        (g$12200$eZ1vL set!)
        (g$12199$eZ1vL export)
        (g$12198$eZ1vL import)
        (g$12197$eZ1vL library)
        (g$12196$eZ1vL begin)
        (g$12195$eZ1vL module)
        (g$12194$eZ1vL define-syntax)
        (g$12193$eZ1vL define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$eZ1vL
      'g$12821$eZ1vL
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12704$eZ1vL)
        (eval-core . g$12703$eZ1vL)
        (set-symbol-value! . g$12702$eZ1vL)
        (symbol-value . g$12701$eZ1vL)
        (gensym . g$12698$eZ1vL)
        (void . g$12697$eZ1vL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11621$eZ1vL
     g$trace-printer$11661$eZ1vL
     (g$make-parameter$6991$eZ1vL write))
   (g$command-line$11622$eZ1vL
     g$command-line$11662$eZ1vL
     (g$make-parameter$6991$eZ1vL (get-command-line)))
   (g$local-library-path$11623$eZ1vL
     g$local-library-path$11663$eZ1vL
     (case-lambda
       ((g$filename$11634$eZ1vL)
        (cons
          (g$get-directory-name$5558$eZ1vL g$filename$11634$eZ1vL)
          (g$library-path$7511$eZ1vL)))))
   (g$load/args$11624$eZ1vL
     g$load/args$11664$eZ1vL
     (case-lambda
       ((g$filename$11635$eZ1vL . g$args$11636$eZ1vL)
        (begin
          (apply
            g$load-r6rs-top-level$11631$eZ1vL
            g$filename$11635$eZ1vL
            'load
            g$args$11636$eZ1vL)
          (void)))))
   (g$load$11625$eZ1vL
     g$load$11665$eZ1vL
     (case-lambda
       ((g$filename$11637$eZ1vL)
        (begin
          (apply
            g$load-r6rs-top-level$11631$eZ1vL
            g$filename$11637$eZ1vL
            'load
            (cdr (g$command-line$11622$eZ1vL)))
          (void)))))
   (g$ironscheme-build$11626$eZ1vL
     g$ironscheme-build$11666$eZ1vL
     (case-lambda (() (g$load$11625$eZ1vL '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11627$eZ1vL
     g$eval-top-level$11667$eZ1vL
     (case-lambda
       ((g$x$11638$eZ1vL)
        (g$eval$11594$eZ1vL
          g$x$11638$eZ1vL
          (g$interaction-environment$11619$eZ1vL)))))
   (g$compile-system-libraries$11628$eZ1vL
     g$compile-system-libraries$11668$eZ1vL
     (case-lambda
       (()
        (g$eval-top-level$11627$eZ1vL
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11629$eZ1vL
     g$compile$11669$eZ1vL
     (case-lambda
       ((g$filename$11639$eZ1vL)
        (g$load-r6rs-top-level$11631$eZ1vL g$filename$11639$eZ1vL 'compile))))
   (g$compile->closure$11630$eZ1vL
     g$compile->closure$11670$eZ1vL
     (case-lambda
       ((g$filename$11640$eZ1vL)
        (g$load-r6rs-top-level$11631$eZ1vL g$filename$11640$eZ1vL 'closure))))
   (g$load-r6rs-top-level$11631$eZ1vL
     g$load-r6rs-top-level$11671$eZ1vL
     (case-lambda
       ((g$filename$11641$eZ1vL g$how$11642$eZ1vL . g$args$11643$eZ1vL)
        ((case-lambda
           ((g$library-path$11646$eZ1vL g$library-path$11647$eZ1vL)
            ((case-lambda
               ((g$swap$11648$eZ1vL)
                (dynamic-wind
                  g$swap$11648$eZ1vL
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11649$eZ1vL)
                         ((case-lambda
                            ((g$t$11650$eZ1vL)
                             (if (g$memv$5056$eZ1vL g$t$11650$eZ1vL '(closure))
                               (g$pre-compile-r6rs-top-level$11617$eZ1vL
                                 g$x*$11649$eZ1vL)
                               (if (g$memv$5056$eZ1vL g$t$11650$eZ1vL '(load))
                                 ((case-lambda
                                    ((g$command-line$11653$eZ1vL
                                       g$command-line$11654$eZ1vL)
                                     ((case-lambda
                                        ((g$swap$11655$eZ1vL)
                                         (dynamic-wind
                                           g$swap$11655$eZ1vL
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11616$eZ1vL
                                                 g$x*$11649$eZ1vL))))
                                           g$swap$11655$eZ1vL)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11656$eZ1vL)
                                             (begin
                                               (g$command-line$11653$eZ1vL
                                                 g$command-line$11654$eZ1vL)
                                               (set! g$command-line$11654$eZ1vL
                                                 g$t$11656$eZ1vL))))
                                          (g$command-line$11653$eZ1vL)))))))
                                  g$command-line$11622$eZ1vL
                                  (cons
                                    g$filename$11641$eZ1vL
                                    (g$map$5063$eZ1vL
                                      (case-lambda
                                        ((g$x$11657$eZ1vL)
                                         (g$format$6559$eZ1vL
                                           '"~a"
                                           g$x$11657$eZ1vL)))
                                      g$args$11643$eZ1vL)))
                                 (if (g$memv$5056$eZ1vL
                                       g$t$11650$eZ1vL
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11616$eZ1vL
                                       g$x*$11649$eZ1vL)
                                     (g$serialize-all$7515$eZ1vL
                                       serialize-library
                                       g$compile-core-expr$7238$eZ1vL))
                                   (if '#f '#f (void)))))))
                          g$how$11642$eZ1vL)))
                      (g$with-input-from-file$6385$eZ1vL
                        g$filename$11641$eZ1vL
                        (case-lambda
                          (()
                           ((letrec ((g$f$11658$eZ1vL
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11659$eZ1vL)
                                              (if (eof-object? g$x$11659$eZ1vL)
                                                '()
                                                (cons
                                                  g$x$11659$eZ1vL
                                                  (g$f$11658$eZ1vL)))))
                                           (read-annotated))))))
                              g$f$11658$eZ1vL))))))))
                  g$swap$11648$eZ1vL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11660$eZ1vL)
                    (begin
                      (g$library-path$11646$eZ1vL g$library-path$11647$eZ1vL)
                      (set! g$library-path$11647$eZ1vL g$t$11660$eZ1vL))))
                 (g$library-path$11646$eZ1vL)))))))
         g$library-path$7511$eZ1vL
         (g$local-library-path$11623$eZ1vL g$filename$11641$eZ1vL)))))
   (g$fo$11632$eZ1vL
     g$fo$11672$eZ1vL
     (g$make-enumeration$6521$eZ1vL '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7516$eZ1vL
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11633$eZ1vL)
         (if (g$serious-condition?$5820$eZ1vL g$ex$11633$eZ1vL)
           (raise g$ex$11633$eZ1vL)
           (begin (display g$ex$11633$eZ1vL) (g$newline$6389$eZ1vL))))))
    (set-symbol-value! 'load g$load$11625$eZ1vL)
    (set-symbol-value! 'compile g$compile$11629$eZ1vL)
    (set-symbol-value! 'compile->closure g$compile->closure$11630$eZ1vL)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11627$eZ1vL)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11585$eZ1vL)
    (set-symbol-value! 'expanded2core g$expanded->core$7237$eZ1vL)
    (set-symbol-value! 'trace-printer g$trace-printer$11621$eZ1vL)
    (set-symbol-value! 'convert->cps g$convert->cps$6888$eZ1vL)
    (g$file-options-constructor$6992$eZ1vL
      (g$enum-set-constructor$6524$eZ1vL g$fo$11632$eZ1vL))
    (g$library-path$7511$eZ1vL (get-library-paths))))

