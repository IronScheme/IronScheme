;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$list-tail$4902$7lS0C
     g$list-tail$5039$7lS0C
     (case-lambda
       ((g$lst$4930$7lS0C g$index$4931$7lS0C)
        (if ((case-lambda
               ((g$t$4932$7lS0C)
                (if g$t$4932$7lS0C
                  g$t$4932$7lS0C
                  (begin '#f (negative? g$index$4931$7lS0C)))))
             (null? g$lst$4930$7lS0C))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$4930$7lS0C
            g$index$4931$7lS0C)
          (if (zero? g$index$4931$7lS0C)
            g$lst$4930$7lS0C
            (g$list-tail$4902$7lS0C
              (cdr g$lst$4930$7lS0C)
              (- g$index$4931$7lS0C '1)))))))
   (g$list-ref$4903$7lS0C
     g$list-ref$5040$7lS0C
     (case-lambda
       ((g$lst$4933$7lS0C g$index$4934$7lS0C)
        (car (g$list-tail$4902$7lS0C g$lst$4933$7lS0C g$index$4934$7lS0C)))))
   (g$last-pair$4904$7lS0C
     g$last-pair$5041$7lS0C
     (case-lambda
       ((g$lst$4935$7lS0C)
        (if (null? g$lst$4935$7lS0C)
          g$lst$4935$7lS0C
          (if (null? (cdr g$lst$4935$7lS0C))
            g$lst$4935$7lS0C
            (g$last-pair$4904$7lS0C (cdr g$lst$4935$7lS0C)))))))
   (g$make-list$4905$7lS0C
     g$make-list$5042$7lS0C
     (case-lambda
       ((g$n$4936$7lS0C) (list->vector (make-vector g$n$4936$7lS0C)))
       ((g$n$4937$7lS0C g$fill$4938$7lS0C)
        (list->vector (make-vector g$n$4937$7lS0C g$fill$4938$7lS0C)))))
   (g$find$4906$7lS0C
     g$find$5043$7lS0C
     (case-lambda
       ((g$proc$4939$7lS0C g$l$4940$7lS0C)
        (if (null? g$l$4940$7lS0C)
          '#f
          ((case-lambda
             ((g$e$4941$7lS0C g$r$4942$7lS0C g$proc$4943$7lS0C)
              (if (g$proc$4943$7lS0C g$e$4941$7lS0C)
                g$e$4941$7lS0C
                (g$find$4906$7lS0C g$proc$4943$7lS0C g$r$4942$7lS0C))))
           (car g$l$4940$7lS0C)
           (cdr g$l$4940$7lS0C)
           g$proc$4939$7lS0C)))))
   (g$partition$4907$7lS0C
     g$partition$5044$7lS0C
     (case-lambda
       ((g$proc$4944$7lS0C g$l$4945$7lS0C)
        ((letrec ((g$f$4946$7lS0C
                    (case-lambda
                      ((g$l$4947$7lS0C g$a$4948$7lS0C g$b$4949$7lS0C)
                       (if (null? g$l$4947$7lS0C)
                         (values
                           (reverse! g$a$4948$7lS0C)
                           (reverse! g$b$4949$7lS0C))
                         ((case-lambda
                            ((g$e$4950$7lS0C)
                             (if (g$proc$4944$7lS0C g$e$4950$7lS0C)
                               (g$f$4946$7lS0C
                                 (cdr g$l$4947$7lS0C)
                                 (cons g$e$4950$7lS0C g$a$4948$7lS0C)
                                 g$b$4949$7lS0C)
                               (g$f$4946$7lS0C
                                 (cdr g$l$4947$7lS0C)
                                 g$a$4948$7lS0C
                                 (cons g$e$4950$7lS0C g$b$4949$7lS0C)))))
                          (car g$l$4947$7lS0C)))))))
           g$f$4946$7lS0C)
         g$l$4945$7lS0C
         '()
         '()))))
   (g$remp$4908$7lS0C
     g$remp$5045$7lS0C
     (case-lambda
       ((g$proc$4951$7lS0C g$l$4952$7lS0C)
        ((letrec ((g$f$4953$7lS0C
                    (case-lambda
                      ((g$l$4954$7lS0C g$a$4955$7lS0C)
                       (if (null? g$l$4954$7lS0C)
                         (reverse! g$a$4955$7lS0C)
                         ((case-lambda
                            ((g$e$4956$7lS0C)
                             (if (g$proc$4951$7lS0C g$e$4956$7lS0C)
                               (g$f$4953$7lS0C
                                 (cdr g$l$4954$7lS0C)
                                 g$a$4955$7lS0C)
                               (g$f$4953$7lS0C
                                 (cdr g$l$4954$7lS0C)
                                 (cons g$e$4956$7lS0C g$a$4955$7lS0C)))))
                          (car g$l$4954$7lS0C)))))))
           g$f$4953$7lS0C)
         g$l$4952$7lS0C
         '()))))
   (g$filter$4909$7lS0C
     g$filter$5046$7lS0C
     (case-lambda
       ((g$proc$4957$7lS0C g$l$4958$7lS0C)
        ((letrec ((g$f$4959$7lS0C
                    (case-lambda
                      ((g$l$4960$7lS0C g$a$4961$7lS0C)
                       (if (null? g$l$4960$7lS0C)
                         (reverse! g$a$4961$7lS0C)
                         ((case-lambda
                            ((g$e$4962$7lS0C)
                             (if (g$proc$4957$7lS0C g$e$4962$7lS0C)
                               (g$f$4959$7lS0C
                                 (cdr g$l$4960$7lS0C)
                                 (cons g$e$4962$7lS0C g$a$4961$7lS0C))
                               (g$f$4959$7lS0C
                                 (cdr g$l$4960$7lS0C)
                                 g$a$4961$7lS0C))))
                          (car g$l$4960$7lS0C)))))))
           g$f$4959$7lS0C)
         g$l$4958$7lS0C
         '()))))
   (g$assq$4910$7lS0C
     g$assq$5047$7lS0C
     (case-lambda
       ((g$obj$4963$7lS0C g$lst$4964$7lS0C)
        (if (null? g$lst$4964$7lS0C)
          '#f
          ((case-lambda
             ((g$obj$4965$7lS0C g$t$4966$7lS0C g$r$4967$7lS0C)
              (if (eq? g$obj$4965$7lS0C (car g$t$4966$7lS0C))
                g$t$4966$7lS0C
                (g$assq$4910$7lS0C g$obj$4965$7lS0C g$r$4967$7lS0C))))
           g$obj$4963$7lS0C
           (car g$lst$4964$7lS0C)
           (cdr g$lst$4964$7lS0C))))))
   (g$assv$4911$7lS0C
     g$assv$5048$7lS0C
     (case-lambda
       ((g$obj$4968$7lS0C g$lst$4969$7lS0C)
        (if (null? g$lst$4969$7lS0C)
          '#f
          ((case-lambda
             ((g$obj$4970$7lS0C g$t$4971$7lS0C g$r$4972$7lS0C)
              (if (eqv? g$obj$4970$7lS0C (car g$t$4971$7lS0C))
                g$t$4971$7lS0C
                (g$assv$4911$7lS0C g$obj$4970$7lS0C g$r$4972$7lS0C))))
           g$obj$4968$7lS0C
           (car g$lst$4969$7lS0C)
           (cdr g$lst$4969$7lS0C))))))
   (g$assoc$4912$7lS0C
     g$assoc$5049$7lS0C
     (case-lambda
       ((g$obj$4973$7lS0C g$lst$4974$7lS0C)
        (if (null? g$lst$4974$7lS0C)
          '#f
          ((case-lambda
             ((g$obj$4975$7lS0C g$t$4976$7lS0C g$r$4977$7lS0C)
              (if (equal? g$obj$4975$7lS0C (car g$t$4976$7lS0C))
                g$t$4976$7lS0C
                (g$assoc$4912$7lS0C g$obj$4975$7lS0C g$r$4977$7lS0C))))
           g$obj$4973$7lS0C
           (car g$lst$4974$7lS0C)
           (cdr g$lst$4974$7lS0C))))))
   (g$assp$4913$7lS0C
     g$assp$5050$7lS0C
     (case-lambda
       ((g$p?$4978$7lS0C g$lst$4979$7lS0C)
        (if (null? g$lst$4979$7lS0C)
          '#f
          ((case-lambda
             ((g$p?$4980$7lS0C g$t$4981$7lS0C g$r$4982$7lS0C)
              (if (g$p?$4980$7lS0C (car g$t$4981$7lS0C))
                g$t$4981$7lS0C
                (g$assp$4913$7lS0C g$p?$4980$7lS0C g$r$4982$7lS0C))))
           g$p?$4978$7lS0C
           (car g$lst$4979$7lS0C)
           (cdr g$lst$4979$7lS0C))))))
   (g$memq$4914$7lS0C
     g$memq$5051$7lS0C
     (case-lambda
       ((g$obj$4983$7lS0C g$lst$4984$7lS0C)
        (if (null? g$lst$4984$7lS0C)
          '#f
          (if (eq? g$obj$4983$7lS0C (car g$lst$4984$7lS0C))
            g$lst$4984$7lS0C
            (g$memq$4914$7lS0C g$obj$4983$7lS0C (cdr g$lst$4984$7lS0C)))))))
   (g$memv$4915$7lS0C
     g$memv$5052$7lS0C
     (case-lambda
       ((g$obj$4985$7lS0C g$lst$4986$7lS0C)
        (if (null? g$lst$4986$7lS0C)
          '#f
          (if (eqv? g$obj$4985$7lS0C (car g$lst$4986$7lS0C))
            g$lst$4986$7lS0C
            (g$memv$4915$7lS0C g$obj$4985$7lS0C (cdr g$lst$4986$7lS0C)))))))
   (g$member$4916$7lS0C
     g$member$5053$7lS0C
     (case-lambda
       ((g$obj$4987$7lS0C g$lst$4988$7lS0C)
        (if (null? g$lst$4988$7lS0C)
          '#f
          (if (equal? g$obj$4987$7lS0C (car g$lst$4988$7lS0C))
            g$lst$4988$7lS0C
            (g$member$4916$7lS0C g$obj$4987$7lS0C (cdr g$lst$4988$7lS0C)))))))
   (g$memp$4917$7lS0C
     g$memp$5054$7lS0C
     (case-lambda
       ((g$p?$4989$7lS0C g$lst$4990$7lS0C)
        (if (null? g$lst$4990$7lS0C)
          '#f
          (if (g$p?$4989$7lS0C (car g$lst$4990$7lS0C))
            g$lst$4990$7lS0C
            (g$memp$4917$7lS0C g$p?$4989$7lS0C (cdr g$lst$4990$7lS0C)))))))
   (g$all-empty?$4918$7lS0C
     g$all-empty?$5055$7lS0C
     (case-lambda
       ((g$ls$4991$7lS0C)
        ((case-lambda
           ((g$t$4992$7lS0C)
            (if g$t$4992$7lS0C
              g$t$4992$7lS0C
              (begin
                '#f
                (if (null? (car g$ls$4991$7lS0C))
                  (begin '#f (g$all-empty?$4918$7lS0C (cdr g$ls$4991$7lS0C)))
                  '#f)))))
         (null? g$ls$4991$7lS0C)))))
   (g$split$4919$7lS0C
     g$split$5056$7lS0C
     (case-lambda
       ((g$ls$4993$7lS0C)
        (if (null? g$ls$4993$7lS0C)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4919$7lS0C (cdr g$ls$4993$7lS0C))))
            (case-lambda
              ((g$cars$4994$7lS0C g$cdrs$4995$7lS0C)
               ((case-lambda
                  ((g$a$4996$7lS0C)
                   (values
                     (cons (car g$a$4996$7lS0C) g$cars$4994$7lS0C)
                     (cons (cdr g$a$4996$7lS0C) g$cdrs$4995$7lS0C))))
                (car g$ls$4993$7lS0C)))))))))
   (g$for-all$4920$7lS0C
     g$for-all$5057$7lS0C
     (case-lambda
       ((g$f$4997$7lS0C . g$args$4998$7lS0C)
        (if (g$all-empty?$4918$7lS0C g$args$4998$7lS0C)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4919$7lS0C g$args$4998$7lS0C)))
            (case-lambda
              ((g$cars$4999$7lS0C g$cdrs$5000$7lS0C)
               (if (g$all-empty?$4918$7lS0C g$cdrs$5000$7lS0C)
                 (apply g$f$4997$7lS0C g$cars$4999$7lS0C)
                 (if (apply g$f$4997$7lS0C g$cars$4999$7lS0C)
                   (begin
                     '#f
                     (apply
                       g$for-all$4920$7lS0C
                       g$f$4997$7lS0C
                       g$cdrs$5000$7lS0C))
                   '#f)))))))))
   (g$exists$4921$7lS0C
     g$exists$5058$7lS0C
     (case-lambda
       ((g$f$5001$7lS0C . g$args$5002$7lS0C)
        (if (g$all-empty?$4918$7lS0C g$args$5002$7lS0C)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4919$7lS0C g$args$5002$7lS0C)))
            (case-lambda
              ((g$cars$5003$7lS0C g$cdrs$5004$7lS0C)
               ((case-lambda
                  ((g$t$5005$7lS0C)
                   (if g$t$5005$7lS0C
                     g$t$5005$7lS0C
                     (begin
                       '#f
                       (apply
                         g$exists$4921$7lS0C
                         g$f$5001$7lS0C
                         g$cdrs$5004$7lS0C)))))
                (apply g$f$5001$7lS0C g$cars$5003$7lS0C)))))))))
   (g$map$4922$7lS0C
     g$map$5059$7lS0C
     (case-lambda
       ((g$proc$5006$7lS0C . g$lists$5007$7lS0C)
        ((letrec ((g$f$5008$7lS0C
                    (case-lambda
                      ((g$lists$5009$7lS0C g$a$5010$7lS0C)
                       (if (g$all-empty?$4918$7lS0C g$lists$5009$7lS0C)
                         (reverse! g$a$5010$7lS0C)
                         (call-with-values
                           (case-lambda
                             (() (g$split$4919$7lS0C g$lists$5009$7lS0C)))
                           (case-lambda
                             ((g$cars$5011$7lS0C g$cdrs$5012$7lS0C)
                              (g$f$5008$7lS0C
                                g$cdrs$5012$7lS0C
                                (cons
                                  (apply g$proc$5006$7lS0C g$cars$5011$7lS0C)
                                  g$a$5010$7lS0C))))))))))
           g$f$5008$7lS0C)
         g$lists$5007$7lS0C
         '()))))
   (g$for-each$4923$7lS0C
     g$for-each$5060$7lS0C
     (case-lambda
       ((g$f$5013$7lS0C . g$args$5014$7lS0C)
        (if (not (g$all-empty?$4918$7lS0C g$args$5014$7lS0C))
          (call-with-values
            (case-lambda (() (g$split$4919$7lS0C g$args$5014$7lS0C)))
            (case-lambda
              ((g$cars$5015$7lS0C g$cdrs$5016$7lS0C)
               (begin
                 (apply g$f$5013$7lS0C g$cars$5015$7lS0C)
                 (apply
                   g$for-each$4923$7lS0C
                   g$f$5013$7lS0C
                   g$cdrs$5016$7lS0C)))))
          (void)))))
   (g$cons*$4924$7lS0C
     g$cons*$5061$7lS0C
     (case-lambda
       ((g$a$5017$7lS0C . g$rest$5018$7lS0C)
        ((letrec ((g$f$5019$7lS0C
                    (case-lambda
                      ((g$a$5020$7lS0C g$rest$5021$7lS0C)
                       (if (null? g$rest$5021$7lS0C)
                         g$a$5020$7lS0C
                         (cons
                           g$a$5020$7lS0C
                           (g$f$5019$7lS0C
                             (car g$rest$5021$7lS0C)
                             (cdr g$rest$5021$7lS0C))))))))
           g$f$5019$7lS0C)
         g$a$5017$7lS0C
         g$rest$5018$7lS0C))))
   (g$fold-left$4925$7lS0C
     g$fold-left$5062$7lS0C
     (case-lambda
       ((g$combine$5022$7lS0C
          g$nil$5023$7lS0C
          g$list1$5024$7lS0C
          .
          g$lists$5025$7lS0C)
        (if (null? g$list1$5024$7lS0C)
          g$nil$5023$7lS0C
          (apply
            g$fold-left$4925$7lS0C
            (g$cons*$4924$7lS0C
              g$combine$5022$7lS0C
              (apply
                g$combine$5022$7lS0C
                (g$cons*$4924$7lS0C
                  g$nil$5023$7lS0C
                  (car g$list1$5024$7lS0C)
                  (g$map$4922$7lS0C car g$lists$5025$7lS0C)))
              (cdr g$list1$5024$7lS0C)
              (g$map$4922$7lS0C cdr g$lists$5025$7lS0C)))))))
   (g$fold-right$4926$7lS0C
     g$fold-right$5063$7lS0C
     (case-lambda
       ((g$combine$5026$7lS0C
          g$nil$5027$7lS0C
          g$list1$5028$7lS0C
          .
          g$lists$5029$7lS0C)
        (if (null? g$list1$5028$7lS0C)
          g$nil$5027$7lS0C
          (apply
            g$combine$5026$7lS0C
            (append
              (list (car g$list1$5028$7lS0C))
              (g$map$4922$7lS0C car g$lists$5029$7lS0C)
              (list
                (apply
                  g$fold-right$4926$7lS0C
                  (g$cons*$4924$7lS0C
                    g$combine$5026$7lS0C
                    g$nil$5027$7lS0C
                    (cdr g$list1$5028$7lS0C)
                    (g$map$4922$7lS0C cdr g$lists$5029$7lS0C))))))))))
   (g$remove$4927$7lS0C
     g$remove$5064$7lS0C
     (case-lambda
       ((g$obj$5030$7lS0C g$list$5031$7lS0C)
        (g$remp$4908$7lS0C
          (case-lambda
            ((g$x$5032$7lS0C) (equal? g$obj$5030$7lS0C g$x$5032$7lS0C)))
          g$list$5031$7lS0C))))
   (g$remv$4928$7lS0C
     g$remv$5065$7lS0C
     (case-lambda
       ((g$obj$5033$7lS0C g$list$5034$7lS0C)
        (g$remp$4908$7lS0C
          (case-lambda
            ((g$x$5035$7lS0C) (eqv? g$obj$5033$7lS0C g$x$5035$7lS0C)))
          g$list$5034$7lS0C))))
   (g$remq$4929$7lS0C
     g$remq$5066$7lS0C
     (case-lambda
       ((g$obj$5036$7lS0C g$list$5037$7lS0C)
        (g$remp$4908$7lS0C
          (case-lambda ((g$x$5038$7lS0C) (eq? g$obj$5036$7lS0C g$x$5038$7lS0C)))
          g$list$5037$7lS0C)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5067$7lS0C
     g$caar$5222$7lS0C
     (case-lambda ((g$x$5122$7lS0C) (car (car g$x$5122$7lS0C)))))
   (g$cadr$5068$7lS0C
     g$cadr$5223$7lS0C
     (case-lambda ((g$x$5123$7lS0C) (car (cdr g$x$5123$7lS0C)))))
   (g$cdar$5069$7lS0C
     g$cdar$5224$7lS0C
     (case-lambda ((g$x$5124$7lS0C) (cdr (car g$x$5124$7lS0C)))))
   (g$cddr$5070$7lS0C
     g$cddr$5225$7lS0C
     (case-lambda ((g$x$5125$7lS0C) (cdr (cdr g$x$5125$7lS0C)))))
   (g$caaar$5071$7lS0C
     g$caaar$5226$7lS0C
     (case-lambda
       ((g$x$5126$7lS0C) (g$caar$5067$7lS0C (car g$x$5126$7lS0C)))))
   (g$caadr$5072$7lS0C
     g$caadr$5227$7lS0C
     (case-lambda
       ((g$x$5127$7lS0C) (g$caar$5067$7lS0C (cdr g$x$5127$7lS0C)))))
   (g$cadar$5073$7lS0C
     g$cadar$5228$7lS0C
     (case-lambda
       ((g$x$5128$7lS0C) (g$cadr$5068$7lS0C (car g$x$5128$7lS0C)))))
   (g$caddr$5074$7lS0C
     g$caddr$5229$7lS0C
     (case-lambda
       ((g$x$5129$7lS0C) (g$cadr$5068$7lS0C (cdr g$x$5129$7lS0C)))))
   (g$cdaar$5075$7lS0C
     g$cdaar$5230$7lS0C
     (case-lambda
       ((g$x$5130$7lS0C) (g$cdar$5069$7lS0C (car g$x$5130$7lS0C)))))
   (g$cdadr$5076$7lS0C
     g$cdadr$5231$7lS0C
     (case-lambda
       ((g$x$5131$7lS0C) (g$cdar$5069$7lS0C (cdr g$x$5131$7lS0C)))))
   (g$cddar$5077$7lS0C
     g$cddar$5232$7lS0C
     (case-lambda
       ((g$x$5132$7lS0C) (g$cddr$5070$7lS0C (car g$x$5132$7lS0C)))))
   (g$cdddr$5078$7lS0C
     g$cdddr$5233$7lS0C
     (case-lambda
       ((g$x$5133$7lS0C) (g$cddr$5070$7lS0C (cdr g$x$5133$7lS0C)))))
   (g$caaaar$5079$7lS0C
     g$caaaar$5234$7lS0C
     (case-lambda
       ((g$x$5134$7lS0C) (g$caaar$5071$7lS0C (car g$x$5134$7lS0C)))))
   (g$caaadr$5080$7lS0C
     g$caaadr$5235$7lS0C
     (case-lambda
       ((g$x$5135$7lS0C) (g$caaar$5071$7lS0C (cdr g$x$5135$7lS0C)))))
   (g$caadar$5081$7lS0C
     g$caadar$5236$7lS0C
     (case-lambda
       ((g$x$5136$7lS0C) (g$caadr$5072$7lS0C (car g$x$5136$7lS0C)))))
   (g$caaddr$5082$7lS0C
     g$caaddr$5237$7lS0C
     (case-lambda
       ((g$x$5137$7lS0C) (g$caadr$5072$7lS0C (cdr g$x$5137$7lS0C)))))
   (g$cadaar$5083$7lS0C
     g$cadaar$5238$7lS0C
     (case-lambda
       ((g$x$5138$7lS0C) (g$cadar$5073$7lS0C (car g$x$5138$7lS0C)))))
   (g$cadadr$5084$7lS0C
     g$cadadr$5239$7lS0C
     (case-lambda
       ((g$x$5139$7lS0C) (g$cadar$5073$7lS0C (cdr g$x$5139$7lS0C)))))
   (g$caddar$5085$7lS0C
     g$caddar$5240$7lS0C
     (case-lambda
       ((g$x$5140$7lS0C) (g$caddr$5074$7lS0C (car g$x$5140$7lS0C)))))
   (g$cadddr$5086$7lS0C
     g$cadddr$5241$7lS0C
     (case-lambda
       ((g$x$5141$7lS0C) (g$caddr$5074$7lS0C (cdr g$x$5141$7lS0C)))))
   (g$cdaaar$5087$7lS0C
     g$cdaaar$5242$7lS0C
     (case-lambda
       ((g$x$5142$7lS0C) (g$cdaar$5075$7lS0C (car g$x$5142$7lS0C)))))
   (g$cdaadr$5088$7lS0C
     g$cdaadr$5243$7lS0C
     (case-lambda
       ((g$x$5143$7lS0C) (g$cdaar$5075$7lS0C (cdr g$x$5143$7lS0C)))))
   (g$cdadar$5089$7lS0C
     g$cdadar$5244$7lS0C
     (case-lambda
       ((g$x$5144$7lS0C) (g$cdadr$5076$7lS0C (car g$x$5144$7lS0C)))))
   (g$cdaddr$5090$7lS0C
     g$cdaddr$5245$7lS0C
     (case-lambda
       ((g$x$5145$7lS0C) (g$cdadr$5076$7lS0C (cdr g$x$5145$7lS0C)))))
   (g$cddaar$5091$7lS0C
     g$cddaar$5246$7lS0C
     (case-lambda
       ((g$x$5146$7lS0C) (g$cddar$5077$7lS0C (car g$x$5146$7lS0C)))))
   (g$cddadr$5092$7lS0C
     g$cddadr$5247$7lS0C
     (case-lambda
       ((g$x$5147$7lS0C) (g$cddar$5077$7lS0C (cdr g$x$5147$7lS0C)))))
   (g$cdddar$5093$7lS0C
     g$cdddar$5248$7lS0C
     (case-lambda
       ((g$x$5148$7lS0C) (g$cdddr$5078$7lS0C (car g$x$5148$7lS0C)))))
   (g$cddddr$5094$7lS0C
     g$cddddr$5249$7lS0C
     (case-lambda
       ((g$x$5149$7lS0C) (g$cdddr$5078$7lS0C (cdr g$x$5149$7lS0C)))))
   (g$string=?$5101$7lS0C
     g$string=?$5250$7lS0C
     (case-lambda
       ((g$a$5150$7lS0C g$b$5151$7lS0C . g$rest$5152$7lS0C)
        (begin
          (if (not (string? g$a$5150$7lS0C))
            (assertion-violation 'string=? '"not a string" g$a$5150$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5153$7lS0C)
               (begin
                 (if (not (string? g$x$5153$7lS0C))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5153$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5154$7lS0C)
                     (begin
                       (set! g$a$5150$7lS0C g$x$5153$7lS0C)
                       g$r$5154$7lS0C)))
                  (= (string-compare g$a$5150$7lS0C g$x$5153$7lS0C) '0)))))
            (cons g$b$5151$7lS0C g$rest$5152$7lS0C))))))
   (g$string<?$5102$7lS0C
     g$string<?$5251$7lS0C
     (case-lambda
       ((g$a$5155$7lS0C g$b$5156$7lS0C . g$rest$5157$7lS0C)
        (begin
          (if (not (string? g$a$5155$7lS0C))
            (assertion-violation 'string<? '"not a string" g$a$5155$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5158$7lS0C)
               (begin
                 (if (not (string? g$x$5158$7lS0C))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5158$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5159$7lS0C)
                     (begin
                       (set! g$a$5155$7lS0C g$x$5158$7lS0C)
                       g$r$5159$7lS0C)))
                  (< (string-compare g$a$5155$7lS0C g$x$5158$7lS0C) '0)))))
            (cons g$b$5156$7lS0C g$rest$5157$7lS0C))))))
   (g$string>?$5103$7lS0C
     g$string>?$5252$7lS0C
     (case-lambda
       ((g$a$5160$7lS0C g$b$5161$7lS0C . g$rest$5162$7lS0C)
        (begin
          (if (not (string? g$a$5160$7lS0C))
            (assertion-violation 'string>? '"not a string" g$a$5160$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5163$7lS0C)
               (begin
                 (if (not (string? g$x$5163$7lS0C))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5163$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5164$7lS0C)
                     (begin
                       (set! g$a$5160$7lS0C g$x$5163$7lS0C)
                       g$r$5164$7lS0C)))
                  (> (string-compare g$a$5160$7lS0C g$x$5163$7lS0C) '0)))))
            (cons g$b$5161$7lS0C g$rest$5162$7lS0C))))))
   (g$string<=?$5104$7lS0C
     g$string<=?$5253$7lS0C
     (case-lambda
       ((g$a$5165$7lS0C g$b$5166$7lS0C . g$rest$5167$7lS0C)
        (begin
          (if (not (string? g$a$5165$7lS0C))
            (assertion-violation 'string<=? '"not a string" g$a$5165$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5168$7lS0C)
               (begin
                 (if (not (string? g$x$5168$7lS0C))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5168$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5169$7lS0C)
                     (begin
                       (set! g$a$5165$7lS0C g$x$5168$7lS0C)
                       g$r$5169$7lS0C)))
                  (<= (string-compare g$a$5165$7lS0C g$x$5168$7lS0C) '0)))))
            (cons g$b$5166$7lS0C g$rest$5167$7lS0C))))))
   (g$string>=?$5105$7lS0C
     g$string>=?$5254$7lS0C
     (case-lambda
       ((g$a$5170$7lS0C g$b$5171$7lS0C . g$rest$5172$7lS0C)
        (begin
          (if (not (string? g$a$5170$7lS0C))
            (assertion-violation 'string>=? '"not a string" g$a$5170$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5173$7lS0C)
               (begin
                 (if (not (string? g$x$5173$7lS0C))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5173$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5174$7lS0C)
                     (begin
                       (set! g$a$5170$7lS0C g$x$5173$7lS0C)
                       g$r$5174$7lS0C)))
                  (>= (string-compare g$a$5170$7lS0C g$x$5173$7lS0C) '0)))))
            (cons g$b$5171$7lS0C g$rest$5172$7lS0C))))))
   (g$symbol=?$5106$7lS0C
     g$symbol=?$5255$7lS0C
     (case-lambda
       ((g$a$5175$7lS0C g$b$5176$7lS0C . g$rest$5177$7lS0C)
        (begin
          (if (not (symbol? g$a$5175$7lS0C))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5175$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5178$7lS0C)
               (begin
                 (if (not (symbol? g$x$5178$7lS0C))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5178$7lS0C)
                   (void))
                 (eq? g$a$5175$7lS0C g$x$5178$7lS0C))))
            (cons g$b$5176$7lS0C g$rest$5177$7lS0C))))))
   (g$boolean=?$5107$7lS0C
     g$boolean=?$5256$7lS0C
     (case-lambda
       ((g$a$5179$7lS0C g$b$5180$7lS0C . g$rest$5181$7lS0C)
        (begin
          (if (not (boolean? g$a$5179$7lS0C))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5179$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5182$7lS0C)
               (begin
                 (if (not (boolean? g$x$5182$7lS0C))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5182$7lS0C)
                   (void))
                 (eq? g$a$5179$7lS0C g$x$5182$7lS0C))))
            (cons g$b$5180$7lS0C g$rest$5181$7lS0C))))))
   (g$char=?$5114$7lS0C
     g$char=?$5257$7lS0C
     (case-lambda
       ((g$a$5183$7lS0C g$b$5184$7lS0C . g$rest$5185$7lS0C)
        (begin
          (if (not (char? g$a$5183$7lS0C))
            (assertion-violation 'char=? '"not a char" g$a$5183$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5186$7lS0C)
               (begin
                 (if (not (char? g$x$5186$7lS0C))
                   (assertion-violation 'char=? '"not a char" g$x$5186$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5187$7lS0C)
                     (begin
                       (set! g$a$5183$7lS0C g$x$5186$7lS0C)
                       g$r$5187$7lS0C)))
                  (= (char->integer g$a$5183$7lS0C)
                     (char->integer g$x$5186$7lS0C))))))
            (cons g$b$5184$7lS0C g$rest$5185$7lS0C))))))
   (g$char<?$5115$7lS0C
     g$char<?$5258$7lS0C
     (case-lambda
       ((g$a$5188$7lS0C g$b$5189$7lS0C . g$rest$5190$7lS0C)
        (begin
          (if (not (char? g$a$5188$7lS0C))
            (assertion-violation 'char<? '"not a char" g$a$5188$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5191$7lS0C)
               (begin
                 (if (not (char? g$x$5191$7lS0C))
                   (assertion-violation 'char<? '"not a char" g$x$5191$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5192$7lS0C)
                     (begin
                       (set! g$a$5188$7lS0C g$x$5191$7lS0C)
                       g$r$5192$7lS0C)))
                  (< (char->integer g$a$5188$7lS0C)
                     (char->integer g$x$5191$7lS0C))))))
            (cons g$b$5189$7lS0C g$rest$5190$7lS0C))))))
   (g$char>?$5116$7lS0C
     g$char>?$5259$7lS0C
     (case-lambda
       ((g$a$5193$7lS0C g$b$5194$7lS0C . g$rest$5195$7lS0C)
        (begin
          (if (not (char? g$a$5193$7lS0C))
            (assertion-violation 'char>? '"not a char" g$a$5193$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5196$7lS0C)
               (begin
                 (if (not (char? g$x$5196$7lS0C))
                   (assertion-violation 'char>? '"not a char" g$x$5196$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5197$7lS0C)
                     (begin
                       (set! g$a$5193$7lS0C g$x$5196$7lS0C)
                       g$r$5197$7lS0C)))
                  (> (char->integer g$a$5193$7lS0C)
                     (char->integer g$x$5196$7lS0C))))))
            (cons g$b$5194$7lS0C g$rest$5195$7lS0C))))))
   (g$char<=?$5117$7lS0C
     g$char<=?$5260$7lS0C
     (case-lambda
       ((g$a$5198$7lS0C g$b$5199$7lS0C . g$rest$5200$7lS0C)
        (begin
          (if (not (char? g$a$5198$7lS0C))
            (assertion-violation 'char<=? '"not a char" g$a$5198$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5201$7lS0C)
               (begin
                 (if (not (char? g$x$5201$7lS0C))
                   (assertion-violation 'char<=? '"not a char" g$x$5201$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5202$7lS0C)
                     (begin
                       (set! g$a$5198$7lS0C g$x$5201$7lS0C)
                       g$r$5202$7lS0C)))
                  (<= (char->integer g$a$5198$7lS0C)
                      (char->integer g$x$5201$7lS0C))))))
            (cons g$b$5199$7lS0C g$rest$5200$7lS0C))))))
   (g$char>=?$5118$7lS0C
     g$char>=?$5261$7lS0C
     (case-lambda
       ((g$a$5203$7lS0C g$b$5204$7lS0C . g$rest$5205$7lS0C)
        (begin
          (if (not (char? g$a$5203$7lS0C))
            (assertion-violation 'char>=? '"not a char" g$a$5203$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5206$7lS0C)
               (begin
                 (if (not (char? g$x$5206$7lS0C))
                   (assertion-violation 'char>=? '"not a char" g$x$5206$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5207$7lS0C)
                     (begin
                       (set! g$a$5203$7lS0C g$x$5206$7lS0C)
                       g$r$5207$7lS0C)))
                  (>= (char->integer g$a$5203$7lS0C)
                      (char->integer g$x$5206$7lS0C))))))
            (cons g$b$5204$7lS0C g$rest$5205$7lS0C))))))
   (g$rationalize$5119$7lS0C
     g$rationalize$5262$7lS0C
     (case-lambda
       ((g$x$5208$7lS0C g$e$5209$7lS0C)
        (if (if (infinite? g$x$5208$7lS0C)
              (begin '#f (infinite? g$e$5209$7lS0C))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5210$7lS0C)
              (if (if (exact? g$x$5208$7lS0C)
                    (begin '#f (exact? g$e$5209$7lS0C))
                    '#f)
                g$r$5210$7lS0C
                (inexact g$r$5210$7lS0C))))
           (apply
             /
             (g$find-ratio$5120$7lS0C g$x$5208$7lS0C g$e$5209$7lS0C)))))))
   (g$find-ratio$5120$7lS0C
     g$find-ratio$5263$7lS0C
     (case-lambda
       ((g$x$5211$7lS0C g$e$5212$7lS0C)
        (g$find-ratio-between$5121$7lS0C
          (- g$x$5211$7lS0C g$e$5212$7lS0C)
          (+ g$x$5211$7lS0C g$e$5212$7lS0C)))))
   (g$find-ratio-between$5121$7lS0C
     g$find-ratio-between$5264$7lS0C
     (case-lambda
       ((g$x$5213$7lS0C g$y$5214$7lS0C)
        (letrec* ((g$sr$5215$7lS0C
                    (case-lambda
                      ((g$x$5217$7lS0C g$y$5218$7lS0C)
                       ((case-lambda
                          ((g$fx$5219$7lS0C g$fy$5220$7lS0C)
                           (if (>= g$fx$5219$7lS0C g$x$5217$7lS0C)
                             (list g$fx$5219$7lS0C '1)
                             (if (= g$fx$5219$7lS0C g$fy$5220$7lS0C)
                               ((case-lambda
                                  ((g$rat$5221$7lS0C)
                                   (list
                                     (+ (g$cadr$5068$7lS0C g$rat$5221$7lS0C)
                                        (* g$fx$5219$7lS0C
                                           (car g$rat$5221$7lS0C)))
                                     (car g$rat$5221$7lS0C))))
                                (g$sr$5215$7lS0C
                                  (/ (- g$y$5218$7lS0C g$fy$5220$7lS0C))
                                  (/ (- g$x$5217$7lS0C g$fx$5219$7lS0C))))
                               (list (+ '1 g$fx$5219$7lS0C) '1)))))
                        (exact (floor g$x$5217$7lS0C))
                        (exact (floor g$y$5218$7lS0C)))))))
          (if (< g$y$5214$7lS0C g$x$5213$7lS0C)
            (g$find-ratio-between$5121$7lS0C g$y$5214$7lS0C g$x$5213$7lS0C)
            (if (>= g$x$5213$7lS0C g$y$5214$7lS0C)
              (list g$x$5213$7lS0C '1)
              (if (positive? g$x$5213$7lS0C)
                (g$sr$5215$7lS0C g$x$5213$7lS0C g$y$5214$7lS0C)
                (if (negative? g$y$5214$7lS0C)
                  ((case-lambda
                     ((g$rat$5216$7lS0C)
                      (list
                        (- (car g$rat$5216$7lS0C))
                        (g$cadr$5068$7lS0C g$rat$5216$7lS0C))))
                   (g$sr$5215$7lS0C (- g$y$5214$7lS0C) (- g$x$5213$7lS0C)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5453$7lS0C g$using$5486$7lS0C (clr-using-internal 'system))
   (g$using$5455$7lS0C
     g$using$5487$7lS0C
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5456$7lS0C
     g$make-eq-hashtable$5488$7lS0C
     (case-lambda
       (() (g$make-eq-hashtable$5456$7lS0C '32))
       ((g$k$5465$7lS0C)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5465$7lS0C)))))
   (g$make-eqv-hashtable$5457$7lS0C
     g$make-eqv-hashtable$5489$7lS0C
     (case-lambda
       (() (g$make-eqv-hashtable$5457$7lS0C '32))
       ((g$k$5466$7lS0C) (make-hashtable eqv-hash eqv? g$k$5466$7lS0C))))
   (g$hashtable-size$5458$7lS0C
     g$hashtable-size$5490$7lS0C
     (case-lambda
       ((g$ht$5467$7lS0C)
        (clr-call-internal 'hashtable 'get_count g$ht$5467$7lS0C))))
   (g$hashtable-ref$5459$7lS0C
     g$hashtable-ref$5491$7lS0C
     (case-lambda
       ((g$ht$5468$7lS0C g$key$5469$7lS0C g$default$5470$7lS0C)
        (letrec* ((g$r$5471$7lS0C
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5468$7lS0C
                      g$key$5469$7lS0C)))
          (if (not (null? g$r$5471$7lS0C))
            g$r$5471$7lS0C
            g$default$5470$7lS0C)))))
   (g$hashtable-set!$5460$7lS0C
     g$hashtable-set!$5492$7lS0C
     (case-lambda
       ((g$ht$5472$7lS0C g$key$5473$7lS0C g$obj$5474$7lS0C)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5472$7lS0C
          g$key$5473$7lS0C
          g$obj$5474$7lS0C))))
   (g$hashtable-delete!$5461$7lS0C
     g$hashtable-delete!$5493$7lS0C
     (case-lambda
       ((g$ht$5475$7lS0C g$key$5476$7lS0C)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5475$7lS0C
          g$key$5476$7lS0C))))
   (g$hashtable-contains?$5462$7lS0C
     g$hashtable-contains?$5494$7lS0C
     (case-lambda
       ((g$ht$5477$7lS0C g$key$5478$7lS0C)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5477$7lS0C
          g$key$5478$7lS0C))))
   (g$hashtable-update!$5463$7lS0C
     g$hashtable-update!$5495$7lS0C
     (case-lambda
       ((g$ht$5479$7lS0C
          g$key$5480$7lS0C
          g$proc$5481$7lS0C
          g$default$5482$7lS0C)
        (g$hashtable-set!$5460$7lS0C
          g$ht$5479$7lS0C
          g$key$5480$7lS0C
          (g$proc$5481$7lS0C
            (g$hashtable-ref$5459$7lS0C
              g$ht$5479$7lS0C
              g$key$5480$7lS0C
              g$default$5482$7lS0C))))))
   (g$hashtable-clear!$5464$7lS0C
     g$hashtable-clear!$5496$7lS0C
     (case-lambda
       ((g$ht$5483$7lS0C) (g$hashtable-clear!$5464$7lS0C g$ht$5483$7lS0C '32))
       ((g$ht$5484$7lS0C g$k$5485$7lS0C)
        (clr-call-internal 'hashtable 'clear g$ht$5484$7lS0C)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5498$7lS0C g$using$5505$7lS0C (clr-using-internal 'system.io))
   (g$file-exists?$5499$7lS0C
     g$file-exists?$5506$7lS0C
     (case-lambda
       ((g$fn$5502$7lS0C)
        (clr-call-internal 'file 'exists '() g$fn$5502$7lS0C))))
   (g$delete-file$5500$7lS0C
     g$delete-file$5507$7lS0C
     (case-lambda
       ((g$fn$5503$7lS0C)
        (clr-call-internal 'file 'delete '() g$fn$5503$7lS0C))))
   (g$get-directory-name$5501$7lS0C
     g$get-directory-name$5508$7lS0C
     (case-lambda
       ((g$path$5504$7lS0C)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5504$7lS0C)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5509$7lS0C
     g$native-endianness$5620$7lS0C
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5510$7lS0C
     g$bytevector-u16-ref$5621$7lS0C
     (case-lambda
       ((g$bytevector$5538$7lS0C g$k$5539$7lS0C g$endianness$5540$7lS0C)
        (bytevector-uint-ref
          g$bytevector$5538$7lS0C
          g$k$5539$7lS0C
          g$endianness$5540$7lS0C
          '2))))
   (g$bytevector-s16-ref$5511$7lS0C
     g$bytevector-s16-ref$5622$7lS0C
     (case-lambda
       ((g$bytevector$5541$7lS0C g$k$5542$7lS0C g$endianness$5543$7lS0C)
        (bytevector-sint-ref
          g$bytevector$5541$7lS0C
          g$k$5542$7lS0C
          g$endianness$5543$7lS0C
          '2))))
   (g$bytevector-u16-native-ref$5512$7lS0C
     g$bytevector-u16-native-ref$5623$7lS0C
     (case-lambda
       ((g$bytevector$5544$7lS0C g$k$5545$7lS0C)
        (bytevector-uint-ref
          g$bytevector$5544$7lS0C
          g$k$5545$7lS0C
          (g$native-endianness$5509$7lS0C)
          '2))))
   (g$bytevector-s16-native-ref$5513$7lS0C
     g$bytevector-s16-native-ref$5624$7lS0C
     (case-lambda
       ((g$bytevector$5546$7lS0C g$k$5547$7lS0C)
        (bytevector-sint-ref
          g$bytevector$5546$7lS0C
          g$k$5547$7lS0C
          (g$native-endianness$5509$7lS0C)
          '2))))
   (g$bytevector-u16-set!$5514$7lS0C
     g$bytevector-u16-set!$5625$7lS0C
     (case-lambda
       ((g$bytevector$5548$7lS0C
          g$k$5549$7lS0C
          g$n$5550$7lS0C
          g$endianness$5551$7lS0C)
        (bytevector-uint-set!
          g$bytevector$5548$7lS0C
          g$k$5549$7lS0C
          g$n$5550$7lS0C
          g$endianness$5551$7lS0C
          '2))))
   (g$bytevector-s16-set!$5515$7lS0C
     g$bytevector-s16-set!$5626$7lS0C
     (case-lambda
       ((g$bytevector$5552$7lS0C
          g$k$5553$7lS0C
          g$n$5554$7lS0C
          g$endianness$5555$7lS0C)
        (bytevector-sint-set!
          g$bytevector$5552$7lS0C
          g$k$5553$7lS0C
          g$n$5554$7lS0C
          g$endianness$5555$7lS0C
          '2))))
   (g$bytevector-u16-native-set!$5516$7lS0C
     g$bytevector-u16-native-set!$5627$7lS0C
     (case-lambda
       ((g$bytevector$5556$7lS0C g$k$5557$7lS0C g$n$5558$7lS0C)
        (bytevector-uint-set!
          g$bytevector$5556$7lS0C
          g$k$5557$7lS0C
          g$n$5558$7lS0C
          (g$native-endianness$5509$7lS0C)
          '2))))
   (g$bytevector-s16-native-set!$5517$7lS0C
     g$bytevector-s16-native-set!$5628$7lS0C
     (case-lambda
       ((g$bytevector$5559$7lS0C g$k$5560$7lS0C g$n$5561$7lS0C)
        (bytevector-sint-set!
          g$bytevector$5559$7lS0C
          g$k$5560$7lS0C
          g$n$5561$7lS0C
          (g$native-endianness$5509$7lS0C)
          '2))))
   (g$bytevector-u32-ref$5518$7lS0C
     g$bytevector-u32-ref$5629$7lS0C
     (case-lambda
       ((g$bytevector$5562$7lS0C g$k$5563$7lS0C g$endianness$5564$7lS0C)
        (bytevector-uint-ref
          g$bytevector$5562$7lS0C
          g$k$5563$7lS0C
          g$endianness$5564$7lS0C
          '4))))
   (g$bytevector-s32-ref$5519$7lS0C
     g$bytevector-s32-ref$5630$7lS0C
     (case-lambda
       ((g$bytevector$5565$7lS0C g$k$5566$7lS0C g$endianness$5567$7lS0C)
        (bytevector-sint-ref
          g$bytevector$5565$7lS0C
          g$k$5566$7lS0C
          g$endianness$5567$7lS0C
          '4))))
   (g$bytevector-u32-native-ref$5520$7lS0C
     g$bytevector-u32-native-ref$5631$7lS0C
     (case-lambda
       ((g$bytevector$5568$7lS0C g$k$5569$7lS0C)
        (bytevector-uint-ref
          g$bytevector$5568$7lS0C
          g$k$5569$7lS0C
          (g$native-endianness$5509$7lS0C)
          '4))))
   (g$bytevector-s32-native-ref$5521$7lS0C
     g$bytevector-s32-native-ref$5632$7lS0C
     (case-lambda
       ((g$bytevector$5570$7lS0C g$k$5571$7lS0C)
        (bytevector-sint-ref
          g$bytevector$5570$7lS0C
          g$k$5571$7lS0C
          (g$native-endianness$5509$7lS0C)
          '4))))
   (g$bytevector-u32-set!$5522$7lS0C
     g$bytevector-u32-set!$5633$7lS0C
     (case-lambda
       ((g$bytevector$5572$7lS0C
          g$k$5573$7lS0C
          g$n$5574$7lS0C
          g$endianness$5575$7lS0C)
        (bytevector-uint-set!
          g$bytevector$5572$7lS0C
          g$k$5573$7lS0C
          g$n$5574$7lS0C
          g$endianness$5575$7lS0C
          '4))))
   (g$bytevector-s32-set!$5523$7lS0C
     g$bytevector-s32-set!$5634$7lS0C
     (case-lambda
       ((g$bytevector$5576$7lS0C
          g$k$5577$7lS0C
          g$n$5578$7lS0C
          g$endianness$5579$7lS0C)
        (bytevector-sint-set!
          g$bytevector$5576$7lS0C
          g$k$5577$7lS0C
          g$n$5578$7lS0C
          g$endianness$5579$7lS0C
          '4))))
   (g$bytevector-u32-native-set!$5524$7lS0C
     g$bytevector-u32-native-set!$5635$7lS0C
     (case-lambda
       ((g$bytevector$5580$7lS0C g$k$5581$7lS0C g$n$5582$7lS0C)
        (bytevector-uint-set!
          g$bytevector$5580$7lS0C
          g$k$5581$7lS0C
          g$n$5582$7lS0C
          (g$native-endianness$5509$7lS0C)
          '4))))
   (g$bytevector-s32-native-set!$5525$7lS0C
     g$bytevector-s32-native-set!$5636$7lS0C
     (case-lambda
       ((g$bytevector$5583$7lS0C g$k$5584$7lS0C g$n$5585$7lS0C)
        (bytevector-sint-set!
          g$bytevector$5583$7lS0C
          g$k$5584$7lS0C
          g$n$5585$7lS0C
          (g$native-endianness$5509$7lS0C)
          '4))))
   (g$bytevector-u64-ref$5526$7lS0C
     g$bytevector-u64-ref$5637$7lS0C
     (case-lambda
       ((g$bytevector$5586$7lS0C g$k$5587$7lS0C g$endianness$5588$7lS0C)
        (bytevector-uint-ref
          g$bytevector$5586$7lS0C
          g$k$5587$7lS0C
          g$endianness$5588$7lS0C
          '8))))
   (g$bytevector-s64-ref$5527$7lS0C
     g$bytevector-s64-ref$5638$7lS0C
     (case-lambda
       ((g$bytevector$5589$7lS0C g$k$5590$7lS0C g$endianness$5591$7lS0C)
        (bytevector-sint-ref
          g$bytevector$5589$7lS0C
          g$k$5590$7lS0C
          g$endianness$5591$7lS0C
          '8))))
   (g$bytevector-u64-native-ref$5528$7lS0C
     g$bytevector-u64-native-ref$5639$7lS0C
     (case-lambda
       ((g$bytevector$5592$7lS0C g$k$5593$7lS0C)
        (bytevector-uint-ref
          g$bytevector$5592$7lS0C
          g$k$5593$7lS0C
          (g$native-endianness$5509$7lS0C)
          '8))))
   (g$bytevector-s64-native-ref$5529$7lS0C
     g$bytevector-s64-native-ref$5640$7lS0C
     (case-lambda
       ((g$bytevector$5594$7lS0C g$k$5595$7lS0C)
        (bytevector-sint-ref
          g$bytevector$5594$7lS0C
          g$k$5595$7lS0C
          (g$native-endianness$5509$7lS0C)
          '8))))
   (g$bytevector-u64-set!$5530$7lS0C
     g$bytevector-u64-set!$5641$7lS0C
     (case-lambda
       ((g$bytevector$5596$7lS0C
          g$k$5597$7lS0C
          g$n$5598$7lS0C
          g$endianness$5599$7lS0C)
        (bytevector-uint-set!
          g$bytevector$5596$7lS0C
          g$k$5597$7lS0C
          g$n$5598$7lS0C
          g$endianness$5599$7lS0C
          '8))))
   (g$bytevector-s64-set!$5531$7lS0C
     g$bytevector-s64-set!$5642$7lS0C
     (case-lambda
       ((g$bytevector$5600$7lS0C
          g$k$5601$7lS0C
          g$n$5602$7lS0C
          g$endianness$5603$7lS0C)
        (bytevector-sint-set!
          g$bytevector$5600$7lS0C
          g$k$5601$7lS0C
          g$n$5602$7lS0C
          g$endianness$5603$7lS0C
          '8))))
   (g$bytevector-u64-native-set!$5532$7lS0C
     g$bytevector-u64-native-set!$5643$7lS0C
     (case-lambda
       ((g$bytevector$5604$7lS0C g$k$5605$7lS0C g$n$5606$7lS0C)
        (bytevector-uint-set!
          g$bytevector$5604$7lS0C
          g$k$5605$7lS0C
          g$n$5606$7lS0C
          (g$native-endianness$5509$7lS0C)
          '8))))
   (g$bytevector-s64-native-set!$5533$7lS0C
     g$bytevector-s64-native-set!$5644$7lS0C
     (case-lambda
       ((g$bytevector$5607$7lS0C g$k$5608$7lS0C g$n$5609$7lS0C)
        (bytevector-sint-set!
          g$bytevector$5607$7lS0C
          g$k$5608$7lS0C
          g$n$5609$7lS0C
          (g$native-endianness$5509$7lS0C)
          '8))))
   (g$bytevector-ieee-single-native-ref$5534$7lS0C
     g$bytevector-ieee-single-native-ref$5645$7lS0C
     (case-lambda
       ((g$bytevector$5610$7lS0C g$k$5611$7lS0C)
        (if (not (zero? (mod g$k$5611$7lS0C '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5611$7lS0C)
          (bytevector-ieee-single-ref
            g$bytevector$5610$7lS0C
            g$k$5611$7lS0C
            (g$native-endianness$5509$7lS0C))))))
   (g$bytevector-ieee-double-native-ref$5535$7lS0C
     g$bytevector-ieee-double-native-ref$5646$7lS0C
     (case-lambda
       ((g$bytevector$5612$7lS0C g$k$5613$7lS0C)
        (if (not (zero? (mod g$k$5613$7lS0C '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5613$7lS0C)
          (bytevector-ieee-double-ref
            g$bytevector$5612$7lS0C
            g$k$5613$7lS0C
            (g$native-endianness$5509$7lS0C))))))
   (g$bytevector-ieee-single-native-set!$5536$7lS0C
     g$bytevector-ieee-single-native-set!$5647$7lS0C
     (case-lambda
       ((g$bytevector$5614$7lS0C g$k$5615$7lS0C g$x$5616$7lS0C)
        (if (not (zero? (mod g$k$5615$7lS0C '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5615$7lS0C)
          (bytevector-ieee-single-set!
            g$bytevector$5614$7lS0C
            g$k$5615$7lS0C
            g$x$5616$7lS0C
            (g$native-endianness$5509$7lS0C))))))
   (g$bytevector-ieee-double-native-set!$5537$7lS0C
     g$bytevector-ieee-double-native-set!$5648$7lS0C
     (case-lambda
       ((g$bytevector$5617$7lS0C g$k$5618$7lS0C g$x$5619$7lS0C)
        (if (not (zero? (mod g$k$5618$7lS0C '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5618$7lS0C)
          (bytevector-ieee-double-set!
            g$bytevector$5617$7lS0C
            g$k$5618$7lS0C
            g$x$5619$7lS0C
            (g$native-endianness$5509$7lS0C)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6648$5649$7lS0C
     g$6648$5744$7lS0C
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6651$7lS0C
       '#f
       '#f
       '#()))
   (g$6650$5650$7lS0C g$6650$5745$7lS0C '#f)
   (g$6649$5651$7lS0C
     g$6649$5746$7lS0C
     (make-record-constructor-descriptor
       g$6648$5649$7lS0C
       '#f
       g$6650$5650$7lS0C))
   (g$&condition?$5652$7lS0C
     g$&condition?$5747$7lS0C
     (record-predicate g$6648$5649$7lS0C))
   (g$make-&condition$5653$7lS0C
     g$make-&condition$5748$7lS0C
     (record-constructor g$6649$5651$7lS0C))
   (g$&condition-rtd$5654$7lS0C
     g$&condition-rtd$5749$7lS0C
     g$6648$5649$7lS0C)
   (g$&condition-rcd$5655$7lS0C
     g$&condition-rcd$5750$7lS0C
     g$6649$5651$7lS0C)
   (g$6664$5656$7lS0C
     g$6664$5751$7lS0C
     (make-record-type-descriptor
       '&message
       g$6648$5649$7lS0C
       'g$6667$7lS0C
       '#f
       '#f
       '#((immutable message))))
   (g$6666$5657$7lS0C g$6666$5752$7lS0C '#f)
   (g$6665$5658$7lS0C
     g$6665$5753$7lS0C
     (make-record-constructor-descriptor
       g$6664$5656$7lS0C
       g$6649$5651$7lS0C
       g$6666$5657$7lS0C))
   (g$6663$5659$7lS0C
     g$6663$5754$7lS0C
     (record-predicate g$6664$5656$7lS0C))
   (g$make-message-condition$5660$7lS0C
     g$make-message-condition$5755$7lS0C
     (record-constructor g$6665$5658$7lS0C))
   (g$6662$5661$7lS0C
     g$6662$5756$7lS0C
     (record-accessor g$6664$5656$7lS0C '0))
   (g$message-condition?$5662$7lS0C
     g$message-condition?$5757$7lS0C
     (condition-predicate g$6664$5656$7lS0C))
   (g$condition-message$5663$7lS0C
     g$condition-message$5758$7lS0C
     (condition-accessor g$6664$5656$7lS0C g$6662$5661$7lS0C))
   (g$6680$5664$7lS0C
     g$6680$5759$7lS0C
     (make-record-type-descriptor
       '&warning
       g$6648$5649$7lS0C
       'g$6683$7lS0C
       '#f
       '#f
       '#()))
   (g$6682$5665$7lS0C g$6682$5760$7lS0C '#f)
   (g$6681$5666$7lS0C
     g$6681$5761$7lS0C
     (make-record-constructor-descriptor
       g$6680$5664$7lS0C
       g$6649$5651$7lS0C
       g$6682$5665$7lS0C))
   (g$6679$5667$7lS0C
     g$6679$5762$7lS0C
     (record-predicate g$6680$5664$7lS0C))
   (g$make-warning$5668$7lS0C
     g$make-warning$5763$7lS0C
     (record-constructor g$6681$5666$7lS0C))
   (g$warning?$5669$7lS0C
     g$warning?$5764$7lS0C
     (condition-predicate g$6680$5664$7lS0C))
   (g$6694$5670$7lS0C
     g$6694$5765$7lS0C
     (make-record-type-descriptor
       '&serious
       g$6648$5649$7lS0C
       'g$6697$7lS0C
       '#f
       '#f
       '#()))
   (g$6696$5671$7lS0C g$6696$5766$7lS0C '#f)
   (g$6695$5672$7lS0C
     g$6695$5767$7lS0C
     (make-record-constructor-descriptor
       g$6694$5670$7lS0C
       g$6649$5651$7lS0C
       g$6696$5671$7lS0C))
   (g$6693$5673$7lS0C
     g$6693$5768$7lS0C
     (record-predicate g$6694$5670$7lS0C))
   (g$make-serious-condition$5674$7lS0C
     g$make-serious-condition$5769$7lS0C
     (record-constructor g$6695$5672$7lS0C))
   (g$serious-condition?$5675$7lS0C
     g$serious-condition?$5770$7lS0C
     (condition-predicate g$6694$5670$7lS0C))
   (g$6708$5676$7lS0C
     g$6708$5771$7lS0C
     (make-record-type-descriptor
       '&error
       g$6694$5670$7lS0C
       'g$6711$7lS0C
       '#f
       '#f
       '#()))
   (g$6710$5677$7lS0C g$6710$5772$7lS0C '#f)
   (g$6709$5678$7lS0C
     g$6709$5773$7lS0C
     (make-record-constructor-descriptor
       g$6708$5676$7lS0C
       g$6695$5672$7lS0C
       g$6710$5677$7lS0C))
   (g$6707$5679$7lS0C
     g$6707$5774$7lS0C
     (record-predicate g$6708$5676$7lS0C))
   (g$make-error$5680$7lS0C
     g$make-error$5775$7lS0C
     (record-constructor g$6709$5678$7lS0C))
   (g$error?$5681$7lS0C
     g$error?$5776$7lS0C
     (condition-predicate g$6708$5676$7lS0C))
   (g$6722$5682$7lS0C
     g$6722$5777$7lS0C
     (make-record-type-descriptor
       '&violation
       g$6694$5670$7lS0C
       'g$6725$7lS0C
       '#f
       '#f
       '#()))
   (g$6724$5683$7lS0C g$6724$5778$7lS0C '#f)
   (g$6723$5684$7lS0C
     g$6723$5779$7lS0C
     (make-record-constructor-descriptor
       g$6722$5682$7lS0C
       g$6695$5672$7lS0C
       g$6724$5683$7lS0C))
   (g$6721$5685$7lS0C
     g$6721$5780$7lS0C
     (record-predicate g$6722$5682$7lS0C))
   (g$make-violation$5686$7lS0C
     g$make-violation$5781$7lS0C
     (record-constructor g$6723$5684$7lS0C))
   (g$violation?$5687$7lS0C
     g$violation?$5782$7lS0C
     (condition-predicate g$6722$5682$7lS0C))
   (g$6736$5688$7lS0C
     g$6736$5783$7lS0C
     (make-record-type-descriptor
       '&assertion
       g$6722$5682$7lS0C
       'g$6739$7lS0C
       '#f
       '#f
       '#()))
   (g$6738$5689$7lS0C g$6738$5784$7lS0C '#f)
   (g$6737$5690$7lS0C
     g$6737$5785$7lS0C
     (make-record-constructor-descriptor
       g$6736$5688$7lS0C
       g$6723$5684$7lS0C
       g$6738$5689$7lS0C))
   (g$6735$5691$7lS0C
     g$6735$5786$7lS0C
     (record-predicate g$6736$5688$7lS0C))
   (g$make-assertion-violation$5692$7lS0C
     g$make-assertion-violation$5787$7lS0C
     (record-constructor g$6737$5690$7lS0C))
   (g$assertion-violation?$5693$7lS0C
     g$assertion-violation?$5788$7lS0C
     (condition-predicate g$6736$5688$7lS0C))
   (g$6751$5694$7lS0C
     g$6751$5789$7lS0C
     (make-record-type-descriptor
       '&irritants
       g$6648$5649$7lS0C
       'g$6754$7lS0C
       '#f
       '#f
       '#((immutable irritants))))
   (g$6753$5695$7lS0C g$6753$5790$7lS0C '#f)
   (g$6752$5696$7lS0C
     g$6752$5791$7lS0C
     (make-record-constructor-descriptor
       g$6751$5694$7lS0C
       g$6649$5651$7lS0C
       g$6753$5695$7lS0C))
   (g$6750$5697$7lS0C
     g$6750$5792$7lS0C
     (record-predicate g$6751$5694$7lS0C))
   (g$make-irritants-condition$5698$7lS0C
     g$make-irritants-condition$5793$7lS0C
     (record-constructor g$6752$5696$7lS0C))
   (g$6749$5699$7lS0C
     g$6749$5794$7lS0C
     (record-accessor g$6751$5694$7lS0C '0))
   (g$irritants-condition?$5700$7lS0C
     g$irritants-condition?$5795$7lS0C
     (condition-predicate g$6751$5694$7lS0C))
   (g$condition-irritants$5701$7lS0C
     g$condition-irritants$5796$7lS0C
     (condition-accessor g$6751$5694$7lS0C g$6749$5699$7lS0C))
   (g$6768$5702$7lS0C
     g$6768$5797$7lS0C
     (make-record-type-descriptor
       '&who
       g$6648$5649$7lS0C
       'g$6771$7lS0C
       '#f
       '#f
       '#((immutable who))))
   (g$6770$5703$7lS0C g$6770$5798$7lS0C '#f)
   (g$6769$5704$7lS0C
     g$6769$5799$7lS0C
     (make-record-constructor-descriptor
       g$6768$5702$7lS0C
       g$6649$5651$7lS0C
       g$6770$5703$7lS0C))
   (g$6767$5705$7lS0C
     g$6767$5800$7lS0C
     (record-predicate g$6768$5702$7lS0C))
   (g$make-who-condition$5706$7lS0C
     g$make-who-condition$5801$7lS0C
     (record-constructor g$6769$5704$7lS0C))
   (g$6766$5707$7lS0C
     g$6766$5802$7lS0C
     (record-accessor g$6768$5702$7lS0C '0))
   (g$who-condition?$5708$7lS0C
     g$who-condition?$5803$7lS0C
     (condition-predicate g$6768$5702$7lS0C))
   (g$condition-who$5709$7lS0C
     g$condition-who$5804$7lS0C
     (condition-accessor g$6768$5702$7lS0C g$6766$5707$7lS0C))
   (g$6784$5710$7lS0C
     g$6784$5805$7lS0C
     (make-record-type-descriptor
       '&non-continuable
       g$6722$5682$7lS0C
       'g$6787$7lS0C
       '#f
       '#f
       '#()))
   (g$6786$5711$7lS0C g$6786$5806$7lS0C '#f)
   (g$6785$5712$7lS0C
     g$6785$5807$7lS0C
     (make-record-constructor-descriptor
       g$6784$5710$7lS0C
       g$6723$5684$7lS0C
       g$6786$5711$7lS0C))
   (g$6783$5713$7lS0C
     g$6783$5808$7lS0C
     (record-predicate g$6784$5710$7lS0C))
   (g$make-non-continuable-violation$5714$7lS0C
     g$make-non-continuable-violation$5809$7lS0C
     (record-constructor g$6785$5712$7lS0C))
   (g$non-continuable-violation?$5715$7lS0C
     g$non-continuable-violation?$5810$7lS0C
     (condition-predicate g$6784$5710$7lS0C))
   (g$6798$5716$7lS0C
     g$6798$5811$7lS0C
     (make-record-type-descriptor
       '&implementation-restriction
       g$6722$5682$7lS0C
       'g$6801$7lS0C
       '#f
       '#f
       '#()))
   (g$6800$5717$7lS0C g$6800$5812$7lS0C '#f)
   (g$6799$5718$7lS0C
     g$6799$5813$7lS0C
     (make-record-constructor-descriptor
       g$6798$5716$7lS0C
       g$6723$5684$7lS0C
       g$6800$5717$7lS0C))
   (g$6797$5719$7lS0C
     g$6797$5814$7lS0C
     (record-predicate g$6798$5716$7lS0C))
   (g$make-implementation-restriction-violation$5720$7lS0C
     g$make-implementation-restriction-violation$5815$7lS0C
     (record-constructor g$6799$5718$7lS0C))
   (g$implementation-restriction-violation?$5721$7lS0C
     g$implementation-restriction-violation?$5816$7lS0C
     (condition-predicate g$6798$5716$7lS0C))
   (g$6812$5722$7lS0C
     g$6812$5817$7lS0C
     (make-record-type-descriptor
       '&lexical
       g$6722$5682$7lS0C
       'g$6815$7lS0C
       '#f
       '#f
       '#()))
   (g$6814$5723$7lS0C g$6814$5818$7lS0C '#f)
   (g$6813$5724$7lS0C
     g$6813$5819$7lS0C
     (make-record-constructor-descriptor
       g$6812$5722$7lS0C
       g$6723$5684$7lS0C
       g$6814$5723$7lS0C))
   (g$6811$5725$7lS0C
     g$6811$5820$7lS0C
     (record-predicate g$6812$5722$7lS0C))
   (g$make-lexical-violation$5726$7lS0C
     g$make-lexical-violation$5821$7lS0C
     (record-constructor g$6813$5724$7lS0C))
   (g$lexical-violation?$5727$7lS0C
     g$lexical-violation?$5822$7lS0C
     (condition-predicate g$6812$5722$7lS0C))
   (g$6828$5728$7lS0C
     g$6828$5823$7lS0C
     (make-record-type-descriptor
       '&syntax
       g$6722$5682$7lS0C
       'g$6831$7lS0C
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6830$5729$7lS0C g$6830$5824$7lS0C '#f)
   (g$6829$5730$7lS0C
     g$6829$5825$7lS0C
     (make-record-constructor-descriptor
       g$6828$5728$7lS0C
       g$6723$5684$7lS0C
       g$6830$5729$7lS0C))
   (g$6827$5731$7lS0C
     g$6827$5826$7lS0C
     (record-predicate g$6828$5728$7lS0C))
   (g$make-syntax-violation$5732$7lS0C
     g$make-syntax-violation$5827$7lS0C
     (record-constructor g$6829$5730$7lS0C))
   (g$6825$5733$7lS0C
     g$6825$5828$7lS0C
     (record-accessor g$6828$5728$7lS0C '0))
   (g$6826$5734$7lS0C
     g$6826$5829$7lS0C
     (record-accessor g$6828$5728$7lS0C '1))
   (g$syntax-violation?$5735$7lS0C
     g$syntax-violation?$5830$7lS0C
     (condition-predicate g$6828$5728$7lS0C))
   (g$syntax-violation-form$5736$7lS0C
     g$syntax-violation-form$5831$7lS0C
     (condition-accessor g$6828$5728$7lS0C g$6825$5733$7lS0C))
   (g$syntax-violation-subform$5737$7lS0C
     g$syntax-violation-subform$5832$7lS0C
     (condition-accessor g$6828$5728$7lS0C g$6826$5734$7lS0C))
   (g$6846$5738$7lS0C
     g$6846$5833$7lS0C
     (make-record-type-descriptor
       '&undefined
       g$6722$5682$7lS0C
       'g$6849$7lS0C
       '#f
       '#f
       '#()))
   (g$6848$5739$7lS0C g$6848$5834$7lS0C '#f)
   (g$6847$5740$7lS0C
     g$6847$5835$7lS0C
     (make-record-constructor-descriptor
       g$6846$5738$7lS0C
       g$6723$5684$7lS0C
       g$6848$5739$7lS0C))
   (g$6845$5741$7lS0C
     g$6845$5836$7lS0C
     (record-predicate g$6846$5738$7lS0C))
   (g$make-undefined-violation$5742$7lS0C
     g$make-undefined-violation$5837$7lS0C
     (record-constructor g$6847$5740$7lS0C))
   (g$undefined-violation?$5743$7lS0C
     g$undefined-violation?$5838$7lS0C
     (condition-predicate g$6846$5738$7lS0C)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5839$7lS0C
     g$append!$5845$7lS0C
     (case-lambda
       ((g$a$5840$7lS0C . g$b$5841$7lS0C)
        (if (null? g$a$5840$7lS0C)
          g$b$5841$7lS0C
          (if (null? g$b$5841$7lS0C)
            g$a$5840$7lS0C
            (begin
              ((letrec ((g$f$5842$7lS0C
                          (case-lambda
                            ((g$a$5843$7lS0C)
                             ((case-lambda
                                ((g$n$5844$7lS0C)
                                 (if (null? g$n$5844$7lS0C)
                                   (set-cdr! g$a$5843$7lS0C g$b$5841$7lS0C)
                                   (g$f$5842$7lS0C g$n$5844$7lS0C))))
                              (cdr g$a$5843$7lS0C))))))
                 g$f$5842$7lS0C)
               g$a$5840$7lS0C)
              g$a$5840$7lS0C)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5846$7lS0C
     g$sign$5864$7lS0C
     (case-lambda
       ((g$n$5852$7lS0C)
        (if (> g$n$5852$7lS0C '0) '1 (if (< g$n$5852$7lS0C '0) '-1 '0)))))
   (g$quotient$5847$7lS0C
     g$quotient$5865$7lS0C
     (case-lambda
       ((g$n1$5853$7lS0C g$n2$5854$7lS0C)
        (begin
          (if (not (integer-valued? g$n1$5853$7lS0C))
            (assertion-violation 'quotient '"not an integer" g$n1$5853$7lS0C)
            (void))
          (if (not (integer-valued? g$n2$5854$7lS0C))
            (assertion-violation 'quotient '"not an integer" g$n2$5854$7lS0C)
            (void))
          (* (g$sign$5846$7lS0C g$n1$5853$7lS0C)
             (g$sign$5846$7lS0C g$n2$5854$7lS0C)
             (div (abs g$n1$5853$7lS0C) (abs g$n2$5854$7lS0C)))))))
   (g$remainder$5848$7lS0C
     g$remainder$5866$7lS0C
     (case-lambda
       ((g$n1$5855$7lS0C g$n2$5856$7lS0C)
        (begin
          (if (not (integer-valued? g$n1$5855$7lS0C))
            (assertion-violation 'remainder '"not an integer" g$n1$5855$7lS0C)
            (void))
          (if (not (integer-valued? g$n2$5856$7lS0C))
            (assertion-violation 'remainder '"not an integer" g$n2$5856$7lS0C)
            (void))
          (* (g$sign$5846$7lS0C g$n1$5855$7lS0C)
             (mod (abs g$n1$5855$7lS0C) (abs g$n2$5856$7lS0C)))))))
   (g$modulo$5849$7lS0C
     g$modulo$5867$7lS0C
     (case-lambda
       ((g$n1$5857$7lS0C g$n2$5858$7lS0C)
        (begin
          (if (not (integer-valued? g$n1$5857$7lS0C))
            (assertion-violation 'modulo '"not an integer" g$n1$5857$7lS0C)
            (void))
          (if (not (integer-valued? g$n2$5858$7lS0C))
            (assertion-violation 'modulo '"not an integer" g$n2$5858$7lS0C)
            (void))
          (* (g$sign$5846$7lS0C g$n2$5858$7lS0C)
             (mod (* (g$sign$5846$7lS0C g$n2$5858$7lS0C) g$n1$5857$7lS0C)
                  (abs g$n2$5858$7lS0C)))))))
   (g$make-promise$5850$7lS0C
     g$make-promise$5868$7lS0C
     (case-lambda
       ((g$proc$5859$7lS0C)
        ((case-lambda
           ((g$result-ready?$5860$7lS0C g$result$5861$7lS0C)
            (case-lambda
              (()
               (if g$result-ready?$5860$7lS0C
                 g$result$5861$7lS0C
                 ((case-lambda
                    ((g$x$5862$7lS0C)
                     (if g$result-ready?$5860$7lS0C
                       g$result$5861$7lS0C
                       (begin
                         (set! g$result-ready?$5860$7lS0C '#t)
                         (set! g$result$5861$7lS0C g$x$5862$7lS0C)
                         g$result$5861$7lS0C))))
                  (g$proc$5859$7lS0C)))))))
         '#f
         '#f))))
   (g$force$5851$7lS0C
     g$force$5869$7lS0C
     (case-lambda ((g$object$5863$7lS0C) (g$object$5863$7lS0C)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5870$7lS0C
     g$split$5895$7lS0C
     (case-lambda
       ((g$ls$5874$7lS0C)
        ((letrec ((g$loop$5875$7lS0C
                    (case-lambda
                      ((g$rest$5876$7lS0C g$left$5877$7lS0C g$right$5878$7lS0C)
                       (if (null? g$rest$5876$7lS0C)
                         (cons g$left$5877$7lS0C g$right$5878$7lS0C)
                         (if (null? (cdr g$rest$5876$7lS0C))
                           (cons
                             (cons (car g$rest$5876$7lS0C) g$left$5877$7lS0C)
                             g$right$5878$7lS0C)
                           (g$loop$5875$7lS0C
                             (g$cddr$5225$7lS0C g$rest$5876$7lS0C)
                             (cons (car g$rest$5876$7lS0C) g$left$5877$7lS0C)
                             (cons
                               (g$cadr$5223$7lS0C g$rest$5876$7lS0C)
                               g$right$5878$7lS0C))))))))
           g$loop$5875$7lS0C)
         g$ls$5874$7lS0C
         '()
         '()))))
   (g$reverse-it$5871$7lS0C
     g$reverse-it$5896$7lS0C
     (case-lambda
       ((g$head$5879$7lS0C g$tail$5880$7lS0C)
        (if (null? g$head$5879$7lS0C)
          g$tail$5880$7lS0C
          (g$reverse-it$5871$7lS0C
            (cdr g$head$5879$7lS0C)
            (cons (car g$head$5879$7lS0C) g$tail$5880$7lS0C))))))
   (g$merge$5872$7lS0C
     g$merge$5897$7lS0C
     (case-lambda
       ((g$list-1$5881$7lS0C g$list-2$5882$7lS0C g$precedes?$5883$7lS0C)
        ((letrec ((g$loop$5884$7lS0C
                    (case-lambda
                      ((g$source-1$5885$7lS0C
                         g$source-2$5886$7lS0C
                         g$so-far$5887$7lS0C)
                       (if (null? g$source-1$5885$7lS0C)
                         (g$reverse-it$5871$7lS0C
                           g$so-far$5887$7lS0C
                           g$source-2$5886$7lS0C)
                         (if (null? g$source-2$5886$7lS0C)
                           (g$reverse-it$5871$7lS0C
                             g$so-far$5887$7lS0C
                             g$source-1$5885$7lS0C)
                           ((case-lambda
                              ((g$car-1$5888$7lS0C g$car-2$5889$7lS0C)
                               (if (g$precedes?$5883$7lS0C
                                     g$car-2$5889$7lS0C
                                     g$car-1$5888$7lS0C)
                                 (g$loop$5884$7lS0C
                                   g$source-1$5885$7lS0C
                                   (cdr g$source-2$5886$7lS0C)
                                   (cons
                                     g$car-2$5889$7lS0C
                                     g$so-far$5887$7lS0C))
                                 (g$loop$5884$7lS0C
                                   g$source-2$5886$7lS0C
                                   (cdr g$source-1$5885$7lS0C)
                                   (cons
                                     g$car-1$5888$7lS0C
                                     g$so-far$5887$7lS0C)))))
                            (car g$source-1$5885$7lS0C)
                            (car g$source-2$5886$7lS0C))))))))
           g$loop$5884$7lS0C)
         g$list-1$5881$7lS0C
         g$list-2$5882$7lS0C
         '()))))
   (g$list-sort$5873$7lS0C
     g$list-sort$5898$7lS0C
     (case-lambda
       ((g$precedes?$5890$7lS0C g$ls$5891$7lS0C)
        (if (null? g$ls$5891$7lS0C)
          '()
          ((letrec ((g$helper$5892$7lS0C
                      (case-lambda
                        ((g$piece$5893$7lS0C)
                         (if (null? (cdr g$piece$5893$7lS0C))
                           g$piece$5893$7lS0C
                           ((case-lambda
                              ((g$parts$5894$7lS0C)
                               (g$merge$5872$7lS0C
                                 (g$helper$5892$7lS0C (car g$parts$5894$7lS0C))
                                 (g$helper$5892$7lS0C (cdr g$parts$5894$7lS0C))
                                 g$precedes?$5890$7lS0C)))
                            (g$split$5870$7lS0C g$piece$5893$7lS0C)))))))
             g$helper$5892$7lS0C)
           g$ls$5891$7lS0C))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5905$7lS0C
     g$string-ci=?$5971$7lS0C
     (case-lambda
       ((g$a$5921$7lS0C g$b$5922$7lS0C . g$rest$5923$7lS0C)
        (begin
          (if (not (string? g$a$5921$7lS0C))
            (assertion-violation 'string-ci=? '"not a string" g$a$5921$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5924$7lS0C)
               (begin
                 (if (not (string? g$x$5924$7lS0C))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5924$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5925$7lS0C)
                     (begin
                       (set! g$a$5921$7lS0C g$x$5924$7lS0C)
                       g$r$5925$7lS0C)))
                  (= (string-ci-compare g$a$5921$7lS0C g$x$5924$7lS0C) '0)))))
            (cons g$b$5922$7lS0C g$rest$5923$7lS0C))))))
   (g$string-ci<?$5906$7lS0C
     g$string-ci<?$5972$7lS0C
     (case-lambda
       ((g$a$5926$7lS0C g$b$5927$7lS0C . g$rest$5928$7lS0C)
        (begin
          (if (not (string? g$a$5926$7lS0C))
            (assertion-violation 'string-ci<? '"not a string" g$a$5926$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5929$7lS0C)
               (begin
                 (if (not (string? g$x$5929$7lS0C))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5929$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5930$7lS0C)
                     (begin
                       (set! g$a$5926$7lS0C g$x$5929$7lS0C)
                       g$r$5930$7lS0C)))
                  (< (string-ci-compare g$a$5926$7lS0C g$x$5929$7lS0C) '0)))))
            (cons g$b$5927$7lS0C g$rest$5928$7lS0C))))))
   (g$string-ci>?$5907$7lS0C
     g$string-ci>?$5973$7lS0C
     (case-lambda
       ((g$a$5931$7lS0C g$b$5932$7lS0C . g$rest$5933$7lS0C)
        (begin
          (if (not (string? g$a$5931$7lS0C))
            (assertion-violation 'string-ci>? '"not a string" g$a$5931$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5934$7lS0C)
               (begin
                 (if (not (string? g$x$5934$7lS0C))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5934$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5935$7lS0C)
                     (begin
                       (set! g$a$5931$7lS0C g$x$5934$7lS0C)
                       g$r$5935$7lS0C)))
                  (> (string-ci-compare g$a$5931$7lS0C g$x$5934$7lS0C) '0)))))
            (cons g$b$5932$7lS0C g$rest$5933$7lS0C))))))
   (g$string-ci<=?$5908$7lS0C
     g$string-ci<=?$5974$7lS0C
     (case-lambda
       ((g$a$5936$7lS0C g$b$5937$7lS0C . g$rest$5938$7lS0C)
        (begin
          (if (not (string? g$a$5936$7lS0C))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5936$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5939$7lS0C)
               (begin
                 (if (not (string? g$x$5939$7lS0C))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5939$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5940$7lS0C)
                     (begin
                       (set! g$a$5936$7lS0C g$x$5939$7lS0C)
                       g$r$5940$7lS0C)))
                  (<= (string-ci-compare g$a$5936$7lS0C g$x$5939$7lS0C) '0)))))
            (cons g$b$5937$7lS0C g$rest$5938$7lS0C))))))
   (g$string-ci>=?$5909$7lS0C
     g$string-ci>=?$5975$7lS0C
     (case-lambda
       ((g$a$5941$7lS0C g$b$5942$7lS0C . g$rest$5943$7lS0C)
        (begin
          (if (not (string? g$a$5941$7lS0C))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5941$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5944$7lS0C)
               (begin
                 (if (not (string? g$x$5944$7lS0C))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5944$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5945$7lS0C)
                     (begin
                       (set! g$a$5941$7lS0C g$x$5944$7lS0C)
                       g$r$5945$7lS0C)))
                  (>= (string-ci-compare g$a$5941$7lS0C g$x$5944$7lS0C) '0)))))
            (cons g$b$5942$7lS0C g$rest$5943$7lS0C))))))
   (g$char-ci=?$5916$7lS0C
     g$char-ci=?$5976$7lS0C
     (case-lambda
       ((g$a$5946$7lS0C g$b$5947$7lS0C . g$rest$5948$7lS0C)
        (begin
          (if (not (char? g$a$5946$7lS0C))
            (assertion-violation 'char-ci=? '"not a char" g$a$5946$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5949$7lS0C)
               (begin
                 (if (not (char? g$x$5949$7lS0C))
                   (assertion-violation 'char-ci=? '"not a char" g$x$5949$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5950$7lS0C)
                     (begin
                       (set! g$a$5946$7lS0C g$x$5949$7lS0C)
                       g$r$5950$7lS0C)))
                  (= (char->integer (char-upcase g$a$5946$7lS0C))
                     (char->integer (char-upcase g$x$5949$7lS0C)))))))
            (cons g$b$5947$7lS0C g$rest$5948$7lS0C))))))
   (g$char-ci<?$5917$7lS0C
     g$char-ci<?$5977$7lS0C
     (case-lambda
       ((g$a$5951$7lS0C g$b$5952$7lS0C . g$rest$5953$7lS0C)
        (begin
          (if (not (char? g$a$5951$7lS0C))
            (assertion-violation 'char-ci<? '"not a char" g$a$5951$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5954$7lS0C)
               (begin
                 (if (not (char? g$x$5954$7lS0C))
                   (assertion-violation 'char-ci<? '"not a char" g$x$5954$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5955$7lS0C)
                     (begin
                       (set! g$a$5951$7lS0C g$x$5954$7lS0C)
                       g$r$5955$7lS0C)))
                  (< (char->integer (char-upcase g$a$5951$7lS0C))
                     (char->integer (char-upcase g$x$5954$7lS0C)))))))
            (cons g$b$5952$7lS0C g$rest$5953$7lS0C))))))
   (g$char-ci>?$5918$7lS0C
     g$char-ci>?$5978$7lS0C
     (case-lambda
       ((g$a$5956$7lS0C g$b$5957$7lS0C . g$rest$5958$7lS0C)
        (begin
          (if (not (char? g$a$5956$7lS0C))
            (assertion-violation 'char-ci>? '"not a char" g$a$5956$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5959$7lS0C)
               (begin
                 (if (not (char? g$x$5959$7lS0C))
                   (assertion-violation 'char-ci>? '"not a char" g$x$5959$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5960$7lS0C)
                     (begin
                       (set! g$a$5956$7lS0C g$x$5959$7lS0C)
                       g$r$5960$7lS0C)))
                  (> (char->integer (char-upcase g$a$5956$7lS0C))
                     (char->integer (char-upcase g$x$5959$7lS0C)))))))
            (cons g$b$5957$7lS0C g$rest$5958$7lS0C))))))
   (g$char-ci<=?$5919$7lS0C
     g$char-ci<=?$5979$7lS0C
     (case-lambda
       ((g$a$5961$7lS0C g$b$5962$7lS0C . g$rest$5963$7lS0C)
        (begin
          (if (not (char? g$a$5961$7lS0C))
            (assertion-violation 'char-ci<=? '"not a char" g$a$5961$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5964$7lS0C)
               (begin
                 (if (not (char? g$x$5964$7lS0C))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$5964$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5965$7lS0C)
                     (begin
                       (set! g$a$5961$7lS0C g$x$5964$7lS0C)
                       g$r$5965$7lS0C)))
                  (<= (char->integer (char-upcase g$a$5961$7lS0C))
                      (char->integer (char-upcase g$x$5964$7lS0C)))))))
            (cons g$b$5962$7lS0C g$rest$5963$7lS0C))))))
   (g$char-ci>=?$5920$7lS0C
     g$char-ci>=?$5980$7lS0C
     (case-lambda
       ((g$a$5966$7lS0C g$b$5967$7lS0C . g$rest$5968$7lS0C)
        (begin
          (if (not (char? g$a$5966$7lS0C))
            (assertion-violation 'char-ci>=? '"not a char" g$a$5966$7lS0C)
            (void))
          (g$for-all$5057$7lS0C
            (case-lambda
              ((g$x$5969$7lS0C)
               (begin
                 (if (not (char? g$x$5969$7lS0C))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$5969$7lS0C)
                   (void))
                 ((case-lambda
                    ((g$r$5970$7lS0C)
                     (begin
                       (set! g$a$5966$7lS0C g$x$5969$7lS0C)
                       g$r$5970$7lS0C)))
                  (>= (char->integer (char-upcase g$a$5966$7lS0C))
                      (char->integer (char-upcase g$x$5969$7lS0C)))))))
            (cons g$b$5967$7lS0C g$rest$5968$7lS0C)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5981$7lS0C
     g$bitwise-if$6012$7lS0C
     (case-lambda
       ((g$ei1$5988$7lS0C g$ei2$5989$7lS0C g$ei3$5990$7lS0C)
        (bitwise-ior
          (bitwise-and g$ei1$5988$7lS0C g$ei2$5989$7lS0C)
          (bitwise-and (bitwise-not g$ei1$5988$7lS0C) g$ei3$5990$7lS0C)))))
   (g$bitwise-copy-bit$5982$7lS0C
     g$bitwise-copy-bit$6013$7lS0C
     (case-lambda
       ((g$ei1$5991$7lS0C g$ei2$5992$7lS0C g$ei3$5993$7lS0C)
        (g$bitwise-if$5981$7lS0C
          (g$bitwise-arithmetic-shift-left$5985$7lS0C '1 g$ei2$5992$7lS0C)
          (g$bitwise-arithmetic-shift-left$5985$7lS0C
            g$ei3$5993$7lS0C
            g$ei2$5992$7lS0C)
          g$ei1$5991$7lS0C))))
   (g$bitwise-bit-field$5983$7lS0C
     g$bitwise-bit-field$6014$7lS0C
     (case-lambda
       ((g$ei1$5994$7lS0C g$ei2$5995$7lS0C g$ei3$5996$7lS0C)
        (g$bitwise-arithmetic-shift-right$5986$7lS0C
          (bitwise-and
            g$ei1$5994$7lS0C
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$5985$7lS0C
                '-1
                g$ei3$5996$7lS0C)))
          g$ei2$5995$7lS0C))))
   (g$bitwise-copy-bit-field$5984$7lS0C
     g$bitwise-copy-bit-field$6015$7lS0C
     (case-lambda
       ((g$to$5997$7lS0C g$start$5998$7lS0C g$end$5999$7lS0C g$from$6000$7lS0C)
        (g$bitwise-if$5981$7lS0C
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$5985$7lS0C '-1 g$start$5998$7lS0C)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$5985$7lS0C
                '-1
                g$end$5999$7lS0C)))
          (g$bitwise-arithmetic-shift-left$5985$7lS0C
            g$from$6000$7lS0C
            g$start$5998$7lS0C)
          g$to$5997$7lS0C))))
   (g$bitwise-arithmetic-shift-left$5985$7lS0C
     g$bitwise-arithmetic-shift-left$6016$7lS0C
     (case-lambda
       ((g$ei1$6001$7lS0C g$ei2$6002$7lS0C)
        (bitwise-arithmetic-shift g$ei1$6001$7lS0C g$ei2$6002$7lS0C))))
   (g$bitwise-arithmetic-shift-right$5986$7lS0C
     g$bitwise-arithmetic-shift-right$6017$7lS0C
     (case-lambda
       ((g$ei1$6003$7lS0C g$ei2$6004$7lS0C)
        (bitwise-arithmetic-shift g$ei1$6003$7lS0C (- g$ei2$6004$7lS0C)))))
   (g$bitwise-rotate-bit-field$5987$7lS0C
     g$bitwise-rotate-bit-field$6018$7lS0C
     (case-lambda
       ((g$n$6005$7lS0C g$start$6006$7lS0C g$end$6007$7lS0C g$count$6008$7lS0C)
        ((case-lambda
           ((g$width$6009$7lS0C)
            (if (positive? g$width$6009$7lS0C)
              ((case-lambda
                 ((g$count$6010$7lS0C g$field$6011$7lS0C)
                  (g$bitwise-copy-bit-field$5984$7lS0C
                    g$n$6005$7lS0C
                    g$start$6006$7lS0C
                    g$end$6007$7lS0C
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$5985$7lS0C
                        g$field$6011$7lS0C
                        g$count$6010$7lS0C)
                      (g$bitwise-arithmetic-shift-right$5986$7lS0C
                        g$field$6011$7lS0C
                        (- g$width$6009$7lS0C g$count$6010$7lS0C))))))
               (mod g$count$6008$7lS0C g$width$6009$7lS0C)
               (g$bitwise-bit-field$5983$7lS0C
                 g$n$6005$7lS0C
                 g$start$6006$7lS0C
                 g$end$6007$7lS0C))
              g$n$6005$7lS0C)))
         (- g$end$6007$7lS0C g$start$6006$7lS0C))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fx*/carry$6019$7lS0C
     g$fx*/carry$6068$7lS0C
     (case-lambda
       ((g$fx1$6029$7lS0C g$fx2$6030$7lS0C g$fx3$6031$7lS0C)
        ((case-lambda
           ((g$s$6032$7lS0C g$e$6033$7lS0C)
            (values
              (mod0 g$s$6032$7lS0C g$e$6033$7lS0C)
              (div0 g$s$6032$7lS0C g$e$6033$7lS0C))))
         (+ (* g$fx1$6029$7lS0C g$fx2$6030$7lS0C) g$fx3$6031$7lS0C)
         (expt '2 (fixnum-width))))))
   (g$fx-/carry$6020$7lS0C
     g$fx-/carry$6069$7lS0C
     (case-lambda
       ((g$fx1$6034$7lS0C g$fx2$6035$7lS0C g$fx3$6036$7lS0C)
        ((case-lambda
           ((g$s$6037$7lS0C g$e$6038$7lS0C)
            (values
              (mod0 g$s$6037$7lS0C g$e$6038$7lS0C)
              (div0 g$s$6037$7lS0C g$e$6038$7lS0C))))
         (- g$fx1$6034$7lS0C g$fx2$6035$7lS0C g$fx3$6036$7lS0C)
         (expt '2 (fixnum-width))))))
   (g$fx+/carry$6021$7lS0C
     g$fx+/carry$6070$7lS0C
     (case-lambda
       ((g$fx1$6039$7lS0C g$fx2$6040$7lS0C g$fx3$6041$7lS0C)
        ((case-lambda
           ((g$s$6042$7lS0C g$e$6043$7lS0C)
            (values
              (mod0 g$s$6042$7lS0C g$e$6043$7lS0C)
              (div0 g$s$6042$7lS0C g$e$6043$7lS0C))))
         (+ g$fx1$6039$7lS0C g$fx2$6040$7lS0C g$fx3$6041$7lS0C)
         (expt '2 (fixnum-width))))))
   (g$fxif$6022$7lS0C
     g$fxif$6071$7lS0C
     (case-lambda
       ((g$fx1$6044$7lS0C g$fx2$6045$7lS0C g$fx3$6046$7lS0C)
        (fxior
          (fxand g$fx1$6044$7lS0C g$fx2$6045$7lS0C)
          (fxand (fxnot g$fx1$6044$7lS0C) g$fx3$6046$7lS0C)))))
   (g$fxcopy-bit$6023$7lS0C
     g$fxcopy-bit$6072$7lS0C
     (case-lambda
       ((g$fx1$6047$7lS0C g$fx2$6048$7lS0C g$fx3$6049$7lS0C)
        (g$fxif$6022$7lS0C
          (g$fxarithmetic-shift-left$6026$7lS0C '1 g$fx2$6048$7lS0C)
          (g$fxarithmetic-shift-left$6026$7lS0C
            g$fx3$6049$7lS0C
            g$fx2$6048$7lS0C)
          g$fx1$6047$7lS0C))))
   (g$fxbit-field$6024$7lS0C
     g$fxbit-field$6073$7lS0C
     (case-lambda
       ((g$fx1$6050$7lS0C g$fx2$6051$7lS0C g$fx3$6052$7lS0C)
        (g$fxarithmetic-shift-right$6027$7lS0C
          (fxand
            g$fx1$6050$7lS0C
            (fxnot (g$fxarithmetic-shift-left$6026$7lS0C '-1 g$fx3$6052$7lS0C)))
          g$fx2$6051$7lS0C))))
   (g$fxcopy-bit-field$6025$7lS0C
     g$fxcopy-bit-field$6074$7lS0C
     (case-lambda
       ((g$to$6053$7lS0C g$start$6054$7lS0C g$end$6055$7lS0C g$from$6056$7lS0C)
        (g$fxif$6022$7lS0C
          (fxand
            (g$fxarithmetic-shift-left$6026$7lS0C '-1 g$start$6054$7lS0C)
            (fxnot (g$fxarithmetic-shift-left$6026$7lS0C '-1 g$end$6055$7lS0C)))
          (g$fxarithmetic-shift-left$6026$7lS0C
            g$from$6056$7lS0C
            g$start$6054$7lS0C)
          g$to$6053$7lS0C))))
   (g$fxarithmetic-shift-left$6026$7lS0C
     g$fxarithmetic-shift-left$6075$7lS0C
     (case-lambda
       ((g$fx1$6057$7lS0C g$fx2$6058$7lS0C)
        (fxarithmetic-shift g$fx1$6057$7lS0C g$fx2$6058$7lS0C))))
   (g$fxarithmetic-shift-right$6027$7lS0C
     g$fxarithmetic-shift-right$6076$7lS0C
     (case-lambda
       ((g$fx1$6059$7lS0C g$fx2$6060$7lS0C)
        (fxarithmetic-shift g$fx1$6059$7lS0C (fx- g$fx2$6060$7lS0C)))))
   (g$fxrotate-bit-field$6028$7lS0C
     g$fxrotate-bit-field$6077$7lS0C
     (case-lambda
       ((g$n$6061$7lS0C g$start$6062$7lS0C g$end$6063$7lS0C g$count$6064$7lS0C)
        ((case-lambda
           ((g$width$6065$7lS0C)
            (if (fxpositive? g$width$6065$7lS0C)
              ((case-lambda
                 ((g$count$6066$7lS0C g$field$6067$7lS0C)
                  (g$fxcopy-bit-field$6025$7lS0C
                    g$n$6061$7lS0C
                    g$start$6062$7lS0C
                    g$end$6063$7lS0C
                    (fxior
                      (g$fxarithmetic-shift-left$6026$7lS0C
                        g$field$6067$7lS0C
                        g$count$6066$7lS0C)
                      (g$fxarithmetic-shift-right$6027$7lS0C
                        g$field$6067$7lS0C
                        (fx- g$width$6065$7lS0C g$count$6066$7lS0C))))))
               (fxmod g$count$6064$7lS0C g$width$6065$7lS0C)
               (g$fxbit-field$6024$7lS0C
                 g$n$6061$7lS0C
                 g$start$6062$7lS0C
                 g$end$6063$7lS0C))
              g$n$6061$7lS0C)))
         (fx- g$end$6063$7lS0C g$start$6062$7lS0C))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7129$6078$7lS0C
     g$7129$6090$7lS0C
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7132$7lS0C
       '#f
       '#f
       '#()))
   (g$7131$6079$7lS0C g$7131$6091$7lS0C '#f)
   (g$7130$6080$7lS0C
     g$7130$6092$7lS0C
     (make-record-constructor-descriptor
       g$7129$6078$7lS0C
       &implementation-restriction-rcd
       g$7131$6079$7lS0C))
   (g$7128$6081$7lS0C
     g$7128$6093$7lS0C
     (record-predicate g$7129$6078$7lS0C))
   (g$make-no-infinities-violation$6082$7lS0C
     g$make-no-infinities-violation$6094$7lS0C
     (record-constructor g$7130$6080$7lS0C))
   (g$no-infinities-violation?$6083$7lS0C
     g$no-infinities-violation?$6095$7lS0C
     (condition-predicate g$7129$6078$7lS0C))
   (g$7143$6084$7lS0C
     g$7143$6096$7lS0C
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7146$7lS0C
       '#f
       '#f
       '#()))
   (g$7145$6085$7lS0C g$7145$6097$7lS0C '#f)
   (g$7144$6086$7lS0C
     g$7144$6098$7lS0C
     (make-record-constructor-descriptor
       g$7143$6084$7lS0C
       &implementation-restriction-rcd
       g$7145$6085$7lS0C))
   (g$7142$6087$7lS0C
     g$7142$6099$7lS0C
     (record-predicate g$7143$6084$7lS0C))
   (g$make-no-nans-violation$6088$7lS0C
     g$make-no-nans-violation$6100$7lS0C
     (record-constructor g$7144$6086$7lS0C))
   (g$no-nans-violation?$6089$7lS0C
     g$no-nans-violation?$6101$7lS0C
     (condition-predicate g$7143$6084$7lS0C)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7158$6102$7lS0C
     g$7158$6182$7lS0C
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7161$7lS0C
       '#f
       '#f
       '#()))
   (g$7160$6103$7lS0C g$7160$6183$7lS0C '#f)
   (g$7159$6104$7lS0C
     g$7159$6184$7lS0C
     (make-record-constructor-descriptor
       g$7158$6102$7lS0C
       &error-rcd
       g$7160$6103$7lS0C))
   (g$7157$6105$7lS0C
     g$7157$6185$7lS0C
     (record-predicate g$7158$6102$7lS0C))
   (g$make-i/o-error$6106$7lS0C
     g$make-i/o-error$6186$7lS0C
     (record-constructor g$7159$6104$7lS0C))
   (g$i/o-error?$6107$7lS0C
     g$i/o-error?$6187$7lS0C
     (condition-predicate g$7158$6102$7lS0C))
   (g$7172$6108$7lS0C
     g$7172$6188$7lS0C
     (make-record-type-descriptor
       '&i/o-read
       g$7158$6102$7lS0C
       'g$7175$7lS0C
       '#f
       '#f
       '#()))
   (g$7174$6109$7lS0C g$7174$6189$7lS0C '#f)
   (g$7173$6110$7lS0C
     g$7173$6190$7lS0C
     (make-record-constructor-descriptor
       g$7172$6108$7lS0C
       g$7159$6104$7lS0C
       g$7174$6109$7lS0C))
   (g$7171$6111$7lS0C
     g$7171$6191$7lS0C
     (record-predicate g$7172$6108$7lS0C))
   (g$make-i/o-read-error$6112$7lS0C
     g$make-i/o-read-error$6192$7lS0C
     (record-constructor g$7173$6110$7lS0C))
   (g$i/o-read-error?$6113$7lS0C
     g$i/o-read-error?$6193$7lS0C
     (condition-predicate g$7172$6108$7lS0C))
   (g$7186$6114$7lS0C
     g$7186$6194$7lS0C
     (make-record-type-descriptor
       '&i/o-write
       g$7158$6102$7lS0C
       'g$7189$7lS0C
       '#f
       '#f
       '#()))
   (g$7188$6115$7lS0C g$7188$6195$7lS0C '#f)
   (g$7187$6116$7lS0C
     g$7187$6196$7lS0C
     (make-record-constructor-descriptor
       g$7186$6114$7lS0C
       g$7159$6104$7lS0C
       g$7188$6115$7lS0C))
   (g$7185$6117$7lS0C
     g$7185$6197$7lS0C
     (record-predicate g$7186$6114$7lS0C))
   (g$make-i/o-write-error$6118$7lS0C
     g$make-i/o-write-error$6198$7lS0C
     (record-constructor g$7187$6116$7lS0C))
   (g$i/o-write-error?$6119$7lS0C
     g$i/o-write-error?$6199$7lS0C
     (condition-predicate g$7186$6114$7lS0C))
   (g$7201$6120$7lS0C
     g$7201$6200$7lS0C
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7158$6102$7lS0C
       'g$7204$7lS0C
       '#f
       '#f
       '#((immutable position))))
   (g$7203$6121$7lS0C g$7203$6201$7lS0C '#f)
   (g$7202$6122$7lS0C
     g$7202$6202$7lS0C
     (make-record-constructor-descriptor
       g$7201$6120$7lS0C
       g$7159$6104$7lS0C
       g$7203$6121$7lS0C))
   (g$7200$6123$7lS0C
     g$7200$6203$7lS0C
     (record-predicate g$7201$6120$7lS0C))
   (g$make-i/o-invalid-position-error$6124$7lS0C
     g$make-i/o-invalid-position-error$6204$7lS0C
     (record-constructor g$7202$6122$7lS0C))
   (g$7199$6125$7lS0C
     g$7199$6205$7lS0C
     (record-accessor g$7201$6120$7lS0C '0))
   (g$i/o-invalid-position-error?$6126$7lS0C
     g$i/o-invalid-position-error?$6206$7lS0C
     (condition-predicate g$7201$6120$7lS0C))
   (g$i/o-error-position$6127$7lS0C
     g$i/o-error-position$6207$7lS0C
     (condition-accessor g$7201$6120$7lS0C g$7199$6125$7lS0C))
   (g$7218$6128$7lS0C
     g$7218$6208$7lS0C
     (make-record-type-descriptor
       '&i/o-filename
       g$7158$6102$7lS0C
       'g$7221$7lS0C
       '#f
       '#f
       '#((immutable filename))))
   (g$7220$6129$7lS0C g$7220$6209$7lS0C '#f)
   (g$7219$6130$7lS0C
     g$7219$6210$7lS0C
     (make-record-constructor-descriptor
       g$7218$6128$7lS0C
       g$7159$6104$7lS0C
       g$7220$6129$7lS0C))
   (g$7217$6131$7lS0C
     g$7217$6211$7lS0C
     (record-predicate g$7218$6128$7lS0C))
   (g$make-i/o-filename-error$6132$7lS0C
     g$make-i/o-filename-error$6212$7lS0C
     (record-constructor g$7219$6130$7lS0C))
   (g$7216$6133$7lS0C
     g$7216$6213$7lS0C
     (record-accessor g$7218$6128$7lS0C '0))
   (g$i/o-filename-error?$6134$7lS0C
     g$i/o-filename-error?$6214$7lS0C
     (condition-predicate g$7218$6128$7lS0C))
   (g$i/o-error-filename$6135$7lS0C
     g$i/o-error-filename$6215$7lS0C
     (condition-accessor g$7218$6128$7lS0C g$7216$6133$7lS0C))
   (g$7234$6136$7lS0C
     g$7234$6216$7lS0C
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7218$6128$7lS0C
       'g$7237$7lS0C
       '#f
       '#f
       '#()))
   (g$7236$6137$7lS0C g$7236$6217$7lS0C '#f)
   (g$7235$6138$7lS0C
     g$7235$6218$7lS0C
     (make-record-constructor-descriptor
       g$7234$6136$7lS0C
       g$7219$6130$7lS0C
       g$7236$6137$7lS0C))
   (g$7233$6139$7lS0C
     g$7233$6219$7lS0C
     (record-predicate g$7234$6136$7lS0C))
   (g$make-i/o-file-protection-error$6140$7lS0C
     g$make-i/o-file-protection-error$6220$7lS0C
     (record-constructor g$7235$6138$7lS0C))
   (g$i/o-file-protection-error?$6141$7lS0C
     g$i/o-file-protection-error?$6221$7lS0C
     (condition-predicate g$7234$6136$7lS0C))
   (g$7248$6142$7lS0C
     g$7248$6222$7lS0C
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7234$6136$7lS0C
       'g$7251$7lS0C
       '#f
       '#f
       '#()))
   (g$7250$6143$7lS0C g$7250$6223$7lS0C '#f)
   (g$7249$6144$7lS0C
     g$7249$6224$7lS0C
     (make-record-constructor-descriptor
       g$7248$6142$7lS0C
       g$7235$6138$7lS0C
       g$7250$6143$7lS0C))
   (g$7247$6145$7lS0C
     g$7247$6225$7lS0C
     (record-predicate g$7248$6142$7lS0C))
   (g$make-i/o-file-is-read-only-error$6146$7lS0C
     g$make-i/o-file-is-read-only-error$6226$7lS0C
     (record-constructor g$7249$6144$7lS0C))
   (g$i/o-file-is-read-only-error?$6147$7lS0C
     g$i/o-file-is-read-only-error?$6227$7lS0C
     (condition-predicate g$7248$6142$7lS0C))
   (g$7262$6148$7lS0C
     g$7262$6228$7lS0C
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7218$6128$7lS0C
       'g$7265$7lS0C
       '#f
       '#f
       '#()))
   (g$7264$6149$7lS0C g$7264$6229$7lS0C '#f)
   (g$7263$6150$7lS0C
     g$7263$6230$7lS0C
     (make-record-constructor-descriptor
       g$7262$6148$7lS0C
       g$7219$6130$7lS0C
       g$7264$6149$7lS0C))
   (g$7261$6151$7lS0C
     g$7261$6231$7lS0C
     (record-predicate g$7262$6148$7lS0C))
   (g$make-i/o-file-already-exists-error$6152$7lS0C
     g$make-i/o-file-already-exists-error$6232$7lS0C
     (record-constructor g$7263$6150$7lS0C))
   (g$i/o-file-already-exists-error?$6153$7lS0C
     g$i/o-file-already-exists-error?$6233$7lS0C
     (condition-predicate g$7262$6148$7lS0C))
   (g$7276$6154$7lS0C
     g$7276$6234$7lS0C
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7218$6128$7lS0C
       'g$7279$7lS0C
       '#f
       '#f
       '#()))
   (g$7278$6155$7lS0C g$7278$6235$7lS0C '#f)
   (g$7277$6156$7lS0C
     g$7277$6236$7lS0C
     (make-record-constructor-descriptor
       g$7276$6154$7lS0C
       g$7219$6130$7lS0C
       g$7278$6155$7lS0C))
   (g$7275$6157$7lS0C
     g$7275$6237$7lS0C
     (record-predicate g$7276$6154$7lS0C))
   (g$make-i/o-file-does-not-exist-error$6158$7lS0C
     g$make-i/o-file-does-not-exist-error$6238$7lS0C
     (record-constructor g$7277$6156$7lS0C))
   (g$i/o-file-does-not-exist-error?$6159$7lS0C
     g$i/o-file-does-not-exist-error?$6239$7lS0C
     (condition-predicate g$7276$6154$7lS0C))
   (g$7291$6160$7lS0C
     g$7291$6240$7lS0C
     (make-record-type-descriptor
       '&i/o-port
       g$7158$6102$7lS0C
       'g$7294$7lS0C
       '#f
       '#f
       '#((immutable port))))
   (g$7293$6161$7lS0C g$7293$6241$7lS0C '#f)
   (g$7292$6162$7lS0C
     g$7292$6242$7lS0C
     (make-record-constructor-descriptor
       g$7291$6160$7lS0C
       g$7159$6104$7lS0C
       g$7293$6161$7lS0C))
   (g$7290$6163$7lS0C
     g$7290$6243$7lS0C
     (record-predicate g$7291$6160$7lS0C))
   (g$make-i/o-port-error$6164$7lS0C
     g$make-i/o-port-error$6244$7lS0C
     (record-constructor g$7292$6162$7lS0C))
   (g$7289$6165$7lS0C
     g$7289$6245$7lS0C
     (record-accessor g$7291$6160$7lS0C '0))
   (g$i/o-port-error?$6166$7lS0C
     g$i/o-port-error?$6246$7lS0C
     (condition-predicate g$7291$6160$7lS0C))
   (g$i/o-error-port$6167$7lS0C
     g$i/o-error-port$6247$7lS0C
     (condition-accessor g$7291$6160$7lS0C g$7289$6165$7lS0C))
   (g$7307$6168$7lS0C
     g$7307$6248$7lS0C
     (make-record-type-descriptor
       '&i/o-decoding
       g$7291$6160$7lS0C
       'g$7310$7lS0C
       '#f
       '#f
       '#()))
   (g$7309$6169$7lS0C g$7309$6249$7lS0C '#f)
   (g$7308$6170$7lS0C
     g$7308$6250$7lS0C
     (make-record-constructor-descriptor
       g$7307$6168$7lS0C
       g$7292$6162$7lS0C
       g$7309$6169$7lS0C))
   (g$7306$6171$7lS0C
     g$7306$6251$7lS0C
     (record-predicate g$7307$6168$7lS0C))
   (g$make-i/o-decoding-error$6172$7lS0C
     g$make-i/o-decoding-error$6252$7lS0C
     (record-constructor g$7308$6170$7lS0C))
   (g$i/o-decoding-error?$6173$7lS0C
     g$i/o-decoding-error?$6253$7lS0C
     (condition-predicate g$7307$6168$7lS0C))
   (g$7322$6174$7lS0C
     g$7322$6254$7lS0C
     (make-record-type-descriptor
       '&i/o-encoding
       g$7291$6160$7lS0C
       'g$7325$7lS0C
       '#f
       '#f
       '#((immutable char))))
   (g$7324$6175$7lS0C g$7324$6255$7lS0C '#f)
   (g$7323$6176$7lS0C
     g$7323$6256$7lS0C
     (make-record-constructor-descriptor
       g$7322$6174$7lS0C
       g$7292$6162$7lS0C
       g$7324$6175$7lS0C))
   (g$7321$6177$7lS0C
     g$7321$6257$7lS0C
     (record-predicate g$7322$6174$7lS0C))
   (g$make-i/o-encoding-error$6178$7lS0C
     g$make-i/o-encoding-error$6258$7lS0C
     (record-constructor g$7323$6176$7lS0C))
   (g$7320$6179$7lS0C
     g$7320$6259$7lS0C
     (record-accessor g$7322$6174$7lS0C '0))
   (g$i/o-encoding-error?$6180$7lS0C
     g$i/o-encoding-error?$6260$7lS0C
     (condition-predicate g$7322$6174$7lS0C))
   (g$i/o-encoding-error-char$6181$7lS0C
     g$i/o-encoding-error-char$6261$7lS0C
     (condition-accessor g$7322$6174$7lS0C g$7320$6179$7lS0C)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$6263$7lS0C
     g$using$6275$7lS0C
     (clr-using-internal 'ironscheme.runtime))
   (g$get-output-string$6264$7lS0C
     g$get-output-string$6276$7lS0C
     (case-lambda
       ((g$port$6269$7lS0C)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6269$7lS0C))))
   (g$open-output-string$6265$7lS0C
     g$open-output-string$6277$7lS0C
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6266$7lS0C
     g$open-string-output-port$6278$7lS0C
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6270$7lS0C)
            (values
              g$p$6270$7lS0C
              (case-lambda
                (() (g$get-output-string$6264$7lS0C g$p$6270$7lS0C))))))
         (g$open-output-string$6265$7lS0C)))))
   (g$port?$6267$7lS0C
     g$port?$6279$7lS0C
     (case-lambda
       ((g$obj$6271$7lS0C)
        ((case-lambda
           ((g$t$6272$7lS0C)
            (if g$t$6272$7lS0C
              g$t$6272$7lS0C
              (begin '#f (binary-port? g$obj$6271$7lS0C)))))
         (textual-port? g$obj$6271$7lS0C)))))
   (g$call-with-string-output-port$6268$7lS0C
     g$call-with-string-output-port$6280$7lS0C
     (case-lambda
       ((g$proc$6273$7lS0C)
        ((case-lambda
           ((g$p$6274$7lS0C)
            (begin
              (call-with-port g$p$6274$7lS0C g$proc$6273$7lS0C)
              (g$get-output-string$6264$7lS0C g$p$6274$7lS0C))))
         (g$open-output-string$6265$7lS0C))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$with-input-from-file$6287$7lS0C
     g$with-input-from-file$6313$7lS0C
     (case-lambda
       ((g$filename$6291$7lS0C g$thunk$6292$7lS0C)
        ((case-lambda
           ((g$current-input-port$6295$7lS0C g$t$6296$7lS0C)
            ((case-lambda
               ((g$swap$6297$7lS0C)
                (dynamic-wind
                  g$swap$6297$7lS0C
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6292$7lS0C)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6297$7lS0C)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6298$7lS0C)
                    (begin
                      (g$current-input-port$6295$7lS0C g$t$6296$7lS0C)
                      (set! g$t$6296$7lS0C g$t$6298$7lS0C))))
                 (g$current-input-port$6295$7lS0C)))))))
         current-input-port
         (open-input-file g$filename$6291$7lS0C)))))
   (g$with-output-to-file$6288$7lS0C
     g$with-output-to-file$6314$7lS0C
     (case-lambda
       ((g$filename$6299$7lS0C g$thunk$6300$7lS0C)
        ((case-lambda
           ((g$current-output-port$6303$7lS0C g$t$6304$7lS0C)
            ((case-lambda
               ((g$swap$6305$7lS0C)
                (dynamic-wind
                  g$swap$6305$7lS0C
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6300$7lS0C)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6305$7lS0C)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6306$7lS0C)
                    (begin
                      (g$current-output-port$6303$7lS0C g$t$6304$7lS0C)
                      (set! g$t$6304$7lS0C g$t$6306$7lS0C))))
                 (g$current-output-port$6303$7lS0C)))))))
         current-output-port
         (open-output-file g$filename$6299$7lS0C)))))
   (g$call-with-input-file$6289$7lS0C
     g$call-with-input-file$6315$7lS0C
     (case-lambda
       ((g$filename$6307$7lS0C g$proc$6308$7lS0C)
        ((case-lambda
           ((g$p$6309$7lS0C)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6308$7lS0C g$p$6309$7lS0C)))
              (case-lambda (() (close-input-port g$p$6309$7lS0C))))))
         (open-input-file g$filename$6307$7lS0C)))))
   (g$call-with-output-file$6290$7lS0C
     g$call-with-output-file$6316$7lS0C
     (case-lambda
       ((g$filename$6310$7lS0C g$proc$6311$7lS0C)
        ((case-lambda
           ((g$p$6312$7lS0C)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6311$7lS0C g$p$6312$7lS0C)))
              (case-lambda (() (close-output-port g$p$6312$7lS0C))))))
         (open-output-file g$filename$6310$7lS0C))))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7393$6317$7lS0C
     g$7393$6426$7lS0C
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7395$6318$7lS0C g$7395$6427$7lS0C '#f)
   (g$7394$6319$7lS0C
     g$7394$6428$7lS0C
     (make-record-constructor-descriptor
       g$7393$6317$7lS0C
       '#f
       g$7395$6318$7lS0C))
   (g$enum?$6320$7lS0C
     g$enum?$6429$7lS0C
     (record-predicate g$7393$6317$7lS0C))
   (g$make-enum$6321$7lS0C
     g$make-enum$6430$7lS0C
     (record-constructor g$7394$6319$7lS0C))
   (g$enum-value$6322$7lS0C
     g$enum-value$6431$7lS0C
     (record-accessor g$7393$6317$7lS0C '0))
   (g$enum-info$6323$7lS0C
     g$enum-info$6432$7lS0C
     (record-accessor g$7393$6317$7lS0C '1))
   (g$7406$6324$7lS0C
     g$7406$6433$7lS0C
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7408$6325$7lS0C g$7408$6434$7lS0C '#f)
   (g$7407$6326$7lS0C
     g$7407$6435$7lS0C
     (make-record-constructor-descriptor
       g$7406$6324$7lS0C
       '#f
       g$7408$6325$7lS0C))
   (g$enum-universe?$6327$7lS0C
     g$enum-universe?$6436$7lS0C
     (record-predicate g$7406$6324$7lS0C))
   (g$make-enum-universe$6328$7lS0C
     g$make-enum-universe$6437$7lS0C
     (record-constructor g$7407$6326$7lS0C))
   (g$enum-universe-id$6329$7lS0C
     g$enum-universe-id$6438$7lS0C
     (record-accessor g$7406$6324$7lS0C '0))
   (g$enum-universe-symbols$6330$7lS0C
     g$enum-universe-symbols$6439$7lS0C
     (record-accessor g$7406$6324$7lS0C '1))
   (g$enum-universe-mapping$6331$7lS0C
     g$enum-universe-mapping$6440$7lS0C
     (record-accessor g$7406$6324$7lS0C '2))
   (g$enum-universe-value$6332$7lS0C
     g$enum-universe-value$6441$7lS0C
     (record-accessor g$7406$6324$7lS0C '3))
   (g$enum-type=?$6333$7lS0C
     g$enum-type=?$6442$7lS0C
     (case-lambda
       ((g$enumset1$6355$7lS0C g$enumset2$6356$7lS0C)
        (eq? (g$enum-universe-id$6329$7lS0C
               (g$enum-info$6323$7lS0C g$enumset1$6355$7lS0C))
             (g$enum-universe-id$6329$7lS0C
               (g$enum-info$6323$7lS0C g$enumset2$6356$7lS0C))))))
   (g$get-symbols$6334$7lS0C
     g$get-symbols$6443$7lS0C
     (case-lambda
       ((g$enumset$6357$7lS0C)
        (g$enum-universe-symbols$6330$7lS0C
          (g$enum-info$6323$7lS0C g$enumset$6357$7lS0C)))))
   (g$get-value$6335$7lS0C
     g$get-value$6444$7lS0C
     (case-lambda
       ((g$enumset$6358$7lS0C g$s$6359$7lS0C)
        (g$hashtable-ref$5491$7lS0C
          (g$enum-universe-mapping$6331$7lS0C
            (g$enum-info$6323$7lS0C g$enumset$6358$7lS0C))
          g$s$6359$7lS0C
          '#f))))
   (g$assert-enum$6336$7lS0C
     g$assert-enum$6445$7lS0C
     (case-lambda
       ((g$who$6360$7lS0C g$enumset$6361$7lS0C)
        (if (not (g$enum?$6320$7lS0C g$enumset$6361$7lS0C))
          (assertion-violation
            g$who$6360$7lS0C
            '"not an enumeration"
            g$enumset$6361$7lS0C)
          (void)))))
   (g$make-info$6337$7lS0C
     g$make-info$6446$7lS0C
     (case-lambda
       ((g$symbols$6362$7lS0C)
        ((case-lambda
           ((g$ht$6363$7lS0C)
            ((letrec ((g$f$6364$7lS0C
                        (case-lambda
                          ((g$s$6365$7lS0C g$a$6366$7lS0C g$mask$6367$7lS0C)
                           (if (null? g$s$6365$7lS0C)
                             (values
                               (reverse! g$a$6366$7lS0C)
                               g$ht$6363$7lS0C
                               (- g$mask$6367$7lS0C '1))
                             ((case-lambda
                                ((g$n$6368$7lS0C)
                                 (if (symbol? g$n$6368$7lS0C)
                                   (if (g$hashtable-contains?$5494$7lS0C
                                         g$ht$6363$7lS0C
                                         g$n$6368$7lS0C)
                                     (g$f$6364$7lS0C
                                       (cdr g$s$6365$7lS0C)
                                       g$a$6366$7lS0C
                                       g$mask$6367$7lS0C)
                                     (begin
                                       (g$hashtable-set!$5492$7lS0C
                                         g$ht$6363$7lS0C
                                         g$n$6368$7lS0C
                                         g$mask$6367$7lS0C)
                                       (g$f$6364$7lS0C
                                         (cdr g$s$6365$7lS0C)
                                         (cons g$n$6368$7lS0C g$a$6366$7lS0C)
                                         (g$bitwise-arithmetic-shift-left$6016$7lS0C
                                           g$mask$6367$7lS0C
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6368$7lS0C))))
                              (car g$s$6365$7lS0C)))))))
               g$f$6364$7lS0C)
             g$symbols$6362$7lS0C
             '()
             '1)))
         (g$make-eq-hashtable$5488$7lS0C)))))
   (g$make-name$6338$7lS0C
     g$make-name$6447$7lS0C
     (case-lambda
       ((g$symbols$6369$7lS0C)
        (string->symbol (g$format$6486$7lS0C '"~a" g$symbols$6369$7lS0C)))))
   (g$make-enumeration$6339$7lS0C
     g$make-enumeration$6448$7lS0C
     (case-lambda
       ((g$symbols$6370$7lS0C)
        (call-with-values
          (case-lambda (() (g$make-info$6337$7lS0C g$symbols$6370$7lS0C)))
          (case-lambda
            ((g$s$6374$7lS0C g$mapping$6375$7lS0C g$mask$6376$7lS0C)
             ((case-lambda
                ((g$mask$6377$7lS0C g$mapping$6378$7lS0C g$s$6379$7lS0C)
                 (g$make-enum$6321$7lS0C
                   g$mask$6377$7lS0C
                   (g$make-enum-universe$6328$7lS0C
                     (g$make-name$6338$7lS0C g$s$6379$7lS0C)
                     g$s$6379$7lS0C
                     g$mapping$6378$7lS0C
                     g$mask$6377$7lS0C))))
              g$mask$6376$7lS0C
              g$mapping$6375$7lS0C
              g$s$6374$7lS0C)))))))
   (g$enum-set-universe$6340$7lS0C
     g$enum-set-universe$6449$7lS0C
     (case-lambda
       ((g$enumset$6380$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set-universe g$enumset$6380$7lS0C)
          ((case-lambda
             ((g$ei$6381$7lS0C)
              (g$make-enum$6321$7lS0C
                (g$enum-universe-value$6332$7lS0C g$ei$6381$7lS0C)
                g$ei$6381$7lS0C)))
           (g$enum-info$6323$7lS0C g$enumset$6380$7lS0C))))))
   (g$enum-set-indexer$6341$7lS0C
     g$enum-set-indexer$6450$7lS0C
     (case-lambda
       ((g$enumset$6382$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set-indexer g$enumset$6382$7lS0C)
          (case-lambda
            ((g$symbol$6383$7lS0C)
             (begin
               (if (not (symbol? g$symbol$6383$7lS0C))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6383$7lS0C)
                 (void))
               ((case-lambda
                  ((g$v$6384$7lS0C)
                   (if g$v$6384$7lS0C
                     (- (bitwise-length g$v$6384$7lS0C) '1)
                     '#f)))
                (g$get-value$6335$7lS0C
                  g$enumset$6382$7lS0C
                  g$symbol$6383$7lS0C)))))))))
   (g$enum-set-constructor$6342$7lS0C
     g$enum-set-constructor$6451$7lS0C
     (case-lambda
       ((g$enumset$6385$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set-constructor g$enumset$6385$7lS0C)
          (case-lambda
            ((g$symbols$6386$7lS0C)
             ((letrec ((g$f$6387$7lS0C
                         (case-lambda
                           ((g$v$6388$7lS0C g$s$6389$7lS0C)
                            (if (null? g$s$6389$7lS0C)
                              (g$make-enum$6321$7lS0C
                                g$v$6388$7lS0C
                                (g$enum-info$6323$7lS0C g$enumset$6385$7lS0C))
                              ((case-lambda
                                 ((g$n$6390$7lS0C)
                                  (if (symbol? g$n$6390$7lS0C)
                                    ((case-lambda
                                       ((g$v*$6391$7lS0C)
                                        (if g$v*$6391$7lS0C
                                          (g$f$6387$7lS0C
                                            (bitwise-ior
                                              g$v$6388$7lS0C
                                              g$v*$6391$7lS0C)
                                            (cdr g$s$6389$7lS0C))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6390$7lS0C))))
                                     (g$get-value$6335$7lS0C
                                       g$enumset$6385$7lS0C
                                       g$n$6390$7lS0C))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6390$7lS0C))))
                               (car g$s$6389$7lS0C)))))))
                g$f$6387$7lS0C)
              '0
              g$symbols$6386$7lS0C)))))))
   (g$enum-set->list$6343$7lS0C
     g$enum-set->list$6452$7lS0C
     (case-lambda
       ((g$enumset$6392$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set->list g$enumset$6392$7lS0C)
          ((case-lambda
             ((g$value$6393$7lS0C)
              ((letrec ((g$f$6394$7lS0C
                          (case-lambda
                            ((g$s$6395$7lS0C g$l$6396$7lS0C)
                             (if (null? g$s$6395$7lS0C)
                               (reverse! g$l$6396$7lS0C)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6335$7lS0C
                                         g$enumset$6392$7lS0C
                                         (car g$s$6395$7lS0C))
                                       g$value$6393$7lS0C))
                                 (g$f$6394$7lS0C
                                   (cdr g$s$6395$7lS0C)
                                   g$l$6396$7lS0C)
                                 (g$f$6394$7lS0C
                                   (cdr g$s$6395$7lS0C)
                                   (cons
                                     (car g$s$6395$7lS0C)
                                     g$l$6396$7lS0C))))))))
                 g$f$6394$7lS0C)
               (g$get-symbols$6334$7lS0C g$enumset$6392$7lS0C)
               '())))
           (g$enum-value$6322$7lS0C g$enumset$6392$7lS0C))))))
   (g$enum-set-member?$6344$7lS0C
     g$enum-set-member?$6453$7lS0C
     (case-lambda
       ((g$symbol$6397$7lS0C g$enumset$6398$7lS0C)
        (begin
          (if (not (symbol? g$symbol$6397$7lS0C))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6397$7lS0C)
            (void))
          (g$assert-enum$6336$7lS0C 'enum-set-member? g$enumset$6398$7lS0C)
          ((case-lambda
             ((g$v$6399$7lS0C)
              (if g$v$6399$7lS0C
                (not (zero?
                       (bitwise-and
                         g$v$6399$7lS0C
                         (g$enum-value$6322$7lS0C g$enumset$6398$7lS0C))))
                '#f)))
           (g$get-value$6335$7lS0C
             g$enumset$6398$7lS0C
             g$symbol$6397$7lS0C))))))
   (g$enum-set-subset?$6345$7lS0C
     g$enum-set-subset?$6454$7lS0C
     (case-lambda
       ((g$enumset1$6400$7lS0C g$enumset2$6401$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set-subset? g$enumset1$6400$7lS0C)
          (g$assert-enum$6336$7lS0C 'enum-set-subset? g$enumset2$6401$7lS0C)
          ((case-lambda
             ((g$v1$6402$7lS0C g$v2$6403$7lS0C)
              (if (g$enum-type=?$6333$7lS0C
                    g$enumset1$6400$7lS0C
                    g$enumset2$6401$7lS0C)
                (= (bitwise-and g$v1$6402$7lS0C g$v2$6403$7lS0C)
                   g$v1$6402$7lS0C)
                ((letrec ((g$f$6404$7lS0C
                            (case-lambda
                              ((g$s$6405$7lS0C)
                               (if (null? g$s$6405$7lS0C)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6406$7lS0C g$v2*$6407$7lS0C)
                                     (if g$v2*$6407$7lS0C
                                       ((case-lambda
                                          ((g$has1$6408$7lS0C g$has2$6409$7lS0C)
                                           (if (if g$has1$6408$7lS0C
                                                 (begin
                                                   '#f
                                                   (not g$has2$6409$7lS0C))
                                                 '#f)
                                             '#f
                                             (g$f$6404$7lS0C
                                               (cdr g$s$6405$7lS0C)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$6402$7lS0C
                                                 g$v1*$6406$7lS0C)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$6403$7lS0C
                                                 g$v2*$6407$7lS0C))))
                                       '#f)))
                                  (g$get-value$6335$7lS0C
                                    g$enumset1$6400$7lS0C
                                    (car g$s$6405$7lS0C))
                                  (g$get-value$6335$7lS0C
                                    g$enumset2$6401$7lS0C
                                    (car g$s$6405$7lS0C))))))))
                   g$f$6404$7lS0C)
                 (g$get-symbols$6334$7lS0C g$enumset1$6400$7lS0C)))))
           (g$enum-value$6322$7lS0C g$enumset1$6400$7lS0C)
           (g$enum-value$6322$7lS0C g$enumset2$6401$7lS0C))))))
   (g$enum-set=?$6346$7lS0C
     g$enum-set=?$6455$7lS0C
     (case-lambda
       ((g$enumset1$6410$7lS0C g$enumset2$6411$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set=? g$enumset1$6410$7lS0C)
          (g$assert-enum$6336$7lS0C 'enum-set=? g$enumset2$6411$7lS0C)
          (if (g$enum-set-subset?$6345$7lS0C
                g$enumset1$6410$7lS0C
                g$enumset2$6411$7lS0C)
            (begin
              '#f
              (g$enum-set-subset?$6345$7lS0C
                g$enumset2$6411$7lS0C
                g$enumset1$6410$7lS0C))
            '#f)))))
   (g$enum-set-union$6347$7lS0C
     g$enum-set-union$6456$7lS0C
     (case-lambda
       ((g$enumset1$6412$7lS0C g$enumset2$6413$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set-union g$enumset1$6412$7lS0C)
          (g$assert-enum$6336$7lS0C 'enum-set-union g$enumset2$6413$7lS0C)
          (if (g$enum-type=?$6333$7lS0C
                g$enumset1$6412$7lS0C
                g$enumset2$6413$7lS0C)
            (g$make-enum$6321$7lS0C
              (bitwise-ior
                (g$enum-value$6322$7lS0C g$enumset1$6412$7lS0C)
                (g$enum-value$6322$7lS0C g$enumset2$6413$7lS0C))
              (g$enum-info$6323$7lS0C g$enumset1$6412$7lS0C))
            '#f)))))
   (g$enum-set-intersection$6348$7lS0C
     g$enum-set-intersection$6457$7lS0C
     (case-lambda
       ((g$enumset1$6414$7lS0C g$enumset2$6415$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C
            'enum-set-intersection
            g$enumset1$6414$7lS0C)
          (g$assert-enum$6336$7lS0C
            'enum-set-intersection
            g$enumset2$6415$7lS0C)
          (if (g$enum-type=?$6333$7lS0C
                g$enumset1$6414$7lS0C
                g$enumset2$6415$7lS0C)
            (g$make-enum$6321$7lS0C
              (bitwise-and
                (g$enum-value$6322$7lS0C g$enumset1$6414$7lS0C)
                (g$enum-value$6322$7lS0C g$enumset2$6415$7lS0C))
              (g$enum-info$6323$7lS0C g$enumset1$6414$7lS0C))
            '#f)))))
   (g$enum-set-difference$6349$7lS0C
     g$enum-set-difference$6458$7lS0C
     (case-lambda
       ((g$enumset1$6416$7lS0C g$enumset2$6417$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set-difference g$enumset1$6416$7lS0C)
          (g$assert-enum$6336$7lS0C 'enum-set-difference g$enumset2$6417$7lS0C)
          (if (g$enum-type=?$6333$7lS0C
                g$enumset1$6416$7lS0C
                g$enumset2$6417$7lS0C)
            (g$make-enum$6321$7lS0C
              (bitwise-and
                (g$enum-value$6322$7lS0C g$enumset1$6416$7lS0C)
                (bitwise-not (g$enum-value$6322$7lS0C g$enumset2$6417$7lS0C)))
              (g$enum-info$6323$7lS0C g$enumset1$6416$7lS0C))
            '#f)))))
   (g$enum-set-complement$6350$7lS0C
     g$enum-set-complement$6459$7lS0C
     (case-lambda
       ((g$enumset$6418$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set-complement g$enumset$6418$7lS0C)
          (g$make-enum$6321$7lS0C
            (bitwise-not (g$enum-value$6322$7lS0C g$enumset$6418$7lS0C))
            (g$enum-info$6323$7lS0C g$enumset$6418$7lS0C))))))
   (g$enum-set-projection$6351$7lS0C
     g$enum-set-projection$6460$7lS0C
     (case-lambda
       ((g$enumset1$6419$7lS0C g$enumset2$6420$7lS0C)
        (begin
          (g$assert-enum$6336$7lS0C 'enum-set-projection g$enumset1$6419$7lS0C)
          (g$assert-enum$6336$7lS0C 'enum-set-projection g$enumset2$6420$7lS0C)
          ((case-lambda
             ((g$v1$6421$7lS0C)
              ((letrec ((g$f$6422$7lS0C
                          (case-lambda
                            ((g$s$6423$7lS0C g$v$6424$7lS0C)
                             (if (null? g$s$6423$7lS0C)
                               (g$make-enum$6321$7lS0C
                                 g$v$6424$7lS0C
                                 (g$enum-info$6323$7lS0C g$enumset2$6420$7lS0C))
                               (if (zero?
                                     (bitwise-and
                                       g$v1$6421$7lS0C
                                       (g$get-value$6335$7lS0C
                                         g$enumset1$6419$7lS0C
                                         (car g$s$6423$7lS0C))))
                                 (g$f$6422$7lS0C
                                   (cdr g$s$6423$7lS0C)
                                   g$v$6424$7lS0C)
                                 ((case-lambda
                                    ((g$v2$6425$7lS0C)
                                     (if g$v2$6425$7lS0C
                                       (g$f$6422$7lS0C
                                         (cdr g$s$6423$7lS0C)
                                         (bitwise-ior
                                           g$v$6424$7lS0C
                                           g$v2$6425$7lS0C))
                                       (g$f$6422$7lS0C
                                         (cdr g$s$6423$7lS0C)
                                         g$v$6424$7lS0C))))
                                  (g$get-value$6335$7lS0C
                                    g$enumset2$6420$7lS0C
                                    (car g$s$6423$7lS0C)))))))))
                 g$f$6422$7lS0C)
               (g$get-symbols$6334$7lS0C g$enumset1$6419$7lS0C)
               '0)))
           (g$enum-value$6322$7lS0C g$enumset1$6419$7lS0C)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6352$7lS0C g$p$6353$7lS0C g$wr$6354$7lS0C)
       (g$fprintf$6485$7lS0C
         g$p$6353$7lS0C
         '"#[enum-set ~a]"
         (g$enum-set->list$6343$7lS0C g$x$6352$7lS0C))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6461$7lS0C
     g$dofmt$6483$7lS0C
     (case-lambda
       ((g$p$6465$7lS0C g$cntl$6466$7lS0C g$args$6467$7lS0C)
        ((case-lambda
           ((g$nmax$6468$7lS0C)
            ((letrec ((g$loop$6469$7lS0C
                        (case-lambda
                          ((g$n$6470$7lS0C g$a$6471$7lS0C)
                           (if (fx<=? g$n$6470$7lS0C g$nmax$6468$7lS0C)
                             ((case-lambda
                                ((g$c$6472$7lS0C)
                                 (if (if (g$char=?$5257$7lS0C
                                           g$c$6472$7lS0C
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6470$7lS0C
                                           g$nmax$6468$7lS0C))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6473$7lS0C)
                                       (if (g$memv$5052$7lS0C
                                             g$t$6473$7lS0C
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6471$7lS0C)
                                             g$p$6465$7lS0C)
                                           (g$loop$6469$7lS0C
                                             (fx+ g$n$6470$7lS0C '2)
                                             (cdr g$a$6471$7lS0C)))
                                         (if (g$memv$5052$7lS0C
                                               g$t$6473$7lS0C
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6471$7lS0C)
                                               g$p$6465$7lS0C)
                                             (g$loop$6469$7lS0C
                                               (fx+ g$n$6470$7lS0C '2)
                                               (cdr g$a$6471$7lS0C)))
                                           (if (g$memv$5052$7lS0C
                                                 g$t$6473$7lS0C
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6471$7lS0C)
                                                   '2)
                                                 g$p$6465$7lS0C)
                                               (g$loop$6469$7lS0C
                                                 (fx+ g$n$6470$7lS0C '2)
                                                 (cdr g$a$6471$7lS0C)))
                                             (if (g$memv$5052$7lS0C
                                                   g$t$6473$7lS0C
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6471$7lS0C)
                                                     '8)
                                                   g$p$6465$7lS0C)
                                                 (g$loop$6469$7lS0C
                                                   (fx+ g$n$6470$7lS0C '2)
                                                   (cdr g$a$6471$7lS0C)))
                                               (if (g$memv$5052$7lS0C
                                                     g$t$6473$7lS0C
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6471$7lS0C)
                                                       '16)
                                                     g$p$6465$7lS0C)
                                                   (g$loop$6469$7lS0C
                                                     (fx+ g$n$6470$7lS0C '2)
                                                     (cdr g$a$6471$7lS0C)))
                                                 (if (g$memv$5052$7lS0C
                                                       g$t$6473$7lS0C
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6471$7lS0C)
                                                         '10)
                                                       g$p$6465$7lS0C)
                                                     (g$loop$6469$7lS0C
                                                       (fx+ g$n$6470$7lS0C '2)
                                                       (cdr g$a$6471$7lS0C)))
                                                   (if (g$memv$5052$7lS0C
                                                         g$t$6473$7lS0C
                                                         '(#\~))
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6465$7lS0C)
                                                       (g$loop$6469$7lS0C
                                                         (fx+ g$n$6470$7lS0C '2)
                                                         g$a$6471$7lS0C))
                                                     (begin
                                                       (write-char
                                                         g$c$6472$7lS0C
                                                         g$p$6465$7lS0C)
                                                       (g$loop$6469$7lS0C
                                                         (fx+ g$n$6470$7lS0C '1)
                                                         g$a$6471$7lS0C)))))))))))
                                    (string-ref
                                      g$cntl$6466$7lS0C
                                      (fx+ g$n$6470$7lS0C '1)))
                                   (begin
                                     (write-char g$c$6472$7lS0C g$p$6465$7lS0C)
                                     (g$loop$6469$7lS0C
                                       (fx+ g$n$6470$7lS0C '1)
                                       g$a$6471$7lS0C)))))
                              (string-ref g$cntl$6466$7lS0C g$n$6470$7lS0C))
                             (void))))))
               g$loop$6469$7lS0C)
             '0
             g$args$6467$7lS0C)))
         (fx- (string-length g$cntl$6466$7lS0C) '1)))))
   (g$printf$6462$7lS0C
     g$printf$6484$7lS0C
     (case-lambda
       ((g$control$6474$7lS0C . g$args$6475$7lS0C)
        (g$dofmt$6461$7lS0C
          (current-output-port)
          g$control$6474$7lS0C
          g$args$6475$7lS0C))))
   (g$fprintf$6463$7lS0C
     g$fprintf$6485$7lS0C
     (case-lambda
       ((g$p$6476$7lS0C g$control$6477$7lS0C . g$args$6478$7lS0C)
        (g$dofmt$6461$7lS0C
          g$p$6476$7lS0C
          g$control$6477$7lS0C
          g$args$6478$7lS0C))))
   (g$format$6464$7lS0C
     g$format$6486$7lS0C
     (case-lambda
       ((g$control$6479$7lS0C . g$args$6480$7lS0C)
        (call-with-values
          g$open-string-output-port$6278$7lS0C
          (case-lambda
            ((g$p$6481$7lS0C g$c$6482$7lS0C)
             (begin
               (g$dofmt$6461$7lS0C
                 g$p$6481$7lS0C
                 g$control$6479$7lS0C
                 g$args$6480$7lS0C)
               (g$c$6482$7lS0C)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6487$7lS0C
     g$make-traced-macro$6490$7lS0C
     (case-lambda
       ((g$name$6488$7lS0C g$x$6489$7lS0C)
        (if (procedure? g$x$6489$7lS0C)
          (make-traced-procedure
            g$name$6488$7lS0C
            g$x$6489$7lS0C
            g$syntax->datum$11211$7lS0C)
          (if (g$variable-transformer?$11033$7lS0C g$x$6489$7lS0C)
            (g$make-variable-transformer$11032$7lS0C
              (make-traced-procedure
                g$name$6488$7lS0C
                (g$variable-transformer-procedure$11034$7lS0C g$x$6489$7lS0C)
                g$syntax->datum$11211$7lS0C))
            g$x$6489$7lS0C))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6491$7lS0C
     g$library-version-mismatch-warning$6587$7lS0C
     (case-lambda
       ((g$name$6564$7lS0C g$depname$6565$7lS0C g$filename$6566$7lS0C)
        (g$fprintf$6485$7lS0C
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$6564$7lS0C
          g$depname$6565$7lS0C
          g$filename$6566$7lS0C))))
   (g$file-locator-resolution-error$6492$7lS0C
     g$file-locator-resolution-error$6588$7lS0C
     (case-lambda
       ((g$libname$6567$7lS0C g$failed-list$6568$7lS0C)
        (letrec* ((g$7638$6569$7lS0C
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$7641$7lS0C
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$7640$6570$7lS0C '#f)
                  (g$7639$6571$7lS0C
                    (make-record-constructor-descriptor
                      g$7638$6569$7lS0C
                      &condition-rcd
                      g$7640$6570$7lS0C))
                  (g$7637$6572$7lS0C (record-predicate g$7638$6569$7lS0C))
                  (g$make-library-resolution-condition$6573$7lS0C
                    (record-constructor g$7639$6571$7lS0C))
                  (g$7635$6574$7lS0C (record-accessor g$7638$6569$7lS0C '0))
                  (g$7636$6575$7lS0C (record-accessor g$7638$6569$7lS0C '1))
                  (g$library-resolution-condition?$6576$7lS0C
                    (condition-predicate g$7638$6569$7lS0C))
                  (g$condition-library$6577$7lS0C
                    (condition-accessor g$7638$6569$7lS0C g$7635$6574$7lS0C))
                  (g$condition-files$6578$7lS0C
                    (condition-accessor g$7638$6569$7lS0C g$7636$6575$7lS0C)))
          (raise
            (condition
              (g$make-error$5775$7lS0C)
              (g$make-who-condition$5801$7lS0C 'expander)
              (g$make-message-condition$5755$7lS0C
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$6573$7lS0C
                g$libname$6567$7lS0C
                g$failed-list$6568$7lS0C)))))))
   (g$read-library-source-file$6493$7lS0C
     g$read-library-source-file$6589$7lS0C
     (case-lambda
       ((g$file-name$6579$7lS0C)
        (g$with-input-from-file$6313$7lS0C
          g$file-name$6579$7lS0C
          read-annotated))))
   (g$make-parameter$6494$7lS0C
     g$make-parameter$6590$7lS0C
     (case-lambda
       ((g$x$6580$7lS0C)
        (g$make-parameter$6494$7lS0C
          g$x$6580$7lS0C
          (case-lambda ((g$x$6581$7lS0C) g$x$6581$7lS0C))))
       ((g$x$6582$7lS0C g$fender$6583$7lS0C)
        (begin
          (if (not (procedure? g$fender$6583$7lS0C))
            (g$assertion-error$11204$7lS0C
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(89,8) - (89,36)"))
            (void))
          ((case-lambda
             ((g$x$6584$7lS0C)
              (case-lambda
                (() g$x$6584$7lS0C)
                ((g$v$6585$7lS0C)
                 (set! g$x$6584$7lS0C (g$fender$6583$7lS0C g$v$6585$7lS0C))))))
           (g$fender$6583$7lS0C g$x$6582$7lS0C))))))
   (g$file-options-constructor$6562$7lS0C
     g$file-options-constructor$6591$7lS0C
     (g$make-parameter$6494$7lS0C '#f))
   (g$file-options-spec$6563$7lS0C
     g$file-options-spec$6592$7lS0C
     (case-lambda
       ((g$x$6586$7lS0C)
        ((g$file-options-constructor$6562$7lS0C) g$x$6586$7lS0C)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6788$7lS0C
     g$current-primitive-locations$6833$7lS0C
     (g$make-parameter$6590$7lS0C
       (case-lambda ((g$x$6794$7lS0C) '#f))
       (case-lambda
         ((g$p$6795$7lS0C)
          (begin
            (if (not (procedure? g$p$6795$7lS0C))
              (g$assertion-error$11204$7lS0C
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$6795$7lS0C)))))
   (g$mutable?$6789$7lS0C
     g$mutable?$6834$7lS0C
     (case-lambda
       ((g$x$6796$7lS0C)
        (letrec* ((g$simple?$6797$7lS0C
                    (case-lambda
                      ((g$x$6798$7lS0C)
                       ((case-lambda
                          ((g$t$6799$7lS0C)
                           (if g$t$6799$7lS0C
                             g$t$6799$7lS0C
                             ((case-lambda
                                ((g$t$6800$7lS0C)
                                 (if g$t$6800$7lS0C
                                   g$t$6800$7lS0C
                                   ((case-lambda
                                      ((g$t$6801$7lS0C)
                                       (if g$t$6801$7lS0C
                                         g$t$6801$7lS0C
                                         ((case-lambda
                                            ((g$t$6802$7lS0C)
                                             (if g$t$6802$7lS0C
                                               g$t$6802$7lS0C
                                               ((case-lambda
                                                  ((g$t$6803$7lS0C)
                                                   (if g$t$6803$7lS0C
                                                     g$t$6803$7lS0C
                                                     ((case-lambda
                                                        ((g$t$6804$7lS0C)
                                                         (if g$t$6804$7lS0C
                                                           g$t$6804$7lS0C
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6798$7lS0C)))))
                                                      (bytevector?
                                                        g$x$6798$7lS0C)))))
                                                (string? g$x$6798$7lS0C)))))
                                          (boolean? g$x$6798$7lS0C)))))
                                    (symbol? g$x$6798$7lS0C)))))
                              (char? g$x$6798$7lS0C)))))
                        (null? g$x$6798$7lS0C))))))
          (not (g$simple?$6797$7lS0C g$x$6796$7lS0C))))))
   (g$rewriter$6790$7lS0C
     g$rewriter$6835$7lS0C
     (case-lambda
       ((g$quote-hack?$6805$7lS0C)
        (letrec* ((g$f$6806$7lS0C
                    (case-lambda
                      ((g$x$6807$7lS0C)
                       (if (pair? g$x$6807$7lS0C)
                         ((case-lambda
                            ((g$t$6808$7lS0C)
                             (if (g$memv$5052$7lS0C g$t$6808$7lS0C '(quote))
                               (if (if g$quote-hack?$6805$7lS0C
                                     (begin
                                       '#f
                                       (g$mutable?$6789$7lS0C
                                         (g$cadr$5223$7lS0C g$x$6807$7lS0C)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6809$7lS0C)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6809$7lS0C
                                         (g$cadr$5223$7lS0C g$x$6807$7lS0C))
                                       g$g$6809$7lS0C)))
                                  (gensym))
                                 g$x$6807$7lS0C)
                               (if (g$memv$5052$7lS0C
                                     g$t$6808$7lS0C
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (g$map$5059$7lS0C
                                     (case-lambda
                                       ((g$x$6810$7lS0C)
                                        (cons
                                          (car g$x$6810$7lS0C)
                                          (g$map$5059$7lS0C
                                            g$f$6806$7lS0C
                                            (cdr g$x$6810$7lS0C)))))
                                     (cdr g$x$6807$7lS0C)))
                                 (if (g$memv$5052$7lS0C
                                       g$t$6808$7lS0C
                                       '(lambda))
                                   (g$cons*$5061$7lS0C
                                     'lambda
                                     (g$cadr$5223$7lS0C g$x$6807$7lS0C)
                                     (g$map$5059$7lS0C
                                       g$f$6806$7lS0C
                                       (g$cddr$5225$7lS0C g$x$6807$7lS0C)))
                                   (if (g$memv$5052$7lS0C
                                         g$t$6808$7lS0C
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$6811$7lS0C
                                           g$body*$6812$7lS0C)
                                         ((case-lambda
                                            ((g$lhs*$6813$7lS0C
                                               g$rhs*$6814$7lS0C)
                                             (g$cons*$5061$7lS0C
                                               'letrec
                                               (g$map$5059$7lS0C
                                                 list
                                                 g$lhs*$6813$7lS0C
                                                 (g$map$5059$7lS0C
                                                   g$f$6806$7lS0C
                                                   g$rhs*$6814$7lS0C))
                                               (g$map$5059$7lS0C
                                                 g$f$6806$7lS0C
                                                 g$body*$6812$7lS0C))))
                                          (g$map$5059$7lS0C
                                            car
                                            g$bindings$6811$7lS0C)
                                          (g$map$5059$7lS0C
                                            g$cadr$5223$7lS0C
                                            g$bindings$6811$7lS0C))))
                                      (g$cadr$5223$7lS0C g$x$6807$7lS0C)
                                      (g$cddr$5225$7lS0C g$x$6807$7lS0C))
                                     (if (g$memv$5052$7lS0C
                                           g$t$6808$7lS0C
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$6815$7lS0C
                                             g$body*$6816$7lS0C)
                                           ((case-lambda
                                              ((g$lhs*$6817$7lS0C
                                                 g$rhs*$6818$7lS0C)
                                               (g$cons*$5061$7lS0C
                                                 'letrec*
                                                 (g$map$5059$7lS0C
                                                   list
                                                   g$lhs*$6817$7lS0C
                                                   (g$map$5059$7lS0C
                                                     g$f$6806$7lS0C
                                                     g$rhs*$6818$7lS0C))
                                                 (g$map$5059$7lS0C
                                                   g$f$6806$7lS0C
                                                   g$body*$6816$7lS0C))))
                                            (g$map$5059$7lS0C
                                              car
                                              g$bindings$6815$7lS0C)
                                            (g$map$5059$7lS0C
                                              g$cadr$5223$7lS0C
                                              g$bindings$6815$7lS0C))))
                                        (g$cadr$5223$7lS0C g$x$6807$7lS0C)
                                        (g$cddr$5225$7lS0C g$x$6807$7lS0C))
                                       (if (g$memv$5052$7lS0C
                                             g$t$6808$7lS0C
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$6819$7lS0C g$x$6820$7lS0C)
                                             ((case-lambda
                                                ((g$bindings$6821$7lS0C
                                                   g$body*$6822$7lS0C)
                                                 ((case-lambda
                                                    ((g$lhs*$6823$7lS0C
                                                       g$lhs**$6824$7lS0C
                                                       g$rhs*$6825$7lS0C)
                                                     (g$cons*$5061$7lS0C
                                                       'library-letrec*
                                                       g$name$6819$7lS0C
                                                       (g$map$5059$7lS0C
                                                         list
                                                         g$lhs*$6823$7lS0C
                                                         g$lhs**$6824$7lS0C
                                                         (g$map$5059$7lS0C
                                                           g$f$6806$7lS0C
                                                           g$rhs*$6825$7lS0C))
                                                       (g$map$5059$7lS0C
                                                         g$f$6806$7lS0C
                                                         g$body*$6822$7lS0C))))
                                                  (g$map$5059$7lS0C
                                                    car
                                                    g$bindings$6821$7lS0C)
                                                  (g$map$5059$7lS0C
                                                    g$cadr$5223$7lS0C
                                                    g$bindings$6821$7lS0C)
                                                  (g$map$5059$7lS0C
                                                    g$caddr$5229$7lS0C
                                                    g$bindings$6821$7lS0C))))
                                              (g$cadr$5223$7lS0C g$x$6820$7lS0C)
                                              (g$cddr$5225$7lS0C
                                                g$x$6820$7lS0C))))
                                          (g$cadr$5223$7lS0C g$x$6807$7lS0C)
                                          (cdr g$x$6807$7lS0C))
                                         (if (g$memv$5052$7lS0C
                                               g$t$6808$7lS0C
                                               '(begin))
                                           (cons
                                             'begin
                                             (g$map$5059$7lS0C
                                               g$f$6806$7lS0C
                                               (cdr g$x$6807$7lS0C)))
                                           (if (g$memv$5052$7lS0C
                                                 g$t$6808$7lS0C
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5223$7lS0C
                                                 g$x$6807$7lS0C)
                                               (g$f$6806$7lS0C
                                                 (g$caddr$5229$7lS0C
                                                   g$x$6807$7lS0C)))
                                             (if (g$memv$5052$7lS0C
                                                   g$t$6808$7lS0C
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$6826$7lS0C)
                                                   ((case-lambda
                                                      ((g$t$6827$7lS0C)
                                                       (if g$t$6827$7lS0C
                                                         ((case-lambda
                                                            ((g$loc$6828$7lS0C)
                                                             g$loc$6828$7lS0C))
                                                          g$t$6827$7lS0C)
                                                         g$op$6826$7lS0C)))
                                                    ((g$current-primitive-locations$6788$7lS0C)
                                                     g$op$6826$7lS0C))))
                                                (g$cadr$5223$7lS0C
                                                  g$x$6807$7lS0C))
                                               (if (g$memv$5052$7lS0C
                                                     g$t$6808$7lS0C
                                                     '(define))
                                                 g$x$6807$7lS0C
                                                 (if (list? g$x$6807$7lS0C)
                                                   (g$map$5059$7lS0C
                                                     g$f$6806$7lS0C
                                                     g$x$6807$7lS0C)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6807$7lS0C
                                                     (list?
                                                       g$x$6807$7lS0C)))))))))))))))
                          (car g$x$6807$7lS0C))
                         g$x$6807$7lS0C)))))
          g$f$6806$7lS0C))))
   (g$expanded->core$6791$7lS0C
     g$expanded->core$6836$7lS0C
     (case-lambda
       ((g$x$6829$7lS0C) ((g$rewriter$6790$7lS0C '#t) g$x$6829$7lS0C))))
   (g$compile-core-expr$6792$7lS0C
     g$compile-core-expr$6837$7lS0C
     (case-lambda
       ((g$x$6830$7lS0C) ((g$rewriter$6790$7lS0C '#f) g$x$6830$7lS0C))))
   (g$compile-core-expr-to-port$6793$7lS0C
     g$compile-core-expr-to-port$6838$7lS0C
     (case-lambda
       ((g$x$6831$7lS0C g$p$6832$7lS0C)
        (g$pretty-print$6787$7lS0C
          ((g$rewriter$6790$7lS0C '#f) g$x$6831$7lS0C)
          g$p$6832$7lS0C)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6877$7lS0C
     g$make-collection$7072$7lS0C
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6938$7lS0C)
            (letrec* ((g$set-cons$6939$7lS0C
                        (case-lambda
                          ((g$x$6941$7lS0C g$ls$6942$7lS0C)
                           (if (g$memq$5051$7lS0C
                                 g$x$6941$7lS0C
                                 g$ls$6942$7lS0C)
                             g$ls$6942$7lS0C
                             (cons g$x$6941$7lS0C g$ls$6942$7lS0C))))))
              (case-lambda
                (() g$set$6938$7lS0C)
                ((g$x$6940$7lS0C)
                 (set! g$set$6938$7lS0C
                   (g$set-cons$6939$7lS0C g$x$6940$7lS0C g$set$6938$7lS0C)))))))
         '()))))
   (g$current-library-collection$6878$7lS0C
     g$current-library-collection$7073$7lS0C
     (g$make-parameter$6590$7lS0C
       (g$make-collection$6877$7lS0C)
       (case-lambda
         ((g$x$6943$7lS0C)
          (begin
            (if (not (procedure? g$x$6943$7lS0C))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6943$7lS0C)
              (void))
            g$x$6943$7lS0C)))))
   (g$7954$6879$7lS0C
     g$7954$7074$7lS0C
     (make-record-type-descriptor
       'library
       '#f
       'g$7957$7lS0C
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7956$6880$7lS0C g$7956$7075$7lS0C '#f)
   (g$7955$6881$7lS0C
     g$7955$7076$7lS0C
     (make-record-constructor-descriptor
       g$7954$6879$7lS0C
       '#f
       g$7956$6880$7lS0C))
   (g$library?$6882$7lS0C
     g$library?$7077$7lS0C
     (record-predicate g$7954$6879$7lS0C))
   (g$make-library$6883$7lS0C
     g$make-library$7078$7lS0C
     (record-constructor g$7955$6881$7lS0C))
   (g$library-id$6884$7lS0C
     g$library-id$7079$7lS0C
     (record-accessor g$7954$6879$7lS0C '0))
   (g$library-name$6885$7lS0C
     g$library-name$7080$7lS0C
     (record-accessor g$7954$6879$7lS0C '1))
   (g$library-version$6886$7lS0C
     g$library-version$7081$7lS0C
     (record-accessor g$7954$6879$7lS0C '2))
   (g$library-imp*$6887$7lS0C
     g$library-imp*$7082$7lS0C
     (record-accessor g$7954$6879$7lS0C '3))
   (g$library-vis*$6888$7lS0C
     g$library-vis*$7083$7lS0C
     (record-accessor g$7954$6879$7lS0C '4))
   (g$library-inv*$6889$7lS0C
     g$library-inv*$7084$7lS0C
     (record-accessor g$7954$6879$7lS0C '5))
   (g$library-subst$6890$7lS0C
     g$library-subst$7085$7lS0C
     (record-accessor g$7954$6879$7lS0C '6))
   (g$library-env$6891$7lS0C
     g$library-env$7086$7lS0C
     (record-accessor g$7954$6879$7lS0C '7))
   (g$library-visit-state$6892$7lS0C
     g$library-visit-state$7087$7lS0C
     (record-accessor g$7954$6879$7lS0C '8))
   (g$library-invoke-state$6893$7lS0C
     g$library-invoke-state$7088$7lS0C
     (record-accessor g$7954$6879$7lS0C '9))
   (g$library-visit-code$6894$7lS0C
     g$library-visit-code$7089$7lS0C
     (record-accessor g$7954$6879$7lS0C '10))
   (g$library-invoke-code$6895$7lS0C
     g$library-invoke-code$7090$7lS0C
     (record-accessor g$7954$6879$7lS0C '11))
   (g$library-visible?$6896$7lS0C
     g$library-visible?$7091$7lS0C
     (record-accessor g$7954$6879$7lS0C '12))
   (g$library-source-file-name$6897$7lS0C
     g$library-source-file-name$7092$7lS0C
     (record-accessor g$7954$6879$7lS0C '13))
   (g$set-library-id!$6898$7lS0C
     g$set-library-id!$7093$7lS0C
     (record-mutator g$7954$6879$7lS0C '0))
   (g$set-library-name!$6899$7lS0C
     g$set-library-name!$7094$7lS0C
     (record-mutator g$7954$6879$7lS0C '1))
   (g$set-library-version!$6900$7lS0C
     g$set-library-version!$7095$7lS0C
     (record-mutator g$7954$6879$7lS0C '2))
   (g$set-library-imp*!$6901$7lS0C
     g$set-library-imp*!$7096$7lS0C
     (record-mutator g$7954$6879$7lS0C '3))
   (g$set-library-vis*!$6902$7lS0C
     g$set-library-vis*!$7097$7lS0C
     (record-mutator g$7954$6879$7lS0C '4))
   (g$set-library-inv*!$6903$7lS0C
     g$set-library-inv*!$7098$7lS0C
     (record-mutator g$7954$6879$7lS0C '5))
   (g$set-library-subst!$6904$7lS0C
     g$set-library-subst!$7099$7lS0C
     (record-mutator g$7954$6879$7lS0C '6))
   (g$set-library-env!$6905$7lS0C
     g$set-library-env!$7100$7lS0C
     (record-mutator g$7954$6879$7lS0C '7))
   (g$set-library-visit-state!$6906$7lS0C
     g$set-library-visit-state!$7101$7lS0C
     (record-mutator g$7954$6879$7lS0C '8))
   (g$set-library-invoke-state!$6907$7lS0C
     g$set-library-invoke-state!$7102$7lS0C
     (record-mutator g$7954$6879$7lS0C '9))
   (g$set-library-visit-code!$6908$7lS0C
     g$set-library-visit-code!$7103$7lS0C
     (record-mutator g$7954$6879$7lS0C '10))
   (g$set-library-invoke-code!$6909$7lS0C
     g$set-library-invoke-code!$7104$7lS0C
     (record-mutator g$7954$6879$7lS0C '11))
   (g$set-library-visible?!$6910$7lS0C
     g$set-library-visible?!$7105$7lS0C
     (record-mutator g$7954$6879$7lS0C '12))
   (g$set-library-source-file-name!$6911$7lS0C
     g$set-library-source-file-name!$7106$7lS0C
     (record-mutator g$7954$6879$7lS0C '13))
   (g$rp$6912$7lS0C
     g$rp$7107$7lS0C
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6944$7lS0C g$p$6945$7lS0C g$wr$6946$7lS0C)
          (begin
            (if (not (g$library?$6882$7lS0C g$x$6944$7lS0C))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6486$7lS0C
                '"#<library ~s>"
                (if (null? (g$library-version$6886$7lS0C g$x$6944$7lS0C))
                  (g$library-name$6885$7lS0C g$x$6944$7lS0C)
                  (append
                    (g$library-name$6885$7lS0C g$x$6944$7lS0C)
                    (list (g$library-version$6886$7lS0C g$x$6944$7lS0C)))))
              g$p$6945$7lS0C))))))
   (g$find-dependencies$6913$7lS0C
     g$find-dependencies$7108$7lS0C
     (case-lambda
       ((g$ls$6947$7lS0C)
        (if (null? g$ls$6947$7lS0C)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6914$7lS0C
     g$find-library-by$7109$7lS0C
     (case-lambda
       ((g$pred$6948$7lS0C)
        ((letrec ((g$f$6949$7lS0C
                    (case-lambda
                      ((g$ls$6950$7lS0C)
                       (if (null? g$ls$6950$7lS0C)
                         '#f
                         (if (g$pred$6948$7lS0C (car g$ls$6950$7lS0C))
                           (car g$ls$6950$7lS0C)
                           (g$f$6949$7lS0C (cdr g$ls$6950$7lS0C))))))))
           g$f$6949$7lS0C)
         ((g$current-library-collection$6878$7lS0C))))))
   (g$library-path$6915$7lS0C
     g$library-path$7110$7lS0C
     (g$make-parameter$6590$7lS0C
       '(".")
       (case-lambda
         ((g$x$6951$7lS0C)
          (if (if (list? g$x$6951$7lS0C)
                (begin '#f (g$for-all$5057$7lS0C string? g$x$6951$7lS0C))
                '#f)
            (g$map$5059$7lS0C
              (case-lambda ((g$x$6952$7lS0C) g$x$6952$7lS0C))
              g$x$6951$7lS0C)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6951$7lS0C))))))
   (g$library-extensions$6916$7lS0C
     g$library-extensions$7111$7lS0C
     (g$make-parameter$6590$7lS0C
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6953$7lS0C)
          (if (if (list? g$x$6953$7lS0C)
                (begin '#f (g$for-all$5057$7lS0C string? g$x$6953$7lS0C))
                '#f)
            (g$map$5059$7lS0C
              (case-lambda ((g$x$6954$7lS0C) g$x$6954$7lS0C))
              g$x$6953$7lS0C)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6953$7lS0C))))))
   (g$library-name->file-name$6917$7lS0C
     g$library-name->file-name$7112$7lS0C
     (case-lambda
       ((g$x$6955$7lS0C)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6278$7lS0C)))
          (case-lambda
            ((g$p$6958$7lS0C g$extract$6959$7lS0C)
             ((case-lambda
                ((g$extract$6960$7lS0C g$p$6961$7lS0C)
                 (letrec* ((g$display-hex$6962$7lS0C
                             (case-lambda
                               ((g$n$6970$7lS0C)
                                (if (<= '0 g$n$6970$7lS0C '9)
                                  (display g$n$6970$7lS0C g$p$6961$7lS0C)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6970$7lS0C '10)))
                                    g$p$6961$7lS0C))))))
                   (begin
                     ((letrec ((g$f$6963$7lS0C
                                 (case-lambda
                                   ((g$ls$6964$7lS0C)
                                    (if (not (null? g$ls$6964$7lS0C))
                                      (begin
                                        (display '"/" g$p$6961$7lS0C)
                                        (g$for-each$5060$7lS0C
                                          (case-lambda
                                            ((g$c$6965$7lS0C)
                                             (if ((case-lambda
                                                    ((g$t$6966$7lS0C)
                                                     (if g$t$6966$7lS0C
                                                       g$t$6966$7lS0C
                                                       ((case-lambda
                                                          ((g$t$6967$7lS0C)
                                                           (if g$t$6967$7lS0C
                                                             g$t$6967$7lS0C
                                                             ((case-lambda
                                                                ((g$t$6968$7lS0C)
                                                                 (if g$t$6968$7lS0C
                                                                   g$t$6968$7lS0C
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5052$7lS0C
                                                                       g$c$6965$7lS0C
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5260$7lS0C
                                                                '#\0
                                                                g$c$6965$7lS0C
                                                                '#\9)))))
                                                        (g$char<=?$5260$7lS0C
                                                          '#\A
                                                          g$c$6965$7lS0C
                                                          '#\Z)))))
                                                  (g$char<=?$5260$7lS0C
                                                    '#\a
                                                    g$c$6965$7lS0C
                                                    '#\z))
                                               (display
                                                 g$c$6965$7lS0C
                                                 g$p$6961$7lS0C)
                                               (begin
                                                 (display '"%" g$p$6961$7lS0C)
                                                 ((case-lambda
                                                    ((g$n$6969$7lS0C)
                                                     (begin
                                                       (g$display-hex$6962$7lS0C
                                                         (g$quotient$5865$7lS0C
                                                           g$n$6969$7lS0C
                                                           '16))
                                                       (g$display-hex$6962$7lS0C
                                                         (g$remainder$5866$7lS0C
                                                           g$n$6969$7lS0C
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6965$7lS0C))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6964$7lS0C))))
                                        (g$f$6963$7lS0C (cdr g$ls$6964$7lS0C)))
                                      (void))))))
                        g$f$6963$7lS0C)
                      g$x$6955$7lS0C)
                     (g$extract$6960$7lS0C)))))
              g$extract$6959$7lS0C
              g$p$6958$7lS0C)))))))
   (g$file-locator$6918$7lS0C
     g$file-locator$7113$7lS0C
     (g$make-parameter$6590$7lS0C
       (case-lambda
         ((g$x$6971$7lS0C)
          ((case-lambda
             ((g$str$6972$7lS0C)
              ((letrec ((g$f$6973$7lS0C
                          (case-lambda
                            ((g$ls$6974$7lS0C
                               g$exts$6975$7lS0C
                               g$failed-list$6976$7lS0C)
                             (if (null? g$ls$6974$7lS0C)
                               (g$file-locator-resolution-error$6588$7lS0C
                                 g$x$6971$7lS0C
                                 (reverse g$failed-list$6976$7lS0C))
                               (if (null? g$exts$6975$7lS0C)
                                 (g$f$6973$7lS0C
                                   (cdr g$ls$6974$7lS0C)
                                   (g$library-extensions$6916$7lS0C)
                                   g$failed-list$6976$7lS0C)
                                 ((case-lambda
                                    ((g$name$6977$7lS0C)
                                     (if (g$file-exists?$5506$7lS0C
                                           g$name$6977$7lS0C)
                                       g$name$6977$7lS0C
                                       (g$f$6973$7lS0C
                                         g$ls$6974$7lS0C
                                         (cdr g$exts$6975$7lS0C)
                                         (cons
                                           g$name$6977$7lS0C
                                           g$failed-list$6976$7lS0C)))))
                                  (string-append
                                    (car g$ls$6974$7lS0C)
                                    g$str$6972$7lS0C
                                    (car g$exts$6975$7lS0C)))))))))
                 g$f$6973$7lS0C)
               (g$library-path$6915$7lS0C)
               (g$library-extensions$6916$7lS0C)
               '())))
           (g$library-name->file-name$6917$7lS0C g$x$6971$7lS0C))))
       (case-lambda
         ((g$f$6978$7lS0C)
          (if (procedure? g$f$6978$7lS0C)
            g$f$6978$7lS0C
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6978$7lS0C))))))
   (g$serialize-all$6919$7lS0C
     g$serialize-all$7114$7lS0C
     (case-lambda
       ((g$serialize$6979$7lS0C g$compile$6980$7lS0C)
        (letrec* ((g$library-desc$6981$7lS0C
                    (case-lambda
                      ((g$x$6983$7lS0C)
                       (list
                         (g$library-id$6884$7lS0C g$x$6983$7lS0C)
                         (g$library-name$6885$7lS0C g$x$6983$7lS0C))))))
          (g$for-each$5060$7lS0C
            (case-lambda
              ((g$x$6982$7lS0C)
               (if (g$library-source-file-name$6897$7lS0C g$x$6982$7lS0C)
                 (g$serialize$6979$7lS0C
                   (g$library-source-file-name$6897$7lS0C g$x$6982$7lS0C)
                   (list
                     (g$library-id$6884$7lS0C g$x$6982$7lS0C)
                     (g$library-name$6885$7lS0C g$x$6982$7lS0C)
                     (g$library-version$6886$7lS0C g$x$6982$7lS0C)
                     (g$map$5059$7lS0C
                       g$library-desc$6981$7lS0C
                       (g$library-imp*$6887$7lS0C g$x$6982$7lS0C))
                     (g$map$5059$7lS0C
                       g$library-desc$6981$7lS0C
                       (g$library-vis*$6888$7lS0C g$x$6982$7lS0C))
                     (g$map$5059$7lS0C
                       g$library-desc$6981$7lS0C
                       (g$library-inv*$6889$7lS0C g$x$6982$7lS0C))
                     (g$library-subst$6890$7lS0C g$x$6982$7lS0C)
                     (g$library-env$6891$7lS0C g$x$6982$7lS0C)
                     (g$compile$6980$7lS0C
                       (g$library-visit-code$6894$7lS0C g$x$6982$7lS0C))
                     (g$compile$6980$7lS0C
                       (g$library-invoke-code$6895$7lS0C g$x$6982$7lS0C))
                     (g$library-visible?$6896$7lS0C g$x$6982$7lS0C)))
                 (void))))
            ((g$current-library-collection$6878$7lS0C)))))))
   (g$current-precompiled-library-loader$6920$7lS0C
     g$current-precompiled-library-loader$7115$7lS0C
     (g$make-parameter$6590$7lS0C
       (case-lambda ((g$filename$6984$7lS0C g$sk$6985$7lS0C) '#f))))
   (g$try-load-from-file$6921$7lS0C
     g$try-load-from-file$7116$7lS0C
     (case-lambda
       ((g$filename$6986$7lS0C)
        ((g$current-precompiled-library-loader$6920$7lS0C)
         g$filename$6986$7lS0C
         (case-lambda
           ((g$id$6987$7lS0C
              g$name$6988$7lS0C
              g$ver$6989$7lS0C
              g$imp*$6990$7lS0C
              g$vis*$6991$7lS0C
              g$inv*$6992$7lS0C
              g$exp-subst$6993$7lS0C
              g$exp-env$6994$7lS0C
              g$visit-proc$6995$7lS0C
              g$invoke-proc$6996$7lS0C
              g$visible?$6997$7lS0C)
            ((letrec ((g$f$6998$7lS0C
                        (case-lambda
                          ((g$deps$6999$7lS0C)
                           (if (null? g$deps$6999$7lS0C)
                             (begin
                               (g$install-library$6931$7lS0C
                                 g$id$6987$7lS0C
                                 g$name$6988$7lS0C
                                 g$ver$6989$7lS0C
                                 g$imp*$6990$7lS0C
                                 g$vis*$6991$7lS0C
                                 g$inv*$6992$7lS0C
                                 g$exp-subst$6993$7lS0C
                                 g$exp-env$6994$7lS0C
                                 g$visit-proc$6995$7lS0C
                                 g$invoke-proc$6996$7lS0C
                                 '#f
                                 '#f
                                 g$visible?$6997$7lS0C
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7000$7lS0C)
                                 ((case-lambda
                                    ((g$label$7001$7lS0C g$dname$7002$7lS0C)
                                     ((case-lambda
                                        ((g$l$7003$7lS0C)
                                         (if (if (g$library?$6882$7lS0C
                                                   g$l$7003$7lS0C)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7001$7lS0C
                                                      (g$library-id$6884$7lS0C
                                                        g$l$7003$7lS0C)))
                                               '#f)
                                           (g$f$6998$7lS0C
                                             (cdr g$deps$6999$7lS0C))
                                           (begin
                                             (g$library-version-mismatch-warning$6587$7lS0C
                                               g$name$6988$7lS0C
                                               g$dname$7002$7lS0C
                                               g$filename$6986$7lS0C)
                                             '#f))))
                                      (g$find-library-by-name$6926$7lS0C
                                        g$dname$7002$7lS0C))))
                                  (car g$d$7000$7lS0C)
                                  (g$cadr$5223$7lS0C g$d$7000$7lS0C))))
                              (car g$deps$6999$7lS0C)))))))
               g$f$6998$7lS0C)
             (append g$imp*$6990$7lS0C g$vis*$6991$7lS0C g$inv*$6992$7lS0C)))
           (g$others$7004$7lS0C '#f))))))
   (g$library-loader$6922$7lS0C
     g$library-loader$7117$7lS0C
     (g$make-parameter$6590$7lS0C
       (case-lambda
         ((g$x$7005$7lS0C)
          ((case-lambda
             ((g$file-name$7006$7lS0C)
              (if (not g$file-name$7006$7lS0C)
                (assertion-violation '#f '"cannot file library" g$x$7005$7lS0C)
                ((case-lambda
                   ((g$t$7007$7lS0C)
                    (if g$t$7007$7lS0C
                      g$t$7007$7lS0C
                      (begin
                        '#f
                        ((g$current-library-expander$6923$7lS0C)
                         (g$read-library-source-file$6589$7lS0C
                           g$file-name$7006$7lS0C)
                         g$file-name$7006$7lS0C
                         (case-lambda
                           ((g$name$7008$7lS0C)
                            (if (not (equal? g$name$7008$7lS0C g$x$7005$7lS0C))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6278$7lS0C)))
                                  (case-lambda
                                    ((g$p$7011$7lS0C g$e$7012$7lS0C)
                                     ((case-lambda
                                        ((g$e$7013$7lS0C g$p$7014$7lS0C)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7014$7lS0C)
                                           (write g$x$7005$7lS0C g$p$7014$7lS0C)
                                           (display '" in file " g$p$7014$7lS0C)
                                           (display
                                             g$file-name$7006$7lS0C
                                             g$p$7014$7lS0C)
                                           (display '", found " g$p$7014$7lS0C)
                                           (write
                                             g$name$7008$7lS0C
                                             g$p$7014$7lS0C)
                                           (display '" instead" g$p$7014$7lS0C)
                                           (g$e$7013$7lS0C))))
                                      g$e$7012$7lS0C
                                      g$p$7011$7lS0C)))))
                              (void)))))))))
                 (g$try-load-from-file$6921$7lS0C g$file-name$7006$7lS0C)))))
           ((g$file-locator$6918$7lS0C) g$x$7005$7lS0C))))
       (case-lambda
         ((g$f$7015$7lS0C)
          (if (procedure? g$f$7015$7lS0C)
            g$f$7015$7lS0C
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7015$7lS0C))))))
   (g$current-library-expander$6923$7lS0C
     g$current-library-expander$7118$7lS0C
     (g$make-parameter$6590$7lS0C
       (case-lambda
         ((g$x$7016$7lS0C)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7017$7lS0C)
          (if (procedure? g$f$7017$7lS0C)
            g$f$7017$7lS0C
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7017$7lS0C))))))
   (g$external-pending-libraries$6924$7lS0C
     g$external-pending-libraries$7119$7lS0C
     (g$make-parameter$6590$7lS0C '()))
   (g$find-external-library$6925$7lS0C
     g$find-external-library$7120$7lS0C
     (case-lambda
       ((g$name$7018$7lS0C)
        (begin
          (if (g$member$5053$7lS0C
                g$name$7018$7lS0C
                (g$external-pending-libraries$6924$7lS0C))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7018$7lS0C)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7021$7lS0C
                g$external-pending-libraries$7022$7lS0C)
              ((case-lambda
                 ((g$swap$7023$7lS0C)
                  (dynamic-wind
                    g$swap$7023$7lS0C
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6922$7lS0C) g$name$7018$7lS0C)
                         ((case-lambda
                            ((g$t$7024$7lS0C)
                             (if g$t$7024$7lS0C
                               g$t$7024$7lS0C
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7018$7lS0C)))))
                          (g$find-library-by$6914$7lS0C
                            (case-lambda
                              ((g$x$7025$7lS0C)
                               (equal?
                                 (g$library-name$6885$7lS0C g$x$7025$7lS0C)
                                 g$name$7018$7lS0C))))))))
                    g$swap$7023$7lS0C)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7026$7lS0C)
                      (begin
                        (g$external-pending-libraries$7021$7lS0C
                          g$external-pending-libraries$7022$7lS0C)
                        (set! g$external-pending-libraries$7022$7lS0C
                          g$t$7026$7lS0C))))
                   (g$external-pending-libraries$7021$7lS0C)))))))
           g$external-pending-libraries$6924$7lS0C
           (cons
             g$name$7018$7lS0C
             (g$external-pending-libraries$6924$7lS0C)))))))
   (g$find-library-by-name$6926$7lS0C
     g$find-library-by-name$7121$7lS0C
     (case-lambda
       ((g$name$7027$7lS0C)
        ((case-lambda
           ((g$t$7028$7lS0C)
            (if g$t$7028$7lS0C
              g$t$7028$7lS0C
              (begin
                '#f
                (g$find-external-library$6925$7lS0C g$name$7027$7lS0C)))))
         (g$find-library-by$6914$7lS0C
           (case-lambda
             ((g$x$7029$7lS0C)
              (equal?
                (g$library-name$6885$7lS0C g$x$7029$7lS0C)
                g$name$7027$7lS0C))))))))
   (g$library-exists?$6927$7lS0C
     g$library-exists?$7122$7lS0C
     (case-lambda
       ((g$name$7030$7lS0C)
        (if (g$find-library-by$6914$7lS0C
              (case-lambda
                ((g$x$7031$7lS0C)
                 (equal?
                   (g$library-name$6885$7lS0C g$x$7031$7lS0C)
                   g$name$7030$7lS0C))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6928$7lS0C
     g$find-library-by-spec/die$7123$7lS0C
     (case-lambda
       ((g$spec$7032$7lS0C)
        ((case-lambda
           ((g$id$7033$7lS0C)
            ((case-lambda
               ((g$t$7034$7lS0C)
                (if g$t$7034$7lS0C
                  g$t$7034$7lS0C
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7032$7lS0C)))))
             (g$find-library-by$6914$7lS0C
               (case-lambda
                 ((g$x$7035$7lS0C)
                  (eq? g$id$7033$7lS0C
                       (g$library-id$6884$7lS0C g$x$7035$7lS0C))))))))
         (car g$spec$7032$7lS0C)))))
   (g$label->binding-table$6929$7lS0C
     g$label->binding-table$7124$7lS0C
     (g$make-eq-hashtable$5488$7lS0C))
   (g$install-library-record$6930$7lS0C
     g$install-library-record$7125$7lS0C
     (case-lambda
       ((g$lib$7036$7lS0C)
        (begin
          ((case-lambda
             ((g$exp-env$7037$7lS0C)
              (g$for-each$5060$7lS0C
                (case-lambda
                  ((g$x$7038$7lS0C)
                   ((case-lambda
                      ((g$label$7039$7lS0C g$binding$7040$7lS0C)
                       ((case-lambda
                          ((g$binding$7041$7lS0C)
                           (g$hashtable-set!$5492$7lS0C
                             g$label->binding-table$6929$7lS0C
                             g$label$7039$7lS0C
                             g$binding$7041$7lS0C)))
                        ((case-lambda
                           ((g$t$7042$7lS0C)
                            (if (g$memv$5052$7lS0C g$t$7042$7lS0C '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7036$7lS0C
                                  (cdr g$binding$7040$7lS0C)))
                              (if (g$memv$5052$7lS0C
                                    g$t$7042$7lS0C
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7036$7lS0C
                                    (cdr g$binding$7040$7lS0C)))
                                (if (g$memv$5052$7lS0C
                                      g$t$7042$7lS0C
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7036$7lS0C
                                      (cdr g$binding$7040$7lS0C)))
                                  g$binding$7040$7lS0C)))))
                         (car g$binding$7040$7lS0C)))))
                    (car g$x$7038$7lS0C)
                    (cdr g$x$7038$7lS0C))))
                g$exp-env$7037$7lS0C)))
           (g$library-env$6891$7lS0C g$lib$7036$7lS0C))
          ((g$current-library-collection$6878$7lS0C) g$lib$7036$7lS0C)))))
   (g$install-library$6931$7lS0C
     g$install-library$7126$7lS0C
     (case-lambda
       ((g$id$7043$7lS0C
          g$name$7044$7lS0C
          g$ver$7045$7lS0C
          g$imp*$7046$7lS0C
          g$vis*$7047$7lS0C
          g$inv*$7048$7lS0C
          g$exp-subst$7049$7lS0C
          g$exp-env$7050$7lS0C
          g$visit-proc$7051$7lS0C
          g$invoke-proc$7052$7lS0C
          g$visit-code$7053$7lS0C
          g$invoke-code$7054$7lS0C
          g$visible?$7055$7lS0C
          g$source-file-name$7056$7lS0C)
        ((case-lambda
           ((g$imp-lib*$7057$7lS0C g$vis-lib*$7058$7lS0C g$inv-lib*$7059$7lS0C)
            (begin
              (if (not (if (symbol? g$id$7043$7lS0C)
                         (if (list? g$name$7044$7lS0C)
                           (begin '#f (list? g$ver$7045$7lS0C))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7043$7lS0C
                  g$name$7044$7lS0C
                  g$ver$7045$7lS0C)
                (void))
              (if (g$library-exists?$6927$7lS0C g$name$7044$7lS0C)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7044$7lS0C)
                (void))
              ((case-lambda
                 ((g$lib$7060$7lS0C)
                  (g$install-library-record$6930$7lS0C g$lib$7060$7lS0C)))
               (g$make-library$6883$7lS0C
                 g$id$7043$7lS0C
                 g$name$7044$7lS0C
                 g$ver$7045$7lS0C
                 g$imp-lib*$7057$7lS0C
                 g$vis-lib*$7058$7lS0C
                 g$inv-lib*$7059$7lS0C
                 g$exp-subst$7049$7lS0C
                 g$exp-env$7050$7lS0C
                 g$visit-proc$7051$7lS0C
                 g$invoke-proc$7052$7lS0C
                 g$visit-code$7053$7lS0C
                 g$invoke-code$7054$7lS0C
                 g$visible?$7055$7lS0C
                 g$source-file-name$7056$7lS0C)))))
         (g$map$5059$7lS0C
           g$find-library-by-spec/die$6928$7lS0C
           g$imp*$7046$7lS0C)
         (g$map$5059$7lS0C
           g$find-library-by-spec/die$6928$7lS0C
           g$vis*$7047$7lS0C)
         (g$map$5059$7lS0C
           g$find-library-by-spec/die$6928$7lS0C
           g$inv*$7048$7lS0C)))))
   (g$imported-label->binding$6932$7lS0C
     g$imported-label->binding$7127$7lS0C
     (case-lambda
       ((g$lab$7061$7lS0C)
        (g$hashtable-ref$5491$7lS0C
          g$label->binding-table$6929$7lS0C
          g$lab$7061$7lS0C
          '#f))))
   (g$invoke-library$6933$7lS0C
     g$invoke-library$7128$7lS0C
     (case-lambda
       ((g$lib$7062$7lS0C)
        ((case-lambda
           ((g$invoke$7063$7lS0C)
            (if (procedure? g$invoke$7063$7lS0C)
              (begin
                (g$set-library-invoke-state!$6907$7lS0C
                  g$lib$7062$7lS0C
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7062$7lS0C))))
                (g$for-each$5060$7lS0C
                  g$invoke-library$6933$7lS0C
                  (g$library-inv*$6889$7lS0C g$lib$7062$7lS0C))
                (g$set-library-invoke-state!$6907$7lS0C
                  g$lib$7062$7lS0C
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7062$7lS0C))))
                (g$invoke$7063$7lS0C)
                (g$set-library-invoke-state!$6907$7lS0C g$lib$7062$7lS0C '#t))
              (void))))
         (g$library-invoke-state$6893$7lS0C g$lib$7062$7lS0C)))))
   (g$visit-library$6934$7lS0C
     g$visit-library$7129$7lS0C
     (case-lambda
       ((g$lib$7064$7lS0C)
        ((case-lambda
           ((g$visit$7065$7lS0C)
            (if (procedure? g$visit$7065$7lS0C)
              (begin
                (g$set-library-visit-state!$6906$7lS0C
                  g$lib$7064$7lS0C
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7064$7lS0C))))
                (g$for-each$5060$7lS0C
                  g$invoke-library$6933$7lS0C
                  (g$library-vis*$6888$7lS0C g$lib$7064$7lS0C))
                (g$set-library-visit-state!$6906$7lS0C
                  g$lib$7064$7lS0C
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7064$7lS0C))))
                (g$visit$7065$7lS0C)
                (g$set-library-visit-state!$6906$7lS0C g$lib$7064$7lS0C '#t))
              (void))))
         (g$library-visit-state$6892$7lS0C g$lib$7064$7lS0C)))))
   (g$invoke-library-by-spec$6935$7lS0C
     g$invoke-library-by-spec$7130$7lS0C
     (case-lambda
       ((g$spec$7066$7lS0C)
        (g$invoke-library$6933$7lS0C
          (g$find-library-by-spec/die$6928$7lS0C g$spec$7066$7lS0C)))))
   (g$installed-libraries$6936$7lS0C
     g$installed-libraries$7131$7lS0C
     (case-lambda
       ((g$all?$7067$7lS0C)
        ((letrec ((g$f$7068$7lS0C
                    (case-lambda
                      ((g$ls$7069$7lS0C)
                       (if (null? g$ls$7069$7lS0C)
                         '()
                         (if ((case-lambda
                                ((g$t$7070$7lS0C)
                                 (if g$t$7070$7lS0C
                                   g$t$7070$7lS0C
                                   (begin
                                     '#f
                                     (g$library-visible?$6896$7lS0C
                                       (car g$ls$7069$7lS0C))))))
                              g$all?$7067$7lS0C)
                           (cons
                             (car g$ls$7069$7lS0C)
                             (g$f$7068$7lS0C (cdr g$ls$7069$7lS0C)))
                           (g$f$7068$7lS0C (cdr g$ls$7069$7lS0C))))))))
           g$f$7068$7lS0C)
         ((g$current-library-collection$6878$7lS0C))))
       (() (g$installed-libraries$6936$7lS0C '#f))))
   (g$library-spec$6937$7lS0C
     g$library-spec$7132$7lS0C
     (case-lambda
       ((g$x$7071$7lS0C)
        (begin
          (if (not (g$library?$6882$7lS0C g$x$7071$7lS0C))
            (assertion-violation 'library-spec '"not a library" g$x$7071$7lS0C)
            (void))
          (list
            (g$library-id$6884$7lS0C g$x$7071$7lS0C)
            (g$library-name$6885$7lS0C g$x$7071$7lS0C)
            (g$library-version$6886$7lS0C g$x$7071$7lS0C)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7133$7lS0C
     g$build-global-define$7243$7lS0C
     (case-lambda ((g$x$7214$7lS0C) (g$build-void$7210$7lS0C))))
   (g$build-lambda$7182$7lS0C
     g$build-lambda$7244$7lS0C
     (case-lambda
       ((g$ae$7215$7lS0C g$vars$7216$7lS0C g$exp$7217$7lS0C)
        (list 'case-lambda (list g$vars$7216$7lS0C g$exp$7217$7lS0C)))))
   (g$build-case-lambda$7183$7lS0C
     g$build-case-lambda$7245$7lS0C
     (case-lambda
       ((g$ae$7218$7lS0C g$vars*$7219$7lS0C g$exp*$7220$7lS0C)
        (cons
          'case-lambda
          (g$map$5059$7lS0C list g$vars*$7219$7lS0C g$exp*$7220$7lS0C)))))
   (g$build-let$7184$7lS0C
     g$build-let$7246$7lS0C
     (case-lambda
       ((g$ae$7221$7lS0C g$lhs*$7222$7lS0C g$rhs*$7223$7lS0C g$body$7224$7lS0C)
        (cons
          (g$build-lambda$7182$7lS0C
            g$ae$7221$7lS0C
            g$lhs*$7222$7lS0C
            g$body$7224$7lS0C)
          g$rhs*$7223$7lS0C))))
   (g$build-sequence$7209$7lS0C
     g$build-sequence$7247$7lS0C
     (case-lambda
       ((g$ae$7225$7lS0C g$exps$7226$7lS0C)
        ((letrec ((g$loop$7227$7lS0C
                    (case-lambda
                      ((g$exps$7228$7lS0C)
                       (if (null? (cdr g$exps$7228$7lS0C))
                         (car g$exps$7228$7lS0C)
                         (if (equal?
                               (car g$exps$7228$7lS0C)
                               (g$build-void$7210$7lS0C))
                           (g$loop$7227$7lS0C (cdr g$exps$7228$7lS0C))
                           (cons 'begin g$exps$7228$7lS0C)))))))
           g$loop$7227$7lS0C)
         g$exps$7226$7lS0C))))
   (g$build-void$7210$7lS0C
     g$build-void$7248$7lS0C
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7211$7lS0C
     g$build-letrec$7249$7lS0C
     (case-lambda
       ((g$ae$7229$7lS0C
          g$vars$7230$7lS0C
          g$val-exps$7231$7lS0C
          g$body-exp$7232$7lS0C)
        (if (null? g$vars$7230$7lS0C)
          g$body-exp$7232$7lS0C
          (list
            'letrec
            (g$map$5059$7lS0C list g$vars$7230$7lS0C g$val-exps$7231$7lS0C)
            g$body-exp$7232$7lS0C)))))
   (g$build-letrec*$7212$7lS0C
     g$build-letrec*$7250$7lS0C
     (case-lambda
       ((g$ae$7233$7lS0C
          g$vars$7234$7lS0C
          g$val-exps$7235$7lS0C
          g$body-exp$7236$7lS0C)
        (if (null? g$vars$7234$7lS0C)
          g$body-exp$7236$7lS0C
          (list
            'letrec*
            (g$map$5059$7lS0C list g$vars$7234$7lS0C g$val-exps$7235$7lS0C)
            g$body-exp$7236$7lS0C)))))
   (g$build-library-letrec*$7213$7lS0C
     g$build-library-letrec*$7251$7lS0C
     (case-lambda
       ((g$ae$7237$7lS0C
          g$name$7238$7lS0C
          g$vars$7239$7lS0C
          g$locs$7240$7lS0C
          g$val-exps$7241$7lS0C
          g$body-exp$7242$7lS0C)
        (list
          'library-letrec*
          g$name$7238$7lS0C
          (g$map$5059$7lS0C
            list
            g$vars$7239$7lS0C
            g$locs$7240$7lS0C
            g$val-exps$7241$7lS0C)
          g$body-exp$7242$7lS0C)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7252$7lS0C
     g$set-cons$10945$7lS0C
     (case-lambda
       ((g$x$7716$7lS0C g$ls$7717$7lS0C)
        (if (g$memq$5051$7lS0C g$x$7716$7lS0C g$ls$7717$7lS0C)
          g$ls$7717$7lS0C
          (cons g$x$7716$7lS0C g$ls$7717$7lS0C)))))
   (g$set-union$7253$7lS0C
     g$set-union$10946$7lS0C
     (case-lambda
       ((g$ls1$7718$7lS0C g$ls2$7719$7lS0C)
        (if (null? g$ls1$7718$7lS0C)
          g$ls2$7719$7lS0C
          (if (g$memq$5051$7lS0C (car g$ls1$7718$7lS0C) g$ls2$7719$7lS0C)
            (g$set-union$7253$7lS0C (cdr g$ls1$7718$7lS0C) g$ls2$7719$7lS0C)
            (cons
              (car g$ls1$7718$7lS0C)
              (g$set-union$7253$7lS0C
                (cdr g$ls1$7718$7lS0C)
                g$ls2$7719$7lS0C)))))))
   (g$top-mark*$7255$7lS0C g$top-mark*$10947$7lS0C '(top))
   (g$top-marked?$7256$7lS0C
     g$top-marked?$10948$7lS0C
     (case-lambda
       ((g$m*$7720$7lS0C) (g$memq$5051$7lS0C 'top g$m*$7720$7lS0C))))
   (g$gen-lexical$7257$7lS0C
     g$gen-lexical$10949$7lS0C
     (case-lambda
       ((g$sym$7721$7lS0C)
        (if (symbol? g$sym$7721$7lS0C)
          (gensym g$sym$7721$7lS0C)
          (if (g$stx?$7290$7lS0C g$sym$7721$7lS0C)
            (g$gen-lexical$7257$7lS0C (g$id->sym$7319$7lS0C g$sym$7721$7lS0C))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7721$7lS0C))))))
   (g$gen-global$7258$7lS0C
     g$gen-global$10950$7lS0C
     (case-lambda
       ((g$x$7722$7lS0C) (g$gen-lexical$7257$7lS0C g$x$7722$7lS0C))))
   (g$gen-label$7259$7lS0C
     g$gen-label$10951$7lS0C
     (case-lambda ((g$_$7723$7lS0C) (gensym))))
   (g$gen-top-level-label$7260$7lS0C
     g$gen-top-level-label$10952$7lS0C
     (case-lambda
       ((g$id$7724$7lS0C g$rib$7725$7lS0C)
        (letrec* ((g$find$7726$7lS0C
                    (case-lambda
                      ((g$sym$7732$7lS0C
                         g$mark*$7733$7lS0C
                         g$sym*$7734$7lS0C
                         g$mark**$7735$7lS0C
                         g$label*$7736$7lS0C)
                       (if (pair? g$sym*$7734$7lS0C)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7732$7lS0C
                                        (car g$sym*$7734$7lS0C))
                                 (begin
                                   '#f
                                   (g$same-marks?$7320$7lS0C
                                     g$mark*$7733$7lS0C
                                     (car g$mark**$7735$7lS0C)))
                                 '#f)
                             (car g$label*$7736$7lS0C)
                             (g$find$7726$7lS0C
                               g$sym$7732$7lS0C
                               g$mark*$7733$7lS0C
                               (cdr g$sym*$7734$7lS0C)
                               (cdr g$mark**$7735$7lS0C)
                               (cdr g$label*$7736$7lS0C))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7727$7lS0C g$mark*$7728$7lS0C)
              ((case-lambda
                 ((g$sym*$7729$7lS0C)
                  ((case-lambda
                     ((g$t$7730$7lS0C)
                      (if g$t$7730$7lS0C
                        ((case-lambda
                           ((g$label$7731$7lS0C)
                            (if (g$imported-label->binding$7127$7lS0C
                                  g$label$7731$7lS0C)
                              (gensym)
                              g$label$7731$7lS0C)))
                         g$t$7730$7lS0C)
                        (gensym))))
                   (if (g$memq$5051$7lS0C
                         g$sym$7727$7lS0C
                         (g$rib-sym*$7268$7lS0C g$rib$7725$7lS0C))
                     (begin
                       '#f
                       (g$find$7726$7lS0C
                         g$sym$7727$7lS0C
                         g$mark*$7728$7lS0C
                         g$sym*$7729$7lS0C
                         (g$rib-mark**$7269$7lS0C g$rib$7725$7lS0C)
                         (g$rib-label*$7270$7lS0C g$rib$7725$7lS0C)))
                     '#f))))
               (g$rib-sym*$7268$7lS0C g$rib$7725$7lS0C))))
           (g$id->sym$7319$7lS0C g$id$7724$7lS0C)
           (g$stx-mark*$7293$7lS0C g$id$7724$7lS0C))))))
   (g$gen-define-label+loc$7261$7lS0C
     g$gen-define-label+loc$10953$7lS0C
     (case-lambda
       ((g$id$7737$7lS0C g$rib$7738$7lS0C)
        ((case-lambda
           ((g$t$7739$7lS0C)
            (if g$t$7739$7lS0C
              ((case-lambda
                 ((g$env$7740$7lS0C)
                  ((case-lambda
                     ((g$label$7741$7lS0C g$locs$7742$7lS0C)
                      (values
                        g$label$7741$7lS0C
                        ((case-lambda
                           ((g$t$7743$7lS0C)
                            (if g$t$7743$7lS0C
                              (cdr g$t$7743$7lS0C)
                              ((case-lambda
                                 ((g$loc$7744$7lS0C)
                                  (begin
                                    (g$set-interaction-env-locs!$7679$7lS0C
                                      g$env$7740$7lS0C
                                      (cons
                                        (cons
                                          g$label$7741$7lS0C
                                          g$loc$7744$7lS0C)
                                        g$locs$7742$7lS0C))
                                    g$loc$7744$7lS0C)))
                               (g$gen-lexical$7257$7lS0C g$id$7737$7lS0C)))))
                         (g$assq$5047$7lS0C
                           g$label$7741$7lS0C
                           g$locs$7742$7lS0C)))))
                   (g$gen-top-level-label$7260$7lS0C
                     g$id$7737$7lS0C
                     g$rib$7738$7lS0C)
                   (g$interaction-env-locs$7676$7lS0C g$env$7740$7lS0C))))
               g$t$7739$7lS0C)
              (values (gensym) (g$gen-lexical$7257$7lS0C g$id$7737$7lS0C)))))
         (g$top-level-context$7715$7lS0C)))))
   (g$gen-define-label$7262$7lS0C
     g$gen-define-label$10954$7lS0C
     (case-lambda
       ((g$id$7745$7lS0C g$rib$7746$7lS0C)
        (if (g$top-level-context$7715$7lS0C)
          (g$gen-top-level-label$7260$7lS0C g$id$7745$7lS0C g$rib$7746$7lS0C)
          (gensym)))))
   (g$8338$7263$7lS0C
     g$8338$10955$7lS0C
     (make-record-type-descriptor
       'rib
       '#f
       'g$8341$7lS0C
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8340$7264$7lS0C g$8340$10956$7lS0C '#f)
   (g$8339$7265$7lS0C
     g$8339$10957$7lS0C
     (make-record-constructor-descriptor
       g$8338$7263$7lS0C
       '#f
       g$8340$7264$7lS0C))
   (g$rib?$7266$7lS0C
     g$rib?$10958$7lS0C
     (record-predicate g$8338$7263$7lS0C))
   (g$make-rib$7267$7lS0C
     g$make-rib$10959$7lS0C
     (record-constructor g$8339$7265$7lS0C))
   (g$rib-sym*$7268$7lS0C
     g$rib-sym*$10960$7lS0C
     (record-accessor g$8338$7263$7lS0C '0))
   (g$rib-mark**$7269$7lS0C
     g$rib-mark**$10961$7lS0C
     (record-accessor g$8338$7263$7lS0C '1))
   (g$rib-label*$7270$7lS0C
     g$rib-label*$10962$7lS0C
     (record-accessor g$8338$7263$7lS0C '2))
   (g$rib-sealed/freq$7271$7lS0C
     g$rib-sealed/freq$10963$7lS0C
     (record-accessor g$8338$7263$7lS0C '3))
   (g$rib-cache$7272$7lS0C
     g$rib-cache$10964$7lS0C
     (record-accessor g$8338$7263$7lS0C '4))
   (g$set-rib-sym*!$7273$7lS0C
     g$set-rib-sym*!$10965$7lS0C
     (record-mutator g$8338$7263$7lS0C '0))
   (g$set-rib-mark**!$7274$7lS0C
     g$set-rib-mark**!$10966$7lS0C
     (record-mutator g$8338$7263$7lS0C '1))
   (g$set-rib-label*!$7275$7lS0C
     g$set-rib-label*!$10967$7lS0C
     (record-mutator g$8338$7263$7lS0C '2))
   (g$set-rib-sealed/freq!$7276$7lS0C
     g$set-rib-sealed/freq!$10968$7lS0C
     (record-mutator g$8338$7263$7lS0C '3))
   (g$set-rib-cache!$7277$7lS0C
     g$set-rib-cache!$10969$7lS0C
     (record-mutator g$8338$7263$7lS0C '4))
   (g$make-empty-rib$7278$7lS0C
     g$make-empty-rib$10970$7lS0C
     (case-lambda (() (g$make-rib$7267$7lS0C '() '() '() '#f '#f))))
   (g$make-cache-rib$7279$7lS0C
     g$make-cache-rib$10971$7lS0C
     (case-lambda
       (()
        (g$make-rib$7267$7lS0C
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5488$7lS0C)))))
   (g$find-label$7280$7lS0C
     g$find-label$10972$7lS0C
     (case-lambda
       ((g$rib$7747$7lS0C g$sym$7748$7lS0C g$mark*$7749$7lS0C)
        ((case-lambda
           ((g$ht$7750$7lS0C)
            (if g$ht$7750$7lS0C
              (begin
                '#f
                ((case-lambda
                   ((g$cv$7751$7lS0C)
                    ((case-lambda
                       ((g$t$7752$7lS0C)
                        (if g$t$7752$7lS0C (cdr g$t$7752$7lS0C) '#f)))
                     (if g$cv$7751$7lS0C
                       (begin
                         '#f
                         (g$assp$5050$7lS0C
                           (case-lambda
                             ((g$m$7753$7lS0C)
                              (g$same-marks?$7320$7lS0C
                                g$mark*$7749$7lS0C
                                g$m$7753$7lS0C)))
                           g$cv$7751$7lS0C))
                       '#f))))
                 (g$hashtable-ref$5491$7lS0C
                   g$ht$7750$7lS0C
                   g$sym$7748$7lS0C
                   '#f)))
              '#f)))
         (g$rib-cache$7272$7lS0C g$rib$7747$7lS0C)))))
   (g$extend-rib!$7281$7lS0C
     g$extend-rib!$10973$7lS0C
     (case-lambda
       ((g$rib$7754$7lS0C g$id$7755$7lS0C g$label$7756$7lS0C)
        (letrec* ((g$find$7757$7lS0C
                    (case-lambda
                      ((g$sym$7766$7lS0C
                         g$mark*$7767$7lS0C
                         g$sym*$7768$7lS0C
                         g$mark**$7769$7lS0C
                         g$label*$7770$7lS0C)
                       (if (pair? g$sym*$7768$7lS0C)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7766$7lS0C
                                        (car g$sym*$7768$7lS0C))
                                 (begin
                                   '#f
                                   (g$same-marks?$7320$7lS0C
                                     g$mark*$7767$7lS0C
                                     (car g$mark**$7769$7lS0C)))
                                 '#f)
                             g$label*$7770$7lS0C
                             (g$find$7757$7lS0C
                               g$sym$7766$7lS0C
                               g$mark*$7767$7lS0C
                               (cdr g$sym*$7768$7lS0C)
                               (cdr g$mark**$7769$7lS0C)
                               (cdr g$label*$7770$7lS0C))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7271$7lS0C g$rib$7754$7lS0C)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7754$7lS0C)
              (void))
            ((case-lambda
               ((g$sym$7758$7lS0C g$mark*$7759$7lS0C)
                ((case-lambda
                   ((g$sym*$7760$7lS0C)
                    ((case-lambda
                       ((g$t$7761$7lS0C)
                        (if g$t$7761$7lS0C
                          ((case-lambda
                             ((g$p$7762$7lS0C)
                              (if (not (eq? g$label$7756$7lS0C g$p$7762$7lS0C))
                                (g$syntax-violation$7708$7lS0C
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$7755$7lS0C)
                                (void))))
                           g$t$7761$7lS0C)
                          ((case-lambda
                             ((g$t$7763$7lS0C)
                              (if g$t$7763$7lS0C
                                ((case-lambda
                                   ((g$p$7764$7lS0C)
                                    (if (not (eq? g$label$7756$7lS0C
                                                  (car g$p$7764$7lS0C)))
                                      (if (g$top-level-context$7715$7lS0C)
                                        (set-car!
                                          g$p$7764$7lS0C
                                          g$label$7756$7lS0C)
                                        (g$syntax-violation$7708$7lS0C
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$7755$7lS0C))
                                      (void))))
                                 g$t$7763$7lS0C)
                                (begin
                                  (if (g$rib-cache$7272$7lS0C g$rib$7754$7lS0C)
                                    (g$hashtable-update!$5495$7lS0C
                                      (g$rib-cache$7272$7lS0C g$rib$7754$7lS0C)
                                      g$sym$7758$7lS0C
                                      (case-lambda
                                        ((g$e$7765$7lS0C)
                                         (cons
                                           (cons
                                             g$mark*$7759$7lS0C
                                             g$label$7756$7lS0C)
                                           g$e$7765$7lS0C)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7273$7lS0C
                                    g$rib$7754$7lS0C
                                    (cons g$sym$7758$7lS0C g$sym*$7760$7lS0C))
                                  (g$set-rib-mark**!$7274$7lS0C
                                    g$rib$7754$7lS0C
                                    (cons
                                      g$mark*$7759$7lS0C
                                      (g$rib-mark**$7269$7lS0C
                                        g$rib$7754$7lS0C)))
                                  (g$set-rib-label*!$7275$7lS0C
                                    g$rib$7754$7lS0C
                                    (cons
                                      g$label$7756$7lS0C
                                      (g$rib-label*$7270$7lS0C
                                        g$rib$7754$7lS0C)))))))
                           (if (g$memq$5051$7lS0C
                                 g$sym$7758$7lS0C
                                 (g$rib-sym*$7268$7lS0C g$rib$7754$7lS0C))
                             (begin
                               '#f
                               (g$find$7757$7lS0C
                                 g$sym$7758$7lS0C
                                 g$mark*$7759$7lS0C
                                 g$sym*$7760$7lS0C
                                 (g$rib-mark**$7269$7lS0C g$rib$7754$7lS0C)
                                 (g$rib-label*$7270$7lS0C g$rib$7754$7lS0C)))
                             '#f)))))
                     (g$find-label$7280$7lS0C
                       g$rib$7754$7lS0C
                       g$sym$7758$7lS0C
                       g$mark*$7759$7lS0C))))
                 (g$rib-sym*$7268$7lS0C g$rib$7754$7lS0C))))
             (g$id->sym$7319$7lS0C g$id$7755$7lS0C)
             (g$stx-mark*$7293$7lS0C g$id$7755$7lS0C)))))))
   (g$extend-rib/nc!$7282$7lS0C
     g$extend-rib/nc!$10974$7lS0C
     (case-lambda
       ((g$rib$7771$7lS0C g$id$7772$7lS0C g$label$7773$7lS0C)
        ((case-lambda
           ((g$sym$7774$7lS0C g$mark*$7775$7lS0C)
            ((case-lambda
               ((g$sym*$7776$7lS0C)
                (begin
                  (if (g$rib-cache$7272$7lS0C g$rib$7771$7lS0C)
                    (g$hashtable-update!$5495$7lS0C
                      (g$rib-cache$7272$7lS0C g$rib$7771$7lS0C)
                      g$sym$7774$7lS0C
                      (case-lambda
                        ((g$e$7777$7lS0C)
                         (cons
                           (cons g$mark*$7775$7lS0C g$label$7773$7lS0C)
                           g$e$7777$7lS0C)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7273$7lS0C
                    g$rib$7771$7lS0C
                    (cons g$sym$7774$7lS0C g$sym*$7776$7lS0C))
                  (g$set-rib-mark**!$7274$7lS0C
                    g$rib$7771$7lS0C
                    (cons
                      g$mark*$7775$7lS0C
                      (g$rib-mark**$7269$7lS0C g$rib$7771$7lS0C)))
                  (g$set-rib-label*!$7275$7lS0C
                    g$rib$7771$7lS0C
                    (cons
                      g$label$7773$7lS0C
                      (g$rib-label*$7270$7lS0C g$rib$7771$7lS0C))))))
             (g$rib-sym*$7268$7lS0C g$rib$7771$7lS0C))))
         (g$id->sym$7319$7lS0C g$id$7772$7lS0C)
         (g$stx-mark*$7293$7lS0C g$id$7772$7lS0C)))))
   (g$make-rib-map$7283$7lS0C
     g$make-rib-map$10975$7lS0C
     (case-lambda
       ((g$sym*$7778$7lS0C)
        ((case-lambda
           ((g$ht$7779$7lS0C)
            ((letrec ((g$f$7780$7lS0C
                        (case-lambda
                          ((g$i$7781$7lS0C g$sym*$7782$7lS0C)
                           (if (null? g$sym*$7782$7lS0C)
                             g$ht$7779$7lS0C
                             (begin
                               (g$hashtable-update!$5495$7lS0C
                                 g$ht$7779$7lS0C
                                 (car g$sym*$7782$7lS0C)
                                 (case-lambda
                                   ((g$x$7783$7lS0C)
                                    (cons g$i$7781$7lS0C g$x$7783$7lS0C)))
                                 '())
                               (g$f$7780$7lS0C
                                 (+ g$i$7781$7lS0C '1)
                                 (cdr g$sym*$7782$7lS0C))))))))
               g$f$7780$7lS0C)
             '0
             g$sym*$7778$7lS0C)))
         (g$make-eq-hashtable$5488$7lS0C)))))
   (g$seal-rib!$7284$7lS0C
     g$seal-rib!$10976$7lS0C
     (case-lambda
       ((g$rib$7784$7lS0C)
        ((case-lambda
           ((g$sym*$7785$7lS0C)
            (if (not (null? g$sym*$7785$7lS0C))
              (begin
                (g$set-rib-sym*!$7273$7lS0C
                  g$rib$7784$7lS0C
                  (list->vector g$sym*$7785$7lS0C))
                (g$set-rib-mark**!$7274$7lS0C
                  g$rib$7784$7lS0C
                  (list->vector (g$rib-mark**$7269$7lS0C g$rib$7784$7lS0C)))
                (g$set-rib-label*!$7275$7lS0C
                  g$rib$7784$7lS0C
                  (list->vector (g$rib-label*$7270$7lS0C g$rib$7784$7lS0C)))
                (g$set-rib-sealed/freq!$7276$7lS0C
                  g$rib$7784$7lS0C
                  (g$make-rib-map$7283$7lS0C g$sym*$7785$7lS0C)))
              (void))))
         (g$rib-sym*$7268$7lS0C g$rib$7784$7lS0C)))))
   (g$unseal-rib!$7285$7lS0C
     g$unseal-rib!$10977$7lS0C
     (case-lambda
       ((g$rib$7786$7lS0C)
        (if (g$rib-sealed/freq$7271$7lS0C g$rib$7786$7lS0C)
          (begin
            (g$set-rib-sealed/freq!$7276$7lS0C g$rib$7786$7lS0C '#f)
            (g$set-rib-sym*!$7273$7lS0C
              g$rib$7786$7lS0C
              (vector->list (g$rib-sym*$7268$7lS0C g$rib$7786$7lS0C)))
            (g$set-rib-mark**!$7274$7lS0C
              g$rib$7786$7lS0C
              (vector->list (g$rib-mark**$7269$7lS0C g$rib$7786$7lS0C)))
            (g$set-rib-label*!$7275$7lS0C
              g$rib$7786$7lS0C
              (vector->list (g$rib-label*$7270$7lS0C g$rib$7786$7lS0C))))
          (void)))))
   (g$make-full-rib$7286$7lS0C
     g$make-full-rib$10978$7lS0C
     (case-lambda
       ((g$id*$7787$7lS0C g$label*$7788$7lS0C)
        ((case-lambda
           ((g$r$7789$7lS0C)
            (begin (g$seal-rib!$7284$7lS0C g$r$7789$7lS0C) g$r$7789$7lS0C)))
         (g$make-rib$7267$7lS0C
           (g$map$5059$7lS0C g$id->sym$7319$7lS0C g$id*$7787$7lS0C)
           (g$map$5059$7lS0C g$stx-mark*$7293$7lS0C g$id*$7787$7lS0C)
           g$label*$7788$7lS0C
           '#f
           '#f)))))
   (g$8369$7287$7lS0C
     g$8369$10979$7lS0C
     (make-record-type-descriptor
       'stx
       '#f
       'g$8372$7lS0C
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8371$7288$7lS0C g$8371$10980$7lS0C '#f)
   (g$8370$7289$7lS0C
     g$8370$10981$7lS0C
     (make-record-constructor-descriptor
       g$8369$7287$7lS0C
       '#f
       g$8371$7288$7lS0C))
   (g$stx?$7290$7lS0C
     g$stx?$10982$7lS0C
     (record-predicate g$8369$7287$7lS0C))
   (g$make-stx$7291$7lS0C
     g$make-stx$10983$7lS0C
     (record-constructor g$8370$7289$7lS0C))
   (g$stx-expr$7292$7lS0C
     g$stx-expr$10984$7lS0C
     (record-accessor g$8369$7287$7lS0C '0))
   (g$stx-mark*$7293$7lS0C
     g$stx-mark*$10985$7lS0C
     (record-accessor g$8369$7287$7lS0C '1))
   (g$stx-subst*$7294$7lS0C
     g$stx-subst*$10986$7lS0C
     (record-accessor g$8369$7287$7lS0C '2))
   (g$stx-ae*$7295$7lS0C
     g$stx-ae*$10987$7lS0C
     (record-accessor g$8369$7287$7lS0C '3))
   (g$set-stx-expr!$7296$7lS0C
     g$set-stx-expr!$10988$7lS0C
     (record-mutator g$8369$7287$7lS0C '0))
   (g$set-stx-mark*!$7297$7lS0C
     g$set-stx-mark*!$10989$7lS0C
     (record-mutator g$8369$7287$7lS0C '1))
   (g$set-stx-subst*!$7298$7lS0C
     g$set-stx-subst*!$10990$7lS0C
     (record-mutator g$8369$7287$7lS0C '2))
   (g$set-stx-ae*!$7299$7lS0C
     g$set-stx-ae*!$10991$7lS0C
     (record-mutator g$8369$7287$7lS0C '3))
   (g$rp$7300$7lS0C
     g$rp$10992$7lS0C
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7790$7lS0C g$p$7791$7lS0C g$wr$7792$7lS0C)
          (begin
            (display '"#<syntax " g$p$7791$7lS0C)
            (write (g$stx->datum$7329$7lS0C g$x$7790$7lS0C) g$p$7791$7lS0C)
            ((case-lambda
               ((g$expr$7793$7lS0C)
                (if (annotation? g$expr$7793$7lS0C)
                  ((case-lambda
                     ((g$src$7794$7lS0C)
                      (if (pair? g$src$7794$7lS0C)
                        (begin
                          (display '" (" g$p$7791$7lS0C)
                          (display (cdr g$src$7794$7lS0C) g$p$7791$7lS0C)
                          (display '" of " g$p$7791$7lS0C)
                          (display (car g$src$7794$7lS0C) g$p$7791$7lS0C)
                          (display '")" g$p$7791$7lS0C))
                        (void))))
                   (annotation-source g$expr$7793$7lS0C))
                  (void))))
             (g$stx-expr$7292$7lS0C g$x$7790$7lS0C))
            (display '">" g$p$7791$7lS0C))))))
   (g$datum->stx$7301$7lS0C
     g$datum->stx$10993$7lS0C
     (case-lambda
       ((g$id$7795$7lS0C g$datum$7796$7lS0C)
        (g$make-stx$7291$7lS0C
          g$datum$7796$7lS0C
          (g$stx-mark*$7293$7lS0C g$id$7795$7lS0C)
          (g$stx-subst*$7294$7lS0C g$id$7795$7lS0C)
          (g$stx-ae*$7295$7lS0C g$id$7795$7lS0C)))))
   (g$gen-mark$7302$7lS0C
     g$gen-mark$10994$7lS0C
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7303$7lS0C g$anti-mark$10995$7lS0C '#f)
   (g$anti-mark?$7304$7lS0C g$anti-mark?$10996$7lS0C not)
   (g$join-wraps$7305$7lS0C
     g$join-wraps$10997$7lS0C
     (case-lambda
       ((g$m1*$7797$7lS0C g$s1*$7798$7lS0C g$ae1*$7799$7lS0C g$e$7800$7lS0C)
        (letrec* ((g$cancel$7801$7lS0C
                    (case-lambda
                      ((g$ls1$7805$7lS0C g$ls2$7806$7lS0C)
                       ((letrec ((g$f$7807$7lS0C
                                   (case-lambda
                                     ((g$x$7808$7lS0C g$ls1$7809$7lS0C)
                                      (if (null? g$ls1$7809$7lS0C)
                                        (cdr g$ls2$7806$7lS0C)
                                        (cons
                                          g$x$7808$7lS0C
                                          (g$f$7807$7lS0C
                                            (car g$ls1$7809$7lS0C)
                                            (cdr g$ls1$7809$7lS0C))))))))
                          g$f$7807$7lS0C)
                        (car g$ls1$7805$7lS0C)
                        (cdr g$ls1$7805$7lS0C))))))
          ((case-lambda
             ((g$m2*$7802$7lS0C g$s2*$7803$7lS0C g$ae2*$7804$7lS0C)
              (if (if (not (null? g$m1*$7797$7lS0C))
                    (if (not (null? g$m2*$7802$7lS0C))
                      (begin
                        '#f
                        (g$anti-mark?$7304$7lS0C (car g$m2*$7802$7lS0C)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7801$7lS0C g$m1*$7797$7lS0C g$m2*$7802$7lS0C)
                  (g$cancel$7801$7lS0C g$s1*$7798$7lS0C g$s2*$7803$7lS0C)
                  (g$cancel$7801$7lS0C g$ae1*$7799$7lS0C g$ae2*$7804$7lS0C))
                (values
                  (append g$m1*$7797$7lS0C g$m2*$7802$7lS0C)
                  (append g$s1*$7798$7lS0C g$s2*$7803$7lS0C)
                  (append g$ae1*$7799$7lS0C g$ae2*$7804$7lS0C)))))
           (g$stx-mark*$7293$7lS0C g$e$7800$7lS0C)
           (g$stx-subst*$7294$7lS0C g$e$7800$7lS0C)
           (g$stx-ae*$7295$7lS0C g$e$7800$7lS0C))))))
   (g$mkstx$7306$7lS0C
     g$mkstx$10998$7lS0C
     (case-lambda
       ((g$e$7810$7lS0C g$m*$7811$7lS0C g$s*$7812$7lS0C g$ae*$7813$7lS0C)
        (if (if (g$stx?$7290$7lS0C g$e$7810$7lS0C)
              (begin '#f (not (g$top-marked?$7256$7lS0C g$m*$7811$7lS0C)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7305$7lS0C
                 g$m*$7811$7lS0C
                 g$s*$7812$7lS0C
                 g$ae*$7813$7lS0C
                 g$e$7810$7lS0C)))
            (case-lambda
              ((g$m*$7817$7lS0C g$s*$7818$7lS0C g$ae*$7819$7lS0C)
               ((case-lambda
                  ((g$ae*$7820$7lS0C g$s*$7821$7lS0C g$m*$7822$7lS0C)
                   (g$make-stx$7291$7lS0C
                     (g$stx-expr$7292$7lS0C g$e$7810$7lS0C)
                     g$m*$7822$7lS0C
                     g$s*$7821$7lS0C
                     g$ae*$7820$7lS0C)))
                g$ae*$7819$7lS0C
                g$s*$7818$7lS0C
                g$m*$7817$7lS0C))))
          (g$make-stx$7291$7lS0C
            g$e$7810$7lS0C
            g$m*$7811$7lS0C
            g$s*$7812$7lS0C
            g$ae*$7813$7lS0C)))))
   (g$add-mark$7307$7lS0C
     g$add-mark$10999$7lS0C
     (case-lambda
       ((g$m$7823$7lS0C g$e$7824$7lS0C g$ae$7825$7lS0C)
        (g$mkstx$7306$7lS0C
          g$e$7824$7lS0C
          (list g$m$7823$7lS0C)
          '(shift)
          (list g$ae$7825$7lS0C)))))
   (g$add-subst$7308$7lS0C
     g$add-subst$11000$7lS0C
     (case-lambda
       ((g$subst$7826$7lS0C g$e$7827$7lS0C)
        (g$mkstx$7306$7lS0C g$e$7827$7lS0C '() (list g$subst$7826$7lS0C) '()))))
   (g$syntax-kind?$7309$7lS0C
     g$syntax-kind?$11001$7lS0C
     (case-lambda
       ((g$x$7828$7lS0C g$p?$7829$7lS0C)
        (if (g$stx?$7290$7lS0C g$x$7828$7lS0C)
          (g$syntax-kind?$7309$7lS0C
            (g$stx-expr$7292$7lS0C g$x$7828$7lS0C)
            g$p?$7829$7lS0C)
          (if (annotation? g$x$7828$7lS0C)
            (g$syntax-kind?$7309$7lS0C
              (annotation-expression g$x$7828$7lS0C)
              g$p?$7829$7lS0C)
            (g$p?$7829$7lS0C g$x$7828$7lS0C))))))
   (g$syntax-vector->list$7310$7lS0C
     g$syntax-vector->list$11002$7lS0C
     (case-lambda
       ((g$x$7830$7lS0C)
        (if (g$stx?$7290$7lS0C g$x$7830$7lS0C)
          ((case-lambda
             ((g$ls$7831$7lS0C g$m*$7832$7lS0C g$s*$7833$7lS0C g$ae*$7834$7lS0C)
              (g$map$5059$7lS0C
                (case-lambda
                  ((g$x$7835$7lS0C)
                   (g$mkstx$7306$7lS0C
                     g$x$7835$7lS0C
                     g$m*$7832$7lS0C
                     g$s*$7833$7lS0C
                     g$ae*$7834$7lS0C)))
                g$ls$7831$7lS0C)))
           (g$syntax-vector->list$7310$7lS0C
             (g$stx-expr$7292$7lS0C g$x$7830$7lS0C))
           (g$stx-mark*$7293$7lS0C g$x$7830$7lS0C)
           (g$stx-subst*$7294$7lS0C g$x$7830$7lS0C)
           (g$stx-ae*$7295$7lS0C g$x$7830$7lS0C))
          (if (annotation? g$x$7830$7lS0C)
            (g$syntax-vector->list$7310$7lS0C
              (annotation-expression g$x$7830$7lS0C))
            (if (vector? g$x$7830$7lS0C)
              (vector->list g$x$7830$7lS0C)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7830$7lS0C)))))))
   (g$syntax-pair?$7311$7lS0C
     g$syntax-pair?$11003$7lS0C
     (case-lambda
       ((g$x$7836$7lS0C) (g$syntax-kind?$7309$7lS0C g$x$7836$7lS0C pair?))))
   (g$syntax-vector?$7312$7lS0C
     g$syntax-vector?$11004$7lS0C
     (case-lambda
       ((g$x$7837$7lS0C) (g$syntax-kind?$7309$7lS0C g$x$7837$7lS0C vector?))))
   (g$syntax-null?$7313$7lS0C
     g$syntax-null?$11005$7lS0C
     (case-lambda
       ((g$x$7838$7lS0C) (g$syntax-kind?$7309$7lS0C g$x$7838$7lS0C null?))))
   (g$syntax-list?$7314$7lS0C
     g$syntax-list?$11006$7lS0C
     (case-lambda
       ((g$x$7839$7lS0C)
        ((case-lambda
           ((g$t$7840$7lS0C)
            (if g$t$7840$7lS0C
              g$t$7840$7lS0C
              (begin
                '#f
                (if (g$syntax-pair?$7311$7lS0C g$x$7839$7lS0C)
                  (begin
                    '#f
                    (g$syntax-list?$7314$7lS0C
                      (g$syntax-cdr$7316$7lS0C g$x$7839$7lS0C)))
                  '#f)))))
         (g$syntax-null?$7313$7lS0C g$x$7839$7lS0C)))))
   (g$syntax-car$7315$7lS0C
     g$syntax-car$11007$7lS0C
     (case-lambda
       ((g$x$7841$7lS0C)
        (if (g$stx?$7290$7lS0C g$x$7841$7lS0C)
          (g$mkstx$7306$7lS0C
            (g$syntax-car$7315$7lS0C (g$stx-expr$7292$7lS0C g$x$7841$7lS0C))
            (g$stx-mark*$7293$7lS0C g$x$7841$7lS0C)
            (g$stx-subst*$7294$7lS0C g$x$7841$7lS0C)
            (g$stx-ae*$7295$7lS0C g$x$7841$7lS0C))
          (if (annotation? g$x$7841$7lS0C)
            (g$syntax-car$7315$7lS0C (annotation-expression g$x$7841$7lS0C))
            (if (pair? g$x$7841$7lS0C)
              (car g$x$7841$7lS0C)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7841$7lS0C)))))))
   (g$syntax-cdr$7316$7lS0C
     g$syntax-cdr$11008$7lS0C
     (case-lambda
       ((g$x$7842$7lS0C)
        (if (g$stx?$7290$7lS0C g$x$7842$7lS0C)
          (g$mkstx$7306$7lS0C
            (g$syntax-cdr$7316$7lS0C (g$stx-expr$7292$7lS0C g$x$7842$7lS0C))
            (g$stx-mark*$7293$7lS0C g$x$7842$7lS0C)
            (g$stx-subst*$7294$7lS0C g$x$7842$7lS0C)
            (g$stx-ae*$7295$7lS0C g$x$7842$7lS0C))
          (if (annotation? g$x$7842$7lS0C)
            (g$syntax-cdr$7316$7lS0C (annotation-expression g$x$7842$7lS0C))
            (if (pair? g$x$7842$7lS0C)
              (cdr g$x$7842$7lS0C)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7842$7lS0C)))))))
   (g$syntax->list$7317$7lS0C
     g$syntax->list$11009$7lS0C
     (case-lambda
       ((g$x$7843$7lS0C)
        (if (g$syntax-pair?$7311$7lS0C g$x$7843$7lS0C)
          (cons
            (g$syntax-car$7315$7lS0C g$x$7843$7lS0C)
            (g$syntax->list$7317$7lS0C
              (g$syntax-cdr$7316$7lS0C g$x$7843$7lS0C)))
          (if (g$syntax-null?$7313$7lS0C g$x$7843$7lS0C)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7843$7lS0C))))))
   (g$id?$7318$7lS0C
     g$id?$11010$7lS0C
     (case-lambda
       ((g$x$7844$7lS0C)
        (if (g$stx?$7290$7lS0C g$x$7844$7lS0C)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7845$7lS0C)
                (symbol?
                  (if (annotation? g$expr$7845$7lS0C)
                    (annotation-stripped g$expr$7845$7lS0C)
                    g$expr$7845$7lS0C))))
             (g$stx-expr$7292$7lS0C g$x$7844$7lS0C)))
          '#f))))
   (g$id->sym$7319$7lS0C
     g$id->sym$11011$7lS0C
     (case-lambda
       ((g$x$7846$7lS0C)
        (begin
          (if (not (g$stx?$7290$7lS0C g$x$7846$7lS0C))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7846$7lS0C)
            (void))
          ((case-lambda
             ((g$expr$7847$7lS0C)
              ((case-lambda
                 ((g$sym$7848$7lS0C)
                  (if (symbol? g$sym$7848$7lS0C)
                    g$sym$7848$7lS0C
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$7846$7lS0C))))
               (if (annotation? g$expr$7847$7lS0C)
                 (annotation-stripped g$expr$7847$7lS0C)
                 g$expr$7847$7lS0C))))
           (g$stx-expr$7292$7lS0C g$x$7846$7lS0C))))))
   (g$same-marks?$7320$7lS0C
     g$same-marks?$11012$7lS0C
     (case-lambda
       ((g$x$7849$7lS0C g$y$7850$7lS0C)
        ((case-lambda
           ((g$t$7851$7lS0C)
            (if g$t$7851$7lS0C
              g$t$7851$7lS0C
              (begin
                '#f
                (if (pair? g$x$7849$7lS0C)
                  (if (pair? g$y$7850$7lS0C)
                    (if (eq? (car g$x$7849$7lS0C) (car g$y$7850$7lS0C))
                      (begin
                        '#f
                        (g$same-marks?$7320$7lS0C
                          (cdr g$x$7849$7lS0C)
                          (cdr g$y$7850$7lS0C)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7849$7lS0C) (begin '#f (null? g$y$7850$7lS0C)) '#f)))))
   (g$bound-id=?$7321$7lS0C
     g$bound-id=?$11013$7lS0C
     (case-lambda
       ((g$x$7852$7lS0C g$y$7853$7lS0C)
        (if (eq? (g$id->sym$7319$7lS0C g$x$7852$7lS0C)
                 (g$id->sym$7319$7lS0C g$y$7853$7lS0C))
          (begin
            '#f
            (g$same-marks?$7320$7lS0C
              (g$stx-mark*$7293$7lS0C g$x$7852$7lS0C)
              (g$stx-mark*$7293$7lS0C g$y$7853$7lS0C)))
          '#f))))
   (g$free-id=?$7322$7lS0C
     g$free-id=?$11014$7lS0C
     (case-lambda
       ((g$i$7854$7lS0C g$j$7855$7lS0C)
        ((case-lambda
           ((g$t0$7856$7lS0C g$t1$7857$7lS0C)
            (if ((case-lambda
                   ((g$t$7858$7lS0C)
                    (if g$t$7858$7lS0C
                      g$t$7858$7lS0C
                      (begin '#f g$t1$7857$7lS0C))))
                 g$t0$7856$7lS0C)
              (eq? g$t0$7856$7lS0C g$t1$7857$7lS0C)
              (eq? (g$id->sym$7319$7lS0C g$i$7854$7lS0C)
                   (g$id->sym$7319$7lS0C g$j$7855$7lS0C)))))
         (g$id->real-label$7332$7lS0C g$i$7854$7lS0C)
         (g$id->real-label$7332$7lS0C g$j$7855$7lS0C)))))
   (g$valid-bound-ids?$7323$7lS0C
     g$valid-bound-ids?$11015$7lS0C
     (case-lambda
       ((g$id*$7859$7lS0C)
        (if (g$for-all$5057$7lS0C g$id?$7318$7lS0C g$id*$7859$7lS0C)
          (begin '#f (g$distinct-bound-ids?$7324$7lS0C g$id*$7859$7lS0C))
          '#f))))
   (g$distinct-bound-ids?$7324$7lS0C
     g$distinct-bound-ids?$11016$7lS0C
     (case-lambda
       ((g$id*$7860$7lS0C)
        ((case-lambda
           ((g$t$7861$7lS0C)
            (if g$t$7861$7lS0C
              g$t$7861$7lS0C
              (begin
                '#f
                (if (not (g$bound-id-member?$7325$7lS0C
                           (car g$id*$7860$7lS0C)
                           (cdr g$id*$7860$7lS0C)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7324$7lS0C (cdr g$id*$7860$7lS0C)))
                  '#f)))))
         (null? g$id*$7860$7lS0C)))))
   (g$bound-id-member?$7325$7lS0C
     g$bound-id-member?$11017$7lS0C
     (case-lambda
       ((g$id$7862$7lS0C g$id*$7863$7lS0C)
        (if (pair? g$id*$7863$7lS0C)
          (begin
            '#f
            ((case-lambda
               ((g$t$7864$7lS0C)
                (if g$t$7864$7lS0C
                  g$t$7864$7lS0C
                  (begin
                    '#f
                    (g$bound-id-member?$7325$7lS0C
                      g$id$7862$7lS0C
                      (cdr g$id*$7863$7lS0C))))))
             (g$bound-id=?$7321$7lS0C g$id$7862$7lS0C (car g$id*$7863$7lS0C))))
          '#f))))
   (g$self-evaluating?$7326$7lS0C
     g$self-evaluating?$11018$7lS0C
     (case-lambda
       ((g$x$7865$7lS0C)
        ((case-lambda
           ((g$t$7866$7lS0C)
            (if g$t$7866$7lS0C
              g$t$7866$7lS0C
              ((case-lambda
                 ((g$t$7867$7lS0C)
                  (if g$t$7867$7lS0C
                    g$t$7867$7lS0C
                    ((case-lambda
                       ((g$t$7868$7lS0C)
                        (if g$t$7868$7lS0C
                          g$t$7868$7lS0C
                          ((case-lambda
                             ((g$t$7869$7lS0C)
                              (if g$t$7869$7lS0C
                                g$t$7869$7lS0C
                                (begin '#f (bytevector? g$x$7865$7lS0C)))))
                           (boolean? g$x$7865$7lS0C)))))
                     (char? g$x$7865$7lS0C)))))
               (string? g$x$7865$7lS0C)))))
         (number? g$x$7865$7lS0C)))))
   (g$strip-annotations$7327$7lS0C
     g$strip-annotations$11019$7lS0C
     (case-lambda
       ((g$x$7870$7lS0C)
        (if (pair? g$x$7870$7lS0C)
          (cons
            (g$strip-annotations$7327$7lS0C (car g$x$7870$7lS0C))
            (g$strip-annotations$7327$7lS0C (cdr g$x$7870$7lS0C)))
          (if (vector? g$x$7870$7lS0C)
            (vector-map g$strip-annotations$7327$7lS0C g$x$7870$7lS0C)
            (if (annotation? g$x$7870$7lS0C)
              (annotation-stripped g$x$7870$7lS0C)
              g$x$7870$7lS0C))))))
   (g$strip$7328$7lS0C
     g$strip$11020$7lS0C
     (case-lambda
       ((g$x$7871$7lS0C g$m*$7872$7lS0C)
        (if (g$top-marked?$7256$7lS0C g$m*$7872$7lS0C)
          (if ((case-lambda
                 ((g$t$7873$7lS0C)
                  (if g$t$7873$7lS0C
                    g$t$7873$7lS0C
                    ((case-lambda
                       ((g$t$7874$7lS0C)
                        (if g$t$7874$7lS0C
                          g$t$7874$7lS0C
                          (begin
                            '#f
                            (if (vector? g$x$7871$7lS0C)
                              (if (> (vector-length g$x$7871$7lS0C) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7871$7lS0C '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7871$7lS0C)
                       (begin '#f (annotation? (car g$x$7871$7lS0C)))
                       '#f)))))
               (annotation? g$x$7871$7lS0C))
            (g$strip-annotations$7327$7lS0C g$x$7871$7lS0C)
            g$x$7871$7lS0C)
          ((letrec ((g$f$7875$7lS0C
                      (case-lambda
                        ((g$x$7876$7lS0C)
                         (if (g$stx?$7290$7lS0C g$x$7876$7lS0C)
                           (g$strip$7328$7lS0C
                             (g$stx-expr$7292$7lS0C g$x$7876$7lS0C)
                             (g$stx-mark*$7293$7lS0C g$x$7876$7lS0C))
                           (if (annotation? g$x$7876$7lS0C)
                             (annotation-stripped g$x$7876$7lS0C)
                             (if (pair? g$x$7876$7lS0C)
                               ((case-lambda
                                  ((g$a$7877$7lS0C g$d$7878$7lS0C)
                                   (if (if (eq? g$a$7877$7lS0C
                                                (car g$x$7876$7lS0C))
                                         (begin
                                           '#f
                                           (eq? g$d$7878$7lS0C
                                                (cdr g$x$7876$7lS0C)))
                                         '#f)
                                     g$x$7876$7lS0C
                                     (cons g$a$7877$7lS0C g$d$7878$7lS0C))))
                                (g$f$7875$7lS0C (car g$x$7876$7lS0C))
                                (g$f$7875$7lS0C (cdr g$x$7876$7lS0C)))
                               (if (vector? g$x$7876$7lS0C)
                                 ((case-lambda
                                    ((g$old$7879$7lS0C)
                                     ((case-lambda
                                        ((g$new$7880$7lS0C)
                                         (if (g$for-all$5057$7lS0C
                                               eq?
                                               g$old$7879$7lS0C
                                               g$new$7880$7lS0C)
                                           g$x$7876$7lS0C
                                           (list->vector g$new$7880$7lS0C))))
                                      (g$map$5059$7lS0C
                                        g$f$7875$7lS0C
                                        g$old$7879$7lS0C))))
                                  (vector->list g$x$7876$7lS0C))
                                 g$x$7876$7lS0C))))))))
             g$f$7875$7lS0C)
           g$x$7871$7lS0C)))))
   (g$stx->datum$7329$7lS0C
     g$stx->datum$11021$7lS0C
     (case-lambda
       ((g$x$7881$7lS0C) (g$strip$7328$7lS0C g$x$7881$7lS0C '()))))
   (g$same-marks*?$7330$7lS0C
     g$same-marks*?$11022$7lS0C
     (case-lambda
       ((g$mark*$7882$7lS0C g$mark**$7883$7lS0C g$si$7884$7lS0C)
        (if (null? g$si$7884$7lS0C)
          '#f
          (if (g$same-marks?$7320$7lS0C
                g$mark*$7882$7lS0C
                (vector-ref g$mark**$7883$7lS0C (car g$si$7884$7lS0C)))
            (car g$si$7884$7lS0C)
            (g$same-marks*?$7330$7lS0C
              g$mark*$7882$7lS0C
              g$mark**$7883$7lS0C
              (cdr g$si$7884$7lS0C)))))))
   (g$id->label$7331$7lS0C
     g$id->label$11023$7lS0C
     (case-lambda
       ((g$id$7885$7lS0C)
        ((case-lambda
           ((g$t$7886$7lS0C)
            (if g$t$7886$7lS0C
              g$t$7886$7lS0C
              (begin
                '#f
                ((case-lambda
                   ((g$t$7887$7lS0C)
                    (if g$t$7887$7lS0C
                      ((case-lambda
                         ((g$env$7888$7lS0C)
                          ((case-lambda
                             ((g$rib$7889$7lS0C)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7261$7lS0C
                                     g$id$7885$7lS0C
                                     g$rib$7889$7lS0C)))
                                (case-lambda
                                  ((g$lab$7892$7lS0C g$loc_$7893$7lS0C)
                                   ((case-lambda
                                      ((g$loc_$7894$7lS0C g$lab$7895$7lS0C)
                                       (begin
                                         (g$extend-rib!$7281$7lS0C
                                           g$rib$7889$7lS0C
                                           g$id$7885$7lS0C
                                           g$lab$7895$7lS0C)
                                         g$lab$7895$7lS0C)))
                                    g$loc_$7893$7lS0C
                                    g$lab$7892$7lS0C))))))
                           (g$interaction-env-rib$7674$7lS0C
                             g$env$7888$7lS0C))))
                       g$t$7887$7lS0C)
                      '#f)))
                 (g$top-level-context$7715$7lS0C))))))
         (g$id->real-label$7332$7lS0C g$id$7885$7lS0C)))))
   (g$id->real-label$7332$7lS0C
     g$id->real-label$11024$7lS0C
     (case-lambda
       ((g$id$7896$7lS0C)
        ((case-lambda
           ((g$sym$7897$7lS0C)
            ((letrec ((g$search$7898$7lS0C
                        (case-lambda
                          ((g$subst*$7899$7lS0C g$mark*$7900$7lS0C)
                           (if (null? g$subst*$7899$7lS0C)
                             '#f
                             (if (eq? (car g$subst*$7899$7lS0C) 'shift)
                               (g$search$7898$7lS0C
                                 (cdr g$subst*$7899$7lS0C)
                                 (cdr g$mark*$7900$7lS0C))
                               ((case-lambda
                                  ((g$rib$7901$7lS0C)
                                   ((case-lambda
                                      ((g$t$7902$7lS0C)
                                       (if g$t$7902$7lS0C
                                         ((case-lambda
                                            ((g$ht$7903$7lS0C)
                                             ((case-lambda
                                                ((g$si$7904$7lS0C)
                                                 ((case-lambda
                                                    ((g$i$7905$7lS0C)
                                                     (if g$i$7905$7lS0C
                                                       (vector-ref
                                                         (g$rib-label*$7270$7lS0C
                                                           g$rib$7901$7lS0C)
                                                         g$i$7905$7lS0C)
                                                       (g$search$7898$7lS0C
                                                         (cdr g$subst*$7899$7lS0C)
                                                         g$mark*$7900$7lS0C))))
                                                  (if g$si$7904$7lS0C
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7330$7lS0C
                                                        g$mark*$7900$7lS0C
                                                        (g$rib-mark**$7269$7lS0C
                                                          g$rib$7901$7lS0C)
                                                        (reverse
                                                          g$si$7904$7lS0C)))
                                                    '#f))))
                                              (g$hashtable-ref$5491$7lS0C
                                                g$ht$7903$7lS0C
                                                g$sym$7897$7lS0C
                                                '#f))))
                                          g$t$7902$7lS0C)
                                         ((case-lambda
                                            ((g$t$7906$7lS0C)
                                             (if g$t$7906$7lS0C
                                               g$t$7906$7lS0C
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$7907$7lS0C
                                                             (case-lambda
                                                               ((g$sym*$7908$7lS0C
                                                                  g$mark**$7909$7lS0C
                                                                  g$label*$7910$7lS0C)
                                                                (if (null?
                                                                      g$sym*$7908$7lS0C)
                                                                  (g$search$7898$7lS0C
                                                                    (cdr g$subst*$7899$7lS0C)
                                                                    g$mark*$7900$7lS0C)
                                                                  (if (if (eq? (car g$sym*$7908$7lS0C)
                                                                               g$sym$7897$7lS0C)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7320$7lS0C
                                                                            (car g$mark**$7909$7lS0C)
                                                                            g$mark*$7900$7lS0C))
                                                                        '#f)
                                                                    (car g$label*$7910$7lS0C)
                                                                    (g$f$7907$7lS0C
                                                                      (cdr g$sym*$7908$7lS0C)
                                                                      (cdr g$mark**$7909$7lS0C)
                                                                      (cdr g$label*$7910$7lS0C))))))))
                                                    g$f$7907$7lS0C)
                                                  (g$rib-sym*$7268$7lS0C
                                                    g$rib$7901$7lS0C)
                                                  (g$rib-mark**$7269$7lS0C
                                                    g$rib$7901$7lS0C)
                                                  (g$rib-label*$7270$7lS0C
                                                    g$rib$7901$7lS0C))))))
                                          (g$find-label$7280$7lS0C
                                            g$rib$7901$7lS0C
                                            g$sym$7897$7lS0C
                                            g$mark*$7900$7lS0C)))))
                                    (g$rib-sealed/freq$7271$7lS0C
                                      g$rib$7901$7lS0C))))
                                (car g$subst*$7899$7lS0C))))))))
               g$search$7898$7lS0C)
             (g$stx-subst*$7294$7lS0C g$id$7896$7lS0C)
             (g$stx-mark*$7293$7lS0C g$id$7896$7lS0C))))
         (g$id->sym$7319$7lS0C g$id$7896$7lS0C)))))
   (g$label->binding$7333$7lS0C
     g$label->binding$11025$7lS0C
     (case-lambda
       ((g$x$7911$7lS0C g$r$7912$7lS0C)
        ((case-lambda
           ((g$t$7913$7lS0C)
            (if g$t$7913$7lS0C
              ((case-lambda
                 ((g$b$7914$7lS0C)
                  (if (if (pair? g$b$7914$7lS0C)
                        (begin '#f (eq? (car g$b$7914$7lS0C) '$core-rtd))
                        '#f)
                    (cons
                      '$rtd
                      (g$map$5059$7lS0C
                        g$bless$7559$7lS0C
                        (cdr g$b$7914$7lS0C)))
                    (if (if (pair? g$b$7914$7lS0C)
                          (begin '#f (eq? (car g$b$7914$7lS0C) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7915$7lS0C g$loc$7916$7lS0C)
                          (cons '$rtd (symbol-value g$loc$7916$7lS0C))))
                       (g$cadr$5223$7lS0C g$b$7914$7lS0C)
                       (g$cddr$5225$7lS0C g$b$7914$7lS0C))
                      g$b$7914$7lS0C))))
               g$t$7913$7lS0C)
              ((case-lambda
                 ((g$t$7917$7lS0C)
                  (if g$t$7917$7lS0C
                    (cdr g$t$7917$7lS0C)
                    ((case-lambda
                       ((g$t$7918$7lS0C)
                        (if g$t$7918$7lS0C
                          ((case-lambda
                             ((g$env$7919$7lS0C)
                              ((case-lambda
                                 ((g$t$7920$7lS0C)
                                  (if g$t$7920$7lS0C
                                    ((case-lambda
                                       ((g$p$7921$7lS0C)
                                        (g$cons*$5061$7lS0C
                                          'lexical
                                          (cdr g$p$7921$7lS0C)
                                          '#f)))
                                     g$t$7920$7lS0C)
                                    '(displaced-lexical . #f))))
                               (g$assq$5047$7lS0C
                                 g$x$7911$7lS0C
                                 (g$interaction-env-locs$7676$7lS0C
                                   g$env$7919$7lS0C)))))
                           g$t$7918$7lS0C)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7715$7lS0C)))))
               (g$assq$5047$7lS0C g$x$7911$7lS0C g$r$7912$7lS0C)))))
         (g$imported-label->binding$7127$7lS0C g$x$7911$7lS0C)))))
   (g$make-binding$7334$7lS0C g$make-binding$11026$7lS0C cons)
   (g$binding-type$7335$7lS0C g$binding-type$11027$7lS0C car)
   (g$binding-value$7336$7lS0C g$binding-value$11028$7lS0C cdr)
   (g$raise-unbound-error$7337$7lS0C
     g$raise-unbound-error$11029$7lS0C
     (case-lambda
       ((g$id$7922$7lS0C)
        (g$syntax-violation*$7707$7lS0C
          '#f
          '"unbound identifier"
          g$id$7922$7lS0C
          (g$make-undefined-violation$5837$7lS0C)))))
   (g$syntax-type$7338$7lS0C
     g$syntax-type$11030$7lS0C
     (case-lambda
       ((g$e$7923$7lS0C g$r$7924$7lS0C)
        (if (g$id?$7318$7lS0C g$e$7923$7lS0C)
          ((case-lambda
             ((g$id$7925$7lS0C)
              ((case-lambda
                 ((g$label$7926$7lS0C)
                  ((case-lambda
                     ((g$b$7927$7lS0C)
                      ((case-lambda
                         ((g$type$7928$7lS0C)
                          (begin
                            (if (not g$label$7926$7lS0C)
                              (g$raise-unbound-error$7337$7lS0C g$id$7925$7lS0C)
                              (void))
                            ((case-lambda
                               ((g$t$7929$7lS0C)
                                (if (g$memv$5052$7lS0C
                                      g$t$7929$7lS0C
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable))
                                  (values
                                    g$type$7928$7lS0C
                                    (g$binding-value$7336$7lS0C g$b$7927$7lS0C)
                                    g$id$7925$7lS0C)
                                  (values 'other '#f '#f))))
                             g$type$7928$7lS0C))))
                       (g$binding-type$7335$7lS0C g$b$7927$7lS0C))))
                   (g$label->binding$7333$7lS0C
                     g$label$7926$7lS0C
                     g$r$7924$7lS0C))))
               (g$id->label$7331$7lS0C g$id$7925$7lS0C))))
           g$e$7923$7lS0C)
          (if (g$syntax-pair?$7311$7lS0C g$e$7923$7lS0C)
            ((case-lambda
               ((g$id$7930$7lS0C)
                (if (g$id?$7318$7lS0C g$id$7930$7lS0C)
                  ((case-lambda
                     ((g$label$7931$7lS0C)
                      ((case-lambda
                         ((g$b$7932$7lS0C)
                          ((case-lambda
                             ((g$type$7933$7lS0C)
                              (begin
                                (if (not g$label$7931$7lS0C)
                                  (g$raise-unbound-error$7337$7lS0C
                                    g$id$7930$7lS0C)
                                  (void))
                                ((case-lambda
                                   ((g$t$7934$7lS0C)
                                    (if (g$memv$5052$7lS0C
                                          g$t$7934$7lS0C
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd))
                                      (values
                                        g$type$7933$7lS0C
                                        (g$binding-value$7336$7lS0C
                                          g$b$7932$7lS0C)
                                        g$id$7930$7lS0C)
                                      (values 'call '#f '#f))))
                                 g$type$7933$7lS0C))))
                           (g$binding-type$7335$7lS0C g$b$7932$7lS0C))))
                       (g$label->binding$7333$7lS0C
                         g$label$7931$7lS0C
                         g$r$7924$7lS0C))))
                   (g$id->label$7331$7lS0C g$id$7930$7lS0C))
                  (values 'call '#f '#f))))
             (g$syntax-car$7315$7lS0C g$e$7923$7lS0C))
            ((case-lambda
               ((g$d$7935$7lS0C)
                (if (g$self-evaluating?$7326$7lS0C g$d$7935$7lS0C)
                  (values 'constant g$d$7935$7lS0C '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7329$7lS0C g$e$7923$7lS0C)))))))
   (g$sanitize-binding$7346$7lS0C
     g$sanitize-binding$11031$7lS0C
     (case-lambda
       ((g$x$7936$7lS0C g$src$7937$7lS0C)
        (if (procedure? g$x$7936$7lS0C)
          (g$cons*$5061$7lS0C 'local-macro g$x$7936$7lS0C g$src$7937$7lS0C)
          (if (if (pair? g$x$7936$7lS0C)
                (if (eq? (car g$x$7936$7lS0C) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7936$7lS0C)))
                  '#f)
                '#f)
            (g$cons*$5061$7lS0C
              'local-macro!
              (cdr g$x$7936$7lS0C)
              g$src$7937$7lS0C)
            (if (if (pair? g$x$7936$7lS0C)
                  (begin '#f (eq? (car g$x$7936$7lS0C) '$rtd))
                  '#f)
              g$x$7936$7lS0C
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7936$7lS0C)))))))
   (g$make-variable-transformer$7347$7lS0C
     g$make-variable-transformer$11032$7lS0C
     (case-lambda
       ((g$x$7938$7lS0C)
        (if (procedure? g$x$7938$7lS0C)
          (cons 'macro! g$x$7938$7lS0C)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7938$7lS0C)))))
   (g$variable-transformer?$7348$7lS0C
     g$variable-transformer?$11033$7lS0C
     (case-lambda
       ((g$x$7939$7lS0C)
        (if (pair? g$x$7939$7lS0C)
          (if (eq? (car g$x$7939$7lS0C) 'macro!)
            (begin '#f (procedure? (cdr g$x$7939$7lS0C)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7349$7lS0C
     g$variable-transformer-procedure$11034$7lS0C
     (case-lambda
       ((g$x$7940$7lS0C)
        (if (g$variable-transformer?$7348$7lS0C g$x$7940$7lS0C)
          (cdr g$x$7940$7lS0C)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7940$7lS0C)))))
   (g$make-eval-transformer$7350$7lS0C
     g$make-eval-transformer$11035$7lS0C
     (case-lambda
       ((g$x$7941$7lS0C)
        (g$sanitize-binding$7346$7lS0C
          (eval-core (g$expanded->core$6836$7lS0C g$x$7941$7lS0C))
          g$x$7941$7lS0C))))
   (g$parse-define$7536$7lS0C
     g$parse-define$11036$7lS0C
     (case-lambda
       ((g$x$7942$7lS0C)
        ((case-lambda
           ((g$t$7943$7lS0C)
            ((case-lambda
               ((g$ls/false$7944$7lS0C)
                (if (if g$ls/false$7944$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7945$7lS0C
                               g$fmls$7946$7lS0C
                               g$b$7947$7lS0C
                               g$b*$7948$7lS0C)
                             (g$id?$7318$7lS0C g$id$7945$7lS0C)))
                          g$ls/false$7944$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7949$7lS0C
                         g$fmls$7950$7lS0C
                         g$b$7951$7lS0C
                         g$b*$7952$7lS0C)
                       (begin
                         (g$verify-formals$7616$7lS0C
                           g$fmls$7950$7lS0C
                           g$x$7942$7lS0C)
                         (values
                           g$id$7949$7lS0C
                           (cons
                             'defun
                             (cons
                               g$fmls$7950$7lS0C
                               (cons g$b$7951$7lS0C g$b*$7952$7lS0C)))))))
                    g$ls/false$7944$7lS0C)
                  ((case-lambda
                     ((g$t$7953$7lS0C)
                      ((case-lambda
                         ((g$ls/false$7954$7lS0C)
                          (if (if g$ls/false$7954$7lS0C
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7955$7lS0C g$val$7956$7lS0C)
                                       (g$id?$7318$7lS0C g$id$7955$7lS0C)))
                                    g$ls/false$7954$7lS0C))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7957$7lS0C g$val$7958$7lS0C)
                                 (values
                                   g$id$7957$7lS0C
                                   (cons 'expr g$val$7958$7lS0C))))
                              g$ls/false$7954$7lS0C)
                            ((case-lambda
                               ((g$t$7959$7lS0C)
                                ((case-lambda
                                   ((g$ls/false$7960$7lS0C)
                                    (if (if g$ls/false$7960$7lS0C
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7961$7lS0C)
                                                 (g$id?$7318$7lS0C
                                                   g$id$7961$7lS0C)))
                                              g$ls/false$7960$7lS0C))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7962$7lS0C)
                                           (values
                                             g$id$7962$7lS0C
                                             (cons
                                               'expr
                                               (g$bless$7559$7lS0C '(void))))))
                                        g$ls/false$7960$7lS0C)
                                      (g$syntax-violation$7708$7lS0C
                                        '#f
                                        '"invalid syntax"
                                        g$t$7959$7lS0C))))
                                 (g$syntax-dispatch$7596$7lS0C
                                   g$t$7959$7lS0C
                                   '(_ any)))))
                             g$t$7953$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$7953$7lS0C
                         '(_ any any)))))
                   g$t$7943$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$7943$7lS0C
               '(_ (any . any) any . each-any)))))
         g$x$7942$7lS0C))))
   (g$parse-define-syntax$7537$7lS0C
     g$parse-define-syntax$11037$7lS0C
     (case-lambda
       ((g$x$7963$7lS0C)
        ((case-lambda
           ((g$t$7964$7lS0C)
            ((case-lambda
               ((g$ls/false$7965$7lS0C)
                (if (if g$ls/false$7965$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7966$7lS0C g$val$7967$7lS0C)
                             (g$id?$7318$7lS0C g$id$7966$7lS0C)))
                          g$ls/false$7965$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7968$7lS0C g$val$7969$7lS0C)
                       (values g$id$7968$7lS0C g$val$7969$7lS0C)))
                    g$ls/false$7965$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$7964$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$7964$7lS0C '(_ any any)))))
         g$x$7963$7lS0C))))
   (g$scheme-stx-hashtable$7538$7lS0C
     g$scheme-stx-hashtable$11038$7lS0C
     (g$make-eq-hashtable$5488$7lS0C))
   (g$scheme-stx$7539$7lS0C
     g$scheme-stx$11039$7lS0C
     (case-lambda
       ((g$sym$7970$7lS0C)
        ((case-lambda
           ((g$t$7971$7lS0C)
            (if g$t$7971$7lS0C
              g$t$7971$7lS0C
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7972$7lS0C)
                    ((case-lambda
                       ((g$stx$7973$7lS0C)
                        ((case-lambda
                           ((g$stx$7974$7lS0C)
                            (begin
                              (g$hashtable-set!$5492$7lS0C
                                g$scheme-stx-hashtable$7538$7lS0C
                                g$sym$7970$7lS0C
                                g$stx$7974$7lS0C)
                              g$stx$7974$7lS0C)))
                         ((case-lambda
                            ((g$t$7975$7lS0C)
                             (if g$t$7975$7lS0C
                               ((case-lambda
                                  ((g$x$7976$7lS0C)
                                   ((case-lambda
                                      ((g$name$7977$7lS0C g$label$7978$7lS0C)
                                       (g$add-subst$7308$7lS0C
                                         (g$make-rib$7267$7lS0C
                                           (list g$name$7977$7lS0C)
                                           (list g$top-mark*$7255$7lS0C)
                                           (list g$label$7978$7lS0C)
                                           '#f
                                           '#f)
                                         g$stx$7973$7lS0C)))
                                    (car g$x$7976$7lS0C)
                                    (cdr g$x$7976$7lS0C))))
                                g$t$7975$7lS0C)
                               g$stx$7973$7lS0C)))
                          (g$assq$5047$7lS0C
                            g$sym$7970$7lS0C
                            g$subst$7972$7lS0C)))))
                     (g$make-stx$7291$7lS0C
                       g$sym$7970$7lS0C
                       g$top-mark*$7255$7lS0C
                       '()
                       '()))))
                 (g$library-subst$7085$7lS0C
                   (g$find-library-by-name$7121$7lS0C
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5491$7lS0C
           g$scheme-stx-hashtable$7538$7lS0C
           g$sym$7970$7lS0C
           '#f)))))
   (g$lexical-var$7540$7lS0C g$lexical-var$11040$7lS0C car)
   (g$lexical-mutable?$7541$7lS0C g$lexical-mutable?$11041$7lS0C cdr)
   (g$set-lexical-mutable!$7542$7lS0C
     g$set-lexical-mutable!$11042$7lS0C
     set-cdr!)
   (g$add-lexical$7543$7lS0C
     g$add-lexical$11043$7lS0C
     (case-lambda
       ((g$lab$7979$7lS0C g$lex$7980$7lS0C g$r$7981$7lS0C)
        (cons
          (g$cons*$5061$7lS0C g$lab$7979$7lS0C 'lexical g$lex$7980$7lS0C '#f)
          g$r$7981$7lS0C))))
   (g$add-lexicals$7544$7lS0C
     g$add-lexicals$11044$7lS0C
     (case-lambda
       ((g$lab*$7982$7lS0C g$lex*$7983$7lS0C g$r$7984$7lS0C)
        (if (null? g$lab*$7982$7lS0C)
          g$r$7984$7lS0C
          (g$add-lexicals$7544$7lS0C
            (cdr g$lab*$7982$7lS0C)
            (cdr g$lex*$7983$7lS0C)
            (g$add-lexical$7543$7lS0C
              (car g$lab*$7982$7lS0C)
              (car g$lex*$7983$7lS0C)
              g$r$7984$7lS0C))))))
   (g$letrec-helper$7545$7lS0C
     g$letrec-helper$11045$7lS0C
     (case-lambda
       ((g$e$7985$7lS0C g$r$7986$7lS0C g$mr$7987$7lS0C g$build$7988$7lS0C)
        ((case-lambda
           ((g$t$7989$7lS0C)
            ((case-lambda
               ((g$ls/false$7990$7lS0C)
                (if g$ls/false$7990$7lS0C
                  (apply
                    (case-lambda
                      ((g$lhs*$7991$7lS0C
                         g$rhs*$7992$7lS0C
                         g$b$7993$7lS0C
                         g$b*$7994$7lS0C)
                       (if (not (g$valid-bound-ids?$7323$7lS0C
                                  g$lhs*$7991$7lS0C))
                         (g$invalid-fmls-error$7561$7lS0C
                           g$e$7985$7lS0C
                           g$lhs*$7991$7lS0C)
                         ((case-lambda
                            ((g$lex*$7995$7lS0C g$lab*$7996$7lS0C)
                             ((case-lambda
                                ((g$rib$7997$7lS0C g$r$7998$7lS0C)
                                 ((case-lambda
                                    ((g$body$7999$7lS0C g$rhs*$8000$7lS0C)
                                     (g$build$7988$7lS0C
                                       '#f
                                       g$lex*$7995$7lS0C
                                       g$rhs*$8000$7lS0C
                                       g$body$7999$7lS0C)))
                                  (g$chi-internal$7625$7lS0C
                                    (g$add-subst$7308$7lS0C
                                      g$rib$7997$7lS0C
                                      (cons g$b$7993$7lS0C g$b*$7994$7lS0C))
                                    g$r$7998$7lS0C
                                    g$mr$7987$7lS0C)
                                  (g$chi-expr*$7612$7lS0C
                                    (g$map$5059$7lS0C
                                      (case-lambda
                                        ((g$x$8001$7lS0C)
                                         (g$add-subst$7308$7lS0C
                                           g$rib$7997$7lS0C
                                           g$x$8001$7lS0C)))
                                      g$rhs*$7992$7lS0C)
                                    g$r$7998$7lS0C
                                    g$mr$7987$7lS0C))))
                              (g$make-full-rib$7286$7lS0C
                                g$lhs*$7991$7lS0C
                                g$lab*$7996$7lS0C)
                              (g$add-lexicals$7544$7lS0C
                                g$lab*$7996$7lS0C
                                g$lex*$7995$7lS0C
                                g$r$7986$7lS0C))))
                          (g$map$5059$7lS0C
                            g$gen-lexical$7257$7lS0C
                            g$lhs*$7991$7lS0C)
                          (g$map$5059$7lS0C
                            g$gen-label$7259$7lS0C
                            g$lhs*$7991$7lS0C)))))
                    g$ls/false$7990$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$7989$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$7989$7lS0C
               '(_ #(each (any any)) any . each-any)))))
         g$e$7985$7lS0C))))
   (g$letrec-transformer$7546$7lS0C
     g$letrec-transformer$11046$7lS0C
     (case-lambda
       ((g$e$8002$7lS0C g$r$8003$7lS0C g$mr$8004$7lS0C)
        (g$letrec-helper$7545$7lS0C
          g$e$8002$7lS0C
          g$r$8003$7lS0C
          g$mr$8004$7lS0C
          g$build-letrec$7249$7lS0C))))
   (g$letrec*-transformer$7547$7lS0C
     g$letrec*-transformer$11047$7lS0C
     (case-lambda
       ((g$e$8005$7lS0C g$r$8006$7lS0C g$mr$8007$7lS0C)
        (g$letrec-helper$7545$7lS0C
          g$e$8005$7lS0C
          g$r$8006$7lS0C
          g$mr$8007$7lS0C
          g$build-letrec*$7250$7lS0C))))
   (g$fluid-let-syntax-transformer$7548$7lS0C
     g$fluid-let-syntax-transformer$11048$7lS0C
     (case-lambda
       ((g$e$8008$7lS0C g$r$8009$7lS0C g$mr$8010$7lS0C)
        (letrec* ((g$lookup$8011$7lS0C
                    (case-lambda
                      ((g$x$8021$7lS0C)
                       ((case-lambda
                          ((g$t$8022$7lS0C)
                           (if g$t$8022$7lS0C
                             g$t$8022$7lS0C
                             (begin
                               '#f
                               (g$syntax-violation$7708$7lS0C
                                 '#f
                                 '"unbound identifier"
                                 g$e$8008$7lS0C
                                 g$x$8021$7lS0C)))))
                        (g$id->label$7331$7lS0C g$x$8021$7lS0C))))))
          ((case-lambda
             ((g$t$8012$7lS0C)
              ((case-lambda
                 ((g$ls/false$8013$7lS0C)
                  (if g$ls/false$8013$7lS0C
                    (apply
                      (case-lambda
                        ((g$lhs*$8014$7lS0C
                           g$rhs*$8015$7lS0C
                           g$b$8016$7lS0C
                           g$b*$8017$7lS0C)
                         (if (not (g$valid-bound-ids?$7323$7lS0C
                                    g$lhs*$8014$7lS0C))
                           (g$invalid-fmls-error$7561$7lS0C
                             g$e$8008$7lS0C
                             g$lhs*$8014$7lS0C)
                           ((case-lambda
                              ((g$lab*$8018$7lS0C g$rhs*$8019$7lS0C)
                               (g$chi-internal$7625$7lS0C
                                 (cons g$b$8016$7lS0C g$b*$8017$7lS0C)
                                 (append
                                   (g$map$5059$7lS0C
                                     cons
                                     g$lab*$8018$7lS0C
                                     g$rhs*$8019$7lS0C)
                                   g$r$8009$7lS0C)
                                 (append
                                   (g$map$5059$7lS0C
                                     cons
                                     g$lab*$8018$7lS0C
                                     g$rhs*$8019$7lS0C)
                                   g$mr$8010$7lS0C))))
                            (g$map$5059$7lS0C
                              g$lookup$8011$7lS0C
                              g$lhs*$8014$7lS0C)
                            (g$map$5059$7lS0C
                              (case-lambda
                                ((g$x$8020$7lS0C)
                                 (g$make-eval-transformer$7350$7lS0C
                                   (g$expand-transformer$7641$7lS0C
                                     g$x$8020$7lS0C
                                     g$mr$8010$7lS0C))))
                              g$rhs*$8015$7lS0C)))))
                      g$ls/false$8013$7lS0C)
                    (g$syntax-violation$7708$7lS0C
                      '#f
                      '"invalid syntax"
                      g$t$8012$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C
                 g$t$8012$7lS0C
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8008$7lS0C)))))
   (g$type-descriptor-transformer$7549$7lS0C
     g$type-descriptor-transformer$11049$7lS0C
     (case-lambda
       ((g$e$8023$7lS0C g$r$8024$7lS0C g$mr$8025$7lS0C)
        ((case-lambda
           ((g$t$8026$7lS0C)
            ((case-lambda
               ((g$ls/false$8027$7lS0C)
                (if (if g$ls/false$8027$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8028$7lS0C)
                             (g$id?$7318$7lS0C g$id$8028$7lS0C)))
                          g$ls/false$8027$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8029$7lS0C)
                       ((case-lambda
                          ((g$lab$8030$7lS0C)
                           ((case-lambda
                              ((g$b$8031$7lS0C)
                               ((case-lambda
                                  ((g$type$8032$7lS0C)
                                   (begin
                                     (if (not g$lab$8030$7lS0C)
                                       (g$raise-unbound-error$7337$7lS0C
                                         g$id$8029$7lS0C)
                                       (void))
                                     (if (not (if (eq? g$type$8032$7lS0C '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$7336$7lS0C
                                                           g$b$8031$7lS0C))))
                                                '#f))
                                       (g$syntax-violation$7708$7lS0C
                                         '#f
                                         '"not a record type"
                                         g$e$8023$7lS0C)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$7336$7lS0C
                                         g$b$8031$7lS0C)))))
                                (g$binding-type$7335$7lS0C g$b$8031$7lS0C))))
                            (g$label->binding$7333$7lS0C
                              g$lab$8030$7lS0C
                              g$r$8024$7lS0C))))
                        (g$id->label$7331$7lS0C g$id$8029$7lS0C))))
                    g$ls/false$8027$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8026$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8026$7lS0C '(_ any)))))
         g$e$8023$7lS0C))))
   (g$record-type-descriptor-transformer$7550$7lS0C
     g$record-type-descriptor-transformer$11050$7lS0C
     (case-lambda
       ((g$e$8033$7lS0C g$r$8034$7lS0C g$mr$8035$7lS0C)
        ((case-lambda
           ((g$t$8036$7lS0C)
            ((case-lambda
               ((g$ls/false$8037$7lS0C)
                (if (if g$ls/false$8037$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8038$7lS0C)
                             (g$id?$7318$7lS0C g$id$8038$7lS0C)))
                          g$ls/false$8037$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8039$7lS0C)
                       ((case-lambda
                          ((g$lab$8040$7lS0C)
                           ((case-lambda
                              ((g$b$8041$7lS0C)
                               ((case-lambda
                                  ((g$type$8042$7lS0C)
                                   (begin
                                     (if (not g$lab$8040$7lS0C)
                                       (g$raise-unbound-error$7337$7lS0C
                                         g$id$8039$7lS0C)
                                       (void))
                                     (if (not (if (eq? g$type$8042$7lS0C '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7336$7lS0C
                                                      g$b$8041$7lS0C)))
                                                '#f))
                                       (g$syntax-violation$7708$7lS0C
                                         '#f
                                         '"not a record type"
                                         g$e$8033$7lS0C)
                                       (void))
                                     (g$chi-expr$7614$7lS0C
                                       (car (g$binding-value$7336$7lS0C
                                              g$b$8041$7lS0C))
                                       g$r$8034$7lS0C
                                       g$mr$8035$7lS0C))))
                                (g$binding-type$7335$7lS0C g$b$8041$7lS0C))))
                            (g$label->binding$7333$7lS0C
                              g$lab$8040$7lS0C
                              g$r$8034$7lS0C))))
                        (g$id->label$7331$7lS0C g$id$8039$7lS0C))))
                    g$ls/false$8037$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8036$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8036$7lS0C '(_ any)))))
         g$e$8033$7lS0C))))
   (g$record-constructor-descriptor-transformer$7551$7lS0C
     g$record-constructor-descriptor-transformer$11051$7lS0C
     (case-lambda
       ((g$e$8043$7lS0C g$r$8044$7lS0C g$mr$8045$7lS0C)
        ((case-lambda
           ((g$t$8046$7lS0C)
            ((case-lambda
               ((g$ls/false$8047$7lS0C)
                (if (if g$ls/false$8047$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8048$7lS0C)
                             (g$id?$7318$7lS0C g$id$8048$7lS0C)))
                          g$ls/false$8047$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8049$7lS0C)
                       ((case-lambda
                          ((g$lab$8050$7lS0C)
                           ((case-lambda
                              ((g$b$8051$7lS0C)
                               ((case-lambda
                                  ((g$type$8052$7lS0C)
                                   (begin
                                     (if (not g$lab$8050$7lS0C)
                                       (g$raise-unbound-error$7337$7lS0C
                                         g$id$8049$7lS0C)
                                       (void))
                                     (if (not (if (eq? g$type$8052$7lS0C '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7336$7lS0C
                                                      g$b$8051$7lS0C)))
                                                '#f))
                                       (g$syntax-violation$7708$7lS0C
                                         '#f
                                         '"invalid type"
                                         g$e$8043$7lS0C)
                                       (void))
                                     (g$chi-expr$7614$7lS0C
                                       (g$cadr$5223$7lS0C
                                         (g$binding-value$7336$7lS0C
                                           g$b$8051$7lS0C))
                                       g$r$8044$7lS0C
                                       g$mr$8045$7lS0C))))
                                (g$binding-type$7335$7lS0C g$b$8051$7lS0C))))
                            (g$label->binding$7333$7lS0C
                              g$lab$8050$7lS0C
                              g$r$8044$7lS0C))))
                        (g$id->label$7331$7lS0C g$id$8049$7lS0C))))
                    g$ls/false$8047$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8046$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8046$7lS0C '(_ any)))))
         g$e$8043$7lS0C))))
   (g$when-macro$7552$7lS0C
     g$when-macro$11052$7lS0C
     (case-lambda
       ((g$e$8053$7lS0C)
        ((case-lambda
           ((g$t$8054$7lS0C)
            ((case-lambda
               ((g$ls/false$8055$7lS0C)
                (if g$ls/false$8055$7lS0C
                  (apply
                    (case-lambda
                      ((g$test$8056$7lS0C g$e$8057$7lS0C g$e*$8058$7lS0C)
                       (g$bless$7559$7lS0C
                         (list
                           'if
                           g$test$8056$7lS0C
                           (cons
                             'begin
                             (cons g$e$8057$7lS0C g$e*$8058$7lS0C))))))
                    g$ls/false$8055$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8054$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8054$7lS0C
               '(_ any any . each-any)))))
         g$e$8053$7lS0C))))
   (g$unless-macro$7553$7lS0C
     g$unless-macro$11053$7lS0C
     (case-lambda
       ((g$e$8059$7lS0C)
        ((case-lambda
           ((g$t$8060$7lS0C)
            ((case-lambda
               ((g$ls/false$8061$7lS0C)
                (if g$ls/false$8061$7lS0C
                  (apply
                    (case-lambda
                      ((g$test$8062$7lS0C g$e$8063$7lS0C g$e*$8064$7lS0C)
                       (g$bless$7559$7lS0C
                         (list
                           'if
                           (list 'not g$test$8062$7lS0C)
                           (cons
                             'begin
                             (cons g$e$8063$7lS0C g$e*$8064$7lS0C))))))
                    g$ls/false$8061$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8060$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8060$7lS0C
               '(_ any any . each-any)))))
         g$e$8059$7lS0C))))
   (g$if-transformer$7554$7lS0C
     g$if-transformer$11054$7lS0C
     (case-lambda
       ((g$e$8065$7lS0C g$r$8066$7lS0C g$mr$8067$7lS0C)
        ((case-lambda
           ((g$t$8068$7lS0C)
            ((case-lambda
               ((g$ls/false$8069$7lS0C)
                (if g$ls/false$8069$7lS0C
                  (apply
                    (case-lambda
                      ((g$e0$8070$7lS0C g$e1$8071$7lS0C g$e2$8072$7lS0C)
                       (list
                         'if
                         (g$chi-expr$7614$7lS0C
                           g$e0$8070$7lS0C
                           g$r$8066$7lS0C
                           g$mr$8067$7lS0C)
                         (g$chi-expr$7614$7lS0C
                           g$e1$8071$7lS0C
                           g$r$8066$7lS0C
                           g$mr$8067$7lS0C)
                         (g$chi-expr$7614$7lS0C
                           g$e2$8072$7lS0C
                           g$r$8066$7lS0C
                           g$mr$8067$7lS0C))))
                    g$ls/false$8069$7lS0C)
                  ((case-lambda
                     ((g$t$8073$7lS0C)
                      ((case-lambda
                         ((g$ls/false$8074$7lS0C)
                          (if g$ls/false$8074$7lS0C
                            (apply
                              (case-lambda
                                ((g$e0$8075$7lS0C g$e1$8076$7lS0C)
                                 (list
                                   'if
                                   (g$chi-expr$7614$7lS0C
                                     g$e0$8075$7lS0C
                                     g$r$8066$7lS0C
                                     g$mr$8067$7lS0C)
                                   (g$chi-expr$7614$7lS0C
                                     g$e1$8076$7lS0C
                                     g$r$8066$7lS0C
                                     g$mr$8067$7lS0C)
                                   (g$build-void$7248$7lS0C))))
                              g$ls/false$8074$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$8073$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$8073$7lS0C
                         '(_ any any)))))
                   g$t$8068$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8068$7lS0C '(_ any any any)))))
         g$e$8065$7lS0C))))
   (g$case-macro$7555$7lS0C
     g$case-macro$11055$7lS0C
     (case-lambda
       ((g$e$8077$7lS0C)
        (letrec* ((g$build-last$8078$7lS0C
                    (case-lambda
                      ((g$cls$8098$7lS0C)
                       ((case-lambda
                          ((g$t$8099$7lS0C)
                           ((case-lambda
                              ((g$ls/false$8100$7lS0C)
                               (if g$ls/false$8100$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$e$8101$7lS0C g$e*$8102$7lS0C)
                                      (cons
                                        'begin
                                        (cons g$e$8101$7lS0C g$e*$8102$7lS0C))))
                                   g$ls/false$8100$7lS0C)
                                 ((case-lambda
                                    ((g$t$8103$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$8104$7lS0C)
                                         (if g$ls/false$8104$7lS0C
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8079$7lS0C
                                                  g$cls$8098$7lS0C
                                                  '(if #f #f))))
                                             g$ls/false$8104$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$t$8103$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$8103$7lS0C
                                        '_))))
                                  g$t$8099$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$8099$7lS0C
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8098$7lS0C))))
                  (g$build-one$8079$7lS0C
                    (case-lambda
                      ((g$cls$8091$7lS0C g$k$8092$7lS0C)
                       ((case-lambda
                          ((g$t$8093$7lS0C)
                           ((case-lambda
                              ((g$ls/false$8094$7lS0C)
                               (if g$ls/false$8094$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$d*$8095$7lS0C
                                        g$e$8096$7lS0C
                                        g$e*$8097$7lS0C)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8095$7lS0C))
                                        (cons
                                          'begin
                                          (cons g$e$8096$7lS0C g$e*$8097$7lS0C))
                                        g$k$8092$7lS0C)))
                                   g$ls/false$8094$7lS0C)
                                 (g$syntax-violation$7708$7lS0C
                                   '#f
                                   '"invalid syntax"
                                   g$t$8093$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$8093$7lS0C
                              '(each-any any . each-any)))))
                        g$cls$8091$7lS0C)))))
          ((case-lambda
             ((g$t$8080$7lS0C)
              ((case-lambda
                 ((g$ls/false$8081$7lS0C)
                  (if g$ls/false$8081$7lS0C
                    (apply
                      (case-lambda
                        ((g$expr$8082$7lS0C)
                         (g$bless$7559$7lS0C
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8082$7lS0C))
                               '((if #f #f)))))))
                      g$ls/false$8081$7lS0C)
                    ((case-lambda
                       ((g$t$8083$7lS0C)
                        ((case-lambda
                           ((g$ls/false$8084$7lS0C)
                            (if g$ls/false$8084$7lS0C
                              (apply
                                (case-lambda
                                  ((g$expr$8085$7lS0C
                                     g$cls$8086$7lS0C
                                     g$cls*$8087$7lS0C)
                                   (g$bless$7559$7lS0C
                                     (list
                                       'let
                                       (list (list 't g$expr$8085$7lS0C))
                                       ((letrec ((g$f$8088$7lS0C
                                                   (case-lambda
                                                     ((g$cls$8089$7lS0C
                                                        g$cls*$8090$7lS0C)
                                                      (if (null?
                                                            g$cls*$8090$7lS0C)
                                                        (g$build-last$8078$7lS0C
                                                          g$cls$8089$7lS0C)
                                                        (g$build-one$8079$7lS0C
                                                          g$cls$8089$7lS0C
                                                          (g$f$8088$7lS0C
                                                            (car g$cls*$8090$7lS0C)
                                                            (cdr g$cls*$8090$7lS0C))))))))
                                          g$f$8088$7lS0C)
                                        g$cls$8086$7lS0C
                                        g$cls*$8087$7lS0C)))))
                                g$ls/false$8084$7lS0C)
                              (g$syntax-violation$7708$7lS0C
                                '#f
                                '"invalid syntax"
                                g$t$8083$7lS0C))))
                         (g$syntax-dispatch$7596$7lS0C
                           g$t$8083$7lS0C
                           '(_ any any . each-any)))))
                     g$t$8080$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C g$t$8080$7lS0C '(_ any)))))
           g$e$8077$7lS0C)))))
   (g$quote-transformer$7556$7lS0C
     g$quote-transformer$11056$7lS0C
     (case-lambda
       ((g$e$8105$7lS0C g$r$8106$7lS0C g$mr$8107$7lS0C)
        ((case-lambda
           ((g$t$8108$7lS0C)
            ((case-lambda
               ((g$ls/false$8109$7lS0C)
                (if g$ls/false$8109$7lS0C
                  (apply
                    (case-lambda
                      ((g$datum$8110$7lS0C)
                       (list
                         'quote
                         (g$stx->datum$7329$7lS0C g$datum$8110$7lS0C))))
                    g$ls/false$8109$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8108$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8108$7lS0C '(_ any)))))
         g$e$8105$7lS0C))))
   (g$case-lambda-transformer$7557$7lS0C
     g$case-lambda-transformer$11057$7lS0C
     (case-lambda
       ((g$e$8111$7lS0C g$r$8112$7lS0C g$mr$8113$7lS0C)
        ((case-lambda
           ((g$t$8114$7lS0C)
            ((case-lambda
               ((g$ls/false$8115$7lS0C)
                (if g$ls/false$8115$7lS0C
                  (apply
                    (case-lambda
                      ((g$fmls*$8116$7lS0C g$b*$8117$7lS0C g$b**$8118$7lS0C)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7618$7lS0C
                              g$e$8111$7lS0C
                              g$fmls*$8116$7lS0C
                              (g$map$5059$7lS0C
                                cons
                                g$b*$8117$7lS0C
                                g$b**$8118$7lS0C)
                              g$r$8112$7lS0C
                              g$mr$8113$7lS0C)))
                         (case-lambda
                           ((g$fmls*$8121$7lS0C g$body*$8122$7lS0C)
                            ((case-lambda
                               ((g$body*$8123$7lS0C g$fmls*$8124$7lS0C)
                                (g$build-case-lambda$7245$7lS0C
                                  '#f
                                  g$fmls*$8124$7lS0C
                                  g$body*$8123$7lS0C)))
                             g$body*$8122$7lS0C
                             g$fmls*$8121$7lS0C))))))
                    g$ls/false$8115$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8114$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8114$7lS0C
               '(_ . #(each (any any . each-any)))))))
         g$e$8111$7lS0C))))
   (g$lambda-transformer$7558$7lS0C
     g$lambda-transformer$11058$7lS0C
     (case-lambda
       ((g$e$8125$7lS0C g$r$8126$7lS0C g$mr$8127$7lS0C)
        ((case-lambda
           ((g$t$8128$7lS0C)
            ((case-lambda
               ((g$ls/false$8129$7lS0C)
                (if g$ls/false$8129$7lS0C
                  (apply
                    (case-lambda
                      ((g$fmls$8130$7lS0C g$b$8131$7lS0C g$b*$8132$7lS0C)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7617$7lS0C
                              g$e$8125$7lS0C
                              g$fmls$8130$7lS0C
                              (cons g$b$8131$7lS0C g$b*$8132$7lS0C)
                              g$r$8126$7lS0C
                              g$mr$8127$7lS0C)))
                         (case-lambda
                           ((g$fmls$8135$7lS0C g$body$8136$7lS0C)
                            ((case-lambda
                               ((g$body$8137$7lS0C g$fmls$8138$7lS0C)
                                (g$build-lambda$7244$7lS0C
                                  '#f
                                  g$fmls$8138$7lS0C
                                  g$body$8137$7lS0C)))
                             g$body$8136$7lS0C
                             g$fmls$8135$7lS0C))))))
                    g$ls/false$8129$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8128$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8128$7lS0C
               '(_ any any . each-any)))))
         g$e$8125$7lS0C))))
   (g$bless$7559$7lS0C
     g$bless$11059$7lS0C
     (case-lambda
       ((g$x$8139$7lS0C)
        (g$mkstx$7306$7lS0C
          ((letrec ((g$f$8140$7lS0C
                      (case-lambda
                        ((g$x$8141$7lS0C)
                         (if (g$stx?$7290$7lS0C g$x$8141$7lS0C)
                           g$x$8141$7lS0C
                           (if (pair? g$x$8141$7lS0C)
                             (cons
                               (g$f$8140$7lS0C (car g$x$8141$7lS0C))
                               (g$f$8140$7lS0C (cdr g$x$8141$7lS0C)))
                             (if (symbol? g$x$8141$7lS0C)
                               (g$scheme-stx$7539$7lS0C g$x$8141$7lS0C)
                               (if (vector? g$x$8141$7lS0C)
                                 (vector-map g$f$8140$7lS0C g$x$8141$7lS0C)
                                 g$x$8141$7lS0C))))))))
             g$f$8140$7lS0C)
           g$x$8139$7lS0C)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7560$7lS0C
     g$with-syntax-macro$11060$7lS0C
     (case-lambda
       ((g$e$8142$7lS0C)
        ((case-lambda
           ((g$t$8143$7lS0C)
            ((case-lambda
               ((g$ls/false$8144$7lS0C)
                (if g$ls/false$8144$7lS0C
                  (apply
                    (case-lambda
                      ((g$pat*$8145$7lS0C
                         g$expr*$8146$7lS0C
                         g$b$8147$7lS0C
                         g$b*$8148$7lS0C)
                       ((case-lambda
                          ((g$idn*$8149$7lS0C)
                           (begin
                             (g$verify-formals$7616$7lS0C
                               (g$map$5059$7lS0C car g$idn*$8149$7lS0C)
                               g$e$8142$7lS0C)
                             ((case-lambda
                                ((g$t*$8150$7lS0C)
                                 (g$bless$7559$7lS0C
                                   (list
                                     'let
                                     (g$map$5059$7lS0C
                                       list
                                       g$t*$8150$7lS0C
                                       g$expr*$8146$7lS0C)
                                     ((letrec ((g$f$8151$7lS0C
                                                 (case-lambda
                                                   ((g$pat*$8152$7lS0C
                                                      g$t*$8153$7lS0C)
                                                    (if (null?
                                                          g$pat*$8152$7lS0C)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8147$7lS0C
                                                            g$b*$8148$7lS0C)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8153$7lS0C)
                                                        '()
                                                        (list
                                                          (car g$pat*$8152$7lS0C)
                                                          (g$f$8151$7lS0C
                                                            (cdr g$pat*$8152$7lS0C)
                                                            (cdr g$t*$8153$7lS0C)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8152$7lS0C))
                                                            (car g$t*$8153$7lS0C)))))))))
                                        g$f$8151$7lS0C)
                                      g$pat*$8145$7lS0C
                                      g$t*$8150$7lS0C)))))
                              (g$generate-temporaries$7698$7lS0C
                                g$expr*$8146$7lS0C)))))
                        ((letrec ((g$f$8154$7lS0C
                                    (case-lambda
                                      ((g$pat*$8155$7lS0C)
                                       (if (null? g$pat*$8155$7lS0C)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7595$7lS0C
                                                (car g$pat*$8155$7lS0C)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8158$7lS0C
                                                g$idn*$8159$7lS0C)
                                              ((case-lambda
                                                 ((g$idn*$8160$7lS0C
                                                    g$pat$8161$7lS0C)
                                                  (append
                                                    g$idn*$8160$7lS0C
                                                    (g$f$8154$7lS0C
                                                      (cdr g$pat*$8155$7lS0C)))))
                                               g$idn*$8159$7lS0C
                                               g$pat$8158$7lS0C)))))))))
                           g$f$8154$7lS0C)
                         g$pat*$8145$7lS0C))))
                    g$ls/false$8144$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8143$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8143$7lS0C
               '(_ #(each (any any)) any . each-any)))))
         g$e$8142$7lS0C))))
   (g$invalid-fmls-error$7561$7lS0C
     g$invalid-fmls-error$11061$7lS0C
     (case-lambda
       ((g$stx$8162$7lS0C g$fmls$8163$7lS0C)
        ((case-lambda
           ((g$t$8164$7lS0C)
            ((case-lambda
               ((g$ls/false$8165$7lS0C)
                (if g$ls/false$8165$7lS0C
                  (apply
                    (case-lambda
                      ((g$id*$8166$7lS0C g$last$8167$7lS0C)
                       ((letrec ((g$f$8168$7lS0C
                                   (case-lambda
                                     ((g$id*$8169$7lS0C)
                                      (if (null? g$id*$8169$7lS0C)
                                        (values)
                                        (if (not (g$id?$7318$7lS0C
                                                   (car g$id*$8169$7lS0C)))
                                          (g$syntax-violation$7708$7lS0C
                                            '#f
                                            '"not an identifier"
                                            g$stx$8162$7lS0C
                                            (car g$id*$8169$7lS0C))
                                          (begin
                                            (g$f$8168$7lS0C
                                              (cdr g$id*$8169$7lS0C))
                                            (if (g$bound-id-member?$7325$7lS0C
                                                  (car g$id*$8169$7lS0C)
                                                  (cdr g$id*$8169$7lS0C))
                                              (g$syntax-violation$7708$7lS0C
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8162$7lS0C
                                                (car g$id*$8169$7lS0C))
                                              (void)))))))))
                          g$f$8168$7lS0C)
                        (if (g$id?$7318$7lS0C g$last$8167$7lS0C)
                          (cons g$last$8167$7lS0C g$id*$8166$7lS0C)
                          (if (g$syntax-null?$7313$7lS0C g$last$8167$7lS0C)
                            g$id*$8166$7lS0C
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"not an identifier"
                              g$stx$8162$7lS0C
                              g$last$8167$7lS0C))))))
                    g$ls/false$8165$7lS0C)
                  ((case-lambda
                     ((g$t$8170$7lS0C)
                      ((case-lambda
                         ((g$ls/false$8171$7lS0C)
                          (if g$ls/false$8171$7lS0C
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7708$7lS0C
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8162$7lS0C
                                   g$fmls$8163$7lS0C)))
                              g$ls/false$8171$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$8170$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C g$t$8170$7lS0C '_))))
                   g$t$8164$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8164$7lS0C
               '#(each+ any () any)))))
         g$fmls$8163$7lS0C))))
   (g$let-macro$7562$7lS0C
     g$let-macro$11062$7lS0C
     (case-lambda
       ((g$stx$8172$7lS0C)
        ((case-lambda
           ((g$t$8173$7lS0C)
            ((case-lambda
               ((g$ls/false$8174$7lS0C)
                (if g$ls/false$8174$7lS0C
                  (apply
                    (case-lambda
                      ((g$lhs*$8175$7lS0C
                         g$rhs*$8176$7lS0C
                         g$b$8177$7lS0C
                         g$b*$8178$7lS0C)
                       (if (g$valid-bound-ids?$7323$7lS0C g$lhs*$8175$7lS0C)
                         (g$bless$7559$7lS0C
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8175$7lS0C
                                 (cons g$b$8177$7lS0C g$b*$8178$7lS0C)))
                             g$rhs*$8176$7lS0C))
                         (g$invalid-fmls-error$7561$7lS0C
                           g$stx$8172$7lS0C
                           g$lhs*$8175$7lS0C))))
                    g$ls/false$8174$7lS0C)
                  ((case-lambda
                     ((g$t$8179$7lS0C)
                      ((case-lambda
                         ((g$ls/false$8180$7lS0C)
                          (if (if g$ls/false$8180$7lS0C
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8181$7lS0C
                                         g$lhs*$8182$7lS0C
                                         g$rhs*$8183$7lS0C
                                         g$b$8184$7lS0C
                                         g$b*$8185$7lS0C)
                                       (g$id?$7318$7lS0C g$f$8181$7lS0C)))
                                    g$ls/false$8180$7lS0C))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8186$7lS0C
                                   g$lhs*$8187$7lS0C
                                   g$rhs*$8188$7lS0C
                                   g$b$8189$7lS0C
                                   g$b*$8190$7lS0C)
                                 (if (g$valid-bound-ids?$7323$7lS0C
                                       g$lhs*$8187$7lS0C)
                                   (g$bless$7559$7lS0C
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8186$7lS0C
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8187$7lS0C
                                                 (cons
                                                   g$b$8189$7lS0C
                                                   g$b*$8190$7lS0C)))))
                                         g$f$8186$7lS0C)
                                       g$rhs*$8188$7lS0C))
                                   (g$invalid-fmls-error$7561$7lS0C
                                     g$stx$8172$7lS0C
                                     g$lhs*$8187$7lS0C))))
                              g$ls/false$8180$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$8179$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$8179$7lS0C
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8173$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8173$7lS0C
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8172$7lS0C))))
   (g$let-values-macro$7563$7lS0C
     g$let-values-macro$11063$7lS0C
     (case-lambda
       ((g$stx$8191$7lS0C)
        (letrec* ((g$rename$8192$7lS0C
                    (case-lambda
                      ((g$x$8243$7lS0C g$old*$8244$7lS0C g$new*$8245$7lS0C)
                       (begin
                         (if (not (g$id?$7318$7lS0C g$x$8243$7lS0C))
                           (g$syntax-violation$7708$7lS0C
                             '#f
                             '"not an indentifier"
                             g$stx$8191$7lS0C
                             g$x$8243$7lS0C)
                           (void))
                         (if (g$bound-id-member?$7325$7lS0C
                               g$x$8243$7lS0C
                               g$old*$8244$7lS0C)
                           (g$syntax-violation$7708$7lS0C
                             '#f
                             '"duplicate binding"
                             g$stx$8191$7lS0C
                             g$x$8243$7lS0C)
                           (void))
                         ((case-lambda
                            ((g$y$8246$7lS0C)
                             (values
                               g$y$8246$7lS0C
                               (cons g$x$8243$7lS0C g$old*$8244$7lS0C)
                               (cons g$y$8246$7lS0C g$new*$8245$7lS0C))))
                          (gensym
                            (g$syntax->datum$7711$7lS0C g$x$8243$7lS0C)))))))
                  (g$rename*$8193$7lS0C
                    (case-lambda
                      ((g$x*$8234$7lS0C g$old*$8235$7lS0C g$new*$8236$7lS0C)
                       (if (null? g$x*$8234$7lS0C)
                         (values '() g$old*$8235$7lS0C g$new*$8236$7lS0C)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8192$7lS0C
                                (car g$x*$8234$7lS0C)
                                g$old*$8235$7lS0C
                                g$new*$8236$7lS0C)))
                           (case-lambda
                             ((g$x$8237$7lS0C
                                g$old*$8238$7lS0C
                                g$new*$8239$7lS0C)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8193$7lS0C
                                     (cdr g$x*$8234$7lS0C)
                                     g$old*$8238$7lS0C
                                     g$new*$8239$7lS0C)))
                                (case-lambda
                                  ((g$x*$8240$7lS0C
                                     g$old*$8241$7lS0C
                                     g$new*$8242$7lS0C)
                                   (values
                                     (cons g$x$8237$7lS0C g$x*$8240$7lS0C)
                                     g$old*$8241$7lS0C
                                     g$new*$8242$7lS0C))))))))))))
          ((case-lambda
             ((g$t$8194$7lS0C)
              ((case-lambda
                 ((g$ls/false$8195$7lS0C)
                  (if g$ls/false$8195$7lS0C
                    (apply
                      (case-lambda
                        ((g$b$8196$7lS0C g$b*$8197$7lS0C)
                         (g$cons*$5061$7lS0C
                           (g$bless$7559$7lS0C 'let)
                           '()
                           g$b$8196$7lS0C
                           g$b*$8197$7lS0C)))
                      g$ls/false$8195$7lS0C)
                    ((case-lambda
                       ((g$t$8198$7lS0C)
                        ((case-lambda
                           ((g$ls/false$8199$7lS0C)
                            (if g$ls/false$8199$7lS0C
                              (apply
                                (case-lambda
                                  ((g$lhs*$8200$7lS0C
                                     g$rhs*$8201$7lS0C
                                     g$b$8202$7lS0C
                                     g$b*$8203$7lS0C)
                                   (g$bless$7559$7lS0C
                                     ((letrec ((g$f$8204$7lS0C
                                                 (case-lambda
                                                   ((g$lhs*$8205$7lS0C
                                                      g$rhs*$8206$7lS0C
                                                      g$old*$8207$7lS0C
                                                      g$new*$8208$7lS0C)
                                                    (if (null?
                                                          g$lhs*$8205$7lS0C)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5059$7lS0C
                                                            list
                                                            g$old*$8207$7lS0C
                                                            g$new*$8208$7lS0C)
                                                          (cons
                                                            g$b$8202$7lS0C
                                                            g$b*$8203$7lS0C)))
                                                      ((case-lambda
                                                         ((g$t$8209$7lS0C)
                                                          ((case-lambda
                                                             ((g$ls/false$8210$7lS0C)
                                                              (if g$ls/false$8210$7lS0C
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8211$7lS0C)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8193$7lS0C
                                                                            g$x*$8211$7lS0C
                                                                            g$old*$8207$7lS0C
                                                                            g$new*$8208$7lS0C)))
                                                                       (case-lambda
                                                                         ((g$y*$8215$7lS0C
                                                                            g$old*$8216$7lS0C
                                                                            g$new*$8217$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$new*$8218$7lS0C
                                                                                g$old*$8219$7lS0C
                                                                                g$y*$8220$7lS0C)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8206$7lS0C))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8220$7lS0C
                                                                                  (g$f$8204$7lS0C
                                                                                    (cdr g$lhs*$8205$7lS0C)
                                                                                    (cdr g$rhs*$8206$7lS0C)
                                                                                    g$old*$8219$7lS0C
                                                                                    g$new*$8218$7lS0C)))))
                                                                           g$new*$8217$7lS0C
                                                                           g$old*$8216$7lS0C
                                                                           g$y*$8215$7lS0C))))))
                                                                  g$ls/false$8210$7lS0C)
                                                                ((case-lambda
                                                                   ((g$t$8221$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8222$7lS0C)
                                                                        (if g$ls/false$8222$7lS0C
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8223$7lS0C
                                                                                 g$x$8224$7lS0C)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8192$7lS0C
                                                                                      g$x$8224$7lS0C
                                                                                      g$old*$8207$7lS0C
                                                                                      g$new*$8208$7lS0C)))
                                                                                 (case-lambda
                                                                                   ((g$y$8225$7lS0C
                                                                                      g$old*$8226$7lS0C
                                                                                      g$new*$8227$7lS0C)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8193$7lS0C
                                                                                           g$x*$8223$7lS0C
                                                                                           g$old*$8226$7lS0C
                                                                                           g$new*$8227$7lS0C)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8228$7lS0C
                                                                                           g$old*$8229$7lS0C
                                                                                           g$new*$8230$7lS0C)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8206$7lS0C))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8228$7lS0C
                                                                                               g$y$8225$7lS0C)
                                                                                             (g$f$8204$7lS0C
                                                                                               (cdr g$lhs*$8205$7lS0C)
                                                                                               (cdr g$rhs*$8206$7lS0C)
                                                                                               g$old*$8229$7lS0C
                                                                                               g$new*$8230$7lS0C)))))))))))
                                                                            g$ls/false$8222$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$t$8231$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8232$7lS0C)
                                                                                  (if g$ls/false$8232$7lS0C
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8233$7lS0C)
                                                                                         (g$syntax-violation$7708$7lS0C
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8191$7lS0C
                                                                                           g$others$8233$7lS0C)))
                                                                                      g$ls/false$8232$7lS0C)
                                                                                    (g$syntax-violation$7708$7lS0C
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8231$7lS0C))))
                                                                               (g$syntax-dispatch$7596$7lS0C
                                                                                 g$t$8231$7lS0C
                                                                                 'any))))
                                                                           g$t$8221$7lS0C))))
                                                                     (g$syntax-dispatch$7596$7lS0C
                                                                       g$t$8221$7lS0C
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8209$7lS0C))))
                                                           (g$syntax-dispatch$7596$7lS0C
                                                             g$t$8209$7lS0C
                                                             'each-any))))
                                                       (car g$lhs*$8205$7lS0C)))))))
                                        g$f$8204$7lS0C)
                                      g$lhs*$8200$7lS0C
                                      g$rhs*$8201$7lS0C
                                      '()
                                      '()))))
                                g$ls/false$8199$7lS0C)
                              (g$syntax-violation$7708$7lS0C
                                '#f
                                '"invalid syntax"
                                g$t$8198$7lS0C))))
                         (g$syntax-dispatch$7596$7lS0C
                           g$t$8198$7lS0C
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8194$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C
                 g$t$8194$7lS0C
                 '(_ () any . each-any)))))
           g$stx$8191$7lS0C)))))
   (g$let*-values-macro$7564$7lS0C
     g$let*-values-macro$11064$7lS0C
     (case-lambda
       ((g$stx$8247$7lS0C)
        (letrec* ((g$check$8248$7lS0C
                    (case-lambda
                      ((g$x*$8272$7lS0C)
                       (if (not (null? g$x*$8272$7lS0C))
                         ((case-lambda
                            ((g$x$8273$7lS0C)
                             (begin
                               (if (not (g$id?$7318$7lS0C g$x$8273$7lS0C))
                                 (g$syntax-violation$7708$7lS0C
                                   '#f
                                   '"not an identifier"
                                   g$stx$8247$7lS0C
                                   g$x$8273$7lS0C)
                                 (void))
                               (g$check$8248$7lS0C (cdr g$x*$8272$7lS0C))
                               (if (g$bound-id-member?$7325$7lS0C
                                     g$x$8273$7lS0C
                                     (cdr g$x*$8272$7lS0C))
                                 (g$syntax-violation$7708$7lS0C
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8247$7lS0C
                                   g$x$8273$7lS0C)
                                 (void)))))
                          (car g$x*$8272$7lS0C))
                         (void))))))
          ((case-lambda
             ((g$t$8249$7lS0C)
              ((case-lambda
                 ((g$ls/false$8250$7lS0C)
                  (if g$ls/false$8250$7lS0C
                    (apply
                      (case-lambda
                        ((g$b$8251$7lS0C g$b*$8252$7lS0C)
                         (g$cons*$5061$7lS0C
                           (g$bless$7559$7lS0C 'let)
                           '()
                           g$b$8251$7lS0C
                           g$b*$8252$7lS0C)))
                      g$ls/false$8250$7lS0C)
                    ((case-lambda
                       ((g$t$8253$7lS0C)
                        ((case-lambda
                           ((g$ls/false$8254$7lS0C)
                            (if g$ls/false$8254$7lS0C
                              (apply
                                (case-lambda
                                  ((g$lhs*$8255$7lS0C
                                     g$rhs*$8256$7lS0C
                                     g$b$8257$7lS0C
                                     g$b*$8258$7lS0C)
                                   (g$bless$7559$7lS0C
                                     ((letrec ((g$f$8259$7lS0C
                                                 (case-lambda
                                                   ((g$lhs*$8260$7lS0C
                                                      g$rhs*$8261$7lS0C)
                                                    (if (null?
                                                          g$lhs*$8260$7lS0C)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8257$7lS0C
                                                          g$b*$8258$7lS0C))
                                                      ((case-lambda
                                                         ((g$t$8262$7lS0C)
                                                          ((case-lambda
                                                             ((g$ls/false$8263$7lS0C)
                                                              (if g$ls/false$8263$7lS0C
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8264$7lS0C)
                                                                     (begin
                                                                       (g$check$8248$7lS0C
                                                                         g$x*$8264$7lS0C)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8261$7lS0C))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8264$7lS0C
                                                                           (g$f$8259$7lS0C
                                                                             (cdr g$lhs*$8260$7lS0C)
                                                                             (cdr g$rhs*$8261$7lS0C)))))))
                                                                  g$ls/false$8263$7lS0C)
                                                                ((case-lambda
                                                                   ((g$t$8265$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8266$7lS0C)
                                                                        (if g$ls/false$8266$7lS0C
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8267$7lS0C
                                                                                 g$x$8268$7lS0C)
                                                                               (begin
                                                                                 (g$check$8248$7lS0C
                                                                                   (cons
                                                                                     g$x$8268$7lS0C
                                                                                     g$x*$8267$7lS0C))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8261$7lS0C))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8267$7lS0C
                                                                                       g$x$8268$7lS0C)
                                                                                     (g$f$8259$7lS0C
                                                                                       (cdr g$lhs*$8260$7lS0C)
                                                                                       (cdr g$rhs*$8261$7lS0C)))))))
                                                                            g$ls/false$8266$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$t$8269$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8270$7lS0C)
                                                                                  (if g$ls/false$8270$7lS0C
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8271$7lS0C)
                                                                                         (g$syntax-violation$7708$7lS0C
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8247$7lS0C
                                                                                           g$others$8271$7lS0C)))
                                                                                      g$ls/false$8270$7lS0C)
                                                                                    (g$syntax-violation$7708$7lS0C
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8269$7lS0C))))
                                                                               (g$syntax-dispatch$7596$7lS0C
                                                                                 g$t$8269$7lS0C
                                                                                 'any))))
                                                                           g$t$8265$7lS0C))))
                                                                     (g$syntax-dispatch$7596$7lS0C
                                                                       g$t$8265$7lS0C
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8262$7lS0C))))
                                                           (g$syntax-dispatch$7596$7lS0C
                                                             g$t$8262$7lS0C
                                                             'each-any))))
                                                       (car g$lhs*$8260$7lS0C)))))))
                                        g$f$8259$7lS0C)
                                      g$lhs*$8255$7lS0C
                                      g$rhs*$8256$7lS0C))))
                                g$ls/false$8254$7lS0C)
                              (g$syntax-violation$7708$7lS0C
                                '#f
                                '"invalid syntax"
                                g$t$8253$7lS0C))))
                         (g$syntax-dispatch$7596$7lS0C
                           g$t$8253$7lS0C
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8249$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C
                 g$t$8249$7lS0C
                 '(_ () any . each-any)))))
           g$stx$8247$7lS0C)))))
   (g$trace-lambda-macro$7565$7lS0C
     g$trace-lambda-macro$11065$7lS0C
     (case-lambda
       ((g$stx$8274$7lS0C)
        ((case-lambda
           ((g$t$8275$7lS0C)
            ((case-lambda
               ((g$ls/false$8276$7lS0C)
                (if g$ls/false$8276$7lS0C
                  (apply
                    (case-lambda
                      ((g$who$8277$7lS0C
                         g$fmls$8278$7lS0C
                         g$b$8279$7lS0C
                         g$b*$8280$7lS0C)
                       (if (g$valid-bound-ids?$7323$7lS0C g$fmls$8278$7lS0C)
                         (g$bless$7559$7lS0C
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8277$7lS0C)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8278$7lS0C
                                 (cons g$b$8279$7lS0C g$b*$8280$7lS0C)))))
                         (g$invalid-fmls-error$7561$7lS0C
                           g$stx$8274$7lS0C
                           g$fmls$8278$7lS0C))))
                    g$ls/false$8276$7lS0C)
                  ((case-lambda
                     ((g$t$8281$7lS0C)
                      ((case-lambda
                         ((g$ls/false$8282$7lS0C)
                          (if g$ls/false$8282$7lS0C
                            (apply
                              (case-lambda
                                ((g$who$8283$7lS0C
                                   g$fmls$8284$7lS0C
                                   g$last$8285$7lS0C
                                   g$b$8286$7lS0C
                                   g$b*$8287$7lS0C)
                                 (if (g$valid-bound-ids?$7323$7lS0C
                                       (cons
                                         g$last$8285$7lS0C
                                         g$fmls$8284$7lS0C))
                                   (g$bless$7559$7lS0C
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8283$7lS0C)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8284$7lS0C
                                             g$last$8285$7lS0C)
                                           (cons
                                             g$b$8286$7lS0C
                                             g$b*$8287$7lS0C)))))
                                   (g$invalid-fmls-error$7561$7lS0C
                                     g$stx$8274$7lS0C
                                     (append
                                       g$fmls$8284$7lS0C
                                       g$last$8285$7lS0C)))))
                              g$ls/false$8282$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$8281$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$8281$7lS0C
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8275$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8275$7lS0C
               '(_ any each-any any . each-any)))))
         g$stx$8274$7lS0C))))
   (g$trace-define-macro$7566$7lS0C
     g$trace-define-macro$11066$7lS0C
     (case-lambda
       ((g$stx$8288$7lS0C)
        ((case-lambda
           ((g$t$8289$7lS0C)
            ((case-lambda
               ((g$ls/false$8290$7lS0C)
                (if g$ls/false$8290$7lS0C
                  (apply
                    (case-lambda
                      ((g$who$8291$7lS0C
                         g$fmls$8292$7lS0C
                         g$b$8293$7lS0C
                         g$b*$8294$7lS0C)
                       (if (g$valid-bound-ids?$7323$7lS0C g$fmls$8292$7lS0C)
                         (g$bless$7559$7lS0C
                           (list
                             'define
                             g$who$8291$7lS0C
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8291$7lS0C)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8292$7lS0C
                                   (cons g$b$8293$7lS0C g$b*$8294$7lS0C))))))
                         (g$invalid-fmls-error$7561$7lS0C
                           g$stx$8288$7lS0C
                           g$fmls$8292$7lS0C))))
                    g$ls/false$8290$7lS0C)
                  ((case-lambda
                     ((g$t$8295$7lS0C)
                      ((case-lambda
                         ((g$ls/false$8296$7lS0C)
                          (if g$ls/false$8296$7lS0C
                            (apply
                              (case-lambda
                                ((g$who$8297$7lS0C
                                   g$fmls$8298$7lS0C
                                   g$last$8299$7lS0C
                                   g$b$8300$7lS0C
                                   g$b*$8301$7lS0C)
                                 (if (g$valid-bound-ids?$7323$7lS0C
                                       (cons
                                         g$last$8299$7lS0C
                                         g$fmls$8298$7lS0C))
                                   (g$bless$7559$7lS0C
                                     (list
                                       'define
                                       g$who$8297$7lS0C
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8297$7lS0C)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8298$7lS0C
                                               g$last$8299$7lS0C)
                                             (cons
                                               g$b$8300$7lS0C
                                               g$b*$8301$7lS0C))))))
                                   (g$invalid-fmls-error$7561$7lS0C
                                     g$stx$8288$7lS0C
                                     (append
                                       g$fmls$8298$7lS0C
                                       g$last$8299$7lS0C)))))
                              g$ls/false$8296$7lS0C)
                            ((case-lambda
                               ((g$t$8302$7lS0C)
                                ((case-lambda
                                   ((g$ls/false$8303$7lS0C)
                                    (if g$ls/false$8303$7lS0C
                                      (apply
                                        (case-lambda
                                          ((g$who$8304$7lS0C g$expr$8305$7lS0C)
                                           (if (g$id?$7318$7lS0C
                                                 g$who$8304$7lS0C)
                                             (g$bless$7559$7lS0C
                                               (list
                                                 'define
                                                 g$who$8304$7lS0C
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8305$7lS0C))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8304$7lS0C)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7708$7lS0C
                                               '#f
                                               '"invalid name"
                                               g$stx$8288$7lS0C))))
                                        g$ls/false$8303$7lS0C)
                                      (g$syntax-violation$7708$7lS0C
                                        '#f
                                        '"invalid syntax"
                                        g$t$8302$7lS0C))))
                                 (g$syntax-dispatch$7596$7lS0C
                                   g$t$8302$7lS0C
                                   '(_ any any)))))
                             g$t$8295$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$8295$7lS0C
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8289$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8289$7lS0C
               '(_ (any . each-any) any . each-any)))))
         g$stx$8288$7lS0C))))
   (g$trace-define-syntax-macro$7567$7lS0C
     g$trace-define-syntax-macro$11067$7lS0C
     (case-lambda
       ((g$stx$8306$7lS0C)
        ((case-lambda
           ((g$t$8307$7lS0C)
            ((case-lambda
               ((g$ls/false$8308$7lS0C)
                (if g$ls/false$8308$7lS0C
                  (apply
                    (case-lambda
                      ((g$who$8309$7lS0C g$expr$8310$7lS0C)
                       (if (g$id?$7318$7lS0C g$who$8309$7lS0C)
                         (g$bless$7559$7lS0C
                           (list
                             'define-syntax
                             g$who$8309$7lS0C
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8309$7lS0C)
                               g$expr$8310$7lS0C)))
                         (g$syntax-violation$7708$7lS0C
                           '#f
                           '"invalid name"
                           g$stx$8306$7lS0C))))
                    g$ls/false$8308$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8307$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8307$7lS0C '(_ any any)))))
         g$stx$8306$7lS0C))))
   (g$trace-let/rec-syntax$7568$7lS0C
     g$trace-let/rec-syntax$11068$7lS0C
     (case-lambda
       ((g$who$8311$7lS0C)
        (case-lambda
          ((g$stx$8312$7lS0C)
           ((case-lambda
              ((g$t$8313$7lS0C)
               ((case-lambda
                  ((g$ls/false$8314$7lS0C)
                   (if g$ls/false$8314$7lS0C
                     (apply
                       (case-lambda
                         ((g$lhs*$8315$7lS0C
                            g$rhs*$8316$7lS0C
                            g$b$8317$7lS0C
                            g$b*$8318$7lS0C)
                          (if (g$valid-bound-ids?$7323$7lS0C g$lhs*$8315$7lS0C)
                            ((case-lambda
                               ((g$rhs*$8319$7lS0C)
                                (g$bless$7559$7lS0C
                                  (cons
                                    g$who$8311$7lS0C
                                    (cons
                                      (g$map$5059$7lS0C
                                        list
                                        g$lhs*$8315$7lS0C
                                        g$rhs*$8319$7lS0C)
                                      (cons g$b$8317$7lS0C g$b*$8318$7lS0C))))))
                             (g$map$5059$7lS0C
                               (case-lambda
                                 ((g$lhs$8320$7lS0C g$rhs$8321$7lS0C)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$8320$7lS0C)
                                    g$rhs$8321$7lS0C)))
                               g$lhs*$8315$7lS0C
                               g$rhs*$8316$7lS0C))
                            (g$invalid-fmls-error$7561$7lS0C
                              g$stx$8312$7lS0C
                              g$lhs*$8315$7lS0C))))
                       g$ls/false$8314$7lS0C)
                     (g$syntax-violation$7708$7lS0C
                       '#f
                       '"invalid syntax"
                       g$t$8313$7lS0C))))
                (g$syntax-dispatch$7596$7lS0C
                  g$t$8313$7lS0C
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8312$7lS0C))))))
   (g$trace-let-syntax-macro$7569$7lS0C
     g$trace-let-syntax-macro$11069$7lS0C
     (g$trace-let/rec-syntax$7568$7lS0C 'let-syntax))
   (g$trace-letrec-syntax-macro$7570$7lS0C
     g$trace-letrec-syntax-macro$11070$7lS0C
     (g$trace-let/rec-syntax$7568$7lS0C 'letrec-syntax))
   (g$guard-macro$7571$7lS0C
     g$guard-macro$11071$7lS0C
     (case-lambda
       ((g$x$8322$7lS0C)
        (letrec* ((g$gen-clauses$8323$7lS0C
                    (case-lambda
                      ((g$con$8335$7lS0C
                         g$outerk$8336$7lS0C
                         g$clause*$8337$7lS0C)
                       (letrec* ((g$f$8338$7lS0C
                                   (case-lambda
                                     ((g$x$8366$7lS0C g$k$8367$7lS0C)
                                      ((case-lambda
                                         ((g$t$8368$7lS0C)
                                          ((case-lambda
                                             ((g$ls/false$8369$7lS0C)
                                              (if g$ls/false$8369$7lS0C
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8370$7lS0C
                                                       g$p$8371$7lS0C)
                                                     ((case-lambda
                                                        ((g$t$8372$7lS0C)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8372$7lS0C
                                                               g$e$8370$7lS0C))
                                                           (list
                                                             'if
                                                             g$t$8372$7lS0C
                                                             (list
                                                               g$p$8371$7lS0C
                                                               g$t$8372$7lS0C)
                                                             g$k$8367$7lS0C))))
                                                      (gensym))))
                                                  g$ls/false$8369$7lS0C)
                                                ((case-lambda
                                                   ((g$t$8373$7lS0C)
                                                    ((case-lambda
                                                       ((g$ls/false$8374$7lS0C)
                                                        (if g$ls/false$8374$7lS0C
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8375$7lS0C)
                                                               ((case-lambda
                                                                  ((g$t$8376$7lS0C)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8376$7lS0C
                                                                         g$e$8375$7lS0C))
                                                                     (list
                                                                       'if
                                                                       g$t$8376$7lS0C
                                                                       g$t$8376$7lS0C
                                                                       g$k$8367$7lS0C))))
                                                                (gensym))))
                                                            g$ls/false$8374$7lS0C)
                                                          ((case-lambda
                                                             ((g$t$8377$7lS0C)
                                                              ((case-lambda
                                                                 ((g$ls/false$8378$7lS0C)
                                                                  (if g$ls/false$8378$7lS0C
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8379$7lS0C
                                                                           g$v$8380$7lS0C
                                                                           g$v*$8381$7lS0C)
                                                                         (list
                                                                           'if
                                                                           g$e$8379$7lS0C
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8380$7lS0C
                                                                               g$v*$8381$7lS0C))
                                                                           g$k$8367$7lS0C)))
                                                                      g$ls/false$8378$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$t$8382$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8383$7lS0C)
                                                                            (if g$ls/false$8383$7lS0C
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7708$7lS0C
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8366$7lS0C)))
                                                                                g$ls/false$8383$7lS0C)
                                                                              (g$syntax-violation$7708$7lS0C
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8382$7lS0C))))
                                                                         (g$syntax-dispatch$7596$7lS0C
                                                                           g$t$8382$7lS0C
                                                                           '_))))
                                                                     g$t$8377$7lS0C))))
                                                               (g$syntax-dispatch$7596$7lS0C
                                                                 g$t$8377$7lS0C
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8373$7lS0C))))
                                                     (g$syntax-dispatch$7596$7lS0C
                                                       g$t$8373$7lS0C
                                                       '(any)))))
                                                 g$t$8368$7lS0C))))
                                           (g$syntax-dispatch$7596$7lS0C
                                             g$t$8368$7lS0C
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8366$7lS0C))))
                                 (g$f*$8339$7lS0C
                                   (case-lambda
                                     ((g$x*$8346$7lS0C)
                                      ((case-lambda
                                         ((g$t$8347$7lS0C)
                                          ((case-lambda
                                             ((g$ls/false$8348$7lS0C)
                                              (if g$ls/false$8348$7lS0C
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8335$7lS0C)
                                                       '#t)))
                                                  g$ls/false$8348$7lS0C)
                                                ((case-lambda
                                                   ((g$t$8349$7lS0C)
                                                    ((case-lambda
                                                       ((g$ls/false$8350$7lS0C)
                                                        (if g$ls/false$8350$7lS0C
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8351$7lS0C
                                                                 g$e*$8352$7lS0C)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8351$7lS0C
                                                                     g$e*$8352$7lS0C))
                                                                 '#f)))
                                                            g$ls/false$8350$7lS0C)
                                                          ((case-lambda
                                                             ((g$t$8353$7lS0C)
                                                              ((case-lambda
                                                                 ((g$ls/false$8354$7lS0C)
                                                                  (if g$ls/false$8354$7lS0C
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8355$7lS0C
                                                                           g$cls*$8356$7lS0C)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8339$7lS0C
                                                                                g$cls*$8356$7lS0C)))
                                                                           (case-lambda
                                                                             ((g$e$8359$7lS0C
                                                                                g$g$8360$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$g$8361$7lS0C
                                                                                    g$e$8362$7lS0C)
                                                                                  (values
                                                                                    (g$f$8338$7lS0C
                                                                                      g$cls$8355$7lS0C
                                                                                      g$e$8362$7lS0C)
                                                                                    g$g$8361$7lS0C)))
                                                                               g$g$8360$7lS0C
                                                                               g$e$8359$7lS0C))))))
                                                                      g$ls/false$8354$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$t$8363$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8364$7lS0C)
                                                                            (if g$ls/false$8364$7lS0C
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8365$7lS0C)
                                                                                   (g$syntax-violation$7708$7lS0C
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8365$7lS0C)))
                                                                                g$ls/false$8364$7lS0C)
                                                                              (g$syntax-violation$7708$7lS0C
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8363$7lS0C))))
                                                                         (g$syntax-dispatch$7596$7lS0C
                                                                           g$t$8363$7lS0C
                                                                           'any))))
                                                                     g$t$8353$7lS0C))))
                                                               (g$syntax-dispatch$7596$7lS0C
                                                                 g$t$8353$7lS0C
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8349$7lS0C))))
                                                     (g$syntax-dispatch$7596$7lS0C
                                                       g$t$8349$7lS0C
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8347$7lS0C))))
                                           (g$syntax-dispatch$7596$7lS0C
                                             g$t$8347$7lS0C
                                             '()))))
                                       g$x*$8346$7lS0C)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8339$7lS0C g$clause*$8337$7lS0C)))
                           (case-lambda
                             ((g$code$8342$7lS0C g$raisek$8343$7lS0C)
                              ((case-lambda
                                 ((g$raisek$8344$7lS0C g$code$8345$7lS0C)
                                  (if g$raisek$8344$7lS0C
                                    (list g$outerk$8336$7lS0C g$code$8345$7lS0C)
                                    g$code$8345$7lS0C)))
                               g$raisek$8343$7lS0C
                               g$code$8342$7lS0C)))))))))
          ((case-lambda
             ((g$t$8324$7lS0C)
              ((case-lambda
                 ((g$ls/false$8325$7lS0C)
                  (if (if g$ls/false$8325$7lS0C
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8326$7lS0C
                                 g$clause*$8327$7lS0C
                                 g$b$8328$7lS0C
                                 g$b*$8329$7lS0C)
                               (g$id?$7318$7lS0C g$con$8326$7lS0C)))
                            g$ls/false$8325$7lS0C))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8330$7lS0C
                           g$clause*$8331$7lS0C
                           g$b$8332$7lS0C
                           g$b*$8333$7lS0C)
                         ((case-lambda
                            ((g$outerk$8334$7lS0C)
                             (g$bless$7559$7lS0C
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8334$7lS0C)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8330$7lS0C)
                                           (g$gen-clauses$8323$7lS0C
                                             g$con$8330$7lS0C
                                             g$outerk$8334$7lS0C
                                             g$clause*$8331$7lS0C))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8332$7lS0C
                                                 g$b*$8333$7lS0C))))))))))))
                          (gensym))))
                      g$ls/false$8325$7lS0C)
                    (g$syntax-violation$7708$7lS0C
                      '#f
                      '"invalid syntax"
                      g$t$8324$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C
                 g$t$8324$7lS0C
                 '(_ (any . each-any) any . each-any)))))
           g$x$8322$7lS0C)))))
   (g$define-enumeration-macro$7572$7lS0C
     g$define-enumeration-macro$11072$7lS0C
     (case-lambda
       ((g$stx$8384$7lS0C)
        (letrec* ((g$set?$8385$7lS0C
                    (case-lambda
                      ((g$x$8398$7lS0C)
                       ((case-lambda
                          ((g$t$8399$7lS0C)
                           (if g$t$8399$7lS0C
                             g$t$8399$7lS0C
                             (begin
                               '#f
                               (if (not (g$memq$5051$7lS0C
                                          (car g$x$8398$7lS0C)
                                          (cdr g$x$8398$7lS0C)))
                                 (begin
                                   '#f
                                   (g$set?$8385$7lS0C (cdr g$x$8398$7lS0C)))
                                 '#f)))))
                        (null? g$x$8398$7lS0C)))))
                  (g$remove-dups$8386$7lS0C
                    (case-lambda
                      ((g$ls$8397$7lS0C)
                       (if (null? g$ls$8397$7lS0C)
                         '()
                         (cons
                           (car g$ls$8397$7lS0C)
                           (g$remove-dups$8386$7lS0C
                             (g$remq$5066$7lS0C
                               (car g$ls$8397$7lS0C)
                               (cdr g$ls$8397$7lS0C)))))))))
          ((case-lambda
             ((g$t$8387$7lS0C)
              ((case-lambda
                 ((g$ls/false$8388$7lS0C)
                  (if (if g$ls/false$8388$7lS0C
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8389$7lS0C
                                 g$id*$8390$7lS0C
                                 g$maker$8391$7lS0C)
                               (if (g$id?$7318$7lS0C g$name$8389$7lS0C)
                                 (if (g$id?$7318$7lS0C g$maker$8391$7lS0C)
                                   (begin
                                     '#f
                                     (g$for-all$5057$7lS0C
                                       g$id?$7318$7lS0C
                                       g$id*$8390$7lS0C))
                                   '#f)
                                 '#f)))
                            g$ls/false$8388$7lS0C))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8392$7lS0C g$id*$8393$7lS0C g$maker$8394$7lS0C)
                         ((case-lambda
                            ((g$name*$8395$7lS0C g$mk$8396$7lS0C)
                             (g$bless$7559$7lS0C
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8396$7lS0C
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8395$7lS0C))))
                                 (list
                                   'define-syntax
                                   g$name$8392$7lS0C
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8395$7lS0C))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8392$7lS0C)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8394$7lS0C
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8394$7lS0C)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8395$7lS0C))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8394$7lS0C)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8396$7lS0C
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8386$7lS0C
                            (g$syntax->datum$7711$7lS0C g$id*$8393$7lS0C))
                          (gensym))))
                      g$ls/false$8388$7lS0C)
                    (g$syntax-violation$7708$7lS0C
                      '#f
                      '"invalid syntax"
                      g$t$8387$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C
                 g$t$8387$7lS0C
                 '(_ any each-any any)))))
           g$stx$8384$7lS0C)))))
   (g$time-macro$7573$7lS0C
     g$time-macro$11073$7lS0C
     (case-lambda
       ((g$stx$8400$7lS0C)
        ((case-lambda
           ((g$t$8401$7lS0C)
            ((case-lambda
               ((g$ls/false$8402$7lS0C)
                (if g$ls/false$8402$7lS0C
                  (apply
                    (case-lambda
                      ((g$expr$8403$7lS0C)
                       ((case-lambda
                          ((g$str$8404$7lS0C)
                           (g$bless$7559$7lS0C
                             (list
                               'time-it
                               g$str$8404$7lS0C
                               (list 'lambda '() g$expr$8403$7lS0C)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6278$7lS0C)))
                          (case-lambda
                            ((g$p$8407$7lS0C g$e$8408$7lS0C)
                             ((case-lambda
                                ((g$e$8409$7lS0C g$p$8410$7lS0C)
                                 (begin
                                   (write
                                     (g$syntax->datum$7711$7lS0C
                                       g$expr$8403$7lS0C)
                                     g$p$8410$7lS0C)
                                   (g$e$8409$7lS0C))))
                              g$e$8408$7lS0C
                              g$p$8407$7lS0C)))))))
                    g$ls/false$8402$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8401$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8401$7lS0C '(_ any)))))
         g$stx$8400$7lS0C))))
   (g$delay-macro$7574$7lS0C
     g$delay-macro$11074$7lS0C
     (case-lambda
       ((g$stx$8411$7lS0C)
        ((case-lambda
           ((g$t$8412$7lS0C)
            ((case-lambda
               ((g$ls/false$8413$7lS0C)
                (if g$ls/false$8413$7lS0C
                  (apply
                    (case-lambda
                      ((g$expr$8414$7lS0C)
                       (g$bless$7559$7lS0C
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8414$7lS0C)))))
                    g$ls/false$8413$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8412$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8412$7lS0C '(_ any)))))
         g$stx$8411$7lS0C))))
   (g$assert-macro$7575$7lS0C
     g$assert-macro$11075$7lS0C
     (case-lambda
       ((g$stx$8415$7lS0C)
        ((case-lambda
           ((g$t$8416$7lS0C)
            ((case-lambda
               ((g$ls/false$8417$7lS0C)
                (if g$ls/false$8417$7lS0C
                  (apply
                    (case-lambda
                      ((g$expr$8418$7lS0C)
                       ((case-lambda
                          ((g$pos$8419$7lS0C)
                           (g$bless$7559$7lS0C
                             (list
                               'unless
                               g$expr$8418$7lS0C
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8418$7lS0C)
                                 (list 'quote g$pos$8419$7lS0C))))))
                        ((case-lambda
                           ((g$t$8420$7lS0C)
                            (if g$t$8420$7lS0C
                              g$t$8420$7lS0C
                              (begin
                                '#f
                                (g$expression-position$7703$7lS0C
                                  g$expr$8418$7lS0C)))))
                         (g$expression-position$7703$7lS0C g$stx$8415$7lS0C)))))
                    g$ls/false$8417$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8416$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8416$7lS0C '(_ any)))))
         g$stx$8415$7lS0C))))
   (g$endianness-macro$7576$7lS0C
     g$endianness-macro$11076$7lS0C
     (case-lambda
       ((g$stx$8421$7lS0C)
        ((case-lambda
           ((g$t$8422$7lS0C)
            ((case-lambda
               ((g$ls/false$8423$7lS0C)
                (if g$ls/false$8423$7lS0C
                  (apply
                    (case-lambda
                      ((g$e$8424$7lS0C)
                       ((case-lambda
                          ((g$t$8425$7lS0C)
                           (if (g$memv$5052$7lS0C g$t$8425$7lS0C '(little))
                             (g$bless$7559$7lS0C ''little)
                             (if (g$memv$5052$7lS0C g$t$8425$7lS0C '(big))
                               (g$bless$7559$7lS0C ''big)
                               (g$syntax-violation$7708$7lS0C
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8421$7lS0C)))))
                        (g$syntax->datum$7711$7lS0C g$e$8424$7lS0C))))
                    g$ls/false$8423$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8422$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8422$7lS0C '(_ any)))))
         g$stx$8421$7lS0C))))
   (g$identifier-syntax-macro$7577$7lS0C
     g$identifier-syntax-macro$11077$7lS0C
     (case-lambda
       ((g$stx$8426$7lS0C)
        ((case-lambda
           ((g$t$8427$7lS0C)
            ((case-lambda
               ((g$ls/false$8428$7lS0C)
                (if g$ls/false$8428$7lS0C
                  (apply
                    (case-lambda
                      ((g$expr$8429$7lS0C)
                       (g$bless$7559$7lS0C
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8429$7lS0C))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8429$7lS0C)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8428$7lS0C)
                  ((case-lambda
                     ((g$t$8430$7lS0C)
                      ((case-lambda
                         ((g$ls/false$8431$7lS0C)
                          (if (if g$ls/false$8431$7lS0C
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8432$7lS0C
                                         g$expr1$8433$7lS0C
                                         g$id2$8434$7lS0C
                                         g$expr2$8435$7lS0C
                                         g$expr3$8436$7lS0C)
                                       (if (g$id?$7318$7lS0C g$id1$8432$7lS0C)
                                         (if (g$id?$7318$7lS0C g$id2$8434$7lS0C)
                                           (begin
                                             '#f
                                             (g$id?$7318$7lS0C
                                               g$expr2$8435$7lS0C))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8431$7lS0C))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8437$7lS0C
                                   g$expr1$8438$7lS0C
                                   g$id2$8439$7lS0C
                                   g$expr2$8440$7lS0C
                                   g$expr3$8441$7lS0C)
                                 (g$bless$7559$7lS0C
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8438$7lS0C))
                                         (list
                                           (list 'set! 'id g$expr2$8440$7lS0C)
                                           (list 'syntax g$expr3$8441$7lS0C))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8438$7lS0C
                                               '(e* ...))))))))))
                              g$ls/false$8431$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$8430$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$8430$7lS0C
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8427$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8427$7lS0C '(_ any)))))
         g$stx$8426$7lS0C))))
   (g$do-macro$7578$7lS0C
     g$do-macro$11078$7lS0C
     (case-lambda
       ((g$stx$8442$7lS0C)
        (letrec* ((g$bind$8443$7lS0C
                    (case-lambda
                      ((g$x$8455$7lS0C)
                       ((case-lambda
                          ((g$t$8456$7lS0C)
                           ((case-lambda
                              ((g$ls/false$8457$7lS0C)
                               (if g$ls/false$8457$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$x$8458$7lS0C g$init$8459$7lS0C)
                                      (list
                                        g$x$8458$7lS0C
                                        g$init$8459$7lS0C
                                        g$x$8458$7lS0C)))
                                   g$ls/false$8457$7lS0C)
                                 ((case-lambda
                                    ((g$t$8460$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$8461$7lS0C)
                                         (if g$ls/false$8461$7lS0C
                                           (apply
                                             (case-lambda
                                               ((g$x$8462$7lS0C
                                                  g$init$8463$7lS0C
                                                  g$step$8464$7lS0C)
                                                (list
                                                  g$x$8462$7lS0C
                                                  g$init$8463$7lS0C
                                                  g$step$8464$7lS0C)))
                                             g$ls/false$8461$7lS0C)
                                           ((case-lambda
                                              ((g$t$8465$7lS0C)
                                               ((case-lambda
                                                  ((g$ls/false$8466$7lS0C)
                                                   (if g$ls/false$8466$7lS0C
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7708$7lS0C
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8442$7lS0C)))
                                                       g$ls/false$8466$7lS0C)
                                                     (g$syntax-violation$7708$7lS0C
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8465$7lS0C))))
                                                (g$syntax-dispatch$7596$7lS0C
                                                  g$t$8465$7lS0C
                                                  '_))))
                                            g$t$8460$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$8460$7lS0C
                                        '(any any any)))))
                                  g$t$8456$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$8456$7lS0C
                              '(any any)))))
                        g$x$8455$7lS0C)))))
          ((case-lambda
             ((g$t$8444$7lS0C)
              ((case-lambda
                 ((g$ls/false$8445$7lS0C)
                  (if g$ls/false$8445$7lS0C
                    (apply
                      (case-lambda
                        ((g$binding*$8446$7lS0C
                           g$test$8447$7lS0C
                           g$expr*$8448$7lS0C
                           g$command*$8449$7lS0C)
                         ((case-lambda
                            ((g$t$8450$7lS0C)
                             ((case-lambda
                                ((g$ls/false$8451$7lS0C)
                                 (if g$ls/false$8451$7lS0C
                                   (apply
                                     (case-lambda
                                       ((g$x*$8452$7lS0C
                                          g$init*$8453$7lS0C
                                          g$step*$8454$7lS0C)
                                        (if (g$valid-bound-ids?$7323$7lS0C
                                              g$x*$8452$7lS0C)
                                          (g$bless$7559$7lS0C
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8452$7lS0C
                                                    (list
                                                      'if
                                                      g$test$8447$7lS0C
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8448$7lS0C))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8449$7lS0C
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8454$7lS0C))))))))
                                              (cons 'loop g$init*$8453$7lS0C)))
                                          (g$syntax-violation$7708$7lS0C
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8442$7lS0C))))
                                     g$ls/false$8451$7lS0C)
                                   (g$syntax-violation$7708$7lS0C
                                     '#f
                                     '"invalid syntax"
                                     g$t$8450$7lS0C))))
                              (g$syntax-dispatch$7596$7lS0C
                                g$t$8450$7lS0C
                                '#(each (any any any))))))
                          (g$map$5059$7lS0C
                            g$bind$8443$7lS0C
                            g$binding*$8446$7lS0C))))
                      g$ls/false$8445$7lS0C)
                    (g$syntax-violation$7708$7lS0C
                      '#f
                      '"invalid syntax"
                      g$t$8444$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C
                 g$t$8444$7lS0C
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8442$7lS0C)))))
   (g$let*-macro$7579$7lS0C
     g$let*-macro$11079$7lS0C
     (case-lambda
       ((g$stx$8467$7lS0C)
        ((case-lambda
           ((g$t$8468$7lS0C)
            ((case-lambda
               ((g$ls/false$8469$7lS0C)
                (if (if g$ls/false$8469$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8470$7lS0C
                               g$rhs*$8471$7lS0C
                               g$b$8472$7lS0C
                               g$b*$8473$7lS0C)
                             (g$for-all$5057$7lS0C
                               g$id?$7318$7lS0C
                               g$lhs*$8470$7lS0C)))
                          g$ls/false$8469$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8474$7lS0C
                         g$rhs*$8475$7lS0C
                         g$b$8476$7lS0C
                         g$b*$8477$7lS0C)
                       (g$bless$7559$7lS0C
                         ((letrec ((g$f$8478$7lS0C
                                     (case-lambda
                                       ((g$x*$8479$7lS0C)
                                        (if (null? g$x*$8479$7lS0C)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8476$7lS0C
                                                g$b*$8477$7lS0C)))
                                          (if (null? (cdr g$x*$8479$7lS0C))
                                            (cons
                                              'let
                                              (cons
                                                (list (car g$x*$8479$7lS0C))
                                                (cons
                                                  g$b$8476$7lS0C
                                                  g$b*$8477$7lS0C)))
                                            (list
                                              'let
                                              (list (car g$x*$8479$7lS0C))
                                              (g$f$8478$7lS0C
                                                (cdr g$x*$8479$7lS0C)))))))))
                            g$f$8478$7lS0C)
                          (g$map$5059$7lS0C
                            list
                            g$lhs*$8474$7lS0C
                            g$rhs*$8475$7lS0C)))))
                    g$ls/false$8469$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8468$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8468$7lS0C
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8467$7lS0C))))
   (g$or-macro$7580$7lS0C
     g$or-macro$11080$7lS0C
     (case-lambda
       ((g$stx$8480$7lS0C)
        ((case-lambda
           ((g$t$8481$7lS0C)
            ((case-lambda
               ((g$ls/false$8482$7lS0C)
                (if g$ls/false$8482$7lS0C
                  (apply (case-lambda (() '#f)) g$ls/false$8482$7lS0C)
                  ((case-lambda
                     ((g$t$8483$7lS0C)
                      ((case-lambda
                         ((g$ls/false$8484$7lS0C)
                          (if g$ls/false$8484$7lS0C
                            (apply
                              (case-lambda
                                ((g$e$8485$7lS0C g$e*$8486$7lS0C)
                                 (g$bless$7559$7lS0C
                                   ((letrec ((g$f$8487$7lS0C
                                               (case-lambda
                                                 ((g$e$8488$7lS0C
                                                    g$e*$8489$7lS0C)
                                                  (if (null? g$e*$8489$7lS0C)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8488$7lS0C)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8488$7lS0C))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8487$7lS0C
                                                          (car g$e*$8489$7lS0C)
                                                          (cdr g$e*$8489$7lS0C)))))))))
                                      g$f$8487$7lS0C)
                                    g$e$8485$7lS0C
                                    g$e*$8486$7lS0C))))
                              g$ls/false$8484$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$8483$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$8483$7lS0C
                         '(_ any . each-any)))))
                   g$t$8481$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8481$7lS0C '(_)))))
         g$stx$8480$7lS0C))))
   (g$and-macro$7581$7lS0C
     g$and-macro$11081$7lS0C
     (case-lambda
       ((g$stx$8490$7lS0C)
        ((case-lambda
           ((g$t$8491$7lS0C)
            ((case-lambda
               ((g$ls/false$8492$7lS0C)
                (if g$ls/false$8492$7lS0C
                  (apply (case-lambda (() '#t)) g$ls/false$8492$7lS0C)
                  ((case-lambda
                     ((g$t$8493$7lS0C)
                      ((case-lambda
                         ((g$ls/false$8494$7lS0C)
                          (if g$ls/false$8494$7lS0C
                            (apply
                              (case-lambda
                                ((g$e$8495$7lS0C g$e*$8496$7lS0C)
                                 (g$bless$7559$7lS0C
                                   ((letrec ((g$f$8497$7lS0C
                                               (case-lambda
                                                 ((g$e$8498$7lS0C
                                                    g$e*$8499$7lS0C)
                                                  (if (null? g$e*$8499$7lS0C)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8498$7lS0C)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8498$7lS0C
                                                        (cons
                                                          (g$f$8497$7lS0C
                                                            (car g$e*$8499$7lS0C)
                                                            (cdr g$e*$8499$7lS0C))
                                                          '(#f)))))))))
                                      g$f$8497$7lS0C)
                                    g$e$8495$7lS0C
                                    g$e*$8496$7lS0C))))
                              g$ls/false$8494$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$8493$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$8493$7lS0C
                         '(_ any . each-any)))))
                   g$t$8491$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8491$7lS0C '(_)))))
         g$stx$8490$7lS0C))))
   (g$cond-macro$7582$7lS0C
     g$cond-macro$11082$7lS0C
     (case-lambda
       ((g$stx$8500$7lS0C)
        ((case-lambda
           ((g$t$8501$7lS0C)
            ((case-lambda
               ((g$ls/false$8502$7lS0C)
                (if g$ls/false$8502$7lS0C
                  (apply
                    (case-lambda
                      ((g$cls$8503$7lS0C g$cls*$8504$7lS0C)
                       (g$bless$7559$7lS0C
                         ((letrec ((g$f$8505$7lS0C
                                     (case-lambda
                                       ((g$cls$8506$7lS0C g$cls*$8507$7lS0C)
                                        (if (null? g$cls*$8507$7lS0C)
                                          ((case-lambda
                                             ((g$t$8508$7lS0C)
                                              ((case-lambda
                                                 ((g$ls/false$8509$7lS0C)
                                                  (if g$ls/false$8509$7lS0C
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8510$7lS0C
                                                           g$e*$8511$7lS0C)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8510$7lS0C
                                                             g$e*$8511$7lS0C))))
                                                      g$ls/false$8509$7lS0C)
                                                    ((case-lambda
                                                       ((g$t$8512$7lS0C)
                                                        ((case-lambda
                                                           ((g$ls/false$8513$7lS0C)
                                                            (if g$ls/false$8513$7lS0C
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8514$7lS0C
                                                                     g$p$8515$7lS0C)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8514$7lS0C))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8515$7lS0C
                                                                         '(t))))))
                                                                g$ls/false$8513$7lS0C)
                                                              ((case-lambda
                                                                 ((g$t$8516$7lS0C)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8517$7lS0C)
                                                                      (if g$ls/false$8517$7lS0C
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8518$7lS0C)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8518$7lS0C
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8517$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$t$8519$7lS0C)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8520$7lS0C)
                                                                                (if g$ls/false$8520$7lS0C
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8521$7lS0C
                                                                                         g$e*$8522$7lS0C)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8521$7lS0C
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8522$7lS0C))))
                                                                                    g$ls/false$8520$7lS0C)
                                                                                  ((case-lambda
                                                                                     ((g$t$8523$7lS0C)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8524$7lS0C)
                                                                                          (if g$ls/false$8524$7lS0C
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7708$7lS0C
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8500$7lS0C)))
                                                                                              g$ls/false$8524$7lS0C)
                                                                                            (g$syntax-violation$7708$7lS0C
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8523$7lS0C))))
                                                                                       (g$syntax-dispatch$7596$7lS0C
                                                                                         g$t$8523$7lS0C
                                                                                         '_))))
                                                                                   g$t$8519$7lS0C))))
                                                                             (g$syntax-dispatch$7596$7lS0C
                                                                               g$t$8519$7lS0C
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8516$7lS0C))))
                                                                   (g$syntax-dispatch$7596$7lS0C
                                                                     g$t$8516$7lS0C
                                                                     '(any)))))
                                                               g$t$8512$7lS0C))))
                                                         (g$syntax-dispatch$7596$7lS0C
                                                           g$t$8512$7lS0C
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8508$7lS0C))))
                                               (g$syntax-dispatch$7596$7lS0C
                                                 g$t$8508$7lS0C
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8506$7lS0C)
                                          ((case-lambda
                                             ((g$t$8525$7lS0C)
                                              ((case-lambda
                                                 ((g$ls/false$8526$7lS0C)
                                                  (if g$ls/false$8526$7lS0C
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8527$7lS0C
                                                           g$e*$8528$7lS0C)
                                                         (g$syntax-violation$7708$7lS0C
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8500$7lS0C)))
                                                      g$ls/false$8526$7lS0C)
                                                    ((case-lambda
                                                       ((g$t$8529$7lS0C)
                                                        ((case-lambda
                                                           ((g$ls/false$8530$7lS0C)
                                                            (if g$ls/false$8530$7lS0C
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8531$7lS0C
                                                                     g$p$8532$7lS0C)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8531$7lS0C))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8532$7lS0C
                                                                         '(t))
                                                                       (g$f$8505$7lS0C
                                                                         (car g$cls*$8507$7lS0C)
                                                                         (cdr g$cls*$8507$7lS0C))))))
                                                                g$ls/false$8530$7lS0C)
                                                              ((case-lambda
                                                                 ((g$t$8533$7lS0C)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8534$7lS0C)
                                                                      (if g$ls/false$8534$7lS0C
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8535$7lS0C)
                                                                             (list
                                                                               'or
                                                                               g$e$8535$7lS0C
                                                                               (g$f$8505$7lS0C
                                                                                 (car g$cls*$8507$7lS0C)
                                                                                 (cdr g$cls*$8507$7lS0C)))))
                                                                          g$ls/false$8534$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$t$8536$7lS0C)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8537$7lS0C)
                                                                                (if g$ls/false$8537$7lS0C
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8538$7lS0C
                                                                                         g$e*$8539$7lS0C)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8538$7lS0C
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8539$7lS0C)
                                                                                         (g$f$8505$7lS0C
                                                                                           (car g$cls*$8507$7lS0C)
                                                                                           (cdr g$cls*$8507$7lS0C)))))
                                                                                    g$ls/false$8537$7lS0C)
                                                                                  ((case-lambda
                                                                                     ((g$t$8540$7lS0C)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8541$7lS0C)
                                                                                          (if g$ls/false$8541$7lS0C
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7708$7lS0C
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8500$7lS0C)))
                                                                                              g$ls/false$8541$7lS0C)
                                                                                            (g$syntax-violation$7708$7lS0C
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8540$7lS0C))))
                                                                                       (g$syntax-dispatch$7596$7lS0C
                                                                                         g$t$8540$7lS0C
                                                                                         '_))))
                                                                                   g$t$8536$7lS0C))))
                                                                             (g$syntax-dispatch$7596$7lS0C
                                                                               g$t$8536$7lS0C
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8533$7lS0C))))
                                                                   (g$syntax-dispatch$7596$7lS0C
                                                                     g$t$8533$7lS0C
                                                                     '(any)))))
                                                               g$t$8529$7lS0C))))
                                                         (g$syntax-dispatch$7596$7lS0C
                                                           g$t$8529$7lS0C
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8525$7lS0C))))
                                               (g$syntax-dispatch$7596$7lS0C
                                                 g$t$8525$7lS0C
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8506$7lS0C))))))
                            g$f$8505$7lS0C)
                          g$cls$8503$7lS0C
                          g$cls*$8504$7lS0C))))
                    g$ls/false$8502$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8501$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8501$7lS0C
               '(_ any . each-any)))))
         g$stx$8500$7lS0C))))
   (g$do-include$7583$7lS0C
     g$do-include$11083$7lS0C
     (case-lambda
       ((g$stx$8542$7lS0C g$id$8543$7lS0C g$filename$8544$7lS0C)
        ((case-lambda
           ((g$filename$8545$7lS0C)
            (begin
              (if (not (if (string? g$filename$8545$7lS0C)
                         (begin '#f (g$id?$7318$7lS0C g$id$8543$7lS0C))
                         '#f))
                (g$syntax-violation$7708$7lS0C
                  '#f
                  '"invalid syntax"
                  g$stx$8542$7lS0C)
                (void))
              (cons
                (g$bless$7559$7lS0C 'begin)
                (g$with-input-from-file$6313$7lS0C
                  g$filename$8545$7lS0C
                  (case-lambda
                    (()
                     ((letrec ((g$f$8546$7lS0C
                                 (case-lambda
                                   ((g$ls$8547$7lS0C)
                                    ((case-lambda
                                       ((g$x$8548$7lS0C)
                                        (if (eof-object? g$x$8548$7lS0C)
                                          (reverse g$ls$8547$7lS0C)
                                          (g$f$8546$7lS0C
                                            (cons
                                              (g$datum->stx$7301$7lS0C
                                                g$id$8543$7lS0C
                                                g$x$8548$7lS0C)
                                              g$ls$8547$7lS0C)))))
                                     (read-annotated))))))
                        g$f$8546$7lS0C)
                      '()))))))))
         (g$stx->datum$7329$7lS0C g$filename$8544$7lS0C)))))
   (g$include-macro$7584$7lS0C
     g$include-macro$11084$7lS0C
     (case-lambda
       ((g$e$8549$7lS0C)
        ((case-lambda
           ((g$t$8550$7lS0C)
            ((case-lambda
               ((g$ls/false$8551$7lS0C)
                (if g$ls/false$8551$7lS0C
                  (apply
                    (case-lambda
                      ((g$id$8552$7lS0C g$filename$8553$7lS0C)
                       (g$do-include$7583$7lS0C
                         g$e$8549$7lS0C
                         g$id$8552$7lS0C
                         g$filename$8553$7lS0C)))
                    g$ls/false$8551$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8550$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8550$7lS0C '(any any)))))
         g$e$8549$7lS0C))))
   (g$include-into-macro$7585$7lS0C
     g$include-into-macro$11085$7lS0C
     (case-lambda
       ((g$e$8554$7lS0C)
        ((case-lambda
           ((g$t$8555$7lS0C)
            ((case-lambda
               ((g$ls/false$8556$7lS0C)
                (if g$ls/false$8556$7lS0C
                  (apply
                    (case-lambda
                      ((g$id$8557$7lS0C g$filename$8558$7lS0C)
                       (g$do-include$7583$7lS0C
                         g$e$8554$7lS0C
                         g$id$8557$7lS0C
                         g$filename$8558$7lS0C)))
                    g$ls/false$8556$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8555$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$8555$7lS0C '(_ any any)))))
         g$e$8554$7lS0C))))
   (g$syntax-rules-macro$7586$7lS0C
     g$syntax-rules-macro$11086$7lS0C
     (case-lambda
       ((g$e$8559$7lS0C)
        ((case-lambda
           ((g$t$8560$7lS0C)
            ((case-lambda
               ((g$ls/false$8561$7lS0C)
                (if g$ls/false$8561$7lS0C
                  (apply
                    (case-lambda
                      ((g$lits$8562$7lS0C g$pat*$8563$7lS0C g$tmp*$8564$7lS0C)
                       (begin
                         (g$verify-literals$7599$7lS0C
                           g$lits$8562$7lS0C
                           g$e$8559$7lS0C)
                         (g$bless$7559$7lS0C
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8562$7lS0C
                                   (g$map$5059$7lS0C
                                     (case-lambda
                                       ((g$pat$8565$7lS0C g$tmp$8566$7lS0C)
                                        ((case-lambda
                                           ((g$t$8567$7lS0C)
                                            ((case-lambda
                                               ((g$ls/false$8568$7lS0C)
                                                (if g$ls/false$8568$7lS0C
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$8569$7lS0C)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$8569$7lS0C)
                                                         (list
                                                           'syntax
                                                           g$tmp$8566$7lS0C))))
                                                    g$ls/false$8568$7lS0C)
                                                  ((case-lambda
                                                     ((g$t$8570$7lS0C)
                                                      ((case-lambda
                                                         ((g$ls/false$8571$7lS0C)
                                                          (if g$ls/false$8571$7lS0C
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$7708$7lS0C
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$8559$7lS0C
                                                                   g$pat$8565$7lS0C)))
                                                              g$ls/false$8571$7lS0C)
                                                            (g$syntax-violation$7708$7lS0C
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$8570$7lS0C))))
                                                       (g$syntax-dispatch$7596$7lS0C
                                                         g$t$8570$7lS0C
                                                         '_))))
                                                   g$t$8567$7lS0C))))
                                             (g$syntax-dispatch$7596$7lS0C
                                               g$t$8567$7lS0C
                                               '(_ . any)))))
                                         g$pat$8565$7lS0C)))
                                     g$pat*$8563$7lS0C
                                     g$tmp*$8564$7lS0C)))))))))
                    g$ls/false$8561$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$8560$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$8560$7lS0C
               '(_ each-any . #(each (any any)))))))
         g$e$8559$7lS0C))))
   (g$quasiquote-macro$7587$7lS0C
     g$quasiquote-macro$11087$7lS0C
     ((case-lambda
        (()
         (letrec* ((g$datum$8572$7lS0C
                     (case-lambda
                       ((g$x$8703$7lS0C)
                        (list
                          (g$scheme-stx$7539$7lS0C 'quote)
                          (g$mkstx$7306$7lS0C g$x$8703$7lS0C '() '() '())))))
                   (g$quasicons*$8588$7lS0C
                     (case-lambda
                       ((g$x$8699$7lS0C g$y$8700$7lS0C)
                        ((letrec ((g$f$8701$7lS0C
                                    (case-lambda
                                      ((g$x$8702$7lS0C)
                                       (if (null? g$x$8702$7lS0C)
                                         g$y$8700$7lS0C
                                         (g$quasicons$8589$7lS0C
                                           (car g$x$8702$7lS0C)
                                           (g$f$8701$7lS0C
                                             (cdr g$x$8702$7lS0C))))))))
                           g$f$8701$7lS0C)
                         g$x$8699$7lS0C))))
                   (g$quasicons$8589$7lS0C
                     (case-lambda
                       ((g$x$8680$7lS0C g$y$8681$7lS0C)
                        ((case-lambda
                           ((g$t$8682$7lS0C)
                            ((case-lambda
                               ((g$ls/false$8683$7lS0C)
                                (if g$ls/false$8683$7lS0C
                                  (apply
                                    (case-lambda
                                      ((g$dy$8684$7lS0C)
                                       ((case-lambda
                                          ((g$t$8685$7lS0C)
                                           ((case-lambda
                                              ((g$ls/false$8686$7lS0C)
                                               (if g$ls/false$8686$7lS0C
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8687$7lS0C)
                                                      (list
                                                        (g$scheme-stx$7539$7lS0C
                                                          'quote)
                                                        (cons
                                                          g$dx$8687$7lS0C
                                                          g$dy$8684$7lS0C))))
                                                   g$ls/false$8686$7lS0C)
                                                 ((case-lambda
                                                    ((g$t$8688$7lS0C)
                                                     ((case-lambda
                                                        ((g$ls/false$8689$7lS0C)
                                                         (if g$ls/false$8689$7lS0C
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8690$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8691$7lS0C)
                                                                        (if g$ls/false$8691$7lS0C
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7539$7lS0C
                                                                                   'list)
                                                                                 g$x$8680$7lS0C)))
                                                                            g$ls/false$8691$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$t$8692$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8693$7lS0C)
                                                                                  (if g$ls/false$8693$7lS0C
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7539$7lS0C
                                                                                             'cons)
                                                                                           g$x$8680$7lS0C
                                                                                           g$y$8681$7lS0C)))
                                                                                      g$ls/false$8693$7lS0C)
                                                                                    (g$syntax-violation$7708$7lS0C
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8692$7lS0C))))
                                                                               (g$syntax-dispatch$7596$7lS0C
                                                                                 g$t$8692$7lS0C
                                                                                 '_))))
                                                                           g$t$8690$7lS0C))))
                                                                     (g$syntax-dispatch$7596$7lS0C
                                                                       g$t$8690$7lS0C
                                                                       '()))))
                                                                 g$dy$8684$7lS0C)))
                                                             g$ls/false$8689$7lS0C)
                                                           (g$syntax-violation$7708$7lS0C
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8688$7lS0C))))
                                                      (g$syntax-dispatch$7596$7lS0C
                                                        g$t$8688$7lS0C
                                                        '_))))
                                                  g$t$8685$7lS0C))))
                                            (g$syntax-dispatch$7596$7lS0C
                                              g$t$8685$7lS0C
                                              '(#(scheme-id quote) any)))))
                                        g$x$8680$7lS0C)))
                                    g$ls/false$8683$7lS0C)
                                  ((case-lambda
                                     ((g$t$8694$7lS0C)
                                      ((case-lambda
                                         ((g$ls/false$8695$7lS0C)
                                          (if g$ls/false$8695$7lS0C
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8696$7lS0C)
                                                 (g$cons*$5061$7lS0C
                                                   (g$scheme-stx$7539$7lS0C
                                                     'list)
                                                   g$x$8680$7lS0C
                                                   g$stuff$8696$7lS0C)))
                                              g$ls/false$8695$7lS0C)
                                            ((case-lambda
                                               ((g$t$8697$7lS0C)
                                                ((case-lambda
                                                   ((g$ls/false$8698$7lS0C)
                                                    (if g$ls/false$8698$7lS0C
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7539$7lS0C
                                                               'cons)
                                                             g$x$8680$7lS0C
                                                             g$y$8681$7lS0C)))
                                                        g$ls/false$8698$7lS0C)
                                                      (g$syntax-violation$7708$7lS0C
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8697$7lS0C))))
                                                 (g$syntax-dispatch$7596$7lS0C
                                                   g$t$8697$7lS0C
                                                   '_))))
                                             g$t$8694$7lS0C))))
                                       (g$syntax-dispatch$7596$7lS0C
                                         g$t$8694$7lS0C
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8682$7lS0C))))
                             (g$syntax-dispatch$7596$7lS0C
                               g$t$8682$7lS0C
                               '(#(scheme-id quote) any)))))
                         g$y$8681$7lS0C))))
                   (g$quasiappend$8590$7lS0C
                     (case-lambda
                       ((g$x$8667$7lS0C g$y$8668$7lS0C)
                        ((case-lambda
                           ((g$ls$8669$7lS0C)
                            (if (null? g$ls$8669$7lS0C)
                              (list (g$scheme-stx$7539$7lS0C 'quote) '())
                              (if (null? (cdr g$ls$8669$7lS0C))
                                (car g$ls$8669$7lS0C)
                                (g$cons*$5061$7lS0C
                                  (g$scheme-stx$7539$7lS0C 'append)
                                  g$ls$8669$7lS0C)))))
                         ((letrec ((g$f$8670$7lS0C
                                     (case-lambda
                                       ((g$x$8671$7lS0C)
                                        (if (null? g$x$8671$7lS0C)
                                          ((case-lambda
                                             ((g$t$8672$7lS0C)
                                              ((case-lambda
                                                 ((g$ls/false$8673$7lS0C)
                                                  (if g$ls/false$8673$7lS0C
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8673$7lS0C)
                                                    ((case-lambda
                                                       ((g$t$8674$7lS0C)
                                                        ((case-lambda
                                                           ((g$ls/false$8675$7lS0C)
                                                            (if g$ls/false$8675$7lS0C
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8668$7lS0C)))
                                                                g$ls/false$8675$7lS0C)
                                                              (g$syntax-violation$7708$7lS0C
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8674$7lS0C))))
                                                         (g$syntax-dispatch$7596$7lS0C
                                                           g$t$8674$7lS0C
                                                           '_))))
                                                     g$t$8672$7lS0C))))
                                               (g$syntax-dispatch$7596$7lS0C
                                                 g$t$8672$7lS0C
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8668$7lS0C)
                                          ((case-lambda
                                             ((g$t$8676$7lS0C)
                                              ((case-lambda
                                                 ((g$ls/false$8677$7lS0C)
                                                  (if g$ls/false$8677$7lS0C
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8670$7lS0C
                                                           (cdr g$x$8671$7lS0C))))
                                                      g$ls/false$8677$7lS0C)
                                                    ((case-lambda
                                                       ((g$t$8678$7lS0C)
                                                        ((case-lambda
                                                           ((g$ls/false$8679$7lS0C)
                                                            (if g$ls/false$8679$7lS0C
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8671$7lS0C)
                                                                     (g$f$8670$7lS0C
                                                                       (cdr g$x$8671$7lS0C)))))
                                                                g$ls/false$8679$7lS0C)
                                                              (g$syntax-violation$7708$7lS0C
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8678$7lS0C))))
                                                         (g$syntax-dispatch$7596$7lS0C
                                                           g$t$8678$7lS0C
                                                           '_))))
                                                     g$t$8676$7lS0C))))
                                               (g$syntax-dispatch$7596$7lS0C
                                                 g$t$8676$7lS0C
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8671$7lS0C)))))))
                            g$f$8670$7lS0C)
                          g$x$8667$7lS0C)))))
                   (g$quasivector$8591$7lS0C
                     (case-lambda
                       ((g$x$8642$7lS0C)
                        ((case-lambda
                           ((g$pat-x$8643$7lS0C)
                            ((case-lambda
                               ((g$t$8644$7lS0C)
                                ((case-lambda
                                   ((g$ls/false$8645$7lS0C)
                                    (if g$ls/false$8645$7lS0C
                                      (apply
                                        (case-lambda
                                          ((g$x*$8646$7lS0C)
                                           (list
                                             (g$scheme-stx$7539$7lS0C 'quote)
                                             (list->vector g$x*$8646$7lS0C))))
                                        g$ls/false$8645$7lS0C)
                                      ((case-lambda
                                         ((g$t$8647$7lS0C)
                                          ((case-lambda
                                             ((g$ls/false$8648$7lS0C)
                                              (if g$ls/false$8648$7lS0C
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8649$7lS0C
                                                                 (case-lambda
                                                                   ((g$x$8650$7lS0C
                                                                      g$k$8651$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$t$8652$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8653$7lS0C)
                                                                            (if g$ls/false$8653$7lS0C
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8654$7lS0C)
                                                                                   (g$k$8651$7lS0C
                                                                                     (g$map$5059$7lS0C
                                                                                       (case-lambda
                                                                                         ((g$x$8655$7lS0C)
                                                                                          (list
                                                                                            (g$scheme-stx$7539$7lS0C
                                                                                              'quote)
                                                                                            g$x$8655$7lS0C)))
                                                                                       g$x*$8654$7lS0C))))
                                                                                g$ls/false$8653$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$t$8656$7lS0C)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8657$7lS0C)
                                                                                      (if g$ls/false$8657$7lS0C
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8658$7lS0C)
                                                                                             (g$k$8651$7lS0C
                                                                                               g$x*$8658$7lS0C)))
                                                                                          g$ls/false$8657$7lS0C)
                                                                                        ((case-lambda
                                                                                           ((g$t$8659$7lS0C)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8660$7lS0C)
                                                                                                (if g$ls/false$8660$7lS0C
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8661$7lS0C
                                                                                                         g$y$8662$7lS0C)
                                                                                                       (g$f$8649$7lS0C
                                                                                                         g$y$8662$7lS0C
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8663$7lS0C)
                                                                                                            (g$k$8651$7lS0C
                                                                                                              (cons
                                                                                                                g$x$8661$7lS0C
                                                                                                                g$ls$8663$7lS0C)))))))
                                                                                                    g$ls/false$8660$7lS0C)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8664$7lS0C)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8665$7lS0C)
                                                                                                          (if g$ls/false$8665$7lS0C
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7539$7lS0C
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8643$7lS0C)))
                                                                                                              g$ls/false$8665$7lS0C)
                                                                                                            (g$syntax-violation$7708$7lS0C
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8664$7lS0C))))
                                                                                                       (g$syntax-dispatch$7596$7lS0C
                                                                                                         g$t$8664$7lS0C
                                                                                                         '_))))
                                                                                                   g$t$8659$7lS0C))))
                                                                                             (g$syntax-dispatch$7596$7lS0C
                                                                                               g$t$8659$7lS0C
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8656$7lS0C))))
                                                                                   (g$syntax-dispatch$7596$7lS0C
                                                                                     g$t$8656$7lS0C
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8652$7lS0C))))
                                                                         (g$syntax-dispatch$7596$7lS0C
                                                                           g$t$8652$7lS0C
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8650$7lS0C)))))
                                                        g$f$8649$7lS0C)
                                                      g$x$8642$7lS0C
                                                      (case-lambda
                                                        ((g$ls$8666$7lS0C)
                                                         (g$cons*$5061$7lS0C
                                                           (g$scheme-stx$7539$7lS0C
                                                             'vector)
                                                           g$ls$8666$7lS0C))))))
                                                  g$ls/false$8648$7lS0C)
                                                (g$syntax-violation$7708$7lS0C
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8647$7lS0C))))
                                           (g$syntax-dispatch$7596$7lS0C
                                             g$t$8647$7lS0C
                                             '_))))
                                       g$t$8644$7lS0C))))
                                 (g$syntax-dispatch$7596$7lS0C
                                   g$t$8644$7lS0C
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8643$7lS0C)))
                         g$x$8642$7lS0C))))
                   (g$vquasi$8592$7lS0C
                     (case-lambda
                       ((g$p$8625$7lS0C g$lev$8626$7lS0C)
                        ((case-lambda
                           ((g$t$8627$7lS0C)
                            ((case-lambda
                               ((g$ls/false$8628$7lS0C)
                                (if g$ls/false$8628$7lS0C
                                  (apply
                                    (case-lambda
                                      ((g$p$8629$7lS0C g$q$8630$7lS0C)
                                       ((case-lambda
                                          ((g$t$8631$7lS0C)
                                           ((case-lambda
                                              ((g$ls/false$8632$7lS0C)
                                               (if g$ls/false$8632$7lS0C
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8633$7lS0C)
                                                      (if (= g$lev$8626$7lS0C
                                                             '0)
                                                        (g$quasicons*$8588$7lS0C
                                                          g$p$8633$7lS0C
                                                          (g$vquasi$8592$7lS0C
                                                            g$q$8630$7lS0C
                                                            g$lev$8626$7lS0C))
                                                        (g$quasicons$8589$7lS0C
                                                          (g$quasicons$8589$7lS0C
                                                            (g$datum$8572$7lS0C
                                                              'unquote)
                                                            (g$quasi$8593$7lS0C
                                                              g$p$8633$7lS0C
                                                              (- g$lev$8626$7lS0C
                                                                 '1)))
                                                          (g$vquasi$8592$7lS0C
                                                            g$q$8630$7lS0C
                                                            g$lev$8626$7lS0C)))))
                                                   g$ls/false$8632$7lS0C)
                                                 ((case-lambda
                                                    ((g$t$8634$7lS0C)
                                                     ((case-lambda
                                                        ((g$ls/false$8635$7lS0C)
                                                         (if g$ls/false$8635$7lS0C
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8636$7lS0C)
                                                                (if (= g$lev$8626$7lS0C
                                                                       '0)
                                                                  (g$quasiappend$8590$7lS0C
                                                                    g$p$8636$7lS0C
                                                                    (g$vquasi$8592$7lS0C
                                                                      g$q$8630$7lS0C
                                                                      g$lev$8626$7lS0C))
                                                                  (g$quasicons$8589$7lS0C
                                                                    (g$quasicons$8589$7lS0C
                                                                      (g$datum$8572$7lS0C
                                                                        'unquote-splicing)
                                                                      (g$quasi$8593$7lS0C
                                                                        g$p$8636$7lS0C
                                                                        (- g$lev$8626$7lS0C
                                                                           '1)))
                                                                    (g$vquasi$8592$7lS0C
                                                                      g$q$8630$7lS0C
                                                                      g$lev$8626$7lS0C)))))
                                                             g$ls/false$8635$7lS0C)
                                                           ((case-lambda
                                                              ((g$t$8637$7lS0C)
                                                               ((case-lambda
                                                                  ((g$ls/false$8638$7lS0C)
                                                                   (if g$ls/false$8638$7lS0C
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8639$7lS0C)
                                                                          (g$quasicons$8589$7lS0C
                                                                            (g$quasi$8593$7lS0C
                                                                              g$p$8639$7lS0C
                                                                              g$lev$8626$7lS0C)
                                                                            (g$vquasi$8592$7lS0C
                                                                              g$q$8630$7lS0C
                                                                              g$lev$8626$7lS0C))))
                                                                       g$ls/false$8638$7lS0C)
                                                                     (g$syntax-violation$7708$7lS0C
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8637$7lS0C))))
                                                                (g$syntax-dispatch$7596$7lS0C
                                                                  g$t$8637$7lS0C
                                                                  'any))))
                                                            g$t$8634$7lS0C))))
                                                      (g$syntax-dispatch$7596$7lS0C
                                                        g$t$8634$7lS0C
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8631$7lS0C))))
                                            (g$syntax-dispatch$7596$7lS0C
                                              g$t$8631$7lS0C
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8629$7lS0C)))
                                    g$ls/false$8628$7lS0C)
                                  ((case-lambda
                                     ((g$t$8640$7lS0C)
                                      ((case-lambda
                                         ((g$ls/false$8641$7lS0C)
                                          (if g$ls/false$8641$7lS0C
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7539$7lS0C
                                                     'quote)
                                                   '())))
                                              g$ls/false$8641$7lS0C)
                                            (g$syntax-violation$7708$7lS0C
                                              '#f
                                              '"invalid syntax"
                                              g$t$8640$7lS0C))))
                                       (g$syntax-dispatch$7596$7lS0C
                                         g$t$8640$7lS0C
                                         '()))))
                                   g$t$8627$7lS0C))))
                             (g$syntax-dispatch$7596$7lS0C
                               g$t$8627$7lS0C
                               '(any . any)))))
                         g$p$8625$7lS0C))))
                   (g$quasi$8593$7lS0C
                     (case-lambda
                       ((g$p$8598$7lS0C g$lev$8599$7lS0C)
                        ((case-lambda
                           ((g$t$8600$7lS0C)
                            ((case-lambda
                               ((g$ls/false$8601$7lS0C)
                                (if g$ls/false$8601$7lS0C
                                  (apply
                                    (case-lambda
                                      ((g$p$8602$7lS0C)
                                       (if (= g$lev$8599$7lS0C '0)
                                         g$p$8602$7lS0C
                                         (g$quasicons$8589$7lS0C
                                           (g$datum$8572$7lS0C 'unquote)
                                           (g$quasi$8593$7lS0C
                                             (list g$p$8602$7lS0C)
                                             (- g$lev$8599$7lS0C '1))))))
                                    g$ls/false$8601$7lS0C)
                                  ((case-lambda
                                     ((g$t$8603$7lS0C)
                                      ((case-lambda
                                         ((g$ls/false$8604$7lS0C)
                                          (if g$ls/false$8604$7lS0C
                                            (apply
                                              (case-lambda
                                                ((g$p$8605$7lS0C g$q$8606$7lS0C)
                                                 (if (= g$lev$8599$7lS0C '0)
                                                   (g$quasicons*$8588$7lS0C
                                                     g$p$8605$7lS0C
                                                     (g$quasi$8593$7lS0C
                                                       g$q$8606$7lS0C
                                                       g$lev$8599$7lS0C))
                                                   (g$quasicons$8589$7lS0C
                                                     (g$quasicons$8589$7lS0C
                                                       (g$datum$8572$7lS0C
                                                         'unquote)
                                                       (g$quasi$8593$7lS0C
                                                         g$p$8605$7lS0C
                                                         (- g$lev$8599$7lS0C
                                                            '1)))
                                                     (g$quasi$8593$7lS0C
                                                       g$q$8606$7lS0C
                                                       g$lev$8599$7lS0C)))))
                                              g$ls/false$8604$7lS0C)
                                            ((case-lambda
                                               ((g$t$8607$7lS0C)
                                                ((case-lambda
                                                   ((g$ls/false$8608$7lS0C)
                                                    (if g$ls/false$8608$7lS0C
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8609$7lS0C
                                                             g$q$8610$7lS0C)
                                                           (if (= g$lev$8599$7lS0C
                                                                  '0)
                                                             (g$quasiappend$8590$7lS0C
                                                               g$p$8609$7lS0C
                                                               (g$quasi$8593$7lS0C
                                                                 g$q$8610$7lS0C
                                                                 g$lev$8599$7lS0C))
                                                             (g$quasicons$8589$7lS0C
                                                               (g$quasicons$8589$7lS0C
                                                                 (g$datum$8572$7lS0C
                                                                   'unquote-splicing)
                                                                 (g$quasi$8593$7lS0C
                                                                   g$p$8609$7lS0C
                                                                   (- g$lev$8599$7lS0C
                                                                      '1)))
                                                               (g$quasi$8593$7lS0C
                                                                 g$q$8610$7lS0C
                                                                 g$lev$8599$7lS0C)))))
                                                        g$ls/false$8608$7lS0C)
                                                      ((case-lambda
                                                         ((g$t$8611$7lS0C)
                                                          ((case-lambda
                                                             ((g$ls/false$8612$7lS0C)
                                                              (if g$ls/false$8612$7lS0C
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8613$7lS0C)
                                                                     (g$quasicons$8589$7lS0C
                                                                       (g$datum$8572$7lS0C
                                                                         'quasiquote)
                                                                       (g$quasi$8593$7lS0C
                                                                         (list
                                                                           g$p$8613$7lS0C)
                                                                         (+ g$lev$8599$7lS0C
                                                                            '1)))))
                                                                  g$ls/false$8612$7lS0C)
                                                                ((case-lambda
                                                                   ((g$t$8614$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8615$7lS0C)
                                                                        (if g$ls/false$8615$7lS0C
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8616$7lS0C
                                                                                 g$q$8617$7lS0C)
                                                                               (g$quasicons$8589$7lS0C
                                                                                 (g$quasi$8593$7lS0C
                                                                                   g$p$8616$7lS0C
                                                                                   g$lev$8599$7lS0C)
                                                                                 (g$quasi$8593$7lS0C
                                                                                   g$q$8617$7lS0C
                                                                                   g$lev$8599$7lS0C))))
                                                                            g$ls/false$8615$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$t$8618$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8619$7lS0C)
                                                                                  (if (if g$ls/false$8619$7lS0C
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8620$7lS0C)
                                                                                               (not (g$stx?$7290$7lS0C
                                                                                                      g$x$8620$7lS0C))))
                                                                                            g$ls/false$8619$7lS0C))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8621$7lS0C)
                                                                                         (g$quasivector$8591$7lS0C
                                                                                           (g$vquasi$8592$7lS0C
                                                                                             g$x$8621$7lS0C
                                                                                             g$lev$8599$7lS0C))))
                                                                                      g$ls/false$8619$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$t$8622$7lS0C)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8623$7lS0C)
                                                                                            (if g$ls/false$8623$7lS0C
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8624$7lS0C)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7539$7lS0C
                                                                                                       'quote)
                                                                                                     g$p$8624$7lS0C)))
                                                                                                g$ls/false$8623$7lS0C)
                                                                                              (g$syntax-violation$7708$7lS0C
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8622$7lS0C))))
                                                                                         (g$syntax-dispatch$7596$7lS0C
                                                                                           g$t$8622$7lS0C
                                                                                           'any))))
                                                                                     g$t$8618$7lS0C))))
                                                                               (g$syntax-dispatch$7596$7lS0C
                                                                                 g$t$8618$7lS0C
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8614$7lS0C))))
                                                                     (g$syntax-dispatch$7596$7lS0C
                                                                       g$t$8614$7lS0C
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8611$7lS0C))))
                                                           (g$syntax-dispatch$7596$7lS0C
                                                             g$t$8611$7lS0C
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8607$7lS0C))))
                                                 (g$syntax-dispatch$7596$7lS0C
                                                   g$t$8607$7lS0C
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8603$7lS0C))))
                                       (g$syntax-dispatch$7596$7lS0C
                                         g$t$8603$7lS0C
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8600$7lS0C))))
                             (g$syntax-dispatch$7596$7lS0C
                               g$t$8600$7lS0C
                               '(#(scheme-id unquote) any)))))
                         g$p$8598$7lS0C)))))
           (case-lambda
             ((g$x$8594$7lS0C)
              ((case-lambda
                 ((g$t$8595$7lS0C)
                  ((case-lambda
                     ((g$ls/false$8596$7lS0C)
                      (if g$ls/false$8596$7lS0C
                        (apply
                          (case-lambda
                            ((g$e$8597$7lS0C)
                             (g$quasi$8593$7lS0C g$e$8597$7lS0C '0)))
                          g$ls/false$8596$7lS0C)
                        (g$syntax-violation$7708$7lS0C
                          '#f
                          '"invalid syntax"
                          g$t$8595$7lS0C))))
                   (g$syntax-dispatch$7596$7lS0C g$t$8595$7lS0C '(_ any)))))
               g$x$8594$7lS0C))))))))
   (g$quasisyntax-macro$7588$7lS0C
     g$quasisyntax-macro$11088$7lS0C
     ((case-lambda
        (()
         (letrec* ((g$quasi$8704$7lS0C
                     (case-lambda
                       ((g$p$8718$7lS0C g$lev$8719$7lS0C)
                        ((case-lambda
                           ((g$t$8720$7lS0C)
                            ((case-lambda
                               ((g$ls/false$8721$7lS0C)
                                (if g$ls/false$8721$7lS0C
                                  (apply
                                    (case-lambda
                                      ((g$p$8722$7lS0C)
                                       (if (= g$lev$8719$7lS0C '0)
                                         ((case-lambda
                                            ((g$g$8723$7lS0C)
                                             (values
                                               (list g$g$8723$7lS0C)
                                               (list g$p$8722$7lS0C)
                                               g$g$8723$7lS0C)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8704$7lS0C
                                                g$p$8722$7lS0C
                                                (- g$lev$8719$7lS0C '1))))
                                           (case-lambda
                                             ((g$lhs*$8727$7lS0C
                                                g$rhs*$8728$7lS0C
                                                g$p$8729$7lS0C)
                                              ((case-lambda
                                                 ((g$p$8730$7lS0C
                                                    g$rhs*$8731$7lS0C
                                                    g$lhs*$8732$7lS0C)
                                                  (values
                                                    g$lhs*$8732$7lS0C
                                                    g$rhs*$8731$7lS0C
                                                    (list
                                                      'unsyntax
                                                      g$p$8730$7lS0C))))
                                               g$p$8729$7lS0C
                                               g$rhs*$8728$7lS0C
                                               g$lhs*$8727$7lS0C)))))))
                                    g$ls/false$8721$7lS0C)
                                  ((case-lambda
                                     ((g$t$8733$7lS0C)
                                      ((case-lambda
                                         ((g$ls/false$8734$7lS0C)
                                          (if (if g$ls/false$8734$7lS0C
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8719$7lS0C '0)))
                                                    g$ls/false$8734$7lS0C))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7708$7lS0C
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8718$7lS0C)))
                                              g$ls/false$8734$7lS0C)
                                            ((case-lambda
                                               ((g$t$8735$7lS0C)
                                                ((case-lambda
                                                   ((g$ls/false$8736$7lS0C)
                                                    (if g$ls/false$8736$7lS0C
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$8737$7lS0C
                                                             g$q$8738$7lS0C)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8704$7lS0C
                                                                  g$q$8738$7lS0C
                                                                  g$lev$8719$7lS0C)))
                                                             (case-lambda
                                                               ((g$lhs*$8742$7lS0C
                                                                  g$rhs*$8743$7lS0C
                                                                  g$q$8744$7lS0C)
                                                                ((case-lambda
                                                                   ((g$q$8745$7lS0C
                                                                      g$rhs*$8746$7lS0C
                                                                      g$lhs*$8747$7lS0C)
                                                                    (if (= g$lev$8719$7lS0C
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$8748$7lS0C)
                                                                          (values
                                                                            (append
                                                                              g$g*$8748$7lS0C
                                                                              g$lhs*$8747$7lS0C)
                                                                            (append
                                                                              g$p*$8737$7lS0C
                                                                              g$rhs*$8746$7lS0C)
                                                                            (append
                                                                              g$g*$8748$7lS0C
                                                                              g$q$8745$7lS0C))))
                                                                       (g$map$5059$7lS0C
                                                                         (case-lambda
                                                                           ((g$x$8749$7lS0C)
                                                                            (gensym)))
                                                                         g$p*$8737$7lS0C))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8704$7lS0C
                                                                             g$p*$8737$7lS0C
                                                                             (- g$lev$8719$7lS0C
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8753$7lS0C
                                                                             g$rhs2*$8754$7lS0C
                                                                             g$p*$8755$7lS0C)
                                                                           ((case-lambda
                                                                              ((g$p*$8756$7lS0C
                                                                                 g$rhs2*$8757$7lS0C
                                                                                 g$lhs2*$8758$7lS0C)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8758$7lS0C
                                                                                   g$lhs*$8747$7lS0C)
                                                                                 (append
                                                                                   g$rhs2*$8757$7lS0C
                                                                                   g$rhs*$8746$7lS0C)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$8756$7lS0C)
                                                                                   g$q$8745$7lS0C))))
                                                                            g$p*$8755$7lS0C
                                                                            g$rhs2*$8754$7lS0C
                                                                            g$lhs2*$8753$7lS0C)))))))
                                                                 g$q$8744$7lS0C
                                                                 g$rhs*$8743$7lS0C
                                                                 g$lhs*$8742$7lS0C))))))
                                                        g$ls/false$8736$7lS0C)
                                                      ((case-lambda
                                                         ((g$t$8759$7lS0C)
                                                          ((case-lambda
                                                             ((g$ls/false$8760$7lS0C)
                                                              (if g$ls/false$8760$7lS0C
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$8761$7lS0C
                                                                       g$q$8762$7lS0C)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$8704$7lS0C
                                                                            g$q$8762$7lS0C
                                                                            g$lev$8719$7lS0C)))
                                                                       (case-lambda
                                                                         ((g$lhs*$8766$7lS0C
                                                                            g$rhs*$8767$7lS0C
                                                                            g$q$8768$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$q$8769$7lS0C
                                                                                g$rhs*$8770$7lS0C
                                                                                g$lhs*$8771$7lS0C)
                                                                              (if (= g$lev$8719$7lS0C
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$8772$7lS0C)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5059$7lS0C
                                                                                          (case-lambda
                                                                                            ((g$g$8773$7lS0C)
                                                                                             (cons
                                                                                               g$g$8773$7lS0C
                                                                                               '(...))))
                                                                                          g$g*$8772$7lS0C)
                                                                                        g$lhs*$8771$7lS0C)
                                                                                      (append
                                                                                        g$p*$8761$7lS0C
                                                                                        g$rhs*$8770$7lS0C)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5059$7lS0C
                                                                                            (case-lambda
                                                                                              ((g$g$8774$7lS0C)
                                                                                               (cons
                                                                                                 g$g$8774$7lS0C
                                                                                                 '(...))))
                                                                                            g$g*$8772$7lS0C))
                                                                                        g$q$8769$7lS0C))))
                                                                                 (g$map$5059$7lS0C
                                                                                   (case-lambda
                                                                                     ((g$x$8775$7lS0C)
                                                                                      (gensym)))
                                                                                   g$p*$8761$7lS0C))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$8704$7lS0C
                                                                                       g$p*$8761$7lS0C
                                                                                       (- g$lev$8719$7lS0C
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$8779$7lS0C
                                                                                       g$rhs2*$8780$7lS0C
                                                                                       g$p*$8781$7lS0C)
                                                                                     ((case-lambda
                                                                                        ((g$p*$8782$7lS0C
                                                                                           g$rhs2*$8783$7lS0C
                                                                                           g$lhs2*$8784$7lS0C)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$8784$7lS0C
                                                                                             g$lhs*$8771$7lS0C)
                                                                                           (append
                                                                                             g$rhs2*$8783$7lS0C
                                                                                             g$rhs*$8770$7lS0C)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$8782$7lS0C)
                                                                                             g$q$8769$7lS0C))))
                                                                                      g$p*$8781$7lS0C
                                                                                      g$rhs2*$8780$7lS0C
                                                                                      g$lhs2*$8779$7lS0C)))))))
                                                                           g$q$8768$7lS0C
                                                                           g$rhs*$8767$7lS0C
                                                                           g$lhs*$8766$7lS0C))))))
                                                                  g$ls/false$8760$7lS0C)
                                                                ((case-lambda
                                                                   ((g$t$8785$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8786$7lS0C)
                                                                        (if (if g$ls/false$8786$7lS0C
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$8719$7lS0C
                                                                                        '0)))
                                                                                  g$ls/false$8786$7lS0C))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$7708$7lS0C
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$8718$7lS0C)))
                                                                            g$ls/false$8786$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$t$8787$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8788$7lS0C)
                                                                                  (if g$ls/false$8788$7lS0C
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8789$7lS0C)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8704$7lS0C
                                                                                                g$p$8789$7lS0C
                                                                                                (+ g$lev$8719$7lS0C
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8793$7lS0C
                                                                                                g$rhs*$8794$7lS0C
                                                                                                g$p$8795$7lS0C)
                                                                                              ((case-lambda
                                                                                                 ((g$p$8796$7lS0C
                                                                                                    g$rhs*$8797$7lS0C
                                                                                                    g$lhs*$8798$7lS0C)
                                                                                                  (values
                                                                                                    g$lhs*$8798$7lS0C
                                                                                                    g$rhs*$8797$7lS0C
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$8796$7lS0C))))
                                                                                               g$p$8795$7lS0C
                                                                                               g$rhs*$8794$7lS0C
                                                                                               g$lhs*$8793$7lS0C))))))
                                                                                      g$ls/false$8788$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$t$8799$7lS0C)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8800$7lS0C)
                                                                                            (if g$ls/false$8800$7lS0C
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8801$7lS0C
                                                                                                     g$q$8802$7lS0C)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$8704$7lS0C
                                                                                                          g$p$8801$7lS0C
                                                                                                          g$lev$8719$7lS0C)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8809$7lS0C
                                                                                                          g$rhs*$8810$7lS0C
                                                                                                          g$p$8811$7lS0C)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$8704$7lS0C
                                                                                                               g$q$8802$7lS0C
                                                                                                               g$lev$8719$7lS0C)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$8812$7lS0C
                                                                                                               g$rhs2*$8813$7lS0C
                                                                                                               g$q$8814$7lS0C)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$8815$7lS0C
                                                                                                                   g$rhs2*$8816$7lS0C
                                                                                                                   g$lhs2*$8817$7lS0C
                                                                                                                   g$p$8818$7lS0C
                                                                                                                   g$rhs*$8819$7lS0C
                                                                                                                   g$lhs*$8820$7lS0C)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$8817$7lS0C
                                                                                                                     g$lhs*$8820$7lS0C)
                                                                                                                   (append
                                                                                                                     g$rhs2*$8816$7lS0C
                                                                                                                     g$rhs*$8819$7lS0C)
                                                                                                                   (cons
                                                                                                                     g$p$8818$7lS0C
                                                                                                                     g$q$8815$7lS0C))))
                                                                                                              g$q$8814$7lS0C
                                                                                                              g$rhs2*$8813$7lS0C
                                                                                                              g$lhs2*$8812$7lS0C
                                                                                                              g$p$8811$7lS0C
                                                                                                              g$rhs*$8810$7lS0C
                                                                                                              g$lhs*$8809$7lS0C)))))))))
                                                                                                g$ls/false$8800$7lS0C)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8821$7lS0C)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8822$7lS0C)
                                                                                                      (if g$ls/false$8822$7lS0C
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$8823$7lS0C)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$8704$7lS0C
                                                                                                                    g$x*$8823$7lS0C
                                                                                                                    g$lev$8719$7lS0C)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$8827$7lS0C
                                                                                                                    g$rhs*$8828$7lS0C
                                                                                                                    g$x*$8829$7lS0C)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$8830$7lS0C
                                                                                                                        g$rhs*$8831$7lS0C
                                                                                                                        g$lhs*$8832$7lS0C)
                                                                                                                      (values
                                                                                                                        g$lhs*$8832$7lS0C
                                                                                                                        g$rhs*$8831$7lS0C
                                                                                                                        (list->vector
                                                                                                                          g$x*$8830$7lS0C))))
                                                                                                                   g$x*$8829$7lS0C
                                                                                                                   g$rhs*$8828$7lS0C
                                                                                                                   g$lhs*$8827$7lS0C))))))
                                                                                                          g$ls/false$8822$7lS0C)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$8833$7lS0C)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$8834$7lS0C)
                                                                                                                (if g$ls/false$8834$7lS0C
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$8718$7lS0C)))
                                                                                                                    g$ls/false$8834$7lS0C)
                                                                                                                  (g$syntax-violation$7708$7lS0C
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$8833$7lS0C))))
                                                                                                             (g$syntax-dispatch$7596$7lS0C
                                                                                                               g$t$8833$7lS0C
                                                                                                               '_))))
                                                                                                         g$t$8821$7lS0C))))
                                                                                                   (g$syntax-dispatch$7596$7lS0C
                                                                                                     g$t$8821$7lS0C
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$8799$7lS0C))))
                                                                                         (g$syntax-dispatch$7596$7lS0C
                                                                                           g$t$8799$7lS0C
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$8787$7lS0C))))
                                                                               (g$syntax-dispatch$7596$7lS0C
                                                                                 g$t$8787$7lS0C
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$8785$7lS0C))))
                                                                     (g$syntax-dispatch$7596$7lS0C
                                                                       g$t$8785$7lS0C
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$8759$7lS0C))))
                                                           (g$syntax-dispatch$7596$7lS0C
                                                             g$t$8759$7lS0C
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$8735$7lS0C))))
                                                 (g$syntax-dispatch$7596$7lS0C
                                                   g$t$8735$7lS0C
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8733$7lS0C))))
                                       (g$syntax-dispatch$7596$7lS0C
                                         g$t$8733$7lS0C
                                         '#(scheme-id unsyntax)))))
                                   g$t$8720$7lS0C))))
                             (g$syntax-dispatch$7596$7lS0C
                               g$t$8720$7lS0C
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8718$7lS0C)))))
           (case-lambda
             ((g$x$8705$7lS0C)
              ((case-lambda
                 ((g$t$8706$7lS0C)
                  ((case-lambda
                     ((g$ls/false$8707$7lS0C)
                      (if g$ls/false$8707$7lS0C
                        (apply
                          (case-lambda
                            ((g$e$8708$7lS0C)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8704$7lS0C g$e$8708$7lS0C '0)))
                               (case-lambda
                                 ((g$lhs*$8712$7lS0C
                                    g$rhs*$8713$7lS0C
                                    g$v$8714$7lS0C)
                                  ((case-lambda
                                     ((g$v$8715$7lS0C
                                        g$rhs*$8716$7lS0C
                                        g$lhs*$8717$7lS0C)
                                      (g$bless$7559$7lS0C
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8716$7lS0C)
                                          '()
                                          (list
                                            g$lhs*$8717$7lS0C
                                            (list 'syntax g$v$8715$7lS0C))))))
                                   g$v$8714$7lS0C
                                   g$rhs*$8713$7lS0C
                                   g$lhs*$8712$7lS0C))))))
                          g$ls/false$8707$7lS0C)
                        (g$syntax-violation$7708$7lS0C
                          '#f
                          '"invalid syntax"
                          g$t$8706$7lS0C))))
                   (g$syntax-dispatch$7596$7lS0C g$t$8706$7lS0C '(_ any)))))
               g$x$8705$7lS0C))))))))
   (g$define-struct-macro$7589$7lS0C
     g$define-struct-macro$11089$7lS0C
     (case-lambda
       ((g$stx$8835$7lS0C)
        (g$syntax-violation$7708$7lS0C
          '#f
          '"define-struct not supported"
          g$stx$8835$7lS0C))))
   (g$define-record-type-macro$7590$7lS0C
     g$define-record-type-macro$11090$7lS0C
     (case-lambda
       ((g$x$8836$7lS0C)
        (letrec* ((g$id$8837$7lS0C
                    (case-lambda
                      ((g$ctxt$9089$7lS0C . g$str*$9090$7lS0C)
                       (g$datum->syntax$7710$7lS0C
                         g$ctxt$9089$7lS0C
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5059$7lS0C
                               (case-lambda
                                 ((g$x$9091$7lS0C)
                                  (if (symbol? g$x$9091$7lS0C)
                                    (symbol->string g$x$9091$7lS0C)
                                    (if (string? g$x$9091$7lS0C)
                                      g$x$9091$7lS0C
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$9090$7lS0C)))))))
                  (g$get-record-name$8838$7lS0C
                    (case-lambda
                      ((g$spec$9080$7lS0C)
                       ((case-lambda
                          ((g$t$9081$7lS0C)
                           ((case-lambda
                              ((g$ls/false$9082$7lS0C)
                               (if g$ls/false$9082$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$foo$9083$7lS0C
                                        g$make-foo$9084$7lS0C
                                        g$foo?$9085$7lS0C)
                                      g$foo$9083$7lS0C))
                                   g$ls/false$9082$7lS0C)
                                 ((case-lambda
                                    ((g$t$9086$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$9087$7lS0C)
                                         (if g$ls/false$9087$7lS0C
                                           (apply
                                             (case-lambda
                                               ((g$foo$9088$7lS0C)
                                                g$foo$9088$7lS0C))
                                             g$ls/false$9087$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$t$9086$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$9086$7lS0C
                                        'any))))
                                  g$t$9081$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$9081$7lS0C
                              '(any any any)))))
                        g$spec$9080$7lS0C))))
                  (g$get-record-constructor-name$8839$7lS0C
                    (case-lambda
                      ((g$spec$9070$7lS0C)
                       ((case-lambda
                          ((g$t$9071$7lS0C)
                           ((case-lambda
                              ((g$ls/false$9072$7lS0C)
                               (if g$ls/false$9072$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$foo$9073$7lS0C
                                        g$make-foo$9074$7lS0C
                                        g$foo?$9075$7lS0C)
                                      g$make-foo$9074$7lS0C))
                                   g$ls/false$9072$7lS0C)
                                 ((case-lambda
                                    ((g$t$9076$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$9077$7lS0C)
                                         (if (if g$ls/false$9077$7lS0C
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9078$7lS0C)
                                                      (g$id?$7318$7lS0C
                                                        g$foo$9078$7lS0C)))
                                                   g$ls/false$9077$7lS0C))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9079$7lS0C)
                                                (g$id$8837$7lS0C
                                                  g$foo$9079$7lS0C
                                                  '"make-"
                                                  (g$stx->datum$7329$7lS0C
                                                    g$foo$9079$7lS0C))))
                                             g$ls/false$9077$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$t$9076$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$9076$7lS0C
                                        'any))))
                                  g$t$9071$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$9071$7lS0C
                              '(any any any)))))
                        g$spec$9070$7lS0C))))
                  (g$get-record-predicate-name$8840$7lS0C
                    (case-lambda
                      ((g$spec$9060$7lS0C)
                       ((case-lambda
                          ((g$t$9061$7lS0C)
                           ((case-lambda
                              ((g$ls/false$9062$7lS0C)
                               (if g$ls/false$9062$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$foo$9063$7lS0C
                                        g$make-foo$9064$7lS0C
                                        g$foo?$9065$7lS0C)
                                      g$foo?$9065$7lS0C))
                                   g$ls/false$9062$7lS0C)
                                 ((case-lambda
                                    ((g$t$9066$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$9067$7lS0C)
                                         (if (if g$ls/false$9067$7lS0C
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9068$7lS0C)
                                                      (g$id?$7318$7lS0C
                                                        g$foo$9068$7lS0C)))
                                                   g$ls/false$9067$7lS0C))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9069$7lS0C)
                                                (g$id$8837$7lS0C
                                                  g$foo$9069$7lS0C
                                                  (g$stx->datum$7329$7lS0C
                                                    g$foo$9069$7lS0C)
                                                  '"?")))
                                             g$ls/false$9067$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$t$9066$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$9066$7lS0C
                                        'any))))
                                  g$t$9061$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$9061$7lS0C
                              '(any any any)))))
                        g$spec$9060$7lS0C))))
                  (g$get-clause$8841$7lS0C
                    (case-lambda
                      ((g$id$9051$7lS0C g$ls$9052$7lS0C)
                       ((case-lambda
                          ((g$t$9053$7lS0C)
                           ((case-lambda
                              ((g$ls/false$9054$7lS0C)
                               (if g$ls/false$9054$7lS0C
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9054$7lS0C)
                                 ((case-lambda
                                    ((g$t$9055$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$9056$7lS0C)
                                         (if g$ls/false$9056$7lS0C
                                           (apply
                                             (case-lambda
                                               ((g$x$9057$7lS0C
                                                  g$rest$9058$7lS0C
                                                  g$ls$9059$7lS0C)
                                                (if (g$free-id=?$7322$7lS0C
                                                      (g$bless$7559$7lS0C
                                                        g$id$9051$7lS0C)
                                                      g$x$9057$7lS0C)
                                                  (cons
                                                    g$x$9057$7lS0C
                                                    g$rest$9058$7lS0C)
                                                  (g$get-clause$8841$7lS0C
                                                    g$id$9051$7lS0C
                                                    g$ls$9059$7lS0C))))
                                             g$ls/false$9056$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$t$9055$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$9055$7lS0C
                                        '((any . any) . any)))))
                                  g$t$9053$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C g$t$9053$7lS0C '()))))
                        g$ls$9052$7lS0C))))
                  (g$foo-rtd-code$8842$7lS0C
                    (case-lambda
                      ((g$name$9010$7lS0C
                         g$clause*$9011$7lS0C
                         g$parent-rtd-code$9012$7lS0C)
                       (letrec* ((g$convert-field-spec*$9013$7lS0C
                                   (case-lambda
                                     ((g$ls$9038$7lS0C)
                                      (list->vector
                                        (g$map$5059$7lS0C
                                          (case-lambda
                                            ((g$x$9039$7lS0C)
                                             ((case-lambda
                                                ((g$t$9040$7lS0C)
                                                 ((case-lambda
                                                    ((g$ls/false$9041$7lS0C)
                                                     (if g$ls/false$9041$7lS0C
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$9042$7lS0C
                                                              g$rest$9043$7lS0C)
                                                            (list
                                                              'mutable
                                                              g$name$9042$7lS0C)))
                                                         g$ls/false$9041$7lS0C)
                                                       ((case-lambda
                                                          ((g$t$9044$7lS0C)
                                                           ((case-lambda
                                                              ((g$ls/false$9045$7lS0C)
                                                               (if g$ls/false$9045$7lS0C
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$9046$7lS0C
                                                                        g$rest$9047$7lS0C)
                                                                      (list
                                                                        'immutable
                                                                        g$name$9046$7lS0C)))
                                                                   g$ls/false$9045$7lS0C)
                                                                 ((case-lambda
                                                                    ((g$t$9048$7lS0C)
                                                                     ((case-lambda
                                                                        ((g$ls/false$9049$7lS0C)
                                                                         (if g$ls/false$9049$7lS0C
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$9050$7lS0C)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$9050$7lS0C)))
                                                                             g$ls/false$9049$7lS0C)
                                                                           (g$syntax-violation$7708$7lS0C
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$9048$7lS0C))))
                                                                      (g$syntax-dispatch$7596$7lS0C
                                                                        g$t$9048$7lS0C
                                                                        'any))))
                                                                  g$t$9044$7lS0C))))
                                                            (g$syntax-dispatch$7596$7lS0C
                                                              g$t$9044$7lS0C
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$9040$7lS0C))))
                                                  (g$syntax-dispatch$7596$7lS0C
                                                    g$t$9040$7lS0C
                                                    '(#(scheme-id mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$9039$7lS0C)))
                                          g$ls$9038$7lS0C))))))
                         ((case-lambda
                            ((g$uid-code$9014$7lS0C
                               g$sealed?$9015$7lS0C
                               g$opaque?$9016$7lS0C
                               g$fields$9017$7lS0C)
                             (g$bless$7559$7lS0C
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9010$7lS0C)
                                 g$parent-rtd-code$9012$7lS0C
                                 g$uid-code$9014$7lS0C
                                 g$sealed?$9015$7lS0C
                                 g$opaque?$9016$7lS0C
                                 g$fields$9017$7lS0C))))
                          ((case-lambda
                             ((g$t$9018$7lS0C)
                              ((case-lambda
                                 ((g$ls/false$9019$7lS0C)
                                  (if g$ls/false$9019$7lS0C
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9019$7lS0C)
                                    ((case-lambda
                                       ((g$t$9020$7lS0C)
                                        ((case-lambda
                                           ((g$ls/false$9021$7lS0C)
                                            (if g$ls/false$9021$7lS0C
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9022$7lS0C)
                                                   (list
                                                     'quote
                                                     g$uid$9022$7lS0C)))
                                                g$ls/false$9021$7lS0C)
                                              ((case-lambda
                                                 ((g$t$9023$7lS0C)
                                                  ((case-lambda
                                                     ((g$ls/false$9024$7lS0C)
                                                      (if g$ls/false$9024$7lS0C
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9024$7lS0C)
                                                        (g$syntax-violation$7708$7lS0C
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9023$7lS0C))))
                                                   (g$syntax-dispatch$7596$7lS0C
                                                     g$t$9023$7lS0C
                                                     '_))))
                                               g$t$9020$7lS0C))))
                                         (g$syntax-dispatch$7596$7lS0C
                                           g$t$9020$7lS0C
                                           '(_ any)))))
                                     g$t$9018$7lS0C))))
                               (g$syntax-dispatch$7596$7lS0C
                                 g$t$9018$7lS0C
                                 '(_)))))
                           (g$get-clause$8841$7lS0C
                             'nongenerative
                             g$clause*$9011$7lS0C))
                          ((case-lambda
                             ((g$t$9025$7lS0C)
                              ((case-lambda
                                 ((g$ls/false$9026$7lS0C)
                                  (if g$ls/false$9026$7lS0C
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9026$7lS0C)
                                    ((case-lambda
                                       ((g$t$9027$7lS0C)
                                        ((case-lambda
                                           ((g$ls/false$9028$7lS0C)
                                            (if g$ls/false$9028$7lS0C
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9028$7lS0C)
                                              (g$syntax-violation$7708$7lS0C
                                                '#f
                                                '"invalid syntax"
                                                g$t$9027$7lS0C))))
                                         (g$syntax-dispatch$7596$7lS0C
                                           g$t$9027$7lS0C
                                           '_))))
                                     g$t$9025$7lS0C))))
                               (g$syntax-dispatch$7596$7lS0C
                                 g$t$9025$7lS0C
                                 '(_ #(atom #t))))))
                           (g$get-clause$8841$7lS0C
                             'sealed
                             g$clause*$9011$7lS0C))
                          ((case-lambda
                             ((g$t$9029$7lS0C)
                              ((case-lambda
                                 ((g$ls/false$9030$7lS0C)
                                  (if g$ls/false$9030$7lS0C
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9030$7lS0C)
                                    ((case-lambda
                                       ((g$t$9031$7lS0C)
                                        ((case-lambda
                                           ((g$ls/false$9032$7lS0C)
                                            (if g$ls/false$9032$7lS0C
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9032$7lS0C)
                                              (g$syntax-violation$7708$7lS0C
                                                '#f
                                                '"invalid syntax"
                                                g$t$9031$7lS0C))))
                                         (g$syntax-dispatch$7596$7lS0C
                                           g$t$9031$7lS0C
                                           '_))))
                                     g$t$9029$7lS0C))))
                               (g$syntax-dispatch$7596$7lS0C
                                 g$t$9029$7lS0C
                                 '(_ #(atom #t))))))
                           (g$get-clause$8841$7lS0C
                             'opaque
                             g$clause*$9011$7lS0C))
                          ((case-lambda
                             ((g$t$9033$7lS0C)
                              ((case-lambda
                                 ((g$ls/false$9034$7lS0C)
                                  (if g$ls/false$9034$7lS0C
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9035$7lS0C)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9013$7lS0C
                                             g$field-spec*$9035$7lS0C))))
                                      g$ls/false$9034$7lS0C)
                                    ((case-lambda
                                       ((g$t$9036$7lS0C)
                                        ((case-lambda
                                           ((g$ls/false$9037$7lS0C)
                                            (if g$ls/false$9037$7lS0C
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9037$7lS0C)
                                              (g$syntax-violation$7708$7lS0C
                                                '#f
                                                '"invalid syntax"
                                                g$t$9036$7lS0C))))
                                         (g$syntax-dispatch$7596$7lS0C
                                           g$t$9036$7lS0C
                                           '_))))
                                     g$t$9033$7lS0C))))
                               (g$syntax-dispatch$7596$7lS0C
                                 g$t$9033$7lS0C
                                 '(_ . each-any)))))
                           (g$get-clause$8841$7lS0C
                             'fields
                             g$clause*$9011$7lS0C)))))))
                  (g$parent-rtd-code$8843$7lS0C
                    (case-lambda
                      ((g$clause*$8998$7lS0C)
                       ((case-lambda
                          ((g$t$8999$7lS0C)
                           ((case-lambda
                              ((g$ls/false$9000$7lS0C)
                               (if g$ls/false$9000$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$name$9001$7lS0C)
                                      (list
                                        'record-type-descriptor
                                        g$name$9001$7lS0C)))
                                   g$ls/false$9000$7lS0C)
                                 ((case-lambda
                                    ((g$t$9002$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$9003$7lS0C)
                                         (if g$ls/false$9003$7lS0C
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9004$7lS0C)
                                                    ((case-lambda
                                                       ((g$ls/false$9005$7lS0C)
                                                        (if g$ls/false$9005$7lS0C
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9006$7lS0C
                                                                 g$rcd$9007$7lS0C)
                                                               g$rtd$9006$7lS0C))
                                                            g$ls/false$9005$7lS0C)
                                                          ((case-lambda
                                                             ((g$t$9008$7lS0C)
                                                              ((case-lambda
                                                                 ((g$ls/false$9009$7lS0C)
                                                                  (if g$ls/false$9009$7lS0C
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9009$7lS0C)
                                                                    (g$syntax-violation$7708$7lS0C
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9008$7lS0C))))
                                                               (g$syntax-dispatch$7596$7lS0C
                                                                 g$t$9008$7lS0C
                                                                 '#(atom #f)))))
                                                           g$t$9004$7lS0C))))
                                                     (g$syntax-dispatch$7596$7lS0C
                                                       g$t$9004$7lS0C
                                                       '(_ any any)))))
                                                 (g$get-clause$8841$7lS0C
                                                   'parent-rtd
                                                   g$clause*$8998$7lS0C))))
                                             g$ls/false$9003$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$t$9002$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$9002$7lS0C
                                        '#(atom #f)))))
                                  g$t$8999$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$8999$7lS0C
                              '(_ any)))))
                        (g$get-clause$8841$7lS0C
                          'parent
                          g$clause*$8998$7lS0C)))))
                  (g$parent-rcd-code$8844$7lS0C
                    (case-lambda
                      ((g$clause*$8986$7lS0C)
                       ((case-lambda
                          ((g$t$8987$7lS0C)
                           ((case-lambda
                              ((g$ls/false$8988$7lS0C)
                               (if g$ls/false$8988$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$name$8989$7lS0C)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8989$7lS0C)))
                                   g$ls/false$8988$7lS0C)
                                 ((case-lambda
                                    ((g$t$8990$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$8991$7lS0C)
                                         (if g$ls/false$8991$7lS0C
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8992$7lS0C)
                                                    ((case-lambda
                                                       ((g$ls/false$8993$7lS0C)
                                                        (if g$ls/false$8993$7lS0C
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8994$7lS0C
                                                                 g$rcd$8995$7lS0C)
                                                               g$rcd$8995$7lS0C))
                                                            g$ls/false$8993$7lS0C)
                                                          ((case-lambda
                                                             ((g$t$8996$7lS0C)
                                                              ((case-lambda
                                                                 ((g$ls/false$8997$7lS0C)
                                                                  (if g$ls/false$8997$7lS0C
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8997$7lS0C)
                                                                    (g$syntax-violation$7708$7lS0C
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8996$7lS0C))))
                                                               (g$syntax-dispatch$7596$7lS0C
                                                                 g$t$8996$7lS0C
                                                                 '#(atom #f)))))
                                                           g$t$8992$7lS0C))))
                                                     (g$syntax-dispatch$7596$7lS0C
                                                       g$t$8992$7lS0C
                                                       '(_ any any)))))
                                                 (g$get-clause$8841$7lS0C
                                                   'parent-rtd
                                                   g$clause*$8986$7lS0C))))
                                             g$ls/false$8991$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$t$8990$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$8990$7lS0C
                                        '#(atom #f)))))
                                  g$t$8987$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$8987$7lS0C
                              '(_ any)))))
                        (g$get-clause$8841$7lS0C
                          'parent
                          g$clause*$8986$7lS0C)))))
                  (g$foo-rcd-code$8845$7lS0C
                    (case-lambda
                      ((g$clause*$8982$7lS0C
                         g$foo-rtd$8983$7lS0C
                         g$protocol$8984$7lS0C
                         g$parent-rcd-code$8985$7lS0C)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8983$7lS0C
                         g$parent-rcd-code$8985$7lS0C
                         g$protocol$8984$7lS0C))))
                  (g$get-protocol-code$8846$7lS0C
                    (case-lambda
                      ((g$clause*$8976$7lS0C)
                       ((case-lambda
                          ((g$t$8977$7lS0C)
                           ((case-lambda
                              ((g$ls/false$8978$7lS0C)
                               (if g$ls/false$8978$7lS0C
                                 (apply
                                   (case-lambda
                                     ((g$expr$8979$7lS0C) g$expr$8979$7lS0C))
                                   g$ls/false$8978$7lS0C)
                                 ((case-lambda
                                    ((g$t$8980$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$8981$7lS0C)
                                         (if g$ls/false$8981$7lS0C
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8981$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$t$8980$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$8980$7lS0C
                                        '_))))
                                  g$t$8977$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$8977$7lS0C
                              '(_ any)))))
                        (g$get-clause$8841$7lS0C
                          'protocol
                          g$clause*$8976$7lS0C)))))
                  (g$get-fields$8847$7lS0C
                    (case-lambda
                      ((g$clause*$8967$7lS0C)
                       ((case-lambda
                          ((g$t$8968$7lS0C)
                           ((case-lambda
                              ((g$ls/false$8969$7lS0C)
                               (if g$ls/false$8969$7lS0C
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8969$7lS0C)
                                 ((case-lambda
                                    ((g$t$8970$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$8971$7lS0C)
                                         (if g$ls/false$8971$7lS0C
                                           (apply
                                             (case-lambda
                                               ((g$f*$8972$7lS0C)
                                                g$f*$8972$7lS0C))
                                             g$ls/false$8971$7lS0C)
                                           ((case-lambda
                                              ((g$t$8973$7lS0C)
                                               ((case-lambda
                                                  ((g$ls/false$8974$7lS0C)
                                                   (if g$ls/false$8974$7lS0C
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8975$7lS0C)
                                                          (g$get-fields$8847$7lS0C
                                                            g$rest$8975$7lS0C)))
                                                       g$ls/false$8974$7lS0C)
                                                     (g$syntax-violation$7708$7lS0C
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8973$7lS0C))))
                                                (g$syntax-dispatch$7596$7lS0C
                                                  g$t$8973$7lS0C
                                                  '(_ . any)))))
                                            g$t$8970$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$8970$7lS0C
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8968$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C g$t$8968$7lS0C '()))))
                        g$clause*$8967$7lS0C))))
                  (g$get-mutator-indices$8848$7lS0C
                    (case-lambda
                      ((g$fields$8955$7lS0C)
                       ((letrec ((g$f$8956$7lS0C
                                   (case-lambda
                                     ((g$fields$8957$7lS0C g$i$8958$7lS0C)
                                      ((case-lambda
                                         ((g$t$8959$7lS0C)
                                          ((case-lambda
                                             ((g$ls/false$8960$7lS0C)
                                              (if g$ls/false$8960$7lS0C
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8960$7lS0C)
                                                ((case-lambda
                                                   ((g$t$8961$7lS0C)
                                                    ((case-lambda
                                                       ((g$ls/false$8962$7lS0C)
                                                        (if g$ls/false$8962$7lS0C
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8963$7lS0C)
                                                               (cons
                                                                 g$i$8958$7lS0C
                                                                 (g$f$8956$7lS0C
                                                                   g$rest$8963$7lS0C
                                                                   (+ g$i$8958$7lS0C
                                                                      '1)))))
                                                            g$ls/false$8962$7lS0C)
                                                          ((case-lambda
                                                             ((g$t$8964$7lS0C)
                                                              ((case-lambda
                                                                 ((g$ls/false$8965$7lS0C)
                                                                  (if g$ls/false$8965$7lS0C
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8966$7lS0C)
                                                                         (g$f$8956$7lS0C
                                                                           g$rest$8966$7lS0C
                                                                           (+ g$i$8958$7lS0C
                                                                              '1))))
                                                                      g$ls/false$8965$7lS0C)
                                                                    (g$syntax-violation$7708$7lS0C
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8964$7lS0C))))
                                                               (g$syntax-dispatch$7596$7lS0C
                                                                 g$t$8964$7lS0C
                                                                 '(_ . any)))))
                                                           g$t$8961$7lS0C))))
                                                     (g$syntax-dispatch$7596$7lS0C
                                                       g$t$8961$7lS0C
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8959$7lS0C))))
                                           (g$syntax-dispatch$7596$7lS0C
                                             g$t$8959$7lS0C
                                             '()))))
                                       g$fields$8957$7lS0C)))))
                          g$f$8956$7lS0C)
                        g$fields$8955$7lS0C
                        '0))))
                  (g$get-mutators$8849$7lS0C
                    (case-lambda
                      ((g$foo$8934$7lS0C g$fields$8935$7lS0C)
                       (letrec* ((g$gen-name$8936$7lS0C
                                   (case-lambda
                                     ((g$x$8954$7lS0C)
                                      (g$datum->syntax$7710$7lS0C
                                        g$foo$8934$7lS0C
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7711$7lS0C
                                                g$foo$8934$7lS0C))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7711$7lS0C
                                                g$x$8954$7lS0C))
                                            '"-set!")))))))
                         ((letrec ((g$f$8937$7lS0C
                                     (case-lambda
                                       ((g$fields$8938$7lS0C)
                                        ((case-lambda
                                           ((g$t$8939$7lS0C)
                                            ((case-lambda
                                               ((g$ls/false$8940$7lS0C)
                                                (if g$ls/false$8940$7lS0C
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8940$7lS0C)
                                                  ((case-lambda
                                                     ((g$t$8941$7lS0C)
                                                      ((case-lambda
                                                         ((g$ls/false$8942$7lS0C)
                                                          (if g$ls/false$8942$7lS0C
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8943$7lS0C
                                                                   g$accessor$8944$7lS0C
                                                                   g$mutator$8945$7lS0C
                                                                   g$rest$8946$7lS0C)
                                                                 (cons
                                                                   g$mutator$8945$7lS0C
                                                                   (g$f$8937$7lS0C
                                                                     g$rest$8946$7lS0C))))
                                                              g$ls/false$8942$7lS0C)
                                                            ((case-lambda
                                                               ((g$t$8947$7lS0C)
                                                                ((case-lambda
                                                                   ((g$ls/false$8948$7lS0C)
                                                                    (if g$ls/false$8948$7lS0C
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8949$7lS0C
                                                                             g$rest$8950$7lS0C)
                                                                           (cons
                                                                             (g$gen-name$8936$7lS0C
                                                                               g$name$8949$7lS0C)
                                                                             (g$f$8937$7lS0C
                                                                               g$rest$8950$7lS0C))))
                                                                        g$ls/false$8948$7lS0C)
                                                                      ((case-lambda
                                                                         ((g$t$8951$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8952$7lS0C)
                                                                              (if g$ls/false$8952$7lS0C
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8953$7lS0C)
                                                                                     (g$f$8937$7lS0C
                                                                                       g$rest$8953$7lS0C)))
                                                                                  g$ls/false$8952$7lS0C)
                                                                                (g$syntax-violation$7708$7lS0C
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8951$7lS0C))))
                                                                           (g$syntax-dispatch$7596$7lS0C
                                                                             g$t$8951$7lS0C
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8947$7lS0C))))
                                                                 (g$syntax-dispatch$7596$7lS0C
                                                                   g$t$8947$7lS0C
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8941$7lS0C))))
                                                       (g$syntax-dispatch$7596$7lS0C
                                                         g$t$8941$7lS0C
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8939$7lS0C))))
                                             (g$syntax-dispatch$7596$7lS0C
                                               g$t$8939$7lS0C
                                               '()))))
                                         g$fields$8938$7lS0C)))))
                            g$f$8937$7lS0C)
                          g$fields$8935$7lS0C)))))
                  (g$get-accessors$8850$7lS0C
                    (case-lambda
                      ((g$foo$8900$7lS0C g$fields$8901$7lS0C)
                       (letrec* ((g$gen-name$8902$7lS0C
                                   (case-lambda
                                     ((g$x$8933$7lS0C)
                                      (g$datum->syntax$7710$7lS0C
                                        g$foo$8900$7lS0C
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7711$7lS0C
                                                g$foo$8900$7lS0C))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7711$7lS0C
                                                g$x$8933$7lS0C)))))))))
                         (g$map$5059$7lS0C
                           (case-lambda
                             ((g$field$8903$7lS0C)
                              ((case-lambda
                                 ((g$t$8904$7lS0C)
                                  ((case-lambda
                                     ((g$ls/false$8905$7lS0C)
                                      (if (if g$ls/false$8905$7lS0C
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$8906$7lS0C
                                                     g$accessor$8907$7lS0C
                                                     g$mutator$8908$7lS0C)
                                                   (g$id?$7318$7lS0C
                                                     g$accessor$8907$7lS0C)))
                                                g$ls/false$8905$7lS0C))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$8909$7lS0C
                                               g$accessor$8910$7lS0C
                                               g$mutator$8911$7lS0C)
                                             g$accessor$8910$7lS0C))
                                          g$ls/false$8905$7lS0C)
                                        ((case-lambda
                                           ((g$t$8912$7lS0C)
                                            ((case-lambda
                                               ((g$ls/false$8913$7lS0C)
                                                (if (if g$ls/false$8913$7lS0C
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$8914$7lS0C
                                                               g$accessor$8915$7lS0C)
                                                             (g$id?$7318$7lS0C
                                                               g$accessor$8915$7lS0C)))
                                                          g$ls/false$8913$7lS0C))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$8916$7lS0C
                                                         g$accessor$8917$7lS0C)
                                                       g$accessor$8917$7lS0C))
                                                    g$ls/false$8913$7lS0C)
                                                  ((case-lambda
                                                     ((g$t$8918$7lS0C)
                                                      ((case-lambda
                                                         ((g$ls/false$8919$7lS0C)
                                                          (if (if g$ls/false$8919$7lS0C
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$8920$7lS0C)
                                                                       (g$id?$7318$7lS0C
                                                                         g$name$8920$7lS0C)))
                                                                    g$ls/false$8919$7lS0C))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8921$7lS0C)
                                                                 (g$gen-name$8902$7lS0C
                                                                   g$name$8921$7lS0C)))
                                                              g$ls/false$8919$7lS0C)
                                                            ((case-lambda
                                                               ((g$t$8922$7lS0C)
                                                                ((case-lambda
                                                                   ((g$ls/false$8923$7lS0C)
                                                                    (if (if g$ls/false$8923$7lS0C
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$8924$7lS0C)
                                                                                 (g$id?$7318$7lS0C
                                                                                   g$name$8924$7lS0C)))
                                                                              g$ls/false$8923$7lS0C))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8925$7lS0C)
                                                                           (g$gen-name$8902$7lS0C
                                                                             g$name$8925$7lS0C)))
                                                                        g$ls/false$8923$7lS0C)
                                                                      ((case-lambda
                                                                         ((g$t$8926$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8927$7lS0C)
                                                                              (if (if g$ls/false$8927$7lS0C
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$8928$7lS0C)
                                                                                           (g$id?$7318$7lS0C
                                                                                             g$name$8928$7lS0C)))
                                                                                        g$ls/false$8927$7lS0C))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$8929$7lS0C)
                                                                                     (g$gen-name$8902$7lS0C
                                                                                       g$name$8929$7lS0C)))
                                                                                  g$ls/false$8927$7lS0C)
                                                                                ((case-lambda
                                                                                   ((g$t$8930$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$8931$7lS0C)
                                                                                        (if g$ls/false$8931$7lS0C
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$8932$7lS0C)
                                                                                               (g$syntax-violation$7708$7lS0C
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$8903$7lS0C)))
                                                                                            g$ls/false$8931$7lS0C)
                                                                                          (g$syntax-violation$7708$7lS0C
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$8930$7lS0C))))
                                                                                     (g$syntax-dispatch$7596$7lS0C
                                                                                       g$t$8930$7lS0C
                                                                                       'any))))
                                                                                 g$t$8926$7lS0C))))
                                                                           (g$syntax-dispatch$7596$7lS0C
                                                                             g$t$8926$7lS0C
                                                                             'any))))
                                                                       g$t$8922$7lS0C))))
                                                                 (g$syntax-dispatch$7596$7lS0C
                                                                   g$t$8922$7lS0C
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$8918$7lS0C))))
                                                       (g$syntax-dispatch$7596$7lS0C
                                                         g$t$8918$7lS0C
                                                         '(#(scheme-id mutable)
                                                           any)))))
                                                   g$t$8912$7lS0C))))
                                             (g$syntax-dispatch$7596$7lS0C
                                               g$t$8912$7lS0C
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$8904$7lS0C))))
                                   (g$syntax-dispatch$7596$7lS0C
                                     g$t$8904$7lS0C
                                     '(#(scheme-id mutable) any any any)))))
                               g$field$8903$7lS0C)))
                           g$fields$8901$7lS0C)))))
                  (g$enumerate$8851$7lS0C
                    (case-lambda
                      ((g$ls$8896$7lS0C)
                       ((letrec ((g$f$8897$7lS0C
                                   (case-lambda
                                     ((g$ls$8898$7lS0C g$i$8899$7lS0C)
                                      (if (null? g$ls$8898$7lS0C)
                                        '()
                                        (cons
                                          g$i$8899$7lS0C
                                          (g$f$8897$7lS0C
                                            (cdr g$ls$8898$7lS0C)
                                            (+ g$i$8899$7lS0C '1))))))))
                          g$f$8897$7lS0C)
                        g$ls$8896$7lS0C
                        '0))))
                  (g$do-define-record$8852$7lS0C
                    (case-lambda
                      ((g$namespec$8876$7lS0C g$clause*$8877$7lS0C)
                       ((case-lambda
                          ((g$foo$8878$7lS0C)
                           ((case-lambda
                              ((g$foo-rtd$8879$7lS0C)
                               ((case-lambda
                                  ((g$foo-rcd$8880$7lS0C)
                                   ((case-lambda
                                      ((g$protocol$8881$7lS0C)
                                       ((case-lambda
                                          ((g$make-foo$8882$7lS0C)
                                           ((case-lambda
                                              ((g$fields$8883$7lS0C)
                                               ((case-lambda
                                                  ((g$idx*$8884$7lS0C)
                                                   ((case-lambda
                                                      ((g$foo-x*$8885$7lS0C)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8886$7lS0C)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8887$7lS0C)
                                                               ((case-lambda
                                                                  ((g$foo?$8888$7lS0C)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8889$7lS0C)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8890$7lS0C)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8891$7lS0C)
                                                                               (g$bless$7559$7lS0C
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$8879$7lS0C
                                                                                       g$foo-rtd-code$8889$7lS0C)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$8881$7lS0C
                                                                                         g$protocol-code$8891$7lS0C)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$8880$7lS0C
                                                                                           g$foo-rcd-code$8890$7lS0C)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$8878$7lS0C
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$8879$7lS0C)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$8880$7lS0C)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$8888$7lS0C
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$8879$7lS0C))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$8882$7lS0C
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$8880$7lS0C))
                                                                                               (append
                                                                                                 (g$map$5059$7lS0C
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$8892$7lS0C
                                                                                                        g$idx$8893$7lS0C)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$8892$7lS0C
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$8879$7lS0C
                                                                                                          g$idx$8893$7lS0C))))
                                                                                                   g$foo-x*$8885$7lS0C
                                                                                                   g$idx*$8884$7lS0C)
                                                                                                 (g$map$5059$7lS0C
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$8894$7lS0C
                                                                                                        g$idx$8895$7lS0C)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$8894$7lS0C
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$8879$7lS0C
                                                                                                          g$idx$8895$7lS0C))))
                                                                                                   g$set-foo-x!*$8886$7lS0C
                                                                                                   g$set-foo-idx*$8887$7lS0C))))))))))))
                                                                            (g$get-protocol-code$8846$7lS0C
                                                                              g$clause*$8877$7lS0C))))
                                                                        (g$foo-rcd-code$8845$7lS0C
                                                                          g$clause*$8877$7lS0C
                                                                          g$foo-rtd$8879$7lS0C
                                                                          g$protocol$8881$7lS0C
                                                                          (g$parent-rcd-code$8844$7lS0C
                                                                            g$clause*$8877$7lS0C)))))
                                                                    (g$foo-rtd-code$8842$7lS0C
                                                                      g$foo$8878$7lS0C
                                                                      g$clause*$8877$7lS0C
                                                                      (g$parent-rtd-code$8843$7lS0C
                                                                        g$clause*$8877$7lS0C)))))
                                                                (g$get-record-predicate-name$8840$7lS0C
                                                                  g$namespec$8876$7lS0C))))
                                                            (g$get-mutator-indices$8848$7lS0C
                                                              g$fields$8883$7lS0C))))
                                                        (g$get-mutators$8849$7lS0C
                                                          g$foo$8878$7lS0C
                                                          g$fields$8883$7lS0C))))
                                                    (g$get-accessors$8850$7lS0C
                                                      g$foo$8878$7lS0C
                                                      g$fields$8883$7lS0C))))
                                                (g$enumerate$8851$7lS0C
                                                  g$fields$8883$7lS0C))))
                                            (g$get-fields$8847$7lS0C
                                              g$clause*$8877$7lS0C))))
                                        (g$get-record-constructor-name$8839$7lS0C
                                          g$namespec$8876$7lS0C))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8838$7lS0C g$namespec$8876$7lS0C)))))
                  (g$verify-clauses$8853$7lS0C
                    (case-lambda
                      ((g$x$8858$7lS0C g$cls*$8859$7lS0C)
                       (letrec* ((g$valid-kwds$8860$7lS0C
                                   (g$map$5059$7lS0C
                                     g$bless$7559$7lS0C
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$8861$7lS0C
                                   (case-lambda
                                     ((g$x$8873$7lS0C g$ls$8874$7lS0C)
                                      (if (pair? g$ls$8874$7lS0C)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8875$7lS0C)
                                              (if g$t$8875$7lS0C
                                                g$t$8875$7lS0C
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8861$7lS0C
                                                    g$x$8873$7lS0C
                                                    (cdr g$ls$8874$7lS0C))))))
                                           (g$free-id=?$7322$7lS0C
                                             g$x$8873$7lS0C
                                             (car g$ls$8874$7lS0C))))
                                        '#f)))))
                         ((letrec ((g$f$8862$7lS0C
                                     (case-lambda
                                       ((g$cls*$8863$7lS0C g$seen*$8864$7lS0C)
                                        (if (not (null? g$cls*$8863$7lS0C))
                                          ((case-lambda
                                             ((g$t$8865$7lS0C)
                                              ((case-lambda
                                                 ((g$ls/false$8866$7lS0C)
                                                  (if g$ls/false$8866$7lS0C
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8867$7lS0C
                                                           g$rest$8868$7lS0C)
                                                         (if ((case-lambda
                                                                ((g$t$8869$7lS0C)
                                                                 (if g$t$8869$7lS0C
                                                                   g$t$8869$7lS0C
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8861$7lS0C
                                                                            g$kwd$8867$7lS0C
                                                                            g$valid-kwds$8860$7lS0C))))))
                                                              (not (g$id?$7318$7lS0C
                                                                     g$kwd$8867$7lS0C)))
                                                           (g$syntax-violation$7708$7lS0C
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8867$7lS0C)
                                                           (if (g$bound-id-member?$7325$7lS0C
                                                                 g$kwd$8867$7lS0C
                                                                 g$seen*$8864$7lS0C)
                                                             (g$syntax-violation$7708$7lS0C
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8858$7lS0C
                                                               g$kwd$8867$7lS0C)
                                                             (g$f$8862$7lS0C
                                                               (cdr g$cls*$8863$7lS0C)
                                                               (cons
                                                                 g$kwd$8867$7lS0C
                                                                 g$seen*$8864$7lS0C))))))
                                                      g$ls/false$8866$7lS0C)
                                                    ((case-lambda
                                                       ((g$t$8870$7lS0C)
                                                        ((case-lambda
                                                           ((g$ls/false$8871$7lS0C)
                                                            (if g$ls/false$8871$7lS0C
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8872$7lS0C)
                                                                   (g$syntax-violation$7708$7lS0C
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8872$7lS0C)))
                                                                g$ls/false$8871$7lS0C)
                                                              (g$syntax-violation$7708$7lS0C
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8870$7lS0C))))
                                                         (g$syntax-dispatch$7596$7lS0C
                                                           g$t$8870$7lS0C
                                                           'any))))
                                                     g$t$8865$7lS0C))))
                                               (g$syntax-dispatch$7596$7lS0C
                                                 g$t$8865$7lS0C
                                                 '(any . any)))))
                                           (car g$cls*$8863$7lS0C))
                                          (void))))))
                            g$f$8862$7lS0C)
                          g$cls*$8859$7lS0C
                          '()))))))
          ((case-lambda
             ((g$t$8854$7lS0C)
              ((case-lambda
                 ((g$ls/false$8855$7lS0C)
                  (if g$ls/false$8855$7lS0C
                    (apply
                      (case-lambda
                        ((g$namespec$8856$7lS0C g$clause*$8857$7lS0C)
                         (begin
                           (g$verify-clauses$8853$7lS0C
                             g$x$8836$7lS0C
                             g$clause*$8857$7lS0C)
                           (g$do-define-record$8852$7lS0C
                             g$namespec$8856$7lS0C
                             g$clause*$8857$7lS0C))))
                      g$ls/false$8855$7lS0C)
                    (g$syntax-violation$7708$7lS0C
                      '#f
                      '"invalid syntax"
                      g$t$8854$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C
                 g$t$8854$7lS0C
                 '(_ any . each-any)))))
           g$x$8836$7lS0C)))))
   (g$define-condition-type-macro$7591$7lS0C
     g$define-condition-type-macro$11091$7lS0C
     (case-lambda
       ((g$x$9092$7lS0C)
        (letrec* ((g$mkname$9093$7lS0C
                    (case-lambda
                      ((g$name$9116$7lS0C g$suffix$9117$7lS0C)
                       (g$datum->syntax$7710$7lS0C
                         g$name$9116$7lS0C
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7711$7lS0C g$name$9116$7lS0C))
                             g$suffix$9117$7lS0C)))))))
          ((case-lambda
             ((g$t$9094$7lS0C)
              ((case-lambda
                 ((g$ls/false$9095$7lS0C)
                  (if (if g$ls/false$9095$7lS0C
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9096$7lS0C
                                 g$name$9097$7lS0C
                                 g$super$9098$7lS0C
                                 g$constructor$9099$7lS0C
                                 g$predicate$9100$7lS0C
                                 g$field*$9101$7lS0C
                                 g$accessor*$9102$7lS0C)
                               (if (g$id?$7318$7lS0C g$name$9097$7lS0C)
                                 (if (g$id?$7318$7lS0C g$super$9098$7lS0C)
                                   (if (g$id?$7318$7lS0C
                                         g$constructor$9099$7lS0C)
                                     (if (g$id?$7318$7lS0C
                                           g$predicate$9100$7lS0C)
                                       (if (g$for-all$5057$7lS0C
                                             g$id?$7318$7lS0C
                                             g$field*$9101$7lS0C)
                                         (begin
                                           '#f
                                           (g$for-all$5057$7lS0C
                                             g$id?$7318$7lS0C
                                             g$accessor*$9102$7lS0C))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9095$7lS0C))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9103$7lS0C
                           g$name$9104$7lS0C
                           g$super$9105$7lS0C
                           g$constructor$9106$7lS0C
                           g$predicate$9107$7lS0C
                           g$field*$9108$7lS0C
                           g$accessor*$9109$7lS0C)
                         ((case-lambda
                            ((g$aux-accessor*$9110$7lS0C)
                             (g$bless$7559$7lS0C
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9104$7lS0C
                                         g$constructor$9106$7lS0C
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9105$7lS0C)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5059$7lS0C
                                               (case-lambda
                                                 ((g$field$9111$7lS0C
                                                    g$aux$9112$7lS0C)
                                                  (list
                                                    'immutable
                                                    g$field$9111$7lS0C
                                                    g$aux$9112$7lS0C)))
                                               g$field*$9108$7lS0C
                                               g$aux-accessor*$9110$7lS0C))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9107$7lS0C
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9104$7lS0C)))
                                     (g$map$5059$7lS0C
                                       (case-lambda
                                         ((g$accessor$9113$7lS0C
                                            g$aux$9114$7lS0C)
                                          (list
                                            'define
                                            g$accessor$9113$7lS0C
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$9104$7lS0C)
                                              g$aux$9114$7lS0C))))
                                       g$accessor*$9109$7lS0C
                                       g$aux-accessor*$9110$7lS0C)))))))
                          (g$map$5059$7lS0C
                            (case-lambda ((g$x$9115$7lS0C) (gensym)))
                            g$accessor*$9109$7lS0C))))
                      g$ls/false$9095$7lS0C)
                    (g$syntax-violation$7708$7lS0C
                      '#f
                      '"invalid syntax"
                      g$t$9094$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C
                 g$t$9094$7lS0C
                 '(any any any any any . #(each (any any)))))))
           g$x$9092$7lS0C)))))
   (g$incorrect-usage-macro$7592$7lS0C
     g$incorrect-usage-macro$11092$7lS0C
     (case-lambda
       ((g$e$9118$7lS0C)
        (g$syntax-violation$7708$7lS0C
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9118$7lS0C))))
   (g$parameterize-macro$7593$7lS0C
     g$parameterize-macro$11093$7lS0C
     (case-lambda
       ((g$e$9119$7lS0C)
        ((case-lambda
           ((g$t$9120$7lS0C)
            ((case-lambda
               ((g$ls/false$9121$7lS0C)
                (if g$ls/false$9121$7lS0C
                  (apply
                    (case-lambda
                      ((g$b$9122$7lS0C g$b*$9123$7lS0C)
                       (g$bless$7559$7lS0C
                         (cons
                           'let
                           (cons '() (cons g$b$9122$7lS0C g$b*$9123$7lS0C))))))
                    g$ls/false$9121$7lS0C)
                  ((case-lambda
                     ((g$t$9124$7lS0C)
                      ((case-lambda
                         ((g$ls/false$9125$7lS0C)
                          (if g$ls/false$9125$7lS0C
                            (apply
                              (case-lambda
                                ((g$olhs*$9126$7lS0C
                                   g$orhs*$9127$7lS0C
                                   g$b$9128$7lS0C
                                   g$b*$9129$7lS0C)
                                 ((case-lambda
                                    ((g$lhs*$9130$7lS0C g$rhs*$9131$7lS0C)
                                     (g$bless$7559$7lS0C
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9130$7lS0C
                                             g$rhs*$9131$7lS0C)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5059$7lS0C
                                                       (case-lambda
                                                         ((g$lhs$9132$7lS0C
                                                            g$rhs$9133$7lS0C)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$9132$7lS0C)))
                                                            (list
                                                              g$lhs$9132$7lS0C
                                                              g$rhs$9133$7lS0C)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$9133$7lS0C
                                                                '(t))))))
                                                       g$lhs*$9130$7lS0C
                                                       g$rhs*$9131$7lS0C)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9128$7lS0C
                                                         g$b*$9129$7lS0C)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9126$7lS0C
                                           g$orhs*$9127$7lS0C)))))
                                  (g$generate-temporaries$7698$7lS0C
                                    g$olhs*$9126$7lS0C)
                                  (g$generate-temporaries$7698$7lS0C
                                    g$orhs*$9127$7lS0C))))
                              g$ls/false$9125$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$9124$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$9124$7lS0C
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9120$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$9120$7lS0C
               '(_ () any . each-any)))))
         g$e$9119$7lS0C))))
   (g$foreign-call-transformer$7594$7lS0C
     g$foreign-call-transformer$11094$7lS0C
     (case-lambda
       ((g$e$9134$7lS0C g$r$9135$7lS0C g$mr$9136$7lS0C)
        ((case-lambda
           ((g$t$9137$7lS0C)
            ((case-lambda
               ((g$ls/false$9138$7lS0C)
                (if g$ls/false$9138$7lS0C
                  (apply
                    (case-lambda
                      ((g$name$9139$7lS0C g$arg*$9140$7lS0C)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7614$7lS0C
                             g$name$9139$7lS0C
                             g$r$9135$7lS0C
                             g$mr$9136$7lS0C)
                           (g$chi-expr*$7612$7lS0C
                             g$arg*$9140$7lS0C
                             g$r$9135$7lS0C
                             g$mr$9136$7lS0C)))))
                    g$ls/false$9138$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$9137$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$9137$7lS0C
               '(_ any . each-any)))))
         g$e$9134$7lS0C))))
   (g$convert-pattern$7595$7lS0C
     g$convert-pattern$11095$7lS0C
     (case-lambda
       ((g$pattern$9141$7lS0C g$keys$9142$7lS0C)
        (letrec* ((g$cvt*$9143$7lS0C
                    (case-lambda
                      ((g$p*$9223$7lS0C g$n$9224$7lS0C g$ids$9225$7lS0C)
                       (if (null? g$p*$9223$7lS0C)
                         (values '() g$ids$9225$7lS0C)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9143$7lS0C
                                (cdr g$p*$9223$7lS0C)
                                g$n$9224$7lS0C
                                g$ids$9225$7lS0C)))
                           (case-lambda
                             ((g$y$9228$7lS0C g$ids$9229$7lS0C)
                              ((case-lambda
                                 ((g$ids$9230$7lS0C g$y$9231$7lS0C)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9144$7lS0C
                                         (car g$p*$9223$7lS0C)
                                         g$n$9224$7lS0C
                                         g$ids$9230$7lS0C)))
                                    (case-lambda
                                      ((g$x$9234$7lS0C g$ids$9235$7lS0C)
                                       ((case-lambda
                                          ((g$ids$9236$7lS0C g$x$9237$7lS0C)
                                           (values
                                             (cons
                                               g$x$9237$7lS0C
                                               g$y$9231$7lS0C)
                                             g$ids$9236$7lS0C)))
                                        g$ids$9235$7lS0C
                                        g$x$9234$7lS0C))))))
                               g$ids$9229$7lS0C
                               g$y$9228$7lS0C))))))))
                  (g$cvt$9144$7lS0C
                    (case-lambda
                      ((g$p$9145$7lS0C g$n$9146$7lS0C g$ids$9147$7lS0C)
                       ((case-lambda
                          ((g$t$9148$7lS0C)
                           ((case-lambda
                              ((g$ls/false$9149$7lS0C)
                               (if (if g$ls/false$9149$7lS0C
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9150$7lS0C)
                                            (g$id?$7318$7lS0C g$id$9150$7lS0C)))
                                         g$ls/false$9149$7lS0C))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9151$7lS0C)
                                      (if (g$bound-id-member?$7325$7lS0C
                                            g$p$9145$7lS0C
                                            g$keys$9142$7lS0C)
                                        (values
                                          (vector 'free-id g$p$9145$7lS0C)
                                          g$ids$9147$7lS0C)
                                        (if (g$free-id=?$7322$7lS0C
                                              g$p$9145$7lS0C
                                              (g$scheme-stx$7539$7lS0C '_))
                                          (values '_ g$ids$9147$7lS0C)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9145$7lS0C
                                                g$n$9146$7lS0C)
                                              g$ids$9147$7lS0C))))))
                                   g$ls/false$9149$7lS0C)
                                 ((case-lambda
                                    ((g$t$9152$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$9153$7lS0C)
                                         (if (if g$ls/false$9153$7lS0C
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9154$7lS0C
                                                        g$dots$9155$7lS0C)
                                                      (g$ellipsis?$7597$7lS0C
                                                        g$dots$9155$7lS0C)))
                                                   g$ls/false$9153$7lS0C))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9156$7lS0C
                                                  g$dots$9157$7lS0C)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9144$7lS0C
                                                       g$p$9156$7lS0C
                                                       (+ g$n$9146$7lS0C '1)
                                                       g$ids$9147$7lS0C)))
                                                  (case-lambda
                                                    ((g$p$9160$7lS0C
                                                       g$ids$9161$7lS0C)
                                                     ((case-lambda
                                                        ((g$ids$9162$7lS0C
                                                           g$p$9163$7lS0C)
                                                         (values
                                                           (if (eq? g$p$9163$7lS0C
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9163$7lS0C))
                                                           g$ids$9162$7lS0C)))
                                                      g$ids$9161$7lS0C
                                                      g$p$9160$7lS0C))))))
                                             g$ls/false$9153$7lS0C)
                                           ((case-lambda
                                              ((g$t$9164$7lS0C)
                                               ((case-lambda
                                                  ((g$ls/false$9165$7lS0C)
                                                   (if (if g$ls/false$9165$7lS0C
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9166$7lS0C
                                                                  g$dots$9167$7lS0C
                                                                  g$ys$9168$7lS0C
                                                                  g$z$9169$7lS0C)
                                                                (g$ellipsis?$7597$7lS0C
                                                                  g$dots$9167$7lS0C)))
                                                             g$ls/false$9165$7lS0C))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9170$7lS0C
                                                            g$dots$9171$7lS0C
                                                            g$ys$9172$7lS0C
                                                            g$z$9173$7lS0C)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9144$7lS0C
                                                                 g$z$9173$7lS0C
                                                                 g$n$9146$7lS0C
                                                                 g$ids$9147$7lS0C)))
                                                            (case-lambda
                                                              ((g$z$9176$7lS0C
                                                                 g$ids$9177$7lS0C)
                                                               ((case-lambda
                                                                  ((g$ids$9178$7lS0C
                                                                     g$z$9179$7lS0C)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9143$7lS0C
                                                                          g$ys$9172$7lS0C
                                                                          g$n$9146$7lS0C
                                                                          g$ids$9178$7lS0C)))
                                                                     (case-lambda
                                                                       ((g$ys$9182$7lS0C
                                                                          g$ids$9183$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$ids$9184$7lS0C
                                                                              g$ys$9185$7lS0C)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9144$7lS0C
                                                                                   g$x$9170$7lS0C
                                                                                   (+ g$n$9146$7lS0C
                                                                                      '1)
                                                                                   g$ids$9184$7lS0C)))
                                                                              (case-lambda
                                                                                ((g$x$9188$7lS0C
                                                                                   g$ids$9189$7lS0C)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9190$7lS0C
                                                                                       g$x$9191$7lS0C)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9191$7lS0C
                                                                                         (reverse
                                                                                           g$ys$9185$7lS0C)
                                                                                         g$z$9179$7lS0C)
                                                                                       g$ids$9190$7lS0C)))
                                                                                  g$ids$9189$7lS0C
                                                                                  g$x$9188$7lS0C))))))
                                                                         g$ids$9183$7lS0C
                                                                         g$ys$9182$7lS0C))))))
                                                                g$ids$9177$7lS0C
                                                                g$z$9176$7lS0C))))))
                                                       g$ls/false$9165$7lS0C)
                                                     ((case-lambda
                                                        ((g$t$9192$7lS0C)
                                                         ((case-lambda
                                                            ((g$ls/false$9193$7lS0C)
                                                             (if g$ls/false$9193$7lS0C
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9194$7lS0C
                                                                      g$y$9195$7lS0C)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9144$7lS0C
                                                                           g$y$9195$7lS0C
                                                                           g$n$9146$7lS0C
                                                                           g$ids$9147$7lS0C)))
                                                                      (case-lambda
                                                                        ((g$y$9198$7lS0C
                                                                           g$ids$9199$7lS0C)
                                                                         ((case-lambda
                                                                            ((g$ids$9200$7lS0C
                                                                               g$y$9201$7lS0C)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9144$7lS0C
                                                                                    g$x$9194$7lS0C
                                                                                    g$n$9146$7lS0C
                                                                                    g$ids$9200$7lS0C)))
                                                                               (case-lambda
                                                                                 ((g$x$9204$7lS0C
                                                                                    g$ids$9205$7lS0C)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9206$7lS0C
                                                                                        g$x$9207$7lS0C)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9207$7lS0C
                                                                                          g$y$9201$7lS0C)
                                                                                        g$ids$9206$7lS0C)))
                                                                                   g$ids$9205$7lS0C
                                                                                   g$x$9204$7lS0C))))))
                                                                          g$ids$9199$7lS0C
                                                                          g$y$9198$7lS0C))))))
                                                                 g$ls/false$9193$7lS0C)
                                                               ((case-lambda
                                                                  ((g$t$9208$7lS0C)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9209$7lS0C)
                                                                       (if g$ls/false$9209$7lS0C
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9147$7lS0C)))
                                                                           g$ls/false$9209$7lS0C)
                                                                         ((case-lambda
                                                                            ((g$t$9210$7lS0C)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9211$7lS0C)
                                                                                 (if (if g$ls/false$9211$7lS0C
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9212$7lS0C)
                                                                                              (not (g$stx?$7290$7lS0C
                                                                                                     g$p$9212$7lS0C))))
                                                                                           g$ls/false$9211$7lS0C))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9213$7lS0C)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9144$7lS0C
                                                                                               g$p$9213$7lS0C
                                                                                               g$n$9146$7lS0C
                                                                                               g$ids$9147$7lS0C)))
                                                                                          (case-lambda
                                                                                            ((g$p$9216$7lS0C
                                                                                               g$ids$9217$7lS0C)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9218$7lS0C
                                                                                                   g$p$9219$7lS0C)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9219$7lS0C)
                                                                                                   g$ids$9218$7lS0C)))
                                                                                              g$ids$9217$7lS0C
                                                                                              g$p$9216$7lS0C))))))
                                                                                     g$ls/false$9211$7lS0C)
                                                                                   ((case-lambda
                                                                                      ((g$t$9220$7lS0C)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9221$7lS0C)
                                                                                           (if g$ls/false$9221$7lS0C
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9222$7lS0C)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7329$7lS0C
                                                                                                        g$datum$9222$7lS0C))
                                                                                                    g$ids$9147$7lS0C)))
                                                                                               g$ls/false$9221$7lS0C)
                                                                                             (g$syntax-violation$7708$7lS0C
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9220$7lS0C))))
                                                                                        (g$syntax-dispatch$7596$7lS0C
                                                                                          g$t$9220$7lS0C
                                                                                          'any))))
                                                                                    g$t$9210$7lS0C))))
                                                                              (g$syntax-dispatch$7596$7lS0C
                                                                                g$t$9210$7lS0C
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9208$7lS0C))))
                                                                    (g$syntax-dispatch$7596$7lS0C
                                                                      g$t$9208$7lS0C
                                                                      '()))))
                                                                g$t$9192$7lS0C))))
                                                          (g$syntax-dispatch$7596$7lS0C
                                                            g$t$9192$7lS0C
                                                            '(any . any)))))
                                                      g$t$9164$7lS0C))))
                                                (g$syntax-dispatch$7596$7lS0C
                                                  g$t$9164$7lS0C
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9152$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$9152$7lS0C
                                        '(any any)))))
                                  g$t$9148$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$9148$7lS0C
                              'any))))
                        g$p$9145$7lS0C)))))
          (g$cvt$9144$7lS0C g$pattern$9141$7lS0C '0 '())))))
   (g$syntax-dispatch$7596$7lS0C
     g$syntax-dispatch$11096$7lS0C
     ((case-lambda
        (()
         (letrec* ((g$stx^$9238$7lS0C
                     (case-lambda
                       ((g$e$9348$7lS0C
                          g$m*$9349$7lS0C
                          g$s*$9350$7lS0C
                          g$ae*$9351$7lS0C)
                        (if (if (null? g$m*$9349$7lS0C)
                              (if (null? g$s*$9350$7lS0C)
                                (begin '#f (null? g$ae*$9351$7lS0C))
                                '#f)
                              '#f)
                          g$e$9348$7lS0C
                          (g$mkstx$7306$7lS0C
                            g$e$9348$7lS0C
                            g$m*$9349$7lS0C
                            g$s*$9350$7lS0C
                            g$ae*$9351$7lS0C)))))
                   (g$match-each$9239$7lS0C
                     (case-lambda
                       ((g$e$9332$7lS0C
                          g$p$9333$7lS0C
                          g$m*$9334$7lS0C
                          g$s*$9335$7lS0C
                          g$ae*$9336$7lS0C)
                        (if (pair? g$e$9332$7lS0C)
                          ((case-lambda
                             ((g$first$9337$7lS0C)
                              (if g$first$9337$7lS0C
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9338$7lS0C)
                                      (if g$rest$9338$7lS0C
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9337$7lS0C
                                            g$rest$9338$7lS0C))
                                        '#f)))
                                   (g$match-each$9239$7lS0C
                                     (cdr g$e$9332$7lS0C)
                                     g$p$9333$7lS0C
                                     g$m*$9334$7lS0C
                                     g$s*$9335$7lS0C
                                     g$ae*$9336$7lS0C)))
                                '#f)))
                           (g$match$9245$7lS0C
                             (car g$e$9332$7lS0C)
                             g$p$9333$7lS0C
                             g$m*$9334$7lS0C
                             g$s*$9335$7lS0C
                             g$ae*$9336$7lS0C
                             '()))
                          (if (null? g$e$9332$7lS0C)
                            '()
                            (if (g$stx?$7290$7lS0C g$e$9332$7lS0C)
                              (if (not (g$top-marked?$7256$7lS0C
                                         g$m*$9334$7lS0C))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7305$7lS0C
                                         g$m*$9334$7lS0C
                                         g$s*$9335$7lS0C
                                         g$ae*$9336$7lS0C
                                         g$e$9332$7lS0C)))
                                    (case-lambda
                                      ((g$m*$9342$7lS0C
                                         g$s*$9343$7lS0C
                                         g$ae*$9344$7lS0C)
                                       ((case-lambda
                                          ((g$ae*$9345$7lS0C
                                             g$s*$9346$7lS0C
                                             g$m*$9347$7lS0C)
                                           (g$match-each$9239$7lS0C
                                             (g$stx-expr$7292$7lS0C
                                               g$e$9332$7lS0C)
                                             g$p$9333$7lS0C
                                             g$m*$9347$7lS0C
                                             g$s*$9346$7lS0C
                                             g$ae*$9345$7lS0C)))
                                        g$ae*$9344$7lS0C
                                        g$s*$9343$7lS0C
                                        g$m*$9342$7lS0C)))))
                                '#f)
                              (if (annotation? g$e$9332$7lS0C)
                                (g$match-each$9239$7lS0C
                                  (annotation-expression g$e$9332$7lS0C)
                                  g$p$9333$7lS0C
                                  g$m*$9334$7lS0C
                                  g$s*$9335$7lS0C
                                  g$ae*$9336$7lS0C)
                                '#f)))))))
                   (g$match-each+$9240$7lS0C
                     (case-lambda
                       ((g$e$9300$7lS0C
                          g$x-pat$9301$7lS0C
                          g$y-pat$9302$7lS0C
                          g$z-pat$9303$7lS0C
                          g$m*$9304$7lS0C
                          g$s*$9305$7lS0C
                          g$ae*$9306$7lS0C
                          g$r$9307$7lS0C)
                        ((letrec ((g$f$9308$7lS0C
                                    (case-lambda
                                      ((g$e$9309$7lS0C
                                         g$m*$9310$7lS0C
                                         g$s*$9311$7lS0C
                                         g$ae*$9312$7lS0C)
                                       (if (pair? g$e$9309$7lS0C)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9308$7lS0C
                                                (cdr g$e$9309$7lS0C)
                                                g$m*$9310$7lS0C
                                                g$s*$9311$7lS0C
                                                g$ae*$9312$7lS0C)))
                                           (case-lambda
                                             ((g$xr*$9316$7lS0C
                                                g$y-pat$9317$7lS0C
                                                g$r$9318$7lS0C)
                                              ((case-lambda
                                                 ((g$r$9319$7lS0C
                                                    g$y-pat$9320$7lS0C
                                                    g$xr*$9321$7lS0C)
                                                  (if g$r$9319$7lS0C
                                                    (if (null?
                                                          g$y-pat$9320$7lS0C)
                                                      ((case-lambda
                                                         ((g$xr$9322$7lS0C)
                                                          (if g$xr$9322$7lS0C
                                                            (values
                                                              (cons
                                                                g$xr$9322$7lS0C
                                                                g$xr*$9321$7lS0C)
                                                              g$y-pat$9320$7lS0C
                                                              g$r$9319$7lS0C)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9245$7lS0C
                                                         (car g$e$9309$7lS0C)
                                                         g$x-pat$9301$7lS0C
                                                         g$m*$9310$7lS0C
                                                         g$s*$9311$7lS0C
                                                         g$ae*$9312$7lS0C
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9320$7lS0C)
                                                        (g$match$9245$7lS0C
                                                          (car g$e$9309$7lS0C)
                                                          (car g$y-pat$9320$7lS0C)
                                                          g$m*$9310$7lS0C
                                                          g$s*$9311$7lS0C
                                                          g$ae*$9312$7lS0C
                                                          g$r$9319$7lS0C)))
                                                    (values '#f '#f '#f))))
                                               g$r$9318$7lS0C
                                               g$y-pat$9317$7lS0C
                                               g$xr*$9316$7lS0C))))
                                         (if (g$stx?$7290$7lS0C g$e$9309$7lS0C)
                                           (if (g$top-marked?$7256$7lS0C
                                                 g$m*$9310$7lS0C)
                                             (values
                                               '()
                                               g$y-pat$9302$7lS0C
                                               (g$match$9245$7lS0C
                                                 g$e$9309$7lS0C
                                                 g$z-pat$9303$7lS0C
                                                 g$m*$9310$7lS0C
                                                 g$s*$9311$7lS0C
                                                 g$ae*$9312$7lS0C
                                                 g$r$9307$7lS0C))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7305$7lS0C
                                                    g$m*$9310$7lS0C
                                                    g$s*$9311$7lS0C
                                                    g$ae*$9312$7lS0C
                                                    g$e$9309$7lS0C)))
                                               (case-lambda
                                                 ((g$m*$9326$7lS0C
                                                    g$s*$9327$7lS0C
                                                    g$ae*$9328$7lS0C)
                                                  ((case-lambda
                                                     ((g$ae*$9329$7lS0C
                                                        g$s*$9330$7lS0C
                                                        g$m*$9331$7lS0C)
                                                      (g$f$9308$7lS0C
                                                        (g$stx-expr$7292$7lS0C
                                                          g$e$9309$7lS0C)
                                                        g$m*$9331$7lS0C
                                                        g$s*$9330$7lS0C
                                                        g$ae*$9329$7lS0C)))
                                                   g$ae*$9328$7lS0C
                                                   g$s*$9327$7lS0C
                                                   g$m*$9326$7lS0C)))))
                                           (if (annotation? g$e$9309$7lS0C)
                                             (g$f$9308$7lS0C
                                               (annotation-expression
                                                 g$e$9309$7lS0C)
                                               g$m*$9310$7lS0C
                                               g$s*$9311$7lS0C
                                               g$ae*$9312$7lS0C)
                                             (values
                                               '()
                                               g$y-pat$9302$7lS0C
                                               (g$match$9245$7lS0C
                                                 g$e$9309$7lS0C
                                                 g$z-pat$9303$7lS0C
                                                 g$m*$9310$7lS0C
                                                 g$s*$9311$7lS0C
                                                 g$ae*$9312$7lS0C
                                                 g$r$9307$7lS0C)))))))))
                           g$f$9308$7lS0C)
                         g$e$9300$7lS0C
                         g$m*$9304$7lS0C
                         g$s*$9305$7lS0C
                         g$ae*$9306$7lS0C))))
                   (g$match-each-any$9241$7lS0C
                     (case-lambda
                       ((g$e$9286$7lS0C
                          g$m*$9287$7lS0C
                          g$s*$9288$7lS0C
                          g$ae*$9289$7lS0C)
                        (if (pair? g$e$9286$7lS0C)
                          ((case-lambda
                             ((g$l$9290$7lS0C)
                              (if g$l$9290$7lS0C
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9238$7lS0C
                                      (car g$e$9286$7lS0C)
                                      g$m*$9287$7lS0C
                                      g$s*$9288$7lS0C
                                      g$ae*$9289$7lS0C)
                                    g$l$9290$7lS0C))
                                '#f)))
                           (g$match-each-any$9241$7lS0C
                             (cdr g$e$9286$7lS0C)
                             g$m*$9287$7lS0C
                             g$s*$9288$7lS0C
                             g$ae*$9289$7lS0C))
                          (if (null? g$e$9286$7lS0C)
                            '()
                            (if (g$stx?$7290$7lS0C g$e$9286$7lS0C)
                              (if (not (g$top-marked?$7256$7lS0C
                                         g$m*$9287$7lS0C))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7305$7lS0C
                                         g$m*$9287$7lS0C
                                         g$s*$9288$7lS0C
                                         g$ae*$9289$7lS0C
                                         g$e$9286$7lS0C)))
                                    (case-lambda
                                      ((g$m*$9294$7lS0C
                                         g$s*$9295$7lS0C
                                         g$ae*$9296$7lS0C)
                                       ((case-lambda
                                          ((g$ae*$9297$7lS0C
                                             g$s*$9298$7lS0C
                                             g$m*$9299$7lS0C)
                                           (g$match-each-any$9241$7lS0C
                                             (g$stx-expr$7292$7lS0C
                                               g$e$9286$7lS0C)
                                             g$m*$9299$7lS0C
                                             g$s*$9298$7lS0C
                                             g$ae*$9297$7lS0C)))
                                        g$ae*$9296$7lS0C
                                        g$s*$9295$7lS0C
                                        g$m*$9294$7lS0C)))))
                                '#f)
                              (if (annotation? g$e$9286$7lS0C)
                                (g$match-each-any$9241$7lS0C
                                  (annotation-expression g$e$9286$7lS0C)
                                  g$m*$9287$7lS0C
                                  g$s*$9288$7lS0C
                                  g$ae*$9289$7lS0C)
                                '#f)))))))
                   (g$match-empty$9242$7lS0C
                     (case-lambda
                       ((g$p$9283$7lS0C g$r$9284$7lS0C)
                        (if (null? g$p$9283$7lS0C)
                          g$r$9284$7lS0C
                          (if (eq? g$p$9283$7lS0C '_)
                            g$r$9284$7lS0C
                            (if (eq? g$p$9283$7lS0C 'any)
                              (cons '() g$r$9284$7lS0C)
                              (if (pair? g$p$9283$7lS0C)
                                (g$match-empty$9242$7lS0C
                                  (car g$p$9283$7lS0C)
                                  (g$match-empty$9242$7lS0C
                                    (cdr g$p$9283$7lS0C)
                                    g$r$9284$7lS0C))
                                (if (eq? g$p$9283$7lS0C 'each-any)
                                  (cons '() g$r$9284$7lS0C)
                                  ((case-lambda
                                     ((g$t$9285$7lS0C)
                                      (if (g$memv$5052$7lS0C
                                            g$t$9285$7lS0C
                                            '(each))
                                        (g$match-empty$9242$7lS0C
                                          (vector-ref g$p$9283$7lS0C '1)
                                          g$r$9284$7lS0C)
                                        (if (g$memv$5052$7lS0C
                                              g$t$9285$7lS0C
                                              '(each+))
                                          (g$match-empty$9242$7lS0C
                                            (vector-ref g$p$9283$7lS0C '1)
                                            (g$match-empty$9242$7lS0C
                                              (reverse
                                                (vector-ref g$p$9283$7lS0C '2))
                                              (g$match-empty$9242$7lS0C
                                                (vector-ref g$p$9283$7lS0C '3)
                                                g$r$9284$7lS0C)))
                                          (if (g$memv$5052$7lS0C
                                                g$t$9285$7lS0C
                                                '(free-id atom))
                                            g$r$9284$7lS0C
                                            (if (g$memv$5052$7lS0C
                                                  g$t$9285$7lS0C
                                                  '(scheme-id atom))
                                              g$r$9284$7lS0C
                                              (if (g$memv$5052$7lS0C
                                                    g$t$9285$7lS0C
                                                    '(vector))
                                                (g$match-empty$9242$7lS0C
                                                  (vector-ref g$p$9283$7lS0C '1)
                                                  g$r$9284$7lS0C)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9283$7lS0C))))))))
                                   (vector-ref g$p$9283$7lS0C '0))))))))))
                   (g$combine$9243$7lS0C
                     (case-lambda
                       ((g$r*$9281$7lS0C g$r$9282$7lS0C)
                        (if (null? (car g$r*$9281$7lS0C))
                          g$r$9282$7lS0C
                          (cons
                            (g$map$5059$7lS0C car g$r*$9281$7lS0C)
                            (g$combine$9243$7lS0C
                              (g$map$5059$7lS0C cdr g$r*$9281$7lS0C)
                              g$r$9282$7lS0C))))))
                   (g$match*$9244$7lS0C
                     (case-lambda
                       ((g$e$9263$7lS0C
                          g$p$9264$7lS0C
                          g$m*$9265$7lS0C
                          g$s*$9266$7lS0C
                          g$ae*$9267$7lS0C
                          g$r$9268$7lS0C)
                        (if (null? g$p$9264$7lS0C)
                          (if (null? g$e$9263$7lS0C)
                            (begin '#f g$r$9268$7lS0C)
                            '#f)
                          (if (pair? g$p$9264$7lS0C)
                            (if (pair? g$e$9263$7lS0C)
                              (begin
                                '#f
                                (g$match$9245$7lS0C
                                  (car g$e$9263$7lS0C)
                                  (car g$p$9264$7lS0C)
                                  g$m*$9265$7lS0C
                                  g$s*$9266$7lS0C
                                  g$ae*$9267$7lS0C
                                  (g$match$9245$7lS0C
                                    (cdr g$e$9263$7lS0C)
                                    (cdr g$p$9264$7lS0C)
                                    g$m*$9265$7lS0C
                                    g$s*$9266$7lS0C
                                    g$ae*$9267$7lS0C
                                    g$r$9268$7lS0C)))
                              '#f)
                            (if (eq? g$p$9264$7lS0C 'each-any)
                              ((case-lambda
                                 ((g$l$9269$7lS0C)
                                  (if g$l$9269$7lS0C
                                    (begin
                                      '#f
                                      (cons g$l$9269$7lS0C g$r$9268$7lS0C))
                                    '#f)))
                               (g$match-each-any$9241$7lS0C
                                 g$e$9263$7lS0C
                                 g$m*$9265$7lS0C
                                 g$s*$9266$7lS0C
                                 g$ae*$9267$7lS0C))
                              ((case-lambda
                                 ((g$t$9270$7lS0C)
                                  (if (g$memv$5052$7lS0C g$t$9270$7lS0C '(each))
                                    (if (null? g$e$9263$7lS0C)
                                      (g$match-empty$9242$7lS0C
                                        (vector-ref g$p$9264$7lS0C '1)
                                        g$r$9268$7lS0C)
                                      ((case-lambda
                                         ((g$r*$9271$7lS0C)
                                          (if g$r*$9271$7lS0C
                                            (begin
                                              '#f
                                              (g$combine$9243$7lS0C
                                                g$r*$9271$7lS0C
                                                g$r$9268$7lS0C))
                                            '#f)))
                                       (g$match-each$9239$7lS0C
                                         g$e$9263$7lS0C
                                         (vector-ref g$p$9264$7lS0C '1)
                                         g$m*$9265$7lS0C
                                         g$s*$9266$7lS0C
                                         g$ae*$9267$7lS0C)))
                                    (if (g$memv$5052$7lS0C
                                          g$t$9270$7lS0C
                                          '(free-id))
                                      (if (symbol? g$e$9263$7lS0C)
                                        (if (g$top-marked?$7256$7lS0C
                                              g$m*$9265$7lS0C)
                                          (if (g$free-id=?$7322$7lS0C
                                                (g$stx^$9238$7lS0C
                                                  g$e$9263$7lS0C
                                                  g$m*$9265$7lS0C
                                                  g$s*$9266$7lS0C
                                                  g$ae*$9267$7lS0C)
                                                (vector-ref g$p$9264$7lS0C '1))
                                            (begin '#f g$r$9268$7lS0C)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5052$7lS0C
                                            g$t$9270$7lS0C
                                            '(scheme-id))
                                        (if (symbol? g$e$9263$7lS0C)
                                          (if (g$top-marked?$7256$7lS0C
                                                g$m*$9265$7lS0C)
                                            (if (g$free-id=?$7322$7lS0C
                                                  (g$stx^$9238$7lS0C
                                                    g$e$9263$7lS0C
                                                    g$m*$9265$7lS0C
                                                    g$s*$9266$7lS0C
                                                    g$ae*$9267$7lS0C)
                                                  (g$scheme-stx$7539$7lS0C
                                                    (vector-ref
                                                      g$p$9264$7lS0C
                                                      '1)))
                                              (begin '#f g$r$9268$7lS0C)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5052$7lS0C
                                              g$t$9270$7lS0C
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9240$7lS0C
                                                 g$e$9263$7lS0C
                                                 (vector-ref g$p$9264$7lS0C '1)
                                                 (vector-ref g$p$9264$7lS0C '2)
                                                 (vector-ref g$p$9264$7lS0C '3)
                                                 g$m*$9265$7lS0C
                                                 g$s*$9266$7lS0C
                                                 g$ae*$9267$7lS0C
                                                 g$r$9268$7lS0C)))
                                            (case-lambda
                                              ((g$xr*$9275$7lS0C
                                                 g$y-pat$9276$7lS0C
                                                 g$r$9277$7lS0C)
                                               ((case-lambda
                                                  ((g$r$9278$7lS0C
                                                     g$y-pat$9279$7lS0C
                                                     g$xr*$9280$7lS0C)
                                                   (if g$r$9278$7lS0C
                                                     (if (null?
                                                           g$y-pat$9279$7lS0C)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9280$7lS0C)
                                                           (g$match-empty$9242$7lS0C
                                                             (vector-ref
                                                               g$p$9264$7lS0C
                                                               '1)
                                                             g$r$9278$7lS0C)
                                                           (g$combine$9243$7lS0C
                                                             g$xr*$9280$7lS0C
                                                             g$r$9278$7lS0C)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9277$7lS0C
                                                g$y-pat$9276$7lS0C
                                                g$xr*$9275$7lS0C))))
                                          (if (g$memv$5052$7lS0C
                                                g$t$9270$7lS0C
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref g$p$9264$7lS0C '1)
                                                  (g$strip$7328$7lS0C
                                                    g$e$9263$7lS0C
                                                    g$m*$9265$7lS0C))
                                              (begin '#f g$r$9268$7lS0C)
                                              '#f)
                                            (if (g$memv$5052$7lS0C
                                                  g$t$9270$7lS0C
                                                  '(vector))
                                              (if (vector? g$e$9263$7lS0C)
                                                (begin
                                                  '#f
                                                  (g$match$9245$7lS0C
                                                    (vector->list
                                                      g$e$9263$7lS0C)
                                                    (vector-ref
                                                      g$p$9264$7lS0C
                                                      '1)
                                                    g$m*$9265$7lS0C
                                                    g$s*$9266$7lS0C
                                                    g$ae*$9267$7lS0C
                                                    g$r$9268$7lS0C))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9264$7lS0C)))))))))
                               (vector-ref g$p$9264$7lS0C '0))))))))
                   (g$match$9245$7lS0C
                     (case-lambda
                       ((g$e$9248$7lS0C
                          g$p$9249$7lS0C
                          g$m*$9250$7lS0C
                          g$s*$9251$7lS0C
                          g$ae*$9252$7lS0C
                          g$r$9253$7lS0C)
                        (if (not g$r$9253$7lS0C)
                          '#f
                          (if (eq? g$p$9249$7lS0C '_)
                            g$r$9253$7lS0C
                            (if (eq? g$p$9249$7lS0C 'any)
                              (cons
                                (g$stx^$9238$7lS0C
                                  g$e$9248$7lS0C
                                  g$m*$9250$7lS0C
                                  g$s*$9251$7lS0C
                                  g$ae*$9252$7lS0C)
                                g$r$9253$7lS0C)
                              (if (g$stx?$7290$7lS0C g$e$9248$7lS0C)
                                (if (not (g$top-marked?$7256$7lS0C
                                           g$m*$9250$7lS0C))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7305$7lS0C
                                           g$m*$9250$7lS0C
                                           g$s*$9251$7lS0C
                                           g$ae*$9252$7lS0C
                                           g$e$9248$7lS0C)))
                                      (case-lambda
                                        ((g$m*$9257$7lS0C
                                           g$s*$9258$7lS0C
                                           g$ae*$9259$7lS0C)
                                         ((case-lambda
                                            ((g$ae*$9260$7lS0C
                                               g$s*$9261$7lS0C
                                               g$m*$9262$7lS0C)
                                             (g$match$9245$7lS0C
                                               (g$stx-expr$7292$7lS0C
                                                 g$e$9248$7lS0C)
                                               g$p$9249$7lS0C
                                               g$m*$9262$7lS0C
                                               g$s*$9261$7lS0C
                                               g$ae*$9260$7lS0C
                                               g$r$9253$7lS0C)))
                                          g$ae*$9259$7lS0C
                                          g$s*$9258$7lS0C
                                          g$m*$9257$7lS0C)))))
                                  '#f)
                                (if (annotation? g$e$9248$7lS0C)
                                  (g$match$9245$7lS0C
                                    (annotation-expression g$e$9248$7lS0C)
                                    g$p$9249$7lS0C
                                    g$m*$9250$7lS0C
                                    g$s*$9251$7lS0C
                                    g$ae*$9252$7lS0C
                                    g$r$9253$7lS0C)
                                  (g$match*$9244$7lS0C
                                    g$e$9248$7lS0C
                                    g$p$9249$7lS0C
                                    g$m*$9250$7lS0C
                                    g$s*$9251$7lS0C
                                    g$ae*$9252$7lS0C
                                    g$r$9253$7lS0C))))))))))
           (case-lambda
             ((g$e$9246$7lS0C g$p$9247$7lS0C)
              (g$match$9245$7lS0C
                g$e$9246$7lS0C
                g$p$9247$7lS0C
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7597$7lS0C
     g$ellipsis?$11097$7lS0C
     (case-lambda
       ((g$x$9352$7lS0C)
        (if (g$id?$7318$7lS0C g$x$9352$7lS0C)
          (begin
            '#f
            (g$free-id=?$7322$7lS0C
              g$x$9352$7lS0C
              (g$scheme-stx$7539$7lS0C '...)))
          '#f))))
   (g$underscore?$7598$7lS0C
     g$underscore?$11098$7lS0C
     (case-lambda
       ((g$x$9353$7lS0C)
        (if (g$id?$7318$7lS0C g$x$9353$7lS0C)
          (begin
            '#f
            (g$free-id=?$7322$7lS0C
              g$x$9353$7lS0C
              (g$scheme-stx$7539$7lS0C '_)))
          '#f))))
   (g$verify-literals$7599$7lS0C
     g$verify-literals$11099$7lS0C
     (case-lambda
       ((g$lits$9354$7lS0C g$expr$9355$7lS0C)
        (g$for-each$5060$7lS0C
          (case-lambda
            ((g$x$9356$7lS0C)
             (if ((case-lambda
                    ((g$t$9357$7lS0C)
                     (if g$t$9357$7lS0C
                       g$t$9357$7lS0C
                       ((case-lambda
                          ((g$t$9358$7lS0C)
                           (if g$t$9358$7lS0C
                             g$t$9358$7lS0C
                             (begin
                               '#f
                               (g$underscore?$7598$7lS0C g$x$9356$7lS0C)))))
                        (g$ellipsis?$7597$7lS0C g$x$9356$7lS0C)))))
                  (not (g$id?$7318$7lS0C g$x$9356$7lS0C)))
               (g$syntax-violation$7708$7lS0C
                 '#f
                 '"invalid literal"
                 g$expr$9355$7lS0C
                 g$x$9356$7lS0C)
               (void))))
          g$lits$9354$7lS0C))))
   (g$syntax-case-transformer$7600$7lS0C
     g$syntax-case-transformer$11100$7lS0C
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9359$7lS0C
                     (case-lambda
                       ((g$pvars$9416$7lS0C
                          g$expr$9417$7lS0C
                          g$y$9418$7lS0C
                          g$r$9419$7lS0C
                          g$mr$9420$7lS0C)
                        ((case-lambda
                           ((g$ids$9421$7lS0C g$levels$9422$7lS0C)
                            ((case-lambda
                               ((g$labels$9423$7lS0C g$new-vars$9424$7lS0C)
                                ((case-lambda
                                   ((g$body$9425$7lS0C)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7244$7lS0C
                                        '#f
                                        g$new-vars$9424$7lS0C
                                        g$body$9425$7lS0C)
                                      g$y$9418$7lS0C)))
                                 (g$chi-expr$7614$7lS0C
                                   (g$add-subst$7308$7lS0C
                                     (g$make-full-rib$7286$7lS0C
                                       g$ids$9421$7lS0C
                                       g$labels$9423$7lS0C)
                                     g$expr$9417$7lS0C)
                                   (append
                                     (g$map$5059$7lS0C
                                       (case-lambda
                                         ((g$label$9426$7lS0C
                                            g$var$9427$7lS0C
                                            g$level$9428$7lS0C)
                                          (cons
                                            g$label$9426$7lS0C
                                            (g$make-binding$7334$7lS0C
                                              'syntax
                                              (cons
                                                g$var$9427$7lS0C
                                                g$level$9428$7lS0C)))))
                                       g$labels$9423$7lS0C
                                       g$new-vars$9424$7lS0C
                                       (g$map$5059$7lS0C
                                         cdr
                                         g$pvars$9416$7lS0C))
                                     g$r$9419$7lS0C)
                                   g$mr$9420$7lS0C))))
                             (g$map$5059$7lS0C
                               g$gen-label$7259$7lS0C
                               g$ids$9421$7lS0C)
                             (g$map$5059$7lS0C
                               g$gen-lexical$7257$7lS0C
                               g$ids$9421$7lS0C))))
                         (g$map$5059$7lS0C car g$pvars$9416$7lS0C)
                         (g$map$5059$7lS0C cdr g$pvars$9416$7lS0C)))))
                   (g$invalid-ids-error$9360$7lS0C
                     (case-lambda
                       ((g$id*$9410$7lS0C g$e$9411$7lS0C g$class$9412$7lS0C)
                        ((letrec ((g$find$9413$7lS0C
                                    (case-lambda
                                      ((g$id*$9414$7lS0C g$ok*$9415$7lS0C)
                                       (if (null? g$id*$9414$7lS0C)
                                         (g$syntax-violation$7708$7lS0C
                                           '#f
                                           '"invalid syntax"
                                           g$e$9411$7lS0C)
                                         (if (g$id?$7318$7lS0C
                                               (car g$id*$9414$7lS0C))
                                           (if (g$bound-id-member?$7325$7lS0C
                                                 (car g$id*$9414$7lS0C)
                                                 g$ok*$9415$7lS0C)
                                             (g$syntax-error$7705$7lS0C
                                               (car g$id*$9414$7lS0C)
                                               '"duplicate "
                                               g$class$9412$7lS0C)
                                             (g$find$9413$7lS0C
                                               (cdr g$id*$9414$7lS0C)
                                               (cons
                                                 (car g$id*$9414$7lS0C)
                                                 g$ok*$9415$7lS0C)))
                                           (g$syntax-error$7705$7lS0C
                                             (car g$id*$9414$7lS0C)
                                             '"invalid "
                                             g$class$9412$7lS0C)))))))
                           g$find$9413$7lS0C)
                         g$id*$9410$7lS0C
                         '()))))
                   (g$gen-clause$9361$7lS0C
                     (case-lambda
                       ((g$x$9390$7lS0C
                          g$keys$9391$7lS0C
                          g$clauses$9392$7lS0C
                          g$r$9393$7lS0C
                          g$mr$9394$7lS0C
                          g$pat$9395$7lS0C
                          g$fender$9396$7lS0C
                          g$expr$9397$7lS0C)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7595$7lS0C
                               g$pat$9395$7lS0C
                               g$keys$9391$7lS0C)))
                          (case-lambda
                            ((g$p$9400$7lS0C g$pvars$9401$7lS0C)
                             ((case-lambda
                                ((g$pvars$9402$7lS0C g$p$9403$7lS0C)
                                 (if (not (g$distinct-bound-ids?$7324$7lS0C
                                            (g$map$5059$7lS0C
                                              car
                                              g$pvars$9402$7lS0C)))
                                   (g$invalid-ids-error$9360$7lS0C
                                     (g$map$5059$7lS0C car g$pvars$9402$7lS0C)
                                     g$pat$9395$7lS0C
                                     '"pattern variable")
                                   (if (not (g$for-all$5057$7lS0C
                                              (case-lambda
                                                ((g$x$9404$7lS0C)
                                                 (not (g$ellipsis?$7597$7lS0C
                                                        (car g$x$9404$7lS0C)))))
                                              g$pvars$9402$7lS0C))
                                     (g$syntax-violation$7708$7lS0C
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9395$7lS0C)
                                     ((case-lambda
                                        ((g$y$9405$7lS0C)
                                         ((case-lambda
                                            ((g$test$9406$7lS0C)
                                             ((case-lambda
                                                ((g$conseq$9407$7lS0C)
                                                 ((case-lambda
                                                    ((g$altern$9408$7lS0C)
                                                     (list
                                                       (g$build-lambda$7244$7lS0C
                                                         '#f
                                                         (list g$y$9405$7lS0C)
                                                         (list
                                                           'if
                                                           g$test$9406$7lS0C
                                                           g$conseq$9407$7lS0C
                                                           g$altern$9408$7lS0C))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9390$7lS0C
                                                         (list
                                                           'quote
                                                           g$p$9403$7lS0C)))))
                                                  (g$gen-syntax-case$9362$7lS0C
                                                    g$x$9390$7lS0C
                                                    g$keys$9391$7lS0C
                                                    g$clauses$9392$7lS0C
                                                    g$r$9393$7lS0C
                                                    g$mr$9394$7lS0C))))
                                              (g$build-dispatch-call$9359$7lS0C
                                                g$pvars$9402$7lS0C
                                                g$expr$9397$7lS0C
                                                g$y$9405$7lS0C
                                                g$r$9393$7lS0C
                                                g$mr$9394$7lS0C))))
                                          (if (eq? g$fender$9396$7lS0C '#t)
                                            g$y$9405$7lS0C
                                            ((case-lambda
                                               ((g$call$9409$7lS0C)
                                                (list
                                                  'if
                                                  g$y$9405$7lS0C
                                                  g$call$9409$7lS0C
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9359$7lS0C
                                               g$pvars$9402$7lS0C
                                               g$fender$9396$7lS0C
                                               g$y$9405$7lS0C
                                               g$r$9393$7lS0C
                                               g$mr$9394$7lS0C))))))
                                      (g$gen-lexical$7257$7lS0C 'tmp))))))
                              g$pvars$9401$7lS0C
                              g$p$9400$7lS0C)))))))
                   (g$gen-syntax-case$9362$7lS0C
                     (case-lambda
                       ((g$x$9373$7lS0C
                          g$keys$9374$7lS0C
                          g$clauses$9375$7lS0C
                          g$r$9376$7lS0C
                          g$mr$9377$7lS0C)
                        (if (null? g$clauses$9375$7lS0C)
                          (list '(primitive syntax-error) g$x$9373$7lS0C)
                          ((case-lambda
                             ((g$t$9378$7lS0C)
                              ((case-lambda
                                 ((g$ls/false$9379$7lS0C)
                                  (if g$ls/false$9379$7lS0C
                                    (apply
                                      (case-lambda
                                        ((g$pat$9380$7lS0C g$expr$9381$7lS0C)
                                         (if (if (g$id?$7318$7lS0C
                                                   g$pat$9380$7lS0C)
                                               (if (not (g$bound-id-member?$7325$7lS0C
                                                          g$pat$9380$7lS0C
                                                          g$keys$9374$7lS0C))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7597$7lS0C
                                                          g$pat$9380$7lS0C)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7322$7lS0C
                                                 g$pat$9380$7lS0C
                                                 (g$scheme-stx$7539$7lS0C '_))
                                             (g$chi-expr$7614$7lS0C
                                               g$expr$9381$7lS0C
                                               g$r$9376$7lS0C
                                               g$mr$9377$7lS0C)
                                             ((case-lambda
                                                ((g$lab$9382$7lS0C
                                                   g$lex$9383$7lS0C)
                                                 ((case-lambda
                                                    ((g$body$9384$7lS0C)
                                                     (list
                                                       (g$build-lambda$7244$7lS0C
                                                         '#f
                                                         (list g$lex$9383$7lS0C)
                                                         g$body$9384$7lS0C)
                                                       g$x$9373$7lS0C)))
                                                  (g$chi-expr$7614$7lS0C
                                                    (g$add-subst$7308$7lS0C
                                                      (g$make-full-rib$7286$7lS0C
                                                        (list g$pat$9380$7lS0C)
                                                        (list g$lab$9382$7lS0C))
                                                      g$expr$9381$7lS0C)
                                                    (cons
                                                      (cons
                                                        g$lab$9382$7lS0C
                                                        (g$make-binding$7334$7lS0C
                                                          'syntax
                                                          (cons
                                                            g$lex$9383$7lS0C
                                                            '0)))
                                                      g$r$9376$7lS0C)
                                                    g$mr$9377$7lS0C))))
                                              (g$gen-label$7259$7lS0C
                                                g$pat$9380$7lS0C)
                                              (g$gen-lexical$7257$7lS0C
                                                g$pat$9380$7lS0C)))
                                           (g$gen-clause$9361$7lS0C
                                             g$x$9373$7lS0C
                                             g$keys$9374$7lS0C
                                             (cdr g$clauses$9375$7lS0C)
                                             g$r$9376$7lS0C
                                             g$mr$9377$7lS0C
                                             g$pat$9380$7lS0C
                                             '#t
                                             g$expr$9381$7lS0C))))
                                      g$ls/false$9379$7lS0C)
                                    ((case-lambda
                                       ((g$t$9385$7lS0C)
                                        ((case-lambda
                                           ((g$ls/false$9386$7lS0C)
                                            (if g$ls/false$9386$7lS0C
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9387$7lS0C
                                                     g$fender$9388$7lS0C
                                                     g$expr$9389$7lS0C)
                                                   (g$gen-clause$9361$7lS0C
                                                     g$x$9373$7lS0C
                                                     g$keys$9374$7lS0C
                                                     (cdr g$clauses$9375$7lS0C)
                                                     g$r$9376$7lS0C
                                                     g$mr$9377$7lS0C
                                                     g$pat$9387$7lS0C
                                                     g$fender$9388$7lS0C
                                                     g$expr$9389$7lS0C)))
                                                g$ls/false$9386$7lS0C)
                                              (g$syntax-violation$7708$7lS0C
                                                '#f
                                                '"invalid syntax"
                                                g$t$9385$7lS0C))))
                                         (g$syntax-dispatch$7596$7lS0C
                                           g$t$9385$7lS0C
                                           '(any any any)))))
                                     g$t$9378$7lS0C))))
                               (g$syntax-dispatch$7596$7lS0C
                                 g$t$9378$7lS0C
                                 '(any any)))))
                           (car g$clauses$9375$7lS0C)))))))
           (case-lambda
             ((g$e$9363$7lS0C g$r$9364$7lS0C g$mr$9365$7lS0C)
              ((case-lambda
                 ((g$t$9366$7lS0C)
                  ((case-lambda
                     ((g$ls/false$9367$7lS0C)
                      (if g$ls/false$9367$7lS0C
                        (apply
                          (case-lambda
                            ((g$expr$9368$7lS0C
                               g$keys$9369$7lS0C
                               g$clauses$9370$7lS0C)
                             (begin
                               (g$verify-literals$7599$7lS0C
                                 g$keys$9369$7lS0C
                                 g$e$9363$7lS0C)
                               ((case-lambda
                                  ((g$x$9371$7lS0C)
                                   ((case-lambda
                                      ((g$body$9372$7lS0C)
                                       (list
                                         (g$build-lambda$7244$7lS0C
                                           '#f
                                           (list g$x$9371$7lS0C)
                                           g$body$9372$7lS0C)
                                         (g$chi-expr$7614$7lS0C
                                           g$expr$9368$7lS0C
                                           g$r$9364$7lS0C
                                           g$mr$9365$7lS0C))))
                                    (g$gen-syntax-case$9362$7lS0C
                                      g$x$9371$7lS0C
                                      g$keys$9369$7lS0C
                                      g$clauses$9370$7lS0C
                                      g$r$9364$7lS0C
                                      g$mr$9365$7lS0C))))
                                (g$gen-lexical$7257$7lS0C 'tmp)))))
                          g$ls/false$9367$7lS0C)
                        (g$syntax-violation$7708$7lS0C
                          '#f
                          '"invalid syntax"
                          g$t$9366$7lS0C))))
                   (g$syntax-dispatch$7596$7lS0C
                     g$t$9366$7lS0C
                     '(_ any each-any . each-any)))))
               g$e$9363$7lS0C))))))))
   (g$ellipsis-map$7601$7lS0C
     g$ellipsis-map$11101$7lS0C
     (case-lambda
       ((g$proc$9429$7lS0C g$ls$9430$7lS0C . g$ls*$9431$7lS0C)
        (letrec* ((g$who$9432$7lS0C '...))
          (begin
            (if (not (list? g$ls$9430$7lS0C))
              (assertion-violation
                g$who$9432$7lS0C
                '"not a list"
                g$ls$9430$7lS0C)
              (void))
            (if (not (null? g$ls*$9431$7lS0C))
              ((case-lambda
                 ((g$n$9433$7lS0C)
                  (g$for-each$5060$7lS0C
                    (case-lambda
                      ((g$x$9434$7lS0C)
                       (begin
                         (if (not (list? g$x$9434$7lS0C))
                           (assertion-violation
                             g$who$9432$7lS0C
                             '"not a list"
                             g$x$9434$7lS0C)
                           (void))
                         (if (not (= (length g$x$9434$7lS0C) g$n$9433$7lS0C))
                           (assertion-violation
                             g$who$9432$7lS0C
                             '"length mismatch"
                             g$ls$9430$7lS0C
                             g$x$9434$7lS0C)
                           (void)))))
                    g$ls*$9431$7lS0C)))
               (length g$ls$9430$7lS0C))
              (void))
            (apply
              g$map$5059$7lS0C
              g$proc$9429$7lS0C
              g$ls$9430$7lS0C
              g$ls*$9431$7lS0C))))))
   (g$syntax-transformer$7602$7lS0C
     g$syntax-transformer$11102$7lS0C
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9435$7lS0C
                     (case-lambda
                       ((g$src$9495$7lS0C
                          g$e$9496$7lS0C
                          g$r$9497$7lS0C
                          g$maps$9498$7lS0C
                          g$ellipsis?$9499$7lS0C
                          g$vec?$9500$7lS0C)
                        ((case-lambda
                           ((g$t$9501$7lS0C)
                            ((case-lambda
                               ((g$ls/false$9502$7lS0C)
                                (if (if g$ls/false$9502$7lS0C
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9503$7lS0C)
                                             (g$ellipsis?$9499$7lS0C
                                               g$dots$9503$7lS0C)))
                                          g$ls/false$9502$7lS0C))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9504$7lS0C)
                                       (g$syntax-violation$7708$7lS0C
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9495$7lS0C)))
                                    g$ls/false$9502$7lS0C)
                                  ((case-lambda
                                     ((g$t$9505$7lS0C)
                                      ((case-lambda
                                         ((g$ls/false$9506$7lS0C)
                                          (if (if g$ls/false$9506$7lS0C
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9507$7lS0C)
                                                       (g$id?$7318$7lS0C
                                                         g$id$9507$7lS0C)))
                                                    g$ls/false$9506$7lS0C))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9508$7lS0C)
                                                 ((case-lambda
                                                    ((g$label$9509$7lS0C)
                                                     ((case-lambda
                                                        ((g$b$9510$7lS0C)
                                                         (if (eq? (g$binding-type$7335$7lS0C
                                                                    g$b$9510$7lS0C)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$9513$7lS0C)
                                                                    (g$gen-ref$9436$7lS0C
                                                                      g$src$9495$7lS0C
                                                                      (car g$var.lev$9513$7lS0C)
                                                                      (cdr g$var.lev$9513$7lS0C)
                                                                      g$maps$9498$7lS0C)))
                                                                 (g$binding-value$7336$7lS0C
                                                                   g$b$9510$7lS0C))))
                                                             (case-lambda
                                                               ((g$var$9514$7lS0C
                                                                  g$maps$9515$7lS0C)
                                                                ((case-lambda
                                                                   ((g$maps$9516$7lS0C
                                                                      g$var$9517$7lS0C)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$9517$7lS0C)
                                                                      g$maps$9516$7lS0C)))
                                                                 g$maps$9515$7lS0C
                                                                 g$var$9514$7lS0C))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$9496$7lS0C)
                                                             g$maps$9498$7lS0C))))
                                                      (g$label->binding$7333$7lS0C
                                                        g$label$9509$7lS0C
                                                        g$r$9497$7lS0C))))
                                                  (g$id->label$7331$7lS0C
                                                    g$e$9496$7lS0C))))
                                              g$ls/false$9506$7lS0C)
                                            ((case-lambda
                                               ((g$t$9518$7lS0C)
                                                ((case-lambda
                                                   ((g$ls/false$9519$7lS0C)
                                                    (if (if g$ls/false$9519$7lS0C
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9520$7lS0C
                                                                   g$e$9521$7lS0C)
                                                                 (g$ellipsis?$9499$7lS0C
                                                                   g$dots$9520$7lS0C)))
                                                              g$ls/false$9519$7lS0C))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9522$7lS0C
                                                             g$e$9523$7lS0C)
                                                           (if g$vec?$9500$7lS0C
                                                             (g$syntax-violation$7708$7lS0C
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9495$7lS0C)
                                                             (g$gen-syntax$9435$7lS0C
                                                               g$src$9495$7lS0C
                                                               g$e$9523$7lS0C
                                                               g$r$9497$7lS0C
                                                               g$maps$9498$7lS0C
                                                               (case-lambda
                                                                 ((g$x$9524$7lS0C)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9519$7lS0C)
                                                      ((case-lambda
                                                         ((g$t$9525$7lS0C)
                                                          ((case-lambda
                                                             ((g$ls/false$9526$7lS0C)
                                                              (if (if g$ls/false$9526$7lS0C
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9527$7lS0C
                                                                             g$dots$9528$7lS0C
                                                                             g$y$9529$7lS0C)
                                                                           (g$ellipsis?$9499$7lS0C
                                                                             g$dots$9528$7lS0C)))
                                                                        g$ls/false$9526$7lS0C))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9530$7lS0C
                                                                       g$dots$9531$7lS0C
                                                                       g$y$9532$7lS0C)
                                                                     ((letrec ((g$f$9533$7lS0C
                                                                                 (case-lambda
                                                                                   ((g$y$9534$7lS0C
                                                                                      g$k$9535$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$t$9536$7lS0C)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9537$7lS0C)
                                                                                            (if g$ls/false$9537$7lS0C
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9535$7lS0C
                                                                                                     g$maps$9498$7lS0C)))
                                                                                                g$ls/false$9537$7lS0C)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9538$7lS0C)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9539$7lS0C)
                                                                                                      (if (if g$ls/false$9539$7lS0C
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9540$7lS0C
                                                                                                                     g$y$9541$7lS0C)
                                                                                                                   (g$ellipsis?$9499$7lS0C
                                                                                                                     g$dots$9540$7lS0C)))
                                                                                                                g$ls/false$9539$7lS0C))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9542$7lS0C
                                                                                                               g$y$9543$7lS0C)
                                                                                                             (g$f$9533$7lS0C
                                                                                                               g$y$9543$7lS0C
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9544$7lS0C)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9535$7lS0C
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9544$7lS0C))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9547$7lS0C
                                                                                                                         g$maps$9548$7lS0C)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9549$7lS0C
                                                                                                                             g$x$9550$7lS0C)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9549$7lS0C))
                                                                                                                             (g$syntax-violation$7708$7lS0C
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9495$7lS0C)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9438$7lS0C
                                                                                                                                 g$x$9550$7lS0C
                                                                                                                                 (car g$maps$9549$7lS0C))
                                                                                                                               (cdr g$maps$9549$7lS0C)))))
                                                                                                                        g$maps$9548$7lS0C
                                                                                                                        g$x$9547$7lS0C)))))))))
                                                                                                          g$ls/false$9539$7lS0C)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9551$7lS0C)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9552$7lS0C)
                                                                                                                (if g$ls/false$9552$7lS0C
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9435$7lS0C
                                                                                                                              g$src$9495$7lS0C
                                                                                                                              g$y$9534$7lS0C
                                                                                                                              g$r$9497$7lS0C
                                                                                                                              g$maps$9498$7lS0C
                                                                                                                              g$ellipsis?$9499$7lS0C
                                                                                                                              g$vec?$9500$7lS0C)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9555$7lS0C
                                                                                                                              g$maps$9556$7lS0C)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9557$7lS0C
                                                                                                                                  g$y$9558$7lS0C)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9535$7lS0C
                                                                                                                                       g$maps$9557$7lS0C)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9561$7lS0C
                                                                                                                                       g$maps$9562$7lS0C)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9563$7lS0C
                                                                                                                                           g$x$9564$7lS0C)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9437$7lS0C
                                                                                                                                             g$x$9564$7lS0C
                                                                                                                                             g$y$9558$7lS0C)
                                                                                                                                           g$maps$9563$7lS0C)))
                                                                                                                                      g$maps$9562$7lS0C
                                                                                                                                      g$x$9561$7lS0C))))))
                                                                                                                             g$maps$9556$7lS0C
                                                                                                                             g$y$9555$7lS0C))))))
                                                                                                                    g$ls/false$9552$7lS0C)
                                                                                                                  (g$syntax-violation$7708$7lS0C
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9551$7lS0C))))
                                                                                                             (g$syntax-dispatch$7596$7lS0C
                                                                                                               g$t$9551$7lS0C
                                                                                                               '_))))
                                                                                                         g$t$9538$7lS0C))))
                                                                                                   (g$syntax-dispatch$7596$7lS0C
                                                                                                     g$t$9538$7lS0C
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9536$7lS0C))))
                                                                                         (g$syntax-dispatch$7596$7lS0C
                                                                                           g$t$9536$7lS0C
                                                                                           '()))))
                                                                                     g$y$9534$7lS0C)))))
                                                                        g$f$9533$7lS0C)
                                                                      g$y$9532$7lS0C
                                                                      (case-lambda
                                                                        ((g$maps$9565$7lS0C)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9435$7lS0C
                                                                                g$src$9495$7lS0C
                                                                                g$x$9530$7lS0C
                                                                                g$r$9497$7lS0C
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9565$7lS0C)
                                                                                g$ellipsis?$9499$7lS0C
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9568$7lS0C
                                                                                g$maps$9569$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$maps$9570$7lS0C
                                                                                    g$x$9571$7lS0C)
                                                                                  (if (null?
                                                                                        (car g$maps$9570$7lS0C))
                                                                                    (g$syntax-violation$7708$7lS0C
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9495$7lS0C)
                                                                                    (values
                                                                                      (g$gen-map$9439$7lS0C
                                                                                        g$x$9571$7lS0C
                                                                                        (car g$maps$9570$7lS0C))
                                                                                      (cdr g$maps$9570$7lS0C)))))
                                                                               g$maps$9569$7lS0C
                                                                               g$x$9568$7lS0C)))))))))
                                                                  g$ls/false$9526$7lS0C)
                                                                ((case-lambda
                                                                   ((g$t$9572$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9573$7lS0C)
                                                                        (if g$ls/false$9573$7lS0C
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9574$7lS0C
                                                                                 g$y$9575$7lS0C)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9435$7lS0C
                                                                                      g$src$9495$7lS0C
                                                                                      g$x$9574$7lS0C
                                                                                      g$r$9497$7lS0C
                                                                                      g$maps$9498$7lS0C
                                                                                      g$ellipsis?$9499$7lS0C
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9578$7lS0C
                                                                                      g$maps$9579$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9580$7lS0C
                                                                                          g$xnew$9581$7lS0C)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9435$7lS0C
                                                                                               g$src$9495$7lS0C
                                                                                               g$y$9575$7lS0C
                                                                                               g$r$9497$7lS0C
                                                                                               g$maps$9580$7lS0C
                                                                                               g$ellipsis?$9499$7lS0C
                                                                                               g$vec?$9500$7lS0C)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9584$7lS0C
                                                                                               g$maps$9585$7lS0C)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9586$7lS0C
                                                                                                   g$ynew$9587$7lS0C)
                                                                                                 (values
                                                                                                   (g$gen-cons$9440$7lS0C
                                                                                                     g$e$9496$7lS0C
                                                                                                     g$x$9574$7lS0C
                                                                                                     g$y$9575$7lS0C
                                                                                                     g$xnew$9581$7lS0C
                                                                                                     g$ynew$9587$7lS0C)
                                                                                                   g$maps$9586$7lS0C)))
                                                                                              g$maps$9585$7lS0C
                                                                                              g$ynew$9584$7lS0C))))))
                                                                                     g$maps$9579$7lS0C
                                                                                     g$xnew$9578$7lS0C))))))
                                                                            g$ls/false$9573$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$t$9588$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9589$7lS0C)
                                                                                  (if g$ls/false$9589$7lS0C
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9590$7lS0C)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9435$7lS0C
                                                                                                g$src$9495$7lS0C
                                                                                                g$ls$9590$7lS0C
                                                                                                g$r$9497$7lS0C
                                                                                                g$maps$9498$7lS0C
                                                                                                g$ellipsis?$9499$7lS0C
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9593$7lS0C
                                                                                                g$maps$9594$7lS0C)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9595$7lS0C
                                                                                                    g$lsnew$9596$7lS0C)
                                                                                                  (values
                                                                                                    (g$gen-vector$9441$7lS0C
                                                                                                      g$e$9496$7lS0C
                                                                                                      g$ls$9590$7lS0C
                                                                                                      g$lsnew$9596$7lS0C)
                                                                                                    g$maps$9595$7lS0C)))
                                                                                               g$maps$9594$7lS0C
                                                                                               g$lsnew$9593$7lS0C))))))
                                                                                      g$ls/false$9589$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$t$9597$7lS0C)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9598$7lS0C)
                                                                                            (if g$ls/false$9598$7lS0C
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9496$7lS0C)
                                                                                                     g$maps$9498$7lS0C)))
                                                                                                g$ls/false$9598$7lS0C)
                                                                                              (g$syntax-violation$7708$7lS0C
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9597$7lS0C))))
                                                                                         (g$syntax-dispatch$7596$7lS0C
                                                                                           g$t$9597$7lS0C
                                                                                           '_))))
                                                                                     g$t$9588$7lS0C))))
                                                                               (g$syntax-dispatch$7596$7lS0C
                                                                                 g$t$9588$7lS0C
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9572$7lS0C))))
                                                                     (g$syntax-dispatch$7596$7lS0C
                                                                       g$t$9572$7lS0C
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9525$7lS0C))))
                                                           (g$syntax-dispatch$7596$7lS0C
                                                             g$t$9525$7lS0C
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9518$7lS0C))))
                                                 (g$syntax-dispatch$7596$7lS0C
                                                   g$t$9518$7lS0C
                                                   '(any any)))))
                                             g$t$9505$7lS0C))))
                                       (g$syntax-dispatch$7596$7lS0C
                                         g$t$9505$7lS0C
                                         'any))))
                                   g$t$9501$7lS0C))))
                             (g$syntax-dispatch$7596$7lS0C
                               g$t$9501$7lS0C
                               'any))))
                         g$e$9496$7lS0C))))
                   (g$gen-ref$9436$7lS0C
                     (case-lambda
                       ((g$src$9482$7lS0C
                          g$var$9483$7lS0C
                          g$level$9484$7lS0C
                          g$maps$9485$7lS0C)
                        (if (= g$level$9484$7lS0C '0)
                          (values g$var$9483$7lS0C g$maps$9485$7lS0C)
                          (if (null? g$maps$9485$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9482$7lS0C)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9436$7lS0C
                                   g$src$9482$7lS0C
                                   g$var$9483$7lS0C
                                   (- g$level$9484$7lS0C '1)
                                   (cdr g$maps$9485$7lS0C))))
                              (case-lambda
                                ((g$outer-var$9488$7lS0C
                                   g$outer-maps$9489$7lS0C)
                                 ((case-lambda
                                    ((g$outer-maps$9490$7lS0C
                                       g$outer-var$9491$7lS0C)
                                     ((case-lambda
                                        ((g$t$9492$7lS0C)
                                         (if g$t$9492$7lS0C
                                           ((case-lambda
                                              ((g$b$9493$7lS0C)
                                               (values
                                                 (cdr g$b$9493$7lS0C)
                                                 g$maps$9485$7lS0C)))
                                            g$t$9492$7lS0C)
                                           ((case-lambda
                                              ((g$inner-var$9494$7lS0C)
                                               (values
                                                 g$inner-var$9494$7lS0C
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9491$7lS0C
                                                       g$inner-var$9494$7lS0C)
                                                     (car g$maps$9485$7lS0C))
                                                   g$outer-maps$9490$7lS0C))))
                                            (g$gen-lexical$7257$7lS0C 'tmp)))))
                                      (g$assq$5047$7lS0C
                                        g$outer-var$9491$7lS0C
                                        (car g$maps$9485$7lS0C)))))
                                  g$outer-maps$9489$7lS0C
                                  g$outer-var$9488$7lS0C)))))))))
                   (g$gen-append$9437$7lS0C
                     (case-lambda
                       ((g$x$9480$7lS0C g$y$9481$7lS0C)
                        (if (equal? g$y$9481$7lS0C ''())
                          g$x$9480$7lS0C
                          (list 'append g$x$9480$7lS0C g$y$9481$7lS0C)))))
                   (g$gen-mappend$9438$7lS0C
                     (case-lambda
                       ((g$e$9478$7lS0C g$map-env$9479$7lS0C)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9439$7lS0C
                            g$e$9478$7lS0C
                            g$map-env$9479$7lS0C)))))
                   (g$gen-map$9439$7lS0C
                     (case-lambda
                       ((g$e$9469$7lS0C g$map-env$9470$7lS0C)
                        ((case-lambda
                           ((g$formals$9471$7lS0C g$actuals$9472$7lS0C)
                            (if (eq? (car g$e$9469$7lS0C) 'ref)
                              (car g$actuals$9472$7lS0C)
                              (if (g$for-all$5057$7lS0C
                                    (case-lambda
                                      ((g$x$9473$7lS0C)
                                       (if (eq? (car g$x$9473$7lS0C) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5051$7lS0C
                                             (g$cadr$5223$7lS0C g$x$9473$7lS0C)
                                             g$formals$9471$7lS0C))
                                         '#f)))
                                    (cdr g$e$9469$7lS0C))
                                ((case-lambda
                                   ((g$args$9474$7lS0C)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9469$7lS0C))
                                        g$args$9474$7lS0C))))
                                 (g$map$5059$7lS0C
                                   ((case-lambda
                                      ((g$r$9475$7lS0C)
                                       (case-lambda
                                         ((g$x$9476$7lS0C)
                                          (cdr (g$assq$5047$7lS0C
                                                 (g$cadr$5223$7lS0C
                                                   g$x$9476$7lS0C)
                                                 g$r$9475$7lS0C))))))
                                    (g$map$5059$7lS0C
                                      cons
                                      g$formals$9471$7lS0C
                                      g$actuals$9472$7lS0C))
                                   (cdr g$e$9469$7lS0C)))
                                (g$cons*$5061$7lS0C
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9471$7lS0C
                                    g$e$9469$7lS0C)
                                  g$actuals$9472$7lS0C)))))
                         (g$map$5059$7lS0C cdr g$map-env$9470$7lS0C)
                         (g$map$5059$7lS0C
                           (case-lambda
                             ((g$x$9477$7lS0C)
                              (list 'ref (car g$x$9477$7lS0C))))
                           g$map-env$9470$7lS0C)))))
                   (g$gen-cons$9440$7lS0C
                     (case-lambda
                       ((g$e$9461$7lS0C
                          g$x$9462$7lS0C
                          g$y$9463$7lS0C
                          g$xnew$9464$7lS0C
                          g$ynew$9465$7lS0C)
                        ((case-lambda
                           ((g$t$9466$7lS0C)
                            (if (g$memv$5052$7lS0C g$t$9466$7lS0C '(quote))
                              (if (eq? (car g$xnew$9464$7lS0C) 'quote)
                                ((case-lambda
                                   ((g$xnew$9467$7lS0C g$ynew$9468$7lS0C)
                                    (if (if (eq? g$xnew$9467$7lS0C
                                                 g$x$9462$7lS0C)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9468$7lS0C
                                                 g$y$9463$7lS0C))
                                          '#f)
                                      (list 'quote g$e$9461$7lS0C)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9467$7lS0C
                                          g$ynew$9468$7lS0C)))))
                                 (g$cadr$5223$7lS0C g$xnew$9464$7lS0C)
                                 (g$cadr$5223$7lS0C g$ynew$9465$7lS0C))
                                (if (null?
                                      (g$cadr$5223$7lS0C g$ynew$9465$7lS0C))
                                  (list 'list g$xnew$9464$7lS0C)
                                  (list
                                    'cons
                                    g$xnew$9464$7lS0C
                                    g$ynew$9465$7lS0C)))
                              (if (g$memv$5052$7lS0C g$t$9466$7lS0C '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9464$7lS0C
                                    (cdr g$ynew$9465$7lS0C)))
                                (list
                                  'cons
                                  g$xnew$9464$7lS0C
                                  g$ynew$9465$7lS0C)))))
                         (car g$ynew$9465$7lS0C)))))
                   (g$gen-vector$9441$7lS0C
                     (case-lambda
                       ((g$e$9458$7lS0C g$ls$9459$7lS0C g$lsnew$9460$7lS0C)
                        (if (eq? (car g$lsnew$9460$7lS0C) 'quote)
                          (if (eq? (g$cadr$5223$7lS0C g$lsnew$9460$7lS0C)
                                   g$ls$9459$7lS0C)
                            (list 'quote g$e$9458$7lS0C)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5223$7lS0C g$lsnew$9460$7lS0C))))
                          (if (eq? (car g$lsnew$9460$7lS0C) 'list)
                            (cons 'vector (cdr g$lsnew$9460$7lS0C))
                            (list 'list->vector g$lsnew$9460$7lS0C))))))
                   (g$regen$9442$7lS0C
                     (case-lambda
                       ((g$x$9455$7lS0C)
                        ((case-lambda
                           ((g$t$9456$7lS0C)
                            (if (g$memv$5052$7lS0C g$t$9456$7lS0C '(ref))
                              (g$cadr$5223$7lS0C g$x$9455$7lS0C)
                              (if (g$memv$5052$7lS0C
                                    g$t$9456$7lS0C
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5223$7lS0C g$x$9455$7lS0C))
                                (if (g$memv$5052$7lS0C g$t$9456$7lS0C '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5223$7lS0C g$x$9455$7lS0C))
                                  (if (g$memv$5052$7lS0C
                                        g$t$9456$7lS0C
                                        '(lambda))
                                    (g$build-lambda$7244$7lS0C
                                      '#f
                                      (g$cadr$5223$7lS0C g$x$9455$7lS0C)
                                      (g$regen$9442$7lS0C
                                        (g$caddr$5229$7lS0C g$x$9455$7lS0C)))
                                    (if (g$memv$5052$7lS0C
                                          g$t$9456$7lS0C
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9457$7lS0C)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9457$7lS0C)))
                                       (g$map$5059$7lS0C
                                         g$regen$9442$7lS0C
                                         (cdr g$x$9455$7lS0C)))
                                      (cons
                                        (list 'primitive (car g$x$9455$7lS0C))
                                        (g$map$5059$7lS0C
                                          g$regen$9442$7lS0C
                                          (cdr g$x$9455$7lS0C))))))))))
                         (car g$x$9455$7lS0C))))))
           (case-lambda
             ((g$e$9443$7lS0C g$r$9444$7lS0C g$mr$9445$7lS0C)
              ((case-lambda
                 ((g$t$9446$7lS0C)
                  ((case-lambda
                     ((g$ls/false$9447$7lS0C)
                      (if g$ls/false$9447$7lS0C
                        (apply
                          (case-lambda
                            ((g$x$9448$7lS0C)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9435$7lS0C
                                    g$e$9443$7lS0C
                                    g$x$9448$7lS0C
                                    g$r$9444$7lS0C
                                    '()
                                    g$ellipsis?$7597$7lS0C
                                    '#f)))
                               (case-lambda
                                 ((g$e$9451$7lS0C g$maps$9452$7lS0C)
                                  ((case-lambda
                                     ((g$maps$9453$7lS0C g$e$9454$7lS0C)
                                      (g$regen$9442$7lS0C g$e$9454$7lS0C)))
                                   g$maps$9452$7lS0C
                                   g$e$9451$7lS0C))))))
                          g$ls/false$9447$7lS0C)
                        (g$syntax-violation$7708$7lS0C
                          '#f
                          '"invalid syntax"
                          g$t$9446$7lS0C))))
                   (g$syntax-dispatch$7596$7lS0C g$t$9446$7lS0C '(_ any)))))
               g$e$9443$7lS0C))))))))
   (g$core-macro-transformer$7603$7lS0C
     g$core-macro-transformer$11103$7lS0C
     (case-lambda
       ((g$name$9599$7lS0C)
        ((case-lambda
           ((g$t$9600$7lS0C)
            (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(quote))
              g$quote-transformer$7556$7lS0C
              (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(lambda))
                g$lambda-transformer$7558$7lS0C
                (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(case-lambda))
                  g$case-lambda-transformer$7557$7lS0C
                  (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(letrec))
                    g$letrec-transformer$7546$7lS0C
                    (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(letrec*))
                      g$letrec*-transformer$7547$7lS0C
                      (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(if))
                        g$if-transformer$7554$7lS0C
                        (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(foreign-call))
                          g$foreign-call-transformer$7594$7lS0C
                          (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(syntax-case))
                            g$syntax-case-transformer$7600$7lS0C
                            (if (g$memv$5052$7lS0C g$t$9600$7lS0C '(syntax))
                              g$syntax-transformer$7602$7lS0C
                              (if (g$memv$5052$7lS0C
                                    g$t$9600$7lS0C
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7549$7lS0C
                                (if (g$memv$5052$7lS0C
                                      g$t$9600$7lS0C
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7550$7lS0C
                                  (if (g$memv$5052$7lS0C
                                        g$t$9600$7lS0C
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7551$7lS0C
                                    (if (g$memv$5052$7lS0C
                                          g$t$9600$7lS0C
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7548$7lS0C
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9599$7lS0C))))))))))))))))
         g$name$9599$7lS0C))))
   (g$file-options-macro$7604$7lS0C
     g$file-options-macro$11104$7lS0C
     (case-lambda
       ((g$x$9601$7lS0C)
        (letrec* ((g$valid-option?$9602$7lS0C
                    (case-lambda
                      ((g$x$9607$7lS0C)
                       (if (g$id?$7318$7lS0C g$x$9607$7lS0C)
                         (begin
                           '#f
                           (g$memq$5051$7lS0C
                             (g$id->sym$7319$7lS0C g$x$9607$7lS0C)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9603$7lS0C)
              ((case-lambda
                 ((g$ls/false$9604$7lS0C)
                  (if (if g$ls/false$9604$7lS0C
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9605$7lS0C)
                               (if (g$for-all$5057$7lS0C
                                     g$valid-option?$9602$7lS0C
                                     g$opt*$9605$7lS0C)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6592$7lS0C
                                     (g$map$5059$7lS0C
                                       g$id->sym$7319$7lS0C
                                       g$opt*$9605$7lS0C)))
                                 '#f)))
                            g$ls/false$9604$7lS0C))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9606$7lS0C)
                         (g$bless$7559$7lS0C
                           (list
                             'quote
                             (g$file-options-spec$6592$7lS0C
                               (g$map$5059$7lS0C
                                 g$id->sym$7319$7lS0C
                                 g$opt*$9606$7lS0C))))))
                      g$ls/false$9604$7lS0C)
                    (g$syntax-violation$7708$7lS0C
                      '#f
                      '"invalid syntax"
                      g$t$9603$7lS0C))))
               (g$syntax-dispatch$7596$7lS0C g$t$9603$7lS0C '(_ . each-any)))))
           g$x$9601$7lS0C)))))
   (g$symbol-macro$7605$7lS0C
     g$symbol-macro$11105$7lS0C
     (case-lambda
       ((g$x$9608$7lS0C g$set$9609$7lS0C)
        ((case-lambda
           ((g$t$9610$7lS0C)
            ((case-lambda
               ((g$ls/false$9611$7lS0C)
                (if (if g$ls/false$9611$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9612$7lS0C)
                             (if (g$id?$7318$7lS0C g$name$9612$7lS0C)
                               (begin
                                 '#f
                                 (g$memq$5051$7lS0C
                                   (g$id->sym$7319$7lS0C g$name$9612$7lS0C)
                                   g$set$9609$7lS0C))
                               '#f)))
                          g$ls/false$9611$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9613$7lS0C)
                       (g$bless$7559$7lS0C (list 'quote g$name$9613$7lS0C))))
                    g$ls/false$9611$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$9610$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$9610$7lS0C '(_ any)))))
         g$x$9608$7lS0C))))
   (g$macro-transformer$7606$7lS0C
     g$macro-transformer$11106$7lS0C
     (case-lambda
       ((g$x$9614$7lS0C)
        (if (procedure? g$x$9614$7lS0C)
          g$x$9614$7lS0C
          (if (symbol? g$x$9614$7lS0C)
            ((case-lambda
               ((g$t$9615$7lS0C)
                (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(define-record-type))
                  g$define-record-type-macro$7590$7lS0C
                  (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(define-struct))
                    g$define-struct-macro$7589$7lS0C
                    (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(include))
                      g$include-macro$7584$7lS0C
                      (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(cond))
                        g$cond-macro$7582$7lS0C
                        (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(let))
                          g$let-macro$7562$7lS0C
                          (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(do))
                            g$do-macro$7578$7lS0C
                            (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(or))
                              g$or-macro$7580$7lS0C
                              (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(and))
                                g$and-macro$7581$7lS0C
                                (if (g$memv$5052$7lS0C g$t$9615$7lS0C '(let*))
                                  g$let*-macro$7579$7lS0C
                                  (if (g$memv$5052$7lS0C
                                        g$t$9615$7lS0C
                                        '(let-values))
                                    g$let-values-macro$7563$7lS0C
                                    (if (g$memv$5052$7lS0C
                                          g$t$9615$7lS0C
                                          '(let*-values))
                                      g$let*-values-macro$7564$7lS0C
                                      (if (g$memv$5052$7lS0C
                                            g$t$9615$7lS0C
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7586$7lS0C
                                        (if (g$memv$5052$7lS0C
                                              g$t$9615$7lS0C
                                              '(quasiquote))
                                          g$quasiquote-macro$7587$7lS0C
                                          (if (g$memv$5052$7lS0C
                                                g$t$9615$7lS0C
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7588$7lS0C
                                            (if (g$memv$5052$7lS0C
                                                  g$t$9615$7lS0C
                                                  '(with-syntax))
                                              g$with-syntax-macro$7560$7lS0C
                                              (if (g$memv$5052$7lS0C
                                                    g$t$9615$7lS0C
                                                    '(when))
                                                g$when-macro$7552$7lS0C
                                                (if (g$memv$5052$7lS0C
                                                      g$t$9615$7lS0C
                                                      '(unless))
                                                  g$unless-macro$7553$7lS0C
                                                  (if (g$memv$5052$7lS0C
                                                        g$t$9615$7lS0C
                                                        '(case))
                                                    g$case-macro$7555$7lS0C
                                                    (if (g$memv$5052$7lS0C
                                                          g$t$9615$7lS0C
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7577$7lS0C
                                                      (if (g$memv$5052$7lS0C
                                                            g$t$9615$7lS0C
                                                            '(time))
                                                        g$time-macro$7573$7lS0C
                                                        (if (g$memv$5052$7lS0C
                                                              g$t$9615$7lS0C
                                                              '(delay))
                                                          g$delay-macro$7574$7lS0C
                                                          (if (g$memv$5052$7lS0C
                                                                g$t$9615$7lS0C
                                                                '(assert))
                                                            g$assert-macro$7575$7lS0C
                                                            (if (g$memv$5052$7lS0C
                                                                  g$t$9615$7lS0C
                                                                  '(endianness))
                                                              g$endianness-macro$7576$7lS0C
                                                              (if (g$memv$5052$7lS0C
                                                                    g$t$9615$7lS0C
                                                                    '(guard))
                                                                g$guard-macro$7571$7lS0C
                                                                (if (g$memv$5052$7lS0C
                                                                      g$t$9615$7lS0C
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7572$7lS0C
                                                                  (if (g$memv$5052$7lS0C
                                                                        g$t$9615$7lS0C
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7565$7lS0C
                                                                    (if (g$memv$5052$7lS0C
                                                                          g$t$9615$7lS0C
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7566$7lS0C
                                                                      (if (g$memv$5052$7lS0C
                                                                            g$t$9615$7lS0C
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7567$7lS0C
                                                                        (if (g$memv$5052$7lS0C
                                                                              g$t$9615$7lS0C
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7569$7lS0C
                                                                          (if (g$memv$5052$7lS0C
                                                                                g$t$9615$7lS0C
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7570$7lS0C
                                                                            (if (g$memv$5052$7lS0C
                                                                                  g$t$9615$7lS0C
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7591$7lS0C
                                                                              (if (g$memv$5052$7lS0C
                                                                                    g$t$9615$7lS0C
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7593$7lS0C
                                                                                (if (g$memv$5052$7lS0C
                                                                                      g$t$9615$7lS0C
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7585$7lS0C
                                                                                  (if (g$memv$5052$7lS0C
                                                                                        g$t$9615$7lS0C
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$9616$7lS0C)
                                                                                       (g$symbol-macro$7605$7lS0C
                                                                                         g$x$9616$7lS0C
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5052$7lS0C
                                                                                          g$t$9615$7lS0C
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$9617$7lS0C)
                                                                                         (g$symbol-macro$7605$7lS0C
                                                                                           g$x$9617$7lS0C
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5052$7lS0C
                                                                                            g$t$9615$7lS0C
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$9618$7lS0C)
                                                                                           (g$symbol-macro$7605$7lS0C
                                                                                             g$x$9618$7lS0C
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5052$7lS0C
                                                                                              g$t$9615$7lS0C
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7604$7lS0C
                                                                                          (if (g$memv$5052$7lS0C
                                                                                                g$t$9615$7lS0C
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7592$7lS0C
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$9614$7lS0C)))))))))))))))))))))))))))))))))))))))))
             g$x$9614$7lS0C)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9614$7lS0C))))))
   (g$local-macro-transformer$7607$7lS0C
     g$local-macro-transformer$11107$7lS0C
     (case-lambda ((g$x$9619$7lS0C) (car g$x$9619$7lS0C))))
   (g$do-macro-call$7608$7lS0C
     g$do-macro-call$11108$7lS0C
     (case-lambda
       ((g$transformer$9620$7lS0C g$expr$9621$7lS0C)
        ((case-lambda
           ((g$out$9622$7lS0C)
            (begin
              ((letrec ((g$f$9623$7lS0C
                          (case-lambda
                            ((g$x$9624$7lS0C)
                             (if (not (g$stx?$7290$7lS0C g$x$9624$7lS0C))
                               (if (pair? g$x$9624$7lS0C)
                                 (begin
                                   (g$f$9623$7lS0C (car g$x$9624$7lS0C))
                                   (g$f$9623$7lS0C (cdr g$x$9624$7lS0C)))
                                 (if (vector? g$x$9624$7lS0C)
                                   (vector-for-each
                                     g$f$9623$7lS0C
                                     g$x$9624$7lS0C)
                                   (if (symbol? g$x$9624$7lS0C)
                                     (g$syntax-violation$7708$7lS0C
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9621$7lS0C
                                       g$x$9624$7lS0C)
                                     (void))))
                               (void))))))
                 g$f$9623$7lS0C)
               g$out$9622$7lS0C)
              (g$add-mark$7307$7lS0C
                (g$gen-mark$7302$7lS0C)
                g$out$9622$7lS0C
                g$expr$9621$7lS0C))))
         (g$transformer$9620$7lS0C
           (g$add-mark$7307$7lS0C
             g$anti-mark$7303$7lS0C
             g$expr$9621$7lS0C
             '#f))))))
   (g$chi-macro$7609$7lS0C
     g$chi-macro$11109$7lS0C
     (case-lambda
       ((g$p$9625$7lS0C g$e$9626$7lS0C)
        (g$do-macro-call$7608$7lS0C
          (g$macro-transformer$7606$7lS0C g$p$9625$7lS0C)
          g$e$9626$7lS0C))))
   (g$chi-local-macro$7610$7lS0C
     g$chi-local-macro$11110$7lS0C
     (case-lambda
       ((g$p$9627$7lS0C g$e$9628$7lS0C)
        (g$do-macro-call$7608$7lS0C
          (g$local-macro-transformer$7607$7lS0C g$p$9627$7lS0C)
          g$e$9628$7lS0C))))
   (g$chi-global-macro$7611$7lS0C
     g$chi-global-macro$11111$7lS0C
     (case-lambda
       ((g$p$9629$7lS0C g$e$9630$7lS0C)
        ((case-lambda
           ((g$lib$9631$7lS0C g$loc$9632$7lS0C)
            (begin
              (g$visit-library$7129$7lS0C g$lib$9631$7lS0C)
              ((case-lambda
                 ((g$x$9633$7lS0C)
                  ((case-lambda
                     ((g$transformer$9634$7lS0C)
                      (g$do-macro-call$7608$7lS0C
                        g$transformer$9634$7lS0C
                        g$e$9630$7lS0C)))
                   (if (procedure? g$x$9633$7lS0C)
                     g$x$9633$7lS0C
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9633$7lS0C)))))
               (symbol-value g$loc$9632$7lS0C)))))
         (car g$p$9629$7lS0C)
         (cdr g$p$9629$7lS0C)))))
   (g$chi-expr*$7612$7lS0C
     g$chi-expr*$11112$7lS0C
     (case-lambda
       ((g$e*$9635$7lS0C g$r$9636$7lS0C g$mr$9637$7lS0C)
        (if (null? g$e*$9635$7lS0C)
          '()
          ((case-lambda
             ((g$e$9638$7lS0C)
              (cons
                g$e$9638$7lS0C
                (g$chi-expr*$7612$7lS0C
                  (cdr g$e*$9635$7lS0C)
                  g$r$9636$7lS0C
                  g$mr$9637$7lS0C))))
           (g$chi-expr$7614$7lS0C
             (car g$e*$9635$7lS0C)
             g$r$9636$7lS0C
             g$mr$9637$7lS0C))))))
   (g$chi-application$7613$7lS0C
     g$chi-application$11113$7lS0C
     (case-lambda
       ((g$e$9639$7lS0C g$r$9640$7lS0C g$mr$9641$7lS0C)
        ((case-lambda
           ((g$t$9642$7lS0C)
            ((case-lambda
               ((g$ls/false$9643$7lS0C)
                (if g$ls/false$9643$7lS0C
                  (apply
                    (case-lambda
                      ((g$rator$9644$7lS0C g$rands$9645$7lS0C)
                       ((case-lambda
                          ((g$rator$9646$7lS0C)
                           (cons
                             g$rator$9646$7lS0C
                             (g$chi-expr*$7612$7lS0C
                               g$rands$9645$7lS0C
                               g$r$9640$7lS0C
                               g$mr$9641$7lS0C))))
                        (g$chi-expr$7614$7lS0C
                          g$rator$9644$7lS0C
                          g$r$9640$7lS0C
                          g$mr$9641$7lS0C))))
                    g$ls/false$9643$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$9642$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$9642$7lS0C '(any . each-any)))))
         g$e$9639$7lS0C))))
   (g$chi-expr$7614$7lS0C
     g$chi-expr$11114$7lS0C
     (case-lambda
       ((g$e$9647$7lS0C g$r$9648$7lS0C g$mr$9649$7lS0C)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7338$7lS0C g$e$9647$7lS0C g$r$9648$7lS0C)))
          (case-lambda
            ((g$type$9653$7lS0C g$value$9654$7lS0C g$kwd$9655$7lS0C)
             ((case-lambda
                ((g$kwd$9656$7lS0C g$value$9657$7lS0C g$type$9658$7lS0C)
                 ((case-lambda
                    ((g$t$9659$7lS0C)
                     (if (g$memv$5052$7lS0C g$t$9659$7lS0C '(core-macro))
                       ((case-lambda
                          ((g$transformer$9660$7lS0C)
                           (g$transformer$9660$7lS0C
                             g$e$9647$7lS0C
                             g$r$9648$7lS0C
                             g$mr$9649$7lS0C)))
                        (g$core-macro-transformer$7603$7lS0C
                          g$value$9657$7lS0C))
                       (if (g$memv$5052$7lS0C g$t$9659$7lS0C '(global))
                         ((case-lambda
                            ((g$lib$9661$7lS0C)
                             ((case-lambda
                                ((g$loc$9662$7lS0C)
                                 (begin
                                   ((g$inv-collector$7648$7lS0C)
                                    g$lib$9661$7lS0C)
                                   g$loc$9662$7lS0C)))
                              (cdr g$value$9657$7lS0C))))
                          (car g$value$9657$7lS0C))
                         (if (g$memv$5052$7lS0C g$t$9659$7lS0C '(core-prim))
                           ((case-lambda
                              ((g$name$9663$7lS0C)
                               (list 'primitive g$name$9663$7lS0C)))
                            g$value$9657$7lS0C)
                           (if (g$memv$5052$7lS0C g$t$9659$7lS0C '(call))
                             (g$chi-application$7613$7lS0C
                               g$e$9647$7lS0C
                               g$r$9648$7lS0C
                               g$mr$9649$7lS0C)
                             (if (g$memv$5052$7lS0C g$t$9659$7lS0C '(lexical))
                               ((case-lambda
                                  ((g$lex$9664$7lS0C) g$lex$9664$7lS0C))
                                (g$lexical-var$7540$7lS0C g$value$9657$7lS0C))
                               (if (g$memv$5052$7lS0C
                                     g$t$9659$7lS0C
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7614$7lS0C
                                   (g$chi-global-macro$7611$7lS0C
                                     g$value$9657$7lS0C
                                     g$e$9647$7lS0C)
                                   g$r$9648$7lS0C
                                   g$mr$9649$7lS0C)
                                 (if (g$memv$5052$7lS0C
                                       g$t$9659$7lS0C
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7614$7lS0C
                                     (g$chi-local-macro$7610$7lS0C
                                       g$value$9657$7lS0C
                                       g$e$9647$7lS0C)
                                     g$r$9648$7lS0C
                                     g$mr$9649$7lS0C)
                                   (if (g$memv$5052$7lS0C
                                         g$t$9659$7lS0C
                                         '(macro macro!))
                                     (g$chi-expr$7614$7lS0C
                                       (g$chi-macro$7609$7lS0C
                                         g$value$9657$7lS0C
                                         g$e$9647$7lS0C)
                                       g$r$9648$7lS0C
                                       g$mr$9649$7lS0C)
                                     (if (g$memv$5052$7lS0C
                                           g$t$9659$7lS0C
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$9665$7lS0C)
                                           (list 'quote g$datum$9665$7lS0C)))
                                        g$value$9657$7lS0C)
                                       (if (g$memv$5052$7lS0C
                                             g$t$9659$7lS0C
                                             '(set!))
                                         (g$chi-set!$7615$7lS0C
                                           g$e$9647$7lS0C
                                           g$r$9648$7lS0C
                                           g$mr$9649$7lS0C)
                                         (if (g$memv$5052$7lS0C
                                               g$t$9659$7lS0C
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$9666$7lS0C)
                                               ((case-lambda
                                                  ((g$ls/false$9667$7lS0C)
                                                   (if g$ls/false$9667$7lS0C
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9668$7lS0C
                                                            g$x*$9669$7lS0C)
                                                          (g$build-sequence$7247$7lS0C
                                                            '#f
                                                            (g$chi-expr*$7612$7lS0C
                                                              (cons
                                                                g$x$9668$7lS0C
                                                                g$x*$9669$7lS0C)
                                                              g$r$9648$7lS0C
                                                              g$mr$9649$7lS0C))))
                                                       g$ls/false$9667$7lS0C)
                                                     (g$syntax-violation$7708$7lS0C
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9666$7lS0C))))
                                                (g$syntax-dispatch$7596$7lS0C
                                                  g$t$9666$7lS0C
                                                  '(_ any . each-any)))))
                                            g$e$9647$7lS0C)
                                           (if (g$memv$5052$7lS0C
                                                 g$t$9659$7lS0C
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9670$7lS0C)
                                                 ((case-lambda
                                                    ((g$ls/false$9671$7lS0C)
                                                     (if (if g$ls/false$9671$7lS0C
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9672$7lS0C
                                                                    g$xrhs*$9673$7lS0C
                                                                    g$xbody$9674$7lS0C
                                                                    g$xbody*$9675$7lS0C)
                                                                  (if (not (g$valid-bound-ids?$7323$7lS0C
                                                                             g$xlhs*$9672$7lS0C))
                                                                    (g$syntax-violation$7708$7lS0C
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9647$7lS0C)
                                                                    (void))))
                                                               g$ls/false$9671$7lS0C))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9676$7lS0C
                                                              g$xrhs*$9677$7lS0C
                                                              g$xbody$9678$7lS0C
                                                              g$xbody*$9679$7lS0C)
                                                            ((case-lambda
                                                               ((g$xlab*$9680$7lS0C)
                                                                ((case-lambda
                                                                   ((g$xrib$9681$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$xb*$9682$7lS0C)
                                                                        (g$build-sequence$7247$7lS0C
                                                                          '#f
                                                                          (g$chi-expr*$7612$7lS0C
                                                                            (g$map$5059$7lS0C
                                                                              (case-lambda
                                                                                ((g$x$9683$7lS0C)
                                                                                 (g$add-subst$7308$7lS0C
                                                                                   g$xrib$9681$7lS0C
                                                                                   g$x$9683$7lS0C)))
                                                                              (cons
                                                                                g$xbody$9678$7lS0C
                                                                                g$xbody*$9679$7lS0C))
                                                                            (append
                                                                              (g$map$5059$7lS0C
                                                                                cons
                                                                                g$xlab*$9680$7lS0C
                                                                                g$xb*$9682$7lS0C)
                                                                              g$r$9648$7lS0C)
                                                                            (append
                                                                              (g$map$5059$7lS0C
                                                                                cons
                                                                                g$xlab*$9680$7lS0C
                                                                                g$xb*$9682$7lS0C)
                                                                              g$mr$9649$7lS0C)))))
                                                                     (g$map$5059$7lS0C
                                                                       (case-lambda
                                                                         ((g$x$9684$7lS0C)
                                                                          (g$make-eval-transformer$7350$7lS0C
                                                                            (g$expand-transformer$7641$7lS0C
                                                                              (if (eq? g$type$9658$7lS0C
                                                                                       'let-syntax)
                                                                                g$x$9684$7lS0C
                                                                                (g$add-subst$7308$7lS0C
                                                                                  g$xrib$9681$7lS0C
                                                                                  g$x$9684$7lS0C))
                                                                              g$mr$9649$7lS0C))))
                                                                       g$xrhs*$9677$7lS0C))))
                                                                 (g$make-full-rib$7286$7lS0C
                                                                   g$xlhs*$9676$7lS0C
                                                                   g$xlab*$9680$7lS0C))))
                                                             (g$map$5059$7lS0C
                                                               g$gen-label$7259$7lS0C
                                                               g$xlhs*$9676$7lS0C))))
                                                         g$ls/false$9671$7lS0C)
                                                       (g$syntax-violation$7708$7lS0C
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9670$7lS0C))))
                                                  (g$syntax-dispatch$7596$7lS0C
                                                    g$t$9670$7lS0C
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9647$7lS0C)
                                             (if (g$memv$5052$7lS0C
                                                   g$t$9659$7lS0C
                                                   '(displaced-lexical))
                                               (g$syntax-violation$7708$7lS0C
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9647$7lS0C)
                                               (if (g$memv$5052$7lS0C
                                                     g$t$9659$7lS0C
                                                     '(syntax))
                                                 (g$syntax-violation$7708$7lS0C
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9647$7lS0C)
                                                 (if (g$memv$5052$7lS0C
                                                       g$t$9659$7lS0C
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7708$7lS0C
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9685$7lS0C)
                                                           (if (g$memv$5052$7lS0C
                                                                 g$t$9685$7lS0C
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5052$7lS0C
                                                                   g$t$9685$7lS0C
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5052$7lS0C
                                                                     g$t$9685$7lS0C
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5052$7lS0C
                                                                       g$t$9685$7lS0C
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5052$7lS0C
                                                                         g$t$9685$7lS0C
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5052$7lS0C
                                                                           g$t$9685$7lS0C
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$9658$7lS0C)
                                                       '" was found where an expression was expected")
                                                     g$e$9647$7lS0C)
                                                   (if (g$memv$5052$7lS0C
                                                         g$t$9659$7lS0C
                                                         '(mutable))
                                                     (g$syntax-violation$7708$7lS0C
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9647$7lS0C)
                                                     (g$syntax-violation$7708$7lS0C
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9647$7lS0C)))))))))))))))))))
                  g$type$9658$7lS0C)))
              g$kwd$9655$7lS0C
              g$value$9654$7lS0C
              g$type$9653$7lS0C)))))))
   (g$chi-set!$7615$7lS0C
     g$chi-set!$11115$7lS0C
     (case-lambda
       ((g$e$9686$7lS0C g$r$9687$7lS0C g$mr$9688$7lS0C)
        ((case-lambda
           ((g$t$9689$7lS0C)
            ((case-lambda
               ((g$ls/false$9690$7lS0C)
                (if (if g$ls/false$9690$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9691$7lS0C g$v$9692$7lS0C)
                             (g$id?$7318$7lS0C g$x$9691$7lS0C)))
                          g$ls/false$9690$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9693$7lS0C g$v$9694$7lS0C)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7338$7lS0C
                              g$x$9693$7lS0C
                              g$r$9687$7lS0C)))
                         (case-lambda
                           ((g$type$9698$7lS0C
                              g$value$9699$7lS0C
                              g$kwd$9700$7lS0C)
                            ((case-lambda
                               ((g$kwd$9701$7lS0C
                                  g$value$9702$7lS0C
                                  g$type$9703$7lS0C)
                                ((case-lambda
                                   ((g$t$9704$7lS0C)
                                    (if (g$memv$5052$7lS0C
                                          g$t$9704$7lS0C
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7542$7lS0C
                                          g$value$9702$7lS0C
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7540$7lS0C
                                            g$value$9702$7lS0C)
                                          (g$chi-expr$7614$7lS0C
                                            g$v$9694$7lS0C
                                            g$r$9687$7lS0C
                                            g$mr$9688$7lS0C)))
                                      (if (g$memv$5052$7lS0C
                                            g$t$9704$7lS0C
                                            '(core-prim))
                                        (g$syntax-violation$7708$7lS0C
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9686$7lS0C)
                                        (if (g$memv$5052$7lS0C
                                              g$t$9704$7lS0C
                                              '(global))
                                          (g$syntax-violation$7708$7lS0C
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9686$7lS0C)
                                          (if (g$memv$5052$7lS0C
                                                g$t$9704$7lS0C
                                                '(global-macro!))
                                            (g$chi-expr$7614$7lS0C
                                              (g$chi-global-macro$7611$7lS0C
                                                g$value$9702$7lS0C
                                                g$e$9686$7lS0C)
                                              g$r$9687$7lS0C
                                              g$mr$9688$7lS0C)
                                            (if (g$memv$5052$7lS0C
                                                  g$t$9704$7lS0C
                                                  '(local-macro!))
                                              (g$chi-expr$7614$7lS0C
                                                (g$chi-local-macro$7610$7lS0C
                                                  g$value$9702$7lS0C
                                                  g$e$9686$7lS0C)
                                                g$r$9687$7lS0C
                                                g$mr$9688$7lS0C)
                                              (if (g$memv$5052$7lS0C
                                                    g$t$9704$7lS0C
                                                    '(mutable))
                                                (g$syntax-violation$7708$7lS0C
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9686$7lS0C)
                                                (g$syntax-violation$7708$7lS0C
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9686$7lS0C)))))))))
                                 g$type$9703$7lS0C)))
                             g$kwd$9700$7lS0C
                             g$value$9699$7lS0C
                             g$type$9698$7lS0C))))))
                    g$ls/false$9690$7lS0C)
                  (g$syntax-violation$7708$7lS0C
                    '#f
                    '"invalid syntax"
                    g$t$9689$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$9689$7lS0C '(_ any any)))))
         g$e$9686$7lS0C))))
   (g$verify-formals$7616$7lS0C
     g$verify-formals$11116$7lS0C
     (case-lambda
       ((g$fmls$9705$7lS0C g$stx$9706$7lS0C)
        ((case-lambda
           ((g$t$9707$7lS0C)
            ((case-lambda
               ((g$ls/false$9708$7lS0C)
                (if g$ls/false$9708$7lS0C
                  (apply
                    (case-lambda
                      ((g$x*$9709$7lS0C)
                       (if (not (g$valid-bound-ids?$7323$7lS0C g$x*$9709$7lS0C))
                         (g$invalid-fmls-error$7561$7lS0C
                           g$stx$9706$7lS0C
                           g$fmls$9705$7lS0C)
                         (void))))
                    g$ls/false$9708$7lS0C)
                  ((case-lambda
                     ((g$t$9710$7lS0C)
                      ((case-lambda
                         ((g$ls/false$9711$7lS0C)
                          (if g$ls/false$9711$7lS0C
                            (apply
                              (case-lambda
                                ((g$x*$9712$7lS0C g$x$9713$7lS0C)
                                 (if (not (g$valid-bound-ids?$7323$7lS0C
                                            (cons
                                              g$x$9713$7lS0C
                                              g$x*$9712$7lS0C)))
                                   (g$invalid-fmls-error$7561$7lS0C
                                     g$stx$9706$7lS0C
                                     g$fmls$9705$7lS0C)
                                   (void))))
                              g$ls/false$9711$7lS0C)
                            ((case-lambda
                               ((g$t$9714$7lS0C)
                                ((case-lambda
                                   ((g$ls/false$9715$7lS0C)
                                    (if g$ls/false$9715$7lS0C
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9706$7lS0C)))
                                        g$ls/false$9715$7lS0C)
                                      (g$syntax-violation$7708$7lS0C
                                        '#f
                                        '"invalid syntax"
                                        g$t$9714$7lS0C))))
                                 (g$syntax-dispatch$7596$7lS0C
                                   g$t$9714$7lS0C
                                   '_))))
                             g$t$9710$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$9710$7lS0C
                         '#(each+ any () any)))))
                   g$t$9707$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$9707$7lS0C 'each-any))))
         g$fmls$9705$7lS0C))))
   (g$chi-lambda-clause$7617$7lS0C
     g$chi-lambda-clause$11117$7lS0C
     (case-lambda
       ((g$stx$9716$7lS0C
          g$fmls$9717$7lS0C
          g$body*$9718$7lS0C
          g$r$9719$7lS0C
          g$mr$9720$7lS0C)
        ((case-lambda
           ((g$t$9721$7lS0C)
            ((case-lambda
               ((g$ls/false$9722$7lS0C)
                (if g$ls/false$9722$7lS0C
                  (apply
                    (case-lambda
                      ((g$x*$9723$7lS0C)
                       (begin
                         (g$verify-formals$7616$7lS0C
                           g$fmls$9717$7lS0C
                           g$stx$9716$7lS0C)
                         ((case-lambda
                            ((g$lex*$9724$7lS0C g$lab*$9725$7lS0C)
                             (values
                               g$lex*$9724$7lS0C
                               (g$chi-internal$7625$7lS0C
                                 (g$add-subst$7308$7lS0C
                                   (g$make-full-rib$7286$7lS0C
                                     g$x*$9723$7lS0C
                                     g$lab*$9725$7lS0C)
                                   g$body*$9718$7lS0C)
                                 (g$add-lexicals$7544$7lS0C
                                   g$lab*$9725$7lS0C
                                   g$lex*$9724$7lS0C
                                   g$r$9719$7lS0C)
                                 g$mr$9720$7lS0C))))
                          (g$map$5059$7lS0C
                            g$gen-lexical$7257$7lS0C
                            g$x*$9723$7lS0C)
                          (g$map$5059$7lS0C
                            g$gen-label$7259$7lS0C
                            g$x*$9723$7lS0C)))))
                    g$ls/false$9722$7lS0C)
                  ((case-lambda
                     ((g$t$9726$7lS0C)
                      ((case-lambda
                         ((g$ls/false$9727$7lS0C)
                          (if g$ls/false$9727$7lS0C
                            (apply
                              (case-lambda
                                ((g$x*$9728$7lS0C g$x$9729$7lS0C)
                                 (begin
                                   (g$verify-formals$7616$7lS0C
                                     g$fmls$9717$7lS0C
                                     g$stx$9716$7lS0C)
                                   ((case-lambda
                                      ((g$lex*$9730$7lS0C
                                         g$lab*$9731$7lS0C
                                         g$lex$9732$7lS0C
                                         g$lab$9733$7lS0C)
                                       (values
                                         (append
                                           g$lex*$9730$7lS0C
                                           g$lex$9732$7lS0C)
                                         (g$chi-internal$7625$7lS0C
                                           (g$add-subst$7308$7lS0C
                                             (g$make-full-rib$7286$7lS0C
                                               (cons
                                                 g$x$9729$7lS0C
                                                 g$x*$9728$7lS0C)
                                               (cons
                                                 g$lab$9733$7lS0C
                                                 g$lab*$9731$7lS0C))
                                             g$body*$9718$7lS0C)
                                           (g$add-lexicals$7544$7lS0C
                                             (cons
                                               g$lab$9733$7lS0C
                                               g$lab*$9731$7lS0C)
                                             (cons
                                               g$lex$9732$7lS0C
                                               g$lex*$9730$7lS0C)
                                             g$r$9719$7lS0C)
                                           g$mr$9720$7lS0C))))
                                    (g$map$5059$7lS0C
                                      g$gen-lexical$7257$7lS0C
                                      g$x*$9728$7lS0C)
                                    (g$map$5059$7lS0C
                                      g$gen-label$7259$7lS0C
                                      g$x*$9728$7lS0C)
                                    (g$gen-lexical$7257$7lS0C g$x$9729$7lS0C)
                                    (g$gen-label$7259$7lS0C g$x$9729$7lS0C)))))
                              g$ls/false$9727$7lS0C)
                            ((case-lambda
                               ((g$t$9734$7lS0C)
                                ((case-lambda
                                   ((g$ls/false$9735$7lS0C)
                                    (if g$ls/false$9735$7lS0C
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7708$7lS0C
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9717$7lS0C)))
                                        g$ls/false$9735$7lS0C)
                                      (g$syntax-violation$7708$7lS0C
                                        '#f
                                        '"invalid syntax"
                                        g$t$9734$7lS0C))))
                                 (g$syntax-dispatch$7596$7lS0C
                                   g$t$9734$7lS0C
                                   '_))))
                             g$t$9726$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$9726$7lS0C
                         '#(each+ any () any)))))
                   g$t$9721$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$9721$7lS0C 'each-any))))
         g$fmls$9717$7lS0C))))
   (g$chi-lambda-clause*$7618$7lS0C
     g$chi-lambda-clause*$11118$7lS0C
     (case-lambda
       ((g$stx$9736$7lS0C
          g$fmls*$9737$7lS0C
          g$body**$9738$7lS0C
          g$r$9739$7lS0C
          g$mr$9740$7lS0C)
        (if (null? g$fmls*$9737$7lS0C)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7617$7lS0C
                 g$stx$9736$7lS0C
                 (car g$fmls*$9737$7lS0C)
                 (car g$body**$9738$7lS0C)
                 g$r$9739$7lS0C
                 g$mr$9740$7lS0C)))
            (case-lambda
              ((g$a$9743$7lS0C g$b$9744$7lS0C)
               ((case-lambda
                  ((g$b$9745$7lS0C g$a$9746$7lS0C)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7618$7lS0C
                          g$stx$9736$7lS0C
                          (cdr g$fmls*$9737$7lS0C)
                          (cdr g$body**$9738$7lS0C)
                          g$r$9739$7lS0C
                          g$mr$9740$7lS0C)))
                     (case-lambda
                       ((g$a*$9749$7lS0C g$b*$9750$7lS0C)
                        ((case-lambda
                           ((g$b*$9751$7lS0C g$a*$9752$7lS0C)
                            (values
                              (cons g$a$9746$7lS0C g$a*$9752$7lS0C)
                              (cons g$b$9745$7lS0C g$b*$9751$7lS0C))))
                         g$b*$9750$7lS0C
                         g$a*$9749$7lS0C))))))
                g$b$9744$7lS0C
                g$a$9743$7lS0C))))))))
   (g$chi-defun$7619$7lS0C
     g$chi-defun$11119$7lS0C
     (case-lambda
       ((g$x$9753$7lS0C g$r$9754$7lS0C g$mr$9755$7lS0C)
        ((case-lambda
           ((g$fmls$9756$7lS0C g$body*$9757$7lS0C)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7617$7lS0C
                   g$fmls$9756$7lS0C
                   g$fmls$9756$7lS0C
                   g$body*$9757$7lS0C
                   g$r$9754$7lS0C
                   g$mr$9755$7lS0C)))
              (case-lambda
                ((g$fmls$9760$7lS0C g$body$9761$7lS0C)
                 ((case-lambda
                    ((g$body$9762$7lS0C g$fmls$9763$7lS0C)
                     (g$build-lambda$7244$7lS0C
                       '#f
                       g$fmls$9763$7lS0C
                       g$body$9762$7lS0C)))
                  g$body$9761$7lS0C
                  g$fmls$9760$7lS0C))))))
         (car g$x$9753$7lS0C)
         (cdr g$x$9753$7lS0C)))))
   (g$chi-rhs$7620$7lS0C
     g$chi-rhs$11120$7lS0C
     (case-lambda
       ((g$rhs$9764$7lS0C g$r$9765$7lS0C g$mr$9766$7lS0C)
        ((case-lambda
           ((g$t$9767$7lS0C)
            (if (g$memv$5052$7lS0C g$t$9767$7lS0C '(defun))
              (g$chi-defun$7619$7lS0C
                (cdr g$rhs$9764$7lS0C)
                g$r$9765$7lS0C
                g$mr$9766$7lS0C)
              (if (g$memv$5052$7lS0C g$t$9767$7lS0C '(expr))
                ((case-lambda
                   ((g$expr$9768$7lS0C)
                    (g$chi-expr$7614$7lS0C
                      g$expr$9768$7lS0C
                      g$r$9765$7lS0C
                      g$mr$9766$7lS0C)))
                 (cdr g$rhs$9764$7lS0C))
                (if (g$memv$5052$7lS0C g$t$9767$7lS0C '(top-expr))
                  ((case-lambda
                     ((g$expr$9769$7lS0C)
                      (g$build-sequence$7247$7lS0C
                        '#f
                        (list
                          (g$chi-expr$7614$7lS0C
                            g$expr$9769$7lS0C
                            g$r$9765$7lS0C
                            g$mr$9766$7lS0C)
                          (g$build-void$7248$7lS0C)))))
                   (cdr g$rhs$9764$7lS0C))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9764$7lS0C))))))
         (car g$rhs$9764$7lS0C)))))
   (g$expand-interaction-rhs*/init*$7621$7lS0C
     g$expand-interaction-rhs*/init*$11121$7lS0C
     (case-lambda
       ((g$lhs*$9770$7lS0C
          g$rhs*$9771$7lS0C
          g$init*$9772$7lS0C
          g$r$9773$7lS0C
          g$mr$9774$7lS0C)
        ((letrec ((g$f$9775$7lS0C
                    (case-lambda
                      ((g$lhs*$9776$7lS0C g$rhs*$9777$7lS0C)
                       (if (null? g$lhs*$9776$7lS0C)
                         (g$map$5059$7lS0C
                           (case-lambda
                             ((g$x$9778$7lS0C)
                              (g$chi-expr$7614$7lS0C
                                g$x$9778$7lS0C
                                g$r$9773$7lS0C
                                g$mr$9774$7lS0C)))
                           g$init*$9772$7lS0C)
                         ((case-lambda
                            ((g$lhs$9779$7lS0C g$rhs$9780$7lS0C)
                             ((case-lambda
                                ((g$t$9781$7lS0C)
                                 (if (g$memv$5052$7lS0C g$t$9781$7lS0C '(defun))
                                   ((case-lambda
                                      ((g$rhs$9782$7lS0C)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9779$7lS0C
                                           g$rhs$9782$7lS0C)
                                         (g$f$9775$7lS0C
                                           (cdr g$lhs*$9776$7lS0C)
                                           (cdr g$rhs*$9777$7lS0C)))))
                                    (g$chi-defun$7619$7lS0C
                                      (cdr g$rhs$9780$7lS0C)
                                      g$r$9773$7lS0C
                                      g$mr$9774$7lS0C))
                                   (if (g$memv$5052$7lS0C
                                         g$t$9781$7lS0C
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$9783$7lS0C)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9779$7lS0C
                                             g$rhs$9783$7lS0C)
                                           (g$f$9775$7lS0C
                                             (cdr g$lhs*$9776$7lS0C)
                                             (cdr g$rhs*$9777$7lS0C)))))
                                      (g$chi-expr$7614$7lS0C
                                        (cdr g$rhs$9780$7lS0C)
                                        g$r$9773$7lS0C
                                        g$mr$9774$7lS0C))
                                     (if (g$memv$5052$7lS0C
                                           g$t$9781$7lS0C
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$9784$7lS0C)
                                           (cons
                                             g$e$9784$7lS0C
                                             (g$f$9775$7lS0C
                                               (cdr g$lhs*$9776$7lS0C)
                                               (cdr g$rhs*$9777$7lS0C)))))
                                        (g$chi-expr$7614$7lS0C
                                          (cdr g$rhs$9780$7lS0C)
                                          g$r$9773$7lS0C
                                          g$mr$9774$7lS0C))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9780$7lS0C))))))
                              (car g$rhs$9780$7lS0C))))
                          (car g$lhs*$9776$7lS0C)
                          (car g$rhs*$9777$7lS0C)))))))
           g$f$9775$7lS0C)
         g$lhs*$9770$7lS0C
         g$rhs*$9771$7lS0C))))
   (g$chi-rhs*$7622$7lS0C
     g$chi-rhs*$11122$7lS0C
     (case-lambda
       ((g$rhs*$9785$7lS0C g$r$9786$7lS0C g$mr$9787$7lS0C)
        ((letrec ((g$f$9788$7lS0C
                    (case-lambda
                      ((g$ls$9789$7lS0C)
                       (if (null? g$ls$9789$7lS0C)
                         '()
                         ((case-lambda
                            ((g$a$9790$7lS0C)
                             (cons
                               g$a$9790$7lS0C
                               (g$f$9788$7lS0C (cdr g$ls$9789$7lS0C)))))
                          (g$chi-rhs$7620$7lS0C
                            (car g$ls$9789$7lS0C)
                            g$r$9786$7lS0C
                            g$mr$9787$7lS0C)))))))
           g$f$9788$7lS0C)
         g$rhs*$9785$7lS0C))))
   (g$find-bound=?$7623$7lS0C
     g$find-bound=?$11123$7lS0C
     (case-lambda
       ((g$x$9791$7lS0C g$lhs*$9792$7lS0C g$rhs*$9793$7lS0C)
        (if (null? g$lhs*$9792$7lS0C)
          '#f
          (if (g$bound-id=?$7321$7lS0C g$x$9791$7lS0C (car g$lhs*$9792$7lS0C))
            (car g$rhs*$9793$7lS0C)
            (g$find-bound=?$7623$7lS0C
              g$x$9791$7lS0C
              (cdr g$lhs*$9792$7lS0C)
              (cdr g$rhs*$9793$7lS0C)))))))
   (g$find-dups$7624$7lS0C
     g$find-dups$11124$7lS0C
     (case-lambda
       ((g$ls$9794$7lS0C)
        ((letrec ((g$f$9795$7lS0C
                    (case-lambda
                      ((g$ls$9796$7lS0C g$dups$9797$7lS0C)
                       (if (null? g$ls$9796$7lS0C)
                         g$dups$9797$7lS0C
                         ((case-lambda
                            ((g$t$9798$7lS0C)
                             (if g$t$9798$7lS0C
                               ((case-lambda
                                  ((g$x$9799$7lS0C)
                                   (g$f$9795$7lS0C
                                     (cdr g$ls$9796$7lS0C)
                                     (cons
                                       (list
                                         (car g$ls$9796$7lS0C)
                                         g$x$9799$7lS0C)
                                       g$dups$9797$7lS0C))))
                                g$t$9798$7lS0C)
                               (g$f$9795$7lS0C
                                 (cdr g$ls$9796$7lS0C)
                                 g$dups$9797$7lS0C))))
                          (g$find-bound=?$7623$7lS0C
                            (car g$ls$9796$7lS0C)
                            (cdr g$ls$9796$7lS0C)
                            (cdr g$ls$9796$7lS0C))))))))
           g$f$9795$7lS0C)
         g$ls$9794$7lS0C
         '()))))
   (g$chi-internal$7625$7lS0C
     g$chi-internal$11125$7lS0C
     (case-lambda
       ((g$e*$9800$7lS0C g$r$9801$7lS0C g$mr$9802$7lS0C)
        ((case-lambda
           ((g$rib$9803$7lS0C)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7640$7lS0C
                   (g$map$5059$7lS0C
                     (case-lambda
                       ((g$x$9812$7lS0C)
                        (g$add-subst$7308$7lS0C
                          g$rib$9803$7lS0C
                          g$x$9812$7lS0C)))
                     (g$syntax->list$7317$7lS0C g$e*$9800$7lS0C))
                   g$r$9801$7lS0C
                   g$mr$9802$7lS0C
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$9803$7lS0C
                   '#f)))
              (case-lambda
                ((g$e*$9813$7lS0C
                   g$r$9814$7lS0C
                   g$mr$9815$7lS0C
                   g$lex*$9816$7lS0C
                   g$rhs*$9817$7lS0C
                   g$mod**$9818$7lS0C
                   g$kwd*$9819$7lS0C
                   g$_exp*$9820$7lS0C)
                 ((case-lambda
                    ((g$_exp*$9821$7lS0C
                       g$kwd*$9822$7lS0C
                       g$mod**$9823$7lS0C
                       g$rhs*$9824$7lS0C
                       g$lex*$9825$7lS0C
                       g$mr$9826$7lS0C
                       g$r$9827$7lS0C
                       g$e*$9828$7lS0C)
                     (begin
                       (if (null? g$e*$9828$7lS0C)
                         (g$syntax-violation$7708$7lS0C
                           '#f
                           '"no expression in body"
                           g$e*$9828$7lS0C)
                         (void))
                       ((case-lambda
                          ((g$init*$9829$7lS0C)
                           ((case-lambda
                              ((g$rhs*$9830$7lS0C)
                               (g$build-letrec*$7250$7lS0C
                                 '#f
                                 (reverse g$lex*$9825$7lS0C)
                                 (reverse g$rhs*$9830$7lS0C)
                                 (g$build-sequence$7247$7lS0C
                                   '#f
                                   g$init*$9829$7lS0C))))
                            (g$chi-rhs*$7622$7lS0C
                              g$rhs*$9824$7lS0C
                              g$r$9827$7lS0C
                              g$mr$9826$7lS0C))))
                        (g$chi-expr*$7612$7lS0C
                          (append
                            (apply append (reverse g$mod**$9823$7lS0C))
                            g$e*$9828$7lS0C)
                          g$r$9827$7lS0C
                          g$mr$9826$7lS0C)))))
                  g$_exp*$9820$7lS0C
                  g$kwd*$9819$7lS0C
                  g$mod**$9818$7lS0C
                  g$rhs*$9817$7lS0C
                  g$lex*$9816$7lS0C
                  g$mr$9815$7lS0C
                  g$r$9814$7lS0C
                  g$e*$9813$7lS0C))))))
         (g$make-empty-rib$7278$7lS0C)))))
   (g$parse-module$7626$7lS0C
     g$parse-module$11126$7lS0C
     (case-lambda
       ((g$e$9831$7lS0C)
        ((case-lambda
           ((g$t$9832$7lS0C)
            ((case-lambda
               ((g$ls/false$9833$7lS0C)
                (if g$ls/false$9833$7lS0C
                  (apply
                    (case-lambda
                      ((g$export*$9834$7lS0C g$b*$9835$7lS0C)
                       (begin
                         (if (not (g$for-all$5057$7lS0C
                                    g$id?$7318$7lS0C
                                    g$export*$9834$7lS0C))
                           (g$syntax-violation$7708$7lS0C
                             '#f
                             '"module exports must be identifiers"
                             g$e$9831$7lS0C)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$9834$7lS0C)
                           g$b*$9835$7lS0C))))
                    g$ls/false$9833$7lS0C)
                  ((case-lambda
                     ((g$t$9836$7lS0C)
                      ((case-lambda
                         ((g$ls/false$9837$7lS0C)
                          (if g$ls/false$9837$7lS0C
                            (apply
                              (case-lambda
                                ((g$name$9838$7lS0C
                                   g$export*$9839$7lS0C
                                   g$b*$9840$7lS0C)
                                 (begin
                                   (if (not (g$id?$7318$7lS0C
                                              g$name$9838$7lS0C))
                                     (g$syntax-violation$7708$7lS0C
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9831$7lS0C)
                                     (void))
                                   (if (not (g$for-all$5057$7lS0C
                                              g$id?$7318$7lS0C
                                              g$export*$9839$7lS0C))
                                     (g$syntax-violation$7708$7lS0C
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9831$7lS0C)
                                     (void))
                                   (values
                                     g$name$9838$7lS0C
                                     (list->vector g$export*$9839$7lS0C)
                                     g$b*$9840$7lS0C))))
                              g$ls/false$9837$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$9836$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$9836$7lS0C
                         '(_ any each-any . each-any)))))
                   g$t$9832$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$9832$7lS0C
               '(_ each-any . each-any)))))
         g$e$9831$7lS0C))))
   (g$8739$7627$7lS0C
     g$8739$11127$7lS0C
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8742$7lS0C
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8741$7628$7lS0C g$8741$11128$7lS0C '#f)
   (g$8740$7629$7lS0C
     g$8740$11129$7lS0C
     (make-record-constructor-descriptor
       g$8739$7627$7lS0C
       '#f
       g$8741$7628$7lS0C))
   (g$module-interface?$7630$7lS0C
     g$module-interface?$11130$7lS0C
     (record-predicate g$8739$7627$7lS0C))
   (g$make-module-interface$7631$7lS0C
     g$make-module-interface$11131$7lS0C
     (record-constructor g$8740$7629$7lS0C))
   (g$module-interface-first-mark$7632$7lS0C
     g$module-interface-first-mark$11132$7lS0C
     (record-accessor g$8739$7627$7lS0C '0))
   (g$module-interface-exp-id-vec$7633$7lS0C
     g$module-interface-exp-id-vec$11133$7lS0C
     (record-accessor g$8739$7627$7lS0C '1))
   (g$module-interface-exp-lab-vec$7634$7lS0C
     g$module-interface-exp-lab-vec$11134$7lS0C
     (record-accessor g$8739$7627$7lS0C '2))
   (g$set-module-interface-first-mark!$7635$7lS0C
     g$set-module-interface-first-mark!$11135$7lS0C
     (record-mutator g$8739$7627$7lS0C '0))
   (g$set-module-interface-exp-id-vec!$7636$7lS0C
     g$set-module-interface-exp-id-vec!$11136$7lS0C
     (record-mutator g$8739$7627$7lS0C '1))
   (g$set-module-interface-exp-lab-vec!$7637$7lS0C
     g$set-module-interface-exp-lab-vec!$11137$7lS0C
     (record-mutator g$8739$7627$7lS0C '2))
   (g$module-interface-exp-id*$7638$7lS0C
     g$module-interface-exp-id*$11138$7lS0C
     (case-lambda
       ((g$iface$9841$7lS0C g$id$9842$7lS0C)
        (letrec* ((g$diff-marks$9843$7lS0C
                    (case-lambda
                      ((g$ls$9847$7lS0C g$x$9848$7lS0C)
                       (begin
                         (if (null? g$ls$9847$7lS0C)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9849$7lS0C)
                             (if (eq? g$a$9849$7lS0C g$x$9848$7lS0C)
                               '()
                               (cons
                                 g$a$9849$7lS0C
                                 (g$diff-marks$9843$7lS0C
                                   (cdr g$ls$9847$7lS0C)
                                   g$x$9848$7lS0C)))))
                          (car g$ls$9847$7lS0C)))))))
          ((case-lambda
             ((g$diff$9844$7lS0C g$id-vec$9845$7lS0C)
              (if (null? g$diff$9844$7lS0C)
                g$id-vec$9845$7lS0C
                (vector-map
                  (case-lambda
                    ((g$x$9846$7lS0C)
                     (g$make-stx$7291$7lS0C
                       (g$stx-expr$7292$7lS0C g$x$9846$7lS0C)
                       (append
                         g$diff$9844$7lS0C
                         (g$stx-mark*$7293$7lS0C g$x$9846$7lS0C))
                       '()
                       '())))
                  g$id-vec$9845$7lS0C))))
           (g$diff-marks$9843$7lS0C
             (g$stx-mark*$7293$7lS0C g$id$9842$7lS0C)
             (g$module-interface-first-mark$7632$7lS0C g$iface$9841$7lS0C))
           (g$module-interface-exp-id-vec$7633$7lS0C g$iface$9841$7lS0C))))))
   (g$chi-internal-module$7639$7lS0C
     g$chi-internal-module$11139$7lS0C
     (case-lambda
       ((g$e$9850$7lS0C
          g$r$9851$7lS0C
          g$mr$9852$7lS0C
          g$lex*$9853$7lS0C
          g$rhs*$9854$7lS0C
          g$mod**$9855$7lS0C
          g$kwd*$9856$7lS0C)
        (call-with-values
          (case-lambda (() (g$parse-module$7626$7lS0C g$e$9850$7lS0C)))
          (case-lambda
            ((g$name$9860$7lS0C g$exp-id*$9861$7lS0C g$e*$9862$7lS0C)
             ((case-lambda
                ((g$e*$9863$7lS0C g$exp-id*$9864$7lS0C g$name$9865$7lS0C)
                 ((case-lambda
                    ((g$rib$9866$7lS0C)
                     ((case-lambda
                        ((g$e*$9867$7lS0C)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$7640$7lS0C
                                g$e*$9867$7lS0C
                                g$r$9851$7lS0C
                                g$mr$9852$7lS0C
                                g$lex*$9853$7lS0C
                                g$rhs*$9854$7lS0C
                                g$mod**$9855$7lS0C
                                g$kwd*$9856$7lS0C
                                '()
                                g$rib$9866$7lS0C
                                '#f)))
                           (case-lambda
                             ((g$e*$9876$7lS0C
                                g$r$9877$7lS0C
                                g$mr$9878$7lS0C
                                g$lex*$9879$7lS0C
                                g$rhs*$9880$7lS0C
                                g$mod**$9881$7lS0C
                                g$kwd*$9882$7lS0C
                                g$_exp*$9883$7lS0C)
                              ((case-lambda
                                 ((g$_exp*$9884$7lS0C
                                    g$kwd*$9885$7lS0C
                                    g$mod**$9886$7lS0C
                                    g$rhs*$9887$7lS0C
                                    g$lex*$9888$7lS0C
                                    g$mr$9889$7lS0C
                                    g$r$9890$7lS0C
                                    g$e*$9891$7lS0C)
                                  ((case-lambda
                                     ((g$exp-lab*$9892$7lS0C g$mod**$9893$7lS0C)
                                      (if (not g$name$9865$7lS0C)
                                        (values
                                          g$lex*$9888$7lS0C
                                          g$rhs*$9887$7lS0C
                                          g$exp-id*$9864$7lS0C
                                          g$exp-lab*$9892$7lS0C
                                          g$r$9890$7lS0C
                                          g$mr$9889$7lS0C
                                          g$mod**$9893$7lS0C
                                          g$kwd*$9885$7lS0C)
                                        ((case-lambda
                                           ((g$lab$9894$7lS0C
                                              g$iface$9895$7lS0C)
                                            (values
                                              g$lex*$9888$7lS0C
                                              g$rhs*$9887$7lS0C
                                              (vector g$name$9865$7lS0C)
                                              (vector g$lab$9894$7lS0C)
                                              (cons
                                                (cons
                                                  g$lab$9894$7lS0C
                                                  (cons
                                                    '$module
                                                    g$iface$9895$7lS0C))
                                                g$r$9890$7lS0C)
                                              (cons
                                                (cons
                                                  g$lab$9894$7lS0C
                                                  (cons
                                                    '$module
                                                    g$iface$9895$7lS0C))
                                                g$mr$9889$7lS0C)
                                              g$mod**$9893$7lS0C
                                              g$kwd*$9885$7lS0C)))
                                         (g$gen-label$7259$7lS0C 'module)
                                         (g$make-module-interface$7631$7lS0C
                                           (car (g$stx-mark*$7293$7lS0C
                                                  g$name$9865$7lS0C))
                                           (vector-map
                                             (case-lambda
                                               ((g$x$9896$7lS0C)
                                                (g$make-stx$7291$7lS0C
                                                  (g$stx-expr$7292$7lS0C
                                                    g$x$9896$7lS0C)
                                                  (g$stx-mark*$7293$7lS0C
                                                    g$x$9896$7lS0C)
                                                  '()
                                                  '())))
                                             g$exp-id*$9864$7lS0C)
                                           g$exp-lab*$9892$7lS0C)))))
                                   (vector-map
                                     (case-lambda
                                       ((g$x$9897$7lS0C)
                                        ((case-lambda
                                           ((g$t$9898$7lS0C)
                                            (if g$t$9898$7lS0C
                                              g$t$9898$7lS0C
                                              (begin
                                                '#f
                                                (g$syntax-violation$7708$7lS0C
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$9897$7lS0C)))))
                                         (g$id->label$7331$7lS0C
                                           (g$make-stx$7291$7lS0C
                                             (g$id->sym$7319$7lS0C
                                               g$x$9897$7lS0C)
                                             (g$stx-mark*$7293$7lS0C
                                               g$x$9897$7lS0C)
                                             (list g$rib$9866$7lS0C)
                                             '())))))
                                     g$exp-id*$9864$7lS0C)
                                   (cons g$e*$9891$7lS0C g$mod**$9886$7lS0C))))
                               g$_exp*$9883$7lS0C
                               g$kwd*$9882$7lS0C
                               g$mod**$9881$7lS0C
                               g$rhs*$9880$7lS0C
                               g$lex*$9879$7lS0C
                               g$mr$9878$7lS0C
                               g$r$9877$7lS0C
                               g$e*$9876$7lS0C))))))
                      (g$map$5059$7lS0C
                        (case-lambda
                          ((g$x$9899$7lS0C)
                           (g$add-subst$7308$7lS0C
                             g$rib$9866$7lS0C
                             g$x$9899$7lS0C)))
                        (g$syntax->list$7317$7lS0C g$e*$9863$7lS0C)))))
                  (g$make-empty-rib$7278$7lS0C))))
              g$e*$9862$7lS0C
              g$exp-id*$9861$7lS0C
              g$name$9860$7lS0C)))))))
   (g$chi-body*$7640$7lS0C
     g$chi-body*$11140$7lS0C
     (case-lambda
       ((g$e*$9900$7lS0C
          g$r$9901$7lS0C
          g$mr$9902$7lS0C
          g$lex*$9903$7lS0C
          g$rhs*$9904$7lS0C
          g$mod**$9905$7lS0C
          g$kwd*$9906$7lS0C
          g$exp*$9907$7lS0C
          g$rib$9908$7lS0C
          g$top?$9909$7lS0C)
        (if (null? g$e*$9900$7lS0C)
          (values
            g$e*$9900$7lS0C
            g$r$9901$7lS0C
            g$mr$9902$7lS0C
            g$lex*$9903$7lS0C
            g$rhs*$9904$7lS0C
            g$mod**$9905$7lS0C
            g$kwd*$9906$7lS0C
            g$exp*$9907$7lS0C)
          ((case-lambda
             ((g$e$9910$7lS0C)
              (call-with-values
                (case-lambda
                  (() (g$syntax-type$7338$7lS0C g$e$9910$7lS0C g$r$9901$7lS0C)))
                (case-lambda
                  ((g$type$9914$7lS0C g$value$9915$7lS0C g$kwd$9916$7lS0C)
                   ((case-lambda
                      ((g$kwd$9917$7lS0C g$value$9918$7lS0C g$type$9919$7lS0C)
                       ((case-lambda
                          ((g$kwd*$9920$7lS0C)
                           ((case-lambda
                              ((g$t$9921$7lS0C)
                               (if (g$memv$5052$7lS0C g$t$9921$7lS0C '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7536$7lS0C
                                        g$e$9910$7lS0C)))
                                   (case-lambda
                                     ((g$id$9924$7lS0C g$rhs$9925$7lS0C)
                                      ((case-lambda
                                         ((g$rhs$9926$7lS0C g$id$9927$7lS0C)
                                          (begin
                                            (if (g$bound-id-member?$7325$7lS0C
                                                  g$id$9927$7lS0C
                                                  g$kwd*$9920$7lS0C)
                                              (g$syntax-violation$7708$7lS0C
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9910$7lS0C)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7261$7lS0C
                                                   g$id$9927$7lS0C
                                                   g$rib$9908$7lS0C)))
                                              (case-lambda
                                                ((g$lab$9930$7lS0C
                                                   g$lex$9931$7lS0C)
                                                 ((case-lambda
                                                    ((g$lex$9932$7lS0C
                                                       g$lab$9933$7lS0C)
                                                     (begin
                                                       (g$extend-rib!$7281$7lS0C
                                                         g$rib$9908$7lS0C
                                                         g$id$9927$7lS0C
                                                         g$lab$9933$7lS0C)
                                                       (g$chi-body*$7640$7lS0C
                                                         (cdr g$e*$9900$7lS0C)
                                                         (g$add-lexical$7543$7lS0C
                                                           g$lab$9933$7lS0C
                                                           g$lex$9932$7lS0C
                                                           g$r$9901$7lS0C)
                                                         g$mr$9902$7lS0C
                                                         (cons
                                                           g$lex$9932$7lS0C
                                                           g$lex*$9903$7lS0C)
                                                         (cons
                                                           g$rhs$9926$7lS0C
                                                           g$rhs*$9904$7lS0C)
                                                         g$mod**$9905$7lS0C
                                                         g$kwd*$9920$7lS0C
                                                         g$exp*$9907$7lS0C
                                                         g$rib$9908$7lS0C
                                                         g$top?$9909$7lS0C))))
                                                  g$lex$9931$7lS0C
                                                  g$lab$9930$7lS0C)))))))
                                       g$rhs$9925$7lS0C
                                       g$id$9924$7lS0C))))
                                 (if (g$memv$5052$7lS0C
                                       g$t$9921$7lS0C
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7537$7lS0C
                                          g$e$9910$7lS0C)))
                                     (case-lambda
                                       ((g$id$9936$7lS0C g$rhs$9937$7lS0C)
                                        ((case-lambda
                                           ((g$rhs$9938$7lS0C g$id$9939$7lS0C)
                                            (begin
                                              (if (g$bound-id-member?$7325$7lS0C
                                                    g$id$9939$7lS0C
                                                    g$kwd*$9920$7lS0C)
                                                (g$syntax-violation$7708$7lS0C
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9910$7lS0C)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9940$7lS0C
                                                    g$expanded-rhs$9941$7lS0C)
                                                  (begin
                                                    (g$extend-rib!$7281$7lS0C
                                                      g$rib$9908$7lS0C
                                                      g$id$9939$7lS0C
                                                      g$lab$9940$7lS0C)
                                                    ((case-lambda
                                                       ((g$b$9942$7lS0C)
                                                        (g$chi-body*$7640$7lS0C
                                                          (cdr g$e*$9900$7lS0C)
                                                          (cons
                                                            (cons
                                                              g$lab$9940$7lS0C
                                                              g$b$9942$7lS0C)
                                                            g$r$9901$7lS0C)
                                                          (cons
                                                            (cons
                                                              g$lab$9940$7lS0C
                                                              g$b$9942$7lS0C)
                                                            g$mr$9902$7lS0C)
                                                          g$lex*$9903$7lS0C
                                                          g$rhs*$9904$7lS0C
                                                          g$mod**$9905$7lS0C
                                                          g$kwd*$9920$7lS0C
                                                          g$exp*$9907$7lS0C
                                                          g$rib$9908$7lS0C
                                                          g$top?$9909$7lS0C)))
                                                     (g$make-eval-transformer$7350$7lS0C
                                                       g$expanded-rhs$9941$7lS0C)))))
                                               (g$gen-define-label$7262$7lS0C
                                                 g$id$9939$7lS0C
                                                 g$rib$9908$7lS0C)
                                               (g$expand-transformer$7641$7lS0C
                                                 g$rhs$9938$7lS0C
                                                 g$mr$9902$7lS0C)))))
                                         g$rhs$9937$7lS0C
                                         g$id$9936$7lS0C))))
                                   (if (g$memv$5052$7lS0C
                                         g$t$9921$7lS0C
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9943$7lS0C)
                                         ((case-lambda
                                            ((g$ls/false$9944$7lS0C)
                                             (if (if g$ls/false$9944$7lS0C
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9945$7lS0C
                                                            g$xrhs*$9946$7lS0C
                                                            g$xbody*$9947$7lS0C)
                                                          (if (not (g$valid-bound-ids?$7323$7lS0C
                                                                     g$xlhs*$9945$7lS0C))
                                                            (g$syntax-violation$7708$7lS0C
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9910$7lS0C)
                                                            (void))))
                                                       g$ls/false$9944$7lS0C))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9948$7lS0C
                                                      g$xrhs*$9949$7lS0C
                                                      g$xbody*$9950$7lS0C)
                                                    ((case-lambda
                                                       ((g$xlab*$9951$7lS0C)
                                                        ((case-lambda
                                                           ((g$xrib$9952$7lS0C)
                                                            ((case-lambda
                                                               ((g$xb*$9953$7lS0C)
                                                                (g$chi-body*$7640$7lS0C
                                                                  (append
                                                                    (g$map$5059$7lS0C
                                                                      (case-lambda
                                                                        ((g$x$9954$7lS0C)
                                                                         (g$add-subst$7308$7lS0C
                                                                           g$xrib$9952$7lS0C
                                                                           g$x$9954$7lS0C)))
                                                                      g$xbody*$9950$7lS0C)
                                                                    (cdr g$e*$9900$7lS0C))
                                                                  (append
                                                                    (g$map$5059$7lS0C
                                                                      cons
                                                                      g$xlab*$9951$7lS0C
                                                                      g$xb*$9953$7lS0C)
                                                                    g$r$9901$7lS0C)
                                                                  (append
                                                                    (g$map$5059$7lS0C
                                                                      cons
                                                                      g$xlab*$9951$7lS0C
                                                                      g$xb*$9953$7lS0C)
                                                                    g$mr$9902$7lS0C)
                                                                  g$lex*$9903$7lS0C
                                                                  g$rhs*$9904$7lS0C
                                                                  g$mod**$9905$7lS0C
                                                                  g$kwd*$9920$7lS0C
                                                                  g$exp*$9907$7lS0C
                                                                  g$rib$9908$7lS0C
                                                                  g$top?$9909$7lS0C)))
                                                             (g$map$5059$7lS0C
                                                               (case-lambda
                                                                 ((g$x$9955$7lS0C)
                                                                  (g$make-eval-transformer$7350$7lS0C
                                                                    (g$expand-transformer$7641$7lS0C
                                                                      (if (eq? g$type$9919$7lS0C
                                                                               'let-syntax)
                                                                        g$x$9955$7lS0C
                                                                        (g$add-subst$7308$7lS0C
                                                                          g$xrib$9952$7lS0C
                                                                          g$x$9955$7lS0C))
                                                                      g$mr$9902$7lS0C))))
                                                               g$xrhs*$9949$7lS0C))))
                                                         (g$make-full-rib$7286$7lS0C
                                                           g$xlhs*$9948$7lS0C
                                                           g$xlab*$9951$7lS0C))))
                                                     (g$map$5059$7lS0C
                                                       g$gen-label$7259$7lS0C
                                                       g$xlhs*$9948$7lS0C))))
                                                 g$ls/false$9944$7lS0C)
                                               (g$syntax-violation$7708$7lS0C
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9943$7lS0C))))
                                          (g$syntax-dispatch$7596$7lS0C
                                            g$t$9943$7lS0C
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9910$7lS0C)
                                     (if (g$memv$5052$7lS0C
                                           g$t$9921$7lS0C
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$9956$7lS0C)
                                           ((case-lambda
                                              ((g$ls/false$9957$7lS0C)
                                               (if g$ls/false$9957$7lS0C
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9958$7lS0C)
                                                      (g$chi-body*$7640$7lS0C
                                                        (append
                                                          g$x*$9958$7lS0C
                                                          (cdr g$e*$9900$7lS0C))
                                                        g$r$9901$7lS0C
                                                        g$mr$9902$7lS0C
                                                        g$lex*$9903$7lS0C
                                                        g$rhs*$9904$7lS0C
                                                        g$mod**$9905$7lS0C
                                                        g$kwd*$9920$7lS0C
                                                        g$exp*$9907$7lS0C
                                                        g$rib$9908$7lS0C
                                                        g$top?$9909$7lS0C)))
                                                   g$ls/false$9957$7lS0C)
                                                 (g$syntax-violation$7708$7lS0C
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9956$7lS0C))))
                                            (g$syntax-dispatch$7596$7lS0C
                                              g$t$9956$7lS0C
                                              '(_ . each-any)))))
                                        g$e$9910$7lS0C)
                                       (if (g$memv$5052$7lS0C
                                             g$t$9921$7lS0C
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7640$7lS0C
                                           (cons
                                             (g$add-subst$7308$7lS0C
                                               g$rib$9908$7lS0C
                                               (g$chi-global-macro$7611$7lS0C
                                                 g$value$9918$7lS0C
                                                 g$e$9910$7lS0C))
                                             (cdr g$e*$9900$7lS0C))
                                           g$r$9901$7lS0C
                                           g$mr$9902$7lS0C
                                           g$lex*$9903$7lS0C
                                           g$rhs*$9904$7lS0C
                                           g$mod**$9905$7lS0C
                                           g$kwd*$9920$7lS0C
                                           g$exp*$9907$7lS0C
                                           g$rib$9908$7lS0C
                                           g$top?$9909$7lS0C)
                                         (if (g$memv$5052$7lS0C
                                               g$t$9921$7lS0C
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7640$7lS0C
                                             (cons
                                               (g$add-subst$7308$7lS0C
                                                 g$rib$9908$7lS0C
                                                 (g$chi-local-macro$7610$7lS0C
                                                   g$value$9918$7lS0C
                                                   g$e$9910$7lS0C))
                                               (cdr g$e*$9900$7lS0C))
                                             g$r$9901$7lS0C
                                             g$mr$9902$7lS0C
                                             g$lex*$9903$7lS0C
                                             g$rhs*$9904$7lS0C
                                             g$mod**$9905$7lS0C
                                             g$kwd*$9920$7lS0C
                                             g$exp*$9907$7lS0C
                                             g$rib$9908$7lS0C
                                             g$top?$9909$7lS0C)
                                           (if (g$memv$5052$7lS0C
                                                 g$t$9921$7lS0C
                                                 '(macro macro!))
                                             (g$chi-body*$7640$7lS0C
                                               (cons
                                                 (g$add-subst$7308$7lS0C
                                                   g$rib$9908$7lS0C
                                                   (g$chi-macro$7609$7lS0C
                                                     g$value$9918$7lS0C
                                                     g$e$9910$7lS0C))
                                                 (cdr g$e*$9900$7lS0C))
                                               g$r$9901$7lS0C
                                               g$mr$9902$7lS0C
                                               g$lex*$9903$7lS0C
                                               g$rhs*$9904$7lS0C
                                               g$mod**$9905$7lS0C
                                               g$kwd*$9920$7lS0C
                                               g$exp*$9907$7lS0C
                                               g$rib$9908$7lS0C
                                               g$top?$9909$7lS0C)
                                             (if (g$memv$5052$7lS0C
                                                   g$t$9921$7lS0C
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7639$7lS0C
                                                      g$e$9910$7lS0C
                                                      g$r$9901$7lS0C
                                                      g$mr$9902$7lS0C
                                                      g$lex*$9903$7lS0C
                                                      g$rhs*$9904$7lS0C
                                                      g$mod**$9905$7lS0C
                                                      g$kwd*$9920$7lS0C)))
                                                 (case-lambda
                                                   ((g$lex*$9967$7lS0C
                                                      g$rhs*$9968$7lS0C
                                                      g$m-exp-id*$9969$7lS0C
                                                      g$m-exp-lab*$9970$7lS0C
                                                      g$r$9971$7lS0C
                                                      g$mr$9972$7lS0C
                                                      g$mod**$9973$7lS0C
                                                      g$kwd*$9974$7lS0C)
                                                    ((case-lambda
                                                       ((g$kwd*$9975$7lS0C
                                                          g$mod**$9976$7lS0C
                                                          g$mr$9977$7lS0C
                                                          g$r$9978$7lS0C
                                                          g$m-exp-lab*$9979$7lS0C
                                                          g$m-exp-id*$9980$7lS0C
                                                          g$rhs*$9981$7lS0C
                                                          g$lex*$9982$7lS0C)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9983$7lS0C
                                                                 g$lab$9984$7lS0C)
                                                               (g$extend-rib!$7281$7lS0C
                                                                 g$rib$9908$7lS0C
                                                                 g$id$9983$7lS0C
                                                                 g$lab$9984$7lS0C)))
                                                            g$m-exp-id*$9980$7lS0C
                                                            g$m-exp-lab*$9979$7lS0C)
                                                          (g$chi-body*$7640$7lS0C
                                                            (cdr g$e*$9900$7lS0C)
                                                            g$r$9978$7lS0C
                                                            g$mr$9977$7lS0C
                                                            g$lex*$9982$7lS0C
                                                            g$rhs*$9981$7lS0C
                                                            g$mod**$9976$7lS0C
                                                            g$kwd*$9975$7lS0C
                                                            g$exp*$9907$7lS0C
                                                            g$rib$9908$7lS0C
                                                            g$top?$9909$7lS0C))))
                                                     g$kwd*$9974$7lS0C
                                                     g$mod**$9973$7lS0C
                                                     g$mr$9972$7lS0C
                                                     g$r$9971$7lS0C
                                                     g$m-exp-lab*$9970$7lS0C
                                                     g$m-exp-id*$9969$7lS0C
                                                     g$rhs*$9968$7lS0C
                                                     g$lex*$9967$7lS0C))))
                                               (if (g$memv$5052$7lS0C
                                                     g$t$9921$7lS0C
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$7692$7lS0C
                                                     (g$stx->datum$7329$7lS0C
                                                       g$e$9910$7lS0C))
                                                   (g$chi-body*$7640$7lS0C
                                                     (cdr g$e*$9900$7lS0C)
                                                     g$r$9901$7lS0C
                                                     g$mr$9902$7lS0C
                                                     g$lex*$9903$7lS0C
                                                     g$rhs*$9904$7lS0C
                                                     g$mod**$9905$7lS0C
                                                     g$kwd*$9920$7lS0C
                                                     g$exp*$9907$7lS0C
                                                     g$rib$9908$7lS0C
                                                     g$top?$9909$7lS0C))
                                                 (if (g$memv$5052$7lS0C
                                                       g$t$9921$7lS0C
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$9985$7lS0C)
                                                       ((case-lambda
                                                          ((g$ls/false$9986$7lS0C)
                                                           (if g$ls/false$9986$7lS0C
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$9987$7lS0C)
                                                                  (g$chi-body*$7640$7lS0C
                                                                    (cdr g$e*$9900$7lS0C)
                                                                    g$r$9901$7lS0C
                                                                    g$mr$9902$7lS0C
                                                                    g$lex*$9903$7lS0C
                                                                    g$rhs*$9904$7lS0C
                                                                    g$mod**$9905$7lS0C
                                                                    g$kwd*$9920$7lS0C
                                                                    (append
                                                                      g$exp-decl*$9987$7lS0C
                                                                      g$exp*$9907$7lS0C)
                                                                    g$rib$9908$7lS0C
                                                                    g$top?$9909$7lS0C)))
                                                               g$ls/false$9986$7lS0C)
                                                             (g$syntax-violation$7708$7lS0C
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$9985$7lS0C))))
                                                        (g$syntax-dispatch$7596$7lS0C
                                                          g$t$9985$7lS0C
                                                          '(_ . each-any)))))
                                                    g$e$9910$7lS0C)
                                                   (if (g$memv$5052$7lS0C
                                                         g$t$9921$7lS0C
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9988$7lS0C
                                                                     (case-lambda
                                                                       ((g$e$10030$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$t$10031$7lS0C)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10032$7lS0C)
                                                                                (if (if g$ls/false$10032$7lS0C
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10033$7lS0C)
                                                                                             (g$id?$7318$7lS0C
                                                                                               g$id$10033$7lS0C)))
                                                                                          g$ls/false$10032$7lS0C))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10034$7lS0C)
                                                                                       '#t))
                                                                                    g$ls/false$10032$7lS0C)
                                                                                  ((case-lambda
                                                                                     ((g$t$10035$7lS0C)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10036$7lS0C)
                                                                                          (if g$ls/false$10036$7lS0C
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10037$7lS0C)
                                                                                                 '#f))
                                                                                              g$ls/false$10036$7lS0C)
                                                                                            ((case-lambda
                                                                                               ((g$t$10038$7lS0C)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10039$7lS0C)
                                                                                                    (if g$ls/false$10039$7lS0C
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7708$7lS0C
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10030$7lS0C)))
                                                                                                        g$ls/false$10039$7lS0C)
                                                                                                      (g$syntax-violation$7708$7lS0C
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10038$7lS0C))))
                                                                                                 (g$syntax-dispatch$7596$7lS0C
                                                                                                   g$t$10038$7lS0C
                                                                                                   '_))))
                                                                                             g$t$10035$7lS0C))))
                                                                                       (g$syntax-dispatch$7596$7lS0C
                                                                                         g$t$10035$7lS0C
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10031$7lS0C))))
                                                                             (g$syntax-dispatch$7596$7lS0C
                                                                               g$t$10031$7lS0C
                                                                               '(_ any)))))
                                                                         g$e$10030$7lS0C))))
                                                                   (g$module-import$9989$7lS0C
                                                                     (case-lambda
                                                                       ((g$e$10013$7lS0C
                                                                          g$r$10014$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$t$10015$7lS0C)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10016$7lS0C)
                                                                                (if (if g$ls/false$10016$7lS0C
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10017$7lS0C)
                                                                                             (g$id?$7318$7lS0C
                                                                                               g$id$10017$7lS0C)))
                                                                                          g$ls/false$10016$7lS0C))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10018$7lS0C)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7338$7lS0C
                                                                                              g$id$10018$7lS0C
                                                                                              g$r$10014$7lS0C)))
                                                                                         (case-lambda
                                                                                           ((g$type$10022$7lS0C
                                                                                              g$value$10023$7lS0C
                                                                                              g$kwd$10024$7lS0C)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$10025$7lS0C
                                                                                                  g$value$10026$7lS0C
                                                                                                  g$type$10027$7lS0C)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10028$7lS0C)
                                                                                                    (if (g$memv$5052$7lS0C
                                                                                                          g$t$10028$7lS0C
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10029$7lS0C)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7638$7lS0C
                                                                                                              g$iface$10029$7lS0C
                                                                                                              g$id$10018$7lS0C)
                                                                                                            (g$module-interface-exp-lab-vec$7634$7lS0C
                                                                                                              g$iface$10029$7lS0C))))
                                                                                                       g$value$10026$7lS0C)
                                                                                                      (g$syntax-violation$7708$7lS0C
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10013$7lS0C))))
                                                                                                 g$type$10027$7lS0C)))
                                                                                             g$kwd$10024$7lS0C
                                                                                             g$value$10023$7lS0C
                                                                                             g$type$10022$7lS0C))))))
                                                                                    g$ls/false$10016$7lS0C)
                                                                                  (g$syntax-violation$7708$7lS0C
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10015$7lS0C))))
                                                                             (g$syntax-dispatch$7596$7lS0C
                                                                               g$t$10015$7lS0C
                                                                               '(_ any)))))
                                                                         g$e$10013$7lS0C))))
                                                                   (g$library-import$9990$7lS0C
                                                                     (case-lambda
                                                                       ((g$e$9999$7lS0C)
                                                                        ((case-lambda
                                                                           ((g$t$10000$7lS0C)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10001$7lS0C)
                                                                                (if g$ls/false$10001$7lS0C
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$10002$7lS0C
                                                                                         g$imp*$10003$7lS0C)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7645$7lS0C
                                                                                              (g$syntax->datum$7711$7lS0C
                                                                                                g$imp*$10003$7lS0C))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$10006$7lS0C
                                                                                              g$subst-labels$10007$7lS0C)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$10008$7lS0C
                                                                                                  g$subst-names$10009$7lS0C)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$10010$7lS0C)
                                                                                                       (g$datum->stx$7301$7lS0C
                                                                                                         g$ctxt$10002$7lS0C
                                                                                                         g$name$10010$7lS0C)))
                                                                                                    g$subst-names$10009$7lS0C)
                                                                                                  g$subst-labels$10008$7lS0C)))
                                                                                             g$subst-labels$10007$7lS0C
                                                                                             g$subst-names$10006$7lS0C))))))
                                                                                    g$ls/false$10001$7lS0C)
                                                                                  ((case-lambda
                                                                                     ((g$t$10011$7lS0C)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10012$7lS0C)
                                                                                          (if g$ls/false$10012$7lS0C
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7708$7lS0C
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9999$7lS0C)))
                                                                                              g$ls/false$10012$7lS0C)
                                                                                            (g$syntax-violation$7708$7lS0C
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10011$7lS0C))))
                                                                                       (g$syntax-dispatch$7596$7lS0C
                                                                                         g$t$10011$7lS0C
                                                                                         '_))))
                                                                                   g$t$10000$7lS0C))))
                                                                             (g$syntax-dispatch$7596$7lS0C
                                                                               g$t$10000$7lS0C
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9999$7lS0C)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$9988$7lS0C
                                                                        g$e$9910$7lS0C)
                                                                    (g$module-import$9989$7lS0C
                                                                      g$e$9910$7lS0C
                                                                      g$r$9901$7lS0C)
                                                                    (g$library-import$9990$7lS0C
                                                                      g$e$9910$7lS0C))))
                                                               (case-lambda
                                                                 ((g$id*$9993$7lS0C
                                                                    g$lab*$9994$7lS0C)
                                                                  ((case-lambda
                                                                     ((g$lab*$9995$7lS0C
                                                                        g$id*$9996$7lS0C)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$9997$7lS0C
                                                                             g$lab$9998$7lS0C)
                                                                           (g$extend-rib!$7281$7lS0C
                                                                             g$rib$9908$7lS0C
                                                                             g$id$9997$7lS0C
                                                                             g$lab$9998$7lS0C)))
                                                                        g$id*$9996$7lS0C
                                                                        g$lab*$9995$7lS0C)))
                                                                   g$lab*$9994$7lS0C
                                                                   g$id*$9993$7lS0C))))
                                                             (g$chi-body*$7640$7lS0C
                                                               (cdr g$e*$9900$7lS0C)
                                                               g$r$9901$7lS0C
                                                               g$mr$9902$7lS0C
                                                               g$lex*$9903$7lS0C
                                                               g$rhs*$9904$7lS0C
                                                               g$mod**$9905$7lS0C
                                                               g$kwd*$9920$7lS0C
                                                               g$exp*$9907$7lS0C
                                                               g$rib$9908$7lS0C
                                                               g$top?$9909$7lS0C))))))
                                                     (if g$top?$9909$7lS0C
                                                       (g$chi-body*$7640$7lS0C
                                                         (cdr g$e*$9900$7lS0C)
                                                         g$r$9901$7lS0C
                                                         g$mr$9902$7lS0C
                                                         (cons
                                                           (g$gen-lexical$7257$7lS0C
                                                             'dummy)
                                                           g$lex*$9903$7lS0C)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$9910$7lS0C)
                                                           g$rhs*$9904$7lS0C)
                                                         g$mod**$9905$7lS0C
                                                         g$kwd*$9920$7lS0C
                                                         g$exp*$9907$7lS0C
                                                         g$rib$9908$7lS0C
                                                         g$top?$9909$7lS0C)
                                                       (values
                                                         g$e*$9900$7lS0C
                                                         g$r$9901$7lS0C
                                                         g$mr$9902$7lS0C
                                                         g$lex*$9903$7lS0C
                                                         g$rhs*$9904$7lS0C
                                                         g$mod**$9905$7lS0C
                                                         g$kwd*$9920$7lS0C
                                                         g$exp*$9907$7lS0C)))))))))))))))
                            g$type$9919$7lS0C)))
                        (if (g$id?$7318$7lS0C g$kwd$9917$7lS0C)
                          (cons g$kwd$9917$7lS0C g$kwd*$9906$7lS0C)
                          g$kwd*$9906$7lS0C))))
                    g$kwd$9916$7lS0C
                    g$value$9915$7lS0C
                    g$type$9914$7lS0C))))))
           (car g$e*$9900$7lS0C))))))
   (g$expand-transformer$7641$7lS0C
     g$expand-transformer$11141$7lS0C
     (case-lambda
       ((g$expr$10040$7lS0C g$r$10041$7lS0C)
        ((case-lambda
           ((g$rtc$10042$7lS0C)
            ((case-lambda
               ((g$expanded-rhs$10043$7lS0C)
                (begin
                  (g$for-each$5060$7lS0C
                    ((case-lambda
                       ((g$mark-visit$10044$7lS0C)
                        (case-lambda
                          ((g$x$10045$7lS0C)
                           (begin
                             (g$invoke-library$7128$7lS0C g$x$10045$7lS0C)
                             (g$mark-visit$10044$7lS0C g$x$10045$7lS0C))))))
                     (g$vis-collector$7649$7lS0C))
                    (g$rtc$10042$7lS0C))
                  g$expanded-rhs$10043$7lS0C)))
             ((case-lambda
                ((g$inv-collector$10050$7lS0C
                   g$vis-collector$10051$7lS0C
                   g$inv-collector$10052$7lS0C
                   g$vis-collector$10053$7lS0C)
                 ((case-lambda
                    ((g$swap$10054$7lS0C)
                     (dynamic-wind
                       g$swap$10054$7lS0C
                       (case-lambda
                         (()
                          (g$chi-expr$7614$7lS0C
                            g$expr$10040$7lS0C
                            g$r$10041$7lS0C
                            g$r$10041$7lS0C)))
                       g$swap$10054$7lS0C)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10055$7lS0C)
                           (begin
                             (g$inv-collector$10050$7lS0C
                               g$inv-collector$10052$7lS0C)
                             (set! g$inv-collector$10052$7lS0C
                               g$t$10055$7lS0C))))
                        (g$inv-collector$10050$7lS0C))
                       ((case-lambda
                          ((g$t$10056$7lS0C)
                           (begin
                             (g$vis-collector$10051$7lS0C
                               g$vis-collector$10053$7lS0C)
                             (set! g$vis-collector$10053$7lS0C
                               g$t$10056$7lS0C))))
                        (g$vis-collector$10051$7lS0C))))))))
              g$inv-collector$7648$7lS0C
              g$vis-collector$7649$7lS0C
              g$rtc$10042$7lS0C
              (case-lambda ((g$x$10057$7lS0C) (values)))))))
         (g$make-collector$7647$7lS0C)))))
   (g$parse-exports$7642$7lS0C
     g$parse-exports$11142$7lS0C
     (case-lambda
       ((g$exp*$10058$7lS0C)
        ((letrec ((g$f$10059$7lS0C
                    (case-lambda
                      ((g$exp*$10060$7lS0C
                         g$int*$10061$7lS0C
                         g$ext*$10062$7lS0C)
                       (if (null? g$exp*$10060$7lS0C)
                         (begin
                           (if (not (g$valid-bound-ids?$7323$7lS0C
                                      g$ext*$10062$7lS0C))
                             (g$syntax-violation$7708$7lS0C
                               'export
                               '"invalid exports"
                               (g$find-dups$7624$7lS0C g$ext*$10062$7lS0C))
                             (void))
                           (values
                             (g$map$5059$7lS0C
                               g$syntax->datum$7711$7lS0C
                               g$ext*$10062$7lS0C)
                             g$int*$10061$7lS0C))
                         ((case-lambda
                            ((g$t$10063$7lS0C)
                             ((case-lambda
                                ((g$ls/false$10064$7lS0C)
                                 (if g$ls/false$10064$7lS0C
                                   (apply
                                     (case-lambda
                                       ((g$rename$10065$7lS0C
                                          g$i*$10066$7lS0C
                                          g$e*$10067$7lS0C)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$7711$7lS0C
                                                              g$rename$10065$7lS0C)
                                                            'rename)
                                                     (if (g$for-all$5057$7lS0C
                                                           g$id?$7318$7lS0C
                                                           g$i*$10066$7lS0C)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5057$7lS0C
                                                           g$id?$7318$7lS0C
                                                           g$e*$10067$7lS0C))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$7708$7lS0C
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10060$7lS0C))
                                            (void))
                                          (g$f$10059$7lS0C
                                            (cdr g$exp*$10060$7lS0C)
                                            (append
                                              g$i*$10066$7lS0C
                                              g$int*$10061$7lS0C)
                                            (append
                                              g$e*$10067$7lS0C
                                              g$ext*$10062$7lS0C)))))
                                     g$ls/false$10064$7lS0C)
                                   ((case-lambda
                                      ((g$t$10068$7lS0C)
                                       ((case-lambda
                                          ((g$ls/false$10069$7lS0C)
                                           (if g$ls/false$10069$7lS0C
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10070$7lS0C)
                                                  (begin
                                                    (if (not (g$id?$7318$7lS0C
                                                               g$ie$10070$7lS0C))
                                                      (g$syntax-violation$7708$7lS0C
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10070$7lS0C)
                                                      (void))
                                                    (g$f$10059$7lS0C
                                                      (cdr g$exp*$10060$7lS0C)
                                                      (cons
                                                        g$ie$10070$7lS0C
                                                        g$int*$10061$7lS0C)
                                                      (cons
                                                        g$ie$10070$7lS0C
                                                        g$ext*$10062$7lS0C)))))
                                               g$ls/false$10069$7lS0C)
                                             (g$syntax-violation$7708$7lS0C
                                               '#f
                                               '"invalid syntax"
                                               g$t$10068$7lS0C))))
                                        (g$syntax-dispatch$7596$7lS0C
                                          g$t$10068$7lS0C
                                          'any))))
                                    g$t$10063$7lS0C))))
                              (g$syntax-dispatch$7596$7lS0C
                                g$t$10063$7lS0C
                                '(any . #(each (any any)))))))
                          (car g$exp*$10060$7lS0C)))))))
           g$f$10059$7lS0C)
         g$exp*$10058$7lS0C
         '()
         '()))))
   (g$parse-library-name$7643$7lS0C
     g$parse-library-name$11143$7lS0C
     (case-lambda
       ((g$spec$10071$7lS0C)
        (letrec* ((g$parse$10072$7lS0C
                    (case-lambda
                      ((g$x$10079$7lS0C)
                       ((case-lambda
                          ((g$t$10080$7lS0C)
                           ((case-lambda
                              ((g$ls/false$10081$7lS0C)
                               (if (if g$ls/false$10081$7lS0C
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10082$7lS0C)
                                            (g$for-all$5057$7lS0C
                                              (case-lambda
                                                ((g$x$10083$7lS0C)
                                                 ((case-lambda
                                                    ((g$x$10084$7lS0C)
                                                     (if (integer?
                                                           g$x$10084$7lS0C)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10084$7lS0C))
                                                       '#f)))
                                                  (g$syntax->datum$7711$7lS0C
                                                    g$x$10083$7lS0C))))
                                              g$v*$10082$7lS0C)))
                                         g$ls/false$10081$7lS0C))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10085$7lS0C)
                                      (values
                                        '()
                                        (g$map$5059$7lS0C
                                          g$syntax->datum$7711$7lS0C
                                          g$v*$10085$7lS0C))))
                                   g$ls/false$10081$7lS0C)
                                 ((case-lambda
                                    ((g$t$10086$7lS0C)
                                     ((case-lambda
                                        ((g$ls/false$10087$7lS0C)
                                         (if (if g$ls/false$10087$7lS0C
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10088$7lS0C
                                                        g$rest$10089$7lS0C)
                                                      (symbol?
                                                        (g$syntax->datum$7711$7lS0C
                                                          g$x$10088$7lS0C))))
                                                   g$ls/false$10087$7lS0C))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10090$7lS0C
                                                  g$rest$10091$7lS0C)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10072$7lS0C
                                                       g$rest$10091$7lS0C)))
                                                  (case-lambda
                                                    ((g$x*$10094$7lS0C
                                                       g$v*$10095$7lS0C)
                                                     ((case-lambda
                                                        ((g$v*$10096$7lS0C
                                                           g$x*$10097$7lS0C)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7711$7lS0C
                                                               g$x$10090$7lS0C)
                                                             g$x*$10097$7lS0C)
                                                           g$v*$10096$7lS0C)))
                                                      g$v*$10095$7lS0C
                                                      g$x*$10094$7lS0C))))))
                                             g$ls/false$10087$7lS0C)
                                           ((case-lambda
                                              ((g$t$10098$7lS0C)
                                               ((case-lambda
                                                  ((g$ls/false$10099$7lS0C)
                                                   (if g$ls/false$10099$7lS0C
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10099$7lS0C)
                                                     ((case-lambda
                                                        ((g$t$10100$7lS0C)
                                                         ((case-lambda
                                                            ((g$ls/false$10101$7lS0C)
                                                             (if g$ls/false$10101$7lS0C
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7708$7lS0C
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10071$7lS0C)))
                                                                 g$ls/false$10101$7lS0C)
                                                               (g$syntax-violation$7708$7lS0C
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10100$7lS0C))))
                                                          (g$syntax-dispatch$7596$7lS0C
                                                            g$t$10100$7lS0C
                                                            '_))))
                                                      g$t$10098$7lS0C))))
                                                (g$syntax-dispatch$7596$7lS0C
                                                  g$t$10098$7lS0C
                                                  '()))))
                                            g$t$10086$7lS0C))))
                                      (g$syntax-dispatch$7596$7lS0C
                                        g$t$10086$7lS0C
                                        '(any . any)))))
                                  g$t$10080$7lS0C))))
                            (g$syntax-dispatch$7596$7lS0C
                              g$t$10080$7lS0C
                              '(each-any)))))
                        g$x$10079$7lS0C)))))
          (call-with-values
            (case-lambda (() (g$parse$10072$7lS0C g$spec$10071$7lS0C)))
            (case-lambda
              ((g$name*$10075$7lS0C g$ver*$10076$7lS0C)
               ((case-lambda
                  ((g$ver*$10077$7lS0C g$name*$10078$7lS0C)
                   (begin
                     (if (null? g$name*$10078$7lS0C)
                       (g$syntax-violation$7708$7lS0C
                         '#f
                         '"empty library name"
                         g$spec$10071$7lS0C)
                       (void))
                     (values g$name*$10078$7lS0C g$ver*$10077$7lS0C))))
                g$ver*$10076$7lS0C
                g$name*$10075$7lS0C))))))))
   (g$parse-library$7644$7lS0C
     g$parse-library$11144$7lS0C
     (case-lambda
       ((g$e$10102$7lS0C)
        ((case-lambda
           ((g$t$10103$7lS0C)
            ((case-lambda
               ((g$ls/false$10104$7lS0C)
                (if (if g$ls/false$10104$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10105$7lS0C
                               g$name*$10106$7lS0C
                               g$export$10107$7lS0C
                               g$exp*$10108$7lS0C
                               g$import$10109$7lS0C
                               g$imp*$10110$7lS0C
                               g$b*$10111$7lS0C)
                             (if (eq? (g$syntax->datum$7711$7lS0C
                                        g$export$10107$7lS0C)
                                      'export)
                               (if (eq? (g$syntax->datum$7711$7lS0C
                                          g$import$10109$7lS0C)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7711$7lS0C
                                          g$library$10105$7lS0C)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10104$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10112$7lS0C
                         g$name*$10113$7lS0C
                         g$export$10114$7lS0C
                         g$exp*$10115$7lS0C
                         g$import$10116$7lS0C
                         g$imp*$10117$7lS0C
                         g$b*$10118$7lS0C)
                       (values
                         g$name*$10113$7lS0C
                         g$exp*$10115$7lS0C
                         g$imp*$10117$7lS0C
                         g$b*$10118$7lS0C)))
                    g$ls/false$10104$7lS0C)
                  ((case-lambda
                     ((g$t$10119$7lS0C)
                      ((case-lambda
                         ((g$ls/false$10120$7lS0C)
                          (if g$ls/false$10120$7lS0C
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7708$7lS0C
                                   '#f
                                   '"malformed library"
                                   g$e$10102$7lS0C)))
                              g$ls/false$10120$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$10119$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C g$t$10119$7lS0C '_))))
                   g$t$10103$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$10103$7lS0C
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10102$7lS0C))))
   (g$parse-import-spec*$7645$7lS0C
     g$parse-import-spec*$11145$7lS0C
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10121$7lS0C
                     (case-lambda
                       ((g$x$10382$7lS0C)
                        (symbol?
                          (g$syntax->datum$7711$7lS0C g$x$10382$7lS0C)))))
                   (g$dup-error$10122$7lS0C
                     (case-lambda
                       ((g$name$10381$7lS0C)
                        (g$syntax-violation$7708$7lS0C
                          'import
                          '"two imports with different bindings"
                          g$name$10381$7lS0C))))
                   (g$merge-substs$10123$7lS0C
                     (case-lambda
                       ((g$s$10372$7lS0C g$subst$10373$7lS0C)
                        (letrec* ((g$insert-to-subst$10374$7lS0C
                                    (case-lambda
                                      ((g$a$10375$7lS0C g$subst$10376$7lS0C)
                                       ((case-lambda
                                          ((g$name$10377$7lS0C
                                             g$label$10378$7lS0C)
                                           ((case-lambda
                                              ((g$t$10379$7lS0C)
                                               (if g$t$10379$7lS0C
                                                 ((case-lambda
                                                    ((g$x$10380$7lS0C)
                                                     (if (eq? (cdr g$x$10380$7lS0C)
                                                              g$label$10378$7lS0C)
                                                       g$subst$10376$7lS0C
                                                       (g$dup-error$10122$7lS0C
                                                         g$name$10377$7lS0C))))
                                                  g$t$10379$7lS0C)
                                                 (cons
                                                   g$a$10375$7lS0C
                                                   g$subst$10376$7lS0C))))
                                            (g$assq$5047$7lS0C
                                              g$name$10377$7lS0C
                                              g$subst$10376$7lS0C))))
                                        (car g$a$10375$7lS0C)
                                        (cdr g$a$10375$7lS0C))))))
                          (if (null? g$s$10372$7lS0C)
                            g$subst$10373$7lS0C
                            (g$insert-to-subst$10374$7lS0C
                              (car g$s$10372$7lS0C)
                              (g$merge-substs$10123$7lS0C
                                (cdr g$s$10372$7lS0C)
                                g$subst$10373$7lS0C)))))))
                   (g$exclude*$10124$7lS0C
                     (case-lambda
                       ((g$sym*$10348$7lS0C g$subst$10349$7lS0C)
                        (letrec* ((g$exclude$10350$7lS0C
                                    (case-lambda
                                      ((g$sym$10363$7lS0C g$subst$10364$7lS0C)
                                       (if (null? g$subst$10364$7lS0C)
                                         (g$syntax-violation$7708$7lS0C
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10363$7lS0C)
                                         (if (eq? g$sym$10363$7lS0C
                                                  (g$caar$5222$7lS0C
                                                    g$subst$10364$7lS0C))
                                           (values
                                             (g$cdar$5224$7lS0C
                                               g$subst$10364$7lS0C)
                                             (cdr g$subst$10364$7lS0C))
                                           ((case-lambda
                                              ((g$a$10365$7lS0C)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10350$7lS0C
                                                      g$sym$10363$7lS0C
                                                      (cdr g$subst$10364$7lS0C))))
                                                 (case-lambda
                                                   ((g$old$10368$7lS0C
                                                      g$subst$10369$7lS0C)
                                                    ((case-lambda
                                                       ((g$subst$10370$7lS0C
                                                          g$old$10371$7lS0C)
                                                        (values
                                                          g$old$10371$7lS0C
                                                          (cons
                                                            g$a$10365$7lS0C
                                                            g$subst$10370$7lS0C))))
                                                     g$subst$10369$7lS0C
                                                     g$old$10368$7lS0C))))))
                                            (car g$subst$10364$7lS0C))))))))
                          (if (null? g$sym*$10348$7lS0C)
                            (values '() g$subst$10349$7lS0C)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10350$7lS0C
                                   (car g$sym*$10348$7lS0C)
                                   g$subst$10349$7lS0C)))
                              (case-lambda
                                ((g$old$10353$7lS0C g$subst$10354$7lS0C)
                                 ((case-lambda
                                    ((g$subst$10355$7lS0C g$old$10356$7lS0C)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10124$7lS0C
                                            (cdr g$sym*$10348$7lS0C)
                                            g$subst$10355$7lS0C)))
                                       (case-lambda
                                         ((g$old*$10359$7lS0C
                                            g$subst$10360$7lS0C)
                                          ((case-lambda
                                             ((g$subst$10361$7lS0C
                                                g$old*$10362$7lS0C)
                                              (values
                                                (cons
                                                  g$old$10356$7lS0C
                                                  g$old*$10362$7lS0C)
                                                g$subst$10361$7lS0C)))
                                           g$subst$10360$7lS0C
                                           g$old*$10359$7lS0C))))))
                                  g$subst$10354$7lS0C
                                  g$old$10353$7lS0C)))))))))
                   (g$find*$10125$7lS0C
                     (case-lambda
                       ((g$sym*$10344$7lS0C g$subst$10345$7lS0C)
                        (g$map$5059$7lS0C
                          (case-lambda
                            ((g$x$10346$7lS0C)
                             ((case-lambda
                                ((g$t$10347$7lS0C)
                                 (if g$t$10347$7lS0C
                                   (cdr g$t$10347$7lS0C)
                                   (g$syntax-violation$7708$7lS0C
                                     'import
                                     '"cannot find identifier"
                                     g$x$10346$7lS0C))))
                              (g$assq$5047$7lS0C
                                g$x$10346$7lS0C
                                g$subst$10345$7lS0C))))
                          g$sym*$10344$7lS0C))))
                   (g$rem*$10126$7lS0C
                     (case-lambda
                       ((g$sym*$10340$7lS0C g$subst$10341$7lS0C)
                        ((letrec ((g$f$10342$7lS0C
                                    (case-lambda
                                      ((g$subst$10343$7lS0C)
                                       (if (null? g$subst$10343$7lS0C)
                                         '()
                                         (if (g$memq$5051$7lS0C
                                               (g$caar$5222$7lS0C
                                                 g$subst$10343$7lS0C)
                                               g$sym*$10340$7lS0C)
                                           (g$f$10342$7lS0C
                                             (cdr g$subst$10343$7lS0C))
                                           (cons
                                             (car g$subst$10343$7lS0C)
                                             (g$f$10342$7lS0C
                                               (cdr g$subst$10343$7lS0C)))))))))
                           g$f$10342$7lS0C)
                         g$subst$10341$7lS0C))))
                   (g$remove-dups$10127$7lS0C
                     (case-lambda
                       ((g$ls$10339$7lS0C)
                        (if (null? g$ls$10339$7lS0C)
                          '()
                          (if (g$memq$5051$7lS0C
                                (car g$ls$10339$7lS0C)
                                (cdr g$ls$10339$7lS0C))
                            (g$remove-dups$10127$7lS0C (cdr g$ls$10339$7lS0C))
                            (cons
                              (car g$ls$10339$7lS0C)
                              (g$remove-dups$10127$7lS0C
                                (cdr g$ls$10339$7lS0C))))))))
                   (g$parse-library-name$10128$7lS0C
                     (case-lambda
                       ((g$spec$10223$7lS0C)
                        (letrec* ((g$subversion?$10224$7lS0C
                                    (case-lambda
                                      ((g$x$10337$7lS0C)
                                       ((case-lambda
                                          ((g$x$10338$7lS0C)
                                           (if (integer? g$x$10338$7lS0C)
                                             (if (exact? g$x$10338$7lS0C)
                                               (begin
                                                 '#f
                                                 (>= g$x$10338$7lS0C '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$7711$7lS0C
                                          g$x$10337$7lS0C)))))
                                  (g$subversion-pred$10225$7lS0C
                                    (case-lambda
                                      ((g$x*$10289$7lS0C)
                                       ((case-lambda
                                          ((g$t$10290$7lS0C)
                                           ((case-lambda
                                              ((g$ls/false$10291$7lS0C)
                                               (if (if g$ls/false$10291$7lS0C
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10292$7lS0C)
                                                            (g$subversion?$10224$7lS0C
                                                              g$n$10292$7lS0C)))
                                                         g$ls/false$10291$7lS0C))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10293$7lS0C)
                                                      (case-lambda
                                                        ((g$x$10294$7lS0C)
                                                         (= g$x$10294$7lS0C
                                                            (g$syntax->datum$7711$7lS0C
                                                              g$n$10293$7lS0C))))))
                                                   g$ls/false$10291$7lS0C)
                                                 ((case-lambda
                                                    ((g$t$10295$7lS0C)
                                                     ((case-lambda
                                                        ((g$ls/false$10296$7lS0C)
                                                         (if (if g$ls/false$10296$7lS0C
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10297$7lS0C
                                                                        g$sub*$10298$7lS0C)
                                                                      (eq? (g$syntax->datum$7711$7lS0C
                                                                             g$p?$10297$7lS0C)
                                                                           'and)))
                                                                   g$ls/false$10296$7lS0C))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10299$7lS0C
                                                                  g$sub*$10300$7lS0C)
                                                                ((case-lambda
                                                                   ((g$p*$10301$7lS0C)
                                                                    (case-lambda
                                                                      ((g$x$10302$7lS0C)
                                                                       (g$for-all$5057$7lS0C
                                                                         (case-lambda
                                                                           ((g$p$10303$7lS0C)
                                                                            (g$p$10303$7lS0C
                                                                              g$x$10302$7lS0C)))
                                                                         g$p*$10301$7lS0C)))))
                                                                 (g$map$5059$7lS0C
                                                                   g$subversion-pred$10225$7lS0C
                                                                   g$sub*$10300$7lS0C))))
                                                             g$ls/false$10296$7lS0C)
                                                           ((case-lambda
                                                              ((g$t$10304$7lS0C)
                                                               ((case-lambda
                                                                  ((g$ls/false$10305$7lS0C)
                                                                   (if (if g$ls/false$10305$7lS0C
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10306$7lS0C
                                                                                  g$sub*$10307$7lS0C)
                                                                                (eq? (g$syntax->datum$7711$7lS0C
                                                                                       g$p?$10306$7lS0C)
                                                                                     'or)))
                                                                             g$ls/false$10305$7lS0C))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10308$7lS0C
                                                                            g$sub*$10309$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$p*$10310$7lS0C)
                                                                              (case-lambda
                                                                                ((g$x$10311$7lS0C)
                                                                                 (g$exists$5058$7lS0C
                                                                                   (case-lambda
                                                                                     ((g$p$10312$7lS0C)
                                                                                      (g$p$10312$7lS0C
                                                                                        g$x$10311$7lS0C)))
                                                                                   g$p*$10310$7lS0C)))))
                                                                           (g$map$5059$7lS0C
                                                                             g$subversion-pred$10225$7lS0C
                                                                             g$sub*$10309$7lS0C))))
                                                                       g$ls/false$10305$7lS0C)
                                                                     ((case-lambda
                                                                        ((g$t$10313$7lS0C)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10314$7lS0C)
                                                                             (if (if g$ls/false$10314$7lS0C
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10315$7lS0C
                                                                                            g$sub$10316$7lS0C)
                                                                                          (eq? (g$syntax->datum$7711$7lS0C
                                                                                                 g$p?$10315$7lS0C)
                                                                                               'not)))
                                                                                       g$ls/false$10314$7lS0C))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10317$7lS0C
                                                                                      g$sub$10318$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$p$10319$7lS0C)
                                                                                        (case-lambda
                                                                                          ((g$x$10320$7lS0C)
                                                                                           (not (g$p$10319$7lS0C
                                                                                                  g$x$10320$7lS0C))))))
                                                                                     (g$subversion-pred$10225$7lS0C
                                                                                       g$sub$10318$7lS0C))))
                                                                                 g$ls/false$10314$7lS0C)
                                                                               ((case-lambda
                                                                                  ((g$t$10321$7lS0C)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10322$7lS0C)
                                                                                       (if (if g$ls/false$10322$7lS0C
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10323$7lS0C
                                                                                                      g$n$10324$7lS0C)
                                                                                                    (if (eq? (g$syntax->datum$7711$7lS0C
                                                                                                               g$p?$10323$7lS0C)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10224$7lS0C
                                                                                                          g$n$10324$7lS0C))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10322$7lS0C))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10325$7lS0C
                                                                                                g$n$10326$7lS0C)
                                                                                              (case-lambda
                                                                                                ((g$x$10327$7lS0C)
                                                                                                 (<= g$x$10327$7lS0C
                                                                                                     (g$syntax->datum$7711$7lS0C
                                                                                                       g$n$10326$7lS0C))))))
                                                                                           g$ls/false$10322$7lS0C)
                                                                                         ((case-lambda
                                                                                            ((g$t$10328$7lS0C)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10329$7lS0C)
                                                                                                 (if (if g$ls/false$10329$7lS0C
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10330$7lS0C
                                                                                                                g$n$10331$7lS0C)
                                                                                                              (if (eq? (g$syntax->datum$7711$7lS0C
                                                                                                                         g$p?$10330$7lS0C)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10224$7lS0C
                                                                                                                    g$n$10331$7lS0C))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10329$7lS0C))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10332$7lS0C
                                                                                                          g$n$10333$7lS0C)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10334$7lS0C)
                                                                                                           (>= g$x$10334$7lS0C
                                                                                                               (g$syntax->datum$7711$7lS0C
                                                                                                                 g$n$10333$7lS0C))))))
                                                                                                     g$ls/false$10329$7lS0C)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10335$7lS0C)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10336$7lS0C)
                                                                                                           (if g$ls/false$10336$7lS0C
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$7708$7lS0C
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10223$7lS0C
                                                                                                                    g$x*$10289$7lS0C)))
                                                                                                               g$ls/false$10336$7lS0C)
                                                                                                             (g$syntax-violation$7708$7lS0C
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10335$7lS0C))))
                                                                                                        (g$syntax-dispatch$7596$7lS0C
                                                                                                          g$t$10335$7lS0C
                                                                                                          '_))))
                                                                                                    g$t$10328$7lS0C))))
                                                                                              (g$syntax-dispatch$7596$7lS0C
                                                                                                g$t$10328$7lS0C
                                                                                                '(any any)))))
                                                                                          g$t$10321$7lS0C))))
                                                                                    (g$syntax-dispatch$7596$7lS0C
                                                                                      g$t$10321$7lS0C
                                                                                      '(any any)))))
                                                                                g$t$10313$7lS0C))))
                                                                          (g$syntax-dispatch$7596$7lS0C
                                                                            g$t$10313$7lS0C
                                                                            '(any any)))))
                                                                      g$t$10304$7lS0C))))
                                                                (g$syntax-dispatch$7596$7lS0C
                                                                  g$t$10304$7lS0C
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10295$7lS0C))))
                                                      (g$syntax-dispatch$7596$7lS0C
                                                        g$t$10295$7lS0C
                                                        '(any . each-any)))))
                                                  g$t$10290$7lS0C))))
                                            (g$syntax-dispatch$7596$7lS0C
                                              g$t$10290$7lS0C
                                              'any))))
                                        g$x*$10289$7lS0C))))
                                  (g$version-pred$10226$7lS0C
                                    (case-lambda
                                      ((g$x*$10249$7lS0C)
                                       ((case-lambda
                                          ((g$t$10250$7lS0C)
                                           ((case-lambda
                                              ((g$ls/false$10251$7lS0C)
                                               (if g$ls/false$10251$7lS0C
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10252$7lS0C)
                                                         '#t))))
                                                   g$ls/false$10251$7lS0C)
                                                 ((case-lambda
                                                    ((g$t$10253$7lS0C)
                                                     ((case-lambda
                                                        ((g$ls/false$10254$7lS0C)
                                                         (if (if g$ls/false$10254$7lS0C
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10255$7lS0C
                                                                        g$ver*$10256$7lS0C)
                                                                      (eq? (g$syntax->datum$7711$7lS0C
                                                                             g$c$10255$7lS0C)
                                                                           'and)))
                                                                   g$ls/false$10254$7lS0C))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10257$7lS0C
                                                                  g$ver*$10258$7lS0C)
                                                                ((case-lambda
                                                                   ((g$p*$10259$7lS0C)
                                                                    (case-lambda
                                                                      ((g$x$10260$7lS0C)
                                                                       (g$for-all$5057$7lS0C
                                                                         (case-lambda
                                                                           ((g$p$10261$7lS0C)
                                                                            (g$p$10261$7lS0C
                                                                              g$x$10260$7lS0C)))
                                                                         g$p*$10259$7lS0C)))))
                                                                 (g$map$5059$7lS0C
                                                                   g$version-pred$10226$7lS0C
                                                                   g$ver*$10258$7lS0C))))
                                                             g$ls/false$10254$7lS0C)
                                                           ((case-lambda
                                                              ((g$t$10262$7lS0C)
                                                               ((case-lambda
                                                                  ((g$ls/false$10263$7lS0C)
                                                                   (if (if g$ls/false$10263$7lS0C
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10264$7lS0C
                                                                                  g$ver*$10265$7lS0C)
                                                                                (eq? (g$syntax->datum$7711$7lS0C
                                                                                       g$c$10264$7lS0C)
                                                                                     'or)))
                                                                             g$ls/false$10263$7lS0C))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10266$7lS0C
                                                                            g$ver*$10267$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$p*$10268$7lS0C)
                                                                              (case-lambda
                                                                                ((g$x$10269$7lS0C)
                                                                                 (g$exists$5058$7lS0C
                                                                                   (case-lambda
                                                                                     ((g$p$10270$7lS0C)
                                                                                      (g$p$10270$7lS0C
                                                                                        g$x$10269$7lS0C)))
                                                                                   g$p*$10268$7lS0C)))))
                                                                           (g$map$5059$7lS0C
                                                                             g$version-pred$10226$7lS0C
                                                                             g$ver*$10267$7lS0C))))
                                                                       g$ls/false$10263$7lS0C)
                                                                     ((case-lambda
                                                                        ((g$t$10271$7lS0C)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10272$7lS0C)
                                                                             (if (if g$ls/false$10272$7lS0C
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10273$7lS0C
                                                                                            g$ver$10274$7lS0C)
                                                                                          (eq? (g$syntax->datum$7711$7lS0C
                                                                                                 g$c$10273$7lS0C)
                                                                                               'not)))
                                                                                       g$ls/false$10272$7lS0C))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10275$7lS0C
                                                                                      g$ver$10276$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$p$10277$7lS0C)
                                                                                        (case-lambda
                                                                                          ((g$x$10278$7lS0C)
                                                                                           (not (g$p$10277$7lS0C
                                                                                                  g$x$10278$7lS0C))))))
                                                                                     (g$version-pred$10226$7lS0C
                                                                                       g$ver$10276$7lS0C))))
                                                                                 g$ls/false$10272$7lS0C)
                                                                               ((case-lambda
                                                                                  ((g$t$10279$7lS0C)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10280$7lS0C)
                                                                                       (if g$ls/false$10280$7lS0C
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10281$7lS0C)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10282$7lS0C)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10283$7lS0C)
                                                                                                     ((letrec ((g$f$10284$7lS0C
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10285$7lS0C
                                                                                                                      g$x$10286$7lS0C)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10285$7lS0C)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10286$7lS0C)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10285$7lS0C)
                                                                                                                             (car g$x$10286$7lS0C))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10284$7lS0C
                                                                                                                              (cdr g$p*$10285$7lS0C)
                                                                                                                              (cdr g$x$10286$7lS0C)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10284$7lS0C)
                                                                                                      g$p*$10282$7lS0C
                                                                                                      g$x$10283$7lS0C)))))
                                                                                               (g$map$5059$7lS0C
                                                                                                 g$subversion-pred$10225$7lS0C
                                                                                                 g$sub*$10281$7lS0C))))
                                                                                           g$ls/false$10280$7lS0C)
                                                                                         ((case-lambda
                                                                                            ((g$t$10287$7lS0C)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10288$7lS0C)
                                                                                                 (if g$ls/false$10288$7lS0C
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$7708$7lS0C
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10223$7lS0C
                                                                                                          g$x*$10249$7lS0C)))
                                                                                                     g$ls/false$10288$7lS0C)
                                                                                                   (g$syntax-violation$7708$7lS0C
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10287$7lS0C))))
                                                                                              (g$syntax-dispatch$7596$7lS0C
                                                                                                g$t$10287$7lS0C
                                                                                                '_))))
                                                                                          g$t$10279$7lS0C))))
                                                                                    (g$syntax-dispatch$7596$7lS0C
                                                                                      g$t$10279$7lS0C
                                                                                      'each-any))))
                                                                                g$t$10271$7lS0C))))
                                                                          (g$syntax-dispatch$7596$7lS0C
                                                                            g$t$10271$7lS0C
                                                                            '(any any)))))
                                                                      g$t$10262$7lS0C))))
                                                                (g$syntax-dispatch$7596$7lS0C
                                                                  g$t$10262$7lS0C
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10253$7lS0C))))
                                                      (g$syntax-dispatch$7596$7lS0C
                                                        g$t$10253$7lS0C
                                                        '(any . each-any)))))
                                                  g$t$10250$7lS0C))))
                                            (g$syntax-dispatch$7596$7lS0C
                                              g$t$10250$7lS0C
                                              '()))))
                                        g$x*$10249$7lS0C)))))
                          ((letrec ((g$f$10227$7lS0C
                                      (case-lambda
                                        ((g$x$10228$7lS0C)
                                         ((case-lambda
                                            ((g$t$10229$7lS0C)
                                             ((case-lambda
                                                ((g$ls/false$10230$7lS0C)
                                                 (if g$ls/false$10230$7lS0C
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10231$7lS0C)
                                                        (values
                                                          '()
                                                          (g$version-pred$10226$7lS0C
                                                            g$version-spec*$10231$7lS0C))))
                                                     g$ls/false$10230$7lS0C)
                                                   ((case-lambda
                                                      ((g$t$10232$7lS0C)
                                                       ((case-lambda
                                                          ((g$ls/false$10233$7lS0C)
                                                           (if (if g$ls/false$10233$7lS0C
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10234$7lS0C
                                                                          g$x*$10235$7lS0C)
                                                                        (g$idsyn?$10121$7lS0C
                                                                          g$x$10234$7lS0C)))
                                                                     g$ls/false$10233$7lS0C))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10236$7lS0C
                                                                    g$x*$10237$7lS0C)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10227$7lS0C
                                                                         g$x*$10237$7lS0C)))
                                                                    (case-lambda
                                                                      ((g$name$10240$7lS0C
                                                                         g$pred$10241$7lS0C)
                                                                       ((case-lambda
                                                                          ((g$pred$10242$7lS0C
                                                                             g$name$10243$7lS0C)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$7711$7lS0C
                                                                                 g$x$10236$7lS0C)
                                                                               g$name$10243$7lS0C)
                                                                             g$pred$10242$7lS0C)))
                                                                        g$pred$10241$7lS0C
                                                                        g$name$10240$7lS0C))))))
                                                               g$ls/false$10233$7lS0C)
                                                             ((case-lambda
                                                                ((g$t$10244$7lS0C)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10245$7lS0C)
                                                                     (if g$ls/false$10245$7lS0C
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10246$7lS0C)
                                                                                 '#t)))))
                                                                         g$ls/false$10245$7lS0C)
                                                                       ((case-lambda
                                                                          ((g$t$10247$7lS0C)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10248$7lS0C)
                                                                               (if g$ls/false$10248$7lS0C
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$7708$7lS0C
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10223$7lS0C)))
                                                                                   g$ls/false$10248$7lS0C)
                                                                                 (g$syntax-violation$7708$7lS0C
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10247$7lS0C))))
                                                                            (g$syntax-dispatch$7596$7lS0C
                                                                              g$t$10247$7lS0C
                                                                              '_))))
                                                                        g$t$10244$7lS0C))))
                                                                  (g$syntax-dispatch$7596$7lS0C
                                                                    g$t$10244$7lS0C
                                                                    '()))))
                                                              g$t$10232$7lS0C))))
                                                        (g$syntax-dispatch$7596$7lS0C
                                                          g$t$10232$7lS0C
                                                          '(any . any)))))
                                                    g$t$10229$7lS0C))))
                                              (g$syntax-dispatch$7596$7lS0C
                                                g$t$10229$7lS0C
                                                '(each-any)))))
                                          g$x$10228$7lS0C)))))
                             g$f$10227$7lS0C)
                           g$spec$10223$7lS0C)))))
                   (g$import-library$10129$7lS0C
                     (case-lambda
                       ((g$spec*$10215$7lS0C)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10128$7lS0C
                               g$spec*$10215$7lS0C)))
                          (case-lambda
                            ((g$name$10218$7lS0C g$pred$10219$7lS0C)
                             ((case-lambda
                                ((g$pred$10220$7lS0C g$name$10221$7lS0C)
                                 (begin
                                   (if (null? g$name$10221$7lS0C)
                                     (g$syntax-violation$7708$7lS0C
                                       'import
                                       '"empty library name"
                                       g$spec*$10215$7lS0C)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10222$7lS0C)
                                       (begin
                                         (if (not g$lib$10222$7lS0C)
                                           (g$syntax-violation$7708$7lS0C
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10221$7lS0C)
                                           (void))
                                         (if (not (g$pred$10220$7lS0C
                                                    (g$library-version$7081$7lS0C
                                                      g$lib$10222$7lS0C)))
                                           (g$syntax-violation$7708$7lS0C
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10215$7lS0C
                                             g$lib$10222$7lS0C)
                                           (void))
                                         ((g$imp-collector$7650$7lS0C)
                                          g$lib$10222$7lS0C)
                                         (g$library-subst$7085$7lS0C
                                           g$lib$10222$7lS0C))))
                                    (g$find-library-by-name$7121$7lS0C
                                      g$name$10221$7lS0C)))))
                              g$pred$10219$7lS0C
                              g$name$10218$7lS0C)))))))
                   (g$get-import$10130$7lS0C
                     (case-lambda
                       ((g$spec$10144$7lS0C)
                        ((case-lambda
                           ((g$t$10145$7lS0C)
                            ((case-lambda
                               ((g$ls/false$10146$7lS0C)
                                (if (if g$ls/false$10146$7lS0C
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10147$7lS0C g$x*$10148$7lS0C)
                                             (not (g$memq$5051$7lS0C
                                                    (g$syntax->datum$7711$7lS0C
                                                      g$x$10147$7lS0C)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10146$7lS0C))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10149$7lS0C g$x*$10150$7lS0C)
                                       (g$import-library$10129$7lS0C
                                         (cons
                                           g$x$10149$7lS0C
                                           g$x*$10150$7lS0C))))
                                    g$ls/false$10146$7lS0C)
                                  ((case-lambda
                                     ((g$t$10151$7lS0C)
                                      ((case-lambda
                                         ((g$ls/false$10152$7lS0C)
                                          (if (if g$ls/false$10152$7lS0C
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10153$7lS0C
                                                         g$isp$10154$7lS0C
                                                         g$old*$10155$7lS0C
                                                         g$new*$10156$7lS0C)
                                                       (if (eq? (g$syntax->datum$7711$7lS0C
                                                                  g$rename$10153$7lS0C)
                                                                'rename)
                                                         (if (g$for-all$5057$7lS0C
                                                               g$idsyn?$10121$7lS0C
                                                               g$old*$10155$7lS0C)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5057$7lS0C
                                                               g$idsyn?$10121$7lS0C
                                                               g$new*$10156$7lS0C))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10152$7lS0C))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10157$7lS0C
                                                   g$isp$10158$7lS0C
                                                   g$old*$10159$7lS0C
                                                   g$new*$10160$7lS0C)
                                                 ((case-lambda
                                                    ((g$subst$10161$7lS0C
                                                       g$old*$10162$7lS0C
                                                       g$new*$10163$7lS0C)
                                                     ((case-lambda
                                                        ((g$old-label*$10164$7lS0C)
                                                         ((case-lambda
                                                            ((g$subst$10165$7lS0C)
                                                             (g$merge-substs$10123$7lS0C
                                                               (g$map$5059$7lS0C
                                                                 cons
                                                                 g$new*$10163$7lS0C
                                                                 g$old-label*$10164$7lS0C)
                                                               g$subst$10165$7lS0C)))
                                                          (g$rem*$10126$7lS0C
                                                            g$old*$10162$7lS0C
                                                            g$subst$10161$7lS0C))))
                                                      (g$find*$10125$7lS0C
                                                        g$old*$10162$7lS0C
                                                        g$subst$10161$7lS0C))))
                                                  (g$get-import$10130$7lS0C
                                                    g$isp$10158$7lS0C)
                                                  (g$map$5059$7lS0C
                                                    g$syntax->datum$7711$7lS0C
                                                    g$old*$10159$7lS0C)
                                                  (g$map$5059$7lS0C
                                                    g$syntax->datum$7711$7lS0C
                                                    g$new*$10160$7lS0C))))
                                              g$ls/false$10152$7lS0C)
                                            ((case-lambda
                                               ((g$t$10166$7lS0C)
                                                ((case-lambda
                                                   ((g$ls/false$10167$7lS0C)
                                                    (if (if g$ls/false$10167$7lS0C
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10168$7lS0C
                                                                   g$isp$10169$7lS0C
                                                                   g$sym*$10170$7lS0C)
                                                                 (if (eq? (g$syntax->datum$7711$7lS0C
                                                                            g$except$10168$7lS0C)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5057$7lS0C
                                                                       g$idsyn?$10121$7lS0C
                                                                       g$sym*$10170$7lS0C))
                                                                   '#f)))
                                                              g$ls/false$10167$7lS0C))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10171$7lS0C
                                                             g$isp$10172$7lS0C
                                                             g$sym*$10173$7lS0C)
                                                           ((case-lambda
                                                              ((g$subst$10174$7lS0C)
                                                               (g$rem*$10126$7lS0C
                                                                 (g$map$5059$7lS0C
                                                                   g$syntax->datum$7711$7lS0C
                                                                   g$sym*$10173$7lS0C)
                                                                 g$subst$10174$7lS0C)))
                                                            (g$get-import$10130$7lS0C
                                                              g$isp$10172$7lS0C))))
                                                        g$ls/false$10167$7lS0C)
                                                      ((case-lambda
                                                         ((g$t$10175$7lS0C)
                                                          ((case-lambda
                                                             ((g$ls/false$10176$7lS0C)
                                                              (if (if g$ls/false$10176$7lS0C
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10177$7lS0C
                                                                             g$isp$10178$7lS0C
                                                                             g$sym*$10179$7lS0C)
                                                                           (if (eq? (g$syntax->datum$7711$7lS0C
                                                                                      g$only$10177$7lS0C)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5057$7lS0C
                                                                                 g$idsyn?$10121$7lS0C
                                                                                 g$sym*$10179$7lS0C))
                                                                             '#f)))
                                                                        g$ls/false$10176$7lS0C))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10180$7lS0C
                                                                       g$isp$10181$7lS0C
                                                                       g$sym*$10182$7lS0C)
                                                                     ((case-lambda
                                                                        ((g$subst$10183$7lS0C
                                                                           g$sym*$10184$7lS0C)
                                                                         ((case-lambda
                                                                            ((g$sym*$10185$7lS0C)
                                                                             ((case-lambda
                                                                                ((g$lab*$10186$7lS0C)
                                                                                 (g$map$5059$7lS0C
                                                                                   cons
                                                                                   g$sym*$10185$7lS0C
                                                                                   g$lab*$10186$7lS0C)))
                                                                              (g$find*$10125$7lS0C
                                                                                g$sym*$10185$7lS0C
                                                                                g$subst$10183$7lS0C))))
                                                                          (g$remove-dups$10127$7lS0C
                                                                            g$sym*$10184$7lS0C))))
                                                                      (g$get-import$10130$7lS0C
                                                                        g$isp$10181$7lS0C)
                                                                      (g$map$5059$7lS0C
                                                                        g$syntax->datum$7711$7lS0C
                                                                        g$sym*$10182$7lS0C))))
                                                                  g$ls/false$10176$7lS0C)
                                                                ((case-lambda
                                                                   ((g$t$10187$7lS0C)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10188$7lS0C)
                                                                        (if (if g$ls/false$10188$7lS0C
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10189$7lS0C
                                                                                       g$isp$10190$7lS0C
                                                                                       g$p$10191$7lS0C)
                                                                                     (if (eq? (g$syntax->datum$7711$7lS0C
                                                                                                g$prefix$10189$7lS0C)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10121$7lS0C
                                                                                           g$p$10191$7lS0C))
                                                                                       '#f)))
                                                                                  g$ls/false$10188$7lS0C))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10192$7lS0C
                                                                                 g$isp$10193$7lS0C
                                                                                 g$p$10194$7lS0C)
                                                                               ((case-lambda
                                                                                  ((g$subst$10195$7lS0C
                                                                                     g$prefix$10196$7lS0C)
                                                                                   (g$map$5059$7lS0C
                                                                                     (case-lambda
                                                                                       ((g$x$10197$7lS0C)
                                                                                        (cons
                                                                                          (string->symbol
                                                                                            (string-append
                                                                                              g$prefix$10196$7lS0C
                                                                                              (symbol->string
                                                                                                (car g$x$10197$7lS0C))))
                                                                                          (cdr g$x$10197$7lS0C))))
                                                                                     g$subst$10195$7lS0C)))
                                                                                (g$get-import$10130$7lS0C
                                                                                  g$isp$10193$7lS0C)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$7711$7lS0C
                                                                                    g$p$10194$7lS0C)))))
                                                                            g$ls/false$10188$7lS0C)
                                                                          ((case-lambda
                                                                             ((g$t$10198$7lS0C)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10199$7lS0C)
                                                                                  (if (if g$ls/false$10199$7lS0C
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10200$7lS0C
                                                                                                 g$spec*$10201$7lS0C)
                                                                                               (eq? (g$syntax->datum$7711$7lS0C
                                                                                                      g$library$10200$7lS0C)
                                                                                                    'library)))
                                                                                            g$ls/false$10199$7lS0C))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10202$7lS0C
                                                                                           g$spec*$10203$7lS0C)
                                                                                         (g$import-library$10129$7lS0C
                                                                                           g$spec*$10203$7lS0C)))
                                                                                      g$ls/false$10199$7lS0C)
                                                                                    ((case-lambda
                                                                                       ((g$t$10204$7lS0C)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10205$7lS0C)
                                                                                            (if (if g$ls/false$10205$7lS0C
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10206$7lS0C
                                                                                                           g$isp$10207$7lS0C
                                                                                                           g$rest$10208$7lS0C)
                                                                                                         (eq? (g$syntax->datum$7711$7lS0C
                                                                                                                g$for$10206$7lS0C)
                                                                                                              'for)))
                                                                                                      g$ls/false$10205$7lS0C))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10209$7lS0C
                                                                                                     g$isp$10210$7lS0C
                                                                                                     g$rest$10211$7lS0C)
                                                                                                   (g$get-import$10130$7lS0C
                                                                                                     g$isp$10210$7lS0C)))
                                                                                                g$ls/false$10205$7lS0C)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10212$7lS0C)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10213$7lS0C)
                                                                                                      (if g$ls/false$10213$7lS0C
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10214$7lS0C)
                                                                                                             (g$syntax-violation$7708$7lS0C
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10214$7lS0C)))
                                                                                                          g$ls/false$10213$7lS0C)
                                                                                                        (g$syntax-violation$7708$7lS0C
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10212$7lS0C))))
                                                                                                   (g$syntax-dispatch$7596$7lS0C
                                                                                                     g$t$10212$7lS0C
                                                                                                     'any))))
                                                                                               g$t$10204$7lS0C))))
                                                                                         (g$syntax-dispatch$7596$7lS0C
                                                                                           g$t$10204$7lS0C
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10198$7lS0C))))
                                                                               (g$syntax-dispatch$7596$7lS0C
                                                                                 g$t$10198$7lS0C
                                                                                 '(any each-any)))))
                                                                           g$t$10187$7lS0C))))
                                                                     (g$syntax-dispatch$7596$7lS0C
                                                                       g$t$10187$7lS0C
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10175$7lS0C))))
                                                           (g$syntax-dispatch$7596$7lS0C
                                                             g$t$10175$7lS0C
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10166$7lS0C))))
                                                 (g$syntax-dispatch$7596$7lS0C
                                                   g$t$10166$7lS0C
                                                   '(any any . each-any)))))
                                             g$t$10151$7lS0C))))
                                       (g$syntax-dispatch$7596$7lS0C
                                         g$t$10151$7lS0C
                                         '(any any . #(each (any any)))))))
                                   g$t$10145$7lS0C))))
                             (g$syntax-dispatch$7596$7lS0C
                               g$t$10145$7lS0C
                               '(any . each-any)))))
                         g$spec$10144$7lS0C))))
                   (g$add-imports!$10131$7lS0C
                     (case-lambda
                       ((g$imp$10136$7lS0C g$h$10137$7lS0C)
                        ((case-lambda
                           ((g$subst$10138$7lS0C)
                            (g$for-each$5060$7lS0C
                              (case-lambda
                                ((g$x$10139$7lS0C)
                                 ((case-lambda
                                    ((g$name$10140$7lS0C g$label$10141$7lS0C)
                                     ((case-lambda
                                        ((g$t$10142$7lS0C)
                                         (if g$t$10142$7lS0C
                                           ((case-lambda
                                              ((g$l$10143$7lS0C)
                                               (if (not (eq? g$l$10143$7lS0C
                                                             g$label$10141$7lS0C))
                                                 (g$dup-error$10122$7lS0C
                                                   g$name$10140$7lS0C)
                                                 (void))))
                                            g$t$10142$7lS0C)
                                           (g$hashtable-set!$5492$7lS0C
                                             g$h$10137$7lS0C
                                             g$name$10140$7lS0C
                                             g$label$10141$7lS0C))))
                                      (g$hashtable-ref$5491$7lS0C
                                        g$h$10137$7lS0C
                                        g$name$10140$7lS0C
                                        '#f))))
                                  (car g$x$10139$7lS0C)
                                  (cdr g$x$10139$7lS0C))))
                              g$subst$10138$7lS0C)))
                         (g$get-import$10130$7lS0C g$imp$10136$7lS0C))))))
           (case-lambda
             ((g$imp*$10132$7lS0C)
              ((letrec ((g$f$10133$7lS0C
                          (case-lambda
                            ((g$imp*$10134$7lS0C g$h$10135$7lS0C)
                             (if (null? g$imp*$10134$7lS0C)
                               (hashtable-entries g$h$10135$7lS0C)
                               (begin
                                 (g$add-imports!$10131$7lS0C
                                   (car g$imp*$10134$7lS0C)
                                   g$h$10135$7lS0C)
                                 (g$f$10133$7lS0C
                                   (cdr g$imp*$10134$7lS0C)
                                   g$h$10135$7lS0C)))))))
                 g$f$10133$7lS0C)
               g$imp*$10132$7lS0C
               (g$make-eq-hashtable$5488$7lS0C)))))))))
   (g$make-top-rib$7646$7lS0C
     g$make-top-rib$11146$7lS0C
     (case-lambda
       ((g$names$10383$7lS0C g$labels$10384$7lS0C)
        ((case-lambda
           ((g$rib$10385$7lS0C)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10386$7lS0C g$label$10387$7lS0C)
                   (begin
                     (if (not (symbol? g$name$10386$7lS0C))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10386$7lS0C)
                       (void))
                     (g$extend-rib/nc!$7282$7lS0C
                       g$rib$10385$7lS0C
                       (g$make-stx$7291$7lS0C
                         g$name$10386$7lS0C
                         g$top-mark*$7255$7lS0C
                         '()
                         '())
                       g$label$10387$7lS0C))))
                g$names$10383$7lS0C
                g$labels$10384$7lS0C)
              g$rib$10385$7lS0C)))
         (g$make-cache-rib$7279$7lS0C)))))
   (g$make-collector$7647$7lS0C
     g$make-collector$11147$7lS0C
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10388$7lS0C)
            (case-lambda
              (() g$ls$10388$7lS0C)
              ((g$x$10389$7lS0C)
               (set! g$ls$10388$7lS0C
                 (g$set-cons$7252$7lS0C g$x$10389$7lS0C g$ls$10388$7lS0C))))))
         '()))))
   (g$inv-collector$7648$7lS0C
     g$inv-collector$11148$7lS0C
     (g$make-parameter$6590$7lS0C
       (case-lambda
         (g$args$10390$7lS0C
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10391$7lS0C)
          (begin
            (if (not (procedure? g$x$10391$7lS0C))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10391$7lS0C)
              (void))
            g$x$10391$7lS0C)))))
   (g$vis-collector$7649$7lS0C
     g$vis-collector$11149$7lS0C
     (g$make-parameter$6590$7lS0C
       (case-lambda
         (g$args$10392$7lS0C
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10393$7lS0C)
          (begin
            (if (not (procedure? g$x$10393$7lS0C))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10393$7lS0C)
              (void))
            g$x$10393$7lS0C)))))
   (g$imp-collector$7650$7lS0C
     g$imp-collector$11150$7lS0C
     (g$make-parameter$6590$7lS0C
       (case-lambda
         (g$args$10394$7lS0C
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10395$7lS0C)
          (begin
            (if (not (procedure? g$x$10395$7lS0C))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10395$7lS0C)
              (void))
            g$x$10395$7lS0C)))))
   (g$chi-library-internal$7651$7lS0C
     g$chi-library-internal$11151$7lS0C
     (case-lambda
       ((g$e*$10396$7lS0C g$rib$10397$7lS0C g$top?$10398$7lS0C)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7640$7lS0C
               g$e*$10396$7lS0C
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10397$7lS0C
               g$top?$10398$7lS0C)))
          (case-lambda
            ((g$e*$10407$7lS0C
               g$r$10408$7lS0C
               g$mr$10409$7lS0C
               g$lex*$10410$7lS0C
               g$rhs*$10411$7lS0C
               g$mod**$10412$7lS0C
               g$_kwd*$10413$7lS0C
               g$exp*$10414$7lS0C)
             ((case-lambda
                ((g$exp*$10415$7lS0C
                   g$_kwd*$10416$7lS0C
                   g$mod**$10417$7lS0C
                   g$rhs*$10418$7lS0C
                   g$lex*$10419$7lS0C
                   g$mr$10420$7lS0C
                   g$r$10421$7lS0C
                   g$e*$10422$7lS0C)
                 (values
                   (append
                     (apply append (reverse g$mod**$10417$7lS0C))
                     g$e*$10422$7lS0C)
                   g$r$10421$7lS0C
                   g$mr$10420$7lS0C
                   (reverse g$lex*$10419$7lS0C)
                   (reverse g$rhs*$10418$7lS0C)
                   g$exp*$10415$7lS0C)))
              g$exp*$10414$7lS0C
              g$_kwd*$10413$7lS0C
              g$mod**$10412$7lS0C
              g$rhs*$10411$7lS0C
              g$lex*$10410$7lS0C
              g$mr$10409$7lS0C
              g$r$10408$7lS0C
              g$e*$10407$7lS0C)))))))
   (g$chi-interaction-expr$7652$7lS0C
     g$chi-interaction-expr$11152$7lS0C
     (case-lambda
       ((g$e$10423$7lS0C g$rib$10424$7lS0C g$r$10425$7lS0C)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7640$7lS0C
               (list g$e$10423$7lS0C)
               g$r$10425$7lS0C
               g$r$10425$7lS0C
               '()
               '()
               '()
               '()
               '()
               g$rib$10424$7lS0C
               '#t)))
          (case-lambda
            ((g$e*$10434$7lS0C
               g$r$10435$7lS0C
               g$mr$10436$7lS0C
               g$lex*$10437$7lS0C
               g$rhs*$10438$7lS0C
               g$mod**$10439$7lS0C
               g$_kwd*$10440$7lS0C
               g$_exp*$10441$7lS0C)
             ((case-lambda
                ((g$_exp*$10442$7lS0C
                   g$_kwd*$10443$7lS0C
                   g$mod**$10444$7lS0C
                   g$rhs*$10445$7lS0C
                   g$lex*$10446$7lS0C
                   g$mr$10447$7lS0C
                   g$r$10448$7lS0C
                   g$e*$10449$7lS0C)
                 ((case-lambda
                    ((g$e*$10450$7lS0C)
                     ((case-lambda
                        ((g$e$10451$7lS0C)
                         (values g$e$10451$7lS0C g$r$10448$7lS0C)))
                      (if (null? g$e*$10450$7lS0C)
                        (g$build-void$7248$7lS0C)
                        (if (null? (cdr g$e*$10450$7lS0C))
                          (car g$e*$10450$7lS0C)
                          (g$build-sequence$7247$7lS0C
                            '#f
                            g$e*$10450$7lS0C))))))
                  (g$expand-interaction-rhs*/init*$7621$7lS0C
                    (reverse g$lex*$10446$7lS0C)
                    (reverse g$rhs*$10445$7lS0C)
                    (append
                      (apply append (reverse g$mod**$10444$7lS0C))
                      g$e*$10449$7lS0C)
                    g$r$10448$7lS0C
                    g$mr$10447$7lS0C))))
              g$_exp*$10441$7lS0C
              g$_kwd*$10440$7lS0C
              g$mod**$10439$7lS0C
              g$rhs*$10438$7lS0C
              g$lex*$10437$7lS0C
              g$mr$10436$7lS0C
              g$r$10435$7lS0C
              g$e*$10434$7lS0C)))))))
   (g$library-body-expander$7653$7lS0C
     g$library-body-expander$11153$7lS0C
     (case-lambda
       ((g$name$10452$7lS0C
          g$main-exp*$10453$7lS0C
          g$imp*$10454$7lS0C
          g$b*$10455$7lS0C
          g$top?$10456$7lS0C)
        (letrec* ((g$itc$10457$7lS0C (g$make-collector$7647$7lS0C)))
          ((case-lambda
             ((g$imp-collector$10462$7lS0C
                g$top-level-context$10463$7lS0C
                g$imp-collector$10464$7lS0C
                g$top-level-context$10465$7lS0C)
              ((case-lambda
                 ((g$swap$10466$7lS0C)
                  (dynamic-wind
                    g$swap$10466$7lS0C
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$7645$7lS0C
                              g$imp*$10454$7lS0C)))
                         (case-lambda
                           ((g$subst-names$10469$7lS0C
                              g$subst-labels$10470$7lS0C)
                            ((case-lambda
                               ((g$subst-labels$10471$7lS0C
                                  g$subst-names$10472$7lS0C)
                                ((case-lambda
                                   ((g$rib$10473$7lS0C)
                                    (letrec* ((g$wrap$10474$7lS0C
                                                (case-lambda
                                                  ((g$x$10536$7lS0C)
                                                   (g$make-stx$7291$7lS0C
                                                     g$x$10536$7lS0C
                                                     g$top-mark*$7255$7lS0C
                                                     (list g$rib$10473$7lS0C)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10475$7lS0C
                                            g$main-exp*$10476$7lS0C
                                            g$rtc$10477$7lS0C
                                            g$vtc$10478$7lS0C)
                                          ((case-lambda
                                             ((g$inv-collector$10483$7lS0C
                                                g$vis-collector$10484$7lS0C
                                                g$inv-collector$10485$7lS0C
                                                g$vis-collector$10486$7lS0C)
                                              ((case-lambda
                                                 ((g$swap$10487$7lS0C)
                                                  (dynamic-wind
                                                    g$swap$10487$7lS0C
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$7651$7lS0C
                                                              g$b*$10475$7lS0C
                                                              g$rib$10473$7lS0C
                                                              g$top?$10456$7lS0C)))
                                                         (case-lambda
                                                           ((g$init*$10494$7lS0C
                                                              g$r$10495$7lS0C
                                                              g$mr$10496$7lS0C
                                                              g$lex*$10497$7lS0C
                                                              g$rhs*$10498$7lS0C
                                                              g$internal-exp*$10499$7lS0C)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10500$7lS0C
                                                                  g$rhs*$10501$7lS0C
                                                                  g$lex*$10502$7lS0C
                                                                  g$mr$10503$7lS0C
                                                                  g$r$10504$7lS0C
                                                                  g$init*$10505$7lS0C)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$7642$7lS0C
                                                                       (append
                                                                         g$main-exp*$10476$7lS0C
                                                                         g$internal-exp*$10500$7lS0C))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10508$7lS0C
                                                                       g$exp-id*$10509$7lS0C)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10510$7lS0C
                                                                           g$exp-name*$10511$7lS0C)
                                                                         (begin
                                                                           (g$seal-rib!$7284$7lS0C
                                                                             g$rib$10473$7lS0C)
                                                                           ((case-lambda
                                                                              ((g$init*$10512$7lS0C)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10513$7lS0C)
                                                                                   (begin
                                                                                     (g$unseal-rib!$7285$7lS0C
                                                                                       g$rib$10473$7lS0C)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$10514$7lS0C
                                                                                           g$export-subst$10515$7lS0C)
                                                                                         (letrec* ((g$errstr$10516$7lS0C
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$7697$7lS0C
                                                                                                  g$lex*$10502$7lS0C
                                                                                                  g$loc*$10514$7lS0C
                                                                                                  g$r$10504$7lS0C)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$10520$7lS0C
                                                                                                  g$global*$10521$7lS0C
                                                                                                  g$macro*$10522$7lS0C)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$10523$7lS0C
                                                                                                      g$global*$10524$7lS0C
                                                                                                      g$export-env$10525$7lS0C)
                                                                                                    (begin
                                                                                                      (g$for-each$5060$7lS0C
                                                                                                        (case-lambda
                                                                                                          ((g$s$10526$7lS0C)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$10527$7lS0C
                                                                                                                 g$label$10528$7lS0C)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$10529$7lS0C)
                                                                                                                   (if g$p$10529$7lS0C
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$10530$7lS0C)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$10531$7lS0C)
                                                                                                                             (if (eq? g$type$10531$7lS0C
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$7708$7lS0C
                                                                                                                                 'export
                                                                                                                                 g$errstr$10516$7lS0C
                                                                                                                                 g$name$10527$7lS0C)
                                                                                                                               (void))))
                                                                                                                          (car g$b$10530$7lS0C))))
                                                                                                                      (cdr g$p$10529$7lS0C))
                                                                                                                     (void))))
                                                                                                                (g$assq$5047$7lS0C
                                                                                                                  g$label$10528$7lS0C
                                                                                                                  g$export-env$10525$7lS0C))))
                                                                                                            (car g$s$10526$7lS0C)
                                                                                                            (cdr g$s$10526$7lS0C))))
                                                                                                        g$export-subst$10515$7lS0C)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$10532$7lS0C
                                                                                                            g$invoke-definitions$10533$7lS0C)
                                                                                                          (values
                                                                                                            (g$itc$10457$7lS0C)
                                                                                                            (g$rtc$10477$7lS0C)
                                                                                                            (g$vtc$10478$7lS0C)
                                                                                                            (g$build-sequence$7247$7lS0C
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$10533$7lS0C
                                                                                                                (list
                                                                                                                  g$invoke-body$10532$7lS0C)))
                                                                                                            g$macro*$10523$7lS0C
                                                                                                            g$export-subst$10515$7lS0C
                                                                                                            g$export-env$10525$7lS0C)))
                                                                                                       (g$build-library-letrec*$7251$7lS0C
                                                                                                         '#f
                                                                                                         g$name$10452$7lS0C
                                                                                                         g$lex*$10502$7lS0C
                                                                                                         g$loc*$10514$7lS0C
                                                                                                         g$rhs*$10513$7lS0C
                                                                                                         (if (null?
                                                                                                               g$init*$10512$7lS0C)
                                                                                                           (g$build-void$7248$7lS0C)
                                                                                                           (g$build-sequence$7247$7lS0C
                                                                                                             '#f
                                                                                                             g$init*$10512$7lS0C)))
                                                                                                       (g$map$5059$7lS0C
                                                                                                         g$build-global-define$7243$7lS0C
                                                                                                         (g$map$5059$7lS0C
                                                                                                           cdr
                                                                                                           g$global*$10524$7lS0C))))))
                                                                                                 g$macro*$10522$7lS0C
                                                                                                 g$global*$10521$7lS0C
                                                                                                 g$export-env$10520$7lS0C)))))))
                                                                                      (g$map$5059$7lS0C
                                                                                        g$gen-global$7258$7lS0C
                                                                                        g$lex*$10502$7lS0C)
                                                                                      (g$make-export-subst$7696$7lS0C
                                                                                        g$exp-name*$10511$7lS0C
                                                                                        g$exp-id*$10510$7lS0C)))))
                                                                                (g$chi-rhs*$7622$7lS0C
                                                                                  g$rhs*$10501$7lS0C
                                                                                  g$r$10504$7lS0C
                                                                                  g$mr$10503$7lS0C))))
                                                                            (g$chi-expr*$7612$7lS0C
                                                                              g$init*$10505$7lS0C
                                                                              g$r$10504$7lS0C
                                                                              g$mr$10503$7lS0C)))))
                                                                      g$exp-id*$10509$7lS0C
                                                                      g$exp-name*$10508$7lS0C))))))
                                                             g$internal-exp*$10499$7lS0C
                                                             g$rhs*$10498$7lS0C
                                                             g$lex*$10497$7lS0C
                                                             g$mr$10496$7lS0C
                                                             g$r$10495$7lS0C
                                                             g$init*$10494$7lS0C))))))
                                                    g$swap$10487$7lS0C)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10534$7lS0C)
                                                        (begin
                                                          (g$inv-collector$10483$7lS0C
                                                            g$inv-collector$10485$7lS0C)
                                                          (set! g$inv-collector$10485$7lS0C
                                                            g$t$10534$7lS0C))))
                                                     (g$inv-collector$10483$7lS0C))
                                                    ((case-lambda
                                                       ((g$t$10535$7lS0C)
                                                        (begin
                                                          (g$vis-collector$10484$7lS0C
                                                            g$vis-collector$10486$7lS0C)
                                                          (set! g$vis-collector$10486$7lS0C
                                                            g$t$10535$7lS0C))))
                                                     (g$vis-collector$10484$7lS0C))))))))
                                           g$inv-collector$7648$7lS0C
                                           g$vis-collector$7649$7lS0C
                                           g$rtc$10477$7lS0C
                                           g$vtc$10478$7lS0C)))
                                       (g$map$5059$7lS0C
                                         g$wrap$10474$7lS0C
                                         g$b*$10455$7lS0C)
                                       (g$map$5059$7lS0C
                                         g$wrap$10474$7lS0C
                                         g$main-exp*$10453$7lS0C)
                                       (g$make-collector$7647$7lS0C)
                                       (g$make-collector$7647$7lS0C)))))
                                 (g$make-top-rib$7646$7lS0C
                                   g$subst-names$10472$7lS0C
                                   g$subst-labels$10471$7lS0C))))
                             g$subst-labels$10470$7lS0C
                             g$subst-names$10469$7lS0C))))))
                    g$swap$10466$7lS0C)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10537$7lS0C)
                        (begin
                          (g$imp-collector$10462$7lS0C
                            g$imp-collector$10464$7lS0C)
                          (set! g$imp-collector$10464$7lS0C g$t$10537$7lS0C))))
                     (g$imp-collector$10462$7lS0C))
                    ((case-lambda
                       ((g$t$10538$7lS0C)
                        (begin
                          (g$top-level-context$10463$7lS0C
                            g$top-level-context$10465$7lS0C)
                          (set! g$top-level-context$10465$7lS0C
                            g$t$10538$7lS0C))))
                     (g$top-level-context$10463$7lS0C))))))))
           g$imp-collector$7650$7lS0C
           g$top-level-context$7715$7lS0C
           g$itc$10457$7lS0C
           '#f)))))
   (g$core-library-expander$7654$7lS0C
     g$core-library-expander$11154$7lS0C
     (case-lambda
       ((g$e$10539$7lS0C g$verify-name$10540$7lS0C)
        (call-with-values
          (case-lambda (() (g$parse-library$7644$7lS0C g$e$10539$7lS0C)))
          (case-lambda
            ((g$name*$10545$7lS0C
               g$exp*$10546$7lS0C
               g$imp*$10547$7lS0C
               g$b*$10548$7lS0C)
             ((case-lambda
                ((g$b*$10549$7lS0C
                   g$imp*$10550$7lS0C
                   g$exp*$10551$7lS0C
                   g$name*$10552$7lS0C)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$7643$7lS0C g$name*$10552$7lS0C)))
                   (case-lambda
                     ((g$name$10555$7lS0C g$ver$10556$7lS0C)
                      ((case-lambda
                         ((g$ver$10557$7lS0C g$name$10558$7lS0C)
                          (begin
                            (g$verify-name$10540$7lS0C g$name$10558$7lS0C)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7653$7lS0C
                                   g$name$10558$7lS0C
                                   g$exp*$10551$7lS0C
                                   g$imp*$10550$7lS0C
                                   g$b*$10549$7lS0C
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10566$7lS0C
                                   g$invoke-req*$10567$7lS0C
                                   g$visit-req*$10568$7lS0C
                                   g$invoke-code$10569$7lS0C
                                   g$visit-code$10570$7lS0C
                                   g$export-subst$10571$7lS0C
                                   g$export-env$10572$7lS0C)
                                 ((case-lambda
                                    ((g$export-env$10573$7lS0C
                                       g$export-subst$10574$7lS0C
                                       g$visit-code$10575$7lS0C
                                       g$invoke-code$10576$7lS0C
                                       g$visit-req*$10577$7lS0C
                                       g$invoke-req*$10578$7lS0C
                                       g$imp*$10579$7lS0C)
                                     (values
                                       g$name$10558$7lS0C
                                       g$ver$10557$7lS0C
                                       g$imp*$10579$7lS0C
                                       g$invoke-req*$10578$7lS0C
                                       g$visit-req*$10577$7lS0C
                                       g$invoke-code$10576$7lS0C
                                       g$visit-code$10575$7lS0C
                                       g$export-subst$10574$7lS0C
                                       g$export-env$10573$7lS0C)))
                                  g$export-env$10572$7lS0C
                                  g$export-subst$10571$7lS0C
                                  g$visit-code$10570$7lS0C
                                  g$invoke-code$10569$7lS0C
                                  g$visit-req*$10568$7lS0C
                                  g$invoke-req*$10567$7lS0C
                                  g$imp*$10566$7lS0C)))))))
                       g$ver$10556$7lS0C
                       g$name$10555$7lS0C))))))
              g$b*$10548$7lS0C
              g$imp*$10547$7lS0C
              g$exp*$10546$7lS0C
              g$name*$10545$7lS0C)))))))
   (g$parse-top-level-program$7655$7lS0C
     g$parse-top-level-program$11155$7lS0C
     (case-lambda
       ((g$e*$10580$7lS0C)
        ((case-lambda
           ((g$t$10581$7lS0C)
            ((case-lambda
               ((g$ls/false$10582$7lS0C)
                (if (if g$ls/false$10582$7lS0C
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10583$7lS0C
                               g$imp*$10584$7lS0C
                               g$b*$10585$7lS0C)
                             (eq? (g$syntax->datum$7711$7lS0C
                                    g$import$10583$7lS0C)
                                  'import)))
                          g$ls/false$10582$7lS0C))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10586$7lS0C
                         g$imp*$10587$7lS0C
                         g$b*$10588$7lS0C)
                       (values g$imp*$10587$7lS0C g$b*$10588$7lS0C)))
                    g$ls/false$10582$7lS0C)
                  ((case-lambda
                     ((g$t$10589$7lS0C)
                      ((case-lambda
                         ((g$ls/false$10590$7lS0C)
                          (if (if g$ls/false$10590$7lS0C
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10591$7lS0C
                                         g$x$10592$7lS0C
                                         g$y$10593$7lS0C)
                                       (eq? (g$syntax->datum$7711$7lS0C
                                              g$import$10591$7lS0C)
                                            'import)))
                                    g$ls/false$10590$7lS0C))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10594$7lS0C
                                   g$x$10595$7lS0C
                                   g$y$10596$7lS0C)
                                 (g$syntax-violation$7708$7lS0C
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7315$7lS0C g$e*$10580$7lS0C))))
                              g$ls/false$10590$7lS0C)
                            ((case-lambda
                               ((g$t$10597$7lS0C)
                                ((case-lambda
                                   ((g$ls/false$10598$7lS0C)
                                    (if g$ls/false$10598$7lS0C
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10598$7lS0C)
                                      (g$syntax-violation$7708$7lS0C
                                        '#f
                                        '"invalid syntax"
                                        g$t$10597$7lS0C))))
                                 (g$syntax-dispatch$7596$7lS0C
                                   g$t$10597$7lS0C
                                   '_))))
                             g$t$10589$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C
                         g$t$10589$7lS0C
                         '((any . any) . any)))))
                   g$t$10581$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C
               g$t$10581$7lS0C
               '((any . each-any) . each-any)))))
         g$e*$10580$7lS0C))))
   (g$top-level-expander$7656$7lS0C
     g$top-level-expander$11156$7lS0C
     (case-lambda
       ((g$e*$10599$7lS0C)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$7655$7lS0C g$e*$10599$7lS0C)))
          (case-lambda
            ((g$imp*$10602$7lS0C g$b*$10603$7lS0C)
             ((case-lambda
                ((g$b*$10604$7lS0C g$imp*$10605$7lS0C)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7653$7lS0C
                        '()
                        '()
                        g$imp*$10605$7lS0C
                        g$b*$10604$7lS0C
                        '#t)))
                   (case-lambda
                     ((g$imp*$10613$7lS0C
                        g$invoke-req*$10614$7lS0C
                        g$visit-req*$10615$7lS0C
                        g$invoke-code$10616$7lS0C
                        g$visit-code$10617$7lS0C
                        g$export-subst$10618$7lS0C
                        g$export-env$10619$7lS0C)
                      ((case-lambda
                         ((g$export-env$10620$7lS0C
                            g$export-subst$10621$7lS0C
                            g$visit-code$10622$7lS0C
                            g$invoke-code$10623$7lS0C
                            g$visit-req*$10624$7lS0C
                            g$invoke-req*$10625$7lS0C
                            g$imp*$10626$7lS0C)
                          (values
                            g$invoke-req*$10625$7lS0C
                            g$invoke-code$10623$7lS0C)))
                       g$export-env$10619$7lS0C
                       g$export-subst$10618$7lS0C
                       g$visit-code$10617$7lS0C
                       g$invoke-code$10616$7lS0C
                       g$visit-req*$10615$7lS0C
                       g$invoke-req*$10614$7lS0C
                       g$imp*$10613$7lS0C))))))
              g$b*$10603$7lS0C
              g$imp*$10602$7lS0C)))))))
   (g$8776$7657$7lS0C
     g$8776$11157$7lS0C
     (make-record-type-descriptor
       'env
       '#f
       'g$8779$7lS0C
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8778$7658$7lS0C g$8778$11158$7lS0C '#f)
   (g$8777$7659$7lS0C
     g$8777$11159$7lS0C
     (make-record-constructor-descriptor
       g$8776$7657$7lS0C
       '#f
       g$8778$7658$7lS0C))
   (g$env?$7660$7lS0C
     g$env?$11160$7lS0C
     (record-predicate g$8776$7657$7lS0C))
   (g$make-env$7661$7lS0C
     g$make-env$11161$7lS0C
     (record-constructor g$8777$7659$7lS0C))
   (g$env-names$7662$7lS0C
     g$env-names$11162$7lS0C
     (record-accessor g$8776$7657$7lS0C '0))
   (g$env-labels$7663$7lS0C
     g$env-labels$11163$7lS0C
     (record-accessor g$8776$7657$7lS0C '1))
   (g$env-itc$7664$7lS0C
     g$env-itc$11164$7lS0C
     (record-accessor g$8776$7657$7lS0C '2))
   (g$set-env-names!$7665$7lS0C
     g$set-env-names!$11165$7lS0C
     (record-mutator g$8776$7657$7lS0C '0))
   (g$set-env-labels!$7666$7lS0C
     g$set-env-labels!$11166$7lS0C
     (record-mutator g$8776$7657$7lS0C '1))
   (g$set-env-itc!$7667$7lS0C
     g$set-env-itc!$11167$7lS0C
     (record-mutator g$8776$7657$7lS0C '2))
   (g$rp$7668$7lS0C
     g$rp$11168$7lS0C
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10627$7lS0C g$p$10628$7lS0C g$wr$10629$7lS0C)
          (display '"#<environment>" g$p$10628$7lS0C)))))
   (g$8795$7669$7lS0C
     g$8795$11169$7lS0C
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8798$7lS0C
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8797$7670$7lS0C g$8797$11170$7lS0C '#f)
   (g$8796$7671$7lS0C
     g$8796$11171$7lS0C
     (make-record-constructor-descriptor
       g$8795$7669$7lS0C
       '#f
       g$8797$7670$7lS0C))
   (g$interaction-env?$7672$7lS0C
     g$interaction-env?$11172$7lS0C
     (record-predicate g$8795$7669$7lS0C))
   (g$make-interaction-env$7673$7lS0C
     g$make-interaction-env$11173$7lS0C
     (record-constructor g$8796$7671$7lS0C))
   (g$interaction-env-rib$7674$7lS0C
     g$interaction-env-rib$11174$7lS0C
     (record-accessor g$8795$7669$7lS0C '0))
   (g$interaction-env-r$7675$7lS0C
     g$interaction-env-r$11175$7lS0C
     (record-accessor g$8795$7669$7lS0C '1))
   (g$interaction-env-locs$7676$7lS0C
     g$interaction-env-locs$11176$7lS0C
     (record-accessor g$8795$7669$7lS0C '2))
   (g$set-interaction-env-rib!$7677$7lS0C
     g$set-interaction-env-rib!$11177$7lS0C
     (record-mutator g$8795$7669$7lS0C '0))
   (g$set-interaction-env-r!$7678$7lS0C
     g$set-interaction-env-r!$11178$7lS0C
     (record-mutator g$8795$7669$7lS0C '1))
   (g$set-interaction-env-locs!$7679$7lS0C
     g$set-interaction-env-locs!$11179$7lS0C
     (record-mutator g$8795$7669$7lS0C '2))
   (g$rp$7680$7lS0C
     g$rp$11180$7lS0C
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10630$7lS0C g$p$10631$7lS0C g$wr$10632$7lS0C)
          (display '"#<environment>" g$p$10631$7lS0C)))))
   (g$interaction-environment-symbols$7681$7lS0C
     g$interaction-environment-symbols$11181$7lS0C
     (case-lambda
       (()
        (g$environment-symbols$7685$7lS0C
          (g$interaction-environment$7714$7lS0C)))))
   (g$environment-bindings$7682$7lS0C
     g$environment-bindings$11182$7lS0C
     (case-lambda
       ((g$e$10633$7lS0C)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$10634$7lS0C g$label$10635$7lS0C)
               (g$parse-binding$7683$7lS0C
                 (cons
                   g$name$10634$7lS0C
                   (g$imported-label->binding$7127$7lS0C
                     g$label$10635$7lS0C)))))
            (g$env-names$7662$7lS0C g$e$10633$7lS0C)
            (g$env-labels$7663$7lS0C g$e$10633$7lS0C))))))
   (g$parse-binding$7683$7lS0C
     g$parse-binding$11183$7lS0C
     (case-lambda
       ((g$b$10636$7lS0C)
        (cons
          (car g$b$10636$7lS0C)
          ((case-lambda
             ((g$t$10637$7lS0C)
              (if (g$memv$5052$7lS0C g$t$10637$7lS0C '(core-prim global))
                'procedure
                (if (g$memv$5052$7lS0C
                      g$t$10637$7lS0C
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5052$7lS0C g$t$10637$7lS0C '($core-rtd))
                    'record
                    (if (eq? (car g$b$10636$7lS0C)
                             (g$cadr$5223$7lS0C g$b$10636$7lS0C))
                      'syntax
                      'unknown))))))
           (g$cadr$5223$7lS0C g$b$10636$7lS0C))))))
   (g$environment?$7684$7lS0C
     g$environment?$11184$7lS0C
     (case-lambda
       ((g$x$10638$7lS0C)
        ((case-lambda
           ((g$t$10639$7lS0C)
            (if g$t$10639$7lS0C
              g$t$10639$7lS0C
              (begin '#f (g$interaction-env?$7672$7lS0C g$x$10638$7lS0C)))))
         (g$env?$7660$7lS0C g$x$10638$7lS0C)))))
   (g$environment-symbols$7685$7lS0C
     g$environment-symbols$11185$7lS0C
     (case-lambda
       ((g$x$10640$7lS0C)
        (if (g$env?$7660$7lS0C g$x$10640$7lS0C)
          (vector->list (g$env-names$7662$7lS0C g$x$10640$7lS0C))
          (if (g$interaction-env?$7672$7lS0C g$x$10640$7lS0C)
            (g$map$5059$7lS0C
              values
              (g$rib-sym*$7268$7lS0C
                (g$interaction-env-rib$7674$7lS0C g$x$10640$7lS0C)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$10640$7lS0C))))))
   (g$environment$7686$7lS0C
     g$environment$11186$7lS0C
     (case-lambda
       (g$imp*$10641$7lS0C
        ((case-lambda
           ((g$itc$10642$7lS0C)
            ((case-lambda
               ((g$imp-collector$10645$7lS0C g$imp-collector$10646$7lS0C)
                ((case-lambda
                   ((g$swap$10647$7lS0C)
                    (dynamic-wind
                      g$swap$10647$7lS0C
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7645$7lS0C
                                g$imp*$10641$7lS0C)))
                           (case-lambda
                             ((g$subst-names$10650$7lS0C
                                g$subst-labels$10651$7lS0C)
                              ((case-lambda
                                 ((g$subst-labels$10652$7lS0C
                                    g$subst-names$10653$7lS0C)
                                  (g$make-env$7661$7lS0C
                                    g$subst-names$10653$7lS0C
                                    g$subst-labels$10652$7lS0C
                                    g$itc$10642$7lS0C)))
                               g$subst-labels$10651$7lS0C
                               g$subst-names$10650$7lS0C))))))
                      g$swap$10647$7lS0C)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10654$7lS0C)
                        (begin
                          (g$imp-collector$10645$7lS0C
                            g$imp-collector$10646$7lS0C)
                          (set! g$imp-collector$10646$7lS0C g$t$10654$7lS0C))))
                     (g$imp-collector$10645$7lS0C)))))))
             g$imp-collector$7650$7lS0C
             g$itc$10642$7lS0C)))
         (g$make-collector$7647$7lS0C)))))
   (g$null-environment$7687$7lS0C
     g$null-environment$11187$7lS0C
     (case-lambda
       ((g$n$10655$7lS0C)
        (begin
          (if (not (eqv? g$n$10655$7lS0C '5))
            (assertion-violation 'null-environment '"not 5" g$n$10655$7lS0C)
            (void))
          (g$environment$7686$7lS0C '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7688$7lS0C
     g$scheme-report-environment$11188$7lS0C
     (case-lambda
       ((g$n$10656$7lS0C)
        (begin
          (if (not (eqv? g$n$10656$7lS0C '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10656$7lS0C)
            (void))
          (g$environment$7686$7lS0C '(psyntax scheme-report-environment-5))))))
   (g$expand$7689$7lS0C
     g$expand$11189$7lS0C
     (case-lambda
       ((g$x$10657$7lS0C g$env$10658$7lS0C)
        (if (g$env?$7660$7lS0C g$env$10658$7lS0C)
          ((case-lambda
             ((g$rib$10659$7lS0C)
              ((case-lambda
                 ((g$x$10660$7lS0C
                    g$itc$10661$7lS0C
                    g$rtc$10662$7lS0C
                    g$vtc$10663$7lS0C)
                  ((case-lambda
                     ((g$x$10664$7lS0C)
                      (begin
                        (g$seal-rib!$7284$7lS0C g$rib$10659$7lS0C)
                        (values g$x$10664$7lS0C (g$rtc$10662$7lS0C)))))
                   ((case-lambda
                      ((g$top-level-context$10673$7lS0C
                         g$inv-collector$10674$7lS0C
                         g$vis-collector$10675$7lS0C
                         g$imp-collector$10676$7lS0C
                         g$top-level-context$10677$7lS0C
                         g$inv-collector$10678$7lS0C
                         g$vis-collector$10679$7lS0C
                         g$imp-collector$10680$7lS0C)
                       ((case-lambda
                          ((g$swap$10681$7lS0C)
                           (dynamic-wind
                             g$swap$10681$7lS0C
                             (case-lambda
                               (()
                                (g$chi-expr$7614$7lS0C
                                  g$x$10660$7lS0C
                                  '()
                                  '())))
                             g$swap$10681$7lS0C)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10682$7lS0C)
                                 (begin
                                   (g$top-level-context$10673$7lS0C
                                     g$top-level-context$10677$7lS0C)
                                   (set! g$top-level-context$10677$7lS0C
                                     g$t$10682$7lS0C))))
                              (g$top-level-context$10673$7lS0C))
                             ((case-lambda
                                ((g$t$10683$7lS0C)
                                 (begin
                                   (g$inv-collector$10674$7lS0C
                                     g$inv-collector$10678$7lS0C)
                                   (set! g$inv-collector$10678$7lS0C
                                     g$t$10683$7lS0C))))
                              (g$inv-collector$10674$7lS0C))
                             ((case-lambda
                                ((g$t$10684$7lS0C)
                                 (begin
                                   (g$vis-collector$10675$7lS0C
                                     g$vis-collector$10679$7lS0C)
                                   (set! g$vis-collector$10679$7lS0C
                                     g$t$10684$7lS0C))))
                              (g$vis-collector$10675$7lS0C))
                             ((case-lambda
                                ((g$t$10685$7lS0C)
                                 (begin
                                   (g$imp-collector$10676$7lS0C
                                     g$imp-collector$10680$7lS0C)
                                   (set! g$imp-collector$10680$7lS0C
                                     g$t$10685$7lS0C))))
                              (g$imp-collector$10676$7lS0C))))))))
                    g$top-level-context$7715$7lS0C
                    g$inv-collector$7648$7lS0C
                    g$vis-collector$7649$7lS0C
                    g$imp-collector$7650$7lS0C
                    '#f
                    g$rtc$10662$7lS0C
                    g$vtc$10663$7lS0C
                    g$itc$10661$7lS0C))))
               (g$make-stx$7291$7lS0C
                 g$x$10657$7lS0C
                 g$top-mark*$7255$7lS0C
                 (list g$rib$10659$7lS0C)
                 '())
               (g$env-itc$7664$7lS0C g$env$10658$7lS0C)
               (g$make-collector$7647$7lS0C)
               (g$make-collector$7647$7lS0C))))
           (g$make-top-rib$7646$7lS0C
             (g$env-names$7662$7lS0C g$env$10658$7lS0C)
             (g$env-labels$7663$7lS0C g$env$10658$7lS0C)))
          (if (g$interaction-env?$7672$7lS0C g$env$10658$7lS0C)
            ((case-lambda
               ((g$rib$10686$7lS0C g$r$10687$7lS0C g$rtc$10688$7lS0C)
                ((case-lambda
                   ((g$x$10689$7lS0C)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10700$7lS0C
                               g$inv-collector$10701$7lS0C
                               g$vis-collector$10702$7lS0C
                               g$imp-collector$10703$7lS0C
                               g$top-level-context$10704$7lS0C
                               g$inv-collector$10705$7lS0C
                               g$vis-collector$10706$7lS0C
                               g$imp-collector$10707$7lS0C)
                             ((case-lambda
                                ((g$swap$10708$7lS0C)
                                 (dynamic-wind
                                   g$swap$10708$7lS0C
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7652$7lS0C
                                        g$x$10689$7lS0C
                                        g$rib$10686$7lS0C
                                        g$r$10687$7lS0C)))
                                   g$swap$10708$7lS0C)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10709$7lS0C)
                                       (begin
                                         (g$top-level-context$10700$7lS0C
                                           g$top-level-context$10704$7lS0C)
                                         (set! g$top-level-context$10704$7lS0C
                                           g$t$10709$7lS0C))))
                                    (g$top-level-context$10700$7lS0C))
                                   ((case-lambda
                                      ((g$t$10710$7lS0C)
                                       (begin
                                         (g$inv-collector$10701$7lS0C
                                           g$inv-collector$10705$7lS0C)
                                         (set! g$inv-collector$10705$7lS0C
                                           g$t$10710$7lS0C))))
                                    (g$inv-collector$10701$7lS0C))
                                   ((case-lambda
                                      ((g$t$10711$7lS0C)
                                       (begin
                                         (g$vis-collector$10702$7lS0C
                                           g$vis-collector$10706$7lS0C)
                                         (set! g$vis-collector$10706$7lS0C
                                           g$t$10711$7lS0C))))
                                    (g$vis-collector$10702$7lS0C))
                                   ((case-lambda
                                      ((g$t$10712$7lS0C)
                                       (begin
                                         (g$imp-collector$10703$7lS0C
                                           g$imp-collector$10707$7lS0C)
                                         (set! g$imp-collector$10707$7lS0C
                                           g$t$10712$7lS0C))))
                                    (g$imp-collector$10703$7lS0C))))))))
                          g$top-level-context$7715$7lS0C
                          g$inv-collector$7648$7lS0C
                          g$vis-collector$7649$7lS0C
                          g$imp-collector$7650$7lS0C
                          g$env$10658$7lS0C
                          g$rtc$10688$7lS0C
                          (g$make-collector$7647$7lS0C)
                          (g$make-collector$7647$7lS0C))))
                      (case-lambda
                        ((g$e$10713$7lS0C g$r^$10714$7lS0C)
                         ((case-lambda
                            ((g$r^$10715$7lS0C g$e$10716$7lS0C)
                             (begin
                               (g$set-interaction-env-r!$7678$7lS0C
                                 g$env$10658$7lS0C
                                 g$r^$10715$7lS0C)
                               (values g$e$10716$7lS0C (g$rtc$10688$7lS0C)))))
                          g$r^$10714$7lS0C
                          g$e$10713$7lS0C))))))
                 (g$make-stx$7291$7lS0C
                   g$x$10657$7lS0C
                   g$top-mark*$7255$7lS0C
                   (list g$rib$10686$7lS0C)
                   '()))))
             (g$interaction-env-rib$7674$7lS0C g$env$10658$7lS0C)
             (g$interaction-env-r$7675$7lS0C g$env$10658$7lS0C)
             (g$make-collector$7647$7lS0C))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10658$7lS0C))))))
   (g$eval$7690$7lS0C
     g$eval$11190$7lS0C
     (case-lambda
       ((g$x$10717$7lS0C g$env$10718$7lS0C)
        (begin
          (if (not (g$environment?$7684$7lS0C g$env$10718$7lS0C))
            (error 'eval '"not an environment" g$env$10718$7lS0C)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$7689$7lS0C g$x$10717$7lS0C g$env$10718$7lS0C)))
            (case-lambda
              ((g$x$10721$7lS0C g$invoke-req*$10722$7lS0C)
               ((case-lambda
                  ((g$invoke-req*$10723$7lS0C g$x$10724$7lS0C)
                   (begin
                     (g$for-each$5060$7lS0C
                       g$invoke-library$7128$7lS0C
                       g$invoke-req*$10723$7lS0C)
                     (eval-core
                       (g$expanded->core$6836$7lS0C g$x$10724$7lS0C)))))
                g$invoke-req*$10722$7lS0C
                g$x$10721$7lS0C))))))))
   (g$expand->core$7691$7lS0C
     g$expand->core$11191$7lS0C
     (case-lambda
       ((g$x$10725$7lS0C g$env$10726$7lS0C)
        (begin
          (if (not (g$environment?$7684$7lS0C g$env$10726$7lS0C))
            (error 'eval '"not an environment" g$env$10726$7lS0C)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$7689$7lS0C g$x$10725$7lS0C g$env$10726$7lS0C)))
            (case-lambda
              ((g$x$10729$7lS0C g$invoke-req*$10730$7lS0C)
               ((case-lambda
                  ((g$invoke-req*$10731$7lS0C g$x$10732$7lS0C)
                   (begin
                     (g$for-each$5060$7lS0C
                       g$invoke-library$7128$7lS0C
                       g$invoke-req*$10731$7lS0C)
                     (g$expanded->core$6836$7lS0C g$x$10732$7lS0C))))
                g$invoke-req*$10730$7lS0C
                g$x$10729$7lS0C))))))))
   (g$library-expander$7692$7lS0C
     g$library-expander$11192$7lS0C
     (case-lambda
       ((g$x$10733$7lS0C g$filename$10734$7lS0C g$verify-name$10735$7lS0C)
        (letrec* ((g$build-visit-code$10736$7lS0C
                    (case-lambda
                      ((g$macro*$10779$7lS0C)
                       (if (null? g$macro*$10779$7lS0C)
                         (g$build-void$7248$7lS0C)
                         (g$build-sequence$7247$7lS0C
                           '#f
                           (g$map$5059$7lS0C
                             (case-lambda
                               ((g$x$10780$7lS0C)
                                ((case-lambda
                                   ((g$loc$10781$7lS0C g$src$10782$7lS0C)
                                    (list
                                      'set!
                                      g$loc$10781$7lS0C
                                      g$src$10782$7lS0C)))
                                 (car g$x$10780$7lS0C)
                                 (g$cddr$5225$7lS0C g$x$10780$7lS0C))))
                             g$macro*$10779$7lS0C))))))
                  (g$visit!$10737$7lS0C
                    (case-lambda
                      ((g$macro*$10775$7lS0C)
                       (g$for-each$5060$7lS0C
                         (case-lambda
                           ((g$x$10776$7lS0C)
                            ((case-lambda
                               ((g$loc$10777$7lS0C g$proc$10778$7lS0C)
                                (set-symbol-value!
                                  g$loc$10777$7lS0C
                                  g$proc$10778$7lS0C)))
                             (car g$x$10776$7lS0C)
                             (g$cadr$5223$7lS0C g$x$10776$7lS0C))))
                         g$macro*$10775$7lS0C)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7654$7lS0C
                 g$x$10733$7lS0C
                 g$verify-name$10735$7lS0C)))
            (case-lambda
              ((g$name$10747$7lS0C
                 g$ver$10748$7lS0C
                 g$imp*$10749$7lS0C
                 g$inv*$10750$7lS0C
                 g$vis*$10751$7lS0C
                 g$invoke-code$10752$7lS0C
                 g$macro*$10753$7lS0C
                 g$export-subst$10754$7lS0C
                 g$export-env$10755$7lS0C)
               ((case-lambda
                  ((g$export-env$10756$7lS0C
                     g$export-subst$10757$7lS0C
                     g$macro*$10758$7lS0C
                     g$invoke-code$10759$7lS0C
                     g$vis*$10760$7lS0C
                     g$inv*$10761$7lS0C
                     g$imp*$10762$7lS0C
                     g$ver$10763$7lS0C
                     g$name$10764$7lS0C)
                   ((case-lambda
                      ((g$id$10765$7lS0C
                         g$name$10766$7lS0C
                         g$ver$10767$7lS0C
                         g$imp*$10768$7lS0C
                         g$vis*$10769$7lS0C
                         g$inv*$10770$7lS0C
                         g$visit-proc$10771$7lS0C
                         g$invoke-proc$10772$7lS0C
                         g$visit-code$10773$7lS0C
                         g$invoke-code$10774$7lS0C)
                       (begin
                         (g$install-library$7126$7lS0C
                           g$id$10765$7lS0C
                           g$name$10766$7lS0C
                           g$ver$10767$7lS0C
                           g$imp*$10768$7lS0C
                           g$vis*$10769$7lS0C
                           g$inv*$10770$7lS0C
                           g$export-subst$10757$7lS0C
                           g$export-env$10756$7lS0C
                           g$visit-proc$10771$7lS0C
                           g$invoke-proc$10772$7lS0C
                           g$visit-code$10773$7lS0C
                           g$invoke-code$10774$7lS0C
                           '#t
                           g$filename$10734$7lS0C)
                         (values
                           g$id$10765$7lS0C
                           g$name$10766$7lS0C
                           g$ver$10767$7lS0C
                           g$imp*$10768$7lS0C
                           g$vis*$10769$7lS0C
                           g$inv*$10770$7lS0C
                           g$invoke-code$10774$7lS0C
                           g$visit-code$10773$7lS0C
                           g$export-subst$10757$7lS0C
                           g$export-env$10756$7lS0C))))
                    (gensym)
                    g$name$10764$7lS0C
                    g$ver$10763$7lS0C
                    (g$map$5059$7lS0C
                      g$library-spec$7132$7lS0C
                      g$imp*$10762$7lS0C)
                    (g$map$5059$7lS0C
                      g$library-spec$7132$7lS0C
                      g$vis*$10760$7lS0C)
                    (g$map$5059$7lS0C
                      g$library-spec$7132$7lS0C
                      g$inv*$10761$7lS0C)
                    (case-lambda
                      (() (g$visit!$10737$7lS0C g$macro*$10758$7lS0C)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6836$7lS0C
                           g$invoke-code$10759$7lS0C))))
                    (g$build-visit-code$10736$7lS0C g$macro*$10758$7lS0C)
                    g$invoke-code$10759$7lS0C)))
                g$export-env$10755$7lS0C
                g$export-subst$10754$7lS0C
                g$macro*$10753$7lS0C
                g$invoke-code$10752$7lS0C
                g$vis*$10751$7lS0C
                g$inv*$10750$7lS0C
                g$imp*$10749$7lS0C
                g$ver$10748$7lS0C
                g$name$10747$7lS0C))))))
       ((g$x$10783$7lS0C g$filename$10784$7lS0C)
        (g$library-expander$7692$7lS0C
          g$x$10783$7lS0C
          g$filename$10784$7lS0C
          (case-lambda ((g$x$10785$7lS0C) (values)))))
       ((g$x$10786$7lS0C)
        (g$library-expander$7692$7lS0C
          g$x$10786$7lS0C
          '#f
          (case-lambda ((g$x$10787$7lS0C) (values)))))))
   (g$boot-library-expand$7693$7lS0C
     g$boot-library-expand$11193$7lS0C
     (case-lambda
       ((g$x$10788$7lS0C)
        (call-with-values
          (case-lambda (() (g$library-expander$7692$7lS0C g$x$10788$7lS0C)))
          (case-lambda
            ((g$id$10799$7lS0C
               g$name$10800$7lS0C
               g$ver$10801$7lS0C
               g$imp*$10802$7lS0C
               g$vis*$10803$7lS0C
               g$inv*$10804$7lS0C
               g$invoke-code$10805$7lS0C
               g$visit-code$10806$7lS0C
               g$export-subst$10807$7lS0C
               g$export-env$10808$7lS0C)
             ((case-lambda
                ((g$export-env$10809$7lS0C
                   g$export-subst$10810$7lS0C
                   g$visit-code$10811$7lS0C
                   g$invoke-code$10812$7lS0C
                   g$inv*$10813$7lS0C
                   g$vis*$10814$7lS0C
                   g$imp*$10815$7lS0C
                   g$ver$10816$7lS0C
                   g$name$10817$7lS0C
                   g$id$10818$7lS0C)
                 (values
                   g$name$10817$7lS0C
                   g$invoke-code$10812$7lS0C
                   g$export-subst$10810$7lS0C
                   g$export-env$10809$7lS0C)))
              g$export-env$10808$7lS0C
              g$export-subst$10807$7lS0C
              g$visit-code$10806$7lS0C
              g$invoke-code$10805$7lS0C
              g$inv*$10804$7lS0C
              g$vis*$10803$7lS0C
              g$imp*$10802$7lS0C
              g$ver$10801$7lS0C
              g$name$10800$7lS0C
              g$id$10799$7lS0C)))))))
   (g$rev-map-append$7694$7lS0C
     g$rev-map-append$11194$7lS0C
     (case-lambda
       ((g$f$10819$7lS0C g$ls$10820$7lS0C g$ac$10821$7lS0C)
        (if (null? g$ls$10820$7lS0C)
          g$ac$10821$7lS0C
          (g$rev-map-append$7694$7lS0C
            g$f$10819$7lS0C
            (cdr g$ls$10820$7lS0C)
            (cons
              (g$f$10819$7lS0C (car g$ls$10820$7lS0C))
              g$ac$10821$7lS0C))))))
   (g$build-exports$7695$7lS0C
     g$build-exports$11195$7lS0C
     (case-lambda
       ((g$lex*+loc*$10822$7lS0C g$init*$10823$7lS0C)
        (g$build-sequence$7247$7lS0C
          '#f
          (cons
            (g$build-void$7248$7lS0C)
            (g$rev-map-append$7694$7lS0C
              (case-lambda
                ((g$x$10824$7lS0C)
                 (list 'set! (cdr g$x$10824$7lS0C) (car g$x$10824$7lS0C))))
              g$lex*+loc*$10822$7lS0C
              g$init*$10823$7lS0C))))))
   (g$make-export-subst$7696$7lS0C
     g$make-export-subst$11196$7lS0C
     (case-lambda
       ((g$name*$10825$7lS0C g$id*$10826$7lS0C)
        (g$map$5059$7lS0C
          (case-lambda
            ((g$name$10827$7lS0C g$id$10828$7lS0C)
             ((case-lambda
                ((g$label$10829$7lS0C)
                 (begin
                   (if (not g$label$10829$7lS0C)
                     (g$syntax-violation$7708$7lS0C
                       '#f
                       '"cannot export unbound identifier"
                       g$id$10828$7lS0C)
                     (void))
                   (cons g$name$10827$7lS0C g$label$10829$7lS0C))))
              (g$id->label$7331$7lS0C g$id$10828$7lS0C))))
          g$name*$10825$7lS0C
          g$id*$10826$7lS0C))))
   (g$make-export-env/macros$7697$7lS0C
     g$make-export-env/macros$11197$7lS0C
     (case-lambda
       ((g$lex*$10830$7lS0C g$loc*$10831$7lS0C g$r$10832$7lS0C)
        (letrec* ((g$lookup$10833$7lS0C
                    (case-lambda
                      ((g$x$10848$7lS0C)
                       ((letrec ((g$f$10849$7lS0C
                                   (case-lambda
                                     ((g$x$10850$7lS0C
                                        g$lex*$10851$7lS0C
                                        g$loc*$10852$7lS0C)
                                      (if (pair? g$lex*$10851$7lS0C)
                                        (if (eq? g$x$10850$7lS0C
                                                 (car g$lex*$10851$7lS0C))
                                          (car g$loc*$10852$7lS0C)
                                          (g$f$10849$7lS0C
                                            g$x$10850$7lS0C
                                            (cdr g$lex*$10851$7lS0C)
                                            (cdr g$loc*$10852$7lS0C)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10849$7lS0C)
                        g$x$10848$7lS0C
                        g$lex*$10830$7lS0C
                        g$loc*$10831$7lS0C)))))
          ((letrec ((g$f$10834$7lS0C
                      (case-lambda
                        ((g$r$10835$7lS0C
                           g$env$10836$7lS0C
                           g$global*$10837$7lS0C
                           g$macro*$10838$7lS0C)
                         (if (null? g$r$10835$7lS0C)
                           (values
                             g$env$10836$7lS0C
                             g$global*$10837$7lS0C
                             g$macro*$10838$7lS0C)
                           ((case-lambda
                              ((g$x$10839$7lS0C)
                               ((case-lambda
                                  ((g$label$10840$7lS0C g$b$10841$7lS0C)
                                   ((case-lambda
                                      ((g$t$10842$7lS0C)
                                       (if (g$memv$5052$7lS0C
                                             g$t$10842$7lS0C
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$10843$7lS0C)
                                             ((case-lambda
                                                ((g$loc$10844$7lS0C
                                                   g$type$10845$7lS0C)
                                                 (g$f$10834$7lS0C
                                                   (cdr g$r$10835$7lS0C)
                                                   (cons
                                                     (g$cons*$5061$7lS0C
                                                       g$label$10840$7lS0C
                                                       g$type$10845$7lS0C
                                                       g$loc$10844$7lS0C)
                                                     g$env$10836$7lS0C)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7540$7lS0C
                                                         g$v$10843$7lS0C)
                                                       g$loc$10844$7lS0C)
                                                     g$global*$10837$7lS0C)
                                                   g$macro*$10838$7lS0C)))
                                              (g$lookup$10833$7lS0C
                                                (g$lexical-var$7540$7lS0C
                                                  g$v$10843$7lS0C))
                                              (if (g$lexical-mutable?$7541$7lS0C
                                                    g$v$10843$7lS0C)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7336$7lS0C
                                            g$b$10841$7lS0C))
                                         (if (g$memv$5052$7lS0C
                                               g$t$10842$7lS0C
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$10846$7lS0C)
                                               (g$f$10834$7lS0C
                                                 (cdr g$r$10835$7lS0C)
                                                 (cons
                                                   (g$cons*$5061$7lS0C
                                                     g$label$10840$7lS0C
                                                     'global-macro
                                                     g$loc$10846$7lS0C)
                                                   g$env$10836$7lS0C)
                                                 g$global*$10837$7lS0C
                                                 (cons
                                                   (cons
                                                     g$loc$10846$7lS0C
                                                     (g$binding-value$7336$7lS0C
                                                       g$b$10841$7lS0C))
                                                   g$macro*$10838$7lS0C))))
                                            (gensym))
                                           (if (g$memv$5052$7lS0C
                                                 g$t$10842$7lS0C
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$10847$7lS0C)
                                                 (g$f$10834$7lS0C
                                                   (cdr g$r$10835$7lS0C)
                                                   (cons
                                                     (g$cons*$5061$7lS0C
                                                       g$label$10840$7lS0C
                                                       'global-macro!
                                                       g$loc$10847$7lS0C)
                                                     g$env$10836$7lS0C)
                                                   g$global*$10837$7lS0C
                                                   (cons
                                                     (cons
                                                       g$loc$10847$7lS0C
                                                       (g$binding-value$7336$7lS0C
                                                         g$b$10841$7lS0C))
                                                     g$macro*$10838$7lS0C))))
                                              (gensym))
                                             (if (g$memv$5052$7lS0C
                                                   g$t$10842$7lS0C
                                                   '($rtd $module))
                                               (g$f$10834$7lS0C
                                                 (cdr g$r$10835$7lS0C)
                                                 (cons
                                                   g$x$10839$7lS0C
                                                   g$env$10836$7lS0C)
                                                 g$global*$10837$7lS0C
                                                 g$macro*$10838$7lS0C)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7335$7lS0C
                                                   g$b$10841$7lS0C)
                                                 (g$binding-value$7336$7lS0C
                                                   g$b$10841$7lS0C))))))))
                                    (g$binding-type$7335$7lS0C
                                      g$b$10841$7lS0C))))
                                (car g$x$10839$7lS0C)
                                (cdr g$x$10839$7lS0C))))
                            (car g$r$10835$7lS0C)))))))
             g$f$10834$7lS0C)
           g$r$10832$7lS0C
           '()
           '()
           '())))))
   (g$generate-temporaries$7698$7lS0C
     g$generate-temporaries$11198$7lS0C
     (case-lambda
       ((g$ls$10853$7lS0C)
        ((case-lambda
           ((g$t$10854$7lS0C)
            ((case-lambda
               ((g$ls/false$10855$7lS0C)
                (if g$ls/false$10855$7lS0C
                  (apply
                    (case-lambda
                      ((g$ls$10856$7lS0C)
                       (g$map$5059$7lS0C
                         (case-lambda
                           ((g$x$10857$7lS0C)
                            (g$make-stx$7291$7lS0C
                              ((case-lambda
                                 ((g$x$10858$7lS0C)
                                  (if ((case-lambda
                                         ((g$t$10859$7lS0C)
                                          (if g$t$10859$7lS0C
                                            g$t$10859$7lS0C
                                            (begin
                                              '#f
                                              (string? g$x$10858$7lS0C)))))
                                       (symbol? g$x$10858$7lS0C))
                                    (gensym g$x$10858$7lS0C)
                                    (gensym 't))))
                               (g$syntax->datum$7711$7lS0C g$x$10857$7lS0C))
                              g$top-mark*$7255$7lS0C
                              '()
                              '())))
                         g$ls$10856$7lS0C)))
                    g$ls/false$10855$7lS0C)
                  ((case-lambda
                     ((g$t$10860$7lS0C)
                      ((case-lambda
                         ((g$ls/false$10861$7lS0C)
                          (if g$ls/false$10861$7lS0C
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10861$7lS0C)
                            (g$syntax-violation$7708$7lS0C
                              '#f
                              '"invalid syntax"
                              g$t$10860$7lS0C))))
                       (g$syntax-dispatch$7596$7lS0C g$t$10860$7lS0C '_))))
                   g$t$10854$7lS0C))))
             (g$syntax-dispatch$7596$7lS0C g$t$10854$7lS0C 'each-any))))
         g$ls$10853$7lS0C))))
   (g$free-identifier=?$7699$7lS0C
     g$free-identifier=?$11199$7lS0C
     (case-lambda
       ((g$x$10862$7lS0C g$y$10863$7lS0C)
        (if (g$id?$7318$7lS0C g$x$10862$7lS0C)
          (if (g$id?$7318$7lS0C g$y$10863$7lS0C)
            (g$free-id=?$7322$7lS0C g$x$10862$7lS0C g$y$10863$7lS0C)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10863$7lS0C))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10862$7lS0C)))))
   (g$bound-identifier=?$7700$7lS0C
     g$bound-identifier=?$11200$7lS0C
     (case-lambda
       ((g$x$10864$7lS0C g$y$10865$7lS0C)
        (if (g$id?$7318$7lS0C g$x$10864$7lS0C)
          (if (g$id?$7318$7lS0C g$y$10865$7lS0C)
            (g$bound-id=?$7321$7lS0C g$x$10864$7lS0C g$y$10865$7lS0C)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10865$7lS0C))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10864$7lS0C)))))
   (g$make-source-condition$7701$7lS0C
     g$make-source-condition$11201$7lS0C
     (case-lambda
       ((g$x$10866$7lS0C)
        (letrec* ((g$11727$10867$7lS0C
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11730$7lS0C
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11729$10868$7lS0C '#f)
                  (g$11728$10869$7lS0C
                    (make-record-constructor-descriptor
                      g$11727$10867$7lS0C
                      &condition-rcd
                      g$11729$10868$7lS0C))
                  (g$11726$10870$7lS0C (record-predicate g$11727$10867$7lS0C))
                  (g$make-source-condition$10871$7lS0C
                    (record-constructor g$11728$10869$7lS0C))
                  (g$11724$10872$7lS0C (record-accessor g$11727$10867$7lS0C '0))
                  (g$11725$10873$7lS0C (record-accessor g$11727$10867$7lS0C '1))
                  (g$source-condition?$10874$7lS0C
                    (condition-predicate g$11727$10867$7lS0C))
                  (g$source-filename$10875$7lS0C
                    (condition-accessor
                      g$11727$10867$7lS0C
                      g$11724$10872$7lS0C))
                  (g$source-character$10876$7lS0C
                    (condition-accessor
                      g$11727$10867$7lS0C
                      g$11725$10873$7lS0C)))
          (if (pair? g$x$10866$7lS0C)
            (g$make-source-condition$10871$7lS0C
              (car g$x$10866$7lS0C)
              (cdr g$x$10866$7lS0C))
            (condition))))))
   (g$extract-position-condition$7702$7lS0C
     g$extract-position-condition$11202$7lS0C
     (case-lambda
       ((g$x$10877$7lS0C)
        (g$make-source-condition$7701$7lS0C
          (g$expression-position$7703$7lS0C g$x$10877$7lS0C)))))
   (g$expression-position$7703$7lS0C
     g$expression-position$11203$7lS0C
     (case-lambda
       ((g$x$10878$7lS0C)
        (if (g$stx?$7290$7lS0C g$x$10878$7lS0C)
          (begin
            '#f
            ((case-lambda
               ((g$x$10879$7lS0C)
                (if (annotation? g$x$10879$7lS0C)
                  (begin '#f (annotation-source g$x$10879$7lS0C))
                  '#f)))
             (g$stx-expr$7292$7lS0C g$x$10878$7lS0C)))
          '#f))))
   (g$assertion-error$7704$7lS0C
     g$assertion-error$11204$7lS0C
     (case-lambda
       ((g$expr$10880$7lS0C g$pos$10881$7lS0C)
        (raise
          (condition
            (g$make-assertion-violation$5787$7lS0C)
            (g$make-who-condition$5801$7lS0C 'assert)
            (g$make-message-condition$5755$7lS0C '"assertion failed")
            (g$make-irritants-condition$5793$7lS0C (list g$expr$10880$7lS0C))
            (g$make-source-condition$7701$7lS0C g$pos$10881$7lS0C))))))
   (g$syntax-error$7705$7lS0C
     g$syntax-error$11205$7lS0C
     (case-lambda
       ((g$x$10882$7lS0C . g$args$10883$7lS0C)
        (begin
          (if (not (g$for-all$5057$7lS0C string? g$args$10883$7lS0C))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10883$7lS0C)
            (void))
          (raise
            (condition
              (g$make-message-condition$5755$7lS0C
                (if (null? g$args$10883$7lS0C)
                  '"invalid syntax"
                  (apply string-append g$args$10883$7lS0C)))
              (g$make-syntax-violation$5827$7lS0C
                (g$syntax->datum$7711$7lS0C g$x$10882$7lS0C)
                '#f)
              (g$extract-position-condition$7702$7lS0C g$x$10882$7lS0C)
              (g$extract-trace$7706$7lS0C g$x$10882$7lS0C)))))))
   (g$extract-trace$7706$7lS0C
     g$extract-trace$11206$7lS0C
     (case-lambda
       ((g$x$10884$7lS0C)
        (letrec* ((g$11754$10885$7lS0C
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11757$7lS0C
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11756$10886$7lS0C '#f)
                  (g$11755$10887$7lS0C
                    (make-record-constructor-descriptor
                      g$11754$10885$7lS0C
                      &condition-rcd
                      g$11756$10886$7lS0C))
                  (g$11753$10888$7lS0C (record-predicate g$11754$10885$7lS0C))
                  (g$make-trace$10889$7lS0C
                    (record-constructor g$11755$10887$7lS0C))
                  (g$11752$10890$7lS0C (record-accessor g$11754$10885$7lS0C '0))
                  (g$trace?$10891$7lS0C
                    (condition-predicate g$11754$10885$7lS0C))
                  (g$trace-form$10892$7lS0C
                    (condition-accessor
                      g$11754$10885$7lS0C
                      g$11752$10890$7lS0C)))
          ((letrec ((g$f$10893$7lS0C
                      (case-lambda
                        ((g$x$10894$7lS0C)
                         (if (g$stx?$7290$7lS0C g$x$10894$7lS0C)
                           (apply
                             condition
                             (g$make-trace$10889$7lS0C g$x$10894$7lS0C)
                             (g$map$5059$7lS0C
                               g$f$10893$7lS0C
                               (g$stx-ae*$7295$7lS0C g$x$10894$7lS0C)))
                           (if (annotation? g$x$10894$7lS0C)
                             (g$make-trace$10889$7lS0C
                               (g$make-stx$7291$7lS0C
                                 g$x$10894$7lS0C
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$10893$7lS0C)
           g$x$10884$7lS0C)))))
   (g$syntax-violation*$7707$7lS0C
     g$syntax-violation*$11207$7lS0C
     (case-lambda
       ((g$who$10895$7lS0C
          g$msg$10896$7lS0C
          g$form$10897$7lS0C
          g$condition-object$10898$7lS0C)
        (begin
          (if (not (string? g$msg$10896$7lS0C))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10896$7lS0C)
            (void))
          ((case-lambda
             ((g$who$10899$7lS0C)
              (raise
                (condition
                  (if g$who$10899$7lS0C
                    (g$make-who-condition$5801$7lS0C g$who$10899$7lS0C)
                    (condition))
                  (g$make-message-condition$5755$7lS0C g$msg$10896$7lS0C)
                  g$condition-object$10898$7lS0C
                  (g$extract-position-condition$7702$7lS0C g$form$10897$7lS0C)
                  (g$extract-trace$7706$7lS0C g$form$10897$7lS0C)))))
           (if ((case-lambda
                  ((g$t$10900$7lS0C)
                   (if g$t$10900$7lS0C
                     g$t$10900$7lS0C
                     (begin '#f (symbol? g$who$10895$7lS0C)))))
                (string? g$who$10895$7lS0C))
             g$who$10895$7lS0C
             (if (not g$who$10895$7lS0C)
               ((case-lambda
                  ((g$t$10901$7lS0C)
                   ((case-lambda
                      ((g$ls/false$10902$7lS0C)
                       (if (if g$ls/false$10902$7lS0C
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10903$7lS0C)
                                    (g$id?$7318$7lS0C g$id$10903$7lS0C)))
                                 g$ls/false$10902$7lS0C))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10904$7lS0C)
                              (g$syntax->datum$7711$7lS0C g$id$10904$7lS0C)))
                           g$ls/false$10902$7lS0C)
                         ((case-lambda
                            ((g$t$10905$7lS0C)
                             ((case-lambda
                                ((g$ls/false$10906$7lS0C)
                                 (if (if g$ls/false$10906$7lS0C
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10907$7lS0C
                                                g$rest$10908$7lS0C)
                                              (g$id?$7318$7lS0C
                                                g$id$10907$7lS0C)))
                                           g$ls/false$10906$7lS0C))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10909$7lS0C g$rest$10910$7lS0C)
                                        (g$syntax->datum$7711$7lS0C
                                          g$id$10909$7lS0C)))
                                     g$ls/false$10906$7lS0C)
                                   ((case-lambda
                                      ((g$t$10911$7lS0C)
                                       ((case-lambda
                                          ((g$ls/false$10912$7lS0C)
                                           (if g$ls/false$10912$7lS0C
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10912$7lS0C)
                                             (g$syntax-violation$7708$7lS0C
                                               '#f
                                               '"invalid syntax"
                                               g$t$10911$7lS0C))))
                                        (g$syntax-dispatch$7596$7lS0C
                                          g$t$10911$7lS0C
                                          '_))))
                                    g$t$10905$7lS0C))))
                              (g$syntax-dispatch$7596$7lS0C
                                g$t$10905$7lS0C
                                '(any . any)))))
                          g$t$10901$7lS0C))))
                    (g$syntax-dispatch$7596$7lS0C g$t$10901$7lS0C 'any))))
                g$form$10897$7lS0C)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10895$7lS0C))))))))
   (g$syntax-violation$7708$7lS0C
     g$syntax-violation$11208$7lS0C
     (case-lambda
       ((g$who$10913$7lS0C g$msg$10914$7lS0C g$form$10915$7lS0C)
        (g$syntax-violation$7708$7lS0C
          g$who$10913$7lS0C
          g$msg$10914$7lS0C
          g$form$10915$7lS0C
          '#f))
       ((g$who$10916$7lS0C
          g$msg$10917$7lS0C
          g$form$10918$7lS0C
          g$subform$10919$7lS0C)
        (g$syntax-violation*$7707$7lS0C
          g$who$10916$7lS0C
          g$msg$10917$7lS0C
          g$form$10918$7lS0C
          (g$make-syntax-violation$5827$7lS0C
            (g$syntax->datum$7711$7lS0C g$form$10918$7lS0C)
            (g$syntax->datum$7711$7lS0C g$subform$10919$7lS0C))))))
   (g$identifier?$7709$7lS0C
     g$identifier?$11209$7lS0C
     (case-lambda ((g$x$10920$7lS0C) (g$id?$7318$7lS0C g$x$10920$7lS0C))))
   (g$datum->syntax$7710$7lS0C
     g$datum->syntax$11210$7lS0C
     (case-lambda
       ((g$id$10921$7lS0C g$datum$10922$7lS0C)
        (if (g$id?$7318$7lS0C g$id$10921$7lS0C)
          (g$datum->stx$7301$7lS0C g$id$10921$7lS0C g$datum$10922$7lS0C)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10921$7lS0C)))))
   (g$syntax->datum$7711$7lS0C
     g$syntax->datum$11211$7lS0C
     (case-lambda
       ((g$x$10923$7lS0C) (g$stx->datum$7329$7lS0C g$x$10923$7lS0C))))
   (g$compile-r6rs-top-level$7712$7lS0C
     g$compile-r6rs-top-level$11212$7lS0C
     (case-lambda
       ((g$x*$10924$7lS0C)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7656$7lS0C g$x*$10924$7lS0C)))
          (case-lambda
            ((g$lib*$10927$7lS0C g$invoke-code$10928$7lS0C)
             ((case-lambda
                ((g$invoke-code$10929$7lS0C g$lib*$10930$7lS0C)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5060$7lS0C
                        g$invoke-library$7128$7lS0C
                        g$lib*$10930$7lS0C)
                      (eval-core
                        (g$expanded->core$6836$7lS0C
                          g$invoke-code$10929$7lS0C)))))))
              g$invoke-code$10928$7lS0C
              g$lib*$10927$7lS0C)))))))
   (g$pre-compile-r6rs-top-level$7713$7lS0C
     g$pre-compile-r6rs-top-level$11213$7lS0C
     (case-lambda
       ((g$x*$10931$7lS0C)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7656$7lS0C g$x*$10931$7lS0C)))
          (case-lambda
            ((g$lib*$10934$7lS0C g$invoke-code$10935$7lS0C)
             ((case-lambda
                ((g$invoke-code$10936$7lS0C g$lib*$10937$7lS0C)
                 (begin
                   (g$for-each$5060$7lS0C
                     g$invoke-library$7128$7lS0C
                     g$lib*$10937$7lS0C)
                   (compile-core
                     (g$expanded->core$6836$7lS0C g$invoke-code$10936$7lS0C)))))
              g$invoke-code$10935$7lS0C
              g$lib*$10934$7lS0C)))))))
   (g$interaction-environment$7714$7lS0C
     g$interaction-environment$11214$7lS0C
     ((case-lambda
        ((g$the-env$10938$7lS0C)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10939$7lS0C)
                (if g$t$10939$7lS0C
                  g$t$10939$7lS0C
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10940$7lS0C g$rib$10941$7lS0C)
                        (begin
                          ((case-lambda
                             ((g$subst$10942$7lS0C)
                              (begin
                                (g$set-rib-sym*!$7273$7lS0C
                                  g$rib$10941$7lS0C
                                  (g$map$5059$7lS0C car g$subst$10942$7lS0C))
                                (g$set-rib-mark**!$7274$7lS0C
                                  g$rib$10941$7lS0C
                                  (g$map$5059$7lS0C
                                    (case-lambda
                                      ((g$x$10943$7lS0C)
                                       g$top-mark*$7255$7lS0C))
                                    g$subst$10942$7lS0C))
                                (g$set-rib-label*!$7275$7lS0C
                                  g$rib$10941$7lS0C
                                  (g$map$5059$7lS0C cdr g$subst$10942$7lS0C)))))
                           (g$library-subst$7085$7lS0C g$lib$10940$7lS0C))
                          ((case-lambda
                             ((g$env$10944$7lS0C)
                              (begin
                                (set! g$the-env$10938$7lS0C g$env$10944$7lS0C)
                                g$env$10944$7lS0C)))
                           (g$make-interaction-env$7673$7lS0C
                             g$rib$10941$7lS0C
                             '()
                             '())))))
                     (g$find-library-by-name$7121$7lS0C '(ironscheme))
                     (g$make-empty-rib$7278$7lS0C))))))
             g$the-env$10938$7lS0C)))))
      '#f))
   (g$top-level-context$7715$7lS0C
     g$top-level-context$11215$7lS0C
     (g$make-parameter$6590$7lS0C '#f)))
  (g$current-library-expander$7118$7lS0C g$library-expander$7692$7lS0C))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6833$7lS0C
      (case-lambda
        ((g$x$11268$7lS0C)
         ((case-lambda
            ((g$t$11269$7lS0C) (if g$t$11269$7lS0C (cdr g$t$11269$7lS0C) '#f)))
          (g$assq$5047$7lS0C
            g$x$11268$7lS0C
            '((ellipsis-map . g$ellipsis-map$11101$7lS0C)
              (make-list . g$make-list$5042$7lS0C)
              (last-pair . g$last-pair$5041$7lS0C)
              (ironscheme-build . g$ironscheme-build$11261$7lS0C)
              (syntax-error . g$syntax-error$11205$7lS0C)
              (syntax-dispatch . g$syntax-dispatch$11096$7lS0C)
              (compile-system-libraries
                .
                g$compile-system-libraries$11263$7lS0C)
              (compile->closure . g$compile->closure$11265$7lS0C)
              (compile . g$compile$11264$7lS0C)
              (load . g$load$11260$7lS0C)
              (interaction-environment . g$interaction-environment$11214$7lS0C)
              (string-ci>? . g$string-ci>?$5973$7lS0C)
              (string-ci>=? . g$string-ci>=?$5975$7lS0C)
              (string-ci=? . g$string-ci=?$5971$7lS0C)
              (string-ci<? . g$string-ci<?$5972$7lS0C)
              (string-ci<=? . g$string-ci<=?$5974$7lS0C)
              (char-ci>? . g$char-ci>?$5978$7lS0C)
              (char-ci>=? . g$char-ci>=?$5980$7lS0C)
              (char-ci=? . g$char-ci=?$5976$7lS0C)
              (char-ci<? . g$char-ci<?$5977$7lS0C)
              (char-ci<=? . g$char-ci<=?$5979$7lS0C)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11034$7lS0C)
              (variable-transformer? . g$variable-transformer?$11033$7lS0C)
              (make-variable-transformer
                .
                g$make-variable-transformer$11032$7lS0C)
              (identifier? . g$identifier?$11209$7lS0C)
              (generate-temporaries . g$generate-temporaries$11198$7lS0C)
              (free-identifier=? . g$free-identifier=?$11199$7lS0C)
              (syntax->datum . g$syntax->datum$11211$7lS0C)
              (datum->syntax . g$datum->syntax$11210$7lS0C)
              (bound-identifier=? . g$bound-identifier=?$11200$7lS0C)
              (delete-file . g$delete-file$5507$7lS0C)
              (file-exists? . g$file-exists?$5506$7lS0C)
              (list-sort . g$list-sort$5898$7lS0C)
              (make-eqv-hashtable . g$make-eqv-hashtable$5489$7lS0C)
              (make-eq-hashtable . g$make-eq-hashtable$5488$7lS0C)
              (hashtable-update! . g$hashtable-update!$5495$7lS0C)
              (hashtable-size . g$hashtable-size$5490$7lS0C)
              (hashtable-set! . g$hashtable-set!$5492$7lS0C)
              (hashtable-ref . g$hashtable-ref$5491$7lS0C)
              (hashtable-delete! . g$hashtable-delete!$5493$7lS0C)
              (hashtable-contains? . g$hashtable-contains?$5494$7lS0C)
              (hashtable-clear! . g$hashtable-clear!$5496$7lS0C)
              (call-with-output-file . g$call-with-output-file$6316$7lS0C)
              (call-with-input-file . g$call-with-input-file$6315$7lS0C)
              (with-output-to-file . g$with-output-to-file$6314$7lS0C)
              (with-input-from-file . g$with-input-from-file$6313$7lS0C)
              (port? . g$port?$6279$7lS0C)
              (open-string-output-port . g$open-string-output-port$6278$7lS0C)
              (make-i/o-write-error . g$make-i/o-write-error$6198$7lS0C)
              (make-i/o-read-error . g$make-i/o-read-error$6192$7lS0C)
              (make-i/o-port-error . g$make-i/o-port-error$6244$7lS0C)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6204$7lS0C)
              (make-i/o-filename-error . g$make-i/o-filename-error$6212$7lS0C)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6220$7lS0C)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6226$7lS0C)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6238$7lS0C)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6232$7lS0C)
              (make-i/o-error . g$make-i/o-error$6186$7lS0C)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6258$7lS0C)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6252$7lS0C)
              (i/o-write-error? . g$i/o-write-error?$6199$7lS0C)
              (i/o-read-error? . g$i/o-read-error?$6193$7lS0C)
              (i/o-port-error? . g$i/o-port-error?$6246$7lS0C)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6206$7lS0C)
              (i/o-error-position . g$i/o-error-position$6207$7lS0C)
              (i/o-filename-error? . g$i/o-filename-error?$6214$7lS0C)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6221$7lS0C)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6227$7lS0C)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6239$7lS0C)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6233$7lS0C)
              (i/o-error? . g$i/o-error?$6187$7lS0C)
              (i/o-error-port . g$i/o-error-port$6247$7lS0C)
              (i/o-error-filename . g$i/o-error-filename$6215$7lS0C)
              (i/o-encoding-error? . g$i/o-encoding-error?$6260$7lS0C)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6261$7lS0C)
              (i/o-decoding-error? . g$i/o-decoding-error?$6253$7lS0C)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6280$7lS0C)
              (scheme-report-environment
                .
                g$scheme-report-environment$11188$7lS0C)
              (quotient . g$quotient$5865$7lS0C)
              (null-environment . g$null-environment$11187$7lS0C)
              (remainder . g$remainder$5866$7lS0C)
              (modulo . g$modulo$5867$7lS0C)
              (force . g$force$5869$7lS0C)
              (command-line . g$command-line$11257$7lS0C)
              (remove . g$remove$5064$7lS0C)
              (remv . g$remv$5065$7lS0C)
              (remp . g$remp$5045$7lS0C)
              (remq . g$remq$5066$7lS0C)
              (partition . g$partition$5044$7lS0C)
              (memv . g$memv$5052$7lS0C)
              (memq . g$memq$5051$7lS0C)
              (memp . g$memp$5054$7lS0C)
              (member . g$member$5053$7lS0C)
              (exists . g$exists$5058$7lS0C)
              (for-all . g$for-all$5057$7lS0C)
              (fold-right . g$fold-right$5063$7lS0C)
              (fold-left . g$fold-left$5062$7lS0C)
              (find . g$find$5043$7lS0C)
              (filter . g$filter$5046$7lS0C)
              (cons* . g$cons*$5061$7lS0C)
              (assv . g$assv$5048$7lS0C)
              (assq . g$assq$5047$7lS0C)
              (assp . g$assp$5050$7lS0C)
              (assoc . g$assoc$5049$7lS0C)
              (eval . g$eval$11190$7lS0C)
              (environment . g$environment$11186$7lS0C)
              (make-enumeration . g$make-enumeration$6448$7lS0C)
              (enum-set=? . g$enum-set=?$6455$7lS0C)
              (enum-set-universe . g$enum-set-universe$6449$7lS0C)
              (enum-set-union . g$enum-set-union$6456$7lS0C)
              (enum-set-subset? . g$enum-set-subset?$6454$7lS0C)
              (enum-set-projection . g$enum-set-projection$6460$7lS0C)
              (enum-set-member? . g$enum-set-member?$6453$7lS0C)
              (enum-set-intersection . g$enum-set-intersection$6457$7lS0C)
              (enum-set-indexer . g$enum-set-indexer$6450$7lS0C)
              (enum-set-difference . g$enum-set-difference$6458$7lS0C)
              (enum-set-constructor . g$enum-set-constructor$6451$7lS0C)
              (enum-set-complement . g$enum-set-complement$6459$7lS0C)
              (enum-set->list . g$enum-set->list$6452$7lS0C)
              (who-condition? . g$who-condition?$5803$7lS0C)
              (warning? . g$warning?$5764$7lS0C)
              (violation? . g$violation?$5782$7lS0C)
              (undefined-violation? . g$undefined-violation?$5838$7lS0C)
              (syntax-violation? . g$syntax-violation?$5830$7lS0C)
              (syntax-violation-subform . g$syntax-violation-subform$5832$7lS0C)
              (syntax-violation-form . g$syntax-violation-form$5831$7lS0C)
              (syntax-violation . g$syntax-violation$11208$7lS0C)
              (serious-condition? . g$serious-condition?$5770$7lS0C)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5810$7lS0C)
              (message-condition? . g$message-condition?$5757$7lS0C)
              (make-who-condition . g$make-who-condition$5801$7lS0C)
              (make-warning . g$make-warning$5763$7lS0C)
              (make-violation . g$make-violation$5781$7lS0C)
              (make-undefined-violation . g$make-undefined-violation$5837$7lS0C)
              (make-syntax-violation . g$make-syntax-violation$5827$7lS0C)
              (make-serious-condition . g$make-serious-condition$5769$7lS0C)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5809$7lS0C)
              (make-message-condition . g$make-message-condition$5755$7lS0C)
              (make-lexical-violation . g$make-lexical-violation$5821$7lS0C)
              (make-irritants-condition . g$make-irritants-condition$5793$7lS0C)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5815$7lS0C)
              (make-error . g$make-error$5775$7lS0C)
              (make-assertion-violation . g$make-assertion-violation$5787$7lS0C)
              (lexical-violation? . g$lexical-violation?$5822$7lS0C)
              (irritants-condition? . g$irritants-condition?$5795$7lS0C)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5816$7lS0C)
              (error? . g$error?$5776$7lS0C)
              (condition-who . g$condition-who$5804$7lS0C)
              (condition-message . g$condition-message$5758$7lS0C)
              (condition-irritants . g$condition-irritants$5796$7lS0C)
              (assertion-violation? . g$assertion-violation?$5788$7lS0C)
              (native-endianness . g$native-endianness$5620$7lS0C)
              (bytevector-u64-set! . g$bytevector-u64-set!$5641$7lS0C)
              (bytevector-u64-ref . g$bytevector-u64-ref$5637$7lS0C)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5643$7lS0C)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5639$7lS0C)
              (bytevector-u32-set! . g$bytevector-u32-set!$5633$7lS0C)
              (bytevector-u32-ref . g$bytevector-u32-ref$5629$7lS0C)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5635$7lS0C)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5631$7lS0C)
              (bytevector-u16-set! . g$bytevector-u16-set!$5625$7lS0C)
              (bytevector-u16-ref . g$bytevector-u16-ref$5621$7lS0C)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5627$7lS0C)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5623$7lS0C)
              (bytevector-s64-set! . g$bytevector-s64-set!$5642$7lS0C)
              (bytevector-s64-ref . g$bytevector-s64-ref$5638$7lS0C)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5644$7lS0C)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5640$7lS0C)
              (bytevector-s32-set! . g$bytevector-s32-set!$5634$7lS0C)
              (bytevector-s32-ref . g$bytevector-s32-ref$5630$7lS0C)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5636$7lS0C)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5632$7lS0C)
              (bytevector-s16-set! . g$bytevector-s16-set!$5626$7lS0C)
              (bytevector-s16-ref . g$bytevector-s16-ref$5622$7lS0C)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5628$7lS0C)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5624$7lS0C)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5647$7lS0C)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5645$7lS0C)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5648$7lS0C)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5646$7lS0C)
              (no-nans-violation? . g$no-nans-violation?$6101$7lS0C)
              (no-infinities-violation? . g$no-infinities-violation?$6095$7lS0C)
              (make-no-nans-violation . g$make-no-nans-violation$6100$7lS0C)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6094$7lS0C)
              (fxrotate-bit-field . g$fxrotate-bit-field$6077$7lS0C)
              (fxif . g$fxif$6071$7lS0C)
              (fxcopy-bit-field . g$fxcopy-bit-field$6074$7lS0C)
              (fxcopy-bit . g$fxcopy-bit$6072$7lS0C)
              (fxbit-field . g$fxbit-field$6073$7lS0C)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6076$7lS0C)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6075$7lS0C)
              (fx-/carry . g$fx-/carry$6069$7lS0C)
              (fx+/carry . g$fx+/carry$6070$7lS0C)
              (fx*/carry . g$fx*/carry$6068$7lS0C)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$6018$7lS0C)
              (bitwise-if . g$bitwise-if$6012$7lS0C)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6015$7lS0C)
              (bitwise-copy-bit . g$bitwise-copy-bit$6013$7lS0C)
              (bitwise-bit-field . g$bitwise-bit-field$6014$7lS0C)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6017$7lS0C)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6016$7lS0C)
              (symbol=? . g$symbol=?$5255$7lS0C)
              (string>? . g$string>?$5252$7lS0C)
              (string>=? . g$string>=?$5254$7lS0C)
              (string=? . g$string=?$5250$7lS0C)
              (string<? . g$string<?$5251$7lS0C)
              (string<=? . g$string<=?$5253$7lS0C)
              (rationalize . g$rationalize$5262$7lS0C)
              (map . g$map$5059$7lS0C)
              (list-tail . g$list-tail$5039$7lS0C)
              (list-ref . g$list-ref$5040$7lS0C)
              (for-each . g$for-each$5060$7lS0C)
              (char>? . g$char>?$5259$7lS0C)
              (char>=? . g$char>=?$5261$7lS0C)
              (char=? . g$char=?$5257$7lS0C)
              (char<? . g$char<?$5258$7lS0C)
              (char<=? . g$char<=?$5260$7lS0C)
              (cddddr . g$cddddr$5249$7lS0C)
              (cdddar . g$cdddar$5248$7lS0C)
              (cddadr . g$cddadr$5247$7lS0C)
              (cddaar . g$cddaar$5246$7lS0C)
              (cdaddr . g$cdaddr$5245$7lS0C)
              (cdadar . g$cdadar$5244$7lS0C)
              (cdaadr . g$cdaadr$5243$7lS0C)
              (cdaaar . g$cdaaar$5242$7lS0C)
              (cadddr . g$cadddr$5241$7lS0C)
              (caddar . g$caddar$5240$7lS0C)
              (cadadr . g$cadadr$5239$7lS0C)
              (cadaar . g$cadaar$5238$7lS0C)
              (caaddr . g$caaddr$5237$7lS0C)
              (caadar . g$caadar$5236$7lS0C)
              (caaadr . g$caaadr$5235$7lS0C)
              (caaaar . g$caaaar$5234$7lS0C)
              (cdddr . g$cdddr$5233$7lS0C)
              (cddar . g$cddar$5232$7lS0C)
              (cdadr . g$cdadr$5231$7lS0C)
              (cdaar . g$cdaar$5230$7lS0C)
              (caddr . g$caddr$5229$7lS0C)
              (cadar . g$cadar$5228$7lS0C)
              (caadr . g$caadr$5227$7lS0C)
              (caaar . g$caaar$5226$7lS0C)
              (cddr . g$cddr$5225$7lS0C)
              (cdar . g$cdar$5224$7lS0C)
              (cadr . g$cadr$5223$7lS0C)
              (caar . g$caar$5222$7lS0C)
              (boolean=? . g$boolean=?$5256$7lS0C)
              (enum-set? . g$enum?$6429$7lS0C)
              (make-promise . g$make-promise$5868$7lS0C)
              (load/args . g$load/args$11259$7lS0C)
              (printf . g$printf$6484$7lS0C)
              (fprintf . g$fprintf$6485$7lS0C)
              (format . g$format$6486$7lS0C)
              (trace-printer . g$trace-printer$11256$7lS0C)
              (make-traced-macro . g$make-traced-macro$6490$7lS0C)
              (assertion-error . g$assertion-error$11204$7lS0C)
              (make-parameter . g$make-parameter$6590$7lS0C)
              (environment-bindings . g$environment-bindings$11182$7lS0C)
              (environment-symbols . g$environment-symbols$11185$7lS0C)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11181$7lS0C)
              (library-path . g$library-path$7110$7lS0C)
              (expand->core . g$expand->core$11191$7lS0C)
              (expand . g$expand$11189$7lS0C)))))))
    (g$install-library$7126$7lS0C
      'g$12466$7lS0C
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12403$7lS0C)
        (cosh . g$12402$7lS0C)
        (sinh . g$12401$7lS0C)
        (make-guid . g$12400$7lS0C)
        (unspecified? . g$12399$7lS0C)
        (make-trace . g$12398$7lS0C)
        (make-list . g$5851$7lS0C)
        (last-pair . g$5850$7lS0C)
        (load-r5rs . g$12397$7lS0C)
        (license . g$12396$7lS0C)
        (stacktrace . g$12395$7lS0C)
        (ironscheme-build . g$11826$7lS0C)
        (set-symbol-value! . g$12382$7lS0C)
        (symbol-value . g$12381$7lS0C)
        (ungensym . g$12380$7lS0C)
        (gensym . g$12379$7lS0C)
        (void . g$12378$7lS0C)
        (compile-system-libraries . g$11828$7lS0C)
        (compile->closure . g$11830$7lS0C)
        (compile . g$11829$7lS0C)
        (load . g$11825$7lS0C)
        (interaction-environment . g$8847$7lS0C)
        (string-upcase . g$12374$7lS0C)
        (string-titlecase . g$12373$7lS0C)
        (string-normalize-nfkd . g$12372$7lS0C)
        (string-normalize-nfkc . g$12371$7lS0C)
        (string-normalize-nfd . g$12370$7lS0C)
        (string-normalize-nfc . g$12369$7lS0C)
        (string-foldcase . g$12368$7lS0C)
        (string-downcase . g$12367$7lS0C)
        (string-ci>? . g$6951$7lS0C)
        (string-ci>=? . g$6953$7lS0C)
        (string-ci=? . g$6949$7lS0C)
        (string-ci<? . g$6950$7lS0C)
        (string-ci<=? . g$6952$7lS0C)
        (char-whitespace? . g$12366$7lS0C)
        (char-upper-case? . g$12365$7lS0C)
        (char-title-case? . g$12364$7lS0C)
        (char-numeric? . g$12363$7lS0C)
        (char-lower-case? . g$12362$7lS0C)
        (char-general-category . g$12361$7lS0C)
        (char-upcase . g$12360$7lS0C)
        (char-titlecase . g$12359$7lS0C)
        (char-foldcase . g$12358$7lS0C)
        (char-downcase . g$12357$7lS0C)
        (char-ci>? . g$6990$7lS0C)
        (char-ci>=? . g$6992$7lS0C)
        (char-ci=? . g$6988$7lS0C)
        (char-ci<? . g$6989$7lS0C)
        (char-ci<=? . g$6991$7lS0C)
        (char-alphabetic? . g$12356$7lS0C)
        (make-variable-transformer . g$8443$7lS0C)
        (identifier? . g$8842$7lS0C)
        (generate-temporaries . g$8831$7lS0C)
        (free-identifier=? . g$8832$7lS0C)
        (syntax->datum . g$8844$7lS0C)
        (datum->syntax . g$8843$7lS0C)
        (bound-identifier=? . g$8833$7lS0C)
        (record-type-descriptor? . g$12355$7lS0C)
        (record-predicate . g$12354$7lS0C)
        (record-mutator . g$12353$7lS0C)
        (record-constructor . g$12352$7lS0C)
        (record-accessor . g$12351$7lS0C)
        (make-record-type-descriptor . g$12350$7lS0C)
        (make-record-constructor-descriptor . g$12349$7lS0C)
        (record? . g$12348$7lS0C)
        (record-type-uid . g$12347$7lS0C)
        (record-type-sealed? . g$12346$7lS0C)
        (record-type-parent . g$12345$7lS0C)
        (record-type-opaque? . g$12344$7lS0C)
        (record-type-name . g$12343$7lS0C)
        (record-type-generative? . g$12342$7lS0C)
        (record-type-field-names . g$12341$7lS0C)
        (record-rtd . g$12340$7lS0C)
        (record-field-mutable? . g$12339$7lS0C)
        (delete-file . g$6527$7lS0C)
        (file-exists? . g$6526$7lS0C)
        (vector-sort! . g$12338$7lS0C)
        (vector-sort . g$12337$7lS0C)
        (list-sort . g$6891$7lS0C)
        (symbol-hash . g$12336$7lS0C)
        (string-ci-hash . g$12335$7lS0C)
        (string-hash . g$12334$7lS0C)
        (equal-hash . g$12333$7lS0C)
        (hashtable-equivalence-function . g$12332$7lS0C)
        (make-hashtable . g$12331$7lS0C)
        (hashtable-hash-function . g$12330$7lS0C)
        (make-eqv-hashtable . g$6495$7lS0C)
        (make-eq-hashtable . g$6494$7lS0C)
        (hashtable? . g$12329$7lS0C)
        (hashtable-update! . g$6501$7lS0C)
        (hashtable-size . g$6496$7lS0C)
        (hashtable-set! . g$6498$7lS0C)
        (hashtable-ref . g$6497$7lS0C)
        (hashtable-mutable? . g$12328$7lS0C)
        (hashtable-keys . g$12327$7lS0C)
        (hashtable-entries . g$12326$7lS0C)
        (hashtable-delete! . g$6499$7lS0C)
        (hashtable-copy . g$12325$7lS0C)
        (hashtable-contains? . g$6500$7lS0C)
        (hashtable-clear! . g$6502$7lS0C)
        (call-with-output-file . g$7369$7lS0C)
        (call-with-input-file . g$7368$7lS0C)
        (write-char . g$12324$7lS0C)
        (write . g$12323$7lS0C)
        (with-output-to-file . g$7367$7lS0C)
        (with-input-from-file . g$7366$7lS0C)
        (read-char . g$12322$7lS0C)
        (read . g$12321$7lS0C)
        (peek-char . g$12320$7lS0C)
        (open-output-file . g$12319$7lS0C)
        (open-input-file . g$12318$7lS0C)
        (newline . g$12317$7lS0C)
        (display . g$12316$7lS0C)
        (close-output-port . g$12315$7lS0C)
        (close-input-port . g$12314$7lS0C)
        (eof-object? . g$12313$7lS0C)
        (eof-object . g$12312$7lS0C)
        (current-error-port . g$12311$7lS0C)
        (current-output-port . g$12310$7lS0C)
        (current-input-port . g$12309$7lS0C)
        (output-port? . g$12308$7lS0C)
        (input-port? . g$12307$7lS0C)
        (utf-8-codec . g$12306$7lS0C)
        (utf-16-codec . g$12305$7lS0C)
        (transcoder-error-handling-mode . g$12304$7lS0C)
        (transcoder-eol-style . g$12303$7lS0C)
        (transcoder-codec . g$12302$7lS0C)
        (transcoded-port . g$12301$7lS0C)
        (textual-port? . g$12300$7lS0C)
        (string->bytevector . g$12299$7lS0C)
        (standard-output-port . g$12298$7lS0C)
        (standard-input-port . g$12297$7lS0C)
        (standard-error-port . g$12296$7lS0C)
        (set-port-position! . g$12295$7lS0C)
        (put-u8 . g$12294$7lS0C)
        (put-string . g$12293$7lS0C)
        (put-datum . g$12292$7lS0C)
        (put-char . g$12291$7lS0C)
        (put-bytevector . g$12290$7lS0C)
        (port? . g$7342$7lS0C)
        (port-transcoder . g$12289$7lS0C)
        (port-position . g$12288$7lS0C)
        (port-has-set-port-position!? . g$12287$7lS0C)
        (port-has-port-position? . g$12286$7lS0C)
        (port-eof? . g$12285$7lS0C)
        (output-port-buffer-mode . g$12284$7lS0C)
        (open-string-output-port . g$7341$7lS0C)
        (open-string-input-port . g$12283$7lS0C)
        (open-file-output-port . g$12282$7lS0C)
        (open-file-input/output-port . g$12281$7lS0C)
        (open-file-input-port . g$12280$7lS0C)
        (open-bytevector-output-port . g$12279$7lS0C)
        (open-bytevector-input-port . g$12278$7lS0C)
        (native-transcoder . g$12277$7lS0C)
        (native-eol-style . g$12276$7lS0C)
        (make-transcoder . g$12275$7lS0C)
        (latin-1-codec . g$12274$7lS0C)
        (make-i/o-write-error . g$7197$7lS0C)
        (make-i/o-read-error . g$7183$7lS0C)
        (make-i/o-port-error . g$7302$7lS0C)
        (make-i/o-invalid-position-error . g$7212$7lS0C)
        (make-i/o-filename-error . g$7229$7lS0C)
        (make-i/o-file-protection-error . g$7245$7lS0C)
        (make-i/o-file-is-read-only-error . g$7259$7lS0C)
        (make-i/o-file-does-not-exist-error . g$7287$7lS0C)
        (make-i/o-file-already-exists-error . g$7273$7lS0C)
        (make-i/o-error . g$7169$7lS0C)
        (make-i/o-encoding-error . g$7333$7lS0C)
        (make-i/o-decoding-error . g$7318$7lS0C)
        (make-custom-textual-output-port . g$12273$7lS0C)
        (make-custom-textual-input/output-port . g$12272$7lS0C)
        (make-custom-textual-input-port . g$12271$7lS0C)
        (make-custom-binary-output-port . g$12270$7lS0C)
        (make-custom-binary-input/output-port . g$12269$7lS0C)
        (make-custom-binary-input-port . g$12268$7lS0C)
        (make-bytevector . g$12267$7lS0C)
        (lookahead-u8 . g$12266$7lS0C)
        (lookahead-char . g$12265$7lS0C)
        (i/o-write-error? . g$7198$7lS0C)
        (i/o-read-error? . g$7184$7lS0C)
        (i/o-port-error? . g$7304$7lS0C)
        (i/o-invalid-position-error? . g$7214$7lS0C)
        (i/o-error-position . g$7215$7lS0C)
        (i/o-filename-error? . g$7231$7lS0C)
        (i/o-file-protection-error? . g$7246$7lS0C)
        (i/o-file-is-read-only-error? . g$7260$7lS0C)
        (i/o-file-does-not-exist-error? . g$7288$7lS0C)
        (i/o-file-already-exists-error? . g$7274$7lS0C)
        (i/o-error? . g$7170$7lS0C)
        (i/o-error-port . g$7305$7lS0C)
        (i/o-error-filename . g$7232$7lS0C)
        (i/o-encoding-error? . g$7335$7lS0C)
        (i/o-encoding-error-char . g$7336$7lS0C)
        (i/o-decoding-error? . g$7319$7lS0C)
        (get-u8 . g$12264$7lS0C)
        (get-string-n! . g$12263$7lS0C)
        (get-string-n . g$12262$7lS0C)
        (get-string-all . g$12261$7lS0C)
        (get-line . g$12260$7lS0C)
        (get-datum . g$12259$7lS0C)
        (get-char . g$12258$7lS0C)
        (get-bytevector-some . g$12257$7lS0C)
        (get-bytevector-n! . g$12256$7lS0C)
        (get-bytevector-n . g$12255$7lS0C)
        (get-bytevector-all . g$12254$7lS0C)
        (flush-output-port . g$12253$7lS0C)
        (close-port . g$12252$7lS0C)
        (call-with-string-output-port . g$7343$7lS0C)
        (call-with-port . g$12251$7lS0C)
        (call-with-bytevector-output-port . g$12250$7lS0C)
        (bytevector->string . g$12249$7lS0C)
        (buffer-mode? . g$12248$7lS0C)
        (binary-port? . g$12247$7lS0C)
        (scheme-report-environment . g$8821$7lS0C)
        (quotient . g$6870$7lS0C)
        (null-environment . g$8820$7lS0C)
        (remainder . g$6871$7lS0C)
        (modulo . g$6872$7lS0C)
        (inexact->exact . g$12246$7lS0C)
        (force . g$6874$7lS0C)
        (exact->inexact . g$12245$7lS0C)
        (exit . g$12244$7lS0C)
        (command-line . g$11822$7lS0C)
        (string-fill! . g$12243$7lS0C)
        (string-set! . g$12242$7lS0C)
        (set-cdr! . g$12241$7lS0C)
        (set-car! . g$12240$7lS0C)
        (remove . g$5873$7lS0C)
        (remv . g$5874$7lS0C)
        (remp . g$5854$7lS0C)
        (remq . g$5875$7lS0C)
        (partition . g$5853$7lS0C)
        (memv . g$5861$7lS0C)
        (memq . g$5860$7lS0C)
        (memp . g$5863$7lS0C)
        (member . g$5862$7lS0C)
        (exists . g$5867$7lS0C)
        (for-all . g$5866$7lS0C)
        (fold-right . g$5872$7lS0C)
        (fold-left . g$5871$7lS0C)
        (find . g$5852$7lS0C)
        (filter . g$5855$7lS0C)
        (cons* . g$5870$7lS0C)
        (assv . g$5857$7lS0C)
        (assq . g$5856$7lS0C)
        (assp . g$5859$7lS0C)
        (assoc . g$5858$7lS0C)
        (with-exception-handler . g$12239$7lS0C)
        (raise-continuable . g$12238$7lS0C)
        (raise . g$12237$7lS0C)
        (eval . g$8823$7lS0C)
        (environment . g$8819$7lS0C)
        (make-enumeration . g$7427$7lS0C)
        (enum-set=? . g$7434$7lS0C)
        (enum-set-universe . g$7428$7lS0C)
        (enum-set-union . g$7435$7lS0C)
        (enum-set-subset? . g$7433$7lS0C)
        (enum-set-projection . g$7439$7lS0C)
        (enum-set-member? . g$7432$7lS0C)
        (enum-set-intersection . g$7436$7lS0C)
        (enum-set-indexer . g$7429$7lS0C)
        (enum-set-difference . g$7437$7lS0C)
        (enum-set-constructor . g$7430$7lS0C)
        (enum-set-complement . g$7438$7lS0C)
        (enum-set->list . g$7431$7lS0C)
        (who-condition? . g$6781$7lS0C)
        (warning? . g$6692$7lS0C)
        (violation? . g$6734$7lS0C)
        (undefined-violation? . g$6858$7lS0C)
        (syntax-violation? . g$6842$7lS0C)
        (syntax-violation-subform . g$6844$7lS0C)
        (syntax-violation-form . g$6843$7lS0C)
        (syntax-violation . g$8841$7lS0C)
        (simple-conditions . g$12236$7lS0C)
        (serious-condition? . g$6706$7lS0C)
        (non-continuable-violation? . g$6796$7lS0C)
        (message-condition? . g$6677$7lS0C)
        (make-who-condition . g$6779$7lS0C)
        (make-warning . g$6691$7lS0C)
        (make-violation . g$6733$7lS0C)
        (make-undefined-violation . g$6857$7lS0C)
        (make-syntax-violation . g$6839$7lS0C)
        (make-serious-condition . g$6705$7lS0C)
        (make-non-continuable-violation . g$6795$7lS0C)
        (make-message-condition . g$6675$7lS0C)
        (make-lexical-violation . g$6823$7lS0C)
        (make-irritants-condition . g$6762$7lS0C)
        (make-implementation-restriction-violation . g$6809$7lS0C)
        (make-error . g$6719$7lS0C)
        (make-assertion-violation . g$6747$7lS0C)
        (lexical-violation? . g$6824$7lS0C)
        (irritants-condition? . g$6764$7lS0C)
        (implementation-restriction-violation? . g$6810$7lS0C)
        (error? . g$6720$7lS0C)
        (condition-who . g$6782$7lS0C)
        (condition-predicate . g$12235$7lS0C)
        (condition-message . g$6678$7lS0C)
        (condition-irritants . g$6765$7lS0C)
        (condition-accessor . g$12234$7lS0C)
        (condition . g$12233$7lS0C)
        (assertion-violation? . g$6748$7lS0C)
        (condition? . g$12232$7lS0C)
        (utf32->string . g$12231$7lS0C)
        (utf16->string . g$12230$7lS0C)
        (utf8->string . g$12229$7lS0C)
        (uint-list->bytevector . g$12228$7lS0C)
        (u8-list->bytevector . g$12227$7lS0C)
        (string->utf8 . g$12226$7lS0C)
        (string->utf32 . g$12225$7lS0C)
        (string->utf16 . g$12224$7lS0C)
        (sint-list->bytevector . g$12223$7lS0C)
        (native-endianness . g$6533$7lS0C)
        (bytevector? . g$12222$7lS0C)
        (bytevector=? . g$12221$7lS0C)
        (bytevector-uint-set! . g$12220$7lS0C)
        (bytevector-uint-ref . g$12219$7lS0C)
        (bytevector-u8-set! . g$12218$7lS0C)
        (bytevector-u8-ref . g$12217$7lS0C)
        (bytevector-u64-set! . g$6554$7lS0C)
        (bytevector-u64-ref . g$6550$7lS0C)
        (bytevector-u64-native-set! . g$6556$7lS0C)
        (bytevector-u64-native-ref . g$6552$7lS0C)
        (bytevector-u32-set! . g$6546$7lS0C)
        (bytevector-u32-ref . g$6542$7lS0C)
        (bytevector-u32-native-set! . g$6548$7lS0C)
        (bytevector-u32-native-ref . g$6544$7lS0C)
        (bytevector-u16-set! . g$6538$7lS0C)
        (bytevector-u16-ref . g$6534$7lS0C)
        (bytevector-u16-native-set! . g$6540$7lS0C)
        (bytevector-u16-native-ref . g$6536$7lS0C)
        (bytevector-sint-set! . g$12216$7lS0C)
        (bytevector-sint-ref . g$12215$7lS0C)
        (bytevector-s8-set! . g$12214$7lS0C)
        (bytevector-s8-ref . g$12213$7lS0C)
        (bytevector-s64-set! . g$6555$7lS0C)
        (bytevector-s64-ref . g$6551$7lS0C)
        (bytevector-s64-native-set! . g$6557$7lS0C)
        (bytevector-s64-native-ref . g$6553$7lS0C)
        (bytevector-s32-set! . g$6547$7lS0C)
        (bytevector-s32-ref . g$6543$7lS0C)
        (bytevector-s32-native-set! . g$6549$7lS0C)
        (bytevector-s32-native-ref . g$6545$7lS0C)
        (bytevector-s16-set! . g$6539$7lS0C)
        (bytevector-s16-ref . g$6535$7lS0C)
        (bytevector-s16-native-set! . g$6541$7lS0C)
        (bytevector-s16-native-ref . g$6537$7lS0C)
        (bytevector-length . g$12212$7lS0C)
        (bytevector-ieee-single-set! . g$12211$7lS0C)
        (bytevector-ieee-single-ref . g$12210$7lS0C)
        (bytevector-ieee-single-native-set! . g$6560$7lS0C)
        (bytevector-ieee-single-native-ref . g$6558$7lS0C)
        (bytevector-ieee-double-set! . g$12209$7lS0C)
        (bytevector-ieee-double-ref . g$12208$7lS0C)
        (bytevector-ieee-double-native-set! . g$6561$7lS0C)
        (bytevector-ieee-double-native-ref . g$6559$7lS0C)
        (bytevector-fill! . g$12207$7lS0C)
        (bytevector-copy! . g$12206$7lS0C)
        (bytevector-copy . g$12205$7lS0C)
        (bytevector->uint-list . g$12204$7lS0C)
        (bytevector->u8-list . g$12203$7lS0C)
        (bytevector->sint-list . g$12202$7lS0C)
        (no-nans-violation? . g$7155$7lS0C)
        (no-infinities-violation? . g$7141$7lS0C)
        (make-no-nans-violation . g$7154$7lS0C)
        (make-no-infinities-violation . g$7140$7lS0C)
        (real->flonum . g$12201$7lS0C)
        (flzero? . g$12200$7lS0C)
        (fltruncate . g$12199$7lS0C)
        (fltan . g$12198$7lS0C)
        (flsqrt . g$12197$7lS0C)
        (flsin . g$12196$7lS0C)
        (flround . g$12195$7lS0C)
        (flpositive? . g$12194$7lS0C)
        (flonum? . g$12193$7lS0C)
        (flodd? . g$12192$7lS0C)
        (flnumerator . g$12191$7lS0C)
        (flnegative? . g$12190$7lS0C)
        (flnan? . g$12189$7lS0C)
        (flmod0 . g$12188$7lS0C)
        (flmod . g$12187$7lS0C)
        (flmin . g$12186$7lS0C)
        (flmax . g$12185$7lS0C)
        (fllog . g$12184$7lS0C)
        (flinteger? . g$12183$7lS0C)
        (flinfinite? . g$12182$7lS0C)
        (flfloor . g$12181$7lS0C)
        (flfinite? . g$12180$7lS0C)
        (flexpt . g$12179$7lS0C)
        (flexp . g$12178$7lS0C)
        (fleven? . g$12177$7lS0C)
        (fldiv0-and-mod0 . g$12176$7lS0C)
        (fldiv0 . g$12175$7lS0C)
        (fldiv-and-mod . g$12174$7lS0C)
        (fldiv . g$12173$7lS0C)
        (fldenominator . g$12172$7lS0C)
        (flcos . g$12171$7lS0C)
        (flceiling . g$12170$7lS0C)
        (flatan . g$12169$7lS0C)
        (flasin . g$12168$7lS0C)
        (flacos . g$12167$7lS0C)
        (flabs . g$12166$7lS0C)
        (fl>? . g$12165$7lS0C)
        (fl>=? . g$12164$7lS0C)
        (fl=? . g$12163$7lS0C)
        (fl<? . g$12162$7lS0C)
        (fl<=? . g$12161$7lS0C)
        (fl/ . g$12160$7lS0C)
        (fl- . g$12159$7lS0C)
        (fl+ . g$12158$7lS0C)
        (fl* . g$12157$7lS0C)
        (fixnum->flonum . g$12156$7lS0C)
        (fxzero? . g$12155$7lS0C)
        (fxxor . g$12154$7lS0C)
        (fxrotate-bit-field . g$7087$7lS0C)
        (fxreverse-bit-field . g$12153$7lS0C)
        (fxpositive? . g$12152$7lS0C)
        (fxodd? . g$12151$7lS0C)
        (fxnot . g$12150$7lS0C)
        (fxnegative? . g$12149$7lS0C)
        (fxmod0 . g$12148$7lS0C)
        (fxmod . g$12147$7lS0C)
        (fxmin . g$12146$7lS0C)
        (fxmax . g$12145$7lS0C)
        (fxlength . g$12144$7lS0C)
        (fxior . g$12143$7lS0C)
        (fxif . g$7081$7lS0C)
        (fxfirst-bit-set . g$12142$7lS0C)
        (fxeven? . g$12141$7lS0C)
        (fxdiv0-and-mod0 . g$12140$7lS0C)
        (fxdiv0 . g$12139$7lS0C)
        (fxdiv-and-mod . g$12138$7lS0C)
        (fxdiv . g$12137$7lS0C)
        (fxcopy-bit-field . g$7084$7lS0C)
        (fxcopy-bit . g$7082$7lS0C)
        (fxbit-set? . g$12136$7lS0C)
        (fxbit-field . g$7083$7lS0C)
        (fxbit-count . g$12135$7lS0C)
        (fxarithmetic-shift-right . g$7086$7lS0C)
        (fxarithmetic-shift-left . g$7085$7lS0C)
        (fxarithmetic-shift . g$12134$7lS0C)
        (fxand . g$12133$7lS0C)
        (fx>? . g$12132$7lS0C)
        (fx>=? . g$12131$7lS0C)
        (fx=? . g$12130$7lS0C)
        (fx<? . g$12129$7lS0C)
        (fx<=? . g$12128$7lS0C)
        (fx-/carry . g$7079$7lS0C)
        (fx- . g$12127$7lS0C)
        (fx+/carry . g$7080$7lS0C)
        (fx+ . g$12126$7lS0C)
        (fx*/carry . g$7078$7lS0C)
        (fx* . g$12125$7lS0C)
        (greatest-fixnum . g$12124$7lS0C)
        (least-fixnum . g$12123$7lS0C)
        (fixnum-width . g$12122$7lS0C)
        (fixnum? . g$12121$7lS0C)
        (bitwise-rotate-bit-field . g$7052$7lS0C)
        (bitwise-reverse-bit-field . g$12120$7lS0C)
        (bitwise-length . g$12119$7lS0C)
        (bitwise-if . g$7046$7lS0C)
        (bitwise-first-bit-set . g$12118$7lS0C)
        (bitwise-copy-bit-field . g$7049$7lS0C)
        (bitwise-copy-bit . g$7047$7lS0C)
        (bitwise-bit-set? . g$12117$7lS0C)
        (bitwise-bit-field . g$7048$7lS0C)
        (bitwise-bit-count . g$12116$7lS0C)
        (bitwise-xor . g$12115$7lS0C)
        (bitwise-ior . g$12114$7lS0C)
        (bitwise-and . g$12113$7lS0C)
        (bitwise-not . g$12112$7lS0C)
        (bitwise-arithmetic-shift-right . g$7051$7lS0C)
        (bitwise-arithmetic-shift-left . g$7050$7lS0C)
        (bitwise-arithmetic-shift . g$12111$7lS0C)
        (zero? . g$12110$7lS0C)
        (vector? . g$12109$7lS0C)
        (vector-set! . g$12108$7lS0C)
        (vector-ref . g$12107$7lS0C)
        (vector-map . g$12106$7lS0C)
        (vector-length . g$12105$7lS0C)
        (vector-for-each . g$12104$7lS0C)
        (vector-fill! . g$12103$7lS0C)
        (vector->list . g$12102$7lS0C)
        (vector . g$12101$7lS0C)
        (values . g$12100$7lS0C)
        (truncate . g$12099$7lS0C)
        (tan . g$12098$7lS0C)
        (symbol? . g$12097$7lS0C)
        (symbol=? . g$6053$7lS0C)
        (symbol->string . g$12096$7lS0C)
        (substring . g$12095$7lS0C)
        (string? . g$12094$7lS0C)
        (string>? . g$6050$7lS0C)
        (string>=? . g$6052$7lS0C)
        (string=? . g$6048$7lS0C)
        (string<? . g$6049$7lS0C)
        (string<=? . g$6051$7lS0C)
        (string-ref . g$12093$7lS0C)
        (string-length . g$12092$7lS0C)
        (string-for-each . g$12091$7lS0C)
        (string-copy . g$12090$7lS0C)
        (string-append . g$12089$7lS0C)
        (string->symbol . g$12088$7lS0C)
        (string->number . g$12087$7lS0C)
        (string->list . g$12086$7lS0C)
        (string . g$12085$7lS0C)
        (sqrt . g$12084$7lS0C)
        (sin . g$12083$7lS0C)
        (round . g$12082$7lS0C)
        (reverse . g$12081$7lS0C)
        (real? . g$12080$7lS0C)
        (real-valued? . g$12079$7lS0C)
        (real-part . g$12078$7lS0C)
        (rationalize . g$6094$7lS0C)
        (rational? . g$12077$7lS0C)
        (rational-valued? . g$12076$7lS0C)
        (procedure? . g$12075$7lS0C)
        (positive? . g$12074$7lS0C)
        (pair? . g$12073$7lS0C)
        (odd? . g$12072$7lS0C)
        (numerator . g$12071$7lS0C)
        (number? . g$12070$7lS0C)
        (number->string . g$12069$7lS0C)
        (null? . g$12068$7lS0C)
        (not . g$12067$7lS0C)
        (negative? . g$12066$7lS0C)
        (nan? . g$12065$7lS0C)
        (min . g$12064$7lS0C)
        (max . g$12063$7lS0C)
        (map . g$5868$7lS0C)
        (make-vector . g$12062$7lS0C)
        (make-string . g$12061$7lS0C)
        (make-rectangular . g$12060$7lS0C)
        (make-polar . g$12059$7lS0C)
        (magnitude . g$12058$7lS0C)
        (log . g$12057$7lS0C)
        (list? . g$12056$7lS0C)
        (list-tail . g$5848$7lS0C)
        (list-ref . g$5849$7lS0C)
        (list->vector . g$12055$7lS0C)
        (list->string . g$12054$7lS0C)
        (list . g$12053$7lS0C)
        (length . g$12052$7lS0C)
        (lcm . g$12051$7lS0C)
        (integer? . g$12050$7lS0C)
        (integer-valued? . g$12049$7lS0C)
        (integer->char . g$12048$7lS0C)
        (infinite? . g$12047$7lS0C)
        (inexact? . g$12046$7lS0C)
        (inexact . g$12045$7lS0C)
        (imag-part . g$12044$7lS0C)
        (gcd . g$12043$7lS0C)
        (for-each . g$5869$7lS0C)
        (floor . g$12042$7lS0C)
        (finite? . g$12041$7lS0C)
        (expt . g$12040$7lS0C)
        (exp . g$12039$7lS0C)
        (exact? . g$12038$7lS0C)
        (exact-integer-sqrt . g$12037$7lS0C)
        (exact . g$12036$7lS0C)
        (even? . g$12035$7lS0C)
        (error . g$12034$7lS0C)
        (eqv? . g$12033$7lS0C)
        (equal? . g$12032$7lS0C)
        (eq? . g$12031$7lS0C)
        (dynamic-wind . g$12030$7lS0C)
        (div0-and-mod0 . g$12029$7lS0C)
        (mod0 . g$12028$7lS0C)
        (div0 . g$12027$7lS0C)
        (div-and-mod . g$12026$7lS0C)
        (mod . g$12025$7lS0C)
        (div . g$12024$7lS0C)
        (denominator . g$12023$7lS0C)
        (cos . g$12022$7lS0C)
        (cons . g$12021$7lS0C)
        (complex? . g$12020$7lS0C)
        (char? . g$12019$7lS0C)
        (char>? . g$6091$7lS0C)
        (char>=? . g$6093$7lS0C)
        (char=? . g$6089$7lS0C)
        (char<? . g$6090$7lS0C)
        (char<=? . g$6092$7lS0C)
        (char->integer . g$12018$7lS0C)
        (ceiling . g$12017$7lS0C)
        (call-with-values . g$12016$7lS0C)
        (call/cc . g$12015$7lS0C)
        (call-with-current-continuation . g$12014$7lS0C)
        (cddddr . g$6013$7lS0C)
        (cdddar . g$6012$7lS0C)
        (cddadr . g$6011$7lS0C)
        (cddaar . g$6010$7lS0C)
        (cdaddr . g$6009$7lS0C)
        (cdadar . g$6008$7lS0C)
        (cdaadr . g$6007$7lS0C)
        (cdaaar . g$6006$7lS0C)
        (cadddr . g$6005$7lS0C)
        (caddar . g$6004$7lS0C)
        (cadadr . g$6003$7lS0C)
        (cadaar . g$6002$7lS0C)
        (caaddr . g$6001$7lS0C)
        (caadar . g$6000$7lS0C)
        (caaadr . g$5999$7lS0C)
        (caaaar . g$5998$7lS0C)
        (cdddr . g$5997$7lS0C)
        (cddar . g$5996$7lS0C)
        (cdadr . g$5995$7lS0C)
        (cdaar . g$5994$7lS0C)
        (caddr . g$5993$7lS0C)
        (cadar . g$5992$7lS0C)
        (caadr . g$5991$7lS0C)
        (caaar . g$5990$7lS0C)
        (cddr . g$5989$7lS0C)
        (cdar . g$5988$7lS0C)
        (cadr . g$5987$7lS0C)
        (caar . g$5986$7lS0C)
        (cdr . g$12013$7lS0C)
        (car . g$12012$7lS0C)
        (boolean? . g$12011$7lS0C)
        (boolean=? . g$6054$7lS0C)
        (atan . g$12010$7lS0C)
        (assertion-violation . g$12009$7lS0C)
        (asin . g$12008$7lS0C)
        (apply . g$12007$7lS0C)
        (append . g$12006$7lS0C)
        (angle . g$12005$7lS0C)
        (acos . g$12004$7lS0C)
        (abs . g$12003$7lS0C)
        (/ . g$12002$7lS0C)
        (* . g$12001$7lS0C)
        (- . g$12000$7lS0C)
        (+ . g$11999$7lS0C)
        (>= . g$11998$7lS0C)
        (> . g$11997$7lS0C)
        (= . g$11996$7lS0C)
        (<= . g$11995$7lS0C)
        (< . g$11994$7lS0C)
        (deserialize-port . g$11990$7lS0C)
        (serialize-port . g$11989$7lS0C)
        (enum-set? . g$7402$7lS0C)
        (load/args . g$11824$7lS0C)
        (printf . g$7513$7lS0C)
        (fprintf . g$7514$7lS0C)
        (format . g$7515$7lS0C)
        (procedure-form . g$11988$7lS0C)
        (procedure-environment . g$11987$7lS0C)
        (procedure-name . g$11986$7lS0C)
        (procedure-arity . g$11985$7lS0C)
        (gc-collect . g$11984$7lS0C)
        (clr-type? . g$11983$7lS0C)
        (get-clr-type . g$11982$7lS0C)
        (vector-append . g$11980$7lS0C)
        (vector-filter . g$11979$7lS0C)
        (vector-reverse! . g$11978$7lS0C)
        (vector-contains? . g$11977$7lS0C)
        (vector-index-of . g$11976$7lS0C)
        (vector-copy . g$11975$7lS0C)
        (vector-binary-search . g$11974$7lS0C)
        (string-ci-compare . g$11973$7lS0C)
        (string-compare . g$11972$7lS0C)
        (string-format . g$11971$7lS0C)
        (trace-printer . g$11821$7lS0C)
        (time-it . g$11969$7lS0C)
        (make-parameter . g$7542$7lS0C)
        (open-tcp-input/output-port . g$11966$7lS0C)
        (hashtable-for-each . g$11965$7lS0C)
        (hashtable-map . g$11964$7lS0C)
        (environment-bindings . g$8815$7lS0C)
        (environment-symbols . g$8818$7lS0C)
        (interaction-environment-symbols . g$8814$7lS0C)
        (optimization-level . g$11963$7lS0C)
        (library-path . g$7997$7lS0C)
        (expand->core . g$8824$7lS0C)
        (expand . g$8822$7lS0C)
        (&no-nans . g$11962$7lS0C)
        (&no-infinities . g$11961$7lS0C)
        (&i/o-encoding . g$11960$7lS0C)
        (&i/o-decoding . g$11959$7lS0C)
        (&i/o-port . g$11958$7lS0C)
        (&i/o-file-does-not-exist . g$11957$7lS0C)
        (&i/o-file-already-exists . g$11956$7lS0C)
        (&i/o-file-is-read-only . g$11955$7lS0C)
        (&i/o-file-protection . g$11954$7lS0C)
        (&i/o-filename . g$11953$7lS0C)
        (&i/o-invalid-position . g$11952$7lS0C)
        (&i/o-write . g$11951$7lS0C)
        (&i/o-read . g$11950$7lS0C)
        (&i/o . g$11949$7lS0C)
        (&non-continuable . g$11948$7lS0C)
        (&undefined . g$11947$7lS0C)
        (&syntax . g$11946$7lS0C)
        (&lexical . g$11945$7lS0C)
        (&implementation-restriction . g$11944$7lS0C)
        (&who . g$11943$7lS0C)
        (&irritants . g$11942$7lS0C)
        (&assertion . g$11941$7lS0C)
        (&violation . g$11940$7lS0C)
        (&error . g$11939$7lS0C)
        (&serious . g$11938$7lS0C)
        (&warning . g$11937$7lS0C)
        (&message . g$11936$7lS0C)
        (&condition . g$11935$7lS0C)
        (define-condition-type . g$11934$7lS0C)
        (define-enumeration . g$11933$7lS0C)
        (define-record-type . g$11932$7lS0C)
        (parent-rtd . g$11931$7lS0C)
        (nongenerative . g$11930$7lS0C)
        (opaque . g$11929$7lS0C)
        (sealed . g$11928$7lS0C)
        (protocol . g$11927$7lS0C)
        (parent . g$11926$7lS0C)
        (immutable . g$11925$7lS0C)
        (mutable . g$11924$7lS0C)
        (fields . g$11923$7lS0C)
        (error-handling-mode . g$11922$7lS0C)
        (file-options . g$11921$7lS0C)
        (buffer-mode . g$11920$7lS0C)
        (eol-style . g$11919$7lS0C)
        (guard . g$11918$7lS0C)
        (trace-letrec-syntax . g$11917$7lS0C)
        (trace-let-syntax . g$11916$7lS0C)
        (trace-define-syntax . g$11915$7lS0C)
        (trace-define . g$11914$7lS0C)
        (trace-lambda . g$11913$7lS0C)
        (unsyntax-splicing . g$11912$7lS0C)
        (unsyntax . g$11911$7lS0C)
        (unquote-splicing . g$11910$7lS0C)
        (unquote . g$11909$7lS0C)
        (_ . g$11908$7lS0C)
        (else . g$11907$7lS0C)
        (=> . g$11906$7lS0C)
        (... . g$11905$7lS0C)
        (assert . g$11904$7lS0C)
        (endianness . g$11903$7lS0C)
        (delay . g$11902$7lS0C)
        (time . g$11901$7lS0C)
        (or . g$11900$7lS0C)
        (and . g$11899$7lS0C)
        (do . g$11898$7lS0C)
        (cond . g$11897$7lS0C)
        (let* . g$11896$7lS0C)
        (let . g$11895$7lS0C)
        (identifier-syntax . g$11894$7lS0C)
        (with-syntax . g$11893$7lS0C)
        (quasisyntax . g$11892$7lS0C)
        (quasiquote . g$11891$7lS0C)
        (syntax-rules . g$11890$7lS0C)
        (include-into . g$11889$7lS0C)
        (include . g$11888$7lS0C)
        (let-values . g$11886$7lS0C)
        (let*-values . g$11885$7lS0C)
        (record-constructor-descriptor . g$11884$7lS0C)
        (record-type-descriptor . g$11883$7lS0C)
        (fluid-let-syntax . g$11882$7lS0C)
        (case . g$11881$7lS0C)
        (parameterize . g$11880$7lS0C)
        (unless . g$11879$7lS0C)
        (when . g$11878$7lS0C)
        (if . g$11877$7lS0C)
        (letrec* . g$11876$7lS0C)
        (letrec . g$11875$7lS0C)
        (case-lambda . g$11873$7lS0C)
        (lambda . g$11872$7lS0C)
        (syntax . g$11871$7lS0C)
        (syntax-case . g$11870$7lS0C)
        (quote . g$11869$7lS0C)
        (letrec-syntax . g$11867$7lS0C)
        (let-syntax . g$11866$7lS0C)
        (set! . g$11865$7lS0C)
        (export . g$11864$7lS0C)
        (import . g$11863$7lS0C)
        (library . g$11862$7lS0C)
        (begin . g$11861$7lS0C)
        (module . g$11860$7lS0C)
        (define-syntax . g$11859$7lS0C)
        (define . g$11858$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12467$7lS0C
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11967$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7126$7lS0C
      'g$12468$7lS0C
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12408$7lS0C)
        (annotation-source . g$12407$7lS0C)
        (annotation-expression . g$12406$7lS0C)
        (annotation? . g$12405$7lS0C)
        (read-annotated . g$12404$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7126$7lS0C
      'g$12469$7lS0C
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12377$7lS0C)
        (serialize-library . g$12376$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7126$7lS0C
      'g$12470$7lS0C
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8445$7lS0C)
        (variable-transformer? . g$8444$7lS0C)
        (eqv-hash . g$11992$7lS0C)
        (reverse! . g$11991$7lS0C)
        (make-promise . g$6873$7lS0C)
        (format . g$7515$7lS0C)
        (get-command-line . g$11981$7lS0C)
        (make-traced-procedure . g$11970$7lS0C)
        (make-traced-macro . g$7535$7lS0C)
        (assertion-error . g$8837$7lS0C)
        (library-locator . g$11968$7lS0C)
        (get-library-paths . g$11967$7lS0C)
        (library-path . g$7997$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7126$7lS0C
      'g$12471$7lS0C
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11993$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12472$7lS0C
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12394$7lS0C)
        (clr-field-set!-internal . g$12393$7lS0C)
        (clr-field-get-internal . g$12392$7lS0C)
        (clr-cast-internal . g$12391$7lS0C)
        (clr-call-internal . g$12390$7lS0C)
        (clr-new-internal . g$12389$7lS0C)
        (clr-new-array-internal . g$12388$7lS0C)
        (clr-is-internal . g$12387$7lS0C)
        (clr-reference-internal . g$12386$7lS0C)
        (clr-using-internal . g$12385$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12473$7lS0C
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11910$7lS0C)
        (unquote . g$11909$7lS0C)
        (else . g$11907$7lS0C)
        (=> . g$11906$7lS0C)
        (delay . g$11902$7lS0C)
        (or . g$11900$7lS0C)
        (and . g$11899$7lS0C)
        (do . g$11898$7lS0C)
        (cond . g$11897$7lS0C)
        (let* . g$11896$7lS0C)
        (let . g$11895$7lS0C)
        (quasiquote . g$11891$7lS0C)
        (syntax-rules . g$11890$7lS0C)
        (case . g$11881$7lS0C)
        (if . g$11877$7lS0C)
        (letrec . g$11875$7lS0C)
        (lambda . g$11872$7lS0C)
        (quote . g$11869$7lS0C)
        (letrec-syntax . g$11867$7lS0C)
        (let-syntax . g$11866$7lS0C)
        (set! . g$11865$7lS0C)
        (begin . g$11861$7lS0C)
        (define-syntax . g$11859$7lS0C)
        (define . g$11858$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7126$7lS0C
      'g$12474$7lS0C
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8847$7lS0C)
        (char-ready? . g$12375$7lS0C)
        (string-ci>? . g$6951$7lS0C)
        (string-ci>=? . g$6953$7lS0C)
        (string-ci=? . g$6949$7lS0C)
        (string-ci<? . g$6950$7lS0C)
        (string-ci<=? . g$6952$7lS0C)
        (char-whitespace? . g$12366$7lS0C)
        (char-upper-case? . g$12365$7lS0C)
        (char-numeric? . g$12363$7lS0C)
        (char-lower-case? . g$12362$7lS0C)
        (char-upcase . g$12360$7lS0C)
        (char-downcase . g$12357$7lS0C)
        (char-ci>? . g$6990$7lS0C)
        (char-ci>=? . g$6992$7lS0C)
        (char-ci=? . g$6988$7lS0C)
        (char-ci<? . g$6989$7lS0C)
        (char-ci<=? . g$6991$7lS0C)
        (char-alphabetic? . g$12356$7lS0C)
        (call-with-output-file . g$7369$7lS0C)
        (call-with-input-file . g$7368$7lS0C)
        (write-char . g$12324$7lS0C)
        (write . g$12323$7lS0C)
        (with-output-to-file . g$7367$7lS0C)
        (with-input-from-file . g$7366$7lS0C)
        (read-char . g$12322$7lS0C)
        (read . g$12321$7lS0C)
        (peek-char . g$12320$7lS0C)
        (open-output-file . g$12319$7lS0C)
        (open-input-file . g$12318$7lS0C)
        (newline . g$12317$7lS0C)
        (display . g$12316$7lS0C)
        (close-output-port . g$12315$7lS0C)
        (close-input-port . g$12314$7lS0C)
        (eof-object? . g$12313$7lS0C)
        (eof-object . g$12312$7lS0C)
        (current-error-port . g$12311$7lS0C)
        (current-output-port . g$12310$7lS0C)
        (current-input-port . g$12309$7lS0C)
        (output-port? . g$12308$7lS0C)
        (input-port? . g$12307$7lS0C)
        (scheme-report-environment . g$8821$7lS0C)
        (quotient . g$6870$7lS0C)
        (null-environment . g$8820$7lS0C)
        (remainder . g$6871$7lS0C)
        (modulo . g$6872$7lS0C)
        (inexact->exact . g$12246$7lS0C)
        (force . g$6874$7lS0C)
        (exact->inexact . g$12245$7lS0C)
        (string-fill! . g$12243$7lS0C)
        (string-set! . g$12242$7lS0C)
        (set-cdr! . g$12241$7lS0C)
        (set-car! . g$12240$7lS0C)
        (memv . g$5861$7lS0C)
        (memq . g$5860$7lS0C)
        (member . g$5862$7lS0C)
        (assv . g$5857$7lS0C)
        (assq . g$5856$7lS0C)
        (assoc . g$5858$7lS0C)
        (eval . g$8823$7lS0C)
        (zero? . g$12110$7lS0C)
        (vector? . g$12109$7lS0C)
        (vector-set! . g$12108$7lS0C)
        (vector-ref . g$12107$7lS0C)
        (vector-length . g$12105$7lS0C)
        (vector-fill! . g$12103$7lS0C)
        (vector->list . g$12102$7lS0C)
        (vector . g$12101$7lS0C)
        (values . g$12100$7lS0C)
        (truncate . g$12099$7lS0C)
        (tan . g$12098$7lS0C)
        (symbol? . g$12097$7lS0C)
        (symbol->string . g$12096$7lS0C)
        (substring . g$12095$7lS0C)
        (string? . g$12094$7lS0C)
        (string>? . g$6050$7lS0C)
        (string>=? . g$6052$7lS0C)
        (string=? . g$6048$7lS0C)
        (string<? . g$6049$7lS0C)
        (string<=? . g$6051$7lS0C)
        (string-ref . g$12093$7lS0C)
        (string-length . g$12092$7lS0C)
        (string-copy . g$12090$7lS0C)
        (string-append . g$12089$7lS0C)
        (string->symbol . g$12088$7lS0C)
        (string->number . g$12087$7lS0C)
        (string->list . g$12086$7lS0C)
        (string . g$12085$7lS0C)
        (sqrt . g$12084$7lS0C)
        (sin . g$12083$7lS0C)
        (round . g$12082$7lS0C)
        (reverse . g$12081$7lS0C)
        (real? . g$12080$7lS0C)
        (real-part . g$12078$7lS0C)
        (rationalize . g$6094$7lS0C)
        (rational? . g$12077$7lS0C)
        (procedure? . g$12075$7lS0C)
        (positive? . g$12074$7lS0C)
        (pair? . g$12073$7lS0C)
        (odd? . g$12072$7lS0C)
        (numerator . g$12071$7lS0C)
        (number? . g$12070$7lS0C)
        (number->string . g$12069$7lS0C)
        (null? . g$12068$7lS0C)
        (not . g$12067$7lS0C)
        (negative? . g$12066$7lS0C)
        (min . g$12064$7lS0C)
        (max . g$12063$7lS0C)
        (map . g$5868$7lS0C)
        (make-vector . g$12062$7lS0C)
        (make-string . g$12061$7lS0C)
        (make-rectangular . g$12060$7lS0C)
        (make-polar . g$12059$7lS0C)
        (magnitude . g$12058$7lS0C)
        (log . g$12057$7lS0C)
        (list? . g$12056$7lS0C)
        (list-tail . g$5848$7lS0C)
        (list-ref . g$5849$7lS0C)
        (list->vector . g$12055$7lS0C)
        (list->string . g$12054$7lS0C)
        (list . g$12053$7lS0C)
        (length . g$12052$7lS0C)
        (lcm . g$12051$7lS0C)
        (integer? . g$12050$7lS0C)
        (integer->char . g$12048$7lS0C)
        (inexact? . g$12046$7lS0C)
        (imag-part . g$12044$7lS0C)
        (gcd . g$12043$7lS0C)
        (for-each . g$5869$7lS0C)
        (floor . g$12042$7lS0C)
        (expt . g$12040$7lS0C)
        (exp . g$12039$7lS0C)
        (exact? . g$12038$7lS0C)
        (even? . g$12035$7lS0C)
        (eqv? . g$12033$7lS0C)
        (equal? . g$12032$7lS0C)
        (eq? . g$12031$7lS0C)
        (dynamic-wind . g$12030$7lS0C)
        (denominator . g$12023$7lS0C)
        (cos . g$12022$7lS0C)
        (cons . g$12021$7lS0C)
        (complex? . g$12020$7lS0C)
        (char? . g$12019$7lS0C)
        (char>? . g$6091$7lS0C)
        (char>=? . g$6093$7lS0C)
        (char=? . g$6089$7lS0C)
        (char<? . g$6090$7lS0C)
        (char<=? . g$6092$7lS0C)
        (char->integer . g$12018$7lS0C)
        (ceiling . g$12017$7lS0C)
        (call-with-values . g$12016$7lS0C)
        (call-with-current-continuation . g$12014$7lS0C)
        (cddddr . g$6013$7lS0C)
        (cdddar . g$6012$7lS0C)
        (cddadr . g$6011$7lS0C)
        (cddaar . g$6010$7lS0C)
        (cdaddr . g$6009$7lS0C)
        (cdadar . g$6008$7lS0C)
        (cdaadr . g$6007$7lS0C)
        (cdaaar . g$6006$7lS0C)
        (cadddr . g$6005$7lS0C)
        (caddar . g$6004$7lS0C)
        (cadadr . g$6003$7lS0C)
        (cadaar . g$6002$7lS0C)
        (caaddr . g$6001$7lS0C)
        (caadar . g$6000$7lS0C)
        (caaadr . g$5999$7lS0C)
        (caaaar . g$5998$7lS0C)
        (cdddr . g$5997$7lS0C)
        (cddar . g$5996$7lS0C)
        (cdadr . g$5995$7lS0C)
        (cdaar . g$5994$7lS0C)
        (caddr . g$5993$7lS0C)
        (cadar . g$5992$7lS0C)
        (caadr . g$5991$7lS0C)
        (caaar . g$5990$7lS0C)
        (cddr . g$5989$7lS0C)
        (cdar . g$5988$7lS0C)
        (cadr . g$5987$7lS0C)
        (caar . g$5986$7lS0C)
        (cdr . g$12013$7lS0C)
        (car . g$12012$7lS0C)
        (boolean? . g$12011$7lS0C)
        (atan . g$12010$7lS0C)
        (asin . g$12008$7lS0C)
        (apply . g$12007$7lS0C)
        (append . g$12006$7lS0C)
        (angle . g$12005$7lS0C)
        (acos . g$12004$7lS0C)
        (abs . g$12003$7lS0C)
        (/ . g$12002$7lS0C)
        (* . g$12001$7lS0C)
        (- . g$12000$7lS0C)
        (+ . g$11999$7lS0C)
        (>= . g$11998$7lS0C)
        (> . g$11997$7lS0C)
        (= . g$11996$7lS0C)
        (<= . g$11995$7lS0C)
        (< . g$11994$7lS0C)
        (unquote-splicing . g$11910$7lS0C)
        (unquote . g$11909$7lS0C)
        (else . g$11907$7lS0C)
        (=> . g$11906$7lS0C)
        (... . g$11905$7lS0C)
        (delay . g$11902$7lS0C)
        (or . g$11900$7lS0C)
        (and . g$11899$7lS0C)
        (do . g$11898$7lS0C)
        (cond . g$11897$7lS0C)
        (let* . g$11896$7lS0C)
        (let . g$11895$7lS0C)
        (quasiquote . g$11891$7lS0C)
        (syntax-rules . g$11890$7lS0C)
        (case . g$11881$7lS0C)
        (if . g$11877$7lS0C)
        (letrec . g$11875$7lS0C)
        (lambda . g$11872$7lS0C)
        (quote . g$11869$7lS0C)
        (letrec-syntax . g$11867$7lS0C)
        (let-syntax . g$11866$7lS0C)
        (set! . g$11865$7lS0C)
        (begin . g$11861$7lS0C)
        (define-syntax . g$11859$7lS0C)
        (define . g$11858$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7126$7lS0C
      'g$12475$7lS0C
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12374$7lS0C)
        (string-titlecase . g$12373$7lS0C)
        (string-normalize-nfkd . g$12372$7lS0C)
        (string-normalize-nfkc . g$12371$7lS0C)
        (string-normalize-nfd . g$12370$7lS0C)
        (string-normalize-nfc . g$12369$7lS0C)
        (string-foldcase . g$12368$7lS0C)
        (string-downcase . g$12367$7lS0C)
        (string-ci>? . g$6951$7lS0C)
        (string-ci>=? . g$6953$7lS0C)
        (string-ci=? . g$6949$7lS0C)
        (string-ci<? . g$6950$7lS0C)
        (string-ci<=? . g$6952$7lS0C)
        (char-whitespace? . g$12366$7lS0C)
        (char-upper-case? . g$12365$7lS0C)
        (char-title-case? . g$12364$7lS0C)
        (char-numeric? . g$12363$7lS0C)
        (char-lower-case? . g$12362$7lS0C)
        (char-general-category . g$12361$7lS0C)
        (char-upcase . g$12360$7lS0C)
        (char-titlecase . g$12359$7lS0C)
        (char-foldcase . g$12358$7lS0C)
        (char-downcase . g$12357$7lS0C)
        (char-ci>? . g$6990$7lS0C)
        (char-ci>=? . g$6992$7lS0C)
        (char-ci=? . g$6988$7lS0C)
        (char-ci<? . g$6989$7lS0C)
        (char-ci<=? . g$6991$7lS0C)
        (char-alphabetic? . g$12356$7lS0C)
        (make-variable-transformer . g$8443$7lS0C)
        (identifier? . g$8842$7lS0C)
        (generate-temporaries . g$8831$7lS0C)
        (free-identifier=? . g$8832$7lS0C)
        (syntax->datum . g$8844$7lS0C)
        (datum->syntax . g$8843$7lS0C)
        (bound-identifier=? . g$8833$7lS0C)
        (record-type-descriptor? . g$12355$7lS0C)
        (record-predicate . g$12354$7lS0C)
        (record-mutator . g$12353$7lS0C)
        (record-constructor . g$12352$7lS0C)
        (record-accessor . g$12351$7lS0C)
        (make-record-type-descriptor . g$12350$7lS0C)
        (make-record-constructor-descriptor . g$12349$7lS0C)
        (record? . g$12348$7lS0C)
        (record-type-uid . g$12347$7lS0C)
        (record-type-sealed? . g$12346$7lS0C)
        (record-type-parent . g$12345$7lS0C)
        (record-type-opaque? . g$12344$7lS0C)
        (record-type-name . g$12343$7lS0C)
        (record-type-generative? . g$12342$7lS0C)
        (record-type-field-names . g$12341$7lS0C)
        (record-rtd . g$12340$7lS0C)
        (record-field-mutable? . g$12339$7lS0C)
        (delete-file . g$6527$7lS0C)
        (file-exists? . g$6526$7lS0C)
        (vector-sort! . g$12338$7lS0C)
        (vector-sort . g$12337$7lS0C)
        (list-sort . g$6891$7lS0C)
        (symbol-hash . g$12336$7lS0C)
        (string-ci-hash . g$12335$7lS0C)
        (string-hash . g$12334$7lS0C)
        (equal-hash . g$12333$7lS0C)
        (hashtable-equivalence-function . g$12332$7lS0C)
        (make-hashtable . g$12331$7lS0C)
        (hashtable-hash-function . g$12330$7lS0C)
        (make-eqv-hashtable . g$6495$7lS0C)
        (make-eq-hashtable . g$6494$7lS0C)
        (hashtable? . g$12329$7lS0C)
        (hashtable-update! . g$6501$7lS0C)
        (hashtable-size . g$6496$7lS0C)
        (hashtable-set! . g$6498$7lS0C)
        (hashtable-ref . g$6497$7lS0C)
        (hashtable-mutable? . g$12328$7lS0C)
        (hashtable-keys . g$12327$7lS0C)
        (hashtable-entries . g$12326$7lS0C)
        (hashtable-delete! . g$6499$7lS0C)
        (hashtable-copy . g$12325$7lS0C)
        (hashtable-contains? . g$6500$7lS0C)
        (hashtable-clear! . g$6502$7lS0C)
        (call-with-output-file . g$7369$7lS0C)
        (call-with-input-file . g$7368$7lS0C)
        (write-char . g$12324$7lS0C)
        (write . g$12323$7lS0C)
        (with-output-to-file . g$7367$7lS0C)
        (with-input-from-file . g$7366$7lS0C)
        (read-char . g$12322$7lS0C)
        (read . g$12321$7lS0C)
        (peek-char . g$12320$7lS0C)
        (open-output-file . g$12319$7lS0C)
        (open-input-file . g$12318$7lS0C)
        (newline . g$12317$7lS0C)
        (display . g$12316$7lS0C)
        (close-output-port . g$12315$7lS0C)
        (close-input-port . g$12314$7lS0C)
        (eof-object? . g$12313$7lS0C)
        (eof-object . g$12312$7lS0C)
        (current-error-port . g$12311$7lS0C)
        (current-output-port . g$12310$7lS0C)
        (current-input-port . g$12309$7lS0C)
        (output-port? . g$12308$7lS0C)
        (input-port? . g$12307$7lS0C)
        (utf-8-codec . g$12306$7lS0C)
        (utf-16-codec . g$12305$7lS0C)
        (transcoder-error-handling-mode . g$12304$7lS0C)
        (transcoder-eol-style . g$12303$7lS0C)
        (transcoder-codec . g$12302$7lS0C)
        (transcoded-port . g$12301$7lS0C)
        (textual-port? . g$12300$7lS0C)
        (string->bytevector . g$12299$7lS0C)
        (standard-output-port . g$12298$7lS0C)
        (standard-input-port . g$12297$7lS0C)
        (standard-error-port . g$12296$7lS0C)
        (set-port-position! . g$12295$7lS0C)
        (put-u8 . g$12294$7lS0C)
        (put-string . g$12293$7lS0C)
        (put-datum . g$12292$7lS0C)
        (put-char . g$12291$7lS0C)
        (put-bytevector . g$12290$7lS0C)
        (port? . g$7342$7lS0C)
        (port-transcoder . g$12289$7lS0C)
        (port-position . g$12288$7lS0C)
        (port-has-set-port-position!? . g$12287$7lS0C)
        (port-has-port-position? . g$12286$7lS0C)
        (port-eof? . g$12285$7lS0C)
        (output-port-buffer-mode . g$12284$7lS0C)
        (open-string-output-port . g$7341$7lS0C)
        (open-string-input-port . g$12283$7lS0C)
        (open-file-output-port . g$12282$7lS0C)
        (open-file-input/output-port . g$12281$7lS0C)
        (open-file-input-port . g$12280$7lS0C)
        (open-bytevector-output-port . g$12279$7lS0C)
        (open-bytevector-input-port . g$12278$7lS0C)
        (native-transcoder . g$12277$7lS0C)
        (native-eol-style . g$12276$7lS0C)
        (make-transcoder . g$12275$7lS0C)
        (latin-1-codec . g$12274$7lS0C)
        (make-i/o-write-error . g$7197$7lS0C)
        (make-i/o-read-error . g$7183$7lS0C)
        (make-i/o-port-error . g$7302$7lS0C)
        (make-i/o-invalid-position-error . g$7212$7lS0C)
        (make-i/o-filename-error . g$7229$7lS0C)
        (make-i/o-file-protection-error . g$7245$7lS0C)
        (make-i/o-file-is-read-only-error . g$7259$7lS0C)
        (make-i/o-file-does-not-exist-error . g$7287$7lS0C)
        (make-i/o-file-already-exists-error . g$7273$7lS0C)
        (make-i/o-error . g$7169$7lS0C)
        (make-i/o-encoding-error . g$7333$7lS0C)
        (make-i/o-decoding-error . g$7318$7lS0C)
        (make-custom-textual-output-port . g$12273$7lS0C)
        (make-custom-textual-input/output-port . g$12272$7lS0C)
        (make-custom-textual-input-port . g$12271$7lS0C)
        (make-custom-binary-output-port . g$12270$7lS0C)
        (make-custom-binary-input/output-port . g$12269$7lS0C)
        (make-custom-binary-input-port . g$12268$7lS0C)
        (make-bytevector . g$12267$7lS0C)
        (lookahead-u8 . g$12266$7lS0C)
        (lookahead-char . g$12265$7lS0C)
        (i/o-write-error? . g$7198$7lS0C)
        (i/o-read-error? . g$7184$7lS0C)
        (i/o-port-error? . g$7304$7lS0C)
        (i/o-invalid-position-error? . g$7214$7lS0C)
        (i/o-error-position . g$7215$7lS0C)
        (i/o-filename-error? . g$7231$7lS0C)
        (i/o-file-protection-error? . g$7246$7lS0C)
        (i/o-file-is-read-only-error? . g$7260$7lS0C)
        (i/o-file-does-not-exist-error? . g$7288$7lS0C)
        (i/o-file-already-exists-error? . g$7274$7lS0C)
        (i/o-error? . g$7170$7lS0C)
        (i/o-error-port . g$7305$7lS0C)
        (i/o-error-filename . g$7232$7lS0C)
        (i/o-encoding-error? . g$7335$7lS0C)
        (i/o-encoding-error-char . g$7336$7lS0C)
        (i/o-decoding-error? . g$7319$7lS0C)
        (get-u8 . g$12264$7lS0C)
        (get-string-n! . g$12263$7lS0C)
        (get-string-n . g$12262$7lS0C)
        (get-string-all . g$12261$7lS0C)
        (get-line . g$12260$7lS0C)
        (get-datum . g$12259$7lS0C)
        (get-char . g$12258$7lS0C)
        (get-bytevector-some . g$12257$7lS0C)
        (get-bytevector-n! . g$12256$7lS0C)
        (get-bytevector-n . g$12255$7lS0C)
        (get-bytevector-all . g$12254$7lS0C)
        (flush-output-port . g$12253$7lS0C)
        (close-port . g$12252$7lS0C)
        (call-with-string-output-port . g$7343$7lS0C)
        (call-with-port . g$12251$7lS0C)
        (call-with-bytevector-output-port . g$12250$7lS0C)
        (bytevector->string . g$12249$7lS0C)
        (buffer-mode? . g$12248$7lS0C)
        (binary-port? . g$12247$7lS0C)
        (exit . g$12244$7lS0C)
        (command-line . g$11822$7lS0C)
        (remove . g$5873$7lS0C)
        (remv . g$5874$7lS0C)
        (remp . g$5854$7lS0C)
        (remq . g$5875$7lS0C)
        (partition . g$5853$7lS0C)
        (memv . g$5861$7lS0C)
        (memq . g$5860$7lS0C)
        (memp . g$5863$7lS0C)
        (member . g$5862$7lS0C)
        (exists . g$5867$7lS0C)
        (for-all . g$5866$7lS0C)
        (fold-right . g$5872$7lS0C)
        (fold-left . g$5871$7lS0C)
        (find . g$5852$7lS0C)
        (filter . g$5855$7lS0C)
        (cons* . g$5870$7lS0C)
        (assv . g$5857$7lS0C)
        (assq . g$5856$7lS0C)
        (assp . g$5859$7lS0C)
        (assoc . g$5858$7lS0C)
        (with-exception-handler . g$12239$7lS0C)
        (raise-continuable . g$12238$7lS0C)
        (raise . g$12237$7lS0C)
        (make-enumeration . g$7427$7lS0C)
        (enum-set=? . g$7434$7lS0C)
        (enum-set-universe . g$7428$7lS0C)
        (enum-set-union . g$7435$7lS0C)
        (enum-set-subset? . g$7433$7lS0C)
        (enum-set-projection . g$7439$7lS0C)
        (enum-set-member? . g$7432$7lS0C)
        (enum-set-intersection . g$7436$7lS0C)
        (enum-set-indexer . g$7429$7lS0C)
        (enum-set-difference . g$7437$7lS0C)
        (enum-set-constructor . g$7430$7lS0C)
        (enum-set-complement . g$7438$7lS0C)
        (enum-set->list . g$7431$7lS0C)
        (who-condition? . g$6781$7lS0C)
        (warning? . g$6692$7lS0C)
        (violation? . g$6734$7lS0C)
        (undefined-violation? . g$6858$7lS0C)
        (syntax-violation? . g$6842$7lS0C)
        (syntax-violation-subform . g$6844$7lS0C)
        (syntax-violation-form . g$6843$7lS0C)
        (syntax-violation . g$8841$7lS0C)
        (simple-conditions . g$12236$7lS0C)
        (serious-condition? . g$6706$7lS0C)
        (non-continuable-violation? . g$6796$7lS0C)
        (message-condition? . g$6677$7lS0C)
        (make-who-condition . g$6779$7lS0C)
        (make-warning . g$6691$7lS0C)
        (make-violation . g$6733$7lS0C)
        (make-undefined-violation . g$6857$7lS0C)
        (make-syntax-violation . g$6839$7lS0C)
        (make-serious-condition . g$6705$7lS0C)
        (make-non-continuable-violation . g$6795$7lS0C)
        (make-message-condition . g$6675$7lS0C)
        (make-lexical-violation . g$6823$7lS0C)
        (make-irritants-condition . g$6762$7lS0C)
        (make-implementation-restriction-violation . g$6809$7lS0C)
        (make-error . g$6719$7lS0C)
        (make-assertion-violation . g$6747$7lS0C)
        (lexical-violation? . g$6824$7lS0C)
        (irritants-condition? . g$6764$7lS0C)
        (implementation-restriction-violation? . g$6810$7lS0C)
        (error? . g$6720$7lS0C)
        (condition-who . g$6782$7lS0C)
        (condition-predicate . g$12235$7lS0C)
        (condition-message . g$6678$7lS0C)
        (condition-irritants . g$6765$7lS0C)
        (condition-accessor . g$12234$7lS0C)
        (condition . g$12233$7lS0C)
        (assertion-violation? . g$6748$7lS0C)
        (condition? . g$12232$7lS0C)
        (utf32->string . g$12231$7lS0C)
        (utf16->string . g$12230$7lS0C)
        (utf8->string . g$12229$7lS0C)
        (uint-list->bytevector . g$12228$7lS0C)
        (u8-list->bytevector . g$12227$7lS0C)
        (string->utf8 . g$12226$7lS0C)
        (string->utf32 . g$12225$7lS0C)
        (string->utf16 . g$12224$7lS0C)
        (sint-list->bytevector . g$12223$7lS0C)
        (native-endianness . g$6533$7lS0C)
        (bytevector? . g$12222$7lS0C)
        (bytevector=? . g$12221$7lS0C)
        (bytevector-uint-set! . g$12220$7lS0C)
        (bytevector-uint-ref . g$12219$7lS0C)
        (bytevector-u8-set! . g$12218$7lS0C)
        (bytevector-u8-ref . g$12217$7lS0C)
        (bytevector-u64-set! . g$6554$7lS0C)
        (bytevector-u64-ref . g$6550$7lS0C)
        (bytevector-u64-native-set! . g$6556$7lS0C)
        (bytevector-u64-native-ref . g$6552$7lS0C)
        (bytevector-u32-set! . g$6546$7lS0C)
        (bytevector-u32-ref . g$6542$7lS0C)
        (bytevector-u32-native-set! . g$6548$7lS0C)
        (bytevector-u32-native-ref . g$6544$7lS0C)
        (bytevector-u16-set! . g$6538$7lS0C)
        (bytevector-u16-ref . g$6534$7lS0C)
        (bytevector-u16-native-set! . g$6540$7lS0C)
        (bytevector-u16-native-ref . g$6536$7lS0C)
        (bytevector-sint-set! . g$12216$7lS0C)
        (bytevector-sint-ref . g$12215$7lS0C)
        (bytevector-s8-set! . g$12214$7lS0C)
        (bytevector-s8-ref . g$12213$7lS0C)
        (bytevector-s64-set! . g$6555$7lS0C)
        (bytevector-s64-ref . g$6551$7lS0C)
        (bytevector-s64-native-set! . g$6557$7lS0C)
        (bytevector-s64-native-ref . g$6553$7lS0C)
        (bytevector-s32-set! . g$6547$7lS0C)
        (bytevector-s32-ref . g$6543$7lS0C)
        (bytevector-s32-native-set! . g$6549$7lS0C)
        (bytevector-s32-native-ref . g$6545$7lS0C)
        (bytevector-s16-set! . g$6539$7lS0C)
        (bytevector-s16-ref . g$6535$7lS0C)
        (bytevector-s16-native-set! . g$6541$7lS0C)
        (bytevector-s16-native-ref . g$6537$7lS0C)
        (bytevector-length . g$12212$7lS0C)
        (bytevector-ieee-single-set! . g$12211$7lS0C)
        (bytevector-ieee-single-ref . g$12210$7lS0C)
        (bytevector-ieee-single-native-set! . g$6560$7lS0C)
        (bytevector-ieee-single-native-ref . g$6558$7lS0C)
        (bytevector-ieee-double-set! . g$12209$7lS0C)
        (bytevector-ieee-double-ref . g$12208$7lS0C)
        (bytevector-ieee-double-native-set! . g$6561$7lS0C)
        (bytevector-ieee-double-native-ref . g$6559$7lS0C)
        (bytevector-fill! . g$12207$7lS0C)
        (bytevector-copy! . g$12206$7lS0C)
        (bytevector-copy . g$12205$7lS0C)
        (bytevector->uint-list . g$12204$7lS0C)
        (bytevector->u8-list . g$12203$7lS0C)
        (bytevector->sint-list . g$12202$7lS0C)
        (no-nans-violation? . g$7155$7lS0C)
        (no-infinities-violation? . g$7141$7lS0C)
        (make-no-nans-violation . g$7154$7lS0C)
        (make-no-infinities-violation . g$7140$7lS0C)
        (real->flonum . g$12201$7lS0C)
        (flzero? . g$12200$7lS0C)
        (fltruncate . g$12199$7lS0C)
        (fltan . g$12198$7lS0C)
        (flsqrt . g$12197$7lS0C)
        (flsin . g$12196$7lS0C)
        (flround . g$12195$7lS0C)
        (flpositive? . g$12194$7lS0C)
        (flonum? . g$12193$7lS0C)
        (flodd? . g$12192$7lS0C)
        (flnumerator . g$12191$7lS0C)
        (flnegative? . g$12190$7lS0C)
        (flnan? . g$12189$7lS0C)
        (flmod0 . g$12188$7lS0C)
        (flmod . g$12187$7lS0C)
        (flmin . g$12186$7lS0C)
        (flmax . g$12185$7lS0C)
        (fllog . g$12184$7lS0C)
        (flinteger? . g$12183$7lS0C)
        (flinfinite? . g$12182$7lS0C)
        (flfloor . g$12181$7lS0C)
        (flfinite? . g$12180$7lS0C)
        (flexpt . g$12179$7lS0C)
        (flexp . g$12178$7lS0C)
        (fleven? . g$12177$7lS0C)
        (fldiv0-and-mod0 . g$12176$7lS0C)
        (fldiv0 . g$12175$7lS0C)
        (fldiv-and-mod . g$12174$7lS0C)
        (fldiv . g$12173$7lS0C)
        (fldenominator . g$12172$7lS0C)
        (flcos . g$12171$7lS0C)
        (flceiling . g$12170$7lS0C)
        (flatan . g$12169$7lS0C)
        (flasin . g$12168$7lS0C)
        (flacos . g$12167$7lS0C)
        (flabs . g$12166$7lS0C)
        (fl>? . g$12165$7lS0C)
        (fl>=? . g$12164$7lS0C)
        (fl=? . g$12163$7lS0C)
        (fl<? . g$12162$7lS0C)
        (fl<=? . g$12161$7lS0C)
        (fl/ . g$12160$7lS0C)
        (fl- . g$12159$7lS0C)
        (fl+ . g$12158$7lS0C)
        (fl* . g$12157$7lS0C)
        (fixnum->flonum . g$12156$7lS0C)
        (fxzero? . g$12155$7lS0C)
        (fxxor . g$12154$7lS0C)
        (fxrotate-bit-field . g$7087$7lS0C)
        (fxreverse-bit-field . g$12153$7lS0C)
        (fxpositive? . g$12152$7lS0C)
        (fxodd? . g$12151$7lS0C)
        (fxnot . g$12150$7lS0C)
        (fxnegative? . g$12149$7lS0C)
        (fxmod0 . g$12148$7lS0C)
        (fxmod . g$12147$7lS0C)
        (fxmin . g$12146$7lS0C)
        (fxmax . g$12145$7lS0C)
        (fxlength . g$12144$7lS0C)
        (fxior . g$12143$7lS0C)
        (fxif . g$7081$7lS0C)
        (fxfirst-bit-set . g$12142$7lS0C)
        (fxeven? . g$12141$7lS0C)
        (fxdiv0-and-mod0 . g$12140$7lS0C)
        (fxdiv0 . g$12139$7lS0C)
        (fxdiv-and-mod . g$12138$7lS0C)
        (fxdiv . g$12137$7lS0C)
        (fxcopy-bit-field . g$7084$7lS0C)
        (fxcopy-bit . g$7082$7lS0C)
        (fxbit-set? . g$12136$7lS0C)
        (fxbit-field . g$7083$7lS0C)
        (fxbit-count . g$12135$7lS0C)
        (fxarithmetic-shift-right . g$7086$7lS0C)
        (fxarithmetic-shift-left . g$7085$7lS0C)
        (fxarithmetic-shift . g$12134$7lS0C)
        (fxand . g$12133$7lS0C)
        (fx>? . g$12132$7lS0C)
        (fx>=? . g$12131$7lS0C)
        (fx=? . g$12130$7lS0C)
        (fx<? . g$12129$7lS0C)
        (fx<=? . g$12128$7lS0C)
        (fx-/carry . g$7079$7lS0C)
        (fx- . g$12127$7lS0C)
        (fx+/carry . g$7080$7lS0C)
        (fx+ . g$12126$7lS0C)
        (fx*/carry . g$7078$7lS0C)
        (fx* . g$12125$7lS0C)
        (greatest-fixnum . g$12124$7lS0C)
        (least-fixnum . g$12123$7lS0C)
        (fixnum-width . g$12122$7lS0C)
        (fixnum? . g$12121$7lS0C)
        (bitwise-rotate-bit-field . g$7052$7lS0C)
        (bitwise-reverse-bit-field . g$12120$7lS0C)
        (bitwise-length . g$12119$7lS0C)
        (bitwise-if . g$7046$7lS0C)
        (bitwise-first-bit-set . g$12118$7lS0C)
        (bitwise-copy-bit-field . g$7049$7lS0C)
        (bitwise-copy-bit . g$7047$7lS0C)
        (bitwise-bit-set? . g$12117$7lS0C)
        (bitwise-bit-field . g$7048$7lS0C)
        (bitwise-bit-count . g$12116$7lS0C)
        (bitwise-xor . g$12115$7lS0C)
        (bitwise-ior . g$12114$7lS0C)
        (bitwise-and . g$12113$7lS0C)
        (bitwise-not . g$12112$7lS0C)
        (bitwise-arithmetic-shift-right . g$7051$7lS0C)
        (bitwise-arithmetic-shift-left . g$7050$7lS0C)
        (bitwise-arithmetic-shift . g$12111$7lS0C)
        (zero? . g$12110$7lS0C)
        (vector? . g$12109$7lS0C)
        (vector-set! . g$12108$7lS0C)
        (vector-ref . g$12107$7lS0C)
        (vector-map . g$12106$7lS0C)
        (vector-length . g$12105$7lS0C)
        (vector-for-each . g$12104$7lS0C)
        (vector-fill! . g$12103$7lS0C)
        (vector->list . g$12102$7lS0C)
        (vector . g$12101$7lS0C)
        (values . g$12100$7lS0C)
        (truncate . g$12099$7lS0C)
        (tan . g$12098$7lS0C)
        (symbol? . g$12097$7lS0C)
        (symbol=? . g$6053$7lS0C)
        (symbol->string . g$12096$7lS0C)
        (substring . g$12095$7lS0C)
        (string? . g$12094$7lS0C)
        (string>? . g$6050$7lS0C)
        (string>=? . g$6052$7lS0C)
        (string=? . g$6048$7lS0C)
        (string<? . g$6049$7lS0C)
        (string<=? . g$6051$7lS0C)
        (string-ref . g$12093$7lS0C)
        (string-length . g$12092$7lS0C)
        (string-for-each . g$12091$7lS0C)
        (string-copy . g$12090$7lS0C)
        (string-append . g$12089$7lS0C)
        (string->symbol . g$12088$7lS0C)
        (string->number . g$12087$7lS0C)
        (string->list . g$12086$7lS0C)
        (string . g$12085$7lS0C)
        (sqrt . g$12084$7lS0C)
        (sin . g$12083$7lS0C)
        (round . g$12082$7lS0C)
        (reverse . g$12081$7lS0C)
        (real? . g$12080$7lS0C)
        (real-valued? . g$12079$7lS0C)
        (real-part . g$12078$7lS0C)
        (rationalize . g$6094$7lS0C)
        (rational? . g$12077$7lS0C)
        (rational-valued? . g$12076$7lS0C)
        (procedure? . g$12075$7lS0C)
        (positive? . g$12074$7lS0C)
        (pair? . g$12073$7lS0C)
        (odd? . g$12072$7lS0C)
        (numerator . g$12071$7lS0C)
        (number? . g$12070$7lS0C)
        (number->string . g$12069$7lS0C)
        (null? . g$12068$7lS0C)
        (not . g$12067$7lS0C)
        (negative? . g$12066$7lS0C)
        (nan? . g$12065$7lS0C)
        (min . g$12064$7lS0C)
        (max . g$12063$7lS0C)
        (map . g$5868$7lS0C)
        (make-vector . g$12062$7lS0C)
        (make-string . g$12061$7lS0C)
        (make-rectangular . g$12060$7lS0C)
        (make-polar . g$12059$7lS0C)
        (magnitude . g$12058$7lS0C)
        (log . g$12057$7lS0C)
        (list? . g$12056$7lS0C)
        (list-tail . g$5848$7lS0C)
        (list-ref . g$5849$7lS0C)
        (list->vector . g$12055$7lS0C)
        (list->string . g$12054$7lS0C)
        (list . g$12053$7lS0C)
        (length . g$12052$7lS0C)
        (lcm . g$12051$7lS0C)
        (integer? . g$12050$7lS0C)
        (integer-valued? . g$12049$7lS0C)
        (integer->char . g$12048$7lS0C)
        (infinite? . g$12047$7lS0C)
        (inexact? . g$12046$7lS0C)
        (inexact . g$12045$7lS0C)
        (imag-part . g$12044$7lS0C)
        (gcd . g$12043$7lS0C)
        (for-each . g$5869$7lS0C)
        (floor . g$12042$7lS0C)
        (finite? . g$12041$7lS0C)
        (expt . g$12040$7lS0C)
        (exp . g$12039$7lS0C)
        (exact? . g$12038$7lS0C)
        (exact-integer-sqrt . g$12037$7lS0C)
        (exact . g$12036$7lS0C)
        (even? . g$12035$7lS0C)
        (error . g$12034$7lS0C)
        (eqv? . g$12033$7lS0C)
        (equal? . g$12032$7lS0C)
        (eq? . g$12031$7lS0C)
        (dynamic-wind . g$12030$7lS0C)
        (div0-and-mod0 . g$12029$7lS0C)
        (mod0 . g$12028$7lS0C)
        (div0 . g$12027$7lS0C)
        (div-and-mod . g$12026$7lS0C)
        (mod . g$12025$7lS0C)
        (div . g$12024$7lS0C)
        (denominator . g$12023$7lS0C)
        (cos . g$12022$7lS0C)
        (cons . g$12021$7lS0C)
        (complex? . g$12020$7lS0C)
        (char? . g$12019$7lS0C)
        (char>? . g$6091$7lS0C)
        (char>=? . g$6093$7lS0C)
        (char=? . g$6089$7lS0C)
        (char<? . g$6090$7lS0C)
        (char<=? . g$6092$7lS0C)
        (char->integer . g$12018$7lS0C)
        (ceiling . g$12017$7lS0C)
        (call-with-values . g$12016$7lS0C)
        (call/cc . g$12015$7lS0C)
        (call-with-current-continuation . g$12014$7lS0C)
        (cddddr . g$6013$7lS0C)
        (cdddar . g$6012$7lS0C)
        (cddadr . g$6011$7lS0C)
        (cddaar . g$6010$7lS0C)
        (cdaddr . g$6009$7lS0C)
        (cdadar . g$6008$7lS0C)
        (cdaadr . g$6007$7lS0C)
        (cdaaar . g$6006$7lS0C)
        (cadddr . g$6005$7lS0C)
        (caddar . g$6004$7lS0C)
        (cadadr . g$6003$7lS0C)
        (cadaar . g$6002$7lS0C)
        (caaddr . g$6001$7lS0C)
        (caadar . g$6000$7lS0C)
        (caaadr . g$5999$7lS0C)
        (caaaar . g$5998$7lS0C)
        (cdddr . g$5997$7lS0C)
        (cddar . g$5996$7lS0C)
        (cdadr . g$5995$7lS0C)
        (cdaar . g$5994$7lS0C)
        (caddr . g$5993$7lS0C)
        (cadar . g$5992$7lS0C)
        (caadr . g$5991$7lS0C)
        (caaar . g$5990$7lS0C)
        (cddr . g$5989$7lS0C)
        (cdar . g$5988$7lS0C)
        (cadr . g$5987$7lS0C)
        (caar . g$5986$7lS0C)
        (cdr . g$12013$7lS0C)
        (car . g$12012$7lS0C)
        (boolean? . g$12011$7lS0C)
        (boolean=? . g$6054$7lS0C)
        (atan . g$12010$7lS0C)
        (assertion-violation . g$12009$7lS0C)
        (asin . g$12008$7lS0C)
        (apply . g$12007$7lS0C)
        (append . g$12006$7lS0C)
        (angle . g$12005$7lS0C)
        (acos . g$12004$7lS0C)
        (abs . g$12003$7lS0C)
        (/ . g$12002$7lS0C)
        (* . g$12001$7lS0C)
        (- . g$12000$7lS0C)
        (+ . g$11999$7lS0C)
        (>= . g$11998$7lS0C)
        (> . g$11997$7lS0C)
        (= . g$11996$7lS0C)
        (<= . g$11995$7lS0C)
        (< . g$11994$7lS0C)
        (&no-nans . g$11962$7lS0C)
        (&no-infinities . g$11961$7lS0C)
        (&i/o-encoding . g$11960$7lS0C)
        (&i/o-decoding . g$11959$7lS0C)
        (&i/o-port . g$11958$7lS0C)
        (&i/o-file-does-not-exist . g$11957$7lS0C)
        (&i/o-file-already-exists . g$11956$7lS0C)
        (&i/o-file-is-read-only . g$11955$7lS0C)
        (&i/o-file-protection . g$11954$7lS0C)
        (&i/o-filename . g$11953$7lS0C)
        (&i/o-invalid-position . g$11952$7lS0C)
        (&i/o-write . g$11951$7lS0C)
        (&i/o-read . g$11950$7lS0C)
        (&i/o . g$11949$7lS0C)
        (&non-continuable . g$11948$7lS0C)
        (&undefined . g$11947$7lS0C)
        (&syntax . g$11946$7lS0C)
        (&lexical . g$11945$7lS0C)
        (&implementation-restriction . g$11944$7lS0C)
        (&who . g$11943$7lS0C)
        (&irritants . g$11942$7lS0C)
        (&assertion . g$11941$7lS0C)
        (&violation . g$11940$7lS0C)
        (&error . g$11939$7lS0C)
        (&serious . g$11938$7lS0C)
        (&warning . g$11937$7lS0C)
        (&message . g$11936$7lS0C)
        (&condition . g$11935$7lS0C)
        (define-condition-type . g$11934$7lS0C)
        (define-enumeration . g$11933$7lS0C)
        (define-record-type . g$11932$7lS0C)
        (parent-rtd . g$11931$7lS0C)
        (nongenerative . g$11930$7lS0C)
        (opaque . g$11929$7lS0C)
        (sealed . g$11928$7lS0C)
        (protocol . g$11927$7lS0C)
        (parent . g$11926$7lS0C)
        (immutable . g$11925$7lS0C)
        (mutable . g$11924$7lS0C)
        (fields . g$11923$7lS0C)
        (error-handling-mode . g$11922$7lS0C)
        (file-options . g$11921$7lS0C)
        (buffer-mode . g$11920$7lS0C)
        (eol-style . g$11919$7lS0C)
        (guard . g$11918$7lS0C)
        (unsyntax-splicing . g$11912$7lS0C)
        (unsyntax . g$11911$7lS0C)
        (unquote-splicing . g$11910$7lS0C)
        (unquote . g$11909$7lS0C)
        (_ . g$11908$7lS0C)
        (else . g$11907$7lS0C)
        (=> . g$11906$7lS0C)
        (... . g$11905$7lS0C)
        (assert . g$11904$7lS0C)
        (endianness . g$11903$7lS0C)
        (or . g$11900$7lS0C)
        (and . g$11899$7lS0C)
        (do . g$11898$7lS0C)
        (cond . g$11897$7lS0C)
        (let* . g$11896$7lS0C)
        (let . g$11895$7lS0C)
        (identifier-syntax . g$11894$7lS0C)
        (with-syntax . g$11893$7lS0C)
        (quasisyntax . g$11892$7lS0C)
        (quasiquote . g$11891$7lS0C)
        (syntax-rules . g$11890$7lS0C)
        (let-values . g$11886$7lS0C)
        (let*-values . g$11885$7lS0C)
        (record-constructor-descriptor . g$11884$7lS0C)
        (record-type-descriptor . g$11883$7lS0C)
        (case . g$11881$7lS0C)
        (unless . g$11879$7lS0C)
        (when . g$11878$7lS0C)
        (if . g$11877$7lS0C)
        (letrec* . g$11876$7lS0C)
        (letrec . g$11875$7lS0C)
        (case-lambda . g$11873$7lS0C)
        (lambda . g$11872$7lS0C)
        (syntax . g$11871$7lS0C)
        (syntax-case . g$11870$7lS0C)
        (quote . g$11869$7lS0C)
        (letrec-syntax . g$11867$7lS0C)
        (let-syntax . g$11866$7lS0C)
        (set! . g$11865$7lS0C)
        (begin . g$11861$7lS0C)
        (define-syntax . g$11859$7lS0C)
        (define . g$11858$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12476$7lS0C
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8847$7lS0C)
        (scheme-report-environment . g$8821$7lS0C)
        (quotient . g$6870$7lS0C)
        (null-environment . g$8820$7lS0C)
        (remainder . g$6871$7lS0C)
        (modulo . g$6872$7lS0C)
        (inexact->exact . g$12246$7lS0C)
        (force . g$6874$7lS0C)
        (exact->inexact . g$12245$7lS0C)
        (delay . g$11902$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12477$7lS0C
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11898$7lS0C)
        (unless . g$11879$7lS0C)
        (when . g$11878$7lS0C)
        (case-lambda . g$11873$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12478$7lS0C
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8823$7lS0C) (environment . g$8819$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12479$7lS0C
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12241$7lS0C) (set-car! . g$12240$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12480$7lS0C
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12243$7lS0C) (string-set! . g$12242$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12481$7lS0C
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12244$7lS0C) (command-line . g$11822$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12482$7lS0C
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8443$7lS0C)
        (identifier? . g$8842$7lS0C)
        (generate-temporaries . g$8831$7lS0C)
        (free-identifier=? . g$8832$7lS0C)
        (syntax->datum . g$8844$7lS0C)
        (datum->syntax . g$8843$7lS0C)
        (bound-identifier=? . g$8833$7lS0C)
        (syntax-violation . g$8841$7lS0C)
        (unsyntax-splicing . g$11912$7lS0C)
        (unsyntax . g$11911$7lS0C)
        (_ . g$11908$7lS0C)
        (... . g$11905$7lS0C)
        (with-syntax . g$11893$7lS0C)
        (quasisyntax . g$11892$7lS0C)
        (syntax . g$11871$7lS0C)
        (syntax-case . g$11870$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12483$7lS0C
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6527$7lS0C)
        (file-exists? . g$6526$7lS0C)
        (make-i/o-write-error . g$7197$7lS0C)
        (make-i/o-read-error . g$7183$7lS0C)
        (make-i/o-port-error . g$7302$7lS0C)
        (make-i/o-invalid-position-error . g$7212$7lS0C)
        (make-i/o-filename-error . g$7229$7lS0C)
        (make-i/o-file-protection-error . g$7245$7lS0C)
        (make-i/o-file-is-read-only-error . g$7259$7lS0C)
        (make-i/o-file-does-not-exist-error . g$7287$7lS0C)
        (make-i/o-file-already-exists-error . g$7273$7lS0C)
        (make-i/o-error . g$7169$7lS0C)
        (i/o-write-error? . g$7198$7lS0C)
        (i/o-read-error? . g$7184$7lS0C)
        (i/o-port-error? . g$7304$7lS0C)
        (i/o-invalid-position-error? . g$7214$7lS0C)
        (i/o-error-position . g$7215$7lS0C)
        (i/o-filename-error? . g$7231$7lS0C)
        (i/o-file-protection-error? . g$7246$7lS0C)
        (i/o-file-is-read-only-error? . g$7260$7lS0C)
        (i/o-file-does-not-exist-error? . g$7288$7lS0C)
        (i/o-file-already-exists-error? . g$7274$7lS0C)
        (i/o-error? . g$7170$7lS0C)
        (i/o-error-port . g$7305$7lS0C)
        (i/o-error-filename . g$7232$7lS0C)
        (&i/o-port . g$11958$7lS0C)
        (&i/o-file-does-not-exist . g$11957$7lS0C)
        (&i/o-file-already-exists . g$11956$7lS0C)
        (&i/o-file-is-read-only . g$11955$7lS0C)
        (&i/o-file-protection . g$11954$7lS0C)
        (&i/o-filename . g$11953$7lS0C)
        (&i/o-invalid-position . g$11952$7lS0C)
        (&i/o-write . g$11951$7lS0C)
        (&i/o-read . g$11950$7lS0C)
        (&i/o . g$11949$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12484$7lS0C
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12338$7lS0C)
        (vector-sort . g$12337$7lS0C)
        (list-sort . g$6891$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12485$7lS0C
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$12110$7lS0C)
        (vector? . g$12109$7lS0C)
        (vector-set! . g$12108$7lS0C)
        (vector-ref . g$12107$7lS0C)
        (vector-map . g$12106$7lS0C)
        (vector-length . g$12105$7lS0C)
        (vector-for-each . g$12104$7lS0C)
        (vector-fill! . g$12103$7lS0C)
        (vector->list . g$12102$7lS0C)
        (vector . g$12101$7lS0C)
        (values . g$12100$7lS0C)
        (truncate . g$12099$7lS0C)
        (tan . g$12098$7lS0C)
        (symbol? . g$12097$7lS0C)
        (symbol=? . g$6053$7lS0C)
        (symbol->string . g$12096$7lS0C)
        (substring . g$12095$7lS0C)
        (string? . g$12094$7lS0C)
        (string>? . g$6050$7lS0C)
        (string>=? . g$6052$7lS0C)
        (string=? . g$6048$7lS0C)
        (string<? . g$6049$7lS0C)
        (string<=? . g$6051$7lS0C)
        (string-ref . g$12093$7lS0C)
        (string-length . g$12092$7lS0C)
        (string-for-each . g$12091$7lS0C)
        (string-copy . g$12090$7lS0C)
        (string-append . g$12089$7lS0C)
        (string->symbol . g$12088$7lS0C)
        (string->number . g$12087$7lS0C)
        (string->list . g$12086$7lS0C)
        (string . g$12085$7lS0C)
        (sqrt . g$12084$7lS0C)
        (sin . g$12083$7lS0C)
        (round . g$12082$7lS0C)
        (reverse . g$12081$7lS0C)
        (real? . g$12080$7lS0C)
        (real-valued? . g$12079$7lS0C)
        (real-part . g$12078$7lS0C)
        (rationalize . g$6094$7lS0C)
        (rational? . g$12077$7lS0C)
        (rational-valued? . g$12076$7lS0C)
        (procedure? . g$12075$7lS0C)
        (positive? . g$12074$7lS0C)
        (pair? . g$12073$7lS0C)
        (odd? . g$12072$7lS0C)
        (numerator . g$12071$7lS0C)
        (number? . g$12070$7lS0C)
        (number->string . g$12069$7lS0C)
        (null? . g$12068$7lS0C)
        (not . g$12067$7lS0C)
        (negative? . g$12066$7lS0C)
        (nan? . g$12065$7lS0C)
        (min . g$12064$7lS0C)
        (max . g$12063$7lS0C)
        (map . g$5868$7lS0C)
        (make-vector . g$12062$7lS0C)
        (make-string . g$12061$7lS0C)
        (make-rectangular . g$12060$7lS0C)
        (make-polar . g$12059$7lS0C)
        (magnitude . g$12058$7lS0C)
        (log . g$12057$7lS0C)
        (list? . g$12056$7lS0C)
        (list-tail . g$5848$7lS0C)
        (list-ref . g$5849$7lS0C)
        (list->vector . g$12055$7lS0C)
        (list->string . g$12054$7lS0C)
        (list . g$12053$7lS0C)
        (length . g$12052$7lS0C)
        (lcm . g$12051$7lS0C)
        (integer? . g$12050$7lS0C)
        (integer-valued? . g$12049$7lS0C)
        (integer->char . g$12048$7lS0C)
        (infinite? . g$12047$7lS0C)
        (inexact? . g$12046$7lS0C)
        (inexact . g$12045$7lS0C)
        (imag-part . g$12044$7lS0C)
        (gcd . g$12043$7lS0C)
        (for-each . g$5869$7lS0C)
        (floor . g$12042$7lS0C)
        (finite? . g$12041$7lS0C)
        (expt . g$12040$7lS0C)
        (exp . g$12039$7lS0C)
        (exact? . g$12038$7lS0C)
        (exact-integer-sqrt . g$12037$7lS0C)
        (exact . g$12036$7lS0C)
        (even? . g$12035$7lS0C)
        (error . g$12034$7lS0C)
        (eqv? . g$12033$7lS0C)
        (equal? . g$12032$7lS0C)
        (eq? . g$12031$7lS0C)
        (dynamic-wind . g$12030$7lS0C)
        (div0-and-mod0 . g$12029$7lS0C)
        (mod0 . g$12028$7lS0C)
        (div0 . g$12027$7lS0C)
        (div-and-mod . g$12026$7lS0C)
        (mod . g$12025$7lS0C)
        (div . g$12024$7lS0C)
        (denominator . g$12023$7lS0C)
        (cos . g$12022$7lS0C)
        (cons . g$12021$7lS0C)
        (complex? . g$12020$7lS0C)
        (char? . g$12019$7lS0C)
        (char>? . g$6091$7lS0C)
        (char>=? . g$6093$7lS0C)
        (char=? . g$6089$7lS0C)
        (char<? . g$6090$7lS0C)
        (char<=? . g$6092$7lS0C)
        (char->integer . g$12018$7lS0C)
        (ceiling . g$12017$7lS0C)
        (call-with-values . g$12016$7lS0C)
        (call/cc . g$12015$7lS0C)
        (call-with-current-continuation . g$12014$7lS0C)
        (cddddr . g$6013$7lS0C)
        (cdddar . g$6012$7lS0C)
        (cddadr . g$6011$7lS0C)
        (cddaar . g$6010$7lS0C)
        (cdaddr . g$6009$7lS0C)
        (cdadar . g$6008$7lS0C)
        (cdaadr . g$6007$7lS0C)
        (cdaaar . g$6006$7lS0C)
        (cadddr . g$6005$7lS0C)
        (caddar . g$6004$7lS0C)
        (cadadr . g$6003$7lS0C)
        (cadaar . g$6002$7lS0C)
        (caaddr . g$6001$7lS0C)
        (caadar . g$6000$7lS0C)
        (caaadr . g$5999$7lS0C)
        (caaaar . g$5998$7lS0C)
        (cdddr . g$5997$7lS0C)
        (cddar . g$5996$7lS0C)
        (cdadr . g$5995$7lS0C)
        (cdaar . g$5994$7lS0C)
        (caddr . g$5993$7lS0C)
        (cadar . g$5992$7lS0C)
        (caadr . g$5991$7lS0C)
        (caaar . g$5990$7lS0C)
        (cddr . g$5989$7lS0C)
        (cdar . g$5988$7lS0C)
        (cadr . g$5987$7lS0C)
        (caar . g$5986$7lS0C)
        (cdr . g$12013$7lS0C)
        (car . g$12012$7lS0C)
        (boolean? . g$12011$7lS0C)
        (boolean=? . g$6054$7lS0C)
        (atan . g$12010$7lS0C)
        (assertion-violation . g$12009$7lS0C)
        (asin . g$12008$7lS0C)
        (apply . g$12007$7lS0C)
        (append . g$12006$7lS0C)
        (angle . g$12005$7lS0C)
        (acos . g$12004$7lS0C)
        (abs . g$12003$7lS0C)
        (/ . g$12002$7lS0C)
        (* . g$12001$7lS0C)
        (- . g$12000$7lS0C)
        (+ . g$11999$7lS0C)
        (>= . g$11998$7lS0C)
        (> . g$11997$7lS0C)
        (= . g$11996$7lS0C)
        (<= . g$11995$7lS0C)
        (< . g$11994$7lS0C)
        (unquote-splicing . g$11910$7lS0C)
        (unquote . g$11909$7lS0C)
        (_ . g$11908$7lS0C)
        (else . g$11907$7lS0C)
        (=> . g$11906$7lS0C)
        (... . g$11905$7lS0C)
        (assert . g$11904$7lS0C)
        (or . g$11900$7lS0C)
        (and . g$11899$7lS0C)
        (cond . g$11897$7lS0C)
        (let* . g$11896$7lS0C)
        (let . g$11895$7lS0C)
        (identifier-syntax . g$11894$7lS0C)
        (quasiquote . g$11891$7lS0C)
        (syntax-rules . g$11890$7lS0C)
        (let-values . g$11886$7lS0C)
        (let*-values . g$11885$7lS0C)
        (case . g$11881$7lS0C)
        (if . g$11877$7lS0C)
        (letrec* . g$11876$7lS0C)
        (letrec . g$11875$7lS0C)
        (lambda . g$11872$7lS0C)
        (quote . g$11869$7lS0C)
        (letrec-syntax . g$11867$7lS0C)
        (let-syntax . g$11866$7lS0C)
        (set! . g$11865$7lS0C)
        (begin . g$11861$7lS0C)
        (define-syntax . g$11859$7lS0C)
        (define . g$11858$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12486$7lS0C
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5873$7lS0C)
        (remv . g$5874$7lS0C)
        (remp . g$5854$7lS0C)
        (remq . g$5875$7lS0C)
        (partition . g$5853$7lS0C)
        (memv . g$5861$7lS0C)
        (memq . g$5860$7lS0C)
        (memp . g$5863$7lS0C)
        (member . g$5862$7lS0C)
        (exists . g$5867$7lS0C)
        (for-all . g$5866$7lS0C)
        (fold-right . g$5872$7lS0C)
        (fold-left . g$5871$7lS0C)
        (find . g$5852$7lS0C)
        (filter . g$5855$7lS0C)
        (cons* . g$5870$7lS0C)
        (assv . g$5857$7lS0C)
        (assq . g$5856$7lS0C)
        (assp . g$5859$7lS0C)
        (assoc . g$5858$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12487$7lS0C
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7369$7lS0C)
        (call-with-input-file . g$7368$7lS0C)
        (write-char . g$12324$7lS0C)
        (write . g$12323$7lS0C)
        (with-output-to-file . g$7367$7lS0C)
        (with-input-from-file . g$7366$7lS0C)
        (read-char . g$12322$7lS0C)
        (read . g$12321$7lS0C)
        (peek-char . g$12320$7lS0C)
        (open-output-file . g$12319$7lS0C)
        (open-input-file . g$12318$7lS0C)
        (newline . g$12317$7lS0C)
        (display . g$12316$7lS0C)
        (close-output-port . g$12315$7lS0C)
        (close-input-port . g$12314$7lS0C)
        (eof-object? . g$12313$7lS0C)
        (eof-object . g$12312$7lS0C)
        (current-error-port . g$12311$7lS0C)
        (current-output-port . g$12310$7lS0C)
        (current-input-port . g$12309$7lS0C)
        (output-port? . g$12308$7lS0C)
        (input-port? . g$12307$7lS0C)
        (make-i/o-write-error . g$7197$7lS0C)
        (make-i/o-read-error . g$7183$7lS0C)
        (make-i/o-port-error . g$7302$7lS0C)
        (make-i/o-invalid-position-error . g$7212$7lS0C)
        (make-i/o-filename-error . g$7229$7lS0C)
        (make-i/o-file-protection-error . g$7245$7lS0C)
        (make-i/o-file-is-read-only-error . g$7259$7lS0C)
        (make-i/o-file-does-not-exist-error . g$7287$7lS0C)
        (make-i/o-file-already-exists-error . g$7273$7lS0C)
        (make-i/o-error . g$7169$7lS0C)
        (i/o-write-error? . g$7198$7lS0C)
        (i/o-read-error? . g$7184$7lS0C)
        (i/o-port-error? . g$7304$7lS0C)
        (i/o-invalid-position-error? . g$7214$7lS0C)
        (i/o-error-position . g$7215$7lS0C)
        (i/o-filename-error? . g$7231$7lS0C)
        (i/o-file-protection-error? . g$7246$7lS0C)
        (i/o-file-is-read-only-error? . g$7260$7lS0C)
        (i/o-file-does-not-exist-error? . g$7288$7lS0C)
        (i/o-file-already-exists-error? . g$7274$7lS0C)
        (i/o-error? . g$7170$7lS0C)
        (i/o-error-port . g$7305$7lS0C)
        (i/o-error-filename . g$7232$7lS0C)
        (&i/o-port . g$11958$7lS0C)
        (&i/o-file-does-not-exist . g$11957$7lS0C)
        (&i/o-file-already-exists . g$11956$7lS0C)
        (&i/o-file-is-read-only . g$11955$7lS0C)
        (&i/o-file-protection . g$11954$7lS0C)
        (&i/o-filename . g$11953$7lS0C)
        (&i/o-invalid-position . g$11952$7lS0C)
        (&i/o-write . g$11951$7lS0C)
        (&i/o-read . g$11950$7lS0C)
        (&i/o . g$11949$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12488$7lS0C
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12267$7lS0C)
        (utf32->string . g$12231$7lS0C)
        (utf16->string . g$12230$7lS0C)
        (utf8->string . g$12229$7lS0C)
        (uint-list->bytevector . g$12228$7lS0C)
        (u8-list->bytevector . g$12227$7lS0C)
        (string->utf8 . g$12226$7lS0C)
        (string->utf32 . g$12225$7lS0C)
        (string->utf16 . g$12224$7lS0C)
        (sint-list->bytevector . g$12223$7lS0C)
        (native-endianness . g$6533$7lS0C)
        (bytevector? . g$12222$7lS0C)
        (bytevector=? . g$12221$7lS0C)
        (bytevector-uint-set! . g$12220$7lS0C)
        (bytevector-uint-ref . g$12219$7lS0C)
        (bytevector-u8-set! . g$12218$7lS0C)
        (bytevector-u8-ref . g$12217$7lS0C)
        (bytevector-u64-set! . g$6554$7lS0C)
        (bytevector-u64-ref . g$6550$7lS0C)
        (bytevector-u64-native-set! . g$6556$7lS0C)
        (bytevector-u64-native-ref . g$6552$7lS0C)
        (bytevector-u32-set! . g$6546$7lS0C)
        (bytevector-u32-ref . g$6542$7lS0C)
        (bytevector-u32-native-set! . g$6548$7lS0C)
        (bytevector-u32-native-ref . g$6544$7lS0C)
        (bytevector-u16-set! . g$6538$7lS0C)
        (bytevector-u16-ref . g$6534$7lS0C)
        (bytevector-u16-native-set! . g$6540$7lS0C)
        (bytevector-u16-native-ref . g$6536$7lS0C)
        (bytevector-sint-set! . g$12216$7lS0C)
        (bytevector-sint-ref . g$12215$7lS0C)
        (bytevector-s8-set! . g$12214$7lS0C)
        (bytevector-s8-ref . g$12213$7lS0C)
        (bytevector-s64-set! . g$6555$7lS0C)
        (bytevector-s64-ref . g$6551$7lS0C)
        (bytevector-s64-native-set! . g$6557$7lS0C)
        (bytevector-s64-native-ref . g$6553$7lS0C)
        (bytevector-s32-set! . g$6547$7lS0C)
        (bytevector-s32-ref . g$6543$7lS0C)
        (bytevector-s32-native-set! . g$6549$7lS0C)
        (bytevector-s32-native-ref . g$6545$7lS0C)
        (bytevector-s16-set! . g$6539$7lS0C)
        (bytevector-s16-ref . g$6535$7lS0C)
        (bytevector-s16-native-set! . g$6541$7lS0C)
        (bytevector-s16-native-ref . g$6537$7lS0C)
        (bytevector-length . g$12212$7lS0C)
        (bytevector-ieee-single-set! . g$12211$7lS0C)
        (bytevector-ieee-single-ref . g$12210$7lS0C)
        (bytevector-ieee-single-native-set! . g$6560$7lS0C)
        (bytevector-ieee-single-native-ref . g$6558$7lS0C)
        (bytevector-ieee-double-set! . g$12209$7lS0C)
        (bytevector-ieee-double-ref . g$12208$7lS0C)
        (bytevector-ieee-double-native-set! . g$6561$7lS0C)
        (bytevector-ieee-double-native-ref . g$6559$7lS0C)
        (bytevector-fill! . g$12207$7lS0C)
        (bytevector-copy! . g$12206$7lS0C)
        (bytevector-copy . g$12205$7lS0C)
        (bytevector->uint-list . g$12204$7lS0C)
        (bytevector->u8-list . g$12203$7lS0C)
        (bytevector->sint-list . g$12202$7lS0C)
        (endianness . g$11903$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12489$7lS0C
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12374$7lS0C)
        (string-titlecase . g$12373$7lS0C)
        (string-normalize-nfkd . g$12372$7lS0C)
        (string-normalize-nfkc . g$12371$7lS0C)
        (string-normalize-nfd . g$12370$7lS0C)
        (string-normalize-nfc . g$12369$7lS0C)
        (string-foldcase . g$12368$7lS0C)
        (string-downcase . g$12367$7lS0C)
        (string-ci>? . g$6951$7lS0C)
        (string-ci>=? . g$6953$7lS0C)
        (string-ci=? . g$6949$7lS0C)
        (string-ci<? . g$6950$7lS0C)
        (string-ci<=? . g$6952$7lS0C)
        (char-whitespace? . g$12366$7lS0C)
        (char-upper-case? . g$12365$7lS0C)
        (char-title-case? . g$12364$7lS0C)
        (char-numeric? . g$12363$7lS0C)
        (char-lower-case? . g$12362$7lS0C)
        (char-general-category . g$12361$7lS0C)
        (char-upcase . g$12360$7lS0C)
        (char-titlecase . g$12359$7lS0C)
        (char-foldcase . g$12358$7lS0C)
        (char-downcase . g$12357$7lS0C)
        (char-ci>? . g$6990$7lS0C)
        (char-ci>=? . g$6992$7lS0C)
        (char-ci=? . g$6988$7lS0C)
        (char-ci<? . g$6989$7lS0C)
        (char-ci<=? . g$6991$7lS0C)
        (char-alphabetic? . g$12356$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12490$7lS0C
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12239$7lS0C)
        (raise-continuable . g$12238$7lS0C)
        (raise . g$12237$7lS0C)
        (guard . g$11918$7lS0C)
        (else . g$11907$7lS0C)
        (=> . g$11906$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12491$7lS0C
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7052$7lS0C)
        (bitwise-reverse-bit-field . g$12120$7lS0C)
        (bitwise-length . g$12119$7lS0C)
        (bitwise-if . g$7046$7lS0C)
        (bitwise-first-bit-set . g$12118$7lS0C)
        (bitwise-copy-bit-field . g$7049$7lS0C)
        (bitwise-copy-bit . g$7047$7lS0C)
        (bitwise-bit-set? . g$12117$7lS0C)
        (bitwise-bit-field . g$7048$7lS0C)
        (bitwise-bit-count . g$12116$7lS0C)
        (bitwise-xor . g$12115$7lS0C)
        (bitwise-ior . g$12114$7lS0C)
        (bitwise-and . g$12113$7lS0C)
        (bitwise-not . g$12112$7lS0C)
        (bitwise-arithmetic-shift-right . g$7051$7lS0C)
        (bitwise-arithmetic-shift-left . g$7050$7lS0C)
        (bitwise-arithmetic-shift . g$12111$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12492$7lS0C
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12155$7lS0C)
        (fxxor . g$12154$7lS0C)
        (fxrotate-bit-field . g$7087$7lS0C)
        (fxreverse-bit-field . g$12153$7lS0C)
        (fxpositive? . g$12152$7lS0C)
        (fxodd? . g$12151$7lS0C)
        (fxnot . g$12150$7lS0C)
        (fxnegative? . g$12149$7lS0C)
        (fxmod0 . g$12148$7lS0C)
        (fxmod . g$12147$7lS0C)
        (fxmin . g$12146$7lS0C)
        (fxmax . g$12145$7lS0C)
        (fxlength . g$12144$7lS0C)
        (fxior . g$12143$7lS0C)
        (fxif . g$7081$7lS0C)
        (fxfirst-bit-set . g$12142$7lS0C)
        (fxeven? . g$12141$7lS0C)
        (fxdiv0-and-mod0 . g$12140$7lS0C)
        (fxdiv0 . g$12139$7lS0C)
        (fxdiv-and-mod . g$12138$7lS0C)
        (fxdiv . g$12137$7lS0C)
        (fxcopy-bit-field . g$7084$7lS0C)
        (fxcopy-bit . g$7082$7lS0C)
        (fxbit-set? . g$12136$7lS0C)
        (fxbit-field . g$7083$7lS0C)
        (fxbit-count . g$12135$7lS0C)
        (fxarithmetic-shift-right . g$7086$7lS0C)
        (fxarithmetic-shift-left . g$7085$7lS0C)
        (fxarithmetic-shift . g$12134$7lS0C)
        (fxand . g$12133$7lS0C)
        (fx>? . g$12132$7lS0C)
        (fx>=? . g$12131$7lS0C)
        (fx=? . g$12130$7lS0C)
        (fx<? . g$12129$7lS0C)
        (fx<=? . g$12128$7lS0C)
        (fx-/carry . g$7079$7lS0C)
        (fx- . g$12127$7lS0C)
        (fx+/carry . g$7080$7lS0C)
        (fx+ . g$12126$7lS0C)
        (fx*/carry . g$7078$7lS0C)
        (fx* . g$12125$7lS0C)
        (greatest-fixnum . g$12124$7lS0C)
        (least-fixnum . g$12123$7lS0C)
        (fixnum-width . g$12122$7lS0C)
        (fixnum? . g$12121$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12493$7lS0C
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7155$7lS0C)
        (no-infinities-violation? . g$7141$7lS0C)
        (make-no-nans-violation . g$7154$7lS0C)
        (make-no-infinities-violation . g$7140$7lS0C)
        (real->flonum . g$12201$7lS0C)
        (flzero? . g$12200$7lS0C)
        (fltruncate . g$12199$7lS0C)
        (fltan . g$12198$7lS0C)
        (flsqrt . g$12197$7lS0C)
        (flsin . g$12196$7lS0C)
        (flround . g$12195$7lS0C)
        (flpositive? . g$12194$7lS0C)
        (flonum? . g$12193$7lS0C)
        (flodd? . g$12192$7lS0C)
        (flnumerator . g$12191$7lS0C)
        (flnegative? . g$12190$7lS0C)
        (flnan? . g$12189$7lS0C)
        (flmod0 . g$12188$7lS0C)
        (flmod . g$12187$7lS0C)
        (flmin . g$12186$7lS0C)
        (flmax . g$12185$7lS0C)
        (fllog . g$12184$7lS0C)
        (flinteger? . g$12183$7lS0C)
        (flinfinite? . g$12182$7lS0C)
        (flfloor . g$12181$7lS0C)
        (flfinite? . g$12180$7lS0C)
        (flexpt . g$12179$7lS0C)
        (flexp . g$12178$7lS0C)
        (fleven? . g$12177$7lS0C)
        (fldiv0-and-mod0 . g$12176$7lS0C)
        (fldiv0 . g$12175$7lS0C)
        (fldiv-and-mod . g$12174$7lS0C)
        (fldiv . g$12173$7lS0C)
        (fldenominator . g$12172$7lS0C)
        (flcos . g$12171$7lS0C)
        (flceiling . g$12170$7lS0C)
        (flatan . g$12169$7lS0C)
        (flasin . g$12168$7lS0C)
        (flacos . g$12167$7lS0C)
        (flabs . g$12166$7lS0C)
        (fl>? . g$12165$7lS0C)
        (fl>=? . g$12164$7lS0C)
        (fl=? . g$12163$7lS0C)
        (fl<? . g$12162$7lS0C)
        (fl<=? . g$12161$7lS0C)
        (fl/ . g$12160$7lS0C)
        (fl- . g$12159$7lS0C)
        (fl+ . g$12158$7lS0C)
        (fl* . g$12157$7lS0C)
        (fixnum->flonum . g$12156$7lS0C)
        (&no-nans . g$11962$7lS0C)
        (&no-infinities . g$11961$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12494$7lS0C
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12336$7lS0C)
        (string-ci-hash . g$12335$7lS0C)
        (string-hash . g$12334$7lS0C)
        (equal-hash . g$12333$7lS0C)
        (hashtable-equivalence-function . g$12332$7lS0C)
        (make-hashtable . g$12331$7lS0C)
        (hashtable-hash-function . g$12330$7lS0C)
        (make-eqv-hashtable . g$6495$7lS0C)
        (make-eq-hashtable . g$6494$7lS0C)
        (hashtable? . g$12329$7lS0C)
        (hashtable-update! . g$6501$7lS0C)
        (hashtable-size . g$6496$7lS0C)
        (hashtable-set! . g$6498$7lS0C)
        (hashtable-ref . g$6497$7lS0C)
        (hashtable-mutable? . g$12328$7lS0C)
        (hashtable-keys . g$12327$7lS0C)
        (hashtable-entries . g$12326$7lS0C)
        (hashtable-delete! . g$6499$7lS0C)
        (hashtable-copy . g$12325$7lS0C)
        (hashtable-contains? . g$6500$7lS0C)
        (hashtable-clear! . g$6502$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12495$7lS0C
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12313$7lS0C)
        (eof-object . g$12312$7lS0C)
        (current-error-port . g$12311$7lS0C)
        (current-output-port . g$12310$7lS0C)
        (current-input-port . g$12309$7lS0C)
        (output-port? . g$12308$7lS0C)
        (input-port? . g$12307$7lS0C)
        (utf-8-codec . g$12306$7lS0C)
        (utf-16-codec . g$12305$7lS0C)
        (transcoder-error-handling-mode . g$12304$7lS0C)
        (transcoder-eol-style . g$12303$7lS0C)
        (transcoder-codec . g$12302$7lS0C)
        (transcoded-port . g$12301$7lS0C)
        (textual-port? . g$12300$7lS0C)
        (string->bytevector . g$12299$7lS0C)
        (standard-output-port . g$12298$7lS0C)
        (standard-input-port . g$12297$7lS0C)
        (standard-error-port . g$12296$7lS0C)
        (set-port-position! . g$12295$7lS0C)
        (put-u8 . g$12294$7lS0C)
        (put-string . g$12293$7lS0C)
        (put-datum . g$12292$7lS0C)
        (put-char . g$12291$7lS0C)
        (put-bytevector . g$12290$7lS0C)
        (port? . g$7342$7lS0C)
        (port-transcoder . g$12289$7lS0C)
        (port-position . g$12288$7lS0C)
        (port-has-set-port-position!? . g$12287$7lS0C)
        (port-has-port-position? . g$12286$7lS0C)
        (port-eof? . g$12285$7lS0C)
        (output-port-buffer-mode . g$12284$7lS0C)
        (open-string-output-port . g$7341$7lS0C)
        (open-string-input-port . g$12283$7lS0C)
        (open-file-output-port . g$12282$7lS0C)
        (open-file-input/output-port . g$12281$7lS0C)
        (open-file-input-port . g$12280$7lS0C)
        (open-bytevector-output-port . g$12279$7lS0C)
        (open-bytevector-input-port . g$12278$7lS0C)
        (native-transcoder . g$12277$7lS0C)
        (native-eol-style . g$12276$7lS0C)
        (make-transcoder . g$12275$7lS0C)
        (latin-1-codec . g$12274$7lS0C)
        (make-i/o-write-error . g$7197$7lS0C)
        (make-i/o-read-error . g$7183$7lS0C)
        (make-i/o-port-error . g$7302$7lS0C)
        (make-i/o-invalid-position-error . g$7212$7lS0C)
        (make-i/o-filename-error . g$7229$7lS0C)
        (make-i/o-file-protection-error . g$7245$7lS0C)
        (make-i/o-file-is-read-only-error . g$7259$7lS0C)
        (make-i/o-file-does-not-exist-error . g$7287$7lS0C)
        (make-i/o-file-already-exists-error . g$7273$7lS0C)
        (make-i/o-error . g$7169$7lS0C)
        (make-i/o-encoding-error . g$7333$7lS0C)
        (make-i/o-decoding-error . g$7318$7lS0C)
        (make-custom-textual-output-port . g$12273$7lS0C)
        (make-custom-textual-input/output-port . g$12272$7lS0C)
        (make-custom-textual-input-port . g$12271$7lS0C)
        (make-custom-binary-output-port . g$12270$7lS0C)
        (make-custom-binary-input/output-port . g$12269$7lS0C)
        (make-custom-binary-input-port . g$12268$7lS0C)
        (lookahead-u8 . g$12266$7lS0C)
        (lookahead-char . g$12265$7lS0C)
        (i/o-write-error? . g$7198$7lS0C)
        (i/o-read-error? . g$7184$7lS0C)
        (i/o-port-error? . g$7304$7lS0C)
        (i/o-invalid-position-error? . g$7214$7lS0C)
        (i/o-error-position . g$7215$7lS0C)
        (i/o-filename-error? . g$7231$7lS0C)
        (i/o-file-protection-error? . g$7246$7lS0C)
        (i/o-file-is-read-only-error? . g$7260$7lS0C)
        (i/o-file-does-not-exist-error? . g$7288$7lS0C)
        (i/o-file-already-exists-error? . g$7274$7lS0C)
        (i/o-error? . g$7170$7lS0C)
        (i/o-error-port . g$7305$7lS0C)
        (i/o-error-filename . g$7232$7lS0C)
        (i/o-encoding-error? . g$7335$7lS0C)
        (i/o-encoding-error-char . g$7336$7lS0C)
        (i/o-decoding-error? . g$7319$7lS0C)
        (get-u8 . g$12264$7lS0C)
        (get-string-n! . g$12263$7lS0C)
        (get-string-n . g$12262$7lS0C)
        (get-string-all . g$12261$7lS0C)
        (get-line . g$12260$7lS0C)
        (get-datum . g$12259$7lS0C)
        (get-char . g$12258$7lS0C)
        (get-bytevector-some . g$12257$7lS0C)
        (get-bytevector-n! . g$12256$7lS0C)
        (get-bytevector-n . g$12255$7lS0C)
        (get-bytevector-all . g$12254$7lS0C)
        (flush-output-port . g$12253$7lS0C)
        (close-port . g$12252$7lS0C)
        (call-with-string-output-port . g$7343$7lS0C)
        (call-with-port . g$12251$7lS0C)
        (call-with-bytevector-output-port . g$12250$7lS0C)
        (bytevector->string . g$12249$7lS0C)
        (buffer-mode? . g$12248$7lS0C)
        (binary-port? . g$12247$7lS0C)
        (&i/o-encoding . g$11960$7lS0C)
        (&i/o-decoding . g$11959$7lS0C)
        (&i/o-port . g$11958$7lS0C)
        (&i/o-file-does-not-exist . g$11957$7lS0C)
        (&i/o-file-already-exists . g$11956$7lS0C)
        (&i/o-file-is-read-only . g$11955$7lS0C)
        (&i/o-file-protection . g$11954$7lS0C)
        (&i/o-filename . g$11953$7lS0C)
        (&i/o-invalid-position . g$11952$7lS0C)
        (&i/o-write . g$11951$7lS0C)
        (&i/o-read . g$11950$7lS0C)
        (&i/o . g$11949$7lS0C)
        (error-handling-mode . g$11922$7lS0C)
        (file-options . g$11921$7lS0C)
        (buffer-mode . g$11920$7lS0C)
        (eol-style . g$11919$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12496$7lS0C
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7427$7lS0C)
        (enum-set=? . g$7434$7lS0C)
        (enum-set-universe . g$7428$7lS0C)
        (enum-set-union . g$7435$7lS0C)
        (enum-set-subset? . g$7433$7lS0C)
        (enum-set-projection . g$7439$7lS0C)
        (enum-set-member? . g$7432$7lS0C)
        (enum-set-intersection . g$7436$7lS0C)
        (enum-set-indexer . g$7429$7lS0C)
        (enum-set-difference . g$7437$7lS0C)
        (enum-set-constructor . g$7430$7lS0C)
        (enum-set-complement . g$7438$7lS0C)
        (enum-set->list . g$7431$7lS0C)
        (define-enumeration . g$11933$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12497$7lS0C
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6781$7lS0C)
        (warning? . g$6692$7lS0C)
        (violation? . g$6734$7lS0C)
        (undefined-violation? . g$6858$7lS0C)
        (syntax-violation? . g$6842$7lS0C)
        (syntax-violation-subform . g$6844$7lS0C)
        (syntax-violation-form . g$6843$7lS0C)
        (syntax-violation . g$8841$7lS0C)
        (simple-conditions . g$12236$7lS0C)
        (serious-condition? . g$6706$7lS0C)
        (non-continuable-violation? . g$6796$7lS0C)
        (message-condition? . g$6677$7lS0C)
        (make-who-condition . g$6779$7lS0C)
        (make-warning . g$6691$7lS0C)
        (make-violation . g$6733$7lS0C)
        (make-undefined-violation . g$6857$7lS0C)
        (make-syntax-violation . g$6839$7lS0C)
        (make-serious-condition . g$6705$7lS0C)
        (make-non-continuable-violation . g$6795$7lS0C)
        (make-message-condition . g$6675$7lS0C)
        (make-lexical-violation . g$6823$7lS0C)
        (make-irritants-condition . g$6762$7lS0C)
        (make-implementation-restriction-violation . g$6809$7lS0C)
        (make-error . g$6719$7lS0C)
        (make-assertion-violation . g$6747$7lS0C)
        (lexical-violation? . g$6824$7lS0C)
        (irritants-condition? . g$6764$7lS0C)
        (implementation-restriction-violation? . g$6810$7lS0C)
        (error? . g$6720$7lS0C)
        (condition-who . g$6782$7lS0C)
        (condition-predicate . g$12235$7lS0C)
        (condition-message . g$6678$7lS0C)
        (condition-irritants . g$6765$7lS0C)
        (condition-accessor . g$12234$7lS0C)
        (condition . g$12233$7lS0C)
        (assertion-violation? . g$6748$7lS0C)
        (condition? . g$12232$7lS0C)
        (&non-continuable . g$11948$7lS0C)
        (&undefined . g$11947$7lS0C)
        (&syntax . g$11946$7lS0C)
        (&lexical . g$11945$7lS0C)
        (&implementation-restriction . g$11944$7lS0C)
        (&who . g$11943$7lS0C)
        (&irritants . g$11942$7lS0C)
        (&assertion . g$11941$7lS0C)
        (&violation . g$11940$7lS0C)
        (&error . g$11939$7lS0C)
        (&serious . g$11938$7lS0C)
        (&warning . g$11937$7lS0C)
        (&message . g$11936$7lS0C)
        (&condition . g$11935$7lS0C)
        (define-condition-type . g$11934$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12498$7lS0C
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12348$7lS0C)
        (record-type-uid . g$12347$7lS0C)
        (record-type-sealed? . g$12346$7lS0C)
        (record-type-parent . g$12345$7lS0C)
        (record-type-opaque? . g$12344$7lS0C)
        (record-type-name . g$12343$7lS0C)
        (record-type-generative? . g$12342$7lS0C)
        (record-type-field-names . g$12341$7lS0C)
        (record-rtd . g$12340$7lS0C)
        (record-field-mutable? . g$12339$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12499$7lS0C
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12355$7lS0C)
        (record-predicate . g$12354$7lS0C)
        (record-mutator . g$12353$7lS0C)
        (record-constructor . g$12352$7lS0C)
        (record-accessor . g$12351$7lS0C)
        (make-record-type-descriptor . g$12350$7lS0C)
        (make-record-constructor-descriptor . g$12349$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12500$7lS0C
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11932$7lS0C)
        (parent-rtd . g$11931$7lS0C)
        (nongenerative . g$11930$7lS0C)
        (opaque . g$11929$7lS0C)
        (sealed . g$11928$7lS0C)
        (protocol . g$11927$7lS0C)
        (parent . g$11926$7lS0C)
        (immutable . g$11925$7lS0C)
        (mutable . g$11924$7lS0C)
        (fields . g$11923$7lS0C)
        (record-constructor-descriptor . g$11884$7lS0C)
        (record-type-descriptor . g$11883$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7126$7lS0C
      'g$12501$7lS0C
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8713$7lS0C)
        (&no-nans-rcd . g$12465$7lS0C)
        (&no-nans-rtd . g$12464$7lS0C)
        (&no-infinities-rcd . g$12463$7lS0C)
        (&no-infinities-rtd . g$12462$7lS0C)
        (&i/o-encoding-rcd . g$12461$7lS0C)
        (&i/o-encoding-rtd . g$12460$7lS0C)
        (&i/o-decoding-rcd . g$12459$7lS0C)
        (&i/o-decoding-rtd . g$12458$7lS0C)
        (&i/o-port-rcd . g$12457$7lS0C)
        (&i/o-port-rtd . g$12456$7lS0C)
        (&i/o-file-does-not-exist-rcd . g$12455$7lS0C)
        (&i/o-file-does-not-exist-rtd . g$12454$7lS0C)
        (&i/o-file-already-exists-rcd . g$12453$7lS0C)
        (&i/o-file-already-exists-rtd . g$12452$7lS0C)
        (&i/o-file-is-read-only-rcd . g$12451$7lS0C)
        (&i/o-file-is-read-only-rtd . g$12450$7lS0C)
        (&i/o-file-protection-rcd . g$12449$7lS0C)
        (&i/o-file-protection-rtd . g$12448$7lS0C)
        (&i/o-filename-rcd . g$12447$7lS0C)
        (&i/o-filename-rtd . g$12446$7lS0C)
        (&i/o-invalid-position-rcd . g$12445$7lS0C)
        (&i/o-invalid-position-rtd . g$12444$7lS0C)
        (&i/o-write-rcd . g$12443$7lS0C)
        (&i/o-write-rtd . g$12442$7lS0C)
        (&i/o-read-rcd . g$12441$7lS0C)
        (&i/o-read-rtd . g$12440$7lS0C)
        (&i/o-rcd . g$12439$7lS0C)
        (&i/o-rtd . g$12438$7lS0C)
        (&undefined-rcd . g$12437$7lS0C)
        (&undefined-rtd . g$12436$7lS0C)
        (&syntax-rcd . g$12435$7lS0C)
        (&syntax-rtd . g$12434$7lS0C)
        (&lexical-rcd . g$12433$7lS0C)
        (&lexical-rtd . g$12432$7lS0C)
        (&implementation-restriction-rcd . g$12431$7lS0C)
        (&implementation-restriction-rtd . g$12430$7lS0C)
        (&non-continuable-rcd . g$12429$7lS0C)
        (&non-continuable-rtd . g$12428$7lS0C)
        (&who-rcd . g$12427$7lS0C)
        (&who-rtd . g$12426$7lS0C)
        (&irritants-rcd . g$12425$7lS0C)
        (&irritants-rtd . g$12424$7lS0C)
        (&assertion-rcd . g$12423$7lS0C)
        (&assertion-rtd . g$12422$7lS0C)
        (&violation-rcd . g$12421$7lS0C)
        (&violation-rtd . g$12420$7lS0C)
        (&error-rcd . g$12419$7lS0C)
        (&error-rtd . g$12418$7lS0C)
        (&serious-rcd . g$12417$7lS0C)
        (&serious-rtd . g$12416$7lS0C)
        (&warning-rcd . g$12415$7lS0C)
        (&warning-rtd . g$12414$7lS0C)
        (&message-rcd . g$12413$7lS0C)
        (&message-rtd . g$12412$7lS0C)
        (&condition-rcd . g$12411$7lS0C)
        (&condition-rtd . g$12410$7lS0C)
        (library-letrec* . g$12409$7lS0C)
        (annotation-stripped . g$12408$7lS0C)
        (annotation-source . g$12407$7lS0C)
        (annotation-expression . g$12406$7lS0C)
        (annotation? . g$12405$7lS0C)
        (read-annotated . g$12404$7lS0C)
        (tanh . g$12403$7lS0C)
        (cosh . g$12402$7lS0C)
        (sinh . g$12401$7lS0C)
        (make-guid . g$12400$7lS0C)
        (unspecified? . g$12399$7lS0C)
        (make-trace . g$12398$7lS0C)
        (make-list . g$5851$7lS0C)
        (last-pair . g$5850$7lS0C)
        (load-r5rs . g$12397$7lS0C)
        (license . g$12396$7lS0C)
        (stacktrace . g$12395$7lS0C)
        (ironscheme-build . g$11826$7lS0C)
        (define-clr-class-internal . g$12394$7lS0C)
        (clr-field-set!-internal . g$12393$7lS0C)
        (clr-field-get-internal . g$12392$7lS0C)
        (clr-cast-internal . g$12391$7lS0C)
        (clr-call-internal . g$12390$7lS0C)
        (clr-new-internal . g$12389$7lS0C)
        (clr-new-array-internal . g$12388$7lS0C)
        (clr-is-internal . g$12387$7lS0C)
        (clr-reference-internal . g$12386$7lS0C)
        (clr-using-internal . g$12385$7lS0C)
        (syntax-error . g$8838$7lS0C)
        (syntax-dispatch . g$8708$7lS0C)
        (compile-core . g$12384$7lS0C)
        (eval-core . g$12383$7lS0C)
        (set-symbol-value! . g$12382$7lS0C)
        (symbol-value . g$12381$7lS0C)
        (ungensym . g$12380$7lS0C)
        (gensym . g$12379$7lS0C)
        (void . g$12378$7lS0C)
        (load-serialized-library . g$12377$7lS0C)
        (serialize-library . g$12376$7lS0C)
        (compile-system-libraries . g$11828$7lS0C)
        (compile->closure . g$11830$7lS0C)
        (compile . g$11829$7lS0C)
        (load . g$11825$7lS0C)
        (interaction-environment . g$8847$7lS0C)
        (char-ready? . g$12375$7lS0C)
        (string-upcase . g$12374$7lS0C)
        (string-titlecase . g$12373$7lS0C)
        (string-normalize-nfkd . g$12372$7lS0C)
        (string-normalize-nfkc . g$12371$7lS0C)
        (string-normalize-nfd . g$12370$7lS0C)
        (string-normalize-nfc . g$12369$7lS0C)
        (string-foldcase . g$12368$7lS0C)
        (string-downcase . g$12367$7lS0C)
        (string-ci>? . g$6951$7lS0C)
        (string-ci>=? . g$6953$7lS0C)
        (string-ci=? . g$6949$7lS0C)
        (string-ci<? . g$6950$7lS0C)
        (string-ci<=? . g$6952$7lS0C)
        (char-whitespace? . g$12366$7lS0C)
        (char-upper-case? . g$12365$7lS0C)
        (char-title-case? . g$12364$7lS0C)
        (char-numeric? . g$12363$7lS0C)
        (char-lower-case? . g$12362$7lS0C)
        (char-general-category . g$12361$7lS0C)
        (char-upcase . g$12360$7lS0C)
        (char-titlecase . g$12359$7lS0C)
        (char-foldcase . g$12358$7lS0C)
        (char-downcase . g$12357$7lS0C)
        (char-ci>? . g$6990$7lS0C)
        (char-ci>=? . g$6992$7lS0C)
        (char-ci=? . g$6988$7lS0C)
        (char-ci<? . g$6989$7lS0C)
        (char-ci<=? . g$6991$7lS0C)
        (char-alphabetic? . g$12356$7lS0C)
        (variable-transformer-procedure . g$8445$7lS0C)
        (variable-transformer? . g$8444$7lS0C)
        (make-variable-transformer . g$8443$7lS0C)
        (identifier? . g$8842$7lS0C)
        (generate-temporaries . g$8831$7lS0C)
        (free-identifier=? . g$8832$7lS0C)
        (syntax->datum . g$8844$7lS0C)
        (datum->syntax . g$8843$7lS0C)
        (bound-identifier=? . g$8833$7lS0C)
        (record-type-descriptor? . g$12355$7lS0C)
        (record-predicate . g$12354$7lS0C)
        (record-mutator . g$12353$7lS0C)
        (record-constructor . g$12352$7lS0C)
        (record-accessor . g$12351$7lS0C)
        (make-record-type-descriptor . g$12350$7lS0C)
        (make-record-constructor-descriptor . g$12349$7lS0C)
        (record? . g$12348$7lS0C)
        (record-type-uid . g$12347$7lS0C)
        (record-type-sealed? . g$12346$7lS0C)
        (record-type-parent . g$12345$7lS0C)
        (record-type-opaque? . g$12344$7lS0C)
        (record-type-name . g$12343$7lS0C)
        (record-type-generative? . g$12342$7lS0C)
        (record-type-field-names . g$12341$7lS0C)
        (record-rtd . g$12340$7lS0C)
        (record-field-mutable? . g$12339$7lS0C)
        (delete-file . g$6527$7lS0C)
        (file-exists? . g$6526$7lS0C)
        (vector-sort! . g$12338$7lS0C)
        (vector-sort . g$12337$7lS0C)
        (list-sort . g$6891$7lS0C)
        (symbol-hash . g$12336$7lS0C)
        (string-ci-hash . g$12335$7lS0C)
        (string-hash . g$12334$7lS0C)
        (equal-hash . g$12333$7lS0C)
        (hashtable-equivalence-function . g$12332$7lS0C)
        (make-hashtable . g$12331$7lS0C)
        (hashtable-hash-function . g$12330$7lS0C)
        (make-eqv-hashtable . g$6495$7lS0C)
        (make-eq-hashtable . g$6494$7lS0C)
        (hashtable? . g$12329$7lS0C)
        (hashtable-update! . g$6501$7lS0C)
        (hashtable-size . g$6496$7lS0C)
        (hashtable-set! . g$6498$7lS0C)
        (hashtable-ref . g$6497$7lS0C)
        (hashtable-mutable? . g$12328$7lS0C)
        (hashtable-keys . g$12327$7lS0C)
        (hashtable-entries . g$12326$7lS0C)
        (hashtable-delete! . g$6499$7lS0C)
        (hashtable-copy . g$12325$7lS0C)
        (hashtable-contains? . g$6500$7lS0C)
        (hashtable-clear! . g$6502$7lS0C)
        (call-with-output-file . g$7369$7lS0C)
        (call-with-input-file . g$7368$7lS0C)
        (write-char . g$12324$7lS0C)
        (write . g$12323$7lS0C)
        (with-output-to-file . g$7367$7lS0C)
        (with-input-from-file . g$7366$7lS0C)
        (read-char . g$12322$7lS0C)
        (read . g$12321$7lS0C)
        (peek-char . g$12320$7lS0C)
        (open-output-file . g$12319$7lS0C)
        (open-input-file . g$12318$7lS0C)
        (newline . g$12317$7lS0C)
        (display . g$12316$7lS0C)
        (close-output-port . g$12315$7lS0C)
        (close-input-port . g$12314$7lS0C)
        (eof-object? . g$12313$7lS0C)
        (eof-object . g$12312$7lS0C)
        (current-error-port . g$12311$7lS0C)
        (current-output-port . g$12310$7lS0C)
        (current-input-port . g$12309$7lS0C)
        (output-port? . g$12308$7lS0C)
        (input-port? . g$12307$7lS0C)
        (utf-8-codec . g$12306$7lS0C)
        (utf-16-codec . g$12305$7lS0C)
        (transcoder-error-handling-mode . g$12304$7lS0C)
        (transcoder-eol-style . g$12303$7lS0C)
        (transcoder-codec . g$12302$7lS0C)
        (transcoded-port . g$12301$7lS0C)
        (textual-port? . g$12300$7lS0C)
        (string->bytevector . g$12299$7lS0C)
        (standard-output-port . g$12298$7lS0C)
        (standard-input-port . g$12297$7lS0C)
        (standard-error-port . g$12296$7lS0C)
        (set-port-position! . g$12295$7lS0C)
        (put-u8 . g$12294$7lS0C)
        (put-string . g$12293$7lS0C)
        (put-datum . g$12292$7lS0C)
        (put-char . g$12291$7lS0C)
        (put-bytevector . g$12290$7lS0C)
        (port? . g$7342$7lS0C)
        (port-transcoder . g$12289$7lS0C)
        (port-position . g$12288$7lS0C)
        (port-has-set-port-position!? . g$12287$7lS0C)
        (port-has-port-position? . g$12286$7lS0C)
        (port-eof? . g$12285$7lS0C)
        (output-port-buffer-mode . g$12284$7lS0C)
        (open-string-output-port . g$7341$7lS0C)
        (open-string-input-port . g$12283$7lS0C)
        (open-file-output-port . g$12282$7lS0C)
        (open-file-input/output-port . g$12281$7lS0C)
        (open-file-input-port . g$12280$7lS0C)
        (open-bytevector-output-port . g$12279$7lS0C)
        (open-bytevector-input-port . g$12278$7lS0C)
        (native-transcoder . g$12277$7lS0C)
        (native-eol-style . g$12276$7lS0C)
        (make-transcoder . g$12275$7lS0C)
        (latin-1-codec . g$12274$7lS0C)
        (make-i/o-write-error . g$7197$7lS0C)
        (make-i/o-read-error . g$7183$7lS0C)
        (make-i/o-port-error . g$7302$7lS0C)
        (make-i/o-invalid-position-error . g$7212$7lS0C)
        (make-i/o-filename-error . g$7229$7lS0C)
        (make-i/o-file-protection-error . g$7245$7lS0C)
        (make-i/o-file-is-read-only-error . g$7259$7lS0C)
        (make-i/o-file-does-not-exist-error . g$7287$7lS0C)
        (make-i/o-file-already-exists-error . g$7273$7lS0C)
        (make-i/o-error . g$7169$7lS0C)
        (make-i/o-encoding-error . g$7333$7lS0C)
        (make-i/o-decoding-error . g$7318$7lS0C)
        (make-custom-textual-output-port . g$12273$7lS0C)
        (make-custom-textual-input/output-port . g$12272$7lS0C)
        (make-custom-textual-input-port . g$12271$7lS0C)
        (make-custom-binary-output-port . g$12270$7lS0C)
        (make-custom-binary-input/output-port . g$12269$7lS0C)
        (make-custom-binary-input-port . g$12268$7lS0C)
        (make-bytevector . g$12267$7lS0C)
        (lookahead-u8 . g$12266$7lS0C)
        (lookahead-char . g$12265$7lS0C)
        (i/o-write-error? . g$7198$7lS0C)
        (i/o-read-error? . g$7184$7lS0C)
        (i/o-port-error? . g$7304$7lS0C)
        (i/o-invalid-position-error? . g$7214$7lS0C)
        (i/o-error-position . g$7215$7lS0C)
        (i/o-filename-error? . g$7231$7lS0C)
        (i/o-file-protection-error? . g$7246$7lS0C)
        (i/o-file-is-read-only-error? . g$7260$7lS0C)
        (i/o-file-does-not-exist-error? . g$7288$7lS0C)
        (i/o-file-already-exists-error? . g$7274$7lS0C)
        (i/o-error? . g$7170$7lS0C)
        (i/o-error-port . g$7305$7lS0C)
        (i/o-error-filename . g$7232$7lS0C)
        (i/o-encoding-error? . g$7335$7lS0C)
        (i/o-encoding-error-char . g$7336$7lS0C)
        (i/o-decoding-error? . g$7319$7lS0C)
        (get-u8 . g$12264$7lS0C)
        (get-string-n! . g$12263$7lS0C)
        (get-string-n . g$12262$7lS0C)
        (get-string-all . g$12261$7lS0C)
        (get-line . g$12260$7lS0C)
        (get-datum . g$12259$7lS0C)
        (get-char . g$12258$7lS0C)
        (get-bytevector-some . g$12257$7lS0C)
        (get-bytevector-n! . g$12256$7lS0C)
        (get-bytevector-n . g$12255$7lS0C)
        (get-bytevector-all . g$12254$7lS0C)
        (flush-output-port . g$12253$7lS0C)
        (close-port . g$12252$7lS0C)
        (call-with-string-output-port . g$7343$7lS0C)
        (call-with-port . g$12251$7lS0C)
        (call-with-bytevector-output-port . g$12250$7lS0C)
        (bytevector->string . g$12249$7lS0C)
        (buffer-mode? . g$12248$7lS0C)
        (binary-port? . g$12247$7lS0C)
        (scheme-report-environment . g$8821$7lS0C)
        (quotient . g$6870$7lS0C)
        (null-environment . g$8820$7lS0C)
        (remainder . g$6871$7lS0C)
        (modulo . g$6872$7lS0C)
        (inexact->exact . g$12246$7lS0C)
        (force . g$6874$7lS0C)
        (exact->inexact . g$12245$7lS0C)
        (exit . g$12244$7lS0C)
        (command-line . g$11822$7lS0C)
        (string-fill! . g$12243$7lS0C)
        (string-set! . g$12242$7lS0C)
        (set-cdr! . g$12241$7lS0C)
        (set-car! . g$12240$7lS0C)
        (remove . g$5873$7lS0C)
        (remv . g$5874$7lS0C)
        (remp . g$5854$7lS0C)
        (remq . g$5875$7lS0C)
        (partition . g$5853$7lS0C)
        (memv . g$5861$7lS0C)
        (memq . g$5860$7lS0C)
        (memp . g$5863$7lS0C)
        (member . g$5862$7lS0C)
        (exists . g$5867$7lS0C)
        (for-all . g$5866$7lS0C)
        (fold-right . g$5872$7lS0C)
        (fold-left . g$5871$7lS0C)
        (find . g$5852$7lS0C)
        (filter . g$5855$7lS0C)
        (cons* . g$5870$7lS0C)
        (assv . g$5857$7lS0C)
        (assq . g$5856$7lS0C)
        (assp . g$5859$7lS0C)
        (assoc . g$5858$7lS0C)
        (with-exception-handler . g$12239$7lS0C)
        (raise-continuable . g$12238$7lS0C)
        (raise . g$12237$7lS0C)
        (eval . g$8823$7lS0C)
        (environment . g$8819$7lS0C)
        (make-enumeration . g$7427$7lS0C)
        (enum-set=? . g$7434$7lS0C)
        (enum-set-universe . g$7428$7lS0C)
        (enum-set-union . g$7435$7lS0C)
        (enum-set-subset? . g$7433$7lS0C)
        (enum-set-projection . g$7439$7lS0C)
        (enum-set-member? . g$7432$7lS0C)
        (enum-set-intersection . g$7436$7lS0C)
        (enum-set-indexer . g$7429$7lS0C)
        (enum-set-difference . g$7437$7lS0C)
        (enum-set-constructor . g$7430$7lS0C)
        (enum-set-complement . g$7438$7lS0C)
        (enum-set->list . g$7431$7lS0C)
        (who-condition? . g$6781$7lS0C)
        (warning? . g$6692$7lS0C)
        (violation? . g$6734$7lS0C)
        (undefined-violation? . g$6858$7lS0C)
        (syntax-violation? . g$6842$7lS0C)
        (syntax-violation-subform . g$6844$7lS0C)
        (syntax-violation-form . g$6843$7lS0C)
        (syntax-violation . g$8841$7lS0C)
        (simple-conditions . g$12236$7lS0C)
        (serious-condition? . g$6706$7lS0C)
        (non-continuable-violation? . g$6796$7lS0C)
        (message-condition? . g$6677$7lS0C)
        (make-who-condition . g$6779$7lS0C)
        (make-warning . g$6691$7lS0C)
        (make-violation . g$6733$7lS0C)
        (make-undefined-violation . g$6857$7lS0C)
        (make-syntax-violation . g$6839$7lS0C)
        (make-serious-condition . g$6705$7lS0C)
        (make-non-continuable-violation . g$6795$7lS0C)
        (make-message-condition . g$6675$7lS0C)
        (make-lexical-violation . g$6823$7lS0C)
        (make-irritants-condition . g$6762$7lS0C)
        (make-implementation-restriction-violation . g$6809$7lS0C)
        (make-error . g$6719$7lS0C)
        (make-assertion-violation . g$6747$7lS0C)
        (lexical-violation? . g$6824$7lS0C)
        (irritants-condition? . g$6764$7lS0C)
        (implementation-restriction-violation? . g$6810$7lS0C)
        (error? . g$6720$7lS0C)
        (condition-who . g$6782$7lS0C)
        (condition-predicate . g$12235$7lS0C)
        (condition-message . g$6678$7lS0C)
        (condition-irritants . g$6765$7lS0C)
        (condition-accessor . g$12234$7lS0C)
        (condition . g$12233$7lS0C)
        (assertion-violation? . g$6748$7lS0C)
        (condition? . g$12232$7lS0C)
        (utf32->string . g$12231$7lS0C)
        (utf16->string . g$12230$7lS0C)
        (utf8->string . g$12229$7lS0C)
        (uint-list->bytevector . g$12228$7lS0C)
        (u8-list->bytevector . g$12227$7lS0C)
        (string->utf8 . g$12226$7lS0C)
        (string->utf32 . g$12225$7lS0C)
        (string->utf16 . g$12224$7lS0C)
        (sint-list->bytevector . g$12223$7lS0C)
        (native-endianness . g$6533$7lS0C)
        (bytevector? . g$12222$7lS0C)
        (bytevector=? . g$12221$7lS0C)
        (bytevector-uint-set! . g$12220$7lS0C)
        (bytevector-uint-ref . g$12219$7lS0C)
        (bytevector-u8-set! . g$12218$7lS0C)
        (bytevector-u8-ref . g$12217$7lS0C)
        (bytevector-u64-set! . g$6554$7lS0C)
        (bytevector-u64-ref . g$6550$7lS0C)
        (bytevector-u64-native-set! . g$6556$7lS0C)
        (bytevector-u64-native-ref . g$6552$7lS0C)
        (bytevector-u32-set! . g$6546$7lS0C)
        (bytevector-u32-ref . g$6542$7lS0C)
        (bytevector-u32-native-set! . g$6548$7lS0C)
        (bytevector-u32-native-ref . g$6544$7lS0C)
        (bytevector-u16-set! . g$6538$7lS0C)
        (bytevector-u16-ref . g$6534$7lS0C)
        (bytevector-u16-native-set! . g$6540$7lS0C)
        (bytevector-u16-native-ref . g$6536$7lS0C)
        (bytevector-sint-set! . g$12216$7lS0C)
        (bytevector-sint-ref . g$12215$7lS0C)
        (bytevector-s8-set! . g$12214$7lS0C)
        (bytevector-s8-ref . g$12213$7lS0C)
        (bytevector-s64-set! . g$6555$7lS0C)
        (bytevector-s64-ref . g$6551$7lS0C)
        (bytevector-s64-native-set! . g$6557$7lS0C)
        (bytevector-s64-native-ref . g$6553$7lS0C)
        (bytevector-s32-set! . g$6547$7lS0C)
        (bytevector-s32-ref . g$6543$7lS0C)
        (bytevector-s32-native-set! . g$6549$7lS0C)
        (bytevector-s32-native-ref . g$6545$7lS0C)
        (bytevector-s16-set! . g$6539$7lS0C)
        (bytevector-s16-ref . g$6535$7lS0C)
        (bytevector-s16-native-set! . g$6541$7lS0C)
        (bytevector-s16-native-ref . g$6537$7lS0C)
        (bytevector-length . g$12212$7lS0C)
        (bytevector-ieee-single-set! . g$12211$7lS0C)
        (bytevector-ieee-single-ref . g$12210$7lS0C)
        (bytevector-ieee-single-native-set! . g$6560$7lS0C)
        (bytevector-ieee-single-native-ref . g$6558$7lS0C)
        (bytevector-ieee-double-set! . g$12209$7lS0C)
        (bytevector-ieee-double-ref . g$12208$7lS0C)
        (bytevector-ieee-double-native-set! . g$6561$7lS0C)
        (bytevector-ieee-double-native-ref . g$6559$7lS0C)
        (bytevector-fill! . g$12207$7lS0C)
        (bytevector-copy! . g$12206$7lS0C)
        (bytevector-copy . g$12205$7lS0C)
        (bytevector->uint-list . g$12204$7lS0C)
        (bytevector->u8-list . g$12203$7lS0C)
        (bytevector->sint-list . g$12202$7lS0C)
        (no-nans-violation? . g$7155$7lS0C)
        (no-infinities-violation? . g$7141$7lS0C)
        (make-no-nans-violation . g$7154$7lS0C)
        (make-no-infinities-violation . g$7140$7lS0C)
        (real->flonum . g$12201$7lS0C)
        (flzero? . g$12200$7lS0C)
        (fltruncate . g$12199$7lS0C)
        (fltan . g$12198$7lS0C)
        (flsqrt . g$12197$7lS0C)
        (flsin . g$12196$7lS0C)
        (flround . g$12195$7lS0C)
        (flpositive? . g$12194$7lS0C)
        (flonum? . g$12193$7lS0C)
        (flodd? . g$12192$7lS0C)
        (flnumerator . g$12191$7lS0C)
        (flnegative? . g$12190$7lS0C)
        (flnan? . g$12189$7lS0C)
        (flmod0 . g$12188$7lS0C)
        (flmod . g$12187$7lS0C)
        (flmin . g$12186$7lS0C)
        (flmax . g$12185$7lS0C)
        (fllog . g$12184$7lS0C)
        (flinteger? . g$12183$7lS0C)
        (flinfinite? . g$12182$7lS0C)
        (flfloor . g$12181$7lS0C)
        (flfinite? . g$12180$7lS0C)
        (flexpt . g$12179$7lS0C)
        (flexp . g$12178$7lS0C)
        (fleven? . g$12177$7lS0C)
        (fldiv0-and-mod0 . g$12176$7lS0C)
        (fldiv0 . g$12175$7lS0C)
        (fldiv-and-mod . g$12174$7lS0C)
        (fldiv . g$12173$7lS0C)
        (fldenominator . g$12172$7lS0C)
        (flcos . g$12171$7lS0C)
        (flceiling . g$12170$7lS0C)
        (flatan . g$12169$7lS0C)
        (flasin . g$12168$7lS0C)
        (flacos . g$12167$7lS0C)
        (flabs . g$12166$7lS0C)
        (fl>? . g$12165$7lS0C)
        (fl>=? . g$12164$7lS0C)
        (fl=? . g$12163$7lS0C)
        (fl<? . g$12162$7lS0C)
        (fl<=? . g$12161$7lS0C)
        (fl/ . g$12160$7lS0C)
        (fl- . g$12159$7lS0C)
        (fl+ . g$12158$7lS0C)
        (fl* . g$12157$7lS0C)
        (fixnum->flonum . g$12156$7lS0C)
        (fxzero? . g$12155$7lS0C)
        (fxxor . g$12154$7lS0C)
        (fxrotate-bit-field . g$7087$7lS0C)
        (fxreverse-bit-field . g$12153$7lS0C)
        (fxpositive? . g$12152$7lS0C)
        (fxodd? . g$12151$7lS0C)
        (fxnot . g$12150$7lS0C)
        (fxnegative? . g$12149$7lS0C)
        (fxmod0 . g$12148$7lS0C)
        (fxmod . g$12147$7lS0C)
        (fxmin . g$12146$7lS0C)
        (fxmax . g$12145$7lS0C)
        (fxlength . g$12144$7lS0C)
        (fxior . g$12143$7lS0C)
        (fxif . g$7081$7lS0C)
        (fxfirst-bit-set . g$12142$7lS0C)
        (fxeven? . g$12141$7lS0C)
        (fxdiv0-and-mod0 . g$12140$7lS0C)
        (fxdiv0 . g$12139$7lS0C)
        (fxdiv-and-mod . g$12138$7lS0C)
        (fxdiv . g$12137$7lS0C)
        (fxcopy-bit-field . g$7084$7lS0C)
        (fxcopy-bit . g$7082$7lS0C)
        (fxbit-set? . g$12136$7lS0C)
        (fxbit-field . g$7083$7lS0C)
        (fxbit-count . g$12135$7lS0C)
        (fxarithmetic-shift-right . g$7086$7lS0C)
        (fxarithmetic-shift-left . g$7085$7lS0C)
        (fxarithmetic-shift . g$12134$7lS0C)
        (fxand . g$12133$7lS0C)
        (fx>? . g$12132$7lS0C)
        (fx>=? . g$12131$7lS0C)
        (fx=? . g$12130$7lS0C)
        (fx<? . g$12129$7lS0C)
        (fx<=? . g$12128$7lS0C)
        (fx-/carry . g$7079$7lS0C)
        (fx- . g$12127$7lS0C)
        (fx+/carry . g$7080$7lS0C)
        (fx+ . g$12126$7lS0C)
        (fx*/carry . g$7078$7lS0C)
        (fx* . g$12125$7lS0C)
        (greatest-fixnum . g$12124$7lS0C)
        (least-fixnum . g$12123$7lS0C)
        (fixnum-width . g$12122$7lS0C)
        (fixnum? . g$12121$7lS0C)
        (bitwise-rotate-bit-field . g$7052$7lS0C)
        (bitwise-reverse-bit-field . g$12120$7lS0C)
        (bitwise-length . g$12119$7lS0C)
        (bitwise-if . g$7046$7lS0C)
        (bitwise-first-bit-set . g$12118$7lS0C)
        (bitwise-copy-bit-field . g$7049$7lS0C)
        (bitwise-copy-bit . g$7047$7lS0C)
        (bitwise-bit-set? . g$12117$7lS0C)
        (bitwise-bit-field . g$7048$7lS0C)
        (bitwise-bit-count . g$12116$7lS0C)
        (bitwise-xor . g$12115$7lS0C)
        (bitwise-ior . g$12114$7lS0C)
        (bitwise-and . g$12113$7lS0C)
        (bitwise-not . g$12112$7lS0C)
        (bitwise-arithmetic-shift-right . g$7051$7lS0C)
        (bitwise-arithmetic-shift-left . g$7050$7lS0C)
        (bitwise-arithmetic-shift . g$12111$7lS0C)
        (zero? . g$12110$7lS0C)
        (vector? . g$12109$7lS0C)
        (vector-set! . g$12108$7lS0C)
        (vector-ref . g$12107$7lS0C)
        (vector-map . g$12106$7lS0C)
        (vector-length . g$12105$7lS0C)
        (vector-for-each . g$12104$7lS0C)
        (vector-fill! . g$12103$7lS0C)
        (vector->list . g$12102$7lS0C)
        (vector . g$12101$7lS0C)
        (values . g$12100$7lS0C)
        (truncate . g$12099$7lS0C)
        (tan . g$12098$7lS0C)
        (symbol? . g$12097$7lS0C)
        (symbol=? . g$6053$7lS0C)
        (symbol->string . g$12096$7lS0C)
        (substring . g$12095$7lS0C)
        (string? . g$12094$7lS0C)
        (string>? . g$6050$7lS0C)
        (string>=? . g$6052$7lS0C)
        (string=? . g$6048$7lS0C)
        (string<? . g$6049$7lS0C)
        (string<=? . g$6051$7lS0C)
        (string-ref . g$12093$7lS0C)
        (string-length . g$12092$7lS0C)
        (string-for-each . g$12091$7lS0C)
        (string-copy . g$12090$7lS0C)
        (string-append . g$12089$7lS0C)
        (string->symbol . g$12088$7lS0C)
        (string->number . g$12087$7lS0C)
        (string->list . g$12086$7lS0C)
        (string . g$12085$7lS0C)
        (sqrt . g$12084$7lS0C)
        (sin . g$12083$7lS0C)
        (round . g$12082$7lS0C)
        (reverse . g$12081$7lS0C)
        (real? . g$12080$7lS0C)
        (real-valued? . g$12079$7lS0C)
        (real-part . g$12078$7lS0C)
        (rationalize . g$6094$7lS0C)
        (rational? . g$12077$7lS0C)
        (rational-valued? . g$12076$7lS0C)
        (procedure? . g$12075$7lS0C)
        (positive? . g$12074$7lS0C)
        (pair? . g$12073$7lS0C)
        (odd? . g$12072$7lS0C)
        (numerator . g$12071$7lS0C)
        (number? . g$12070$7lS0C)
        (number->string . g$12069$7lS0C)
        (null? . g$12068$7lS0C)
        (not . g$12067$7lS0C)
        (negative? . g$12066$7lS0C)
        (nan? . g$12065$7lS0C)
        (min . g$12064$7lS0C)
        (max . g$12063$7lS0C)
        (map . g$5868$7lS0C)
        (make-vector . g$12062$7lS0C)
        (make-string . g$12061$7lS0C)
        (make-rectangular . g$12060$7lS0C)
        (make-polar . g$12059$7lS0C)
        (magnitude . g$12058$7lS0C)
        (log . g$12057$7lS0C)
        (list? . g$12056$7lS0C)
        (list-tail . g$5848$7lS0C)
        (list-ref . g$5849$7lS0C)
        (list->vector . g$12055$7lS0C)
        (list->string . g$12054$7lS0C)
        (list . g$12053$7lS0C)
        (length . g$12052$7lS0C)
        (lcm . g$12051$7lS0C)
        (integer? . g$12050$7lS0C)
        (integer-valued? . g$12049$7lS0C)
        (integer->char . g$12048$7lS0C)
        (infinite? . g$12047$7lS0C)
        (inexact? . g$12046$7lS0C)
        (inexact . g$12045$7lS0C)
        (imag-part . g$12044$7lS0C)
        (gcd . g$12043$7lS0C)
        (for-each . g$5869$7lS0C)
        (floor . g$12042$7lS0C)
        (finite? . g$12041$7lS0C)
        (expt . g$12040$7lS0C)
        (exp . g$12039$7lS0C)
        (exact? . g$12038$7lS0C)
        (exact-integer-sqrt . g$12037$7lS0C)
        (exact . g$12036$7lS0C)
        (even? . g$12035$7lS0C)
        (error . g$12034$7lS0C)
        (eqv? . g$12033$7lS0C)
        (equal? . g$12032$7lS0C)
        (eq? . g$12031$7lS0C)
        (dynamic-wind . g$12030$7lS0C)
        (div0-and-mod0 . g$12029$7lS0C)
        (mod0 . g$12028$7lS0C)
        (div0 . g$12027$7lS0C)
        (div-and-mod . g$12026$7lS0C)
        (mod . g$12025$7lS0C)
        (div . g$12024$7lS0C)
        (denominator . g$12023$7lS0C)
        (cos . g$12022$7lS0C)
        (cons . g$12021$7lS0C)
        (complex? . g$12020$7lS0C)
        (char? . g$12019$7lS0C)
        (char>? . g$6091$7lS0C)
        (char>=? . g$6093$7lS0C)
        (char=? . g$6089$7lS0C)
        (char<? . g$6090$7lS0C)
        (char<=? . g$6092$7lS0C)
        (char->integer . g$12018$7lS0C)
        (ceiling . g$12017$7lS0C)
        (call-with-values . g$12016$7lS0C)
        (call/cc . g$12015$7lS0C)
        (call-with-current-continuation . g$12014$7lS0C)
        (cddddr . g$6013$7lS0C)
        (cdddar . g$6012$7lS0C)
        (cddadr . g$6011$7lS0C)
        (cddaar . g$6010$7lS0C)
        (cdaddr . g$6009$7lS0C)
        (cdadar . g$6008$7lS0C)
        (cdaadr . g$6007$7lS0C)
        (cdaaar . g$6006$7lS0C)
        (cadddr . g$6005$7lS0C)
        (caddar . g$6004$7lS0C)
        (cadadr . g$6003$7lS0C)
        (cadaar . g$6002$7lS0C)
        (caaddr . g$6001$7lS0C)
        (caadar . g$6000$7lS0C)
        (caaadr . g$5999$7lS0C)
        (caaaar . g$5998$7lS0C)
        (cdddr . g$5997$7lS0C)
        (cddar . g$5996$7lS0C)
        (cdadr . g$5995$7lS0C)
        (cdaar . g$5994$7lS0C)
        (caddr . g$5993$7lS0C)
        (cadar . g$5992$7lS0C)
        (caadr . g$5991$7lS0C)
        (caaar . g$5990$7lS0C)
        (cddr . g$5989$7lS0C)
        (cdar . g$5988$7lS0C)
        (cadr . g$5987$7lS0C)
        (caar . g$5986$7lS0C)
        (cdr . g$12013$7lS0C)
        (car . g$12012$7lS0C)
        (boolean? . g$12011$7lS0C)
        (boolean=? . g$6054$7lS0C)
        (atan . g$12010$7lS0C)
        (assertion-violation . g$12009$7lS0C)
        (asin . g$12008$7lS0C)
        (apply . g$12007$7lS0C)
        (append . g$12006$7lS0C)
        (angle . g$12005$7lS0C)
        (acos . g$12004$7lS0C)
        (abs . g$12003$7lS0C)
        (/ . g$12002$7lS0C)
        (* . g$12001$7lS0C)
        (- . g$12000$7lS0C)
        (+ . g$11999$7lS0C)
        (>= . g$11998$7lS0C)
        (> . g$11997$7lS0C)
        (= . g$11996$7lS0C)
        (<= . g$11995$7lS0C)
        (< . g$11994$7lS0C)
        (make-record-printer . g$11993$7lS0C)
        (eqv-hash . g$11992$7lS0C)
        (reverse! . g$11991$7lS0C)
        (deserialize-port . g$11990$7lS0C)
        (serialize-port . g$11989$7lS0C)
        (enum-set? . g$7402$7lS0C)
        (make-promise . g$6873$7lS0C)
        (load/args . g$11824$7lS0C)
        (printf . g$7513$7lS0C)
        (fprintf . g$7514$7lS0C)
        (format . g$7515$7lS0C)
        (procedure-form . g$11988$7lS0C)
        (procedure-environment . g$11987$7lS0C)
        (procedure-name . g$11986$7lS0C)
        (procedure-arity . g$11985$7lS0C)
        (gc-collect . g$11984$7lS0C)
        (clr-type? . g$11983$7lS0C)
        (get-clr-type . g$11982$7lS0C)
        (get-command-line . g$11981$7lS0C)
        (vector-append . g$11980$7lS0C)
        (vector-filter . g$11979$7lS0C)
        (vector-reverse! . g$11978$7lS0C)
        (vector-contains? . g$11977$7lS0C)
        (vector-index-of . g$11976$7lS0C)
        (vector-copy . g$11975$7lS0C)
        (vector-binary-search . g$11974$7lS0C)
        (string-ci-compare . g$11973$7lS0C)
        (string-compare . g$11972$7lS0C)
        (string-format . g$11971$7lS0C)
        (trace-printer . g$11821$7lS0C)
        (make-traced-procedure . g$11970$7lS0C)
        (make-traced-macro . g$7535$7lS0C)
        (assertion-error . g$8837$7lS0C)
        (time-it . g$11969$7lS0C)
        (make-parameter . g$7542$7lS0C)
        (library-locator . g$11968$7lS0C)
        (get-library-paths . g$11967$7lS0C)
        (open-tcp-input/output-port . g$11966$7lS0C)
        (hashtable-for-each . g$11965$7lS0C)
        (hashtable-map . g$11964$7lS0C)
        (environment-bindings . g$8815$7lS0C)
        (environment-symbols . g$8818$7lS0C)
        (interaction-environment-symbols . g$8814$7lS0C)
        (optimization-level . g$11963$7lS0C)
        (library-path . g$7997$7lS0C)
        (expand->core . g$8824$7lS0C)
        (expand . g$8822$7lS0C)
        (&no-nans . g$11962$7lS0C)
        (&no-infinities . g$11961$7lS0C)
        (&i/o-encoding . g$11960$7lS0C)
        (&i/o-decoding . g$11959$7lS0C)
        (&i/o-port . g$11958$7lS0C)
        (&i/o-file-does-not-exist . g$11957$7lS0C)
        (&i/o-file-already-exists . g$11956$7lS0C)
        (&i/o-file-is-read-only . g$11955$7lS0C)
        (&i/o-file-protection . g$11954$7lS0C)
        (&i/o-filename . g$11953$7lS0C)
        (&i/o-invalid-position . g$11952$7lS0C)
        (&i/o-write . g$11951$7lS0C)
        (&i/o-read . g$11950$7lS0C)
        (&i/o . g$11949$7lS0C)
        (&non-continuable . g$11948$7lS0C)
        (&undefined . g$11947$7lS0C)
        (&syntax . g$11946$7lS0C)
        (&lexical . g$11945$7lS0C)
        (&implementation-restriction . g$11944$7lS0C)
        (&who . g$11943$7lS0C)
        (&irritants . g$11942$7lS0C)
        (&assertion . g$11941$7lS0C)
        (&violation . g$11940$7lS0C)
        (&error . g$11939$7lS0C)
        (&serious . g$11938$7lS0C)
        (&warning . g$11937$7lS0C)
        (&message . g$11936$7lS0C)
        (&condition . g$11935$7lS0C)
        (define-condition-type . g$11934$7lS0C)
        (define-enumeration . g$11933$7lS0C)
        (define-record-type . g$11932$7lS0C)
        (parent-rtd . g$11931$7lS0C)
        (nongenerative . g$11930$7lS0C)
        (opaque . g$11929$7lS0C)
        (sealed . g$11928$7lS0C)
        (protocol . g$11927$7lS0C)
        (parent . g$11926$7lS0C)
        (immutable . g$11925$7lS0C)
        (mutable . g$11924$7lS0C)
        (fields . g$11923$7lS0C)
        (error-handling-mode . g$11922$7lS0C)
        (file-options . g$11921$7lS0C)
        (buffer-mode . g$11920$7lS0C)
        (eol-style . g$11919$7lS0C)
        (guard . g$11918$7lS0C)
        (trace-letrec-syntax . g$11917$7lS0C)
        (trace-let-syntax . g$11916$7lS0C)
        (trace-define-syntax . g$11915$7lS0C)
        (trace-define . g$11914$7lS0C)
        (trace-lambda . g$11913$7lS0C)
        (unsyntax-splicing . g$11912$7lS0C)
        (unsyntax . g$11911$7lS0C)
        (unquote-splicing . g$11910$7lS0C)
        (unquote . g$11909$7lS0C)
        (_ . g$11908$7lS0C)
        (else . g$11907$7lS0C)
        (=> . g$11906$7lS0C)
        (... . g$11905$7lS0C)
        (assert . g$11904$7lS0C)
        (endianness . g$11903$7lS0C)
        (delay . g$11902$7lS0C)
        (time . g$11901$7lS0C)
        (or . g$11900$7lS0C)
        (and . g$11899$7lS0C)
        (do . g$11898$7lS0C)
        (cond . g$11897$7lS0C)
        (let* . g$11896$7lS0C)
        (let . g$11895$7lS0C)
        (identifier-syntax . g$11894$7lS0C)
        (with-syntax . g$11893$7lS0C)
        (quasisyntax . g$11892$7lS0C)
        (quasiquote . g$11891$7lS0C)
        (syntax-rules . g$11890$7lS0C)
        (include-into . g$11889$7lS0C)
        (include . g$11888$7lS0C)
        (define-struct . g$11887$7lS0C)
        (let-values . g$11886$7lS0C)
        (let*-values . g$11885$7lS0C)
        (record-constructor-descriptor . g$11884$7lS0C)
        (record-type-descriptor . g$11883$7lS0C)
        (fluid-let-syntax . g$11882$7lS0C)
        (case . g$11881$7lS0C)
        (parameterize . g$11880$7lS0C)
        (unless . g$11879$7lS0C)
        (when . g$11878$7lS0C)
        (if . g$11877$7lS0C)
        (letrec* . g$11876$7lS0C)
        (letrec . g$11875$7lS0C)
        (type-descriptor . g$11874$7lS0C)
        (case-lambda . g$11873$7lS0C)
        (lambda . g$11872$7lS0C)
        (syntax . g$11871$7lS0C)
        (syntax-case . g$11870$7lS0C)
        (quote . g$11869$7lS0C)
        (foreign-call . g$11868$7lS0C)
        (letrec-syntax . g$11867$7lS0C)
        (let-syntax . g$11866$7lS0C)
        (set! . g$11865$7lS0C)
        (export . g$11864$7lS0C)
        (import . g$11863$7lS0C)
        (library . g$11862$7lS0C)
        (begin . g$11861$7lS0C)
        (module . g$11860$7lS0C)
        (define-syntax . g$11859$7lS0C)
        (define . g$11858$7lS0C))
      '((g$8713$7lS0C core-prim . ellipsis-map)
        (g$12465$7lS0C core-prim . &no-nans-rcd)
        (g$12464$7lS0C core-prim . &no-nans-rtd)
        (g$12463$7lS0C core-prim . &no-infinities-rcd)
        (g$12462$7lS0C core-prim . &no-infinities-rtd)
        (g$12461$7lS0C core-prim . &i/o-encoding-rcd)
        (g$12460$7lS0C core-prim . &i/o-encoding-rtd)
        (g$12459$7lS0C core-prim . &i/o-decoding-rcd)
        (g$12458$7lS0C core-prim . &i/o-decoding-rtd)
        (g$12457$7lS0C core-prim . &i/o-port-rcd)
        (g$12456$7lS0C core-prim . &i/o-port-rtd)
        (g$12455$7lS0C core-prim . &i/o-file-does-not-exist-rcd)
        (g$12454$7lS0C core-prim . &i/o-file-does-not-exist-rtd)
        (g$12453$7lS0C core-prim . &i/o-file-already-exists-rcd)
        (g$12452$7lS0C core-prim . &i/o-file-already-exists-rtd)
        (g$12451$7lS0C core-prim . &i/o-file-is-read-only-rcd)
        (g$12450$7lS0C core-prim . &i/o-file-is-read-only-rtd)
        (g$12449$7lS0C core-prim . &i/o-file-protection-rcd)
        (g$12448$7lS0C core-prim . &i/o-file-protection-rtd)
        (g$12447$7lS0C core-prim . &i/o-filename-rcd)
        (g$12446$7lS0C core-prim . &i/o-filename-rtd)
        (g$12445$7lS0C core-prim . &i/o-invalid-position-rcd)
        (g$12444$7lS0C core-prim . &i/o-invalid-position-rtd)
        (g$12443$7lS0C core-prim . &i/o-write-rcd)
        (g$12442$7lS0C core-prim . &i/o-write-rtd)
        (g$12441$7lS0C core-prim . &i/o-read-rcd)
        (g$12440$7lS0C core-prim . &i/o-read-rtd)
        (g$12439$7lS0C core-prim . &i/o-rcd)
        (g$12438$7lS0C core-prim . &i/o-rtd)
        (g$12437$7lS0C core-prim . &undefined-rcd)
        (g$12436$7lS0C core-prim . &undefined-rtd)
        (g$12435$7lS0C core-prim . &syntax-rcd)
        (g$12434$7lS0C core-prim . &syntax-rtd)
        (g$12433$7lS0C core-prim . &lexical-rcd)
        (g$12432$7lS0C core-prim . &lexical-rtd)
        (g$12431$7lS0C core-prim . &implementation-restriction-rcd)
        (g$12430$7lS0C core-prim . &implementation-restriction-rtd)
        (g$12429$7lS0C core-prim . &non-continuable-rcd)
        (g$12428$7lS0C core-prim . &non-continuable-rtd)
        (g$12427$7lS0C core-prim . &who-rcd)
        (g$12426$7lS0C core-prim . &who-rtd)
        (g$12425$7lS0C core-prim . &irritants-rcd)
        (g$12424$7lS0C core-prim . &irritants-rtd)
        (g$12423$7lS0C core-prim . &assertion-rcd)
        (g$12422$7lS0C core-prim . &assertion-rtd)
        (g$12421$7lS0C core-prim . &violation-rcd)
        (g$12420$7lS0C core-prim . &violation-rtd)
        (g$12419$7lS0C core-prim . &error-rcd)
        (g$12418$7lS0C core-prim . &error-rtd)
        (g$12417$7lS0C core-prim . &serious-rcd)
        (g$12416$7lS0C core-prim . &serious-rtd)
        (g$12415$7lS0C core-prim . &warning-rcd)
        (g$12414$7lS0C core-prim . &warning-rtd)
        (g$12413$7lS0C core-prim . &message-rcd)
        (g$12412$7lS0C core-prim . &message-rtd)
        (g$12411$7lS0C core-prim . &condition-rcd)
        (g$12410$7lS0C core-prim . &condition-rtd)
        (g$12409$7lS0C core-prim . library-letrec*)
        (g$12408$7lS0C core-prim . annotation-stripped)
        (g$12407$7lS0C core-prim . annotation-source)
        (g$12406$7lS0C core-prim . annotation-expression)
        (g$12405$7lS0C core-prim . annotation?)
        (g$12404$7lS0C core-prim . read-annotated)
        (g$12403$7lS0C core-prim . tanh)
        (g$12402$7lS0C core-prim . cosh)
        (g$12401$7lS0C core-prim . sinh)
        (g$12400$7lS0C core-prim . make-guid)
        (g$12399$7lS0C core-prim . unspecified?)
        (g$12398$7lS0C core-prim . make-trace)
        (g$5851$7lS0C core-prim . make-list)
        (g$5850$7lS0C core-prim . last-pair)
        (g$12397$7lS0C core-prim . load-r5rs)
        (g$12396$7lS0C core-prim . license)
        (g$12395$7lS0C core-prim . stacktrace)
        (g$11826$7lS0C core-prim . ironscheme-build)
        (g$12394$7lS0C core-prim . define-clr-class-internal)
        (g$12393$7lS0C core-prim . clr-field-set!-internal)
        (g$12392$7lS0C core-prim . clr-field-get-internal)
        (g$12391$7lS0C core-prim . clr-cast-internal)
        (g$12390$7lS0C core-prim . clr-call-internal)
        (g$12389$7lS0C core-prim . clr-new-internal)
        (g$12388$7lS0C core-prim . clr-new-array-internal)
        (g$12387$7lS0C core-prim . clr-is-internal)
        (g$12386$7lS0C core-prim . clr-reference-internal)
        (g$12385$7lS0C core-prim . clr-using-internal)
        (g$8838$7lS0C core-prim . syntax-error)
        (g$8708$7lS0C core-prim . syntax-dispatch)
        (g$12384$7lS0C core-prim . compile-core)
        (g$12383$7lS0C core-prim . eval-core)
        (g$12382$7lS0C core-prim . set-symbol-value!)
        (g$12381$7lS0C core-prim . symbol-value)
        (g$12380$7lS0C core-prim . ungensym)
        (g$12379$7lS0C core-prim . gensym)
        (g$12378$7lS0C core-prim . void)
        (g$12377$7lS0C core-prim . load-serialized-library)
        (g$12376$7lS0C core-prim . serialize-library)
        (g$11828$7lS0C core-prim . compile-system-libraries)
        (g$11830$7lS0C core-prim . compile->closure)
        (g$11829$7lS0C core-prim . compile)
        (g$11825$7lS0C core-prim . load)
        (g$8847$7lS0C core-prim . interaction-environment)
        (g$12375$7lS0C core-prim . char-ready?)
        (g$12374$7lS0C core-prim . string-upcase)
        (g$12373$7lS0C core-prim . string-titlecase)
        (g$12372$7lS0C core-prim . string-normalize-nfkd)
        (g$12371$7lS0C core-prim . string-normalize-nfkc)
        (g$12370$7lS0C core-prim . string-normalize-nfd)
        (g$12369$7lS0C core-prim . string-normalize-nfc)
        (g$12368$7lS0C core-prim . string-foldcase)
        (g$12367$7lS0C core-prim . string-downcase)
        (g$6951$7lS0C core-prim . string-ci>?)
        (g$6953$7lS0C core-prim . string-ci>=?)
        (g$6949$7lS0C core-prim . string-ci=?)
        (g$6950$7lS0C core-prim . string-ci<?)
        (g$6952$7lS0C core-prim . string-ci<=?)
        (g$12366$7lS0C core-prim . char-whitespace?)
        (g$12365$7lS0C core-prim . char-upper-case?)
        (g$12364$7lS0C core-prim . char-title-case?)
        (g$12363$7lS0C core-prim . char-numeric?)
        (g$12362$7lS0C core-prim . char-lower-case?)
        (g$12361$7lS0C core-prim . char-general-category)
        (g$12360$7lS0C core-prim . char-upcase)
        (g$12359$7lS0C core-prim . char-titlecase)
        (g$12358$7lS0C core-prim . char-foldcase)
        (g$12357$7lS0C core-prim . char-downcase)
        (g$6990$7lS0C core-prim . char-ci>?)
        (g$6992$7lS0C core-prim . char-ci>=?)
        (g$6988$7lS0C core-prim . char-ci=?)
        (g$6989$7lS0C core-prim . char-ci<?)
        (g$6991$7lS0C core-prim . char-ci<=?)
        (g$12356$7lS0C core-prim . char-alphabetic?)
        (g$8445$7lS0C core-prim . variable-transformer-procedure)
        (g$8444$7lS0C core-prim . variable-transformer?)
        (g$8443$7lS0C core-prim . make-variable-transformer)
        (g$8842$7lS0C core-prim . identifier?)
        (g$8831$7lS0C core-prim . generate-temporaries)
        (g$8832$7lS0C core-prim . free-identifier=?)
        (g$8844$7lS0C core-prim . syntax->datum)
        (g$8843$7lS0C core-prim . datum->syntax)
        (g$8833$7lS0C core-prim . bound-identifier=?)
        (g$12355$7lS0C core-prim . record-type-descriptor?)
        (g$12354$7lS0C core-prim . record-predicate)
        (g$12353$7lS0C core-prim . record-mutator)
        (g$12352$7lS0C core-prim . record-constructor)
        (g$12351$7lS0C core-prim . record-accessor)
        (g$12350$7lS0C core-prim . make-record-type-descriptor)
        (g$12349$7lS0C core-prim . make-record-constructor-descriptor)
        (g$12348$7lS0C core-prim . record?)
        (g$12347$7lS0C core-prim . record-type-uid)
        (g$12346$7lS0C core-prim . record-type-sealed?)
        (g$12345$7lS0C core-prim . record-type-parent)
        (g$12344$7lS0C core-prim . record-type-opaque?)
        (g$12343$7lS0C core-prim . record-type-name)
        (g$12342$7lS0C core-prim . record-type-generative?)
        (g$12341$7lS0C core-prim . record-type-field-names)
        (g$12340$7lS0C core-prim . record-rtd)
        (g$12339$7lS0C core-prim . record-field-mutable?)
        (g$6527$7lS0C core-prim . delete-file)
        (g$6526$7lS0C core-prim . file-exists?)
        (g$12338$7lS0C core-prim . vector-sort!)
        (g$12337$7lS0C core-prim . vector-sort)
        (g$6891$7lS0C core-prim . list-sort)
        (g$12336$7lS0C core-prim . symbol-hash)
        (g$12335$7lS0C core-prim . string-ci-hash)
        (g$12334$7lS0C core-prim . string-hash)
        (g$12333$7lS0C core-prim . equal-hash)
        (g$12332$7lS0C core-prim . hashtable-equivalence-function)
        (g$12331$7lS0C core-prim . make-hashtable)
        (g$12330$7lS0C core-prim . hashtable-hash-function)
        (g$6495$7lS0C core-prim . make-eqv-hashtable)
        (g$6494$7lS0C core-prim . make-eq-hashtable)
        (g$12329$7lS0C core-prim . hashtable?)
        (g$6501$7lS0C core-prim . hashtable-update!)
        (g$6496$7lS0C core-prim . hashtable-size)
        (g$6498$7lS0C core-prim . hashtable-set!)
        (g$6497$7lS0C core-prim . hashtable-ref)
        (g$12328$7lS0C core-prim . hashtable-mutable?)
        (g$12327$7lS0C core-prim . hashtable-keys)
        (g$12326$7lS0C core-prim . hashtable-entries)
        (g$6499$7lS0C core-prim . hashtable-delete!)
        (g$12325$7lS0C core-prim . hashtable-copy)
        (g$6500$7lS0C core-prim . hashtable-contains?)
        (g$6502$7lS0C core-prim . hashtable-clear!)
        (g$7369$7lS0C core-prim . call-with-output-file)
        (g$7368$7lS0C core-prim . call-with-input-file)
        (g$12324$7lS0C core-prim . write-char)
        (g$12323$7lS0C core-prim . write)
        (g$7367$7lS0C core-prim . with-output-to-file)
        (g$7366$7lS0C core-prim . with-input-from-file)
        (g$12322$7lS0C core-prim . read-char)
        (g$12321$7lS0C core-prim . read)
        (g$12320$7lS0C core-prim . peek-char)
        (g$12319$7lS0C core-prim . open-output-file)
        (g$12318$7lS0C core-prim . open-input-file)
        (g$12317$7lS0C core-prim . newline)
        (g$12316$7lS0C core-prim . display)
        (g$12315$7lS0C core-prim . close-output-port)
        (g$12314$7lS0C core-prim . close-input-port)
        (g$12313$7lS0C core-prim . eof-object?)
        (g$12312$7lS0C core-prim . eof-object)
        (g$12311$7lS0C core-prim . current-error-port)
        (g$12310$7lS0C core-prim . current-output-port)
        (g$12309$7lS0C core-prim . current-input-port)
        (g$12308$7lS0C core-prim . output-port?)
        (g$12307$7lS0C core-prim . input-port?)
        (g$12306$7lS0C core-prim . utf-8-codec)
        (g$12305$7lS0C core-prim . utf-16-codec)
        (g$12304$7lS0C core-prim . transcoder-error-handling-mode)
        (g$12303$7lS0C core-prim . transcoder-eol-style)
        (g$12302$7lS0C core-prim . transcoder-codec)
        (g$12301$7lS0C core-prim . transcoded-port)
        (g$12300$7lS0C core-prim . textual-port?)
        (g$12299$7lS0C core-prim . string->bytevector)
        (g$12298$7lS0C core-prim . standard-output-port)
        (g$12297$7lS0C core-prim . standard-input-port)
        (g$12296$7lS0C core-prim . standard-error-port)
        (g$12295$7lS0C core-prim . set-port-position!)
        (g$12294$7lS0C core-prim . put-u8)
        (g$12293$7lS0C core-prim . put-string)
        (g$12292$7lS0C core-prim . put-datum)
        (g$12291$7lS0C core-prim . put-char)
        (g$12290$7lS0C core-prim . put-bytevector)
        (g$7342$7lS0C core-prim . port?)
        (g$12289$7lS0C core-prim . port-transcoder)
        (g$12288$7lS0C core-prim . port-position)
        (g$12287$7lS0C core-prim . port-has-set-port-position!?)
        (g$12286$7lS0C core-prim . port-has-port-position?)
        (g$12285$7lS0C core-prim . port-eof?)
        (g$12284$7lS0C core-prim . output-port-buffer-mode)
        (g$7341$7lS0C core-prim . open-string-output-port)
        (g$12283$7lS0C core-prim . open-string-input-port)
        (g$12282$7lS0C core-prim . open-file-output-port)
        (g$12281$7lS0C core-prim . open-file-input/output-port)
        (g$12280$7lS0C core-prim . open-file-input-port)
        (g$12279$7lS0C core-prim . open-bytevector-output-port)
        (g$12278$7lS0C core-prim . open-bytevector-input-port)
        (g$12277$7lS0C core-prim . native-transcoder)
        (g$12276$7lS0C core-prim . native-eol-style)
        (g$12275$7lS0C core-prim . make-transcoder)
        (g$12274$7lS0C core-prim . latin-1-codec)
        (g$7197$7lS0C core-prim . make-i/o-write-error)
        (g$7183$7lS0C core-prim . make-i/o-read-error)
        (g$7302$7lS0C core-prim . make-i/o-port-error)
        (g$7212$7lS0C core-prim . make-i/o-invalid-position-error)
        (g$7229$7lS0C core-prim . make-i/o-filename-error)
        (g$7245$7lS0C core-prim . make-i/o-file-protection-error)
        (g$7259$7lS0C core-prim . make-i/o-file-is-read-only-error)
        (g$7287$7lS0C core-prim . make-i/o-file-does-not-exist-error)
        (g$7273$7lS0C core-prim . make-i/o-file-already-exists-error)
        (g$7169$7lS0C core-prim . make-i/o-error)
        (g$7333$7lS0C core-prim . make-i/o-encoding-error)
        (g$7318$7lS0C core-prim . make-i/o-decoding-error)
        (g$12273$7lS0C core-prim . make-custom-textual-output-port)
        (g$12272$7lS0C core-prim . make-custom-textual-input/output-port)
        (g$12271$7lS0C core-prim . make-custom-textual-input-port)
        (g$12270$7lS0C core-prim . make-custom-binary-output-port)
        (g$12269$7lS0C core-prim . make-custom-binary-input/output-port)
        (g$12268$7lS0C core-prim . make-custom-binary-input-port)
        (g$12267$7lS0C core-prim . make-bytevector)
        (g$12266$7lS0C core-prim . lookahead-u8)
        (g$12265$7lS0C core-prim . lookahead-char)
        (g$7198$7lS0C core-prim . i/o-write-error?)
        (g$7184$7lS0C core-prim . i/o-read-error?)
        (g$7304$7lS0C core-prim . i/o-port-error?)
        (g$7214$7lS0C core-prim . i/o-invalid-position-error?)
        (g$7215$7lS0C core-prim . i/o-error-position)
        (g$7231$7lS0C core-prim . i/o-filename-error?)
        (g$7246$7lS0C core-prim . i/o-file-protection-error?)
        (g$7260$7lS0C core-prim . i/o-file-is-read-only-error?)
        (g$7288$7lS0C core-prim . i/o-file-does-not-exist-error?)
        (g$7274$7lS0C core-prim . i/o-file-already-exists-error?)
        (g$7170$7lS0C core-prim . i/o-error?)
        (g$7305$7lS0C core-prim . i/o-error-port)
        (g$7232$7lS0C core-prim . i/o-error-filename)
        (g$7335$7lS0C core-prim . i/o-encoding-error?)
        (g$7336$7lS0C core-prim . i/o-encoding-error-char)
        (g$7319$7lS0C core-prim . i/o-decoding-error?)
        (g$12264$7lS0C core-prim . get-u8)
        (g$12263$7lS0C core-prim . get-string-n!)
        (g$12262$7lS0C core-prim . get-string-n)
        (g$12261$7lS0C core-prim . get-string-all)
        (g$12260$7lS0C core-prim . get-line)
        (g$12259$7lS0C core-prim . get-datum)
        (g$12258$7lS0C core-prim . get-char)
        (g$12257$7lS0C core-prim . get-bytevector-some)
        (g$12256$7lS0C core-prim . get-bytevector-n!)
        (g$12255$7lS0C core-prim . get-bytevector-n)
        (g$12254$7lS0C core-prim . get-bytevector-all)
        (g$12253$7lS0C core-prim . flush-output-port)
        (g$12252$7lS0C core-prim . close-port)
        (g$7343$7lS0C core-prim . call-with-string-output-port)
        (g$12251$7lS0C core-prim . call-with-port)
        (g$12250$7lS0C core-prim . call-with-bytevector-output-port)
        (g$12249$7lS0C core-prim . bytevector->string)
        (g$12248$7lS0C core-prim . buffer-mode?)
        (g$12247$7lS0C core-prim . binary-port?)
        (g$8821$7lS0C core-prim . scheme-report-environment)
        (g$6870$7lS0C core-prim . quotient)
        (g$8820$7lS0C core-prim . null-environment)
        (g$6871$7lS0C core-prim . remainder)
        (g$6872$7lS0C core-prim . modulo)
        (g$12246$7lS0C core-prim . inexact->exact)
        (g$6874$7lS0C core-prim . force)
        (g$12245$7lS0C core-prim . exact->inexact)
        (g$12244$7lS0C core-prim . exit)
        (g$11822$7lS0C core-prim . command-line)
        (g$12243$7lS0C core-prim . string-fill!)
        (g$12242$7lS0C core-prim . string-set!)
        (g$12241$7lS0C core-prim . set-cdr!)
        (g$12240$7lS0C core-prim . set-car!)
        (g$5873$7lS0C core-prim . remove)
        (g$5874$7lS0C core-prim . remv)
        (g$5854$7lS0C core-prim . remp)
        (g$5875$7lS0C core-prim . remq)
        (g$5853$7lS0C core-prim . partition)
        (g$5861$7lS0C core-prim . memv)
        (g$5860$7lS0C core-prim . memq)
        (g$5863$7lS0C core-prim . memp)
        (g$5862$7lS0C core-prim . member)
        (g$5867$7lS0C core-prim . exists)
        (g$5866$7lS0C core-prim . for-all)
        (g$5872$7lS0C core-prim . fold-right)
        (g$5871$7lS0C core-prim . fold-left)
        (g$5852$7lS0C core-prim . find)
        (g$5855$7lS0C core-prim . filter)
        (g$5870$7lS0C core-prim . cons*)
        (g$5857$7lS0C core-prim . assv)
        (g$5856$7lS0C core-prim . assq)
        (g$5859$7lS0C core-prim . assp)
        (g$5858$7lS0C core-prim . assoc)
        (g$12239$7lS0C core-prim . with-exception-handler)
        (g$12238$7lS0C core-prim . raise-continuable)
        (g$12237$7lS0C core-prim . raise)
        (g$8823$7lS0C core-prim . eval)
        (g$8819$7lS0C core-prim . environment)
        (g$7427$7lS0C core-prim . make-enumeration)
        (g$7434$7lS0C core-prim . enum-set=?)
        (g$7428$7lS0C core-prim . enum-set-universe)
        (g$7435$7lS0C core-prim . enum-set-union)
        (g$7433$7lS0C core-prim . enum-set-subset?)
        (g$7439$7lS0C core-prim . enum-set-projection)
        (g$7432$7lS0C core-prim . enum-set-member?)
        (g$7436$7lS0C core-prim . enum-set-intersection)
        (g$7429$7lS0C core-prim . enum-set-indexer)
        (g$7437$7lS0C core-prim . enum-set-difference)
        (g$7430$7lS0C core-prim . enum-set-constructor)
        (g$7438$7lS0C core-prim . enum-set-complement)
        (g$7431$7lS0C core-prim . enum-set->list)
        (g$6781$7lS0C core-prim . who-condition?)
        (g$6692$7lS0C core-prim . warning?)
        (g$6734$7lS0C core-prim . violation?)
        (g$6858$7lS0C core-prim . undefined-violation?)
        (g$6842$7lS0C core-prim . syntax-violation?)
        (g$6844$7lS0C core-prim . syntax-violation-subform)
        (g$6843$7lS0C core-prim . syntax-violation-form)
        (g$8841$7lS0C core-prim . syntax-violation)
        (g$12236$7lS0C core-prim . simple-conditions)
        (g$6706$7lS0C core-prim . serious-condition?)
        (g$6796$7lS0C core-prim . non-continuable-violation?)
        (g$6677$7lS0C core-prim . message-condition?)
        (g$6779$7lS0C core-prim . make-who-condition)
        (g$6691$7lS0C core-prim . make-warning)
        (g$6733$7lS0C core-prim . make-violation)
        (g$6857$7lS0C core-prim . make-undefined-violation)
        (g$6839$7lS0C core-prim . make-syntax-violation)
        (g$6705$7lS0C core-prim . make-serious-condition)
        (g$6795$7lS0C core-prim . make-non-continuable-violation)
        (g$6675$7lS0C core-prim . make-message-condition)
        (g$6823$7lS0C core-prim . make-lexical-violation)
        (g$6762$7lS0C core-prim . make-irritants-condition)
        (g$6809$7lS0C core-prim . make-implementation-restriction-violation)
        (g$6719$7lS0C core-prim . make-error)
        (g$6747$7lS0C core-prim . make-assertion-violation)
        (g$6824$7lS0C core-prim . lexical-violation?)
        (g$6764$7lS0C core-prim . irritants-condition?)
        (g$6810$7lS0C core-prim . implementation-restriction-violation?)
        (g$6720$7lS0C core-prim . error?)
        (g$6782$7lS0C core-prim . condition-who)
        (g$12235$7lS0C core-prim . condition-predicate)
        (g$6678$7lS0C core-prim . condition-message)
        (g$6765$7lS0C core-prim . condition-irritants)
        (g$12234$7lS0C core-prim . condition-accessor)
        (g$12233$7lS0C core-prim . condition)
        (g$6748$7lS0C core-prim . assertion-violation?)
        (g$12232$7lS0C core-prim . condition?)
        (g$12231$7lS0C core-prim . utf32->string)
        (g$12230$7lS0C core-prim . utf16->string)
        (g$12229$7lS0C core-prim . utf8->string)
        (g$12228$7lS0C core-prim . uint-list->bytevector)
        (g$12227$7lS0C core-prim . u8-list->bytevector)
        (g$12226$7lS0C core-prim . string->utf8)
        (g$12225$7lS0C core-prim . string->utf32)
        (g$12224$7lS0C core-prim . string->utf16)
        (g$12223$7lS0C core-prim . sint-list->bytevector)
        (g$6533$7lS0C core-prim . native-endianness)
        (g$12222$7lS0C core-prim . bytevector?)
        (g$12221$7lS0C core-prim . bytevector=?)
        (g$12220$7lS0C core-prim . bytevector-uint-set!)
        (g$12219$7lS0C core-prim . bytevector-uint-ref)
        (g$12218$7lS0C core-prim . bytevector-u8-set!)
        (g$12217$7lS0C core-prim . bytevector-u8-ref)
        (g$6554$7lS0C core-prim . bytevector-u64-set!)
        (g$6550$7lS0C core-prim . bytevector-u64-ref)
        (g$6556$7lS0C core-prim . bytevector-u64-native-set!)
        (g$6552$7lS0C core-prim . bytevector-u64-native-ref)
        (g$6546$7lS0C core-prim . bytevector-u32-set!)
        (g$6542$7lS0C core-prim . bytevector-u32-ref)
        (g$6548$7lS0C core-prim . bytevector-u32-native-set!)
        (g$6544$7lS0C core-prim . bytevector-u32-native-ref)
        (g$6538$7lS0C core-prim . bytevector-u16-set!)
        (g$6534$7lS0C core-prim . bytevector-u16-ref)
        (g$6540$7lS0C core-prim . bytevector-u16-native-set!)
        (g$6536$7lS0C core-prim . bytevector-u16-native-ref)
        (g$12216$7lS0C core-prim . bytevector-sint-set!)
        (g$12215$7lS0C core-prim . bytevector-sint-ref)
        (g$12214$7lS0C core-prim . bytevector-s8-set!)
        (g$12213$7lS0C core-prim . bytevector-s8-ref)
        (g$6555$7lS0C core-prim . bytevector-s64-set!)
        (g$6551$7lS0C core-prim . bytevector-s64-ref)
        (g$6557$7lS0C core-prim . bytevector-s64-native-set!)
        (g$6553$7lS0C core-prim . bytevector-s64-native-ref)
        (g$6547$7lS0C core-prim . bytevector-s32-set!)
        (g$6543$7lS0C core-prim . bytevector-s32-ref)
        (g$6549$7lS0C core-prim . bytevector-s32-native-set!)
        (g$6545$7lS0C core-prim . bytevector-s32-native-ref)
        (g$6539$7lS0C core-prim . bytevector-s16-set!)
        (g$6535$7lS0C core-prim . bytevector-s16-ref)
        (g$6541$7lS0C core-prim . bytevector-s16-native-set!)
        (g$6537$7lS0C core-prim . bytevector-s16-native-ref)
        (g$12212$7lS0C core-prim . bytevector-length)
        (g$12211$7lS0C core-prim . bytevector-ieee-single-set!)
        (g$12210$7lS0C core-prim . bytevector-ieee-single-ref)
        (g$6560$7lS0C core-prim . bytevector-ieee-single-native-set!)
        (g$6558$7lS0C core-prim . bytevector-ieee-single-native-ref)
        (g$12209$7lS0C core-prim . bytevector-ieee-double-set!)
        (g$12208$7lS0C core-prim . bytevector-ieee-double-ref)
        (g$6561$7lS0C core-prim . bytevector-ieee-double-native-set!)
        (g$6559$7lS0C core-prim . bytevector-ieee-double-native-ref)
        (g$12207$7lS0C core-prim . bytevector-fill!)
        (g$12206$7lS0C core-prim . bytevector-copy!)
        (g$12205$7lS0C core-prim . bytevector-copy)
        (g$12204$7lS0C core-prim . bytevector->uint-list)
        (g$12203$7lS0C core-prim . bytevector->u8-list)
        (g$12202$7lS0C core-prim . bytevector->sint-list)
        (g$7155$7lS0C core-prim . no-nans-violation?)
        (g$7141$7lS0C core-prim . no-infinities-violation?)
        (g$7154$7lS0C core-prim . make-no-nans-violation)
        (g$7140$7lS0C core-prim . make-no-infinities-violation)
        (g$12201$7lS0C core-prim . real->flonum)
        (g$12200$7lS0C core-prim . flzero?)
        (g$12199$7lS0C core-prim . fltruncate)
        (g$12198$7lS0C core-prim . fltan)
        (g$12197$7lS0C core-prim . flsqrt)
        (g$12196$7lS0C core-prim . flsin)
        (g$12195$7lS0C core-prim . flround)
        (g$12194$7lS0C core-prim . flpositive?)
        (g$12193$7lS0C core-prim . flonum?)
        (g$12192$7lS0C core-prim . flodd?)
        (g$12191$7lS0C core-prim . flnumerator)
        (g$12190$7lS0C core-prim . flnegative?)
        (g$12189$7lS0C core-prim . flnan?)
        (g$12188$7lS0C core-prim . flmod0)
        (g$12187$7lS0C core-prim . flmod)
        (g$12186$7lS0C core-prim . flmin)
        (g$12185$7lS0C core-prim . flmax)
        (g$12184$7lS0C core-prim . fllog)
        (g$12183$7lS0C core-prim . flinteger?)
        (g$12182$7lS0C core-prim . flinfinite?)
        (g$12181$7lS0C core-prim . flfloor)
        (g$12180$7lS0C core-prim . flfinite?)
        (g$12179$7lS0C core-prim . flexpt)
        (g$12178$7lS0C core-prim . flexp)
        (g$12177$7lS0C core-prim . fleven?)
        (g$12176$7lS0C core-prim . fldiv0-and-mod0)
        (g$12175$7lS0C core-prim . fldiv0)
        (g$12174$7lS0C core-prim . fldiv-and-mod)
        (g$12173$7lS0C core-prim . fldiv)
        (g$12172$7lS0C core-prim . fldenominator)
        (g$12171$7lS0C core-prim . flcos)
        (g$12170$7lS0C core-prim . flceiling)
        (g$12169$7lS0C core-prim . flatan)
        (g$12168$7lS0C core-prim . flasin)
        (g$12167$7lS0C core-prim . flacos)
        (g$12166$7lS0C core-prim . flabs)
        (g$12165$7lS0C core-prim . fl>?)
        (g$12164$7lS0C core-prim . fl>=?)
        (g$12163$7lS0C core-prim . fl=?)
        (g$12162$7lS0C core-prim . fl<?)
        (g$12161$7lS0C core-prim . fl<=?)
        (g$12160$7lS0C core-prim . fl/)
        (g$12159$7lS0C core-prim . fl-)
        (g$12158$7lS0C core-prim . fl+)
        (g$12157$7lS0C core-prim . fl*)
        (g$12156$7lS0C core-prim . fixnum->flonum)
        (g$12155$7lS0C core-prim . fxzero?)
        (g$12154$7lS0C core-prim . fxxor)
        (g$7087$7lS0C core-prim . fxrotate-bit-field)
        (g$12153$7lS0C core-prim . fxreverse-bit-field)
        (g$12152$7lS0C core-prim . fxpositive?)
        (g$12151$7lS0C core-prim . fxodd?)
        (g$12150$7lS0C core-prim . fxnot)
        (g$12149$7lS0C core-prim . fxnegative?)
        (g$12148$7lS0C core-prim . fxmod0)
        (g$12147$7lS0C core-prim . fxmod)
        (g$12146$7lS0C core-prim . fxmin)
        (g$12145$7lS0C core-prim . fxmax)
        (g$12144$7lS0C core-prim . fxlength)
        (g$12143$7lS0C core-prim . fxior)
        (g$7081$7lS0C core-prim . fxif)
        (g$12142$7lS0C core-prim . fxfirst-bit-set)
        (g$12141$7lS0C core-prim . fxeven?)
        (g$12140$7lS0C core-prim . fxdiv0-and-mod0)
        (g$12139$7lS0C core-prim . fxdiv0)
        (g$12138$7lS0C core-prim . fxdiv-and-mod)
        (g$12137$7lS0C core-prim . fxdiv)
        (g$7084$7lS0C core-prim . fxcopy-bit-field)
        (g$7082$7lS0C core-prim . fxcopy-bit)
        (g$12136$7lS0C core-prim . fxbit-set?)
        (g$7083$7lS0C core-prim . fxbit-field)
        (g$12135$7lS0C core-prim . fxbit-count)
        (g$7086$7lS0C core-prim . fxarithmetic-shift-right)
        (g$7085$7lS0C core-prim . fxarithmetic-shift-left)
        (g$12134$7lS0C core-prim . fxarithmetic-shift)
        (g$12133$7lS0C core-prim . fxand)
        (g$12132$7lS0C core-prim . fx>?)
        (g$12131$7lS0C core-prim . fx>=?)
        (g$12130$7lS0C core-prim . fx=?)
        (g$12129$7lS0C core-prim . fx<?)
        (g$12128$7lS0C core-prim . fx<=?)
        (g$7079$7lS0C core-prim . fx-/carry)
        (g$12127$7lS0C core-prim . fx-)
        (g$7080$7lS0C core-prim . fx+/carry)
        (g$12126$7lS0C core-prim . fx+)
        (g$7078$7lS0C core-prim . fx*/carry)
        (g$12125$7lS0C core-prim . fx*)
        (g$12124$7lS0C core-prim . greatest-fixnum)
        (g$12123$7lS0C core-prim . least-fixnum)
        (g$12122$7lS0C core-prim . fixnum-width)
        (g$12121$7lS0C core-prim . fixnum?)
        (g$7052$7lS0C core-prim . bitwise-rotate-bit-field)
        (g$12120$7lS0C core-prim . bitwise-reverse-bit-field)
        (g$12119$7lS0C core-prim . bitwise-length)
        (g$7046$7lS0C core-prim . bitwise-if)
        (g$12118$7lS0C core-prim . bitwise-first-bit-set)
        (g$7049$7lS0C core-prim . bitwise-copy-bit-field)
        (g$7047$7lS0C core-prim . bitwise-copy-bit)
        (g$12117$7lS0C core-prim . bitwise-bit-set?)
        (g$7048$7lS0C core-prim . bitwise-bit-field)
        (g$12116$7lS0C core-prim . bitwise-bit-count)
        (g$12115$7lS0C core-prim . bitwise-xor)
        (g$12114$7lS0C core-prim . bitwise-ior)
        (g$12113$7lS0C core-prim . bitwise-and)
        (g$12112$7lS0C core-prim . bitwise-not)
        (g$7051$7lS0C core-prim . bitwise-arithmetic-shift-right)
        (g$7050$7lS0C core-prim . bitwise-arithmetic-shift-left)
        (g$12111$7lS0C core-prim . bitwise-arithmetic-shift)
        (g$12110$7lS0C core-prim . zero?)
        (g$12109$7lS0C core-prim . vector?)
        (g$12108$7lS0C core-prim . vector-set!)
        (g$12107$7lS0C core-prim . vector-ref)
        (g$12106$7lS0C core-prim . vector-map)
        (g$12105$7lS0C core-prim . vector-length)
        (g$12104$7lS0C core-prim . vector-for-each)
        (g$12103$7lS0C core-prim . vector-fill!)
        (g$12102$7lS0C core-prim . vector->list)
        (g$12101$7lS0C core-prim . vector)
        (g$12100$7lS0C core-prim . values)
        (g$12099$7lS0C core-prim . truncate)
        (g$12098$7lS0C core-prim . tan)
        (g$12097$7lS0C core-prim . symbol?)
        (g$6053$7lS0C core-prim . symbol=?)
        (g$12096$7lS0C core-prim . symbol->string)
        (g$12095$7lS0C core-prim . substring)
        (g$12094$7lS0C core-prim . string?)
        (g$6050$7lS0C core-prim . string>?)
        (g$6052$7lS0C core-prim . string>=?)
        (g$6048$7lS0C core-prim . string=?)
        (g$6049$7lS0C core-prim . string<?)
        (g$6051$7lS0C core-prim . string<=?)
        (g$12093$7lS0C core-prim . string-ref)
        (g$12092$7lS0C core-prim . string-length)
        (g$12091$7lS0C core-prim . string-for-each)
        (g$12090$7lS0C core-prim . string-copy)
        (g$12089$7lS0C core-prim . string-append)
        (g$12088$7lS0C core-prim . string->symbol)
        (g$12087$7lS0C core-prim . string->number)
        (g$12086$7lS0C core-prim . string->list)
        (g$12085$7lS0C core-prim . string)
        (g$12084$7lS0C core-prim . sqrt)
        (g$12083$7lS0C core-prim . sin)
        (g$12082$7lS0C core-prim . round)
        (g$12081$7lS0C core-prim . reverse)
        (g$12080$7lS0C core-prim . real?)
        (g$12079$7lS0C core-prim . real-valued?)
        (g$12078$7lS0C core-prim . real-part)
        (g$6094$7lS0C core-prim . rationalize)
        (g$12077$7lS0C core-prim . rational?)
        (g$12076$7lS0C core-prim . rational-valued?)
        (g$12075$7lS0C core-prim . procedure?)
        (g$12074$7lS0C core-prim . positive?)
        (g$12073$7lS0C core-prim . pair?)
        (g$12072$7lS0C core-prim . odd?)
        (g$12071$7lS0C core-prim . numerator)
        (g$12070$7lS0C core-prim . number?)
        (g$12069$7lS0C core-prim . number->string)
        (g$12068$7lS0C core-prim . null?)
        (g$12067$7lS0C core-prim . not)
        (g$12066$7lS0C core-prim . negative?)
        (g$12065$7lS0C core-prim . nan?)
        (g$12064$7lS0C core-prim . min)
        (g$12063$7lS0C core-prim . max)
        (g$5868$7lS0C core-prim . map)
        (g$12062$7lS0C core-prim . make-vector)
        (g$12061$7lS0C core-prim . make-string)
        (g$12060$7lS0C core-prim . make-rectangular)
        (g$12059$7lS0C core-prim . make-polar)
        (g$12058$7lS0C core-prim . magnitude)
        (g$12057$7lS0C core-prim . log)
        (g$12056$7lS0C core-prim . list?)
        (g$5848$7lS0C core-prim . list-tail)
        (g$5849$7lS0C core-prim . list-ref)
        (g$12055$7lS0C core-prim . list->vector)
        (g$12054$7lS0C core-prim . list->string)
        (g$12053$7lS0C core-prim . list)
        (g$12052$7lS0C core-prim . length)
        (g$12051$7lS0C core-prim . lcm)
        (g$12050$7lS0C core-prim . integer?)
        (g$12049$7lS0C core-prim . integer-valued?)
        (g$12048$7lS0C core-prim . integer->char)
        (g$12047$7lS0C core-prim . infinite?)
        (g$12046$7lS0C core-prim . inexact?)
        (g$12045$7lS0C core-prim . inexact)
        (g$12044$7lS0C core-prim . imag-part)
        (g$12043$7lS0C core-prim . gcd)
        (g$5869$7lS0C core-prim . for-each)
        (g$12042$7lS0C core-prim . floor)
        (g$12041$7lS0C core-prim . finite?)
        (g$12040$7lS0C core-prim . expt)
        (g$12039$7lS0C core-prim . exp)
        (g$12038$7lS0C core-prim . exact?)
        (g$12037$7lS0C core-prim . exact-integer-sqrt)
        (g$12036$7lS0C core-prim . exact)
        (g$12035$7lS0C core-prim . even?)
        (g$12034$7lS0C core-prim . error)
        (g$12033$7lS0C core-prim . eqv?)
        (g$12032$7lS0C core-prim . equal?)
        (g$12031$7lS0C core-prim . eq?)
        (g$12030$7lS0C core-prim . dynamic-wind)
        (g$12029$7lS0C core-prim . div0-and-mod0)
        (g$12028$7lS0C core-prim . mod0)
        (g$12027$7lS0C core-prim . div0)
        (g$12026$7lS0C core-prim . div-and-mod)
        (g$12025$7lS0C core-prim . mod)
        (g$12024$7lS0C core-prim . div)
        (g$12023$7lS0C core-prim . denominator)
        (g$12022$7lS0C core-prim . cos)
        (g$12021$7lS0C core-prim . cons)
        (g$12020$7lS0C core-prim . complex?)
        (g$12019$7lS0C core-prim . char?)
        (g$6091$7lS0C core-prim . char>?)
        (g$6093$7lS0C core-prim . char>=?)
        (g$6089$7lS0C core-prim . char=?)
        (g$6090$7lS0C core-prim . char<?)
        (g$6092$7lS0C core-prim . char<=?)
        (g$12018$7lS0C core-prim . char->integer)
        (g$12017$7lS0C core-prim . ceiling)
        (g$12016$7lS0C core-prim . call-with-values)
        (g$12015$7lS0C core-prim . call/cc)
        (g$12014$7lS0C core-prim . call-with-current-continuation)
        (g$6013$7lS0C core-prim . cddddr)
        (g$6012$7lS0C core-prim . cdddar)
        (g$6011$7lS0C core-prim . cddadr)
        (g$6010$7lS0C core-prim . cddaar)
        (g$6009$7lS0C core-prim . cdaddr)
        (g$6008$7lS0C core-prim . cdadar)
        (g$6007$7lS0C core-prim . cdaadr)
        (g$6006$7lS0C core-prim . cdaaar)
        (g$6005$7lS0C core-prim . cadddr)
        (g$6004$7lS0C core-prim . caddar)
        (g$6003$7lS0C core-prim . cadadr)
        (g$6002$7lS0C core-prim . cadaar)
        (g$6001$7lS0C core-prim . caaddr)
        (g$6000$7lS0C core-prim . caadar)
        (g$5999$7lS0C core-prim . caaadr)
        (g$5998$7lS0C core-prim . caaaar)
        (g$5997$7lS0C core-prim . cdddr)
        (g$5996$7lS0C core-prim . cddar)
        (g$5995$7lS0C core-prim . cdadr)
        (g$5994$7lS0C core-prim . cdaar)
        (g$5993$7lS0C core-prim . caddr)
        (g$5992$7lS0C core-prim . cadar)
        (g$5991$7lS0C core-prim . caadr)
        (g$5990$7lS0C core-prim . caaar)
        (g$5989$7lS0C core-prim . cddr)
        (g$5988$7lS0C core-prim . cdar)
        (g$5987$7lS0C core-prim . cadr)
        (g$5986$7lS0C core-prim . caar)
        (g$12013$7lS0C core-prim . cdr)
        (g$12012$7lS0C core-prim . car)
        (g$12011$7lS0C core-prim . boolean?)
        (g$6054$7lS0C core-prim . boolean=?)
        (g$12010$7lS0C core-prim . atan)
        (g$12009$7lS0C core-prim . assertion-violation)
        (g$12008$7lS0C core-prim . asin)
        (g$12007$7lS0C core-prim . apply)
        (g$12006$7lS0C core-prim . append)
        (g$12005$7lS0C core-prim . angle)
        (g$12004$7lS0C core-prim . acos)
        (g$12003$7lS0C core-prim . abs)
        (g$12002$7lS0C core-prim . /)
        (g$12001$7lS0C core-prim . *)
        (g$12000$7lS0C core-prim . -)
        (g$11999$7lS0C core-prim . +)
        (g$11998$7lS0C core-prim . >=)
        (g$11997$7lS0C core-prim . >)
        (g$11996$7lS0C core-prim . =)
        (g$11995$7lS0C core-prim . <=)
        (g$11994$7lS0C core-prim . <)
        (g$11993$7lS0C core-prim . make-record-printer)
        (g$11992$7lS0C core-prim . eqv-hash)
        (g$11991$7lS0C core-prim . reverse!)
        (g$11990$7lS0C core-prim . deserialize-port)
        (g$11989$7lS0C core-prim . serialize-port)
        (g$7402$7lS0C core-prim . enum-set?)
        (g$6873$7lS0C core-prim . make-promise)
        (g$11824$7lS0C core-prim . load/args)
        (g$7513$7lS0C core-prim . printf)
        (g$7514$7lS0C core-prim . fprintf)
        (g$7515$7lS0C core-prim . format)
        (g$11988$7lS0C core-prim . procedure-form)
        (g$11987$7lS0C core-prim . procedure-environment)
        (g$11986$7lS0C core-prim . procedure-name)
        (g$11985$7lS0C core-prim . procedure-arity)
        (g$11984$7lS0C core-prim . gc-collect)
        (g$11983$7lS0C core-prim . clr-type?)
        (g$11982$7lS0C core-prim . get-clr-type)
        (g$11981$7lS0C core-prim . get-command-line)
        (g$11980$7lS0C core-prim . vector-append)
        (g$11979$7lS0C core-prim . vector-filter)
        (g$11978$7lS0C core-prim . vector-reverse!)
        (g$11977$7lS0C core-prim . vector-contains?)
        (g$11976$7lS0C core-prim . vector-index-of)
        (g$11975$7lS0C core-prim . vector-copy)
        (g$11974$7lS0C core-prim . vector-binary-search)
        (g$11973$7lS0C core-prim . string-ci-compare)
        (g$11972$7lS0C core-prim . string-compare)
        (g$11971$7lS0C core-prim . string-format)
        (g$11821$7lS0C core-prim . trace-printer)
        (g$11970$7lS0C core-prim . make-traced-procedure)
        (g$7535$7lS0C core-prim . make-traced-macro)
        (g$8837$7lS0C core-prim . assertion-error)
        (g$11969$7lS0C core-prim . time-it)
        (g$7542$7lS0C core-prim . make-parameter)
        (g$11968$7lS0C core-prim . library-locator)
        (g$11967$7lS0C core-prim . get-library-paths)
        (g$11966$7lS0C core-prim . open-tcp-input/output-port)
        (g$11965$7lS0C core-prim . hashtable-for-each)
        (g$11964$7lS0C core-prim . hashtable-map)
        (g$8815$7lS0C core-prim . environment-bindings)
        (g$8818$7lS0C core-prim . environment-symbols)
        (g$8814$7lS0C core-prim . interaction-environment-symbols)
        (g$11963$7lS0C core-prim . optimization-level)
        (g$7997$7lS0C core-prim . library-path)
        (g$8824$7lS0C core-prim . expand->core)
        (g$8822$7lS0C core-prim . expand)
        (g$11962$7lS0C $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11961$7lS0C $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11960$7lS0C $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11959$7lS0C $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11958$7lS0C $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11957$7lS0C
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11956$7lS0C
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11955$7lS0C
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11954$7lS0C
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11953$7lS0C $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11952$7lS0C
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11951$7lS0C $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11950$7lS0C $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11949$7lS0C $core-rtd &i/o-rtd &i/o-rcd)
        (g$11948$7lS0C $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11947$7lS0C $core-rtd &undefined-rtd &undefined-rcd)
        (g$11946$7lS0C $core-rtd &syntax-rtd &syntax-rcd)
        (g$11945$7lS0C $core-rtd &lexical-rtd &lexical-rcd)
        (g$11944$7lS0C
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11943$7lS0C $core-rtd &who-rtd &who-rcd)
        (g$11942$7lS0C $core-rtd &irritants-rtd &irritants-rcd)
        (g$11941$7lS0C $core-rtd &assertion-rtd &assertion-rcd)
        (g$11940$7lS0C $core-rtd &violation-rtd &violation-rcd)
        (g$11939$7lS0C $core-rtd &error-rtd &error-rcd)
        (g$11938$7lS0C $core-rtd &serious-rtd &serious-rcd)
        (g$11937$7lS0C $core-rtd &warning-rtd &warning-rcd)
        (g$11936$7lS0C $core-rtd &message-rtd &message-rcd)
        (g$11935$7lS0C $core-rtd &condition-rtd &condition-rcd)
        (g$11934$7lS0C macro . define-condition-type)
        (g$11933$7lS0C macro . define-enumeration)
        (g$11932$7lS0C macro . define-record-type)
        (g$11931$7lS0C macro . parent-rtd)
        (g$11930$7lS0C macro . nongenerative)
        (g$11929$7lS0C macro . opaque)
        (g$11928$7lS0C macro . sealed)
        (g$11927$7lS0C macro . protocol)
        (g$11926$7lS0C macro . parent)
        (g$11925$7lS0C macro . immutable)
        (g$11924$7lS0C macro . mutable)
        (g$11923$7lS0C macro . fields)
        (g$11922$7lS0C macro . error-handling-mode)
        (g$11921$7lS0C macro . file-options)
        (g$11920$7lS0C macro . buffer-mode)
        (g$11919$7lS0C macro . eol-style)
        (g$11918$7lS0C macro . guard)
        (g$11917$7lS0C macro . trace-letrec-syntax)
        (g$11916$7lS0C macro . trace-let-syntax)
        (g$11915$7lS0C macro . trace-define-syntax)
        (g$11914$7lS0C macro . trace-define)
        (g$11913$7lS0C macro . trace-lambda)
        (g$11912$7lS0C macro . unsyntax-splicing)
        (g$11911$7lS0C macro . unsyntax)
        (g$11910$7lS0C macro . unquote-splicing)
        (g$11909$7lS0C macro . unquote)
        (g$11908$7lS0C macro . _)
        (g$11907$7lS0C macro . else)
        (g$11906$7lS0C macro . =>)
        (g$11905$7lS0C macro . ...)
        (g$11904$7lS0C macro . assert)
        (g$11903$7lS0C macro . endianness)
        (g$11902$7lS0C macro . delay)
        (g$11901$7lS0C macro . time)
        (g$11900$7lS0C macro . or)
        (g$11899$7lS0C macro . and)
        (g$11898$7lS0C macro . do)
        (g$11897$7lS0C macro . cond)
        (g$11896$7lS0C macro . let*)
        (g$11895$7lS0C macro . let)
        (g$11894$7lS0C macro . identifier-syntax)
        (g$11893$7lS0C macro . with-syntax)
        (g$11892$7lS0C macro . quasisyntax)
        (g$11891$7lS0C macro . quasiquote)
        (g$11890$7lS0C macro . syntax-rules)
        (g$11889$7lS0C macro . include-into)
        (g$11888$7lS0C macro . include)
        (g$11887$7lS0C macro . define-struct)
        (g$11886$7lS0C macro . let-values)
        (g$11885$7lS0C macro . let*-values)
        (g$11884$7lS0C core-macro . record-constructor-descriptor)
        (g$11883$7lS0C core-macro . record-type-descriptor)
        (g$11882$7lS0C core-macro . fluid-let-syntax)
        (g$11881$7lS0C macro . case)
        (g$11880$7lS0C macro . parameterize)
        (g$11879$7lS0C macro . unless)
        (g$11878$7lS0C macro . when)
        (g$11877$7lS0C core-macro . if)
        (g$11876$7lS0C core-macro . letrec*)
        (g$11875$7lS0C core-macro . letrec)
        (g$11874$7lS0C core-macro . type-descriptor)
        (g$11873$7lS0C core-macro . case-lambda)
        (g$11872$7lS0C core-macro . lambda)
        (g$11871$7lS0C core-macro . syntax)
        (g$11870$7lS0C core-macro . syntax-case)
        (g$11869$7lS0C core-macro . quote)
        (g$11868$7lS0C core-macro . foreign-call)
        (g$11867$7lS0C letrec-syntax)
        (g$11866$7lS0C let-syntax)
        (g$11865$7lS0C set!)
        (g$11864$7lS0C export)
        (g$11863$7lS0C import)
        (g$11862$7lS0C library)
        (g$11861$7lS0C begin)
        (g$11860$7lS0C module)
        (g$11859$7lS0C define-syntax)
        (g$11858$7lS0C define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7126$7lS0C
      'g$12502$7lS0C
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12384$7lS0C)
        (eval-core . g$12383$7lS0C)
        (set-symbol-value! . g$12382$7lS0C)
        (symbol-value . g$12381$7lS0C)
        (gensym . g$12379$7lS0C)
        (void . g$12378$7lS0C))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11216$7lS0C
     g$trace-printer$11256$7lS0C
     (g$make-parameter$6590$7lS0C write))
   (g$command-line$11217$7lS0C
     g$command-line$11257$7lS0C
     (g$make-parameter$6590$7lS0C (get-command-line)))
   (g$local-library-path$11218$7lS0C
     g$local-library-path$11258$7lS0C
     (case-lambda
       ((g$filename$11229$7lS0C)
        (cons
          (g$get-directory-name$5508$7lS0C g$filename$11229$7lS0C)
          (g$library-path$7110$7lS0C)))))
   (g$load/args$11219$7lS0C
     g$load/args$11259$7lS0C
     (case-lambda
       ((g$filename$11230$7lS0C . g$args$11231$7lS0C)
        (begin
          (apply
            g$load-r6rs-top-level$11226$7lS0C
            g$filename$11230$7lS0C
            'load
            g$args$11231$7lS0C)
          (void)))))
   (g$load$11220$7lS0C
     g$load$11260$7lS0C
     (case-lambda
       ((g$filename$11232$7lS0C)
        (begin
          (apply
            g$load-r6rs-top-level$11226$7lS0C
            g$filename$11232$7lS0C
            'load
            (cdr (g$command-line$11217$7lS0C)))
          (void)))))
   (g$ironscheme-build$11221$7lS0C
     g$ironscheme-build$11261$7lS0C
     (case-lambda (() (g$load$11220$7lS0C '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11222$7lS0C
     g$eval-top-level$11262$7lS0C
     (case-lambda
       ((g$x$11233$7lS0C)
        (g$eval$11190$7lS0C
          g$x$11233$7lS0C
          (g$interaction-environment$11214$7lS0C)))))
   (g$compile-system-libraries$11223$7lS0C
     g$compile-system-libraries$11263$7lS0C
     (case-lambda
       (()
        (g$eval-top-level$11222$7lS0C
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11224$7lS0C
     g$compile$11264$7lS0C
     (case-lambda
       ((g$filename$11234$7lS0C)
        (g$load-r6rs-top-level$11226$7lS0C g$filename$11234$7lS0C 'compile))))
   (g$compile->closure$11225$7lS0C
     g$compile->closure$11265$7lS0C
     (case-lambda
       ((g$filename$11235$7lS0C)
        (g$load-r6rs-top-level$11226$7lS0C g$filename$11235$7lS0C 'closure))))
   (g$load-r6rs-top-level$11226$7lS0C
     g$load-r6rs-top-level$11266$7lS0C
     (case-lambda
       ((g$filename$11236$7lS0C g$how$11237$7lS0C . g$args$11238$7lS0C)
        ((case-lambda
           ((g$library-path$11241$7lS0C g$library-path$11242$7lS0C)
            ((case-lambda
               ((g$swap$11243$7lS0C)
                (dynamic-wind
                  g$swap$11243$7lS0C
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11244$7lS0C)
                         ((case-lambda
                            ((g$t$11245$7lS0C)
                             (if (g$memv$5052$7lS0C g$t$11245$7lS0C '(closure))
                               (g$pre-compile-r6rs-top-level$11213$7lS0C
                                 g$x*$11244$7lS0C)
                               (if (g$memv$5052$7lS0C g$t$11245$7lS0C '(load))
                                 ((case-lambda
                                    ((g$command-line$11248$7lS0C
                                       g$command-line$11249$7lS0C)
                                     ((case-lambda
                                        ((g$swap$11250$7lS0C)
                                         (dynamic-wind
                                           g$swap$11250$7lS0C
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11212$7lS0C
                                                 g$x*$11244$7lS0C))))
                                           g$swap$11250$7lS0C)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11251$7lS0C)
                                             (begin
                                               (g$command-line$11248$7lS0C
                                                 g$command-line$11249$7lS0C)
                                               (set! g$command-line$11249$7lS0C
                                                 g$t$11251$7lS0C))))
                                          (g$command-line$11248$7lS0C)))))))
                                  g$command-line$11217$7lS0C
                                  (cons
                                    g$filename$11236$7lS0C
                                    (g$map$5059$7lS0C
                                      (case-lambda
                                        ((g$x$11252$7lS0C)
                                         (g$format$6486$7lS0C
                                           '"~a"
                                           g$x$11252$7lS0C)))
                                      g$args$11238$7lS0C)))
                                 (if (g$memv$5052$7lS0C
                                       g$t$11245$7lS0C
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11212$7lS0C
                                       g$x*$11244$7lS0C)
                                     (g$serialize-all$7114$7lS0C
                                       serialize-library
                                       g$compile-core-expr$6837$7lS0C))
                                   (if '#f '#f (void)))))))
                          g$how$11237$7lS0C)))
                      (g$with-input-from-file$6313$7lS0C
                        g$filename$11236$7lS0C
                        (case-lambda
                          (()
                           ((letrec ((g$f$11253$7lS0C
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11254$7lS0C)
                                              (if (eof-object? g$x$11254$7lS0C)
                                                '()
                                                (cons
                                                  g$x$11254$7lS0C
                                                  (g$f$11253$7lS0C)))))
                                           (read-annotated))))))
                              g$f$11253$7lS0C))))))))
                  g$swap$11243$7lS0C)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11255$7lS0C)
                    (begin
                      (g$library-path$11241$7lS0C g$library-path$11242$7lS0C)
                      (set! g$library-path$11242$7lS0C g$t$11255$7lS0C))))
                 (g$library-path$11241$7lS0C)))))))
         g$library-path$7110$7lS0C
         (g$local-library-path$11218$7lS0C g$filename$11236$7lS0C)))))
   (g$fo$11227$7lS0C
     g$fo$11267$7lS0C
     (g$make-enumeration$6448$7lS0C '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7115$7lS0C
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11228$7lS0C)
         (if (g$serious-condition?$5770$7lS0C g$ex$11228$7lS0C)
           (raise g$ex$11228$7lS0C)
           (begin (display g$ex$11228$7lS0C) (newline))))))
    (set-symbol-value! 'load g$load$11220$7lS0C)
    (set-symbol-value! 'compile g$compile$11224$7lS0C)
    (set-symbol-value! 'compile->closure g$compile->closure$11225$7lS0C)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11222$7lS0C)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11181$7lS0C)
    (set-symbol-value! 'expanded2core g$expanded->core$6836$7lS0C)
    (set-symbol-value! 'trace-printer g$trace-printer$11216$7lS0C)
    (g$file-options-constructor$6591$7lS0C
      (g$enum-set-constructor$6451$7lS0C g$fo$11227$7lS0C))
    (g$library-path$7110$7lS0C (get-library-paths))))

