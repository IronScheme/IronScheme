;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$list-tail$4891$4aEQL
     g$list-tail$5028$4aEQL
     (case-lambda
       ((g$lst$4919$4aEQL g$index$4920$4aEQL)
        (if ((case-lambda
               ((g$t$4921$4aEQL)
                (if g$t$4921$4aEQL
                  g$t$4921$4aEQL
                  (begin '#f (negative? g$index$4920$4aEQL)))))
             (null? g$lst$4919$4aEQL))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$4919$4aEQL
            g$index$4920$4aEQL)
          (if (zero? g$index$4920$4aEQL)
            g$lst$4919$4aEQL
            (g$list-tail$4891$4aEQL
              (cdr g$lst$4919$4aEQL)
              (- g$index$4920$4aEQL '1)))))))
   (g$list-ref$4892$4aEQL
     g$list-ref$5029$4aEQL
     (case-lambda
       ((g$lst$4922$4aEQL g$index$4923$4aEQL)
        (car (g$list-tail$4891$4aEQL g$lst$4922$4aEQL g$index$4923$4aEQL)))))
   (g$last-pair$4893$4aEQL
     g$last-pair$5030$4aEQL
     (case-lambda
       ((g$lst$4924$4aEQL)
        (if (null? g$lst$4924$4aEQL)
          g$lst$4924$4aEQL
          (if (null? (cdr g$lst$4924$4aEQL))
            g$lst$4924$4aEQL
            (g$last-pair$4893$4aEQL (cdr g$lst$4924$4aEQL)))))))
   (g$make-list$4894$4aEQL
     g$make-list$5031$4aEQL
     (case-lambda
       ((g$n$4925$4aEQL) (list->vector (make-vector g$n$4925$4aEQL)))
       ((g$n$4926$4aEQL g$fill$4927$4aEQL)
        (list->vector (make-vector g$n$4926$4aEQL g$fill$4927$4aEQL)))))
   (g$find$4895$4aEQL
     g$find$5032$4aEQL
     (case-lambda
       ((g$proc$4928$4aEQL g$l$4929$4aEQL)
        (if (null? g$l$4929$4aEQL)
          '#f
          ((case-lambda
             ((g$e$4930$4aEQL g$r$4931$4aEQL g$proc$4932$4aEQL)
              (if (g$proc$4932$4aEQL g$e$4930$4aEQL)
                g$e$4930$4aEQL
                (g$find$4895$4aEQL g$proc$4932$4aEQL g$r$4931$4aEQL))))
           (car g$l$4929$4aEQL)
           (cdr g$l$4929$4aEQL)
           g$proc$4928$4aEQL)))))
   (g$partition$4896$4aEQL
     g$partition$5033$4aEQL
     (case-lambda
       ((g$proc$4933$4aEQL g$l$4934$4aEQL)
        ((letrec ((g$f$4935$4aEQL
                    (case-lambda
                      ((g$l$4936$4aEQL g$a$4937$4aEQL g$b$4938$4aEQL)
                       (if (null? g$l$4936$4aEQL)
                         (values
                           (reverse! g$a$4937$4aEQL)
                           (reverse! g$b$4938$4aEQL))
                         ((case-lambda
                            ((g$e$4939$4aEQL)
                             (if (g$proc$4933$4aEQL g$e$4939$4aEQL)
                               (g$f$4935$4aEQL
                                 (cdr g$l$4936$4aEQL)
                                 (cons g$e$4939$4aEQL g$a$4937$4aEQL)
                                 g$b$4938$4aEQL)
                               (g$f$4935$4aEQL
                                 (cdr g$l$4936$4aEQL)
                                 g$a$4937$4aEQL
                                 (cons g$e$4939$4aEQL g$b$4938$4aEQL)))))
                          (car g$l$4936$4aEQL)))))))
           g$f$4935$4aEQL)
         g$l$4934$4aEQL
         '()
         '()))))
   (g$remp$4897$4aEQL
     g$remp$5034$4aEQL
     (case-lambda
       ((g$proc$4940$4aEQL g$l$4941$4aEQL)
        ((letrec ((g$f$4942$4aEQL
                    (case-lambda
                      ((g$l$4943$4aEQL g$a$4944$4aEQL)
                       (if (null? g$l$4943$4aEQL)
                         (reverse! g$a$4944$4aEQL)
                         ((case-lambda
                            ((g$e$4945$4aEQL)
                             (if (g$proc$4940$4aEQL g$e$4945$4aEQL)
                               (g$f$4942$4aEQL
                                 (cdr g$l$4943$4aEQL)
                                 g$a$4944$4aEQL)
                               (g$f$4942$4aEQL
                                 (cdr g$l$4943$4aEQL)
                                 (cons g$e$4945$4aEQL g$a$4944$4aEQL)))))
                          (car g$l$4943$4aEQL)))))))
           g$f$4942$4aEQL)
         g$l$4941$4aEQL
         '()))))
   (g$filter$4898$4aEQL
     g$filter$5035$4aEQL
     (case-lambda
       ((g$proc$4946$4aEQL g$l$4947$4aEQL)
        ((letrec ((g$f$4948$4aEQL
                    (case-lambda
                      ((g$l$4949$4aEQL g$a$4950$4aEQL)
                       (if (null? g$l$4949$4aEQL)
                         (reverse! g$a$4950$4aEQL)
                         ((case-lambda
                            ((g$e$4951$4aEQL)
                             (if (g$proc$4946$4aEQL g$e$4951$4aEQL)
                               (g$f$4948$4aEQL
                                 (cdr g$l$4949$4aEQL)
                                 (cons g$e$4951$4aEQL g$a$4950$4aEQL))
                               (g$f$4948$4aEQL
                                 (cdr g$l$4949$4aEQL)
                                 g$a$4950$4aEQL))))
                          (car g$l$4949$4aEQL)))))))
           g$f$4948$4aEQL)
         g$l$4947$4aEQL
         '()))))
   (g$assq$4899$4aEQL
     g$assq$5036$4aEQL
     (case-lambda
       ((g$obj$4952$4aEQL g$lst$4953$4aEQL)
        (if (null? g$lst$4953$4aEQL)
          '#f
          ((case-lambda
             ((g$obj$4954$4aEQL g$t$4955$4aEQL g$r$4956$4aEQL)
              (if (eq? g$obj$4954$4aEQL (car g$t$4955$4aEQL))
                g$t$4955$4aEQL
                (g$assq$4899$4aEQL g$obj$4954$4aEQL g$r$4956$4aEQL))))
           g$obj$4952$4aEQL
           (car g$lst$4953$4aEQL)
           (cdr g$lst$4953$4aEQL))))))
   (g$assv$4900$4aEQL
     g$assv$5037$4aEQL
     (case-lambda
       ((g$obj$4957$4aEQL g$lst$4958$4aEQL)
        (if (null? g$lst$4958$4aEQL)
          '#f
          ((case-lambda
             ((g$obj$4959$4aEQL g$t$4960$4aEQL g$r$4961$4aEQL)
              (if (eqv? g$obj$4959$4aEQL (car g$t$4960$4aEQL))
                g$t$4960$4aEQL
                (g$assv$4900$4aEQL g$obj$4959$4aEQL g$r$4961$4aEQL))))
           g$obj$4957$4aEQL
           (car g$lst$4958$4aEQL)
           (cdr g$lst$4958$4aEQL))))))
   (g$assoc$4901$4aEQL
     g$assoc$5038$4aEQL
     (case-lambda
       ((g$obj$4962$4aEQL g$lst$4963$4aEQL)
        (if (null? g$lst$4963$4aEQL)
          '#f
          ((case-lambda
             ((g$obj$4964$4aEQL g$t$4965$4aEQL g$r$4966$4aEQL)
              (if (equal? g$obj$4964$4aEQL (car g$t$4965$4aEQL))
                g$t$4965$4aEQL
                (g$assoc$4901$4aEQL g$obj$4964$4aEQL g$r$4966$4aEQL))))
           g$obj$4962$4aEQL
           (car g$lst$4963$4aEQL)
           (cdr g$lst$4963$4aEQL))))))
   (g$assp$4902$4aEQL
     g$assp$5039$4aEQL
     (case-lambda
       ((g$p?$4967$4aEQL g$lst$4968$4aEQL)
        (if (null? g$lst$4968$4aEQL)
          '#f
          ((case-lambda
             ((g$p?$4969$4aEQL g$t$4970$4aEQL g$r$4971$4aEQL)
              (if (g$p?$4969$4aEQL (car g$t$4970$4aEQL))
                g$t$4970$4aEQL
                (g$assp$4902$4aEQL g$p?$4969$4aEQL g$r$4971$4aEQL))))
           g$p?$4967$4aEQL
           (car g$lst$4968$4aEQL)
           (cdr g$lst$4968$4aEQL))))))
   (g$memq$4903$4aEQL
     g$memq$5040$4aEQL
     (case-lambda
       ((g$obj$4972$4aEQL g$lst$4973$4aEQL)
        (if (null? g$lst$4973$4aEQL)
          '#f
          (if (eq? g$obj$4972$4aEQL (car g$lst$4973$4aEQL))
            g$lst$4973$4aEQL
            (g$memq$4903$4aEQL g$obj$4972$4aEQL (cdr g$lst$4973$4aEQL)))))))
   (g$memv$4904$4aEQL
     g$memv$5041$4aEQL
     (case-lambda
       ((g$obj$4974$4aEQL g$lst$4975$4aEQL)
        (if (null? g$lst$4975$4aEQL)
          '#f
          (if (eqv? g$obj$4974$4aEQL (car g$lst$4975$4aEQL))
            g$lst$4975$4aEQL
            (g$memv$4904$4aEQL g$obj$4974$4aEQL (cdr g$lst$4975$4aEQL)))))))
   (g$member$4905$4aEQL
     g$member$5042$4aEQL
     (case-lambda
       ((g$obj$4976$4aEQL g$lst$4977$4aEQL)
        (if (null? g$lst$4977$4aEQL)
          '#f
          (if (equal? g$obj$4976$4aEQL (car g$lst$4977$4aEQL))
            g$lst$4977$4aEQL
            (g$member$4905$4aEQL g$obj$4976$4aEQL (cdr g$lst$4977$4aEQL)))))))
   (g$memp$4906$4aEQL
     g$memp$5043$4aEQL
     (case-lambda
       ((g$p?$4978$4aEQL g$lst$4979$4aEQL)
        (if (null? g$lst$4979$4aEQL)
          '#f
          (if (g$p?$4978$4aEQL (car g$lst$4979$4aEQL))
            g$lst$4979$4aEQL
            (g$memp$4906$4aEQL g$p?$4978$4aEQL (cdr g$lst$4979$4aEQL)))))))
   (g$all-empty?$4907$4aEQL
     g$all-empty?$5044$4aEQL
     (case-lambda
       ((g$ls$4980$4aEQL)
        ((case-lambda
           ((g$t$4981$4aEQL)
            (if g$t$4981$4aEQL
              g$t$4981$4aEQL
              (begin
                '#f
                (if (null? (car g$ls$4980$4aEQL))
                  (begin '#f (g$all-empty?$4907$4aEQL (cdr g$ls$4980$4aEQL)))
                  '#f)))))
         (null? g$ls$4980$4aEQL)))))
   (g$split$4908$4aEQL
     g$split$5045$4aEQL
     (case-lambda
       ((g$ls$4982$4aEQL)
        (if (null? g$ls$4982$4aEQL)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4908$4aEQL (cdr g$ls$4982$4aEQL))))
            (case-lambda
              ((g$cars$4983$4aEQL g$cdrs$4984$4aEQL)
               ((case-lambda
                  ((g$a$4985$4aEQL)
                   (values
                     (cons (car g$a$4985$4aEQL) g$cars$4983$4aEQL)
                     (cons (cdr g$a$4985$4aEQL) g$cdrs$4984$4aEQL))))
                (car g$ls$4982$4aEQL)))))))))
   (g$for-all$4909$4aEQL
     g$for-all$5046$4aEQL
     (case-lambda
       ((g$f$4986$4aEQL . g$args$4987$4aEQL)
        (if (g$all-empty?$4907$4aEQL g$args$4987$4aEQL)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4908$4aEQL g$args$4987$4aEQL)))
            (case-lambda
              ((g$cars$4988$4aEQL g$cdrs$4989$4aEQL)
               (if (g$all-empty?$4907$4aEQL g$cdrs$4989$4aEQL)
                 (apply g$f$4986$4aEQL g$cars$4988$4aEQL)
                 (if (apply g$f$4986$4aEQL g$cars$4988$4aEQL)
                   (begin
                     '#f
                     (apply
                       g$for-all$4909$4aEQL
                       g$f$4986$4aEQL
                       g$cdrs$4989$4aEQL))
                   '#f)))))))))
   (g$exists$4910$4aEQL
     g$exists$5047$4aEQL
     (case-lambda
       ((g$f$4990$4aEQL . g$args$4991$4aEQL)
        (if (g$all-empty?$4907$4aEQL g$args$4991$4aEQL)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4908$4aEQL g$args$4991$4aEQL)))
            (case-lambda
              ((g$cars$4992$4aEQL g$cdrs$4993$4aEQL)
               ((case-lambda
                  ((g$t$4994$4aEQL)
                   (if g$t$4994$4aEQL
                     g$t$4994$4aEQL
                     (begin
                       '#f
                       (apply
                         g$exists$4910$4aEQL
                         g$f$4990$4aEQL
                         g$cdrs$4993$4aEQL)))))
                (apply g$f$4990$4aEQL g$cars$4992$4aEQL)))))))))
   (g$map$4911$4aEQL
     g$map$5048$4aEQL
     (case-lambda
       ((g$proc$4995$4aEQL . g$lists$4996$4aEQL)
        ((letrec ((g$f$4997$4aEQL
                    (case-lambda
                      ((g$lists$4998$4aEQL g$a$4999$4aEQL)
                       (if (g$all-empty?$4907$4aEQL g$lists$4998$4aEQL)
                         (reverse! g$a$4999$4aEQL)
                         (call-with-values
                           (case-lambda
                             (() (g$split$4908$4aEQL g$lists$4998$4aEQL)))
                           (case-lambda
                             ((g$cars$5000$4aEQL g$cdrs$5001$4aEQL)
                              (g$f$4997$4aEQL
                                g$cdrs$5001$4aEQL
                                (cons
                                  (apply g$proc$4995$4aEQL g$cars$5000$4aEQL)
                                  g$a$4999$4aEQL))))))))))
           g$f$4997$4aEQL)
         g$lists$4996$4aEQL
         '()))))
   (g$for-each$4912$4aEQL
     g$for-each$5049$4aEQL
     (case-lambda
       ((g$f$5002$4aEQL . g$args$5003$4aEQL)
        (if (not (g$all-empty?$4907$4aEQL g$args$5003$4aEQL))
          (call-with-values
            (case-lambda (() (g$split$4908$4aEQL g$args$5003$4aEQL)))
            (case-lambda
              ((g$cars$5004$4aEQL g$cdrs$5005$4aEQL)
               (begin
                 (apply g$f$5002$4aEQL g$cars$5004$4aEQL)
                 (apply
                   g$for-each$4912$4aEQL
                   g$f$5002$4aEQL
                   g$cdrs$5005$4aEQL)))))
          (void)))))
   (g$cons*$4913$4aEQL
     g$cons*$5050$4aEQL
     (case-lambda
       ((g$a$5006$4aEQL . g$rest$5007$4aEQL)
        ((letrec ((g$f$5008$4aEQL
                    (case-lambda
                      ((g$a$5009$4aEQL g$rest$5010$4aEQL)
                       (if (null? g$rest$5010$4aEQL)
                         g$a$5009$4aEQL
                         (cons
                           g$a$5009$4aEQL
                           (g$f$5008$4aEQL
                             (car g$rest$5010$4aEQL)
                             (cdr g$rest$5010$4aEQL))))))))
           g$f$5008$4aEQL)
         g$a$5006$4aEQL
         g$rest$5007$4aEQL))))
   (g$fold-left$4914$4aEQL
     g$fold-left$5051$4aEQL
     (case-lambda
       ((g$combine$5011$4aEQL
          g$nil$5012$4aEQL
          g$list1$5013$4aEQL
          .
          g$lists$5014$4aEQL)
        (if (null? g$list1$5013$4aEQL)
          g$nil$5012$4aEQL
          (apply
            g$fold-left$4914$4aEQL
            (g$cons*$4913$4aEQL
              g$combine$5011$4aEQL
              (apply
                g$combine$5011$4aEQL
                (g$cons*$4913$4aEQL
                  g$nil$5012$4aEQL
                  (car g$list1$5013$4aEQL)
                  (g$map$4911$4aEQL car g$lists$5014$4aEQL)))
              (cdr g$list1$5013$4aEQL)
              (g$map$4911$4aEQL cdr g$lists$5014$4aEQL)))))))
   (g$fold-right$4915$4aEQL
     g$fold-right$5052$4aEQL
     (case-lambda
       ((g$combine$5015$4aEQL
          g$nil$5016$4aEQL
          g$list1$5017$4aEQL
          .
          g$lists$5018$4aEQL)
        (if (null? g$list1$5017$4aEQL)
          g$nil$5016$4aEQL
          (apply
            g$combine$5015$4aEQL
            (append
              (list (car g$list1$5017$4aEQL))
              (g$map$4911$4aEQL car g$lists$5018$4aEQL)
              (list
                (apply
                  g$fold-right$4915$4aEQL
                  (g$cons*$4913$4aEQL
                    g$combine$5015$4aEQL
                    g$nil$5016$4aEQL
                    (cdr g$list1$5017$4aEQL)
                    (g$map$4911$4aEQL cdr g$lists$5018$4aEQL))))))))))
   (g$remove$4916$4aEQL
     g$remove$5053$4aEQL
     (case-lambda
       ((g$obj$5019$4aEQL g$list$5020$4aEQL)
        (g$remp$4897$4aEQL
          (case-lambda
            ((g$x$5021$4aEQL) (equal? g$obj$5019$4aEQL g$x$5021$4aEQL)))
          g$list$5020$4aEQL))))
   (g$remv$4917$4aEQL
     g$remv$5054$4aEQL
     (case-lambda
       ((g$obj$5022$4aEQL g$list$5023$4aEQL)
        (g$remp$4897$4aEQL
          (case-lambda
            ((g$x$5024$4aEQL) (eqv? g$obj$5022$4aEQL g$x$5024$4aEQL)))
          g$list$5023$4aEQL))))
   (g$remq$4918$4aEQL
     g$remq$5055$4aEQL
     (case-lambda
       ((g$obj$5025$4aEQL g$list$5026$4aEQL)
        (g$remp$4897$4aEQL
          (case-lambda ((g$x$5027$4aEQL) (eq? g$obj$5025$4aEQL g$x$5027$4aEQL)))
          g$list$5026$4aEQL)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5056$4aEQL
     g$caar$5211$4aEQL
     (case-lambda ((g$x$5111$4aEQL) (car (car g$x$5111$4aEQL)))))
   (g$cadr$5057$4aEQL
     g$cadr$5212$4aEQL
     (case-lambda ((g$x$5112$4aEQL) (car (cdr g$x$5112$4aEQL)))))
   (g$cdar$5058$4aEQL
     g$cdar$5213$4aEQL
     (case-lambda ((g$x$5113$4aEQL) (cdr (car g$x$5113$4aEQL)))))
   (g$cddr$5059$4aEQL
     g$cddr$5214$4aEQL
     (case-lambda ((g$x$5114$4aEQL) (cdr (cdr g$x$5114$4aEQL)))))
   (g$caaar$5060$4aEQL
     g$caaar$5215$4aEQL
     (case-lambda
       ((g$x$5115$4aEQL) (g$caar$5056$4aEQL (car g$x$5115$4aEQL)))))
   (g$caadr$5061$4aEQL
     g$caadr$5216$4aEQL
     (case-lambda
       ((g$x$5116$4aEQL) (g$caar$5056$4aEQL (cdr g$x$5116$4aEQL)))))
   (g$cadar$5062$4aEQL
     g$cadar$5217$4aEQL
     (case-lambda
       ((g$x$5117$4aEQL) (g$cadr$5057$4aEQL (car g$x$5117$4aEQL)))))
   (g$caddr$5063$4aEQL
     g$caddr$5218$4aEQL
     (case-lambda
       ((g$x$5118$4aEQL) (g$cadr$5057$4aEQL (cdr g$x$5118$4aEQL)))))
   (g$cdaar$5064$4aEQL
     g$cdaar$5219$4aEQL
     (case-lambda
       ((g$x$5119$4aEQL) (g$cdar$5058$4aEQL (car g$x$5119$4aEQL)))))
   (g$cdadr$5065$4aEQL
     g$cdadr$5220$4aEQL
     (case-lambda
       ((g$x$5120$4aEQL) (g$cdar$5058$4aEQL (cdr g$x$5120$4aEQL)))))
   (g$cddar$5066$4aEQL
     g$cddar$5221$4aEQL
     (case-lambda
       ((g$x$5121$4aEQL) (g$cddr$5059$4aEQL (car g$x$5121$4aEQL)))))
   (g$cdddr$5067$4aEQL
     g$cdddr$5222$4aEQL
     (case-lambda
       ((g$x$5122$4aEQL) (g$cddr$5059$4aEQL (cdr g$x$5122$4aEQL)))))
   (g$caaaar$5068$4aEQL
     g$caaaar$5223$4aEQL
     (case-lambda
       ((g$x$5123$4aEQL) (g$caaar$5060$4aEQL (car g$x$5123$4aEQL)))))
   (g$caaadr$5069$4aEQL
     g$caaadr$5224$4aEQL
     (case-lambda
       ((g$x$5124$4aEQL) (g$caaar$5060$4aEQL (cdr g$x$5124$4aEQL)))))
   (g$caadar$5070$4aEQL
     g$caadar$5225$4aEQL
     (case-lambda
       ((g$x$5125$4aEQL) (g$caadr$5061$4aEQL (car g$x$5125$4aEQL)))))
   (g$caaddr$5071$4aEQL
     g$caaddr$5226$4aEQL
     (case-lambda
       ((g$x$5126$4aEQL) (g$caadr$5061$4aEQL (cdr g$x$5126$4aEQL)))))
   (g$cadaar$5072$4aEQL
     g$cadaar$5227$4aEQL
     (case-lambda
       ((g$x$5127$4aEQL) (g$cadar$5062$4aEQL (car g$x$5127$4aEQL)))))
   (g$cadadr$5073$4aEQL
     g$cadadr$5228$4aEQL
     (case-lambda
       ((g$x$5128$4aEQL) (g$cadar$5062$4aEQL (cdr g$x$5128$4aEQL)))))
   (g$caddar$5074$4aEQL
     g$caddar$5229$4aEQL
     (case-lambda
       ((g$x$5129$4aEQL) (g$caddr$5063$4aEQL (car g$x$5129$4aEQL)))))
   (g$cadddr$5075$4aEQL
     g$cadddr$5230$4aEQL
     (case-lambda
       ((g$x$5130$4aEQL) (g$caddr$5063$4aEQL (cdr g$x$5130$4aEQL)))))
   (g$cdaaar$5076$4aEQL
     g$cdaaar$5231$4aEQL
     (case-lambda
       ((g$x$5131$4aEQL) (g$cdaar$5064$4aEQL (car g$x$5131$4aEQL)))))
   (g$cdaadr$5077$4aEQL
     g$cdaadr$5232$4aEQL
     (case-lambda
       ((g$x$5132$4aEQL) (g$cdaar$5064$4aEQL (cdr g$x$5132$4aEQL)))))
   (g$cdadar$5078$4aEQL
     g$cdadar$5233$4aEQL
     (case-lambda
       ((g$x$5133$4aEQL) (g$cdadr$5065$4aEQL (car g$x$5133$4aEQL)))))
   (g$cdaddr$5079$4aEQL
     g$cdaddr$5234$4aEQL
     (case-lambda
       ((g$x$5134$4aEQL) (g$cdadr$5065$4aEQL (cdr g$x$5134$4aEQL)))))
   (g$cddaar$5080$4aEQL
     g$cddaar$5235$4aEQL
     (case-lambda
       ((g$x$5135$4aEQL) (g$cddar$5066$4aEQL (car g$x$5135$4aEQL)))))
   (g$cddadr$5081$4aEQL
     g$cddadr$5236$4aEQL
     (case-lambda
       ((g$x$5136$4aEQL) (g$cddar$5066$4aEQL (cdr g$x$5136$4aEQL)))))
   (g$cdddar$5082$4aEQL
     g$cdddar$5237$4aEQL
     (case-lambda
       ((g$x$5137$4aEQL) (g$cdddr$5067$4aEQL (car g$x$5137$4aEQL)))))
   (g$cddddr$5083$4aEQL
     g$cddddr$5238$4aEQL
     (case-lambda
       ((g$x$5138$4aEQL) (g$cdddr$5067$4aEQL (cdr g$x$5138$4aEQL)))))
   (g$string=?$5090$4aEQL
     g$string=?$5239$4aEQL
     (case-lambda
       ((g$a$5139$4aEQL g$b$5140$4aEQL . g$rest$5141$4aEQL)
        (begin
          (if (not (string? g$a$5139$4aEQL))
            (assertion-violation 'string=? '"not a string" g$a$5139$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5142$4aEQL)
               (begin
                 (if (not (string? g$x$5142$4aEQL))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5142$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5143$4aEQL)
                     (begin
                       (set! g$a$5139$4aEQL g$x$5142$4aEQL)
                       g$r$5143$4aEQL)))
                  (= (string-compare g$a$5139$4aEQL g$x$5142$4aEQL) '0)))))
            (cons g$b$5140$4aEQL g$rest$5141$4aEQL))))))
   (g$string<?$5091$4aEQL
     g$string<?$5240$4aEQL
     (case-lambda
       ((g$a$5144$4aEQL g$b$5145$4aEQL . g$rest$5146$4aEQL)
        (begin
          (if (not (string? g$a$5144$4aEQL))
            (assertion-violation 'string<? '"not a string" g$a$5144$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5147$4aEQL)
               (begin
                 (if (not (string? g$x$5147$4aEQL))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5147$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5148$4aEQL)
                     (begin
                       (set! g$a$5144$4aEQL g$x$5147$4aEQL)
                       g$r$5148$4aEQL)))
                  (< (string-compare g$a$5144$4aEQL g$x$5147$4aEQL) '0)))))
            (cons g$b$5145$4aEQL g$rest$5146$4aEQL))))))
   (g$string>?$5092$4aEQL
     g$string>?$5241$4aEQL
     (case-lambda
       ((g$a$5149$4aEQL g$b$5150$4aEQL . g$rest$5151$4aEQL)
        (begin
          (if (not (string? g$a$5149$4aEQL))
            (assertion-violation 'string>? '"not a string" g$a$5149$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5152$4aEQL)
               (begin
                 (if (not (string? g$x$5152$4aEQL))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5152$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5153$4aEQL)
                     (begin
                       (set! g$a$5149$4aEQL g$x$5152$4aEQL)
                       g$r$5153$4aEQL)))
                  (> (string-compare g$a$5149$4aEQL g$x$5152$4aEQL) '0)))))
            (cons g$b$5150$4aEQL g$rest$5151$4aEQL))))))
   (g$string<=?$5093$4aEQL
     g$string<=?$5242$4aEQL
     (case-lambda
       ((g$a$5154$4aEQL g$b$5155$4aEQL . g$rest$5156$4aEQL)
        (begin
          (if (not (string? g$a$5154$4aEQL))
            (assertion-violation 'string<=? '"not a string" g$a$5154$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5157$4aEQL)
               (begin
                 (if (not (string? g$x$5157$4aEQL))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5157$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5158$4aEQL)
                     (begin
                       (set! g$a$5154$4aEQL g$x$5157$4aEQL)
                       g$r$5158$4aEQL)))
                  (<= (string-compare g$a$5154$4aEQL g$x$5157$4aEQL) '0)))))
            (cons g$b$5155$4aEQL g$rest$5156$4aEQL))))))
   (g$string>=?$5094$4aEQL
     g$string>=?$5243$4aEQL
     (case-lambda
       ((g$a$5159$4aEQL g$b$5160$4aEQL . g$rest$5161$4aEQL)
        (begin
          (if (not (string? g$a$5159$4aEQL))
            (assertion-violation 'string>=? '"not a string" g$a$5159$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5162$4aEQL)
               (begin
                 (if (not (string? g$x$5162$4aEQL))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5162$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5163$4aEQL)
                     (begin
                       (set! g$a$5159$4aEQL g$x$5162$4aEQL)
                       g$r$5163$4aEQL)))
                  (>= (string-compare g$a$5159$4aEQL g$x$5162$4aEQL) '0)))))
            (cons g$b$5160$4aEQL g$rest$5161$4aEQL))))))
   (g$symbol=?$5095$4aEQL
     g$symbol=?$5244$4aEQL
     (case-lambda
       ((g$a$5164$4aEQL g$b$5165$4aEQL . g$rest$5166$4aEQL)
        (begin
          (if (not (symbol? g$a$5164$4aEQL))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5164$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5167$4aEQL)
               (begin
                 (if (not (symbol? g$x$5167$4aEQL))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5167$4aEQL)
                   (void))
                 (eq? g$a$5164$4aEQL g$x$5167$4aEQL))))
            (cons g$b$5165$4aEQL g$rest$5166$4aEQL))))))
   (g$boolean=?$5096$4aEQL
     g$boolean=?$5245$4aEQL
     (case-lambda
       ((g$a$5168$4aEQL g$b$5169$4aEQL . g$rest$5170$4aEQL)
        (begin
          (if (not (boolean? g$a$5168$4aEQL))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5168$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5171$4aEQL)
               (begin
                 (if (not (boolean? g$x$5171$4aEQL))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5171$4aEQL)
                   (void))
                 (eq? g$a$5168$4aEQL g$x$5171$4aEQL))))
            (cons g$b$5169$4aEQL g$rest$5170$4aEQL))))))
   (g$char=?$5103$4aEQL
     g$char=?$5246$4aEQL
     (case-lambda
       ((g$a$5172$4aEQL g$b$5173$4aEQL . g$rest$5174$4aEQL)
        (begin
          (if (not (char? g$a$5172$4aEQL))
            (assertion-violation 'char=? '"not a char" g$a$5172$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5175$4aEQL)
               (begin
                 (if (not (char? g$x$5175$4aEQL))
                   (assertion-violation 'char=? '"not a char" g$x$5175$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5176$4aEQL)
                     (begin
                       (set! g$a$5172$4aEQL g$x$5175$4aEQL)
                       g$r$5176$4aEQL)))
                  (= (char->integer g$a$5172$4aEQL)
                     (char->integer g$x$5175$4aEQL))))))
            (cons g$b$5173$4aEQL g$rest$5174$4aEQL))))))
   (g$char<?$5104$4aEQL
     g$char<?$5247$4aEQL
     (case-lambda
       ((g$a$5177$4aEQL g$b$5178$4aEQL . g$rest$5179$4aEQL)
        (begin
          (if (not (char? g$a$5177$4aEQL))
            (assertion-violation 'char<? '"not a char" g$a$5177$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5180$4aEQL)
               (begin
                 (if (not (char? g$x$5180$4aEQL))
                   (assertion-violation 'char<? '"not a char" g$x$5180$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5181$4aEQL)
                     (begin
                       (set! g$a$5177$4aEQL g$x$5180$4aEQL)
                       g$r$5181$4aEQL)))
                  (< (char->integer g$a$5177$4aEQL)
                     (char->integer g$x$5180$4aEQL))))))
            (cons g$b$5178$4aEQL g$rest$5179$4aEQL))))))
   (g$char>?$5105$4aEQL
     g$char>?$5248$4aEQL
     (case-lambda
       ((g$a$5182$4aEQL g$b$5183$4aEQL . g$rest$5184$4aEQL)
        (begin
          (if (not (char? g$a$5182$4aEQL))
            (assertion-violation 'char>? '"not a char" g$a$5182$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5185$4aEQL)
               (begin
                 (if (not (char? g$x$5185$4aEQL))
                   (assertion-violation 'char>? '"not a char" g$x$5185$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5186$4aEQL)
                     (begin
                       (set! g$a$5182$4aEQL g$x$5185$4aEQL)
                       g$r$5186$4aEQL)))
                  (> (char->integer g$a$5182$4aEQL)
                     (char->integer g$x$5185$4aEQL))))))
            (cons g$b$5183$4aEQL g$rest$5184$4aEQL))))))
   (g$char<=?$5106$4aEQL
     g$char<=?$5249$4aEQL
     (case-lambda
       ((g$a$5187$4aEQL g$b$5188$4aEQL . g$rest$5189$4aEQL)
        (begin
          (if (not (char? g$a$5187$4aEQL))
            (assertion-violation 'char<=? '"not a char" g$a$5187$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5190$4aEQL)
               (begin
                 (if (not (char? g$x$5190$4aEQL))
                   (assertion-violation 'char<=? '"not a char" g$x$5190$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5191$4aEQL)
                     (begin
                       (set! g$a$5187$4aEQL g$x$5190$4aEQL)
                       g$r$5191$4aEQL)))
                  (<= (char->integer g$a$5187$4aEQL)
                      (char->integer g$x$5190$4aEQL))))))
            (cons g$b$5188$4aEQL g$rest$5189$4aEQL))))))
   (g$char>=?$5107$4aEQL
     g$char>=?$5250$4aEQL
     (case-lambda
       ((g$a$5192$4aEQL g$b$5193$4aEQL . g$rest$5194$4aEQL)
        (begin
          (if (not (char? g$a$5192$4aEQL))
            (assertion-violation 'char>=? '"not a char" g$a$5192$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5195$4aEQL)
               (begin
                 (if (not (char? g$x$5195$4aEQL))
                   (assertion-violation 'char>=? '"not a char" g$x$5195$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5196$4aEQL)
                     (begin
                       (set! g$a$5192$4aEQL g$x$5195$4aEQL)
                       g$r$5196$4aEQL)))
                  (>= (char->integer g$a$5192$4aEQL)
                      (char->integer g$x$5195$4aEQL))))))
            (cons g$b$5193$4aEQL g$rest$5194$4aEQL))))))
   (g$rationalize$5108$4aEQL
     g$rationalize$5251$4aEQL
     (case-lambda
       ((g$x$5197$4aEQL g$e$5198$4aEQL)
        (if (if (infinite? g$x$5197$4aEQL)
              (begin '#f (infinite? g$e$5198$4aEQL))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5199$4aEQL)
              (if (if (exact? g$x$5197$4aEQL)
                    (begin '#f (exact? g$e$5198$4aEQL))
                    '#f)
                g$r$5199$4aEQL
                (inexact g$r$5199$4aEQL))))
           (apply
             /
             (g$find-ratio$5109$4aEQL g$x$5197$4aEQL g$e$5198$4aEQL)))))))
   (g$find-ratio$5109$4aEQL
     g$find-ratio$5252$4aEQL
     (case-lambda
       ((g$x$5200$4aEQL g$e$5201$4aEQL)
        (g$find-ratio-between$5110$4aEQL
          (- g$x$5200$4aEQL g$e$5201$4aEQL)
          (+ g$x$5200$4aEQL g$e$5201$4aEQL)))))
   (g$find-ratio-between$5110$4aEQL
     g$find-ratio-between$5253$4aEQL
     (case-lambda
       ((g$x$5202$4aEQL g$y$5203$4aEQL)
        (letrec* ((g$sr$5204$4aEQL
                    (case-lambda
                      ((g$x$5206$4aEQL g$y$5207$4aEQL)
                       ((case-lambda
                          ((g$fx$5208$4aEQL g$fy$5209$4aEQL)
                           (if (>= g$fx$5208$4aEQL g$x$5206$4aEQL)
                             (list g$fx$5208$4aEQL '1)
                             (if (= g$fx$5208$4aEQL g$fy$5209$4aEQL)
                               ((case-lambda
                                  ((g$rat$5210$4aEQL)
                                   (list
                                     (+ (g$cadr$5057$4aEQL g$rat$5210$4aEQL)
                                        (* g$fx$5208$4aEQL
                                           (car g$rat$5210$4aEQL)))
                                     (car g$rat$5210$4aEQL))))
                                (g$sr$5204$4aEQL
                                  (/ (- g$y$5207$4aEQL g$fy$5209$4aEQL))
                                  (/ (- g$x$5206$4aEQL g$fx$5208$4aEQL))))
                               (list (+ '1 g$fx$5208$4aEQL) '1)))))
                        (exact (floor g$x$5206$4aEQL))
                        (exact (floor g$y$5207$4aEQL)))))))
          (if (< g$y$5203$4aEQL g$x$5202$4aEQL)
            (g$find-ratio-between$5110$4aEQL g$y$5203$4aEQL g$x$5202$4aEQL)
            (if (>= g$x$5202$4aEQL g$y$5203$4aEQL)
              (list g$x$5202$4aEQL '1)
              (if (positive? g$x$5202$4aEQL)
                (g$sr$5204$4aEQL g$x$5202$4aEQL g$y$5203$4aEQL)
                (if (negative? g$y$5203$4aEQL)
                  ((case-lambda
                     ((g$rat$5205$4aEQL)
                      (list
                        (- (car g$rat$5205$4aEQL))
                        (g$cadr$5057$4aEQL g$rat$5205$4aEQL))))
                   (g$sr$5204$4aEQL (- g$y$5203$4aEQL) (- g$x$5202$4aEQL)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5442$4aEQL g$using$5475$4aEQL (clr-using-internal 'system))
   (g$using$5444$4aEQL
     g$using$5476$4aEQL
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5445$4aEQL
     g$make-eq-hashtable$5477$4aEQL
     (case-lambda
       (() (g$make-eq-hashtable$5445$4aEQL '32))
       ((g$k$5454$4aEQL)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5454$4aEQL)))))
   (g$make-eqv-hashtable$5446$4aEQL
     g$make-eqv-hashtable$5478$4aEQL
     (case-lambda
       (() (g$make-eqv-hashtable$5446$4aEQL '32))
       ((g$k$5455$4aEQL) (make-hashtable eqv-hash eqv? g$k$5455$4aEQL))))
   (g$hashtable-size$5447$4aEQL
     g$hashtable-size$5479$4aEQL
     (case-lambda
       ((g$ht$5456$4aEQL)
        (clr-call-internal 'hashtable 'get_count g$ht$5456$4aEQL))))
   (g$hashtable-ref$5448$4aEQL
     g$hashtable-ref$5480$4aEQL
     (case-lambda
       ((g$ht$5457$4aEQL g$key$5458$4aEQL g$default$5459$4aEQL)
        (letrec* ((g$r$5460$4aEQL
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5457$4aEQL
                      g$key$5458$4aEQL)))
          (if (not (null? g$r$5460$4aEQL))
            g$r$5460$4aEQL
            g$default$5459$4aEQL)))))
   (g$hashtable-set!$5449$4aEQL
     g$hashtable-set!$5481$4aEQL
     (case-lambda
       ((g$ht$5461$4aEQL g$key$5462$4aEQL g$obj$5463$4aEQL)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5461$4aEQL
          g$key$5462$4aEQL
          g$obj$5463$4aEQL))))
   (g$hashtable-delete!$5450$4aEQL
     g$hashtable-delete!$5482$4aEQL
     (case-lambda
       ((g$ht$5464$4aEQL g$key$5465$4aEQL)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5464$4aEQL
          g$key$5465$4aEQL))))
   (g$hashtable-contains?$5451$4aEQL
     g$hashtable-contains?$5483$4aEQL
     (case-lambda
       ((g$ht$5466$4aEQL g$key$5467$4aEQL)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5466$4aEQL
          g$key$5467$4aEQL))))
   (g$hashtable-update!$5452$4aEQL
     g$hashtable-update!$5484$4aEQL
     (case-lambda
       ((g$ht$5468$4aEQL
          g$key$5469$4aEQL
          g$proc$5470$4aEQL
          g$default$5471$4aEQL)
        (g$hashtable-set!$5449$4aEQL
          g$ht$5468$4aEQL
          g$key$5469$4aEQL
          (g$proc$5470$4aEQL
            (g$hashtable-ref$5448$4aEQL
              g$ht$5468$4aEQL
              g$key$5469$4aEQL
              g$default$5471$4aEQL))))))
   (g$hashtable-clear!$5453$4aEQL
     g$hashtable-clear!$5485$4aEQL
     (case-lambda
       ((g$ht$5472$4aEQL) (g$hashtable-clear!$5453$4aEQL g$ht$5472$4aEQL '32))
       ((g$ht$5473$4aEQL g$k$5474$4aEQL)
        (clr-call-internal 'hashtable 'clear g$ht$5473$4aEQL)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5487$4aEQL g$using$5494$4aEQL (clr-using-internal 'system.io))
   (g$file-exists?$5488$4aEQL
     g$file-exists?$5495$4aEQL
     (case-lambda
       ((g$fn$5491$4aEQL)
        (clr-call-internal 'file 'exists '() g$fn$5491$4aEQL))))
   (g$delete-file$5489$4aEQL
     g$delete-file$5496$4aEQL
     (case-lambda
       ((g$fn$5492$4aEQL)
        (clr-call-internal 'file 'delete '() g$fn$5492$4aEQL))))
   (g$get-directory-name$5490$4aEQL
     g$get-directory-name$5497$4aEQL
     (case-lambda
       ((g$path$5493$4aEQL)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5493$4aEQL)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5498$4aEQL
     g$native-endianness$5609$4aEQL
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5499$4aEQL
     g$bytevector-u16-ref$5610$4aEQL
     (case-lambda
       ((g$bytevector$5527$4aEQL g$k$5528$4aEQL g$endianness$5529$4aEQL)
        (bytevector-uint-ref
          g$bytevector$5527$4aEQL
          g$k$5528$4aEQL
          g$endianness$5529$4aEQL
          '2))))
   (g$bytevector-s16-ref$5500$4aEQL
     g$bytevector-s16-ref$5611$4aEQL
     (case-lambda
       ((g$bytevector$5530$4aEQL g$k$5531$4aEQL g$endianness$5532$4aEQL)
        (bytevector-sint-ref
          g$bytevector$5530$4aEQL
          g$k$5531$4aEQL
          g$endianness$5532$4aEQL
          '2))))
   (g$bytevector-u16-native-ref$5501$4aEQL
     g$bytevector-u16-native-ref$5612$4aEQL
     (case-lambda
       ((g$bytevector$5533$4aEQL g$k$5534$4aEQL)
        (bytevector-uint-ref
          g$bytevector$5533$4aEQL
          g$k$5534$4aEQL
          (g$native-endianness$5498$4aEQL)
          '2))))
   (g$bytevector-s16-native-ref$5502$4aEQL
     g$bytevector-s16-native-ref$5613$4aEQL
     (case-lambda
       ((g$bytevector$5535$4aEQL g$k$5536$4aEQL)
        (bytevector-sint-ref
          g$bytevector$5535$4aEQL
          g$k$5536$4aEQL
          (g$native-endianness$5498$4aEQL)
          '2))))
   (g$bytevector-u16-set!$5503$4aEQL
     g$bytevector-u16-set!$5614$4aEQL
     (case-lambda
       ((g$bytevector$5537$4aEQL
          g$k$5538$4aEQL
          g$n$5539$4aEQL
          g$endianness$5540$4aEQL)
        (bytevector-uint-set!
          g$bytevector$5537$4aEQL
          g$k$5538$4aEQL
          g$n$5539$4aEQL
          g$endianness$5540$4aEQL
          '2))))
   (g$bytevector-s16-set!$5504$4aEQL
     g$bytevector-s16-set!$5615$4aEQL
     (case-lambda
       ((g$bytevector$5541$4aEQL
          g$k$5542$4aEQL
          g$n$5543$4aEQL
          g$endianness$5544$4aEQL)
        (bytevector-sint-set!
          g$bytevector$5541$4aEQL
          g$k$5542$4aEQL
          g$n$5543$4aEQL
          g$endianness$5544$4aEQL
          '2))))
   (g$bytevector-u16-native-set!$5505$4aEQL
     g$bytevector-u16-native-set!$5616$4aEQL
     (case-lambda
       ((g$bytevector$5545$4aEQL g$k$5546$4aEQL g$n$5547$4aEQL)
        (bytevector-uint-set!
          g$bytevector$5545$4aEQL
          g$k$5546$4aEQL
          g$n$5547$4aEQL
          (g$native-endianness$5498$4aEQL)
          '2))))
   (g$bytevector-s16-native-set!$5506$4aEQL
     g$bytevector-s16-native-set!$5617$4aEQL
     (case-lambda
       ((g$bytevector$5548$4aEQL g$k$5549$4aEQL g$n$5550$4aEQL)
        (bytevector-sint-set!
          g$bytevector$5548$4aEQL
          g$k$5549$4aEQL
          g$n$5550$4aEQL
          (g$native-endianness$5498$4aEQL)
          '2))))
   (g$bytevector-u32-ref$5507$4aEQL
     g$bytevector-u32-ref$5618$4aEQL
     (case-lambda
       ((g$bytevector$5551$4aEQL g$k$5552$4aEQL g$endianness$5553$4aEQL)
        (bytevector-uint-ref
          g$bytevector$5551$4aEQL
          g$k$5552$4aEQL
          g$endianness$5553$4aEQL
          '4))))
   (g$bytevector-s32-ref$5508$4aEQL
     g$bytevector-s32-ref$5619$4aEQL
     (case-lambda
       ((g$bytevector$5554$4aEQL g$k$5555$4aEQL g$endianness$5556$4aEQL)
        (bytevector-sint-ref
          g$bytevector$5554$4aEQL
          g$k$5555$4aEQL
          g$endianness$5556$4aEQL
          '4))))
   (g$bytevector-u32-native-ref$5509$4aEQL
     g$bytevector-u32-native-ref$5620$4aEQL
     (case-lambda
       ((g$bytevector$5557$4aEQL g$k$5558$4aEQL)
        (bytevector-uint-ref
          g$bytevector$5557$4aEQL
          g$k$5558$4aEQL
          (g$native-endianness$5498$4aEQL)
          '4))))
   (g$bytevector-s32-native-ref$5510$4aEQL
     g$bytevector-s32-native-ref$5621$4aEQL
     (case-lambda
       ((g$bytevector$5559$4aEQL g$k$5560$4aEQL)
        (bytevector-sint-ref
          g$bytevector$5559$4aEQL
          g$k$5560$4aEQL
          (g$native-endianness$5498$4aEQL)
          '4))))
   (g$bytevector-u32-set!$5511$4aEQL
     g$bytevector-u32-set!$5622$4aEQL
     (case-lambda
       ((g$bytevector$5561$4aEQL
          g$k$5562$4aEQL
          g$n$5563$4aEQL
          g$endianness$5564$4aEQL)
        (bytevector-uint-set!
          g$bytevector$5561$4aEQL
          g$k$5562$4aEQL
          g$n$5563$4aEQL
          g$endianness$5564$4aEQL
          '4))))
   (g$bytevector-s32-set!$5512$4aEQL
     g$bytevector-s32-set!$5623$4aEQL
     (case-lambda
       ((g$bytevector$5565$4aEQL
          g$k$5566$4aEQL
          g$n$5567$4aEQL
          g$endianness$5568$4aEQL)
        (bytevector-sint-set!
          g$bytevector$5565$4aEQL
          g$k$5566$4aEQL
          g$n$5567$4aEQL
          g$endianness$5568$4aEQL
          '4))))
   (g$bytevector-u32-native-set!$5513$4aEQL
     g$bytevector-u32-native-set!$5624$4aEQL
     (case-lambda
       ((g$bytevector$5569$4aEQL g$k$5570$4aEQL g$n$5571$4aEQL)
        (bytevector-uint-set!
          g$bytevector$5569$4aEQL
          g$k$5570$4aEQL
          g$n$5571$4aEQL
          (g$native-endianness$5498$4aEQL)
          '4))))
   (g$bytevector-s32-native-set!$5514$4aEQL
     g$bytevector-s32-native-set!$5625$4aEQL
     (case-lambda
       ((g$bytevector$5572$4aEQL g$k$5573$4aEQL g$n$5574$4aEQL)
        (bytevector-sint-set!
          g$bytevector$5572$4aEQL
          g$k$5573$4aEQL
          g$n$5574$4aEQL
          (g$native-endianness$5498$4aEQL)
          '4))))
   (g$bytevector-u64-ref$5515$4aEQL
     g$bytevector-u64-ref$5626$4aEQL
     (case-lambda
       ((g$bytevector$5575$4aEQL g$k$5576$4aEQL g$endianness$5577$4aEQL)
        (bytevector-uint-ref
          g$bytevector$5575$4aEQL
          g$k$5576$4aEQL
          g$endianness$5577$4aEQL
          '8))))
   (g$bytevector-s64-ref$5516$4aEQL
     g$bytevector-s64-ref$5627$4aEQL
     (case-lambda
       ((g$bytevector$5578$4aEQL g$k$5579$4aEQL g$endianness$5580$4aEQL)
        (bytevector-sint-ref
          g$bytevector$5578$4aEQL
          g$k$5579$4aEQL
          g$endianness$5580$4aEQL
          '8))))
   (g$bytevector-u64-native-ref$5517$4aEQL
     g$bytevector-u64-native-ref$5628$4aEQL
     (case-lambda
       ((g$bytevector$5581$4aEQL g$k$5582$4aEQL)
        (bytevector-uint-ref
          g$bytevector$5581$4aEQL
          g$k$5582$4aEQL
          (g$native-endianness$5498$4aEQL)
          '8))))
   (g$bytevector-s64-native-ref$5518$4aEQL
     g$bytevector-s64-native-ref$5629$4aEQL
     (case-lambda
       ((g$bytevector$5583$4aEQL g$k$5584$4aEQL)
        (bytevector-sint-ref
          g$bytevector$5583$4aEQL
          g$k$5584$4aEQL
          (g$native-endianness$5498$4aEQL)
          '8))))
   (g$bytevector-u64-set!$5519$4aEQL
     g$bytevector-u64-set!$5630$4aEQL
     (case-lambda
       ((g$bytevector$5585$4aEQL
          g$k$5586$4aEQL
          g$n$5587$4aEQL
          g$endianness$5588$4aEQL)
        (bytevector-uint-set!
          g$bytevector$5585$4aEQL
          g$k$5586$4aEQL
          g$n$5587$4aEQL
          g$endianness$5588$4aEQL
          '8))))
   (g$bytevector-s64-set!$5520$4aEQL
     g$bytevector-s64-set!$5631$4aEQL
     (case-lambda
       ((g$bytevector$5589$4aEQL
          g$k$5590$4aEQL
          g$n$5591$4aEQL
          g$endianness$5592$4aEQL)
        (bytevector-sint-set!
          g$bytevector$5589$4aEQL
          g$k$5590$4aEQL
          g$n$5591$4aEQL
          g$endianness$5592$4aEQL
          '8))))
   (g$bytevector-u64-native-set!$5521$4aEQL
     g$bytevector-u64-native-set!$5632$4aEQL
     (case-lambda
       ((g$bytevector$5593$4aEQL g$k$5594$4aEQL g$n$5595$4aEQL)
        (bytevector-uint-set!
          g$bytevector$5593$4aEQL
          g$k$5594$4aEQL
          g$n$5595$4aEQL
          (g$native-endianness$5498$4aEQL)
          '8))))
   (g$bytevector-s64-native-set!$5522$4aEQL
     g$bytevector-s64-native-set!$5633$4aEQL
     (case-lambda
       ((g$bytevector$5596$4aEQL g$k$5597$4aEQL g$n$5598$4aEQL)
        (bytevector-sint-set!
          g$bytevector$5596$4aEQL
          g$k$5597$4aEQL
          g$n$5598$4aEQL
          (g$native-endianness$5498$4aEQL)
          '8))))
   (g$bytevector-ieee-single-native-ref$5523$4aEQL
     g$bytevector-ieee-single-native-ref$5634$4aEQL
     (case-lambda
       ((g$bytevector$5599$4aEQL g$k$5600$4aEQL)
        (if (not (zero? (mod g$k$5600$4aEQL '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5600$4aEQL)
          (bytevector-ieee-single-ref
            g$bytevector$5599$4aEQL
            g$k$5600$4aEQL
            (g$native-endianness$5498$4aEQL))))))
   (g$bytevector-ieee-double-native-ref$5524$4aEQL
     g$bytevector-ieee-double-native-ref$5635$4aEQL
     (case-lambda
       ((g$bytevector$5601$4aEQL g$k$5602$4aEQL)
        (if (not (zero? (mod g$k$5602$4aEQL '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5602$4aEQL)
          (bytevector-ieee-double-ref
            g$bytevector$5601$4aEQL
            g$k$5602$4aEQL
            (g$native-endianness$5498$4aEQL))))))
   (g$bytevector-ieee-single-native-set!$5525$4aEQL
     g$bytevector-ieee-single-native-set!$5636$4aEQL
     (case-lambda
       ((g$bytevector$5603$4aEQL g$k$5604$4aEQL g$x$5605$4aEQL)
        (if (not (zero? (mod g$k$5604$4aEQL '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5604$4aEQL)
          (bytevector-ieee-single-set!
            g$bytevector$5603$4aEQL
            g$k$5604$4aEQL
            g$x$5605$4aEQL
            (g$native-endianness$5498$4aEQL))))))
   (g$bytevector-ieee-double-native-set!$5526$4aEQL
     g$bytevector-ieee-double-native-set!$5637$4aEQL
     (case-lambda
       ((g$bytevector$5606$4aEQL g$k$5607$4aEQL g$x$5608$4aEQL)
        (if (not (zero? (mod g$k$5607$4aEQL '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5607$4aEQL)
          (bytevector-ieee-double-set!
            g$bytevector$5606$4aEQL
            g$k$5607$4aEQL
            g$x$5608$4aEQL
            (g$native-endianness$5498$4aEQL)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6637$5638$4aEQL
     g$6637$5733$4aEQL
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6640$4aEQL
       '#f
       '#f
       '#()))
   (g$6639$5639$4aEQL g$6639$5734$4aEQL '#f)
   (g$6638$5640$4aEQL
     g$6638$5735$4aEQL
     (make-record-constructor-descriptor
       g$6637$5638$4aEQL
       '#f
       g$6639$5639$4aEQL))
   (g$&condition?$5641$4aEQL
     g$&condition?$5736$4aEQL
     (record-predicate g$6637$5638$4aEQL))
   (g$make-&condition$5642$4aEQL
     g$make-&condition$5737$4aEQL
     (record-constructor g$6638$5640$4aEQL))
   (g$&condition-rtd$5643$4aEQL
     g$&condition-rtd$5738$4aEQL
     g$6637$5638$4aEQL)
   (g$&condition-rcd$5644$4aEQL
     g$&condition-rcd$5739$4aEQL
     g$6638$5640$4aEQL)
   (g$6653$5645$4aEQL
     g$6653$5740$4aEQL
     (make-record-type-descriptor
       '&message
       g$6637$5638$4aEQL
       'g$6656$4aEQL
       '#f
       '#f
       '#((immutable message))))
   (g$6655$5646$4aEQL g$6655$5741$4aEQL '#f)
   (g$6654$5647$4aEQL
     g$6654$5742$4aEQL
     (make-record-constructor-descriptor
       g$6653$5645$4aEQL
       g$6638$5640$4aEQL
       g$6655$5646$4aEQL))
   (g$6652$5648$4aEQL
     g$6652$5743$4aEQL
     (record-predicate g$6653$5645$4aEQL))
   (g$make-message-condition$5649$4aEQL
     g$make-message-condition$5744$4aEQL
     (record-constructor g$6654$5647$4aEQL))
   (g$6651$5650$4aEQL
     g$6651$5745$4aEQL
     (record-accessor g$6653$5645$4aEQL '0))
   (g$message-condition?$5651$4aEQL
     g$message-condition?$5746$4aEQL
     (condition-predicate g$6653$5645$4aEQL))
   (g$condition-message$5652$4aEQL
     g$condition-message$5747$4aEQL
     (condition-accessor g$6653$5645$4aEQL g$6651$5650$4aEQL))
   (g$6669$5653$4aEQL
     g$6669$5748$4aEQL
     (make-record-type-descriptor
       '&warning
       g$6637$5638$4aEQL
       'g$6672$4aEQL
       '#f
       '#f
       '#()))
   (g$6671$5654$4aEQL g$6671$5749$4aEQL '#f)
   (g$6670$5655$4aEQL
     g$6670$5750$4aEQL
     (make-record-constructor-descriptor
       g$6669$5653$4aEQL
       g$6638$5640$4aEQL
       g$6671$5654$4aEQL))
   (g$6668$5656$4aEQL
     g$6668$5751$4aEQL
     (record-predicate g$6669$5653$4aEQL))
   (g$make-warning$5657$4aEQL
     g$make-warning$5752$4aEQL
     (record-constructor g$6670$5655$4aEQL))
   (g$warning?$5658$4aEQL
     g$warning?$5753$4aEQL
     (condition-predicate g$6669$5653$4aEQL))
   (g$6683$5659$4aEQL
     g$6683$5754$4aEQL
     (make-record-type-descriptor
       '&serious
       g$6637$5638$4aEQL
       'g$6686$4aEQL
       '#f
       '#f
       '#()))
   (g$6685$5660$4aEQL g$6685$5755$4aEQL '#f)
   (g$6684$5661$4aEQL
     g$6684$5756$4aEQL
     (make-record-constructor-descriptor
       g$6683$5659$4aEQL
       g$6638$5640$4aEQL
       g$6685$5660$4aEQL))
   (g$6682$5662$4aEQL
     g$6682$5757$4aEQL
     (record-predicate g$6683$5659$4aEQL))
   (g$make-serious-condition$5663$4aEQL
     g$make-serious-condition$5758$4aEQL
     (record-constructor g$6684$5661$4aEQL))
   (g$serious-condition?$5664$4aEQL
     g$serious-condition?$5759$4aEQL
     (condition-predicate g$6683$5659$4aEQL))
   (g$6697$5665$4aEQL
     g$6697$5760$4aEQL
     (make-record-type-descriptor
       '&error
       g$6683$5659$4aEQL
       'g$6700$4aEQL
       '#f
       '#f
       '#()))
   (g$6699$5666$4aEQL g$6699$5761$4aEQL '#f)
   (g$6698$5667$4aEQL
     g$6698$5762$4aEQL
     (make-record-constructor-descriptor
       g$6697$5665$4aEQL
       g$6684$5661$4aEQL
       g$6699$5666$4aEQL))
   (g$6696$5668$4aEQL
     g$6696$5763$4aEQL
     (record-predicate g$6697$5665$4aEQL))
   (g$make-error$5669$4aEQL
     g$make-error$5764$4aEQL
     (record-constructor g$6698$5667$4aEQL))
   (g$error?$5670$4aEQL
     g$error?$5765$4aEQL
     (condition-predicate g$6697$5665$4aEQL))
   (g$6711$5671$4aEQL
     g$6711$5766$4aEQL
     (make-record-type-descriptor
       '&violation
       g$6683$5659$4aEQL
       'g$6714$4aEQL
       '#f
       '#f
       '#()))
   (g$6713$5672$4aEQL g$6713$5767$4aEQL '#f)
   (g$6712$5673$4aEQL
     g$6712$5768$4aEQL
     (make-record-constructor-descriptor
       g$6711$5671$4aEQL
       g$6684$5661$4aEQL
       g$6713$5672$4aEQL))
   (g$6710$5674$4aEQL
     g$6710$5769$4aEQL
     (record-predicate g$6711$5671$4aEQL))
   (g$make-violation$5675$4aEQL
     g$make-violation$5770$4aEQL
     (record-constructor g$6712$5673$4aEQL))
   (g$violation?$5676$4aEQL
     g$violation?$5771$4aEQL
     (condition-predicate g$6711$5671$4aEQL))
   (g$6725$5677$4aEQL
     g$6725$5772$4aEQL
     (make-record-type-descriptor
       '&assertion
       g$6711$5671$4aEQL
       'g$6728$4aEQL
       '#f
       '#f
       '#()))
   (g$6727$5678$4aEQL g$6727$5773$4aEQL '#f)
   (g$6726$5679$4aEQL
     g$6726$5774$4aEQL
     (make-record-constructor-descriptor
       g$6725$5677$4aEQL
       g$6712$5673$4aEQL
       g$6727$5678$4aEQL))
   (g$6724$5680$4aEQL
     g$6724$5775$4aEQL
     (record-predicate g$6725$5677$4aEQL))
   (g$make-assertion-violation$5681$4aEQL
     g$make-assertion-violation$5776$4aEQL
     (record-constructor g$6726$5679$4aEQL))
   (g$assertion-violation?$5682$4aEQL
     g$assertion-violation?$5777$4aEQL
     (condition-predicate g$6725$5677$4aEQL))
   (g$6740$5683$4aEQL
     g$6740$5778$4aEQL
     (make-record-type-descriptor
       '&irritants
       g$6637$5638$4aEQL
       'g$6743$4aEQL
       '#f
       '#f
       '#((immutable irritants))))
   (g$6742$5684$4aEQL g$6742$5779$4aEQL '#f)
   (g$6741$5685$4aEQL
     g$6741$5780$4aEQL
     (make-record-constructor-descriptor
       g$6740$5683$4aEQL
       g$6638$5640$4aEQL
       g$6742$5684$4aEQL))
   (g$6739$5686$4aEQL
     g$6739$5781$4aEQL
     (record-predicate g$6740$5683$4aEQL))
   (g$make-irritants-condition$5687$4aEQL
     g$make-irritants-condition$5782$4aEQL
     (record-constructor g$6741$5685$4aEQL))
   (g$6738$5688$4aEQL
     g$6738$5783$4aEQL
     (record-accessor g$6740$5683$4aEQL '0))
   (g$irritants-condition?$5689$4aEQL
     g$irritants-condition?$5784$4aEQL
     (condition-predicate g$6740$5683$4aEQL))
   (g$condition-irritants$5690$4aEQL
     g$condition-irritants$5785$4aEQL
     (condition-accessor g$6740$5683$4aEQL g$6738$5688$4aEQL))
   (g$6757$5691$4aEQL
     g$6757$5786$4aEQL
     (make-record-type-descriptor
       '&who
       g$6637$5638$4aEQL
       'g$6760$4aEQL
       '#f
       '#f
       '#((immutable who))))
   (g$6759$5692$4aEQL g$6759$5787$4aEQL '#f)
   (g$6758$5693$4aEQL
     g$6758$5788$4aEQL
     (make-record-constructor-descriptor
       g$6757$5691$4aEQL
       g$6638$5640$4aEQL
       g$6759$5692$4aEQL))
   (g$6756$5694$4aEQL
     g$6756$5789$4aEQL
     (record-predicate g$6757$5691$4aEQL))
   (g$make-who-condition$5695$4aEQL
     g$make-who-condition$5790$4aEQL
     (record-constructor g$6758$5693$4aEQL))
   (g$6755$5696$4aEQL
     g$6755$5791$4aEQL
     (record-accessor g$6757$5691$4aEQL '0))
   (g$who-condition?$5697$4aEQL
     g$who-condition?$5792$4aEQL
     (condition-predicate g$6757$5691$4aEQL))
   (g$condition-who$5698$4aEQL
     g$condition-who$5793$4aEQL
     (condition-accessor g$6757$5691$4aEQL g$6755$5696$4aEQL))
   (g$6773$5699$4aEQL
     g$6773$5794$4aEQL
     (make-record-type-descriptor
       '&non-continuable
       g$6711$5671$4aEQL
       'g$6776$4aEQL
       '#f
       '#f
       '#()))
   (g$6775$5700$4aEQL g$6775$5795$4aEQL '#f)
   (g$6774$5701$4aEQL
     g$6774$5796$4aEQL
     (make-record-constructor-descriptor
       g$6773$5699$4aEQL
       g$6712$5673$4aEQL
       g$6775$5700$4aEQL))
   (g$6772$5702$4aEQL
     g$6772$5797$4aEQL
     (record-predicate g$6773$5699$4aEQL))
   (g$make-non-continuable-violation$5703$4aEQL
     g$make-non-continuable-violation$5798$4aEQL
     (record-constructor g$6774$5701$4aEQL))
   (g$non-continuable-violation?$5704$4aEQL
     g$non-continuable-violation?$5799$4aEQL
     (condition-predicate g$6773$5699$4aEQL))
   (g$6787$5705$4aEQL
     g$6787$5800$4aEQL
     (make-record-type-descriptor
       '&implementation-restriction
       g$6711$5671$4aEQL
       'g$6790$4aEQL
       '#f
       '#f
       '#()))
   (g$6789$5706$4aEQL g$6789$5801$4aEQL '#f)
   (g$6788$5707$4aEQL
     g$6788$5802$4aEQL
     (make-record-constructor-descriptor
       g$6787$5705$4aEQL
       g$6712$5673$4aEQL
       g$6789$5706$4aEQL))
   (g$6786$5708$4aEQL
     g$6786$5803$4aEQL
     (record-predicate g$6787$5705$4aEQL))
   (g$make-implementation-restriction-violation$5709$4aEQL
     g$make-implementation-restriction-violation$5804$4aEQL
     (record-constructor g$6788$5707$4aEQL))
   (g$implementation-restriction-violation?$5710$4aEQL
     g$implementation-restriction-violation?$5805$4aEQL
     (condition-predicate g$6787$5705$4aEQL))
   (g$6801$5711$4aEQL
     g$6801$5806$4aEQL
     (make-record-type-descriptor
       '&lexical
       g$6711$5671$4aEQL
       'g$6804$4aEQL
       '#f
       '#f
       '#()))
   (g$6803$5712$4aEQL g$6803$5807$4aEQL '#f)
   (g$6802$5713$4aEQL
     g$6802$5808$4aEQL
     (make-record-constructor-descriptor
       g$6801$5711$4aEQL
       g$6712$5673$4aEQL
       g$6803$5712$4aEQL))
   (g$6800$5714$4aEQL
     g$6800$5809$4aEQL
     (record-predicate g$6801$5711$4aEQL))
   (g$make-lexical-violation$5715$4aEQL
     g$make-lexical-violation$5810$4aEQL
     (record-constructor g$6802$5713$4aEQL))
   (g$lexical-violation?$5716$4aEQL
     g$lexical-violation?$5811$4aEQL
     (condition-predicate g$6801$5711$4aEQL))
   (g$6817$5717$4aEQL
     g$6817$5812$4aEQL
     (make-record-type-descriptor
       '&syntax
       g$6711$5671$4aEQL
       'g$6820$4aEQL
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6819$5718$4aEQL g$6819$5813$4aEQL '#f)
   (g$6818$5719$4aEQL
     g$6818$5814$4aEQL
     (make-record-constructor-descriptor
       g$6817$5717$4aEQL
       g$6712$5673$4aEQL
       g$6819$5718$4aEQL))
   (g$6816$5720$4aEQL
     g$6816$5815$4aEQL
     (record-predicate g$6817$5717$4aEQL))
   (g$make-syntax-violation$5721$4aEQL
     g$make-syntax-violation$5816$4aEQL
     (record-constructor g$6818$5719$4aEQL))
   (g$6814$5722$4aEQL
     g$6814$5817$4aEQL
     (record-accessor g$6817$5717$4aEQL '0))
   (g$6815$5723$4aEQL
     g$6815$5818$4aEQL
     (record-accessor g$6817$5717$4aEQL '1))
   (g$syntax-violation?$5724$4aEQL
     g$syntax-violation?$5819$4aEQL
     (condition-predicate g$6817$5717$4aEQL))
   (g$syntax-violation-form$5725$4aEQL
     g$syntax-violation-form$5820$4aEQL
     (condition-accessor g$6817$5717$4aEQL g$6814$5722$4aEQL))
   (g$syntax-violation-subform$5726$4aEQL
     g$syntax-violation-subform$5821$4aEQL
     (condition-accessor g$6817$5717$4aEQL g$6815$5723$4aEQL))
   (g$6835$5727$4aEQL
     g$6835$5822$4aEQL
     (make-record-type-descriptor
       '&undefined
       g$6711$5671$4aEQL
       'g$6838$4aEQL
       '#f
       '#f
       '#()))
   (g$6837$5728$4aEQL g$6837$5823$4aEQL '#f)
   (g$6836$5729$4aEQL
     g$6836$5824$4aEQL
     (make-record-constructor-descriptor
       g$6835$5727$4aEQL
       g$6712$5673$4aEQL
       g$6837$5728$4aEQL))
   (g$6834$5730$4aEQL
     g$6834$5825$4aEQL
     (record-predicate g$6835$5727$4aEQL))
   (g$make-undefined-violation$5731$4aEQL
     g$make-undefined-violation$5826$4aEQL
     (record-constructor g$6836$5729$4aEQL))
   (g$undefined-violation?$5732$4aEQL
     g$undefined-violation?$5827$4aEQL
     (condition-predicate g$6835$5727$4aEQL)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5828$4aEQL
     g$append!$5834$4aEQL
     (case-lambda
       ((g$a$5829$4aEQL . g$b$5830$4aEQL)
        (if (null? g$a$5829$4aEQL)
          g$b$5830$4aEQL
          (if (null? g$b$5830$4aEQL)
            g$a$5829$4aEQL
            (begin
              ((letrec ((g$f$5831$4aEQL
                          (case-lambda
                            ((g$a$5832$4aEQL)
                             ((case-lambda
                                ((g$n$5833$4aEQL)
                                 (if (null? g$n$5833$4aEQL)
                                   (set-cdr! g$a$5832$4aEQL g$b$5830$4aEQL)
                                   (g$f$5831$4aEQL g$n$5833$4aEQL))))
                              (cdr g$a$5832$4aEQL))))))
                 g$f$5831$4aEQL)
               g$a$5829$4aEQL)
              g$a$5829$4aEQL)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5835$4aEQL
     g$sign$5853$4aEQL
     (case-lambda
       ((g$n$5841$4aEQL)
        (if (> g$n$5841$4aEQL '0) '1 (if (< g$n$5841$4aEQL '0) '-1 '0)))))
   (g$quotient$5836$4aEQL
     g$quotient$5854$4aEQL
     (case-lambda
       ((g$n1$5842$4aEQL g$n2$5843$4aEQL)
        (begin
          (if (not (integer-valued? g$n1$5842$4aEQL))
            (assertion-violation 'quotient '"not an integer" g$n1$5842$4aEQL)
            (void))
          (if (not (integer-valued? g$n2$5843$4aEQL))
            (assertion-violation 'quotient '"not an integer" g$n2$5843$4aEQL)
            (void))
          (* (g$sign$5835$4aEQL g$n1$5842$4aEQL)
             (g$sign$5835$4aEQL g$n2$5843$4aEQL)
             (div (abs g$n1$5842$4aEQL) (abs g$n2$5843$4aEQL)))))))
   (g$remainder$5837$4aEQL
     g$remainder$5855$4aEQL
     (case-lambda
       ((g$n1$5844$4aEQL g$n2$5845$4aEQL)
        (begin
          (if (not (integer-valued? g$n1$5844$4aEQL))
            (assertion-violation 'remainder '"not an integer" g$n1$5844$4aEQL)
            (void))
          (if (not (integer-valued? g$n2$5845$4aEQL))
            (assertion-violation 'remainder '"not an integer" g$n2$5845$4aEQL)
            (void))
          (* (g$sign$5835$4aEQL g$n1$5844$4aEQL)
             (mod (abs g$n1$5844$4aEQL) (abs g$n2$5845$4aEQL)))))))
   (g$modulo$5838$4aEQL
     g$modulo$5856$4aEQL
     (case-lambda
       ((g$n1$5846$4aEQL g$n2$5847$4aEQL)
        (begin
          (if (not (integer-valued? g$n1$5846$4aEQL))
            (assertion-violation 'modulo '"not an integer" g$n1$5846$4aEQL)
            (void))
          (if (not (integer-valued? g$n2$5847$4aEQL))
            (assertion-violation 'modulo '"not an integer" g$n2$5847$4aEQL)
            (void))
          (* (g$sign$5835$4aEQL g$n2$5847$4aEQL)
             (mod (* (g$sign$5835$4aEQL g$n2$5847$4aEQL) g$n1$5846$4aEQL)
                  (abs g$n2$5847$4aEQL)))))))
   (g$make-promise$5839$4aEQL
     g$make-promise$5857$4aEQL
     (case-lambda
       ((g$proc$5848$4aEQL)
        ((case-lambda
           ((g$result-ready?$5849$4aEQL g$result$5850$4aEQL)
            (case-lambda
              (()
               (if g$result-ready?$5849$4aEQL
                 g$result$5850$4aEQL
                 ((case-lambda
                    ((g$x$5851$4aEQL)
                     (if g$result-ready?$5849$4aEQL
                       g$result$5850$4aEQL
                       (begin
                         (set! g$result-ready?$5849$4aEQL '#t)
                         (set! g$result$5850$4aEQL g$x$5851$4aEQL)
                         g$result$5850$4aEQL))))
                  (g$proc$5848$4aEQL)))))))
         '#f
         '#f))))
   (g$force$5840$4aEQL
     g$force$5858$4aEQL
     (case-lambda ((g$object$5852$4aEQL) (g$object$5852$4aEQL)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5859$4aEQL
     g$split$5884$4aEQL
     (case-lambda
       ((g$ls$5863$4aEQL)
        ((letrec ((g$loop$5864$4aEQL
                    (case-lambda
                      ((g$rest$5865$4aEQL g$left$5866$4aEQL g$right$5867$4aEQL)
                       (if (null? g$rest$5865$4aEQL)
                         (cons g$left$5866$4aEQL g$right$5867$4aEQL)
                         (if (null? (cdr g$rest$5865$4aEQL))
                           (cons
                             (cons (car g$rest$5865$4aEQL) g$left$5866$4aEQL)
                             g$right$5867$4aEQL)
                           (g$loop$5864$4aEQL
                             (g$cddr$5214$4aEQL g$rest$5865$4aEQL)
                             (cons (car g$rest$5865$4aEQL) g$left$5866$4aEQL)
                             (cons
                               (g$cadr$5212$4aEQL g$rest$5865$4aEQL)
                               g$right$5867$4aEQL))))))))
           g$loop$5864$4aEQL)
         g$ls$5863$4aEQL
         '()
         '()))))
   (g$reverse-it$5860$4aEQL
     g$reverse-it$5885$4aEQL
     (case-lambda
       ((g$head$5868$4aEQL g$tail$5869$4aEQL)
        (if (null? g$head$5868$4aEQL)
          g$tail$5869$4aEQL
          (g$reverse-it$5860$4aEQL
            (cdr g$head$5868$4aEQL)
            (cons (car g$head$5868$4aEQL) g$tail$5869$4aEQL))))))
   (g$merge$5861$4aEQL
     g$merge$5886$4aEQL
     (case-lambda
       ((g$list-1$5870$4aEQL g$list-2$5871$4aEQL g$precedes?$5872$4aEQL)
        ((letrec ((g$loop$5873$4aEQL
                    (case-lambda
                      ((g$source-1$5874$4aEQL
                         g$source-2$5875$4aEQL
                         g$so-far$5876$4aEQL)
                       (if (null? g$source-1$5874$4aEQL)
                         (g$reverse-it$5860$4aEQL
                           g$so-far$5876$4aEQL
                           g$source-2$5875$4aEQL)
                         (if (null? g$source-2$5875$4aEQL)
                           (g$reverse-it$5860$4aEQL
                             g$so-far$5876$4aEQL
                             g$source-1$5874$4aEQL)
                           ((case-lambda
                              ((g$car-1$5877$4aEQL g$car-2$5878$4aEQL)
                               (if (g$precedes?$5872$4aEQL
                                     g$car-2$5878$4aEQL
                                     g$car-1$5877$4aEQL)
                                 (g$loop$5873$4aEQL
                                   g$source-1$5874$4aEQL
                                   (cdr g$source-2$5875$4aEQL)
                                   (cons
                                     g$car-2$5878$4aEQL
                                     g$so-far$5876$4aEQL))
                                 (g$loop$5873$4aEQL
                                   g$source-2$5875$4aEQL
                                   (cdr g$source-1$5874$4aEQL)
                                   (cons
                                     g$car-1$5877$4aEQL
                                     g$so-far$5876$4aEQL)))))
                            (car g$source-1$5874$4aEQL)
                            (car g$source-2$5875$4aEQL))))))))
           g$loop$5873$4aEQL)
         g$list-1$5870$4aEQL
         g$list-2$5871$4aEQL
         '()))))
   (g$list-sort$5862$4aEQL
     g$list-sort$5887$4aEQL
     (case-lambda
       ((g$precedes?$5879$4aEQL g$ls$5880$4aEQL)
        (if (null? g$ls$5880$4aEQL)
          '()
          ((letrec ((g$helper$5881$4aEQL
                      (case-lambda
                        ((g$piece$5882$4aEQL)
                         (if (null? (cdr g$piece$5882$4aEQL))
                           g$piece$5882$4aEQL
                           ((case-lambda
                              ((g$parts$5883$4aEQL)
                               (g$merge$5861$4aEQL
                                 (g$helper$5881$4aEQL (car g$parts$5883$4aEQL))
                                 (g$helper$5881$4aEQL (cdr g$parts$5883$4aEQL))
                                 g$precedes?$5879$4aEQL)))
                            (g$split$5859$4aEQL g$piece$5882$4aEQL)))))))
             g$helper$5881$4aEQL)
           g$ls$5880$4aEQL))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5894$4aEQL
     g$string-ci=?$5960$4aEQL
     (case-lambda
       ((g$a$5910$4aEQL g$b$5911$4aEQL . g$rest$5912$4aEQL)
        (begin
          (if (not (string? g$a$5910$4aEQL))
            (assertion-violation 'string-ci=? '"not a string" g$a$5910$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5913$4aEQL)
               (begin
                 (if (not (string? g$x$5913$4aEQL))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5913$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5914$4aEQL)
                     (begin
                       (set! g$a$5910$4aEQL g$x$5913$4aEQL)
                       g$r$5914$4aEQL)))
                  (= (string-ci-compare g$a$5910$4aEQL g$x$5913$4aEQL) '0)))))
            (cons g$b$5911$4aEQL g$rest$5912$4aEQL))))))
   (g$string-ci<?$5895$4aEQL
     g$string-ci<?$5961$4aEQL
     (case-lambda
       ((g$a$5915$4aEQL g$b$5916$4aEQL . g$rest$5917$4aEQL)
        (begin
          (if (not (string? g$a$5915$4aEQL))
            (assertion-violation 'string-ci<? '"not a string" g$a$5915$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5918$4aEQL)
               (begin
                 (if (not (string? g$x$5918$4aEQL))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5918$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5919$4aEQL)
                     (begin
                       (set! g$a$5915$4aEQL g$x$5918$4aEQL)
                       g$r$5919$4aEQL)))
                  (< (string-ci-compare g$a$5915$4aEQL g$x$5918$4aEQL) '0)))))
            (cons g$b$5916$4aEQL g$rest$5917$4aEQL))))))
   (g$string-ci>?$5896$4aEQL
     g$string-ci>?$5962$4aEQL
     (case-lambda
       ((g$a$5920$4aEQL g$b$5921$4aEQL . g$rest$5922$4aEQL)
        (begin
          (if (not (string? g$a$5920$4aEQL))
            (assertion-violation 'string-ci>? '"not a string" g$a$5920$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5923$4aEQL)
               (begin
                 (if (not (string? g$x$5923$4aEQL))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5923$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5924$4aEQL)
                     (begin
                       (set! g$a$5920$4aEQL g$x$5923$4aEQL)
                       g$r$5924$4aEQL)))
                  (> (string-ci-compare g$a$5920$4aEQL g$x$5923$4aEQL) '0)))))
            (cons g$b$5921$4aEQL g$rest$5922$4aEQL))))))
   (g$string-ci<=?$5897$4aEQL
     g$string-ci<=?$5963$4aEQL
     (case-lambda
       ((g$a$5925$4aEQL g$b$5926$4aEQL . g$rest$5927$4aEQL)
        (begin
          (if (not (string? g$a$5925$4aEQL))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5925$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5928$4aEQL)
               (begin
                 (if (not (string? g$x$5928$4aEQL))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5928$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5929$4aEQL)
                     (begin
                       (set! g$a$5925$4aEQL g$x$5928$4aEQL)
                       g$r$5929$4aEQL)))
                  (<= (string-ci-compare g$a$5925$4aEQL g$x$5928$4aEQL) '0)))))
            (cons g$b$5926$4aEQL g$rest$5927$4aEQL))))))
   (g$string-ci>=?$5898$4aEQL
     g$string-ci>=?$5964$4aEQL
     (case-lambda
       ((g$a$5930$4aEQL g$b$5931$4aEQL . g$rest$5932$4aEQL)
        (begin
          (if (not (string? g$a$5930$4aEQL))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5930$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5933$4aEQL)
               (begin
                 (if (not (string? g$x$5933$4aEQL))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5933$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5934$4aEQL)
                     (begin
                       (set! g$a$5930$4aEQL g$x$5933$4aEQL)
                       g$r$5934$4aEQL)))
                  (>= (string-ci-compare g$a$5930$4aEQL g$x$5933$4aEQL) '0)))))
            (cons g$b$5931$4aEQL g$rest$5932$4aEQL))))))
   (g$char-ci=?$5905$4aEQL
     g$char-ci=?$5965$4aEQL
     (case-lambda
       ((g$a$5935$4aEQL g$b$5936$4aEQL . g$rest$5937$4aEQL)
        (begin
          (if (not (char? g$a$5935$4aEQL))
            (assertion-violation 'char-ci=? '"not a char" g$a$5935$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5938$4aEQL)
               (begin
                 (if (not (char? g$x$5938$4aEQL))
                   (assertion-violation 'char-ci=? '"not a char" g$x$5938$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5939$4aEQL)
                     (begin
                       (set! g$a$5935$4aEQL g$x$5938$4aEQL)
                       g$r$5939$4aEQL)))
                  (= (char->integer (char-upcase g$a$5935$4aEQL))
                     (char->integer (char-upcase g$x$5938$4aEQL)))))))
            (cons g$b$5936$4aEQL g$rest$5937$4aEQL))))))
   (g$char-ci<?$5906$4aEQL
     g$char-ci<?$5966$4aEQL
     (case-lambda
       ((g$a$5940$4aEQL g$b$5941$4aEQL . g$rest$5942$4aEQL)
        (begin
          (if (not (char? g$a$5940$4aEQL))
            (assertion-violation 'char-ci<? '"not a char" g$a$5940$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5943$4aEQL)
               (begin
                 (if (not (char? g$x$5943$4aEQL))
                   (assertion-violation 'char-ci<? '"not a char" g$x$5943$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5944$4aEQL)
                     (begin
                       (set! g$a$5940$4aEQL g$x$5943$4aEQL)
                       g$r$5944$4aEQL)))
                  (< (char->integer (char-upcase g$a$5940$4aEQL))
                     (char->integer (char-upcase g$x$5943$4aEQL)))))))
            (cons g$b$5941$4aEQL g$rest$5942$4aEQL))))))
   (g$char-ci>?$5907$4aEQL
     g$char-ci>?$5967$4aEQL
     (case-lambda
       ((g$a$5945$4aEQL g$b$5946$4aEQL . g$rest$5947$4aEQL)
        (begin
          (if (not (char? g$a$5945$4aEQL))
            (assertion-violation 'char-ci>? '"not a char" g$a$5945$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5948$4aEQL)
               (begin
                 (if (not (char? g$x$5948$4aEQL))
                   (assertion-violation 'char-ci>? '"not a char" g$x$5948$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5949$4aEQL)
                     (begin
                       (set! g$a$5945$4aEQL g$x$5948$4aEQL)
                       g$r$5949$4aEQL)))
                  (> (char->integer (char-upcase g$a$5945$4aEQL))
                     (char->integer (char-upcase g$x$5948$4aEQL)))))))
            (cons g$b$5946$4aEQL g$rest$5947$4aEQL))))))
   (g$char-ci<=?$5908$4aEQL
     g$char-ci<=?$5968$4aEQL
     (case-lambda
       ((g$a$5950$4aEQL g$b$5951$4aEQL . g$rest$5952$4aEQL)
        (begin
          (if (not (char? g$a$5950$4aEQL))
            (assertion-violation 'char-ci<=? '"not a char" g$a$5950$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5953$4aEQL)
               (begin
                 (if (not (char? g$x$5953$4aEQL))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$5953$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5954$4aEQL)
                     (begin
                       (set! g$a$5950$4aEQL g$x$5953$4aEQL)
                       g$r$5954$4aEQL)))
                  (<= (char->integer (char-upcase g$a$5950$4aEQL))
                      (char->integer (char-upcase g$x$5953$4aEQL)))))))
            (cons g$b$5951$4aEQL g$rest$5952$4aEQL))))))
   (g$char-ci>=?$5909$4aEQL
     g$char-ci>=?$5969$4aEQL
     (case-lambda
       ((g$a$5955$4aEQL g$b$5956$4aEQL . g$rest$5957$4aEQL)
        (begin
          (if (not (char? g$a$5955$4aEQL))
            (assertion-violation 'char-ci>=? '"not a char" g$a$5955$4aEQL)
            (void))
          (g$for-all$5046$4aEQL
            (case-lambda
              ((g$x$5958$4aEQL)
               (begin
                 (if (not (char? g$x$5958$4aEQL))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$5958$4aEQL)
                   (void))
                 ((case-lambda
                    ((g$r$5959$4aEQL)
                     (begin
                       (set! g$a$5955$4aEQL g$x$5958$4aEQL)
                       g$r$5959$4aEQL)))
                  (>= (char->integer (char-upcase g$a$5955$4aEQL))
                      (char->integer (char-upcase g$x$5958$4aEQL)))))))
            (cons g$b$5956$4aEQL g$rest$5957$4aEQL)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5970$4aEQL
     g$bitwise-if$6001$4aEQL
     (case-lambda
       ((g$ei1$5977$4aEQL g$ei2$5978$4aEQL g$ei3$5979$4aEQL)
        (bitwise-ior
          (bitwise-and g$ei1$5977$4aEQL g$ei2$5978$4aEQL)
          (bitwise-and (bitwise-not g$ei1$5977$4aEQL) g$ei3$5979$4aEQL)))))
   (g$bitwise-copy-bit$5971$4aEQL
     g$bitwise-copy-bit$6002$4aEQL
     (case-lambda
       ((g$ei1$5980$4aEQL g$ei2$5981$4aEQL g$ei3$5982$4aEQL)
        (g$bitwise-if$5970$4aEQL
          (g$bitwise-arithmetic-shift-left$5974$4aEQL '1 g$ei2$5981$4aEQL)
          (g$bitwise-arithmetic-shift-left$5974$4aEQL
            g$ei3$5982$4aEQL
            g$ei2$5981$4aEQL)
          g$ei1$5980$4aEQL))))
   (g$bitwise-bit-field$5972$4aEQL
     g$bitwise-bit-field$6003$4aEQL
     (case-lambda
       ((g$ei1$5983$4aEQL g$ei2$5984$4aEQL g$ei3$5985$4aEQL)
        (g$bitwise-arithmetic-shift-right$5975$4aEQL
          (bitwise-and
            g$ei1$5983$4aEQL
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$5974$4aEQL
                '-1
                g$ei3$5985$4aEQL)))
          g$ei2$5984$4aEQL))))
   (g$bitwise-copy-bit-field$5973$4aEQL
     g$bitwise-copy-bit-field$6004$4aEQL
     (case-lambda
       ((g$to$5986$4aEQL g$start$5987$4aEQL g$end$5988$4aEQL g$from$5989$4aEQL)
        (g$bitwise-if$5970$4aEQL
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$5974$4aEQL '-1 g$start$5987$4aEQL)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$5974$4aEQL
                '-1
                g$end$5988$4aEQL)))
          (g$bitwise-arithmetic-shift-left$5974$4aEQL
            g$from$5989$4aEQL
            g$start$5987$4aEQL)
          g$to$5986$4aEQL))))
   (g$bitwise-arithmetic-shift-left$5974$4aEQL
     g$bitwise-arithmetic-shift-left$6005$4aEQL
     (case-lambda
       ((g$ei1$5990$4aEQL g$ei2$5991$4aEQL)
        (bitwise-arithmetic-shift g$ei1$5990$4aEQL g$ei2$5991$4aEQL))))
   (g$bitwise-arithmetic-shift-right$5975$4aEQL
     g$bitwise-arithmetic-shift-right$6006$4aEQL
     (case-lambda
       ((g$ei1$5992$4aEQL g$ei2$5993$4aEQL)
        (bitwise-arithmetic-shift g$ei1$5992$4aEQL (- g$ei2$5993$4aEQL)))))
   (g$bitwise-rotate-bit-field$5976$4aEQL
     g$bitwise-rotate-bit-field$6007$4aEQL
     (case-lambda
       ((g$n$5994$4aEQL g$start$5995$4aEQL g$end$5996$4aEQL g$count$5997$4aEQL)
        ((case-lambda
           ((g$width$5998$4aEQL)
            (if (positive? g$width$5998$4aEQL)
              ((case-lambda
                 ((g$count$5999$4aEQL g$field$6000$4aEQL)
                  (g$bitwise-copy-bit-field$5973$4aEQL
                    g$n$5994$4aEQL
                    g$start$5995$4aEQL
                    g$end$5996$4aEQL
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$5974$4aEQL
                        g$field$6000$4aEQL
                        g$count$5999$4aEQL)
                      (g$bitwise-arithmetic-shift-right$5975$4aEQL
                        g$field$6000$4aEQL
                        (- g$width$5998$4aEQL g$count$5999$4aEQL))))))
               (mod g$count$5997$4aEQL g$width$5998$4aEQL)
               (g$bitwise-bit-field$5972$4aEQL
                 g$n$5994$4aEQL
                 g$start$5995$4aEQL
                 g$end$5996$4aEQL))
              g$n$5994$4aEQL)))
         (- g$end$5996$4aEQL g$start$5995$4aEQL))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fx*/carry$6008$4aEQL
     g$fx*/carry$6057$4aEQL
     (case-lambda
       ((g$fx1$6018$4aEQL g$fx2$6019$4aEQL g$fx3$6020$4aEQL)
        ((case-lambda
           ((g$s$6021$4aEQL g$e$6022$4aEQL)
            (values
              (mod0 g$s$6021$4aEQL g$e$6022$4aEQL)
              (div0 g$s$6021$4aEQL g$e$6022$4aEQL))))
         (+ (* g$fx1$6018$4aEQL g$fx2$6019$4aEQL) g$fx3$6020$4aEQL)
         (expt '2 (fixnum-width))))))
   (g$fx-/carry$6009$4aEQL
     g$fx-/carry$6058$4aEQL
     (case-lambda
       ((g$fx1$6023$4aEQL g$fx2$6024$4aEQL g$fx3$6025$4aEQL)
        ((case-lambda
           ((g$s$6026$4aEQL g$e$6027$4aEQL)
            (values
              (mod0 g$s$6026$4aEQL g$e$6027$4aEQL)
              (div0 g$s$6026$4aEQL g$e$6027$4aEQL))))
         (- g$fx1$6023$4aEQL g$fx2$6024$4aEQL g$fx3$6025$4aEQL)
         (expt '2 (fixnum-width))))))
   (g$fx+/carry$6010$4aEQL
     g$fx+/carry$6059$4aEQL
     (case-lambda
       ((g$fx1$6028$4aEQL g$fx2$6029$4aEQL g$fx3$6030$4aEQL)
        ((case-lambda
           ((g$s$6031$4aEQL g$e$6032$4aEQL)
            (values
              (mod0 g$s$6031$4aEQL g$e$6032$4aEQL)
              (div0 g$s$6031$4aEQL g$e$6032$4aEQL))))
         (+ g$fx1$6028$4aEQL g$fx2$6029$4aEQL g$fx3$6030$4aEQL)
         (expt '2 (fixnum-width))))))
   (g$fxif$6011$4aEQL
     g$fxif$6060$4aEQL
     (case-lambda
       ((g$fx1$6033$4aEQL g$fx2$6034$4aEQL g$fx3$6035$4aEQL)
        (fxior
          (fxand g$fx1$6033$4aEQL g$fx2$6034$4aEQL)
          (fxand (fxnot g$fx1$6033$4aEQL) g$fx3$6035$4aEQL)))))
   (g$fxcopy-bit$6012$4aEQL
     g$fxcopy-bit$6061$4aEQL
     (case-lambda
       ((g$fx1$6036$4aEQL g$fx2$6037$4aEQL g$fx3$6038$4aEQL)
        (g$fxif$6011$4aEQL
          (g$fxarithmetic-shift-left$6015$4aEQL '1 g$fx2$6037$4aEQL)
          (g$fxarithmetic-shift-left$6015$4aEQL
            g$fx3$6038$4aEQL
            g$fx2$6037$4aEQL)
          g$fx1$6036$4aEQL))))
   (g$fxbit-field$6013$4aEQL
     g$fxbit-field$6062$4aEQL
     (case-lambda
       ((g$fx1$6039$4aEQL g$fx2$6040$4aEQL g$fx3$6041$4aEQL)
        (g$fxarithmetic-shift-right$6016$4aEQL
          (fxand
            g$fx1$6039$4aEQL
            (fxnot (g$fxarithmetic-shift-left$6015$4aEQL '-1 g$fx3$6041$4aEQL)))
          g$fx2$6040$4aEQL))))
   (g$fxcopy-bit-field$6014$4aEQL
     g$fxcopy-bit-field$6063$4aEQL
     (case-lambda
       ((g$to$6042$4aEQL g$start$6043$4aEQL g$end$6044$4aEQL g$from$6045$4aEQL)
        (g$fxif$6011$4aEQL
          (fxand
            (g$fxarithmetic-shift-left$6015$4aEQL '-1 g$start$6043$4aEQL)
            (fxnot (g$fxarithmetic-shift-left$6015$4aEQL '-1 g$end$6044$4aEQL)))
          (g$fxarithmetic-shift-left$6015$4aEQL
            g$from$6045$4aEQL
            g$start$6043$4aEQL)
          g$to$6042$4aEQL))))
   (g$fxarithmetic-shift-left$6015$4aEQL
     g$fxarithmetic-shift-left$6064$4aEQL
     (case-lambda
       ((g$fx1$6046$4aEQL g$fx2$6047$4aEQL)
        (fxarithmetic-shift g$fx1$6046$4aEQL g$fx2$6047$4aEQL))))
   (g$fxarithmetic-shift-right$6016$4aEQL
     g$fxarithmetic-shift-right$6065$4aEQL
     (case-lambda
       ((g$fx1$6048$4aEQL g$fx2$6049$4aEQL)
        (fxarithmetic-shift g$fx1$6048$4aEQL (fx- g$fx2$6049$4aEQL)))))
   (g$fxrotate-bit-field$6017$4aEQL
     g$fxrotate-bit-field$6066$4aEQL
     (case-lambda
       ((g$n$6050$4aEQL g$start$6051$4aEQL g$end$6052$4aEQL g$count$6053$4aEQL)
        ((case-lambda
           ((g$width$6054$4aEQL)
            (if (fxpositive? g$width$6054$4aEQL)
              ((case-lambda
                 ((g$count$6055$4aEQL g$field$6056$4aEQL)
                  (g$fxcopy-bit-field$6014$4aEQL
                    g$n$6050$4aEQL
                    g$start$6051$4aEQL
                    g$end$6052$4aEQL
                    (fxior
                      (g$fxarithmetic-shift-left$6015$4aEQL
                        g$field$6056$4aEQL
                        g$count$6055$4aEQL)
                      (g$fxarithmetic-shift-right$6016$4aEQL
                        g$field$6056$4aEQL
                        (fx- g$width$6054$4aEQL g$count$6055$4aEQL))))))
               (fxmod g$count$6053$4aEQL g$width$6054$4aEQL)
               (g$fxbit-field$6013$4aEQL
                 g$n$6050$4aEQL
                 g$start$6051$4aEQL
                 g$end$6052$4aEQL))
              g$n$6050$4aEQL)))
         (fx- g$end$6052$4aEQL g$start$6051$4aEQL))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7118$6067$4aEQL
     g$7118$6079$4aEQL
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7121$4aEQL
       '#f
       '#f
       '#()))
   (g$7120$6068$4aEQL g$7120$6080$4aEQL '#f)
   (g$7119$6069$4aEQL
     g$7119$6081$4aEQL
     (make-record-constructor-descriptor
       g$7118$6067$4aEQL
       &implementation-restriction-rcd
       g$7120$6068$4aEQL))
   (g$7117$6070$4aEQL
     g$7117$6082$4aEQL
     (record-predicate g$7118$6067$4aEQL))
   (g$make-no-infinities-violation$6071$4aEQL
     g$make-no-infinities-violation$6083$4aEQL
     (record-constructor g$7119$6069$4aEQL))
   (g$no-infinities-violation?$6072$4aEQL
     g$no-infinities-violation?$6084$4aEQL
     (condition-predicate g$7118$6067$4aEQL))
   (g$7132$6073$4aEQL
     g$7132$6085$4aEQL
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7135$4aEQL
       '#f
       '#f
       '#()))
   (g$7134$6074$4aEQL g$7134$6086$4aEQL '#f)
   (g$7133$6075$4aEQL
     g$7133$6087$4aEQL
     (make-record-constructor-descriptor
       g$7132$6073$4aEQL
       &implementation-restriction-rcd
       g$7134$6074$4aEQL))
   (g$7131$6076$4aEQL
     g$7131$6088$4aEQL
     (record-predicate g$7132$6073$4aEQL))
   (g$make-no-nans-violation$6077$4aEQL
     g$make-no-nans-violation$6089$4aEQL
     (record-constructor g$7133$6075$4aEQL))
   (g$no-nans-violation?$6078$4aEQL
     g$no-nans-violation?$6090$4aEQL
     (condition-predicate g$7132$6073$4aEQL)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7147$6091$4aEQL
     g$7147$6171$4aEQL
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7150$4aEQL
       '#f
       '#f
       '#()))
   (g$7149$6092$4aEQL g$7149$6172$4aEQL '#f)
   (g$7148$6093$4aEQL
     g$7148$6173$4aEQL
     (make-record-constructor-descriptor
       g$7147$6091$4aEQL
       &error-rcd
       g$7149$6092$4aEQL))
   (g$7146$6094$4aEQL
     g$7146$6174$4aEQL
     (record-predicate g$7147$6091$4aEQL))
   (g$make-i/o-error$6095$4aEQL
     g$make-i/o-error$6175$4aEQL
     (record-constructor g$7148$6093$4aEQL))
   (g$i/o-error?$6096$4aEQL
     g$i/o-error?$6176$4aEQL
     (condition-predicate g$7147$6091$4aEQL))
   (g$7161$6097$4aEQL
     g$7161$6177$4aEQL
     (make-record-type-descriptor
       '&i/o-read
       g$7147$6091$4aEQL
       'g$7164$4aEQL
       '#f
       '#f
       '#()))
   (g$7163$6098$4aEQL g$7163$6178$4aEQL '#f)
   (g$7162$6099$4aEQL
     g$7162$6179$4aEQL
     (make-record-constructor-descriptor
       g$7161$6097$4aEQL
       g$7148$6093$4aEQL
       g$7163$6098$4aEQL))
   (g$7160$6100$4aEQL
     g$7160$6180$4aEQL
     (record-predicate g$7161$6097$4aEQL))
   (g$make-i/o-read-error$6101$4aEQL
     g$make-i/o-read-error$6181$4aEQL
     (record-constructor g$7162$6099$4aEQL))
   (g$i/o-read-error?$6102$4aEQL
     g$i/o-read-error?$6182$4aEQL
     (condition-predicate g$7161$6097$4aEQL))
   (g$7175$6103$4aEQL
     g$7175$6183$4aEQL
     (make-record-type-descriptor
       '&i/o-write
       g$7147$6091$4aEQL
       'g$7178$4aEQL
       '#f
       '#f
       '#()))
   (g$7177$6104$4aEQL g$7177$6184$4aEQL '#f)
   (g$7176$6105$4aEQL
     g$7176$6185$4aEQL
     (make-record-constructor-descriptor
       g$7175$6103$4aEQL
       g$7148$6093$4aEQL
       g$7177$6104$4aEQL))
   (g$7174$6106$4aEQL
     g$7174$6186$4aEQL
     (record-predicate g$7175$6103$4aEQL))
   (g$make-i/o-write-error$6107$4aEQL
     g$make-i/o-write-error$6187$4aEQL
     (record-constructor g$7176$6105$4aEQL))
   (g$i/o-write-error?$6108$4aEQL
     g$i/o-write-error?$6188$4aEQL
     (condition-predicate g$7175$6103$4aEQL))
   (g$7190$6109$4aEQL
     g$7190$6189$4aEQL
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7147$6091$4aEQL
       'g$7193$4aEQL
       '#f
       '#f
       '#((immutable position))))
   (g$7192$6110$4aEQL g$7192$6190$4aEQL '#f)
   (g$7191$6111$4aEQL
     g$7191$6191$4aEQL
     (make-record-constructor-descriptor
       g$7190$6109$4aEQL
       g$7148$6093$4aEQL
       g$7192$6110$4aEQL))
   (g$7189$6112$4aEQL
     g$7189$6192$4aEQL
     (record-predicate g$7190$6109$4aEQL))
   (g$make-i/o-invalid-position-error$6113$4aEQL
     g$make-i/o-invalid-position-error$6193$4aEQL
     (record-constructor g$7191$6111$4aEQL))
   (g$7188$6114$4aEQL
     g$7188$6194$4aEQL
     (record-accessor g$7190$6109$4aEQL '0))
   (g$i/o-invalid-position-error?$6115$4aEQL
     g$i/o-invalid-position-error?$6195$4aEQL
     (condition-predicate g$7190$6109$4aEQL))
   (g$i/o-error-position$6116$4aEQL
     g$i/o-error-position$6196$4aEQL
     (condition-accessor g$7190$6109$4aEQL g$7188$6114$4aEQL))
   (g$7207$6117$4aEQL
     g$7207$6197$4aEQL
     (make-record-type-descriptor
       '&i/o-filename
       g$7147$6091$4aEQL
       'g$7210$4aEQL
       '#f
       '#f
       '#((immutable filename))))
   (g$7209$6118$4aEQL g$7209$6198$4aEQL '#f)
   (g$7208$6119$4aEQL
     g$7208$6199$4aEQL
     (make-record-constructor-descriptor
       g$7207$6117$4aEQL
       g$7148$6093$4aEQL
       g$7209$6118$4aEQL))
   (g$7206$6120$4aEQL
     g$7206$6200$4aEQL
     (record-predicate g$7207$6117$4aEQL))
   (g$make-i/o-filename-error$6121$4aEQL
     g$make-i/o-filename-error$6201$4aEQL
     (record-constructor g$7208$6119$4aEQL))
   (g$7205$6122$4aEQL
     g$7205$6202$4aEQL
     (record-accessor g$7207$6117$4aEQL '0))
   (g$i/o-filename-error?$6123$4aEQL
     g$i/o-filename-error?$6203$4aEQL
     (condition-predicate g$7207$6117$4aEQL))
   (g$i/o-error-filename$6124$4aEQL
     g$i/o-error-filename$6204$4aEQL
     (condition-accessor g$7207$6117$4aEQL g$7205$6122$4aEQL))
   (g$7223$6125$4aEQL
     g$7223$6205$4aEQL
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7207$6117$4aEQL
       'g$7226$4aEQL
       '#f
       '#f
       '#()))
   (g$7225$6126$4aEQL g$7225$6206$4aEQL '#f)
   (g$7224$6127$4aEQL
     g$7224$6207$4aEQL
     (make-record-constructor-descriptor
       g$7223$6125$4aEQL
       g$7208$6119$4aEQL
       g$7225$6126$4aEQL))
   (g$7222$6128$4aEQL
     g$7222$6208$4aEQL
     (record-predicate g$7223$6125$4aEQL))
   (g$make-i/o-file-protection-error$6129$4aEQL
     g$make-i/o-file-protection-error$6209$4aEQL
     (record-constructor g$7224$6127$4aEQL))
   (g$i/o-file-protection-error?$6130$4aEQL
     g$i/o-file-protection-error?$6210$4aEQL
     (condition-predicate g$7223$6125$4aEQL))
   (g$7237$6131$4aEQL
     g$7237$6211$4aEQL
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7223$6125$4aEQL
       'g$7240$4aEQL
       '#f
       '#f
       '#()))
   (g$7239$6132$4aEQL g$7239$6212$4aEQL '#f)
   (g$7238$6133$4aEQL
     g$7238$6213$4aEQL
     (make-record-constructor-descriptor
       g$7237$6131$4aEQL
       g$7224$6127$4aEQL
       g$7239$6132$4aEQL))
   (g$7236$6134$4aEQL
     g$7236$6214$4aEQL
     (record-predicate g$7237$6131$4aEQL))
   (g$make-i/o-file-is-read-only-error$6135$4aEQL
     g$make-i/o-file-is-read-only-error$6215$4aEQL
     (record-constructor g$7238$6133$4aEQL))
   (g$i/o-file-is-read-only-error?$6136$4aEQL
     g$i/o-file-is-read-only-error?$6216$4aEQL
     (condition-predicate g$7237$6131$4aEQL))
   (g$7251$6137$4aEQL
     g$7251$6217$4aEQL
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7207$6117$4aEQL
       'g$7254$4aEQL
       '#f
       '#f
       '#()))
   (g$7253$6138$4aEQL g$7253$6218$4aEQL '#f)
   (g$7252$6139$4aEQL
     g$7252$6219$4aEQL
     (make-record-constructor-descriptor
       g$7251$6137$4aEQL
       g$7208$6119$4aEQL
       g$7253$6138$4aEQL))
   (g$7250$6140$4aEQL
     g$7250$6220$4aEQL
     (record-predicate g$7251$6137$4aEQL))
   (g$make-i/o-file-already-exists-error$6141$4aEQL
     g$make-i/o-file-already-exists-error$6221$4aEQL
     (record-constructor g$7252$6139$4aEQL))
   (g$i/o-file-already-exists-error?$6142$4aEQL
     g$i/o-file-already-exists-error?$6222$4aEQL
     (condition-predicate g$7251$6137$4aEQL))
   (g$7265$6143$4aEQL
     g$7265$6223$4aEQL
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7207$6117$4aEQL
       'g$7268$4aEQL
       '#f
       '#f
       '#()))
   (g$7267$6144$4aEQL g$7267$6224$4aEQL '#f)
   (g$7266$6145$4aEQL
     g$7266$6225$4aEQL
     (make-record-constructor-descriptor
       g$7265$6143$4aEQL
       g$7208$6119$4aEQL
       g$7267$6144$4aEQL))
   (g$7264$6146$4aEQL
     g$7264$6226$4aEQL
     (record-predicate g$7265$6143$4aEQL))
   (g$make-i/o-file-does-not-exist-error$6147$4aEQL
     g$make-i/o-file-does-not-exist-error$6227$4aEQL
     (record-constructor g$7266$6145$4aEQL))
   (g$i/o-file-does-not-exist-error?$6148$4aEQL
     g$i/o-file-does-not-exist-error?$6228$4aEQL
     (condition-predicate g$7265$6143$4aEQL))
   (g$7280$6149$4aEQL
     g$7280$6229$4aEQL
     (make-record-type-descriptor
       '&i/o-port
       g$7147$6091$4aEQL
       'g$7283$4aEQL
       '#f
       '#f
       '#((immutable port))))
   (g$7282$6150$4aEQL g$7282$6230$4aEQL '#f)
   (g$7281$6151$4aEQL
     g$7281$6231$4aEQL
     (make-record-constructor-descriptor
       g$7280$6149$4aEQL
       g$7148$6093$4aEQL
       g$7282$6150$4aEQL))
   (g$7279$6152$4aEQL
     g$7279$6232$4aEQL
     (record-predicate g$7280$6149$4aEQL))
   (g$make-i/o-port-error$6153$4aEQL
     g$make-i/o-port-error$6233$4aEQL
     (record-constructor g$7281$6151$4aEQL))
   (g$7278$6154$4aEQL
     g$7278$6234$4aEQL
     (record-accessor g$7280$6149$4aEQL '0))
   (g$i/o-port-error?$6155$4aEQL
     g$i/o-port-error?$6235$4aEQL
     (condition-predicate g$7280$6149$4aEQL))
   (g$i/o-error-port$6156$4aEQL
     g$i/o-error-port$6236$4aEQL
     (condition-accessor g$7280$6149$4aEQL g$7278$6154$4aEQL))
   (g$7296$6157$4aEQL
     g$7296$6237$4aEQL
     (make-record-type-descriptor
       '&i/o-decoding
       g$7280$6149$4aEQL
       'g$7299$4aEQL
       '#f
       '#f
       '#()))
   (g$7298$6158$4aEQL g$7298$6238$4aEQL '#f)
   (g$7297$6159$4aEQL
     g$7297$6239$4aEQL
     (make-record-constructor-descriptor
       g$7296$6157$4aEQL
       g$7281$6151$4aEQL
       g$7298$6158$4aEQL))
   (g$7295$6160$4aEQL
     g$7295$6240$4aEQL
     (record-predicate g$7296$6157$4aEQL))
   (g$make-i/o-decoding-error$6161$4aEQL
     g$make-i/o-decoding-error$6241$4aEQL
     (record-constructor g$7297$6159$4aEQL))
   (g$i/o-decoding-error?$6162$4aEQL
     g$i/o-decoding-error?$6242$4aEQL
     (condition-predicate g$7296$6157$4aEQL))
   (g$7311$6163$4aEQL
     g$7311$6243$4aEQL
     (make-record-type-descriptor
       '&i/o-encoding
       g$7280$6149$4aEQL
       'g$7314$4aEQL
       '#f
       '#f
       '#((immutable char))))
   (g$7313$6164$4aEQL g$7313$6244$4aEQL '#f)
   (g$7312$6165$4aEQL
     g$7312$6245$4aEQL
     (make-record-constructor-descriptor
       g$7311$6163$4aEQL
       g$7281$6151$4aEQL
       g$7313$6164$4aEQL))
   (g$7310$6166$4aEQL
     g$7310$6246$4aEQL
     (record-predicate g$7311$6163$4aEQL))
   (g$make-i/o-encoding-error$6167$4aEQL
     g$make-i/o-encoding-error$6247$4aEQL
     (record-constructor g$7312$6165$4aEQL))
   (g$7309$6168$4aEQL
     g$7309$6248$4aEQL
     (record-accessor g$7311$6163$4aEQL '0))
   (g$i/o-encoding-error?$6169$4aEQL
     g$i/o-encoding-error?$6249$4aEQL
     (condition-predicate g$7311$6163$4aEQL))
   (g$i/o-encoding-error-char$6170$4aEQL
     g$i/o-encoding-error-char$6250$4aEQL
     (condition-accessor g$7311$6163$4aEQL g$7309$6168$4aEQL)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$6252$4aEQL
     g$using$6264$4aEQL
     (clr-using-internal 'ironscheme.runtime))
   (g$get-output-string$6253$4aEQL
     g$get-output-string$6265$4aEQL
     (case-lambda
       ((g$port$6258$4aEQL)
        (clr-call-internal 'stringwriter 'getbuffer g$port$6258$4aEQL))))
   (g$open-output-string$6254$4aEQL
     g$open-output-string$6266$4aEQL
     (case-lambda (() (clr-new-internal 'stringwriter))))
   (g$open-string-output-port$6255$4aEQL
     g$open-string-output-port$6267$4aEQL
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6259$4aEQL)
            (values
              g$p$6259$4aEQL
              (case-lambda
                (() (g$get-output-string$6253$4aEQL g$p$6259$4aEQL))))))
         (g$open-output-string$6254$4aEQL)))))
   (g$port?$6256$4aEQL
     g$port?$6268$4aEQL
     (case-lambda
       ((g$obj$6260$4aEQL)
        ((case-lambda
           ((g$t$6261$4aEQL)
            (if g$t$6261$4aEQL
              g$t$6261$4aEQL
              (begin '#f (binary-port? g$obj$6260$4aEQL)))))
         (textual-port? g$obj$6260$4aEQL)))))
   (g$call-with-string-output-port$6257$4aEQL
     g$call-with-string-output-port$6269$4aEQL
     (case-lambda
       ((g$proc$6262$4aEQL)
        ((case-lambda
           ((g$p$6263$4aEQL)
            (begin
              (call-with-port g$p$6263$4aEQL g$proc$6262$4aEQL)
              (g$get-output-string$6253$4aEQL g$p$6263$4aEQL))))
         (g$open-output-string$6254$4aEQL))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$with-input-from-file$6276$4aEQL
     g$with-input-from-file$6302$4aEQL
     (case-lambda
       ((g$filename$6280$4aEQL g$thunk$6281$4aEQL)
        ((case-lambda
           ((g$current-input-port$6284$4aEQL g$t$6285$4aEQL)
            ((case-lambda
               ((g$swap$6286$4aEQL)
                (dynamic-wind
                  g$swap$6286$4aEQL
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6281$4aEQL)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6286$4aEQL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6287$4aEQL)
                    (begin
                      (g$current-input-port$6284$4aEQL g$t$6285$4aEQL)
                      (set! g$t$6285$4aEQL g$t$6287$4aEQL))))
                 (g$current-input-port$6284$4aEQL)))))))
         current-input-port
         (open-input-file g$filename$6280$4aEQL)))))
   (g$with-output-to-file$6277$4aEQL
     g$with-output-to-file$6303$4aEQL
     (case-lambda
       ((g$filename$6288$4aEQL g$thunk$6289$4aEQL)
        ((case-lambda
           ((g$current-output-port$6292$4aEQL g$t$6293$4aEQL)
            ((case-lambda
               ((g$swap$6294$4aEQL)
                (dynamic-wind
                  g$swap$6294$4aEQL
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6289$4aEQL)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6294$4aEQL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6295$4aEQL)
                    (begin
                      (g$current-output-port$6292$4aEQL g$t$6293$4aEQL)
                      (set! g$t$6293$4aEQL g$t$6295$4aEQL))))
                 (g$current-output-port$6292$4aEQL)))))))
         current-output-port
         (open-output-file g$filename$6288$4aEQL)))))
   (g$call-with-input-file$6278$4aEQL
     g$call-with-input-file$6304$4aEQL
     (case-lambda
       ((g$filename$6296$4aEQL g$proc$6297$4aEQL)
        ((case-lambda
           ((g$p$6298$4aEQL)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6297$4aEQL g$p$6298$4aEQL)))
              (case-lambda (() (close-input-port g$p$6298$4aEQL))))))
         (open-input-file g$filename$6296$4aEQL)))))
   (g$call-with-output-file$6279$4aEQL
     g$call-with-output-file$6305$4aEQL
     (case-lambda
       ((g$filename$6299$4aEQL g$proc$6300$4aEQL)
        ((case-lambda
           ((g$p$6301$4aEQL)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6300$4aEQL g$p$6301$4aEQL)))
              (case-lambda (() (close-output-port g$p$6301$4aEQL))))))
         (open-output-file g$filename$6299$4aEQL))))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7382$6306$4aEQL
     g$7382$6415$4aEQL
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7384$6307$4aEQL g$7384$6416$4aEQL '#f)
   (g$7383$6308$4aEQL
     g$7383$6417$4aEQL
     (make-record-constructor-descriptor
       g$7382$6306$4aEQL
       '#f
       g$7384$6307$4aEQL))
   (g$enum?$6309$4aEQL
     g$enum?$6418$4aEQL
     (record-predicate g$7382$6306$4aEQL))
   (g$make-enum$6310$4aEQL
     g$make-enum$6419$4aEQL
     (record-constructor g$7383$6308$4aEQL))
   (g$enum-value$6311$4aEQL
     g$enum-value$6420$4aEQL
     (record-accessor g$7382$6306$4aEQL '0))
   (g$enum-info$6312$4aEQL
     g$enum-info$6421$4aEQL
     (record-accessor g$7382$6306$4aEQL '1))
   (g$7395$6313$4aEQL
     g$7395$6422$4aEQL
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7397$6314$4aEQL g$7397$6423$4aEQL '#f)
   (g$7396$6315$4aEQL
     g$7396$6424$4aEQL
     (make-record-constructor-descriptor
       g$7395$6313$4aEQL
       '#f
       g$7397$6314$4aEQL))
   (g$enum-universe?$6316$4aEQL
     g$enum-universe?$6425$4aEQL
     (record-predicate g$7395$6313$4aEQL))
   (g$make-enum-universe$6317$4aEQL
     g$make-enum-universe$6426$4aEQL
     (record-constructor g$7396$6315$4aEQL))
   (g$enum-universe-id$6318$4aEQL
     g$enum-universe-id$6427$4aEQL
     (record-accessor g$7395$6313$4aEQL '0))
   (g$enum-universe-symbols$6319$4aEQL
     g$enum-universe-symbols$6428$4aEQL
     (record-accessor g$7395$6313$4aEQL '1))
   (g$enum-universe-mapping$6320$4aEQL
     g$enum-universe-mapping$6429$4aEQL
     (record-accessor g$7395$6313$4aEQL '2))
   (g$enum-universe-value$6321$4aEQL
     g$enum-universe-value$6430$4aEQL
     (record-accessor g$7395$6313$4aEQL '3))
   (g$enum-type=?$6322$4aEQL
     g$enum-type=?$6431$4aEQL
     (case-lambda
       ((g$enumset1$6344$4aEQL g$enumset2$6345$4aEQL)
        (eq? (g$enum-universe-id$6318$4aEQL
               (g$enum-info$6312$4aEQL g$enumset1$6344$4aEQL))
             (g$enum-universe-id$6318$4aEQL
               (g$enum-info$6312$4aEQL g$enumset2$6345$4aEQL))))))
   (g$get-symbols$6323$4aEQL
     g$get-symbols$6432$4aEQL
     (case-lambda
       ((g$enumset$6346$4aEQL)
        (g$enum-universe-symbols$6319$4aEQL
          (g$enum-info$6312$4aEQL g$enumset$6346$4aEQL)))))
   (g$get-value$6324$4aEQL
     g$get-value$6433$4aEQL
     (case-lambda
       ((g$enumset$6347$4aEQL g$s$6348$4aEQL)
        (g$hashtable-ref$5480$4aEQL
          (g$enum-universe-mapping$6320$4aEQL
            (g$enum-info$6312$4aEQL g$enumset$6347$4aEQL))
          g$s$6348$4aEQL
          '#f))))
   (g$assert-enum$6325$4aEQL
     g$assert-enum$6434$4aEQL
     (case-lambda
       ((g$who$6349$4aEQL g$enumset$6350$4aEQL)
        (if (not (g$enum?$6309$4aEQL g$enumset$6350$4aEQL))
          (assertion-violation
            g$who$6349$4aEQL
            '"not an enumeration"
            g$enumset$6350$4aEQL)
          (void)))))
   (g$make-info$6326$4aEQL
     g$make-info$6435$4aEQL
     (case-lambda
       ((g$symbols$6351$4aEQL)
        ((case-lambda
           ((g$ht$6352$4aEQL)
            ((letrec ((g$f$6353$4aEQL
                        (case-lambda
                          ((g$s$6354$4aEQL g$a$6355$4aEQL g$mask$6356$4aEQL)
                           (if (null? g$s$6354$4aEQL)
                             (values
                               (reverse! g$a$6355$4aEQL)
                               g$ht$6352$4aEQL
                               (- g$mask$6356$4aEQL '1))
                             ((case-lambda
                                ((g$n$6357$4aEQL)
                                 (if (symbol? g$n$6357$4aEQL)
                                   (if (g$hashtable-contains?$5483$4aEQL
                                         g$ht$6352$4aEQL
                                         g$n$6357$4aEQL)
                                     (g$f$6353$4aEQL
                                       (cdr g$s$6354$4aEQL)
                                       g$a$6355$4aEQL
                                       g$mask$6356$4aEQL)
                                     (begin
                                       (g$hashtable-set!$5481$4aEQL
                                         g$ht$6352$4aEQL
                                         g$n$6357$4aEQL
                                         g$mask$6356$4aEQL)
                                       (g$f$6353$4aEQL
                                         (cdr g$s$6354$4aEQL)
                                         (cons g$n$6357$4aEQL g$a$6355$4aEQL)
                                         (g$bitwise-arithmetic-shift-left$6005$4aEQL
                                           g$mask$6356$4aEQL
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6357$4aEQL))))
                              (car g$s$6354$4aEQL)))))))
               g$f$6353$4aEQL)
             g$symbols$6351$4aEQL
             '()
             '1)))
         (g$make-eq-hashtable$5477$4aEQL)))))
   (g$make-name$6327$4aEQL
     g$make-name$6436$4aEQL
     (case-lambda
       ((g$symbols$6358$4aEQL)
        (string->symbol (g$format$6475$4aEQL '"~a" g$symbols$6358$4aEQL)))))
   (g$make-enumeration$6328$4aEQL
     g$make-enumeration$6437$4aEQL
     (case-lambda
       ((g$symbols$6359$4aEQL)
        (call-with-values
          (case-lambda (() (g$make-info$6326$4aEQL g$symbols$6359$4aEQL)))
          (case-lambda
            ((g$s$6363$4aEQL g$mapping$6364$4aEQL g$mask$6365$4aEQL)
             ((case-lambda
                ((g$mask$6366$4aEQL g$mapping$6367$4aEQL g$s$6368$4aEQL)
                 (g$make-enum$6310$4aEQL
                   g$mask$6366$4aEQL
                   (g$make-enum-universe$6317$4aEQL
                     (g$make-name$6327$4aEQL g$s$6368$4aEQL)
                     g$s$6368$4aEQL
                     g$mapping$6367$4aEQL
                     g$mask$6366$4aEQL))))
              g$mask$6365$4aEQL
              g$mapping$6364$4aEQL
              g$s$6363$4aEQL)))))))
   (g$enum-set-universe$6329$4aEQL
     g$enum-set-universe$6438$4aEQL
     (case-lambda
       ((g$enumset$6369$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set-universe g$enumset$6369$4aEQL)
          ((case-lambda
             ((g$ei$6370$4aEQL)
              (g$make-enum$6310$4aEQL
                (g$enum-universe-value$6321$4aEQL g$ei$6370$4aEQL)
                g$ei$6370$4aEQL)))
           (g$enum-info$6312$4aEQL g$enumset$6369$4aEQL))))))
   (g$enum-set-indexer$6330$4aEQL
     g$enum-set-indexer$6439$4aEQL
     (case-lambda
       ((g$enumset$6371$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set-indexer g$enumset$6371$4aEQL)
          (case-lambda
            ((g$symbol$6372$4aEQL)
             (begin
               (if (not (symbol? g$symbol$6372$4aEQL))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6372$4aEQL)
                 (void))
               ((case-lambda
                  ((g$v$6373$4aEQL)
                   (if g$v$6373$4aEQL
                     (- (bitwise-length g$v$6373$4aEQL) '1)
                     '#f)))
                (g$get-value$6324$4aEQL
                  g$enumset$6371$4aEQL
                  g$symbol$6372$4aEQL)))))))))
   (g$enum-set-constructor$6331$4aEQL
     g$enum-set-constructor$6440$4aEQL
     (case-lambda
       ((g$enumset$6374$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set-constructor g$enumset$6374$4aEQL)
          (case-lambda
            ((g$symbols$6375$4aEQL)
             ((letrec ((g$f$6376$4aEQL
                         (case-lambda
                           ((g$v$6377$4aEQL g$s$6378$4aEQL)
                            (if (null? g$s$6378$4aEQL)
                              (g$make-enum$6310$4aEQL
                                g$v$6377$4aEQL
                                (g$enum-info$6312$4aEQL g$enumset$6374$4aEQL))
                              ((case-lambda
                                 ((g$n$6379$4aEQL)
                                  (if (symbol? g$n$6379$4aEQL)
                                    ((case-lambda
                                       ((g$v*$6380$4aEQL)
                                        (if g$v*$6380$4aEQL
                                          (g$f$6376$4aEQL
                                            (bitwise-ior
                                              g$v$6377$4aEQL
                                              g$v*$6380$4aEQL)
                                            (cdr g$s$6378$4aEQL))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6379$4aEQL))))
                                     (g$get-value$6324$4aEQL
                                       g$enumset$6374$4aEQL
                                       g$n$6379$4aEQL))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6379$4aEQL))))
                               (car g$s$6378$4aEQL)))))))
                g$f$6376$4aEQL)
              '0
              g$symbols$6375$4aEQL)))))))
   (g$enum-set->list$6332$4aEQL
     g$enum-set->list$6441$4aEQL
     (case-lambda
       ((g$enumset$6381$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set->list g$enumset$6381$4aEQL)
          ((case-lambda
             ((g$value$6382$4aEQL)
              ((letrec ((g$f$6383$4aEQL
                          (case-lambda
                            ((g$s$6384$4aEQL g$l$6385$4aEQL)
                             (if (null? g$s$6384$4aEQL)
                               (reverse! g$l$6385$4aEQL)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6324$4aEQL
                                         g$enumset$6381$4aEQL
                                         (car g$s$6384$4aEQL))
                                       g$value$6382$4aEQL))
                                 (g$f$6383$4aEQL
                                   (cdr g$s$6384$4aEQL)
                                   g$l$6385$4aEQL)
                                 (g$f$6383$4aEQL
                                   (cdr g$s$6384$4aEQL)
                                   (cons
                                     (car g$s$6384$4aEQL)
                                     g$l$6385$4aEQL))))))))
                 g$f$6383$4aEQL)
               (g$get-symbols$6323$4aEQL g$enumset$6381$4aEQL)
               '())))
           (g$enum-value$6311$4aEQL g$enumset$6381$4aEQL))))))
   (g$enum-set-member?$6333$4aEQL
     g$enum-set-member?$6442$4aEQL
     (case-lambda
       ((g$symbol$6386$4aEQL g$enumset$6387$4aEQL)
        (begin
          (if (not (symbol? g$symbol$6386$4aEQL))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6386$4aEQL)
            (void))
          (g$assert-enum$6325$4aEQL 'enum-set-member? g$enumset$6387$4aEQL)
          ((case-lambda
             ((g$v$6388$4aEQL)
              (if g$v$6388$4aEQL
                (not (zero?
                       (bitwise-and
                         g$v$6388$4aEQL
                         (g$enum-value$6311$4aEQL g$enumset$6387$4aEQL))))
                '#f)))
           (g$get-value$6324$4aEQL
             g$enumset$6387$4aEQL
             g$symbol$6386$4aEQL))))))
   (g$enum-set-subset?$6334$4aEQL
     g$enum-set-subset?$6443$4aEQL
     (case-lambda
       ((g$enumset1$6389$4aEQL g$enumset2$6390$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set-subset? g$enumset1$6389$4aEQL)
          (g$assert-enum$6325$4aEQL 'enum-set-subset? g$enumset2$6390$4aEQL)
          ((case-lambda
             ((g$v1$6391$4aEQL g$v2$6392$4aEQL)
              (if (g$enum-type=?$6322$4aEQL
                    g$enumset1$6389$4aEQL
                    g$enumset2$6390$4aEQL)
                (= (bitwise-and g$v1$6391$4aEQL g$v2$6392$4aEQL)
                   g$v1$6391$4aEQL)
                ((letrec ((g$f$6393$4aEQL
                            (case-lambda
                              ((g$s$6394$4aEQL)
                               (if (null? g$s$6394$4aEQL)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6395$4aEQL g$v2*$6396$4aEQL)
                                     (if g$v2*$6396$4aEQL
                                       ((case-lambda
                                          ((g$has1$6397$4aEQL g$has2$6398$4aEQL)
                                           (if (if g$has1$6397$4aEQL
                                                 (begin
                                                   '#f
                                                   (not g$has2$6398$4aEQL))
                                                 '#f)
                                             '#f
                                             (g$f$6393$4aEQL
                                               (cdr g$s$6394$4aEQL)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$6391$4aEQL
                                                 g$v1*$6395$4aEQL)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$6392$4aEQL
                                                 g$v2*$6396$4aEQL))))
                                       '#f)))
                                  (g$get-value$6324$4aEQL
                                    g$enumset1$6389$4aEQL
                                    (car g$s$6394$4aEQL))
                                  (g$get-value$6324$4aEQL
                                    g$enumset2$6390$4aEQL
                                    (car g$s$6394$4aEQL))))))))
                   g$f$6393$4aEQL)
                 (g$get-symbols$6323$4aEQL g$enumset1$6389$4aEQL)))))
           (g$enum-value$6311$4aEQL g$enumset1$6389$4aEQL)
           (g$enum-value$6311$4aEQL g$enumset2$6390$4aEQL))))))
   (g$enum-set=?$6335$4aEQL
     g$enum-set=?$6444$4aEQL
     (case-lambda
       ((g$enumset1$6399$4aEQL g$enumset2$6400$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set=? g$enumset1$6399$4aEQL)
          (g$assert-enum$6325$4aEQL 'enum-set=? g$enumset2$6400$4aEQL)
          (if (g$enum-set-subset?$6334$4aEQL
                g$enumset1$6399$4aEQL
                g$enumset2$6400$4aEQL)
            (begin
              '#f
              (g$enum-set-subset?$6334$4aEQL
                g$enumset2$6400$4aEQL
                g$enumset1$6399$4aEQL))
            '#f)))))
   (g$enum-set-union$6336$4aEQL
     g$enum-set-union$6445$4aEQL
     (case-lambda
       ((g$enumset1$6401$4aEQL g$enumset2$6402$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set-union g$enumset1$6401$4aEQL)
          (g$assert-enum$6325$4aEQL 'enum-set-union g$enumset2$6402$4aEQL)
          (if (g$enum-type=?$6322$4aEQL
                g$enumset1$6401$4aEQL
                g$enumset2$6402$4aEQL)
            (g$make-enum$6310$4aEQL
              (bitwise-ior
                (g$enum-value$6311$4aEQL g$enumset1$6401$4aEQL)
                (g$enum-value$6311$4aEQL g$enumset2$6402$4aEQL))
              (g$enum-info$6312$4aEQL g$enumset1$6401$4aEQL))
            '#f)))))
   (g$enum-set-intersection$6337$4aEQL
     g$enum-set-intersection$6446$4aEQL
     (case-lambda
       ((g$enumset1$6403$4aEQL g$enumset2$6404$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL
            'enum-set-intersection
            g$enumset1$6403$4aEQL)
          (g$assert-enum$6325$4aEQL
            'enum-set-intersection
            g$enumset2$6404$4aEQL)
          (if (g$enum-type=?$6322$4aEQL
                g$enumset1$6403$4aEQL
                g$enumset2$6404$4aEQL)
            (g$make-enum$6310$4aEQL
              (bitwise-and
                (g$enum-value$6311$4aEQL g$enumset1$6403$4aEQL)
                (g$enum-value$6311$4aEQL g$enumset2$6404$4aEQL))
              (g$enum-info$6312$4aEQL g$enumset1$6403$4aEQL))
            '#f)))))
   (g$enum-set-difference$6338$4aEQL
     g$enum-set-difference$6447$4aEQL
     (case-lambda
       ((g$enumset1$6405$4aEQL g$enumset2$6406$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set-difference g$enumset1$6405$4aEQL)
          (g$assert-enum$6325$4aEQL 'enum-set-difference g$enumset2$6406$4aEQL)
          (if (g$enum-type=?$6322$4aEQL
                g$enumset1$6405$4aEQL
                g$enumset2$6406$4aEQL)
            (g$make-enum$6310$4aEQL
              (bitwise-and
                (g$enum-value$6311$4aEQL g$enumset1$6405$4aEQL)
                (bitwise-not (g$enum-value$6311$4aEQL g$enumset2$6406$4aEQL)))
              (g$enum-info$6312$4aEQL g$enumset1$6405$4aEQL))
            '#f)))))
   (g$enum-set-complement$6339$4aEQL
     g$enum-set-complement$6448$4aEQL
     (case-lambda
       ((g$enumset$6407$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set-complement g$enumset$6407$4aEQL)
          (g$make-enum$6310$4aEQL
            (bitwise-not (g$enum-value$6311$4aEQL g$enumset$6407$4aEQL))
            (g$enum-info$6312$4aEQL g$enumset$6407$4aEQL))))))
   (g$enum-set-projection$6340$4aEQL
     g$enum-set-projection$6449$4aEQL
     (case-lambda
       ((g$enumset1$6408$4aEQL g$enumset2$6409$4aEQL)
        (begin
          (g$assert-enum$6325$4aEQL 'enum-set-projection g$enumset1$6408$4aEQL)
          (g$assert-enum$6325$4aEQL 'enum-set-projection g$enumset2$6409$4aEQL)
          ((case-lambda
             ((g$v1$6410$4aEQL)
              ((letrec ((g$f$6411$4aEQL
                          (case-lambda
                            ((g$s$6412$4aEQL g$v$6413$4aEQL)
                             (if (null? g$s$6412$4aEQL)
                               (g$make-enum$6310$4aEQL
                                 g$v$6413$4aEQL
                                 (g$enum-info$6312$4aEQL g$enumset2$6409$4aEQL))
                               (if (zero?
                                     (bitwise-and
                                       g$v1$6410$4aEQL
                                       (g$get-value$6324$4aEQL
                                         g$enumset1$6408$4aEQL
                                         (car g$s$6412$4aEQL))))
                                 (g$f$6411$4aEQL
                                   (cdr g$s$6412$4aEQL)
                                   g$v$6413$4aEQL)
                                 ((case-lambda
                                    ((g$v2$6414$4aEQL)
                                     (if g$v2$6414$4aEQL
                                       (g$f$6411$4aEQL
                                         (cdr g$s$6412$4aEQL)
                                         (bitwise-ior
                                           g$v$6413$4aEQL
                                           g$v2$6414$4aEQL))
                                       (g$f$6411$4aEQL
                                         (cdr g$s$6412$4aEQL)
                                         g$v$6413$4aEQL))))
                                  (g$get-value$6324$4aEQL
                                    g$enumset2$6409$4aEQL
                                    (car g$s$6412$4aEQL)))))))))
                 g$f$6411$4aEQL)
               (g$get-symbols$6323$4aEQL g$enumset1$6408$4aEQL)
               '0)))
           (g$enum-value$6311$4aEQL g$enumset1$6408$4aEQL)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6341$4aEQL g$p$6342$4aEQL g$wr$6343$4aEQL)
       (g$fprintf$6474$4aEQL
         g$p$6342$4aEQL
         '"#[enum-set ~a]"
         (g$enum-set->list$6332$4aEQL g$x$6341$4aEQL))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6450$4aEQL
     g$dofmt$6472$4aEQL
     (case-lambda
       ((g$p$6454$4aEQL g$cntl$6455$4aEQL g$args$6456$4aEQL)
        ((case-lambda
           ((g$nmax$6457$4aEQL)
            ((letrec ((g$loop$6458$4aEQL
                        (case-lambda
                          ((g$n$6459$4aEQL g$a$6460$4aEQL)
                           (if (fx<=? g$n$6459$4aEQL g$nmax$6457$4aEQL)
                             ((case-lambda
                                ((g$c$6461$4aEQL)
                                 (if (if (g$char=?$5246$4aEQL
                                           g$c$6461$4aEQL
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6459$4aEQL
                                           g$nmax$6457$4aEQL))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6462$4aEQL)
                                       (if (g$memv$5041$4aEQL
                                             g$t$6462$4aEQL
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6460$4aEQL)
                                             g$p$6454$4aEQL)
                                           (g$loop$6458$4aEQL
                                             (fx+ g$n$6459$4aEQL '2)
                                             (cdr g$a$6460$4aEQL)))
                                         (if (g$memv$5041$4aEQL
                                               g$t$6462$4aEQL
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6460$4aEQL)
                                               g$p$6454$4aEQL)
                                             (g$loop$6458$4aEQL
                                               (fx+ g$n$6459$4aEQL '2)
                                               (cdr g$a$6460$4aEQL)))
                                           (if (g$memv$5041$4aEQL
                                                 g$t$6462$4aEQL
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6460$4aEQL)
                                                   '2)
                                                 g$p$6454$4aEQL)
                                               (g$loop$6458$4aEQL
                                                 (fx+ g$n$6459$4aEQL '2)
                                                 (cdr g$a$6460$4aEQL)))
                                             (if (g$memv$5041$4aEQL
                                                   g$t$6462$4aEQL
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6460$4aEQL)
                                                     '8)
                                                   g$p$6454$4aEQL)
                                                 (g$loop$6458$4aEQL
                                                   (fx+ g$n$6459$4aEQL '2)
                                                   (cdr g$a$6460$4aEQL)))
                                               (if (g$memv$5041$4aEQL
                                                     g$t$6462$4aEQL
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6460$4aEQL)
                                                       '16)
                                                     g$p$6454$4aEQL)
                                                   (g$loop$6458$4aEQL
                                                     (fx+ g$n$6459$4aEQL '2)
                                                     (cdr g$a$6460$4aEQL)))
                                                 (if (g$memv$5041$4aEQL
                                                       g$t$6462$4aEQL
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6460$4aEQL)
                                                         '10)
                                                       g$p$6454$4aEQL)
                                                     (g$loop$6458$4aEQL
                                                       (fx+ g$n$6459$4aEQL '2)
                                                       (cdr g$a$6460$4aEQL)))
                                                   (if (g$memv$5041$4aEQL
                                                         g$t$6462$4aEQL
                                                         '(#\~))
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6454$4aEQL)
                                                       (g$loop$6458$4aEQL
                                                         (fx+ g$n$6459$4aEQL '2)
                                                         g$a$6460$4aEQL))
                                                     (begin
                                                       (write-char
                                                         g$c$6461$4aEQL
                                                         g$p$6454$4aEQL)
                                                       (g$loop$6458$4aEQL
                                                         (fx+ g$n$6459$4aEQL '1)
                                                         g$a$6460$4aEQL)))))))))))
                                    (string-ref
                                      g$cntl$6455$4aEQL
                                      (fx+ g$n$6459$4aEQL '1)))
                                   (begin
                                     (write-char g$c$6461$4aEQL g$p$6454$4aEQL)
                                     (g$loop$6458$4aEQL
                                       (fx+ g$n$6459$4aEQL '1)
                                       g$a$6460$4aEQL)))))
                              (string-ref g$cntl$6455$4aEQL g$n$6459$4aEQL))
                             (void))))))
               g$loop$6458$4aEQL)
             '0
             g$args$6456$4aEQL)))
         (fx- (string-length g$cntl$6455$4aEQL) '1)))))
   (g$printf$6451$4aEQL
     g$printf$6473$4aEQL
     (case-lambda
       ((g$control$6463$4aEQL . g$args$6464$4aEQL)
        (g$dofmt$6450$4aEQL
          (current-output-port)
          g$control$6463$4aEQL
          g$args$6464$4aEQL))))
   (g$fprintf$6452$4aEQL
     g$fprintf$6474$4aEQL
     (case-lambda
       ((g$p$6465$4aEQL g$control$6466$4aEQL . g$args$6467$4aEQL)
        (g$dofmt$6450$4aEQL
          g$p$6465$4aEQL
          g$control$6466$4aEQL
          g$args$6467$4aEQL))))
   (g$format$6453$4aEQL
     g$format$6475$4aEQL
     (case-lambda
       ((g$control$6468$4aEQL . g$args$6469$4aEQL)
        (call-with-values
          g$open-string-output-port$6267$4aEQL
          (case-lambda
            ((g$p$6470$4aEQL g$c$6471$4aEQL)
             (begin
               (g$dofmt$6450$4aEQL
                 g$p$6470$4aEQL
                 g$control$6468$4aEQL
                 g$args$6469$4aEQL)
               (g$c$6471$4aEQL)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6476$4aEQL
     g$make-traced-macro$6479$4aEQL
     (case-lambda
       ((g$name$6477$4aEQL g$x$6478$4aEQL)
        (if (procedure? g$x$6478$4aEQL)
          (make-traced-procedure
            g$name$6477$4aEQL
            g$x$6478$4aEQL
            g$syntax->datum$11190$4aEQL)
          (if (g$variable-transformer?$11013$4aEQL g$x$6478$4aEQL)
            (g$make-variable-transformer$11012$4aEQL
              (make-traced-procedure
                g$name$6477$4aEQL
                (g$variable-transformer-procedure$11014$4aEQL g$x$6478$4aEQL)
                g$syntax->datum$11190$4aEQL))
            g$x$6478$4aEQL))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6480$4aEQL
     g$library-version-mismatch-warning$6576$4aEQL
     (case-lambda
       ((g$name$6553$4aEQL g$depname$6554$4aEQL g$filename$6555$4aEQL)
        (g$fprintf$6474$4aEQL
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$6553$4aEQL
          g$depname$6554$4aEQL
          g$filename$6555$4aEQL))))
   (g$file-locator-resolution-error$6481$4aEQL
     g$file-locator-resolution-error$6577$4aEQL
     (case-lambda
       ((g$libname$6556$4aEQL g$failed-list$6557$4aEQL)
        (letrec* ((g$7627$6558$4aEQL
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$7630$4aEQL
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$7629$6559$4aEQL '#f)
                  (g$7628$6560$4aEQL
                    (make-record-constructor-descriptor
                      g$7627$6558$4aEQL
                      &condition-rcd
                      g$7629$6559$4aEQL))
                  (g$7626$6561$4aEQL (record-predicate g$7627$6558$4aEQL))
                  (g$make-library-resolution-condition$6562$4aEQL
                    (record-constructor g$7628$6560$4aEQL))
                  (g$7624$6563$4aEQL (record-accessor g$7627$6558$4aEQL '0))
                  (g$7625$6564$4aEQL (record-accessor g$7627$6558$4aEQL '1))
                  (g$library-resolution-condition?$6565$4aEQL
                    (condition-predicate g$7627$6558$4aEQL))
                  (g$condition-library$6566$4aEQL
                    (condition-accessor g$7627$6558$4aEQL g$7624$6563$4aEQL))
                  (g$condition-files$6567$4aEQL
                    (condition-accessor g$7627$6558$4aEQL g$7625$6564$4aEQL)))
          (raise
            (condition
              (g$make-error$5764$4aEQL)
              (g$make-who-condition$5790$4aEQL 'expander)
              (g$make-message-condition$5744$4aEQL
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$6562$4aEQL
                g$libname$6556$4aEQL
                g$failed-list$6557$4aEQL)))))))
   (g$read-library-source-file$6482$4aEQL
     g$read-library-source-file$6578$4aEQL
     (case-lambda
       ((g$file-name$6568$4aEQL)
        (g$with-input-from-file$6302$4aEQL
          g$file-name$6568$4aEQL
          read-annotated))))
   (g$make-parameter$6483$4aEQL
     g$make-parameter$6579$4aEQL
     (case-lambda
       ((g$x$6569$4aEQL)
        (g$make-parameter$6483$4aEQL
          g$x$6569$4aEQL
          (case-lambda ((g$x$6570$4aEQL) g$x$6570$4aEQL))))
       ((g$x$6571$4aEQL g$fender$6572$4aEQL)
        (begin
          (if (not (procedure? g$fender$6572$4aEQL))
            (g$assertion-error$11183$4aEQL
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(89,8) - (89,36)"))
            (void))
          ((case-lambda
             ((g$x$6573$4aEQL)
              (case-lambda
                (() g$x$6573$4aEQL)
                ((g$v$6574$4aEQL)
                 (set! g$x$6573$4aEQL (g$fender$6572$4aEQL g$v$6574$4aEQL))))))
           (g$fender$6572$4aEQL g$x$6571$4aEQL))))))
   (g$file-options-constructor$6551$4aEQL
     g$file-options-constructor$6580$4aEQL
     (g$make-parameter$6483$4aEQL '#f))
   (g$file-options-spec$6552$4aEQL
     g$file-options-spec$6581$4aEQL
     (case-lambda
       ((g$x$6575$4aEQL)
        ((g$file-options-constructor$6551$4aEQL) g$x$6575$4aEQL)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6777$4aEQL
     g$current-primitive-locations$6822$4aEQL
     (g$make-parameter$6579$4aEQL
       (case-lambda ((g$x$6783$4aEQL) '#f))
       (case-lambda
         ((g$p$6784$4aEQL)
          (begin
            (if (not (procedure? g$p$6784$4aEQL))
              (g$assertion-error$11183$4aEQL
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$6784$4aEQL)))))
   (g$mutable?$6778$4aEQL
     g$mutable?$6823$4aEQL
     (case-lambda
       ((g$x$6785$4aEQL)
        (letrec* ((g$simple?$6786$4aEQL
                    (case-lambda
                      ((g$x$6787$4aEQL)
                       ((case-lambda
                          ((g$t$6788$4aEQL)
                           (if g$t$6788$4aEQL
                             g$t$6788$4aEQL
                             ((case-lambda
                                ((g$t$6789$4aEQL)
                                 (if g$t$6789$4aEQL
                                   g$t$6789$4aEQL
                                   ((case-lambda
                                      ((g$t$6790$4aEQL)
                                       (if g$t$6790$4aEQL
                                         g$t$6790$4aEQL
                                         ((case-lambda
                                            ((g$t$6791$4aEQL)
                                             (if g$t$6791$4aEQL
                                               g$t$6791$4aEQL
                                               ((case-lambda
                                                  ((g$t$6792$4aEQL)
                                                   (if g$t$6792$4aEQL
                                                     g$t$6792$4aEQL
                                                     ((case-lambda
                                                        ((g$t$6793$4aEQL)
                                                         (if g$t$6793$4aEQL
                                                           g$t$6793$4aEQL
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6787$4aEQL)))))
                                                      (bytevector?
                                                        g$x$6787$4aEQL)))))
                                                (string? g$x$6787$4aEQL)))))
                                          (boolean? g$x$6787$4aEQL)))))
                                    (symbol? g$x$6787$4aEQL)))))
                              (char? g$x$6787$4aEQL)))))
                        (null? g$x$6787$4aEQL))))))
          (not (g$simple?$6786$4aEQL g$x$6785$4aEQL))))))
   (g$rewriter$6779$4aEQL
     g$rewriter$6824$4aEQL
     (case-lambda
       ((g$quote-hack?$6794$4aEQL)
        (letrec* ((g$f$6795$4aEQL
                    (case-lambda
                      ((g$x$6796$4aEQL)
                       (if (pair? g$x$6796$4aEQL)
                         ((case-lambda
                            ((g$t$6797$4aEQL)
                             (if (g$memv$5041$4aEQL g$t$6797$4aEQL '(quote))
                               (if (if g$quote-hack?$6794$4aEQL
                                     (begin
                                       '#f
                                       (g$mutable?$6778$4aEQL
                                         (g$cadr$5212$4aEQL g$x$6796$4aEQL)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6798$4aEQL)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6798$4aEQL
                                         (g$cadr$5212$4aEQL g$x$6796$4aEQL))
                                       g$g$6798$4aEQL)))
                                  (gensym))
                                 g$x$6796$4aEQL)
                               (if (g$memv$5041$4aEQL
                                     g$t$6797$4aEQL
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (g$map$5048$4aEQL
                                     (case-lambda
                                       ((g$x$6799$4aEQL)
                                        (cons
                                          (car g$x$6799$4aEQL)
                                          (g$map$5048$4aEQL
                                            g$f$6795$4aEQL
                                            (cdr g$x$6799$4aEQL)))))
                                     (cdr g$x$6796$4aEQL)))
                                 (if (g$memv$5041$4aEQL
                                       g$t$6797$4aEQL
                                       '(lambda))
                                   (g$cons*$5050$4aEQL
                                     'lambda
                                     (g$cadr$5212$4aEQL g$x$6796$4aEQL)
                                     (g$map$5048$4aEQL
                                       g$f$6795$4aEQL
                                       (g$cddr$5214$4aEQL g$x$6796$4aEQL)))
                                   (if (g$memv$5041$4aEQL
                                         g$t$6797$4aEQL
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$6800$4aEQL
                                           g$body*$6801$4aEQL)
                                         ((case-lambda
                                            ((g$lhs*$6802$4aEQL
                                               g$rhs*$6803$4aEQL)
                                             (g$cons*$5050$4aEQL
                                               'letrec
                                               (g$map$5048$4aEQL
                                                 list
                                                 g$lhs*$6802$4aEQL
                                                 (g$map$5048$4aEQL
                                                   g$f$6795$4aEQL
                                                   g$rhs*$6803$4aEQL))
                                               (g$map$5048$4aEQL
                                                 g$f$6795$4aEQL
                                                 g$body*$6801$4aEQL))))
                                          (g$map$5048$4aEQL
                                            car
                                            g$bindings$6800$4aEQL)
                                          (g$map$5048$4aEQL
                                            g$cadr$5212$4aEQL
                                            g$bindings$6800$4aEQL))))
                                      (g$cadr$5212$4aEQL g$x$6796$4aEQL)
                                      (g$cddr$5214$4aEQL g$x$6796$4aEQL))
                                     (if (g$memv$5041$4aEQL
                                           g$t$6797$4aEQL
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$6804$4aEQL
                                             g$body*$6805$4aEQL)
                                           ((case-lambda
                                              ((g$lhs*$6806$4aEQL
                                                 g$rhs*$6807$4aEQL)
                                               (g$cons*$5050$4aEQL
                                                 'letrec*
                                                 (g$map$5048$4aEQL
                                                   list
                                                   g$lhs*$6806$4aEQL
                                                   (g$map$5048$4aEQL
                                                     g$f$6795$4aEQL
                                                     g$rhs*$6807$4aEQL))
                                                 (g$map$5048$4aEQL
                                                   g$f$6795$4aEQL
                                                   g$body*$6805$4aEQL))))
                                            (g$map$5048$4aEQL
                                              car
                                              g$bindings$6804$4aEQL)
                                            (g$map$5048$4aEQL
                                              g$cadr$5212$4aEQL
                                              g$bindings$6804$4aEQL))))
                                        (g$cadr$5212$4aEQL g$x$6796$4aEQL)
                                        (g$cddr$5214$4aEQL g$x$6796$4aEQL))
                                       (if (g$memv$5041$4aEQL
                                             g$t$6797$4aEQL
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$6808$4aEQL g$x$6809$4aEQL)
                                             ((case-lambda
                                                ((g$bindings$6810$4aEQL
                                                   g$body*$6811$4aEQL)
                                                 ((case-lambda
                                                    ((g$lhs*$6812$4aEQL
                                                       g$lhs**$6813$4aEQL
                                                       g$rhs*$6814$4aEQL)
                                                     (g$cons*$5050$4aEQL
                                                       'library-letrec*
                                                       g$name$6808$4aEQL
                                                       (g$map$5048$4aEQL
                                                         list
                                                         g$lhs*$6812$4aEQL
                                                         g$lhs**$6813$4aEQL
                                                         (g$map$5048$4aEQL
                                                           g$f$6795$4aEQL
                                                           g$rhs*$6814$4aEQL))
                                                       (g$map$5048$4aEQL
                                                         g$f$6795$4aEQL
                                                         g$body*$6811$4aEQL))))
                                                  (g$map$5048$4aEQL
                                                    car
                                                    g$bindings$6810$4aEQL)
                                                  (g$map$5048$4aEQL
                                                    g$cadr$5212$4aEQL
                                                    g$bindings$6810$4aEQL)
                                                  (g$map$5048$4aEQL
                                                    g$caddr$5218$4aEQL
                                                    g$bindings$6810$4aEQL))))
                                              (g$cadr$5212$4aEQL g$x$6809$4aEQL)
                                              (g$cddr$5214$4aEQL
                                                g$x$6809$4aEQL))))
                                          (g$cadr$5212$4aEQL g$x$6796$4aEQL)
                                          (cdr g$x$6796$4aEQL))
                                         (if (g$memv$5041$4aEQL
                                               g$t$6797$4aEQL
                                               '(begin))
                                           (cons
                                             'begin
                                             (g$map$5048$4aEQL
                                               g$f$6795$4aEQL
                                               (cdr g$x$6796$4aEQL)))
                                           (if (g$memv$5041$4aEQL
                                                 g$t$6797$4aEQL
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5212$4aEQL
                                                 g$x$6796$4aEQL)
                                               (g$f$6795$4aEQL
                                                 (g$caddr$5218$4aEQL
                                                   g$x$6796$4aEQL)))
                                             (if (g$memv$5041$4aEQL
                                                   g$t$6797$4aEQL
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$6815$4aEQL)
                                                   ((case-lambda
                                                      ((g$t$6816$4aEQL)
                                                       (if g$t$6816$4aEQL
                                                         ((case-lambda
                                                            ((g$loc$6817$4aEQL)
                                                             g$loc$6817$4aEQL))
                                                          g$t$6816$4aEQL)
                                                         g$op$6815$4aEQL)))
                                                    ((g$current-primitive-locations$6777$4aEQL)
                                                     g$op$6815$4aEQL))))
                                                (g$cadr$5212$4aEQL
                                                  g$x$6796$4aEQL))
                                               (if (g$memv$5041$4aEQL
                                                     g$t$6797$4aEQL
                                                     '(define))
                                                 g$x$6796$4aEQL
                                                 (if (list? g$x$6796$4aEQL)
                                                   (g$map$5048$4aEQL
                                                     g$f$6795$4aEQL
                                                     g$x$6796$4aEQL)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6796$4aEQL
                                                     (list?
                                                       g$x$6796$4aEQL)))))))))))))))
                          (car g$x$6796$4aEQL))
                         g$x$6796$4aEQL)))))
          g$f$6795$4aEQL))))
   (g$expanded->core$6780$4aEQL
     g$expanded->core$6825$4aEQL
     (case-lambda
       ((g$x$6818$4aEQL) ((g$rewriter$6779$4aEQL '#t) g$x$6818$4aEQL))))
   (g$compile-core-expr$6781$4aEQL
     g$compile-core-expr$6826$4aEQL
     (case-lambda
       ((g$x$6819$4aEQL) ((g$rewriter$6779$4aEQL '#f) g$x$6819$4aEQL))))
   (g$compile-core-expr-to-port$6782$4aEQL
     g$compile-core-expr-to-port$6827$4aEQL
     (case-lambda
       ((g$x$6820$4aEQL g$p$6821$4aEQL)
        (g$pretty-print$6776$4aEQL
          ((g$rewriter$6779$4aEQL '#f) g$x$6820$4aEQL)
          g$p$6821$4aEQL)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6866$4aEQL
     g$make-collection$7061$4aEQL
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6927$4aEQL)
            (letrec* ((g$set-cons$6928$4aEQL
                        (case-lambda
                          ((g$x$6930$4aEQL g$ls$6931$4aEQL)
                           (if (g$memq$5040$4aEQL
                                 g$x$6930$4aEQL
                                 g$ls$6931$4aEQL)
                             g$ls$6931$4aEQL
                             (cons g$x$6930$4aEQL g$ls$6931$4aEQL))))))
              (case-lambda
                (() g$set$6927$4aEQL)
                ((g$x$6929$4aEQL)
                 (set! g$set$6927$4aEQL
                   (g$set-cons$6928$4aEQL g$x$6929$4aEQL g$set$6927$4aEQL)))))))
         '()))))
   (g$current-library-collection$6867$4aEQL
     g$current-library-collection$7062$4aEQL
     (g$make-parameter$6579$4aEQL
       (g$make-collection$6866$4aEQL)
       (case-lambda
         ((g$x$6932$4aEQL)
          (begin
            (if (not (procedure? g$x$6932$4aEQL))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6932$4aEQL)
              (void))
            g$x$6932$4aEQL)))))
   (g$7943$6868$4aEQL
     g$7943$7063$4aEQL
     (make-record-type-descriptor
       'library
       '#f
       'g$7946$4aEQL
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7945$6869$4aEQL g$7945$7064$4aEQL '#f)
   (g$7944$6870$4aEQL
     g$7944$7065$4aEQL
     (make-record-constructor-descriptor
       g$7943$6868$4aEQL
       '#f
       g$7945$6869$4aEQL))
   (g$library?$6871$4aEQL
     g$library?$7066$4aEQL
     (record-predicate g$7943$6868$4aEQL))
   (g$make-library$6872$4aEQL
     g$make-library$7067$4aEQL
     (record-constructor g$7944$6870$4aEQL))
   (g$library-id$6873$4aEQL
     g$library-id$7068$4aEQL
     (record-accessor g$7943$6868$4aEQL '0))
   (g$library-name$6874$4aEQL
     g$library-name$7069$4aEQL
     (record-accessor g$7943$6868$4aEQL '1))
   (g$library-version$6875$4aEQL
     g$library-version$7070$4aEQL
     (record-accessor g$7943$6868$4aEQL '2))
   (g$library-imp*$6876$4aEQL
     g$library-imp*$7071$4aEQL
     (record-accessor g$7943$6868$4aEQL '3))
   (g$library-vis*$6877$4aEQL
     g$library-vis*$7072$4aEQL
     (record-accessor g$7943$6868$4aEQL '4))
   (g$library-inv*$6878$4aEQL
     g$library-inv*$7073$4aEQL
     (record-accessor g$7943$6868$4aEQL '5))
   (g$library-subst$6879$4aEQL
     g$library-subst$7074$4aEQL
     (record-accessor g$7943$6868$4aEQL '6))
   (g$library-env$6880$4aEQL
     g$library-env$7075$4aEQL
     (record-accessor g$7943$6868$4aEQL '7))
   (g$library-visit-state$6881$4aEQL
     g$library-visit-state$7076$4aEQL
     (record-accessor g$7943$6868$4aEQL '8))
   (g$library-invoke-state$6882$4aEQL
     g$library-invoke-state$7077$4aEQL
     (record-accessor g$7943$6868$4aEQL '9))
   (g$library-visit-code$6883$4aEQL
     g$library-visit-code$7078$4aEQL
     (record-accessor g$7943$6868$4aEQL '10))
   (g$library-invoke-code$6884$4aEQL
     g$library-invoke-code$7079$4aEQL
     (record-accessor g$7943$6868$4aEQL '11))
   (g$library-visible?$6885$4aEQL
     g$library-visible?$7080$4aEQL
     (record-accessor g$7943$6868$4aEQL '12))
   (g$library-source-file-name$6886$4aEQL
     g$library-source-file-name$7081$4aEQL
     (record-accessor g$7943$6868$4aEQL '13))
   (g$set-library-id!$6887$4aEQL
     g$set-library-id!$7082$4aEQL
     (record-mutator g$7943$6868$4aEQL '0))
   (g$set-library-name!$6888$4aEQL
     g$set-library-name!$7083$4aEQL
     (record-mutator g$7943$6868$4aEQL '1))
   (g$set-library-version!$6889$4aEQL
     g$set-library-version!$7084$4aEQL
     (record-mutator g$7943$6868$4aEQL '2))
   (g$set-library-imp*!$6890$4aEQL
     g$set-library-imp*!$7085$4aEQL
     (record-mutator g$7943$6868$4aEQL '3))
   (g$set-library-vis*!$6891$4aEQL
     g$set-library-vis*!$7086$4aEQL
     (record-mutator g$7943$6868$4aEQL '4))
   (g$set-library-inv*!$6892$4aEQL
     g$set-library-inv*!$7087$4aEQL
     (record-mutator g$7943$6868$4aEQL '5))
   (g$set-library-subst!$6893$4aEQL
     g$set-library-subst!$7088$4aEQL
     (record-mutator g$7943$6868$4aEQL '6))
   (g$set-library-env!$6894$4aEQL
     g$set-library-env!$7089$4aEQL
     (record-mutator g$7943$6868$4aEQL '7))
   (g$set-library-visit-state!$6895$4aEQL
     g$set-library-visit-state!$7090$4aEQL
     (record-mutator g$7943$6868$4aEQL '8))
   (g$set-library-invoke-state!$6896$4aEQL
     g$set-library-invoke-state!$7091$4aEQL
     (record-mutator g$7943$6868$4aEQL '9))
   (g$set-library-visit-code!$6897$4aEQL
     g$set-library-visit-code!$7092$4aEQL
     (record-mutator g$7943$6868$4aEQL '10))
   (g$set-library-invoke-code!$6898$4aEQL
     g$set-library-invoke-code!$7093$4aEQL
     (record-mutator g$7943$6868$4aEQL '11))
   (g$set-library-visible?!$6899$4aEQL
     g$set-library-visible?!$7094$4aEQL
     (record-mutator g$7943$6868$4aEQL '12))
   (g$set-library-source-file-name!$6900$4aEQL
     g$set-library-source-file-name!$7095$4aEQL
     (record-mutator g$7943$6868$4aEQL '13))
   (g$rp$6901$4aEQL
     g$rp$7096$4aEQL
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6933$4aEQL g$p$6934$4aEQL g$wr$6935$4aEQL)
          (begin
            (if (not (g$library?$6871$4aEQL g$x$6933$4aEQL))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6475$4aEQL
                '"#<library ~s>"
                (if (null? (g$library-version$6875$4aEQL g$x$6933$4aEQL))
                  (g$library-name$6874$4aEQL g$x$6933$4aEQL)
                  (append
                    (g$library-name$6874$4aEQL g$x$6933$4aEQL)
                    (list (g$library-version$6875$4aEQL g$x$6933$4aEQL)))))
              g$p$6934$4aEQL))))))
   (g$find-dependencies$6902$4aEQL
     g$find-dependencies$7097$4aEQL
     (case-lambda
       ((g$ls$6936$4aEQL)
        (if (null? g$ls$6936$4aEQL)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6903$4aEQL
     g$find-library-by$7098$4aEQL
     (case-lambda
       ((g$pred$6937$4aEQL)
        ((letrec ((g$f$6938$4aEQL
                    (case-lambda
                      ((g$ls$6939$4aEQL)
                       (if (null? g$ls$6939$4aEQL)
                         '#f
                         (if (g$pred$6937$4aEQL (car g$ls$6939$4aEQL))
                           (car g$ls$6939$4aEQL)
                           (g$f$6938$4aEQL (cdr g$ls$6939$4aEQL))))))))
           g$f$6938$4aEQL)
         ((g$current-library-collection$6867$4aEQL))))))
   (g$library-path$6904$4aEQL
     g$library-path$7099$4aEQL
     (g$make-parameter$6579$4aEQL
       '(".")
       (case-lambda
         ((g$x$6940$4aEQL)
          (if (if (list? g$x$6940$4aEQL)
                (begin '#f (g$for-all$5046$4aEQL string? g$x$6940$4aEQL))
                '#f)
            (g$map$5048$4aEQL
              (case-lambda ((g$x$6941$4aEQL) g$x$6941$4aEQL))
              g$x$6940$4aEQL)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6940$4aEQL))))))
   (g$library-extensions$6905$4aEQL
     g$library-extensions$7100$4aEQL
     (g$make-parameter$6579$4aEQL
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6942$4aEQL)
          (if (if (list? g$x$6942$4aEQL)
                (begin '#f (g$for-all$5046$4aEQL string? g$x$6942$4aEQL))
                '#f)
            (g$map$5048$4aEQL
              (case-lambda ((g$x$6943$4aEQL) g$x$6943$4aEQL))
              g$x$6942$4aEQL)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6942$4aEQL))))))
   (g$library-name->file-name$6906$4aEQL
     g$library-name->file-name$7101$4aEQL
     (case-lambda
       ((g$x$6944$4aEQL)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6267$4aEQL)))
          (case-lambda
            ((g$p$6947$4aEQL g$extract$6948$4aEQL)
             ((case-lambda
                ((g$extract$6949$4aEQL g$p$6950$4aEQL)
                 (letrec* ((g$display-hex$6951$4aEQL
                             (case-lambda
                               ((g$n$6959$4aEQL)
                                (if (<= '0 g$n$6959$4aEQL '9)
                                  (display g$n$6959$4aEQL g$p$6950$4aEQL)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6959$4aEQL '10)))
                                    g$p$6950$4aEQL))))))
                   (begin
                     ((letrec ((g$f$6952$4aEQL
                                 (case-lambda
                                   ((g$ls$6953$4aEQL)
                                    (if (not (null? g$ls$6953$4aEQL))
                                      (begin
                                        (display '"/" g$p$6950$4aEQL)
                                        (g$for-each$5049$4aEQL
                                          (case-lambda
                                            ((g$c$6954$4aEQL)
                                             (if ((case-lambda
                                                    ((g$t$6955$4aEQL)
                                                     (if g$t$6955$4aEQL
                                                       g$t$6955$4aEQL
                                                       ((case-lambda
                                                          ((g$t$6956$4aEQL)
                                                           (if g$t$6956$4aEQL
                                                             g$t$6956$4aEQL
                                                             ((case-lambda
                                                                ((g$t$6957$4aEQL)
                                                                 (if g$t$6957$4aEQL
                                                                   g$t$6957$4aEQL
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5041$4aEQL
                                                                       g$c$6954$4aEQL
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5249$4aEQL
                                                                '#\0
                                                                g$c$6954$4aEQL
                                                                '#\9)))))
                                                        (g$char<=?$5249$4aEQL
                                                          '#\A
                                                          g$c$6954$4aEQL
                                                          '#\Z)))))
                                                  (g$char<=?$5249$4aEQL
                                                    '#\a
                                                    g$c$6954$4aEQL
                                                    '#\z))
                                               (display
                                                 g$c$6954$4aEQL
                                                 g$p$6950$4aEQL)
                                               (begin
                                                 (display '"%" g$p$6950$4aEQL)
                                                 ((case-lambda
                                                    ((g$n$6958$4aEQL)
                                                     (begin
                                                       (g$display-hex$6951$4aEQL
                                                         (g$quotient$5854$4aEQL
                                                           g$n$6958$4aEQL
                                                           '16))
                                                       (g$display-hex$6951$4aEQL
                                                         (g$remainder$5855$4aEQL
                                                           g$n$6958$4aEQL
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6954$4aEQL))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6953$4aEQL))))
                                        (g$f$6952$4aEQL (cdr g$ls$6953$4aEQL)))
                                      (void))))))
                        g$f$6952$4aEQL)
                      g$x$6944$4aEQL)
                     (g$extract$6949$4aEQL)))))
              g$extract$6948$4aEQL
              g$p$6947$4aEQL)))))))
   (g$file-locator$6907$4aEQL
     g$file-locator$7102$4aEQL
     (g$make-parameter$6579$4aEQL
       (case-lambda
         ((g$x$6960$4aEQL)
          ((case-lambda
             ((g$str$6961$4aEQL)
              ((letrec ((g$f$6962$4aEQL
                          (case-lambda
                            ((g$ls$6963$4aEQL
                               g$exts$6964$4aEQL
                               g$failed-list$6965$4aEQL)
                             (if (null? g$ls$6963$4aEQL)
                               (g$file-locator-resolution-error$6577$4aEQL
                                 g$x$6960$4aEQL
                                 (reverse g$failed-list$6965$4aEQL))
                               (if (null? g$exts$6964$4aEQL)
                                 (g$f$6962$4aEQL
                                   (cdr g$ls$6963$4aEQL)
                                   (g$library-extensions$6905$4aEQL)
                                   g$failed-list$6965$4aEQL)
                                 ((case-lambda
                                    ((g$name$6966$4aEQL)
                                     (if (g$file-exists?$5495$4aEQL
                                           g$name$6966$4aEQL)
                                       g$name$6966$4aEQL
                                       (g$f$6962$4aEQL
                                         g$ls$6963$4aEQL
                                         (cdr g$exts$6964$4aEQL)
                                         (cons
                                           g$name$6966$4aEQL
                                           g$failed-list$6965$4aEQL)))))
                                  (string-append
                                    (car g$ls$6963$4aEQL)
                                    g$str$6961$4aEQL
                                    (car g$exts$6964$4aEQL)))))))))
                 g$f$6962$4aEQL)
               (g$library-path$6904$4aEQL)
               (g$library-extensions$6905$4aEQL)
               '())))
           (g$library-name->file-name$6906$4aEQL g$x$6960$4aEQL))))
       (case-lambda
         ((g$f$6967$4aEQL)
          (if (procedure? g$f$6967$4aEQL)
            g$f$6967$4aEQL
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6967$4aEQL))))))
   (g$serialize-all$6908$4aEQL
     g$serialize-all$7103$4aEQL
     (case-lambda
       ((g$serialize$6968$4aEQL g$compile$6969$4aEQL)
        (letrec* ((g$library-desc$6970$4aEQL
                    (case-lambda
                      ((g$x$6972$4aEQL)
                       (list
                         (g$library-id$6873$4aEQL g$x$6972$4aEQL)
                         (g$library-name$6874$4aEQL g$x$6972$4aEQL))))))
          (g$for-each$5049$4aEQL
            (case-lambda
              ((g$x$6971$4aEQL)
               (if (g$library-source-file-name$6886$4aEQL g$x$6971$4aEQL)
                 (g$serialize$6968$4aEQL
                   (g$library-source-file-name$6886$4aEQL g$x$6971$4aEQL)
                   (list
                     (g$library-id$6873$4aEQL g$x$6971$4aEQL)
                     (g$library-name$6874$4aEQL g$x$6971$4aEQL)
                     (g$library-version$6875$4aEQL g$x$6971$4aEQL)
                     (g$map$5048$4aEQL
                       g$library-desc$6970$4aEQL
                       (g$library-imp*$6876$4aEQL g$x$6971$4aEQL))
                     (g$map$5048$4aEQL
                       g$library-desc$6970$4aEQL
                       (g$library-vis*$6877$4aEQL g$x$6971$4aEQL))
                     (g$map$5048$4aEQL
                       g$library-desc$6970$4aEQL
                       (g$library-inv*$6878$4aEQL g$x$6971$4aEQL))
                     (g$library-subst$6879$4aEQL g$x$6971$4aEQL)
                     (g$library-env$6880$4aEQL g$x$6971$4aEQL)
                     (g$compile$6969$4aEQL
                       (g$library-visit-code$6883$4aEQL g$x$6971$4aEQL))
                     (g$compile$6969$4aEQL
                       (g$library-invoke-code$6884$4aEQL g$x$6971$4aEQL))
                     (g$library-visible?$6885$4aEQL g$x$6971$4aEQL)))
                 (void))))
            ((g$current-library-collection$6867$4aEQL)))))))
   (g$current-precompiled-library-loader$6909$4aEQL
     g$current-precompiled-library-loader$7104$4aEQL
     (g$make-parameter$6579$4aEQL
       (case-lambda ((g$filename$6973$4aEQL g$sk$6974$4aEQL) '#f))))
   (g$try-load-from-file$6910$4aEQL
     g$try-load-from-file$7105$4aEQL
     (case-lambda
       ((g$filename$6975$4aEQL)
        ((g$current-precompiled-library-loader$6909$4aEQL)
         g$filename$6975$4aEQL
         (case-lambda
           ((g$id$6976$4aEQL
              g$name$6977$4aEQL
              g$ver$6978$4aEQL
              g$imp*$6979$4aEQL
              g$vis*$6980$4aEQL
              g$inv*$6981$4aEQL
              g$exp-subst$6982$4aEQL
              g$exp-env$6983$4aEQL
              g$visit-proc$6984$4aEQL
              g$invoke-proc$6985$4aEQL
              g$visible?$6986$4aEQL)
            ((letrec ((g$f$6987$4aEQL
                        (case-lambda
                          ((g$deps$6988$4aEQL)
                           (if (null? g$deps$6988$4aEQL)
                             (begin
                               (g$install-library$6920$4aEQL
                                 g$id$6976$4aEQL
                                 g$name$6977$4aEQL
                                 g$ver$6978$4aEQL
                                 g$imp*$6979$4aEQL
                                 g$vis*$6980$4aEQL
                                 g$inv*$6981$4aEQL
                                 g$exp-subst$6982$4aEQL
                                 g$exp-env$6983$4aEQL
                                 g$visit-proc$6984$4aEQL
                                 g$invoke-proc$6985$4aEQL
                                 '#f
                                 '#f
                                 g$visible?$6986$4aEQL
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$6989$4aEQL)
                                 ((case-lambda
                                    ((g$label$6990$4aEQL g$dname$6991$4aEQL)
                                     ((case-lambda
                                        ((g$l$6992$4aEQL)
                                         (if (if (g$library?$6871$4aEQL
                                                   g$l$6992$4aEQL)
                                               (begin
                                                 '#f
                                                 (eq? g$label$6990$4aEQL
                                                      (g$library-id$6873$4aEQL
                                                        g$l$6992$4aEQL)))
                                               '#f)
                                           (g$f$6987$4aEQL
                                             (cdr g$deps$6988$4aEQL))
                                           (begin
                                             (g$library-version-mismatch-warning$6576$4aEQL
                                               g$name$6977$4aEQL
                                               g$dname$6991$4aEQL
                                               g$filename$6975$4aEQL)
                                             '#f))))
                                      (g$find-library-by-name$6915$4aEQL
                                        g$dname$6991$4aEQL))))
                                  (car g$d$6989$4aEQL)
                                  (g$cadr$5212$4aEQL g$d$6989$4aEQL))))
                              (car g$deps$6988$4aEQL)))))))
               g$f$6987$4aEQL)
             (append g$imp*$6979$4aEQL g$vis*$6980$4aEQL g$inv*$6981$4aEQL)))
           (g$others$6993$4aEQL '#f))))))
   (g$library-loader$6911$4aEQL
     g$library-loader$7106$4aEQL
     (g$make-parameter$6579$4aEQL
       (case-lambda
         ((g$x$6994$4aEQL)
          ((case-lambda
             ((g$file-name$6995$4aEQL)
              (if (not g$file-name$6995$4aEQL)
                (assertion-violation '#f '"cannot file library" g$x$6994$4aEQL)
                ((case-lambda
                   ((g$t$6996$4aEQL)
                    (if g$t$6996$4aEQL
                      g$t$6996$4aEQL
                      (begin
                        '#f
                        ((g$current-library-expander$6912$4aEQL)
                         (g$read-library-source-file$6578$4aEQL
                           g$file-name$6995$4aEQL)
                         g$file-name$6995$4aEQL
                         (case-lambda
                           ((g$name$6997$4aEQL)
                            (if (not (equal? g$name$6997$4aEQL g$x$6994$4aEQL))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6267$4aEQL)))
                                  (case-lambda
                                    ((g$p$7000$4aEQL g$e$7001$4aEQL)
                                     ((case-lambda
                                        ((g$e$7002$4aEQL g$p$7003$4aEQL)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7003$4aEQL)
                                           (write g$x$6994$4aEQL g$p$7003$4aEQL)
                                           (display '" in file " g$p$7003$4aEQL)
                                           (display
                                             g$file-name$6995$4aEQL
                                             g$p$7003$4aEQL)
                                           (display '", found " g$p$7003$4aEQL)
                                           (write
                                             g$name$6997$4aEQL
                                             g$p$7003$4aEQL)
                                           (display '" instead" g$p$7003$4aEQL)
                                           (g$e$7002$4aEQL))))
                                      g$e$7001$4aEQL
                                      g$p$7000$4aEQL)))))
                              (void)))))))))
                 (g$try-load-from-file$6910$4aEQL g$file-name$6995$4aEQL)))))
           ((g$file-locator$6907$4aEQL) g$x$6994$4aEQL))))
       (case-lambda
         ((g$f$7004$4aEQL)
          (if (procedure? g$f$7004$4aEQL)
            g$f$7004$4aEQL
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7004$4aEQL))))))
   (g$current-library-expander$6912$4aEQL
     g$current-library-expander$7107$4aEQL
     (g$make-parameter$6579$4aEQL
       (case-lambda
         ((g$x$7005$4aEQL)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7006$4aEQL)
          (if (procedure? g$f$7006$4aEQL)
            g$f$7006$4aEQL
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7006$4aEQL))))))
   (g$external-pending-libraries$6913$4aEQL
     g$external-pending-libraries$7108$4aEQL
     (g$make-parameter$6579$4aEQL '()))
   (g$find-external-library$6914$4aEQL
     g$find-external-library$7109$4aEQL
     (case-lambda
       ((g$name$7007$4aEQL)
        (begin
          (if (g$member$5042$4aEQL
                g$name$7007$4aEQL
                (g$external-pending-libraries$6913$4aEQL))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7007$4aEQL)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7010$4aEQL
                g$external-pending-libraries$7011$4aEQL)
              ((case-lambda
                 ((g$swap$7012$4aEQL)
                  (dynamic-wind
                    g$swap$7012$4aEQL
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6911$4aEQL) g$name$7007$4aEQL)
                         ((case-lambda
                            ((g$t$7013$4aEQL)
                             (if g$t$7013$4aEQL
                               g$t$7013$4aEQL
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7007$4aEQL)))))
                          (g$find-library-by$6903$4aEQL
                            (case-lambda
                              ((g$x$7014$4aEQL)
                               (equal?
                                 (g$library-name$6874$4aEQL g$x$7014$4aEQL)
                                 g$name$7007$4aEQL))))))))
                    g$swap$7012$4aEQL)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7015$4aEQL)
                      (begin
                        (g$external-pending-libraries$7010$4aEQL
                          g$external-pending-libraries$7011$4aEQL)
                        (set! g$external-pending-libraries$7011$4aEQL
                          g$t$7015$4aEQL))))
                   (g$external-pending-libraries$7010$4aEQL)))))))
           g$external-pending-libraries$6913$4aEQL
           (cons
             g$name$7007$4aEQL
             (g$external-pending-libraries$6913$4aEQL)))))))
   (g$find-library-by-name$6915$4aEQL
     g$find-library-by-name$7110$4aEQL
     (case-lambda
       ((g$name$7016$4aEQL)
        ((case-lambda
           ((g$t$7017$4aEQL)
            (if g$t$7017$4aEQL
              g$t$7017$4aEQL
              (begin
                '#f
                (g$find-external-library$6914$4aEQL g$name$7016$4aEQL)))))
         (g$find-library-by$6903$4aEQL
           (case-lambda
             ((g$x$7018$4aEQL)
              (equal?
                (g$library-name$6874$4aEQL g$x$7018$4aEQL)
                g$name$7016$4aEQL))))))))
   (g$library-exists?$6916$4aEQL
     g$library-exists?$7111$4aEQL
     (case-lambda
       ((g$name$7019$4aEQL)
        (if (g$find-library-by$6903$4aEQL
              (case-lambda
                ((g$x$7020$4aEQL)
                 (equal?
                   (g$library-name$6874$4aEQL g$x$7020$4aEQL)
                   g$name$7019$4aEQL))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6917$4aEQL
     g$find-library-by-spec/die$7112$4aEQL
     (case-lambda
       ((g$spec$7021$4aEQL)
        ((case-lambda
           ((g$id$7022$4aEQL)
            ((case-lambda
               ((g$t$7023$4aEQL)
                (if g$t$7023$4aEQL
                  g$t$7023$4aEQL
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7021$4aEQL)))))
             (g$find-library-by$6903$4aEQL
               (case-lambda
                 ((g$x$7024$4aEQL)
                  (eq? g$id$7022$4aEQL
                       (g$library-id$6873$4aEQL g$x$7024$4aEQL))))))))
         (car g$spec$7021$4aEQL)))))
   (g$label->binding-table$6918$4aEQL
     g$label->binding-table$7113$4aEQL
     (g$make-eq-hashtable$5477$4aEQL))
   (g$install-library-record$6919$4aEQL
     g$install-library-record$7114$4aEQL
     (case-lambda
       ((g$lib$7025$4aEQL)
        (begin
          ((case-lambda
             ((g$exp-env$7026$4aEQL)
              (g$for-each$5049$4aEQL
                (case-lambda
                  ((g$x$7027$4aEQL)
                   ((case-lambda
                      ((g$label$7028$4aEQL g$binding$7029$4aEQL)
                       ((case-lambda
                          ((g$binding$7030$4aEQL)
                           (g$hashtable-set!$5481$4aEQL
                             g$label->binding-table$6918$4aEQL
                             g$label$7028$4aEQL
                             g$binding$7030$4aEQL)))
                        ((case-lambda
                           ((g$t$7031$4aEQL)
                            (if (g$memv$5041$4aEQL g$t$7031$4aEQL '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7025$4aEQL
                                  (cdr g$binding$7029$4aEQL)))
                              (if (g$memv$5041$4aEQL
                                    g$t$7031$4aEQL
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7025$4aEQL
                                    (cdr g$binding$7029$4aEQL)))
                                (if (g$memv$5041$4aEQL
                                      g$t$7031$4aEQL
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7025$4aEQL
                                      (cdr g$binding$7029$4aEQL)))
                                  g$binding$7029$4aEQL)))))
                         (car g$binding$7029$4aEQL)))))
                    (car g$x$7027$4aEQL)
                    (cdr g$x$7027$4aEQL))))
                g$exp-env$7026$4aEQL)))
           (g$library-env$6880$4aEQL g$lib$7025$4aEQL))
          ((g$current-library-collection$6867$4aEQL) g$lib$7025$4aEQL)))))
   (g$install-library$6920$4aEQL
     g$install-library$7115$4aEQL
     (case-lambda
       ((g$id$7032$4aEQL
          g$name$7033$4aEQL
          g$ver$7034$4aEQL
          g$imp*$7035$4aEQL
          g$vis*$7036$4aEQL
          g$inv*$7037$4aEQL
          g$exp-subst$7038$4aEQL
          g$exp-env$7039$4aEQL
          g$visit-proc$7040$4aEQL
          g$invoke-proc$7041$4aEQL
          g$visit-code$7042$4aEQL
          g$invoke-code$7043$4aEQL
          g$visible?$7044$4aEQL
          g$source-file-name$7045$4aEQL)
        ((case-lambda
           ((g$imp-lib*$7046$4aEQL g$vis-lib*$7047$4aEQL g$inv-lib*$7048$4aEQL)
            (begin
              (if (not (if (symbol? g$id$7032$4aEQL)
                         (if (list? g$name$7033$4aEQL)
                           (begin '#f (list? g$ver$7034$4aEQL))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7032$4aEQL
                  g$name$7033$4aEQL
                  g$ver$7034$4aEQL)
                (void))
              (if (g$library-exists?$6916$4aEQL g$name$7033$4aEQL)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7033$4aEQL)
                (void))
              ((case-lambda
                 ((g$lib$7049$4aEQL)
                  (g$install-library-record$6919$4aEQL g$lib$7049$4aEQL)))
               (g$make-library$6872$4aEQL
                 g$id$7032$4aEQL
                 g$name$7033$4aEQL
                 g$ver$7034$4aEQL
                 g$imp-lib*$7046$4aEQL
                 g$vis-lib*$7047$4aEQL
                 g$inv-lib*$7048$4aEQL
                 g$exp-subst$7038$4aEQL
                 g$exp-env$7039$4aEQL
                 g$visit-proc$7040$4aEQL
                 g$invoke-proc$7041$4aEQL
                 g$visit-code$7042$4aEQL
                 g$invoke-code$7043$4aEQL
                 g$visible?$7044$4aEQL
                 g$source-file-name$7045$4aEQL)))))
         (g$map$5048$4aEQL
           g$find-library-by-spec/die$6917$4aEQL
           g$imp*$7035$4aEQL)
         (g$map$5048$4aEQL
           g$find-library-by-spec/die$6917$4aEQL
           g$vis*$7036$4aEQL)
         (g$map$5048$4aEQL
           g$find-library-by-spec/die$6917$4aEQL
           g$inv*$7037$4aEQL)))))
   (g$imported-label->binding$6921$4aEQL
     g$imported-label->binding$7116$4aEQL
     (case-lambda
       ((g$lab$7050$4aEQL)
        (g$hashtable-ref$5480$4aEQL
          g$label->binding-table$6918$4aEQL
          g$lab$7050$4aEQL
          '#f))))
   (g$invoke-library$6922$4aEQL
     g$invoke-library$7117$4aEQL
     (case-lambda
       ((g$lib$7051$4aEQL)
        ((case-lambda
           ((g$invoke$7052$4aEQL)
            (if (procedure? g$invoke$7052$4aEQL)
              (begin
                (g$set-library-invoke-state!$6896$4aEQL
                  g$lib$7051$4aEQL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7051$4aEQL))))
                (g$for-each$5049$4aEQL
                  g$invoke-library$6922$4aEQL
                  (g$library-inv*$6878$4aEQL g$lib$7051$4aEQL))
                (g$set-library-invoke-state!$6896$4aEQL
                  g$lib$7051$4aEQL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7051$4aEQL))))
                (g$invoke$7052$4aEQL)
                (g$set-library-invoke-state!$6896$4aEQL g$lib$7051$4aEQL '#t))
              (void))))
         (g$library-invoke-state$6882$4aEQL g$lib$7051$4aEQL)))))
   (g$visit-library$6923$4aEQL
     g$visit-library$7118$4aEQL
     (case-lambda
       ((g$lib$7053$4aEQL)
        ((case-lambda
           ((g$visit$7054$4aEQL)
            (if (procedure? g$visit$7054$4aEQL)
              (begin
                (g$set-library-visit-state!$6895$4aEQL
                  g$lib$7053$4aEQL
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7053$4aEQL))))
                (g$for-each$5049$4aEQL
                  g$invoke-library$6922$4aEQL
                  (g$library-vis*$6877$4aEQL g$lib$7053$4aEQL))
                (g$set-library-visit-state!$6895$4aEQL
                  g$lib$7053$4aEQL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7053$4aEQL))))
                (g$visit$7054$4aEQL)
                (g$set-library-visit-state!$6895$4aEQL g$lib$7053$4aEQL '#t))
              (void))))
         (g$library-visit-state$6881$4aEQL g$lib$7053$4aEQL)))))
   (g$invoke-library-by-spec$6924$4aEQL
     g$invoke-library-by-spec$7119$4aEQL
     (case-lambda
       ((g$spec$7055$4aEQL)
        (g$invoke-library$6922$4aEQL
          (g$find-library-by-spec/die$6917$4aEQL g$spec$7055$4aEQL)))))
   (g$installed-libraries$6925$4aEQL
     g$installed-libraries$7120$4aEQL
     (case-lambda
       ((g$all?$7056$4aEQL)
        ((letrec ((g$f$7057$4aEQL
                    (case-lambda
                      ((g$ls$7058$4aEQL)
                       (if (null? g$ls$7058$4aEQL)
                         '()
                         (if ((case-lambda
                                ((g$t$7059$4aEQL)
                                 (if g$t$7059$4aEQL
                                   g$t$7059$4aEQL
                                   (begin
                                     '#f
                                     (g$library-visible?$6885$4aEQL
                                       (car g$ls$7058$4aEQL))))))
                              g$all?$7056$4aEQL)
                           (cons
                             (car g$ls$7058$4aEQL)
                             (g$f$7057$4aEQL (cdr g$ls$7058$4aEQL)))
                           (g$f$7057$4aEQL (cdr g$ls$7058$4aEQL))))))))
           g$f$7057$4aEQL)
         ((g$current-library-collection$6867$4aEQL))))
       (() (g$installed-libraries$6925$4aEQL '#f))))
   (g$library-spec$6926$4aEQL
     g$library-spec$7121$4aEQL
     (case-lambda
       ((g$x$7060$4aEQL)
        (begin
          (if (not (g$library?$6871$4aEQL g$x$7060$4aEQL))
            (assertion-violation 'library-spec '"not a library" g$x$7060$4aEQL)
            (void))
          (list
            (g$library-id$6873$4aEQL g$x$7060$4aEQL)
            (g$library-name$6874$4aEQL g$x$7060$4aEQL)
            (g$library-version$6875$4aEQL g$x$7060$4aEQL)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7122$4aEQL
     g$build-global-define$7232$4aEQL
     (case-lambda ((g$x$7203$4aEQL) (g$build-void$7199$4aEQL))))
   (g$build-lambda$7171$4aEQL
     g$build-lambda$7233$4aEQL
     (case-lambda
       ((g$ae$7204$4aEQL g$vars$7205$4aEQL g$exp$7206$4aEQL)
        (list 'case-lambda (list g$vars$7205$4aEQL g$exp$7206$4aEQL)))))
   (g$build-case-lambda$7172$4aEQL
     g$build-case-lambda$7234$4aEQL
     (case-lambda
       ((g$ae$7207$4aEQL g$vars*$7208$4aEQL g$exp*$7209$4aEQL)
        (cons
          'case-lambda
          (g$map$5048$4aEQL list g$vars*$7208$4aEQL g$exp*$7209$4aEQL)))))
   (g$build-let$7173$4aEQL
     g$build-let$7235$4aEQL
     (case-lambda
       ((g$ae$7210$4aEQL g$lhs*$7211$4aEQL g$rhs*$7212$4aEQL g$body$7213$4aEQL)
        (cons
          (g$build-lambda$7171$4aEQL
            g$ae$7210$4aEQL
            g$lhs*$7211$4aEQL
            g$body$7213$4aEQL)
          g$rhs*$7212$4aEQL))))
   (g$build-sequence$7198$4aEQL
     g$build-sequence$7236$4aEQL
     (case-lambda
       ((g$ae$7214$4aEQL g$exps$7215$4aEQL)
        ((letrec ((g$loop$7216$4aEQL
                    (case-lambda
                      ((g$exps$7217$4aEQL)
                       (if (null? (cdr g$exps$7217$4aEQL))
                         (car g$exps$7217$4aEQL)
                         (if (equal?
                               (car g$exps$7217$4aEQL)
                               (g$build-void$7199$4aEQL))
                           (g$loop$7216$4aEQL (cdr g$exps$7217$4aEQL))
                           (cons 'begin g$exps$7217$4aEQL)))))))
           g$loop$7216$4aEQL)
         g$exps$7215$4aEQL))))
   (g$build-void$7199$4aEQL
     g$build-void$7237$4aEQL
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7200$4aEQL
     g$build-letrec$7238$4aEQL
     (case-lambda
       ((g$ae$7218$4aEQL
          g$vars$7219$4aEQL
          g$val-exps$7220$4aEQL
          g$body-exp$7221$4aEQL)
        (if (null? g$vars$7219$4aEQL)
          g$body-exp$7221$4aEQL
          (list
            'letrec
            (g$map$5048$4aEQL list g$vars$7219$4aEQL g$val-exps$7220$4aEQL)
            g$body-exp$7221$4aEQL)))))
   (g$build-letrec*$7201$4aEQL
     g$build-letrec*$7239$4aEQL
     (case-lambda
       ((g$ae$7222$4aEQL
          g$vars$7223$4aEQL
          g$val-exps$7224$4aEQL
          g$body-exp$7225$4aEQL)
        (if (null? g$vars$7223$4aEQL)
          g$body-exp$7225$4aEQL
          (list
            'letrec*
            (g$map$5048$4aEQL list g$vars$7223$4aEQL g$val-exps$7224$4aEQL)
            g$body-exp$7225$4aEQL)))))
   (g$build-library-letrec*$7202$4aEQL
     g$build-library-letrec*$7240$4aEQL
     (case-lambda
       ((g$ae$7226$4aEQL
          g$name$7227$4aEQL
          g$vars$7228$4aEQL
          g$locs$7229$4aEQL
          g$val-exps$7230$4aEQL
          g$body-exp$7231$4aEQL)
        (list
          'library-letrec*
          g$name$7227$4aEQL
          (g$map$5048$4aEQL
            list
            g$vars$7228$4aEQL
            g$locs$7229$4aEQL
            g$val-exps$7230$4aEQL)
          g$body-exp$7231$4aEQL)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7241$4aEQL
     g$set-cons$10925$4aEQL
     (case-lambda
       ((g$x$7704$4aEQL g$ls$7705$4aEQL)
        (if (g$memq$5040$4aEQL g$x$7704$4aEQL g$ls$7705$4aEQL)
          g$ls$7705$4aEQL
          (cons g$x$7704$4aEQL g$ls$7705$4aEQL)))))
   (g$set-union$7242$4aEQL
     g$set-union$10926$4aEQL
     (case-lambda
       ((g$ls1$7706$4aEQL g$ls2$7707$4aEQL)
        (if (null? g$ls1$7706$4aEQL)
          g$ls2$7707$4aEQL
          (if (g$memq$5040$4aEQL (car g$ls1$7706$4aEQL) g$ls2$7707$4aEQL)
            (g$set-union$7242$4aEQL (cdr g$ls1$7706$4aEQL) g$ls2$7707$4aEQL)
            (cons
              (car g$ls1$7706$4aEQL)
              (g$set-union$7242$4aEQL
                (cdr g$ls1$7706$4aEQL)
                g$ls2$7707$4aEQL)))))))
   (g$top-mark*$7244$4aEQL g$top-mark*$10927$4aEQL '(top))
   (g$top-marked?$7245$4aEQL
     g$top-marked?$10928$4aEQL
     (case-lambda
       ((g$m*$7708$4aEQL) (g$memq$5040$4aEQL 'top g$m*$7708$4aEQL))))
   (g$gen-lexical$7246$4aEQL
     g$gen-lexical$10929$4aEQL
     (case-lambda
       ((g$sym$7709$4aEQL)
        (if (symbol? g$sym$7709$4aEQL)
          (gensym g$sym$7709$4aEQL)
          (if (g$stx?$7279$4aEQL g$sym$7709$4aEQL)
            (g$gen-lexical$7246$4aEQL (g$id->sym$7308$4aEQL g$sym$7709$4aEQL))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7709$4aEQL))))))
   (g$gen-global$7247$4aEQL
     g$gen-global$10930$4aEQL
     (case-lambda
       ((g$x$7710$4aEQL) (g$gen-lexical$7246$4aEQL g$x$7710$4aEQL))))
   (g$gen-label$7248$4aEQL
     g$gen-label$10931$4aEQL
     (case-lambda ((g$_$7711$4aEQL) (gensym))))
   (g$gen-top-level-label$7249$4aEQL
     g$gen-top-level-label$10932$4aEQL
     (case-lambda
       ((g$id$7712$4aEQL g$rib$7713$4aEQL)
        (letrec* ((g$find$7714$4aEQL
                    (case-lambda
                      ((g$sym$7720$4aEQL
                         g$mark*$7721$4aEQL
                         g$sym*$7722$4aEQL
                         g$mark**$7723$4aEQL
                         g$label*$7724$4aEQL)
                       (if (pair? g$sym*$7722$4aEQL)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7720$4aEQL
                                        (car g$sym*$7722$4aEQL))
                                 (begin
                                   '#f
                                   (g$same-marks?$7309$4aEQL
                                     g$mark*$7721$4aEQL
                                     (car g$mark**$7723$4aEQL)))
                                 '#f)
                             (car g$label*$7724$4aEQL)
                             (g$find$7714$4aEQL
                               g$sym$7720$4aEQL
                               g$mark*$7721$4aEQL
                               (cdr g$sym*$7722$4aEQL)
                               (cdr g$mark**$7723$4aEQL)
                               (cdr g$label*$7724$4aEQL))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7715$4aEQL g$mark*$7716$4aEQL)
              ((case-lambda
                 ((g$sym*$7717$4aEQL)
                  ((case-lambda
                     ((g$t$7718$4aEQL)
                      (if g$t$7718$4aEQL
                        ((case-lambda
                           ((g$label$7719$4aEQL)
                            (if (g$imported-label->binding$7116$4aEQL
                                  g$label$7719$4aEQL)
                              (gensym)
                              g$label$7719$4aEQL)))
                         g$t$7718$4aEQL)
                        (gensym))))
                   (if (g$memq$5040$4aEQL
                         g$sym$7715$4aEQL
                         (g$rib-sym*$7257$4aEQL g$rib$7713$4aEQL))
                     (begin
                       '#f
                       (g$find$7714$4aEQL
                         g$sym$7715$4aEQL
                         g$mark*$7716$4aEQL
                         g$sym*$7717$4aEQL
                         (g$rib-mark**$7258$4aEQL g$rib$7713$4aEQL)
                         (g$rib-label*$7259$4aEQL g$rib$7713$4aEQL)))
                     '#f))))
               (g$rib-sym*$7257$4aEQL g$rib$7713$4aEQL))))
           (g$id->sym$7308$4aEQL g$id$7712$4aEQL)
           (g$stx-mark*$7282$4aEQL g$id$7712$4aEQL))))))
   (g$gen-define-label+loc$7250$4aEQL
     g$gen-define-label+loc$10933$4aEQL
     (case-lambda
       ((g$id$7725$4aEQL g$rib$7726$4aEQL)
        ((case-lambda
           ((g$t$7727$4aEQL)
            (if g$t$7727$4aEQL
              ((case-lambda
                 ((g$env$7728$4aEQL)
                  ((case-lambda
                     ((g$label$7729$4aEQL g$locs$7730$4aEQL)
                      (values
                        g$label$7729$4aEQL
                        ((case-lambda
                           ((g$t$7731$4aEQL)
                            (if g$t$7731$4aEQL
                              (cdr g$t$7731$4aEQL)
                              ((case-lambda
                                 ((g$loc$7732$4aEQL)
                                  (begin
                                    (g$set-interaction-env-locs!$7668$4aEQL
                                      g$env$7728$4aEQL
                                      (cons
                                        (cons
                                          g$label$7729$4aEQL
                                          g$loc$7732$4aEQL)
                                        g$locs$7730$4aEQL))
                                    g$loc$7732$4aEQL)))
                               (g$gen-lexical$7246$4aEQL g$id$7725$4aEQL)))))
                         (g$assq$5036$4aEQL
                           g$label$7729$4aEQL
                           g$locs$7730$4aEQL)))))
                   (g$gen-top-level-label$7249$4aEQL
                     g$id$7725$4aEQL
                     g$rib$7726$4aEQL)
                   (g$interaction-env-locs$7665$4aEQL g$env$7728$4aEQL))))
               g$t$7727$4aEQL)
              (values (gensym) (g$gen-lexical$7246$4aEQL g$id$7725$4aEQL)))))
         (g$top-level-context$7703$4aEQL)))))
   (g$gen-define-label$7251$4aEQL
     g$gen-define-label$10934$4aEQL
     (case-lambda
       ((g$id$7733$4aEQL g$rib$7734$4aEQL)
        (if (g$top-level-context$7703$4aEQL)
          (g$gen-top-level-label$7249$4aEQL g$id$7733$4aEQL g$rib$7734$4aEQL)
          (gensym)))))
   (g$8327$7252$4aEQL
     g$8327$10935$4aEQL
     (make-record-type-descriptor
       'rib
       '#f
       'g$8330$4aEQL
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8329$7253$4aEQL g$8329$10936$4aEQL '#f)
   (g$8328$7254$4aEQL
     g$8328$10937$4aEQL
     (make-record-constructor-descriptor
       g$8327$7252$4aEQL
       '#f
       g$8329$7253$4aEQL))
   (g$rib?$7255$4aEQL
     g$rib?$10938$4aEQL
     (record-predicate g$8327$7252$4aEQL))
   (g$make-rib$7256$4aEQL
     g$make-rib$10939$4aEQL
     (record-constructor g$8328$7254$4aEQL))
   (g$rib-sym*$7257$4aEQL
     g$rib-sym*$10940$4aEQL
     (record-accessor g$8327$7252$4aEQL '0))
   (g$rib-mark**$7258$4aEQL
     g$rib-mark**$10941$4aEQL
     (record-accessor g$8327$7252$4aEQL '1))
   (g$rib-label*$7259$4aEQL
     g$rib-label*$10942$4aEQL
     (record-accessor g$8327$7252$4aEQL '2))
   (g$rib-sealed/freq$7260$4aEQL
     g$rib-sealed/freq$10943$4aEQL
     (record-accessor g$8327$7252$4aEQL '3))
   (g$rib-cache$7261$4aEQL
     g$rib-cache$10944$4aEQL
     (record-accessor g$8327$7252$4aEQL '4))
   (g$set-rib-sym*!$7262$4aEQL
     g$set-rib-sym*!$10945$4aEQL
     (record-mutator g$8327$7252$4aEQL '0))
   (g$set-rib-mark**!$7263$4aEQL
     g$set-rib-mark**!$10946$4aEQL
     (record-mutator g$8327$7252$4aEQL '1))
   (g$set-rib-label*!$7264$4aEQL
     g$set-rib-label*!$10947$4aEQL
     (record-mutator g$8327$7252$4aEQL '2))
   (g$set-rib-sealed/freq!$7265$4aEQL
     g$set-rib-sealed/freq!$10948$4aEQL
     (record-mutator g$8327$7252$4aEQL '3))
   (g$set-rib-cache!$7266$4aEQL
     g$set-rib-cache!$10949$4aEQL
     (record-mutator g$8327$7252$4aEQL '4))
   (g$make-empty-rib$7267$4aEQL
     g$make-empty-rib$10950$4aEQL
     (case-lambda (() (g$make-rib$7256$4aEQL '() '() '() '#f '#f))))
   (g$make-cache-rib$7268$4aEQL
     g$make-cache-rib$10951$4aEQL
     (case-lambda
       (()
        (g$make-rib$7256$4aEQL
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5477$4aEQL)))))
   (g$find-label$7269$4aEQL
     g$find-label$10952$4aEQL
     (case-lambda
       ((g$rib$7735$4aEQL g$sym$7736$4aEQL g$mark*$7737$4aEQL)
        ((case-lambda
           ((g$ht$7738$4aEQL)
            (if g$ht$7738$4aEQL
              (begin
                '#f
                ((case-lambda
                   ((g$cv$7739$4aEQL)
                    ((case-lambda
                       ((g$t$7740$4aEQL)
                        (if g$t$7740$4aEQL (cdr g$t$7740$4aEQL) '#f)))
                     (if g$cv$7739$4aEQL
                       (begin
                         '#f
                         (g$assp$5039$4aEQL
                           (case-lambda
                             ((g$m$7741$4aEQL)
                              (g$same-marks?$7309$4aEQL
                                g$mark*$7737$4aEQL
                                g$m$7741$4aEQL)))
                           g$cv$7739$4aEQL))
                       '#f))))
                 (g$hashtable-ref$5480$4aEQL
                   g$ht$7738$4aEQL
                   g$sym$7736$4aEQL
                   '#f)))
              '#f)))
         (g$rib-cache$7261$4aEQL g$rib$7735$4aEQL)))))
   (g$extend-rib!$7270$4aEQL
     g$extend-rib!$10953$4aEQL
     (case-lambda
       ((g$rib$7742$4aEQL g$id$7743$4aEQL g$label$7744$4aEQL)
        (letrec* ((g$find$7745$4aEQL
                    (case-lambda
                      ((g$sym$7754$4aEQL
                         g$mark*$7755$4aEQL
                         g$sym*$7756$4aEQL
                         g$mark**$7757$4aEQL
                         g$label*$7758$4aEQL)
                       (if (pair? g$sym*$7756$4aEQL)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7754$4aEQL
                                        (car g$sym*$7756$4aEQL))
                                 (begin
                                   '#f
                                   (g$same-marks?$7309$4aEQL
                                     g$mark*$7755$4aEQL
                                     (car g$mark**$7757$4aEQL)))
                                 '#f)
                             g$label*$7758$4aEQL
                             (g$find$7745$4aEQL
                               g$sym$7754$4aEQL
                               g$mark*$7755$4aEQL
                               (cdr g$sym*$7756$4aEQL)
                               (cdr g$mark**$7757$4aEQL)
                               (cdr g$label*$7758$4aEQL))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7260$4aEQL g$rib$7742$4aEQL)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7742$4aEQL)
              (void))
            ((case-lambda
               ((g$sym$7746$4aEQL g$mark*$7747$4aEQL)
                ((case-lambda
                   ((g$sym*$7748$4aEQL)
                    ((case-lambda
                       ((g$t$7749$4aEQL)
                        (if g$t$7749$4aEQL
                          ((case-lambda
                             ((g$p$7750$4aEQL)
                              (if (not (eq? g$label$7744$4aEQL g$p$7750$4aEQL))
                                (g$syntax-violation$7696$4aEQL
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$7743$4aEQL)
                                (void))))
                           g$t$7749$4aEQL)
                          ((case-lambda
                             ((g$t$7751$4aEQL)
                              (if g$t$7751$4aEQL
                                ((case-lambda
                                   ((g$p$7752$4aEQL)
                                    (if (not (eq? g$label$7744$4aEQL
                                                  (car g$p$7752$4aEQL)))
                                      (if (g$top-level-context$7703$4aEQL)
                                        (set-car!
                                          g$p$7752$4aEQL
                                          g$label$7744$4aEQL)
                                        (g$syntax-violation$7696$4aEQL
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$7743$4aEQL))
                                      (void))))
                                 g$t$7751$4aEQL)
                                (begin
                                  (if (g$rib-cache$7261$4aEQL g$rib$7742$4aEQL)
                                    (g$hashtable-update!$5484$4aEQL
                                      (g$rib-cache$7261$4aEQL g$rib$7742$4aEQL)
                                      g$sym$7746$4aEQL
                                      (case-lambda
                                        ((g$e$7753$4aEQL)
                                         (cons
                                           (cons
                                             g$mark*$7747$4aEQL
                                             g$label$7744$4aEQL)
                                           g$e$7753$4aEQL)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7262$4aEQL
                                    g$rib$7742$4aEQL
                                    (cons g$sym$7746$4aEQL g$sym*$7748$4aEQL))
                                  (g$set-rib-mark**!$7263$4aEQL
                                    g$rib$7742$4aEQL
                                    (cons
                                      g$mark*$7747$4aEQL
                                      (g$rib-mark**$7258$4aEQL
                                        g$rib$7742$4aEQL)))
                                  (g$set-rib-label*!$7264$4aEQL
                                    g$rib$7742$4aEQL
                                    (cons
                                      g$label$7744$4aEQL
                                      (g$rib-label*$7259$4aEQL
                                        g$rib$7742$4aEQL)))))))
                           (if (g$memq$5040$4aEQL
                                 g$sym$7746$4aEQL
                                 (g$rib-sym*$7257$4aEQL g$rib$7742$4aEQL))
                             (begin
                               '#f
                               (g$find$7745$4aEQL
                                 g$sym$7746$4aEQL
                                 g$mark*$7747$4aEQL
                                 g$sym*$7748$4aEQL
                                 (g$rib-mark**$7258$4aEQL g$rib$7742$4aEQL)
                                 (g$rib-label*$7259$4aEQL g$rib$7742$4aEQL)))
                             '#f)))))
                     (g$find-label$7269$4aEQL
                       g$rib$7742$4aEQL
                       g$sym$7746$4aEQL
                       g$mark*$7747$4aEQL))))
                 (g$rib-sym*$7257$4aEQL g$rib$7742$4aEQL))))
             (g$id->sym$7308$4aEQL g$id$7743$4aEQL)
             (g$stx-mark*$7282$4aEQL g$id$7743$4aEQL)))))))
   (g$extend-rib/nc!$7271$4aEQL
     g$extend-rib/nc!$10954$4aEQL
     (case-lambda
       ((g$rib$7759$4aEQL g$id$7760$4aEQL g$label$7761$4aEQL)
        ((case-lambda
           ((g$sym$7762$4aEQL g$mark*$7763$4aEQL)
            ((case-lambda
               ((g$sym*$7764$4aEQL)
                (begin
                  (if (g$rib-cache$7261$4aEQL g$rib$7759$4aEQL)
                    (g$hashtable-update!$5484$4aEQL
                      (g$rib-cache$7261$4aEQL g$rib$7759$4aEQL)
                      g$sym$7762$4aEQL
                      (case-lambda
                        ((g$e$7765$4aEQL)
                         (cons
                           (cons g$mark*$7763$4aEQL g$label$7761$4aEQL)
                           g$e$7765$4aEQL)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7262$4aEQL
                    g$rib$7759$4aEQL
                    (cons g$sym$7762$4aEQL g$sym*$7764$4aEQL))
                  (g$set-rib-mark**!$7263$4aEQL
                    g$rib$7759$4aEQL
                    (cons
                      g$mark*$7763$4aEQL
                      (g$rib-mark**$7258$4aEQL g$rib$7759$4aEQL)))
                  (g$set-rib-label*!$7264$4aEQL
                    g$rib$7759$4aEQL
                    (cons
                      g$label$7761$4aEQL
                      (g$rib-label*$7259$4aEQL g$rib$7759$4aEQL))))))
             (g$rib-sym*$7257$4aEQL g$rib$7759$4aEQL))))
         (g$id->sym$7308$4aEQL g$id$7760$4aEQL)
         (g$stx-mark*$7282$4aEQL g$id$7760$4aEQL)))))
   (g$make-rib-map$7272$4aEQL
     g$make-rib-map$10955$4aEQL
     (case-lambda
       ((g$sym*$7766$4aEQL)
        ((case-lambda
           ((g$ht$7767$4aEQL)
            ((letrec ((g$f$7768$4aEQL
                        (case-lambda
                          ((g$i$7769$4aEQL g$sym*$7770$4aEQL)
                           (if (null? g$sym*$7770$4aEQL)
                             g$ht$7767$4aEQL
                             (begin
                               (g$hashtable-update!$5484$4aEQL
                                 g$ht$7767$4aEQL
                                 (car g$sym*$7770$4aEQL)
                                 (case-lambda
                                   ((g$x$7771$4aEQL)
                                    (cons g$i$7769$4aEQL g$x$7771$4aEQL)))
                                 '())
                               (g$f$7768$4aEQL
                                 (+ g$i$7769$4aEQL '1)
                                 (cdr g$sym*$7770$4aEQL))))))))
               g$f$7768$4aEQL)
             '0
             g$sym*$7766$4aEQL)))
         (g$make-eq-hashtable$5477$4aEQL)))))
   (g$seal-rib!$7273$4aEQL
     g$seal-rib!$10956$4aEQL
     (case-lambda
       ((g$rib$7772$4aEQL)
        ((case-lambda
           ((g$sym*$7773$4aEQL)
            (if (not (null? g$sym*$7773$4aEQL))
              (begin
                (g$set-rib-sym*!$7262$4aEQL
                  g$rib$7772$4aEQL
                  (list->vector g$sym*$7773$4aEQL))
                (g$set-rib-mark**!$7263$4aEQL
                  g$rib$7772$4aEQL
                  (list->vector (g$rib-mark**$7258$4aEQL g$rib$7772$4aEQL)))
                (g$set-rib-label*!$7264$4aEQL
                  g$rib$7772$4aEQL
                  (list->vector (g$rib-label*$7259$4aEQL g$rib$7772$4aEQL)))
                (g$set-rib-sealed/freq!$7265$4aEQL
                  g$rib$7772$4aEQL
                  (g$make-rib-map$7272$4aEQL g$sym*$7773$4aEQL)))
              (void))))
         (g$rib-sym*$7257$4aEQL g$rib$7772$4aEQL)))))
   (g$unseal-rib!$7274$4aEQL
     g$unseal-rib!$10957$4aEQL
     (case-lambda
       ((g$rib$7774$4aEQL)
        (if (g$rib-sealed/freq$7260$4aEQL g$rib$7774$4aEQL)
          (begin
            (g$set-rib-sealed/freq!$7265$4aEQL g$rib$7774$4aEQL '#f)
            (g$set-rib-sym*!$7262$4aEQL
              g$rib$7774$4aEQL
              (vector->list (g$rib-sym*$7257$4aEQL g$rib$7774$4aEQL)))
            (g$set-rib-mark**!$7263$4aEQL
              g$rib$7774$4aEQL
              (vector->list (g$rib-mark**$7258$4aEQL g$rib$7774$4aEQL)))
            (g$set-rib-label*!$7264$4aEQL
              g$rib$7774$4aEQL
              (vector->list (g$rib-label*$7259$4aEQL g$rib$7774$4aEQL))))
          (void)))))
   (g$make-full-rib$7275$4aEQL
     g$make-full-rib$10958$4aEQL
     (case-lambda
       ((g$id*$7775$4aEQL g$label*$7776$4aEQL)
        ((case-lambda
           ((g$r$7777$4aEQL)
            (begin (g$seal-rib!$7273$4aEQL g$r$7777$4aEQL) g$r$7777$4aEQL)))
         (g$make-rib$7256$4aEQL
           (g$map$5048$4aEQL g$id->sym$7308$4aEQL g$id*$7775$4aEQL)
           (g$map$5048$4aEQL g$stx-mark*$7282$4aEQL g$id*$7775$4aEQL)
           g$label*$7776$4aEQL
           '#f
           '#f)))))
   (g$8358$7276$4aEQL
     g$8358$10959$4aEQL
     (make-record-type-descriptor
       'stx
       '#f
       'g$8361$4aEQL
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8360$7277$4aEQL g$8360$10960$4aEQL '#f)
   (g$8359$7278$4aEQL
     g$8359$10961$4aEQL
     (make-record-constructor-descriptor
       g$8358$7276$4aEQL
       '#f
       g$8360$7277$4aEQL))
   (g$stx?$7279$4aEQL
     g$stx?$10962$4aEQL
     (record-predicate g$8358$7276$4aEQL))
   (g$make-stx$7280$4aEQL
     g$make-stx$10963$4aEQL
     (record-constructor g$8359$7278$4aEQL))
   (g$stx-expr$7281$4aEQL
     g$stx-expr$10964$4aEQL
     (record-accessor g$8358$7276$4aEQL '0))
   (g$stx-mark*$7282$4aEQL
     g$stx-mark*$10965$4aEQL
     (record-accessor g$8358$7276$4aEQL '1))
   (g$stx-subst*$7283$4aEQL
     g$stx-subst*$10966$4aEQL
     (record-accessor g$8358$7276$4aEQL '2))
   (g$stx-ae*$7284$4aEQL
     g$stx-ae*$10967$4aEQL
     (record-accessor g$8358$7276$4aEQL '3))
   (g$set-stx-expr!$7285$4aEQL
     g$set-stx-expr!$10968$4aEQL
     (record-mutator g$8358$7276$4aEQL '0))
   (g$set-stx-mark*!$7286$4aEQL
     g$set-stx-mark*!$10969$4aEQL
     (record-mutator g$8358$7276$4aEQL '1))
   (g$set-stx-subst*!$7287$4aEQL
     g$set-stx-subst*!$10970$4aEQL
     (record-mutator g$8358$7276$4aEQL '2))
   (g$set-stx-ae*!$7288$4aEQL
     g$set-stx-ae*!$10971$4aEQL
     (record-mutator g$8358$7276$4aEQL '3))
   (g$rp$7289$4aEQL
     g$rp$10972$4aEQL
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7778$4aEQL g$p$7779$4aEQL g$wr$7780$4aEQL)
          (begin
            (display '"#<syntax " g$p$7779$4aEQL)
            (write (g$stx->datum$7318$4aEQL g$x$7778$4aEQL) g$p$7779$4aEQL)
            ((case-lambda
               ((g$expr$7781$4aEQL)
                (if (annotation? g$expr$7781$4aEQL)
                  ((case-lambda
                     ((g$src$7782$4aEQL)
                      (if (pair? g$src$7782$4aEQL)
                        (begin
                          (display '" (" g$p$7779$4aEQL)
                          (display (cdr g$src$7782$4aEQL) g$p$7779$4aEQL)
                          (display '" of " g$p$7779$4aEQL)
                          (display (car g$src$7782$4aEQL) g$p$7779$4aEQL)
                          (display '")" g$p$7779$4aEQL))
                        (void))))
                   (annotation-source g$expr$7781$4aEQL))
                  (void))))
             (g$stx-expr$7281$4aEQL g$x$7778$4aEQL))
            (display '">" g$p$7779$4aEQL))))))
   (g$datum->stx$7290$4aEQL
     g$datum->stx$10973$4aEQL
     (case-lambda
       ((g$id$7783$4aEQL g$datum$7784$4aEQL)
        (g$make-stx$7280$4aEQL
          g$datum$7784$4aEQL
          (g$stx-mark*$7282$4aEQL g$id$7783$4aEQL)
          (g$stx-subst*$7283$4aEQL g$id$7783$4aEQL)
          (g$stx-ae*$7284$4aEQL g$id$7783$4aEQL)))))
   (g$gen-mark$7291$4aEQL
     g$gen-mark$10974$4aEQL
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7292$4aEQL g$anti-mark$10975$4aEQL '#f)
   (g$anti-mark?$7293$4aEQL g$anti-mark?$10976$4aEQL not)
   (g$join-wraps$7294$4aEQL
     g$join-wraps$10977$4aEQL
     (case-lambda
       ((g$m1*$7785$4aEQL g$s1*$7786$4aEQL g$ae1*$7787$4aEQL g$e$7788$4aEQL)
        (letrec* ((g$cancel$7789$4aEQL
                    (case-lambda
                      ((g$ls1$7793$4aEQL g$ls2$7794$4aEQL)
                       ((letrec ((g$f$7795$4aEQL
                                   (case-lambda
                                     ((g$x$7796$4aEQL g$ls1$7797$4aEQL)
                                      (if (null? g$ls1$7797$4aEQL)
                                        (cdr g$ls2$7794$4aEQL)
                                        (cons
                                          g$x$7796$4aEQL
                                          (g$f$7795$4aEQL
                                            (car g$ls1$7797$4aEQL)
                                            (cdr g$ls1$7797$4aEQL))))))))
                          g$f$7795$4aEQL)
                        (car g$ls1$7793$4aEQL)
                        (cdr g$ls1$7793$4aEQL))))))
          ((case-lambda
             ((g$m2*$7790$4aEQL g$s2*$7791$4aEQL g$ae2*$7792$4aEQL)
              (if (if (not (null? g$m1*$7785$4aEQL))
                    (if (not (null? g$m2*$7790$4aEQL))
                      (begin
                        '#f
                        (g$anti-mark?$7293$4aEQL (car g$m2*$7790$4aEQL)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7789$4aEQL g$m1*$7785$4aEQL g$m2*$7790$4aEQL)
                  (g$cancel$7789$4aEQL g$s1*$7786$4aEQL g$s2*$7791$4aEQL)
                  (g$cancel$7789$4aEQL g$ae1*$7787$4aEQL g$ae2*$7792$4aEQL))
                (values
                  (append g$m1*$7785$4aEQL g$m2*$7790$4aEQL)
                  (append g$s1*$7786$4aEQL g$s2*$7791$4aEQL)
                  (append g$ae1*$7787$4aEQL g$ae2*$7792$4aEQL)))))
           (g$stx-mark*$7282$4aEQL g$e$7788$4aEQL)
           (g$stx-subst*$7283$4aEQL g$e$7788$4aEQL)
           (g$stx-ae*$7284$4aEQL g$e$7788$4aEQL))))))
   (g$mkstx$7295$4aEQL
     g$mkstx$10978$4aEQL
     (case-lambda
       ((g$e$7798$4aEQL g$m*$7799$4aEQL g$s*$7800$4aEQL g$ae*$7801$4aEQL)
        (if (if (g$stx?$7279$4aEQL g$e$7798$4aEQL)
              (begin '#f (not (g$top-marked?$7245$4aEQL g$m*$7799$4aEQL)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7294$4aEQL
                 g$m*$7799$4aEQL
                 g$s*$7800$4aEQL
                 g$ae*$7801$4aEQL
                 g$e$7798$4aEQL)))
            (case-lambda
              ((g$m*$7805$4aEQL g$s*$7806$4aEQL g$ae*$7807$4aEQL)
               ((case-lambda
                  ((g$ae*$7808$4aEQL g$s*$7809$4aEQL g$m*$7810$4aEQL)
                   (g$make-stx$7280$4aEQL
                     (g$stx-expr$7281$4aEQL g$e$7798$4aEQL)
                     g$m*$7810$4aEQL
                     g$s*$7809$4aEQL
                     g$ae*$7808$4aEQL)))
                g$ae*$7807$4aEQL
                g$s*$7806$4aEQL
                g$m*$7805$4aEQL))))
          (g$make-stx$7280$4aEQL
            g$e$7798$4aEQL
            g$m*$7799$4aEQL
            g$s*$7800$4aEQL
            g$ae*$7801$4aEQL)))))
   (g$add-mark$7296$4aEQL
     g$add-mark$10979$4aEQL
     (case-lambda
       ((g$m$7811$4aEQL g$e$7812$4aEQL g$ae$7813$4aEQL)
        (g$mkstx$7295$4aEQL
          g$e$7812$4aEQL
          (list g$m$7811$4aEQL)
          '(shift)
          (list g$ae$7813$4aEQL)))))
   (g$add-subst$7297$4aEQL
     g$add-subst$10980$4aEQL
     (case-lambda
       ((g$subst$7814$4aEQL g$e$7815$4aEQL)
        (g$mkstx$7295$4aEQL g$e$7815$4aEQL '() (list g$subst$7814$4aEQL) '()))))
   (g$syntax-kind?$7298$4aEQL
     g$syntax-kind?$10981$4aEQL
     (case-lambda
       ((g$x$7816$4aEQL g$p?$7817$4aEQL)
        (if (g$stx?$7279$4aEQL g$x$7816$4aEQL)
          (g$syntax-kind?$7298$4aEQL
            (g$stx-expr$7281$4aEQL g$x$7816$4aEQL)
            g$p?$7817$4aEQL)
          (if (annotation? g$x$7816$4aEQL)
            (g$syntax-kind?$7298$4aEQL
              (annotation-expression g$x$7816$4aEQL)
              g$p?$7817$4aEQL)
            (g$p?$7817$4aEQL g$x$7816$4aEQL))))))
   (g$syntax-vector->list$7299$4aEQL
     g$syntax-vector->list$10982$4aEQL
     (case-lambda
       ((g$x$7818$4aEQL)
        (if (g$stx?$7279$4aEQL g$x$7818$4aEQL)
          ((case-lambda
             ((g$ls$7819$4aEQL g$m*$7820$4aEQL g$s*$7821$4aEQL g$ae*$7822$4aEQL)
              (g$map$5048$4aEQL
                (case-lambda
                  ((g$x$7823$4aEQL)
                   (g$mkstx$7295$4aEQL
                     g$x$7823$4aEQL
                     g$m*$7820$4aEQL
                     g$s*$7821$4aEQL
                     g$ae*$7822$4aEQL)))
                g$ls$7819$4aEQL)))
           (g$syntax-vector->list$7299$4aEQL
             (g$stx-expr$7281$4aEQL g$x$7818$4aEQL))
           (g$stx-mark*$7282$4aEQL g$x$7818$4aEQL)
           (g$stx-subst*$7283$4aEQL g$x$7818$4aEQL)
           (g$stx-ae*$7284$4aEQL g$x$7818$4aEQL))
          (if (annotation? g$x$7818$4aEQL)
            (g$syntax-vector->list$7299$4aEQL
              (annotation-expression g$x$7818$4aEQL))
            (if (vector? g$x$7818$4aEQL)
              (vector->list g$x$7818$4aEQL)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7818$4aEQL)))))))
   (g$syntax-pair?$7300$4aEQL
     g$syntax-pair?$10983$4aEQL
     (case-lambda
       ((g$x$7824$4aEQL) (g$syntax-kind?$7298$4aEQL g$x$7824$4aEQL pair?))))
   (g$syntax-vector?$7301$4aEQL
     g$syntax-vector?$10984$4aEQL
     (case-lambda
       ((g$x$7825$4aEQL) (g$syntax-kind?$7298$4aEQL g$x$7825$4aEQL vector?))))
   (g$syntax-null?$7302$4aEQL
     g$syntax-null?$10985$4aEQL
     (case-lambda
       ((g$x$7826$4aEQL) (g$syntax-kind?$7298$4aEQL g$x$7826$4aEQL null?))))
   (g$syntax-list?$7303$4aEQL
     g$syntax-list?$10986$4aEQL
     (case-lambda
       ((g$x$7827$4aEQL)
        ((case-lambda
           ((g$t$7828$4aEQL)
            (if g$t$7828$4aEQL
              g$t$7828$4aEQL
              (begin
                '#f
                (if (g$syntax-pair?$7300$4aEQL g$x$7827$4aEQL)
                  (begin
                    '#f
                    (g$syntax-list?$7303$4aEQL
                      (g$syntax-cdr$7305$4aEQL g$x$7827$4aEQL)))
                  '#f)))))
         (g$syntax-null?$7302$4aEQL g$x$7827$4aEQL)))))
   (g$syntax-car$7304$4aEQL
     g$syntax-car$10987$4aEQL
     (case-lambda
       ((g$x$7829$4aEQL)
        (if (g$stx?$7279$4aEQL g$x$7829$4aEQL)
          (g$mkstx$7295$4aEQL
            (g$syntax-car$7304$4aEQL (g$stx-expr$7281$4aEQL g$x$7829$4aEQL))
            (g$stx-mark*$7282$4aEQL g$x$7829$4aEQL)
            (g$stx-subst*$7283$4aEQL g$x$7829$4aEQL)
            (g$stx-ae*$7284$4aEQL g$x$7829$4aEQL))
          (if (annotation? g$x$7829$4aEQL)
            (g$syntax-car$7304$4aEQL (annotation-expression g$x$7829$4aEQL))
            (if (pair? g$x$7829$4aEQL)
              (car g$x$7829$4aEQL)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7829$4aEQL)))))))
   (g$syntax-cdr$7305$4aEQL
     g$syntax-cdr$10988$4aEQL
     (case-lambda
       ((g$x$7830$4aEQL)
        (if (g$stx?$7279$4aEQL g$x$7830$4aEQL)
          (g$mkstx$7295$4aEQL
            (g$syntax-cdr$7305$4aEQL (g$stx-expr$7281$4aEQL g$x$7830$4aEQL))
            (g$stx-mark*$7282$4aEQL g$x$7830$4aEQL)
            (g$stx-subst*$7283$4aEQL g$x$7830$4aEQL)
            (g$stx-ae*$7284$4aEQL g$x$7830$4aEQL))
          (if (annotation? g$x$7830$4aEQL)
            (g$syntax-cdr$7305$4aEQL (annotation-expression g$x$7830$4aEQL))
            (if (pair? g$x$7830$4aEQL)
              (cdr g$x$7830$4aEQL)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7830$4aEQL)))))))
   (g$syntax->list$7306$4aEQL
     g$syntax->list$10989$4aEQL
     (case-lambda
       ((g$x$7831$4aEQL)
        (if (g$syntax-pair?$7300$4aEQL g$x$7831$4aEQL)
          (cons
            (g$syntax-car$7304$4aEQL g$x$7831$4aEQL)
            (g$syntax->list$7306$4aEQL
              (g$syntax-cdr$7305$4aEQL g$x$7831$4aEQL)))
          (if (g$syntax-null?$7302$4aEQL g$x$7831$4aEQL)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7831$4aEQL))))))
   (g$id?$7307$4aEQL
     g$id?$10990$4aEQL
     (case-lambda
       ((g$x$7832$4aEQL)
        (if (g$stx?$7279$4aEQL g$x$7832$4aEQL)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7833$4aEQL)
                (symbol?
                  (if (annotation? g$expr$7833$4aEQL)
                    (annotation-stripped g$expr$7833$4aEQL)
                    g$expr$7833$4aEQL))))
             (g$stx-expr$7281$4aEQL g$x$7832$4aEQL)))
          '#f))))
   (g$id->sym$7308$4aEQL
     g$id->sym$10991$4aEQL
     (case-lambda
       ((g$x$7834$4aEQL)
        (begin
          (if (not (g$stx?$7279$4aEQL g$x$7834$4aEQL))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7834$4aEQL)
            (void))
          ((case-lambda
             ((g$expr$7835$4aEQL)
              ((case-lambda
                 ((g$sym$7836$4aEQL)
                  (if (symbol? g$sym$7836$4aEQL)
                    g$sym$7836$4aEQL
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$7834$4aEQL))))
               (if (annotation? g$expr$7835$4aEQL)
                 (annotation-stripped g$expr$7835$4aEQL)
                 g$expr$7835$4aEQL))))
           (g$stx-expr$7281$4aEQL g$x$7834$4aEQL))))))
   (g$same-marks?$7309$4aEQL
     g$same-marks?$10992$4aEQL
     (case-lambda
       ((g$x$7837$4aEQL g$y$7838$4aEQL)
        ((case-lambda
           ((g$t$7839$4aEQL)
            (if g$t$7839$4aEQL
              g$t$7839$4aEQL
              (begin
                '#f
                (if (pair? g$x$7837$4aEQL)
                  (if (pair? g$y$7838$4aEQL)
                    (if (eq? (car g$x$7837$4aEQL) (car g$y$7838$4aEQL))
                      (begin
                        '#f
                        (g$same-marks?$7309$4aEQL
                          (cdr g$x$7837$4aEQL)
                          (cdr g$y$7838$4aEQL)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7837$4aEQL) (begin '#f (null? g$y$7838$4aEQL)) '#f)))))
   (g$bound-id=?$7310$4aEQL
     g$bound-id=?$10993$4aEQL
     (case-lambda
       ((g$x$7840$4aEQL g$y$7841$4aEQL)
        (if (eq? (g$id->sym$7308$4aEQL g$x$7840$4aEQL)
                 (g$id->sym$7308$4aEQL g$y$7841$4aEQL))
          (begin
            '#f
            (g$same-marks?$7309$4aEQL
              (g$stx-mark*$7282$4aEQL g$x$7840$4aEQL)
              (g$stx-mark*$7282$4aEQL g$y$7841$4aEQL)))
          '#f))))
   (g$free-id=?$7311$4aEQL
     g$free-id=?$10994$4aEQL
     (case-lambda
       ((g$i$7842$4aEQL g$j$7843$4aEQL)
        ((case-lambda
           ((g$t0$7844$4aEQL g$t1$7845$4aEQL)
            (if ((case-lambda
                   ((g$t$7846$4aEQL)
                    (if g$t$7846$4aEQL
                      g$t$7846$4aEQL
                      (begin '#f g$t1$7845$4aEQL))))
                 g$t0$7844$4aEQL)
              (eq? g$t0$7844$4aEQL g$t1$7845$4aEQL)
              (eq? (g$id->sym$7308$4aEQL g$i$7842$4aEQL)
                   (g$id->sym$7308$4aEQL g$j$7843$4aEQL)))))
         (g$id->real-label$7321$4aEQL g$i$7842$4aEQL)
         (g$id->real-label$7321$4aEQL g$j$7843$4aEQL)))))
   (g$valid-bound-ids?$7312$4aEQL
     g$valid-bound-ids?$10995$4aEQL
     (case-lambda
       ((g$id*$7847$4aEQL)
        (if (g$for-all$5046$4aEQL g$id?$7307$4aEQL g$id*$7847$4aEQL)
          (begin '#f (g$distinct-bound-ids?$7313$4aEQL g$id*$7847$4aEQL))
          '#f))))
   (g$distinct-bound-ids?$7313$4aEQL
     g$distinct-bound-ids?$10996$4aEQL
     (case-lambda
       ((g$id*$7848$4aEQL)
        ((case-lambda
           ((g$t$7849$4aEQL)
            (if g$t$7849$4aEQL
              g$t$7849$4aEQL
              (begin
                '#f
                (if (not (g$bound-id-member?$7314$4aEQL
                           (car g$id*$7848$4aEQL)
                           (cdr g$id*$7848$4aEQL)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7313$4aEQL (cdr g$id*$7848$4aEQL)))
                  '#f)))))
         (null? g$id*$7848$4aEQL)))))
   (g$bound-id-member?$7314$4aEQL
     g$bound-id-member?$10997$4aEQL
     (case-lambda
       ((g$id$7850$4aEQL g$id*$7851$4aEQL)
        (if (pair? g$id*$7851$4aEQL)
          (begin
            '#f
            ((case-lambda
               ((g$t$7852$4aEQL)
                (if g$t$7852$4aEQL
                  g$t$7852$4aEQL
                  (begin
                    '#f
                    (g$bound-id-member?$7314$4aEQL
                      g$id$7850$4aEQL
                      (cdr g$id*$7851$4aEQL))))))
             (g$bound-id=?$7310$4aEQL g$id$7850$4aEQL (car g$id*$7851$4aEQL))))
          '#f))))
   (g$self-evaluating?$7315$4aEQL
     g$self-evaluating?$10998$4aEQL
     (case-lambda
       ((g$x$7853$4aEQL)
        ((case-lambda
           ((g$t$7854$4aEQL)
            (if g$t$7854$4aEQL
              g$t$7854$4aEQL
              ((case-lambda
                 ((g$t$7855$4aEQL)
                  (if g$t$7855$4aEQL
                    g$t$7855$4aEQL
                    ((case-lambda
                       ((g$t$7856$4aEQL)
                        (if g$t$7856$4aEQL
                          g$t$7856$4aEQL
                          ((case-lambda
                             ((g$t$7857$4aEQL)
                              (if g$t$7857$4aEQL
                                g$t$7857$4aEQL
                                (begin '#f (bytevector? g$x$7853$4aEQL)))))
                           (boolean? g$x$7853$4aEQL)))))
                     (char? g$x$7853$4aEQL)))))
               (string? g$x$7853$4aEQL)))))
         (number? g$x$7853$4aEQL)))))
   (g$strip-annotations$7316$4aEQL
     g$strip-annotations$10999$4aEQL
     (case-lambda
       ((g$x$7858$4aEQL)
        (if (pair? g$x$7858$4aEQL)
          (cons
            (g$strip-annotations$7316$4aEQL (car g$x$7858$4aEQL))
            (g$strip-annotations$7316$4aEQL (cdr g$x$7858$4aEQL)))
          (if (vector? g$x$7858$4aEQL)
            (vector-map g$strip-annotations$7316$4aEQL g$x$7858$4aEQL)
            (if (annotation? g$x$7858$4aEQL)
              (annotation-stripped g$x$7858$4aEQL)
              g$x$7858$4aEQL))))))
   (g$strip$7317$4aEQL
     g$strip$11000$4aEQL
     (case-lambda
       ((g$x$7859$4aEQL g$m*$7860$4aEQL)
        (if (g$top-marked?$7245$4aEQL g$m*$7860$4aEQL)
          (if ((case-lambda
                 ((g$t$7861$4aEQL)
                  (if g$t$7861$4aEQL
                    g$t$7861$4aEQL
                    ((case-lambda
                       ((g$t$7862$4aEQL)
                        (if g$t$7862$4aEQL
                          g$t$7862$4aEQL
                          (begin
                            '#f
                            (if (vector? g$x$7859$4aEQL)
                              (if (> (vector-length g$x$7859$4aEQL) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7859$4aEQL '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7859$4aEQL)
                       (begin '#f (annotation? (car g$x$7859$4aEQL)))
                       '#f)))))
               (annotation? g$x$7859$4aEQL))
            (g$strip-annotations$7316$4aEQL g$x$7859$4aEQL)
            g$x$7859$4aEQL)
          ((letrec ((g$f$7863$4aEQL
                      (case-lambda
                        ((g$x$7864$4aEQL)
                         (if (g$stx?$7279$4aEQL g$x$7864$4aEQL)
                           (g$strip$7317$4aEQL
                             (g$stx-expr$7281$4aEQL g$x$7864$4aEQL)
                             (g$stx-mark*$7282$4aEQL g$x$7864$4aEQL))
                           (if (annotation? g$x$7864$4aEQL)
                             (annotation-stripped g$x$7864$4aEQL)
                             (if (pair? g$x$7864$4aEQL)
                               ((case-lambda
                                  ((g$a$7865$4aEQL g$d$7866$4aEQL)
                                   (if (if (eq? g$a$7865$4aEQL
                                                (car g$x$7864$4aEQL))
                                         (begin
                                           '#f
                                           (eq? g$d$7866$4aEQL
                                                (cdr g$x$7864$4aEQL)))
                                         '#f)
                                     g$x$7864$4aEQL
                                     (cons g$a$7865$4aEQL g$d$7866$4aEQL))))
                                (g$f$7863$4aEQL (car g$x$7864$4aEQL))
                                (g$f$7863$4aEQL (cdr g$x$7864$4aEQL)))
                               (if (vector? g$x$7864$4aEQL)
                                 ((case-lambda
                                    ((g$old$7867$4aEQL)
                                     ((case-lambda
                                        ((g$new$7868$4aEQL)
                                         (if (g$for-all$5046$4aEQL
                                               eq?
                                               g$old$7867$4aEQL
                                               g$new$7868$4aEQL)
                                           g$x$7864$4aEQL
                                           (list->vector g$new$7868$4aEQL))))
                                      (g$map$5048$4aEQL
                                        g$f$7863$4aEQL
                                        g$old$7867$4aEQL))))
                                  (vector->list g$x$7864$4aEQL))
                                 g$x$7864$4aEQL))))))))
             g$f$7863$4aEQL)
           g$x$7859$4aEQL)))))
   (g$stx->datum$7318$4aEQL
     g$stx->datum$11001$4aEQL
     (case-lambda
       ((g$x$7869$4aEQL) (g$strip$7317$4aEQL g$x$7869$4aEQL '()))))
   (g$same-marks*?$7319$4aEQL
     g$same-marks*?$11002$4aEQL
     (case-lambda
       ((g$mark*$7870$4aEQL g$mark**$7871$4aEQL g$si$7872$4aEQL)
        (if (null? g$si$7872$4aEQL)
          '#f
          (if (g$same-marks?$7309$4aEQL
                g$mark*$7870$4aEQL
                (vector-ref g$mark**$7871$4aEQL (car g$si$7872$4aEQL)))
            (car g$si$7872$4aEQL)
            (g$same-marks*?$7319$4aEQL
              g$mark*$7870$4aEQL
              g$mark**$7871$4aEQL
              (cdr g$si$7872$4aEQL)))))))
   (g$id->label$7320$4aEQL
     g$id->label$11003$4aEQL
     (case-lambda
       ((g$id$7873$4aEQL)
        ((case-lambda
           ((g$t$7874$4aEQL)
            (if g$t$7874$4aEQL
              g$t$7874$4aEQL
              (begin
                '#f
                ((case-lambda
                   ((g$t$7875$4aEQL)
                    (if g$t$7875$4aEQL
                      ((case-lambda
                         ((g$env$7876$4aEQL)
                          ((case-lambda
                             ((g$rib$7877$4aEQL)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7250$4aEQL
                                     g$id$7873$4aEQL
                                     g$rib$7877$4aEQL)))
                                (case-lambda
                                  ((g$lab$7880$4aEQL g$loc_$7881$4aEQL)
                                   ((case-lambda
                                      ((g$loc_$7882$4aEQL g$lab$7883$4aEQL)
                                       (begin
                                         (g$extend-rib!$7270$4aEQL
                                           g$rib$7877$4aEQL
                                           g$id$7873$4aEQL
                                           g$lab$7883$4aEQL)
                                         g$lab$7883$4aEQL)))
                                    g$loc_$7881$4aEQL
                                    g$lab$7880$4aEQL))))))
                           (g$interaction-env-rib$7663$4aEQL
                             g$env$7876$4aEQL))))
                       g$t$7875$4aEQL)
                      '#f)))
                 (g$top-level-context$7703$4aEQL))))))
         (g$id->real-label$7321$4aEQL g$id$7873$4aEQL)))))
   (g$id->real-label$7321$4aEQL
     g$id->real-label$11004$4aEQL
     (case-lambda
       ((g$id$7884$4aEQL)
        ((case-lambda
           ((g$sym$7885$4aEQL)
            ((letrec ((g$search$7886$4aEQL
                        (case-lambda
                          ((g$subst*$7887$4aEQL g$mark*$7888$4aEQL)
                           (if (null? g$subst*$7887$4aEQL)
                             '#f
                             (if (eq? (car g$subst*$7887$4aEQL) 'shift)
                               (g$search$7886$4aEQL
                                 (cdr g$subst*$7887$4aEQL)
                                 (cdr g$mark*$7888$4aEQL))
                               ((case-lambda
                                  ((g$rib$7889$4aEQL)
                                   ((case-lambda
                                      ((g$t$7890$4aEQL)
                                       (if g$t$7890$4aEQL
                                         ((case-lambda
                                            ((g$ht$7891$4aEQL)
                                             ((case-lambda
                                                ((g$si$7892$4aEQL)
                                                 ((case-lambda
                                                    ((g$i$7893$4aEQL)
                                                     (if g$i$7893$4aEQL
                                                       (vector-ref
                                                         (g$rib-label*$7259$4aEQL
                                                           g$rib$7889$4aEQL)
                                                         g$i$7893$4aEQL)
                                                       (g$search$7886$4aEQL
                                                         (cdr g$subst*$7887$4aEQL)
                                                         g$mark*$7888$4aEQL))))
                                                  (if g$si$7892$4aEQL
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7319$4aEQL
                                                        g$mark*$7888$4aEQL
                                                        (g$rib-mark**$7258$4aEQL
                                                          g$rib$7889$4aEQL)
                                                        (reverse
                                                          g$si$7892$4aEQL)))
                                                    '#f))))
                                              (g$hashtable-ref$5480$4aEQL
                                                g$ht$7891$4aEQL
                                                g$sym$7885$4aEQL
                                                '#f))))
                                          g$t$7890$4aEQL)
                                         ((case-lambda
                                            ((g$t$7894$4aEQL)
                                             (if g$t$7894$4aEQL
                                               g$t$7894$4aEQL
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$7895$4aEQL
                                                             (case-lambda
                                                               ((g$sym*$7896$4aEQL
                                                                  g$mark**$7897$4aEQL
                                                                  g$label*$7898$4aEQL)
                                                                (if (null?
                                                                      g$sym*$7896$4aEQL)
                                                                  (g$search$7886$4aEQL
                                                                    (cdr g$subst*$7887$4aEQL)
                                                                    g$mark*$7888$4aEQL)
                                                                  (if (if (eq? (car g$sym*$7896$4aEQL)
                                                                               g$sym$7885$4aEQL)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7309$4aEQL
                                                                            (car g$mark**$7897$4aEQL)
                                                                            g$mark*$7888$4aEQL))
                                                                        '#f)
                                                                    (car g$label*$7898$4aEQL)
                                                                    (g$f$7895$4aEQL
                                                                      (cdr g$sym*$7896$4aEQL)
                                                                      (cdr g$mark**$7897$4aEQL)
                                                                      (cdr g$label*$7898$4aEQL))))))))
                                                    g$f$7895$4aEQL)
                                                  (g$rib-sym*$7257$4aEQL
                                                    g$rib$7889$4aEQL)
                                                  (g$rib-mark**$7258$4aEQL
                                                    g$rib$7889$4aEQL)
                                                  (g$rib-label*$7259$4aEQL
                                                    g$rib$7889$4aEQL))))))
                                          (g$find-label$7269$4aEQL
                                            g$rib$7889$4aEQL
                                            g$sym$7885$4aEQL
                                            g$mark*$7888$4aEQL)))))
                                    (g$rib-sealed/freq$7260$4aEQL
                                      g$rib$7889$4aEQL))))
                                (car g$subst*$7887$4aEQL))))))))
               g$search$7886$4aEQL)
             (g$stx-subst*$7283$4aEQL g$id$7884$4aEQL)
             (g$stx-mark*$7282$4aEQL g$id$7884$4aEQL))))
         (g$id->sym$7308$4aEQL g$id$7884$4aEQL)))))
   (g$label->binding$7322$4aEQL
     g$label->binding$11005$4aEQL
     (case-lambda
       ((g$x$7899$4aEQL g$r$7900$4aEQL)
        ((case-lambda
           ((g$t$7901$4aEQL)
            (if g$t$7901$4aEQL
              ((case-lambda
                 ((g$b$7902$4aEQL)
                  (if (if (pair? g$b$7902$4aEQL)
                        (begin '#f (eq? (car g$b$7902$4aEQL) '$core-rtd))
                        '#f)
                    (cons
                      '$rtd
                      (g$map$5048$4aEQL
                        g$bless$7548$4aEQL
                        (cdr g$b$7902$4aEQL)))
                    (if (if (pair? g$b$7902$4aEQL)
                          (begin '#f (eq? (car g$b$7902$4aEQL) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7903$4aEQL g$loc$7904$4aEQL)
                          (cons '$rtd (symbol-value g$loc$7904$4aEQL))))
                       (g$cadr$5212$4aEQL g$b$7902$4aEQL)
                       (g$cddr$5214$4aEQL g$b$7902$4aEQL))
                      g$b$7902$4aEQL))))
               g$t$7901$4aEQL)
              ((case-lambda
                 ((g$t$7905$4aEQL)
                  (if g$t$7905$4aEQL
                    (cdr g$t$7905$4aEQL)
                    ((case-lambda
                       ((g$t$7906$4aEQL)
                        (if g$t$7906$4aEQL
                          ((case-lambda
                             ((g$env$7907$4aEQL)
                              ((case-lambda
                                 ((g$t$7908$4aEQL)
                                  (if g$t$7908$4aEQL
                                    ((case-lambda
                                       ((g$p$7909$4aEQL)
                                        (g$cons*$5050$4aEQL
                                          'lexical
                                          (cdr g$p$7909$4aEQL)
                                          '#f)))
                                     g$t$7908$4aEQL)
                                    '(displaced-lexical . #f))))
                               (g$assq$5036$4aEQL
                                 g$x$7899$4aEQL
                                 (g$interaction-env-locs$7665$4aEQL
                                   g$env$7907$4aEQL)))))
                           g$t$7906$4aEQL)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7703$4aEQL)))))
               (g$assq$5036$4aEQL g$x$7899$4aEQL g$r$7900$4aEQL)))))
         (g$imported-label->binding$7116$4aEQL g$x$7899$4aEQL)))))
   (g$make-binding$7323$4aEQL g$make-binding$11006$4aEQL cons)
   (g$binding-type$7324$4aEQL g$binding-type$11007$4aEQL car)
   (g$binding-value$7325$4aEQL g$binding-value$11008$4aEQL cdr)
   (g$raise-unbound-error$7326$4aEQL
     g$raise-unbound-error$11009$4aEQL
     (case-lambda
       ((g$id$7910$4aEQL)
        (g$syntax-violation*$7695$4aEQL
          '#f
          '"unbound identifier"
          g$id$7910$4aEQL
          (g$make-undefined-violation$5826$4aEQL)))))
   (g$syntax-type$7327$4aEQL
     g$syntax-type$11010$4aEQL
     (case-lambda
       ((g$e$7911$4aEQL g$r$7912$4aEQL)
        (if (g$id?$7307$4aEQL g$e$7911$4aEQL)
          ((case-lambda
             ((g$id$7913$4aEQL)
              ((case-lambda
                 ((g$label$7914$4aEQL)
                  ((case-lambda
                     ((g$b$7915$4aEQL)
                      ((case-lambda
                         ((g$type$7916$4aEQL)
                          ((case-lambda
                             (()
                              (begin
                                (if (not g$label$7914$4aEQL)
                                  (g$raise-unbound-error$7326$4aEQL
                                    g$id$7913$4aEQL)
                                  (void))
                                ((case-lambda
                                   ((g$t$7917$4aEQL)
                                    (if (g$memv$5041$4aEQL
                                          g$t$7917$4aEQL
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             export
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$7916$4aEQL
                                        (g$binding-value$7325$4aEQL
                                          g$b$7915$4aEQL)
                                        g$id$7913$4aEQL)
                                      (values 'other '#f '#f))))
                                 g$type$7916$4aEQL)))))))
                       (g$binding-type$7324$4aEQL g$b$7915$4aEQL))))
                   (g$label->binding$7322$4aEQL
                     g$label$7914$4aEQL
                     g$r$7912$4aEQL))))
               (g$id->label$7320$4aEQL g$id$7913$4aEQL))))
           g$e$7911$4aEQL)
          (if (g$syntax-pair?$7300$4aEQL g$e$7911$4aEQL)
            ((case-lambda
               ((g$id$7918$4aEQL)
                (if (g$id?$7307$4aEQL g$id$7918$4aEQL)
                  ((case-lambda
                     ((g$label$7919$4aEQL)
                      ((case-lambda
                         ((g$b$7920$4aEQL)
                          ((case-lambda
                             ((g$type$7921$4aEQL)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if (not g$label$7919$4aEQL)
                                      (g$raise-unbound-error$7326$4aEQL
                                        g$id$7918$4aEQL)
                                      (void))
                                    ((case-lambda
                                       ((g$t$7922$4aEQL)
                                        (if (g$memv$5041$4aEQL
                                              g$t$7922$4aEQL
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 export
                                                 $core-rtd))
                                          (values
                                            g$type$7921$4aEQL
                                            (g$binding-value$7325$4aEQL
                                              g$b$7920$4aEQL)
                                            g$id$7918$4aEQL)
                                          (values 'call '#f '#f))))
                                     g$type$7921$4aEQL)))))))
                           (g$binding-type$7324$4aEQL g$b$7920$4aEQL))))
                       (g$label->binding$7322$4aEQL
                         g$label$7919$4aEQL
                         g$r$7912$4aEQL))))
                   (g$id->label$7320$4aEQL g$id$7918$4aEQL))
                  (values 'call '#f '#f))))
             (g$syntax-car$7304$4aEQL g$e$7911$4aEQL))
            ((case-lambda
               ((g$d$7923$4aEQL)
                (if (g$self-evaluating?$7315$4aEQL g$d$7923$4aEQL)
                  (values 'constant g$d$7923$4aEQL '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7318$4aEQL g$e$7911$4aEQL)))))))
   (g$sanitize-binding$7335$4aEQL
     g$sanitize-binding$11011$4aEQL
     (case-lambda
       ((g$x$7924$4aEQL g$src$7925$4aEQL)
        (if (procedure? g$x$7924$4aEQL)
          (g$cons*$5050$4aEQL 'local-macro g$x$7924$4aEQL g$src$7925$4aEQL)
          (if (if (pair? g$x$7924$4aEQL)
                (if (eq? (car g$x$7924$4aEQL) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7924$4aEQL)))
                  '#f)
                '#f)
            (g$cons*$5050$4aEQL
              'local-macro!
              (cdr g$x$7924$4aEQL)
              g$src$7925$4aEQL)
            (if (if (pair? g$x$7924$4aEQL)
                  (begin '#f (eq? (car g$x$7924$4aEQL) '$rtd))
                  '#f)
              g$x$7924$4aEQL
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7924$4aEQL)))))))
   (g$make-variable-transformer$7336$4aEQL
     g$make-variable-transformer$11012$4aEQL
     (case-lambda
       ((g$x$7926$4aEQL)
        (if (procedure? g$x$7926$4aEQL)
          (cons 'macro! g$x$7926$4aEQL)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7926$4aEQL)))))
   (g$variable-transformer?$7337$4aEQL
     g$variable-transformer?$11013$4aEQL
     (case-lambda
       ((g$x$7927$4aEQL)
        (if (pair? g$x$7927$4aEQL)
          (if (eq? (car g$x$7927$4aEQL) 'macro!)
            (begin '#f (procedure? (cdr g$x$7927$4aEQL)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7338$4aEQL
     g$variable-transformer-procedure$11014$4aEQL
     (case-lambda
       ((g$x$7928$4aEQL)
        (if (g$variable-transformer?$7337$4aEQL g$x$7928$4aEQL)
          (cdr g$x$7928$4aEQL)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7928$4aEQL)))))
   (g$make-eval-transformer$7339$4aEQL
     g$make-eval-transformer$11015$4aEQL
     (case-lambda
       ((g$x$7929$4aEQL)
        (g$sanitize-binding$7335$4aEQL
          (eval-core (g$expanded->core$6825$4aEQL g$x$7929$4aEQL))
          g$x$7929$4aEQL))))
   (g$parse-define$7525$4aEQL
     g$parse-define$11016$4aEQL
     (case-lambda
       ((g$x$7930$4aEQL)
        ((case-lambda
           ((g$t$7931$4aEQL)
            ((case-lambda
               ((g$ls/false$7932$4aEQL)
                (if (if g$ls/false$7932$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7933$4aEQL
                               g$fmls$7934$4aEQL
                               g$b$7935$4aEQL
                               g$b*$7936$4aEQL)
                             (g$id?$7307$4aEQL g$id$7933$4aEQL)))
                          g$ls/false$7932$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7937$4aEQL
                         g$fmls$7938$4aEQL
                         g$b$7939$4aEQL
                         g$b*$7940$4aEQL)
                       (begin
                         (g$verify-formals$7605$4aEQL
                           g$fmls$7938$4aEQL
                           g$x$7930$4aEQL)
                         (values
                           g$id$7937$4aEQL
                           (cons
                             'defun
                             (cons
                               g$fmls$7938$4aEQL
                               (cons g$b$7939$4aEQL g$b*$7940$4aEQL)))))))
                    g$ls/false$7932$4aEQL)
                  ((case-lambda
                     ((g$t$7941$4aEQL)
                      ((case-lambda
                         ((g$ls/false$7942$4aEQL)
                          (if (if g$ls/false$7942$4aEQL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7943$4aEQL g$val$7944$4aEQL)
                                       (g$id?$7307$4aEQL g$id$7943$4aEQL)))
                                    g$ls/false$7942$4aEQL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7945$4aEQL g$val$7946$4aEQL)
                                 (values
                                   g$id$7945$4aEQL
                                   (cons 'expr g$val$7946$4aEQL))))
                              g$ls/false$7942$4aEQL)
                            ((case-lambda
                               ((g$t$7947$4aEQL)
                                ((case-lambda
                                   ((g$ls/false$7948$4aEQL)
                                    (if (if g$ls/false$7948$4aEQL
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7949$4aEQL)
                                                 (g$id?$7307$4aEQL
                                                   g$id$7949$4aEQL)))
                                              g$ls/false$7948$4aEQL))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7950$4aEQL)
                                           (values
                                             g$id$7950$4aEQL
                                             (cons
                                               'expr
                                               (g$bless$7548$4aEQL '(void))))))
                                        g$ls/false$7948$4aEQL)
                                      (g$syntax-violation$7696$4aEQL
                                        '#f
                                        '"invalid syntax"
                                        g$t$7947$4aEQL))))
                                 (g$syntax-dispatch$7585$4aEQL
                                   g$t$7947$4aEQL
                                   '(_ any)))))
                             g$t$7941$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$7941$4aEQL
                         '(_ any any)))))
                   g$t$7931$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$7931$4aEQL
               '(_ (any . any) any . each-any)))))
         g$x$7930$4aEQL))))
   (g$parse-define-syntax$7526$4aEQL
     g$parse-define-syntax$11017$4aEQL
     (case-lambda
       ((g$x$7951$4aEQL)
        ((case-lambda
           ((g$t$7952$4aEQL)
            ((case-lambda
               ((g$ls/false$7953$4aEQL)
                (if (if g$ls/false$7953$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7954$4aEQL g$val$7955$4aEQL)
                             (g$id?$7307$4aEQL g$id$7954$4aEQL)))
                          g$ls/false$7953$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7956$4aEQL g$val$7957$4aEQL)
                       (values g$id$7956$4aEQL g$val$7957$4aEQL)))
                    g$ls/false$7953$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$7952$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$7952$4aEQL '(_ any any)))))
         g$x$7951$4aEQL))))
   (g$scheme-stx-hashtable$7527$4aEQL
     g$scheme-stx-hashtable$11018$4aEQL
     (g$make-eq-hashtable$5477$4aEQL))
   (g$scheme-stx$7528$4aEQL
     g$scheme-stx$11019$4aEQL
     (case-lambda
       ((g$sym$7958$4aEQL)
        ((case-lambda
           ((g$t$7959$4aEQL)
            (if g$t$7959$4aEQL
              g$t$7959$4aEQL
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7960$4aEQL)
                    ((case-lambda
                       ((g$stx$7961$4aEQL)
                        ((case-lambda
                           ((g$stx$7962$4aEQL)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5481$4aEQL
                                    g$scheme-stx-hashtable$7527$4aEQL
                                    g$sym$7958$4aEQL
                                    g$stx$7962$4aEQL)
                                  g$stx$7962$4aEQL))))))
                         ((case-lambda
                            ((g$t$7963$4aEQL)
                             (if g$t$7963$4aEQL
                               ((case-lambda
                                  ((g$x$7964$4aEQL)
                                   ((case-lambda
                                      ((g$name$7965$4aEQL g$label$7966$4aEQL)
                                       (g$add-subst$7297$4aEQL
                                         (g$make-rib$7256$4aEQL
                                           (list g$name$7965$4aEQL)
                                           (list g$top-mark*$7244$4aEQL)
                                           (list g$label$7966$4aEQL)
                                           '#f
                                           '#f)
                                         g$stx$7961$4aEQL)))
                                    (car g$x$7964$4aEQL)
                                    (cdr g$x$7964$4aEQL))))
                                g$t$7963$4aEQL)
                               g$stx$7961$4aEQL)))
                          (g$assq$5036$4aEQL
                            g$sym$7958$4aEQL
                            g$subst$7960$4aEQL)))))
                     (g$make-stx$7280$4aEQL
                       g$sym$7958$4aEQL
                       g$top-mark*$7244$4aEQL
                       '()
                       '()))))
                 (g$library-subst$7074$4aEQL
                   (g$find-library-by-name$7110$4aEQL
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5480$4aEQL
           g$scheme-stx-hashtable$7527$4aEQL
           g$sym$7958$4aEQL
           '#f)))))
   (g$lexical-var$7529$4aEQL g$lexical-var$11020$4aEQL car)
   (g$lexical-mutable?$7530$4aEQL g$lexical-mutable?$11021$4aEQL cdr)
   (g$set-lexical-mutable!$7531$4aEQL
     g$set-lexical-mutable!$11022$4aEQL
     set-cdr!)
   (g$add-lexical$7532$4aEQL
     g$add-lexical$11023$4aEQL
     (case-lambda
       ((g$lab$7967$4aEQL g$lex$7968$4aEQL g$r$7969$4aEQL)
        (cons
          (g$cons*$5050$4aEQL g$lab$7967$4aEQL 'lexical g$lex$7968$4aEQL '#f)
          g$r$7969$4aEQL))))
   (g$add-lexicals$7533$4aEQL
     g$add-lexicals$11024$4aEQL
     (case-lambda
       ((g$lab*$7970$4aEQL g$lex*$7971$4aEQL g$r$7972$4aEQL)
        (if (null? g$lab*$7970$4aEQL)
          g$r$7972$4aEQL
          (g$add-lexicals$7533$4aEQL
            (cdr g$lab*$7970$4aEQL)
            (cdr g$lex*$7971$4aEQL)
            (g$add-lexical$7532$4aEQL
              (car g$lab*$7970$4aEQL)
              (car g$lex*$7971$4aEQL)
              g$r$7972$4aEQL))))))
   (g$letrec-helper$7534$4aEQL
     g$letrec-helper$11025$4aEQL
     (case-lambda
       ((g$e$7973$4aEQL g$r$7974$4aEQL g$mr$7975$4aEQL g$build$7976$4aEQL)
        ((case-lambda
           ((g$t$7977$4aEQL)
            ((case-lambda
               ((g$ls/false$7978$4aEQL)
                (if g$ls/false$7978$4aEQL
                  (apply
                    (case-lambda
                      ((g$lhs*$7979$4aEQL
                         g$rhs*$7980$4aEQL
                         g$b$7981$4aEQL
                         g$b*$7982$4aEQL)
                       (if (not (g$valid-bound-ids?$7312$4aEQL
                                  g$lhs*$7979$4aEQL))
                         (g$invalid-fmls-error$7550$4aEQL
                           g$e$7973$4aEQL
                           g$lhs*$7979$4aEQL)
                         ((case-lambda
                            ((g$lex*$7983$4aEQL g$lab*$7984$4aEQL)
                             ((case-lambda
                                ((g$rib$7985$4aEQL g$r$7986$4aEQL)
                                 ((case-lambda
                                    ((g$body$7987$4aEQL g$rhs*$7988$4aEQL)
                                     (g$build$7976$4aEQL
                                       '#f
                                       g$lex*$7983$4aEQL
                                       g$rhs*$7988$4aEQL
                                       g$body$7987$4aEQL)))
                                  (g$chi-internal$7614$4aEQL
                                    (g$add-subst$7297$4aEQL
                                      g$rib$7985$4aEQL
                                      (cons g$b$7981$4aEQL g$b*$7982$4aEQL))
                                    g$r$7986$4aEQL
                                    g$mr$7975$4aEQL)
                                  (g$chi-expr*$7601$4aEQL
                                    (g$map$5048$4aEQL
                                      (case-lambda
                                        ((g$x$7989$4aEQL)
                                         (g$add-subst$7297$4aEQL
                                           g$rib$7985$4aEQL
                                           g$x$7989$4aEQL)))
                                      g$rhs*$7980$4aEQL)
                                    g$r$7986$4aEQL
                                    g$mr$7975$4aEQL))))
                              (g$make-full-rib$7275$4aEQL
                                g$lhs*$7979$4aEQL
                                g$lab*$7984$4aEQL)
                              (g$add-lexicals$7533$4aEQL
                                g$lab*$7984$4aEQL
                                g$lex*$7983$4aEQL
                                g$r$7974$4aEQL))))
                          (g$map$5048$4aEQL
                            g$gen-lexical$7246$4aEQL
                            g$lhs*$7979$4aEQL)
                          (g$map$5048$4aEQL
                            g$gen-label$7248$4aEQL
                            g$lhs*$7979$4aEQL)))))
                    g$ls/false$7978$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$7977$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$7977$4aEQL
               '(_ #(each (any any)) any . each-any)))))
         g$e$7973$4aEQL))))
   (g$letrec-transformer$7535$4aEQL
     g$letrec-transformer$11026$4aEQL
     (case-lambda
       ((g$e$7990$4aEQL g$r$7991$4aEQL g$mr$7992$4aEQL)
        (g$letrec-helper$7534$4aEQL
          g$e$7990$4aEQL
          g$r$7991$4aEQL
          g$mr$7992$4aEQL
          g$build-letrec$7238$4aEQL))))
   (g$letrec*-transformer$7536$4aEQL
     g$letrec*-transformer$11027$4aEQL
     (case-lambda
       ((g$e$7993$4aEQL g$r$7994$4aEQL g$mr$7995$4aEQL)
        (g$letrec-helper$7534$4aEQL
          g$e$7993$4aEQL
          g$r$7994$4aEQL
          g$mr$7995$4aEQL
          g$build-letrec*$7239$4aEQL))))
   (g$fluid-let-syntax-transformer$7537$4aEQL
     g$fluid-let-syntax-transformer$11028$4aEQL
     (case-lambda
       ((g$e$7996$4aEQL g$r$7997$4aEQL g$mr$7998$4aEQL)
        (letrec* ((g$lookup$7999$4aEQL
                    (case-lambda
                      ((g$x$8009$4aEQL)
                       ((case-lambda
                          ((g$t$8010$4aEQL)
                           (if g$t$8010$4aEQL
                             g$t$8010$4aEQL
                             (begin
                               '#f
                               (g$syntax-violation$7696$4aEQL
                                 '#f
                                 '"unbound identifier"
                                 g$e$7996$4aEQL
                                 g$x$8009$4aEQL)))))
                        (g$id->label$7320$4aEQL g$x$8009$4aEQL))))))
          ((case-lambda
             ((g$t$8000$4aEQL)
              ((case-lambda
                 ((g$ls/false$8001$4aEQL)
                  (if g$ls/false$8001$4aEQL
                    (apply
                      (case-lambda
                        ((g$lhs*$8002$4aEQL
                           g$rhs*$8003$4aEQL
                           g$b$8004$4aEQL
                           g$b*$8005$4aEQL)
                         (if (not (g$valid-bound-ids?$7312$4aEQL
                                    g$lhs*$8002$4aEQL))
                           (g$invalid-fmls-error$7550$4aEQL
                             g$e$7996$4aEQL
                             g$lhs*$8002$4aEQL)
                           ((case-lambda
                              ((g$lab*$8006$4aEQL g$rhs*$8007$4aEQL)
                               (g$chi-internal$7614$4aEQL
                                 (cons g$b$8004$4aEQL g$b*$8005$4aEQL)
                                 (append
                                   (g$map$5048$4aEQL
                                     cons
                                     g$lab*$8006$4aEQL
                                     g$rhs*$8007$4aEQL)
                                   g$r$7997$4aEQL)
                                 (append
                                   (g$map$5048$4aEQL
                                     cons
                                     g$lab*$8006$4aEQL
                                     g$rhs*$8007$4aEQL)
                                   g$mr$7998$4aEQL))))
                            (g$map$5048$4aEQL
                              g$lookup$7999$4aEQL
                              g$lhs*$8002$4aEQL)
                            (g$map$5048$4aEQL
                              (case-lambda
                                ((g$x$8008$4aEQL)
                                 (g$make-eval-transformer$7339$4aEQL
                                   (g$expand-transformer$7630$4aEQL
                                     g$x$8008$4aEQL
                                     g$mr$7998$4aEQL))))
                              g$rhs*$8003$4aEQL)))))
                      g$ls/false$8001$4aEQL)
                    (g$syntax-violation$7696$4aEQL
                      '#f
                      '"invalid syntax"
                      g$t$8000$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL
                 g$t$8000$4aEQL
                 '(_ #(each (any any)) any . each-any)))))
           g$e$7996$4aEQL)))))
   (g$type-descriptor-transformer$7538$4aEQL
     g$type-descriptor-transformer$11029$4aEQL
     (case-lambda
       ((g$e$8011$4aEQL g$r$8012$4aEQL g$mr$8013$4aEQL)
        ((case-lambda
           ((g$t$8014$4aEQL)
            ((case-lambda
               ((g$ls/false$8015$4aEQL)
                (if (if g$ls/false$8015$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8016$4aEQL)
                             (g$id?$7307$4aEQL g$id$8016$4aEQL)))
                          g$ls/false$8015$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8017$4aEQL)
                       ((case-lambda
                          ((g$lab$8018$4aEQL)
                           ((case-lambda
                              ((g$b$8019$4aEQL)
                               ((case-lambda
                                  ((g$type$8020$4aEQL)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8018$4aEQL)
                                           (g$raise-unbound-error$7326$4aEQL
                                             g$id$8017$4aEQL)
                                           (void))
                                         (if (not (if (eq? g$type$8020$4aEQL
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (not (list?
                                                             (g$binding-value$7325$4aEQL
                                                               g$b$8019$4aEQL))))
                                                    '#f))
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"not a record type"
                                             g$e$8011$4aEQL)
                                           (void))
                                         (list
                                           'quote
                                           (g$binding-value$7325$4aEQL
                                             g$b$8019$4aEQL))))))))
                                (g$binding-type$7324$4aEQL g$b$8019$4aEQL))))
                            (g$label->binding$7322$4aEQL
                              g$lab$8018$4aEQL
                              g$r$8012$4aEQL))))
                        (g$id->label$7320$4aEQL g$id$8017$4aEQL))))
                    g$ls/false$8015$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8014$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8014$4aEQL '(_ any)))))
         g$e$8011$4aEQL))))
   (g$record-type-descriptor-transformer$7539$4aEQL
     g$record-type-descriptor-transformer$11030$4aEQL
     (case-lambda
       ((g$e$8021$4aEQL g$r$8022$4aEQL g$mr$8023$4aEQL)
        ((case-lambda
           ((g$t$8024$4aEQL)
            ((case-lambda
               ((g$ls/false$8025$4aEQL)
                (if (if g$ls/false$8025$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8026$4aEQL)
                             (g$id?$7307$4aEQL g$id$8026$4aEQL)))
                          g$ls/false$8025$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8027$4aEQL)
                       ((case-lambda
                          ((g$lab$8028$4aEQL)
                           ((case-lambda
                              ((g$b$8029$4aEQL)
                               ((case-lambda
                                  ((g$type$8030$4aEQL)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8028$4aEQL)
                                           (g$raise-unbound-error$7326$4aEQL
                                             g$id$8027$4aEQL)
                                           (void))
                                         (if (not (if (eq? g$type$8030$4aEQL
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7325$4aEQL
                                                          g$b$8029$4aEQL)))
                                                    '#f))
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"not a record type"
                                             g$e$8021$4aEQL)
                                           (void))
                                         (g$chi-expr$7603$4aEQL
                                           (car (g$binding-value$7325$4aEQL
                                                  g$b$8029$4aEQL))
                                           g$r$8022$4aEQL
                                           g$mr$8023$4aEQL)))))))
                                (g$binding-type$7324$4aEQL g$b$8029$4aEQL))))
                            (g$label->binding$7322$4aEQL
                              g$lab$8028$4aEQL
                              g$r$8022$4aEQL))))
                        (g$id->label$7320$4aEQL g$id$8027$4aEQL))))
                    g$ls/false$8025$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8024$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8024$4aEQL '(_ any)))))
         g$e$8021$4aEQL))))
   (g$record-constructor-descriptor-transformer$7540$4aEQL
     g$record-constructor-descriptor-transformer$11031$4aEQL
     (case-lambda
       ((g$e$8031$4aEQL g$r$8032$4aEQL g$mr$8033$4aEQL)
        ((case-lambda
           ((g$t$8034$4aEQL)
            ((case-lambda
               ((g$ls/false$8035$4aEQL)
                (if (if g$ls/false$8035$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8036$4aEQL)
                             (g$id?$7307$4aEQL g$id$8036$4aEQL)))
                          g$ls/false$8035$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8037$4aEQL)
                       ((case-lambda
                          ((g$lab$8038$4aEQL)
                           ((case-lambda
                              ((g$b$8039$4aEQL)
                               ((case-lambda
                                  ((g$type$8040$4aEQL)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8038$4aEQL)
                                           (g$raise-unbound-error$7326$4aEQL
                                             g$id$8037$4aEQL)
                                           (void))
                                         (if (not (if (eq? g$type$8040$4aEQL
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7325$4aEQL
                                                          g$b$8039$4aEQL)))
                                                    '#f))
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid type"
                                             g$e$8031$4aEQL)
                                           (void))
                                         (g$chi-expr$7603$4aEQL
                                           (g$cadr$5212$4aEQL
                                             (g$binding-value$7325$4aEQL
                                               g$b$8039$4aEQL))
                                           g$r$8032$4aEQL
                                           g$mr$8033$4aEQL)))))))
                                (g$binding-type$7324$4aEQL g$b$8039$4aEQL))))
                            (g$label->binding$7322$4aEQL
                              g$lab$8038$4aEQL
                              g$r$8032$4aEQL))))
                        (g$id->label$7320$4aEQL g$id$8037$4aEQL))))
                    g$ls/false$8035$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8034$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8034$4aEQL '(_ any)))))
         g$e$8031$4aEQL))))
   (g$when-macro$7541$4aEQL
     g$when-macro$11032$4aEQL
     (case-lambda
       ((g$e$8041$4aEQL)
        ((case-lambda
           ((g$t$8042$4aEQL)
            ((case-lambda
               ((g$ls/false$8043$4aEQL)
                (if g$ls/false$8043$4aEQL
                  (apply
                    (case-lambda
                      ((g$test$8044$4aEQL g$e$8045$4aEQL g$e*$8046$4aEQL)
                       (g$bless$7548$4aEQL
                         (list
                           'if
                           g$test$8044$4aEQL
                           (cons
                             'begin
                             (cons g$e$8045$4aEQL g$e*$8046$4aEQL))))))
                    g$ls/false$8043$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8042$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8042$4aEQL
               '(_ any any . each-any)))))
         g$e$8041$4aEQL))))
   (g$unless-macro$7542$4aEQL
     g$unless-macro$11033$4aEQL
     (case-lambda
       ((g$e$8047$4aEQL)
        ((case-lambda
           ((g$t$8048$4aEQL)
            ((case-lambda
               ((g$ls/false$8049$4aEQL)
                (if g$ls/false$8049$4aEQL
                  (apply
                    (case-lambda
                      ((g$test$8050$4aEQL g$e$8051$4aEQL g$e*$8052$4aEQL)
                       (g$bless$7548$4aEQL
                         (list
                           'if
                           (list 'not g$test$8050$4aEQL)
                           (cons
                             'begin
                             (cons g$e$8051$4aEQL g$e*$8052$4aEQL))))))
                    g$ls/false$8049$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8048$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8048$4aEQL
               '(_ any any . each-any)))))
         g$e$8047$4aEQL))))
   (g$if-transformer$7543$4aEQL
     g$if-transformer$11034$4aEQL
     (case-lambda
       ((g$e$8053$4aEQL g$r$8054$4aEQL g$mr$8055$4aEQL)
        ((case-lambda
           ((g$t$8056$4aEQL)
            ((case-lambda
               ((g$ls/false$8057$4aEQL)
                (if g$ls/false$8057$4aEQL
                  (apply
                    (case-lambda
                      ((g$e0$8058$4aEQL g$e1$8059$4aEQL g$e2$8060$4aEQL)
                       (list
                         'if
                         (g$chi-expr$7603$4aEQL
                           g$e0$8058$4aEQL
                           g$r$8054$4aEQL
                           g$mr$8055$4aEQL)
                         (g$chi-expr$7603$4aEQL
                           g$e1$8059$4aEQL
                           g$r$8054$4aEQL
                           g$mr$8055$4aEQL)
                         (g$chi-expr$7603$4aEQL
                           g$e2$8060$4aEQL
                           g$r$8054$4aEQL
                           g$mr$8055$4aEQL))))
                    g$ls/false$8057$4aEQL)
                  ((case-lambda
                     ((g$t$8061$4aEQL)
                      ((case-lambda
                         ((g$ls/false$8062$4aEQL)
                          (if g$ls/false$8062$4aEQL
                            (apply
                              (case-lambda
                                ((g$e0$8063$4aEQL g$e1$8064$4aEQL)
                                 (list
                                   'if
                                   (g$chi-expr$7603$4aEQL
                                     g$e0$8063$4aEQL
                                     g$r$8054$4aEQL
                                     g$mr$8055$4aEQL)
                                   (g$chi-expr$7603$4aEQL
                                     g$e1$8064$4aEQL
                                     g$r$8054$4aEQL
                                     g$mr$8055$4aEQL)
                                   (g$build-void$7237$4aEQL))))
                              g$ls/false$8062$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$8061$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$8061$4aEQL
                         '(_ any any)))))
                   g$t$8056$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8056$4aEQL '(_ any any any)))))
         g$e$8053$4aEQL))))
   (g$case-macro$7544$4aEQL
     g$case-macro$11035$4aEQL
     (case-lambda
       ((g$e$8065$4aEQL)
        (letrec* ((g$build-last$8066$4aEQL
                    (case-lambda
                      ((g$cls$8086$4aEQL)
                       ((case-lambda
                          ((g$t$8087$4aEQL)
                           ((case-lambda
                              ((g$ls/false$8088$4aEQL)
                               (if g$ls/false$8088$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$e$8089$4aEQL g$e*$8090$4aEQL)
                                      (cons
                                        'begin
                                        (cons g$e$8089$4aEQL g$e*$8090$4aEQL))))
                                   g$ls/false$8088$4aEQL)
                                 ((case-lambda
                                    ((g$t$8091$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$8092$4aEQL)
                                         (if g$ls/false$8092$4aEQL
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8067$4aEQL
                                                  g$cls$8086$4aEQL
                                                  '(if #f #f))))
                                             g$ls/false$8092$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8091$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$8091$4aEQL
                                        '_))))
                                  g$t$8087$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$8087$4aEQL
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8086$4aEQL))))
                  (g$build-one$8067$4aEQL
                    (case-lambda
                      ((g$cls$8079$4aEQL g$k$8080$4aEQL)
                       ((case-lambda
                          ((g$t$8081$4aEQL)
                           ((case-lambda
                              ((g$ls/false$8082$4aEQL)
                               (if g$ls/false$8082$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$d*$8083$4aEQL
                                        g$e$8084$4aEQL
                                        g$e*$8085$4aEQL)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8083$4aEQL))
                                        (cons
                                          'begin
                                          (cons g$e$8084$4aEQL g$e*$8085$4aEQL))
                                        g$k$8080$4aEQL)))
                                   g$ls/false$8082$4aEQL)
                                 (g$syntax-violation$7696$4aEQL
                                   '#f
                                   '"invalid syntax"
                                   g$t$8081$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$8081$4aEQL
                              '(each-any any . each-any)))))
                        g$cls$8079$4aEQL)))))
          ((case-lambda
             ((g$t$8068$4aEQL)
              ((case-lambda
                 ((g$ls/false$8069$4aEQL)
                  (if g$ls/false$8069$4aEQL
                    (apply
                      (case-lambda
                        ((g$expr$8070$4aEQL)
                         (g$bless$7548$4aEQL
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8070$4aEQL))
                               '((if #f #f)))))))
                      g$ls/false$8069$4aEQL)
                    ((case-lambda
                       ((g$t$8071$4aEQL)
                        ((case-lambda
                           ((g$ls/false$8072$4aEQL)
                            (if g$ls/false$8072$4aEQL
                              (apply
                                (case-lambda
                                  ((g$expr$8073$4aEQL
                                     g$cls$8074$4aEQL
                                     g$cls*$8075$4aEQL)
                                   (g$bless$7548$4aEQL
                                     (list
                                       'let
                                       (list (list 't g$expr$8073$4aEQL))
                                       ((letrec ((g$f$8076$4aEQL
                                                   (case-lambda
                                                     ((g$cls$8077$4aEQL
                                                        g$cls*$8078$4aEQL)
                                                      (if (null?
                                                            g$cls*$8078$4aEQL)
                                                        (g$build-last$8066$4aEQL
                                                          g$cls$8077$4aEQL)
                                                        (g$build-one$8067$4aEQL
                                                          g$cls$8077$4aEQL
                                                          (g$f$8076$4aEQL
                                                            (car g$cls*$8078$4aEQL)
                                                            (cdr g$cls*$8078$4aEQL))))))))
                                          g$f$8076$4aEQL)
                                        g$cls$8074$4aEQL
                                        g$cls*$8075$4aEQL)))))
                                g$ls/false$8072$4aEQL)
                              (g$syntax-violation$7696$4aEQL
                                '#f
                                '"invalid syntax"
                                g$t$8071$4aEQL))))
                         (g$syntax-dispatch$7585$4aEQL
                           g$t$8071$4aEQL
                           '(_ any any . each-any)))))
                     g$t$8068$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL g$t$8068$4aEQL '(_ any)))))
           g$e$8065$4aEQL)))))
   (g$quote-transformer$7545$4aEQL
     g$quote-transformer$11036$4aEQL
     (case-lambda
       ((g$e$8093$4aEQL g$r$8094$4aEQL g$mr$8095$4aEQL)
        ((case-lambda
           ((g$t$8096$4aEQL)
            ((case-lambda
               ((g$ls/false$8097$4aEQL)
                (if g$ls/false$8097$4aEQL
                  (apply
                    (case-lambda
                      ((g$datum$8098$4aEQL)
                       (list
                         'quote
                         (g$stx->datum$7318$4aEQL g$datum$8098$4aEQL))))
                    g$ls/false$8097$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8096$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8096$4aEQL '(_ any)))))
         g$e$8093$4aEQL))))
   (g$case-lambda-transformer$7546$4aEQL
     g$case-lambda-transformer$11037$4aEQL
     (case-lambda
       ((g$e$8099$4aEQL g$r$8100$4aEQL g$mr$8101$4aEQL)
        ((case-lambda
           ((g$t$8102$4aEQL)
            ((case-lambda
               ((g$ls/false$8103$4aEQL)
                (if g$ls/false$8103$4aEQL
                  (apply
                    (case-lambda
                      ((g$fmls*$8104$4aEQL g$b*$8105$4aEQL g$b**$8106$4aEQL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7607$4aEQL
                              g$e$8099$4aEQL
                              g$fmls*$8104$4aEQL
                              (g$map$5048$4aEQL
                                cons
                                g$b*$8105$4aEQL
                                g$b**$8106$4aEQL)
                              g$r$8100$4aEQL
                              g$mr$8101$4aEQL)))
                         (case-lambda
                           ((g$fmls*$8109$4aEQL g$body*$8110$4aEQL)
                            ((case-lambda
                               ((g$body*$8111$4aEQL g$fmls*$8112$4aEQL)
                                (g$build-case-lambda$7234$4aEQL
                                  '#f
                                  g$fmls*$8112$4aEQL
                                  g$body*$8111$4aEQL)))
                             g$body*$8110$4aEQL
                             g$fmls*$8109$4aEQL))))))
                    g$ls/false$8103$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8102$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8102$4aEQL
               '(_ . #(each (any any . each-any)))))))
         g$e$8099$4aEQL))))
   (g$lambda-transformer$7547$4aEQL
     g$lambda-transformer$11038$4aEQL
     (case-lambda
       ((g$e$8113$4aEQL g$r$8114$4aEQL g$mr$8115$4aEQL)
        ((case-lambda
           ((g$t$8116$4aEQL)
            ((case-lambda
               ((g$ls/false$8117$4aEQL)
                (if g$ls/false$8117$4aEQL
                  (apply
                    (case-lambda
                      ((g$fmls$8118$4aEQL g$b$8119$4aEQL g$b*$8120$4aEQL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7606$4aEQL
                              g$e$8113$4aEQL
                              g$fmls$8118$4aEQL
                              (cons g$b$8119$4aEQL g$b*$8120$4aEQL)
                              g$r$8114$4aEQL
                              g$mr$8115$4aEQL)))
                         (case-lambda
                           ((g$fmls$8123$4aEQL g$body$8124$4aEQL)
                            ((case-lambda
                               ((g$body$8125$4aEQL g$fmls$8126$4aEQL)
                                (g$build-lambda$7233$4aEQL
                                  '#f
                                  g$fmls$8126$4aEQL
                                  g$body$8125$4aEQL)))
                             g$body$8124$4aEQL
                             g$fmls$8123$4aEQL))))))
                    g$ls/false$8117$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8116$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8116$4aEQL
               '(_ any any . each-any)))))
         g$e$8113$4aEQL))))
   (g$bless$7548$4aEQL
     g$bless$11039$4aEQL
     (case-lambda
       ((g$x$8127$4aEQL)
        (g$mkstx$7295$4aEQL
          ((letrec ((g$f$8128$4aEQL
                      (case-lambda
                        ((g$x$8129$4aEQL)
                         (if (g$stx?$7279$4aEQL g$x$8129$4aEQL)
                           g$x$8129$4aEQL
                           (if (pair? g$x$8129$4aEQL)
                             (cons
                               (g$f$8128$4aEQL (car g$x$8129$4aEQL))
                               (g$f$8128$4aEQL (cdr g$x$8129$4aEQL)))
                             (if (symbol? g$x$8129$4aEQL)
                               (g$scheme-stx$7528$4aEQL g$x$8129$4aEQL)
                               (if (vector? g$x$8129$4aEQL)
                                 (vector-map g$f$8128$4aEQL g$x$8129$4aEQL)
                                 g$x$8129$4aEQL))))))))
             g$f$8128$4aEQL)
           g$x$8127$4aEQL)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7549$4aEQL
     g$with-syntax-macro$11040$4aEQL
     (case-lambda
       ((g$e$8130$4aEQL)
        ((case-lambda
           ((g$t$8131$4aEQL)
            ((case-lambda
               ((g$ls/false$8132$4aEQL)
                (if g$ls/false$8132$4aEQL
                  (apply
                    (case-lambda
                      ((g$pat*$8133$4aEQL
                         g$expr*$8134$4aEQL
                         g$b$8135$4aEQL
                         g$b*$8136$4aEQL)
                       ((case-lambda
                          ((g$idn*$8137$4aEQL)
                           (begin
                             (g$verify-formals$7605$4aEQL
                               (g$map$5048$4aEQL car g$idn*$8137$4aEQL)
                               g$e$8130$4aEQL)
                             ((case-lambda
                                ((g$t*$8138$4aEQL)
                                 (g$bless$7548$4aEQL
                                   (list
                                     'let
                                     (g$map$5048$4aEQL
                                       list
                                       g$t*$8138$4aEQL
                                       g$expr*$8134$4aEQL)
                                     ((letrec ((g$f$8139$4aEQL
                                                 (case-lambda
                                                   ((g$pat*$8140$4aEQL
                                                      g$t*$8141$4aEQL)
                                                    (if (null?
                                                          g$pat*$8140$4aEQL)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8135$4aEQL
                                                            g$b*$8136$4aEQL)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8141$4aEQL)
                                                        '()
                                                        (list
                                                          (car g$pat*$8140$4aEQL)
                                                          (g$f$8139$4aEQL
                                                            (cdr g$pat*$8140$4aEQL)
                                                            (cdr g$t*$8141$4aEQL)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8140$4aEQL))
                                                            (car g$t*$8141$4aEQL)))))))))
                                        g$f$8139$4aEQL)
                                      g$pat*$8133$4aEQL
                                      g$t*$8138$4aEQL)))))
                              (g$generate-temporaries$7686$4aEQL
                                g$expr*$8134$4aEQL)))))
                        ((letrec ((g$f$8142$4aEQL
                                    (case-lambda
                                      ((g$pat*$8143$4aEQL)
                                       (if (null? g$pat*$8143$4aEQL)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7584$4aEQL
                                                (car g$pat*$8143$4aEQL)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8146$4aEQL
                                                g$idn*$8147$4aEQL)
                                              ((case-lambda
                                                 ((g$idn*$8148$4aEQL
                                                    g$pat$8149$4aEQL)
                                                  (append
                                                    g$idn*$8148$4aEQL
                                                    (g$f$8142$4aEQL
                                                      (cdr g$pat*$8143$4aEQL)))))
                                               g$idn*$8147$4aEQL
                                               g$pat$8146$4aEQL)))))))))
                           g$f$8142$4aEQL)
                         g$pat*$8133$4aEQL))))
                    g$ls/false$8132$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8131$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8131$4aEQL
               '(_ #(each (any any)) any . each-any)))))
         g$e$8130$4aEQL))))
   (g$invalid-fmls-error$7550$4aEQL
     g$invalid-fmls-error$11041$4aEQL
     (case-lambda
       ((g$stx$8150$4aEQL g$fmls$8151$4aEQL)
        ((case-lambda
           ((g$t$8152$4aEQL)
            ((case-lambda
               ((g$ls/false$8153$4aEQL)
                (if g$ls/false$8153$4aEQL
                  (apply
                    (case-lambda
                      ((g$id*$8154$4aEQL g$last$8155$4aEQL)
                       ((letrec ((g$f$8156$4aEQL
                                   (case-lambda
                                     ((g$id*$8157$4aEQL)
                                      (if (null? g$id*$8157$4aEQL)
                                        (values)
                                        (if (not (g$id?$7307$4aEQL
                                                   (car g$id*$8157$4aEQL)))
                                          (g$syntax-violation$7696$4aEQL
                                            '#f
                                            '"not an identifier"
                                            g$stx$8150$4aEQL
                                            (car g$id*$8157$4aEQL))
                                          (begin
                                            (g$f$8156$4aEQL
                                              (cdr g$id*$8157$4aEQL))
                                            (if (g$bound-id-member?$7314$4aEQL
                                                  (car g$id*$8157$4aEQL)
                                                  (cdr g$id*$8157$4aEQL))
                                              (g$syntax-violation$7696$4aEQL
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8150$4aEQL
                                                (car g$id*$8157$4aEQL))
                                              (void)))))))))
                          g$f$8156$4aEQL)
                        (if (g$id?$7307$4aEQL g$last$8155$4aEQL)
                          (cons g$last$8155$4aEQL g$id*$8154$4aEQL)
                          (if (g$syntax-null?$7302$4aEQL g$last$8155$4aEQL)
                            g$id*$8154$4aEQL
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"not an identifier"
                              g$stx$8150$4aEQL
                              g$last$8155$4aEQL))))))
                    g$ls/false$8153$4aEQL)
                  ((case-lambda
                     ((g$t$8158$4aEQL)
                      ((case-lambda
                         ((g$ls/false$8159$4aEQL)
                          (if g$ls/false$8159$4aEQL
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7696$4aEQL
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8150$4aEQL
                                   g$fmls$8151$4aEQL)))
                              g$ls/false$8159$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$8158$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL g$t$8158$4aEQL '_))))
                   g$t$8152$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8152$4aEQL
               '#(each+ any () any)))))
         g$fmls$8151$4aEQL))))
   (g$let-macro$7551$4aEQL
     g$let-macro$11042$4aEQL
     (case-lambda
       ((g$stx$8160$4aEQL)
        ((case-lambda
           ((g$t$8161$4aEQL)
            ((case-lambda
               ((g$ls/false$8162$4aEQL)
                (if g$ls/false$8162$4aEQL
                  (apply
                    (case-lambda
                      ((g$lhs*$8163$4aEQL
                         g$rhs*$8164$4aEQL
                         g$b$8165$4aEQL
                         g$b*$8166$4aEQL)
                       (if (g$valid-bound-ids?$7312$4aEQL g$lhs*$8163$4aEQL)
                         (g$bless$7548$4aEQL
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8163$4aEQL
                                 (cons g$b$8165$4aEQL g$b*$8166$4aEQL)))
                             g$rhs*$8164$4aEQL))
                         (g$invalid-fmls-error$7550$4aEQL
                           g$stx$8160$4aEQL
                           g$lhs*$8163$4aEQL))))
                    g$ls/false$8162$4aEQL)
                  ((case-lambda
                     ((g$t$8167$4aEQL)
                      ((case-lambda
                         ((g$ls/false$8168$4aEQL)
                          (if (if g$ls/false$8168$4aEQL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8169$4aEQL
                                         g$lhs*$8170$4aEQL
                                         g$rhs*$8171$4aEQL
                                         g$b$8172$4aEQL
                                         g$b*$8173$4aEQL)
                                       (g$id?$7307$4aEQL g$f$8169$4aEQL)))
                                    g$ls/false$8168$4aEQL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8174$4aEQL
                                   g$lhs*$8175$4aEQL
                                   g$rhs*$8176$4aEQL
                                   g$b$8177$4aEQL
                                   g$b*$8178$4aEQL)
                                 (if (g$valid-bound-ids?$7312$4aEQL
                                       g$lhs*$8175$4aEQL)
                                   (g$bless$7548$4aEQL
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8174$4aEQL
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8175$4aEQL
                                                 (cons
                                                   g$b$8177$4aEQL
                                                   g$b*$8178$4aEQL)))))
                                         g$f$8174$4aEQL)
                                       g$rhs*$8176$4aEQL))
                                   (g$invalid-fmls-error$7550$4aEQL
                                     g$stx$8160$4aEQL
                                     g$lhs*$8175$4aEQL))))
                              g$ls/false$8168$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$8167$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$8167$4aEQL
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8161$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8161$4aEQL
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8160$4aEQL))))
   (g$let-values-macro$7552$4aEQL
     g$let-values-macro$11043$4aEQL
     (case-lambda
       ((g$stx$8179$4aEQL)
        (letrec* ((g$rename$8180$4aEQL
                    (case-lambda
                      ((g$x$8231$4aEQL g$old*$8232$4aEQL g$new*$8233$4aEQL)
                       (begin
                         (if (not (g$id?$7307$4aEQL g$x$8231$4aEQL))
                           (g$syntax-violation$7696$4aEQL
                             '#f
                             '"not an indentifier"
                             g$stx$8179$4aEQL
                             g$x$8231$4aEQL)
                           (void))
                         (if (g$bound-id-member?$7314$4aEQL
                               g$x$8231$4aEQL
                               g$old*$8232$4aEQL)
                           (g$syntax-violation$7696$4aEQL
                             '#f
                             '"duplicate binding"
                             g$stx$8179$4aEQL
                             g$x$8231$4aEQL)
                           (void))
                         ((case-lambda
                            ((g$y$8234$4aEQL)
                             (values
                               g$y$8234$4aEQL
                               (cons g$x$8231$4aEQL g$old*$8232$4aEQL)
                               (cons g$y$8234$4aEQL g$new*$8233$4aEQL))))
                          (gensym
                            (g$syntax->datum$7699$4aEQL g$x$8231$4aEQL)))))))
                  (g$rename*$8181$4aEQL
                    (case-lambda
                      ((g$x*$8222$4aEQL g$old*$8223$4aEQL g$new*$8224$4aEQL)
                       (if (null? g$x*$8222$4aEQL)
                         (values '() g$old*$8223$4aEQL g$new*$8224$4aEQL)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8180$4aEQL
                                (car g$x*$8222$4aEQL)
                                g$old*$8223$4aEQL
                                g$new*$8224$4aEQL)))
                           (case-lambda
                             ((g$x$8225$4aEQL
                                g$old*$8226$4aEQL
                                g$new*$8227$4aEQL)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8181$4aEQL
                                     (cdr g$x*$8222$4aEQL)
                                     g$old*$8226$4aEQL
                                     g$new*$8227$4aEQL)))
                                (case-lambda
                                  ((g$x*$8228$4aEQL
                                     g$old*$8229$4aEQL
                                     g$new*$8230$4aEQL)
                                   (values
                                     (cons g$x$8225$4aEQL g$x*$8228$4aEQL)
                                     g$old*$8229$4aEQL
                                     g$new*$8230$4aEQL))))))))))))
          ((case-lambda
             ((g$t$8182$4aEQL)
              ((case-lambda
                 ((g$ls/false$8183$4aEQL)
                  (if g$ls/false$8183$4aEQL
                    (apply
                      (case-lambda
                        ((g$b$8184$4aEQL g$b*$8185$4aEQL)
                         (g$cons*$5050$4aEQL
                           (g$bless$7548$4aEQL 'let)
                           '()
                           g$b$8184$4aEQL
                           g$b*$8185$4aEQL)))
                      g$ls/false$8183$4aEQL)
                    ((case-lambda
                       ((g$t$8186$4aEQL)
                        ((case-lambda
                           ((g$ls/false$8187$4aEQL)
                            (if g$ls/false$8187$4aEQL
                              (apply
                                (case-lambda
                                  ((g$lhs*$8188$4aEQL
                                     g$rhs*$8189$4aEQL
                                     g$b$8190$4aEQL
                                     g$b*$8191$4aEQL)
                                   (g$bless$7548$4aEQL
                                     ((letrec ((g$f$8192$4aEQL
                                                 (case-lambda
                                                   ((g$lhs*$8193$4aEQL
                                                      g$rhs*$8194$4aEQL
                                                      g$old*$8195$4aEQL
                                                      g$new*$8196$4aEQL)
                                                    (if (null?
                                                          g$lhs*$8193$4aEQL)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5048$4aEQL
                                                            list
                                                            g$old*$8195$4aEQL
                                                            g$new*$8196$4aEQL)
                                                          (cons
                                                            g$b$8190$4aEQL
                                                            g$b*$8191$4aEQL)))
                                                      ((case-lambda
                                                         ((g$t$8197$4aEQL)
                                                          ((case-lambda
                                                             ((g$ls/false$8198$4aEQL)
                                                              (if g$ls/false$8198$4aEQL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8199$4aEQL)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8181$4aEQL
                                                                            g$x*$8199$4aEQL
                                                                            g$old*$8195$4aEQL
                                                                            g$new*$8196$4aEQL)))
                                                                       (case-lambda
                                                                         ((g$y*$8203$4aEQL
                                                                            g$old*$8204$4aEQL
                                                                            g$new*$8205$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$new*$8206$4aEQL
                                                                                g$old*$8207$4aEQL
                                                                                g$y*$8208$4aEQL)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8194$4aEQL))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8208$4aEQL
                                                                                  (g$f$8192$4aEQL
                                                                                    (cdr g$lhs*$8193$4aEQL)
                                                                                    (cdr g$rhs*$8194$4aEQL)
                                                                                    g$old*$8207$4aEQL
                                                                                    g$new*$8206$4aEQL)))))
                                                                           g$new*$8205$4aEQL
                                                                           g$old*$8204$4aEQL
                                                                           g$y*$8203$4aEQL))))))
                                                                  g$ls/false$8198$4aEQL)
                                                                ((case-lambda
                                                                   ((g$t$8209$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8210$4aEQL)
                                                                        (if g$ls/false$8210$4aEQL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8211$4aEQL
                                                                                 g$x$8212$4aEQL)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8180$4aEQL
                                                                                      g$x$8212$4aEQL
                                                                                      g$old*$8195$4aEQL
                                                                                      g$new*$8196$4aEQL)))
                                                                                 (case-lambda
                                                                                   ((g$y$8213$4aEQL
                                                                                      g$old*$8214$4aEQL
                                                                                      g$new*$8215$4aEQL)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8181$4aEQL
                                                                                           g$x*$8211$4aEQL
                                                                                           g$old*$8214$4aEQL
                                                                                           g$new*$8215$4aEQL)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8216$4aEQL
                                                                                           g$old*$8217$4aEQL
                                                                                           g$new*$8218$4aEQL)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8194$4aEQL))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8216$4aEQL
                                                                                               g$y$8213$4aEQL)
                                                                                             (g$f$8192$4aEQL
                                                                                               (cdr g$lhs*$8193$4aEQL)
                                                                                               (cdr g$rhs*$8194$4aEQL)
                                                                                               g$old*$8217$4aEQL
                                                                                               g$new*$8218$4aEQL)))))))))))
                                                                            g$ls/false$8210$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$t$8219$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8220$4aEQL)
                                                                                  (if g$ls/false$8220$4aEQL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8221$4aEQL)
                                                                                         (g$syntax-violation$7696$4aEQL
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8179$4aEQL
                                                                                           g$others$8221$4aEQL)))
                                                                                      g$ls/false$8220$4aEQL)
                                                                                    (g$syntax-violation$7696$4aEQL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8219$4aEQL))))
                                                                               (g$syntax-dispatch$7585$4aEQL
                                                                                 g$t$8219$4aEQL
                                                                                 'any))))
                                                                           g$t$8209$4aEQL))))
                                                                     (g$syntax-dispatch$7585$4aEQL
                                                                       g$t$8209$4aEQL
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8197$4aEQL))))
                                                           (g$syntax-dispatch$7585$4aEQL
                                                             g$t$8197$4aEQL
                                                             'each-any))))
                                                       (car g$lhs*$8193$4aEQL)))))))
                                        g$f$8192$4aEQL)
                                      g$lhs*$8188$4aEQL
                                      g$rhs*$8189$4aEQL
                                      '()
                                      '()))))
                                g$ls/false$8187$4aEQL)
                              (g$syntax-violation$7696$4aEQL
                                '#f
                                '"invalid syntax"
                                g$t$8186$4aEQL))))
                         (g$syntax-dispatch$7585$4aEQL
                           g$t$8186$4aEQL
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8182$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL
                 g$t$8182$4aEQL
                 '(_ () any . each-any)))))
           g$stx$8179$4aEQL)))))
   (g$let*-values-macro$7553$4aEQL
     g$let*-values-macro$11044$4aEQL
     (case-lambda
       ((g$stx$8235$4aEQL)
        (letrec* ((g$check$8236$4aEQL
                    (case-lambda
                      ((g$x*$8260$4aEQL)
                       (if (not (null? g$x*$8260$4aEQL))
                         ((case-lambda
                            ((g$x$8261$4aEQL)
                             (begin
                               (if (not (g$id?$7307$4aEQL g$x$8261$4aEQL))
                                 (g$syntax-violation$7696$4aEQL
                                   '#f
                                   '"not an identifier"
                                   g$stx$8235$4aEQL
                                   g$x$8261$4aEQL)
                                 (void))
                               (g$check$8236$4aEQL (cdr g$x*$8260$4aEQL))
                               (if (g$bound-id-member?$7314$4aEQL
                                     g$x$8261$4aEQL
                                     (cdr g$x*$8260$4aEQL))
                                 (g$syntax-violation$7696$4aEQL
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8235$4aEQL
                                   g$x$8261$4aEQL)
                                 (void)))))
                          (car g$x*$8260$4aEQL))
                         (void))))))
          ((case-lambda
             ((g$t$8237$4aEQL)
              ((case-lambda
                 ((g$ls/false$8238$4aEQL)
                  (if g$ls/false$8238$4aEQL
                    (apply
                      (case-lambda
                        ((g$b$8239$4aEQL g$b*$8240$4aEQL)
                         (g$cons*$5050$4aEQL
                           (g$bless$7548$4aEQL 'let)
                           '()
                           g$b$8239$4aEQL
                           g$b*$8240$4aEQL)))
                      g$ls/false$8238$4aEQL)
                    ((case-lambda
                       ((g$t$8241$4aEQL)
                        ((case-lambda
                           ((g$ls/false$8242$4aEQL)
                            (if g$ls/false$8242$4aEQL
                              (apply
                                (case-lambda
                                  ((g$lhs*$8243$4aEQL
                                     g$rhs*$8244$4aEQL
                                     g$b$8245$4aEQL
                                     g$b*$8246$4aEQL)
                                   (g$bless$7548$4aEQL
                                     ((letrec ((g$f$8247$4aEQL
                                                 (case-lambda
                                                   ((g$lhs*$8248$4aEQL
                                                      g$rhs*$8249$4aEQL)
                                                    (if (null?
                                                          g$lhs*$8248$4aEQL)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8245$4aEQL
                                                          g$b*$8246$4aEQL))
                                                      ((case-lambda
                                                         ((g$t$8250$4aEQL)
                                                          ((case-lambda
                                                             ((g$ls/false$8251$4aEQL)
                                                              (if g$ls/false$8251$4aEQL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8252$4aEQL)
                                                                     (begin
                                                                       (g$check$8236$4aEQL
                                                                         g$x*$8252$4aEQL)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8249$4aEQL))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8252$4aEQL
                                                                           (g$f$8247$4aEQL
                                                                             (cdr g$lhs*$8248$4aEQL)
                                                                             (cdr g$rhs*$8249$4aEQL)))))))
                                                                  g$ls/false$8251$4aEQL)
                                                                ((case-lambda
                                                                   ((g$t$8253$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8254$4aEQL)
                                                                        (if g$ls/false$8254$4aEQL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8255$4aEQL
                                                                                 g$x$8256$4aEQL)
                                                                               (begin
                                                                                 (g$check$8236$4aEQL
                                                                                   (cons
                                                                                     g$x$8256$4aEQL
                                                                                     g$x*$8255$4aEQL))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8249$4aEQL))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8255$4aEQL
                                                                                       g$x$8256$4aEQL)
                                                                                     (g$f$8247$4aEQL
                                                                                       (cdr g$lhs*$8248$4aEQL)
                                                                                       (cdr g$rhs*$8249$4aEQL)))))))
                                                                            g$ls/false$8254$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$t$8257$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8258$4aEQL)
                                                                                  (if g$ls/false$8258$4aEQL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8259$4aEQL)
                                                                                         (g$syntax-violation$7696$4aEQL
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8235$4aEQL
                                                                                           g$others$8259$4aEQL)))
                                                                                      g$ls/false$8258$4aEQL)
                                                                                    (g$syntax-violation$7696$4aEQL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8257$4aEQL))))
                                                                               (g$syntax-dispatch$7585$4aEQL
                                                                                 g$t$8257$4aEQL
                                                                                 'any))))
                                                                           g$t$8253$4aEQL))))
                                                                     (g$syntax-dispatch$7585$4aEQL
                                                                       g$t$8253$4aEQL
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8250$4aEQL))))
                                                           (g$syntax-dispatch$7585$4aEQL
                                                             g$t$8250$4aEQL
                                                             'each-any))))
                                                       (car g$lhs*$8248$4aEQL)))))))
                                        g$f$8247$4aEQL)
                                      g$lhs*$8243$4aEQL
                                      g$rhs*$8244$4aEQL))))
                                g$ls/false$8242$4aEQL)
                              (g$syntax-violation$7696$4aEQL
                                '#f
                                '"invalid syntax"
                                g$t$8241$4aEQL))))
                         (g$syntax-dispatch$7585$4aEQL
                           g$t$8241$4aEQL
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8237$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL
                 g$t$8237$4aEQL
                 '(_ () any . each-any)))))
           g$stx$8235$4aEQL)))))
   (g$trace-lambda-macro$7554$4aEQL
     g$trace-lambda-macro$11045$4aEQL
     (case-lambda
       ((g$stx$8262$4aEQL)
        ((case-lambda
           ((g$t$8263$4aEQL)
            ((case-lambda
               ((g$ls/false$8264$4aEQL)
                (if g$ls/false$8264$4aEQL
                  (apply
                    (case-lambda
                      ((g$who$8265$4aEQL
                         g$fmls$8266$4aEQL
                         g$b$8267$4aEQL
                         g$b*$8268$4aEQL)
                       (if (g$valid-bound-ids?$7312$4aEQL g$fmls$8266$4aEQL)
                         (g$bless$7548$4aEQL
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8265$4aEQL)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8266$4aEQL
                                 (cons g$b$8267$4aEQL g$b*$8268$4aEQL)))))
                         (g$invalid-fmls-error$7550$4aEQL
                           g$stx$8262$4aEQL
                           g$fmls$8266$4aEQL))))
                    g$ls/false$8264$4aEQL)
                  ((case-lambda
                     ((g$t$8269$4aEQL)
                      ((case-lambda
                         ((g$ls/false$8270$4aEQL)
                          (if g$ls/false$8270$4aEQL
                            (apply
                              (case-lambda
                                ((g$who$8271$4aEQL
                                   g$fmls$8272$4aEQL
                                   g$last$8273$4aEQL
                                   g$b$8274$4aEQL
                                   g$b*$8275$4aEQL)
                                 (if (g$valid-bound-ids?$7312$4aEQL
                                       (cons
                                         g$last$8273$4aEQL
                                         g$fmls$8272$4aEQL))
                                   (g$bless$7548$4aEQL
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8271$4aEQL)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8272$4aEQL
                                             g$last$8273$4aEQL)
                                           (cons
                                             g$b$8274$4aEQL
                                             g$b*$8275$4aEQL)))))
                                   (g$invalid-fmls-error$7550$4aEQL
                                     g$stx$8262$4aEQL
                                     (append
                                       g$fmls$8272$4aEQL
                                       g$last$8273$4aEQL)))))
                              g$ls/false$8270$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$8269$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$8269$4aEQL
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8263$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8263$4aEQL
               '(_ any each-any any . each-any)))))
         g$stx$8262$4aEQL))))
   (g$trace-define-macro$7555$4aEQL
     g$trace-define-macro$11046$4aEQL
     (case-lambda
       ((g$stx$8276$4aEQL)
        ((case-lambda
           ((g$t$8277$4aEQL)
            ((case-lambda
               ((g$ls/false$8278$4aEQL)
                (if g$ls/false$8278$4aEQL
                  (apply
                    (case-lambda
                      ((g$who$8279$4aEQL
                         g$fmls$8280$4aEQL
                         g$b$8281$4aEQL
                         g$b*$8282$4aEQL)
                       (if (g$valid-bound-ids?$7312$4aEQL g$fmls$8280$4aEQL)
                         (g$bless$7548$4aEQL
                           (list
                             'define
                             g$who$8279$4aEQL
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8279$4aEQL)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8280$4aEQL
                                   (cons g$b$8281$4aEQL g$b*$8282$4aEQL))))))
                         (g$invalid-fmls-error$7550$4aEQL
                           g$stx$8276$4aEQL
                           g$fmls$8280$4aEQL))))
                    g$ls/false$8278$4aEQL)
                  ((case-lambda
                     ((g$t$8283$4aEQL)
                      ((case-lambda
                         ((g$ls/false$8284$4aEQL)
                          (if g$ls/false$8284$4aEQL
                            (apply
                              (case-lambda
                                ((g$who$8285$4aEQL
                                   g$fmls$8286$4aEQL
                                   g$last$8287$4aEQL
                                   g$b$8288$4aEQL
                                   g$b*$8289$4aEQL)
                                 (if (g$valid-bound-ids?$7312$4aEQL
                                       (cons
                                         g$last$8287$4aEQL
                                         g$fmls$8286$4aEQL))
                                   (g$bless$7548$4aEQL
                                     (list
                                       'define
                                       g$who$8285$4aEQL
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8285$4aEQL)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8286$4aEQL
                                               g$last$8287$4aEQL)
                                             (cons
                                               g$b$8288$4aEQL
                                               g$b*$8289$4aEQL))))))
                                   (g$invalid-fmls-error$7550$4aEQL
                                     g$stx$8276$4aEQL
                                     (append
                                       g$fmls$8286$4aEQL
                                       g$last$8287$4aEQL)))))
                              g$ls/false$8284$4aEQL)
                            ((case-lambda
                               ((g$t$8290$4aEQL)
                                ((case-lambda
                                   ((g$ls/false$8291$4aEQL)
                                    (if g$ls/false$8291$4aEQL
                                      (apply
                                        (case-lambda
                                          ((g$who$8292$4aEQL g$expr$8293$4aEQL)
                                           (if (g$id?$7307$4aEQL
                                                 g$who$8292$4aEQL)
                                             (g$bless$7548$4aEQL
                                               (list
                                                 'define
                                                 g$who$8292$4aEQL
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8293$4aEQL))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8292$4aEQL)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7696$4aEQL
                                               '#f
                                               '"invalid name"
                                               g$stx$8276$4aEQL))))
                                        g$ls/false$8291$4aEQL)
                                      (g$syntax-violation$7696$4aEQL
                                        '#f
                                        '"invalid syntax"
                                        g$t$8290$4aEQL))))
                                 (g$syntax-dispatch$7585$4aEQL
                                   g$t$8290$4aEQL
                                   '(_ any any)))))
                             g$t$8283$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$8283$4aEQL
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8277$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8277$4aEQL
               '(_ (any . each-any) any . each-any)))))
         g$stx$8276$4aEQL))))
   (g$trace-define-syntax-macro$7556$4aEQL
     g$trace-define-syntax-macro$11047$4aEQL
     (case-lambda
       ((g$stx$8294$4aEQL)
        ((case-lambda
           ((g$t$8295$4aEQL)
            ((case-lambda
               ((g$ls/false$8296$4aEQL)
                (if g$ls/false$8296$4aEQL
                  (apply
                    (case-lambda
                      ((g$who$8297$4aEQL g$expr$8298$4aEQL)
                       (if (g$id?$7307$4aEQL g$who$8297$4aEQL)
                         (g$bless$7548$4aEQL
                           (list
                             'define-syntax
                             g$who$8297$4aEQL
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8297$4aEQL)
                               g$expr$8298$4aEQL)))
                         (g$syntax-violation$7696$4aEQL
                           '#f
                           '"invalid name"
                           g$stx$8294$4aEQL))))
                    g$ls/false$8296$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8295$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8295$4aEQL '(_ any any)))))
         g$stx$8294$4aEQL))))
   (g$trace-let/rec-syntax$7557$4aEQL
     g$trace-let/rec-syntax$11048$4aEQL
     (case-lambda
       ((g$who$8299$4aEQL)
        (case-lambda
          ((g$stx$8300$4aEQL)
           ((case-lambda
              ((g$t$8301$4aEQL)
               ((case-lambda
                  ((g$ls/false$8302$4aEQL)
                   (if g$ls/false$8302$4aEQL
                     (apply
                       (case-lambda
                         ((g$lhs*$8303$4aEQL
                            g$rhs*$8304$4aEQL
                            g$b$8305$4aEQL
                            g$b*$8306$4aEQL)
                          (if (g$valid-bound-ids?$7312$4aEQL g$lhs*$8303$4aEQL)
                            ((case-lambda
                               ((g$rhs*$8307$4aEQL)
                                (g$bless$7548$4aEQL
                                  (cons
                                    g$who$8299$4aEQL
                                    (cons
                                      (g$map$5048$4aEQL
                                        list
                                        g$lhs*$8303$4aEQL
                                        g$rhs*$8307$4aEQL)
                                      (cons g$b$8305$4aEQL g$b*$8306$4aEQL))))))
                             (g$map$5048$4aEQL
                               (case-lambda
                                 ((g$lhs$8308$4aEQL g$rhs$8309$4aEQL)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$8308$4aEQL)
                                    g$rhs$8309$4aEQL)))
                               g$lhs*$8303$4aEQL
                               g$rhs*$8304$4aEQL))
                            (g$invalid-fmls-error$7550$4aEQL
                              g$stx$8300$4aEQL
                              g$lhs*$8303$4aEQL))))
                       g$ls/false$8302$4aEQL)
                     (g$syntax-violation$7696$4aEQL
                       '#f
                       '"invalid syntax"
                       g$t$8301$4aEQL))))
                (g$syntax-dispatch$7585$4aEQL
                  g$t$8301$4aEQL
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8300$4aEQL))))))
   (g$trace-let-syntax-macro$7558$4aEQL
     g$trace-let-syntax-macro$11049$4aEQL
     (g$trace-let/rec-syntax$7557$4aEQL 'let-syntax))
   (g$trace-letrec-syntax-macro$7559$4aEQL
     g$trace-letrec-syntax-macro$11050$4aEQL
     (g$trace-let/rec-syntax$7557$4aEQL 'letrec-syntax))
   (g$guard-macro$7560$4aEQL
     g$guard-macro$11051$4aEQL
     (case-lambda
       ((g$x$8310$4aEQL)
        (letrec* ((g$gen-clauses$8311$4aEQL
                    (case-lambda
                      ((g$con$8323$4aEQL
                         g$outerk$8324$4aEQL
                         g$clause*$8325$4aEQL)
                       (letrec* ((g$f$8326$4aEQL
                                   (case-lambda
                                     ((g$x$8354$4aEQL g$k$8355$4aEQL)
                                      ((case-lambda
                                         ((g$t$8356$4aEQL)
                                          ((case-lambda
                                             ((g$ls/false$8357$4aEQL)
                                              (if g$ls/false$8357$4aEQL
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8358$4aEQL
                                                       g$p$8359$4aEQL)
                                                     ((case-lambda
                                                        ((g$t$8360$4aEQL)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8360$4aEQL
                                                               g$e$8358$4aEQL))
                                                           (list
                                                             'if
                                                             g$t$8360$4aEQL
                                                             (list
                                                               g$p$8359$4aEQL
                                                               g$t$8360$4aEQL)
                                                             g$k$8355$4aEQL))))
                                                      (gensym))))
                                                  g$ls/false$8357$4aEQL)
                                                ((case-lambda
                                                   ((g$t$8361$4aEQL)
                                                    ((case-lambda
                                                       ((g$ls/false$8362$4aEQL)
                                                        (if g$ls/false$8362$4aEQL
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8363$4aEQL)
                                                               ((case-lambda
                                                                  ((g$t$8364$4aEQL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8364$4aEQL
                                                                         g$e$8363$4aEQL))
                                                                     (list
                                                                       'if
                                                                       g$t$8364$4aEQL
                                                                       g$t$8364$4aEQL
                                                                       g$k$8355$4aEQL))))
                                                                (gensym))))
                                                            g$ls/false$8362$4aEQL)
                                                          ((case-lambda
                                                             ((g$t$8365$4aEQL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8366$4aEQL)
                                                                  (if g$ls/false$8366$4aEQL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8367$4aEQL
                                                                           g$v$8368$4aEQL
                                                                           g$v*$8369$4aEQL)
                                                                         (list
                                                                           'if
                                                                           g$e$8367$4aEQL
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8368$4aEQL
                                                                               g$v*$8369$4aEQL))
                                                                           g$k$8355$4aEQL)))
                                                                      g$ls/false$8366$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$t$8370$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8371$4aEQL)
                                                                            (if g$ls/false$8371$4aEQL
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7696$4aEQL
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8354$4aEQL)))
                                                                                g$ls/false$8371$4aEQL)
                                                                              (g$syntax-violation$7696$4aEQL
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8370$4aEQL))))
                                                                         (g$syntax-dispatch$7585$4aEQL
                                                                           g$t$8370$4aEQL
                                                                           '_))))
                                                                     g$t$8365$4aEQL))))
                                                               (g$syntax-dispatch$7585$4aEQL
                                                                 g$t$8365$4aEQL
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8361$4aEQL))))
                                                     (g$syntax-dispatch$7585$4aEQL
                                                       g$t$8361$4aEQL
                                                       '(any)))))
                                                 g$t$8356$4aEQL))))
                                           (g$syntax-dispatch$7585$4aEQL
                                             g$t$8356$4aEQL
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8354$4aEQL))))
                                 (g$f*$8327$4aEQL
                                   (case-lambda
                                     ((g$x*$8334$4aEQL)
                                      ((case-lambda
                                         ((g$t$8335$4aEQL)
                                          ((case-lambda
                                             ((g$ls/false$8336$4aEQL)
                                              (if g$ls/false$8336$4aEQL
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8323$4aEQL)
                                                       '#t)))
                                                  g$ls/false$8336$4aEQL)
                                                ((case-lambda
                                                   ((g$t$8337$4aEQL)
                                                    ((case-lambda
                                                       ((g$ls/false$8338$4aEQL)
                                                        (if g$ls/false$8338$4aEQL
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8339$4aEQL
                                                                 g$e*$8340$4aEQL)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8339$4aEQL
                                                                     g$e*$8340$4aEQL))
                                                                 '#f)))
                                                            g$ls/false$8338$4aEQL)
                                                          ((case-lambda
                                                             ((g$t$8341$4aEQL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8342$4aEQL)
                                                                  (if g$ls/false$8342$4aEQL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8343$4aEQL
                                                                           g$cls*$8344$4aEQL)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8327$4aEQL
                                                                                g$cls*$8344$4aEQL)))
                                                                           (case-lambda
                                                                             ((g$e$8347$4aEQL
                                                                                g$g$8348$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$g$8349$4aEQL
                                                                                    g$e$8350$4aEQL)
                                                                                  (values
                                                                                    (g$f$8326$4aEQL
                                                                                      g$cls$8343$4aEQL
                                                                                      g$e$8350$4aEQL)
                                                                                    g$g$8349$4aEQL)))
                                                                               g$g$8348$4aEQL
                                                                               g$e$8347$4aEQL))))))
                                                                      g$ls/false$8342$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$t$8351$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8352$4aEQL)
                                                                            (if g$ls/false$8352$4aEQL
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8353$4aEQL)
                                                                                   (g$syntax-violation$7696$4aEQL
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8353$4aEQL)))
                                                                                g$ls/false$8352$4aEQL)
                                                                              (g$syntax-violation$7696$4aEQL
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8351$4aEQL))))
                                                                         (g$syntax-dispatch$7585$4aEQL
                                                                           g$t$8351$4aEQL
                                                                           'any))))
                                                                     g$t$8341$4aEQL))))
                                                               (g$syntax-dispatch$7585$4aEQL
                                                                 g$t$8341$4aEQL
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8337$4aEQL))))
                                                     (g$syntax-dispatch$7585$4aEQL
                                                       g$t$8337$4aEQL
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8335$4aEQL))))
                                           (g$syntax-dispatch$7585$4aEQL
                                             g$t$8335$4aEQL
                                             '()))))
                                       g$x*$8334$4aEQL)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8327$4aEQL g$clause*$8325$4aEQL)))
                           (case-lambda
                             ((g$code$8330$4aEQL g$raisek$8331$4aEQL)
                              ((case-lambda
                                 ((g$raisek$8332$4aEQL g$code$8333$4aEQL)
                                  (if g$raisek$8332$4aEQL
                                    (list g$outerk$8324$4aEQL g$code$8333$4aEQL)
                                    g$code$8333$4aEQL)))
                               g$raisek$8331$4aEQL
                               g$code$8330$4aEQL)))))))))
          ((case-lambda
             ((g$t$8312$4aEQL)
              ((case-lambda
                 ((g$ls/false$8313$4aEQL)
                  (if (if g$ls/false$8313$4aEQL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8314$4aEQL
                                 g$clause*$8315$4aEQL
                                 g$b$8316$4aEQL
                                 g$b*$8317$4aEQL)
                               (g$id?$7307$4aEQL g$con$8314$4aEQL)))
                            g$ls/false$8313$4aEQL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8318$4aEQL
                           g$clause*$8319$4aEQL
                           g$b$8320$4aEQL
                           g$b*$8321$4aEQL)
                         ((case-lambda
                            ((g$outerk$8322$4aEQL)
                             (g$bless$7548$4aEQL
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8322$4aEQL)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8318$4aEQL)
                                           (g$gen-clauses$8311$4aEQL
                                             g$con$8318$4aEQL
                                             g$outerk$8322$4aEQL
                                             g$clause*$8319$4aEQL))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8320$4aEQL
                                                 g$b*$8321$4aEQL))))))))))))
                          (gensym))))
                      g$ls/false$8313$4aEQL)
                    (g$syntax-violation$7696$4aEQL
                      '#f
                      '"invalid syntax"
                      g$t$8312$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL
                 g$t$8312$4aEQL
                 '(_ (any . each-any) any . each-any)))))
           g$x$8310$4aEQL)))))
   (g$define-enumeration-macro$7561$4aEQL
     g$define-enumeration-macro$11052$4aEQL
     (case-lambda
       ((g$stx$8372$4aEQL)
        (letrec* ((g$set?$8373$4aEQL
                    (case-lambda
                      ((g$x$8386$4aEQL)
                       ((case-lambda
                          ((g$t$8387$4aEQL)
                           (if g$t$8387$4aEQL
                             g$t$8387$4aEQL
                             (begin
                               '#f
                               (if (not (g$memq$5040$4aEQL
                                          (car g$x$8386$4aEQL)
                                          (cdr g$x$8386$4aEQL)))
                                 (begin
                                   '#f
                                   (g$set?$8373$4aEQL (cdr g$x$8386$4aEQL)))
                                 '#f)))))
                        (null? g$x$8386$4aEQL)))))
                  (g$remove-dups$8374$4aEQL
                    (case-lambda
                      ((g$ls$8385$4aEQL)
                       (if (null? g$ls$8385$4aEQL)
                         '()
                         (cons
                           (car g$ls$8385$4aEQL)
                           (g$remove-dups$8374$4aEQL
                             (g$remq$5055$4aEQL
                               (car g$ls$8385$4aEQL)
                               (cdr g$ls$8385$4aEQL)))))))))
          ((case-lambda
             ((g$t$8375$4aEQL)
              ((case-lambda
                 ((g$ls/false$8376$4aEQL)
                  (if (if g$ls/false$8376$4aEQL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8377$4aEQL
                                 g$id*$8378$4aEQL
                                 g$maker$8379$4aEQL)
                               (if (g$id?$7307$4aEQL g$name$8377$4aEQL)
                                 (if (g$id?$7307$4aEQL g$maker$8379$4aEQL)
                                   (begin
                                     '#f
                                     (g$for-all$5046$4aEQL
                                       g$id?$7307$4aEQL
                                       g$id*$8378$4aEQL))
                                   '#f)
                                 '#f)))
                            g$ls/false$8376$4aEQL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8380$4aEQL g$id*$8381$4aEQL g$maker$8382$4aEQL)
                         ((case-lambda
                            ((g$name*$8383$4aEQL g$mk$8384$4aEQL)
                             (g$bless$7548$4aEQL
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8384$4aEQL
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8383$4aEQL))))
                                 (list
                                   'define-syntax
                                   g$name$8380$4aEQL
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8383$4aEQL))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8380$4aEQL)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8382$4aEQL
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8382$4aEQL)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8383$4aEQL))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8382$4aEQL)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8384$4aEQL
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8374$4aEQL
                            (g$syntax->datum$7699$4aEQL g$id*$8381$4aEQL))
                          (gensym))))
                      g$ls/false$8376$4aEQL)
                    (g$syntax-violation$7696$4aEQL
                      '#f
                      '"invalid syntax"
                      g$t$8375$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL
                 g$t$8375$4aEQL
                 '(_ any each-any any)))))
           g$stx$8372$4aEQL)))))
   (g$time-macro$7562$4aEQL
     g$time-macro$11053$4aEQL
     (case-lambda
       ((g$stx$8388$4aEQL)
        ((case-lambda
           ((g$t$8389$4aEQL)
            ((case-lambda
               ((g$ls/false$8390$4aEQL)
                (if g$ls/false$8390$4aEQL
                  (apply
                    (case-lambda
                      ((g$expr$8391$4aEQL)
                       ((case-lambda
                          ((g$str$8392$4aEQL)
                           (g$bless$7548$4aEQL
                             (list
                               'time-it
                               g$str$8392$4aEQL
                               (list 'lambda '() g$expr$8391$4aEQL)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6267$4aEQL)))
                          (case-lambda
                            ((g$p$8395$4aEQL g$e$8396$4aEQL)
                             ((case-lambda
                                ((g$e$8397$4aEQL g$p$8398$4aEQL)
                                 (begin
                                   (write
                                     (g$syntax->datum$7699$4aEQL
                                       g$expr$8391$4aEQL)
                                     g$p$8398$4aEQL)
                                   (g$e$8397$4aEQL))))
                              g$e$8396$4aEQL
                              g$p$8395$4aEQL)))))))
                    g$ls/false$8390$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8389$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8389$4aEQL '(_ any)))))
         g$stx$8388$4aEQL))))
   (g$delay-macro$7563$4aEQL
     g$delay-macro$11054$4aEQL
     (case-lambda
       ((g$stx$8399$4aEQL)
        ((case-lambda
           ((g$t$8400$4aEQL)
            ((case-lambda
               ((g$ls/false$8401$4aEQL)
                (if g$ls/false$8401$4aEQL
                  (apply
                    (case-lambda
                      ((g$expr$8402$4aEQL)
                       (g$bless$7548$4aEQL
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8402$4aEQL)))))
                    g$ls/false$8401$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8400$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8400$4aEQL '(_ any)))))
         g$stx$8399$4aEQL))))
   (g$assert-macro$7564$4aEQL
     g$assert-macro$11055$4aEQL
     (case-lambda
       ((g$stx$8403$4aEQL)
        ((case-lambda
           ((g$t$8404$4aEQL)
            ((case-lambda
               ((g$ls/false$8405$4aEQL)
                (if g$ls/false$8405$4aEQL
                  (apply
                    (case-lambda
                      ((g$expr$8406$4aEQL)
                       ((case-lambda
                          ((g$pos$8407$4aEQL)
                           (g$bless$7548$4aEQL
                             (list
                               'unless
                               g$expr$8406$4aEQL
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8406$4aEQL)
                                 (list 'quote g$pos$8407$4aEQL))))))
                        ((case-lambda
                           ((g$t$8408$4aEQL)
                            (if g$t$8408$4aEQL
                              g$t$8408$4aEQL
                              (begin
                                '#f
                                (g$expression-position$7691$4aEQL
                                  g$expr$8406$4aEQL)))))
                         (g$expression-position$7691$4aEQL g$stx$8403$4aEQL)))))
                    g$ls/false$8405$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8404$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8404$4aEQL '(_ any)))))
         g$stx$8403$4aEQL))))
   (g$endianness-macro$7565$4aEQL
     g$endianness-macro$11056$4aEQL
     (case-lambda
       ((g$stx$8409$4aEQL)
        ((case-lambda
           ((g$t$8410$4aEQL)
            ((case-lambda
               ((g$ls/false$8411$4aEQL)
                (if g$ls/false$8411$4aEQL
                  (apply
                    (case-lambda
                      ((g$e$8412$4aEQL)
                       ((case-lambda
                          ((g$t$8413$4aEQL)
                           (if (g$memv$5041$4aEQL g$t$8413$4aEQL '(little))
                             (g$bless$7548$4aEQL ''little)
                             (if (g$memv$5041$4aEQL g$t$8413$4aEQL '(big))
                               (g$bless$7548$4aEQL ''big)
                               (g$syntax-violation$7696$4aEQL
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8409$4aEQL)))))
                        (g$syntax->datum$7699$4aEQL g$e$8412$4aEQL))))
                    g$ls/false$8411$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8410$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8410$4aEQL '(_ any)))))
         g$stx$8409$4aEQL))))
   (g$identifier-syntax-macro$7566$4aEQL
     g$identifier-syntax-macro$11057$4aEQL
     (case-lambda
       ((g$stx$8414$4aEQL)
        ((case-lambda
           ((g$t$8415$4aEQL)
            ((case-lambda
               ((g$ls/false$8416$4aEQL)
                (if g$ls/false$8416$4aEQL
                  (apply
                    (case-lambda
                      ((g$expr$8417$4aEQL)
                       (g$bless$7548$4aEQL
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8417$4aEQL))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8417$4aEQL)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8416$4aEQL)
                  ((case-lambda
                     ((g$t$8418$4aEQL)
                      ((case-lambda
                         ((g$ls/false$8419$4aEQL)
                          (if (if g$ls/false$8419$4aEQL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8420$4aEQL
                                         g$expr1$8421$4aEQL
                                         g$id2$8422$4aEQL
                                         g$expr2$8423$4aEQL
                                         g$expr3$8424$4aEQL)
                                       (if (g$id?$7307$4aEQL g$id1$8420$4aEQL)
                                         (if (g$id?$7307$4aEQL g$id2$8422$4aEQL)
                                           (begin
                                             '#f
                                             (g$id?$7307$4aEQL
                                               g$expr2$8423$4aEQL))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8419$4aEQL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8425$4aEQL
                                   g$expr1$8426$4aEQL
                                   g$id2$8427$4aEQL
                                   g$expr2$8428$4aEQL
                                   g$expr3$8429$4aEQL)
                                 (g$bless$7548$4aEQL
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8426$4aEQL))
                                         (list
                                           (list 'set! 'id g$expr2$8428$4aEQL)
                                           (list 'syntax g$expr3$8429$4aEQL))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8426$4aEQL
                                               '(e* ...))))))))))
                              g$ls/false$8419$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$8418$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$8418$4aEQL
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8415$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8415$4aEQL '(_ any)))))
         g$stx$8414$4aEQL))))
   (g$do-macro$7567$4aEQL
     g$do-macro$11058$4aEQL
     (case-lambda
       ((g$stx$8430$4aEQL)
        (letrec* ((g$bind$8431$4aEQL
                    (case-lambda
                      ((g$x$8443$4aEQL)
                       ((case-lambda
                          ((g$t$8444$4aEQL)
                           ((case-lambda
                              ((g$ls/false$8445$4aEQL)
                               (if g$ls/false$8445$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$x$8446$4aEQL g$init$8447$4aEQL)
                                      (list
                                        g$x$8446$4aEQL
                                        g$init$8447$4aEQL
                                        g$x$8446$4aEQL)))
                                   g$ls/false$8445$4aEQL)
                                 ((case-lambda
                                    ((g$t$8448$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$8449$4aEQL)
                                         (if g$ls/false$8449$4aEQL
                                           (apply
                                             (case-lambda
                                               ((g$x$8450$4aEQL
                                                  g$init$8451$4aEQL
                                                  g$step$8452$4aEQL)
                                                (list
                                                  g$x$8450$4aEQL
                                                  g$init$8451$4aEQL
                                                  g$step$8452$4aEQL)))
                                             g$ls/false$8449$4aEQL)
                                           ((case-lambda
                                              ((g$t$8453$4aEQL)
                                               ((case-lambda
                                                  ((g$ls/false$8454$4aEQL)
                                                   (if g$ls/false$8454$4aEQL
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7696$4aEQL
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8430$4aEQL)))
                                                       g$ls/false$8454$4aEQL)
                                                     (g$syntax-violation$7696$4aEQL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8453$4aEQL))))
                                                (g$syntax-dispatch$7585$4aEQL
                                                  g$t$8453$4aEQL
                                                  '_))))
                                            g$t$8448$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$8448$4aEQL
                                        '(any any any)))))
                                  g$t$8444$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$8444$4aEQL
                              '(any any)))))
                        g$x$8443$4aEQL)))))
          ((case-lambda
             ((g$t$8432$4aEQL)
              ((case-lambda
                 ((g$ls/false$8433$4aEQL)
                  (if g$ls/false$8433$4aEQL
                    (apply
                      (case-lambda
                        ((g$binding*$8434$4aEQL
                           g$test$8435$4aEQL
                           g$expr*$8436$4aEQL
                           g$command*$8437$4aEQL)
                         ((case-lambda
                            ((g$t$8438$4aEQL)
                             ((case-lambda
                                ((g$ls/false$8439$4aEQL)
                                 (if g$ls/false$8439$4aEQL
                                   (apply
                                     (case-lambda
                                       ((g$x*$8440$4aEQL
                                          g$init*$8441$4aEQL
                                          g$step*$8442$4aEQL)
                                        (if (g$valid-bound-ids?$7312$4aEQL
                                              g$x*$8440$4aEQL)
                                          (g$bless$7548$4aEQL
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8440$4aEQL
                                                    (list
                                                      'if
                                                      g$test$8435$4aEQL
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8436$4aEQL))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8437$4aEQL
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8442$4aEQL))))))))
                                              (cons 'loop g$init*$8441$4aEQL)))
                                          (g$syntax-violation$7696$4aEQL
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8430$4aEQL))))
                                     g$ls/false$8439$4aEQL)
                                   (g$syntax-violation$7696$4aEQL
                                     '#f
                                     '"invalid syntax"
                                     g$t$8438$4aEQL))))
                              (g$syntax-dispatch$7585$4aEQL
                                g$t$8438$4aEQL
                                '#(each (any any any))))))
                          (g$map$5048$4aEQL
                            g$bind$8431$4aEQL
                            g$binding*$8434$4aEQL))))
                      g$ls/false$8433$4aEQL)
                    (g$syntax-violation$7696$4aEQL
                      '#f
                      '"invalid syntax"
                      g$t$8432$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL
                 g$t$8432$4aEQL
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8430$4aEQL)))))
   (g$let*-macro$7568$4aEQL
     g$let*-macro$11059$4aEQL
     (case-lambda
       ((g$stx$8455$4aEQL)
        ((case-lambda
           ((g$t$8456$4aEQL)
            ((case-lambda
               ((g$ls/false$8457$4aEQL)
                (if (if g$ls/false$8457$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8458$4aEQL
                               g$rhs*$8459$4aEQL
                               g$b$8460$4aEQL
                               g$b*$8461$4aEQL)
                             (g$for-all$5046$4aEQL
                               g$id?$7307$4aEQL
                               g$lhs*$8458$4aEQL)))
                          g$ls/false$8457$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8462$4aEQL
                         g$rhs*$8463$4aEQL
                         g$b$8464$4aEQL
                         g$b*$8465$4aEQL)
                       (g$bless$7548$4aEQL
                         ((letrec ((g$f$8466$4aEQL
                                     (case-lambda
                                       ((g$x*$8467$4aEQL)
                                        (if (null? g$x*$8467$4aEQL)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8464$4aEQL
                                                g$b*$8465$4aEQL)))
                                          (list
                                            'let
                                            (list (car g$x*$8467$4aEQL))
                                            (g$f$8466$4aEQL
                                              (cdr g$x*$8467$4aEQL))))))))
                            g$f$8466$4aEQL)
                          (g$map$5048$4aEQL
                            list
                            g$lhs*$8462$4aEQL
                            g$rhs*$8463$4aEQL)))))
                    g$ls/false$8457$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8456$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8456$4aEQL
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8455$4aEQL))))
   (g$or-macro$7569$4aEQL
     g$or-macro$11060$4aEQL
     (case-lambda
       ((g$stx$8468$4aEQL)
        ((case-lambda
           ((g$t$8469$4aEQL)
            ((case-lambda
               ((g$ls/false$8470$4aEQL)
                (if g$ls/false$8470$4aEQL
                  (apply (case-lambda (() '#f)) g$ls/false$8470$4aEQL)
                  ((case-lambda
                     ((g$t$8471$4aEQL)
                      ((case-lambda
                         ((g$ls/false$8472$4aEQL)
                          (if g$ls/false$8472$4aEQL
                            (apply
                              (case-lambda
                                ((g$e$8473$4aEQL g$e*$8474$4aEQL)
                                 (g$bless$7548$4aEQL
                                   ((letrec ((g$f$8475$4aEQL
                                               (case-lambda
                                                 ((g$e$8476$4aEQL
                                                    g$e*$8477$4aEQL)
                                                  (if (null? g$e*$8477$4aEQL)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8476$4aEQL)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8476$4aEQL))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8475$4aEQL
                                                          (car g$e*$8477$4aEQL)
                                                          (cdr g$e*$8477$4aEQL)))))))))
                                      g$f$8475$4aEQL)
                                    g$e$8473$4aEQL
                                    g$e*$8474$4aEQL))))
                              g$ls/false$8472$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$8471$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$8471$4aEQL
                         '(_ any . each-any)))))
                   g$t$8469$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8469$4aEQL '(_)))))
         g$stx$8468$4aEQL))))
   (g$and-macro$7570$4aEQL
     g$and-macro$11061$4aEQL
     (case-lambda
       ((g$stx$8478$4aEQL)
        ((case-lambda
           ((g$t$8479$4aEQL)
            ((case-lambda
               ((g$ls/false$8480$4aEQL)
                (if g$ls/false$8480$4aEQL
                  (apply (case-lambda (() '#t)) g$ls/false$8480$4aEQL)
                  ((case-lambda
                     ((g$t$8481$4aEQL)
                      ((case-lambda
                         ((g$ls/false$8482$4aEQL)
                          (if g$ls/false$8482$4aEQL
                            (apply
                              (case-lambda
                                ((g$e$8483$4aEQL g$e*$8484$4aEQL)
                                 (g$bless$7548$4aEQL
                                   ((letrec ((g$f$8485$4aEQL
                                               (case-lambda
                                                 ((g$e$8486$4aEQL
                                                    g$e*$8487$4aEQL)
                                                  (if (null? g$e*$8487$4aEQL)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8486$4aEQL)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8486$4aEQL
                                                        (cons
                                                          (g$f$8485$4aEQL
                                                            (car g$e*$8487$4aEQL)
                                                            (cdr g$e*$8487$4aEQL))
                                                          '(#f)))))))))
                                      g$f$8485$4aEQL)
                                    g$e$8483$4aEQL
                                    g$e*$8484$4aEQL))))
                              g$ls/false$8482$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$8481$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$8481$4aEQL
                         '(_ any . each-any)))))
                   g$t$8479$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8479$4aEQL '(_)))))
         g$stx$8478$4aEQL))))
   (g$cond-macro$7571$4aEQL
     g$cond-macro$11062$4aEQL
     (case-lambda
       ((g$stx$8488$4aEQL)
        ((case-lambda
           ((g$t$8489$4aEQL)
            ((case-lambda
               ((g$ls/false$8490$4aEQL)
                (if g$ls/false$8490$4aEQL
                  (apply
                    (case-lambda
                      ((g$cls$8491$4aEQL g$cls*$8492$4aEQL)
                       (g$bless$7548$4aEQL
                         ((letrec ((g$f$8493$4aEQL
                                     (case-lambda
                                       ((g$cls$8494$4aEQL g$cls*$8495$4aEQL)
                                        (if (null? g$cls*$8495$4aEQL)
                                          ((case-lambda
                                             ((g$t$8496$4aEQL)
                                              ((case-lambda
                                                 ((g$ls/false$8497$4aEQL)
                                                  (if g$ls/false$8497$4aEQL
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8498$4aEQL
                                                           g$e*$8499$4aEQL)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8498$4aEQL
                                                             g$e*$8499$4aEQL))))
                                                      g$ls/false$8497$4aEQL)
                                                    ((case-lambda
                                                       ((g$t$8500$4aEQL)
                                                        ((case-lambda
                                                           ((g$ls/false$8501$4aEQL)
                                                            (if g$ls/false$8501$4aEQL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8502$4aEQL
                                                                     g$p$8503$4aEQL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8502$4aEQL))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8503$4aEQL
                                                                         '(t))))))
                                                                g$ls/false$8501$4aEQL)
                                                              ((case-lambda
                                                                 ((g$t$8504$4aEQL)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8505$4aEQL)
                                                                      (if g$ls/false$8505$4aEQL
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8506$4aEQL)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8506$4aEQL
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8505$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$t$8507$4aEQL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8508$4aEQL)
                                                                                (if g$ls/false$8508$4aEQL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8509$4aEQL
                                                                                         g$e*$8510$4aEQL)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8509$4aEQL
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8510$4aEQL))))
                                                                                    g$ls/false$8508$4aEQL)
                                                                                  ((case-lambda
                                                                                     ((g$t$8511$4aEQL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8512$4aEQL)
                                                                                          (if g$ls/false$8512$4aEQL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7696$4aEQL
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8488$4aEQL)))
                                                                                              g$ls/false$8512$4aEQL)
                                                                                            (g$syntax-violation$7696$4aEQL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8511$4aEQL))))
                                                                                       (g$syntax-dispatch$7585$4aEQL
                                                                                         g$t$8511$4aEQL
                                                                                         '_))))
                                                                                   g$t$8507$4aEQL))))
                                                                             (g$syntax-dispatch$7585$4aEQL
                                                                               g$t$8507$4aEQL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8504$4aEQL))))
                                                                   (g$syntax-dispatch$7585$4aEQL
                                                                     g$t$8504$4aEQL
                                                                     '(any)))))
                                                               g$t$8500$4aEQL))))
                                                         (g$syntax-dispatch$7585$4aEQL
                                                           g$t$8500$4aEQL
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8496$4aEQL))))
                                               (g$syntax-dispatch$7585$4aEQL
                                                 g$t$8496$4aEQL
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8494$4aEQL)
                                          ((case-lambda
                                             ((g$t$8513$4aEQL)
                                              ((case-lambda
                                                 ((g$ls/false$8514$4aEQL)
                                                  (if g$ls/false$8514$4aEQL
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8515$4aEQL
                                                           g$e*$8516$4aEQL)
                                                         (g$syntax-violation$7696$4aEQL
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8488$4aEQL)))
                                                      g$ls/false$8514$4aEQL)
                                                    ((case-lambda
                                                       ((g$t$8517$4aEQL)
                                                        ((case-lambda
                                                           ((g$ls/false$8518$4aEQL)
                                                            (if g$ls/false$8518$4aEQL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8519$4aEQL
                                                                     g$p$8520$4aEQL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8519$4aEQL))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8520$4aEQL
                                                                         '(t))
                                                                       (g$f$8493$4aEQL
                                                                         (car g$cls*$8495$4aEQL)
                                                                         (cdr g$cls*$8495$4aEQL))))))
                                                                g$ls/false$8518$4aEQL)
                                                              ((case-lambda
                                                                 ((g$t$8521$4aEQL)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8522$4aEQL)
                                                                      (if g$ls/false$8522$4aEQL
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8523$4aEQL)
                                                                             (list
                                                                               'or
                                                                               g$e$8523$4aEQL
                                                                               (g$f$8493$4aEQL
                                                                                 (car g$cls*$8495$4aEQL)
                                                                                 (cdr g$cls*$8495$4aEQL)))))
                                                                          g$ls/false$8522$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$t$8524$4aEQL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8525$4aEQL)
                                                                                (if g$ls/false$8525$4aEQL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8526$4aEQL
                                                                                         g$e*$8527$4aEQL)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8526$4aEQL
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8527$4aEQL)
                                                                                         (g$f$8493$4aEQL
                                                                                           (car g$cls*$8495$4aEQL)
                                                                                           (cdr g$cls*$8495$4aEQL)))))
                                                                                    g$ls/false$8525$4aEQL)
                                                                                  ((case-lambda
                                                                                     ((g$t$8528$4aEQL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8529$4aEQL)
                                                                                          (if g$ls/false$8529$4aEQL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7696$4aEQL
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8488$4aEQL)))
                                                                                              g$ls/false$8529$4aEQL)
                                                                                            (g$syntax-violation$7696$4aEQL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8528$4aEQL))))
                                                                                       (g$syntax-dispatch$7585$4aEQL
                                                                                         g$t$8528$4aEQL
                                                                                         '_))))
                                                                                   g$t$8524$4aEQL))))
                                                                             (g$syntax-dispatch$7585$4aEQL
                                                                               g$t$8524$4aEQL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8521$4aEQL))))
                                                                   (g$syntax-dispatch$7585$4aEQL
                                                                     g$t$8521$4aEQL
                                                                     '(any)))))
                                                               g$t$8517$4aEQL))))
                                                         (g$syntax-dispatch$7585$4aEQL
                                                           g$t$8517$4aEQL
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8513$4aEQL))))
                                               (g$syntax-dispatch$7585$4aEQL
                                                 g$t$8513$4aEQL
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8494$4aEQL))))))
                            g$f$8493$4aEQL)
                          g$cls$8491$4aEQL
                          g$cls*$8492$4aEQL))))
                    g$ls/false$8490$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8489$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8489$4aEQL
               '(_ any . each-any)))))
         g$stx$8488$4aEQL))))
   (g$do-include$7572$4aEQL
     g$do-include$11063$4aEQL
     (case-lambda
       ((g$stx$8530$4aEQL g$id$8531$4aEQL g$filename$8532$4aEQL)
        ((case-lambda
           ((g$filename$8533$4aEQL)
            (begin
              (if (not (if (string? g$filename$8533$4aEQL)
                         (begin '#f (g$id?$7307$4aEQL g$id$8531$4aEQL))
                         '#f))
                (g$syntax-violation$7696$4aEQL
                  '#f
                  '"invalid syntax"
                  g$stx$8530$4aEQL)
                (void))
              (cons
                (g$bless$7548$4aEQL 'begin)
                (g$with-input-from-file$6302$4aEQL
                  g$filename$8533$4aEQL
                  (case-lambda
                    (()
                     ((letrec ((g$f$8534$4aEQL
                                 (case-lambda
                                   ((g$ls$8535$4aEQL)
                                    ((case-lambda
                                       ((g$x$8536$4aEQL)
                                        (if (eof-object? g$x$8536$4aEQL)
                                          (reverse g$ls$8535$4aEQL)
                                          (g$f$8534$4aEQL
                                            (cons
                                              (g$datum->stx$7290$4aEQL
                                                g$id$8531$4aEQL
                                                g$x$8536$4aEQL)
                                              g$ls$8535$4aEQL)))))
                                     (read-annotated))))))
                        g$f$8534$4aEQL)
                      '()))))))))
         (g$stx->datum$7318$4aEQL g$filename$8532$4aEQL)))))
   (g$include-macro$7573$4aEQL
     g$include-macro$11064$4aEQL
     (case-lambda
       ((g$e$8537$4aEQL)
        ((case-lambda
           ((g$t$8538$4aEQL)
            ((case-lambda
               ((g$ls/false$8539$4aEQL)
                (if g$ls/false$8539$4aEQL
                  (apply
                    (case-lambda
                      ((g$id$8540$4aEQL g$filename$8541$4aEQL)
                       (g$do-include$7572$4aEQL
                         g$e$8537$4aEQL
                         g$id$8540$4aEQL
                         g$filename$8541$4aEQL)))
                    g$ls/false$8539$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8538$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8538$4aEQL '(any any)))))
         g$e$8537$4aEQL))))
   (g$include-into-macro$7574$4aEQL
     g$include-into-macro$11065$4aEQL
     (case-lambda
       ((g$e$8542$4aEQL)
        ((case-lambda
           ((g$t$8543$4aEQL)
            ((case-lambda
               ((g$ls/false$8544$4aEQL)
                (if g$ls/false$8544$4aEQL
                  (apply
                    (case-lambda
                      ((g$id$8545$4aEQL g$filename$8546$4aEQL)
                       (g$do-include$7572$4aEQL
                         g$e$8542$4aEQL
                         g$id$8545$4aEQL
                         g$filename$8546$4aEQL)))
                    g$ls/false$8544$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8543$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$8543$4aEQL '(_ any any)))))
         g$e$8542$4aEQL))))
   (g$syntax-rules-macro$7575$4aEQL
     g$syntax-rules-macro$11066$4aEQL
     (case-lambda
       ((g$e$8547$4aEQL)
        ((case-lambda
           ((g$t$8548$4aEQL)
            ((case-lambda
               ((g$ls/false$8549$4aEQL)
                (if g$ls/false$8549$4aEQL
                  (apply
                    (case-lambda
                      ((g$lits$8550$4aEQL g$pat*$8551$4aEQL g$tmp*$8552$4aEQL)
                       (begin
                         (g$verify-literals$7588$4aEQL
                           g$lits$8550$4aEQL
                           g$e$8547$4aEQL)
                         (g$bless$7548$4aEQL
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8550$4aEQL
                                   (g$map$5048$4aEQL
                                     (case-lambda
                                       ((g$pat$8553$4aEQL g$tmp$8554$4aEQL)
                                        ((case-lambda
                                           ((g$t$8555$4aEQL)
                                            ((case-lambda
                                               ((g$ls/false$8556$4aEQL)
                                                (if g$ls/false$8556$4aEQL
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$8557$4aEQL)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$8557$4aEQL)
                                                         (list
                                                           'syntax
                                                           g$tmp$8554$4aEQL))))
                                                    g$ls/false$8556$4aEQL)
                                                  ((case-lambda
                                                     ((g$t$8558$4aEQL)
                                                      ((case-lambda
                                                         ((g$ls/false$8559$4aEQL)
                                                          (if g$ls/false$8559$4aEQL
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$7696$4aEQL
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$8547$4aEQL
                                                                   g$pat$8553$4aEQL)))
                                                              g$ls/false$8559$4aEQL)
                                                            (g$syntax-violation$7696$4aEQL
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$8558$4aEQL))))
                                                       (g$syntax-dispatch$7585$4aEQL
                                                         g$t$8558$4aEQL
                                                         '_))))
                                                   g$t$8555$4aEQL))))
                                             (g$syntax-dispatch$7585$4aEQL
                                               g$t$8555$4aEQL
                                               '(_ . any)))))
                                         g$pat$8553$4aEQL)))
                                     g$pat*$8551$4aEQL
                                     g$tmp*$8552$4aEQL)))))))))
                    g$ls/false$8549$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$8548$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$8548$4aEQL
               '(_ each-any . #(each (any any)))))))
         g$e$8547$4aEQL))))
   (g$quasiquote-macro$7576$4aEQL
     g$quasiquote-macro$11067$4aEQL
     ((case-lambda
        (()
         (letrec* ((g$datum$8560$4aEQL
                     (case-lambda
                       ((g$x$8691$4aEQL)
                        (list
                          (g$scheme-stx$7528$4aEQL 'quote)
                          (g$mkstx$7295$4aEQL g$x$8691$4aEQL '() '() '())))))
                   (g$quasicons*$8576$4aEQL
                     (case-lambda
                       ((g$x$8687$4aEQL g$y$8688$4aEQL)
                        ((letrec ((g$f$8689$4aEQL
                                    (case-lambda
                                      ((g$x$8690$4aEQL)
                                       (if (null? g$x$8690$4aEQL)
                                         g$y$8688$4aEQL
                                         (g$quasicons$8577$4aEQL
                                           (car g$x$8690$4aEQL)
                                           (g$f$8689$4aEQL
                                             (cdr g$x$8690$4aEQL))))))))
                           g$f$8689$4aEQL)
                         g$x$8687$4aEQL))))
                   (g$quasicons$8577$4aEQL
                     (case-lambda
                       ((g$x$8668$4aEQL g$y$8669$4aEQL)
                        ((case-lambda
                           ((g$t$8670$4aEQL)
                            ((case-lambda
                               ((g$ls/false$8671$4aEQL)
                                (if g$ls/false$8671$4aEQL
                                  (apply
                                    (case-lambda
                                      ((g$dy$8672$4aEQL)
                                       ((case-lambda
                                          ((g$t$8673$4aEQL)
                                           ((case-lambda
                                              ((g$ls/false$8674$4aEQL)
                                               (if g$ls/false$8674$4aEQL
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8675$4aEQL)
                                                      (list
                                                        (g$scheme-stx$7528$4aEQL
                                                          'quote)
                                                        (cons
                                                          g$dx$8675$4aEQL
                                                          g$dy$8672$4aEQL))))
                                                   g$ls/false$8674$4aEQL)
                                                 ((case-lambda
                                                    ((g$t$8676$4aEQL)
                                                     ((case-lambda
                                                        ((g$ls/false$8677$4aEQL)
                                                         (if g$ls/false$8677$4aEQL
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8678$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8679$4aEQL)
                                                                        (if g$ls/false$8679$4aEQL
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7528$4aEQL
                                                                                   'list)
                                                                                 g$x$8668$4aEQL)))
                                                                            g$ls/false$8679$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$t$8680$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8681$4aEQL)
                                                                                  (if g$ls/false$8681$4aEQL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7528$4aEQL
                                                                                             'cons)
                                                                                           g$x$8668$4aEQL
                                                                                           g$y$8669$4aEQL)))
                                                                                      g$ls/false$8681$4aEQL)
                                                                                    (g$syntax-violation$7696$4aEQL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8680$4aEQL))))
                                                                               (g$syntax-dispatch$7585$4aEQL
                                                                                 g$t$8680$4aEQL
                                                                                 '_))))
                                                                           g$t$8678$4aEQL))))
                                                                     (g$syntax-dispatch$7585$4aEQL
                                                                       g$t$8678$4aEQL
                                                                       '()))))
                                                                 g$dy$8672$4aEQL)))
                                                             g$ls/false$8677$4aEQL)
                                                           (g$syntax-violation$7696$4aEQL
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8676$4aEQL))))
                                                      (g$syntax-dispatch$7585$4aEQL
                                                        g$t$8676$4aEQL
                                                        '_))))
                                                  g$t$8673$4aEQL))))
                                            (g$syntax-dispatch$7585$4aEQL
                                              g$t$8673$4aEQL
                                              '(#(scheme-id quote) any)))))
                                        g$x$8668$4aEQL)))
                                    g$ls/false$8671$4aEQL)
                                  ((case-lambda
                                     ((g$t$8682$4aEQL)
                                      ((case-lambda
                                         ((g$ls/false$8683$4aEQL)
                                          (if g$ls/false$8683$4aEQL
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8684$4aEQL)
                                                 (g$cons*$5050$4aEQL
                                                   (g$scheme-stx$7528$4aEQL
                                                     'list)
                                                   g$x$8668$4aEQL
                                                   g$stuff$8684$4aEQL)))
                                              g$ls/false$8683$4aEQL)
                                            ((case-lambda
                                               ((g$t$8685$4aEQL)
                                                ((case-lambda
                                                   ((g$ls/false$8686$4aEQL)
                                                    (if g$ls/false$8686$4aEQL
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7528$4aEQL
                                                               'cons)
                                                             g$x$8668$4aEQL
                                                             g$y$8669$4aEQL)))
                                                        g$ls/false$8686$4aEQL)
                                                      (g$syntax-violation$7696$4aEQL
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8685$4aEQL))))
                                                 (g$syntax-dispatch$7585$4aEQL
                                                   g$t$8685$4aEQL
                                                   '_))))
                                             g$t$8682$4aEQL))))
                                       (g$syntax-dispatch$7585$4aEQL
                                         g$t$8682$4aEQL
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8670$4aEQL))))
                             (g$syntax-dispatch$7585$4aEQL
                               g$t$8670$4aEQL
                               '(#(scheme-id quote) any)))))
                         g$y$8669$4aEQL))))
                   (g$quasiappend$8578$4aEQL
                     (case-lambda
                       ((g$x$8655$4aEQL g$y$8656$4aEQL)
                        ((case-lambda
                           ((g$ls$8657$4aEQL)
                            (if (null? g$ls$8657$4aEQL)
                              (list (g$scheme-stx$7528$4aEQL 'quote) '())
                              (if (null? (cdr g$ls$8657$4aEQL))
                                (car g$ls$8657$4aEQL)
                                (g$cons*$5050$4aEQL
                                  (g$scheme-stx$7528$4aEQL 'append)
                                  g$ls$8657$4aEQL)))))
                         ((letrec ((g$f$8658$4aEQL
                                     (case-lambda
                                       ((g$x$8659$4aEQL)
                                        (if (null? g$x$8659$4aEQL)
                                          ((case-lambda
                                             ((g$t$8660$4aEQL)
                                              ((case-lambda
                                                 ((g$ls/false$8661$4aEQL)
                                                  (if g$ls/false$8661$4aEQL
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8661$4aEQL)
                                                    ((case-lambda
                                                       ((g$t$8662$4aEQL)
                                                        ((case-lambda
                                                           ((g$ls/false$8663$4aEQL)
                                                            (if g$ls/false$8663$4aEQL
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8656$4aEQL)))
                                                                g$ls/false$8663$4aEQL)
                                                              (g$syntax-violation$7696$4aEQL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8662$4aEQL))))
                                                         (g$syntax-dispatch$7585$4aEQL
                                                           g$t$8662$4aEQL
                                                           '_))))
                                                     g$t$8660$4aEQL))))
                                               (g$syntax-dispatch$7585$4aEQL
                                                 g$t$8660$4aEQL
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8656$4aEQL)
                                          ((case-lambda
                                             ((g$t$8664$4aEQL)
                                              ((case-lambda
                                                 ((g$ls/false$8665$4aEQL)
                                                  (if g$ls/false$8665$4aEQL
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8658$4aEQL
                                                           (cdr g$x$8659$4aEQL))))
                                                      g$ls/false$8665$4aEQL)
                                                    ((case-lambda
                                                       ((g$t$8666$4aEQL)
                                                        ((case-lambda
                                                           ((g$ls/false$8667$4aEQL)
                                                            (if g$ls/false$8667$4aEQL
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8659$4aEQL)
                                                                     (g$f$8658$4aEQL
                                                                       (cdr g$x$8659$4aEQL)))))
                                                                g$ls/false$8667$4aEQL)
                                                              (g$syntax-violation$7696$4aEQL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8666$4aEQL))))
                                                         (g$syntax-dispatch$7585$4aEQL
                                                           g$t$8666$4aEQL
                                                           '_))))
                                                     g$t$8664$4aEQL))))
                                               (g$syntax-dispatch$7585$4aEQL
                                                 g$t$8664$4aEQL
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8659$4aEQL)))))))
                            g$f$8658$4aEQL)
                          g$x$8655$4aEQL)))))
                   (g$quasivector$8579$4aEQL
                     (case-lambda
                       ((g$x$8630$4aEQL)
                        ((case-lambda
                           ((g$pat-x$8631$4aEQL)
                            ((case-lambda
                               ((g$t$8632$4aEQL)
                                ((case-lambda
                                   ((g$ls/false$8633$4aEQL)
                                    (if g$ls/false$8633$4aEQL
                                      (apply
                                        (case-lambda
                                          ((g$x*$8634$4aEQL)
                                           (list
                                             (g$scheme-stx$7528$4aEQL 'quote)
                                             (list->vector g$x*$8634$4aEQL))))
                                        g$ls/false$8633$4aEQL)
                                      ((case-lambda
                                         ((g$t$8635$4aEQL)
                                          ((case-lambda
                                             ((g$ls/false$8636$4aEQL)
                                              (if g$ls/false$8636$4aEQL
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8637$4aEQL
                                                                 (case-lambda
                                                                   ((g$x$8638$4aEQL
                                                                      g$k$8639$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$t$8640$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8641$4aEQL)
                                                                            (if g$ls/false$8641$4aEQL
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8642$4aEQL)
                                                                                   (g$k$8639$4aEQL
                                                                                     (g$map$5048$4aEQL
                                                                                       (case-lambda
                                                                                         ((g$x$8643$4aEQL)
                                                                                          (list
                                                                                            (g$scheme-stx$7528$4aEQL
                                                                                              'quote)
                                                                                            g$x$8643$4aEQL)))
                                                                                       g$x*$8642$4aEQL))))
                                                                                g$ls/false$8641$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$t$8644$4aEQL)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8645$4aEQL)
                                                                                      (if g$ls/false$8645$4aEQL
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8646$4aEQL)
                                                                                             (g$k$8639$4aEQL
                                                                                               g$x*$8646$4aEQL)))
                                                                                          g$ls/false$8645$4aEQL)
                                                                                        ((case-lambda
                                                                                           ((g$t$8647$4aEQL)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8648$4aEQL)
                                                                                                (if g$ls/false$8648$4aEQL
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8649$4aEQL
                                                                                                         g$y$8650$4aEQL)
                                                                                                       (g$f$8637$4aEQL
                                                                                                         g$y$8650$4aEQL
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8651$4aEQL)
                                                                                                            (g$k$8639$4aEQL
                                                                                                              (cons
                                                                                                                g$x$8649$4aEQL
                                                                                                                g$ls$8651$4aEQL)))))))
                                                                                                    g$ls/false$8648$4aEQL)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8652$4aEQL)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8653$4aEQL)
                                                                                                          (if g$ls/false$8653$4aEQL
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7528$4aEQL
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8631$4aEQL)))
                                                                                                              g$ls/false$8653$4aEQL)
                                                                                                            (g$syntax-violation$7696$4aEQL
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8652$4aEQL))))
                                                                                                       (g$syntax-dispatch$7585$4aEQL
                                                                                                         g$t$8652$4aEQL
                                                                                                         '_))))
                                                                                                   g$t$8647$4aEQL))))
                                                                                             (g$syntax-dispatch$7585$4aEQL
                                                                                               g$t$8647$4aEQL
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8644$4aEQL))))
                                                                                   (g$syntax-dispatch$7585$4aEQL
                                                                                     g$t$8644$4aEQL
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8640$4aEQL))))
                                                                         (g$syntax-dispatch$7585$4aEQL
                                                                           g$t$8640$4aEQL
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8638$4aEQL)))))
                                                        g$f$8637$4aEQL)
                                                      g$x$8630$4aEQL
                                                      (case-lambda
                                                        ((g$ls$8654$4aEQL)
                                                         (g$cons*$5050$4aEQL
                                                           (g$scheme-stx$7528$4aEQL
                                                             'vector)
                                                           g$ls$8654$4aEQL))))))
                                                  g$ls/false$8636$4aEQL)
                                                (g$syntax-violation$7696$4aEQL
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8635$4aEQL))))
                                           (g$syntax-dispatch$7585$4aEQL
                                             g$t$8635$4aEQL
                                             '_))))
                                       g$t$8632$4aEQL))))
                                 (g$syntax-dispatch$7585$4aEQL
                                   g$t$8632$4aEQL
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8631$4aEQL)))
                         g$x$8630$4aEQL))))
                   (g$vquasi$8580$4aEQL
                     (case-lambda
                       ((g$p$8613$4aEQL g$lev$8614$4aEQL)
                        ((case-lambda
                           ((g$t$8615$4aEQL)
                            ((case-lambda
                               ((g$ls/false$8616$4aEQL)
                                (if g$ls/false$8616$4aEQL
                                  (apply
                                    (case-lambda
                                      ((g$p$8617$4aEQL g$q$8618$4aEQL)
                                       ((case-lambda
                                          ((g$t$8619$4aEQL)
                                           ((case-lambda
                                              ((g$ls/false$8620$4aEQL)
                                               (if g$ls/false$8620$4aEQL
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8621$4aEQL)
                                                      (if (= g$lev$8614$4aEQL
                                                             '0)
                                                        (g$quasicons*$8576$4aEQL
                                                          g$p$8621$4aEQL
                                                          (g$vquasi$8580$4aEQL
                                                            g$q$8618$4aEQL
                                                            g$lev$8614$4aEQL))
                                                        (g$quasicons$8577$4aEQL
                                                          (g$quasicons$8577$4aEQL
                                                            (g$datum$8560$4aEQL
                                                              'unquote)
                                                            (g$quasi$8581$4aEQL
                                                              g$p$8621$4aEQL
                                                              (- g$lev$8614$4aEQL
                                                                 '1)))
                                                          (g$vquasi$8580$4aEQL
                                                            g$q$8618$4aEQL
                                                            g$lev$8614$4aEQL)))))
                                                   g$ls/false$8620$4aEQL)
                                                 ((case-lambda
                                                    ((g$t$8622$4aEQL)
                                                     ((case-lambda
                                                        ((g$ls/false$8623$4aEQL)
                                                         (if g$ls/false$8623$4aEQL
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8624$4aEQL)
                                                                (if (= g$lev$8614$4aEQL
                                                                       '0)
                                                                  (g$quasiappend$8578$4aEQL
                                                                    g$p$8624$4aEQL
                                                                    (g$vquasi$8580$4aEQL
                                                                      g$q$8618$4aEQL
                                                                      g$lev$8614$4aEQL))
                                                                  (g$quasicons$8577$4aEQL
                                                                    (g$quasicons$8577$4aEQL
                                                                      (g$datum$8560$4aEQL
                                                                        'unquote-splicing)
                                                                      (g$quasi$8581$4aEQL
                                                                        g$p$8624$4aEQL
                                                                        (- g$lev$8614$4aEQL
                                                                           '1)))
                                                                    (g$vquasi$8580$4aEQL
                                                                      g$q$8618$4aEQL
                                                                      g$lev$8614$4aEQL)))))
                                                             g$ls/false$8623$4aEQL)
                                                           ((case-lambda
                                                              ((g$t$8625$4aEQL)
                                                               ((case-lambda
                                                                  ((g$ls/false$8626$4aEQL)
                                                                   (if g$ls/false$8626$4aEQL
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8627$4aEQL)
                                                                          (g$quasicons$8577$4aEQL
                                                                            (g$quasi$8581$4aEQL
                                                                              g$p$8627$4aEQL
                                                                              g$lev$8614$4aEQL)
                                                                            (g$vquasi$8580$4aEQL
                                                                              g$q$8618$4aEQL
                                                                              g$lev$8614$4aEQL))))
                                                                       g$ls/false$8626$4aEQL)
                                                                     (g$syntax-violation$7696$4aEQL
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8625$4aEQL))))
                                                                (g$syntax-dispatch$7585$4aEQL
                                                                  g$t$8625$4aEQL
                                                                  'any))))
                                                            g$t$8622$4aEQL))))
                                                      (g$syntax-dispatch$7585$4aEQL
                                                        g$t$8622$4aEQL
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8619$4aEQL))))
                                            (g$syntax-dispatch$7585$4aEQL
                                              g$t$8619$4aEQL
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8617$4aEQL)))
                                    g$ls/false$8616$4aEQL)
                                  ((case-lambda
                                     ((g$t$8628$4aEQL)
                                      ((case-lambda
                                         ((g$ls/false$8629$4aEQL)
                                          (if g$ls/false$8629$4aEQL
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7528$4aEQL
                                                     'quote)
                                                   '())))
                                              g$ls/false$8629$4aEQL)
                                            (g$syntax-violation$7696$4aEQL
                                              '#f
                                              '"invalid syntax"
                                              g$t$8628$4aEQL))))
                                       (g$syntax-dispatch$7585$4aEQL
                                         g$t$8628$4aEQL
                                         '()))))
                                   g$t$8615$4aEQL))))
                             (g$syntax-dispatch$7585$4aEQL
                               g$t$8615$4aEQL
                               '(any . any)))))
                         g$p$8613$4aEQL))))
                   (g$quasi$8581$4aEQL
                     (case-lambda
                       ((g$p$8586$4aEQL g$lev$8587$4aEQL)
                        ((case-lambda
                           ((g$t$8588$4aEQL)
                            ((case-lambda
                               ((g$ls/false$8589$4aEQL)
                                (if g$ls/false$8589$4aEQL
                                  (apply
                                    (case-lambda
                                      ((g$p$8590$4aEQL)
                                       (if (= g$lev$8587$4aEQL '0)
                                         g$p$8590$4aEQL
                                         (g$quasicons$8577$4aEQL
                                           (g$datum$8560$4aEQL 'unquote)
                                           (g$quasi$8581$4aEQL
                                             (list g$p$8590$4aEQL)
                                             (- g$lev$8587$4aEQL '1))))))
                                    g$ls/false$8589$4aEQL)
                                  ((case-lambda
                                     ((g$t$8591$4aEQL)
                                      ((case-lambda
                                         ((g$ls/false$8592$4aEQL)
                                          (if g$ls/false$8592$4aEQL
                                            (apply
                                              (case-lambda
                                                ((g$p$8593$4aEQL g$q$8594$4aEQL)
                                                 (if (= g$lev$8587$4aEQL '0)
                                                   (g$quasicons*$8576$4aEQL
                                                     g$p$8593$4aEQL
                                                     (g$quasi$8581$4aEQL
                                                       g$q$8594$4aEQL
                                                       g$lev$8587$4aEQL))
                                                   (g$quasicons$8577$4aEQL
                                                     (g$quasicons$8577$4aEQL
                                                       (g$datum$8560$4aEQL
                                                         'unquote)
                                                       (g$quasi$8581$4aEQL
                                                         g$p$8593$4aEQL
                                                         (- g$lev$8587$4aEQL
                                                            '1)))
                                                     (g$quasi$8581$4aEQL
                                                       g$q$8594$4aEQL
                                                       g$lev$8587$4aEQL)))))
                                              g$ls/false$8592$4aEQL)
                                            ((case-lambda
                                               ((g$t$8595$4aEQL)
                                                ((case-lambda
                                                   ((g$ls/false$8596$4aEQL)
                                                    (if g$ls/false$8596$4aEQL
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8597$4aEQL
                                                             g$q$8598$4aEQL)
                                                           (if (= g$lev$8587$4aEQL
                                                                  '0)
                                                             (g$quasiappend$8578$4aEQL
                                                               g$p$8597$4aEQL
                                                               (g$quasi$8581$4aEQL
                                                                 g$q$8598$4aEQL
                                                                 g$lev$8587$4aEQL))
                                                             (g$quasicons$8577$4aEQL
                                                               (g$quasicons$8577$4aEQL
                                                                 (g$datum$8560$4aEQL
                                                                   'unquote-splicing)
                                                                 (g$quasi$8581$4aEQL
                                                                   g$p$8597$4aEQL
                                                                   (- g$lev$8587$4aEQL
                                                                      '1)))
                                                               (g$quasi$8581$4aEQL
                                                                 g$q$8598$4aEQL
                                                                 g$lev$8587$4aEQL)))))
                                                        g$ls/false$8596$4aEQL)
                                                      ((case-lambda
                                                         ((g$t$8599$4aEQL)
                                                          ((case-lambda
                                                             ((g$ls/false$8600$4aEQL)
                                                              (if g$ls/false$8600$4aEQL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8601$4aEQL)
                                                                     (g$quasicons$8577$4aEQL
                                                                       (g$datum$8560$4aEQL
                                                                         'quasiquote)
                                                                       (g$quasi$8581$4aEQL
                                                                         (list
                                                                           g$p$8601$4aEQL)
                                                                         (+ g$lev$8587$4aEQL
                                                                            '1)))))
                                                                  g$ls/false$8600$4aEQL)
                                                                ((case-lambda
                                                                   ((g$t$8602$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8603$4aEQL)
                                                                        (if g$ls/false$8603$4aEQL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8604$4aEQL
                                                                                 g$q$8605$4aEQL)
                                                                               (g$quasicons$8577$4aEQL
                                                                                 (g$quasi$8581$4aEQL
                                                                                   g$p$8604$4aEQL
                                                                                   g$lev$8587$4aEQL)
                                                                                 (g$quasi$8581$4aEQL
                                                                                   g$q$8605$4aEQL
                                                                                   g$lev$8587$4aEQL))))
                                                                            g$ls/false$8603$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$t$8606$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8607$4aEQL)
                                                                                  (if (if g$ls/false$8607$4aEQL
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8608$4aEQL)
                                                                                               (not (g$stx?$7279$4aEQL
                                                                                                      g$x$8608$4aEQL))))
                                                                                            g$ls/false$8607$4aEQL))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8609$4aEQL)
                                                                                         (g$quasivector$8579$4aEQL
                                                                                           (g$vquasi$8580$4aEQL
                                                                                             g$x$8609$4aEQL
                                                                                             g$lev$8587$4aEQL))))
                                                                                      g$ls/false$8607$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$t$8610$4aEQL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8611$4aEQL)
                                                                                            (if g$ls/false$8611$4aEQL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8612$4aEQL)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7528$4aEQL
                                                                                                       'quote)
                                                                                                     g$p$8612$4aEQL)))
                                                                                                g$ls/false$8611$4aEQL)
                                                                                              (g$syntax-violation$7696$4aEQL
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8610$4aEQL))))
                                                                                         (g$syntax-dispatch$7585$4aEQL
                                                                                           g$t$8610$4aEQL
                                                                                           'any))))
                                                                                     g$t$8606$4aEQL))))
                                                                               (g$syntax-dispatch$7585$4aEQL
                                                                                 g$t$8606$4aEQL
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8602$4aEQL))))
                                                                     (g$syntax-dispatch$7585$4aEQL
                                                                       g$t$8602$4aEQL
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8599$4aEQL))))
                                                           (g$syntax-dispatch$7585$4aEQL
                                                             g$t$8599$4aEQL
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8595$4aEQL))))
                                                 (g$syntax-dispatch$7585$4aEQL
                                                   g$t$8595$4aEQL
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8591$4aEQL))))
                                       (g$syntax-dispatch$7585$4aEQL
                                         g$t$8591$4aEQL
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8588$4aEQL))))
                             (g$syntax-dispatch$7585$4aEQL
                               g$t$8588$4aEQL
                               '(#(scheme-id unquote) any)))))
                         g$p$8586$4aEQL)))))
           (case-lambda
             ((g$x$8582$4aEQL)
              ((case-lambda
                 ((g$t$8583$4aEQL)
                  ((case-lambda
                     ((g$ls/false$8584$4aEQL)
                      (if g$ls/false$8584$4aEQL
                        (apply
                          (case-lambda
                            ((g$e$8585$4aEQL)
                             (g$quasi$8581$4aEQL g$e$8585$4aEQL '0)))
                          g$ls/false$8584$4aEQL)
                        (g$syntax-violation$7696$4aEQL
                          '#f
                          '"invalid syntax"
                          g$t$8583$4aEQL))))
                   (g$syntax-dispatch$7585$4aEQL g$t$8583$4aEQL '(_ any)))))
               g$x$8582$4aEQL))))))))
   (g$quasisyntax-macro$7577$4aEQL
     g$quasisyntax-macro$11068$4aEQL
     ((case-lambda
        (()
         (letrec* ((g$quasi$8692$4aEQL
                     (case-lambda
                       ((g$p$8706$4aEQL g$lev$8707$4aEQL)
                        ((case-lambda
                           ((g$t$8708$4aEQL)
                            ((case-lambda
                               ((g$ls/false$8709$4aEQL)
                                (if g$ls/false$8709$4aEQL
                                  (apply
                                    (case-lambda
                                      ((g$p$8710$4aEQL)
                                       (if (= g$lev$8707$4aEQL '0)
                                         ((case-lambda
                                            ((g$g$8711$4aEQL)
                                             (values
                                               (list g$g$8711$4aEQL)
                                               (list g$p$8710$4aEQL)
                                               g$g$8711$4aEQL)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8692$4aEQL
                                                g$p$8710$4aEQL
                                                (- g$lev$8707$4aEQL '1))))
                                           (case-lambda
                                             ((g$lhs*$8715$4aEQL
                                                g$rhs*$8716$4aEQL
                                                g$p$8717$4aEQL)
                                              ((case-lambda
                                                 ((g$p$8718$4aEQL
                                                    g$rhs*$8719$4aEQL
                                                    g$lhs*$8720$4aEQL)
                                                  (values
                                                    g$lhs*$8720$4aEQL
                                                    g$rhs*$8719$4aEQL
                                                    (list
                                                      'unsyntax
                                                      g$p$8718$4aEQL))))
                                               g$p$8717$4aEQL
                                               g$rhs*$8716$4aEQL
                                               g$lhs*$8715$4aEQL)))))))
                                    g$ls/false$8709$4aEQL)
                                  ((case-lambda
                                     ((g$t$8721$4aEQL)
                                      ((case-lambda
                                         ((g$ls/false$8722$4aEQL)
                                          (if (if g$ls/false$8722$4aEQL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8707$4aEQL '0)))
                                                    g$ls/false$8722$4aEQL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7696$4aEQL
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8706$4aEQL)))
                                              g$ls/false$8722$4aEQL)
                                            ((case-lambda
                                               ((g$t$8723$4aEQL)
                                                ((case-lambda
                                                   ((g$ls/false$8724$4aEQL)
                                                    (if g$ls/false$8724$4aEQL
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$8725$4aEQL
                                                             g$q$8726$4aEQL)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8692$4aEQL
                                                                  g$q$8726$4aEQL
                                                                  g$lev$8707$4aEQL)))
                                                             (case-lambda
                                                               ((g$lhs*$8730$4aEQL
                                                                  g$rhs*$8731$4aEQL
                                                                  g$q$8732$4aEQL)
                                                                ((case-lambda
                                                                   ((g$q$8733$4aEQL
                                                                      g$rhs*$8734$4aEQL
                                                                      g$lhs*$8735$4aEQL)
                                                                    (if (= g$lev$8707$4aEQL
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$8736$4aEQL)
                                                                          (values
                                                                            (append
                                                                              g$g*$8736$4aEQL
                                                                              g$lhs*$8735$4aEQL)
                                                                            (append
                                                                              g$p*$8725$4aEQL
                                                                              g$rhs*$8734$4aEQL)
                                                                            (append
                                                                              g$g*$8736$4aEQL
                                                                              g$q$8733$4aEQL))))
                                                                       (g$map$5048$4aEQL
                                                                         (case-lambda
                                                                           ((g$x$8737$4aEQL)
                                                                            (gensym)))
                                                                         g$p*$8725$4aEQL))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8692$4aEQL
                                                                             g$p*$8725$4aEQL
                                                                             (- g$lev$8707$4aEQL
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8741$4aEQL
                                                                             g$rhs2*$8742$4aEQL
                                                                             g$p*$8743$4aEQL)
                                                                           ((case-lambda
                                                                              ((g$p*$8744$4aEQL
                                                                                 g$rhs2*$8745$4aEQL
                                                                                 g$lhs2*$8746$4aEQL)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8746$4aEQL
                                                                                   g$lhs*$8735$4aEQL)
                                                                                 (append
                                                                                   g$rhs2*$8745$4aEQL
                                                                                   g$rhs*$8734$4aEQL)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$8744$4aEQL)
                                                                                   g$q$8733$4aEQL))))
                                                                            g$p*$8743$4aEQL
                                                                            g$rhs2*$8742$4aEQL
                                                                            g$lhs2*$8741$4aEQL)))))))
                                                                 g$q$8732$4aEQL
                                                                 g$rhs*$8731$4aEQL
                                                                 g$lhs*$8730$4aEQL))))))
                                                        g$ls/false$8724$4aEQL)
                                                      ((case-lambda
                                                         ((g$t$8747$4aEQL)
                                                          ((case-lambda
                                                             ((g$ls/false$8748$4aEQL)
                                                              (if g$ls/false$8748$4aEQL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$8749$4aEQL
                                                                       g$q$8750$4aEQL)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$8692$4aEQL
                                                                            g$q$8750$4aEQL
                                                                            g$lev$8707$4aEQL)))
                                                                       (case-lambda
                                                                         ((g$lhs*$8754$4aEQL
                                                                            g$rhs*$8755$4aEQL
                                                                            g$q$8756$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$q$8757$4aEQL
                                                                                g$rhs*$8758$4aEQL
                                                                                g$lhs*$8759$4aEQL)
                                                                              (if (= g$lev$8707$4aEQL
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$8760$4aEQL)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5048$4aEQL
                                                                                          (case-lambda
                                                                                            ((g$g$8761$4aEQL)
                                                                                             (cons
                                                                                               g$g$8761$4aEQL
                                                                                               '(...))))
                                                                                          g$g*$8760$4aEQL)
                                                                                        g$lhs*$8759$4aEQL)
                                                                                      (append
                                                                                        g$p*$8749$4aEQL
                                                                                        g$rhs*$8758$4aEQL)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5048$4aEQL
                                                                                            (case-lambda
                                                                                              ((g$g$8762$4aEQL)
                                                                                               (cons
                                                                                                 g$g$8762$4aEQL
                                                                                                 '(...))))
                                                                                            g$g*$8760$4aEQL))
                                                                                        g$q$8757$4aEQL))))
                                                                                 (g$map$5048$4aEQL
                                                                                   (case-lambda
                                                                                     ((g$x$8763$4aEQL)
                                                                                      (gensym)))
                                                                                   g$p*$8749$4aEQL))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$8692$4aEQL
                                                                                       g$p*$8749$4aEQL
                                                                                       (- g$lev$8707$4aEQL
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$8767$4aEQL
                                                                                       g$rhs2*$8768$4aEQL
                                                                                       g$p*$8769$4aEQL)
                                                                                     ((case-lambda
                                                                                        ((g$p*$8770$4aEQL
                                                                                           g$rhs2*$8771$4aEQL
                                                                                           g$lhs2*$8772$4aEQL)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$8772$4aEQL
                                                                                             g$lhs*$8759$4aEQL)
                                                                                           (append
                                                                                             g$rhs2*$8771$4aEQL
                                                                                             g$rhs*$8758$4aEQL)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$8770$4aEQL)
                                                                                             g$q$8757$4aEQL))))
                                                                                      g$p*$8769$4aEQL
                                                                                      g$rhs2*$8768$4aEQL
                                                                                      g$lhs2*$8767$4aEQL)))))))
                                                                           g$q$8756$4aEQL
                                                                           g$rhs*$8755$4aEQL
                                                                           g$lhs*$8754$4aEQL))))))
                                                                  g$ls/false$8748$4aEQL)
                                                                ((case-lambda
                                                                   ((g$t$8773$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8774$4aEQL)
                                                                        (if (if g$ls/false$8774$4aEQL
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$8707$4aEQL
                                                                                        '0)))
                                                                                  g$ls/false$8774$4aEQL))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$7696$4aEQL
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$8706$4aEQL)))
                                                                            g$ls/false$8774$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$t$8775$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8776$4aEQL)
                                                                                  (if g$ls/false$8776$4aEQL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8777$4aEQL)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8692$4aEQL
                                                                                                g$p$8777$4aEQL
                                                                                                (+ g$lev$8707$4aEQL
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8781$4aEQL
                                                                                                g$rhs*$8782$4aEQL
                                                                                                g$p$8783$4aEQL)
                                                                                              ((case-lambda
                                                                                                 ((g$p$8784$4aEQL
                                                                                                    g$rhs*$8785$4aEQL
                                                                                                    g$lhs*$8786$4aEQL)
                                                                                                  (values
                                                                                                    g$lhs*$8786$4aEQL
                                                                                                    g$rhs*$8785$4aEQL
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$8784$4aEQL))))
                                                                                               g$p$8783$4aEQL
                                                                                               g$rhs*$8782$4aEQL
                                                                                               g$lhs*$8781$4aEQL))))))
                                                                                      g$ls/false$8776$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$t$8787$4aEQL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8788$4aEQL)
                                                                                            (if g$ls/false$8788$4aEQL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8789$4aEQL
                                                                                                     g$q$8790$4aEQL)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$8692$4aEQL
                                                                                                          g$p$8789$4aEQL
                                                                                                          g$lev$8707$4aEQL)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8797$4aEQL
                                                                                                          g$rhs*$8798$4aEQL
                                                                                                          g$p$8799$4aEQL)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$8692$4aEQL
                                                                                                               g$q$8790$4aEQL
                                                                                                               g$lev$8707$4aEQL)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$8800$4aEQL
                                                                                                               g$rhs2*$8801$4aEQL
                                                                                                               g$q$8802$4aEQL)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$8803$4aEQL
                                                                                                                   g$rhs2*$8804$4aEQL
                                                                                                                   g$lhs2*$8805$4aEQL
                                                                                                                   g$p$8806$4aEQL
                                                                                                                   g$rhs*$8807$4aEQL
                                                                                                                   g$lhs*$8808$4aEQL)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$8805$4aEQL
                                                                                                                     g$lhs*$8808$4aEQL)
                                                                                                                   (append
                                                                                                                     g$rhs2*$8804$4aEQL
                                                                                                                     g$rhs*$8807$4aEQL)
                                                                                                                   (cons
                                                                                                                     g$p$8806$4aEQL
                                                                                                                     g$q$8803$4aEQL))))
                                                                                                              g$q$8802$4aEQL
                                                                                                              g$rhs2*$8801$4aEQL
                                                                                                              g$lhs2*$8800$4aEQL
                                                                                                              g$p$8799$4aEQL
                                                                                                              g$rhs*$8798$4aEQL
                                                                                                              g$lhs*$8797$4aEQL)))))))))
                                                                                                g$ls/false$8788$4aEQL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8809$4aEQL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8810$4aEQL)
                                                                                                      (if g$ls/false$8810$4aEQL
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$8811$4aEQL)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$8692$4aEQL
                                                                                                                    g$x*$8811$4aEQL
                                                                                                                    g$lev$8707$4aEQL)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$8815$4aEQL
                                                                                                                    g$rhs*$8816$4aEQL
                                                                                                                    g$x*$8817$4aEQL)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$8818$4aEQL
                                                                                                                        g$rhs*$8819$4aEQL
                                                                                                                        g$lhs*$8820$4aEQL)
                                                                                                                      (values
                                                                                                                        g$lhs*$8820$4aEQL
                                                                                                                        g$rhs*$8819$4aEQL
                                                                                                                        (list->vector
                                                                                                                          g$x*$8818$4aEQL))))
                                                                                                                   g$x*$8817$4aEQL
                                                                                                                   g$rhs*$8816$4aEQL
                                                                                                                   g$lhs*$8815$4aEQL))))))
                                                                                                          g$ls/false$8810$4aEQL)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$8821$4aEQL)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$8822$4aEQL)
                                                                                                                (if g$ls/false$8822$4aEQL
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$8706$4aEQL)))
                                                                                                                    g$ls/false$8822$4aEQL)
                                                                                                                  (g$syntax-violation$7696$4aEQL
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$8821$4aEQL))))
                                                                                                             (g$syntax-dispatch$7585$4aEQL
                                                                                                               g$t$8821$4aEQL
                                                                                                               '_))))
                                                                                                         g$t$8809$4aEQL))))
                                                                                                   (g$syntax-dispatch$7585$4aEQL
                                                                                                     g$t$8809$4aEQL
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$8787$4aEQL))))
                                                                                         (g$syntax-dispatch$7585$4aEQL
                                                                                           g$t$8787$4aEQL
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$8775$4aEQL))))
                                                                               (g$syntax-dispatch$7585$4aEQL
                                                                                 g$t$8775$4aEQL
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$8773$4aEQL))))
                                                                     (g$syntax-dispatch$7585$4aEQL
                                                                       g$t$8773$4aEQL
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$8747$4aEQL))))
                                                           (g$syntax-dispatch$7585$4aEQL
                                                             g$t$8747$4aEQL
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$8723$4aEQL))))
                                                 (g$syntax-dispatch$7585$4aEQL
                                                   g$t$8723$4aEQL
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8721$4aEQL))))
                                       (g$syntax-dispatch$7585$4aEQL
                                         g$t$8721$4aEQL
                                         '#(scheme-id unsyntax)))))
                                   g$t$8708$4aEQL))))
                             (g$syntax-dispatch$7585$4aEQL
                               g$t$8708$4aEQL
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8706$4aEQL)))))
           (case-lambda
             ((g$x$8693$4aEQL)
              ((case-lambda
                 ((g$t$8694$4aEQL)
                  ((case-lambda
                     ((g$ls/false$8695$4aEQL)
                      (if g$ls/false$8695$4aEQL
                        (apply
                          (case-lambda
                            ((g$e$8696$4aEQL)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8692$4aEQL g$e$8696$4aEQL '0)))
                               (case-lambda
                                 ((g$lhs*$8700$4aEQL
                                    g$rhs*$8701$4aEQL
                                    g$v$8702$4aEQL)
                                  ((case-lambda
                                     ((g$v$8703$4aEQL
                                        g$rhs*$8704$4aEQL
                                        g$lhs*$8705$4aEQL)
                                      (g$bless$7548$4aEQL
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8704$4aEQL)
                                          '()
                                          (list
                                            g$lhs*$8705$4aEQL
                                            (list 'syntax g$v$8703$4aEQL))))))
                                   g$v$8702$4aEQL
                                   g$rhs*$8701$4aEQL
                                   g$lhs*$8700$4aEQL))))))
                          g$ls/false$8695$4aEQL)
                        (g$syntax-violation$7696$4aEQL
                          '#f
                          '"invalid syntax"
                          g$t$8694$4aEQL))))
                   (g$syntax-dispatch$7585$4aEQL g$t$8694$4aEQL '(_ any)))))
               g$x$8693$4aEQL))))))))
   (g$define-struct-macro$7578$4aEQL
     g$define-struct-macro$11069$4aEQL
     (case-lambda
       ((g$stx$8823$4aEQL)
        (g$syntax-violation$7696$4aEQL
          '#f
          '"define-struct not supported"
          g$stx$8823$4aEQL))))
   (g$define-record-type-macro$7579$4aEQL
     g$define-record-type-macro$11070$4aEQL
     (case-lambda
       ((g$x$8824$4aEQL)
        (letrec* ((g$id$8825$4aEQL
                    (case-lambda
                      ((g$ctxt$9077$4aEQL . g$str*$9078$4aEQL)
                       (g$datum->syntax$7698$4aEQL
                         g$ctxt$9077$4aEQL
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5048$4aEQL
                               (case-lambda
                                 ((g$x$9079$4aEQL)
                                  (if (symbol? g$x$9079$4aEQL)
                                    (symbol->string g$x$9079$4aEQL)
                                    (if (string? g$x$9079$4aEQL)
                                      g$x$9079$4aEQL
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$9078$4aEQL)))))))
                  (g$get-record-name$8826$4aEQL
                    (case-lambda
                      ((g$spec$9068$4aEQL)
                       ((case-lambda
                          ((g$t$9069$4aEQL)
                           ((case-lambda
                              ((g$ls/false$9070$4aEQL)
                               (if g$ls/false$9070$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9071$4aEQL
                                        g$make-foo$9072$4aEQL
                                        g$foo?$9073$4aEQL)
                                      g$foo$9071$4aEQL))
                                   g$ls/false$9070$4aEQL)
                                 ((case-lambda
                                    ((g$t$9074$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$9075$4aEQL)
                                         (if g$ls/false$9075$4aEQL
                                           (apply
                                             (case-lambda
                                               ((g$foo$9076$4aEQL)
                                                g$foo$9076$4aEQL))
                                             g$ls/false$9075$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9074$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$9074$4aEQL
                                        'any))))
                                  g$t$9069$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$9069$4aEQL
                              '(any any any)))))
                        g$spec$9068$4aEQL))))
                  (g$get-record-constructor-name$8827$4aEQL
                    (case-lambda
                      ((g$spec$9058$4aEQL)
                       ((case-lambda
                          ((g$t$9059$4aEQL)
                           ((case-lambda
                              ((g$ls/false$9060$4aEQL)
                               (if g$ls/false$9060$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9061$4aEQL
                                        g$make-foo$9062$4aEQL
                                        g$foo?$9063$4aEQL)
                                      g$make-foo$9062$4aEQL))
                                   g$ls/false$9060$4aEQL)
                                 ((case-lambda
                                    ((g$t$9064$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$9065$4aEQL)
                                         (if (if g$ls/false$9065$4aEQL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9066$4aEQL)
                                                      (g$id?$7307$4aEQL
                                                        g$foo$9066$4aEQL)))
                                                   g$ls/false$9065$4aEQL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9067$4aEQL)
                                                (g$id$8825$4aEQL
                                                  g$foo$9067$4aEQL
                                                  '"make-"
                                                  (g$stx->datum$7318$4aEQL
                                                    g$foo$9067$4aEQL))))
                                             g$ls/false$9065$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9064$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$9064$4aEQL
                                        'any))))
                                  g$t$9059$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$9059$4aEQL
                              '(any any any)))))
                        g$spec$9058$4aEQL))))
                  (g$get-record-predicate-name$8828$4aEQL
                    (case-lambda
                      ((g$spec$9048$4aEQL)
                       ((case-lambda
                          ((g$t$9049$4aEQL)
                           ((case-lambda
                              ((g$ls/false$9050$4aEQL)
                               (if g$ls/false$9050$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9051$4aEQL
                                        g$make-foo$9052$4aEQL
                                        g$foo?$9053$4aEQL)
                                      g$foo?$9053$4aEQL))
                                   g$ls/false$9050$4aEQL)
                                 ((case-lambda
                                    ((g$t$9054$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$9055$4aEQL)
                                         (if (if g$ls/false$9055$4aEQL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9056$4aEQL)
                                                      (g$id?$7307$4aEQL
                                                        g$foo$9056$4aEQL)))
                                                   g$ls/false$9055$4aEQL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9057$4aEQL)
                                                (g$id$8825$4aEQL
                                                  g$foo$9057$4aEQL
                                                  (g$stx->datum$7318$4aEQL
                                                    g$foo$9057$4aEQL)
                                                  '"?")))
                                             g$ls/false$9055$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9054$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$9054$4aEQL
                                        'any))))
                                  g$t$9049$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$9049$4aEQL
                              '(any any any)))))
                        g$spec$9048$4aEQL))))
                  (g$get-clause$8829$4aEQL
                    (case-lambda
                      ((g$id$9039$4aEQL g$ls$9040$4aEQL)
                       ((case-lambda
                          ((g$t$9041$4aEQL)
                           ((case-lambda
                              ((g$ls/false$9042$4aEQL)
                               (if g$ls/false$9042$4aEQL
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9042$4aEQL)
                                 ((case-lambda
                                    ((g$t$9043$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$9044$4aEQL)
                                         (if g$ls/false$9044$4aEQL
                                           (apply
                                             (case-lambda
                                               ((g$x$9045$4aEQL
                                                  g$rest$9046$4aEQL
                                                  g$ls$9047$4aEQL)
                                                (if (g$free-id=?$7311$4aEQL
                                                      (g$bless$7548$4aEQL
                                                        g$id$9039$4aEQL)
                                                      g$x$9045$4aEQL)
                                                  (cons
                                                    g$x$9045$4aEQL
                                                    g$rest$9046$4aEQL)
                                                  (g$get-clause$8829$4aEQL
                                                    g$id$9039$4aEQL
                                                    g$ls$9047$4aEQL))))
                                             g$ls/false$9044$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9043$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$9043$4aEQL
                                        '((any . any) . any)))))
                                  g$t$9041$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL g$t$9041$4aEQL '()))))
                        g$ls$9040$4aEQL))))
                  (g$foo-rtd-code$8830$4aEQL
                    (case-lambda
                      ((g$name$8998$4aEQL
                         g$clause*$8999$4aEQL
                         g$parent-rtd-code$9000$4aEQL)
                       (letrec* ((g$convert-field-spec*$9001$4aEQL
                                   (case-lambda
                                     ((g$ls$9026$4aEQL)
                                      (list->vector
                                        (g$map$5048$4aEQL
                                          (case-lambda
                                            ((g$x$9027$4aEQL)
                                             ((case-lambda
                                                ((g$t$9028$4aEQL)
                                                 ((case-lambda
                                                    ((g$ls/false$9029$4aEQL)
                                                     (if g$ls/false$9029$4aEQL
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$9030$4aEQL
                                                              g$rest$9031$4aEQL)
                                                            (list
                                                              'mutable
                                                              g$name$9030$4aEQL)))
                                                         g$ls/false$9029$4aEQL)
                                                       ((case-lambda
                                                          ((g$t$9032$4aEQL)
                                                           ((case-lambda
                                                              ((g$ls/false$9033$4aEQL)
                                                               (if g$ls/false$9033$4aEQL
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$9034$4aEQL
                                                                        g$rest$9035$4aEQL)
                                                                      (list
                                                                        'immutable
                                                                        g$name$9034$4aEQL)))
                                                                   g$ls/false$9033$4aEQL)
                                                                 ((case-lambda
                                                                    ((g$t$9036$4aEQL)
                                                                     ((case-lambda
                                                                        ((g$ls/false$9037$4aEQL)
                                                                         (if g$ls/false$9037$4aEQL
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$9038$4aEQL)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$9038$4aEQL)))
                                                                             g$ls/false$9037$4aEQL)
                                                                           (g$syntax-violation$7696$4aEQL
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$9036$4aEQL))))
                                                                      (g$syntax-dispatch$7585$4aEQL
                                                                        g$t$9036$4aEQL
                                                                        'any))))
                                                                  g$t$9032$4aEQL))))
                                                            (g$syntax-dispatch$7585$4aEQL
                                                              g$t$9032$4aEQL
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$9028$4aEQL))))
                                                  (g$syntax-dispatch$7585$4aEQL
                                                    g$t$9028$4aEQL
                                                    '(#(scheme-id mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$9027$4aEQL)))
                                          g$ls$9026$4aEQL))))))
                         ((case-lambda
                            ((g$uid-code$9002$4aEQL
                               g$sealed?$9003$4aEQL
                               g$opaque?$9004$4aEQL
                               g$fields$9005$4aEQL)
                             (g$bless$7548$4aEQL
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$8998$4aEQL)
                                 g$parent-rtd-code$9000$4aEQL
                                 g$uid-code$9002$4aEQL
                                 g$sealed?$9003$4aEQL
                                 g$opaque?$9004$4aEQL
                                 g$fields$9005$4aEQL))))
                          ((case-lambda
                             ((g$t$9006$4aEQL)
                              ((case-lambda
                                 ((g$ls/false$9007$4aEQL)
                                  (if g$ls/false$9007$4aEQL
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9007$4aEQL)
                                    ((case-lambda
                                       ((g$t$9008$4aEQL)
                                        ((case-lambda
                                           ((g$ls/false$9009$4aEQL)
                                            (if g$ls/false$9009$4aEQL
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9010$4aEQL)
                                                   (list
                                                     'quote
                                                     g$uid$9010$4aEQL)))
                                                g$ls/false$9009$4aEQL)
                                              ((case-lambda
                                                 ((g$t$9011$4aEQL)
                                                  ((case-lambda
                                                     ((g$ls/false$9012$4aEQL)
                                                      (if g$ls/false$9012$4aEQL
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9012$4aEQL)
                                                        (g$syntax-violation$7696$4aEQL
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9011$4aEQL))))
                                                   (g$syntax-dispatch$7585$4aEQL
                                                     g$t$9011$4aEQL
                                                     '_))))
                                               g$t$9008$4aEQL))))
                                         (g$syntax-dispatch$7585$4aEQL
                                           g$t$9008$4aEQL
                                           '(_ any)))))
                                     g$t$9006$4aEQL))))
                               (g$syntax-dispatch$7585$4aEQL
                                 g$t$9006$4aEQL
                                 '(_)))))
                           (g$get-clause$8829$4aEQL
                             'nongenerative
                             g$clause*$8999$4aEQL))
                          ((case-lambda
                             ((g$t$9013$4aEQL)
                              ((case-lambda
                                 ((g$ls/false$9014$4aEQL)
                                  (if g$ls/false$9014$4aEQL
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9014$4aEQL)
                                    ((case-lambda
                                       ((g$t$9015$4aEQL)
                                        ((case-lambda
                                           ((g$ls/false$9016$4aEQL)
                                            (if g$ls/false$9016$4aEQL
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9016$4aEQL)
                                              (g$syntax-violation$7696$4aEQL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9015$4aEQL))))
                                         (g$syntax-dispatch$7585$4aEQL
                                           g$t$9015$4aEQL
                                           '_))))
                                     g$t$9013$4aEQL))))
                               (g$syntax-dispatch$7585$4aEQL
                                 g$t$9013$4aEQL
                                 '(_ #(atom #t))))))
                           (g$get-clause$8829$4aEQL
                             'sealed
                             g$clause*$8999$4aEQL))
                          ((case-lambda
                             ((g$t$9017$4aEQL)
                              ((case-lambda
                                 ((g$ls/false$9018$4aEQL)
                                  (if g$ls/false$9018$4aEQL
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9018$4aEQL)
                                    ((case-lambda
                                       ((g$t$9019$4aEQL)
                                        ((case-lambda
                                           ((g$ls/false$9020$4aEQL)
                                            (if g$ls/false$9020$4aEQL
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9020$4aEQL)
                                              (g$syntax-violation$7696$4aEQL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9019$4aEQL))))
                                         (g$syntax-dispatch$7585$4aEQL
                                           g$t$9019$4aEQL
                                           '_))))
                                     g$t$9017$4aEQL))))
                               (g$syntax-dispatch$7585$4aEQL
                                 g$t$9017$4aEQL
                                 '(_ #(atom #t))))))
                           (g$get-clause$8829$4aEQL
                             'opaque
                             g$clause*$8999$4aEQL))
                          ((case-lambda
                             ((g$t$9021$4aEQL)
                              ((case-lambda
                                 ((g$ls/false$9022$4aEQL)
                                  (if g$ls/false$9022$4aEQL
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9023$4aEQL)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9001$4aEQL
                                             g$field-spec*$9023$4aEQL))))
                                      g$ls/false$9022$4aEQL)
                                    ((case-lambda
                                       ((g$t$9024$4aEQL)
                                        ((case-lambda
                                           ((g$ls/false$9025$4aEQL)
                                            (if g$ls/false$9025$4aEQL
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9025$4aEQL)
                                              (g$syntax-violation$7696$4aEQL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9024$4aEQL))))
                                         (g$syntax-dispatch$7585$4aEQL
                                           g$t$9024$4aEQL
                                           '_))))
                                     g$t$9021$4aEQL))))
                               (g$syntax-dispatch$7585$4aEQL
                                 g$t$9021$4aEQL
                                 '(_ . each-any)))))
                           (g$get-clause$8829$4aEQL
                             'fields
                             g$clause*$8999$4aEQL)))))))
                  (g$parent-rtd-code$8831$4aEQL
                    (case-lambda
                      ((g$clause*$8986$4aEQL)
                       ((case-lambda
                          ((g$t$8987$4aEQL)
                           ((case-lambda
                              ((g$ls/false$8988$4aEQL)
                               (if g$ls/false$8988$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$name$8989$4aEQL)
                                      (list
                                        'record-type-descriptor
                                        g$name$8989$4aEQL)))
                                   g$ls/false$8988$4aEQL)
                                 ((case-lambda
                                    ((g$t$8990$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$8991$4aEQL)
                                         (if g$ls/false$8991$4aEQL
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8992$4aEQL)
                                                    ((case-lambda
                                                       ((g$ls/false$8993$4aEQL)
                                                        (if g$ls/false$8993$4aEQL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8994$4aEQL
                                                                 g$rcd$8995$4aEQL)
                                                               g$rtd$8994$4aEQL))
                                                            g$ls/false$8993$4aEQL)
                                                          ((case-lambda
                                                             ((g$t$8996$4aEQL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8997$4aEQL)
                                                                  (if g$ls/false$8997$4aEQL
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8997$4aEQL)
                                                                    (g$syntax-violation$7696$4aEQL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8996$4aEQL))))
                                                               (g$syntax-dispatch$7585$4aEQL
                                                                 g$t$8996$4aEQL
                                                                 '#(atom #f)))))
                                                           g$t$8992$4aEQL))))
                                                     (g$syntax-dispatch$7585$4aEQL
                                                       g$t$8992$4aEQL
                                                       '(_ any any)))))
                                                 (g$get-clause$8829$4aEQL
                                                   'parent-rtd
                                                   g$clause*$8986$4aEQL))))
                                             g$ls/false$8991$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8990$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$8990$4aEQL
                                        '#(atom #f)))))
                                  g$t$8987$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$8987$4aEQL
                              '(_ any)))))
                        (g$get-clause$8829$4aEQL
                          'parent
                          g$clause*$8986$4aEQL)))))
                  (g$parent-rcd-code$8832$4aEQL
                    (case-lambda
                      ((g$clause*$8974$4aEQL)
                       ((case-lambda
                          ((g$t$8975$4aEQL)
                           ((case-lambda
                              ((g$ls/false$8976$4aEQL)
                               (if g$ls/false$8976$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$name$8977$4aEQL)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8977$4aEQL)))
                                   g$ls/false$8976$4aEQL)
                                 ((case-lambda
                                    ((g$t$8978$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$8979$4aEQL)
                                         (if g$ls/false$8979$4aEQL
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8980$4aEQL)
                                                    ((case-lambda
                                                       ((g$ls/false$8981$4aEQL)
                                                        (if g$ls/false$8981$4aEQL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8982$4aEQL
                                                                 g$rcd$8983$4aEQL)
                                                               g$rcd$8983$4aEQL))
                                                            g$ls/false$8981$4aEQL)
                                                          ((case-lambda
                                                             ((g$t$8984$4aEQL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8985$4aEQL)
                                                                  (if g$ls/false$8985$4aEQL
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8985$4aEQL)
                                                                    (g$syntax-violation$7696$4aEQL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8984$4aEQL))))
                                                               (g$syntax-dispatch$7585$4aEQL
                                                                 g$t$8984$4aEQL
                                                                 '#(atom #f)))))
                                                           g$t$8980$4aEQL))))
                                                     (g$syntax-dispatch$7585$4aEQL
                                                       g$t$8980$4aEQL
                                                       '(_ any any)))))
                                                 (g$get-clause$8829$4aEQL
                                                   'parent-rtd
                                                   g$clause*$8974$4aEQL))))
                                             g$ls/false$8979$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8978$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$8978$4aEQL
                                        '#(atom #f)))))
                                  g$t$8975$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$8975$4aEQL
                              '(_ any)))))
                        (g$get-clause$8829$4aEQL
                          'parent
                          g$clause*$8974$4aEQL)))))
                  (g$foo-rcd-code$8833$4aEQL
                    (case-lambda
                      ((g$clause*$8970$4aEQL
                         g$foo-rtd$8971$4aEQL
                         g$protocol$8972$4aEQL
                         g$parent-rcd-code$8973$4aEQL)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8971$4aEQL
                         g$parent-rcd-code$8973$4aEQL
                         g$protocol$8972$4aEQL))))
                  (g$get-protocol-code$8834$4aEQL
                    (case-lambda
                      ((g$clause*$8964$4aEQL)
                       ((case-lambda
                          ((g$t$8965$4aEQL)
                           ((case-lambda
                              ((g$ls/false$8966$4aEQL)
                               (if g$ls/false$8966$4aEQL
                                 (apply
                                   (case-lambda
                                     ((g$expr$8967$4aEQL) g$expr$8967$4aEQL))
                                   g$ls/false$8966$4aEQL)
                                 ((case-lambda
                                    ((g$t$8968$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$8969$4aEQL)
                                         (if g$ls/false$8969$4aEQL
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8969$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8968$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$8968$4aEQL
                                        '_))))
                                  g$t$8965$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$8965$4aEQL
                              '(_ any)))))
                        (g$get-clause$8829$4aEQL
                          'protocol
                          g$clause*$8964$4aEQL)))))
                  (g$get-fields$8835$4aEQL
                    (case-lambda
                      ((g$clause*$8955$4aEQL)
                       ((case-lambda
                          ((g$t$8956$4aEQL)
                           ((case-lambda
                              ((g$ls/false$8957$4aEQL)
                               (if g$ls/false$8957$4aEQL
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8957$4aEQL)
                                 ((case-lambda
                                    ((g$t$8958$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$8959$4aEQL)
                                         (if g$ls/false$8959$4aEQL
                                           (apply
                                             (case-lambda
                                               ((g$f*$8960$4aEQL)
                                                g$f*$8960$4aEQL))
                                             g$ls/false$8959$4aEQL)
                                           ((case-lambda
                                              ((g$t$8961$4aEQL)
                                               ((case-lambda
                                                  ((g$ls/false$8962$4aEQL)
                                                   (if g$ls/false$8962$4aEQL
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8963$4aEQL)
                                                          (g$get-fields$8835$4aEQL
                                                            g$rest$8963$4aEQL)))
                                                       g$ls/false$8962$4aEQL)
                                                     (g$syntax-violation$7696$4aEQL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8961$4aEQL))))
                                                (g$syntax-dispatch$7585$4aEQL
                                                  g$t$8961$4aEQL
                                                  '(_ . any)))))
                                            g$t$8958$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$8958$4aEQL
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8956$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL g$t$8956$4aEQL '()))))
                        g$clause*$8955$4aEQL))))
                  (g$get-mutator-indices$8836$4aEQL
                    (case-lambda
                      ((g$fields$8943$4aEQL)
                       ((letrec ((g$f$8944$4aEQL
                                   (case-lambda
                                     ((g$fields$8945$4aEQL g$i$8946$4aEQL)
                                      ((case-lambda
                                         ((g$t$8947$4aEQL)
                                          ((case-lambda
                                             ((g$ls/false$8948$4aEQL)
                                              (if g$ls/false$8948$4aEQL
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8948$4aEQL)
                                                ((case-lambda
                                                   ((g$t$8949$4aEQL)
                                                    ((case-lambda
                                                       ((g$ls/false$8950$4aEQL)
                                                        (if g$ls/false$8950$4aEQL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8951$4aEQL)
                                                               (cons
                                                                 g$i$8946$4aEQL
                                                                 (g$f$8944$4aEQL
                                                                   g$rest$8951$4aEQL
                                                                   (+ g$i$8946$4aEQL
                                                                      '1)))))
                                                            g$ls/false$8950$4aEQL)
                                                          ((case-lambda
                                                             ((g$t$8952$4aEQL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8953$4aEQL)
                                                                  (if g$ls/false$8953$4aEQL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8954$4aEQL)
                                                                         (g$f$8944$4aEQL
                                                                           g$rest$8954$4aEQL
                                                                           (+ g$i$8946$4aEQL
                                                                              '1))))
                                                                      g$ls/false$8953$4aEQL)
                                                                    (g$syntax-violation$7696$4aEQL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8952$4aEQL))))
                                                               (g$syntax-dispatch$7585$4aEQL
                                                                 g$t$8952$4aEQL
                                                                 '(_ . any)))))
                                                           g$t$8949$4aEQL))))
                                                     (g$syntax-dispatch$7585$4aEQL
                                                       g$t$8949$4aEQL
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8947$4aEQL))))
                                           (g$syntax-dispatch$7585$4aEQL
                                             g$t$8947$4aEQL
                                             '()))))
                                       g$fields$8945$4aEQL)))))
                          g$f$8944$4aEQL)
                        g$fields$8943$4aEQL
                        '0))))
                  (g$get-mutators$8837$4aEQL
                    (case-lambda
                      ((g$foo$8922$4aEQL g$fields$8923$4aEQL)
                       (letrec* ((g$gen-name$8924$4aEQL
                                   (case-lambda
                                     ((g$x$8942$4aEQL)
                                      (g$datum->syntax$7698$4aEQL
                                        g$foo$8922$4aEQL
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7699$4aEQL
                                                g$foo$8922$4aEQL))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7699$4aEQL
                                                g$x$8942$4aEQL))
                                            '"-set!")))))))
                         ((letrec ((g$f$8925$4aEQL
                                     (case-lambda
                                       ((g$fields$8926$4aEQL)
                                        ((case-lambda
                                           ((g$t$8927$4aEQL)
                                            ((case-lambda
                                               ((g$ls/false$8928$4aEQL)
                                                (if g$ls/false$8928$4aEQL
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8928$4aEQL)
                                                  ((case-lambda
                                                     ((g$t$8929$4aEQL)
                                                      ((case-lambda
                                                         ((g$ls/false$8930$4aEQL)
                                                          (if g$ls/false$8930$4aEQL
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8931$4aEQL
                                                                   g$accessor$8932$4aEQL
                                                                   g$mutator$8933$4aEQL
                                                                   g$rest$8934$4aEQL)
                                                                 (cons
                                                                   g$mutator$8933$4aEQL
                                                                   (g$f$8925$4aEQL
                                                                     g$rest$8934$4aEQL))))
                                                              g$ls/false$8930$4aEQL)
                                                            ((case-lambda
                                                               ((g$t$8935$4aEQL)
                                                                ((case-lambda
                                                                   ((g$ls/false$8936$4aEQL)
                                                                    (if g$ls/false$8936$4aEQL
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8937$4aEQL
                                                                             g$rest$8938$4aEQL)
                                                                           (cons
                                                                             (g$gen-name$8924$4aEQL
                                                                               g$name$8937$4aEQL)
                                                                             (g$f$8925$4aEQL
                                                                               g$rest$8938$4aEQL))))
                                                                        g$ls/false$8936$4aEQL)
                                                                      ((case-lambda
                                                                         ((g$t$8939$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8940$4aEQL)
                                                                              (if g$ls/false$8940$4aEQL
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8941$4aEQL)
                                                                                     (g$f$8925$4aEQL
                                                                                       g$rest$8941$4aEQL)))
                                                                                  g$ls/false$8940$4aEQL)
                                                                                (g$syntax-violation$7696$4aEQL
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8939$4aEQL))))
                                                                           (g$syntax-dispatch$7585$4aEQL
                                                                             g$t$8939$4aEQL
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8935$4aEQL))))
                                                                 (g$syntax-dispatch$7585$4aEQL
                                                                   g$t$8935$4aEQL
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8929$4aEQL))))
                                                       (g$syntax-dispatch$7585$4aEQL
                                                         g$t$8929$4aEQL
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8927$4aEQL))))
                                             (g$syntax-dispatch$7585$4aEQL
                                               g$t$8927$4aEQL
                                               '()))))
                                         g$fields$8926$4aEQL)))))
                            g$f$8925$4aEQL)
                          g$fields$8923$4aEQL)))))
                  (g$get-accessors$8838$4aEQL
                    (case-lambda
                      ((g$foo$8888$4aEQL g$fields$8889$4aEQL)
                       (letrec* ((g$gen-name$8890$4aEQL
                                   (case-lambda
                                     ((g$x$8921$4aEQL)
                                      (g$datum->syntax$7698$4aEQL
                                        g$foo$8888$4aEQL
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7699$4aEQL
                                                g$foo$8888$4aEQL))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7699$4aEQL
                                                g$x$8921$4aEQL)))))))))
                         (g$map$5048$4aEQL
                           (case-lambda
                             ((g$field$8891$4aEQL)
                              ((case-lambda
                                 ((g$t$8892$4aEQL)
                                  ((case-lambda
                                     ((g$ls/false$8893$4aEQL)
                                      (if (if g$ls/false$8893$4aEQL
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$8894$4aEQL
                                                     g$accessor$8895$4aEQL
                                                     g$mutator$8896$4aEQL)
                                                   (g$id?$7307$4aEQL
                                                     g$accessor$8895$4aEQL)))
                                                g$ls/false$8893$4aEQL))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$8897$4aEQL
                                               g$accessor$8898$4aEQL
                                               g$mutator$8899$4aEQL)
                                             g$accessor$8898$4aEQL))
                                          g$ls/false$8893$4aEQL)
                                        ((case-lambda
                                           ((g$t$8900$4aEQL)
                                            ((case-lambda
                                               ((g$ls/false$8901$4aEQL)
                                                (if (if g$ls/false$8901$4aEQL
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$8902$4aEQL
                                                               g$accessor$8903$4aEQL)
                                                             (g$id?$7307$4aEQL
                                                               g$accessor$8903$4aEQL)))
                                                          g$ls/false$8901$4aEQL))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$8904$4aEQL
                                                         g$accessor$8905$4aEQL)
                                                       g$accessor$8905$4aEQL))
                                                    g$ls/false$8901$4aEQL)
                                                  ((case-lambda
                                                     ((g$t$8906$4aEQL)
                                                      ((case-lambda
                                                         ((g$ls/false$8907$4aEQL)
                                                          (if (if g$ls/false$8907$4aEQL
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$8908$4aEQL)
                                                                       (g$id?$7307$4aEQL
                                                                         g$name$8908$4aEQL)))
                                                                    g$ls/false$8907$4aEQL))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8909$4aEQL)
                                                                 (g$gen-name$8890$4aEQL
                                                                   g$name$8909$4aEQL)))
                                                              g$ls/false$8907$4aEQL)
                                                            ((case-lambda
                                                               ((g$t$8910$4aEQL)
                                                                ((case-lambda
                                                                   ((g$ls/false$8911$4aEQL)
                                                                    (if (if g$ls/false$8911$4aEQL
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$8912$4aEQL)
                                                                                 (g$id?$7307$4aEQL
                                                                                   g$name$8912$4aEQL)))
                                                                              g$ls/false$8911$4aEQL))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8913$4aEQL)
                                                                           (g$gen-name$8890$4aEQL
                                                                             g$name$8913$4aEQL)))
                                                                        g$ls/false$8911$4aEQL)
                                                                      ((case-lambda
                                                                         ((g$t$8914$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8915$4aEQL)
                                                                              (if (if g$ls/false$8915$4aEQL
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$8916$4aEQL)
                                                                                           (g$id?$7307$4aEQL
                                                                                             g$name$8916$4aEQL)))
                                                                                        g$ls/false$8915$4aEQL))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$8917$4aEQL)
                                                                                     (g$gen-name$8890$4aEQL
                                                                                       g$name$8917$4aEQL)))
                                                                                  g$ls/false$8915$4aEQL)
                                                                                ((case-lambda
                                                                                   ((g$t$8918$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$8919$4aEQL)
                                                                                        (if g$ls/false$8919$4aEQL
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$8920$4aEQL)
                                                                                               (g$syntax-violation$7696$4aEQL
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$8891$4aEQL)))
                                                                                            g$ls/false$8919$4aEQL)
                                                                                          (g$syntax-violation$7696$4aEQL
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$8918$4aEQL))))
                                                                                     (g$syntax-dispatch$7585$4aEQL
                                                                                       g$t$8918$4aEQL
                                                                                       'any))))
                                                                                 g$t$8914$4aEQL))))
                                                                           (g$syntax-dispatch$7585$4aEQL
                                                                             g$t$8914$4aEQL
                                                                             'any))))
                                                                       g$t$8910$4aEQL))))
                                                                 (g$syntax-dispatch$7585$4aEQL
                                                                   g$t$8910$4aEQL
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$8906$4aEQL))))
                                                       (g$syntax-dispatch$7585$4aEQL
                                                         g$t$8906$4aEQL
                                                         '(#(scheme-id mutable)
                                                           any)))))
                                                   g$t$8900$4aEQL))))
                                             (g$syntax-dispatch$7585$4aEQL
                                               g$t$8900$4aEQL
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$8892$4aEQL))))
                                   (g$syntax-dispatch$7585$4aEQL
                                     g$t$8892$4aEQL
                                     '(#(scheme-id mutable) any any any)))))
                               g$field$8891$4aEQL)))
                           g$fields$8889$4aEQL)))))
                  (g$enumerate$8839$4aEQL
                    (case-lambda
                      ((g$ls$8884$4aEQL)
                       ((letrec ((g$f$8885$4aEQL
                                   (case-lambda
                                     ((g$ls$8886$4aEQL g$i$8887$4aEQL)
                                      (if (null? g$ls$8886$4aEQL)
                                        '()
                                        (cons
                                          g$i$8887$4aEQL
                                          (g$f$8885$4aEQL
                                            (cdr g$ls$8886$4aEQL)
                                            (+ g$i$8887$4aEQL '1))))))))
                          g$f$8885$4aEQL)
                        g$ls$8884$4aEQL
                        '0))))
                  (g$do-define-record$8840$4aEQL
                    (case-lambda
                      ((g$namespec$8864$4aEQL g$clause*$8865$4aEQL)
                       ((case-lambda
                          ((g$foo$8866$4aEQL)
                           ((case-lambda
                              ((g$foo-rtd$8867$4aEQL)
                               ((case-lambda
                                  ((g$foo-rcd$8868$4aEQL)
                                   ((case-lambda
                                      ((g$protocol$8869$4aEQL)
                                       ((case-lambda
                                          ((g$make-foo$8870$4aEQL)
                                           ((case-lambda
                                              ((g$fields$8871$4aEQL)
                                               ((case-lambda
                                                  ((g$idx*$8872$4aEQL)
                                                   ((case-lambda
                                                      ((g$foo-x*$8873$4aEQL)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8874$4aEQL)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8875$4aEQL)
                                                               ((case-lambda
                                                                  ((g$foo?$8876$4aEQL)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8877$4aEQL)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8878$4aEQL)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8879$4aEQL)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7548$4aEQL
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$8867$4aEQL
                                                                                           g$foo-rtd-code$8877$4aEQL)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$8869$4aEQL
                                                                                             g$protocol-code$8879$4aEQL)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$8868$4aEQL
                                                                                               g$foo-rcd-code$8878$4aEQL)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$8866$4aEQL
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$8867$4aEQL)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$8868$4aEQL)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$8876$4aEQL
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$8867$4aEQL))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$8870$4aEQL
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$8868$4aEQL))
                                                                                                   (append
                                                                                                     (g$map$5048$4aEQL
                                                                                                       (case-lambda
                                                                                                         ((g$foo-x$8880$4aEQL
                                                                                                            g$idx$8881$4aEQL)
                                                                                                          (list
                                                                                                            'define
                                                                                                            g$foo-x$8880$4aEQL
                                                                                                            (list
                                                                                                              'record-accessor
                                                                                                              g$foo-rtd$8867$4aEQL
                                                                                                              g$idx$8881$4aEQL))))
                                                                                                       g$foo-x*$8873$4aEQL
                                                                                                       g$idx*$8872$4aEQL)
                                                                                                     (g$map$5048$4aEQL
                                                                                                       (case-lambda
                                                                                                         ((g$set-foo-x!$8882$4aEQL
                                                                                                            g$idx$8883$4aEQL)
                                                                                                          (list
                                                                                                            'define
                                                                                                            g$set-foo-x!$8882$4aEQL
                                                                                                            (list
                                                                                                              'record-mutator
                                                                                                              g$foo-rtd$8867$4aEQL
                                                                                                              g$idx$8883$4aEQL))))
                                                                                                       g$set-foo-x!*$8874$4aEQL
                                                                                                       g$set-foo-idx*$8875$4aEQL)))))))))))))))
                                                                            (g$get-protocol-code$8834$4aEQL
                                                                              g$clause*$8865$4aEQL))))
                                                                        (g$foo-rcd-code$8833$4aEQL
                                                                          g$clause*$8865$4aEQL
                                                                          g$foo-rtd$8867$4aEQL
                                                                          g$protocol$8869$4aEQL
                                                                          (g$parent-rcd-code$8832$4aEQL
                                                                            g$clause*$8865$4aEQL)))))
                                                                    (g$foo-rtd-code$8830$4aEQL
                                                                      g$foo$8866$4aEQL
                                                                      g$clause*$8865$4aEQL
                                                                      (g$parent-rtd-code$8831$4aEQL
                                                                        g$clause*$8865$4aEQL)))))
                                                                (g$get-record-predicate-name$8828$4aEQL
                                                                  g$namespec$8864$4aEQL))))
                                                            (g$get-mutator-indices$8836$4aEQL
                                                              g$fields$8871$4aEQL))))
                                                        (g$get-mutators$8837$4aEQL
                                                          g$foo$8866$4aEQL
                                                          g$fields$8871$4aEQL))))
                                                    (g$get-accessors$8838$4aEQL
                                                      g$foo$8866$4aEQL
                                                      g$fields$8871$4aEQL))))
                                                (g$enumerate$8839$4aEQL
                                                  g$fields$8871$4aEQL))))
                                            (g$get-fields$8835$4aEQL
                                              g$clause*$8865$4aEQL))))
                                        (g$get-record-constructor-name$8827$4aEQL
                                          g$namespec$8864$4aEQL))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8826$4aEQL g$namespec$8864$4aEQL)))))
                  (g$verify-clauses$8841$4aEQL
                    (case-lambda
                      ((g$x$8846$4aEQL g$cls*$8847$4aEQL)
                       (letrec* ((g$valid-kwds$8848$4aEQL
                                   (g$map$5048$4aEQL
                                     g$bless$7548$4aEQL
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$8849$4aEQL
                                   (case-lambda
                                     ((g$x$8861$4aEQL g$ls$8862$4aEQL)
                                      (if (pair? g$ls$8862$4aEQL)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8863$4aEQL)
                                              (if g$t$8863$4aEQL
                                                g$t$8863$4aEQL
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8849$4aEQL
                                                    g$x$8861$4aEQL
                                                    (cdr g$ls$8862$4aEQL))))))
                                           (g$free-id=?$7311$4aEQL
                                             g$x$8861$4aEQL
                                             (car g$ls$8862$4aEQL))))
                                        '#f)))))
                         ((letrec ((g$f$8850$4aEQL
                                     (case-lambda
                                       ((g$cls*$8851$4aEQL g$seen*$8852$4aEQL)
                                        (if (not (null? g$cls*$8851$4aEQL))
                                          ((case-lambda
                                             ((g$t$8853$4aEQL)
                                              ((case-lambda
                                                 ((g$ls/false$8854$4aEQL)
                                                  (if g$ls/false$8854$4aEQL
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8855$4aEQL
                                                           g$rest$8856$4aEQL)
                                                         (if ((case-lambda
                                                                ((g$t$8857$4aEQL)
                                                                 (if g$t$8857$4aEQL
                                                                   g$t$8857$4aEQL
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8849$4aEQL
                                                                            g$kwd$8855$4aEQL
                                                                            g$valid-kwds$8848$4aEQL))))))
                                                              (not (g$id?$7307$4aEQL
                                                                     g$kwd$8855$4aEQL)))
                                                           (g$syntax-violation$7696$4aEQL
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8855$4aEQL)
                                                           (if (g$bound-id-member?$7314$4aEQL
                                                                 g$kwd$8855$4aEQL
                                                                 g$seen*$8852$4aEQL)
                                                             (g$syntax-violation$7696$4aEQL
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8846$4aEQL
                                                               g$kwd$8855$4aEQL)
                                                             (g$f$8850$4aEQL
                                                               (cdr g$cls*$8851$4aEQL)
                                                               (cons
                                                                 g$kwd$8855$4aEQL
                                                                 g$seen*$8852$4aEQL))))))
                                                      g$ls/false$8854$4aEQL)
                                                    ((case-lambda
                                                       ((g$t$8858$4aEQL)
                                                        ((case-lambda
                                                           ((g$ls/false$8859$4aEQL)
                                                            (if g$ls/false$8859$4aEQL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8860$4aEQL)
                                                                   (g$syntax-violation$7696$4aEQL
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8860$4aEQL)))
                                                                g$ls/false$8859$4aEQL)
                                                              (g$syntax-violation$7696$4aEQL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8858$4aEQL))))
                                                         (g$syntax-dispatch$7585$4aEQL
                                                           g$t$8858$4aEQL
                                                           'any))))
                                                     g$t$8853$4aEQL))))
                                               (g$syntax-dispatch$7585$4aEQL
                                                 g$t$8853$4aEQL
                                                 '(any . any)))))
                                           (car g$cls*$8851$4aEQL))
                                          (void))))))
                            g$f$8850$4aEQL)
                          g$cls*$8847$4aEQL
                          '()))))))
          ((case-lambda
             ((g$t$8842$4aEQL)
              ((case-lambda
                 ((g$ls/false$8843$4aEQL)
                  (if g$ls/false$8843$4aEQL
                    (apply
                      (case-lambda
                        ((g$namespec$8844$4aEQL g$clause*$8845$4aEQL)
                         (begin
                           (g$verify-clauses$8841$4aEQL
                             g$x$8824$4aEQL
                             g$clause*$8845$4aEQL)
                           (g$do-define-record$8840$4aEQL
                             g$namespec$8844$4aEQL
                             g$clause*$8845$4aEQL))))
                      g$ls/false$8843$4aEQL)
                    (g$syntax-violation$7696$4aEQL
                      '#f
                      '"invalid syntax"
                      g$t$8842$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL
                 g$t$8842$4aEQL
                 '(_ any . each-any)))))
           g$x$8824$4aEQL)))))
   (g$define-condition-type-macro$7580$4aEQL
     g$define-condition-type-macro$11071$4aEQL
     (case-lambda
       ((g$x$9080$4aEQL)
        (letrec* ((g$mkname$9081$4aEQL
                    (case-lambda
                      ((g$name$9104$4aEQL g$suffix$9105$4aEQL)
                       (g$datum->syntax$7698$4aEQL
                         g$name$9104$4aEQL
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7699$4aEQL g$name$9104$4aEQL))
                             g$suffix$9105$4aEQL)))))))
          ((case-lambda
             ((g$t$9082$4aEQL)
              ((case-lambda
                 ((g$ls/false$9083$4aEQL)
                  (if (if g$ls/false$9083$4aEQL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9084$4aEQL
                                 g$name$9085$4aEQL
                                 g$super$9086$4aEQL
                                 g$constructor$9087$4aEQL
                                 g$predicate$9088$4aEQL
                                 g$field*$9089$4aEQL
                                 g$accessor*$9090$4aEQL)
                               (if (g$id?$7307$4aEQL g$name$9085$4aEQL)
                                 (if (g$id?$7307$4aEQL g$super$9086$4aEQL)
                                   (if (g$id?$7307$4aEQL
                                         g$constructor$9087$4aEQL)
                                     (if (g$id?$7307$4aEQL
                                           g$predicate$9088$4aEQL)
                                       (if (g$for-all$5046$4aEQL
                                             g$id?$7307$4aEQL
                                             g$field*$9089$4aEQL)
                                         (begin
                                           '#f
                                           (g$for-all$5046$4aEQL
                                             g$id?$7307$4aEQL
                                             g$accessor*$9090$4aEQL))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9083$4aEQL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9091$4aEQL
                           g$name$9092$4aEQL
                           g$super$9093$4aEQL
                           g$constructor$9094$4aEQL
                           g$predicate$9095$4aEQL
                           g$field*$9096$4aEQL
                           g$accessor*$9097$4aEQL)
                         ((case-lambda
                            ((g$aux-accessor*$9098$4aEQL)
                             (g$bless$7548$4aEQL
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9092$4aEQL
                                         g$constructor$9094$4aEQL
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9093$4aEQL)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5048$4aEQL
                                               (case-lambda
                                                 ((g$field$9099$4aEQL
                                                    g$aux$9100$4aEQL)
                                                  (list
                                                    'immutable
                                                    g$field$9099$4aEQL
                                                    g$aux$9100$4aEQL)))
                                               g$field*$9096$4aEQL
                                               g$aux-accessor*$9098$4aEQL))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9095$4aEQL
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9092$4aEQL)))
                                     (g$map$5048$4aEQL
                                       (case-lambda
                                         ((g$accessor$9101$4aEQL
                                            g$aux$9102$4aEQL)
                                          (list
                                            'define
                                            g$accessor$9101$4aEQL
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$9092$4aEQL)
                                              g$aux$9102$4aEQL))))
                                       g$accessor*$9097$4aEQL
                                       g$aux-accessor*$9098$4aEQL)))))))
                          (g$map$5048$4aEQL
                            (case-lambda ((g$x$9103$4aEQL) (gensym)))
                            g$accessor*$9097$4aEQL))))
                      g$ls/false$9083$4aEQL)
                    (g$syntax-violation$7696$4aEQL
                      '#f
                      '"invalid syntax"
                      g$t$9082$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL
                 g$t$9082$4aEQL
                 '(any any any any any . #(each (any any)))))))
           g$x$9080$4aEQL)))))
   (g$incorrect-usage-macro$7581$4aEQL
     g$incorrect-usage-macro$11072$4aEQL
     (case-lambda
       ((g$e$9106$4aEQL)
        (g$syntax-violation$7696$4aEQL
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9106$4aEQL))))
   (g$parameterize-macro$7582$4aEQL
     g$parameterize-macro$11073$4aEQL
     (case-lambda
       ((g$e$9107$4aEQL)
        ((case-lambda
           ((g$t$9108$4aEQL)
            ((case-lambda
               ((g$ls/false$9109$4aEQL)
                (if g$ls/false$9109$4aEQL
                  (apply
                    (case-lambda
                      ((g$b$9110$4aEQL g$b*$9111$4aEQL)
                       (g$bless$7548$4aEQL
                         (cons
                           'let
                           (cons '() (cons g$b$9110$4aEQL g$b*$9111$4aEQL))))))
                    g$ls/false$9109$4aEQL)
                  ((case-lambda
                     ((g$t$9112$4aEQL)
                      ((case-lambda
                         ((g$ls/false$9113$4aEQL)
                          (if g$ls/false$9113$4aEQL
                            (apply
                              (case-lambda
                                ((g$olhs*$9114$4aEQL
                                   g$orhs*$9115$4aEQL
                                   g$b$9116$4aEQL
                                   g$b*$9117$4aEQL)
                                 ((case-lambda
                                    ((g$lhs*$9118$4aEQL g$rhs*$9119$4aEQL)
                                     (g$bless$7548$4aEQL
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9118$4aEQL
                                             g$rhs*$9119$4aEQL)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5048$4aEQL
                                                       (case-lambda
                                                         ((g$lhs$9120$4aEQL
                                                            g$rhs$9121$4aEQL)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$9120$4aEQL)))
                                                            (list
                                                              g$lhs$9120$4aEQL
                                                              g$rhs$9121$4aEQL)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$9121$4aEQL
                                                                '(t))))))
                                                       g$lhs*$9118$4aEQL
                                                       g$rhs*$9119$4aEQL)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9116$4aEQL
                                                         g$b*$9117$4aEQL)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9114$4aEQL
                                           g$orhs*$9115$4aEQL)))))
                                  (g$generate-temporaries$7686$4aEQL
                                    g$olhs*$9114$4aEQL)
                                  (g$generate-temporaries$7686$4aEQL
                                    g$orhs*$9115$4aEQL))))
                              g$ls/false$9113$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$9112$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$9112$4aEQL
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9108$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$9108$4aEQL
               '(_ () any . each-any)))))
         g$e$9107$4aEQL))))
   (g$foreign-call-transformer$7583$4aEQL
     g$foreign-call-transformer$11074$4aEQL
     (case-lambda
       ((g$e$9122$4aEQL g$r$9123$4aEQL g$mr$9124$4aEQL)
        ((case-lambda
           ((g$t$9125$4aEQL)
            ((case-lambda
               ((g$ls/false$9126$4aEQL)
                (if g$ls/false$9126$4aEQL
                  (apply
                    (case-lambda
                      ((g$name$9127$4aEQL g$arg*$9128$4aEQL)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7603$4aEQL
                             g$name$9127$4aEQL
                             g$r$9123$4aEQL
                             g$mr$9124$4aEQL)
                           (g$chi-expr*$7601$4aEQL
                             g$arg*$9128$4aEQL
                             g$r$9123$4aEQL
                             g$mr$9124$4aEQL)))))
                    g$ls/false$9126$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$9125$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$9125$4aEQL
               '(_ any . each-any)))))
         g$e$9122$4aEQL))))
   (g$convert-pattern$7584$4aEQL
     g$convert-pattern$11075$4aEQL
     (case-lambda
       ((g$pattern$9129$4aEQL g$keys$9130$4aEQL)
        (letrec* ((g$cvt*$9131$4aEQL
                    (case-lambda
                      ((g$p*$9211$4aEQL g$n$9212$4aEQL g$ids$9213$4aEQL)
                       (if (null? g$p*$9211$4aEQL)
                         (values '() g$ids$9213$4aEQL)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9131$4aEQL
                                (cdr g$p*$9211$4aEQL)
                                g$n$9212$4aEQL
                                g$ids$9213$4aEQL)))
                           (case-lambda
                             ((g$y$9216$4aEQL g$ids$9217$4aEQL)
                              ((case-lambda
                                 ((g$ids$9218$4aEQL g$y$9219$4aEQL)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9132$4aEQL
                                         (car g$p*$9211$4aEQL)
                                         g$n$9212$4aEQL
                                         g$ids$9218$4aEQL)))
                                    (case-lambda
                                      ((g$x$9222$4aEQL g$ids$9223$4aEQL)
                                       ((case-lambda
                                          ((g$ids$9224$4aEQL g$x$9225$4aEQL)
                                           (values
                                             (cons
                                               g$x$9225$4aEQL
                                               g$y$9219$4aEQL)
                                             g$ids$9224$4aEQL)))
                                        g$ids$9223$4aEQL
                                        g$x$9222$4aEQL))))))
                               g$ids$9217$4aEQL
                               g$y$9216$4aEQL))))))))
                  (g$cvt$9132$4aEQL
                    (case-lambda
                      ((g$p$9133$4aEQL g$n$9134$4aEQL g$ids$9135$4aEQL)
                       ((case-lambda
                          ((g$t$9136$4aEQL)
                           ((case-lambda
                              ((g$ls/false$9137$4aEQL)
                               (if (if g$ls/false$9137$4aEQL
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9138$4aEQL)
                                            (g$id?$7307$4aEQL g$id$9138$4aEQL)))
                                         g$ls/false$9137$4aEQL))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9139$4aEQL)
                                      (if (g$bound-id-member?$7314$4aEQL
                                            g$p$9133$4aEQL
                                            g$keys$9130$4aEQL)
                                        (values
                                          (vector 'free-id g$p$9133$4aEQL)
                                          g$ids$9135$4aEQL)
                                        (if (g$free-id=?$7311$4aEQL
                                              g$p$9133$4aEQL
                                              (g$scheme-stx$7528$4aEQL '_))
                                          (values '_ g$ids$9135$4aEQL)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9133$4aEQL
                                                g$n$9134$4aEQL)
                                              g$ids$9135$4aEQL))))))
                                   g$ls/false$9137$4aEQL)
                                 ((case-lambda
                                    ((g$t$9140$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$9141$4aEQL)
                                         (if (if g$ls/false$9141$4aEQL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9142$4aEQL
                                                        g$dots$9143$4aEQL)
                                                      (g$ellipsis?$7586$4aEQL
                                                        g$dots$9143$4aEQL)))
                                                   g$ls/false$9141$4aEQL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9144$4aEQL
                                                  g$dots$9145$4aEQL)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9132$4aEQL
                                                       g$p$9144$4aEQL
                                                       (+ g$n$9134$4aEQL '1)
                                                       g$ids$9135$4aEQL)))
                                                  (case-lambda
                                                    ((g$p$9148$4aEQL
                                                       g$ids$9149$4aEQL)
                                                     ((case-lambda
                                                        ((g$ids$9150$4aEQL
                                                           g$p$9151$4aEQL)
                                                         (values
                                                           (if (eq? g$p$9151$4aEQL
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9151$4aEQL))
                                                           g$ids$9150$4aEQL)))
                                                      g$ids$9149$4aEQL
                                                      g$p$9148$4aEQL))))))
                                             g$ls/false$9141$4aEQL)
                                           ((case-lambda
                                              ((g$t$9152$4aEQL)
                                               ((case-lambda
                                                  ((g$ls/false$9153$4aEQL)
                                                   (if (if g$ls/false$9153$4aEQL
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9154$4aEQL
                                                                  g$dots$9155$4aEQL
                                                                  g$ys$9156$4aEQL
                                                                  g$z$9157$4aEQL)
                                                                (g$ellipsis?$7586$4aEQL
                                                                  g$dots$9155$4aEQL)))
                                                             g$ls/false$9153$4aEQL))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9158$4aEQL
                                                            g$dots$9159$4aEQL
                                                            g$ys$9160$4aEQL
                                                            g$z$9161$4aEQL)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9132$4aEQL
                                                                 g$z$9161$4aEQL
                                                                 g$n$9134$4aEQL
                                                                 g$ids$9135$4aEQL)))
                                                            (case-lambda
                                                              ((g$z$9164$4aEQL
                                                                 g$ids$9165$4aEQL)
                                                               ((case-lambda
                                                                  ((g$ids$9166$4aEQL
                                                                     g$z$9167$4aEQL)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9131$4aEQL
                                                                          g$ys$9160$4aEQL
                                                                          g$n$9134$4aEQL
                                                                          g$ids$9166$4aEQL)))
                                                                     (case-lambda
                                                                       ((g$ys$9170$4aEQL
                                                                          g$ids$9171$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$ids$9172$4aEQL
                                                                              g$ys$9173$4aEQL)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9132$4aEQL
                                                                                   g$x$9158$4aEQL
                                                                                   (+ g$n$9134$4aEQL
                                                                                      '1)
                                                                                   g$ids$9172$4aEQL)))
                                                                              (case-lambda
                                                                                ((g$x$9176$4aEQL
                                                                                   g$ids$9177$4aEQL)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9178$4aEQL
                                                                                       g$x$9179$4aEQL)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9179$4aEQL
                                                                                         (reverse
                                                                                           g$ys$9173$4aEQL)
                                                                                         g$z$9167$4aEQL)
                                                                                       g$ids$9178$4aEQL)))
                                                                                  g$ids$9177$4aEQL
                                                                                  g$x$9176$4aEQL))))))
                                                                         g$ids$9171$4aEQL
                                                                         g$ys$9170$4aEQL))))))
                                                                g$ids$9165$4aEQL
                                                                g$z$9164$4aEQL))))))
                                                       g$ls/false$9153$4aEQL)
                                                     ((case-lambda
                                                        ((g$t$9180$4aEQL)
                                                         ((case-lambda
                                                            ((g$ls/false$9181$4aEQL)
                                                             (if g$ls/false$9181$4aEQL
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9182$4aEQL
                                                                      g$y$9183$4aEQL)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9132$4aEQL
                                                                           g$y$9183$4aEQL
                                                                           g$n$9134$4aEQL
                                                                           g$ids$9135$4aEQL)))
                                                                      (case-lambda
                                                                        ((g$y$9186$4aEQL
                                                                           g$ids$9187$4aEQL)
                                                                         ((case-lambda
                                                                            ((g$ids$9188$4aEQL
                                                                               g$y$9189$4aEQL)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9132$4aEQL
                                                                                    g$x$9182$4aEQL
                                                                                    g$n$9134$4aEQL
                                                                                    g$ids$9188$4aEQL)))
                                                                               (case-lambda
                                                                                 ((g$x$9192$4aEQL
                                                                                    g$ids$9193$4aEQL)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9194$4aEQL
                                                                                        g$x$9195$4aEQL)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9195$4aEQL
                                                                                          g$y$9189$4aEQL)
                                                                                        g$ids$9194$4aEQL)))
                                                                                   g$ids$9193$4aEQL
                                                                                   g$x$9192$4aEQL))))))
                                                                          g$ids$9187$4aEQL
                                                                          g$y$9186$4aEQL))))))
                                                                 g$ls/false$9181$4aEQL)
                                                               ((case-lambda
                                                                  ((g$t$9196$4aEQL)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9197$4aEQL)
                                                                       (if g$ls/false$9197$4aEQL
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9135$4aEQL)))
                                                                           g$ls/false$9197$4aEQL)
                                                                         ((case-lambda
                                                                            ((g$t$9198$4aEQL)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9199$4aEQL)
                                                                                 (if (if g$ls/false$9199$4aEQL
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9200$4aEQL)
                                                                                              (not (g$stx?$7279$4aEQL
                                                                                                     g$p$9200$4aEQL))))
                                                                                           g$ls/false$9199$4aEQL))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9201$4aEQL)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9132$4aEQL
                                                                                               g$p$9201$4aEQL
                                                                                               g$n$9134$4aEQL
                                                                                               g$ids$9135$4aEQL)))
                                                                                          (case-lambda
                                                                                            ((g$p$9204$4aEQL
                                                                                               g$ids$9205$4aEQL)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9206$4aEQL
                                                                                                   g$p$9207$4aEQL)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9207$4aEQL)
                                                                                                   g$ids$9206$4aEQL)))
                                                                                              g$ids$9205$4aEQL
                                                                                              g$p$9204$4aEQL))))))
                                                                                     g$ls/false$9199$4aEQL)
                                                                                   ((case-lambda
                                                                                      ((g$t$9208$4aEQL)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9209$4aEQL)
                                                                                           (if g$ls/false$9209$4aEQL
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9210$4aEQL)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7318$4aEQL
                                                                                                        g$datum$9210$4aEQL))
                                                                                                    g$ids$9135$4aEQL)))
                                                                                               g$ls/false$9209$4aEQL)
                                                                                             (g$syntax-violation$7696$4aEQL
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9208$4aEQL))))
                                                                                        (g$syntax-dispatch$7585$4aEQL
                                                                                          g$t$9208$4aEQL
                                                                                          'any))))
                                                                                    g$t$9198$4aEQL))))
                                                                              (g$syntax-dispatch$7585$4aEQL
                                                                                g$t$9198$4aEQL
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9196$4aEQL))))
                                                                    (g$syntax-dispatch$7585$4aEQL
                                                                      g$t$9196$4aEQL
                                                                      '()))))
                                                                g$t$9180$4aEQL))))
                                                          (g$syntax-dispatch$7585$4aEQL
                                                            g$t$9180$4aEQL
                                                            '(any . any)))))
                                                      g$t$9152$4aEQL))))
                                                (g$syntax-dispatch$7585$4aEQL
                                                  g$t$9152$4aEQL
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9140$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$9140$4aEQL
                                        '(any any)))))
                                  g$t$9136$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$9136$4aEQL
                              'any))))
                        g$p$9133$4aEQL)))))
          (g$cvt$9132$4aEQL g$pattern$9129$4aEQL '0 '())))))
   (g$syntax-dispatch$7585$4aEQL
     g$syntax-dispatch$11076$4aEQL
     ((case-lambda
        (()
         (letrec* ((g$stx^$9226$4aEQL
                     (case-lambda
                       ((g$e$9336$4aEQL
                          g$m*$9337$4aEQL
                          g$s*$9338$4aEQL
                          g$ae*$9339$4aEQL)
                        (if (if (null? g$m*$9337$4aEQL)
                              (if (null? g$s*$9338$4aEQL)
                                (begin '#f (null? g$ae*$9339$4aEQL))
                                '#f)
                              '#f)
                          g$e$9336$4aEQL
                          (g$mkstx$7295$4aEQL
                            g$e$9336$4aEQL
                            g$m*$9337$4aEQL
                            g$s*$9338$4aEQL
                            g$ae*$9339$4aEQL)))))
                   (g$match-each$9227$4aEQL
                     (case-lambda
                       ((g$e$9320$4aEQL
                          g$p$9321$4aEQL
                          g$m*$9322$4aEQL
                          g$s*$9323$4aEQL
                          g$ae*$9324$4aEQL)
                        (if (pair? g$e$9320$4aEQL)
                          ((case-lambda
                             ((g$first$9325$4aEQL)
                              (if g$first$9325$4aEQL
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9326$4aEQL)
                                      (if g$rest$9326$4aEQL
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9325$4aEQL
                                            g$rest$9326$4aEQL))
                                        '#f)))
                                   (g$match-each$9227$4aEQL
                                     (cdr g$e$9320$4aEQL)
                                     g$p$9321$4aEQL
                                     g$m*$9322$4aEQL
                                     g$s*$9323$4aEQL
                                     g$ae*$9324$4aEQL)))
                                '#f)))
                           (g$match$9233$4aEQL
                             (car g$e$9320$4aEQL)
                             g$p$9321$4aEQL
                             g$m*$9322$4aEQL
                             g$s*$9323$4aEQL
                             g$ae*$9324$4aEQL
                             '()))
                          (if (null? g$e$9320$4aEQL)
                            '()
                            (if (g$stx?$7279$4aEQL g$e$9320$4aEQL)
                              (if (not (g$top-marked?$7245$4aEQL
                                         g$m*$9322$4aEQL))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7294$4aEQL
                                         g$m*$9322$4aEQL
                                         g$s*$9323$4aEQL
                                         g$ae*$9324$4aEQL
                                         g$e$9320$4aEQL)))
                                    (case-lambda
                                      ((g$m*$9330$4aEQL
                                         g$s*$9331$4aEQL
                                         g$ae*$9332$4aEQL)
                                       ((case-lambda
                                          ((g$ae*$9333$4aEQL
                                             g$s*$9334$4aEQL
                                             g$m*$9335$4aEQL)
                                           (g$match-each$9227$4aEQL
                                             (g$stx-expr$7281$4aEQL
                                               g$e$9320$4aEQL)
                                             g$p$9321$4aEQL
                                             g$m*$9335$4aEQL
                                             g$s*$9334$4aEQL
                                             g$ae*$9333$4aEQL)))
                                        g$ae*$9332$4aEQL
                                        g$s*$9331$4aEQL
                                        g$m*$9330$4aEQL)))))
                                '#f)
                              (if (annotation? g$e$9320$4aEQL)
                                (g$match-each$9227$4aEQL
                                  (annotation-expression g$e$9320$4aEQL)
                                  g$p$9321$4aEQL
                                  g$m*$9322$4aEQL
                                  g$s*$9323$4aEQL
                                  g$ae*$9324$4aEQL)
                                '#f)))))))
                   (g$match-each+$9228$4aEQL
                     (case-lambda
                       ((g$e$9288$4aEQL
                          g$x-pat$9289$4aEQL
                          g$y-pat$9290$4aEQL
                          g$z-pat$9291$4aEQL
                          g$m*$9292$4aEQL
                          g$s*$9293$4aEQL
                          g$ae*$9294$4aEQL
                          g$r$9295$4aEQL)
                        ((letrec ((g$f$9296$4aEQL
                                    (case-lambda
                                      ((g$e$9297$4aEQL
                                         g$m*$9298$4aEQL
                                         g$s*$9299$4aEQL
                                         g$ae*$9300$4aEQL)
                                       (if (pair? g$e$9297$4aEQL)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9296$4aEQL
                                                (cdr g$e$9297$4aEQL)
                                                g$m*$9298$4aEQL
                                                g$s*$9299$4aEQL
                                                g$ae*$9300$4aEQL)))
                                           (case-lambda
                                             ((g$xr*$9304$4aEQL
                                                g$y-pat$9305$4aEQL
                                                g$r$9306$4aEQL)
                                              ((case-lambda
                                                 ((g$r$9307$4aEQL
                                                    g$y-pat$9308$4aEQL
                                                    g$xr*$9309$4aEQL)
                                                  (if g$r$9307$4aEQL
                                                    (if (null?
                                                          g$y-pat$9308$4aEQL)
                                                      ((case-lambda
                                                         ((g$xr$9310$4aEQL)
                                                          (if g$xr$9310$4aEQL
                                                            (values
                                                              (cons
                                                                g$xr$9310$4aEQL
                                                                g$xr*$9309$4aEQL)
                                                              g$y-pat$9308$4aEQL
                                                              g$r$9307$4aEQL)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9233$4aEQL
                                                         (car g$e$9297$4aEQL)
                                                         g$x-pat$9289$4aEQL
                                                         g$m*$9298$4aEQL
                                                         g$s*$9299$4aEQL
                                                         g$ae*$9300$4aEQL
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9308$4aEQL)
                                                        (g$match$9233$4aEQL
                                                          (car g$e$9297$4aEQL)
                                                          (car g$y-pat$9308$4aEQL)
                                                          g$m*$9298$4aEQL
                                                          g$s*$9299$4aEQL
                                                          g$ae*$9300$4aEQL
                                                          g$r$9307$4aEQL)))
                                                    (values '#f '#f '#f))))
                                               g$r$9306$4aEQL
                                               g$y-pat$9305$4aEQL
                                               g$xr*$9304$4aEQL))))
                                         (if (g$stx?$7279$4aEQL g$e$9297$4aEQL)
                                           (if (g$top-marked?$7245$4aEQL
                                                 g$m*$9298$4aEQL)
                                             (values
                                               '()
                                               g$y-pat$9290$4aEQL
                                               (g$match$9233$4aEQL
                                                 g$e$9297$4aEQL
                                                 g$z-pat$9291$4aEQL
                                                 g$m*$9298$4aEQL
                                                 g$s*$9299$4aEQL
                                                 g$ae*$9300$4aEQL
                                                 g$r$9295$4aEQL))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7294$4aEQL
                                                    g$m*$9298$4aEQL
                                                    g$s*$9299$4aEQL
                                                    g$ae*$9300$4aEQL
                                                    g$e$9297$4aEQL)))
                                               (case-lambda
                                                 ((g$m*$9314$4aEQL
                                                    g$s*$9315$4aEQL
                                                    g$ae*$9316$4aEQL)
                                                  ((case-lambda
                                                     ((g$ae*$9317$4aEQL
                                                        g$s*$9318$4aEQL
                                                        g$m*$9319$4aEQL)
                                                      (g$f$9296$4aEQL
                                                        (g$stx-expr$7281$4aEQL
                                                          g$e$9297$4aEQL)
                                                        g$m*$9319$4aEQL
                                                        g$s*$9318$4aEQL
                                                        g$ae*$9317$4aEQL)))
                                                   g$ae*$9316$4aEQL
                                                   g$s*$9315$4aEQL
                                                   g$m*$9314$4aEQL)))))
                                           (if (annotation? g$e$9297$4aEQL)
                                             (g$f$9296$4aEQL
                                               (annotation-expression
                                                 g$e$9297$4aEQL)
                                               g$m*$9298$4aEQL
                                               g$s*$9299$4aEQL
                                               g$ae*$9300$4aEQL)
                                             (values
                                               '()
                                               g$y-pat$9290$4aEQL
                                               (g$match$9233$4aEQL
                                                 g$e$9297$4aEQL
                                                 g$z-pat$9291$4aEQL
                                                 g$m*$9298$4aEQL
                                                 g$s*$9299$4aEQL
                                                 g$ae*$9300$4aEQL
                                                 g$r$9295$4aEQL)))))))))
                           g$f$9296$4aEQL)
                         g$e$9288$4aEQL
                         g$m*$9292$4aEQL
                         g$s*$9293$4aEQL
                         g$ae*$9294$4aEQL))))
                   (g$match-each-any$9229$4aEQL
                     (case-lambda
                       ((g$e$9274$4aEQL
                          g$m*$9275$4aEQL
                          g$s*$9276$4aEQL
                          g$ae*$9277$4aEQL)
                        (if (pair? g$e$9274$4aEQL)
                          ((case-lambda
                             ((g$l$9278$4aEQL)
                              (if g$l$9278$4aEQL
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9226$4aEQL
                                      (car g$e$9274$4aEQL)
                                      g$m*$9275$4aEQL
                                      g$s*$9276$4aEQL
                                      g$ae*$9277$4aEQL)
                                    g$l$9278$4aEQL))
                                '#f)))
                           (g$match-each-any$9229$4aEQL
                             (cdr g$e$9274$4aEQL)
                             g$m*$9275$4aEQL
                             g$s*$9276$4aEQL
                             g$ae*$9277$4aEQL))
                          (if (null? g$e$9274$4aEQL)
                            '()
                            (if (g$stx?$7279$4aEQL g$e$9274$4aEQL)
                              (if (not (g$top-marked?$7245$4aEQL
                                         g$m*$9275$4aEQL))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7294$4aEQL
                                         g$m*$9275$4aEQL
                                         g$s*$9276$4aEQL
                                         g$ae*$9277$4aEQL
                                         g$e$9274$4aEQL)))
                                    (case-lambda
                                      ((g$m*$9282$4aEQL
                                         g$s*$9283$4aEQL
                                         g$ae*$9284$4aEQL)
                                       ((case-lambda
                                          ((g$ae*$9285$4aEQL
                                             g$s*$9286$4aEQL
                                             g$m*$9287$4aEQL)
                                           (g$match-each-any$9229$4aEQL
                                             (g$stx-expr$7281$4aEQL
                                               g$e$9274$4aEQL)
                                             g$m*$9287$4aEQL
                                             g$s*$9286$4aEQL
                                             g$ae*$9285$4aEQL)))
                                        g$ae*$9284$4aEQL
                                        g$s*$9283$4aEQL
                                        g$m*$9282$4aEQL)))))
                                '#f)
                              (if (annotation? g$e$9274$4aEQL)
                                (g$match-each-any$9229$4aEQL
                                  (annotation-expression g$e$9274$4aEQL)
                                  g$m*$9275$4aEQL
                                  g$s*$9276$4aEQL
                                  g$ae*$9277$4aEQL)
                                '#f)))))))
                   (g$match-empty$9230$4aEQL
                     (case-lambda
                       ((g$p$9271$4aEQL g$r$9272$4aEQL)
                        (if (null? g$p$9271$4aEQL)
                          g$r$9272$4aEQL
                          (if (eq? g$p$9271$4aEQL '_)
                            g$r$9272$4aEQL
                            (if (eq? g$p$9271$4aEQL 'any)
                              (cons '() g$r$9272$4aEQL)
                              (if (pair? g$p$9271$4aEQL)
                                (g$match-empty$9230$4aEQL
                                  (car g$p$9271$4aEQL)
                                  (g$match-empty$9230$4aEQL
                                    (cdr g$p$9271$4aEQL)
                                    g$r$9272$4aEQL))
                                (if (eq? g$p$9271$4aEQL 'each-any)
                                  (cons '() g$r$9272$4aEQL)
                                  ((case-lambda
                                     ((g$t$9273$4aEQL)
                                      (if (g$memv$5041$4aEQL
                                            g$t$9273$4aEQL
                                            '(each))
                                        (g$match-empty$9230$4aEQL
                                          (vector-ref g$p$9271$4aEQL '1)
                                          g$r$9272$4aEQL)
                                        (if (g$memv$5041$4aEQL
                                              g$t$9273$4aEQL
                                              '(each+))
                                          (g$match-empty$9230$4aEQL
                                            (vector-ref g$p$9271$4aEQL '1)
                                            (g$match-empty$9230$4aEQL
                                              (reverse
                                                (vector-ref g$p$9271$4aEQL '2))
                                              (g$match-empty$9230$4aEQL
                                                (vector-ref g$p$9271$4aEQL '3)
                                                g$r$9272$4aEQL)))
                                          (if (g$memv$5041$4aEQL
                                                g$t$9273$4aEQL
                                                '(free-id atom))
                                            g$r$9272$4aEQL
                                            (if (g$memv$5041$4aEQL
                                                  g$t$9273$4aEQL
                                                  '(scheme-id atom))
                                              g$r$9272$4aEQL
                                              (if (g$memv$5041$4aEQL
                                                    g$t$9273$4aEQL
                                                    '(vector))
                                                (g$match-empty$9230$4aEQL
                                                  (vector-ref g$p$9271$4aEQL '1)
                                                  g$r$9272$4aEQL)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9271$4aEQL))))))))
                                   (vector-ref g$p$9271$4aEQL '0))))))))))
                   (g$combine$9231$4aEQL
                     (case-lambda
                       ((g$r*$9269$4aEQL g$r$9270$4aEQL)
                        (if (null? (car g$r*$9269$4aEQL))
                          g$r$9270$4aEQL
                          (cons
                            (g$map$5048$4aEQL car g$r*$9269$4aEQL)
                            (g$combine$9231$4aEQL
                              (g$map$5048$4aEQL cdr g$r*$9269$4aEQL)
                              g$r$9270$4aEQL))))))
                   (g$match*$9232$4aEQL
                     (case-lambda
                       ((g$e$9251$4aEQL
                          g$p$9252$4aEQL
                          g$m*$9253$4aEQL
                          g$s*$9254$4aEQL
                          g$ae*$9255$4aEQL
                          g$r$9256$4aEQL)
                        (if (null? g$p$9252$4aEQL)
                          (if (null? g$e$9251$4aEQL)
                            (begin '#f g$r$9256$4aEQL)
                            '#f)
                          (if (pair? g$p$9252$4aEQL)
                            (if (pair? g$e$9251$4aEQL)
                              (begin
                                '#f
                                (g$match$9233$4aEQL
                                  (car g$e$9251$4aEQL)
                                  (car g$p$9252$4aEQL)
                                  g$m*$9253$4aEQL
                                  g$s*$9254$4aEQL
                                  g$ae*$9255$4aEQL
                                  (g$match$9233$4aEQL
                                    (cdr g$e$9251$4aEQL)
                                    (cdr g$p$9252$4aEQL)
                                    g$m*$9253$4aEQL
                                    g$s*$9254$4aEQL
                                    g$ae*$9255$4aEQL
                                    g$r$9256$4aEQL)))
                              '#f)
                            (if (eq? g$p$9252$4aEQL 'each-any)
                              ((case-lambda
                                 ((g$l$9257$4aEQL)
                                  (if g$l$9257$4aEQL
                                    (begin
                                      '#f
                                      (cons g$l$9257$4aEQL g$r$9256$4aEQL))
                                    '#f)))
                               (g$match-each-any$9229$4aEQL
                                 g$e$9251$4aEQL
                                 g$m*$9253$4aEQL
                                 g$s*$9254$4aEQL
                                 g$ae*$9255$4aEQL))
                              ((case-lambda
                                 ((g$t$9258$4aEQL)
                                  (if (g$memv$5041$4aEQL g$t$9258$4aEQL '(each))
                                    (if (null? g$e$9251$4aEQL)
                                      (g$match-empty$9230$4aEQL
                                        (vector-ref g$p$9252$4aEQL '1)
                                        g$r$9256$4aEQL)
                                      ((case-lambda
                                         ((g$r*$9259$4aEQL)
                                          (if g$r*$9259$4aEQL
                                            (begin
                                              '#f
                                              (g$combine$9231$4aEQL
                                                g$r*$9259$4aEQL
                                                g$r$9256$4aEQL))
                                            '#f)))
                                       (g$match-each$9227$4aEQL
                                         g$e$9251$4aEQL
                                         (vector-ref g$p$9252$4aEQL '1)
                                         g$m*$9253$4aEQL
                                         g$s*$9254$4aEQL
                                         g$ae*$9255$4aEQL)))
                                    (if (g$memv$5041$4aEQL
                                          g$t$9258$4aEQL
                                          '(free-id))
                                      (if (symbol? g$e$9251$4aEQL)
                                        (if (g$top-marked?$7245$4aEQL
                                              g$m*$9253$4aEQL)
                                          (if (g$free-id=?$7311$4aEQL
                                                (g$stx^$9226$4aEQL
                                                  g$e$9251$4aEQL
                                                  g$m*$9253$4aEQL
                                                  g$s*$9254$4aEQL
                                                  g$ae*$9255$4aEQL)
                                                (vector-ref g$p$9252$4aEQL '1))
                                            (begin '#f g$r$9256$4aEQL)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5041$4aEQL
                                            g$t$9258$4aEQL
                                            '(scheme-id))
                                        (if (symbol? g$e$9251$4aEQL)
                                          (if (g$top-marked?$7245$4aEQL
                                                g$m*$9253$4aEQL)
                                            (if (g$free-id=?$7311$4aEQL
                                                  (g$stx^$9226$4aEQL
                                                    g$e$9251$4aEQL
                                                    g$m*$9253$4aEQL
                                                    g$s*$9254$4aEQL
                                                    g$ae*$9255$4aEQL)
                                                  (g$scheme-stx$7528$4aEQL
                                                    (vector-ref
                                                      g$p$9252$4aEQL
                                                      '1)))
                                              (begin '#f g$r$9256$4aEQL)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5041$4aEQL
                                              g$t$9258$4aEQL
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9228$4aEQL
                                                 g$e$9251$4aEQL
                                                 (vector-ref g$p$9252$4aEQL '1)
                                                 (vector-ref g$p$9252$4aEQL '2)
                                                 (vector-ref g$p$9252$4aEQL '3)
                                                 g$m*$9253$4aEQL
                                                 g$s*$9254$4aEQL
                                                 g$ae*$9255$4aEQL
                                                 g$r$9256$4aEQL)))
                                            (case-lambda
                                              ((g$xr*$9263$4aEQL
                                                 g$y-pat$9264$4aEQL
                                                 g$r$9265$4aEQL)
                                               ((case-lambda
                                                  ((g$r$9266$4aEQL
                                                     g$y-pat$9267$4aEQL
                                                     g$xr*$9268$4aEQL)
                                                   (if g$r$9266$4aEQL
                                                     (if (null?
                                                           g$y-pat$9267$4aEQL)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9268$4aEQL)
                                                           (g$match-empty$9230$4aEQL
                                                             (vector-ref
                                                               g$p$9252$4aEQL
                                                               '1)
                                                             g$r$9266$4aEQL)
                                                           (g$combine$9231$4aEQL
                                                             g$xr*$9268$4aEQL
                                                             g$r$9266$4aEQL)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9265$4aEQL
                                                g$y-pat$9264$4aEQL
                                                g$xr*$9263$4aEQL))))
                                          (if (g$memv$5041$4aEQL
                                                g$t$9258$4aEQL
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref g$p$9252$4aEQL '1)
                                                  (g$strip$7317$4aEQL
                                                    g$e$9251$4aEQL
                                                    g$m*$9253$4aEQL))
                                              (begin '#f g$r$9256$4aEQL)
                                              '#f)
                                            (if (g$memv$5041$4aEQL
                                                  g$t$9258$4aEQL
                                                  '(vector))
                                              (if (vector? g$e$9251$4aEQL)
                                                (begin
                                                  '#f
                                                  (g$match$9233$4aEQL
                                                    (vector->list
                                                      g$e$9251$4aEQL)
                                                    (vector-ref
                                                      g$p$9252$4aEQL
                                                      '1)
                                                    g$m*$9253$4aEQL
                                                    g$s*$9254$4aEQL
                                                    g$ae*$9255$4aEQL
                                                    g$r$9256$4aEQL))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9252$4aEQL)))))))))
                               (vector-ref g$p$9252$4aEQL '0))))))))
                   (g$match$9233$4aEQL
                     (case-lambda
                       ((g$e$9236$4aEQL
                          g$p$9237$4aEQL
                          g$m*$9238$4aEQL
                          g$s*$9239$4aEQL
                          g$ae*$9240$4aEQL
                          g$r$9241$4aEQL)
                        (if (not g$r$9241$4aEQL)
                          '#f
                          (if (eq? g$p$9237$4aEQL '_)
                            g$r$9241$4aEQL
                            (if (eq? g$p$9237$4aEQL 'any)
                              (cons
                                (g$stx^$9226$4aEQL
                                  g$e$9236$4aEQL
                                  g$m*$9238$4aEQL
                                  g$s*$9239$4aEQL
                                  g$ae*$9240$4aEQL)
                                g$r$9241$4aEQL)
                              (if (g$stx?$7279$4aEQL g$e$9236$4aEQL)
                                (if (not (g$top-marked?$7245$4aEQL
                                           g$m*$9238$4aEQL))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7294$4aEQL
                                           g$m*$9238$4aEQL
                                           g$s*$9239$4aEQL
                                           g$ae*$9240$4aEQL
                                           g$e$9236$4aEQL)))
                                      (case-lambda
                                        ((g$m*$9245$4aEQL
                                           g$s*$9246$4aEQL
                                           g$ae*$9247$4aEQL)
                                         ((case-lambda
                                            ((g$ae*$9248$4aEQL
                                               g$s*$9249$4aEQL
                                               g$m*$9250$4aEQL)
                                             (g$match$9233$4aEQL
                                               (g$stx-expr$7281$4aEQL
                                                 g$e$9236$4aEQL)
                                               g$p$9237$4aEQL
                                               g$m*$9250$4aEQL
                                               g$s*$9249$4aEQL
                                               g$ae*$9248$4aEQL
                                               g$r$9241$4aEQL)))
                                          g$ae*$9247$4aEQL
                                          g$s*$9246$4aEQL
                                          g$m*$9245$4aEQL)))))
                                  '#f)
                                (if (annotation? g$e$9236$4aEQL)
                                  (g$match$9233$4aEQL
                                    (annotation-expression g$e$9236$4aEQL)
                                    g$p$9237$4aEQL
                                    g$m*$9238$4aEQL
                                    g$s*$9239$4aEQL
                                    g$ae*$9240$4aEQL
                                    g$r$9241$4aEQL)
                                  (g$match*$9232$4aEQL
                                    g$e$9236$4aEQL
                                    g$p$9237$4aEQL
                                    g$m*$9238$4aEQL
                                    g$s*$9239$4aEQL
                                    g$ae*$9240$4aEQL
                                    g$r$9241$4aEQL))))))))))
           (case-lambda
             ((g$e$9234$4aEQL g$p$9235$4aEQL)
              (g$match$9233$4aEQL
                g$e$9234$4aEQL
                g$p$9235$4aEQL
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7586$4aEQL
     g$ellipsis?$11077$4aEQL
     (case-lambda
       ((g$x$9340$4aEQL)
        (if (g$id?$7307$4aEQL g$x$9340$4aEQL)
          (begin
            '#f
            (g$free-id=?$7311$4aEQL
              g$x$9340$4aEQL
              (g$scheme-stx$7528$4aEQL '...)))
          '#f))))
   (g$underscore?$7587$4aEQL
     g$underscore?$11078$4aEQL
     (case-lambda
       ((g$x$9341$4aEQL)
        (if (g$id?$7307$4aEQL g$x$9341$4aEQL)
          (begin
            '#f
            (g$free-id=?$7311$4aEQL
              g$x$9341$4aEQL
              (g$scheme-stx$7528$4aEQL '_)))
          '#f))))
   (g$verify-literals$7588$4aEQL
     g$verify-literals$11079$4aEQL
     (case-lambda
       ((g$lits$9342$4aEQL g$expr$9343$4aEQL)
        (g$for-each$5049$4aEQL
          (case-lambda
            ((g$x$9344$4aEQL)
             (if ((case-lambda
                    ((g$t$9345$4aEQL)
                     (if g$t$9345$4aEQL
                       g$t$9345$4aEQL
                       ((case-lambda
                          ((g$t$9346$4aEQL)
                           (if g$t$9346$4aEQL
                             g$t$9346$4aEQL
                             (begin
                               '#f
                               (g$underscore?$7587$4aEQL g$x$9344$4aEQL)))))
                        (g$ellipsis?$7586$4aEQL g$x$9344$4aEQL)))))
                  (not (g$id?$7307$4aEQL g$x$9344$4aEQL)))
               (g$syntax-violation$7696$4aEQL
                 '#f
                 '"invalid literal"
                 g$expr$9343$4aEQL
                 g$x$9344$4aEQL)
               (void))))
          g$lits$9342$4aEQL))))
   (g$syntax-case-transformer$7589$4aEQL
     g$syntax-case-transformer$11080$4aEQL
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9347$4aEQL
                     (case-lambda
                       ((g$pvars$9404$4aEQL
                          g$expr$9405$4aEQL
                          g$y$9406$4aEQL
                          g$r$9407$4aEQL
                          g$mr$9408$4aEQL)
                        ((case-lambda
                           ((g$ids$9409$4aEQL g$levels$9410$4aEQL)
                            ((case-lambda
                               ((g$labels$9411$4aEQL g$new-vars$9412$4aEQL)
                                ((case-lambda
                                   ((g$body$9413$4aEQL)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7233$4aEQL
                                        '#f
                                        g$new-vars$9412$4aEQL
                                        g$body$9413$4aEQL)
                                      g$y$9406$4aEQL)))
                                 (g$chi-expr$7603$4aEQL
                                   (g$add-subst$7297$4aEQL
                                     (g$make-full-rib$7275$4aEQL
                                       g$ids$9409$4aEQL
                                       g$labels$9411$4aEQL)
                                     g$expr$9405$4aEQL)
                                   (append
                                     (g$map$5048$4aEQL
                                       (case-lambda
                                         ((g$label$9414$4aEQL
                                            g$var$9415$4aEQL
                                            g$level$9416$4aEQL)
                                          (cons
                                            g$label$9414$4aEQL
                                            (g$make-binding$7323$4aEQL
                                              'syntax
                                              (cons
                                                g$var$9415$4aEQL
                                                g$level$9416$4aEQL)))))
                                       g$labels$9411$4aEQL
                                       g$new-vars$9412$4aEQL
                                       (g$map$5048$4aEQL
                                         cdr
                                         g$pvars$9404$4aEQL))
                                     g$r$9407$4aEQL)
                                   g$mr$9408$4aEQL))))
                             (g$map$5048$4aEQL
                               g$gen-label$7248$4aEQL
                               g$ids$9409$4aEQL)
                             (g$map$5048$4aEQL
                               g$gen-lexical$7246$4aEQL
                               g$ids$9409$4aEQL))))
                         (g$map$5048$4aEQL car g$pvars$9404$4aEQL)
                         (g$map$5048$4aEQL cdr g$pvars$9404$4aEQL)))))
                   (g$invalid-ids-error$9348$4aEQL
                     (case-lambda
                       ((g$id*$9398$4aEQL g$e$9399$4aEQL g$class$9400$4aEQL)
                        ((letrec ((g$find$9401$4aEQL
                                    (case-lambda
                                      ((g$id*$9402$4aEQL g$ok*$9403$4aEQL)
                                       (if (null? g$id*$9402$4aEQL)
                                         (g$syntax-violation$7696$4aEQL
                                           '#f
                                           '"invalid syntax"
                                           g$e$9399$4aEQL)
                                         (if (g$id?$7307$4aEQL
                                               (car g$id*$9402$4aEQL))
                                           (if (g$bound-id-member?$7314$4aEQL
                                                 (car g$id*$9402$4aEQL)
                                                 g$ok*$9403$4aEQL)
                                             (g$syntax-error$7693$4aEQL
                                               (car g$id*$9402$4aEQL)
                                               '"duplicate "
                                               g$class$9400$4aEQL)
                                             (g$find$9401$4aEQL
                                               (cdr g$id*$9402$4aEQL)
                                               (cons
                                                 (car g$id*$9402$4aEQL)
                                                 g$ok*$9403$4aEQL)))
                                           (g$syntax-error$7693$4aEQL
                                             (car g$id*$9402$4aEQL)
                                             '"invalid "
                                             g$class$9400$4aEQL)))))))
                           g$find$9401$4aEQL)
                         g$id*$9398$4aEQL
                         '()))))
                   (g$gen-clause$9349$4aEQL
                     (case-lambda
                       ((g$x$9378$4aEQL
                          g$keys$9379$4aEQL
                          g$clauses$9380$4aEQL
                          g$r$9381$4aEQL
                          g$mr$9382$4aEQL
                          g$pat$9383$4aEQL
                          g$fender$9384$4aEQL
                          g$expr$9385$4aEQL)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7584$4aEQL
                               g$pat$9383$4aEQL
                               g$keys$9379$4aEQL)))
                          (case-lambda
                            ((g$p$9388$4aEQL g$pvars$9389$4aEQL)
                             ((case-lambda
                                ((g$pvars$9390$4aEQL g$p$9391$4aEQL)
                                 (if (not (g$distinct-bound-ids?$7313$4aEQL
                                            (g$map$5048$4aEQL
                                              car
                                              g$pvars$9390$4aEQL)))
                                   (g$invalid-ids-error$9348$4aEQL
                                     (g$map$5048$4aEQL car g$pvars$9390$4aEQL)
                                     g$pat$9383$4aEQL
                                     '"pattern variable")
                                   (if (not (g$for-all$5046$4aEQL
                                              (case-lambda
                                                ((g$x$9392$4aEQL)
                                                 (not (g$ellipsis?$7586$4aEQL
                                                        (car g$x$9392$4aEQL)))))
                                              g$pvars$9390$4aEQL))
                                     (g$syntax-violation$7696$4aEQL
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9383$4aEQL)
                                     ((case-lambda
                                        ((g$y$9393$4aEQL)
                                         ((case-lambda
                                            ((g$test$9394$4aEQL)
                                             ((case-lambda
                                                ((g$conseq$9395$4aEQL)
                                                 ((case-lambda
                                                    ((g$altern$9396$4aEQL)
                                                     (list
                                                       (g$build-lambda$7233$4aEQL
                                                         '#f
                                                         (list g$y$9393$4aEQL)
                                                         (list
                                                           'if
                                                           g$test$9394$4aEQL
                                                           g$conseq$9395$4aEQL
                                                           g$altern$9396$4aEQL))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9378$4aEQL
                                                         (list
                                                           'quote
                                                           g$p$9391$4aEQL)))))
                                                  (g$gen-syntax-case$9350$4aEQL
                                                    g$x$9378$4aEQL
                                                    g$keys$9379$4aEQL
                                                    g$clauses$9380$4aEQL
                                                    g$r$9381$4aEQL
                                                    g$mr$9382$4aEQL))))
                                              (g$build-dispatch-call$9347$4aEQL
                                                g$pvars$9390$4aEQL
                                                g$expr$9385$4aEQL
                                                g$y$9393$4aEQL
                                                g$r$9381$4aEQL
                                                g$mr$9382$4aEQL))))
                                          (if (eq? g$fender$9384$4aEQL '#t)
                                            g$y$9393$4aEQL
                                            ((case-lambda
                                               ((g$call$9397$4aEQL)
                                                (list
                                                  'if
                                                  g$y$9393$4aEQL
                                                  g$call$9397$4aEQL
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9347$4aEQL
                                               g$pvars$9390$4aEQL
                                               g$fender$9384$4aEQL
                                               g$y$9393$4aEQL
                                               g$r$9381$4aEQL
                                               g$mr$9382$4aEQL))))))
                                      (g$gen-lexical$7246$4aEQL 'tmp))))))
                              g$pvars$9389$4aEQL
                              g$p$9388$4aEQL)))))))
                   (g$gen-syntax-case$9350$4aEQL
                     (case-lambda
                       ((g$x$9361$4aEQL
                          g$keys$9362$4aEQL
                          g$clauses$9363$4aEQL
                          g$r$9364$4aEQL
                          g$mr$9365$4aEQL)
                        (if (null? g$clauses$9363$4aEQL)
                          (list '(primitive syntax-error) g$x$9361$4aEQL)
                          ((case-lambda
                             ((g$t$9366$4aEQL)
                              ((case-lambda
                                 ((g$ls/false$9367$4aEQL)
                                  (if g$ls/false$9367$4aEQL
                                    (apply
                                      (case-lambda
                                        ((g$pat$9368$4aEQL g$expr$9369$4aEQL)
                                         (if (if (g$id?$7307$4aEQL
                                                   g$pat$9368$4aEQL)
                                               (if (not (g$bound-id-member?$7314$4aEQL
                                                          g$pat$9368$4aEQL
                                                          g$keys$9362$4aEQL))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7586$4aEQL
                                                          g$pat$9368$4aEQL)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7311$4aEQL
                                                 g$pat$9368$4aEQL
                                                 (g$scheme-stx$7528$4aEQL '_))
                                             (g$chi-expr$7603$4aEQL
                                               g$expr$9369$4aEQL
                                               g$r$9364$4aEQL
                                               g$mr$9365$4aEQL)
                                             ((case-lambda
                                                ((g$lab$9370$4aEQL
                                                   g$lex$9371$4aEQL)
                                                 ((case-lambda
                                                    ((g$body$9372$4aEQL)
                                                     (list
                                                       (g$build-lambda$7233$4aEQL
                                                         '#f
                                                         (list g$lex$9371$4aEQL)
                                                         g$body$9372$4aEQL)
                                                       g$x$9361$4aEQL)))
                                                  (g$chi-expr$7603$4aEQL
                                                    (g$add-subst$7297$4aEQL
                                                      (g$make-full-rib$7275$4aEQL
                                                        (list g$pat$9368$4aEQL)
                                                        (list g$lab$9370$4aEQL))
                                                      g$expr$9369$4aEQL)
                                                    (cons
                                                      (cons
                                                        g$lab$9370$4aEQL
                                                        (g$make-binding$7323$4aEQL
                                                          'syntax
                                                          (cons
                                                            g$lex$9371$4aEQL
                                                            '0)))
                                                      g$r$9364$4aEQL)
                                                    g$mr$9365$4aEQL))))
                                              (g$gen-label$7248$4aEQL
                                                g$pat$9368$4aEQL)
                                              (g$gen-lexical$7246$4aEQL
                                                g$pat$9368$4aEQL)))
                                           (g$gen-clause$9349$4aEQL
                                             g$x$9361$4aEQL
                                             g$keys$9362$4aEQL
                                             (cdr g$clauses$9363$4aEQL)
                                             g$r$9364$4aEQL
                                             g$mr$9365$4aEQL
                                             g$pat$9368$4aEQL
                                             '#t
                                             g$expr$9369$4aEQL))))
                                      g$ls/false$9367$4aEQL)
                                    ((case-lambda
                                       ((g$t$9373$4aEQL)
                                        ((case-lambda
                                           ((g$ls/false$9374$4aEQL)
                                            (if g$ls/false$9374$4aEQL
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9375$4aEQL
                                                     g$fender$9376$4aEQL
                                                     g$expr$9377$4aEQL)
                                                   (g$gen-clause$9349$4aEQL
                                                     g$x$9361$4aEQL
                                                     g$keys$9362$4aEQL
                                                     (cdr g$clauses$9363$4aEQL)
                                                     g$r$9364$4aEQL
                                                     g$mr$9365$4aEQL
                                                     g$pat$9375$4aEQL
                                                     g$fender$9376$4aEQL
                                                     g$expr$9377$4aEQL)))
                                                g$ls/false$9374$4aEQL)
                                              (g$syntax-violation$7696$4aEQL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9373$4aEQL))))
                                         (g$syntax-dispatch$7585$4aEQL
                                           g$t$9373$4aEQL
                                           '(any any any)))))
                                     g$t$9366$4aEQL))))
                               (g$syntax-dispatch$7585$4aEQL
                                 g$t$9366$4aEQL
                                 '(any any)))))
                           (car g$clauses$9363$4aEQL)))))))
           (case-lambda
             ((g$e$9351$4aEQL g$r$9352$4aEQL g$mr$9353$4aEQL)
              ((case-lambda
                 ((g$t$9354$4aEQL)
                  ((case-lambda
                     ((g$ls/false$9355$4aEQL)
                      (if g$ls/false$9355$4aEQL
                        (apply
                          (case-lambda
                            ((g$expr$9356$4aEQL
                               g$keys$9357$4aEQL
                               g$clauses$9358$4aEQL)
                             (begin
                               (g$verify-literals$7588$4aEQL
                                 g$keys$9357$4aEQL
                                 g$e$9351$4aEQL)
                               ((case-lambda
                                  ((g$x$9359$4aEQL)
                                   ((case-lambda
                                      ((g$body$9360$4aEQL)
                                       (list
                                         (g$build-lambda$7233$4aEQL
                                           '#f
                                           (list g$x$9359$4aEQL)
                                           g$body$9360$4aEQL)
                                         (g$chi-expr$7603$4aEQL
                                           g$expr$9356$4aEQL
                                           g$r$9352$4aEQL
                                           g$mr$9353$4aEQL))))
                                    (g$gen-syntax-case$9350$4aEQL
                                      g$x$9359$4aEQL
                                      g$keys$9357$4aEQL
                                      g$clauses$9358$4aEQL
                                      g$r$9352$4aEQL
                                      g$mr$9353$4aEQL))))
                                (g$gen-lexical$7246$4aEQL 'tmp)))))
                          g$ls/false$9355$4aEQL)
                        (g$syntax-violation$7696$4aEQL
                          '#f
                          '"invalid syntax"
                          g$t$9354$4aEQL))))
                   (g$syntax-dispatch$7585$4aEQL
                     g$t$9354$4aEQL
                     '(_ any each-any . each-any)))))
               g$e$9351$4aEQL))))))))
   (g$ellipsis-map$7590$4aEQL
     g$ellipsis-map$11081$4aEQL
     (case-lambda
       ((g$proc$9417$4aEQL g$ls$9418$4aEQL . g$ls*$9419$4aEQL)
        (letrec* ((g$who$9420$4aEQL '...))
          (begin
            (if (not (list? g$ls$9418$4aEQL))
              (assertion-violation
                g$who$9420$4aEQL
                '"not a list"
                g$ls$9418$4aEQL)
              (void))
            (if (not (null? g$ls*$9419$4aEQL))
              ((case-lambda
                 ((g$n$9421$4aEQL)
                  (g$for-each$5049$4aEQL
                    (case-lambda
                      ((g$x$9422$4aEQL)
                       (begin
                         (if (not (list? g$x$9422$4aEQL))
                           (assertion-violation
                             g$who$9420$4aEQL
                             '"not a list"
                             g$x$9422$4aEQL)
                           (void))
                         (if (not (= (length g$x$9422$4aEQL) g$n$9421$4aEQL))
                           (assertion-violation
                             g$who$9420$4aEQL
                             '"length mismatch"
                             g$ls$9418$4aEQL
                             g$x$9422$4aEQL)
                           (void)))))
                    g$ls*$9419$4aEQL)))
               (length g$ls$9418$4aEQL))
              (void))
            (apply
              g$map$5048$4aEQL
              g$proc$9417$4aEQL
              g$ls$9418$4aEQL
              g$ls*$9419$4aEQL))))))
   (g$syntax-transformer$7591$4aEQL
     g$syntax-transformer$11082$4aEQL
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9423$4aEQL
                     (case-lambda
                       ((g$src$9483$4aEQL
                          g$e$9484$4aEQL
                          g$r$9485$4aEQL
                          g$maps$9486$4aEQL
                          g$ellipsis?$9487$4aEQL
                          g$vec?$9488$4aEQL)
                        ((case-lambda
                           ((g$t$9489$4aEQL)
                            ((case-lambda
                               ((g$ls/false$9490$4aEQL)
                                (if (if g$ls/false$9490$4aEQL
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9491$4aEQL)
                                             (g$ellipsis?$9487$4aEQL
                                               g$dots$9491$4aEQL)))
                                          g$ls/false$9490$4aEQL))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9492$4aEQL)
                                       (g$syntax-violation$7696$4aEQL
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9483$4aEQL)))
                                    g$ls/false$9490$4aEQL)
                                  ((case-lambda
                                     ((g$t$9493$4aEQL)
                                      ((case-lambda
                                         ((g$ls/false$9494$4aEQL)
                                          (if (if g$ls/false$9494$4aEQL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9495$4aEQL)
                                                       (g$id?$7307$4aEQL
                                                         g$id$9495$4aEQL)))
                                                    g$ls/false$9494$4aEQL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9496$4aEQL)
                                                 ((case-lambda
                                                    ((g$label$9497$4aEQL)
                                                     ((case-lambda
                                                        ((g$b$9498$4aEQL)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7324$4aEQL
                                                                        g$b$9498$4aEQL)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9501$4aEQL)
                                                                        (g$gen-ref$9424$4aEQL
                                                                          g$src$9483$4aEQL
                                                                          (car g$var.lev$9501$4aEQL)
                                                                          (cdr g$var.lev$9501$4aEQL)
                                                                          g$maps$9486$4aEQL)))
                                                                     (g$binding-value$7325$4aEQL
                                                                       g$b$9498$4aEQL))))
                                                                 (case-lambda
                                                                   ((g$var$9502$4aEQL
                                                                      g$maps$9503$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$maps$9504$4aEQL
                                                                          g$var$9505$4aEQL)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9505$4aEQL)
                                                                          g$maps$9504$4aEQL)))
                                                                     g$maps$9503$4aEQL
                                                                     g$var$9502$4aEQL))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9484$4aEQL)
                                                                 g$maps$9486$4aEQL)))))))
                                                      (g$label->binding$7322$4aEQL
                                                        g$label$9497$4aEQL
                                                        g$r$9485$4aEQL))))
                                                  (g$id->label$7320$4aEQL
                                                    g$e$9484$4aEQL))))
                                              g$ls/false$9494$4aEQL)
                                            ((case-lambda
                                               ((g$t$9506$4aEQL)
                                                ((case-lambda
                                                   ((g$ls/false$9507$4aEQL)
                                                    (if (if g$ls/false$9507$4aEQL
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9508$4aEQL
                                                                   g$e$9509$4aEQL)
                                                                 (g$ellipsis?$9487$4aEQL
                                                                   g$dots$9508$4aEQL)))
                                                              g$ls/false$9507$4aEQL))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9510$4aEQL
                                                             g$e$9511$4aEQL)
                                                           (if g$vec?$9488$4aEQL
                                                             (g$syntax-violation$7696$4aEQL
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9483$4aEQL)
                                                             (g$gen-syntax$9423$4aEQL
                                                               g$src$9483$4aEQL
                                                               g$e$9511$4aEQL
                                                               g$r$9485$4aEQL
                                                               g$maps$9486$4aEQL
                                                               (case-lambda
                                                                 ((g$x$9512$4aEQL)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9507$4aEQL)
                                                      ((case-lambda
                                                         ((g$t$9513$4aEQL)
                                                          ((case-lambda
                                                             ((g$ls/false$9514$4aEQL)
                                                              (if (if g$ls/false$9514$4aEQL
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9515$4aEQL
                                                                             g$dots$9516$4aEQL
                                                                             g$y$9517$4aEQL)
                                                                           (g$ellipsis?$9487$4aEQL
                                                                             g$dots$9516$4aEQL)))
                                                                        g$ls/false$9514$4aEQL))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9518$4aEQL
                                                                       g$dots$9519$4aEQL
                                                                       g$y$9520$4aEQL)
                                                                     ((letrec ((g$f$9521$4aEQL
                                                                                 (case-lambda
                                                                                   ((g$y$9522$4aEQL
                                                                                      g$k$9523$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$t$9524$4aEQL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9525$4aEQL)
                                                                                            (if g$ls/false$9525$4aEQL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9523$4aEQL
                                                                                                     g$maps$9486$4aEQL)))
                                                                                                g$ls/false$9525$4aEQL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9526$4aEQL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9527$4aEQL)
                                                                                                      (if (if g$ls/false$9527$4aEQL
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9528$4aEQL
                                                                                                                     g$y$9529$4aEQL)
                                                                                                                   (g$ellipsis?$9487$4aEQL
                                                                                                                     g$dots$9528$4aEQL)))
                                                                                                                g$ls/false$9527$4aEQL))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9530$4aEQL
                                                                                                               g$y$9531$4aEQL)
                                                                                                             (g$f$9521$4aEQL
                                                                                                               g$y$9531$4aEQL
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9532$4aEQL)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9523$4aEQL
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9532$4aEQL))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9535$4aEQL
                                                                                                                         g$maps$9536$4aEQL)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9537$4aEQL
                                                                                                                             g$x$9538$4aEQL)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9537$4aEQL))
                                                                                                                             (g$syntax-violation$7696$4aEQL
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9483$4aEQL)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9426$4aEQL
                                                                                                                                 g$x$9538$4aEQL
                                                                                                                                 (car g$maps$9537$4aEQL))
                                                                                                                               (cdr g$maps$9537$4aEQL)))))
                                                                                                                        g$maps$9536$4aEQL
                                                                                                                        g$x$9535$4aEQL)))))))))
                                                                                                          g$ls/false$9527$4aEQL)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9539$4aEQL)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9540$4aEQL)
                                                                                                                (if g$ls/false$9540$4aEQL
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9423$4aEQL
                                                                                                                              g$src$9483$4aEQL
                                                                                                                              g$y$9522$4aEQL
                                                                                                                              g$r$9485$4aEQL
                                                                                                                              g$maps$9486$4aEQL
                                                                                                                              g$ellipsis?$9487$4aEQL
                                                                                                                              g$vec?$9488$4aEQL)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9543$4aEQL
                                                                                                                              g$maps$9544$4aEQL)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9545$4aEQL
                                                                                                                                  g$y$9546$4aEQL)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9523$4aEQL
                                                                                                                                       g$maps$9545$4aEQL)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9549$4aEQL
                                                                                                                                       g$maps$9550$4aEQL)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9551$4aEQL
                                                                                                                                           g$x$9552$4aEQL)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9425$4aEQL
                                                                                                                                             g$x$9552$4aEQL
                                                                                                                                             g$y$9546$4aEQL)
                                                                                                                                           g$maps$9551$4aEQL)))
                                                                                                                                      g$maps$9550$4aEQL
                                                                                                                                      g$x$9549$4aEQL))))))
                                                                                                                             g$maps$9544$4aEQL
                                                                                                                             g$y$9543$4aEQL))))))
                                                                                                                    g$ls/false$9540$4aEQL)
                                                                                                                  (g$syntax-violation$7696$4aEQL
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9539$4aEQL))))
                                                                                                             (g$syntax-dispatch$7585$4aEQL
                                                                                                               g$t$9539$4aEQL
                                                                                                               '_))))
                                                                                                         g$t$9526$4aEQL))))
                                                                                                   (g$syntax-dispatch$7585$4aEQL
                                                                                                     g$t$9526$4aEQL
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9524$4aEQL))))
                                                                                         (g$syntax-dispatch$7585$4aEQL
                                                                                           g$t$9524$4aEQL
                                                                                           '()))))
                                                                                     g$y$9522$4aEQL)))))
                                                                        g$f$9521$4aEQL)
                                                                      g$y$9520$4aEQL
                                                                      (case-lambda
                                                                        ((g$maps$9553$4aEQL)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9423$4aEQL
                                                                                g$src$9483$4aEQL
                                                                                g$x$9518$4aEQL
                                                                                g$r$9485$4aEQL
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9553$4aEQL)
                                                                                g$ellipsis?$9487$4aEQL
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9556$4aEQL
                                                                                g$maps$9557$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$maps$9558$4aEQL
                                                                                    g$x$9559$4aEQL)
                                                                                  (if (null?
                                                                                        (car g$maps$9558$4aEQL))
                                                                                    (g$syntax-violation$7696$4aEQL
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9483$4aEQL)
                                                                                    (values
                                                                                      (g$gen-map$9427$4aEQL
                                                                                        g$x$9559$4aEQL
                                                                                        (car g$maps$9558$4aEQL))
                                                                                      (cdr g$maps$9558$4aEQL)))))
                                                                               g$maps$9557$4aEQL
                                                                               g$x$9556$4aEQL)))))))))
                                                                  g$ls/false$9514$4aEQL)
                                                                ((case-lambda
                                                                   ((g$t$9560$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9561$4aEQL)
                                                                        (if g$ls/false$9561$4aEQL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9562$4aEQL
                                                                                 g$y$9563$4aEQL)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9423$4aEQL
                                                                                      g$src$9483$4aEQL
                                                                                      g$x$9562$4aEQL
                                                                                      g$r$9485$4aEQL
                                                                                      g$maps$9486$4aEQL
                                                                                      g$ellipsis?$9487$4aEQL
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9566$4aEQL
                                                                                      g$maps$9567$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9568$4aEQL
                                                                                          g$xnew$9569$4aEQL)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9423$4aEQL
                                                                                               g$src$9483$4aEQL
                                                                                               g$y$9563$4aEQL
                                                                                               g$r$9485$4aEQL
                                                                                               g$maps$9568$4aEQL
                                                                                               g$ellipsis?$9487$4aEQL
                                                                                               g$vec?$9488$4aEQL)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9572$4aEQL
                                                                                               g$maps$9573$4aEQL)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9574$4aEQL
                                                                                                   g$ynew$9575$4aEQL)
                                                                                                 (values
                                                                                                   (g$gen-cons$9428$4aEQL
                                                                                                     g$e$9484$4aEQL
                                                                                                     g$x$9562$4aEQL
                                                                                                     g$y$9563$4aEQL
                                                                                                     g$xnew$9569$4aEQL
                                                                                                     g$ynew$9575$4aEQL)
                                                                                                   g$maps$9574$4aEQL)))
                                                                                              g$maps$9573$4aEQL
                                                                                              g$ynew$9572$4aEQL))))))
                                                                                     g$maps$9567$4aEQL
                                                                                     g$xnew$9566$4aEQL))))))
                                                                            g$ls/false$9561$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$t$9576$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9577$4aEQL)
                                                                                  (if g$ls/false$9577$4aEQL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9578$4aEQL)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9423$4aEQL
                                                                                                g$src$9483$4aEQL
                                                                                                g$ls$9578$4aEQL
                                                                                                g$r$9485$4aEQL
                                                                                                g$maps$9486$4aEQL
                                                                                                g$ellipsis?$9487$4aEQL
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9581$4aEQL
                                                                                                g$maps$9582$4aEQL)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9583$4aEQL
                                                                                                    g$lsnew$9584$4aEQL)
                                                                                                  (values
                                                                                                    (g$gen-vector$9429$4aEQL
                                                                                                      g$e$9484$4aEQL
                                                                                                      g$ls$9578$4aEQL
                                                                                                      g$lsnew$9584$4aEQL)
                                                                                                    g$maps$9583$4aEQL)))
                                                                                               g$maps$9582$4aEQL
                                                                                               g$lsnew$9581$4aEQL))))))
                                                                                      g$ls/false$9577$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$t$9585$4aEQL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9586$4aEQL)
                                                                                            (if g$ls/false$9586$4aEQL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9484$4aEQL)
                                                                                                     g$maps$9486$4aEQL)))
                                                                                                g$ls/false$9586$4aEQL)
                                                                                              (g$syntax-violation$7696$4aEQL
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9585$4aEQL))))
                                                                                         (g$syntax-dispatch$7585$4aEQL
                                                                                           g$t$9585$4aEQL
                                                                                           '_))))
                                                                                     g$t$9576$4aEQL))))
                                                                               (g$syntax-dispatch$7585$4aEQL
                                                                                 g$t$9576$4aEQL
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9560$4aEQL))))
                                                                     (g$syntax-dispatch$7585$4aEQL
                                                                       g$t$9560$4aEQL
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9513$4aEQL))))
                                                           (g$syntax-dispatch$7585$4aEQL
                                                             g$t$9513$4aEQL
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9506$4aEQL))))
                                                 (g$syntax-dispatch$7585$4aEQL
                                                   g$t$9506$4aEQL
                                                   '(any any)))))
                                             g$t$9493$4aEQL))))
                                       (g$syntax-dispatch$7585$4aEQL
                                         g$t$9493$4aEQL
                                         'any))))
                                   g$t$9489$4aEQL))))
                             (g$syntax-dispatch$7585$4aEQL
                               g$t$9489$4aEQL
                               'any))))
                         g$e$9484$4aEQL))))
                   (g$gen-ref$9424$4aEQL
                     (case-lambda
                       ((g$src$9470$4aEQL
                          g$var$9471$4aEQL
                          g$level$9472$4aEQL
                          g$maps$9473$4aEQL)
                        (if (= g$level$9472$4aEQL '0)
                          (values g$var$9471$4aEQL g$maps$9473$4aEQL)
                          (if (null? g$maps$9473$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9470$4aEQL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9424$4aEQL
                                   g$src$9470$4aEQL
                                   g$var$9471$4aEQL
                                   (- g$level$9472$4aEQL '1)
                                   (cdr g$maps$9473$4aEQL))))
                              (case-lambda
                                ((g$outer-var$9476$4aEQL
                                   g$outer-maps$9477$4aEQL)
                                 ((case-lambda
                                    ((g$outer-maps$9478$4aEQL
                                       g$outer-var$9479$4aEQL)
                                     ((case-lambda
                                        ((g$t$9480$4aEQL)
                                         (if g$t$9480$4aEQL
                                           ((case-lambda
                                              ((g$b$9481$4aEQL)
                                               (values
                                                 (cdr g$b$9481$4aEQL)
                                                 g$maps$9473$4aEQL)))
                                            g$t$9480$4aEQL)
                                           ((case-lambda
                                              ((g$inner-var$9482$4aEQL)
                                               (values
                                                 g$inner-var$9482$4aEQL
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9479$4aEQL
                                                       g$inner-var$9482$4aEQL)
                                                     (car g$maps$9473$4aEQL))
                                                   g$outer-maps$9478$4aEQL))))
                                            (g$gen-lexical$7246$4aEQL 'tmp)))))
                                      (g$assq$5036$4aEQL
                                        g$outer-var$9479$4aEQL
                                        (car g$maps$9473$4aEQL)))))
                                  g$outer-maps$9477$4aEQL
                                  g$outer-var$9476$4aEQL)))))))))
                   (g$gen-append$9425$4aEQL
                     (case-lambda
                       ((g$x$9468$4aEQL g$y$9469$4aEQL)
                        (if (equal? g$y$9469$4aEQL ''())
                          g$x$9468$4aEQL
                          (list 'append g$x$9468$4aEQL g$y$9469$4aEQL)))))
                   (g$gen-mappend$9426$4aEQL
                     (case-lambda
                       ((g$e$9466$4aEQL g$map-env$9467$4aEQL)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9427$4aEQL
                            g$e$9466$4aEQL
                            g$map-env$9467$4aEQL)))))
                   (g$gen-map$9427$4aEQL
                     (case-lambda
                       ((g$e$9457$4aEQL g$map-env$9458$4aEQL)
                        ((case-lambda
                           ((g$formals$9459$4aEQL g$actuals$9460$4aEQL)
                            (if (eq? (car g$e$9457$4aEQL) 'ref)
                              (car g$actuals$9460$4aEQL)
                              (if (g$for-all$5046$4aEQL
                                    (case-lambda
                                      ((g$x$9461$4aEQL)
                                       (if (eq? (car g$x$9461$4aEQL) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5040$4aEQL
                                             (g$cadr$5212$4aEQL g$x$9461$4aEQL)
                                             g$formals$9459$4aEQL))
                                         '#f)))
                                    (cdr g$e$9457$4aEQL))
                                ((case-lambda
                                   ((g$args$9462$4aEQL)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9457$4aEQL))
                                        g$args$9462$4aEQL))))
                                 (g$map$5048$4aEQL
                                   ((case-lambda
                                      ((g$r$9463$4aEQL)
                                       (case-lambda
                                         ((g$x$9464$4aEQL)
                                          (cdr (g$assq$5036$4aEQL
                                                 (g$cadr$5212$4aEQL
                                                   g$x$9464$4aEQL)
                                                 g$r$9463$4aEQL))))))
                                    (g$map$5048$4aEQL
                                      cons
                                      g$formals$9459$4aEQL
                                      g$actuals$9460$4aEQL))
                                   (cdr g$e$9457$4aEQL)))
                                (g$cons*$5050$4aEQL
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9459$4aEQL
                                    g$e$9457$4aEQL)
                                  g$actuals$9460$4aEQL)))))
                         (g$map$5048$4aEQL cdr g$map-env$9458$4aEQL)
                         (g$map$5048$4aEQL
                           (case-lambda
                             ((g$x$9465$4aEQL)
                              (list 'ref (car g$x$9465$4aEQL))))
                           g$map-env$9458$4aEQL)))))
                   (g$gen-cons$9428$4aEQL
                     (case-lambda
                       ((g$e$9449$4aEQL
                          g$x$9450$4aEQL
                          g$y$9451$4aEQL
                          g$xnew$9452$4aEQL
                          g$ynew$9453$4aEQL)
                        ((case-lambda
                           ((g$t$9454$4aEQL)
                            (if (g$memv$5041$4aEQL g$t$9454$4aEQL '(quote))
                              (if (eq? (car g$xnew$9452$4aEQL) 'quote)
                                ((case-lambda
                                   ((g$xnew$9455$4aEQL g$ynew$9456$4aEQL)
                                    (if (if (eq? g$xnew$9455$4aEQL
                                                 g$x$9450$4aEQL)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9456$4aEQL
                                                 g$y$9451$4aEQL))
                                          '#f)
                                      (list 'quote g$e$9449$4aEQL)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9455$4aEQL
                                          g$ynew$9456$4aEQL)))))
                                 (g$cadr$5212$4aEQL g$xnew$9452$4aEQL)
                                 (g$cadr$5212$4aEQL g$ynew$9453$4aEQL))
                                (if (null?
                                      (g$cadr$5212$4aEQL g$ynew$9453$4aEQL))
                                  (list 'list g$xnew$9452$4aEQL)
                                  (list
                                    'cons
                                    g$xnew$9452$4aEQL
                                    g$ynew$9453$4aEQL)))
                              (if (g$memv$5041$4aEQL g$t$9454$4aEQL '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9452$4aEQL
                                    (cdr g$ynew$9453$4aEQL)))
                                (list
                                  'cons
                                  g$xnew$9452$4aEQL
                                  g$ynew$9453$4aEQL)))))
                         (car g$ynew$9453$4aEQL)))))
                   (g$gen-vector$9429$4aEQL
                     (case-lambda
                       ((g$e$9446$4aEQL g$ls$9447$4aEQL g$lsnew$9448$4aEQL)
                        (if (eq? (car g$lsnew$9448$4aEQL) 'quote)
                          (if (eq? (g$cadr$5212$4aEQL g$lsnew$9448$4aEQL)
                                   g$ls$9447$4aEQL)
                            (list 'quote g$e$9446$4aEQL)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5212$4aEQL g$lsnew$9448$4aEQL))))
                          (if (eq? (car g$lsnew$9448$4aEQL) 'list)
                            (cons 'vector (cdr g$lsnew$9448$4aEQL))
                            (list 'list->vector g$lsnew$9448$4aEQL))))))
                   (g$regen$9430$4aEQL
                     (case-lambda
                       ((g$x$9443$4aEQL)
                        ((case-lambda
                           ((g$t$9444$4aEQL)
                            (if (g$memv$5041$4aEQL g$t$9444$4aEQL '(ref))
                              (g$cadr$5212$4aEQL g$x$9443$4aEQL)
                              (if (g$memv$5041$4aEQL
                                    g$t$9444$4aEQL
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5212$4aEQL g$x$9443$4aEQL))
                                (if (g$memv$5041$4aEQL g$t$9444$4aEQL '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5212$4aEQL g$x$9443$4aEQL))
                                  (if (g$memv$5041$4aEQL
                                        g$t$9444$4aEQL
                                        '(lambda))
                                    (g$build-lambda$7233$4aEQL
                                      '#f
                                      (g$cadr$5212$4aEQL g$x$9443$4aEQL)
                                      (g$regen$9430$4aEQL
                                        (g$caddr$5218$4aEQL g$x$9443$4aEQL)))
                                    (if (g$memv$5041$4aEQL
                                          g$t$9444$4aEQL
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9445$4aEQL)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9445$4aEQL)))
                                       (g$map$5048$4aEQL
                                         g$regen$9430$4aEQL
                                         (cdr g$x$9443$4aEQL)))
                                      (cons
                                        (list 'primitive (car g$x$9443$4aEQL))
                                        (g$map$5048$4aEQL
                                          g$regen$9430$4aEQL
                                          (cdr g$x$9443$4aEQL))))))))))
                         (car g$x$9443$4aEQL))))))
           (case-lambda
             ((g$e$9431$4aEQL g$r$9432$4aEQL g$mr$9433$4aEQL)
              ((case-lambda
                 ((g$t$9434$4aEQL)
                  ((case-lambda
                     ((g$ls/false$9435$4aEQL)
                      (if g$ls/false$9435$4aEQL
                        (apply
                          (case-lambda
                            ((g$x$9436$4aEQL)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9423$4aEQL
                                    g$e$9431$4aEQL
                                    g$x$9436$4aEQL
                                    g$r$9432$4aEQL
                                    '()
                                    g$ellipsis?$7586$4aEQL
                                    '#f)))
                               (case-lambda
                                 ((g$e$9439$4aEQL g$maps$9440$4aEQL)
                                  ((case-lambda
                                     ((g$maps$9441$4aEQL g$e$9442$4aEQL)
                                      (g$regen$9430$4aEQL g$e$9442$4aEQL)))
                                   g$maps$9440$4aEQL
                                   g$e$9439$4aEQL))))))
                          g$ls/false$9435$4aEQL)
                        (g$syntax-violation$7696$4aEQL
                          '#f
                          '"invalid syntax"
                          g$t$9434$4aEQL))))
                   (g$syntax-dispatch$7585$4aEQL g$t$9434$4aEQL '(_ any)))))
               g$e$9431$4aEQL))))))))
   (g$core-macro-transformer$7592$4aEQL
     g$core-macro-transformer$11083$4aEQL
     (case-lambda
       ((g$name$9587$4aEQL)
        ((case-lambda
           ((g$t$9588$4aEQL)
            (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(quote))
              g$quote-transformer$7545$4aEQL
              (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(lambda))
                g$lambda-transformer$7547$4aEQL
                (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(case-lambda))
                  g$case-lambda-transformer$7546$4aEQL
                  (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(letrec))
                    g$letrec-transformer$7535$4aEQL
                    (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(letrec*))
                      g$letrec*-transformer$7536$4aEQL
                      (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(if))
                        g$if-transformer$7543$4aEQL
                        (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(foreign-call))
                          g$foreign-call-transformer$7583$4aEQL
                          (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(syntax-case))
                            g$syntax-case-transformer$7589$4aEQL
                            (if (g$memv$5041$4aEQL g$t$9588$4aEQL '(syntax))
                              g$syntax-transformer$7591$4aEQL
                              (if (g$memv$5041$4aEQL
                                    g$t$9588$4aEQL
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7538$4aEQL
                                (if (g$memv$5041$4aEQL
                                      g$t$9588$4aEQL
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7539$4aEQL
                                  (if (g$memv$5041$4aEQL
                                        g$t$9588$4aEQL
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7540$4aEQL
                                    (if (g$memv$5041$4aEQL
                                          g$t$9588$4aEQL
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7537$4aEQL
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9587$4aEQL))))))))))))))))
         g$name$9587$4aEQL))))
   (g$file-options-macro$7593$4aEQL
     g$file-options-macro$11084$4aEQL
     (case-lambda
       ((g$x$9589$4aEQL)
        (letrec* ((g$valid-option?$9590$4aEQL
                    (case-lambda
                      ((g$x$9595$4aEQL)
                       (if (g$id?$7307$4aEQL g$x$9595$4aEQL)
                         (begin
                           '#f
                           (g$memq$5040$4aEQL
                             (g$id->sym$7308$4aEQL g$x$9595$4aEQL)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9591$4aEQL)
              ((case-lambda
                 ((g$ls/false$9592$4aEQL)
                  (if (if g$ls/false$9592$4aEQL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9593$4aEQL)
                               (if (g$for-all$5046$4aEQL
                                     g$valid-option?$9590$4aEQL
                                     g$opt*$9593$4aEQL)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6581$4aEQL
                                     (g$map$5048$4aEQL
                                       g$id->sym$7308$4aEQL
                                       g$opt*$9593$4aEQL)))
                                 '#f)))
                            g$ls/false$9592$4aEQL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9594$4aEQL)
                         (g$bless$7548$4aEQL
                           (list
                             'quote
                             (g$file-options-spec$6581$4aEQL
                               (g$map$5048$4aEQL
                                 g$id->sym$7308$4aEQL
                                 g$opt*$9594$4aEQL))))))
                      g$ls/false$9592$4aEQL)
                    (g$syntax-violation$7696$4aEQL
                      '#f
                      '"invalid syntax"
                      g$t$9591$4aEQL))))
               (g$syntax-dispatch$7585$4aEQL g$t$9591$4aEQL '(_ . each-any)))))
           g$x$9589$4aEQL)))))
   (g$symbol-macro$7594$4aEQL
     g$symbol-macro$11085$4aEQL
     (case-lambda
       ((g$x$9596$4aEQL g$set$9597$4aEQL)
        ((case-lambda
           ((g$t$9598$4aEQL)
            ((case-lambda
               ((g$ls/false$9599$4aEQL)
                (if (if g$ls/false$9599$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9600$4aEQL)
                             (if (g$id?$7307$4aEQL g$name$9600$4aEQL)
                               (begin
                                 '#f
                                 (g$memq$5040$4aEQL
                                   (g$id->sym$7308$4aEQL g$name$9600$4aEQL)
                                   g$set$9597$4aEQL))
                               '#f)))
                          g$ls/false$9599$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9601$4aEQL)
                       (g$bless$7548$4aEQL (list 'quote g$name$9601$4aEQL))))
                    g$ls/false$9599$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$9598$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$9598$4aEQL '(_ any)))))
         g$x$9596$4aEQL))))
   (g$macro-transformer$7595$4aEQL
     g$macro-transformer$11086$4aEQL
     (case-lambda
       ((g$x$9602$4aEQL)
        (if (procedure? g$x$9602$4aEQL)
          g$x$9602$4aEQL
          (if (symbol? g$x$9602$4aEQL)
            ((case-lambda
               ((g$t$9603$4aEQL)
                (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(define-record-type))
                  g$define-record-type-macro$7579$4aEQL
                  (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(define-struct))
                    g$define-struct-macro$7578$4aEQL
                    (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(include))
                      g$include-macro$7573$4aEQL
                      (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(cond))
                        g$cond-macro$7571$4aEQL
                        (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(let))
                          g$let-macro$7551$4aEQL
                          (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(do))
                            g$do-macro$7567$4aEQL
                            (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(or))
                              g$or-macro$7569$4aEQL
                              (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(and))
                                g$and-macro$7570$4aEQL
                                (if (g$memv$5041$4aEQL g$t$9603$4aEQL '(let*))
                                  g$let*-macro$7568$4aEQL
                                  (if (g$memv$5041$4aEQL
                                        g$t$9603$4aEQL
                                        '(let-values))
                                    g$let-values-macro$7552$4aEQL
                                    (if (g$memv$5041$4aEQL
                                          g$t$9603$4aEQL
                                          '(let*-values))
                                      g$let*-values-macro$7553$4aEQL
                                      (if (g$memv$5041$4aEQL
                                            g$t$9603$4aEQL
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7575$4aEQL
                                        (if (g$memv$5041$4aEQL
                                              g$t$9603$4aEQL
                                              '(quasiquote))
                                          g$quasiquote-macro$7576$4aEQL
                                          (if (g$memv$5041$4aEQL
                                                g$t$9603$4aEQL
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7577$4aEQL
                                            (if (g$memv$5041$4aEQL
                                                  g$t$9603$4aEQL
                                                  '(with-syntax))
                                              g$with-syntax-macro$7549$4aEQL
                                              (if (g$memv$5041$4aEQL
                                                    g$t$9603$4aEQL
                                                    '(when))
                                                g$when-macro$7541$4aEQL
                                                (if (g$memv$5041$4aEQL
                                                      g$t$9603$4aEQL
                                                      '(unless))
                                                  g$unless-macro$7542$4aEQL
                                                  (if (g$memv$5041$4aEQL
                                                        g$t$9603$4aEQL
                                                        '(case))
                                                    g$case-macro$7544$4aEQL
                                                    (if (g$memv$5041$4aEQL
                                                          g$t$9603$4aEQL
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7566$4aEQL
                                                      (if (g$memv$5041$4aEQL
                                                            g$t$9603$4aEQL
                                                            '(time))
                                                        g$time-macro$7562$4aEQL
                                                        (if (g$memv$5041$4aEQL
                                                              g$t$9603$4aEQL
                                                              '(delay))
                                                          g$delay-macro$7563$4aEQL
                                                          (if (g$memv$5041$4aEQL
                                                                g$t$9603$4aEQL
                                                                '(assert))
                                                            g$assert-macro$7564$4aEQL
                                                            (if (g$memv$5041$4aEQL
                                                                  g$t$9603$4aEQL
                                                                  '(endianness))
                                                              g$endianness-macro$7565$4aEQL
                                                              (if (g$memv$5041$4aEQL
                                                                    g$t$9603$4aEQL
                                                                    '(guard))
                                                                g$guard-macro$7560$4aEQL
                                                                (if (g$memv$5041$4aEQL
                                                                      g$t$9603$4aEQL
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7561$4aEQL
                                                                  (if (g$memv$5041$4aEQL
                                                                        g$t$9603$4aEQL
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7554$4aEQL
                                                                    (if (g$memv$5041$4aEQL
                                                                          g$t$9603$4aEQL
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7555$4aEQL
                                                                      (if (g$memv$5041$4aEQL
                                                                            g$t$9603$4aEQL
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7556$4aEQL
                                                                        (if (g$memv$5041$4aEQL
                                                                              g$t$9603$4aEQL
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7558$4aEQL
                                                                          (if (g$memv$5041$4aEQL
                                                                                g$t$9603$4aEQL
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7559$4aEQL
                                                                            (if (g$memv$5041$4aEQL
                                                                                  g$t$9603$4aEQL
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7580$4aEQL
                                                                              (if (g$memv$5041$4aEQL
                                                                                    g$t$9603$4aEQL
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7582$4aEQL
                                                                                (if (g$memv$5041$4aEQL
                                                                                      g$t$9603$4aEQL
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7574$4aEQL
                                                                                  (if (g$memv$5041$4aEQL
                                                                                        g$t$9603$4aEQL
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$9604$4aEQL)
                                                                                       (g$symbol-macro$7594$4aEQL
                                                                                         g$x$9604$4aEQL
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5041$4aEQL
                                                                                          g$t$9603$4aEQL
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$9605$4aEQL)
                                                                                         (g$symbol-macro$7594$4aEQL
                                                                                           g$x$9605$4aEQL
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5041$4aEQL
                                                                                            g$t$9603$4aEQL
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$9606$4aEQL)
                                                                                           (g$symbol-macro$7594$4aEQL
                                                                                             g$x$9606$4aEQL
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5041$4aEQL
                                                                                              g$t$9603$4aEQL
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7593$4aEQL
                                                                                          (if (g$memv$5041$4aEQL
                                                                                                g$t$9603$4aEQL
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7581$4aEQL
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$9602$4aEQL)))))))))))))))))))))))))))))))))))))))))
             g$x$9602$4aEQL)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9602$4aEQL))))))
   (g$local-macro-transformer$7596$4aEQL
     g$local-macro-transformer$11087$4aEQL
     (case-lambda ((g$x$9607$4aEQL) (car g$x$9607$4aEQL))))
   (g$do-macro-call$7597$4aEQL
     g$do-macro-call$11088$4aEQL
     (case-lambda
       ((g$transformer$9608$4aEQL g$expr$9609$4aEQL)
        ((case-lambda
           ((g$out$9610$4aEQL)
            (begin
              ((letrec ((g$f$9611$4aEQL
                          (case-lambda
                            ((g$x$9612$4aEQL)
                             (if (not (g$stx?$7279$4aEQL g$x$9612$4aEQL))
                               (if (pair? g$x$9612$4aEQL)
                                 (begin
                                   (g$f$9611$4aEQL (car g$x$9612$4aEQL))
                                   (g$f$9611$4aEQL (cdr g$x$9612$4aEQL)))
                                 (if (vector? g$x$9612$4aEQL)
                                   (vector-for-each
                                     g$f$9611$4aEQL
                                     g$x$9612$4aEQL)
                                   (if (symbol? g$x$9612$4aEQL)
                                     (g$syntax-violation$7696$4aEQL
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9609$4aEQL
                                       g$x$9612$4aEQL)
                                     (void))))
                               (void))))))
                 g$f$9611$4aEQL)
               g$out$9610$4aEQL)
              (g$add-mark$7296$4aEQL
                (g$gen-mark$7291$4aEQL)
                g$out$9610$4aEQL
                g$expr$9609$4aEQL))))
         (g$transformer$9608$4aEQL
           (g$add-mark$7296$4aEQL
             g$anti-mark$7292$4aEQL
             g$expr$9609$4aEQL
             '#f))))))
   (g$chi-macro$7598$4aEQL
     g$chi-macro$11089$4aEQL
     (case-lambda
       ((g$p$9613$4aEQL g$e$9614$4aEQL)
        (g$do-macro-call$7597$4aEQL
          (g$macro-transformer$7595$4aEQL g$p$9613$4aEQL)
          g$e$9614$4aEQL))))
   (g$chi-local-macro$7599$4aEQL
     g$chi-local-macro$11090$4aEQL
     (case-lambda
       ((g$p$9615$4aEQL g$e$9616$4aEQL)
        (g$do-macro-call$7597$4aEQL
          (g$local-macro-transformer$7596$4aEQL g$p$9615$4aEQL)
          g$e$9616$4aEQL))))
   (g$chi-global-macro$7600$4aEQL
     g$chi-global-macro$11091$4aEQL
     (case-lambda
       ((g$p$9617$4aEQL g$e$9618$4aEQL)
        ((case-lambda
           ((g$lib$9619$4aEQL g$loc$9620$4aEQL)
            (begin
              (g$visit-library$7118$4aEQL g$lib$9619$4aEQL)
              ((case-lambda
                 ((g$x$9621$4aEQL)
                  ((case-lambda
                     ((g$transformer$9622$4aEQL)
                      (g$do-macro-call$7597$4aEQL
                        g$transformer$9622$4aEQL
                        g$e$9618$4aEQL)))
                   (if (procedure? g$x$9621$4aEQL)
                     g$x$9621$4aEQL
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9621$4aEQL)))))
               (symbol-value g$loc$9620$4aEQL)))))
         (car g$p$9617$4aEQL)
         (cdr g$p$9617$4aEQL)))))
   (g$chi-expr*$7601$4aEQL
     g$chi-expr*$11092$4aEQL
     (case-lambda
       ((g$e*$9623$4aEQL g$r$9624$4aEQL g$mr$9625$4aEQL)
        (if (null? g$e*$9623$4aEQL)
          '()
          ((case-lambda
             ((g$e$9626$4aEQL)
              (cons
                g$e$9626$4aEQL
                (g$chi-expr*$7601$4aEQL
                  (cdr g$e*$9623$4aEQL)
                  g$r$9624$4aEQL
                  g$mr$9625$4aEQL))))
           (g$chi-expr$7603$4aEQL
             (car g$e*$9623$4aEQL)
             g$r$9624$4aEQL
             g$mr$9625$4aEQL))))))
   (g$chi-application$7602$4aEQL
     g$chi-application$11093$4aEQL
     (case-lambda
       ((g$e$9627$4aEQL g$r$9628$4aEQL g$mr$9629$4aEQL)
        ((case-lambda
           ((g$t$9630$4aEQL)
            ((case-lambda
               ((g$ls/false$9631$4aEQL)
                (if g$ls/false$9631$4aEQL
                  (apply
                    (case-lambda
                      ((g$rator$9632$4aEQL g$rands$9633$4aEQL)
                       ((case-lambda
                          ((g$rator$9634$4aEQL)
                           (cons
                             g$rator$9634$4aEQL
                             (g$chi-expr*$7601$4aEQL
                               g$rands$9633$4aEQL
                               g$r$9628$4aEQL
                               g$mr$9629$4aEQL))))
                        (g$chi-expr$7603$4aEQL
                          g$rator$9632$4aEQL
                          g$r$9628$4aEQL
                          g$mr$9629$4aEQL))))
                    g$ls/false$9631$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$9630$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$9630$4aEQL '(any . each-any)))))
         g$e$9627$4aEQL))))
   (g$chi-expr$7603$4aEQL
     g$chi-expr$11094$4aEQL
     (case-lambda
       ((g$e$9635$4aEQL g$r$9636$4aEQL g$mr$9637$4aEQL)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7327$4aEQL g$e$9635$4aEQL g$r$9636$4aEQL)))
          (case-lambda
            ((g$type$9641$4aEQL g$value$9642$4aEQL g$kwd$9643$4aEQL)
             ((case-lambda
                ((g$kwd$9644$4aEQL g$value$9645$4aEQL g$type$9646$4aEQL)
                 ((case-lambda
                    ((g$t$9647$4aEQL)
                     (if (g$memv$5041$4aEQL g$t$9647$4aEQL '(core-macro))
                       ((case-lambda
                          ((g$transformer$9648$4aEQL)
                           (g$transformer$9648$4aEQL
                             g$e$9635$4aEQL
                             g$r$9636$4aEQL
                             g$mr$9637$4aEQL)))
                        (g$core-macro-transformer$7592$4aEQL
                          g$value$9645$4aEQL))
                       (if (g$memv$5041$4aEQL g$t$9647$4aEQL '(global))
                         ((case-lambda
                            ((g$lib$9649$4aEQL)
                             ((case-lambda
                                ((g$loc$9650$4aEQL)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$7637$4aEQL)
                                        g$lib$9649$4aEQL)
                                       g$loc$9650$4aEQL))))))
                              (cdr g$value$9645$4aEQL))))
                          (car g$value$9645$4aEQL))
                         (if (g$memv$5041$4aEQL g$t$9647$4aEQL '(core-prim))
                           ((case-lambda
                              ((g$name$9651$4aEQL)
                               (list 'primitive g$name$9651$4aEQL)))
                            g$value$9645$4aEQL)
                           (if (g$memv$5041$4aEQL g$t$9647$4aEQL '(call))
                             (g$chi-application$7602$4aEQL
                               g$e$9635$4aEQL
                               g$r$9636$4aEQL
                               g$mr$9637$4aEQL)
                             (if (g$memv$5041$4aEQL g$t$9647$4aEQL '(lexical))
                               ((case-lambda
                                  ((g$lex$9652$4aEQL) g$lex$9652$4aEQL))
                                (g$lexical-var$7529$4aEQL g$value$9645$4aEQL))
                               (if (g$memv$5041$4aEQL
                                     g$t$9647$4aEQL
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7603$4aEQL
                                   (g$chi-global-macro$7600$4aEQL
                                     g$value$9645$4aEQL
                                     g$e$9635$4aEQL)
                                   g$r$9636$4aEQL
                                   g$mr$9637$4aEQL)
                                 (if (g$memv$5041$4aEQL
                                       g$t$9647$4aEQL
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7603$4aEQL
                                     (g$chi-local-macro$7599$4aEQL
                                       g$value$9645$4aEQL
                                       g$e$9635$4aEQL)
                                     g$r$9636$4aEQL
                                     g$mr$9637$4aEQL)
                                   (if (g$memv$5041$4aEQL
                                         g$t$9647$4aEQL
                                         '(macro macro!))
                                     (g$chi-expr$7603$4aEQL
                                       (g$chi-macro$7598$4aEQL
                                         g$value$9645$4aEQL
                                         g$e$9635$4aEQL)
                                       g$r$9636$4aEQL
                                       g$mr$9637$4aEQL)
                                     (if (g$memv$5041$4aEQL
                                           g$t$9647$4aEQL
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$9653$4aEQL)
                                           (list 'quote g$datum$9653$4aEQL)))
                                        g$value$9645$4aEQL)
                                       (if (g$memv$5041$4aEQL
                                             g$t$9647$4aEQL
                                             '(set!))
                                         (g$chi-set!$7604$4aEQL
                                           g$e$9635$4aEQL
                                           g$r$9636$4aEQL
                                           g$mr$9637$4aEQL)
                                         (if (g$memv$5041$4aEQL
                                               g$t$9647$4aEQL
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$9654$4aEQL)
                                               ((case-lambda
                                                  ((g$ls/false$9655$4aEQL)
                                                   (if g$ls/false$9655$4aEQL
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9656$4aEQL
                                                            g$x*$9657$4aEQL)
                                                          (g$build-sequence$7236$4aEQL
                                                            '#f
                                                            (g$chi-expr*$7601$4aEQL
                                                              (cons
                                                                g$x$9656$4aEQL
                                                                g$x*$9657$4aEQL)
                                                              g$r$9636$4aEQL
                                                              g$mr$9637$4aEQL))))
                                                       g$ls/false$9655$4aEQL)
                                                     (g$syntax-violation$7696$4aEQL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9654$4aEQL))))
                                                (g$syntax-dispatch$7585$4aEQL
                                                  g$t$9654$4aEQL
                                                  '(_ any . each-any)))))
                                            g$e$9635$4aEQL)
                                           (if (g$memv$5041$4aEQL
                                                 g$t$9647$4aEQL
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9658$4aEQL)
                                                 ((case-lambda
                                                    ((g$ls/false$9659$4aEQL)
                                                     (if (if g$ls/false$9659$4aEQL
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9660$4aEQL
                                                                    g$xrhs*$9661$4aEQL
                                                                    g$xbody$9662$4aEQL
                                                                    g$xbody*$9663$4aEQL)
                                                                  (if (not (g$valid-bound-ids?$7312$4aEQL
                                                                             g$xlhs*$9660$4aEQL))
                                                                    (g$syntax-violation$7696$4aEQL
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9635$4aEQL)
                                                                    (void))))
                                                               g$ls/false$9659$4aEQL))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9664$4aEQL
                                                              g$xrhs*$9665$4aEQL
                                                              g$xbody$9666$4aEQL
                                                              g$xbody*$9667$4aEQL)
                                                            ((case-lambda
                                                               ((g$xlab*$9668$4aEQL)
                                                                ((case-lambda
                                                                   ((g$xrib$9669$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$xb*$9670$4aEQL)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7236$4aEQL
                                                                              '#f
                                                                              (g$chi-expr*$7601$4aEQL
                                                                                (g$map$5048$4aEQL
                                                                                  (case-lambda
                                                                                    ((g$x$9671$4aEQL)
                                                                                     (g$add-subst$7297$4aEQL
                                                                                       g$xrib$9669$4aEQL
                                                                                       g$x$9671$4aEQL)))
                                                                                  (cons
                                                                                    g$xbody$9666$4aEQL
                                                                                    g$xbody*$9667$4aEQL))
                                                                                (append
                                                                                  (g$map$5048$4aEQL
                                                                                    cons
                                                                                    g$xlab*$9668$4aEQL
                                                                                    g$xb*$9670$4aEQL)
                                                                                  g$r$9636$4aEQL)
                                                                                (append
                                                                                  (g$map$5048$4aEQL
                                                                                    cons
                                                                                    g$xlab*$9668$4aEQL
                                                                                    g$xb*$9670$4aEQL)
                                                                                  g$mr$9637$4aEQL))))))))
                                                                     (g$map$5048$4aEQL
                                                                       (case-lambda
                                                                         ((g$x$9672$4aEQL)
                                                                          (g$make-eval-transformer$7339$4aEQL
                                                                            (g$expand-transformer$7630$4aEQL
                                                                              (if (eq? g$type$9646$4aEQL
                                                                                       'let-syntax)
                                                                                g$x$9672$4aEQL
                                                                                (g$add-subst$7297$4aEQL
                                                                                  g$xrib$9669$4aEQL
                                                                                  g$x$9672$4aEQL))
                                                                              g$mr$9637$4aEQL))))
                                                                       g$xrhs*$9665$4aEQL))))
                                                                 (g$make-full-rib$7275$4aEQL
                                                                   g$xlhs*$9664$4aEQL
                                                                   g$xlab*$9668$4aEQL))))
                                                             (g$map$5048$4aEQL
                                                               g$gen-label$7248$4aEQL
                                                               g$xlhs*$9664$4aEQL))))
                                                         g$ls/false$9659$4aEQL)
                                                       (g$syntax-violation$7696$4aEQL
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9658$4aEQL))))
                                                  (g$syntax-dispatch$7585$4aEQL
                                                    g$t$9658$4aEQL
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9635$4aEQL)
                                             (if (g$memv$5041$4aEQL
                                                   g$t$9647$4aEQL
                                                   '(displaced-lexical))
                                               (g$syntax-violation$7696$4aEQL
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9635$4aEQL)
                                               (if (g$memv$5041$4aEQL
                                                     g$t$9647$4aEQL
                                                     '(syntax))
                                                 (g$syntax-violation$7696$4aEQL
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9635$4aEQL)
                                                 (if (g$memv$5041$4aEQL
                                                       g$t$9647$4aEQL
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7696$4aEQL
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9673$4aEQL)
                                                           (if (g$memv$5041$4aEQL
                                                                 g$t$9673$4aEQL
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5041$4aEQL
                                                                   g$t$9673$4aEQL
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5041$4aEQL
                                                                     g$t$9673$4aEQL
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5041$4aEQL
                                                                       g$t$9673$4aEQL
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5041$4aEQL
                                                                         g$t$9673$4aEQL
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5041$4aEQL
                                                                           g$t$9673$4aEQL
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$9646$4aEQL)
                                                       '" was found where an expression was expected")
                                                     g$e$9635$4aEQL)
                                                   (if (g$memv$5041$4aEQL
                                                         g$t$9647$4aEQL
                                                         '(mutable))
                                                     (g$syntax-violation$7696$4aEQL
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9635$4aEQL)
                                                     (g$syntax-violation$7696$4aEQL
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9635$4aEQL)))))))))))))))))))
                  g$type$9646$4aEQL)))
              g$kwd$9643$4aEQL
              g$value$9642$4aEQL
              g$type$9641$4aEQL)))))))
   (g$chi-set!$7604$4aEQL
     g$chi-set!$11095$4aEQL
     (case-lambda
       ((g$e$9674$4aEQL g$r$9675$4aEQL g$mr$9676$4aEQL)
        ((case-lambda
           ((g$t$9677$4aEQL)
            ((case-lambda
               ((g$ls/false$9678$4aEQL)
                (if (if g$ls/false$9678$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9679$4aEQL g$v$9680$4aEQL)
                             (g$id?$7307$4aEQL g$x$9679$4aEQL)))
                          g$ls/false$9678$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9681$4aEQL g$v$9682$4aEQL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7327$4aEQL
                              g$x$9681$4aEQL
                              g$r$9675$4aEQL)))
                         (case-lambda
                           ((g$type$9686$4aEQL
                              g$value$9687$4aEQL
                              g$kwd$9688$4aEQL)
                            ((case-lambda
                               ((g$kwd$9689$4aEQL
                                  g$value$9690$4aEQL
                                  g$type$9691$4aEQL)
                                ((case-lambda
                                   ((g$t$9692$4aEQL)
                                    (if (g$memv$5041$4aEQL
                                          g$t$9692$4aEQL
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7531$4aEQL
                                          g$value$9690$4aEQL
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7529$4aEQL
                                            g$value$9690$4aEQL)
                                          (g$chi-expr$7603$4aEQL
                                            g$v$9682$4aEQL
                                            g$r$9675$4aEQL
                                            g$mr$9676$4aEQL)))
                                      (if (g$memv$5041$4aEQL
                                            g$t$9692$4aEQL
                                            '(core-prim))
                                        (g$syntax-violation$7696$4aEQL
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9674$4aEQL)
                                        (if (g$memv$5041$4aEQL
                                              g$t$9692$4aEQL
                                              '(global))
                                          (g$syntax-violation$7696$4aEQL
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9674$4aEQL)
                                          (if (g$memv$5041$4aEQL
                                                g$t$9692$4aEQL
                                                '(global-macro!))
                                            (g$chi-expr$7603$4aEQL
                                              (g$chi-global-macro$7600$4aEQL
                                                g$value$9690$4aEQL
                                                g$e$9674$4aEQL)
                                              g$r$9675$4aEQL
                                              g$mr$9676$4aEQL)
                                            (if (g$memv$5041$4aEQL
                                                  g$t$9692$4aEQL
                                                  '(local-macro!))
                                              (g$chi-expr$7603$4aEQL
                                                (g$chi-local-macro$7599$4aEQL
                                                  g$value$9690$4aEQL
                                                  g$e$9674$4aEQL)
                                                g$r$9675$4aEQL
                                                g$mr$9676$4aEQL)
                                              (if (g$memv$5041$4aEQL
                                                    g$t$9692$4aEQL
                                                    '(mutable))
                                                (g$syntax-violation$7696$4aEQL
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9674$4aEQL)
                                                (g$syntax-violation$7696$4aEQL
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9674$4aEQL)))))))))
                                 g$type$9691$4aEQL)))
                             g$kwd$9688$4aEQL
                             g$value$9687$4aEQL
                             g$type$9686$4aEQL))))))
                    g$ls/false$9678$4aEQL)
                  (g$syntax-violation$7696$4aEQL
                    '#f
                    '"invalid syntax"
                    g$t$9677$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$9677$4aEQL '(_ any any)))))
         g$e$9674$4aEQL))))
   (g$verify-formals$7605$4aEQL
     g$verify-formals$11096$4aEQL
     (case-lambda
       ((g$fmls$9693$4aEQL g$stx$9694$4aEQL)
        ((case-lambda
           ((g$t$9695$4aEQL)
            ((case-lambda
               ((g$ls/false$9696$4aEQL)
                (if g$ls/false$9696$4aEQL
                  (apply
                    (case-lambda
                      ((g$x*$9697$4aEQL)
                       (if (not (g$valid-bound-ids?$7312$4aEQL g$x*$9697$4aEQL))
                         (g$invalid-fmls-error$7550$4aEQL
                           g$stx$9694$4aEQL
                           g$fmls$9693$4aEQL)
                         (void))))
                    g$ls/false$9696$4aEQL)
                  ((case-lambda
                     ((g$t$9698$4aEQL)
                      ((case-lambda
                         ((g$ls/false$9699$4aEQL)
                          (if g$ls/false$9699$4aEQL
                            (apply
                              (case-lambda
                                ((g$x*$9700$4aEQL g$x$9701$4aEQL)
                                 (if (not (g$valid-bound-ids?$7312$4aEQL
                                            (cons
                                              g$x$9701$4aEQL
                                              g$x*$9700$4aEQL)))
                                   (g$invalid-fmls-error$7550$4aEQL
                                     g$stx$9694$4aEQL
                                     g$fmls$9693$4aEQL)
                                   (void))))
                              g$ls/false$9699$4aEQL)
                            ((case-lambda
                               ((g$t$9702$4aEQL)
                                ((case-lambda
                                   ((g$ls/false$9703$4aEQL)
                                    (if g$ls/false$9703$4aEQL
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9694$4aEQL)))
                                        g$ls/false$9703$4aEQL)
                                      (g$syntax-violation$7696$4aEQL
                                        '#f
                                        '"invalid syntax"
                                        g$t$9702$4aEQL))))
                                 (g$syntax-dispatch$7585$4aEQL
                                   g$t$9702$4aEQL
                                   '_))))
                             g$t$9698$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$9698$4aEQL
                         '#(each+ any () any)))))
                   g$t$9695$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$9695$4aEQL 'each-any))))
         g$fmls$9693$4aEQL))))
   (g$chi-lambda-clause$7606$4aEQL
     g$chi-lambda-clause$11097$4aEQL
     (case-lambda
       ((g$stx$9704$4aEQL
          g$fmls$9705$4aEQL
          g$body*$9706$4aEQL
          g$r$9707$4aEQL
          g$mr$9708$4aEQL)
        ((case-lambda
           ((g$t$9709$4aEQL)
            ((case-lambda
               ((g$ls/false$9710$4aEQL)
                (if g$ls/false$9710$4aEQL
                  (apply
                    (case-lambda
                      ((g$x*$9711$4aEQL)
                       (begin
                         (g$verify-formals$7605$4aEQL
                           g$fmls$9705$4aEQL
                           g$stx$9704$4aEQL)
                         ((case-lambda
                            ((g$lex*$9712$4aEQL g$lab*$9713$4aEQL)
                             (values
                               g$lex*$9712$4aEQL
                               (g$chi-internal$7614$4aEQL
                                 (g$add-subst$7297$4aEQL
                                   (g$make-full-rib$7275$4aEQL
                                     g$x*$9711$4aEQL
                                     g$lab*$9713$4aEQL)
                                   g$body*$9706$4aEQL)
                                 (g$add-lexicals$7533$4aEQL
                                   g$lab*$9713$4aEQL
                                   g$lex*$9712$4aEQL
                                   g$r$9707$4aEQL)
                                 g$mr$9708$4aEQL))))
                          (g$map$5048$4aEQL
                            g$gen-lexical$7246$4aEQL
                            g$x*$9711$4aEQL)
                          (g$map$5048$4aEQL
                            g$gen-label$7248$4aEQL
                            g$x*$9711$4aEQL)))))
                    g$ls/false$9710$4aEQL)
                  ((case-lambda
                     ((g$t$9714$4aEQL)
                      ((case-lambda
                         ((g$ls/false$9715$4aEQL)
                          (if g$ls/false$9715$4aEQL
                            (apply
                              (case-lambda
                                ((g$x*$9716$4aEQL g$x$9717$4aEQL)
                                 (begin
                                   (g$verify-formals$7605$4aEQL
                                     g$fmls$9705$4aEQL
                                     g$stx$9704$4aEQL)
                                   ((case-lambda
                                      ((g$lex*$9718$4aEQL
                                         g$lab*$9719$4aEQL
                                         g$lex$9720$4aEQL
                                         g$lab$9721$4aEQL)
                                       (values
                                         (append
                                           g$lex*$9718$4aEQL
                                           g$lex$9720$4aEQL)
                                         (g$chi-internal$7614$4aEQL
                                           (g$add-subst$7297$4aEQL
                                             (g$make-full-rib$7275$4aEQL
                                               (cons
                                                 g$x$9717$4aEQL
                                                 g$x*$9716$4aEQL)
                                               (cons
                                                 g$lab$9721$4aEQL
                                                 g$lab*$9719$4aEQL))
                                             g$body*$9706$4aEQL)
                                           (g$add-lexicals$7533$4aEQL
                                             (cons
                                               g$lab$9721$4aEQL
                                               g$lab*$9719$4aEQL)
                                             (cons
                                               g$lex$9720$4aEQL
                                               g$lex*$9718$4aEQL)
                                             g$r$9707$4aEQL)
                                           g$mr$9708$4aEQL))))
                                    (g$map$5048$4aEQL
                                      g$gen-lexical$7246$4aEQL
                                      g$x*$9716$4aEQL)
                                    (g$map$5048$4aEQL
                                      g$gen-label$7248$4aEQL
                                      g$x*$9716$4aEQL)
                                    (g$gen-lexical$7246$4aEQL g$x$9717$4aEQL)
                                    (g$gen-label$7248$4aEQL g$x$9717$4aEQL)))))
                              g$ls/false$9715$4aEQL)
                            ((case-lambda
                               ((g$t$9722$4aEQL)
                                ((case-lambda
                                   ((g$ls/false$9723$4aEQL)
                                    (if g$ls/false$9723$4aEQL
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7696$4aEQL
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9705$4aEQL)))
                                        g$ls/false$9723$4aEQL)
                                      (g$syntax-violation$7696$4aEQL
                                        '#f
                                        '"invalid syntax"
                                        g$t$9722$4aEQL))))
                                 (g$syntax-dispatch$7585$4aEQL
                                   g$t$9722$4aEQL
                                   '_))))
                             g$t$9714$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$9714$4aEQL
                         '#(each+ any () any)))))
                   g$t$9709$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$9709$4aEQL 'each-any))))
         g$fmls$9705$4aEQL))))
   (g$chi-lambda-clause*$7607$4aEQL
     g$chi-lambda-clause*$11098$4aEQL
     (case-lambda
       ((g$stx$9724$4aEQL
          g$fmls*$9725$4aEQL
          g$body**$9726$4aEQL
          g$r$9727$4aEQL
          g$mr$9728$4aEQL)
        (if (null? g$fmls*$9725$4aEQL)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7606$4aEQL
                 g$stx$9724$4aEQL
                 (car g$fmls*$9725$4aEQL)
                 (car g$body**$9726$4aEQL)
                 g$r$9727$4aEQL
                 g$mr$9728$4aEQL)))
            (case-lambda
              ((g$a$9731$4aEQL g$b$9732$4aEQL)
               ((case-lambda
                  ((g$b$9733$4aEQL g$a$9734$4aEQL)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7607$4aEQL
                          g$stx$9724$4aEQL
                          (cdr g$fmls*$9725$4aEQL)
                          (cdr g$body**$9726$4aEQL)
                          g$r$9727$4aEQL
                          g$mr$9728$4aEQL)))
                     (case-lambda
                       ((g$a*$9737$4aEQL g$b*$9738$4aEQL)
                        ((case-lambda
                           ((g$b*$9739$4aEQL g$a*$9740$4aEQL)
                            (values
                              (cons g$a$9734$4aEQL g$a*$9740$4aEQL)
                              (cons g$b$9733$4aEQL g$b*$9739$4aEQL))))
                         g$b*$9738$4aEQL
                         g$a*$9737$4aEQL))))))
                g$b$9732$4aEQL
                g$a$9731$4aEQL))))))))
   (g$chi-defun$7608$4aEQL
     g$chi-defun$11099$4aEQL
     (case-lambda
       ((g$x$9741$4aEQL g$r$9742$4aEQL g$mr$9743$4aEQL)
        ((case-lambda
           ((g$fmls$9744$4aEQL g$body*$9745$4aEQL)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7606$4aEQL
                   g$fmls$9744$4aEQL
                   g$fmls$9744$4aEQL
                   g$body*$9745$4aEQL
                   g$r$9742$4aEQL
                   g$mr$9743$4aEQL)))
              (case-lambda
                ((g$fmls$9748$4aEQL g$body$9749$4aEQL)
                 ((case-lambda
                    ((g$body$9750$4aEQL g$fmls$9751$4aEQL)
                     (g$build-lambda$7233$4aEQL
                       '#f
                       g$fmls$9751$4aEQL
                       g$body$9750$4aEQL)))
                  g$body$9749$4aEQL
                  g$fmls$9748$4aEQL))))))
         (car g$x$9741$4aEQL)
         (cdr g$x$9741$4aEQL)))))
   (g$chi-rhs$7609$4aEQL
     g$chi-rhs$11100$4aEQL
     (case-lambda
       ((g$rhs$9752$4aEQL g$r$9753$4aEQL g$mr$9754$4aEQL)
        ((case-lambda
           ((g$t$9755$4aEQL)
            (if (g$memv$5041$4aEQL g$t$9755$4aEQL '(defun))
              (g$chi-defun$7608$4aEQL
                (cdr g$rhs$9752$4aEQL)
                g$r$9753$4aEQL
                g$mr$9754$4aEQL)
              (if (g$memv$5041$4aEQL g$t$9755$4aEQL '(expr))
                ((case-lambda
                   ((g$expr$9756$4aEQL)
                    (g$chi-expr$7603$4aEQL
                      g$expr$9756$4aEQL
                      g$r$9753$4aEQL
                      g$mr$9754$4aEQL)))
                 (cdr g$rhs$9752$4aEQL))
                (if (g$memv$5041$4aEQL g$t$9755$4aEQL '(top-expr))
                  ((case-lambda
                     ((g$expr$9757$4aEQL)
                      (g$build-sequence$7236$4aEQL
                        '#f
                        (list
                          (g$chi-expr$7603$4aEQL
                            g$expr$9757$4aEQL
                            g$r$9753$4aEQL
                            g$mr$9754$4aEQL)
                          (g$build-void$7237$4aEQL)))))
                   (cdr g$rhs$9752$4aEQL))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9752$4aEQL))))))
         (car g$rhs$9752$4aEQL)))))
   (g$expand-interaction-rhs*/init*$7610$4aEQL
     g$expand-interaction-rhs*/init*$11101$4aEQL
     (case-lambda
       ((g$lhs*$9758$4aEQL
          g$rhs*$9759$4aEQL
          g$init*$9760$4aEQL
          g$r$9761$4aEQL
          g$mr$9762$4aEQL)
        ((letrec ((g$f$9763$4aEQL
                    (case-lambda
                      ((g$lhs*$9764$4aEQL g$rhs*$9765$4aEQL)
                       (if (null? g$lhs*$9764$4aEQL)
                         (g$map$5048$4aEQL
                           (case-lambda
                             ((g$x$9766$4aEQL)
                              (g$chi-expr$7603$4aEQL
                                g$x$9766$4aEQL
                                g$r$9761$4aEQL
                                g$mr$9762$4aEQL)))
                           g$init*$9760$4aEQL)
                         ((case-lambda
                            ((g$lhs$9767$4aEQL g$rhs$9768$4aEQL)
                             ((case-lambda
                                ((g$t$9769$4aEQL)
                                 (if (g$memv$5041$4aEQL g$t$9769$4aEQL '(defun))
                                   ((case-lambda
                                      ((g$rhs$9770$4aEQL)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9767$4aEQL
                                           g$rhs$9770$4aEQL)
                                         (g$f$9763$4aEQL
                                           (cdr g$lhs*$9764$4aEQL)
                                           (cdr g$rhs*$9765$4aEQL)))))
                                    (g$chi-defun$7608$4aEQL
                                      (cdr g$rhs$9768$4aEQL)
                                      g$r$9761$4aEQL
                                      g$mr$9762$4aEQL))
                                   (if (g$memv$5041$4aEQL
                                         g$t$9769$4aEQL
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$9771$4aEQL)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9767$4aEQL
                                             g$rhs$9771$4aEQL)
                                           (g$f$9763$4aEQL
                                             (cdr g$lhs*$9764$4aEQL)
                                             (cdr g$rhs*$9765$4aEQL)))))
                                      (g$chi-expr$7603$4aEQL
                                        (cdr g$rhs$9768$4aEQL)
                                        g$r$9761$4aEQL
                                        g$mr$9762$4aEQL))
                                     (if (g$memv$5041$4aEQL
                                           g$t$9769$4aEQL
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$9772$4aEQL)
                                           (cons
                                             g$e$9772$4aEQL
                                             (g$f$9763$4aEQL
                                               (cdr g$lhs*$9764$4aEQL)
                                               (cdr g$rhs*$9765$4aEQL)))))
                                        (g$chi-expr$7603$4aEQL
                                          (cdr g$rhs$9768$4aEQL)
                                          g$r$9761$4aEQL
                                          g$mr$9762$4aEQL))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9768$4aEQL))))))
                              (car g$rhs$9768$4aEQL))))
                          (car g$lhs*$9764$4aEQL)
                          (car g$rhs*$9765$4aEQL)))))))
           g$f$9763$4aEQL)
         g$lhs*$9758$4aEQL
         g$rhs*$9759$4aEQL))))
   (g$chi-rhs*$7611$4aEQL
     g$chi-rhs*$11102$4aEQL
     (case-lambda
       ((g$rhs*$9773$4aEQL g$r$9774$4aEQL g$mr$9775$4aEQL)
        ((letrec ((g$f$9776$4aEQL
                    (case-lambda
                      ((g$ls$9777$4aEQL)
                       (if (null? g$ls$9777$4aEQL)
                         '()
                         ((case-lambda
                            ((g$a$9778$4aEQL)
                             (cons
                               g$a$9778$4aEQL
                               (g$f$9776$4aEQL (cdr g$ls$9777$4aEQL)))))
                          (g$chi-rhs$7609$4aEQL
                            (car g$ls$9777$4aEQL)
                            g$r$9774$4aEQL
                            g$mr$9775$4aEQL)))))))
           g$f$9776$4aEQL)
         g$rhs*$9773$4aEQL))))
   (g$find-bound=?$7612$4aEQL
     g$find-bound=?$11103$4aEQL
     (case-lambda
       ((g$x$9779$4aEQL g$lhs*$9780$4aEQL g$rhs*$9781$4aEQL)
        (if (null? g$lhs*$9780$4aEQL)
          '#f
          (if (g$bound-id=?$7310$4aEQL g$x$9779$4aEQL (car g$lhs*$9780$4aEQL))
            (car g$rhs*$9781$4aEQL)
            (g$find-bound=?$7612$4aEQL
              g$x$9779$4aEQL
              (cdr g$lhs*$9780$4aEQL)
              (cdr g$rhs*$9781$4aEQL)))))))
   (g$find-dups$7613$4aEQL
     g$find-dups$11104$4aEQL
     (case-lambda
       ((g$ls$9782$4aEQL)
        ((letrec ((g$f$9783$4aEQL
                    (case-lambda
                      ((g$ls$9784$4aEQL g$dups$9785$4aEQL)
                       (if (null? g$ls$9784$4aEQL)
                         g$dups$9785$4aEQL
                         ((case-lambda
                            ((g$t$9786$4aEQL)
                             (if g$t$9786$4aEQL
                               ((case-lambda
                                  ((g$x$9787$4aEQL)
                                   (g$f$9783$4aEQL
                                     (cdr g$ls$9784$4aEQL)
                                     (cons
                                       (list
                                         (car g$ls$9784$4aEQL)
                                         g$x$9787$4aEQL)
                                       g$dups$9785$4aEQL))))
                                g$t$9786$4aEQL)
                               (g$f$9783$4aEQL
                                 (cdr g$ls$9784$4aEQL)
                                 g$dups$9785$4aEQL))))
                          (g$find-bound=?$7612$4aEQL
                            (car g$ls$9784$4aEQL)
                            (cdr g$ls$9784$4aEQL)
                            (cdr g$ls$9784$4aEQL))))))))
           g$f$9783$4aEQL)
         g$ls$9782$4aEQL
         '()))))
   (g$chi-internal$7614$4aEQL
     g$chi-internal$11105$4aEQL
     (case-lambda
       ((g$e*$9788$4aEQL g$r$9789$4aEQL g$mr$9790$4aEQL)
        ((case-lambda
           ((g$rib$9791$4aEQL)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7629$4aEQL
                   (g$map$5048$4aEQL
                     (case-lambda
                       ((g$x$9800$4aEQL)
                        (g$add-subst$7297$4aEQL
                          g$rib$9791$4aEQL
                          g$x$9800$4aEQL)))
                     (g$syntax->list$7306$4aEQL g$e*$9788$4aEQL))
                   g$r$9789$4aEQL
                   g$mr$9790$4aEQL
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$9791$4aEQL
                   '#f)))
              (case-lambda
                ((g$e*$9801$4aEQL
                   g$r$9802$4aEQL
                   g$mr$9803$4aEQL
                   g$lex*$9804$4aEQL
                   g$rhs*$9805$4aEQL
                   g$mod**$9806$4aEQL
                   g$kwd*$9807$4aEQL
                   g$_exp*$9808$4aEQL)
                 ((case-lambda
                    ((g$_exp*$9809$4aEQL
                       g$kwd*$9810$4aEQL
                       g$mod**$9811$4aEQL
                       g$rhs*$9812$4aEQL
                       g$lex*$9813$4aEQL
                       g$mr$9814$4aEQL
                       g$r$9815$4aEQL
                       g$e*$9816$4aEQL)
                     (begin
                       (if (null? g$e*$9816$4aEQL)
                         (g$syntax-violation$7696$4aEQL
                           '#f
                           '"no expression in body"
                           g$e*$9816$4aEQL)
                         (void))
                       ((case-lambda
                          ((g$init*$9817$4aEQL)
                           ((case-lambda
                              ((g$rhs*$9818$4aEQL)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7239$4aEQL
                                     '#f
                                     (reverse g$lex*$9813$4aEQL)
                                     (reverse g$rhs*$9818$4aEQL)
                                     (g$build-sequence$7236$4aEQL
                                       '#f
                                       g$init*$9817$4aEQL)))))))
                            (g$chi-rhs*$7611$4aEQL
                              g$rhs*$9812$4aEQL
                              g$r$9815$4aEQL
                              g$mr$9814$4aEQL))))
                        (g$chi-expr*$7601$4aEQL
                          (append
                            (apply append (reverse g$mod**$9811$4aEQL))
                            g$e*$9816$4aEQL)
                          g$r$9815$4aEQL
                          g$mr$9814$4aEQL)))))
                  g$_exp*$9808$4aEQL
                  g$kwd*$9807$4aEQL
                  g$mod**$9806$4aEQL
                  g$rhs*$9805$4aEQL
                  g$lex*$9804$4aEQL
                  g$mr$9803$4aEQL
                  g$r$9802$4aEQL
                  g$e*$9801$4aEQL))))))
         (g$make-empty-rib$7267$4aEQL)))))
   (g$parse-module$7615$4aEQL
     g$parse-module$11106$4aEQL
     (case-lambda
       ((g$e$9819$4aEQL)
        ((case-lambda
           ((g$t$9820$4aEQL)
            ((case-lambda
               ((g$ls/false$9821$4aEQL)
                (if g$ls/false$9821$4aEQL
                  (apply
                    (case-lambda
                      ((g$export*$9822$4aEQL g$b*$9823$4aEQL)
                       (begin
                         (if (not (g$for-all$5046$4aEQL
                                    g$id?$7307$4aEQL
                                    g$export*$9822$4aEQL))
                           (g$syntax-violation$7696$4aEQL
                             '#f
                             '"module exports must be identifiers"
                             g$e$9819$4aEQL)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$9822$4aEQL)
                           g$b*$9823$4aEQL))))
                    g$ls/false$9821$4aEQL)
                  ((case-lambda
                     ((g$t$9824$4aEQL)
                      ((case-lambda
                         ((g$ls/false$9825$4aEQL)
                          (if g$ls/false$9825$4aEQL
                            (apply
                              (case-lambda
                                ((g$name$9826$4aEQL
                                   g$export*$9827$4aEQL
                                   g$b*$9828$4aEQL)
                                 (begin
                                   (if (not (g$id?$7307$4aEQL
                                              g$name$9826$4aEQL))
                                     (g$syntax-violation$7696$4aEQL
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9819$4aEQL)
                                     (void))
                                   (if (not (g$for-all$5046$4aEQL
                                              g$id?$7307$4aEQL
                                              g$export*$9827$4aEQL))
                                     (g$syntax-violation$7696$4aEQL
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9819$4aEQL)
                                     (void))
                                   (values
                                     g$name$9826$4aEQL
                                     (list->vector g$export*$9827$4aEQL)
                                     g$b*$9828$4aEQL))))
                              g$ls/false$9825$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$9824$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$9824$4aEQL
                         '(_ any each-any . each-any)))))
                   g$t$9820$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$9820$4aEQL
               '(_ each-any . each-any)))))
         g$e$9819$4aEQL))))
   (g$8728$7616$4aEQL
     g$8728$11107$4aEQL
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8731$4aEQL
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8730$7617$4aEQL g$8730$11108$4aEQL '#f)
   (g$8729$7618$4aEQL
     g$8729$11109$4aEQL
     (make-record-constructor-descriptor
       g$8728$7616$4aEQL
       '#f
       g$8730$7617$4aEQL))
   (g$module-interface?$7619$4aEQL
     g$module-interface?$11110$4aEQL
     (record-predicate g$8728$7616$4aEQL))
   (g$make-module-interface$7620$4aEQL
     g$make-module-interface$11111$4aEQL
     (record-constructor g$8729$7618$4aEQL))
   (g$module-interface-first-mark$7621$4aEQL
     g$module-interface-first-mark$11112$4aEQL
     (record-accessor g$8728$7616$4aEQL '0))
   (g$module-interface-exp-id-vec$7622$4aEQL
     g$module-interface-exp-id-vec$11113$4aEQL
     (record-accessor g$8728$7616$4aEQL '1))
   (g$module-interface-exp-lab-vec$7623$4aEQL
     g$module-interface-exp-lab-vec$11114$4aEQL
     (record-accessor g$8728$7616$4aEQL '2))
   (g$set-module-interface-first-mark!$7624$4aEQL
     g$set-module-interface-first-mark!$11115$4aEQL
     (record-mutator g$8728$7616$4aEQL '0))
   (g$set-module-interface-exp-id-vec!$7625$4aEQL
     g$set-module-interface-exp-id-vec!$11116$4aEQL
     (record-mutator g$8728$7616$4aEQL '1))
   (g$set-module-interface-exp-lab-vec!$7626$4aEQL
     g$set-module-interface-exp-lab-vec!$11117$4aEQL
     (record-mutator g$8728$7616$4aEQL '2))
   (g$module-interface-exp-id*$7627$4aEQL
     g$module-interface-exp-id*$11118$4aEQL
     (case-lambda
       ((g$iface$9829$4aEQL g$id$9830$4aEQL)
        (letrec* ((g$diff-marks$9831$4aEQL
                    (case-lambda
                      ((g$ls$9835$4aEQL g$x$9836$4aEQL)
                       (begin
                         (if (null? g$ls$9835$4aEQL)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9837$4aEQL)
                             (if (eq? g$a$9837$4aEQL g$x$9836$4aEQL)
                               '()
                               (cons
                                 g$a$9837$4aEQL
                                 (g$diff-marks$9831$4aEQL
                                   (cdr g$ls$9835$4aEQL)
                                   g$x$9836$4aEQL)))))
                          (car g$ls$9835$4aEQL)))))))
          ((case-lambda
             ((g$diff$9832$4aEQL g$id-vec$9833$4aEQL)
              (if (null? g$diff$9832$4aEQL)
                g$id-vec$9833$4aEQL
                (vector-map
                  (case-lambda
                    ((g$x$9834$4aEQL)
                     (g$make-stx$7280$4aEQL
                       (g$stx-expr$7281$4aEQL g$x$9834$4aEQL)
                       (append
                         g$diff$9832$4aEQL
                         (g$stx-mark*$7282$4aEQL g$x$9834$4aEQL))
                       '()
                       '())))
                  g$id-vec$9833$4aEQL))))
           (g$diff-marks$9831$4aEQL
             (g$stx-mark*$7282$4aEQL g$id$9830$4aEQL)
             (g$module-interface-first-mark$7621$4aEQL g$iface$9829$4aEQL))
           (g$module-interface-exp-id-vec$7622$4aEQL g$iface$9829$4aEQL))))))
   (g$chi-internal-module$7628$4aEQL
     g$chi-internal-module$11119$4aEQL
     (case-lambda
       ((g$e$9838$4aEQL
          g$r$9839$4aEQL
          g$mr$9840$4aEQL
          g$lex*$9841$4aEQL
          g$rhs*$9842$4aEQL
          g$mod**$9843$4aEQL
          g$kwd*$9844$4aEQL)
        (call-with-values
          (case-lambda (() (g$parse-module$7615$4aEQL g$e$9838$4aEQL)))
          (case-lambda
            ((g$name$9848$4aEQL g$exp-id*$9849$4aEQL g$e*$9850$4aEQL)
             ((case-lambda
                ((g$e*$9851$4aEQL g$exp-id*$9852$4aEQL g$name$9853$4aEQL)
                 ((case-lambda
                    ((g$rib$9854$4aEQL)
                     ((case-lambda
                        ((g$e*$9855$4aEQL)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7629$4aEQL
                                    g$e*$9855$4aEQL
                                    g$r$9839$4aEQL
                                    g$mr$9840$4aEQL
                                    g$lex*$9841$4aEQL
                                    g$rhs*$9842$4aEQL
                                    g$mod**$9843$4aEQL
                                    g$kwd*$9844$4aEQL
                                    '()
                                    g$rib$9854$4aEQL
                                    '#f)))
                               (case-lambda
                                 ((g$e*$9864$4aEQL
                                    g$r$9865$4aEQL
                                    g$mr$9866$4aEQL
                                    g$lex*$9867$4aEQL
                                    g$rhs*$9868$4aEQL
                                    g$mod**$9869$4aEQL
                                    g$kwd*$9870$4aEQL
                                    g$_exp*$9871$4aEQL)
                                  ((case-lambda
                                     ((g$_exp*$9872$4aEQL
                                        g$kwd*$9873$4aEQL
                                        g$mod**$9874$4aEQL
                                        g$rhs*$9875$4aEQL
                                        g$lex*$9876$4aEQL
                                        g$mr$9877$4aEQL
                                        g$r$9878$4aEQL
                                        g$e*$9879$4aEQL)
                                      ((case-lambda
                                         ((g$exp-lab*$9880$4aEQL
                                            g$mod**$9881$4aEQL)
                                          (if (not g$name$9853$4aEQL)
                                            (values
                                              g$lex*$9876$4aEQL
                                              g$rhs*$9875$4aEQL
                                              g$exp-id*$9852$4aEQL
                                              g$exp-lab*$9880$4aEQL
                                              g$r$9878$4aEQL
                                              g$mr$9877$4aEQL
                                              g$mod**$9881$4aEQL
                                              g$kwd*$9873$4aEQL)
                                            ((case-lambda
                                               ((g$lab$9882$4aEQL
                                                  g$iface$9883$4aEQL)
                                                (values
                                                  g$lex*$9876$4aEQL
                                                  g$rhs*$9875$4aEQL
                                                  (vector g$name$9853$4aEQL)
                                                  (vector g$lab$9882$4aEQL)
                                                  (cons
                                                    (cons
                                                      g$lab$9882$4aEQL
                                                      (cons
                                                        '$module
                                                        g$iface$9883$4aEQL))
                                                    g$r$9878$4aEQL)
                                                  (cons
                                                    (cons
                                                      g$lab$9882$4aEQL
                                                      (cons
                                                        '$module
                                                        g$iface$9883$4aEQL))
                                                    g$mr$9877$4aEQL)
                                                  g$mod**$9881$4aEQL
                                                  g$kwd*$9873$4aEQL)))
                                             (g$gen-label$7248$4aEQL 'module)
                                             (g$make-module-interface$7620$4aEQL
                                               (car (g$stx-mark*$7282$4aEQL
                                                      g$name$9853$4aEQL))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$9884$4aEQL)
                                                    (g$make-stx$7280$4aEQL
                                                      (g$stx-expr$7281$4aEQL
                                                        g$x$9884$4aEQL)
                                                      (g$stx-mark*$7282$4aEQL
                                                        g$x$9884$4aEQL)
                                                      '()
                                                      '())))
                                                 g$exp-id*$9852$4aEQL)
                                               g$exp-lab*$9880$4aEQL)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$9885$4aEQL)
                                            ((case-lambda
                                               ((g$t$9886$4aEQL)
                                                (if g$t$9886$4aEQL
                                                  g$t$9886$4aEQL
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$7696$4aEQL
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$9885$4aEQL)))))
                                             (g$id->label$7320$4aEQL
                                               (g$make-stx$7280$4aEQL
                                                 (g$id->sym$7308$4aEQL
                                                   g$x$9885$4aEQL)
                                                 (g$stx-mark*$7282$4aEQL
                                                   g$x$9885$4aEQL)
                                                 (list g$rib$9854$4aEQL)
                                                 '())))))
                                         g$exp-id*$9852$4aEQL)
                                       (cons
                                         g$e*$9879$4aEQL
                                         g$mod**$9874$4aEQL))))
                                   g$_exp*$9871$4aEQL
                                   g$kwd*$9870$4aEQL
                                   g$mod**$9869$4aEQL
                                   g$rhs*$9868$4aEQL
                                   g$lex*$9867$4aEQL
                                   g$mr$9866$4aEQL
                                   g$r$9865$4aEQL
                                   g$e*$9864$4aEQL)))))))))
                      (g$map$5048$4aEQL
                        (case-lambda
                          ((g$x$9887$4aEQL)
                           (g$add-subst$7297$4aEQL
                             g$rib$9854$4aEQL
                             g$x$9887$4aEQL)))
                        (g$syntax->list$7306$4aEQL g$e*$9851$4aEQL)))))
                  (g$make-empty-rib$7267$4aEQL))))
              g$e*$9850$4aEQL
              g$exp-id*$9849$4aEQL
              g$name$9848$4aEQL)))))))
   (g$chi-body*$7629$4aEQL
     g$chi-body*$11120$4aEQL
     (case-lambda
       ((g$e*$9888$4aEQL
          g$r$9889$4aEQL
          g$mr$9890$4aEQL
          g$lex*$9891$4aEQL
          g$rhs*$9892$4aEQL
          g$mod**$9893$4aEQL
          g$kwd*$9894$4aEQL
          g$exp*$9895$4aEQL
          g$rib$9896$4aEQL
          g$top?$9897$4aEQL)
        (if (null? g$e*$9888$4aEQL)
          (values
            g$e*$9888$4aEQL
            g$r$9889$4aEQL
            g$mr$9890$4aEQL
            g$lex*$9891$4aEQL
            g$rhs*$9892$4aEQL
            g$mod**$9893$4aEQL
            g$kwd*$9894$4aEQL
            g$exp*$9895$4aEQL)
          ((case-lambda
             ((g$e$9898$4aEQL)
              (call-with-values
                (case-lambda
                  (() (g$syntax-type$7327$4aEQL g$e$9898$4aEQL g$r$9889$4aEQL)))
                (case-lambda
                  ((g$type$9902$4aEQL g$value$9903$4aEQL g$kwd$9904$4aEQL)
                   ((case-lambda
                      ((g$kwd$9905$4aEQL g$value$9906$4aEQL g$type$9907$4aEQL)
                       ((case-lambda
                          ((g$kwd*$9908$4aEQL)
                           ((case-lambda
                              ((g$t$9909$4aEQL)
                               (if (g$memv$5041$4aEQL g$t$9909$4aEQL '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7525$4aEQL
                                        g$e$9898$4aEQL)))
                                   (case-lambda
                                     ((g$id$9912$4aEQL g$rhs$9913$4aEQL)
                                      ((case-lambda
                                         ((g$rhs$9914$4aEQL g$id$9915$4aEQL)
                                          (begin
                                            (if (g$bound-id-member?$7314$4aEQL
                                                  g$id$9915$4aEQL
                                                  g$kwd*$9908$4aEQL)
                                              (g$syntax-violation$7696$4aEQL
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9898$4aEQL)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7250$4aEQL
                                                   g$id$9915$4aEQL
                                                   g$rib$9896$4aEQL)))
                                              (case-lambda
                                                ((g$lab$9918$4aEQL
                                                   g$lex$9919$4aEQL)
                                                 ((case-lambda
                                                    ((g$lex$9920$4aEQL
                                                       g$lab$9921$4aEQL)
                                                     (begin
                                                       (g$extend-rib!$7270$4aEQL
                                                         g$rib$9896$4aEQL
                                                         g$id$9915$4aEQL
                                                         g$lab$9921$4aEQL)
                                                       (g$chi-body*$7629$4aEQL
                                                         (cdr g$e*$9888$4aEQL)
                                                         (g$add-lexical$7532$4aEQL
                                                           g$lab$9921$4aEQL
                                                           g$lex$9920$4aEQL
                                                           g$r$9889$4aEQL)
                                                         g$mr$9890$4aEQL
                                                         (cons
                                                           g$lex$9920$4aEQL
                                                           g$lex*$9891$4aEQL)
                                                         (cons
                                                           g$rhs$9914$4aEQL
                                                           g$rhs*$9892$4aEQL)
                                                         g$mod**$9893$4aEQL
                                                         g$kwd*$9908$4aEQL
                                                         g$exp*$9895$4aEQL
                                                         g$rib$9896$4aEQL
                                                         g$top?$9897$4aEQL))))
                                                  g$lex$9919$4aEQL
                                                  g$lab$9918$4aEQL)))))))
                                       g$rhs$9913$4aEQL
                                       g$id$9912$4aEQL))))
                                 (if (g$memv$5041$4aEQL
                                       g$t$9909$4aEQL
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7526$4aEQL
                                          g$e$9898$4aEQL)))
                                     (case-lambda
                                       ((g$id$9924$4aEQL g$rhs$9925$4aEQL)
                                        ((case-lambda
                                           ((g$rhs$9926$4aEQL g$id$9927$4aEQL)
                                            (begin
                                              (if (g$bound-id-member?$7314$4aEQL
                                                    g$id$9927$4aEQL
                                                    g$kwd*$9908$4aEQL)
                                                (g$syntax-violation$7696$4aEQL
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9898$4aEQL)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9928$4aEQL
                                                    g$expanded-rhs$9929$4aEQL)
                                                  (begin
                                                    (g$extend-rib!$7270$4aEQL
                                                      g$rib$9896$4aEQL
                                                      g$id$9927$4aEQL
                                                      g$lab$9928$4aEQL)
                                                    ((case-lambda
                                                       ((g$b$9930$4aEQL)
                                                        (g$chi-body*$7629$4aEQL
                                                          (cdr g$e*$9888$4aEQL)
                                                          (cons
                                                            (cons
                                                              g$lab$9928$4aEQL
                                                              g$b$9930$4aEQL)
                                                            g$r$9889$4aEQL)
                                                          (cons
                                                            (cons
                                                              g$lab$9928$4aEQL
                                                              g$b$9930$4aEQL)
                                                            g$mr$9890$4aEQL)
                                                          g$lex*$9891$4aEQL
                                                          g$rhs*$9892$4aEQL
                                                          g$mod**$9893$4aEQL
                                                          g$kwd*$9908$4aEQL
                                                          g$exp*$9895$4aEQL
                                                          g$rib$9896$4aEQL
                                                          g$top?$9897$4aEQL)))
                                                     (g$make-eval-transformer$7339$4aEQL
                                                       g$expanded-rhs$9929$4aEQL)))))
                                               (g$gen-define-label$7251$4aEQL
                                                 g$id$9927$4aEQL
                                                 g$rib$9896$4aEQL)
                                               (g$expand-transformer$7630$4aEQL
                                                 g$rhs$9926$4aEQL
                                                 g$mr$9890$4aEQL)))))
                                         g$rhs$9925$4aEQL
                                         g$id$9924$4aEQL))))
                                   (if (g$memv$5041$4aEQL
                                         g$t$9909$4aEQL
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9931$4aEQL)
                                         ((case-lambda
                                            ((g$ls/false$9932$4aEQL)
                                             (if (if g$ls/false$9932$4aEQL
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9933$4aEQL
                                                            g$xrhs*$9934$4aEQL
                                                            g$xbody*$9935$4aEQL)
                                                          (if (not (g$valid-bound-ids?$7312$4aEQL
                                                                     g$xlhs*$9933$4aEQL))
                                                            (g$syntax-violation$7696$4aEQL
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9898$4aEQL)
                                                            (void))))
                                                       g$ls/false$9932$4aEQL))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9936$4aEQL
                                                      g$xrhs*$9937$4aEQL
                                                      g$xbody*$9938$4aEQL)
                                                    ((case-lambda
                                                       ((g$xlab*$9939$4aEQL)
                                                        ((case-lambda
                                                           ((g$xrib$9940$4aEQL)
                                                            ((case-lambda
                                                               ((g$xb*$9941$4aEQL)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7629$4aEQL
                                                                      (append
                                                                        (g$map$5048$4aEQL
                                                                          (case-lambda
                                                                            ((g$x$9942$4aEQL)
                                                                             (g$add-subst$7297$4aEQL
                                                                               g$xrib$9940$4aEQL
                                                                               g$x$9942$4aEQL)))
                                                                          g$xbody*$9938$4aEQL)
                                                                        (cdr g$e*$9888$4aEQL))
                                                                      (append
                                                                        (g$map$5048$4aEQL
                                                                          cons
                                                                          g$xlab*$9939$4aEQL
                                                                          g$xb*$9941$4aEQL)
                                                                        g$r$9889$4aEQL)
                                                                      (append
                                                                        (g$map$5048$4aEQL
                                                                          cons
                                                                          g$xlab*$9939$4aEQL
                                                                          g$xb*$9941$4aEQL)
                                                                        g$mr$9890$4aEQL)
                                                                      g$lex*$9891$4aEQL
                                                                      g$rhs*$9892$4aEQL
                                                                      g$mod**$9893$4aEQL
                                                                      g$kwd*$9908$4aEQL
                                                                      g$exp*$9895$4aEQL
                                                                      g$rib$9896$4aEQL
                                                                      g$top?$9897$4aEQL))))))
                                                             (g$map$5048$4aEQL
                                                               (case-lambda
                                                                 ((g$x$9943$4aEQL)
                                                                  (g$make-eval-transformer$7339$4aEQL
                                                                    (g$expand-transformer$7630$4aEQL
                                                                      (if (eq? g$type$9907$4aEQL
                                                                               'let-syntax)
                                                                        g$x$9943$4aEQL
                                                                        (g$add-subst$7297$4aEQL
                                                                          g$xrib$9940$4aEQL
                                                                          g$x$9943$4aEQL))
                                                                      g$mr$9890$4aEQL))))
                                                               g$xrhs*$9937$4aEQL))))
                                                         (g$make-full-rib$7275$4aEQL
                                                           g$xlhs*$9936$4aEQL
                                                           g$xlab*$9939$4aEQL))))
                                                     (g$map$5048$4aEQL
                                                       g$gen-label$7248$4aEQL
                                                       g$xlhs*$9936$4aEQL))))
                                                 g$ls/false$9932$4aEQL)
                                               (g$syntax-violation$7696$4aEQL
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9931$4aEQL))))
                                          (g$syntax-dispatch$7585$4aEQL
                                            g$t$9931$4aEQL
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9898$4aEQL)
                                     (if (g$memv$5041$4aEQL
                                           g$t$9909$4aEQL
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$9944$4aEQL)
                                           ((case-lambda
                                              ((g$ls/false$9945$4aEQL)
                                               (if g$ls/false$9945$4aEQL
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9946$4aEQL)
                                                      (g$chi-body*$7629$4aEQL
                                                        (append
                                                          g$x*$9946$4aEQL
                                                          (cdr g$e*$9888$4aEQL))
                                                        g$r$9889$4aEQL
                                                        g$mr$9890$4aEQL
                                                        g$lex*$9891$4aEQL
                                                        g$rhs*$9892$4aEQL
                                                        g$mod**$9893$4aEQL
                                                        g$kwd*$9908$4aEQL
                                                        g$exp*$9895$4aEQL
                                                        g$rib$9896$4aEQL
                                                        g$top?$9897$4aEQL)))
                                                   g$ls/false$9945$4aEQL)
                                                 (g$syntax-violation$7696$4aEQL
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9944$4aEQL))))
                                            (g$syntax-dispatch$7585$4aEQL
                                              g$t$9944$4aEQL
                                              '(_ . each-any)))))
                                        g$e$9898$4aEQL)
                                       (if (g$memv$5041$4aEQL
                                             g$t$9909$4aEQL
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7629$4aEQL
                                           (cons
                                             (g$add-subst$7297$4aEQL
                                               g$rib$9896$4aEQL
                                               (g$chi-global-macro$7600$4aEQL
                                                 g$value$9906$4aEQL
                                                 g$e$9898$4aEQL))
                                             (cdr g$e*$9888$4aEQL))
                                           g$r$9889$4aEQL
                                           g$mr$9890$4aEQL
                                           g$lex*$9891$4aEQL
                                           g$rhs*$9892$4aEQL
                                           g$mod**$9893$4aEQL
                                           g$kwd*$9908$4aEQL
                                           g$exp*$9895$4aEQL
                                           g$rib$9896$4aEQL
                                           g$top?$9897$4aEQL)
                                         (if (g$memv$5041$4aEQL
                                               g$t$9909$4aEQL
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7629$4aEQL
                                             (cons
                                               (g$add-subst$7297$4aEQL
                                                 g$rib$9896$4aEQL
                                                 (g$chi-local-macro$7599$4aEQL
                                                   g$value$9906$4aEQL
                                                   g$e$9898$4aEQL))
                                               (cdr g$e*$9888$4aEQL))
                                             g$r$9889$4aEQL
                                             g$mr$9890$4aEQL
                                             g$lex*$9891$4aEQL
                                             g$rhs*$9892$4aEQL
                                             g$mod**$9893$4aEQL
                                             g$kwd*$9908$4aEQL
                                             g$exp*$9895$4aEQL
                                             g$rib$9896$4aEQL
                                             g$top?$9897$4aEQL)
                                           (if (g$memv$5041$4aEQL
                                                 g$t$9909$4aEQL
                                                 '(macro macro!))
                                             (g$chi-body*$7629$4aEQL
                                               (cons
                                                 (g$add-subst$7297$4aEQL
                                                   g$rib$9896$4aEQL
                                                   (g$chi-macro$7598$4aEQL
                                                     g$value$9906$4aEQL
                                                     g$e$9898$4aEQL))
                                                 (cdr g$e*$9888$4aEQL))
                                               g$r$9889$4aEQL
                                               g$mr$9890$4aEQL
                                               g$lex*$9891$4aEQL
                                               g$rhs*$9892$4aEQL
                                               g$mod**$9893$4aEQL
                                               g$kwd*$9908$4aEQL
                                               g$exp*$9895$4aEQL
                                               g$rib$9896$4aEQL
                                               g$top?$9897$4aEQL)
                                             (if (g$memv$5041$4aEQL
                                                   g$t$9909$4aEQL
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7628$4aEQL
                                                      g$e$9898$4aEQL
                                                      g$r$9889$4aEQL
                                                      g$mr$9890$4aEQL
                                                      g$lex*$9891$4aEQL
                                                      g$rhs*$9892$4aEQL
                                                      g$mod**$9893$4aEQL
                                                      g$kwd*$9908$4aEQL)))
                                                 (case-lambda
                                                   ((g$lex*$9955$4aEQL
                                                      g$rhs*$9956$4aEQL
                                                      g$m-exp-id*$9957$4aEQL
                                                      g$m-exp-lab*$9958$4aEQL
                                                      g$r$9959$4aEQL
                                                      g$mr$9960$4aEQL
                                                      g$mod**$9961$4aEQL
                                                      g$kwd*$9962$4aEQL)
                                                    ((case-lambda
                                                       ((g$kwd*$9963$4aEQL
                                                          g$mod**$9964$4aEQL
                                                          g$mr$9965$4aEQL
                                                          g$r$9966$4aEQL
                                                          g$m-exp-lab*$9967$4aEQL
                                                          g$m-exp-id*$9968$4aEQL
                                                          g$rhs*$9969$4aEQL
                                                          g$lex*$9970$4aEQL)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9971$4aEQL
                                                                 g$lab$9972$4aEQL)
                                                               (g$extend-rib!$7270$4aEQL
                                                                 g$rib$9896$4aEQL
                                                                 g$id$9971$4aEQL
                                                                 g$lab$9972$4aEQL)))
                                                            g$m-exp-id*$9968$4aEQL
                                                            g$m-exp-lab*$9967$4aEQL)
                                                          (g$chi-body*$7629$4aEQL
                                                            (cdr g$e*$9888$4aEQL)
                                                            g$r$9966$4aEQL
                                                            g$mr$9965$4aEQL
                                                            g$lex*$9970$4aEQL
                                                            g$rhs*$9969$4aEQL
                                                            g$mod**$9964$4aEQL
                                                            g$kwd*$9963$4aEQL
                                                            g$exp*$9895$4aEQL
                                                            g$rib$9896$4aEQL
                                                            g$top?$9897$4aEQL))))
                                                     g$kwd*$9962$4aEQL
                                                     g$mod**$9961$4aEQL
                                                     g$mr$9960$4aEQL
                                                     g$r$9959$4aEQL
                                                     g$m-exp-lab*$9958$4aEQL
                                                     g$m-exp-id*$9957$4aEQL
                                                     g$rhs*$9956$4aEQL
                                                     g$lex*$9955$4aEQL))))
                                               (if (g$memv$5041$4aEQL
                                                     g$t$9909$4aEQL
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$7680$4aEQL
                                                     (g$stx->datum$7318$4aEQL
                                                       g$e$9898$4aEQL))
                                                   (g$chi-body*$7629$4aEQL
                                                     (cdr g$e*$9888$4aEQL)
                                                     g$r$9889$4aEQL
                                                     g$mr$9890$4aEQL
                                                     g$lex*$9891$4aEQL
                                                     g$rhs*$9892$4aEQL
                                                     g$mod**$9893$4aEQL
                                                     g$kwd*$9908$4aEQL
                                                     g$exp*$9895$4aEQL
                                                     g$rib$9896$4aEQL
                                                     g$top?$9897$4aEQL))
                                                 (if (g$memv$5041$4aEQL
                                                       g$t$9909$4aEQL
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$9973$4aEQL)
                                                       ((case-lambda
                                                          ((g$ls/false$9974$4aEQL)
                                                           (if g$ls/false$9974$4aEQL
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$9975$4aEQL)
                                                                  (g$chi-body*$7629$4aEQL
                                                                    (cdr g$e*$9888$4aEQL)
                                                                    g$r$9889$4aEQL
                                                                    g$mr$9890$4aEQL
                                                                    g$lex*$9891$4aEQL
                                                                    g$rhs*$9892$4aEQL
                                                                    g$mod**$9893$4aEQL
                                                                    g$kwd*$9908$4aEQL
                                                                    (append
                                                                      g$exp-decl*$9975$4aEQL
                                                                      g$exp*$9895$4aEQL)
                                                                    g$rib$9896$4aEQL
                                                                    g$top?$9897$4aEQL)))
                                                               g$ls/false$9974$4aEQL)
                                                             (g$syntax-violation$7696$4aEQL
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$9973$4aEQL))))
                                                        (g$syntax-dispatch$7585$4aEQL
                                                          g$t$9973$4aEQL
                                                          '(_ . each-any)))))
                                                    g$e$9898$4aEQL)
                                                   (if (g$memv$5041$4aEQL
                                                         g$t$9909$4aEQL
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9976$4aEQL
                                                                     (case-lambda
                                                                       ((g$e$10018$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$t$10019$4aEQL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10020$4aEQL)
                                                                                (if (if g$ls/false$10020$4aEQL
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10021$4aEQL)
                                                                                             (g$id?$7307$4aEQL
                                                                                               g$id$10021$4aEQL)))
                                                                                          g$ls/false$10020$4aEQL))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10022$4aEQL)
                                                                                       '#t))
                                                                                    g$ls/false$10020$4aEQL)
                                                                                  ((case-lambda
                                                                                     ((g$t$10023$4aEQL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10024$4aEQL)
                                                                                          (if g$ls/false$10024$4aEQL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10025$4aEQL)
                                                                                                 '#f))
                                                                                              g$ls/false$10024$4aEQL)
                                                                                            ((case-lambda
                                                                                               ((g$t$10026$4aEQL)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10027$4aEQL)
                                                                                                    (if g$ls/false$10027$4aEQL
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7696$4aEQL
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10018$4aEQL)))
                                                                                                        g$ls/false$10027$4aEQL)
                                                                                                      (g$syntax-violation$7696$4aEQL
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10026$4aEQL))))
                                                                                                 (g$syntax-dispatch$7585$4aEQL
                                                                                                   g$t$10026$4aEQL
                                                                                                   '_))))
                                                                                             g$t$10023$4aEQL))))
                                                                                       (g$syntax-dispatch$7585$4aEQL
                                                                                         g$t$10023$4aEQL
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10019$4aEQL))))
                                                                             (g$syntax-dispatch$7585$4aEQL
                                                                               g$t$10019$4aEQL
                                                                               '(_ any)))))
                                                                         g$e$10018$4aEQL))))
                                                                   (g$module-import$9977$4aEQL
                                                                     (case-lambda
                                                                       ((g$e$10001$4aEQL
                                                                          g$r$10002$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$t$10003$4aEQL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10004$4aEQL)
                                                                                (if (if g$ls/false$10004$4aEQL
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10005$4aEQL)
                                                                                             (g$id?$7307$4aEQL
                                                                                               g$id$10005$4aEQL)))
                                                                                          g$ls/false$10004$4aEQL))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10006$4aEQL)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7327$4aEQL
                                                                                              g$id$10006$4aEQL
                                                                                              g$r$10002$4aEQL)))
                                                                                         (case-lambda
                                                                                           ((g$type$10010$4aEQL
                                                                                              g$value$10011$4aEQL
                                                                                              g$kwd$10012$4aEQL)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$10013$4aEQL
                                                                                                  g$value$10014$4aEQL
                                                                                                  g$type$10015$4aEQL)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10016$4aEQL)
                                                                                                    (if (g$memv$5041$4aEQL
                                                                                                          g$t$10016$4aEQL
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10017$4aEQL)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7627$4aEQL
                                                                                                              g$iface$10017$4aEQL
                                                                                                              g$id$10006$4aEQL)
                                                                                                            (g$module-interface-exp-lab-vec$7623$4aEQL
                                                                                                              g$iface$10017$4aEQL))))
                                                                                                       g$value$10014$4aEQL)
                                                                                                      (g$syntax-violation$7696$4aEQL
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10001$4aEQL))))
                                                                                                 g$type$10015$4aEQL)))
                                                                                             g$kwd$10012$4aEQL
                                                                                             g$value$10011$4aEQL
                                                                                             g$type$10010$4aEQL))))))
                                                                                    g$ls/false$10004$4aEQL)
                                                                                  (g$syntax-violation$7696$4aEQL
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10003$4aEQL))))
                                                                             (g$syntax-dispatch$7585$4aEQL
                                                                               g$t$10003$4aEQL
                                                                               '(_ any)))))
                                                                         g$e$10001$4aEQL))))
                                                                   (g$library-import$9978$4aEQL
                                                                     (case-lambda
                                                                       ((g$e$9987$4aEQL)
                                                                        ((case-lambda
                                                                           ((g$t$9988$4aEQL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9989$4aEQL)
                                                                                (if g$ls/false$9989$4aEQL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$9990$4aEQL
                                                                                         g$imp*$9991$4aEQL)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7634$4aEQL
                                                                                              (g$syntax->datum$7699$4aEQL
                                                                                                g$imp*$9991$4aEQL))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$9994$4aEQL
                                                                                              g$subst-labels$9995$4aEQL)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$9996$4aEQL
                                                                                                  g$subst-names$9997$4aEQL)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$9998$4aEQL)
                                                                                                       (g$datum->stx$7290$4aEQL
                                                                                                         g$ctxt$9990$4aEQL
                                                                                                         g$name$9998$4aEQL)))
                                                                                                    g$subst-names$9997$4aEQL)
                                                                                                  g$subst-labels$9996$4aEQL)))
                                                                                             g$subst-labels$9995$4aEQL
                                                                                             g$subst-names$9994$4aEQL))))))
                                                                                    g$ls/false$9989$4aEQL)
                                                                                  ((case-lambda
                                                                                     ((g$t$9999$4aEQL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10000$4aEQL)
                                                                                          (if g$ls/false$10000$4aEQL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7696$4aEQL
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9987$4aEQL)))
                                                                                              g$ls/false$10000$4aEQL)
                                                                                            (g$syntax-violation$7696$4aEQL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9999$4aEQL))))
                                                                                       (g$syntax-dispatch$7585$4aEQL
                                                                                         g$t$9999$4aEQL
                                                                                         '_))))
                                                                                   g$t$9988$4aEQL))))
                                                                             (g$syntax-dispatch$7585$4aEQL
                                                                               g$t$9988$4aEQL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9987$4aEQL)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$9976$4aEQL
                                                                        g$e$9898$4aEQL)
                                                                    (g$module-import$9977$4aEQL
                                                                      g$e$9898$4aEQL
                                                                      g$r$9889$4aEQL)
                                                                    (g$library-import$9978$4aEQL
                                                                      g$e$9898$4aEQL))))
                                                               (case-lambda
                                                                 ((g$id*$9981$4aEQL
                                                                    g$lab*$9982$4aEQL)
                                                                  ((case-lambda
                                                                     ((g$lab*$9983$4aEQL
                                                                        g$id*$9984$4aEQL)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$9985$4aEQL
                                                                             g$lab$9986$4aEQL)
                                                                           (g$extend-rib!$7270$4aEQL
                                                                             g$rib$9896$4aEQL
                                                                             g$id$9985$4aEQL
                                                                             g$lab$9986$4aEQL)))
                                                                        g$id*$9984$4aEQL
                                                                        g$lab*$9983$4aEQL)))
                                                                   g$lab*$9982$4aEQL
                                                                   g$id*$9981$4aEQL))))
                                                             (g$chi-body*$7629$4aEQL
                                                               (cdr g$e*$9888$4aEQL)
                                                               g$r$9889$4aEQL
                                                               g$mr$9890$4aEQL
                                                               g$lex*$9891$4aEQL
                                                               g$rhs*$9892$4aEQL
                                                               g$mod**$9893$4aEQL
                                                               g$kwd*$9908$4aEQL
                                                               g$exp*$9895$4aEQL
                                                               g$rib$9896$4aEQL
                                                               g$top?$9897$4aEQL))))))
                                                     (if g$top?$9897$4aEQL
                                                       (g$chi-body*$7629$4aEQL
                                                         (cdr g$e*$9888$4aEQL)
                                                         g$r$9889$4aEQL
                                                         g$mr$9890$4aEQL
                                                         (cons
                                                           (g$gen-lexical$7246$4aEQL
                                                             'dummy)
                                                           g$lex*$9891$4aEQL)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$9898$4aEQL)
                                                           g$rhs*$9892$4aEQL)
                                                         g$mod**$9893$4aEQL
                                                         g$kwd*$9908$4aEQL
                                                         g$exp*$9895$4aEQL
                                                         g$rib$9896$4aEQL
                                                         g$top?$9897$4aEQL)
                                                       (values
                                                         g$e*$9888$4aEQL
                                                         g$r$9889$4aEQL
                                                         g$mr$9890$4aEQL
                                                         g$lex*$9891$4aEQL
                                                         g$rhs*$9892$4aEQL
                                                         g$mod**$9893$4aEQL
                                                         g$kwd*$9908$4aEQL
                                                         g$exp*$9895$4aEQL)))))))))))))))
                            g$type$9907$4aEQL)))
                        (if (g$id?$7307$4aEQL g$kwd$9905$4aEQL)
                          (cons g$kwd$9905$4aEQL g$kwd*$9894$4aEQL)
                          g$kwd*$9894$4aEQL))))
                    g$kwd$9904$4aEQL
                    g$value$9903$4aEQL
                    g$type$9902$4aEQL))))))
           (car g$e*$9888$4aEQL))))))
   (g$expand-transformer$7630$4aEQL
     g$expand-transformer$11121$4aEQL
     (case-lambda
       ((g$expr$10028$4aEQL g$r$10029$4aEQL)
        ((case-lambda
           ((g$rtc$10030$4aEQL)
            ((case-lambda
               ((g$expanded-rhs$10031$4aEQL)
                (begin
                  (g$for-each$5049$4aEQL
                    ((case-lambda
                       ((g$mark-visit$10032$4aEQL)
                        (case-lambda
                          ((g$x$10033$4aEQL)
                           (begin
                             (g$invoke-library$7117$4aEQL g$x$10033$4aEQL)
                             (g$mark-visit$10032$4aEQL g$x$10033$4aEQL))))))
                     (g$vis-collector$7638$4aEQL))
                    (g$rtc$10030$4aEQL))
                  g$expanded-rhs$10031$4aEQL)))
             ((case-lambda
                ((g$inv-collector$10038$4aEQL
                   g$vis-collector$10039$4aEQL
                   g$inv-collector$10040$4aEQL
                   g$vis-collector$10041$4aEQL)
                 ((case-lambda
                    ((g$swap$10042$4aEQL)
                     (dynamic-wind
                       g$swap$10042$4aEQL
                       (case-lambda
                         (()
                          (g$chi-expr$7603$4aEQL
                            g$expr$10028$4aEQL
                            g$r$10029$4aEQL
                            g$r$10029$4aEQL)))
                       g$swap$10042$4aEQL)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10043$4aEQL)
                           (begin
                             (g$inv-collector$10038$4aEQL
                               g$inv-collector$10040$4aEQL)
                             (set! g$inv-collector$10040$4aEQL
                               g$t$10043$4aEQL))))
                        (g$inv-collector$10038$4aEQL))
                       ((case-lambda
                          ((g$t$10044$4aEQL)
                           (begin
                             (g$vis-collector$10039$4aEQL
                               g$vis-collector$10041$4aEQL)
                             (set! g$vis-collector$10041$4aEQL
                               g$t$10044$4aEQL))))
                        (g$vis-collector$10039$4aEQL))))))))
              g$inv-collector$7637$4aEQL
              g$vis-collector$7638$4aEQL
              g$rtc$10030$4aEQL
              (case-lambda ((g$x$10045$4aEQL) (values)))))))
         (g$make-collector$7636$4aEQL)))))
   (g$parse-exports$7631$4aEQL
     g$parse-exports$11122$4aEQL
     (case-lambda
       ((g$exp*$10046$4aEQL)
        ((letrec ((g$f$10047$4aEQL
                    (case-lambda
                      ((g$exp*$10048$4aEQL
                         g$int*$10049$4aEQL
                         g$ext*$10050$4aEQL)
                       (if (null? g$exp*$10048$4aEQL)
                         (begin
                           (if (not (g$valid-bound-ids?$7312$4aEQL
                                      g$ext*$10050$4aEQL))
                             (g$syntax-violation$7696$4aEQL
                               'export
                               '"invalid exports"
                               (g$find-dups$7613$4aEQL g$ext*$10050$4aEQL))
                             (void))
                           (values
                             (g$map$5048$4aEQL
                               g$syntax->datum$7699$4aEQL
                               g$ext*$10050$4aEQL)
                             g$int*$10049$4aEQL))
                         ((case-lambda
                            ((g$t$10051$4aEQL)
                             ((case-lambda
                                ((g$ls/false$10052$4aEQL)
                                 (if g$ls/false$10052$4aEQL
                                   (apply
                                     (case-lambda
                                       ((g$rename$10053$4aEQL
                                          g$i*$10054$4aEQL
                                          g$e*$10055$4aEQL)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$7699$4aEQL
                                                              g$rename$10053$4aEQL)
                                                            'rename)
                                                     (if (g$for-all$5046$4aEQL
                                                           g$id?$7307$4aEQL
                                                           g$i*$10054$4aEQL)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5046$4aEQL
                                                           g$id?$7307$4aEQL
                                                           g$e*$10055$4aEQL))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$7696$4aEQL
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10048$4aEQL))
                                            (void))
                                          (g$f$10047$4aEQL
                                            (cdr g$exp*$10048$4aEQL)
                                            (append
                                              g$i*$10054$4aEQL
                                              g$int*$10049$4aEQL)
                                            (append
                                              g$e*$10055$4aEQL
                                              g$ext*$10050$4aEQL)))))
                                     g$ls/false$10052$4aEQL)
                                   ((case-lambda
                                      ((g$t$10056$4aEQL)
                                       ((case-lambda
                                          ((g$ls/false$10057$4aEQL)
                                           (if g$ls/false$10057$4aEQL
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10058$4aEQL)
                                                  (begin
                                                    (if (not (g$id?$7307$4aEQL
                                                               g$ie$10058$4aEQL))
                                                      (g$syntax-violation$7696$4aEQL
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10058$4aEQL)
                                                      (void))
                                                    (g$f$10047$4aEQL
                                                      (cdr g$exp*$10048$4aEQL)
                                                      (cons
                                                        g$ie$10058$4aEQL
                                                        g$int*$10049$4aEQL)
                                                      (cons
                                                        g$ie$10058$4aEQL
                                                        g$ext*$10050$4aEQL)))))
                                               g$ls/false$10057$4aEQL)
                                             (g$syntax-violation$7696$4aEQL
                                               '#f
                                               '"invalid syntax"
                                               g$t$10056$4aEQL))))
                                        (g$syntax-dispatch$7585$4aEQL
                                          g$t$10056$4aEQL
                                          'any))))
                                    g$t$10051$4aEQL))))
                              (g$syntax-dispatch$7585$4aEQL
                                g$t$10051$4aEQL
                                '(any . #(each (any any)))))))
                          (car g$exp*$10048$4aEQL)))))))
           g$f$10047$4aEQL)
         g$exp*$10046$4aEQL
         '()
         '()))))
   (g$parse-library-name$7632$4aEQL
     g$parse-library-name$11123$4aEQL
     (case-lambda
       ((g$spec$10059$4aEQL)
        (letrec* ((g$parse$10060$4aEQL
                    (case-lambda
                      ((g$x$10067$4aEQL)
                       ((case-lambda
                          ((g$t$10068$4aEQL)
                           ((case-lambda
                              ((g$ls/false$10069$4aEQL)
                               (if (if g$ls/false$10069$4aEQL
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10070$4aEQL)
                                            (g$for-all$5046$4aEQL
                                              (case-lambda
                                                ((g$x$10071$4aEQL)
                                                 ((case-lambda
                                                    ((g$x$10072$4aEQL)
                                                     (if (integer?
                                                           g$x$10072$4aEQL)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10072$4aEQL))
                                                       '#f)))
                                                  (g$syntax->datum$7699$4aEQL
                                                    g$x$10071$4aEQL))))
                                              g$v*$10070$4aEQL)))
                                         g$ls/false$10069$4aEQL))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10073$4aEQL)
                                      (values
                                        '()
                                        (g$map$5048$4aEQL
                                          g$syntax->datum$7699$4aEQL
                                          g$v*$10073$4aEQL))))
                                   g$ls/false$10069$4aEQL)
                                 ((case-lambda
                                    ((g$t$10074$4aEQL)
                                     ((case-lambda
                                        ((g$ls/false$10075$4aEQL)
                                         (if (if g$ls/false$10075$4aEQL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10076$4aEQL
                                                        g$rest$10077$4aEQL)
                                                      (symbol?
                                                        (g$syntax->datum$7699$4aEQL
                                                          g$x$10076$4aEQL))))
                                                   g$ls/false$10075$4aEQL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10078$4aEQL
                                                  g$rest$10079$4aEQL)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10060$4aEQL
                                                       g$rest$10079$4aEQL)))
                                                  (case-lambda
                                                    ((g$x*$10082$4aEQL
                                                       g$v*$10083$4aEQL)
                                                     ((case-lambda
                                                        ((g$v*$10084$4aEQL
                                                           g$x*$10085$4aEQL)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7699$4aEQL
                                                               g$x$10078$4aEQL)
                                                             g$x*$10085$4aEQL)
                                                           g$v*$10084$4aEQL)))
                                                      g$v*$10083$4aEQL
                                                      g$x*$10082$4aEQL))))))
                                             g$ls/false$10075$4aEQL)
                                           ((case-lambda
                                              ((g$t$10086$4aEQL)
                                               ((case-lambda
                                                  ((g$ls/false$10087$4aEQL)
                                                   (if g$ls/false$10087$4aEQL
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10087$4aEQL)
                                                     ((case-lambda
                                                        ((g$t$10088$4aEQL)
                                                         ((case-lambda
                                                            ((g$ls/false$10089$4aEQL)
                                                             (if g$ls/false$10089$4aEQL
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7696$4aEQL
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10059$4aEQL)))
                                                                 g$ls/false$10089$4aEQL)
                                                               (g$syntax-violation$7696$4aEQL
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10088$4aEQL))))
                                                          (g$syntax-dispatch$7585$4aEQL
                                                            g$t$10088$4aEQL
                                                            '_))))
                                                      g$t$10086$4aEQL))))
                                                (g$syntax-dispatch$7585$4aEQL
                                                  g$t$10086$4aEQL
                                                  '()))))
                                            g$t$10074$4aEQL))))
                                      (g$syntax-dispatch$7585$4aEQL
                                        g$t$10074$4aEQL
                                        '(any . any)))))
                                  g$t$10068$4aEQL))))
                            (g$syntax-dispatch$7585$4aEQL
                              g$t$10068$4aEQL
                              '(each-any)))))
                        g$x$10067$4aEQL)))))
          (call-with-values
            (case-lambda (() (g$parse$10060$4aEQL g$spec$10059$4aEQL)))
            (case-lambda
              ((g$name*$10063$4aEQL g$ver*$10064$4aEQL)
               ((case-lambda
                  ((g$ver*$10065$4aEQL g$name*$10066$4aEQL)
                   (begin
                     (if (null? g$name*$10066$4aEQL)
                       (g$syntax-violation$7696$4aEQL
                         '#f
                         '"empty library name"
                         g$spec$10059$4aEQL)
                       (void))
                     (values g$name*$10066$4aEQL g$ver*$10065$4aEQL))))
                g$ver*$10064$4aEQL
                g$name*$10063$4aEQL))))))))
   (g$parse-library$7633$4aEQL
     g$parse-library$11124$4aEQL
     (case-lambda
       ((g$e$10090$4aEQL)
        ((case-lambda
           ((g$t$10091$4aEQL)
            ((case-lambda
               ((g$ls/false$10092$4aEQL)
                (if (if g$ls/false$10092$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10093$4aEQL
                               g$name*$10094$4aEQL
                               g$export$10095$4aEQL
                               g$exp*$10096$4aEQL
                               g$import$10097$4aEQL
                               g$imp*$10098$4aEQL
                               g$b*$10099$4aEQL)
                             (if (eq? (g$syntax->datum$7699$4aEQL
                                        g$export$10095$4aEQL)
                                      'export)
                               (if (eq? (g$syntax->datum$7699$4aEQL
                                          g$import$10097$4aEQL)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7699$4aEQL
                                          g$library$10093$4aEQL)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10092$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10100$4aEQL
                         g$name*$10101$4aEQL
                         g$export$10102$4aEQL
                         g$exp*$10103$4aEQL
                         g$import$10104$4aEQL
                         g$imp*$10105$4aEQL
                         g$b*$10106$4aEQL)
                       (values
                         g$name*$10101$4aEQL
                         g$exp*$10103$4aEQL
                         g$imp*$10105$4aEQL
                         g$b*$10106$4aEQL)))
                    g$ls/false$10092$4aEQL)
                  ((case-lambda
                     ((g$t$10107$4aEQL)
                      ((case-lambda
                         ((g$ls/false$10108$4aEQL)
                          (if g$ls/false$10108$4aEQL
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7696$4aEQL
                                   '#f
                                   '"malformed library"
                                   g$e$10090$4aEQL)))
                              g$ls/false$10108$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$10107$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL g$t$10107$4aEQL '_))))
                   g$t$10091$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$10091$4aEQL
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10090$4aEQL))))
   (g$parse-import-spec*$7634$4aEQL
     g$parse-import-spec*$11125$4aEQL
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10109$4aEQL
                     (case-lambda
                       ((g$x$10370$4aEQL)
                        (symbol?
                          (g$syntax->datum$7699$4aEQL g$x$10370$4aEQL)))))
                   (g$dup-error$10110$4aEQL
                     (case-lambda
                       ((g$name$10369$4aEQL)
                        (g$syntax-violation$7696$4aEQL
                          'import
                          '"two imports with different bindings"
                          g$name$10369$4aEQL))))
                   (g$merge-substs$10111$4aEQL
                     (case-lambda
                       ((g$s$10360$4aEQL g$subst$10361$4aEQL)
                        (letrec* ((g$insert-to-subst$10362$4aEQL
                                    (case-lambda
                                      ((g$a$10363$4aEQL g$subst$10364$4aEQL)
                                       ((case-lambda
                                          ((g$name$10365$4aEQL
                                             g$label$10366$4aEQL)
                                           ((case-lambda
                                              ((g$t$10367$4aEQL)
                                               (if g$t$10367$4aEQL
                                                 ((case-lambda
                                                    ((g$x$10368$4aEQL)
                                                     (if (eq? (cdr g$x$10368$4aEQL)
                                                              g$label$10366$4aEQL)
                                                       g$subst$10364$4aEQL
                                                       (g$dup-error$10110$4aEQL
                                                         g$name$10365$4aEQL))))
                                                  g$t$10367$4aEQL)
                                                 (cons
                                                   g$a$10363$4aEQL
                                                   g$subst$10364$4aEQL))))
                                            (g$assq$5036$4aEQL
                                              g$name$10365$4aEQL
                                              g$subst$10364$4aEQL))))
                                        (car g$a$10363$4aEQL)
                                        (cdr g$a$10363$4aEQL))))))
                          (if (null? g$s$10360$4aEQL)
                            g$subst$10361$4aEQL
                            (g$insert-to-subst$10362$4aEQL
                              (car g$s$10360$4aEQL)
                              (g$merge-substs$10111$4aEQL
                                (cdr g$s$10360$4aEQL)
                                g$subst$10361$4aEQL)))))))
                   (g$exclude*$10112$4aEQL
                     (case-lambda
                       ((g$sym*$10336$4aEQL g$subst$10337$4aEQL)
                        (letrec* ((g$exclude$10338$4aEQL
                                    (case-lambda
                                      ((g$sym$10351$4aEQL g$subst$10352$4aEQL)
                                       (if (null? g$subst$10352$4aEQL)
                                         (g$syntax-violation$7696$4aEQL
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10351$4aEQL)
                                         (if (eq? g$sym$10351$4aEQL
                                                  (g$caar$5211$4aEQL
                                                    g$subst$10352$4aEQL))
                                           (values
                                             (g$cdar$5213$4aEQL
                                               g$subst$10352$4aEQL)
                                             (cdr g$subst$10352$4aEQL))
                                           ((case-lambda
                                              ((g$a$10353$4aEQL)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10338$4aEQL
                                                      g$sym$10351$4aEQL
                                                      (cdr g$subst$10352$4aEQL))))
                                                 (case-lambda
                                                   ((g$old$10356$4aEQL
                                                      g$subst$10357$4aEQL)
                                                    ((case-lambda
                                                       ((g$subst$10358$4aEQL
                                                          g$old$10359$4aEQL)
                                                        (values
                                                          g$old$10359$4aEQL
                                                          (cons
                                                            g$a$10353$4aEQL
                                                            g$subst$10358$4aEQL))))
                                                     g$subst$10357$4aEQL
                                                     g$old$10356$4aEQL))))))
                                            (car g$subst$10352$4aEQL))))))))
                          (if (null? g$sym*$10336$4aEQL)
                            (values '() g$subst$10337$4aEQL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10338$4aEQL
                                   (car g$sym*$10336$4aEQL)
                                   g$subst$10337$4aEQL)))
                              (case-lambda
                                ((g$old$10341$4aEQL g$subst$10342$4aEQL)
                                 ((case-lambda
                                    ((g$subst$10343$4aEQL g$old$10344$4aEQL)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10112$4aEQL
                                            (cdr g$sym*$10336$4aEQL)
                                            g$subst$10343$4aEQL)))
                                       (case-lambda
                                         ((g$old*$10347$4aEQL
                                            g$subst$10348$4aEQL)
                                          ((case-lambda
                                             ((g$subst$10349$4aEQL
                                                g$old*$10350$4aEQL)
                                              (values
                                                (cons
                                                  g$old$10344$4aEQL
                                                  g$old*$10350$4aEQL)
                                                g$subst$10349$4aEQL)))
                                           g$subst$10348$4aEQL
                                           g$old*$10347$4aEQL))))))
                                  g$subst$10342$4aEQL
                                  g$old$10341$4aEQL)))))))))
                   (g$find*$10113$4aEQL
                     (case-lambda
                       ((g$sym*$10332$4aEQL g$subst$10333$4aEQL)
                        (g$map$5048$4aEQL
                          (case-lambda
                            ((g$x$10334$4aEQL)
                             ((case-lambda
                                ((g$t$10335$4aEQL)
                                 (if g$t$10335$4aEQL
                                   (cdr g$t$10335$4aEQL)
                                   (g$syntax-violation$7696$4aEQL
                                     'import
                                     '"cannot find identifier"
                                     g$x$10334$4aEQL))))
                              (g$assq$5036$4aEQL
                                g$x$10334$4aEQL
                                g$subst$10333$4aEQL))))
                          g$sym*$10332$4aEQL))))
                   (g$rem*$10114$4aEQL
                     (case-lambda
                       ((g$sym*$10328$4aEQL g$subst$10329$4aEQL)
                        ((letrec ((g$f$10330$4aEQL
                                    (case-lambda
                                      ((g$subst$10331$4aEQL)
                                       (if (null? g$subst$10331$4aEQL)
                                         '()
                                         (if (g$memq$5040$4aEQL
                                               (g$caar$5211$4aEQL
                                                 g$subst$10331$4aEQL)
                                               g$sym*$10328$4aEQL)
                                           (g$f$10330$4aEQL
                                             (cdr g$subst$10331$4aEQL))
                                           (cons
                                             (car g$subst$10331$4aEQL)
                                             (g$f$10330$4aEQL
                                               (cdr g$subst$10331$4aEQL)))))))))
                           g$f$10330$4aEQL)
                         g$subst$10329$4aEQL))))
                   (g$remove-dups$10115$4aEQL
                     (case-lambda
                       ((g$ls$10327$4aEQL)
                        (if (null? g$ls$10327$4aEQL)
                          '()
                          (if (g$memq$5040$4aEQL
                                (car g$ls$10327$4aEQL)
                                (cdr g$ls$10327$4aEQL))
                            (g$remove-dups$10115$4aEQL (cdr g$ls$10327$4aEQL))
                            (cons
                              (car g$ls$10327$4aEQL)
                              (g$remove-dups$10115$4aEQL
                                (cdr g$ls$10327$4aEQL))))))))
                   (g$parse-library-name$10116$4aEQL
                     (case-lambda
                       ((g$spec$10211$4aEQL)
                        (letrec* ((g$subversion?$10212$4aEQL
                                    (case-lambda
                                      ((g$x$10325$4aEQL)
                                       ((case-lambda
                                          ((g$x$10326$4aEQL)
                                           (if (integer? g$x$10326$4aEQL)
                                             (if (exact? g$x$10326$4aEQL)
                                               (begin
                                                 '#f
                                                 (>= g$x$10326$4aEQL '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$7699$4aEQL
                                          g$x$10325$4aEQL)))))
                                  (g$subversion-pred$10213$4aEQL
                                    (case-lambda
                                      ((g$x*$10277$4aEQL)
                                       ((case-lambda
                                          ((g$t$10278$4aEQL)
                                           ((case-lambda
                                              ((g$ls/false$10279$4aEQL)
                                               (if (if g$ls/false$10279$4aEQL
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10280$4aEQL)
                                                            (g$subversion?$10212$4aEQL
                                                              g$n$10280$4aEQL)))
                                                         g$ls/false$10279$4aEQL))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10281$4aEQL)
                                                      (case-lambda
                                                        ((g$x$10282$4aEQL)
                                                         (= g$x$10282$4aEQL
                                                            (g$syntax->datum$7699$4aEQL
                                                              g$n$10281$4aEQL))))))
                                                   g$ls/false$10279$4aEQL)
                                                 ((case-lambda
                                                    ((g$t$10283$4aEQL)
                                                     ((case-lambda
                                                        ((g$ls/false$10284$4aEQL)
                                                         (if (if g$ls/false$10284$4aEQL
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10285$4aEQL
                                                                        g$sub*$10286$4aEQL)
                                                                      (eq? (g$syntax->datum$7699$4aEQL
                                                                             g$p?$10285$4aEQL)
                                                                           'and)))
                                                                   g$ls/false$10284$4aEQL))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10287$4aEQL
                                                                  g$sub*$10288$4aEQL)
                                                                ((case-lambda
                                                                   ((g$p*$10289$4aEQL)
                                                                    (case-lambda
                                                                      ((g$x$10290$4aEQL)
                                                                       (g$for-all$5046$4aEQL
                                                                         (case-lambda
                                                                           ((g$p$10291$4aEQL)
                                                                            (g$p$10291$4aEQL
                                                                              g$x$10290$4aEQL)))
                                                                         g$p*$10289$4aEQL)))))
                                                                 (g$map$5048$4aEQL
                                                                   g$subversion-pred$10213$4aEQL
                                                                   g$sub*$10288$4aEQL))))
                                                             g$ls/false$10284$4aEQL)
                                                           ((case-lambda
                                                              ((g$t$10292$4aEQL)
                                                               ((case-lambda
                                                                  ((g$ls/false$10293$4aEQL)
                                                                   (if (if g$ls/false$10293$4aEQL
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10294$4aEQL
                                                                                  g$sub*$10295$4aEQL)
                                                                                (eq? (g$syntax->datum$7699$4aEQL
                                                                                       g$p?$10294$4aEQL)
                                                                                     'or)))
                                                                             g$ls/false$10293$4aEQL))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10296$4aEQL
                                                                            g$sub*$10297$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$p*$10298$4aEQL)
                                                                              (case-lambda
                                                                                ((g$x$10299$4aEQL)
                                                                                 (g$exists$5047$4aEQL
                                                                                   (case-lambda
                                                                                     ((g$p$10300$4aEQL)
                                                                                      (g$p$10300$4aEQL
                                                                                        g$x$10299$4aEQL)))
                                                                                   g$p*$10298$4aEQL)))))
                                                                           (g$map$5048$4aEQL
                                                                             g$subversion-pred$10213$4aEQL
                                                                             g$sub*$10297$4aEQL))))
                                                                       g$ls/false$10293$4aEQL)
                                                                     ((case-lambda
                                                                        ((g$t$10301$4aEQL)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10302$4aEQL)
                                                                             (if (if g$ls/false$10302$4aEQL
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10303$4aEQL
                                                                                            g$sub$10304$4aEQL)
                                                                                          (eq? (g$syntax->datum$7699$4aEQL
                                                                                                 g$p?$10303$4aEQL)
                                                                                               'not)))
                                                                                       g$ls/false$10302$4aEQL))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10305$4aEQL
                                                                                      g$sub$10306$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$p$10307$4aEQL)
                                                                                        (case-lambda
                                                                                          ((g$x$10308$4aEQL)
                                                                                           (not (g$p$10307$4aEQL
                                                                                                  g$x$10308$4aEQL))))))
                                                                                     (g$subversion-pred$10213$4aEQL
                                                                                       g$sub$10306$4aEQL))))
                                                                                 g$ls/false$10302$4aEQL)
                                                                               ((case-lambda
                                                                                  ((g$t$10309$4aEQL)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10310$4aEQL)
                                                                                       (if (if g$ls/false$10310$4aEQL
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10311$4aEQL
                                                                                                      g$n$10312$4aEQL)
                                                                                                    (if (eq? (g$syntax->datum$7699$4aEQL
                                                                                                               g$p?$10311$4aEQL)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10212$4aEQL
                                                                                                          g$n$10312$4aEQL))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10310$4aEQL))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10313$4aEQL
                                                                                                g$n$10314$4aEQL)
                                                                                              (case-lambda
                                                                                                ((g$x$10315$4aEQL)
                                                                                                 (<= g$x$10315$4aEQL
                                                                                                     (g$syntax->datum$7699$4aEQL
                                                                                                       g$n$10314$4aEQL))))))
                                                                                           g$ls/false$10310$4aEQL)
                                                                                         ((case-lambda
                                                                                            ((g$t$10316$4aEQL)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10317$4aEQL)
                                                                                                 (if (if g$ls/false$10317$4aEQL
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10318$4aEQL
                                                                                                                g$n$10319$4aEQL)
                                                                                                              (if (eq? (g$syntax->datum$7699$4aEQL
                                                                                                                         g$p?$10318$4aEQL)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10212$4aEQL
                                                                                                                    g$n$10319$4aEQL))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10317$4aEQL))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10320$4aEQL
                                                                                                          g$n$10321$4aEQL)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10322$4aEQL)
                                                                                                           (>= g$x$10322$4aEQL
                                                                                                               (g$syntax->datum$7699$4aEQL
                                                                                                                 g$n$10321$4aEQL))))))
                                                                                                     g$ls/false$10317$4aEQL)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10323$4aEQL)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10324$4aEQL)
                                                                                                           (if g$ls/false$10324$4aEQL
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$7696$4aEQL
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10211$4aEQL
                                                                                                                    g$x*$10277$4aEQL)))
                                                                                                               g$ls/false$10324$4aEQL)
                                                                                                             (g$syntax-violation$7696$4aEQL
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10323$4aEQL))))
                                                                                                        (g$syntax-dispatch$7585$4aEQL
                                                                                                          g$t$10323$4aEQL
                                                                                                          '_))))
                                                                                                    g$t$10316$4aEQL))))
                                                                                              (g$syntax-dispatch$7585$4aEQL
                                                                                                g$t$10316$4aEQL
                                                                                                '(any any)))))
                                                                                          g$t$10309$4aEQL))))
                                                                                    (g$syntax-dispatch$7585$4aEQL
                                                                                      g$t$10309$4aEQL
                                                                                      '(any any)))))
                                                                                g$t$10301$4aEQL))))
                                                                          (g$syntax-dispatch$7585$4aEQL
                                                                            g$t$10301$4aEQL
                                                                            '(any any)))))
                                                                      g$t$10292$4aEQL))))
                                                                (g$syntax-dispatch$7585$4aEQL
                                                                  g$t$10292$4aEQL
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10283$4aEQL))))
                                                      (g$syntax-dispatch$7585$4aEQL
                                                        g$t$10283$4aEQL
                                                        '(any . each-any)))))
                                                  g$t$10278$4aEQL))))
                                            (g$syntax-dispatch$7585$4aEQL
                                              g$t$10278$4aEQL
                                              'any))))
                                        g$x*$10277$4aEQL))))
                                  (g$version-pred$10214$4aEQL
                                    (case-lambda
                                      ((g$x*$10237$4aEQL)
                                       ((case-lambda
                                          ((g$t$10238$4aEQL)
                                           ((case-lambda
                                              ((g$ls/false$10239$4aEQL)
                                               (if g$ls/false$10239$4aEQL
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10240$4aEQL)
                                                         '#t))))
                                                   g$ls/false$10239$4aEQL)
                                                 ((case-lambda
                                                    ((g$t$10241$4aEQL)
                                                     ((case-lambda
                                                        ((g$ls/false$10242$4aEQL)
                                                         (if (if g$ls/false$10242$4aEQL
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10243$4aEQL
                                                                        g$ver*$10244$4aEQL)
                                                                      (eq? (g$syntax->datum$7699$4aEQL
                                                                             g$c$10243$4aEQL)
                                                                           'and)))
                                                                   g$ls/false$10242$4aEQL))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10245$4aEQL
                                                                  g$ver*$10246$4aEQL)
                                                                ((case-lambda
                                                                   ((g$p*$10247$4aEQL)
                                                                    (case-lambda
                                                                      ((g$x$10248$4aEQL)
                                                                       (g$for-all$5046$4aEQL
                                                                         (case-lambda
                                                                           ((g$p$10249$4aEQL)
                                                                            (g$p$10249$4aEQL
                                                                              g$x$10248$4aEQL)))
                                                                         g$p*$10247$4aEQL)))))
                                                                 (g$map$5048$4aEQL
                                                                   g$version-pred$10214$4aEQL
                                                                   g$ver*$10246$4aEQL))))
                                                             g$ls/false$10242$4aEQL)
                                                           ((case-lambda
                                                              ((g$t$10250$4aEQL)
                                                               ((case-lambda
                                                                  ((g$ls/false$10251$4aEQL)
                                                                   (if (if g$ls/false$10251$4aEQL
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10252$4aEQL
                                                                                  g$ver*$10253$4aEQL)
                                                                                (eq? (g$syntax->datum$7699$4aEQL
                                                                                       g$c$10252$4aEQL)
                                                                                     'or)))
                                                                             g$ls/false$10251$4aEQL))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10254$4aEQL
                                                                            g$ver*$10255$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$p*$10256$4aEQL)
                                                                              (case-lambda
                                                                                ((g$x$10257$4aEQL)
                                                                                 (g$exists$5047$4aEQL
                                                                                   (case-lambda
                                                                                     ((g$p$10258$4aEQL)
                                                                                      (g$p$10258$4aEQL
                                                                                        g$x$10257$4aEQL)))
                                                                                   g$p*$10256$4aEQL)))))
                                                                           (g$map$5048$4aEQL
                                                                             g$version-pred$10214$4aEQL
                                                                             g$ver*$10255$4aEQL))))
                                                                       g$ls/false$10251$4aEQL)
                                                                     ((case-lambda
                                                                        ((g$t$10259$4aEQL)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10260$4aEQL)
                                                                             (if (if g$ls/false$10260$4aEQL
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10261$4aEQL
                                                                                            g$ver$10262$4aEQL)
                                                                                          (eq? (g$syntax->datum$7699$4aEQL
                                                                                                 g$c$10261$4aEQL)
                                                                                               'not)))
                                                                                       g$ls/false$10260$4aEQL))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10263$4aEQL
                                                                                      g$ver$10264$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$p$10265$4aEQL)
                                                                                        (case-lambda
                                                                                          ((g$x$10266$4aEQL)
                                                                                           (not (g$p$10265$4aEQL
                                                                                                  g$x$10266$4aEQL))))))
                                                                                     (g$version-pred$10214$4aEQL
                                                                                       g$ver$10264$4aEQL))))
                                                                                 g$ls/false$10260$4aEQL)
                                                                               ((case-lambda
                                                                                  ((g$t$10267$4aEQL)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10268$4aEQL)
                                                                                       (if g$ls/false$10268$4aEQL
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10269$4aEQL)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10270$4aEQL)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10271$4aEQL)
                                                                                                     ((letrec ((g$f$10272$4aEQL
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10273$4aEQL
                                                                                                                      g$x$10274$4aEQL)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10273$4aEQL)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10274$4aEQL)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10273$4aEQL)
                                                                                                                             (car g$x$10274$4aEQL))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10272$4aEQL
                                                                                                                              (cdr g$p*$10273$4aEQL)
                                                                                                                              (cdr g$x$10274$4aEQL)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10272$4aEQL)
                                                                                                      g$p*$10270$4aEQL
                                                                                                      g$x$10271$4aEQL)))))
                                                                                               (g$map$5048$4aEQL
                                                                                                 g$subversion-pred$10213$4aEQL
                                                                                                 g$sub*$10269$4aEQL))))
                                                                                           g$ls/false$10268$4aEQL)
                                                                                         ((case-lambda
                                                                                            ((g$t$10275$4aEQL)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10276$4aEQL)
                                                                                                 (if g$ls/false$10276$4aEQL
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$7696$4aEQL
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10211$4aEQL
                                                                                                          g$x*$10237$4aEQL)))
                                                                                                     g$ls/false$10276$4aEQL)
                                                                                                   (g$syntax-violation$7696$4aEQL
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10275$4aEQL))))
                                                                                              (g$syntax-dispatch$7585$4aEQL
                                                                                                g$t$10275$4aEQL
                                                                                                '_))))
                                                                                          g$t$10267$4aEQL))))
                                                                                    (g$syntax-dispatch$7585$4aEQL
                                                                                      g$t$10267$4aEQL
                                                                                      'each-any))))
                                                                                g$t$10259$4aEQL))))
                                                                          (g$syntax-dispatch$7585$4aEQL
                                                                            g$t$10259$4aEQL
                                                                            '(any any)))))
                                                                      g$t$10250$4aEQL))))
                                                                (g$syntax-dispatch$7585$4aEQL
                                                                  g$t$10250$4aEQL
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10241$4aEQL))))
                                                      (g$syntax-dispatch$7585$4aEQL
                                                        g$t$10241$4aEQL
                                                        '(any . each-any)))))
                                                  g$t$10238$4aEQL))))
                                            (g$syntax-dispatch$7585$4aEQL
                                              g$t$10238$4aEQL
                                              '()))))
                                        g$x*$10237$4aEQL)))))
                          ((letrec ((g$f$10215$4aEQL
                                      (case-lambda
                                        ((g$x$10216$4aEQL)
                                         ((case-lambda
                                            ((g$t$10217$4aEQL)
                                             ((case-lambda
                                                ((g$ls/false$10218$4aEQL)
                                                 (if g$ls/false$10218$4aEQL
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10219$4aEQL)
                                                        (values
                                                          '()
                                                          (g$version-pred$10214$4aEQL
                                                            g$version-spec*$10219$4aEQL))))
                                                     g$ls/false$10218$4aEQL)
                                                   ((case-lambda
                                                      ((g$t$10220$4aEQL)
                                                       ((case-lambda
                                                          ((g$ls/false$10221$4aEQL)
                                                           (if (if g$ls/false$10221$4aEQL
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10222$4aEQL
                                                                          g$x*$10223$4aEQL)
                                                                        (g$idsyn?$10109$4aEQL
                                                                          g$x$10222$4aEQL)))
                                                                     g$ls/false$10221$4aEQL))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10224$4aEQL
                                                                    g$x*$10225$4aEQL)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10215$4aEQL
                                                                         g$x*$10225$4aEQL)))
                                                                    (case-lambda
                                                                      ((g$name$10228$4aEQL
                                                                         g$pred$10229$4aEQL)
                                                                       ((case-lambda
                                                                          ((g$pred$10230$4aEQL
                                                                             g$name$10231$4aEQL)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$7699$4aEQL
                                                                                 g$x$10224$4aEQL)
                                                                               g$name$10231$4aEQL)
                                                                             g$pred$10230$4aEQL)))
                                                                        g$pred$10229$4aEQL
                                                                        g$name$10228$4aEQL))))))
                                                               g$ls/false$10221$4aEQL)
                                                             ((case-lambda
                                                                ((g$t$10232$4aEQL)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10233$4aEQL)
                                                                     (if g$ls/false$10233$4aEQL
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10234$4aEQL)
                                                                                 '#t)))))
                                                                         g$ls/false$10233$4aEQL)
                                                                       ((case-lambda
                                                                          ((g$t$10235$4aEQL)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10236$4aEQL)
                                                                               (if g$ls/false$10236$4aEQL
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$7696$4aEQL
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10211$4aEQL)))
                                                                                   g$ls/false$10236$4aEQL)
                                                                                 (g$syntax-violation$7696$4aEQL
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10235$4aEQL))))
                                                                            (g$syntax-dispatch$7585$4aEQL
                                                                              g$t$10235$4aEQL
                                                                              '_))))
                                                                        g$t$10232$4aEQL))))
                                                                  (g$syntax-dispatch$7585$4aEQL
                                                                    g$t$10232$4aEQL
                                                                    '()))))
                                                              g$t$10220$4aEQL))))
                                                        (g$syntax-dispatch$7585$4aEQL
                                                          g$t$10220$4aEQL
                                                          '(any . any)))))
                                                    g$t$10217$4aEQL))))
                                              (g$syntax-dispatch$7585$4aEQL
                                                g$t$10217$4aEQL
                                                '(each-any)))))
                                          g$x$10216$4aEQL)))))
                             g$f$10215$4aEQL)
                           g$spec$10211$4aEQL)))))
                   (g$import-library$10117$4aEQL
                     (case-lambda
                       ((g$spec*$10203$4aEQL)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10116$4aEQL
                               g$spec*$10203$4aEQL)))
                          (case-lambda
                            ((g$name$10206$4aEQL g$pred$10207$4aEQL)
                             ((case-lambda
                                ((g$pred$10208$4aEQL g$name$10209$4aEQL)
                                 (begin
                                   (if (null? g$name$10209$4aEQL)
                                     (g$syntax-violation$7696$4aEQL
                                       'import
                                       '"empty library name"
                                       g$spec*$10203$4aEQL)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10210$4aEQL)
                                       (begin
                                         (if (not g$lib$10210$4aEQL)
                                           (g$syntax-violation$7696$4aEQL
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10209$4aEQL)
                                           (void))
                                         (if (not (g$pred$10208$4aEQL
                                                    (g$library-version$7070$4aEQL
                                                      g$lib$10210$4aEQL)))
                                           (g$syntax-violation$7696$4aEQL
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10203$4aEQL
                                             g$lib$10210$4aEQL)
                                           (void))
                                         ((g$imp-collector$7639$4aEQL)
                                          g$lib$10210$4aEQL)
                                         (g$library-subst$7074$4aEQL
                                           g$lib$10210$4aEQL))))
                                    (g$find-library-by-name$7110$4aEQL
                                      g$name$10209$4aEQL)))))
                              g$pred$10207$4aEQL
                              g$name$10206$4aEQL)))))))
                   (g$get-import$10118$4aEQL
                     (case-lambda
                       ((g$spec$10132$4aEQL)
                        ((case-lambda
                           ((g$t$10133$4aEQL)
                            ((case-lambda
                               ((g$ls/false$10134$4aEQL)
                                (if (if g$ls/false$10134$4aEQL
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10135$4aEQL g$x*$10136$4aEQL)
                                             (not (g$memq$5040$4aEQL
                                                    (g$syntax->datum$7699$4aEQL
                                                      g$x$10135$4aEQL)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10134$4aEQL))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10137$4aEQL g$x*$10138$4aEQL)
                                       (g$import-library$10117$4aEQL
                                         (cons
                                           g$x$10137$4aEQL
                                           g$x*$10138$4aEQL))))
                                    g$ls/false$10134$4aEQL)
                                  ((case-lambda
                                     ((g$t$10139$4aEQL)
                                      ((case-lambda
                                         ((g$ls/false$10140$4aEQL)
                                          (if (if g$ls/false$10140$4aEQL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10141$4aEQL
                                                         g$isp$10142$4aEQL
                                                         g$old*$10143$4aEQL
                                                         g$new*$10144$4aEQL)
                                                       (if (eq? (g$syntax->datum$7699$4aEQL
                                                                  g$rename$10141$4aEQL)
                                                                'rename)
                                                         (if (g$for-all$5046$4aEQL
                                                               g$idsyn?$10109$4aEQL
                                                               g$old*$10143$4aEQL)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5046$4aEQL
                                                               g$idsyn?$10109$4aEQL
                                                               g$new*$10144$4aEQL))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10140$4aEQL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10145$4aEQL
                                                   g$isp$10146$4aEQL
                                                   g$old*$10147$4aEQL
                                                   g$new*$10148$4aEQL)
                                                 ((case-lambda
                                                    ((g$subst$10149$4aEQL
                                                       g$old*$10150$4aEQL
                                                       g$new*$10151$4aEQL)
                                                     ((case-lambda
                                                        ((g$old-label*$10152$4aEQL)
                                                         ((case-lambda
                                                            ((g$subst$10153$4aEQL)
                                                             (g$merge-substs$10111$4aEQL
                                                               (g$map$5048$4aEQL
                                                                 cons
                                                                 g$new*$10151$4aEQL
                                                                 g$old-label*$10152$4aEQL)
                                                               g$subst$10153$4aEQL)))
                                                          (g$rem*$10114$4aEQL
                                                            g$old*$10150$4aEQL
                                                            g$subst$10149$4aEQL))))
                                                      (g$find*$10113$4aEQL
                                                        g$old*$10150$4aEQL
                                                        g$subst$10149$4aEQL))))
                                                  (g$get-import$10118$4aEQL
                                                    g$isp$10146$4aEQL)
                                                  (g$map$5048$4aEQL
                                                    g$syntax->datum$7699$4aEQL
                                                    g$old*$10147$4aEQL)
                                                  (g$map$5048$4aEQL
                                                    g$syntax->datum$7699$4aEQL
                                                    g$new*$10148$4aEQL))))
                                              g$ls/false$10140$4aEQL)
                                            ((case-lambda
                                               ((g$t$10154$4aEQL)
                                                ((case-lambda
                                                   ((g$ls/false$10155$4aEQL)
                                                    (if (if g$ls/false$10155$4aEQL
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10156$4aEQL
                                                                   g$isp$10157$4aEQL
                                                                   g$sym*$10158$4aEQL)
                                                                 (if (eq? (g$syntax->datum$7699$4aEQL
                                                                            g$except$10156$4aEQL)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5046$4aEQL
                                                                       g$idsyn?$10109$4aEQL
                                                                       g$sym*$10158$4aEQL))
                                                                   '#f)))
                                                              g$ls/false$10155$4aEQL))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10159$4aEQL
                                                             g$isp$10160$4aEQL
                                                             g$sym*$10161$4aEQL)
                                                           ((case-lambda
                                                              ((g$subst$10162$4aEQL)
                                                               (g$rem*$10114$4aEQL
                                                                 (g$map$5048$4aEQL
                                                                   g$syntax->datum$7699$4aEQL
                                                                   g$sym*$10161$4aEQL)
                                                                 g$subst$10162$4aEQL)))
                                                            (g$get-import$10118$4aEQL
                                                              g$isp$10160$4aEQL))))
                                                        g$ls/false$10155$4aEQL)
                                                      ((case-lambda
                                                         ((g$t$10163$4aEQL)
                                                          ((case-lambda
                                                             ((g$ls/false$10164$4aEQL)
                                                              (if (if g$ls/false$10164$4aEQL
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10165$4aEQL
                                                                             g$isp$10166$4aEQL
                                                                             g$sym*$10167$4aEQL)
                                                                           (if (eq? (g$syntax->datum$7699$4aEQL
                                                                                      g$only$10165$4aEQL)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5046$4aEQL
                                                                                 g$idsyn?$10109$4aEQL
                                                                                 g$sym*$10167$4aEQL))
                                                                             '#f)))
                                                                        g$ls/false$10164$4aEQL))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10168$4aEQL
                                                                       g$isp$10169$4aEQL
                                                                       g$sym*$10170$4aEQL)
                                                                     ((case-lambda
                                                                        ((g$subst$10171$4aEQL
                                                                           g$sym*$10172$4aEQL)
                                                                         ((case-lambda
                                                                            ((g$sym*$10173$4aEQL)
                                                                             ((case-lambda
                                                                                ((g$lab*$10174$4aEQL)
                                                                                 (g$map$5048$4aEQL
                                                                                   cons
                                                                                   g$sym*$10173$4aEQL
                                                                                   g$lab*$10174$4aEQL)))
                                                                              (g$find*$10113$4aEQL
                                                                                g$sym*$10173$4aEQL
                                                                                g$subst$10171$4aEQL))))
                                                                          (g$remove-dups$10115$4aEQL
                                                                            g$sym*$10172$4aEQL))))
                                                                      (g$get-import$10118$4aEQL
                                                                        g$isp$10169$4aEQL)
                                                                      (g$map$5048$4aEQL
                                                                        g$syntax->datum$7699$4aEQL
                                                                        g$sym*$10170$4aEQL))))
                                                                  g$ls/false$10164$4aEQL)
                                                                ((case-lambda
                                                                   ((g$t$10175$4aEQL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10176$4aEQL)
                                                                        (if (if g$ls/false$10176$4aEQL
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10177$4aEQL
                                                                                       g$isp$10178$4aEQL
                                                                                       g$p$10179$4aEQL)
                                                                                     (if (eq? (g$syntax->datum$7699$4aEQL
                                                                                                g$prefix$10177$4aEQL)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10109$4aEQL
                                                                                           g$p$10179$4aEQL))
                                                                                       '#f)))
                                                                                  g$ls/false$10176$4aEQL))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10180$4aEQL
                                                                                 g$isp$10181$4aEQL
                                                                                 g$p$10182$4aEQL)
                                                                               ((case-lambda
                                                                                  ((g$subst$10183$4aEQL
                                                                                     g$prefix$10184$4aEQL)
                                                                                   (g$map$5048$4aEQL
                                                                                     (case-lambda
                                                                                       ((g$x$10185$4aEQL)
                                                                                        (cons
                                                                                          (string->symbol
                                                                                            (string-append
                                                                                              g$prefix$10184$4aEQL
                                                                                              (symbol->string
                                                                                                (car g$x$10185$4aEQL))))
                                                                                          (cdr g$x$10185$4aEQL))))
                                                                                     g$subst$10183$4aEQL)))
                                                                                (g$get-import$10118$4aEQL
                                                                                  g$isp$10181$4aEQL)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$7699$4aEQL
                                                                                    g$p$10182$4aEQL)))))
                                                                            g$ls/false$10176$4aEQL)
                                                                          ((case-lambda
                                                                             ((g$t$10186$4aEQL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10187$4aEQL)
                                                                                  (if (if g$ls/false$10187$4aEQL
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10188$4aEQL
                                                                                                 g$spec*$10189$4aEQL)
                                                                                               (eq? (g$syntax->datum$7699$4aEQL
                                                                                                      g$library$10188$4aEQL)
                                                                                                    'library)))
                                                                                            g$ls/false$10187$4aEQL))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10190$4aEQL
                                                                                           g$spec*$10191$4aEQL)
                                                                                         (g$import-library$10117$4aEQL
                                                                                           g$spec*$10191$4aEQL)))
                                                                                      g$ls/false$10187$4aEQL)
                                                                                    ((case-lambda
                                                                                       ((g$t$10192$4aEQL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10193$4aEQL)
                                                                                            (if (if g$ls/false$10193$4aEQL
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10194$4aEQL
                                                                                                           g$isp$10195$4aEQL
                                                                                                           g$rest$10196$4aEQL)
                                                                                                         (eq? (g$syntax->datum$7699$4aEQL
                                                                                                                g$for$10194$4aEQL)
                                                                                                              'for)))
                                                                                                      g$ls/false$10193$4aEQL))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10197$4aEQL
                                                                                                     g$isp$10198$4aEQL
                                                                                                     g$rest$10199$4aEQL)
                                                                                                   (g$get-import$10118$4aEQL
                                                                                                     g$isp$10198$4aEQL)))
                                                                                                g$ls/false$10193$4aEQL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10200$4aEQL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10201$4aEQL)
                                                                                                      (if g$ls/false$10201$4aEQL
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10202$4aEQL)
                                                                                                             (g$syntax-violation$7696$4aEQL
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10202$4aEQL)))
                                                                                                          g$ls/false$10201$4aEQL)
                                                                                                        (g$syntax-violation$7696$4aEQL
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10200$4aEQL))))
                                                                                                   (g$syntax-dispatch$7585$4aEQL
                                                                                                     g$t$10200$4aEQL
                                                                                                     'any))))
                                                                                               g$t$10192$4aEQL))))
                                                                                         (g$syntax-dispatch$7585$4aEQL
                                                                                           g$t$10192$4aEQL
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10186$4aEQL))))
                                                                               (g$syntax-dispatch$7585$4aEQL
                                                                                 g$t$10186$4aEQL
                                                                                 '(any each-any)))))
                                                                           g$t$10175$4aEQL))))
                                                                     (g$syntax-dispatch$7585$4aEQL
                                                                       g$t$10175$4aEQL
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10163$4aEQL))))
                                                           (g$syntax-dispatch$7585$4aEQL
                                                             g$t$10163$4aEQL
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10154$4aEQL))))
                                                 (g$syntax-dispatch$7585$4aEQL
                                                   g$t$10154$4aEQL
                                                   '(any any . each-any)))))
                                             g$t$10139$4aEQL))))
                                       (g$syntax-dispatch$7585$4aEQL
                                         g$t$10139$4aEQL
                                         '(any any . #(each (any any)))))))
                                   g$t$10133$4aEQL))))
                             (g$syntax-dispatch$7585$4aEQL
                               g$t$10133$4aEQL
                               '(any . each-any)))))
                         g$spec$10132$4aEQL))))
                   (g$add-imports!$10119$4aEQL
                     (case-lambda
                       ((g$imp$10124$4aEQL g$h$10125$4aEQL)
                        ((case-lambda
                           ((g$subst$10126$4aEQL)
                            (g$for-each$5049$4aEQL
                              (case-lambda
                                ((g$x$10127$4aEQL)
                                 ((case-lambda
                                    ((g$name$10128$4aEQL g$label$10129$4aEQL)
                                     ((case-lambda
                                        ((g$t$10130$4aEQL)
                                         (if g$t$10130$4aEQL
                                           ((case-lambda
                                              ((g$l$10131$4aEQL)
                                               (if (not (eq? g$l$10131$4aEQL
                                                             g$label$10129$4aEQL))
                                                 (g$dup-error$10110$4aEQL
                                                   g$name$10128$4aEQL)
                                                 (void))))
                                            g$t$10130$4aEQL)
                                           (g$hashtable-set!$5481$4aEQL
                                             g$h$10125$4aEQL
                                             g$name$10128$4aEQL
                                             g$label$10129$4aEQL))))
                                      (g$hashtable-ref$5480$4aEQL
                                        g$h$10125$4aEQL
                                        g$name$10128$4aEQL
                                        '#f))))
                                  (car g$x$10127$4aEQL)
                                  (cdr g$x$10127$4aEQL))))
                              g$subst$10126$4aEQL)))
                         (g$get-import$10118$4aEQL g$imp$10124$4aEQL))))))
           (case-lambda
             ((g$imp*$10120$4aEQL)
              ((letrec ((g$f$10121$4aEQL
                          (case-lambda
                            ((g$imp*$10122$4aEQL g$h$10123$4aEQL)
                             (if (null? g$imp*$10122$4aEQL)
                               (hashtable-entries g$h$10123$4aEQL)
                               (begin
                                 (g$add-imports!$10119$4aEQL
                                   (car g$imp*$10122$4aEQL)
                                   g$h$10123$4aEQL)
                                 (g$f$10121$4aEQL
                                   (cdr g$imp*$10122$4aEQL)
                                   g$h$10123$4aEQL)))))))
                 g$f$10121$4aEQL)
               g$imp*$10120$4aEQL
               (g$make-eq-hashtable$5477$4aEQL)))))))))
   (g$make-top-rib$7635$4aEQL
     g$make-top-rib$11126$4aEQL
     (case-lambda
       ((g$names$10371$4aEQL g$labels$10372$4aEQL)
        ((case-lambda
           ((g$rib$10373$4aEQL)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10374$4aEQL g$label$10375$4aEQL)
                   (begin
                     (if (not (symbol? g$name$10374$4aEQL))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10374$4aEQL)
                       (void))
                     (g$extend-rib/nc!$7271$4aEQL
                       g$rib$10373$4aEQL
                       (g$make-stx$7280$4aEQL
                         g$name$10374$4aEQL
                         g$top-mark*$7244$4aEQL
                         '()
                         '())
                       g$label$10375$4aEQL))))
                g$names$10371$4aEQL
                g$labels$10372$4aEQL)
              g$rib$10373$4aEQL)))
         (g$make-cache-rib$7268$4aEQL)))))
   (g$make-collector$7636$4aEQL
     g$make-collector$11127$4aEQL
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10376$4aEQL)
            (case-lambda
              (() g$ls$10376$4aEQL)
              ((g$x$10377$4aEQL)
               (set! g$ls$10376$4aEQL
                 (g$set-cons$7241$4aEQL g$x$10377$4aEQL g$ls$10376$4aEQL))))))
         '()))))
   (g$inv-collector$7637$4aEQL
     g$inv-collector$11128$4aEQL
     (g$make-parameter$6579$4aEQL
       (case-lambda
         (g$args$10378$4aEQL
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10379$4aEQL)
          (begin
            (if (not (procedure? g$x$10379$4aEQL))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10379$4aEQL)
              (void))
            g$x$10379$4aEQL)))))
   (g$vis-collector$7638$4aEQL
     g$vis-collector$11129$4aEQL
     (g$make-parameter$6579$4aEQL
       (case-lambda
         (g$args$10380$4aEQL
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10381$4aEQL)
          (begin
            (if (not (procedure? g$x$10381$4aEQL))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10381$4aEQL)
              (void))
            g$x$10381$4aEQL)))))
   (g$imp-collector$7639$4aEQL
     g$imp-collector$11130$4aEQL
     (g$make-parameter$6579$4aEQL
       (case-lambda
         (g$args$10382$4aEQL
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10383$4aEQL)
          (begin
            (if (not (procedure? g$x$10383$4aEQL))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10383$4aEQL)
              (void))
            g$x$10383$4aEQL)))))
   (g$chi-library-internal$7640$4aEQL
     g$chi-library-internal$11131$4aEQL
     (case-lambda
       ((g$e*$10384$4aEQL g$rib$10385$4aEQL g$top?$10386$4aEQL)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7629$4aEQL
               g$e*$10384$4aEQL
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10385$4aEQL
               g$top?$10386$4aEQL)))
          (case-lambda
            ((g$e*$10395$4aEQL
               g$r$10396$4aEQL
               g$mr$10397$4aEQL
               g$lex*$10398$4aEQL
               g$rhs*$10399$4aEQL
               g$mod**$10400$4aEQL
               g$_kwd*$10401$4aEQL
               g$exp*$10402$4aEQL)
             ((case-lambda
                ((g$exp*$10403$4aEQL
                   g$_kwd*$10404$4aEQL
                   g$mod**$10405$4aEQL
                   g$rhs*$10406$4aEQL
                   g$lex*$10407$4aEQL
                   g$mr$10408$4aEQL
                   g$r$10409$4aEQL
                   g$e*$10410$4aEQL)
                 (values
                   (append
                     (apply append (reverse g$mod**$10405$4aEQL))
                     g$e*$10410$4aEQL)
                   g$r$10409$4aEQL
                   g$mr$10408$4aEQL
                   (reverse g$lex*$10407$4aEQL)
                   (reverse g$rhs*$10406$4aEQL)
                   g$exp*$10403$4aEQL)))
              g$exp*$10402$4aEQL
              g$_kwd*$10401$4aEQL
              g$mod**$10400$4aEQL
              g$rhs*$10399$4aEQL
              g$lex*$10398$4aEQL
              g$mr$10397$4aEQL
              g$r$10396$4aEQL
              g$e*$10395$4aEQL)))))))
   (g$chi-interaction-expr$7641$4aEQL
     g$chi-interaction-expr$11132$4aEQL
     (case-lambda
       ((g$e$10411$4aEQL g$rib$10412$4aEQL g$r$10413$4aEQL)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7629$4aEQL
               (list g$e$10411$4aEQL)
               g$r$10413$4aEQL
               g$r$10413$4aEQL
               '()
               '()
               '()
               '()
               '()
               g$rib$10412$4aEQL
               '#t)))
          (case-lambda
            ((g$e*$10422$4aEQL
               g$r$10423$4aEQL
               g$mr$10424$4aEQL
               g$lex*$10425$4aEQL
               g$rhs*$10426$4aEQL
               g$mod**$10427$4aEQL
               g$_kwd*$10428$4aEQL
               g$_exp*$10429$4aEQL)
             ((case-lambda
                ((g$_exp*$10430$4aEQL
                   g$_kwd*$10431$4aEQL
                   g$mod**$10432$4aEQL
                   g$rhs*$10433$4aEQL
                   g$lex*$10434$4aEQL
                   g$mr$10435$4aEQL
                   g$r$10436$4aEQL
                   g$e*$10437$4aEQL)
                 ((case-lambda
                    ((g$e*$10438$4aEQL)
                     ((case-lambda
                        ((g$e$10439$4aEQL)
                         (values g$e$10439$4aEQL g$r$10436$4aEQL)))
                      (if (null? g$e*$10438$4aEQL)
                        (g$build-void$7237$4aEQL)
                        (if (null? (cdr g$e*$10438$4aEQL))
                          (car g$e*$10438$4aEQL)
                          (g$build-sequence$7236$4aEQL
                            '#f
                            g$e*$10438$4aEQL))))))
                  (g$expand-interaction-rhs*/init*$7610$4aEQL
                    (reverse g$lex*$10434$4aEQL)
                    (reverse g$rhs*$10433$4aEQL)
                    (append
                      (apply append (reverse g$mod**$10432$4aEQL))
                      g$e*$10437$4aEQL)
                    g$r$10436$4aEQL
                    g$mr$10435$4aEQL))))
              g$_exp*$10429$4aEQL
              g$_kwd*$10428$4aEQL
              g$mod**$10427$4aEQL
              g$rhs*$10426$4aEQL
              g$lex*$10425$4aEQL
              g$mr$10424$4aEQL
              g$r$10423$4aEQL
              g$e*$10422$4aEQL)))))))
   (g$library-body-expander$7642$4aEQL
     g$library-body-expander$11133$4aEQL
     (case-lambda
       ((g$name$10440$4aEQL
          g$main-exp*$10441$4aEQL
          g$imp*$10442$4aEQL
          g$b*$10443$4aEQL
          g$top?$10444$4aEQL)
        (letrec* ((g$itc$10445$4aEQL (g$make-collector$7636$4aEQL)))
          ((case-lambda
             ((g$imp-collector$10450$4aEQL
                g$top-level-context$10451$4aEQL
                g$imp-collector$10452$4aEQL
                g$top-level-context$10453$4aEQL)
              ((case-lambda
                 ((g$swap$10454$4aEQL)
                  (dynamic-wind
                    g$swap$10454$4aEQL
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$7634$4aEQL
                              g$imp*$10442$4aEQL)))
                         (case-lambda
                           ((g$subst-names$10457$4aEQL
                              g$subst-labels$10458$4aEQL)
                            ((case-lambda
                               ((g$subst-labels$10459$4aEQL
                                  g$subst-names$10460$4aEQL)
                                ((case-lambda
                                   ((g$rib$10461$4aEQL)
                                    (letrec* ((g$wrap$10462$4aEQL
                                                (case-lambda
                                                  ((g$x$10524$4aEQL)
                                                   (g$make-stx$7280$4aEQL
                                                     g$x$10524$4aEQL
                                                     g$top-mark*$7244$4aEQL
                                                     (list g$rib$10461$4aEQL)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10463$4aEQL
                                            g$main-exp*$10464$4aEQL
                                            g$rtc$10465$4aEQL
                                            g$vtc$10466$4aEQL)
                                          ((case-lambda
                                             ((g$inv-collector$10471$4aEQL
                                                g$vis-collector$10472$4aEQL
                                                g$inv-collector$10473$4aEQL
                                                g$vis-collector$10474$4aEQL)
                                              ((case-lambda
                                                 ((g$swap$10475$4aEQL)
                                                  (dynamic-wind
                                                    g$swap$10475$4aEQL
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$7640$4aEQL
                                                              g$b*$10463$4aEQL
                                                              g$rib$10461$4aEQL
                                                              g$top?$10444$4aEQL)))
                                                         (case-lambda
                                                           ((g$init*$10482$4aEQL
                                                              g$r$10483$4aEQL
                                                              g$mr$10484$4aEQL
                                                              g$lex*$10485$4aEQL
                                                              g$rhs*$10486$4aEQL
                                                              g$internal-exp*$10487$4aEQL)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10488$4aEQL
                                                                  g$rhs*$10489$4aEQL
                                                                  g$lex*$10490$4aEQL
                                                                  g$mr$10491$4aEQL
                                                                  g$r$10492$4aEQL
                                                                  g$init*$10493$4aEQL)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$7631$4aEQL
                                                                       (append
                                                                         g$main-exp*$10464$4aEQL
                                                                         g$internal-exp*$10488$4aEQL))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10496$4aEQL
                                                                       g$exp-id*$10497$4aEQL)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10498$4aEQL
                                                                           g$exp-name*$10499$4aEQL)
                                                                         (begin
                                                                           (g$seal-rib!$7273$4aEQL
                                                                             g$rib$10461$4aEQL)
                                                                           ((case-lambda
                                                                              ((g$init*$10500$4aEQL)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10501$4aEQL)
                                                                                   ((case-lambda
                                                                                      (()
                                                                                       (begin
                                                                                         (g$unseal-rib!$7274$4aEQL
                                                                                           g$rib$10461$4aEQL)
                                                                                         ((case-lambda
                                                                                            ((g$loc*$10502$4aEQL
                                                                                               g$export-subst$10503$4aEQL)
                                                                                             (letrec* ((g$errstr$10504$4aEQL
                                                                                                         '"attempt to export mutated variable"))
                                                                                               (call-with-values
                                                                                                 (case-lambda
                                                                                                   (()
                                                                                                    (g$make-export-env/macros$7685$4aEQL
                                                                                                      g$lex*$10490$4aEQL
                                                                                                      g$loc*$10502$4aEQL
                                                                                                      g$r$10492$4aEQL)))
                                                                                                 (case-lambda
                                                                                                   ((g$export-env$10508$4aEQL
                                                                                                      g$global*$10509$4aEQL
                                                                                                      g$macro*$10510$4aEQL)
                                                                                                    ((case-lambda
                                                                                                       ((g$macro*$10511$4aEQL
                                                                                                          g$global*$10512$4aEQL
                                                                                                          g$export-env$10513$4aEQL)
                                                                                                        (begin
                                                                                                          (g$for-each$5049$4aEQL
                                                                                                            (case-lambda
                                                                                                              ((g$s$10514$4aEQL)
                                                                                                               ((case-lambda
                                                                                                                  ((g$name$10515$4aEQL
                                                                                                                     g$label$10516$4aEQL)
                                                                                                                   ((case-lambda
                                                                                                                      ((g$p$10517$4aEQL)
                                                                                                                       (if g$p$10517$4aEQL
                                                                                                                         ((case-lambda
                                                                                                                            ((g$b$10518$4aEQL)
                                                                                                                             ((case-lambda
                                                                                                                                ((g$type$10519$4aEQL)
                                                                                                                                 (if (eq? g$type$10519$4aEQL
                                                                                                                                          'mutable)
                                                                                                                                   (g$syntax-violation$7696$4aEQL
                                                                                                                                     'export
                                                                                                                                     g$errstr$10504$4aEQL
                                                                                                                                     g$name$10515$4aEQL)
                                                                                                                                   (void))))
                                                                                                                              (car g$b$10518$4aEQL))))
                                                                                                                          (cdr g$p$10517$4aEQL))
                                                                                                                         (void))))
                                                                                                                    (g$assq$5036$4aEQL
                                                                                                                      g$label$10516$4aEQL
                                                                                                                      g$export-env$10513$4aEQL))))
                                                                                                                (car g$s$10514$4aEQL)
                                                                                                                (cdr g$s$10514$4aEQL))))
                                                                                                            g$export-subst$10503$4aEQL)
                                                                                                          ((case-lambda
                                                                                                             ((g$invoke-body$10520$4aEQL
                                                                                                                g$invoke-definitions$10521$4aEQL)
                                                                                                              (values
                                                                                                                (g$itc$10445$4aEQL)
                                                                                                                (g$rtc$10465$4aEQL)
                                                                                                                (g$vtc$10466$4aEQL)
                                                                                                                (g$build-sequence$7236$4aEQL
                                                                                                                  '#f
                                                                                                                  (append
                                                                                                                    g$invoke-definitions$10521$4aEQL
                                                                                                                    (list
                                                                                                                      g$invoke-body$10520$4aEQL)))
                                                                                                                g$macro*$10511$4aEQL
                                                                                                                g$export-subst$10503$4aEQL
                                                                                                                g$export-env$10513$4aEQL)))
                                                                                                           (g$build-library-letrec*$7240$4aEQL
                                                                                                             '#f
                                                                                                             g$name$10440$4aEQL
                                                                                                             g$lex*$10490$4aEQL
                                                                                                             g$loc*$10502$4aEQL
                                                                                                             g$rhs*$10501$4aEQL
                                                                                                             (if (null?
                                                                                                                   g$init*$10500$4aEQL)
                                                                                                               (g$build-void$7237$4aEQL)
                                                                                                               (g$build-sequence$7236$4aEQL
                                                                                                                 '#f
                                                                                                                 g$init*$10500$4aEQL)))
                                                                                                           (g$map$5048$4aEQL
                                                                                                             g$build-global-define$7232$4aEQL
                                                                                                             (g$map$5048$4aEQL
                                                                                                               cdr
                                                                                                               g$global*$10512$4aEQL))))))
                                                                                                     g$macro*$10510$4aEQL
                                                                                                     g$global*$10509$4aEQL
                                                                                                     g$export-env$10508$4aEQL)))))))
                                                                                          (g$map$5048$4aEQL
                                                                                            g$gen-global$7247$4aEQL
                                                                                            g$lex*$10490$4aEQL)
                                                                                          (g$make-export-subst$7684$4aEQL
                                                                                            g$exp-name*$10499$4aEQL
                                                                                            g$exp-id*$10498$4aEQL))))))))
                                                                                (g$chi-rhs*$7611$4aEQL
                                                                                  g$rhs*$10489$4aEQL
                                                                                  g$r$10492$4aEQL
                                                                                  g$mr$10491$4aEQL))))
                                                                            (g$chi-expr*$7601$4aEQL
                                                                              g$init*$10493$4aEQL
                                                                              g$r$10492$4aEQL
                                                                              g$mr$10491$4aEQL)))))
                                                                      g$exp-id*$10497$4aEQL
                                                                      g$exp-name*$10496$4aEQL))))))
                                                             g$internal-exp*$10487$4aEQL
                                                             g$rhs*$10486$4aEQL
                                                             g$lex*$10485$4aEQL
                                                             g$mr$10484$4aEQL
                                                             g$r$10483$4aEQL
                                                             g$init*$10482$4aEQL))))))
                                                    g$swap$10475$4aEQL)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10522$4aEQL)
                                                        (begin
                                                          (g$inv-collector$10471$4aEQL
                                                            g$inv-collector$10473$4aEQL)
                                                          (set! g$inv-collector$10473$4aEQL
                                                            g$t$10522$4aEQL))))
                                                     (g$inv-collector$10471$4aEQL))
                                                    ((case-lambda
                                                       ((g$t$10523$4aEQL)
                                                        (begin
                                                          (g$vis-collector$10472$4aEQL
                                                            g$vis-collector$10474$4aEQL)
                                                          (set! g$vis-collector$10474$4aEQL
                                                            g$t$10523$4aEQL))))
                                                     (g$vis-collector$10472$4aEQL))))))))
                                           g$inv-collector$7637$4aEQL
                                           g$vis-collector$7638$4aEQL
                                           g$rtc$10465$4aEQL
                                           g$vtc$10466$4aEQL)))
                                       (g$map$5048$4aEQL
                                         g$wrap$10462$4aEQL
                                         g$b*$10443$4aEQL)
                                       (g$map$5048$4aEQL
                                         g$wrap$10462$4aEQL
                                         g$main-exp*$10441$4aEQL)
                                       (g$make-collector$7636$4aEQL)
                                       (g$make-collector$7636$4aEQL)))))
                                 (g$make-top-rib$7635$4aEQL
                                   g$subst-names$10460$4aEQL
                                   g$subst-labels$10459$4aEQL))))
                             g$subst-labels$10458$4aEQL
                             g$subst-names$10457$4aEQL))))))
                    g$swap$10454$4aEQL)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10525$4aEQL)
                        (begin
                          (g$imp-collector$10450$4aEQL
                            g$imp-collector$10452$4aEQL)
                          (set! g$imp-collector$10452$4aEQL g$t$10525$4aEQL))))
                     (g$imp-collector$10450$4aEQL))
                    ((case-lambda
                       ((g$t$10526$4aEQL)
                        (begin
                          (g$top-level-context$10451$4aEQL
                            g$top-level-context$10453$4aEQL)
                          (set! g$top-level-context$10453$4aEQL
                            g$t$10526$4aEQL))))
                     (g$top-level-context$10451$4aEQL))))))))
           g$imp-collector$7639$4aEQL
           g$top-level-context$7703$4aEQL
           g$itc$10445$4aEQL
           '#f)))))
   (g$core-library-expander$7643$4aEQL
     g$core-library-expander$11134$4aEQL
     (case-lambda
       ((g$e$10527$4aEQL g$verify-name$10528$4aEQL)
        (call-with-values
          (case-lambda (() (g$parse-library$7633$4aEQL g$e$10527$4aEQL)))
          (case-lambda
            ((g$name*$10533$4aEQL
               g$exp*$10534$4aEQL
               g$imp*$10535$4aEQL
               g$b*$10536$4aEQL)
             ((case-lambda
                ((g$b*$10537$4aEQL
                   g$imp*$10538$4aEQL
                   g$exp*$10539$4aEQL
                   g$name*$10540$4aEQL)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$7632$4aEQL g$name*$10540$4aEQL)))
                   (case-lambda
                     ((g$name$10543$4aEQL g$ver$10544$4aEQL)
                      ((case-lambda
                         ((g$ver$10545$4aEQL g$name$10546$4aEQL)
                          (begin
                            (g$verify-name$10528$4aEQL g$name$10546$4aEQL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7642$4aEQL
                                   g$name$10546$4aEQL
                                   g$exp*$10539$4aEQL
                                   g$imp*$10538$4aEQL
                                   g$b*$10537$4aEQL
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10554$4aEQL
                                   g$invoke-req*$10555$4aEQL
                                   g$visit-req*$10556$4aEQL
                                   g$invoke-code$10557$4aEQL
                                   g$visit-code$10558$4aEQL
                                   g$export-subst$10559$4aEQL
                                   g$export-env$10560$4aEQL)
                                 ((case-lambda
                                    ((g$export-env$10561$4aEQL
                                       g$export-subst$10562$4aEQL
                                       g$visit-code$10563$4aEQL
                                       g$invoke-code$10564$4aEQL
                                       g$visit-req*$10565$4aEQL
                                       g$invoke-req*$10566$4aEQL
                                       g$imp*$10567$4aEQL)
                                     (values
                                       g$name$10546$4aEQL
                                       g$ver$10545$4aEQL
                                       g$imp*$10567$4aEQL
                                       g$invoke-req*$10566$4aEQL
                                       g$visit-req*$10565$4aEQL
                                       g$invoke-code$10564$4aEQL
                                       g$visit-code$10563$4aEQL
                                       g$export-subst$10562$4aEQL
                                       g$export-env$10561$4aEQL)))
                                  g$export-env$10560$4aEQL
                                  g$export-subst$10559$4aEQL
                                  g$visit-code$10558$4aEQL
                                  g$invoke-code$10557$4aEQL
                                  g$visit-req*$10556$4aEQL
                                  g$invoke-req*$10555$4aEQL
                                  g$imp*$10554$4aEQL)))))))
                       g$ver$10544$4aEQL
                       g$name$10543$4aEQL))))))
              g$b*$10536$4aEQL
              g$imp*$10535$4aEQL
              g$exp*$10534$4aEQL
              g$name*$10533$4aEQL)))))))
   (g$parse-top-level-program$7644$4aEQL
     g$parse-top-level-program$11135$4aEQL
     (case-lambda
       ((g$e*$10568$4aEQL)
        ((case-lambda
           ((g$t$10569$4aEQL)
            ((case-lambda
               ((g$ls/false$10570$4aEQL)
                (if (if g$ls/false$10570$4aEQL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10571$4aEQL
                               g$imp*$10572$4aEQL
                               g$b*$10573$4aEQL)
                             (eq? (g$syntax->datum$7699$4aEQL
                                    g$import$10571$4aEQL)
                                  'import)))
                          g$ls/false$10570$4aEQL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10574$4aEQL
                         g$imp*$10575$4aEQL
                         g$b*$10576$4aEQL)
                       (values g$imp*$10575$4aEQL g$b*$10576$4aEQL)))
                    g$ls/false$10570$4aEQL)
                  ((case-lambda
                     ((g$t$10577$4aEQL)
                      ((case-lambda
                         ((g$ls/false$10578$4aEQL)
                          (if (if g$ls/false$10578$4aEQL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10579$4aEQL
                                         g$x$10580$4aEQL
                                         g$y$10581$4aEQL)
                                       (eq? (g$syntax->datum$7699$4aEQL
                                              g$import$10579$4aEQL)
                                            'import)))
                                    g$ls/false$10578$4aEQL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10582$4aEQL
                                   g$x$10583$4aEQL
                                   g$y$10584$4aEQL)
                                 (g$syntax-violation$7696$4aEQL
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7304$4aEQL g$e*$10568$4aEQL))))
                              g$ls/false$10578$4aEQL)
                            ((case-lambda
                               ((g$t$10585$4aEQL)
                                ((case-lambda
                                   ((g$ls/false$10586$4aEQL)
                                    (if g$ls/false$10586$4aEQL
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10586$4aEQL)
                                      (g$syntax-violation$7696$4aEQL
                                        '#f
                                        '"invalid syntax"
                                        g$t$10585$4aEQL))))
                                 (g$syntax-dispatch$7585$4aEQL
                                   g$t$10585$4aEQL
                                   '_))))
                             g$t$10577$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL
                         g$t$10577$4aEQL
                         '((any . any) . any)))))
                   g$t$10569$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL
               g$t$10569$4aEQL
               '((any . each-any) . each-any)))))
         g$e*$10568$4aEQL))))
   (g$top-level-expander$7645$4aEQL
     g$top-level-expander$11136$4aEQL
     (case-lambda
       ((g$e*$10587$4aEQL)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$7644$4aEQL g$e*$10587$4aEQL)))
          (case-lambda
            ((g$imp*$10590$4aEQL g$b*$10591$4aEQL)
             ((case-lambda
                ((g$b*$10592$4aEQL g$imp*$10593$4aEQL)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7642$4aEQL
                        '()
                        '()
                        g$imp*$10593$4aEQL
                        g$b*$10592$4aEQL
                        '#t)))
                   (case-lambda
                     ((g$imp*$10601$4aEQL
                        g$invoke-req*$10602$4aEQL
                        g$visit-req*$10603$4aEQL
                        g$invoke-code$10604$4aEQL
                        g$visit-code$10605$4aEQL
                        g$export-subst$10606$4aEQL
                        g$export-env$10607$4aEQL)
                      ((case-lambda
                         ((g$export-env$10608$4aEQL
                            g$export-subst$10609$4aEQL
                            g$visit-code$10610$4aEQL
                            g$invoke-code$10611$4aEQL
                            g$visit-req*$10612$4aEQL
                            g$invoke-req*$10613$4aEQL
                            g$imp*$10614$4aEQL)
                          (values
                            g$invoke-req*$10613$4aEQL
                            g$invoke-code$10611$4aEQL)))
                       g$export-env$10607$4aEQL
                       g$export-subst$10606$4aEQL
                       g$visit-code$10605$4aEQL
                       g$invoke-code$10604$4aEQL
                       g$visit-req*$10603$4aEQL
                       g$invoke-req*$10602$4aEQL
                       g$imp*$10601$4aEQL))))))
              g$b*$10591$4aEQL
              g$imp*$10590$4aEQL)))))))
   (g$8765$7646$4aEQL
     g$8765$11137$4aEQL
     (make-record-type-descriptor
       'env
       '#f
       'g$8768$4aEQL
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8767$7647$4aEQL g$8767$11138$4aEQL '#f)
   (g$8766$7648$4aEQL
     g$8766$11139$4aEQL
     (make-record-constructor-descriptor
       g$8765$7646$4aEQL
       '#f
       g$8767$7647$4aEQL))
   (g$env?$7649$4aEQL
     g$env?$11140$4aEQL
     (record-predicate g$8765$7646$4aEQL))
   (g$make-env$7650$4aEQL
     g$make-env$11141$4aEQL
     (record-constructor g$8766$7648$4aEQL))
   (g$env-names$7651$4aEQL
     g$env-names$11142$4aEQL
     (record-accessor g$8765$7646$4aEQL '0))
   (g$env-labels$7652$4aEQL
     g$env-labels$11143$4aEQL
     (record-accessor g$8765$7646$4aEQL '1))
   (g$env-itc$7653$4aEQL
     g$env-itc$11144$4aEQL
     (record-accessor g$8765$7646$4aEQL '2))
   (g$set-env-names!$7654$4aEQL
     g$set-env-names!$11145$4aEQL
     (record-mutator g$8765$7646$4aEQL '0))
   (g$set-env-labels!$7655$4aEQL
     g$set-env-labels!$11146$4aEQL
     (record-mutator g$8765$7646$4aEQL '1))
   (g$set-env-itc!$7656$4aEQL
     g$set-env-itc!$11147$4aEQL
     (record-mutator g$8765$7646$4aEQL '2))
   (g$rp$7657$4aEQL
     g$rp$11148$4aEQL
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10615$4aEQL g$p$10616$4aEQL g$wr$10617$4aEQL)
          (display '"#<environment>" g$p$10616$4aEQL)))))
   (g$8784$7658$4aEQL
     g$8784$11149$4aEQL
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8787$4aEQL
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8786$7659$4aEQL g$8786$11150$4aEQL '#f)
   (g$8785$7660$4aEQL
     g$8785$11151$4aEQL
     (make-record-constructor-descriptor
       g$8784$7658$4aEQL
       '#f
       g$8786$7659$4aEQL))
   (g$interaction-env?$7661$4aEQL
     g$interaction-env?$11152$4aEQL
     (record-predicate g$8784$7658$4aEQL))
   (g$make-interaction-env$7662$4aEQL
     g$make-interaction-env$11153$4aEQL
     (record-constructor g$8785$7660$4aEQL))
   (g$interaction-env-rib$7663$4aEQL
     g$interaction-env-rib$11154$4aEQL
     (record-accessor g$8784$7658$4aEQL '0))
   (g$interaction-env-r$7664$4aEQL
     g$interaction-env-r$11155$4aEQL
     (record-accessor g$8784$7658$4aEQL '1))
   (g$interaction-env-locs$7665$4aEQL
     g$interaction-env-locs$11156$4aEQL
     (record-accessor g$8784$7658$4aEQL '2))
   (g$set-interaction-env-rib!$7666$4aEQL
     g$set-interaction-env-rib!$11157$4aEQL
     (record-mutator g$8784$7658$4aEQL '0))
   (g$set-interaction-env-r!$7667$4aEQL
     g$set-interaction-env-r!$11158$4aEQL
     (record-mutator g$8784$7658$4aEQL '1))
   (g$set-interaction-env-locs!$7668$4aEQL
     g$set-interaction-env-locs!$11159$4aEQL
     (record-mutator g$8784$7658$4aEQL '2))
   (g$rp$7669$4aEQL
     g$rp$11160$4aEQL
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10618$4aEQL g$p$10619$4aEQL g$wr$10620$4aEQL)
          (display '"#<environment>" g$p$10619$4aEQL)))))
   (g$interaction-environment-symbols$7670$4aEQL
     g$interaction-environment-symbols$11161$4aEQL
     (case-lambda
       (()
        (g$environment-symbols$7674$4aEQL
          (g$interaction-environment$7702$4aEQL)))))
   (g$environment-bindings$7671$4aEQL
     g$environment-bindings$11162$4aEQL
     (case-lambda
       ((g$e$10621$4aEQL)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$10622$4aEQL g$label$10623$4aEQL)
               (g$parse-binding$7672$4aEQL
                 (cons
                   g$name$10622$4aEQL
                   (g$imported-label->binding$7116$4aEQL
                     g$label$10623$4aEQL)))))
            (g$env-names$7651$4aEQL g$e$10621$4aEQL)
            (g$env-labels$7652$4aEQL g$e$10621$4aEQL))))))
   (g$parse-binding$7672$4aEQL
     g$parse-binding$11163$4aEQL
     (case-lambda
       ((g$b$10624$4aEQL)
        (cons
          (car g$b$10624$4aEQL)
          ((case-lambda
             ((g$t$10625$4aEQL)
              (if (g$memv$5041$4aEQL g$t$10625$4aEQL '(core-prim global))
                'procedure
                (if (g$memv$5041$4aEQL
                      g$t$10625$4aEQL
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5041$4aEQL g$t$10625$4aEQL '($core-rtd))
                    'record
                    (if (eq? (car g$b$10624$4aEQL)
                             (g$cadr$5212$4aEQL g$b$10624$4aEQL))
                      'syntax
                      'unknown))))))
           (g$cadr$5212$4aEQL g$b$10624$4aEQL))))))
   (g$environment?$7673$4aEQL
     g$environment?$11164$4aEQL
     (case-lambda
       ((g$x$10626$4aEQL)
        ((case-lambda
           ((g$t$10627$4aEQL)
            (if g$t$10627$4aEQL
              g$t$10627$4aEQL
              (begin '#f (g$interaction-env?$7661$4aEQL g$x$10626$4aEQL)))))
         (g$env?$7649$4aEQL g$x$10626$4aEQL)))))
   (g$environment-symbols$7674$4aEQL
     g$environment-symbols$11165$4aEQL
     (case-lambda
       ((g$x$10628$4aEQL)
        (if (g$env?$7649$4aEQL g$x$10628$4aEQL)
          (vector->list (g$env-names$7651$4aEQL g$x$10628$4aEQL))
          (if (g$interaction-env?$7661$4aEQL g$x$10628$4aEQL)
            (g$map$5048$4aEQL
              values
              (g$rib-sym*$7257$4aEQL
                (g$interaction-env-rib$7663$4aEQL g$x$10628$4aEQL)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$10628$4aEQL))))))
   (g$environment$7675$4aEQL
     g$environment$11166$4aEQL
     (case-lambda
       (g$imp*$10629$4aEQL
        ((case-lambda
           ((g$itc$10630$4aEQL)
            ((case-lambda
               ((g$imp-collector$10633$4aEQL g$imp-collector$10634$4aEQL)
                ((case-lambda
                   ((g$swap$10635$4aEQL)
                    (dynamic-wind
                      g$swap$10635$4aEQL
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7634$4aEQL
                                g$imp*$10629$4aEQL)))
                           (case-lambda
                             ((g$subst-names$10638$4aEQL
                                g$subst-labels$10639$4aEQL)
                              ((case-lambda
                                 ((g$subst-labels$10640$4aEQL
                                    g$subst-names$10641$4aEQL)
                                  (g$make-env$7650$4aEQL
                                    g$subst-names$10641$4aEQL
                                    g$subst-labels$10640$4aEQL
                                    g$itc$10630$4aEQL)))
                               g$subst-labels$10639$4aEQL
                               g$subst-names$10638$4aEQL))))))
                      g$swap$10635$4aEQL)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10642$4aEQL)
                        (begin
                          (g$imp-collector$10633$4aEQL
                            g$imp-collector$10634$4aEQL)
                          (set! g$imp-collector$10634$4aEQL g$t$10642$4aEQL))))
                     (g$imp-collector$10633$4aEQL)))))))
             g$imp-collector$7639$4aEQL
             g$itc$10630$4aEQL)))
         (g$make-collector$7636$4aEQL)))))
   (g$null-environment$7676$4aEQL
     g$null-environment$11167$4aEQL
     (case-lambda
       ((g$n$10643$4aEQL)
        (begin
          (if (not (eqv? g$n$10643$4aEQL '5))
            (assertion-violation 'null-environment '"not 5" g$n$10643$4aEQL)
            (void))
          (g$environment$7675$4aEQL '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7677$4aEQL
     g$scheme-report-environment$11168$4aEQL
     (case-lambda
       ((g$n$10644$4aEQL)
        (begin
          (if (not (eqv? g$n$10644$4aEQL '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10644$4aEQL)
            (void))
          (g$environment$7675$4aEQL '(psyntax scheme-report-environment-5))))))
   (g$expand$7678$4aEQL
     g$expand$11169$4aEQL
     (case-lambda
       ((g$x$10645$4aEQL g$env$10646$4aEQL)
        (if (g$env?$7649$4aEQL g$env$10646$4aEQL)
          ((case-lambda
             ((g$rib$10647$4aEQL)
              ((case-lambda
                 ((g$x$10648$4aEQL
                    g$itc$10649$4aEQL
                    g$rtc$10650$4aEQL
                    g$vtc$10651$4aEQL)
                  ((case-lambda
                     ((g$x$10652$4aEQL)
                      (begin
                        (g$seal-rib!$7273$4aEQL g$rib$10647$4aEQL)
                        (values g$x$10652$4aEQL (g$rtc$10650$4aEQL)))))
                   ((case-lambda
                      ((g$top-level-context$10661$4aEQL
                         g$inv-collector$10662$4aEQL
                         g$vis-collector$10663$4aEQL
                         g$imp-collector$10664$4aEQL
                         g$top-level-context$10665$4aEQL
                         g$inv-collector$10666$4aEQL
                         g$vis-collector$10667$4aEQL
                         g$imp-collector$10668$4aEQL)
                       ((case-lambda
                          ((g$swap$10669$4aEQL)
                           (dynamic-wind
                             g$swap$10669$4aEQL
                             (case-lambda
                               (()
                                (g$chi-expr$7603$4aEQL
                                  g$x$10648$4aEQL
                                  '()
                                  '())))
                             g$swap$10669$4aEQL)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10670$4aEQL)
                                 (begin
                                   (g$top-level-context$10661$4aEQL
                                     g$top-level-context$10665$4aEQL)
                                   (set! g$top-level-context$10665$4aEQL
                                     g$t$10670$4aEQL))))
                              (g$top-level-context$10661$4aEQL))
                             ((case-lambda
                                ((g$t$10671$4aEQL)
                                 (begin
                                   (g$inv-collector$10662$4aEQL
                                     g$inv-collector$10666$4aEQL)
                                   (set! g$inv-collector$10666$4aEQL
                                     g$t$10671$4aEQL))))
                              (g$inv-collector$10662$4aEQL))
                             ((case-lambda
                                ((g$t$10672$4aEQL)
                                 (begin
                                   (g$vis-collector$10663$4aEQL
                                     g$vis-collector$10667$4aEQL)
                                   (set! g$vis-collector$10667$4aEQL
                                     g$t$10672$4aEQL))))
                              (g$vis-collector$10663$4aEQL))
                             ((case-lambda
                                ((g$t$10673$4aEQL)
                                 (begin
                                   (g$imp-collector$10664$4aEQL
                                     g$imp-collector$10668$4aEQL)
                                   (set! g$imp-collector$10668$4aEQL
                                     g$t$10673$4aEQL))))
                              (g$imp-collector$10664$4aEQL))))))))
                    g$top-level-context$7703$4aEQL
                    g$inv-collector$7637$4aEQL
                    g$vis-collector$7638$4aEQL
                    g$imp-collector$7639$4aEQL
                    '#f
                    g$rtc$10650$4aEQL
                    g$vtc$10651$4aEQL
                    g$itc$10649$4aEQL))))
               (g$make-stx$7280$4aEQL
                 g$x$10645$4aEQL
                 g$top-mark*$7244$4aEQL
                 (list g$rib$10647$4aEQL)
                 '())
               (g$env-itc$7653$4aEQL g$env$10646$4aEQL)
               (g$make-collector$7636$4aEQL)
               (g$make-collector$7636$4aEQL))))
           (g$make-top-rib$7635$4aEQL
             (g$env-names$7651$4aEQL g$env$10646$4aEQL)
             (g$env-labels$7652$4aEQL g$env$10646$4aEQL)))
          (if (g$interaction-env?$7661$4aEQL g$env$10646$4aEQL)
            ((case-lambda
               ((g$rib$10674$4aEQL g$r$10675$4aEQL g$rtc$10676$4aEQL)
                ((case-lambda
                   ((g$x$10677$4aEQL)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10688$4aEQL
                               g$inv-collector$10689$4aEQL
                               g$vis-collector$10690$4aEQL
                               g$imp-collector$10691$4aEQL
                               g$top-level-context$10692$4aEQL
                               g$inv-collector$10693$4aEQL
                               g$vis-collector$10694$4aEQL
                               g$imp-collector$10695$4aEQL)
                             ((case-lambda
                                ((g$swap$10696$4aEQL)
                                 (dynamic-wind
                                   g$swap$10696$4aEQL
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7641$4aEQL
                                        g$x$10677$4aEQL
                                        g$rib$10674$4aEQL
                                        g$r$10675$4aEQL)))
                                   g$swap$10696$4aEQL)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10697$4aEQL)
                                       (begin
                                         (g$top-level-context$10688$4aEQL
                                           g$top-level-context$10692$4aEQL)
                                         (set! g$top-level-context$10692$4aEQL
                                           g$t$10697$4aEQL))))
                                    (g$top-level-context$10688$4aEQL))
                                   ((case-lambda
                                      ((g$t$10698$4aEQL)
                                       (begin
                                         (g$inv-collector$10689$4aEQL
                                           g$inv-collector$10693$4aEQL)
                                         (set! g$inv-collector$10693$4aEQL
                                           g$t$10698$4aEQL))))
                                    (g$inv-collector$10689$4aEQL))
                                   ((case-lambda
                                      ((g$t$10699$4aEQL)
                                       (begin
                                         (g$vis-collector$10690$4aEQL
                                           g$vis-collector$10694$4aEQL)
                                         (set! g$vis-collector$10694$4aEQL
                                           g$t$10699$4aEQL))))
                                    (g$vis-collector$10690$4aEQL))
                                   ((case-lambda
                                      ((g$t$10700$4aEQL)
                                       (begin
                                         (g$imp-collector$10691$4aEQL
                                           g$imp-collector$10695$4aEQL)
                                         (set! g$imp-collector$10695$4aEQL
                                           g$t$10700$4aEQL))))
                                    (g$imp-collector$10691$4aEQL))))))))
                          g$top-level-context$7703$4aEQL
                          g$inv-collector$7637$4aEQL
                          g$vis-collector$7638$4aEQL
                          g$imp-collector$7639$4aEQL
                          g$env$10646$4aEQL
                          g$rtc$10676$4aEQL
                          (g$make-collector$7636$4aEQL)
                          (g$make-collector$7636$4aEQL))))
                      (case-lambda
                        ((g$e$10701$4aEQL g$r^$10702$4aEQL)
                         ((case-lambda
                            ((g$r^$10703$4aEQL g$e$10704$4aEQL)
                             (begin
                               (g$set-interaction-env-r!$7667$4aEQL
                                 g$env$10646$4aEQL
                                 g$r^$10703$4aEQL)
                               (values g$e$10704$4aEQL (g$rtc$10676$4aEQL)))))
                          g$r^$10702$4aEQL
                          g$e$10701$4aEQL))))))
                 (g$make-stx$7280$4aEQL
                   g$x$10645$4aEQL
                   g$top-mark*$7244$4aEQL
                   (list g$rib$10674$4aEQL)
                   '()))))
             (g$interaction-env-rib$7663$4aEQL g$env$10646$4aEQL)
             (g$interaction-env-r$7664$4aEQL g$env$10646$4aEQL)
             (g$make-collector$7636$4aEQL))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10646$4aEQL))))))
   (g$eval$7679$4aEQL
     g$eval$11170$4aEQL
     (case-lambda
       ((g$x$10705$4aEQL g$env$10706$4aEQL)
        (begin
          (if (not (g$environment?$7673$4aEQL g$env$10706$4aEQL))
            (error 'eval '"not an environment" g$env$10706$4aEQL)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$7678$4aEQL g$x$10705$4aEQL g$env$10706$4aEQL)))
            (case-lambda
              ((g$x$10709$4aEQL g$invoke-req*$10710$4aEQL)
               ((case-lambda
                  ((g$invoke-req*$10711$4aEQL g$x$10712$4aEQL)
                   (begin
                     (g$for-each$5049$4aEQL
                       g$invoke-library$7117$4aEQL
                       g$invoke-req*$10711$4aEQL)
                     (eval-core
                       (g$expanded->core$6825$4aEQL g$x$10712$4aEQL)))))
                g$invoke-req*$10710$4aEQL
                g$x$10709$4aEQL))))))))
   (g$library-expander$7680$4aEQL
     g$library-expander$11171$4aEQL
     (case-lambda
       ((g$x$10713$4aEQL g$filename$10714$4aEQL g$verify-name$10715$4aEQL)
        (letrec* ((g$build-visit-code$10716$4aEQL
                    (case-lambda
                      ((g$macro*$10759$4aEQL)
                       (if (null? g$macro*$10759$4aEQL)
                         (g$build-void$7237$4aEQL)
                         (g$build-sequence$7236$4aEQL
                           '#f
                           (g$map$5048$4aEQL
                             (case-lambda
                               ((g$x$10760$4aEQL)
                                ((case-lambda
                                   ((g$loc$10761$4aEQL g$src$10762$4aEQL)
                                    (list
                                      'set!
                                      g$loc$10761$4aEQL
                                      g$src$10762$4aEQL)))
                                 (car g$x$10760$4aEQL)
                                 (g$cddr$5214$4aEQL g$x$10760$4aEQL))))
                             g$macro*$10759$4aEQL))))))
                  (g$visit!$10717$4aEQL
                    (case-lambda
                      ((g$macro*$10755$4aEQL)
                       (g$for-each$5049$4aEQL
                         (case-lambda
                           ((g$x$10756$4aEQL)
                            ((case-lambda
                               ((g$loc$10757$4aEQL g$proc$10758$4aEQL)
                                (set-symbol-value!
                                  g$loc$10757$4aEQL
                                  g$proc$10758$4aEQL)))
                             (car g$x$10756$4aEQL)
                             (g$cadr$5212$4aEQL g$x$10756$4aEQL))))
                         g$macro*$10755$4aEQL)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7643$4aEQL
                 g$x$10713$4aEQL
                 g$verify-name$10715$4aEQL)))
            (case-lambda
              ((g$name$10727$4aEQL
                 g$ver$10728$4aEQL
                 g$imp*$10729$4aEQL
                 g$inv*$10730$4aEQL
                 g$vis*$10731$4aEQL
                 g$invoke-code$10732$4aEQL
                 g$macro*$10733$4aEQL
                 g$export-subst$10734$4aEQL
                 g$export-env$10735$4aEQL)
               ((case-lambda
                  ((g$export-env$10736$4aEQL
                     g$export-subst$10737$4aEQL
                     g$macro*$10738$4aEQL
                     g$invoke-code$10739$4aEQL
                     g$vis*$10740$4aEQL
                     g$inv*$10741$4aEQL
                     g$imp*$10742$4aEQL
                     g$ver$10743$4aEQL
                     g$name$10744$4aEQL)
                   ((case-lambda
                      ((g$id$10745$4aEQL
                         g$name$10746$4aEQL
                         g$ver$10747$4aEQL
                         g$imp*$10748$4aEQL
                         g$vis*$10749$4aEQL
                         g$inv*$10750$4aEQL
                         g$visit-proc$10751$4aEQL
                         g$invoke-proc$10752$4aEQL
                         g$visit-code$10753$4aEQL
                         g$invoke-code$10754$4aEQL)
                       (begin
                         (g$install-library$7115$4aEQL
                           g$id$10745$4aEQL
                           g$name$10746$4aEQL
                           g$ver$10747$4aEQL
                           g$imp*$10748$4aEQL
                           g$vis*$10749$4aEQL
                           g$inv*$10750$4aEQL
                           g$export-subst$10737$4aEQL
                           g$export-env$10736$4aEQL
                           g$visit-proc$10751$4aEQL
                           g$invoke-proc$10752$4aEQL
                           g$visit-code$10753$4aEQL
                           g$invoke-code$10754$4aEQL
                           '#t
                           g$filename$10714$4aEQL)
                         (values
                           g$id$10745$4aEQL
                           g$name$10746$4aEQL
                           g$ver$10747$4aEQL
                           g$imp*$10748$4aEQL
                           g$vis*$10749$4aEQL
                           g$inv*$10750$4aEQL
                           g$invoke-code$10754$4aEQL
                           g$visit-code$10753$4aEQL
                           g$export-subst$10737$4aEQL
                           g$export-env$10736$4aEQL))))
                    (gensym)
                    g$name$10744$4aEQL
                    g$ver$10743$4aEQL
                    (g$map$5048$4aEQL
                      g$library-spec$7121$4aEQL
                      g$imp*$10742$4aEQL)
                    (g$map$5048$4aEQL
                      g$library-spec$7121$4aEQL
                      g$vis*$10740$4aEQL)
                    (g$map$5048$4aEQL
                      g$library-spec$7121$4aEQL
                      g$inv*$10741$4aEQL)
                    (case-lambda
                      (() (g$visit!$10717$4aEQL g$macro*$10738$4aEQL)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6825$4aEQL
                           g$invoke-code$10739$4aEQL))))
                    (g$build-visit-code$10716$4aEQL g$macro*$10738$4aEQL)
                    g$invoke-code$10739$4aEQL)))
                g$export-env$10735$4aEQL
                g$export-subst$10734$4aEQL
                g$macro*$10733$4aEQL
                g$invoke-code$10732$4aEQL
                g$vis*$10731$4aEQL
                g$inv*$10730$4aEQL
                g$imp*$10729$4aEQL
                g$ver$10728$4aEQL
                g$name$10727$4aEQL))))))
       ((g$x$10763$4aEQL g$filename$10764$4aEQL)
        (g$library-expander$7680$4aEQL
          g$x$10763$4aEQL
          g$filename$10764$4aEQL
          (case-lambda ((g$x$10765$4aEQL) (values)))))
       ((g$x$10766$4aEQL)
        (g$library-expander$7680$4aEQL
          g$x$10766$4aEQL
          '#f
          (case-lambda ((g$x$10767$4aEQL) (values)))))))
   (g$boot-library-expand$7681$4aEQL
     g$boot-library-expand$11172$4aEQL
     (case-lambda
       ((g$x$10768$4aEQL)
        (call-with-values
          (case-lambda (() (g$library-expander$7680$4aEQL g$x$10768$4aEQL)))
          (case-lambda
            ((g$id$10779$4aEQL
               g$name$10780$4aEQL
               g$ver$10781$4aEQL
               g$imp*$10782$4aEQL
               g$vis*$10783$4aEQL
               g$inv*$10784$4aEQL
               g$invoke-code$10785$4aEQL
               g$visit-code$10786$4aEQL
               g$export-subst$10787$4aEQL
               g$export-env$10788$4aEQL)
             ((case-lambda
                ((g$export-env$10789$4aEQL
                   g$export-subst$10790$4aEQL
                   g$visit-code$10791$4aEQL
                   g$invoke-code$10792$4aEQL
                   g$inv*$10793$4aEQL
                   g$vis*$10794$4aEQL
                   g$imp*$10795$4aEQL
                   g$ver$10796$4aEQL
                   g$name$10797$4aEQL
                   g$id$10798$4aEQL)
                 (values
                   g$name$10797$4aEQL
                   g$invoke-code$10792$4aEQL
                   g$export-subst$10790$4aEQL
                   g$export-env$10789$4aEQL)))
              g$export-env$10788$4aEQL
              g$export-subst$10787$4aEQL
              g$visit-code$10786$4aEQL
              g$invoke-code$10785$4aEQL
              g$inv*$10784$4aEQL
              g$vis*$10783$4aEQL
              g$imp*$10782$4aEQL
              g$ver$10781$4aEQL
              g$name$10780$4aEQL
              g$id$10779$4aEQL)))))))
   (g$rev-map-append$7682$4aEQL
     g$rev-map-append$11173$4aEQL
     (case-lambda
       ((g$f$10799$4aEQL g$ls$10800$4aEQL g$ac$10801$4aEQL)
        (if (null? g$ls$10800$4aEQL)
          g$ac$10801$4aEQL
          (g$rev-map-append$7682$4aEQL
            g$f$10799$4aEQL
            (cdr g$ls$10800$4aEQL)
            (cons
              (g$f$10799$4aEQL (car g$ls$10800$4aEQL))
              g$ac$10801$4aEQL))))))
   (g$build-exports$7683$4aEQL
     g$build-exports$11174$4aEQL
     (case-lambda
       ((g$lex*+loc*$10802$4aEQL g$init*$10803$4aEQL)
        (g$build-sequence$7236$4aEQL
          '#f
          (cons
            (g$build-void$7237$4aEQL)
            (g$rev-map-append$7682$4aEQL
              (case-lambda
                ((g$x$10804$4aEQL)
                 (list 'set! (cdr g$x$10804$4aEQL) (car g$x$10804$4aEQL))))
              g$lex*+loc*$10802$4aEQL
              g$init*$10803$4aEQL))))))
   (g$make-export-subst$7684$4aEQL
     g$make-export-subst$11175$4aEQL
     (case-lambda
       ((g$name*$10805$4aEQL g$id*$10806$4aEQL)
        (g$map$5048$4aEQL
          (case-lambda
            ((g$name$10807$4aEQL g$id$10808$4aEQL)
             ((case-lambda
                ((g$label$10809$4aEQL)
                 (begin
                   (if (not g$label$10809$4aEQL)
                     (g$syntax-violation$7696$4aEQL
                       '#f
                       '"cannot export unbound identifier"
                       g$id$10808$4aEQL)
                     (void))
                   (cons g$name$10807$4aEQL g$label$10809$4aEQL))))
              (g$id->label$7320$4aEQL g$id$10808$4aEQL))))
          g$name*$10805$4aEQL
          g$id*$10806$4aEQL))))
   (g$make-export-env/macros$7685$4aEQL
     g$make-export-env/macros$11176$4aEQL
     (case-lambda
       ((g$lex*$10810$4aEQL g$loc*$10811$4aEQL g$r$10812$4aEQL)
        (letrec* ((g$lookup$10813$4aEQL
                    (case-lambda
                      ((g$x$10828$4aEQL)
                       ((letrec ((g$f$10829$4aEQL
                                   (case-lambda
                                     ((g$x$10830$4aEQL
                                        g$lex*$10831$4aEQL
                                        g$loc*$10832$4aEQL)
                                      (if (pair? g$lex*$10831$4aEQL)
                                        (if (eq? g$x$10830$4aEQL
                                                 (car g$lex*$10831$4aEQL))
                                          (car g$loc*$10832$4aEQL)
                                          (g$f$10829$4aEQL
                                            g$x$10830$4aEQL
                                            (cdr g$lex*$10831$4aEQL)
                                            (cdr g$loc*$10832$4aEQL)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10829$4aEQL)
                        g$x$10828$4aEQL
                        g$lex*$10810$4aEQL
                        g$loc*$10811$4aEQL)))))
          ((letrec ((g$f$10814$4aEQL
                      (case-lambda
                        ((g$r$10815$4aEQL
                           g$env$10816$4aEQL
                           g$global*$10817$4aEQL
                           g$macro*$10818$4aEQL)
                         (if (null? g$r$10815$4aEQL)
                           (values
                             g$env$10816$4aEQL
                             g$global*$10817$4aEQL
                             g$macro*$10818$4aEQL)
                           ((case-lambda
                              ((g$x$10819$4aEQL)
                               ((case-lambda
                                  ((g$label$10820$4aEQL g$b$10821$4aEQL)
                                   ((case-lambda
                                      ((g$t$10822$4aEQL)
                                       (if (g$memv$5041$4aEQL
                                             g$t$10822$4aEQL
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$10823$4aEQL)
                                             ((case-lambda
                                                ((g$loc$10824$4aEQL
                                                   g$type$10825$4aEQL)
                                                 (g$f$10814$4aEQL
                                                   (cdr g$r$10815$4aEQL)
                                                   (cons
                                                     (g$cons*$5050$4aEQL
                                                       g$label$10820$4aEQL
                                                       g$type$10825$4aEQL
                                                       g$loc$10824$4aEQL)
                                                     g$env$10816$4aEQL)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7529$4aEQL
                                                         g$v$10823$4aEQL)
                                                       g$loc$10824$4aEQL)
                                                     g$global*$10817$4aEQL)
                                                   g$macro*$10818$4aEQL)))
                                              (g$lookup$10813$4aEQL
                                                (g$lexical-var$7529$4aEQL
                                                  g$v$10823$4aEQL))
                                              (if (g$lexical-mutable?$7530$4aEQL
                                                    g$v$10823$4aEQL)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7325$4aEQL
                                            g$b$10821$4aEQL))
                                         (if (g$memv$5041$4aEQL
                                               g$t$10822$4aEQL
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$10826$4aEQL)
                                               (g$f$10814$4aEQL
                                                 (cdr g$r$10815$4aEQL)
                                                 (cons
                                                   (g$cons*$5050$4aEQL
                                                     g$label$10820$4aEQL
                                                     'global-macro
                                                     g$loc$10826$4aEQL)
                                                   g$env$10816$4aEQL)
                                                 g$global*$10817$4aEQL
                                                 (cons
                                                   (cons
                                                     g$loc$10826$4aEQL
                                                     (g$binding-value$7325$4aEQL
                                                       g$b$10821$4aEQL))
                                                   g$macro*$10818$4aEQL))))
                                            (gensym))
                                           (if (g$memv$5041$4aEQL
                                                 g$t$10822$4aEQL
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$10827$4aEQL)
                                                 (g$f$10814$4aEQL
                                                   (cdr g$r$10815$4aEQL)
                                                   (cons
                                                     (g$cons*$5050$4aEQL
                                                       g$label$10820$4aEQL
                                                       'global-macro!
                                                       g$loc$10827$4aEQL)
                                                     g$env$10816$4aEQL)
                                                   g$global*$10817$4aEQL
                                                   (cons
                                                     (cons
                                                       g$loc$10827$4aEQL
                                                       (g$binding-value$7325$4aEQL
                                                         g$b$10821$4aEQL))
                                                     g$macro*$10818$4aEQL))))
                                              (gensym))
                                             (if (g$memv$5041$4aEQL
                                                   g$t$10822$4aEQL
                                                   '($rtd $module))
                                               (g$f$10814$4aEQL
                                                 (cdr g$r$10815$4aEQL)
                                                 (cons
                                                   g$x$10819$4aEQL
                                                   g$env$10816$4aEQL)
                                                 g$global*$10817$4aEQL
                                                 g$macro*$10818$4aEQL)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7324$4aEQL
                                                   g$b$10821$4aEQL)
                                                 (g$binding-value$7325$4aEQL
                                                   g$b$10821$4aEQL))))))))
                                    (g$binding-type$7324$4aEQL
                                      g$b$10821$4aEQL))))
                                (car g$x$10819$4aEQL)
                                (cdr g$x$10819$4aEQL))))
                            (car g$r$10815$4aEQL)))))))
             g$f$10814$4aEQL)
           g$r$10812$4aEQL
           '()
           '()
           '())))))
   (g$generate-temporaries$7686$4aEQL
     g$generate-temporaries$11177$4aEQL
     (case-lambda
       ((g$ls$10833$4aEQL)
        ((case-lambda
           ((g$t$10834$4aEQL)
            ((case-lambda
               ((g$ls/false$10835$4aEQL)
                (if g$ls/false$10835$4aEQL
                  (apply
                    (case-lambda
                      ((g$ls$10836$4aEQL)
                       (g$map$5048$4aEQL
                         (case-lambda
                           ((g$x$10837$4aEQL)
                            (g$make-stx$7280$4aEQL
                              ((case-lambda
                                 ((g$x$10838$4aEQL)
                                  (if ((case-lambda
                                         ((g$t$10839$4aEQL)
                                          (if g$t$10839$4aEQL
                                            g$t$10839$4aEQL
                                            (begin
                                              '#f
                                              (string? g$x$10838$4aEQL)))))
                                       (symbol? g$x$10838$4aEQL))
                                    (gensym g$x$10838$4aEQL)
                                    (gensym 't))))
                               (g$syntax->datum$7699$4aEQL g$x$10837$4aEQL))
                              g$top-mark*$7244$4aEQL
                              '()
                              '())))
                         g$ls$10836$4aEQL)))
                    g$ls/false$10835$4aEQL)
                  ((case-lambda
                     ((g$t$10840$4aEQL)
                      ((case-lambda
                         ((g$ls/false$10841$4aEQL)
                          (if g$ls/false$10841$4aEQL
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10841$4aEQL)
                            (g$syntax-violation$7696$4aEQL
                              '#f
                              '"invalid syntax"
                              g$t$10840$4aEQL))))
                       (g$syntax-dispatch$7585$4aEQL g$t$10840$4aEQL '_))))
                   g$t$10834$4aEQL))))
             (g$syntax-dispatch$7585$4aEQL g$t$10834$4aEQL 'each-any))))
         g$ls$10833$4aEQL))))
   (g$free-identifier=?$7687$4aEQL
     g$free-identifier=?$11178$4aEQL
     (case-lambda
       ((g$x$10842$4aEQL g$y$10843$4aEQL)
        (if (g$id?$7307$4aEQL g$x$10842$4aEQL)
          (if (g$id?$7307$4aEQL g$y$10843$4aEQL)
            (g$free-id=?$7311$4aEQL g$x$10842$4aEQL g$y$10843$4aEQL)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10843$4aEQL))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10842$4aEQL)))))
   (g$bound-identifier=?$7688$4aEQL
     g$bound-identifier=?$11179$4aEQL
     (case-lambda
       ((g$x$10844$4aEQL g$y$10845$4aEQL)
        (if (g$id?$7307$4aEQL g$x$10844$4aEQL)
          (if (g$id?$7307$4aEQL g$y$10845$4aEQL)
            (g$bound-id=?$7310$4aEQL g$x$10844$4aEQL g$y$10845$4aEQL)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10845$4aEQL))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10844$4aEQL)))))
   (g$make-source-condition$7689$4aEQL
     g$make-source-condition$11180$4aEQL
     (case-lambda
       ((g$x$10846$4aEQL)
        (letrec* ((g$11709$10847$4aEQL
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11712$4aEQL
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11711$10848$4aEQL '#f)
                  (g$11710$10849$4aEQL
                    (make-record-constructor-descriptor
                      g$11709$10847$4aEQL
                      &condition-rcd
                      g$11711$10848$4aEQL))
                  (g$11708$10850$4aEQL (record-predicate g$11709$10847$4aEQL))
                  (g$make-source-condition$10851$4aEQL
                    (record-constructor g$11710$10849$4aEQL))
                  (g$11706$10852$4aEQL (record-accessor g$11709$10847$4aEQL '0))
                  (g$11707$10853$4aEQL (record-accessor g$11709$10847$4aEQL '1))
                  (g$source-condition?$10854$4aEQL
                    (condition-predicate g$11709$10847$4aEQL))
                  (g$source-filename$10855$4aEQL
                    (condition-accessor
                      g$11709$10847$4aEQL
                      g$11706$10852$4aEQL))
                  (g$source-character$10856$4aEQL
                    (condition-accessor
                      g$11709$10847$4aEQL
                      g$11707$10853$4aEQL)))
          (if (pair? g$x$10846$4aEQL)
            (g$make-source-condition$10851$4aEQL
              (car g$x$10846$4aEQL)
              (cdr g$x$10846$4aEQL))
            (condition))))))
   (g$extract-position-condition$7690$4aEQL
     g$extract-position-condition$11181$4aEQL
     (case-lambda
       ((g$x$10857$4aEQL)
        (g$make-source-condition$7689$4aEQL
          (g$expression-position$7691$4aEQL g$x$10857$4aEQL)))))
   (g$expression-position$7691$4aEQL
     g$expression-position$11182$4aEQL
     (case-lambda
       ((g$x$10858$4aEQL)
        (if (g$stx?$7279$4aEQL g$x$10858$4aEQL)
          (begin
            '#f
            ((case-lambda
               ((g$x$10859$4aEQL)
                (if (annotation? g$x$10859$4aEQL)
                  (begin '#f (annotation-source g$x$10859$4aEQL))
                  '#f)))
             (g$stx-expr$7281$4aEQL g$x$10858$4aEQL)))
          '#f))))
   (g$assertion-error$7692$4aEQL
     g$assertion-error$11183$4aEQL
     (case-lambda
       ((g$expr$10860$4aEQL g$pos$10861$4aEQL)
        (raise
          (condition
            (g$make-assertion-violation$5776$4aEQL)
            (g$make-who-condition$5790$4aEQL 'assert)
            (g$make-message-condition$5744$4aEQL '"assertion failed")
            (g$make-irritants-condition$5782$4aEQL (list g$expr$10860$4aEQL))
            (g$make-source-condition$7689$4aEQL g$pos$10861$4aEQL))))))
   (g$syntax-error$7693$4aEQL
     g$syntax-error$11184$4aEQL
     (case-lambda
       ((g$x$10862$4aEQL . g$args$10863$4aEQL)
        (begin
          (if (not (g$for-all$5046$4aEQL string? g$args$10863$4aEQL))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10863$4aEQL)
            (void))
          (raise
            (condition
              (g$make-message-condition$5744$4aEQL
                (if (null? g$args$10863$4aEQL)
                  '"invalid syntax"
                  (apply string-append g$args$10863$4aEQL)))
              (g$make-syntax-violation$5816$4aEQL
                (g$syntax->datum$7699$4aEQL g$x$10862$4aEQL)
                '#f)
              (g$extract-position-condition$7690$4aEQL g$x$10862$4aEQL)
              (g$extract-trace$7694$4aEQL g$x$10862$4aEQL)))))))
   (g$extract-trace$7694$4aEQL
     g$extract-trace$11185$4aEQL
     (case-lambda
       ((g$x$10864$4aEQL)
        (letrec* ((g$11736$10865$4aEQL
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11739$4aEQL
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11738$10866$4aEQL '#f)
                  (g$11737$10867$4aEQL
                    (make-record-constructor-descriptor
                      g$11736$10865$4aEQL
                      &condition-rcd
                      g$11738$10866$4aEQL))
                  (g$11735$10868$4aEQL (record-predicate g$11736$10865$4aEQL))
                  (g$make-trace$10869$4aEQL
                    (record-constructor g$11737$10867$4aEQL))
                  (g$11734$10870$4aEQL (record-accessor g$11736$10865$4aEQL '0))
                  (g$trace?$10871$4aEQL
                    (condition-predicate g$11736$10865$4aEQL))
                  (g$trace-form$10872$4aEQL
                    (condition-accessor
                      g$11736$10865$4aEQL
                      g$11734$10870$4aEQL)))
          ((letrec ((g$f$10873$4aEQL
                      (case-lambda
                        ((g$x$10874$4aEQL)
                         (if (g$stx?$7279$4aEQL g$x$10874$4aEQL)
                           (apply
                             condition
                             (g$make-trace$10869$4aEQL g$x$10874$4aEQL)
                             (g$map$5048$4aEQL
                               g$f$10873$4aEQL
                               (g$stx-ae*$7284$4aEQL g$x$10874$4aEQL)))
                           (if (annotation? g$x$10874$4aEQL)
                             (g$make-trace$10869$4aEQL
                               (g$make-stx$7280$4aEQL
                                 g$x$10874$4aEQL
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$10873$4aEQL)
           g$x$10864$4aEQL)))))
   (g$syntax-violation*$7695$4aEQL
     g$syntax-violation*$11186$4aEQL
     (case-lambda
       ((g$who$10875$4aEQL
          g$msg$10876$4aEQL
          g$form$10877$4aEQL
          g$condition-object$10878$4aEQL)
        (begin
          (if (not (string? g$msg$10876$4aEQL))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10876$4aEQL)
            (void))
          ((case-lambda
             ((g$who$10879$4aEQL)
              (raise
                (condition
                  (if g$who$10879$4aEQL
                    (g$make-who-condition$5790$4aEQL g$who$10879$4aEQL)
                    (condition))
                  (g$make-message-condition$5744$4aEQL g$msg$10876$4aEQL)
                  g$condition-object$10878$4aEQL
                  (g$extract-position-condition$7690$4aEQL g$form$10877$4aEQL)
                  (g$extract-trace$7694$4aEQL g$form$10877$4aEQL)))))
           (if ((case-lambda
                  ((g$t$10880$4aEQL)
                   (if g$t$10880$4aEQL
                     g$t$10880$4aEQL
                     (begin '#f (symbol? g$who$10875$4aEQL)))))
                (string? g$who$10875$4aEQL))
             g$who$10875$4aEQL
             (if (not g$who$10875$4aEQL)
               ((case-lambda
                  ((g$t$10881$4aEQL)
                   ((case-lambda
                      ((g$ls/false$10882$4aEQL)
                       (if (if g$ls/false$10882$4aEQL
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10883$4aEQL)
                                    (g$id?$7307$4aEQL g$id$10883$4aEQL)))
                                 g$ls/false$10882$4aEQL))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10884$4aEQL)
                              (g$syntax->datum$7699$4aEQL g$id$10884$4aEQL)))
                           g$ls/false$10882$4aEQL)
                         ((case-lambda
                            ((g$t$10885$4aEQL)
                             ((case-lambda
                                ((g$ls/false$10886$4aEQL)
                                 (if (if g$ls/false$10886$4aEQL
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10887$4aEQL
                                                g$rest$10888$4aEQL)
                                              (g$id?$7307$4aEQL
                                                g$id$10887$4aEQL)))
                                           g$ls/false$10886$4aEQL))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10889$4aEQL g$rest$10890$4aEQL)
                                        (g$syntax->datum$7699$4aEQL
                                          g$id$10889$4aEQL)))
                                     g$ls/false$10886$4aEQL)
                                   ((case-lambda
                                      ((g$t$10891$4aEQL)
                                       ((case-lambda
                                          ((g$ls/false$10892$4aEQL)
                                           (if g$ls/false$10892$4aEQL
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10892$4aEQL)
                                             (g$syntax-violation$7696$4aEQL
                                               '#f
                                               '"invalid syntax"
                                               g$t$10891$4aEQL))))
                                        (g$syntax-dispatch$7585$4aEQL
                                          g$t$10891$4aEQL
                                          '_))))
                                    g$t$10885$4aEQL))))
                              (g$syntax-dispatch$7585$4aEQL
                                g$t$10885$4aEQL
                                '(any . any)))))
                          g$t$10881$4aEQL))))
                    (g$syntax-dispatch$7585$4aEQL g$t$10881$4aEQL 'any))))
                g$form$10877$4aEQL)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10875$4aEQL))))))))
   (g$syntax-violation$7696$4aEQL
     g$syntax-violation$11187$4aEQL
     (case-lambda
       ((g$who$10893$4aEQL g$msg$10894$4aEQL g$form$10895$4aEQL)
        (g$syntax-violation$7696$4aEQL
          g$who$10893$4aEQL
          g$msg$10894$4aEQL
          g$form$10895$4aEQL
          '#f))
       ((g$who$10896$4aEQL
          g$msg$10897$4aEQL
          g$form$10898$4aEQL
          g$subform$10899$4aEQL)
        (g$syntax-violation*$7695$4aEQL
          g$who$10896$4aEQL
          g$msg$10897$4aEQL
          g$form$10898$4aEQL
          (g$make-syntax-violation$5816$4aEQL
            (g$syntax->datum$7699$4aEQL g$form$10898$4aEQL)
            (g$syntax->datum$7699$4aEQL g$subform$10899$4aEQL))))))
   (g$identifier?$7697$4aEQL
     g$identifier?$11188$4aEQL
     (case-lambda ((g$x$10900$4aEQL) (g$id?$7307$4aEQL g$x$10900$4aEQL))))
   (g$datum->syntax$7698$4aEQL
     g$datum->syntax$11189$4aEQL
     (case-lambda
       ((g$id$10901$4aEQL g$datum$10902$4aEQL)
        (if (g$id?$7307$4aEQL g$id$10901$4aEQL)
          (g$datum->stx$7290$4aEQL g$id$10901$4aEQL g$datum$10902$4aEQL)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10901$4aEQL)))))
   (g$syntax->datum$7699$4aEQL
     g$syntax->datum$11190$4aEQL
     (case-lambda
       ((g$x$10903$4aEQL) (g$stx->datum$7318$4aEQL g$x$10903$4aEQL))))
   (g$compile-r6rs-top-level$7700$4aEQL
     g$compile-r6rs-top-level$11191$4aEQL
     (case-lambda
       ((g$x*$10904$4aEQL)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7645$4aEQL g$x*$10904$4aEQL)))
          (case-lambda
            ((g$lib*$10907$4aEQL g$invoke-code$10908$4aEQL)
             ((case-lambda
                ((g$invoke-code$10909$4aEQL g$lib*$10910$4aEQL)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5049$4aEQL
                        g$invoke-library$7117$4aEQL
                        g$lib*$10910$4aEQL)
                      (eval-core
                        (g$expanded->core$6825$4aEQL
                          g$invoke-code$10909$4aEQL)))))))
              g$invoke-code$10908$4aEQL
              g$lib*$10907$4aEQL)))))))
   (g$pre-compile-r6rs-top-level$7701$4aEQL
     g$pre-compile-r6rs-top-level$11192$4aEQL
     (case-lambda
       ((g$x*$10911$4aEQL)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7645$4aEQL g$x*$10911$4aEQL)))
          (case-lambda
            ((g$lib*$10914$4aEQL g$invoke-code$10915$4aEQL)
             ((case-lambda
                ((g$invoke-code$10916$4aEQL g$lib*$10917$4aEQL)
                 (begin
                   (g$for-each$5049$4aEQL
                     g$invoke-library$7117$4aEQL
                     g$lib*$10917$4aEQL)
                   (compile-core
                     (g$expanded->core$6825$4aEQL g$invoke-code$10916$4aEQL)))))
              g$invoke-code$10915$4aEQL
              g$lib*$10914$4aEQL)))))))
   (g$interaction-environment$7702$4aEQL
     g$interaction-environment$11193$4aEQL
     ((case-lambda
        ((g$the-env$10918$4aEQL)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10919$4aEQL)
                (if g$t$10919$4aEQL
                  g$t$10919$4aEQL
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10920$4aEQL g$rib$10921$4aEQL)
                        (begin
                          ((case-lambda
                             ((g$subst$10922$4aEQL)
                              (begin
                                (g$set-rib-sym*!$7262$4aEQL
                                  g$rib$10921$4aEQL
                                  (g$map$5048$4aEQL car g$subst$10922$4aEQL))
                                (g$set-rib-mark**!$7263$4aEQL
                                  g$rib$10921$4aEQL
                                  (g$map$5048$4aEQL
                                    (case-lambda
                                      ((g$x$10923$4aEQL)
                                       g$top-mark*$7244$4aEQL))
                                    g$subst$10922$4aEQL))
                                (g$set-rib-label*!$7264$4aEQL
                                  g$rib$10921$4aEQL
                                  (g$map$5048$4aEQL cdr g$subst$10922$4aEQL)))))
                           (g$library-subst$7074$4aEQL g$lib$10920$4aEQL))
                          ((case-lambda
                             ((g$env$10924$4aEQL)
                              (begin
                                (set! g$the-env$10918$4aEQL g$env$10924$4aEQL)
                                g$env$10924$4aEQL)))
                           (g$make-interaction-env$7662$4aEQL
                             g$rib$10921$4aEQL
                             '()
                             '())))))
                     (g$find-library-by-name$7110$4aEQL '(ironscheme))
                     (g$make-cache-rib$7268$4aEQL))))))
             g$the-env$10918$4aEQL)))))
      '#f))
   (g$top-level-context$7703$4aEQL
     g$top-level-context$11194$4aEQL
     (g$make-parameter$6579$4aEQL '#f)))
  (g$current-library-expander$7107$4aEQL g$library-expander$7680$4aEQL))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6822$4aEQL
      (case-lambda
        ((g$x$11247$4aEQL)
         ((case-lambda
            ((g$t$11248$4aEQL) (if g$t$11248$4aEQL (cdr g$t$11248$4aEQL) '#f)))
          (g$assq$5036$4aEQL
            g$x$11247$4aEQL
            '((ellipsis-map . g$ellipsis-map$11081$4aEQL)
              (make-list . g$make-list$5031$4aEQL)
              (last-pair . g$last-pair$5030$4aEQL)
              (ironscheme-build . g$ironscheme-build$11240$4aEQL)
              (syntax-error . g$syntax-error$11184$4aEQL)
              (syntax-dispatch . g$syntax-dispatch$11076$4aEQL)
              (compile-system-libraries
                .
                g$compile-system-libraries$11242$4aEQL)
              (compile->closure . g$compile->closure$11244$4aEQL)
              (compile . g$compile$11243$4aEQL)
              (load . g$load$11239$4aEQL)
              (interaction-environment . g$interaction-environment$11193$4aEQL)
              (string-ci>? . g$string-ci>?$5962$4aEQL)
              (string-ci>=? . g$string-ci>=?$5964$4aEQL)
              (string-ci=? . g$string-ci=?$5960$4aEQL)
              (string-ci<? . g$string-ci<?$5961$4aEQL)
              (string-ci<=? . g$string-ci<=?$5963$4aEQL)
              (char-ci>? . g$char-ci>?$5967$4aEQL)
              (char-ci>=? . g$char-ci>=?$5969$4aEQL)
              (char-ci=? . g$char-ci=?$5965$4aEQL)
              (char-ci<? . g$char-ci<?$5966$4aEQL)
              (char-ci<=? . g$char-ci<=?$5968$4aEQL)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11014$4aEQL)
              (variable-transformer? . g$variable-transformer?$11013$4aEQL)
              (make-variable-transformer
                .
                g$make-variable-transformer$11012$4aEQL)
              (identifier? . g$identifier?$11188$4aEQL)
              (generate-temporaries . g$generate-temporaries$11177$4aEQL)
              (free-identifier=? . g$free-identifier=?$11178$4aEQL)
              (syntax->datum . g$syntax->datum$11190$4aEQL)
              (datum->syntax . g$datum->syntax$11189$4aEQL)
              (bound-identifier=? . g$bound-identifier=?$11179$4aEQL)
              (delete-file . g$delete-file$5496$4aEQL)
              (file-exists? . g$file-exists?$5495$4aEQL)
              (list-sort . g$list-sort$5887$4aEQL)
              (make-eqv-hashtable . g$make-eqv-hashtable$5478$4aEQL)
              (make-eq-hashtable . g$make-eq-hashtable$5477$4aEQL)
              (hashtable-update! . g$hashtable-update!$5484$4aEQL)
              (hashtable-size . g$hashtable-size$5479$4aEQL)
              (hashtable-set! . g$hashtable-set!$5481$4aEQL)
              (hashtable-ref . g$hashtable-ref$5480$4aEQL)
              (hashtable-delete! . g$hashtable-delete!$5482$4aEQL)
              (hashtable-contains? . g$hashtable-contains?$5483$4aEQL)
              (hashtable-clear! . g$hashtable-clear!$5485$4aEQL)
              (call-with-output-file . g$call-with-output-file$6305$4aEQL)
              (call-with-input-file . g$call-with-input-file$6304$4aEQL)
              (with-output-to-file . g$with-output-to-file$6303$4aEQL)
              (with-input-from-file . g$with-input-from-file$6302$4aEQL)
              (port? . g$port?$6268$4aEQL)
              (open-string-output-port . g$open-string-output-port$6267$4aEQL)
              (make-i/o-write-error . g$make-i/o-write-error$6187$4aEQL)
              (make-i/o-read-error . g$make-i/o-read-error$6181$4aEQL)
              (make-i/o-port-error . g$make-i/o-port-error$6233$4aEQL)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6193$4aEQL)
              (make-i/o-filename-error . g$make-i/o-filename-error$6201$4aEQL)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6209$4aEQL)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6215$4aEQL)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6227$4aEQL)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6221$4aEQL)
              (make-i/o-error . g$make-i/o-error$6175$4aEQL)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6247$4aEQL)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6241$4aEQL)
              (i/o-write-error? . g$i/o-write-error?$6188$4aEQL)
              (i/o-read-error? . g$i/o-read-error?$6182$4aEQL)
              (i/o-port-error? . g$i/o-port-error?$6235$4aEQL)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6195$4aEQL)
              (i/o-error-position . g$i/o-error-position$6196$4aEQL)
              (i/o-filename-error? . g$i/o-filename-error?$6203$4aEQL)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6210$4aEQL)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6216$4aEQL)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6228$4aEQL)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6222$4aEQL)
              (i/o-error? . g$i/o-error?$6176$4aEQL)
              (i/o-error-port . g$i/o-error-port$6236$4aEQL)
              (i/o-error-filename . g$i/o-error-filename$6204$4aEQL)
              (i/o-encoding-error? . g$i/o-encoding-error?$6249$4aEQL)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6250$4aEQL)
              (i/o-decoding-error? . g$i/o-decoding-error?$6242$4aEQL)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6269$4aEQL)
              (scheme-report-environment
                .
                g$scheme-report-environment$11168$4aEQL)
              (quotient . g$quotient$5854$4aEQL)
              (null-environment . g$null-environment$11167$4aEQL)
              (remainder . g$remainder$5855$4aEQL)
              (modulo . g$modulo$5856$4aEQL)
              (force . g$force$5858$4aEQL)
              (command-line . g$command-line$11236$4aEQL)
              (remove . g$remove$5053$4aEQL)
              (remv . g$remv$5054$4aEQL)
              (remp . g$remp$5034$4aEQL)
              (remq . g$remq$5055$4aEQL)
              (partition . g$partition$5033$4aEQL)
              (memv . g$memv$5041$4aEQL)
              (memq . g$memq$5040$4aEQL)
              (memp . g$memp$5043$4aEQL)
              (member . g$member$5042$4aEQL)
              (exists . g$exists$5047$4aEQL)
              (for-all . g$for-all$5046$4aEQL)
              (fold-right . g$fold-right$5052$4aEQL)
              (fold-left . g$fold-left$5051$4aEQL)
              (find . g$find$5032$4aEQL)
              (filter . g$filter$5035$4aEQL)
              (cons* . g$cons*$5050$4aEQL)
              (assv . g$assv$5037$4aEQL)
              (assq . g$assq$5036$4aEQL)
              (assp . g$assp$5039$4aEQL)
              (assoc . g$assoc$5038$4aEQL)
              (eval . g$eval$11170$4aEQL)
              (environment . g$environment$11166$4aEQL)
              (make-enumeration . g$make-enumeration$6437$4aEQL)
              (enum-set=? . g$enum-set=?$6444$4aEQL)
              (enum-set-universe . g$enum-set-universe$6438$4aEQL)
              (enum-set-union . g$enum-set-union$6445$4aEQL)
              (enum-set-subset? . g$enum-set-subset?$6443$4aEQL)
              (enum-set-projection . g$enum-set-projection$6449$4aEQL)
              (enum-set-member? . g$enum-set-member?$6442$4aEQL)
              (enum-set-intersection . g$enum-set-intersection$6446$4aEQL)
              (enum-set-indexer . g$enum-set-indexer$6439$4aEQL)
              (enum-set-difference . g$enum-set-difference$6447$4aEQL)
              (enum-set-constructor . g$enum-set-constructor$6440$4aEQL)
              (enum-set-complement . g$enum-set-complement$6448$4aEQL)
              (enum-set->list . g$enum-set->list$6441$4aEQL)
              (who-condition? . g$who-condition?$5792$4aEQL)
              (warning? . g$warning?$5753$4aEQL)
              (violation? . g$violation?$5771$4aEQL)
              (undefined-violation? . g$undefined-violation?$5827$4aEQL)
              (syntax-violation? . g$syntax-violation?$5819$4aEQL)
              (syntax-violation-subform . g$syntax-violation-subform$5821$4aEQL)
              (syntax-violation-form . g$syntax-violation-form$5820$4aEQL)
              (syntax-violation . g$syntax-violation$11187$4aEQL)
              (serious-condition? . g$serious-condition?$5759$4aEQL)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5799$4aEQL)
              (message-condition? . g$message-condition?$5746$4aEQL)
              (make-who-condition . g$make-who-condition$5790$4aEQL)
              (make-warning . g$make-warning$5752$4aEQL)
              (make-violation . g$make-violation$5770$4aEQL)
              (make-undefined-violation . g$make-undefined-violation$5826$4aEQL)
              (make-syntax-violation . g$make-syntax-violation$5816$4aEQL)
              (make-serious-condition . g$make-serious-condition$5758$4aEQL)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5798$4aEQL)
              (make-message-condition . g$make-message-condition$5744$4aEQL)
              (make-lexical-violation . g$make-lexical-violation$5810$4aEQL)
              (make-irritants-condition . g$make-irritants-condition$5782$4aEQL)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5804$4aEQL)
              (make-error . g$make-error$5764$4aEQL)
              (make-assertion-violation . g$make-assertion-violation$5776$4aEQL)
              (lexical-violation? . g$lexical-violation?$5811$4aEQL)
              (irritants-condition? . g$irritants-condition?$5784$4aEQL)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5805$4aEQL)
              (error? . g$error?$5765$4aEQL)
              (condition-who . g$condition-who$5793$4aEQL)
              (condition-message . g$condition-message$5747$4aEQL)
              (condition-irritants . g$condition-irritants$5785$4aEQL)
              (assertion-violation? . g$assertion-violation?$5777$4aEQL)
              (native-endianness . g$native-endianness$5609$4aEQL)
              (bytevector-u64-set! . g$bytevector-u64-set!$5630$4aEQL)
              (bytevector-u64-ref . g$bytevector-u64-ref$5626$4aEQL)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5632$4aEQL)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5628$4aEQL)
              (bytevector-u32-set! . g$bytevector-u32-set!$5622$4aEQL)
              (bytevector-u32-ref . g$bytevector-u32-ref$5618$4aEQL)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5624$4aEQL)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5620$4aEQL)
              (bytevector-u16-set! . g$bytevector-u16-set!$5614$4aEQL)
              (bytevector-u16-ref . g$bytevector-u16-ref$5610$4aEQL)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5616$4aEQL)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5612$4aEQL)
              (bytevector-s64-set! . g$bytevector-s64-set!$5631$4aEQL)
              (bytevector-s64-ref . g$bytevector-s64-ref$5627$4aEQL)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5633$4aEQL)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5629$4aEQL)
              (bytevector-s32-set! . g$bytevector-s32-set!$5623$4aEQL)
              (bytevector-s32-ref . g$bytevector-s32-ref$5619$4aEQL)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5625$4aEQL)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5621$4aEQL)
              (bytevector-s16-set! . g$bytevector-s16-set!$5615$4aEQL)
              (bytevector-s16-ref . g$bytevector-s16-ref$5611$4aEQL)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5617$4aEQL)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5613$4aEQL)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5636$4aEQL)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5634$4aEQL)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5637$4aEQL)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5635$4aEQL)
              (no-nans-violation? . g$no-nans-violation?$6090$4aEQL)
              (no-infinities-violation? . g$no-infinities-violation?$6084$4aEQL)
              (make-no-nans-violation . g$make-no-nans-violation$6089$4aEQL)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6083$4aEQL)
              (fxrotate-bit-field . g$fxrotate-bit-field$6066$4aEQL)
              (fxif . g$fxif$6060$4aEQL)
              (fxcopy-bit-field . g$fxcopy-bit-field$6063$4aEQL)
              (fxcopy-bit . g$fxcopy-bit$6061$4aEQL)
              (fxbit-field . g$fxbit-field$6062$4aEQL)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6065$4aEQL)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6064$4aEQL)
              (fx-/carry . g$fx-/carry$6058$4aEQL)
              (fx+/carry . g$fx+/carry$6059$4aEQL)
              (fx*/carry . g$fx*/carry$6057$4aEQL)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$6007$4aEQL)
              (bitwise-if . g$bitwise-if$6001$4aEQL)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6004$4aEQL)
              (bitwise-copy-bit . g$bitwise-copy-bit$6002$4aEQL)
              (bitwise-bit-field . g$bitwise-bit-field$6003$4aEQL)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6006$4aEQL)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6005$4aEQL)
              (symbol=? . g$symbol=?$5244$4aEQL)
              (string>? . g$string>?$5241$4aEQL)
              (string>=? . g$string>=?$5243$4aEQL)
              (string=? . g$string=?$5239$4aEQL)
              (string<? . g$string<?$5240$4aEQL)
              (string<=? . g$string<=?$5242$4aEQL)
              (rationalize . g$rationalize$5251$4aEQL)
              (map . g$map$5048$4aEQL)
              (list-tail . g$list-tail$5028$4aEQL)
              (list-ref . g$list-ref$5029$4aEQL)
              (for-each . g$for-each$5049$4aEQL)
              (char>? . g$char>?$5248$4aEQL)
              (char>=? . g$char>=?$5250$4aEQL)
              (char=? . g$char=?$5246$4aEQL)
              (char<? . g$char<?$5247$4aEQL)
              (char<=? . g$char<=?$5249$4aEQL)
              (cddddr . g$cddddr$5238$4aEQL)
              (cdddar . g$cdddar$5237$4aEQL)
              (cddadr . g$cddadr$5236$4aEQL)
              (cddaar . g$cddaar$5235$4aEQL)
              (cdaddr . g$cdaddr$5234$4aEQL)
              (cdadar . g$cdadar$5233$4aEQL)
              (cdaadr . g$cdaadr$5232$4aEQL)
              (cdaaar . g$cdaaar$5231$4aEQL)
              (cadddr . g$cadddr$5230$4aEQL)
              (caddar . g$caddar$5229$4aEQL)
              (cadadr . g$cadadr$5228$4aEQL)
              (cadaar . g$cadaar$5227$4aEQL)
              (caaddr . g$caaddr$5226$4aEQL)
              (caadar . g$caadar$5225$4aEQL)
              (caaadr . g$caaadr$5224$4aEQL)
              (caaaar . g$caaaar$5223$4aEQL)
              (cdddr . g$cdddr$5222$4aEQL)
              (cddar . g$cddar$5221$4aEQL)
              (cdadr . g$cdadr$5220$4aEQL)
              (cdaar . g$cdaar$5219$4aEQL)
              (caddr . g$caddr$5218$4aEQL)
              (cadar . g$cadar$5217$4aEQL)
              (caadr . g$caadr$5216$4aEQL)
              (caaar . g$caaar$5215$4aEQL)
              (cddr . g$cddr$5214$4aEQL)
              (cdar . g$cdar$5213$4aEQL)
              (cadr . g$cadr$5212$4aEQL)
              (caar . g$caar$5211$4aEQL)
              (boolean=? . g$boolean=?$5245$4aEQL)
              (enum-set? . g$enum?$6418$4aEQL)
              (make-promise . g$make-promise$5857$4aEQL)
              (load/args . g$load/args$11238$4aEQL)
              (printf . g$printf$6473$4aEQL)
              (fprintf . g$fprintf$6474$4aEQL)
              (format . g$format$6475$4aEQL)
              (trace-printer . g$trace-printer$11235$4aEQL)
              (make-traced-macro . g$make-traced-macro$6479$4aEQL)
              (assertion-error . g$assertion-error$11183$4aEQL)
              (make-parameter . g$make-parameter$6579$4aEQL)
              (environment-bindings . g$environment-bindings$11162$4aEQL)
              (environment-symbols . g$environment-symbols$11165$4aEQL)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11161$4aEQL)
              (library-path . g$library-path$7099$4aEQL)
              (expand . g$expand$11169$4aEQL)))))))
    (g$install-library$7115$4aEQL
      'g$12445$4aEQL
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12382$4aEQL)
        (cosh . g$12381$4aEQL)
        (sinh . g$12380$4aEQL)
        (make-guid . g$12379$4aEQL)
        (unspecified? . g$12378$4aEQL)
        (make-trace . g$12377$4aEQL)
        (make-list . g$5840$4aEQL)
        (last-pair . g$5839$4aEQL)
        (load-r5rs . g$12376$4aEQL)
        (license . g$12375$4aEQL)
        (stacktrace . g$12374$4aEQL)
        (ironscheme-build . g$11808$4aEQL)
        (set-symbol-value! . g$12361$4aEQL)
        (symbol-value . g$12360$4aEQL)
        (ungensym . g$12359$4aEQL)
        (gensym . g$12358$4aEQL)
        (void . g$12357$4aEQL)
        (compile-system-libraries . g$11810$4aEQL)
        (compile->closure . g$11812$4aEQL)
        (compile . g$11811$4aEQL)
        (load . g$11807$4aEQL)
        (interaction-environment . g$8835$4aEQL)
        (string-upcase . g$12353$4aEQL)
        (string-titlecase . g$12352$4aEQL)
        (string-normalize-nfkd . g$12351$4aEQL)
        (string-normalize-nfkc . g$12350$4aEQL)
        (string-normalize-nfd . g$12349$4aEQL)
        (string-normalize-nfc . g$12348$4aEQL)
        (string-foldcase . g$12347$4aEQL)
        (string-downcase . g$12346$4aEQL)
        (string-ci>? . g$6940$4aEQL)
        (string-ci>=? . g$6942$4aEQL)
        (string-ci=? . g$6938$4aEQL)
        (string-ci<? . g$6939$4aEQL)
        (string-ci<=? . g$6941$4aEQL)
        (char-whitespace? . g$12345$4aEQL)
        (char-upper-case? . g$12344$4aEQL)
        (char-title-case? . g$12343$4aEQL)
        (char-numeric? . g$12342$4aEQL)
        (char-lower-case? . g$12341$4aEQL)
        (char-general-category . g$12340$4aEQL)
        (char-upcase . g$12339$4aEQL)
        (char-titlecase . g$12338$4aEQL)
        (char-foldcase . g$12337$4aEQL)
        (char-downcase . g$12336$4aEQL)
        (char-ci>? . g$6979$4aEQL)
        (char-ci>=? . g$6981$4aEQL)
        (char-ci=? . g$6977$4aEQL)
        (char-ci<? . g$6978$4aEQL)
        (char-ci<=? . g$6980$4aEQL)
        (char-alphabetic? . g$12335$4aEQL)
        (make-variable-transformer . g$8432$4aEQL)
        (identifier? . g$8830$4aEQL)
        (generate-temporaries . g$8819$4aEQL)
        (free-identifier=? . g$8820$4aEQL)
        (syntax->datum . g$8832$4aEQL)
        (datum->syntax . g$8831$4aEQL)
        (bound-identifier=? . g$8821$4aEQL)
        (record-type-descriptor? . g$12334$4aEQL)
        (record-predicate . g$12333$4aEQL)
        (record-mutator . g$12332$4aEQL)
        (record-constructor . g$12331$4aEQL)
        (record-accessor . g$12330$4aEQL)
        (make-record-type-descriptor . g$12329$4aEQL)
        (make-record-constructor-descriptor . g$12328$4aEQL)
        (record? . g$12327$4aEQL)
        (record-type-uid . g$12326$4aEQL)
        (record-type-sealed? . g$12325$4aEQL)
        (record-type-parent . g$12324$4aEQL)
        (record-type-opaque? . g$12323$4aEQL)
        (record-type-name . g$12322$4aEQL)
        (record-type-generative? . g$12321$4aEQL)
        (record-type-field-names . g$12320$4aEQL)
        (record-rtd . g$12319$4aEQL)
        (record-field-mutable? . g$12318$4aEQL)
        (delete-file . g$6516$4aEQL)
        (file-exists? . g$6515$4aEQL)
        (vector-sort! . g$12317$4aEQL)
        (vector-sort . g$12316$4aEQL)
        (list-sort . g$6880$4aEQL)
        (symbol-hash . g$12315$4aEQL)
        (string-ci-hash . g$12314$4aEQL)
        (string-hash . g$12313$4aEQL)
        (equal-hash . g$12312$4aEQL)
        (hashtable-equivalence-function . g$12311$4aEQL)
        (make-hashtable . g$12310$4aEQL)
        (hashtable-hash-function . g$12309$4aEQL)
        (make-eqv-hashtable . g$6484$4aEQL)
        (make-eq-hashtable . g$6483$4aEQL)
        (hashtable? . g$12308$4aEQL)
        (hashtable-update! . g$6490$4aEQL)
        (hashtable-size . g$6485$4aEQL)
        (hashtable-set! . g$6487$4aEQL)
        (hashtable-ref . g$6486$4aEQL)
        (hashtable-mutable? . g$12307$4aEQL)
        (hashtable-keys . g$12306$4aEQL)
        (hashtable-entries . g$12305$4aEQL)
        (hashtable-delete! . g$6488$4aEQL)
        (hashtable-copy . g$12304$4aEQL)
        (hashtable-contains? . g$6489$4aEQL)
        (hashtable-clear! . g$6491$4aEQL)
        (call-with-output-file . g$7358$4aEQL)
        (call-with-input-file . g$7357$4aEQL)
        (write-char . g$12303$4aEQL)
        (write . g$12302$4aEQL)
        (with-output-to-file . g$7356$4aEQL)
        (with-input-from-file . g$7355$4aEQL)
        (read-char . g$12301$4aEQL)
        (read . g$12300$4aEQL)
        (peek-char . g$12299$4aEQL)
        (open-output-file . g$12298$4aEQL)
        (open-input-file . g$12297$4aEQL)
        (newline . g$12296$4aEQL)
        (display . g$12295$4aEQL)
        (close-output-port . g$12294$4aEQL)
        (close-input-port . g$12293$4aEQL)
        (eof-object? . g$12292$4aEQL)
        (eof-object . g$12291$4aEQL)
        (current-error-port . g$12290$4aEQL)
        (current-output-port . g$12289$4aEQL)
        (current-input-port . g$12288$4aEQL)
        (output-port? . g$12287$4aEQL)
        (input-port? . g$12286$4aEQL)
        (utf-8-codec . g$12285$4aEQL)
        (utf-16-codec . g$12284$4aEQL)
        (transcoder-error-handling-mode . g$12283$4aEQL)
        (transcoder-eol-style . g$12282$4aEQL)
        (transcoder-codec . g$12281$4aEQL)
        (transcoded-port . g$12280$4aEQL)
        (textual-port? . g$12279$4aEQL)
        (string->bytevector . g$12278$4aEQL)
        (standard-output-port . g$12277$4aEQL)
        (standard-input-port . g$12276$4aEQL)
        (standard-error-port . g$12275$4aEQL)
        (set-port-position! . g$12274$4aEQL)
        (put-u8 . g$12273$4aEQL)
        (put-string . g$12272$4aEQL)
        (put-datum . g$12271$4aEQL)
        (put-char . g$12270$4aEQL)
        (put-bytevector . g$12269$4aEQL)
        (port? . g$7331$4aEQL)
        (port-transcoder . g$12268$4aEQL)
        (port-position . g$12267$4aEQL)
        (port-has-set-port-position!? . g$12266$4aEQL)
        (port-has-port-position? . g$12265$4aEQL)
        (port-eof? . g$12264$4aEQL)
        (output-port-buffer-mode . g$12263$4aEQL)
        (open-string-output-port . g$7330$4aEQL)
        (open-string-input-port . g$12262$4aEQL)
        (open-file-output-port . g$12261$4aEQL)
        (open-file-input/output-port . g$12260$4aEQL)
        (open-file-input-port . g$12259$4aEQL)
        (open-bytevector-output-port . g$12258$4aEQL)
        (open-bytevector-input-port . g$12257$4aEQL)
        (native-transcoder . g$12256$4aEQL)
        (native-eol-style . g$12255$4aEQL)
        (make-transcoder . g$12254$4aEQL)
        (latin-1-codec . g$12253$4aEQL)
        (make-i/o-write-error . g$7186$4aEQL)
        (make-i/o-read-error . g$7172$4aEQL)
        (make-i/o-port-error . g$7291$4aEQL)
        (make-i/o-invalid-position-error . g$7201$4aEQL)
        (make-i/o-filename-error . g$7218$4aEQL)
        (make-i/o-file-protection-error . g$7234$4aEQL)
        (make-i/o-file-is-read-only-error . g$7248$4aEQL)
        (make-i/o-file-does-not-exist-error . g$7276$4aEQL)
        (make-i/o-file-already-exists-error . g$7262$4aEQL)
        (make-i/o-error . g$7158$4aEQL)
        (make-i/o-encoding-error . g$7322$4aEQL)
        (make-i/o-decoding-error . g$7307$4aEQL)
        (make-custom-textual-output-port . g$12252$4aEQL)
        (make-custom-textual-input/output-port . g$12251$4aEQL)
        (make-custom-textual-input-port . g$12250$4aEQL)
        (make-custom-binary-output-port . g$12249$4aEQL)
        (make-custom-binary-input/output-port . g$12248$4aEQL)
        (make-custom-binary-input-port . g$12247$4aEQL)
        (make-bytevector . g$12246$4aEQL)
        (lookahead-u8 . g$12245$4aEQL)
        (lookahead-char . g$12244$4aEQL)
        (i/o-write-error? . g$7187$4aEQL)
        (i/o-read-error? . g$7173$4aEQL)
        (i/o-port-error? . g$7293$4aEQL)
        (i/o-invalid-position-error? . g$7203$4aEQL)
        (i/o-error-position . g$7204$4aEQL)
        (i/o-filename-error? . g$7220$4aEQL)
        (i/o-file-protection-error? . g$7235$4aEQL)
        (i/o-file-is-read-only-error? . g$7249$4aEQL)
        (i/o-file-does-not-exist-error? . g$7277$4aEQL)
        (i/o-file-already-exists-error? . g$7263$4aEQL)
        (i/o-error? . g$7159$4aEQL)
        (i/o-error-port . g$7294$4aEQL)
        (i/o-error-filename . g$7221$4aEQL)
        (i/o-encoding-error? . g$7324$4aEQL)
        (i/o-encoding-error-char . g$7325$4aEQL)
        (i/o-decoding-error? . g$7308$4aEQL)
        (get-u8 . g$12243$4aEQL)
        (get-string-n! . g$12242$4aEQL)
        (get-string-n . g$12241$4aEQL)
        (get-string-all . g$12240$4aEQL)
        (get-line . g$12239$4aEQL)
        (get-datum . g$12238$4aEQL)
        (get-char . g$12237$4aEQL)
        (get-bytevector-some . g$12236$4aEQL)
        (get-bytevector-n! . g$12235$4aEQL)
        (get-bytevector-n . g$12234$4aEQL)
        (get-bytevector-all . g$12233$4aEQL)
        (flush-output-port . g$12232$4aEQL)
        (close-port . g$12231$4aEQL)
        (call-with-string-output-port . g$7332$4aEQL)
        (call-with-port . g$12230$4aEQL)
        (call-with-bytevector-output-port . g$12229$4aEQL)
        (bytevector->string . g$12228$4aEQL)
        (buffer-mode? . g$12227$4aEQL)
        (binary-port? . g$12226$4aEQL)
        (scheme-report-environment . g$8810$4aEQL)
        (quotient . g$6859$4aEQL)
        (null-environment . g$8809$4aEQL)
        (remainder . g$6860$4aEQL)
        (modulo . g$6861$4aEQL)
        (inexact->exact . g$12225$4aEQL)
        (force . g$6863$4aEQL)
        (exact->inexact . g$12224$4aEQL)
        (exit . g$12223$4aEQL)
        (command-line . g$11804$4aEQL)
        (string-fill! . g$12222$4aEQL)
        (string-set! . g$12221$4aEQL)
        (set-cdr! . g$12220$4aEQL)
        (set-car! . g$12219$4aEQL)
        (remove . g$5862$4aEQL)
        (remv . g$5863$4aEQL)
        (remp . g$5843$4aEQL)
        (remq . g$5864$4aEQL)
        (partition . g$5842$4aEQL)
        (memv . g$5850$4aEQL)
        (memq . g$5849$4aEQL)
        (memp . g$5852$4aEQL)
        (member . g$5851$4aEQL)
        (exists . g$5856$4aEQL)
        (for-all . g$5855$4aEQL)
        (fold-right . g$5861$4aEQL)
        (fold-left . g$5860$4aEQL)
        (find . g$5841$4aEQL)
        (filter . g$5844$4aEQL)
        (cons* . g$5859$4aEQL)
        (assv . g$5846$4aEQL)
        (assq . g$5845$4aEQL)
        (assp . g$5848$4aEQL)
        (assoc . g$5847$4aEQL)
        (with-exception-handler . g$12218$4aEQL)
        (raise-continuable . g$12217$4aEQL)
        (raise . g$12216$4aEQL)
        (eval . g$8812$4aEQL)
        (environment . g$8808$4aEQL)
        (make-enumeration . g$7416$4aEQL)
        (enum-set=? . g$7423$4aEQL)
        (enum-set-universe . g$7417$4aEQL)
        (enum-set-union . g$7424$4aEQL)
        (enum-set-subset? . g$7422$4aEQL)
        (enum-set-projection . g$7428$4aEQL)
        (enum-set-member? . g$7421$4aEQL)
        (enum-set-intersection . g$7425$4aEQL)
        (enum-set-indexer . g$7418$4aEQL)
        (enum-set-difference . g$7426$4aEQL)
        (enum-set-constructor . g$7419$4aEQL)
        (enum-set-complement . g$7427$4aEQL)
        (enum-set->list . g$7420$4aEQL)
        (who-condition? . g$6770$4aEQL)
        (warning? . g$6681$4aEQL)
        (violation? . g$6723$4aEQL)
        (undefined-violation? . g$6847$4aEQL)
        (syntax-violation? . g$6831$4aEQL)
        (syntax-violation-subform . g$6833$4aEQL)
        (syntax-violation-form . g$6832$4aEQL)
        (syntax-violation . g$8829$4aEQL)
        (simple-conditions . g$12215$4aEQL)
        (serious-condition? . g$6695$4aEQL)
        (non-continuable-violation? . g$6785$4aEQL)
        (message-condition? . g$6666$4aEQL)
        (make-who-condition . g$6768$4aEQL)
        (make-warning . g$6680$4aEQL)
        (make-violation . g$6722$4aEQL)
        (make-undefined-violation . g$6846$4aEQL)
        (make-syntax-violation . g$6828$4aEQL)
        (make-serious-condition . g$6694$4aEQL)
        (make-non-continuable-violation . g$6784$4aEQL)
        (make-message-condition . g$6664$4aEQL)
        (make-lexical-violation . g$6812$4aEQL)
        (make-irritants-condition . g$6751$4aEQL)
        (make-implementation-restriction-violation . g$6798$4aEQL)
        (make-error . g$6708$4aEQL)
        (make-assertion-violation . g$6736$4aEQL)
        (lexical-violation? . g$6813$4aEQL)
        (irritants-condition? . g$6753$4aEQL)
        (implementation-restriction-violation? . g$6799$4aEQL)
        (error? . g$6709$4aEQL)
        (condition-who . g$6771$4aEQL)
        (condition-predicate . g$12214$4aEQL)
        (condition-message . g$6667$4aEQL)
        (condition-irritants . g$6754$4aEQL)
        (condition-accessor . g$12213$4aEQL)
        (condition . g$12212$4aEQL)
        (assertion-violation? . g$6737$4aEQL)
        (condition? . g$12211$4aEQL)
        (utf32->string . g$12210$4aEQL)
        (utf16->string . g$12209$4aEQL)
        (utf8->string . g$12208$4aEQL)
        (uint-list->bytevector . g$12207$4aEQL)
        (u8-list->bytevector . g$12206$4aEQL)
        (string->utf8 . g$12205$4aEQL)
        (string->utf32 . g$12204$4aEQL)
        (string->utf16 . g$12203$4aEQL)
        (sint-list->bytevector . g$12202$4aEQL)
        (native-endianness . g$6522$4aEQL)
        (bytevector? . g$12201$4aEQL)
        (bytevector=? . g$12200$4aEQL)
        (bytevector-uint-set! . g$12199$4aEQL)
        (bytevector-uint-ref . g$12198$4aEQL)
        (bytevector-u8-set! . g$12197$4aEQL)
        (bytevector-u8-ref . g$12196$4aEQL)
        (bytevector-u64-set! . g$6543$4aEQL)
        (bytevector-u64-ref . g$6539$4aEQL)
        (bytevector-u64-native-set! . g$6545$4aEQL)
        (bytevector-u64-native-ref . g$6541$4aEQL)
        (bytevector-u32-set! . g$6535$4aEQL)
        (bytevector-u32-ref . g$6531$4aEQL)
        (bytevector-u32-native-set! . g$6537$4aEQL)
        (bytevector-u32-native-ref . g$6533$4aEQL)
        (bytevector-u16-set! . g$6527$4aEQL)
        (bytevector-u16-ref . g$6523$4aEQL)
        (bytevector-u16-native-set! . g$6529$4aEQL)
        (bytevector-u16-native-ref . g$6525$4aEQL)
        (bytevector-sint-set! . g$12195$4aEQL)
        (bytevector-sint-ref . g$12194$4aEQL)
        (bytevector-s8-set! . g$12193$4aEQL)
        (bytevector-s8-ref . g$12192$4aEQL)
        (bytevector-s64-set! . g$6544$4aEQL)
        (bytevector-s64-ref . g$6540$4aEQL)
        (bytevector-s64-native-set! . g$6546$4aEQL)
        (bytevector-s64-native-ref . g$6542$4aEQL)
        (bytevector-s32-set! . g$6536$4aEQL)
        (bytevector-s32-ref . g$6532$4aEQL)
        (bytevector-s32-native-set! . g$6538$4aEQL)
        (bytevector-s32-native-ref . g$6534$4aEQL)
        (bytevector-s16-set! . g$6528$4aEQL)
        (bytevector-s16-ref . g$6524$4aEQL)
        (bytevector-s16-native-set! . g$6530$4aEQL)
        (bytevector-s16-native-ref . g$6526$4aEQL)
        (bytevector-length . g$12191$4aEQL)
        (bytevector-ieee-single-set! . g$12190$4aEQL)
        (bytevector-ieee-single-ref . g$12189$4aEQL)
        (bytevector-ieee-single-native-set! . g$6549$4aEQL)
        (bytevector-ieee-single-native-ref . g$6547$4aEQL)
        (bytevector-ieee-double-set! . g$12188$4aEQL)
        (bytevector-ieee-double-ref . g$12187$4aEQL)
        (bytevector-ieee-double-native-set! . g$6550$4aEQL)
        (bytevector-ieee-double-native-ref . g$6548$4aEQL)
        (bytevector-fill! . g$12186$4aEQL)
        (bytevector-copy! . g$12185$4aEQL)
        (bytevector-copy . g$12184$4aEQL)
        (bytevector->uint-list . g$12183$4aEQL)
        (bytevector->u8-list . g$12182$4aEQL)
        (bytevector->sint-list . g$12181$4aEQL)
        (no-nans-violation? . g$7144$4aEQL)
        (no-infinities-violation? . g$7130$4aEQL)
        (make-no-nans-violation . g$7143$4aEQL)
        (make-no-infinities-violation . g$7129$4aEQL)
        (real->flonum . g$12180$4aEQL)
        (flzero? . g$12179$4aEQL)
        (fltruncate . g$12178$4aEQL)
        (fltan . g$12177$4aEQL)
        (flsqrt . g$12176$4aEQL)
        (flsin . g$12175$4aEQL)
        (flround . g$12174$4aEQL)
        (flpositive? . g$12173$4aEQL)
        (flonum? . g$12172$4aEQL)
        (flodd? . g$12171$4aEQL)
        (flnumerator . g$12170$4aEQL)
        (flnegative? . g$12169$4aEQL)
        (flnan? . g$12168$4aEQL)
        (flmod0 . g$12167$4aEQL)
        (flmod . g$12166$4aEQL)
        (flmin . g$12165$4aEQL)
        (flmax . g$12164$4aEQL)
        (fllog . g$12163$4aEQL)
        (flinteger? . g$12162$4aEQL)
        (flinfinite? . g$12161$4aEQL)
        (flfloor . g$12160$4aEQL)
        (flfinite? . g$12159$4aEQL)
        (flexpt . g$12158$4aEQL)
        (flexp . g$12157$4aEQL)
        (fleven? . g$12156$4aEQL)
        (fldiv0-and-mod0 . g$12155$4aEQL)
        (fldiv0 . g$12154$4aEQL)
        (fldiv-and-mod . g$12153$4aEQL)
        (fldiv . g$12152$4aEQL)
        (fldenominator . g$12151$4aEQL)
        (flcos . g$12150$4aEQL)
        (flceiling . g$12149$4aEQL)
        (flatan . g$12148$4aEQL)
        (flasin . g$12147$4aEQL)
        (flacos . g$12146$4aEQL)
        (flabs . g$12145$4aEQL)
        (fl>? . g$12144$4aEQL)
        (fl>=? . g$12143$4aEQL)
        (fl=? . g$12142$4aEQL)
        (fl<? . g$12141$4aEQL)
        (fl<=? . g$12140$4aEQL)
        (fl/ . g$12139$4aEQL)
        (fl- . g$12138$4aEQL)
        (fl+ . g$12137$4aEQL)
        (fl* . g$12136$4aEQL)
        (fixnum->flonum . g$12135$4aEQL)
        (fxzero? . g$12134$4aEQL)
        (fxxor . g$12133$4aEQL)
        (fxrotate-bit-field . g$7076$4aEQL)
        (fxreverse-bit-field . g$12132$4aEQL)
        (fxpositive? . g$12131$4aEQL)
        (fxodd? . g$12130$4aEQL)
        (fxnot . g$12129$4aEQL)
        (fxnegative? . g$12128$4aEQL)
        (fxmod0 . g$12127$4aEQL)
        (fxmod . g$12126$4aEQL)
        (fxmin . g$12125$4aEQL)
        (fxmax . g$12124$4aEQL)
        (fxlength . g$12123$4aEQL)
        (fxior . g$12122$4aEQL)
        (fxif . g$7070$4aEQL)
        (fxfirst-bit-set . g$12121$4aEQL)
        (fxeven? . g$12120$4aEQL)
        (fxdiv0-and-mod0 . g$12119$4aEQL)
        (fxdiv0 . g$12118$4aEQL)
        (fxdiv-and-mod . g$12117$4aEQL)
        (fxdiv . g$12116$4aEQL)
        (fxcopy-bit-field . g$7073$4aEQL)
        (fxcopy-bit . g$7071$4aEQL)
        (fxbit-set? . g$12115$4aEQL)
        (fxbit-field . g$7072$4aEQL)
        (fxbit-count . g$12114$4aEQL)
        (fxarithmetic-shift-right . g$7075$4aEQL)
        (fxarithmetic-shift-left . g$7074$4aEQL)
        (fxarithmetic-shift . g$12113$4aEQL)
        (fxand . g$12112$4aEQL)
        (fx>? . g$12111$4aEQL)
        (fx>=? . g$12110$4aEQL)
        (fx=? . g$12109$4aEQL)
        (fx<? . g$12108$4aEQL)
        (fx<=? . g$12107$4aEQL)
        (fx-/carry . g$7068$4aEQL)
        (fx- . g$12106$4aEQL)
        (fx+/carry . g$7069$4aEQL)
        (fx+ . g$12105$4aEQL)
        (fx*/carry . g$7067$4aEQL)
        (fx* . g$12104$4aEQL)
        (greatest-fixnum . g$12103$4aEQL)
        (least-fixnum . g$12102$4aEQL)
        (fixnum-width . g$12101$4aEQL)
        (fixnum? . g$12100$4aEQL)
        (bitwise-rotate-bit-field . g$7041$4aEQL)
        (bitwise-reverse-bit-field . g$12099$4aEQL)
        (bitwise-length . g$12098$4aEQL)
        (bitwise-if . g$7035$4aEQL)
        (bitwise-first-bit-set . g$12097$4aEQL)
        (bitwise-copy-bit-field . g$7038$4aEQL)
        (bitwise-copy-bit . g$7036$4aEQL)
        (bitwise-bit-set? . g$12096$4aEQL)
        (bitwise-bit-field . g$7037$4aEQL)
        (bitwise-bit-count . g$12095$4aEQL)
        (bitwise-xor . g$12094$4aEQL)
        (bitwise-ior . g$12093$4aEQL)
        (bitwise-and . g$12092$4aEQL)
        (bitwise-not . g$12091$4aEQL)
        (bitwise-arithmetic-shift-right . g$7040$4aEQL)
        (bitwise-arithmetic-shift-left . g$7039$4aEQL)
        (bitwise-arithmetic-shift . g$12090$4aEQL)
        (zero? . g$12089$4aEQL)
        (vector? . g$12088$4aEQL)
        (vector-set! . g$12087$4aEQL)
        (vector-ref . g$12086$4aEQL)
        (vector-map . g$12085$4aEQL)
        (vector-length . g$12084$4aEQL)
        (vector-for-each . g$12083$4aEQL)
        (vector-fill! . g$12082$4aEQL)
        (vector->list . g$12081$4aEQL)
        (vector . g$12080$4aEQL)
        (values . g$12079$4aEQL)
        (truncate . g$12078$4aEQL)
        (tan . g$12077$4aEQL)
        (symbol? . g$12076$4aEQL)
        (symbol=? . g$6042$4aEQL)
        (symbol->string . g$12075$4aEQL)
        (substring . g$12074$4aEQL)
        (string? . g$12073$4aEQL)
        (string>? . g$6039$4aEQL)
        (string>=? . g$6041$4aEQL)
        (string=? . g$6037$4aEQL)
        (string<? . g$6038$4aEQL)
        (string<=? . g$6040$4aEQL)
        (string-ref . g$12072$4aEQL)
        (string-length . g$12071$4aEQL)
        (string-for-each . g$12070$4aEQL)
        (string-copy . g$12069$4aEQL)
        (string-append . g$12068$4aEQL)
        (string->symbol . g$12067$4aEQL)
        (string->number . g$12066$4aEQL)
        (string->list . g$12065$4aEQL)
        (string . g$12064$4aEQL)
        (sqrt . g$12063$4aEQL)
        (sin . g$12062$4aEQL)
        (round . g$12061$4aEQL)
        (reverse . g$12060$4aEQL)
        (real? . g$12059$4aEQL)
        (real-valued? . g$12058$4aEQL)
        (real-part . g$12057$4aEQL)
        (rationalize . g$6083$4aEQL)
        (rational? . g$12056$4aEQL)
        (rational-valued? . g$12055$4aEQL)
        (procedure? . g$12054$4aEQL)
        (positive? . g$12053$4aEQL)
        (pair? . g$12052$4aEQL)
        (odd? . g$12051$4aEQL)
        (numerator . g$12050$4aEQL)
        (number? . g$12049$4aEQL)
        (number->string . g$12048$4aEQL)
        (null? . g$12047$4aEQL)
        (not . g$12046$4aEQL)
        (negative? . g$12045$4aEQL)
        (nan? . g$12044$4aEQL)
        (min . g$12043$4aEQL)
        (max . g$12042$4aEQL)
        (map . g$5857$4aEQL)
        (make-vector . g$12041$4aEQL)
        (make-string . g$12040$4aEQL)
        (make-rectangular . g$12039$4aEQL)
        (make-polar . g$12038$4aEQL)
        (magnitude . g$12037$4aEQL)
        (log . g$12036$4aEQL)
        (list? . g$12035$4aEQL)
        (list-tail . g$5837$4aEQL)
        (list-ref . g$5838$4aEQL)
        (list->vector . g$12034$4aEQL)
        (list->string . g$12033$4aEQL)
        (list . g$12032$4aEQL)
        (length . g$12031$4aEQL)
        (lcm . g$12030$4aEQL)
        (integer? . g$12029$4aEQL)
        (integer-valued? . g$12028$4aEQL)
        (integer->char . g$12027$4aEQL)
        (infinite? . g$12026$4aEQL)
        (inexact? . g$12025$4aEQL)
        (inexact . g$12024$4aEQL)
        (imag-part . g$12023$4aEQL)
        (gcd . g$12022$4aEQL)
        (for-each . g$5858$4aEQL)
        (floor . g$12021$4aEQL)
        (finite? . g$12020$4aEQL)
        (expt . g$12019$4aEQL)
        (exp . g$12018$4aEQL)
        (exact? . g$12017$4aEQL)
        (exact-integer-sqrt . g$12016$4aEQL)
        (exact . g$12015$4aEQL)
        (even? . g$12014$4aEQL)
        (error . g$12013$4aEQL)
        (eqv? . g$12012$4aEQL)
        (equal? . g$12011$4aEQL)
        (eq? . g$12010$4aEQL)
        (dynamic-wind . g$12009$4aEQL)
        (div0-and-mod0 . g$12008$4aEQL)
        (mod0 . g$12007$4aEQL)
        (div0 . g$12006$4aEQL)
        (div-and-mod . g$12005$4aEQL)
        (mod . g$12004$4aEQL)
        (div . g$12003$4aEQL)
        (denominator . g$12002$4aEQL)
        (cos . g$12001$4aEQL)
        (cons . g$12000$4aEQL)
        (complex? . g$11999$4aEQL)
        (char? . g$11998$4aEQL)
        (char>? . g$6080$4aEQL)
        (char>=? . g$6082$4aEQL)
        (char=? . g$6078$4aEQL)
        (char<? . g$6079$4aEQL)
        (char<=? . g$6081$4aEQL)
        (char->integer . g$11997$4aEQL)
        (ceiling . g$11996$4aEQL)
        (call-with-values . g$11995$4aEQL)
        (call/cc . g$11994$4aEQL)
        (call-with-current-continuation . g$11993$4aEQL)
        (cddddr . g$6002$4aEQL)
        (cdddar . g$6001$4aEQL)
        (cddadr . g$6000$4aEQL)
        (cddaar . g$5999$4aEQL)
        (cdaddr . g$5998$4aEQL)
        (cdadar . g$5997$4aEQL)
        (cdaadr . g$5996$4aEQL)
        (cdaaar . g$5995$4aEQL)
        (cadddr . g$5994$4aEQL)
        (caddar . g$5993$4aEQL)
        (cadadr . g$5992$4aEQL)
        (cadaar . g$5991$4aEQL)
        (caaddr . g$5990$4aEQL)
        (caadar . g$5989$4aEQL)
        (caaadr . g$5988$4aEQL)
        (caaaar . g$5987$4aEQL)
        (cdddr . g$5986$4aEQL)
        (cddar . g$5985$4aEQL)
        (cdadr . g$5984$4aEQL)
        (cdaar . g$5983$4aEQL)
        (caddr . g$5982$4aEQL)
        (cadar . g$5981$4aEQL)
        (caadr . g$5980$4aEQL)
        (caaar . g$5979$4aEQL)
        (cddr . g$5978$4aEQL)
        (cdar . g$5977$4aEQL)
        (cadr . g$5976$4aEQL)
        (caar . g$5975$4aEQL)
        (cdr . g$11992$4aEQL)
        (car . g$11991$4aEQL)
        (boolean? . g$11990$4aEQL)
        (boolean=? . g$6043$4aEQL)
        (atan . g$11989$4aEQL)
        (assertion-violation . g$11988$4aEQL)
        (asin . g$11987$4aEQL)
        (apply . g$11986$4aEQL)
        (append . g$11985$4aEQL)
        (angle . g$11984$4aEQL)
        (acos . g$11983$4aEQL)
        (abs . g$11982$4aEQL)
        (/ . g$11981$4aEQL)
        (* . g$11980$4aEQL)
        (- . g$11979$4aEQL)
        (+ . g$11978$4aEQL)
        (>= . g$11977$4aEQL)
        (> . g$11976$4aEQL)
        (= . g$11975$4aEQL)
        (<= . g$11974$4aEQL)
        (< . g$11973$4aEQL)
        (deserialize-port . g$11969$4aEQL)
        (serialize-port . g$11968$4aEQL)
        (enum-set? . g$7391$4aEQL)
        (load/args . g$11806$4aEQL)
        (printf . g$7502$4aEQL)
        (fprintf . g$7503$4aEQL)
        (format . g$7504$4aEQL)
        (procedure-form . g$11967$4aEQL)
        (procedure-environment . g$11966$4aEQL)
        (procedure-name . g$11965$4aEQL)
        (procedure-arity . g$11964$4aEQL)
        (gc-collect . g$11963$4aEQL)
        (clr-type? . g$11962$4aEQL)
        (get-clr-type . g$11961$4aEQL)
        (vector-append . g$11959$4aEQL)
        (vector-filter . g$11958$4aEQL)
        (vector-reverse! . g$11957$4aEQL)
        (vector-contains? . g$11956$4aEQL)
        (vector-index-of . g$11955$4aEQL)
        (vector-copy . g$11954$4aEQL)
        (vector-binary-search . g$11953$4aEQL)
        (string-ci-compare . g$11952$4aEQL)
        (string-compare . g$11951$4aEQL)
        (string-format . g$11950$4aEQL)
        (trace-printer . g$11803$4aEQL)
        (time-it . g$11948$4aEQL)
        (make-parameter . g$7531$4aEQL)
        (environment-bindings . g$8804$4aEQL)
        (environment-symbols . g$8807$4aEQL)
        (interaction-environment-symbols . g$8803$4aEQL)
        (optimization-level . g$11945$4aEQL)
        (library-path . g$7986$4aEQL)
        (expand . g$8811$4aEQL)
        (&no-nans . g$11944$4aEQL)
        (&no-infinities . g$11943$4aEQL)
        (&i/o-encoding . g$11942$4aEQL)
        (&i/o-decoding . g$11941$4aEQL)
        (&i/o-port . g$11940$4aEQL)
        (&i/o-file-does-not-exist . g$11939$4aEQL)
        (&i/o-file-already-exists . g$11938$4aEQL)
        (&i/o-file-is-read-only . g$11937$4aEQL)
        (&i/o-file-protection . g$11936$4aEQL)
        (&i/o-filename . g$11935$4aEQL)
        (&i/o-invalid-position . g$11934$4aEQL)
        (&i/o-write . g$11933$4aEQL)
        (&i/o-read . g$11932$4aEQL)
        (&i/o . g$11931$4aEQL)
        (&non-continuable . g$11930$4aEQL)
        (&undefined . g$11929$4aEQL)
        (&syntax . g$11928$4aEQL)
        (&lexical . g$11927$4aEQL)
        (&implementation-restriction . g$11926$4aEQL)
        (&who . g$11925$4aEQL)
        (&irritants . g$11924$4aEQL)
        (&assertion . g$11923$4aEQL)
        (&violation . g$11922$4aEQL)
        (&error . g$11921$4aEQL)
        (&serious . g$11920$4aEQL)
        (&warning . g$11919$4aEQL)
        (&message . g$11918$4aEQL)
        (&condition . g$11917$4aEQL)
        (define-condition-type . g$11916$4aEQL)
        (define-enumeration . g$11915$4aEQL)
        (define-record-type . g$11914$4aEQL)
        (parent-rtd . g$11913$4aEQL)
        (nongenerative . g$11912$4aEQL)
        (opaque . g$11911$4aEQL)
        (sealed . g$11910$4aEQL)
        (protocol . g$11909$4aEQL)
        (parent . g$11908$4aEQL)
        (immutable . g$11907$4aEQL)
        (mutable . g$11906$4aEQL)
        (fields . g$11905$4aEQL)
        (error-handling-mode . g$11904$4aEQL)
        (file-options . g$11903$4aEQL)
        (buffer-mode . g$11902$4aEQL)
        (eol-style . g$11901$4aEQL)
        (guard . g$11900$4aEQL)
        (trace-letrec-syntax . g$11899$4aEQL)
        (trace-let-syntax . g$11898$4aEQL)
        (trace-define-syntax . g$11897$4aEQL)
        (trace-define . g$11896$4aEQL)
        (trace-lambda . g$11895$4aEQL)
        (unsyntax-splicing . g$11894$4aEQL)
        (unsyntax . g$11893$4aEQL)
        (unquote-splicing . g$11892$4aEQL)
        (unquote . g$11891$4aEQL)
        (_ . g$11890$4aEQL)
        (else . g$11889$4aEQL)
        (=> . g$11888$4aEQL)
        (... . g$11887$4aEQL)
        (assert . g$11886$4aEQL)
        (endianness . g$11885$4aEQL)
        (delay . g$11884$4aEQL)
        (time . g$11883$4aEQL)
        (or . g$11882$4aEQL)
        (and . g$11881$4aEQL)
        (do . g$11880$4aEQL)
        (cond . g$11879$4aEQL)
        (let* . g$11878$4aEQL)
        (let . g$11877$4aEQL)
        (identifier-syntax . g$11876$4aEQL)
        (with-syntax . g$11875$4aEQL)
        (quasisyntax . g$11874$4aEQL)
        (quasiquote . g$11873$4aEQL)
        (syntax-rules . g$11872$4aEQL)
        (include-into . g$11871$4aEQL)
        (include . g$11870$4aEQL)
        (let-values . g$11868$4aEQL)
        (let*-values . g$11867$4aEQL)
        (record-constructor-descriptor . g$11866$4aEQL)
        (record-type-descriptor . g$11865$4aEQL)
        (fluid-let-syntax . g$11864$4aEQL)
        (case . g$11863$4aEQL)
        (parameterize . g$11862$4aEQL)
        (unless . g$11861$4aEQL)
        (when . g$11860$4aEQL)
        (if . g$11859$4aEQL)
        (letrec* . g$11858$4aEQL)
        (letrec . g$11857$4aEQL)
        (case-lambda . g$11855$4aEQL)
        (lambda . g$11854$4aEQL)
        (syntax . g$11853$4aEQL)
        (syntax-case . g$11852$4aEQL)
        (quote . g$11851$4aEQL)
        (letrec-syntax . g$11849$4aEQL)
        (let-syntax . g$11848$4aEQL)
        (set! . g$11847$4aEQL)
        (export . g$11846$4aEQL)
        (import . g$11845$4aEQL)
        (library . g$11844$4aEQL)
        (begin . g$11843$4aEQL)
        (module . g$11842$4aEQL)
        (define-syntax . g$11841$4aEQL)
        (define . g$11840$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12446$4aEQL
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11946$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7115$4aEQL
      'g$12447$4aEQL
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12387$4aEQL)
        (annotation-source . g$12386$4aEQL)
        (annotation-expression . g$12385$4aEQL)
        (annotation? . g$12384$4aEQL)
        (read-annotated . g$12383$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7115$4aEQL
      'g$12448$4aEQL
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12356$4aEQL)
        (serialize-library . g$12355$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7115$4aEQL
      'g$12449$4aEQL
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8434$4aEQL)
        (variable-transformer? . g$8433$4aEQL)
        (eqv-hash . g$11971$4aEQL)
        (reverse! . g$11970$4aEQL)
        (make-promise . g$6862$4aEQL)
        (format . g$7504$4aEQL)
        (get-command-line . g$11960$4aEQL)
        (make-traced-procedure . g$11949$4aEQL)
        (make-traced-macro . g$7524$4aEQL)
        (assertion-error . g$8825$4aEQL)
        (library-locator . g$11947$4aEQL)
        (get-library-paths . g$11946$4aEQL)
        (library-path . g$7986$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7115$4aEQL
      'g$12450$4aEQL
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11972$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12451$4aEQL
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12373$4aEQL)
        (clr-field-set!-internal . g$12372$4aEQL)
        (clr-field-get-internal . g$12371$4aEQL)
        (clr-cast-internal . g$12370$4aEQL)
        (clr-call-internal . g$12369$4aEQL)
        (clr-new-internal . g$12368$4aEQL)
        (clr-new-array-internal . g$12367$4aEQL)
        (clr-is-internal . g$12366$4aEQL)
        (clr-reference-internal . g$12365$4aEQL)
        (clr-using-internal . g$12364$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12452$4aEQL
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11892$4aEQL)
        (unquote . g$11891$4aEQL)
        (else . g$11889$4aEQL)
        (=> . g$11888$4aEQL)
        (delay . g$11884$4aEQL)
        (or . g$11882$4aEQL)
        (and . g$11881$4aEQL)
        (do . g$11880$4aEQL)
        (cond . g$11879$4aEQL)
        (let* . g$11878$4aEQL)
        (let . g$11877$4aEQL)
        (quasiquote . g$11873$4aEQL)
        (syntax-rules . g$11872$4aEQL)
        (case . g$11863$4aEQL)
        (if . g$11859$4aEQL)
        (letrec . g$11857$4aEQL)
        (lambda . g$11854$4aEQL)
        (quote . g$11851$4aEQL)
        (letrec-syntax . g$11849$4aEQL)
        (let-syntax . g$11848$4aEQL)
        (set! . g$11847$4aEQL)
        (begin . g$11843$4aEQL)
        (define-syntax . g$11841$4aEQL)
        (define . g$11840$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7115$4aEQL
      'g$12453$4aEQL
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8835$4aEQL)
        (char-ready? . g$12354$4aEQL)
        (string-ci>? . g$6940$4aEQL)
        (string-ci>=? . g$6942$4aEQL)
        (string-ci=? . g$6938$4aEQL)
        (string-ci<? . g$6939$4aEQL)
        (string-ci<=? . g$6941$4aEQL)
        (char-whitespace? . g$12345$4aEQL)
        (char-upper-case? . g$12344$4aEQL)
        (char-numeric? . g$12342$4aEQL)
        (char-lower-case? . g$12341$4aEQL)
        (char-upcase . g$12339$4aEQL)
        (char-downcase . g$12336$4aEQL)
        (char-ci>? . g$6979$4aEQL)
        (char-ci>=? . g$6981$4aEQL)
        (char-ci=? . g$6977$4aEQL)
        (char-ci<? . g$6978$4aEQL)
        (char-ci<=? . g$6980$4aEQL)
        (char-alphabetic? . g$12335$4aEQL)
        (call-with-output-file . g$7358$4aEQL)
        (call-with-input-file . g$7357$4aEQL)
        (write-char . g$12303$4aEQL)
        (write . g$12302$4aEQL)
        (with-output-to-file . g$7356$4aEQL)
        (with-input-from-file . g$7355$4aEQL)
        (read-char . g$12301$4aEQL)
        (read . g$12300$4aEQL)
        (peek-char . g$12299$4aEQL)
        (open-output-file . g$12298$4aEQL)
        (open-input-file . g$12297$4aEQL)
        (newline . g$12296$4aEQL)
        (display . g$12295$4aEQL)
        (close-output-port . g$12294$4aEQL)
        (close-input-port . g$12293$4aEQL)
        (eof-object? . g$12292$4aEQL)
        (eof-object . g$12291$4aEQL)
        (current-error-port . g$12290$4aEQL)
        (current-output-port . g$12289$4aEQL)
        (current-input-port . g$12288$4aEQL)
        (output-port? . g$12287$4aEQL)
        (input-port? . g$12286$4aEQL)
        (scheme-report-environment . g$8810$4aEQL)
        (quotient . g$6859$4aEQL)
        (null-environment . g$8809$4aEQL)
        (remainder . g$6860$4aEQL)
        (modulo . g$6861$4aEQL)
        (inexact->exact . g$12225$4aEQL)
        (force . g$6863$4aEQL)
        (exact->inexact . g$12224$4aEQL)
        (string-fill! . g$12222$4aEQL)
        (string-set! . g$12221$4aEQL)
        (set-cdr! . g$12220$4aEQL)
        (set-car! . g$12219$4aEQL)
        (memv . g$5850$4aEQL)
        (memq . g$5849$4aEQL)
        (member . g$5851$4aEQL)
        (assv . g$5846$4aEQL)
        (assq . g$5845$4aEQL)
        (assoc . g$5847$4aEQL)
        (eval . g$8812$4aEQL)
        (zero? . g$12089$4aEQL)
        (vector? . g$12088$4aEQL)
        (vector-set! . g$12087$4aEQL)
        (vector-ref . g$12086$4aEQL)
        (vector-length . g$12084$4aEQL)
        (vector-fill! . g$12082$4aEQL)
        (vector->list . g$12081$4aEQL)
        (vector . g$12080$4aEQL)
        (values . g$12079$4aEQL)
        (truncate . g$12078$4aEQL)
        (tan . g$12077$4aEQL)
        (symbol? . g$12076$4aEQL)
        (symbol->string . g$12075$4aEQL)
        (substring . g$12074$4aEQL)
        (string? . g$12073$4aEQL)
        (string>? . g$6039$4aEQL)
        (string>=? . g$6041$4aEQL)
        (string=? . g$6037$4aEQL)
        (string<? . g$6038$4aEQL)
        (string<=? . g$6040$4aEQL)
        (string-ref . g$12072$4aEQL)
        (string-length . g$12071$4aEQL)
        (string-copy . g$12069$4aEQL)
        (string-append . g$12068$4aEQL)
        (string->symbol . g$12067$4aEQL)
        (string->number . g$12066$4aEQL)
        (string->list . g$12065$4aEQL)
        (string . g$12064$4aEQL)
        (sqrt . g$12063$4aEQL)
        (sin . g$12062$4aEQL)
        (round . g$12061$4aEQL)
        (reverse . g$12060$4aEQL)
        (real? . g$12059$4aEQL)
        (real-part . g$12057$4aEQL)
        (rationalize . g$6083$4aEQL)
        (rational? . g$12056$4aEQL)
        (procedure? . g$12054$4aEQL)
        (positive? . g$12053$4aEQL)
        (pair? . g$12052$4aEQL)
        (odd? . g$12051$4aEQL)
        (numerator . g$12050$4aEQL)
        (number? . g$12049$4aEQL)
        (number->string . g$12048$4aEQL)
        (null? . g$12047$4aEQL)
        (not . g$12046$4aEQL)
        (negative? . g$12045$4aEQL)
        (min . g$12043$4aEQL)
        (max . g$12042$4aEQL)
        (map . g$5857$4aEQL)
        (make-vector . g$12041$4aEQL)
        (make-string . g$12040$4aEQL)
        (make-rectangular . g$12039$4aEQL)
        (make-polar . g$12038$4aEQL)
        (magnitude . g$12037$4aEQL)
        (log . g$12036$4aEQL)
        (list? . g$12035$4aEQL)
        (list-tail . g$5837$4aEQL)
        (list-ref . g$5838$4aEQL)
        (list->vector . g$12034$4aEQL)
        (list->string . g$12033$4aEQL)
        (list . g$12032$4aEQL)
        (length . g$12031$4aEQL)
        (lcm . g$12030$4aEQL)
        (integer? . g$12029$4aEQL)
        (integer->char . g$12027$4aEQL)
        (inexact? . g$12025$4aEQL)
        (imag-part . g$12023$4aEQL)
        (gcd . g$12022$4aEQL)
        (for-each . g$5858$4aEQL)
        (floor . g$12021$4aEQL)
        (expt . g$12019$4aEQL)
        (exp . g$12018$4aEQL)
        (exact? . g$12017$4aEQL)
        (even? . g$12014$4aEQL)
        (eqv? . g$12012$4aEQL)
        (equal? . g$12011$4aEQL)
        (eq? . g$12010$4aEQL)
        (dynamic-wind . g$12009$4aEQL)
        (denominator . g$12002$4aEQL)
        (cos . g$12001$4aEQL)
        (cons . g$12000$4aEQL)
        (complex? . g$11999$4aEQL)
        (char? . g$11998$4aEQL)
        (char>? . g$6080$4aEQL)
        (char>=? . g$6082$4aEQL)
        (char=? . g$6078$4aEQL)
        (char<? . g$6079$4aEQL)
        (char<=? . g$6081$4aEQL)
        (char->integer . g$11997$4aEQL)
        (ceiling . g$11996$4aEQL)
        (call-with-values . g$11995$4aEQL)
        (call-with-current-continuation . g$11993$4aEQL)
        (cddddr . g$6002$4aEQL)
        (cdddar . g$6001$4aEQL)
        (cddadr . g$6000$4aEQL)
        (cddaar . g$5999$4aEQL)
        (cdaddr . g$5998$4aEQL)
        (cdadar . g$5997$4aEQL)
        (cdaadr . g$5996$4aEQL)
        (cdaaar . g$5995$4aEQL)
        (cadddr . g$5994$4aEQL)
        (caddar . g$5993$4aEQL)
        (cadadr . g$5992$4aEQL)
        (cadaar . g$5991$4aEQL)
        (caaddr . g$5990$4aEQL)
        (caadar . g$5989$4aEQL)
        (caaadr . g$5988$4aEQL)
        (caaaar . g$5987$4aEQL)
        (cdddr . g$5986$4aEQL)
        (cddar . g$5985$4aEQL)
        (cdadr . g$5984$4aEQL)
        (cdaar . g$5983$4aEQL)
        (caddr . g$5982$4aEQL)
        (cadar . g$5981$4aEQL)
        (caadr . g$5980$4aEQL)
        (caaar . g$5979$4aEQL)
        (cddr . g$5978$4aEQL)
        (cdar . g$5977$4aEQL)
        (cadr . g$5976$4aEQL)
        (caar . g$5975$4aEQL)
        (cdr . g$11992$4aEQL)
        (car . g$11991$4aEQL)
        (boolean? . g$11990$4aEQL)
        (atan . g$11989$4aEQL)
        (asin . g$11987$4aEQL)
        (apply . g$11986$4aEQL)
        (append . g$11985$4aEQL)
        (angle . g$11984$4aEQL)
        (acos . g$11983$4aEQL)
        (abs . g$11982$4aEQL)
        (/ . g$11981$4aEQL)
        (* . g$11980$4aEQL)
        (- . g$11979$4aEQL)
        (+ . g$11978$4aEQL)
        (>= . g$11977$4aEQL)
        (> . g$11976$4aEQL)
        (= . g$11975$4aEQL)
        (<= . g$11974$4aEQL)
        (< . g$11973$4aEQL)
        (unquote-splicing . g$11892$4aEQL)
        (unquote . g$11891$4aEQL)
        (else . g$11889$4aEQL)
        (=> . g$11888$4aEQL)
        (... . g$11887$4aEQL)
        (delay . g$11884$4aEQL)
        (or . g$11882$4aEQL)
        (and . g$11881$4aEQL)
        (do . g$11880$4aEQL)
        (cond . g$11879$4aEQL)
        (let* . g$11878$4aEQL)
        (let . g$11877$4aEQL)
        (quasiquote . g$11873$4aEQL)
        (syntax-rules . g$11872$4aEQL)
        (case . g$11863$4aEQL)
        (if . g$11859$4aEQL)
        (letrec . g$11857$4aEQL)
        (lambda . g$11854$4aEQL)
        (quote . g$11851$4aEQL)
        (letrec-syntax . g$11849$4aEQL)
        (let-syntax . g$11848$4aEQL)
        (set! . g$11847$4aEQL)
        (begin . g$11843$4aEQL)
        (define-syntax . g$11841$4aEQL)
        (define . g$11840$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7115$4aEQL
      'g$12454$4aEQL
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12353$4aEQL)
        (string-titlecase . g$12352$4aEQL)
        (string-normalize-nfkd . g$12351$4aEQL)
        (string-normalize-nfkc . g$12350$4aEQL)
        (string-normalize-nfd . g$12349$4aEQL)
        (string-normalize-nfc . g$12348$4aEQL)
        (string-foldcase . g$12347$4aEQL)
        (string-downcase . g$12346$4aEQL)
        (string-ci>? . g$6940$4aEQL)
        (string-ci>=? . g$6942$4aEQL)
        (string-ci=? . g$6938$4aEQL)
        (string-ci<? . g$6939$4aEQL)
        (string-ci<=? . g$6941$4aEQL)
        (char-whitespace? . g$12345$4aEQL)
        (char-upper-case? . g$12344$4aEQL)
        (char-title-case? . g$12343$4aEQL)
        (char-numeric? . g$12342$4aEQL)
        (char-lower-case? . g$12341$4aEQL)
        (char-general-category . g$12340$4aEQL)
        (char-upcase . g$12339$4aEQL)
        (char-titlecase . g$12338$4aEQL)
        (char-foldcase . g$12337$4aEQL)
        (char-downcase . g$12336$4aEQL)
        (char-ci>? . g$6979$4aEQL)
        (char-ci>=? . g$6981$4aEQL)
        (char-ci=? . g$6977$4aEQL)
        (char-ci<? . g$6978$4aEQL)
        (char-ci<=? . g$6980$4aEQL)
        (char-alphabetic? . g$12335$4aEQL)
        (make-variable-transformer . g$8432$4aEQL)
        (identifier? . g$8830$4aEQL)
        (generate-temporaries . g$8819$4aEQL)
        (free-identifier=? . g$8820$4aEQL)
        (syntax->datum . g$8832$4aEQL)
        (datum->syntax . g$8831$4aEQL)
        (bound-identifier=? . g$8821$4aEQL)
        (record-type-descriptor? . g$12334$4aEQL)
        (record-predicate . g$12333$4aEQL)
        (record-mutator . g$12332$4aEQL)
        (record-constructor . g$12331$4aEQL)
        (record-accessor . g$12330$4aEQL)
        (make-record-type-descriptor . g$12329$4aEQL)
        (make-record-constructor-descriptor . g$12328$4aEQL)
        (record? . g$12327$4aEQL)
        (record-type-uid . g$12326$4aEQL)
        (record-type-sealed? . g$12325$4aEQL)
        (record-type-parent . g$12324$4aEQL)
        (record-type-opaque? . g$12323$4aEQL)
        (record-type-name . g$12322$4aEQL)
        (record-type-generative? . g$12321$4aEQL)
        (record-type-field-names . g$12320$4aEQL)
        (record-rtd . g$12319$4aEQL)
        (record-field-mutable? . g$12318$4aEQL)
        (delete-file . g$6516$4aEQL)
        (file-exists? . g$6515$4aEQL)
        (vector-sort! . g$12317$4aEQL)
        (vector-sort . g$12316$4aEQL)
        (list-sort . g$6880$4aEQL)
        (symbol-hash . g$12315$4aEQL)
        (string-ci-hash . g$12314$4aEQL)
        (string-hash . g$12313$4aEQL)
        (equal-hash . g$12312$4aEQL)
        (hashtable-equivalence-function . g$12311$4aEQL)
        (make-hashtable . g$12310$4aEQL)
        (hashtable-hash-function . g$12309$4aEQL)
        (make-eqv-hashtable . g$6484$4aEQL)
        (make-eq-hashtable . g$6483$4aEQL)
        (hashtable? . g$12308$4aEQL)
        (hashtable-update! . g$6490$4aEQL)
        (hashtable-size . g$6485$4aEQL)
        (hashtable-set! . g$6487$4aEQL)
        (hashtable-ref . g$6486$4aEQL)
        (hashtable-mutable? . g$12307$4aEQL)
        (hashtable-keys . g$12306$4aEQL)
        (hashtable-entries . g$12305$4aEQL)
        (hashtable-delete! . g$6488$4aEQL)
        (hashtable-copy . g$12304$4aEQL)
        (hashtable-contains? . g$6489$4aEQL)
        (hashtable-clear! . g$6491$4aEQL)
        (call-with-output-file . g$7358$4aEQL)
        (call-with-input-file . g$7357$4aEQL)
        (write-char . g$12303$4aEQL)
        (write . g$12302$4aEQL)
        (with-output-to-file . g$7356$4aEQL)
        (with-input-from-file . g$7355$4aEQL)
        (read-char . g$12301$4aEQL)
        (read . g$12300$4aEQL)
        (peek-char . g$12299$4aEQL)
        (open-output-file . g$12298$4aEQL)
        (open-input-file . g$12297$4aEQL)
        (newline . g$12296$4aEQL)
        (display . g$12295$4aEQL)
        (close-output-port . g$12294$4aEQL)
        (close-input-port . g$12293$4aEQL)
        (eof-object? . g$12292$4aEQL)
        (eof-object . g$12291$4aEQL)
        (current-error-port . g$12290$4aEQL)
        (current-output-port . g$12289$4aEQL)
        (current-input-port . g$12288$4aEQL)
        (output-port? . g$12287$4aEQL)
        (input-port? . g$12286$4aEQL)
        (utf-8-codec . g$12285$4aEQL)
        (utf-16-codec . g$12284$4aEQL)
        (transcoder-error-handling-mode . g$12283$4aEQL)
        (transcoder-eol-style . g$12282$4aEQL)
        (transcoder-codec . g$12281$4aEQL)
        (transcoded-port . g$12280$4aEQL)
        (textual-port? . g$12279$4aEQL)
        (string->bytevector . g$12278$4aEQL)
        (standard-output-port . g$12277$4aEQL)
        (standard-input-port . g$12276$4aEQL)
        (standard-error-port . g$12275$4aEQL)
        (set-port-position! . g$12274$4aEQL)
        (put-u8 . g$12273$4aEQL)
        (put-string . g$12272$4aEQL)
        (put-datum . g$12271$4aEQL)
        (put-char . g$12270$4aEQL)
        (put-bytevector . g$12269$4aEQL)
        (port? . g$7331$4aEQL)
        (port-transcoder . g$12268$4aEQL)
        (port-position . g$12267$4aEQL)
        (port-has-set-port-position!? . g$12266$4aEQL)
        (port-has-port-position? . g$12265$4aEQL)
        (port-eof? . g$12264$4aEQL)
        (output-port-buffer-mode . g$12263$4aEQL)
        (open-string-output-port . g$7330$4aEQL)
        (open-string-input-port . g$12262$4aEQL)
        (open-file-output-port . g$12261$4aEQL)
        (open-file-input/output-port . g$12260$4aEQL)
        (open-file-input-port . g$12259$4aEQL)
        (open-bytevector-output-port . g$12258$4aEQL)
        (open-bytevector-input-port . g$12257$4aEQL)
        (native-transcoder . g$12256$4aEQL)
        (native-eol-style . g$12255$4aEQL)
        (make-transcoder . g$12254$4aEQL)
        (latin-1-codec . g$12253$4aEQL)
        (make-i/o-write-error . g$7186$4aEQL)
        (make-i/o-read-error . g$7172$4aEQL)
        (make-i/o-port-error . g$7291$4aEQL)
        (make-i/o-invalid-position-error . g$7201$4aEQL)
        (make-i/o-filename-error . g$7218$4aEQL)
        (make-i/o-file-protection-error . g$7234$4aEQL)
        (make-i/o-file-is-read-only-error . g$7248$4aEQL)
        (make-i/o-file-does-not-exist-error . g$7276$4aEQL)
        (make-i/o-file-already-exists-error . g$7262$4aEQL)
        (make-i/o-error . g$7158$4aEQL)
        (make-i/o-encoding-error . g$7322$4aEQL)
        (make-i/o-decoding-error . g$7307$4aEQL)
        (make-custom-textual-output-port . g$12252$4aEQL)
        (make-custom-textual-input/output-port . g$12251$4aEQL)
        (make-custom-textual-input-port . g$12250$4aEQL)
        (make-custom-binary-output-port . g$12249$4aEQL)
        (make-custom-binary-input/output-port . g$12248$4aEQL)
        (make-custom-binary-input-port . g$12247$4aEQL)
        (make-bytevector . g$12246$4aEQL)
        (lookahead-u8 . g$12245$4aEQL)
        (lookahead-char . g$12244$4aEQL)
        (i/o-write-error? . g$7187$4aEQL)
        (i/o-read-error? . g$7173$4aEQL)
        (i/o-port-error? . g$7293$4aEQL)
        (i/o-invalid-position-error? . g$7203$4aEQL)
        (i/o-error-position . g$7204$4aEQL)
        (i/o-filename-error? . g$7220$4aEQL)
        (i/o-file-protection-error? . g$7235$4aEQL)
        (i/o-file-is-read-only-error? . g$7249$4aEQL)
        (i/o-file-does-not-exist-error? . g$7277$4aEQL)
        (i/o-file-already-exists-error? . g$7263$4aEQL)
        (i/o-error? . g$7159$4aEQL)
        (i/o-error-port . g$7294$4aEQL)
        (i/o-error-filename . g$7221$4aEQL)
        (i/o-encoding-error? . g$7324$4aEQL)
        (i/o-encoding-error-char . g$7325$4aEQL)
        (i/o-decoding-error? . g$7308$4aEQL)
        (get-u8 . g$12243$4aEQL)
        (get-string-n! . g$12242$4aEQL)
        (get-string-n . g$12241$4aEQL)
        (get-string-all . g$12240$4aEQL)
        (get-line . g$12239$4aEQL)
        (get-datum . g$12238$4aEQL)
        (get-char . g$12237$4aEQL)
        (get-bytevector-some . g$12236$4aEQL)
        (get-bytevector-n! . g$12235$4aEQL)
        (get-bytevector-n . g$12234$4aEQL)
        (get-bytevector-all . g$12233$4aEQL)
        (flush-output-port . g$12232$4aEQL)
        (close-port . g$12231$4aEQL)
        (call-with-string-output-port . g$7332$4aEQL)
        (call-with-port . g$12230$4aEQL)
        (call-with-bytevector-output-port . g$12229$4aEQL)
        (bytevector->string . g$12228$4aEQL)
        (buffer-mode? . g$12227$4aEQL)
        (binary-port? . g$12226$4aEQL)
        (exit . g$12223$4aEQL)
        (command-line . g$11804$4aEQL)
        (remove . g$5862$4aEQL)
        (remv . g$5863$4aEQL)
        (remp . g$5843$4aEQL)
        (remq . g$5864$4aEQL)
        (partition . g$5842$4aEQL)
        (memv . g$5850$4aEQL)
        (memq . g$5849$4aEQL)
        (memp . g$5852$4aEQL)
        (member . g$5851$4aEQL)
        (exists . g$5856$4aEQL)
        (for-all . g$5855$4aEQL)
        (fold-right . g$5861$4aEQL)
        (fold-left . g$5860$4aEQL)
        (find . g$5841$4aEQL)
        (filter . g$5844$4aEQL)
        (cons* . g$5859$4aEQL)
        (assv . g$5846$4aEQL)
        (assq . g$5845$4aEQL)
        (assp . g$5848$4aEQL)
        (assoc . g$5847$4aEQL)
        (with-exception-handler . g$12218$4aEQL)
        (raise-continuable . g$12217$4aEQL)
        (raise . g$12216$4aEQL)
        (make-enumeration . g$7416$4aEQL)
        (enum-set=? . g$7423$4aEQL)
        (enum-set-universe . g$7417$4aEQL)
        (enum-set-union . g$7424$4aEQL)
        (enum-set-subset? . g$7422$4aEQL)
        (enum-set-projection . g$7428$4aEQL)
        (enum-set-member? . g$7421$4aEQL)
        (enum-set-intersection . g$7425$4aEQL)
        (enum-set-indexer . g$7418$4aEQL)
        (enum-set-difference . g$7426$4aEQL)
        (enum-set-constructor . g$7419$4aEQL)
        (enum-set-complement . g$7427$4aEQL)
        (enum-set->list . g$7420$4aEQL)
        (who-condition? . g$6770$4aEQL)
        (warning? . g$6681$4aEQL)
        (violation? . g$6723$4aEQL)
        (undefined-violation? . g$6847$4aEQL)
        (syntax-violation? . g$6831$4aEQL)
        (syntax-violation-subform . g$6833$4aEQL)
        (syntax-violation-form . g$6832$4aEQL)
        (syntax-violation . g$8829$4aEQL)
        (simple-conditions . g$12215$4aEQL)
        (serious-condition? . g$6695$4aEQL)
        (non-continuable-violation? . g$6785$4aEQL)
        (message-condition? . g$6666$4aEQL)
        (make-who-condition . g$6768$4aEQL)
        (make-warning . g$6680$4aEQL)
        (make-violation . g$6722$4aEQL)
        (make-undefined-violation . g$6846$4aEQL)
        (make-syntax-violation . g$6828$4aEQL)
        (make-serious-condition . g$6694$4aEQL)
        (make-non-continuable-violation . g$6784$4aEQL)
        (make-message-condition . g$6664$4aEQL)
        (make-lexical-violation . g$6812$4aEQL)
        (make-irritants-condition . g$6751$4aEQL)
        (make-implementation-restriction-violation . g$6798$4aEQL)
        (make-error . g$6708$4aEQL)
        (make-assertion-violation . g$6736$4aEQL)
        (lexical-violation? . g$6813$4aEQL)
        (irritants-condition? . g$6753$4aEQL)
        (implementation-restriction-violation? . g$6799$4aEQL)
        (error? . g$6709$4aEQL)
        (condition-who . g$6771$4aEQL)
        (condition-predicate . g$12214$4aEQL)
        (condition-message . g$6667$4aEQL)
        (condition-irritants . g$6754$4aEQL)
        (condition-accessor . g$12213$4aEQL)
        (condition . g$12212$4aEQL)
        (assertion-violation? . g$6737$4aEQL)
        (condition? . g$12211$4aEQL)
        (utf32->string . g$12210$4aEQL)
        (utf16->string . g$12209$4aEQL)
        (utf8->string . g$12208$4aEQL)
        (uint-list->bytevector . g$12207$4aEQL)
        (u8-list->bytevector . g$12206$4aEQL)
        (string->utf8 . g$12205$4aEQL)
        (string->utf32 . g$12204$4aEQL)
        (string->utf16 . g$12203$4aEQL)
        (sint-list->bytevector . g$12202$4aEQL)
        (native-endianness . g$6522$4aEQL)
        (bytevector? . g$12201$4aEQL)
        (bytevector=? . g$12200$4aEQL)
        (bytevector-uint-set! . g$12199$4aEQL)
        (bytevector-uint-ref . g$12198$4aEQL)
        (bytevector-u8-set! . g$12197$4aEQL)
        (bytevector-u8-ref . g$12196$4aEQL)
        (bytevector-u64-set! . g$6543$4aEQL)
        (bytevector-u64-ref . g$6539$4aEQL)
        (bytevector-u64-native-set! . g$6545$4aEQL)
        (bytevector-u64-native-ref . g$6541$4aEQL)
        (bytevector-u32-set! . g$6535$4aEQL)
        (bytevector-u32-ref . g$6531$4aEQL)
        (bytevector-u32-native-set! . g$6537$4aEQL)
        (bytevector-u32-native-ref . g$6533$4aEQL)
        (bytevector-u16-set! . g$6527$4aEQL)
        (bytevector-u16-ref . g$6523$4aEQL)
        (bytevector-u16-native-set! . g$6529$4aEQL)
        (bytevector-u16-native-ref . g$6525$4aEQL)
        (bytevector-sint-set! . g$12195$4aEQL)
        (bytevector-sint-ref . g$12194$4aEQL)
        (bytevector-s8-set! . g$12193$4aEQL)
        (bytevector-s8-ref . g$12192$4aEQL)
        (bytevector-s64-set! . g$6544$4aEQL)
        (bytevector-s64-ref . g$6540$4aEQL)
        (bytevector-s64-native-set! . g$6546$4aEQL)
        (bytevector-s64-native-ref . g$6542$4aEQL)
        (bytevector-s32-set! . g$6536$4aEQL)
        (bytevector-s32-ref . g$6532$4aEQL)
        (bytevector-s32-native-set! . g$6538$4aEQL)
        (bytevector-s32-native-ref . g$6534$4aEQL)
        (bytevector-s16-set! . g$6528$4aEQL)
        (bytevector-s16-ref . g$6524$4aEQL)
        (bytevector-s16-native-set! . g$6530$4aEQL)
        (bytevector-s16-native-ref . g$6526$4aEQL)
        (bytevector-length . g$12191$4aEQL)
        (bytevector-ieee-single-set! . g$12190$4aEQL)
        (bytevector-ieee-single-ref . g$12189$4aEQL)
        (bytevector-ieee-single-native-set! . g$6549$4aEQL)
        (bytevector-ieee-single-native-ref . g$6547$4aEQL)
        (bytevector-ieee-double-set! . g$12188$4aEQL)
        (bytevector-ieee-double-ref . g$12187$4aEQL)
        (bytevector-ieee-double-native-set! . g$6550$4aEQL)
        (bytevector-ieee-double-native-ref . g$6548$4aEQL)
        (bytevector-fill! . g$12186$4aEQL)
        (bytevector-copy! . g$12185$4aEQL)
        (bytevector-copy . g$12184$4aEQL)
        (bytevector->uint-list . g$12183$4aEQL)
        (bytevector->u8-list . g$12182$4aEQL)
        (bytevector->sint-list . g$12181$4aEQL)
        (no-nans-violation? . g$7144$4aEQL)
        (no-infinities-violation? . g$7130$4aEQL)
        (make-no-nans-violation . g$7143$4aEQL)
        (make-no-infinities-violation . g$7129$4aEQL)
        (real->flonum . g$12180$4aEQL)
        (flzero? . g$12179$4aEQL)
        (fltruncate . g$12178$4aEQL)
        (fltan . g$12177$4aEQL)
        (flsqrt . g$12176$4aEQL)
        (flsin . g$12175$4aEQL)
        (flround . g$12174$4aEQL)
        (flpositive? . g$12173$4aEQL)
        (flonum? . g$12172$4aEQL)
        (flodd? . g$12171$4aEQL)
        (flnumerator . g$12170$4aEQL)
        (flnegative? . g$12169$4aEQL)
        (flnan? . g$12168$4aEQL)
        (flmod0 . g$12167$4aEQL)
        (flmod . g$12166$4aEQL)
        (flmin . g$12165$4aEQL)
        (flmax . g$12164$4aEQL)
        (fllog . g$12163$4aEQL)
        (flinteger? . g$12162$4aEQL)
        (flinfinite? . g$12161$4aEQL)
        (flfloor . g$12160$4aEQL)
        (flfinite? . g$12159$4aEQL)
        (flexpt . g$12158$4aEQL)
        (flexp . g$12157$4aEQL)
        (fleven? . g$12156$4aEQL)
        (fldiv0-and-mod0 . g$12155$4aEQL)
        (fldiv0 . g$12154$4aEQL)
        (fldiv-and-mod . g$12153$4aEQL)
        (fldiv . g$12152$4aEQL)
        (fldenominator . g$12151$4aEQL)
        (flcos . g$12150$4aEQL)
        (flceiling . g$12149$4aEQL)
        (flatan . g$12148$4aEQL)
        (flasin . g$12147$4aEQL)
        (flacos . g$12146$4aEQL)
        (flabs . g$12145$4aEQL)
        (fl>? . g$12144$4aEQL)
        (fl>=? . g$12143$4aEQL)
        (fl=? . g$12142$4aEQL)
        (fl<? . g$12141$4aEQL)
        (fl<=? . g$12140$4aEQL)
        (fl/ . g$12139$4aEQL)
        (fl- . g$12138$4aEQL)
        (fl+ . g$12137$4aEQL)
        (fl* . g$12136$4aEQL)
        (fixnum->flonum . g$12135$4aEQL)
        (fxzero? . g$12134$4aEQL)
        (fxxor . g$12133$4aEQL)
        (fxrotate-bit-field . g$7076$4aEQL)
        (fxreverse-bit-field . g$12132$4aEQL)
        (fxpositive? . g$12131$4aEQL)
        (fxodd? . g$12130$4aEQL)
        (fxnot . g$12129$4aEQL)
        (fxnegative? . g$12128$4aEQL)
        (fxmod0 . g$12127$4aEQL)
        (fxmod . g$12126$4aEQL)
        (fxmin . g$12125$4aEQL)
        (fxmax . g$12124$4aEQL)
        (fxlength . g$12123$4aEQL)
        (fxior . g$12122$4aEQL)
        (fxif . g$7070$4aEQL)
        (fxfirst-bit-set . g$12121$4aEQL)
        (fxeven? . g$12120$4aEQL)
        (fxdiv0-and-mod0 . g$12119$4aEQL)
        (fxdiv0 . g$12118$4aEQL)
        (fxdiv-and-mod . g$12117$4aEQL)
        (fxdiv . g$12116$4aEQL)
        (fxcopy-bit-field . g$7073$4aEQL)
        (fxcopy-bit . g$7071$4aEQL)
        (fxbit-set? . g$12115$4aEQL)
        (fxbit-field . g$7072$4aEQL)
        (fxbit-count . g$12114$4aEQL)
        (fxarithmetic-shift-right . g$7075$4aEQL)
        (fxarithmetic-shift-left . g$7074$4aEQL)
        (fxarithmetic-shift . g$12113$4aEQL)
        (fxand . g$12112$4aEQL)
        (fx>? . g$12111$4aEQL)
        (fx>=? . g$12110$4aEQL)
        (fx=? . g$12109$4aEQL)
        (fx<? . g$12108$4aEQL)
        (fx<=? . g$12107$4aEQL)
        (fx-/carry . g$7068$4aEQL)
        (fx- . g$12106$4aEQL)
        (fx+/carry . g$7069$4aEQL)
        (fx+ . g$12105$4aEQL)
        (fx*/carry . g$7067$4aEQL)
        (fx* . g$12104$4aEQL)
        (greatest-fixnum . g$12103$4aEQL)
        (least-fixnum . g$12102$4aEQL)
        (fixnum-width . g$12101$4aEQL)
        (fixnum? . g$12100$4aEQL)
        (bitwise-rotate-bit-field . g$7041$4aEQL)
        (bitwise-reverse-bit-field . g$12099$4aEQL)
        (bitwise-length . g$12098$4aEQL)
        (bitwise-if . g$7035$4aEQL)
        (bitwise-first-bit-set . g$12097$4aEQL)
        (bitwise-copy-bit-field . g$7038$4aEQL)
        (bitwise-copy-bit . g$7036$4aEQL)
        (bitwise-bit-set? . g$12096$4aEQL)
        (bitwise-bit-field . g$7037$4aEQL)
        (bitwise-bit-count . g$12095$4aEQL)
        (bitwise-xor . g$12094$4aEQL)
        (bitwise-ior . g$12093$4aEQL)
        (bitwise-and . g$12092$4aEQL)
        (bitwise-not . g$12091$4aEQL)
        (bitwise-arithmetic-shift-right . g$7040$4aEQL)
        (bitwise-arithmetic-shift-left . g$7039$4aEQL)
        (bitwise-arithmetic-shift . g$12090$4aEQL)
        (zero? . g$12089$4aEQL)
        (vector? . g$12088$4aEQL)
        (vector-set! . g$12087$4aEQL)
        (vector-ref . g$12086$4aEQL)
        (vector-map . g$12085$4aEQL)
        (vector-length . g$12084$4aEQL)
        (vector-for-each . g$12083$4aEQL)
        (vector-fill! . g$12082$4aEQL)
        (vector->list . g$12081$4aEQL)
        (vector . g$12080$4aEQL)
        (values . g$12079$4aEQL)
        (truncate . g$12078$4aEQL)
        (tan . g$12077$4aEQL)
        (symbol? . g$12076$4aEQL)
        (symbol=? . g$6042$4aEQL)
        (symbol->string . g$12075$4aEQL)
        (substring . g$12074$4aEQL)
        (string? . g$12073$4aEQL)
        (string>? . g$6039$4aEQL)
        (string>=? . g$6041$4aEQL)
        (string=? . g$6037$4aEQL)
        (string<? . g$6038$4aEQL)
        (string<=? . g$6040$4aEQL)
        (string-ref . g$12072$4aEQL)
        (string-length . g$12071$4aEQL)
        (string-for-each . g$12070$4aEQL)
        (string-copy . g$12069$4aEQL)
        (string-append . g$12068$4aEQL)
        (string->symbol . g$12067$4aEQL)
        (string->number . g$12066$4aEQL)
        (string->list . g$12065$4aEQL)
        (string . g$12064$4aEQL)
        (sqrt . g$12063$4aEQL)
        (sin . g$12062$4aEQL)
        (round . g$12061$4aEQL)
        (reverse . g$12060$4aEQL)
        (real? . g$12059$4aEQL)
        (real-valued? . g$12058$4aEQL)
        (real-part . g$12057$4aEQL)
        (rationalize . g$6083$4aEQL)
        (rational? . g$12056$4aEQL)
        (rational-valued? . g$12055$4aEQL)
        (procedure? . g$12054$4aEQL)
        (positive? . g$12053$4aEQL)
        (pair? . g$12052$4aEQL)
        (odd? . g$12051$4aEQL)
        (numerator . g$12050$4aEQL)
        (number? . g$12049$4aEQL)
        (number->string . g$12048$4aEQL)
        (null? . g$12047$4aEQL)
        (not . g$12046$4aEQL)
        (negative? . g$12045$4aEQL)
        (nan? . g$12044$4aEQL)
        (min . g$12043$4aEQL)
        (max . g$12042$4aEQL)
        (map . g$5857$4aEQL)
        (make-vector . g$12041$4aEQL)
        (make-string . g$12040$4aEQL)
        (make-rectangular . g$12039$4aEQL)
        (make-polar . g$12038$4aEQL)
        (magnitude . g$12037$4aEQL)
        (log . g$12036$4aEQL)
        (list? . g$12035$4aEQL)
        (list-tail . g$5837$4aEQL)
        (list-ref . g$5838$4aEQL)
        (list->vector . g$12034$4aEQL)
        (list->string . g$12033$4aEQL)
        (list . g$12032$4aEQL)
        (length . g$12031$4aEQL)
        (lcm . g$12030$4aEQL)
        (integer? . g$12029$4aEQL)
        (integer-valued? . g$12028$4aEQL)
        (integer->char . g$12027$4aEQL)
        (infinite? . g$12026$4aEQL)
        (inexact? . g$12025$4aEQL)
        (inexact . g$12024$4aEQL)
        (imag-part . g$12023$4aEQL)
        (gcd . g$12022$4aEQL)
        (for-each . g$5858$4aEQL)
        (floor . g$12021$4aEQL)
        (finite? . g$12020$4aEQL)
        (expt . g$12019$4aEQL)
        (exp . g$12018$4aEQL)
        (exact? . g$12017$4aEQL)
        (exact-integer-sqrt . g$12016$4aEQL)
        (exact . g$12015$4aEQL)
        (even? . g$12014$4aEQL)
        (error . g$12013$4aEQL)
        (eqv? . g$12012$4aEQL)
        (equal? . g$12011$4aEQL)
        (eq? . g$12010$4aEQL)
        (dynamic-wind . g$12009$4aEQL)
        (div0-and-mod0 . g$12008$4aEQL)
        (mod0 . g$12007$4aEQL)
        (div0 . g$12006$4aEQL)
        (div-and-mod . g$12005$4aEQL)
        (mod . g$12004$4aEQL)
        (div . g$12003$4aEQL)
        (denominator . g$12002$4aEQL)
        (cos . g$12001$4aEQL)
        (cons . g$12000$4aEQL)
        (complex? . g$11999$4aEQL)
        (char? . g$11998$4aEQL)
        (char>? . g$6080$4aEQL)
        (char>=? . g$6082$4aEQL)
        (char=? . g$6078$4aEQL)
        (char<? . g$6079$4aEQL)
        (char<=? . g$6081$4aEQL)
        (char->integer . g$11997$4aEQL)
        (ceiling . g$11996$4aEQL)
        (call-with-values . g$11995$4aEQL)
        (call/cc . g$11994$4aEQL)
        (call-with-current-continuation . g$11993$4aEQL)
        (cddddr . g$6002$4aEQL)
        (cdddar . g$6001$4aEQL)
        (cddadr . g$6000$4aEQL)
        (cddaar . g$5999$4aEQL)
        (cdaddr . g$5998$4aEQL)
        (cdadar . g$5997$4aEQL)
        (cdaadr . g$5996$4aEQL)
        (cdaaar . g$5995$4aEQL)
        (cadddr . g$5994$4aEQL)
        (caddar . g$5993$4aEQL)
        (cadadr . g$5992$4aEQL)
        (cadaar . g$5991$4aEQL)
        (caaddr . g$5990$4aEQL)
        (caadar . g$5989$4aEQL)
        (caaadr . g$5988$4aEQL)
        (caaaar . g$5987$4aEQL)
        (cdddr . g$5986$4aEQL)
        (cddar . g$5985$4aEQL)
        (cdadr . g$5984$4aEQL)
        (cdaar . g$5983$4aEQL)
        (caddr . g$5982$4aEQL)
        (cadar . g$5981$4aEQL)
        (caadr . g$5980$4aEQL)
        (caaar . g$5979$4aEQL)
        (cddr . g$5978$4aEQL)
        (cdar . g$5977$4aEQL)
        (cadr . g$5976$4aEQL)
        (caar . g$5975$4aEQL)
        (cdr . g$11992$4aEQL)
        (car . g$11991$4aEQL)
        (boolean? . g$11990$4aEQL)
        (boolean=? . g$6043$4aEQL)
        (atan . g$11989$4aEQL)
        (assertion-violation . g$11988$4aEQL)
        (asin . g$11987$4aEQL)
        (apply . g$11986$4aEQL)
        (append . g$11985$4aEQL)
        (angle . g$11984$4aEQL)
        (acos . g$11983$4aEQL)
        (abs . g$11982$4aEQL)
        (/ . g$11981$4aEQL)
        (* . g$11980$4aEQL)
        (- . g$11979$4aEQL)
        (+ . g$11978$4aEQL)
        (>= . g$11977$4aEQL)
        (> . g$11976$4aEQL)
        (= . g$11975$4aEQL)
        (<= . g$11974$4aEQL)
        (< . g$11973$4aEQL)
        (&no-nans . g$11944$4aEQL)
        (&no-infinities . g$11943$4aEQL)
        (&i/o-encoding . g$11942$4aEQL)
        (&i/o-decoding . g$11941$4aEQL)
        (&i/o-port . g$11940$4aEQL)
        (&i/o-file-does-not-exist . g$11939$4aEQL)
        (&i/o-file-already-exists . g$11938$4aEQL)
        (&i/o-file-is-read-only . g$11937$4aEQL)
        (&i/o-file-protection . g$11936$4aEQL)
        (&i/o-filename . g$11935$4aEQL)
        (&i/o-invalid-position . g$11934$4aEQL)
        (&i/o-write . g$11933$4aEQL)
        (&i/o-read . g$11932$4aEQL)
        (&i/o . g$11931$4aEQL)
        (&non-continuable . g$11930$4aEQL)
        (&undefined . g$11929$4aEQL)
        (&syntax . g$11928$4aEQL)
        (&lexical . g$11927$4aEQL)
        (&implementation-restriction . g$11926$4aEQL)
        (&who . g$11925$4aEQL)
        (&irritants . g$11924$4aEQL)
        (&assertion . g$11923$4aEQL)
        (&violation . g$11922$4aEQL)
        (&error . g$11921$4aEQL)
        (&serious . g$11920$4aEQL)
        (&warning . g$11919$4aEQL)
        (&message . g$11918$4aEQL)
        (&condition . g$11917$4aEQL)
        (define-condition-type . g$11916$4aEQL)
        (define-enumeration . g$11915$4aEQL)
        (define-record-type . g$11914$4aEQL)
        (parent-rtd . g$11913$4aEQL)
        (nongenerative . g$11912$4aEQL)
        (opaque . g$11911$4aEQL)
        (sealed . g$11910$4aEQL)
        (protocol . g$11909$4aEQL)
        (parent . g$11908$4aEQL)
        (immutable . g$11907$4aEQL)
        (mutable . g$11906$4aEQL)
        (fields . g$11905$4aEQL)
        (error-handling-mode . g$11904$4aEQL)
        (file-options . g$11903$4aEQL)
        (buffer-mode . g$11902$4aEQL)
        (eol-style . g$11901$4aEQL)
        (guard . g$11900$4aEQL)
        (unsyntax-splicing . g$11894$4aEQL)
        (unsyntax . g$11893$4aEQL)
        (unquote-splicing . g$11892$4aEQL)
        (unquote . g$11891$4aEQL)
        (_ . g$11890$4aEQL)
        (else . g$11889$4aEQL)
        (=> . g$11888$4aEQL)
        (... . g$11887$4aEQL)
        (assert . g$11886$4aEQL)
        (endianness . g$11885$4aEQL)
        (or . g$11882$4aEQL)
        (and . g$11881$4aEQL)
        (do . g$11880$4aEQL)
        (cond . g$11879$4aEQL)
        (let* . g$11878$4aEQL)
        (let . g$11877$4aEQL)
        (identifier-syntax . g$11876$4aEQL)
        (with-syntax . g$11875$4aEQL)
        (quasisyntax . g$11874$4aEQL)
        (quasiquote . g$11873$4aEQL)
        (syntax-rules . g$11872$4aEQL)
        (let-values . g$11868$4aEQL)
        (let*-values . g$11867$4aEQL)
        (record-constructor-descriptor . g$11866$4aEQL)
        (record-type-descriptor . g$11865$4aEQL)
        (case . g$11863$4aEQL)
        (unless . g$11861$4aEQL)
        (when . g$11860$4aEQL)
        (if . g$11859$4aEQL)
        (letrec* . g$11858$4aEQL)
        (letrec . g$11857$4aEQL)
        (case-lambda . g$11855$4aEQL)
        (lambda . g$11854$4aEQL)
        (syntax . g$11853$4aEQL)
        (syntax-case . g$11852$4aEQL)
        (quote . g$11851$4aEQL)
        (letrec-syntax . g$11849$4aEQL)
        (let-syntax . g$11848$4aEQL)
        (set! . g$11847$4aEQL)
        (begin . g$11843$4aEQL)
        (define-syntax . g$11841$4aEQL)
        (define . g$11840$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12455$4aEQL
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8835$4aEQL)
        (scheme-report-environment . g$8810$4aEQL)
        (quotient . g$6859$4aEQL)
        (null-environment . g$8809$4aEQL)
        (remainder . g$6860$4aEQL)
        (modulo . g$6861$4aEQL)
        (inexact->exact . g$12225$4aEQL)
        (force . g$6863$4aEQL)
        (exact->inexact . g$12224$4aEQL)
        (delay . g$11884$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12456$4aEQL
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11880$4aEQL)
        (unless . g$11861$4aEQL)
        (when . g$11860$4aEQL)
        (case-lambda . g$11855$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12457$4aEQL
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8812$4aEQL) (environment . g$8808$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12458$4aEQL
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12220$4aEQL) (set-car! . g$12219$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12459$4aEQL
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12222$4aEQL) (string-set! . g$12221$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12460$4aEQL
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12223$4aEQL) (command-line . g$11804$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12461$4aEQL
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8432$4aEQL)
        (identifier? . g$8830$4aEQL)
        (generate-temporaries . g$8819$4aEQL)
        (free-identifier=? . g$8820$4aEQL)
        (syntax->datum . g$8832$4aEQL)
        (datum->syntax . g$8831$4aEQL)
        (bound-identifier=? . g$8821$4aEQL)
        (syntax-violation . g$8829$4aEQL)
        (unsyntax-splicing . g$11894$4aEQL)
        (unsyntax . g$11893$4aEQL)
        (_ . g$11890$4aEQL)
        (... . g$11887$4aEQL)
        (with-syntax . g$11875$4aEQL)
        (quasisyntax . g$11874$4aEQL)
        (syntax . g$11853$4aEQL)
        (syntax-case . g$11852$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12462$4aEQL
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6516$4aEQL)
        (file-exists? . g$6515$4aEQL)
        (make-i/o-write-error . g$7186$4aEQL)
        (make-i/o-read-error . g$7172$4aEQL)
        (make-i/o-port-error . g$7291$4aEQL)
        (make-i/o-invalid-position-error . g$7201$4aEQL)
        (make-i/o-filename-error . g$7218$4aEQL)
        (make-i/o-file-protection-error . g$7234$4aEQL)
        (make-i/o-file-is-read-only-error . g$7248$4aEQL)
        (make-i/o-file-does-not-exist-error . g$7276$4aEQL)
        (make-i/o-file-already-exists-error . g$7262$4aEQL)
        (make-i/o-error . g$7158$4aEQL)
        (i/o-write-error? . g$7187$4aEQL)
        (i/o-read-error? . g$7173$4aEQL)
        (i/o-port-error? . g$7293$4aEQL)
        (i/o-invalid-position-error? . g$7203$4aEQL)
        (i/o-error-position . g$7204$4aEQL)
        (i/o-filename-error? . g$7220$4aEQL)
        (i/o-file-protection-error? . g$7235$4aEQL)
        (i/o-file-is-read-only-error? . g$7249$4aEQL)
        (i/o-file-does-not-exist-error? . g$7277$4aEQL)
        (i/o-file-already-exists-error? . g$7263$4aEQL)
        (i/o-error? . g$7159$4aEQL)
        (i/o-error-port . g$7294$4aEQL)
        (i/o-error-filename . g$7221$4aEQL)
        (&i/o-port . g$11940$4aEQL)
        (&i/o-file-does-not-exist . g$11939$4aEQL)
        (&i/o-file-already-exists . g$11938$4aEQL)
        (&i/o-file-is-read-only . g$11937$4aEQL)
        (&i/o-file-protection . g$11936$4aEQL)
        (&i/o-filename . g$11935$4aEQL)
        (&i/o-invalid-position . g$11934$4aEQL)
        (&i/o-write . g$11933$4aEQL)
        (&i/o-read . g$11932$4aEQL)
        (&i/o . g$11931$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12463$4aEQL
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12317$4aEQL)
        (vector-sort . g$12316$4aEQL)
        (list-sort . g$6880$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12464$4aEQL
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$12089$4aEQL)
        (vector? . g$12088$4aEQL)
        (vector-set! . g$12087$4aEQL)
        (vector-ref . g$12086$4aEQL)
        (vector-map . g$12085$4aEQL)
        (vector-length . g$12084$4aEQL)
        (vector-for-each . g$12083$4aEQL)
        (vector-fill! . g$12082$4aEQL)
        (vector->list . g$12081$4aEQL)
        (vector . g$12080$4aEQL)
        (values . g$12079$4aEQL)
        (truncate . g$12078$4aEQL)
        (tan . g$12077$4aEQL)
        (symbol? . g$12076$4aEQL)
        (symbol=? . g$6042$4aEQL)
        (symbol->string . g$12075$4aEQL)
        (substring . g$12074$4aEQL)
        (string? . g$12073$4aEQL)
        (string>? . g$6039$4aEQL)
        (string>=? . g$6041$4aEQL)
        (string=? . g$6037$4aEQL)
        (string<? . g$6038$4aEQL)
        (string<=? . g$6040$4aEQL)
        (string-ref . g$12072$4aEQL)
        (string-length . g$12071$4aEQL)
        (string-for-each . g$12070$4aEQL)
        (string-copy . g$12069$4aEQL)
        (string-append . g$12068$4aEQL)
        (string->symbol . g$12067$4aEQL)
        (string->number . g$12066$4aEQL)
        (string->list . g$12065$4aEQL)
        (string . g$12064$4aEQL)
        (sqrt . g$12063$4aEQL)
        (sin . g$12062$4aEQL)
        (round . g$12061$4aEQL)
        (reverse . g$12060$4aEQL)
        (real? . g$12059$4aEQL)
        (real-valued? . g$12058$4aEQL)
        (real-part . g$12057$4aEQL)
        (rationalize . g$6083$4aEQL)
        (rational? . g$12056$4aEQL)
        (rational-valued? . g$12055$4aEQL)
        (procedure? . g$12054$4aEQL)
        (positive? . g$12053$4aEQL)
        (pair? . g$12052$4aEQL)
        (odd? . g$12051$4aEQL)
        (numerator . g$12050$4aEQL)
        (number? . g$12049$4aEQL)
        (number->string . g$12048$4aEQL)
        (null? . g$12047$4aEQL)
        (not . g$12046$4aEQL)
        (negative? . g$12045$4aEQL)
        (nan? . g$12044$4aEQL)
        (min . g$12043$4aEQL)
        (max . g$12042$4aEQL)
        (map . g$5857$4aEQL)
        (make-vector . g$12041$4aEQL)
        (make-string . g$12040$4aEQL)
        (make-rectangular . g$12039$4aEQL)
        (make-polar . g$12038$4aEQL)
        (magnitude . g$12037$4aEQL)
        (log . g$12036$4aEQL)
        (list? . g$12035$4aEQL)
        (list-tail . g$5837$4aEQL)
        (list-ref . g$5838$4aEQL)
        (list->vector . g$12034$4aEQL)
        (list->string . g$12033$4aEQL)
        (list . g$12032$4aEQL)
        (length . g$12031$4aEQL)
        (lcm . g$12030$4aEQL)
        (integer? . g$12029$4aEQL)
        (integer-valued? . g$12028$4aEQL)
        (integer->char . g$12027$4aEQL)
        (infinite? . g$12026$4aEQL)
        (inexact? . g$12025$4aEQL)
        (inexact . g$12024$4aEQL)
        (imag-part . g$12023$4aEQL)
        (gcd . g$12022$4aEQL)
        (for-each . g$5858$4aEQL)
        (floor . g$12021$4aEQL)
        (finite? . g$12020$4aEQL)
        (expt . g$12019$4aEQL)
        (exp . g$12018$4aEQL)
        (exact? . g$12017$4aEQL)
        (exact-integer-sqrt . g$12016$4aEQL)
        (exact . g$12015$4aEQL)
        (even? . g$12014$4aEQL)
        (error . g$12013$4aEQL)
        (eqv? . g$12012$4aEQL)
        (equal? . g$12011$4aEQL)
        (eq? . g$12010$4aEQL)
        (dynamic-wind . g$12009$4aEQL)
        (div0-and-mod0 . g$12008$4aEQL)
        (mod0 . g$12007$4aEQL)
        (div0 . g$12006$4aEQL)
        (div-and-mod . g$12005$4aEQL)
        (mod . g$12004$4aEQL)
        (div . g$12003$4aEQL)
        (denominator . g$12002$4aEQL)
        (cos . g$12001$4aEQL)
        (cons . g$12000$4aEQL)
        (complex? . g$11999$4aEQL)
        (char? . g$11998$4aEQL)
        (char>? . g$6080$4aEQL)
        (char>=? . g$6082$4aEQL)
        (char=? . g$6078$4aEQL)
        (char<? . g$6079$4aEQL)
        (char<=? . g$6081$4aEQL)
        (char->integer . g$11997$4aEQL)
        (ceiling . g$11996$4aEQL)
        (call-with-values . g$11995$4aEQL)
        (call/cc . g$11994$4aEQL)
        (call-with-current-continuation . g$11993$4aEQL)
        (cddddr . g$6002$4aEQL)
        (cdddar . g$6001$4aEQL)
        (cddadr . g$6000$4aEQL)
        (cddaar . g$5999$4aEQL)
        (cdaddr . g$5998$4aEQL)
        (cdadar . g$5997$4aEQL)
        (cdaadr . g$5996$4aEQL)
        (cdaaar . g$5995$4aEQL)
        (cadddr . g$5994$4aEQL)
        (caddar . g$5993$4aEQL)
        (cadadr . g$5992$4aEQL)
        (cadaar . g$5991$4aEQL)
        (caaddr . g$5990$4aEQL)
        (caadar . g$5989$4aEQL)
        (caaadr . g$5988$4aEQL)
        (caaaar . g$5987$4aEQL)
        (cdddr . g$5986$4aEQL)
        (cddar . g$5985$4aEQL)
        (cdadr . g$5984$4aEQL)
        (cdaar . g$5983$4aEQL)
        (caddr . g$5982$4aEQL)
        (cadar . g$5981$4aEQL)
        (caadr . g$5980$4aEQL)
        (caaar . g$5979$4aEQL)
        (cddr . g$5978$4aEQL)
        (cdar . g$5977$4aEQL)
        (cadr . g$5976$4aEQL)
        (caar . g$5975$4aEQL)
        (cdr . g$11992$4aEQL)
        (car . g$11991$4aEQL)
        (boolean? . g$11990$4aEQL)
        (boolean=? . g$6043$4aEQL)
        (atan . g$11989$4aEQL)
        (assertion-violation . g$11988$4aEQL)
        (asin . g$11987$4aEQL)
        (apply . g$11986$4aEQL)
        (append . g$11985$4aEQL)
        (angle . g$11984$4aEQL)
        (acos . g$11983$4aEQL)
        (abs . g$11982$4aEQL)
        (/ . g$11981$4aEQL)
        (* . g$11980$4aEQL)
        (- . g$11979$4aEQL)
        (+ . g$11978$4aEQL)
        (>= . g$11977$4aEQL)
        (> . g$11976$4aEQL)
        (= . g$11975$4aEQL)
        (<= . g$11974$4aEQL)
        (< . g$11973$4aEQL)
        (unquote-splicing . g$11892$4aEQL)
        (unquote . g$11891$4aEQL)
        (_ . g$11890$4aEQL)
        (else . g$11889$4aEQL)
        (=> . g$11888$4aEQL)
        (... . g$11887$4aEQL)
        (assert . g$11886$4aEQL)
        (or . g$11882$4aEQL)
        (and . g$11881$4aEQL)
        (cond . g$11879$4aEQL)
        (let* . g$11878$4aEQL)
        (let . g$11877$4aEQL)
        (identifier-syntax . g$11876$4aEQL)
        (quasiquote . g$11873$4aEQL)
        (syntax-rules . g$11872$4aEQL)
        (let-values . g$11868$4aEQL)
        (let*-values . g$11867$4aEQL)
        (case . g$11863$4aEQL)
        (if . g$11859$4aEQL)
        (letrec* . g$11858$4aEQL)
        (letrec . g$11857$4aEQL)
        (lambda . g$11854$4aEQL)
        (quote . g$11851$4aEQL)
        (letrec-syntax . g$11849$4aEQL)
        (let-syntax . g$11848$4aEQL)
        (set! . g$11847$4aEQL)
        (begin . g$11843$4aEQL)
        (define-syntax . g$11841$4aEQL)
        (define . g$11840$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12465$4aEQL
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5862$4aEQL)
        (remv . g$5863$4aEQL)
        (remp . g$5843$4aEQL)
        (remq . g$5864$4aEQL)
        (partition . g$5842$4aEQL)
        (memv . g$5850$4aEQL)
        (memq . g$5849$4aEQL)
        (memp . g$5852$4aEQL)
        (member . g$5851$4aEQL)
        (exists . g$5856$4aEQL)
        (for-all . g$5855$4aEQL)
        (fold-right . g$5861$4aEQL)
        (fold-left . g$5860$4aEQL)
        (find . g$5841$4aEQL)
        (filter . g$5844$4aEQL)
        (cons* . g$5859$4aEQL)
        (assv . g$5846$4aEQL)
        (assq . g$5845$4aEQL)
        (assp . g$5848$4aEQL)
        (assoc . g$5847$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12466$4aEQL
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7358$4aEQL)
        (call-with-input-file . g$7357$4aEQL)
        (write-char . g$12303$4aEQL)
        (write . g$12302$4aEQL)
        (with-output-to-file . g$7356$4aEQL)
        (with-input-from-file . g$7355$4aEQL)
        (read-char . g$12301$4aEQL)
        (read . g$12300$4aEQL)
        (peek-char . g$12299$4aEQL)
        (open-output-file . g$12298$4aEQL)
        (open-input-file . g$12297$4aEQL)
        (newline . g$12296$4aEQL)
        (display . g$12295$4aEQL)
        (close-output-port . g$12294$4aEQL)
        (close-input-port . g$12293$4aEQL)
        (eof-object? . g$12292$4aEQL)
        (eof-object . g$12291$4aEQL)
        (current-error-port . g$12290$4aEQL)
        (current-output-port . g$12289$4aEQL)
        (current-input-port . g$12288$4aEQL)
        (output-port? . g$12287$4aEQL)
        (input-port? . g$12286$4aEQL)
        (make-i/o-write-error . g$7186$4aEQL)
        (make-i/o-read-error . g$7172$4aEQL)
        (make-i/o-port-error . g$7291$4aEQL)
        (make-i/o-invalid-position-error . g$7201$4aEQL)
        (make-i/o-filename-error . g$7218$4aEQL)
        (make-i/o-file-protection-error . g$7234$4aEQL)
        (make-i/o-file-is-read-only-error . g$7248$4aEQL)
        (make-i/o-file-does-not-exist-error . g$7276$4aEQL)
        (make-i/o-file-already-exists-error . g$7262$4aEQL)
        (make-i/o-error . g$7158$4aEQL)
        (i/o-write-error? . g$7187$4aEQL)
        (i/o-read-error? . g$7173$4aEQL)
        (i/o-port-error? . g$7293$4aEQL)
        (i/o-invalid-position-error? . g$7203$4aEQL)
        (i/o-error-position . g$7204$4aEQL)
        (i/o-filename-error? . g$7220$4aEQL)
        (i/o-file-protection-error? . g$7235$4aEQL)
        (i/o-file-is-read-only-error? . g$7249$4aEQL)
        (i/o-file-does-not-exist-error? . g$7277$4aEQL)
        (i/o-file-already-exists-error? . g$7263$4aEQL)
        (i/o-error? . g$7159$4aEQL)
        (i/o-error-port . g$7294$4aEQL)
        (i/o-error-filename . g$7221$4aEQL)
        (&i/o-port . g$11940$4aEQL)
        (&i/o-file-does-not-exist . g$11939$4aEQL)
        (&i/o-file-already-exists . g$11938$4aEQL)
        (&i/o-file-is-read-only . g$11937$4aEQL)
        (&i/o-file-protection . g$11936$4aEQL)
        (&i/o-filename . g$11935$4aEQL)
        (&i/o-invalid-position . g$11934$4aEQL)
        (&i/o-write . g$11933$4aEQL)
        (&i/o-read . g$11932$4aEQL)
        (&i/o . g$11931$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12467$4aEQL
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12246$4aEQL)
        (utf32->string . g$12210$4aEQL)
        (utf16->string . g$12209$4aEQL)
        (utf8->string . g$12208$4aEQL)
        (uint-list->bytevector . g$12207$4aEQL)
        (u8-list->bytevector . g$12206$4aEQL)
        (string->utf8 . g$12205$4aEQL)
        (string->utf32 . g$12204$4aEQL)
        (string->utf16 . g$12203$4aEQL)
        (sint-list->bytevector . g$12202$4aEQL)
        (native-endianness . g$6522$4aEQL)
        (bytevector? . g$12201$4aEQL)
        (bytevector=? . g$12200$4aEQL)
        (bytevector-uint-set! . g$12199$4aEQL)
        (bytevector-uint-ref . g$12198$4aEQL)
        (bytevector-u8-set! . g$12197$4aEQL)
        (bytevector-u8-ref . g$12196$4aEQL)
        (bytevector-u64-set! . g$6543$4aEQL)
        (bytevector-u64-ref . g$6539$4aEQL)
        (bytevector-u64-native-set! . g$6545$4aEQL)
        (bytevector-u64-native-ref . g$6541$4aEQL)
        (bytevector-u32-set! . g$6535$4aEQL)
        (bytevector-u32-ref . g$6531$4aEQL)
        (bytevector-u32-native-set! . g$6537$4aEQL)
        (bytevector-u32-native-ref . g$6533$4aEQL)
        (bytevector-u16-set! . g$6527$4aEQL)
        (bytevector-u16-ref . g$6523$4aEQL)
        (bytevector-u16-native-set! . g$6529$4aEQL)
        (bytevector-u16-native-ref . g$6525$4aEQL)
        (bytevector-sint-set! . g$12195$4aEQL)
        (bytevector-sint-ref . g$12194$4aEQL)
        (bytevector-s8-set! . g$12193$4aEQL)
        (bytevector-s8-ref . g$12192$4aEQL)
        (bytevector-s64-set! . g$6544$4aEQL)
        (bytevector-s64-ref . g$6540$4aEQL)
        (bytevector-s64-native-set! . g$6546$4aEQL)
        (bytevector-s64-native-ref . g$6542$4aEQL)
        (bytevector-s32-set! . g$6536$4aEQL)
        (bytevector-s32-ref . g$6532$4aEQL)
        (bytevector-s32-native-set! . g$6538$4aEQL)
        (bytevector-s32-native-ref . g$6534$4aEQL)
        (bytevector-s16-set! . g$6528$4aEQL)
        (bytevector-s16-ref . g$6524$4aEQL)
        (bytevector-s16-native-set! . g$6530$4aEQL)
        (bytevector-s16-native-ref . g$6526$4aEQL)
        (bytevector-length . g$12191$4aEQL)
        (bytevector-ieee-single-set! . g$12190$4aEQL)
        (bytevector-ieee-single-ref . g$12189$4aEQL)
        (bytevector-ieee-single-native-set! . g$6549$4aEQL)
        (bytevector-ieee-single-native-ref . g$6547$4aEQL)
        (bytevector-ieee-double-set! . g$12188$4aEQL)
        (bytevector-ieee-double-ref . g$12187$4aEQL)
        (bytevector-ieee-double-native-set! . g$6550$4aEQL)
        (bytevector-ieee-double-native-ref . g$6548$4aEQL)
        (bytevector-fill! . g$12186$4aEQL)
        (bytevector-copy! . g$12185$4aEQL)
        (bytevector-copy . g$12184$4aEQL)
        (bytevector->uint-list . g$12183$4aEQL)
        (bytevector->u8-list . g$12182$4aEQL)
        (bytevector->sint-list . g$12181$4aEQL)
        (endianness . g$11885$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12468$4aEQL
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12353$4aEQL)
        (string-titlecase . g$12352$4aEQL)
        (string-normalize-nfkd . g$12351$4aEQL)
        (string-normalize-nfkc . g$12350$4aEQL)
        (string-normalize-nfd . g$12349$4aEQL)
        (string-normalize-nfc . g$12348$4aEQL)
        (string-foldcase . g$12347$4aEQL)
        (string-downcase . g$12346$4aEQL)
        (string-ci>? . g$6940$4aEQL)
        (string-ci>=? . g$6942$4aEQL)
        (string-ci=? . g$6938$4aEQL)
        (string-ci<? . g$6939$4aEQL)
        (string-ci<=? . g$6941$4aEQL)
        (char-whitespace? . g$12345$4aEQL)
        (char-upper-case? . g$12344$4aEQL)
        (char-title-case? . g$12343$4aEQL)
        (char-numeric? . g$12342$4aEQL)
        (char-lower-case? . g$12341$4aEQL)
        (char-general-category . g$12340$4aEQL)
        (char-upcase . g$12339$4aEQL)
        (char-titlecase . g$12338$4aEQL)
        (char-foldcase . g$12337$4aEQL)
        (char-downcase . g$12336$4aEQL)
        (char-ci>? . g$6979$4aEQL)
        (char-ci>=? . g$6981$4aEQL)
        (char-ci=? . g$6977$4aEQL)
        (char-ci<? . g$6978$4aEQL)
        (char-ci<=? . g$6980$4aEQL)
        (char-alphabetic? . g$12335$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12469$4aEQL
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12218$4aEQL)
        (raise-continuable . g$12217$4aEQL)
        (raise . g$12216$4aEQL)
        (guard . g$11900$4aEQL)
        (else . g$11889$4aEQL)
        (=> . g$11888$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12470$4aEQL
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7041$4aEQL)
        (bitwise-reverse-bit-field . g$12099$4aEQL)
        (bitwise-length . g$12098$4aEQL)
        (bitwise-if . g$7035$4aEQL)
        (bitwise-first-bit-set . g$12097$4aEQL)
        (bitwise-copy-bit-field . g$7038$4aEQL)
        (bitwise-copy-bit . g$7036$4aEQL)
        (bitwise-bit-set? . g$12096$4aEQL)
        (bitwise-bit-field . g$7037$4aEQL)
        (bitwise-bit-count . g$12095$4aEQL)
        (bitwise-xor . g$12094$4aEQL)
        (bitwise-ior . g$12093$4aEQL)
        (bitwise-and . g$12092$4aEQL)
        (bitwise-not . g$12091$4aEQL)
        (bitwise-arithmetic-shift-right . g$7040$4aEQL)
        (bitwise-arithmetic-shift-left . g$7039$4aEQL)
        (bitwise-arithmetic-shift . g$12090$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12471$4aEQL
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12134$4aEQL)
        (fxxor . g$12133$4aEQL)
        (fxrotate-bit-field . g$7076$4aEQL)
        (fxreverse-bit-field . g$12132$4aEQL)
        (fxpositive? . g$12131$4aEQL)
        (fxodd? . g$12130$4aEQL)
        (fxnot . g$12129$4aEQL)
        (fxnegative? . g$12128$4aEQL)
        (fxmod0 . g$12127$4aEQL)
        (fxmod . g$12126$4aEQL)
        (fxmin . g$12125$4aEQL)
        (fxmax . g$12124$4aEQL)
        (fxlength . g$12123$4aEQL)
        (fxior . g$12122$4aEQL)
        (fxif . g$7070$4aEQL)
        (fxfirst-bit-set . g$12121$4aEQL)
        (fxeven? . g$12120$4aEQL)
        (fxdiv0-and-mod0 . g$12119$4aEQL)
        (fxdiv0 . g$12118$4aEQL)
        (fxdiv-and-mod . g$12117$4aEQL)
        (fxdiv . g$12116$4aEQL)
        (fxcopy-bit-field . g$7073$4aEQL)
        (fxcopy-bit . g$7071$4aEQL)
        (fxbit-set? . g$12115$4aEQL)
        (fxbit-field . g$7072$4aEQL)
        (fxbit-count . g$12114$4aEQL)
        (fxarithmetic-shift-right . g$7075$4aEQL)
        (fxarithmetic-shift-left . g$7074$4aEQL)
        (fxarithmetic-shift . g$12113$4aEQL)
        (fxand . g$12112$4aEQL)
        (fx>? . g$12111$4aEQL)
        (fx>=? . g$12110$4aEQL)
        (fx=? . g$12109$4aEQL)
        (fx<? . g$12108$4aEQL)
        (fx<=? . g$12107$4aEQL)
        (fx-/carry . g$7068$4aEQL)
        (fx- . g$12106$4aEQL)
        (fx+/carry . g$7069$4aEQL)
        (fx+ . g$12105$4aEQL)
        (fx*/carry . g$7067$4aEQL)
        (fx* . g$12104$4aEQL)
        (greatest-fixnum . g$12103$4aEQL)
        (least-fixnum . g$12102$4aEQL)
        (fixnum-width . g$12101$4aEQL)
        (fixnum? . g$12100$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12472$4aEQL
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7144$4aEQL)
        (no-infinities-violation? . g$7130$4aEQL)
        (make-no-nans-violation . g$7143$4aEQL)
        (make-no-infinities-violation . g$7129$4aEQL)
        (real->flonum . g$12180$4aEQL)
        (flzero? . g$12179$4aEQL)
        (fltruncate . g$12178$4aEQL)
        (fltan . g$12177$4aEQL)
        (flsqrt . g$12176$4aEQL)
        (flsin . g$12175$4aEQL)
        (flround . g$12174$4aEQL)
        (flpositive? . g$12173$4aEQL)
        (flonum? . g$12172$4aEQL)
        (flodd? . g$12171$4aEQL)
        (flnumerator . g$12170$4aEQL)
        (flnegative? . g$12169$4aEQL)
        (flnan? . g$12168$4aEQL)
        (flmod0 . g$12167$4aEQL)
        (flmod . g$12166$4aEQL)
        (flmin . g$12165$4aEQL)
        (flmax . g$12164$4aEQL)
        (fllog . g$12163$4aEQL)
        (flinteger? . g$12162$4aEQL)
        (flinfinite? . g$12161$4aEQL)
        (flfloor . g$12160$4aEQL)
        (flfinite? . g$12159$4aEQL)
        (flexpt . g$12158$4aEQL)
        (flexp . g$12157$4aEQL)
        (fleven? . g$12156$4aEQL)
        (fldiv0-and-mod0 . g$12155$4aEQL)
        (fldiv0 . g$12154$4aEQL)
        (fldiv-and-mod . g$12153$4aEQL)
        (fldiv . g$12152$4aEQL)
        (fldenominator . g$12151$4aEQL)
        (flcos . g$12150$4aEQL)
        (flceiling . g$12149$4aEQL)
        (flatan . g$12148$4aEQL)
        (flasin . g$12147$4aEQL)
        (flacos . g$12146$4aEQL)
        (flabs . g$12145$4aEQL)
        (fl>? . g$12144$4aEQL)
        (fl>=? . g$12143$4aEQL)
        (fl=? . g$12142$4aEQL)
        (fl<? . g$12141$4aEQL)
        (fl<=? . g$12140$4aEQL)
        (fl/ . g$12139$4aEQL)
        (fl- . g$12138$4aEQL)
        (fl+ . g$12137$4aEQL)
        (fl* . g$12136$4aEQL)
        (fixnum->flonum . g$12135$4aEQL)
        (&no-nans . g$11944$4aEQL)
        (&no-infinities . g$11943$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12473$4aEQL
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12315$4aEQL)
        (string-ci-hash . g$12314$4aEQL)
        (string-hash . g$12313$4aEQL)
        (equal-hash . g$12312$4aEQL)
        (hashtable-equivalence-function . g$12311$4aEQL)
        (make-hashtable . g$12310$4aEQL)
        (hashtable-hash-function . g$12309$4aEQL)
        (make-eqv-hashtable . g$6484$4aEQL)
        (make-eq-hashtable . g$6483$4aEQL)
        (hashtable? . g$12308$4aEQL)
        (hashtable-update! . g$6490$4aEQL)
        (hashtable-size . g$6485$4aEQL)
        (hashtable-set! . g$6487$4aEQL)
        (hashtable-ref . g$6486$4aEQL)
        (hashtable-mutable? . g$12307$4aEQL)
        (hashtable-keys . g$12306$4aEQL)
        (hashtable-entries . g$12305$4aEQL)
        (hashtable-delete! . g$6488$4aEQL)
        (hashtable-copy . g$12304$4aEQL)
        (hashtable-contains? . g$6489$4aEQL)
        (hashtable-clear! . g$6491$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12474$4aEQL
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12292$4aEQL)
        (eof-object . g$12291$4aEQL)
        (current-error-port . g$12290$4aEQL)
        (current-output-port . g$12289$4aEQL)
        (current-input-port . g$12288$4aEQL)
        (output-port? . g$12287$4aEQL)
        (input-port? . g$12286$4aEQL)
        (utf-8-codec . g$12285$4aEQL)
        (utf-16-codec . g$12284$4aEQL)
        (transcoder-error-handling-mode . g$12283$4aEQL)
        (transcoder-eol-style . g$12282$4aEQL)
        (transcoder-codec . g$12281$4aEQL)
        (transcoded-port . g$12280$4aEQL)
        (textual-port? . g$12279$4aEQL)
        (string->bytevector . g$12278$4aEQL)
        (standard-output-port . g$12277$4aEQL)
        (standard-input-port . g$12276$4aEQL)
        (standard-error-port . g$12275$4aEQL)
        (set-port-position! . g$12274$4aEQL)
        (put-u8 . g$12273$4aEQL)
        (put-string . g$12272$4aEQL)
        (put-datum . g$12271$4aEQL)
        (put-char . g$12270$4aEQL)
        (put-bytevector . g$12269$4aEQL)
        (port? . g$7331$4aEQL)
        (port-transcoder . g$12268$4aEQL)
        (port-position . g$12267$4aEQL)
        (port-has-set-port-position!? . g$12266$4aEQL)
        (port-has-port-position? . g$12265$4aEQL)
        (port-eof? . g$12264$4aEQL)
        (output-port-buffer-mode . g$12263$4aEQL)
        (open-string-output-port . g$7330$4aEQL)
        (open-string-input-port . g$12262$4aEQL)
        (open-file-output-port . g$12261$4aEQL)
        (open-file-input/output-port . g$12260$4aEQL)
        (open-file-input-port . g$12259$4aEQL)
        (open-bytevector-output-port . g$12258$4aEQL)
        (open-bytevector-input-port . g$12257$4aEQL)
        (native-transcoder . g$12256$4aEQL)
        (native-eol-style . g$12255$4aEQL)
        (make-transcoder . g$12254$4aEQL)
        (latin-1-codec . g$12253$4aEQL)
        (make-i/o-write-error . g$7186$4aEQL)
        (make-i/o-read-error . g$7172$4aEQL)
        (make-i/o-port-error . g$7291$4aEQL)
        (make-i/o-invalid-position-error . g$7201$4aEQL)
        (make-i/o-filename-error . g$7218$4aEQL)
        (make-i/o-file-protection-error . g$7234$4aEQL)
        (make-i/o-file-is-read-only-error . g$7248$4aEQL)
        (make-i/o-file-does-not-exist-error . g$7276$4aEQL)
        (make-i/o-file-already-exists-error . g$7262$4aEQL)
        (make-i/o-error . g$7158$4aEQL)
        (make-i/o-encoding-error . g$7322$4aEQL)
        (make-i/o-decoding-error . g$7307$4aEQL)
        (make-custom-textual-output-port . g$12252$4aEQL)
        (make-custom-textual-input/output-port . g$12251$4aEQL)
        (make-custom-textual-input-port . g$12250$4aEQL)
        (make-custom-binary-output-port . g$12249$4aEQL)
        (make-custom-binary-input/output-port . g$12248$4aEQL)
        (make-custom-binary-input-port . g$12247$4aEQL)
        (lookahead-u8 . g$12245$4aEQL)
        (lookahead-char . g$12244$4aEQL)
        (i/o-write-error? . g$7187$4aEQL)
        (i/o-read-error? . g$7173$4aEQL)
        (i/o-port-error? . g$7293$4aEQL)
        (i/o-invalid-position-error? . g$7203$4aEQL)
        (i/o-error-position . g$7204$4aEQL)
        (i/o-filename-error? . g$7220$4aEQL)
        (i/o-file-protection-error? . g$7235$4aEQL)
        (i/o-file-is-read-only-error? . g$7249$4aEQL)
        (i/o-file-does-not-exist-error? . g$7277$4aEQL)
        (i/o-file-already-exists-error? . g$7263$4aEQL)
        (i/o-error? . g$7159$4aEQL)
        (i/o-error-port . g$7294$4aEQL)
        (i/o-error-filename . g$7221$4aEQL)
        (i/o-encoding-error? . g$7324$4aEQL)
        (i/o-encoding-error-char . g$7325$4aEQL)
        (i/o-decoding-error? . g$7308$4aEQL)
        (get-u8 . g$12243$4aEQL)
        (get-string-n! . g$12242$4aEQL)
        (get-string-n . g$12241$4aEQL)
        (get-string-all . g$12240$4aEQL)
        (get-line . g$12239$4aEQL)
        (get-datum . g$12238$4aEQL)
        (get-char . g$12237$4aEQL)
        (get-bytevector-some . g$12236$4aEQL)
        (get-bytevector-n! . g$12235$4aEQL)
        (get-bytevector-n . g$12234$4aEQL)
        (get-bytevector-all . g$12233$4aEQL)
        (flush-output-port . g$12232$4aEQL)
        (close-port . g$12231$4aEQL)
        (call-with-string-output-port . g$7332$4aEQL)
        (call-with-port . g$12230$4aEQL)
        (call-with-bytevector-output-port . g$12229$4aEQL)
        (bytevector->string . g$12228$4aEQL)
        (buffer-mode? . g$12227$4aEQL)
        (binary-port? . g$12226$4aEQL)
        (&i/o-encoding . g$11942$4aEQL)
        (&i/o-decoding . g$11941$4aEQL)
        (&i/o-port . g$11940$4aEQL)
        (&i/o-file-does-not-exist . g$11939$4aEQL)
        (&i/o-file-already-exists . g$11938$4aEQL)
        (&i/o-file-is-read-only . g$11937$4aEQL)
        (&i/o-file-protection . g$11936$4aEQL)
        (&i/o-filename . g$11935$4aEQL)
        (&i/o-invalid-position . g$11934$4aEQL)
        (&i/o-write . g$11933$4aEQL)
        (&i/o-read . g$11932$4aEQL)
        (&i/o . g$11931$4aEQL)
        (error-handling-mode . g$11904$4aEQL)
        (file-options . g$11903$4aEQL)
        (buffer-mode . g$11902$4aEQL)
        (eol-style . g$11901$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12475$4aEQL
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7416$4aEQL)
        (enum-set=? . g$7423$4aEQL)
        (enum-set-universe . g$7417$4aEQL)
        (enum-set-union . g$7424$4aEQL)
        (enum-set-subset? . g$7422$4aEQL)
        (enum-set-projection . g$7428$4aEQL)
        (enum-set-member? . g$7421$4aEQL)
        (enum-set-intersection . g$7425$4aEQL)
        (enum-set-indexer . g$7418$4aEQL)
        (enum-set-difference . g$7426$4aEQL)
        (enum-set-constructor . g$7419$4aEQL)
        (enum-set-complement . g$7427$4aEQL)
        (enum-set->list . g$7420$4aEQL)
        (define-enumeration . g$11915$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12476$4aEQL
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6770$4aEQL)
        (warning? . g$6681$4aEQL)
        (violation? . g$6723$4aEQL)
        (undefined-violation? . g$6847$4aEQL)
        (syntax-violation? . g$6831$4aEQL)
        (syntax-violation-subform . g$6833$4aEQL)
        (syntax-violation-form . g$6832$4aEQL)
        (syntax-violation . g$8829$4aEQL)
        (simple-conditions . g$12215$4aEQL)
        (serious-condition? . g$6695$4aEQL)
        (non-continuable-violation? . g$6785$4aEQL)
        (message-condition? . g$6666$4aEQL)
        (make-who-condition . g$6768$4aEQL)
        (make-warning . g$6680$4aEQL)
        (make-violation . g$6722$4aEQL)
        (make-undefined-violation . g$6846$4aEQL)
        (make-syntax-violation . g$6828$4aEQL)
        (make-serious-condition . g$6694$4aEQL)
        (make-non-continuable-violation . g$6784$4aEQL)
        (make-message-condition . g$6664$4aEQL)
        (make-lexical-violation . g$6812$4aEQL)
        (make-irritants-condition . g$6751$4aEQL)
        (make-implementation-restriction-violation . g$6798$4aEQL)
        (make-error . g$6708$4aEQL)
        (make-assertion-violation . g$6736$4aEQL)
        (lexical-violation? . g$6813$4aEQL)
        (irritants-condition? . g$6753$4aEQL)
        (implementation-restriction-violation? . g$6799$4aEQL)
        (error? . g$6709$4aEQL)
        (condition-who . g$6771$4aEQL)
        (condition-predicate . g$12214$4aEQL)
        (condition-message . g$6667$4aEQL)
        (condition-irritants . g$6754$4aEQL)
        (condition-accessor . g$12213$4aEQL)
        (condition . g$12212$4aEQL)
        (assertion-violation? . g$6737$4aEQL)
        (condition? . g$12211$4aEQL)
        (&non-continuable . g$11930$4aEQL)
        (&undefined . g$11929$4aEQL)
        (&syntax . g$11928$4aEQL)
        (&lexical . g$11927$4aEQL)
        (&implementation-restriction . g$11926$4aEQL)
        (&who . g$11925$4aEQL)
        (&irritants . g$11924$4aEQL)
        (&assertion . g$11923$4aEQL)
        (&violation . g$11922$4aEQL)
        (&error . g$11921$4aEQL)
        (&serious . g$11920$4aEQL)
        (&warning . g$11919$4aEQL)
        (&message . g$11918$4aEQL)
        (&condition . g$11917$4aEQL)
        (define-condition-type . g$11916$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12477$4aEQL
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12327$4aEQL)
        (record-type-uid . g$12326$4aEQL)
        (record-type-sealed? . g$12325$4aEQL)
        (record-type-parent . g$12324$4aEQL)
        (record-type-opaque? . g$12323$4aEQL)
        (record-type-name . g$12322$4aEQL)
        (record-type-generative? . g$12321$4aEQL)
        (record-type-field-names . g$12320$4aEQL)
        (record-rtd . g$12319$4aEQL)
        (record-field-mutable? . g$12318$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12478$4aEQL
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12334$4aEQL)
        (record-predicate . g$12333$4aEQL)
        (record-mutator . g$12332$4aEQL)
        (record-constructor . g$12331$4aEQL)
        (record-accessor . g$12330$4aEQL)
        (make-record-type-descriptor . g$12329$4aEQL)
        (make-record-constructor-descriptor . g$12328$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12479$4aEQL
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11914$4aEQL)
        (parent-rtd . g$11913$4aEQL)
        (nongenerative . g$11912$4aEQL)
        (opaque . g$11911$4aEQL)
        (sealed . g$11910$4aEQL)
        (protocol . g$11909$4aEQL)
        (parent . g$11908$4aEQL)
        (immutable . g$11907$4aEQL)
        (mutable . g$11906$4aEQL)
        (fields . g$11905$4aEQL)
        (record-constructor-descriptor . g$11866$4aEQL)
        (record-type-descriptor . g$11865$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7115$4aEQL
      'g$12480$4aEQL
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8702$4aEQL)
        (&no-nans-rcd . g$12444$4aEQL)
        (&no-nans-rtd . g$12443$4aEQL)
        (&no-infinities-rcd . g$12442$4aEQL)
        (&no-infinities-rtd . g$12441$4aEQL)
        (&i/o-encoding-rcd . g$12440$4aEQL)
        (&i/o-encoding-rtd . g$12439$4aEQL)
        (&i/o-decoding-rcd . g$12438$4aEQL)
        (&i/o-decoding-rtd . g$12437$4aEQL)
        (&i/o-port-rcd . g$12436$4aEQL)
        (&i/o-port-rtd . g$12435$4aEQL)
        (&i/o-file-does-not-exist-rcd . g$12434$4aEQL)
        (&i/o-file-does-not-exist-rtd . g$12433$4aEQL)
        (&i/o-file-already-exists-rcd . g$12432$4aEQL)
        (&i/o-file-already-exists-rtd . g$12431$4aEQL)
        (&i/o-file-is-read-only-rcd . g$12430$4aEQL)
        (&i/o-file-is-read-only-rtd . g$12429$4aEQL)
        (&i/o-file-protection-rcd . g$12428$4aEQL)
        (&i/o-file-protection-rtd . g$12427$4aEQL)
        (&i/o-filename-rcd . g$12426$4aEQL)
        (&i/o-filename-rtd . g$12425$4aEQL)
        (&i/o-invalid-position-rcd . g$12424$4aEQL)
        (&i/o-invalid-position-rtd . g$12423$4aEQL)
        (&i/o-write-rcd . g$12422$4aEQL)
        (&i/o-write-rtd . g$12421$4aEQL)
        (&i/o-read-rcd . g$12420$4aEQL)
        (&i/o-read-rtd . g$12419$4aEQL)
        (&i/o-rcd . g$12418$4aEQL)
        (&i/o-rtd . g$12417$4aEQL)
        (&undefined-rcd . g$12416$4aEQL)
        (&undefined-rtd . g$12415$4aEQL)
        (&syntax-rcd . g$12414$4aEQL)
        (&syntax-rtd . g$12413$4aEQL)
        (&lexical-rcd . g$12412$4aEQL)
        (&lexical-rtd . g$12411$4aEQL)
        (&implementation-restriction-rcd . g$12410$4aEQL)
        (&implementation-restriction-rtd . g$12409$4aEQL)
        (&non-continuable-rcd . g$12408$4aEQL)
        (&non-continuable-rtd . g$12407$4aEQL)
        (&who-rcd . g$12406$4aEQL)
        (&who-rtd . g$12405$4aEQL)
        (&irritants-rcd . g$12404$4aEQL)
        (&irritants-rtd . g$12403$4aEQL)
        (&assertion-rcd . g$12402$4aEQL)
        (&assertion-rtd . g$12401$4aEQL)
        (&violation-rcd . g$12400$4aEQL)
        (&violation-rtd . g$12399$4aEQL)
        (&error-rcd . g$12398$4aEQL)
        (&error-rtd . g$12397$4aEQL)
        (&serious-rcd . g$12396$4aEQL)
        (&serious-rtd . g$12395$4aEQL)
        (&warning-rcd . g$12394$4aEQL)
        (&warning-rtd . g$12393$4aEQL)
        (&message-rcd . g$12392$4aEQL)
        (&message-rtd . g$12391$4aEQL)
        (&condition-rcd . g$12390$4aEQL)
        (&condition-rtd . g$12389$4aEQL)
        (library-letrec* . g$12388$4aEQL)
        (annotation-stripped . g$12387$4aEQL)
        (annotation-source . g$12386$4aEQL)
        (annotation-expression . g$12385$4aEQL)
        (annotation? . g$12384$4aEQL)
        (read-annotated . g$12383$4aEQL)
        (tanh . g$12382$4aEQL)
        (cosh . g$12381$4aEQL)
        (sinh . g$12380$4aEQL)
        (make-guid . g$12379$4aEQL)
        (unspecified? . g$12378$4aEQL)
        (make-trace . g$12377$4aEQL)
        (make-list . g$5840$4aEQL)
        (last-pair . g$5839$4aEQL)
        (load-r5rs . g$12376$4aEQL)
        (license . g$12375$4aEQL)
        (stacktrace . g$12374$4aEQL)
        (ironscheme-build . g$11808$4aEQL)
        (define-clr-class-internal . g$12373$4aEQL)
        (clr-field-set!-internal . g$12372$4aEQL)
        (clr-field-get-internal . g$12371$4aEQL)
        (clr-cast-internal . g$12370$4aEQL)
        (clr-call-internal . g$12369$4aEQL)
        (clr-new-internal . g$12368$4aEQL)
        (clr-new-array-internal . g$12367$4aEQL)
        (clr-is-internal . g$12366$4aEQL)
        (clr-reference-internal . g$12365$4aEQL)
        (clr-using-internal . g$12364$4aEQL)
        (syntax-error . g$8826$4aEQL)
        (syntax-dispatch . g$8697$4aEQL)
        (compile-core . g$12363$4aEQL)
        (eval-core . g$12362$4aEQL)
        (set-symbol-value! . g$12361$4aEQL)
        (symbol-value . g$12360$4aEQL)
        (ungensym . g$12359$4aEQL)
        (gensym . g$12358$4aEQL)
        (void . g$12357$4aEQL)
        (load-serialized-library . g$12356$4aEQL)
        (serialize-library . g$12355$4aEQL)
        (compile-system-libraries . g$11810$4aEQL)
        (compile->closure . g$11812$4aEQL)
        (compile . g$11811$4aEQL)
        (load . g$11807$4aEQL)
        (interaction-environment . g$8835$4aEQL)
        (char-ready? . g$12354$4aEQL)
        (string-upcase . g$12353$4aEQL)
        (string-titlecase . g$12352$4aEQL)
        (string-normalize-nfkd . g$12351$4aEQL)
        (string-normalize-nfkc . g$12350$4aEQL)
        (string-normalize-nfd . g$12349$4aEQL)
        (string-normalize-nfc . g$12348$4aEQL)
        (string-foldcase . g$12347$4aEQL)
        (string-downcase . g$12346$4aEQL)
        (string-ci>? . g$6940$4aEQL)
        (string-ci>=? . g$6942$4aEQL)
        (string-ci=? . g$6938$4aEQL)
        (string-ci<? . g$6939$4aEQL)
        (string-ci<=? . g$6941$4aEQL)
        (char-whitespace? . g$12345$4aEQL)
        (char-upper-case? . g$12344$4aEQL)
        (char-title-case? . g$12343$4aEQL)
        (char-numeric? . g$12342$4aEQL)
        (char-lower-case? . g$12341$4aEQL)
        (char-general-category . g$12340$4aEQL)
        (char-upcase . g$12339$4aEQL)
        (char-titlecase . g$12338$4aEQL)
        (char-foldcase . g$12337$4aEQL)
        (char-downcase . g$12336$4aEQL)
        (char-ci>? . g$6979$4aEQL)
        (char-ci>=? . g$6981$4aEQL)
        (char-ci=? . g$6977$4aEQL)
        (char-ci<? . g$6978$4aEQL)
        (char-ci<=? . g$6980$4aEQL)
        (char-alphabetic? . g$12335$4aEQL)
        (variable-transformer-procedure . g$8434$4aEQL)
        (variable-transformer? . g$8433$4aEQL)
        (make-variable-transformer . g$8432$4aEQL)
        (identifier? . g$8830$4aEQL)
        (generate-temporaries . g$8819$4aEQL)
        (free-identifier=? . g$8820$4aEQL)
        (syntax->datum . g$8832$4aEQL)
        (datum->syntax . g$8831$4aEQL)
        (bound-identifier=? . g$8821$4aEQL)
        (record-type-descriptor? . g$12334$4aEQL)
        (record-predicate . g$12333$4aEQL)
        (record-mutator . g$12332$4aEQL)
        (record-constructor . g$12331$4aEQL)
        (record-accessor . g$12330$4aEQL)
        (make-record-type-descriptor . g$12329$4aEQL)
        (make-record-constructor-descriptor . g$12328$4aEQL)
        (record? . g$12327$4aEQL)
        (record-type-uid . g$12326$4aEQL)
        (record-type-sealed? . g$12325$4aEQL)
        (record-type-parent . g$12324$4aEQL)
        (record-type-opaque? . g$12323$4aEQL)
        (record-type-name . g$12322$4aEQL)
        (record-type-generative? . g$12321$4aEQL)
        (record-type-field-names . g$12320$4aEQL)
        (record-rtd . g$12319$4aEQL)
        (record-field-mutable? . g$12318$4aEQL)
        (delete-file . g$6516$4aEQL)
        (file-exists? . g$6515$4aEQL)
        (vector-sort! . g$12317$4aEQL)
        (vector-sort . g$12316$4aEQL)
        (list-sort . g$6880$4aEQL)
        (symbol-hash . g$12315$4aEQL)
        (string-ci-hash . g$12314$4aEQL)
        (string-hash . g$12313$4aEQL)
        (equal-hash . g$12312$4aEQL)
        (hashtable-equivalence-function . g$12311$4aEQL)
        (make-hashtable . g$12310$4aEQL)
        (hashtable-hash-function . g$12309$4aEQL)
        (make-eqv-hashtable . g$6484$4aEQL)
        (make-eq-hashtable . g$6483$4aEQL)
        (hashtable? . g$12308$4aEQL)
        (hashtable-update! . g$6490$4aEQL)
        (hashtable-size . g$6485$4aEQL)
        (hashtable-set! . g$6487$4aEQL)
        (hashtable-ref . g$6486$4aEQL)
        (hashtable-mutable? . g$12307$4aEQL)
        (hashtable-keys . g$12306$4aEQL)
        (hashtable-entries . g$12305$4aEQL)
        (hashtable-delete! . g$6488$4aEQL)
        (hashtable-copy . g$12304$4aEQL)
        (hashtable-contains? . g$6489$4aEQL)
        (hashtable-clear! . g$6491$4aEQL)
        (call-with-output-file . g$7358$4aEQL)
        (call-with-input-file . g$7357$4aEQL)
        (write-char . g$12303$4aEQL)
        (write . g$12302$4aEQL)
        (with-output-to-file . g$7356$4aEQL)
        (with-input-from-file . g$7355$4aEQL)
        (read-char . g$12301$4aEQL)
        (read . g$12300$4aEQL)
        (peek-char . g$12299$4aEQL)
        (open-output-file . g$12298$4aEQL)
        (open-input-file . g$12297$4aEQL)
        (newline . g$12296$4aEQL)
        (display . g$12295$4aEQL)
        (close-output-port . g$12294$4aEQL)
        (close-input-port . g$12293$4aEQL)
        (eof-object? . g$12292$4aEQL)
        (eof-object . g$12291$4aEQL)
        (current-error-port . g$12290$4aEQL)
        (current-output-port . g$12289$4aEQL)
        (current-input-port . g$12288$4aEQL)
        (output-port? . g$12287$4aEQL)
        (input-port? . g$12286$4aEQL)
        (utf-8-codec . g$12285$4aEQL)
        (utf-16-codec . g$12284$4aEQL)
        (transcoder-error-handling-mode . g$12283$4aEQL)
        (transcoder-eol-style . g$12282$4aEQL)
        (transcoder-codec . g$12281$4aEQL)
        (transcoded-port . g$12280$4aEQL)
        (textual-port? . g$12279$4aEQL)
        (string->bytevector . g$12278$4aEQL)
        (standard-output-port . g$12277$4aEQL)
        (standard-input-port . g$12276$4aEQL)
        (standard-error-port . g$12275$4aEQL)
        (set-port-position! . g$12274$4aEQL)
        (put-u8 . g$12273$4aEQL)
        (put-string . g$12272$4aEQL)
        (put-datum . g$12271$4aEQL)
        (put-char . g$12270$4aEQL)
        (put-bytevector . g$12269$4aEQL)
        (port? . g$7331$4aEQL)
        (port-transcoder . g$12268$4aEQL)
        (port-position . g$12267$4aEQL)
        (port-has-set-port-position!? . g$12266$4aEQL)
        (port-has-port-position? . g$12265$4aEQL)
        (port-eof? . g$12264$4aEQL)
        (output-port-buffer-mode . g$12263$4aEQL)
        (open-string-output-port . g$7330$4aEQL)
        (open-string-input-port . g$12262$4aEQL)
        (open-file-output-port . g$12261$4aEQL)
        (open-file-input/output-port . g$12260$4aEQL)
        (open-file-input-port . g$12259$4aEQL)
        (open-bytevector-output-port . g$12258$4aEQL)
        (open-bytevector-input-port . g$12257$4aEQL)
        (native-transcoder . g$12256$4aEQL)
        (native-eol-style . g$12255$4aEQL)
        (make-transcoder . g$12254$4aEQL)
        (latin-1-codec . g$12253$4aEQL)
        (make-i/o-write-error . g$7186$4aEQL)
        (make-i/o-read-error . g$7172$4aEQL)
        (make-i/o-port-error . g$7291$4aEQL)
        (make-i/o-invalid-position-error . g$7201$4aEQL)
        (make-i/o-filename-error . g$7218$4aEQL)
        (make-i/o-file-protection-error . g$7234$4aEQL)
        (make-i/o-file-is-read-only-error . g$7248$4aEQL)
        (make-i/o-file-does-not-exist-error . g$7276$4aEQL)
        (make-i/o-file-already-exists-error . g$7262$4aEQL)
        (make-i/o-error . g$7158$4aEQL)
        (make-i/o-encoding-error . g$7322$4aEQL)
        (make-i/o-decoding-error . g$7307$4aEQL)
        (make-custom-textual-output-port . g$12252$4aEQL)
        (make-custom-textual-input/output-port . g$12251$4aEQL)
        (make-custom-textual-input-port . g$12250$4aEQL)
        (make-custom-binary-output-port . g$12249$4aEQL)
        (make-custom-binary-input/output-port . g$12248$4aEQL)
        (make-custom-binary-input-port . g$12247$4aEQL)
        (make-bytevector . g$12246$4aEQL)
        (lookahead-u8 . g$12245$4aEQL)
        (lookahead-char . g$12244$4aEQL)
        (i/o-write-error? . g$7187$4aEQL)
        (i/o-read-error? . g$7173$4aEQL)
        (i/o-port-error? . g$7293$4aEQL)
        (i/o-invalid-position-error? . g$7203$4aEQL)
        (i/o-error-position . g$7204$4aEQL)
        (i/o-filename-error? . g$7220$4aEQL)
        (i/o-file-protection-error? . g$7235$4aEQL)
        (i/o-file-is-read-only-error? . g$7249$4aEQL)
        (i/o-file-does-not-exist-error? . g$7277$4aEQL)
        (i/o-file-already-exists-error? . g$7263$4aEQL)
        (i/o-error? . g$7159$4aEQL)
        (i/o-error-port . g$7294$4aEQL)
        (i/o-error-filename . g$7221$4aEQL)
        (i/o-encoding-error? . g$7324$4aEQL)
        (i/o-encoding-error-char . g$7325$4aEQL)
        (i/o-decoding-error? . g$7308$4aEQL)
        (get-u8 . g$12243$4aEQL)
        (get-string-n! . g$12242$4aEQL)
        (get-string-n . g$12241$4aEQL)
        (get-string-all . g$12240$4aEQL)
        (get-line . g$12239$4aEQL)
        (get-datum . g$12238$4aEQL)
        (get-char . g$12237$4aEQL)
        (get-bytevector-some . g$12236$4aEQL)
        (get-bytevector-n! . g$12235$4aEQL)
        (get-bytevector-n . g$12234$4aEQL)
        (get-bytevector-all . g$12233$4aEQL)
        (flush-output-port . g$12232$4aEQL)
        (close-port . g$12231$4aEQL)
        (call-with-string-output-port . g$7332$4aEQL)
        (call-with-port . g$12230$4aEQL)
        (call-with-bytevector-output-port . g$12229$4aEQL)
        (bytevector->string . g$12228$4aEQL)
        (buffer-mode? . g$12227$4aEQL)
        (binary-port? . g$12226$4aEQL)
        (scheme-report-environment . g$8810$4aEQL)
        (quotient . g$6859$4aEQL)
        (null-environment . g$8809$4aEQL)
        (remainder . g$6860$4aEQL)
        (modulo . g$6861$4aEQL)
        (inexact->exact . g$12225$4aEQL)
        (force . g$6863$4aEQL)
        (exact->inexact . g$12224$4aEQL)
        (exit . g$12223$4aEQL)
        (command-line . g$11804$4aEQL)
        (string-fill! . g$12222$4aEQL)
        (string-set! . g$12221$4aEQL)
        (set-cdr! . g$12220$4aEQL)
        (set-car! . g$12219$4aEQL)
        (remove . g$5862$4aEQL)
        (remv . g$5863$4aEQL)
        (remp . g$5843$4aEQL)
        (remq . g$5864$4aEQL)
        (partition . g$5842$4aEQL)
        (memv . g$5850$4aEQL)
        (memq . g$5849$4aEQL)
        (memp . g$5852$4aEQL)
        (member . g$5851$4aEQL)
        (exists . g$5856$4aEQL)
        (for-all . g$5855$4aEQL)
        (fold-right . g$5861$4aEQL)
        (fold-left . g$5860$4aEQL)
        (find . g$5841$4aEQL)
        (filter . g$5844$4aEQL)
        (cons* . g$5859$4aEQL)
        (assv . g$5846$4aEQL)
        (assq . g$5845$4aEQL)
        (assp . g$5848$4aEQL)
        (assoc . g$5847$4aEQL)
        (with-exception-handler . g$12218$4aEQL)
        (raise-continuable . g$12217$4aEQL)
        (raise . g$12216$4aEQL)
        (eval . g$8812$4aEQL)
        (environment . g$8808$4aEQL)
        (make-enumeration . g$7416$4aEQL)
        (enum-set=? . g$7423$4aEQL)
        (enum-set-universe . g$7417$4aEQL)
        (enum-set-union . g$7424$4aEQL)
        (enum-set-subset? . g$7422$4aEQL)
        (enum-set-projection . g$7428$4aEQL)
        (enum-set-member? . g$7421$4aEQL)
        (enum-set-intersection . g$7425$4aEQL)
        (enum-set-indexer . g$7418$4aEQL)
        (enum-set-difference . g$7426$4aEQL)
        (enum-set-constructor . g$7419$4aEQL)
        (enum-set-complement . g$7427$4aEQL)
        (enum-set->list . g$7420$4aEQL)
        (who-condition? . g$6770$4aEQL)
        (warning? . g$6681$4aEQL)
        (violation? . g$6723$4aEQL)
        (undefined-violation? . g$6847$4aEQL)
        (syntax-violation? . g$6831$4aEQL)
        (syntax-violation-subform . g$6833$4aEQL)
        (syntax-violation-form . g$6832$4aEQL)
        (syntax-violation . g$8829$4aEQL)
        (simple-conditions . g$12215$4aEQL)
        (serious-condition? . g$6695$4aEQL)
        (non-continuable-violation? . g$6785$4aEQL)
        (message-condition? . g$6666$4aEQL)
        (make-who-condition . g$6768$4aEQL)
        (make-warning . g$6680$4aEQL)
        (make-violation . g$6722$4aEQL)
        (make-undefined-violation . g$6846$4aEQL)
        (make-syntax-violation . g$6828$4aEQL)
        (make-serious-condition . g$6694$4aEQL)
        (make-non-continuable-violation . g$6784$4aEQL)
        (make-message-condition . g$6664$4aEQL)
        (make-lexical-violation . g$6812$4aEQL)
        (make-irritants-condition . g$6751$4aEQL)
        (make-implementation-restriction-violation . g$6798$4aEQL)
        (make-error . g$6708$4aEQL)
        (make-assertion-violation . g$6736$4aEQL)
        (lexical-violation? . g$6813$4aEQL)
        (irritants-condition? . g$6753$4aEQL)
        (implementation-restriction-violation? . g$6799$4aEQL)
        (error? . g$6709$4aEQL)
        (condition-who . g$6771$4aEQL)
        (condition-predicate . g$12214$4aEQL)
        (condition-message . g$6667$4aEQL)
        (condition-irritants . g$6754$4aEQL)
        (condition-accessor . g$12213$4aEQL)
        (condition . g$12212$4aEQL)
        (assertion-violation? . g$6737$4aEQL)
        (condition? . g$12211$4aEQL)
        (utf32->string . g$12210$4aEQL)
        (utf16->string . g$12209$4aEQL)
        (utf8->string . g$12208$4aEQL)
        (uint-list->bytevector . g$12207$4aEQL)
        (u8-list->bytevector . g$12206$4aEQL)
        (string->utf8 . g$12205$4aEQL)
        (string->utf32 . g$12204$4aEQL)
        (string->utf16 . g$12203$4aEQL)
        (sint-list->bytevector . g$12202$4aEQL)
        (native-endianness . g$6522$4aEQL)
        (bytevector? . g$12201$4aEQL)
        (bytevector=? . g$12200$4aEQL)
        (bytevector-uint-set! . g$12199$4aEQL)
        (bytevector-uint-ref . g$12198$4aEQL)
        (bytevector-u8-set! . g$12197$4aEQL)
        (bytevector-u8-ref . g$12196$4aEQL)
        (bytevector-u64-set! . g$6543$4aEQL)
        (bytevector-u64-ref . g$6539$4aEQL)
        (bytevector-u64-native-set! . g$6545$4aEQL)
        (bytevector-u64-native-ref . g$6541$4aEQL)
        (bytevector-u32-set! . g$6535$4aEQL)
        (bytevector-u32-ref . g$6531$4aEQL)
        (bytevector-u32-native-set! . g$6537$4aEQL)
        (bytevector-u32-native-ref . g$6533$4aEQL)
        (bytevector-u16-set! . g$6527$4aEQL)
        (bytevector-u16-ref . g$6523$4aEQL)
        (bytevector-u16-native-set! . g$6529$4aEQL)
        (bytevector-u16-native-ref . g$6525$4aEQL)
        (bytevector-sint-set! . g$12195$4aEQL)
        (bytevector-sint-ref . g$12194$4aEQL)
        (bytevector-s8-set! . g$12193$4aEQL)
        (bytevector-s8-ref . g$12192$4aEQL)
        (bytevector-s64-set! . g$6544$4aEQL)
        (bytevector-s64-ref . g$6540$4aEQL)
        (bytevector-s64-native-set! . g$6546$4aEQL)
        (bytevector-s64-native-ref . g$6542$4aEQL)
        (bytevector-s32-set! . g$6536$4aEQL)
        (bytevector-s32-ref . g$6532$4aEQL)
        (bytevector-s32-native-set! . g$6538$4aEQL)
        (bytevector-s32-native-ref . g$6534$4aEQL)
        (bytevector-s16-set! . g$6528$4aEQL)
        (bytevector-s16-ref . g$6524$4aEQL)
        (bytevector-s16-native-set! . g$6530$4aEQL)
        (bytevector-s16-native-ref . g$6526$4aEQL)
        (bytevector-length . g$12191$4aEQL)
        (bytevector-ieee-single-set! . g$12190$4aEQL)
        (bytevector-ieee-single-ref . g$12189$4aEQL)
        (bytevector-ieee-single-native-set! . g$6549$4aEQL)
        (bytevector-ieee-single-native-ref . g$6547$4aEQL)
        (bytevector-ieee-double-set! . g$12188$4aEQL)
        (bytevector-ieee-double-ref . g$12187$4aEQL)
        (bytevector-ieee-double-native-set! . g$6550$4aEQL)
        (bytevector-ieee-double-native-ref . g$6548$4aEQL)
        (bytevector-fill! . g$12186$4aEQL)
        (bytevector-copy! . g$12185$4aEQL)
        (bytevector-copy . g$12184$4aEQL)
        (bytevector->uint-list . g$12183$4aEQL)
        (bytevector->u8-list . g$12182$4aEQL)
        (bytevector->sint-list . g$12181$4aEQL)
        (no-nans-violation? . g$7144$4aEQL)
        (no-infinities-violation? . g$7130$4aEQL)
        (make-no-nans-violation . g$7143$4aEQL)
        (make-no-infinities-violation . g$7129$4aEQL)
        (real->flonum . g$12180$4aEQL)
        (flzero? . g$12179$4aEQL)
        (fltruncate . g$12178$4aEQL)
        (fltan . g$12177$4aEQL)
        (flsqrt . g$12176$4aEQL)
        (flsin . g$12175$4aEQL)
        (flround . g$12174$4aEQL)
        (flpositive? . g$12173$4aEQL)
        (flonum? . g$12172$4aEQL)
        (flodd? . g$12171$4aEQL)
        (flnumerator . g$12170$4aEQL)
        (flnegative? . g$12169$4aEQL)
        (flnan? . g$12168$4aEQL)
        (flmod0 . g$12167$4aEQL)
        (flmod . g$12166$4aEQL)
        (flmin . g$12165$4aEQL)
        (flmax . g$12164$4aEQL)
        (fllog . g$12163$4aEQL)
        (flinteger? . g$12162$4aEQL)
        (flinfinite? . g$12161$4aEQL)
        (flfloor . g$12160$4aEQL)
        (flfinite? . g$12159$4aEQL)
        (flexpt . g$12158$4aEQL)
        (flexp . g$12157$4aEQL)
        (fleven? . g$12156$4aEQL)
        (fldiv0-and-mod0 . g$12155$4aEQL)
        (fldiv0 . g$12154$4aEQL)
        (fldiv-and-mod . g$12153$4aEQL)
        (fldiv . g$12152$4aEQL)
        (fldenominator . g$12151$4aEQL)
        (flcos . g$12150$4aEQL)
        (flceiling . g$12149$4aEQL)
        (flatan . g$12148$4aEQL)
        (flasin . g$12147$4aEQL)
        (flacos . g$12146$4aEQL)
        (flabs . g$12145$4aEQL)
        (fl>? . g$12144$4aEQL)
        (fl>=? . g$12143$4aEQL)
        (fl=? . g$12142$4aEQL)
        (fl<? . g$12141$4aEQL)
        (fl<=? . g$12140$4aEQL)
        (fl/ . g$12139$4aEQL)
        (fl- . g$12138$4aEQL)
        (fl+ . g$12137$4aEQL)
        (fl* . g$12136$4aEQL)
        (fixnum->flonum . g$12135$4aEQL)
        (fxzero? . g$12134$4aEQL)
        (fxxor . g$12133$4aEQL)
        (fxrotate-bit-field . g$7076$4aEQL)
        (fxreverse-bit-field . g$12132$4aEQL)
        (fxpositive? . g$12131$4aEQL)
        (fxodd? . g$12130$4aEQL)
        (fxnot . g$12129$4aEQL)
        (fxnegative? . g$12128$4aEQL)
        (fxmod0 . g$12127$4aEQL)
        (fxmod . g$12126$4aEQL)
        (fxmin . g$12125$4aEQL)
        (fxmax . g$12124$4aEQL)
        (fxlength . g$12123$4aEQL)
        (fxior . g$12122$4aEQL)
        (fxif . g$7070$4aEQL)
        (fxfirst-bit-set . g$12121$4aEQL)
        (fxeven? . g$12120$4aEQL)
        (fxdiv0-and-mod0 . g$12119$4aEQL)
        (fxdiv0 . g$12118$4aEQL)
        (fxdiv-and-mod . g$12117$4aEQL)
        (fxdiv . g$12116$4aEQL)
        (fxcopy-bit-field . g$7073$4aEQL)
        (fxcopy-bit . g$7071$4aEQL)
        (fxbit-set? . g$12115$4aEQL)
        (fxbit-field . g$7072$4aEQL)
        (fxbit-count . g$12114$4aEQL)
        (fxarithmetic-shift-right . g$7075$4aEQL)
        (fxarithmetic-shift-left . g$7074$4aEQL)
        (fxarithmetic-shift . g$12113$4aEQL)
        (fxand . g$12112$4aEQL)
        (fx>? . g$12111$4aEQL)
        (fx>=? . g$12110$4aEQL)
        (fx=? . g$12109$4aEQL)
        (fx<? . g$12108$4aEQL)
        (fx<=? . g$12107$4aEQL)
        (fx-/carry . g$7068$4aEQL)
        (fx- . g$12106$4aEQL)
        (fx+/carry . g$7069$4aEQL)
        (fx+ . g$12105$4aEQL)
        (fx*/carry . g$7067$4aEQL)
        (fx* . g$12104$4aEQL)
        (greatest-fixnum . g$12103$4aEQL)
        (least-fixnum . g$12102$4aEQL)
        (fixnum-width . g$12101$4aEQL)
        (fixnum? . g$12100$4aEQL)
        (bitwise-rotate-bit-field . g$7041$4aEQL)
        (bitwise-reverse-bit-field . g$12099$4aEQL)
        (bitwise-length . g$12098$4aEQL)
        (bitwise-if . g$7035$4aEQL)
        (bitwise-first-bit-set . g$12097$4aEQL)
        (bitwise-copy-bit-field . g$7038$4aEQL)
        (bitwise-copy-bit . g$7036$4aEQL)
        (bitwise-bit-set? . g$12096$4aEQL)
        (bitwise-bit-field . g$7037$4aEQL)
        (bitwise-bit-count . g$12095$4aEQL)
        (bitwise-xor . g$12094$4aEQL)
        (bitwise-ior . g$12093$4aEQL)
        (bitwise-and . g$12092$4aEQL)
        (bitwise-not . g$12091$4aEQL)
        (bitwise-arithmetic-shift-right . g$7040$4aEQL)
        (bitwise-arithmetic-shift-left . g$7039$4aEQL)
        (bitwise-arithmetic-shift . g$12090$4aEQL)
        (zero? . g$12089$4aEQL)
        (vector? . g$12088$4aEQL)
        (vector-set! . g$12087$4aEQL)
        (vector-ref . g$12086$4aEQL)
        (vector-map . g$12085$4aEQL)
        (vector-length . g$12084$4aEQL)
        (vector-for-each . g$12083$4aEQL)
        (vector-fill! . g$12082$4aEQL)
        (vector->list . g$12081$4aEQL)
        (vector . g$12080$4aEQL)
        (values . g$12079$4aEQL)
        (truncate . g$12078$4aEQL)
        (tan . g$12077$4aEQL)
        (symbol? . g$12076$4aEQL)
        (symbol=? . g$6042$4aEQL)
        (symbol->string . g$12075$4aEQL)
        (substring . g$12074$4aEQL)
        (string? . g$12073$4aEQL)
        (string>? . g$6039$4aEQL)
        (string>=? . g$6041$4aEQL)
        (string=? . g$6037$4aEQL)
        (string<? . g$6038$4aEQL)
        (string<=? . g$6040$4aEQL)
        (string-ref . g$12072$4aEQL)
        (string-length . g$12071$4aEQL)
        (string-for-each . g$12070$4aEQL)
        (string-copy . g$12069$4aEQL)
        (string-append . g$12068$4aEQL)
        (string->symbol . g$12067$4aEQL)
        (string->number . g$12066$4aEQL)
        (string->list . g$12065$4aEQL)
        (string . g$12064$4aEQL)
        (sqrt . g$12063$4aEQL)
        (sin . g$12062$4aEQL)
        (round . g$12061$4aEQL)
        (reverse . g$12060$4aEQL)
        (real? . g$12059$4aEQL)
        (real-valued? . g$12058$4aEQL)
        (real-part . g$12057$4aEQL)
        (rationalize . g$6083$4aEQL)
        (rational? . g$12056$4aEQL)
        (rational-valued? . g$12055$4aEQL)
        (procedure? . g$12054$4aEQL)
        (positive? . g$12053$4aEQL)
        (pair? . g$12052$4aEQL)
        (odd? . g$12051$4aEQL)
        (numerator . g$12050$4aEQL)
        (number? . g$12049$4aEQL)
        (number->string . g$12048$4aEQL)
        (null? . g$12047$4aEQL)
        (not . g$12046$4aEQL)
        (negative? . g$12045$4aEQL)
        (nan? . g$12044$4aEQL)
        (min . g$12043$4aEQL)
        (max . g$12042$4aEQL)
        (map . g$5857$4aEQL)
        (make-vector . g$12041$4aEQL)
        (make-string . g$12040$4aEQL)
        (make-rectangular . g$12039$4aEQL)
        (make-polar . g$12038$4aEQL)
        (magnitude . g$12037$4aEQL)
        (log . g$12036$4aEQL)
        (list? . g$12035$4aEQL)
        (list-tail . g$5837$4aEQL)
        (list-ref . g$5838$4aEQL)
        (list->vector . g$12034$4aEQL)
        (list->string . g$12033$4aEQL)
        (list . g$12032$4aEQL)
        (length . g$12031$4aEQL)
        (lcm . g$12030$4aEQL)
        (integer? . g$12029$4aEQL)
        (integer-valued? . g$12028$4aEQL)
        (integer->char . g$12027$4aEQL)
        (infinite? . g$12026$4aEQL)
        (inexact? . g$12025$4aEQL)
        (inexact . g$12024$4aEQL)
        (imag-part . g$12023$4aEQL)
        (gcd . g$12022$4aEQL)
        (for-each . g$5858$4aEQL)
        (floor . g$12021$4aEQL)
        (finite? . g$12020$4aEQL)
        (expt . g$12019$4aEQL)
        (exp . g$12018$4aEQL)
        (exact? . g$12017$4aEQL)
        (exact-integer-sqrt . g$12016$4aEQL)
        (exact . g$12015$4aEQL)
        (even? . g$12014$4aEQL)
        (error . g$12013$4aEQL)
        (eqv? . g$12012$4aEQL)
        (equal? . g$12011$4aEQL)
        (eq? . g$12010$4aEQL)
        (dynamic-wind . g$12009$4aEQL)
        (div0-and-mod0 . g$12008$4aEQL)
        (mod0 . g$12007$4aEQL)
        (div0 . g$12006$4aEQL)
        (div-and-mod . g$12005$4aEQL)
        (mod . g$12004$4aEQL)
        (div . g$12003$4aEQL)
        (denominator . g$12002$4aEQL)
        (cos . g$12001$4aEQL)
        (cons . g$12000$4aEQL)
        (complex? . g$11999$4aEQL)
        (char? . g$11998$4aEQL)
        (char>? . g$6080$4aEQL)
        (char>=? . g$6082$4aEQL)
        (char=? . g$6078$4aEQL)
        (char<? . g$6079$4aEQL)
        (char<=? . g$6081$4aEQL)
        (char->integer . g$11997$4aEQL)
        (ceiling . g$11996$4aEQL)
        (call-with-values . g$11995$4aEQL)
        (call/cc . g$11994$4aEQL)
        (call-with-current-continuation . g$11993$4aEQL)
        (cddddr . g$6002$4aEQL)
        (cdddar . g$6001$4aEQL)
        (cddadr . g$6000$4aEQL)
        (cddaar . g$5999$4aEQL)
        (cdaddr . g$5998$4aEQL)
        (cdadar . g$5997$4aEQL)
        (cdaadr . g$5996$4aEQL)
        (cdaaar . g$5995$4aEQL)
        (cadddr . g$5994$4aEQL)
        (caddar . g$5993$4aEQL)
        (cadadr . g$5992$4aEQL)
        (cadaar . g$5991$4aEQL)
        (caaddr . g$5990$4aEQL)
        (caadar . g$5989$4aEQL)
        (caaadr . g$5988$4aEQL)
        (caaaar . g$5987$4aEQL)
        (cdddr . g$5986$4aEQL)
        (cddar . g$5985$4aEQL)
        (cdadr . g$5984$4aEQL)
        (cdaar . g$5983$4aEQL)
        (caddr . g$5982$4aEQL)
        (cadar . g$5981$4aEQL)
        (caadr . g$5980$4aEQL)
        (caaar . g$5979$4aEQL)
        (cddr . g$5978$4aEQL)
        (cdar . g$5977$4aEQL)
        (cadr . g$5976$4aEQL)
        (caar . g$5975$4aEQL)
        (cdr . g$11992$4aEQL)
        (car . g$11991$4aEQL)
        (boolean? . g$11990$4aEQL)
        (boolean=? . g$6043$4aEQL)
        (atan . g$11989$4aEQL)
        (assertion-violation . g$11988$4aEQL)
        (asin . g$11987$4aEQL)
        (apply . g$11986$4aEQL)
        (append . g$11985$4aEQL)
        (angle . g$11984$4aEQL)
        (acos . g$11983$4aEQL)
        (abs . g$11982$4aEQL)
        (/ . g$11981$4aEQL)
        (* . g$11980$4aEQL)
        (- . g$11979$4aEQL)
        (+ . g$11978$4aEQL)
        (>= . g$11977$4aEQL)
        (> . g$11976$4aEQL)
        (= . g$11975$4aEQL)
        (<= . g$11974$4aEQL)
        (< . g$11973$4aEQL)
        (make-record-printer . g$11972$4aEQL)
        (eqv-hash . g$11971$4aEQL)
        (reverse! . g$11970$4aEQL)
        (deserialize-port . g$11969$4aEQL)
        (serialize-port . g$11968$4aEQL)
        (enum-set? . g$7391$4aEQL)
        (make-promise . g$6862$4aEQL)
        (load/args . g$11806$4aEQL)
        (printf . g$7502$4aEQL)
        (fprintf . g$7503$4aEQL)
        (format . g$7504$4aEQL)
        (procedure-form . g$11967$4aEQL)
        (procedure-environment . g$11966$4aEQL)
        (procedure-name . g$11965$4aEQL)
        (procedure-arity . g$11964$4aEQL)
        (gc-collect . g$11963$4aEQL)
        (clr-type? . g$11962$4aEQL)
        (get-clr-type . g$11961$4aEQL)
        (get-command-line . g$11960$4aEQL)
        (vector-append . g$11959$4aEQL)
        (vector-filter . g$11958$4aEQL)
        (vector-reverse! . g$11957$4aEQL)
        (vector-contains? . g$11956$4aEQL)
        (vector-index-of . g$11955$4aEQL)
        (vector-copy . g$11954$4aEQL)
        (vector-binary-search . g$11953$4aEQL)
        (string-ci-compare . g$11952$4aEQL)
        (string-compare . g$11951$4aEQL)
        (string-format . g$11950$4aEQL)
        (trace-printer . g$11803$4aEQL)
        (make-traced-procedure . g$11949$4aEQL)
        (make-traced-macro . g$7524$4aEQL)
        (assertion-error . g$8825$4aEQL)
        (time-it . g$11948$4aEQL)
        (make-parameter . g$7531$4aEQL)
        (library-locator . g$11947$4aEQL)
        (get-library-paths . g$11946$4aEQL)
        (environment-bindings . g$8804$4aEQL)
        (environment-symbols . g$8807$4aEQL)
        (interaction-environment-symbols . g$8803$4aEQL)
        (optimization-level . g$11945$4aEQL)
        (library-path . g$7986$4aEQL)
        (expand . g$8811$4aEQL)
        (&no-nans . g$11944$4aEQL)
        (&no-infinities . g$11943$4aEQL)
        (&i/o-encoding . g$11942$4aEQL)
        (&i/o-decoding . g$11941$4aEQL)
        (&i/o-port . g$11940$4aEQL)
        (&i/o-file-does-not-exist . g$11939$4aEQL)
        (&i/o-file-already-exists . g$11938$4aEQL)
        (&i/o-file-is-read-only . g$11937$4aEQL)
        (&i/o-file-protection . g$11936$4aEQL)
        (&i/o-filename . g$11935$4aEQL)
        (&i/o-invalid-position . g$11934$4aEQL)
        (&i/o-write . g$11933$4aEQL)
        (&i/o-read . g$11932$4aEQL)
        (&i/o . g$11931$4aEQL)
        (&non-continuable . g$11930$4aEQL)
        (&undefined . g$11929$4aEQL)
        (&syntax . g$11928$4aEQL)
        (&lexical . g$11927$4aEQL)
        (&implementation-restriction . g$11926$4aEQL)
        (&who . g$11925$4aEQL)
        (&irritants . g$11924$4aEQL)
        (&assertion . g$11923$4aEQL)
        (&violation . g$11922$4aEQL)
        (&error . g$11921$4aEQL)
        (&serious . g$11920$4aEQL)
        (&warning . g$11919$4aEQL)
        (&message . g$11918$4aEQL)
        (&condition . g$11917$4aEQL)
        (define-condition-type . g$11916$4aEQL)
        (define-enumeration . g$11915$4aEQL)
        (define-record-type . g$11914$4aEQL)
        (parent-rtd . g$11913$4aEQL)
        (nongenerative . g$11912$4aEQL)
        (opaque . g$11911$4aEQL)
        (sealed . g$11910$4aEQL)
        (protocol . g$11909$4aEQL)
        (parent . g$11908$4aEQL)
        (immutable . g$11907$4aEQL)
        (mutable . g$11906$4aEQL)
        (fields . g$11905$4aEQL)
        (error-handling-mode . g$11904$4aEQL)
        (file-options . g$11903$4aEQL)
        (buffer-mode . g$11902$4aEQL)
        (eol-style . g$11901$4aEQL)
        (guard . g$11900$4aEQL)
        (trace-letrec-syntax . g$11899$4aEQL)
        (trace-let-syntax . g$11898$4aEQL)
        (trace-define-syntax . g$11897$4aEQL)
        (trace-define . g$11896$4aEQL)
        (trace-lambda . g$11895$4aEQL)
        (unsyntax-splicing . g$11894$4aEQL)
        (unsyntax . g$11893$4aEQL)
        (unquote-splicing . g$11892$4aEQL)
        (unquote . g$11891$4aEQL)
        (_ . g$11890$4aEQL)
        (else . g$11889$4aEQL)
        (=> . g$11888$4aEQL)
        (... . g$11887$4aEQL)
        (assert . g$11886$4aEQL)
        (endianness . g$11885$4aEQL)
        (delay . g$11884$4aEQL)
        (time . g$11883$4aEQL)
        (or . g$11882$4aEQL)
        (and . g$11881$4aEQL)
        (do . g$11880$4aEQL)
        (cond . g$11879$4aEQL)
        (let* . g$11878$4aEQL)
        (let . g$11877$4aEQL)
        (identifier-syntax . g$11876$4aEQL)
        (with-syntax . g$11875$4aEQL)
        (quasisyntax . g$11874$4aEQL)
        (quasiquote . g$11873$4aEQL)
        (syntax-rules . g$11872$4aEQL)
        (include-into . g$11871$4aEQL)
        (include . g$11870$4aEQL)
        (define-struct . g$11869$4aEQL)
        (let-values . g$11868$4aEQL)
        (let*-values . g$11867$4aEQL)
        (record-constructor-descriptor . g$11866$4aEQL)
        (record-type-descriptor . g$11865$4aEQL)
        (fluid-let-syntax . g$11864$4aEQL)
        (case . g$11863$4aEQL)
        (parameterize . g$11862$4aEQL)
        (unless . g$11861$4aEQL)
        (when . g$11860$4aEQL)
        (if . g$11859$4aEQL)
        (letrec* . g$11858$4aEQL)
        (letrec . g$11857$4aEQL)
        (type-descriptor . g$11856$4aEQL)
        (case-lambda . g$11855$4aEQL)
        (lambda . g$11854$4aEQL)
        (syntax . g$11853$4aEQL)
        (syntax-case . g$11852$4aEQL)
        (quote . g$11851$4aEQL)
        (foreign-call . g$11850$4aEQL)
        (letrec-syntax . g$11849$4aEQL)
        (let-syntax . g$11848$4aEQL)
        (set! . g$11847$4aEQL)
        (export . g$11846$4aEQL)
        (import . g$11845$4aEQL)
        (library . g$11844$4aEQL)
        (begin . g$11843$4aEQL)
        (module . g$11842$4aEQL)
        (define-syntax . g$11841$4aEQL)
        (define . g$11840$4aEQL))
      '((g$8702$4aEQL core-prim . ellipsis-map)
        (g$12444$4aEQL core-prim . &no-nans-rcd)
        (g$12443$4aEQL core-prim . &no-nans-rtd)
        (g$12442$4aEQL core-prim . &no-infinities-rcd)
        (g$12441$4aEQL core-prim . &no-infinities-rtd)
        (g$12440$4aEQL core-prim . &i/o-encoding-rcd)
        (g$12439$4aEQL core-prim . &i/o-encoding-rtd)
        (g$12438$4aEQL core-prim . &i/o-decoding-rcd)
        (g$12437$4aEQL core-prim . &i/o-decoding-rtd)
        (g$12436$4aEQL core-prim . &i/o-port-rcd)
        (g$12435$4aEQL core-prim . &i/o-port-rtd)
        (g$12434$4aEQL core-prim . &i/o-file-does-not-exist-rcd)
        (g$12433$4aEQL core-prim . &i/o-file-does-not-exist-rtd)
        (g$12432$4aEQL core-prim . &i/o-file-already-exists-rcd)
        (g$12431$4aEQL core-prim . &i/o-file-already-exists-rtd)
        (g$12430$4aEQL core-prim . &i/o-file-is-read-only-rcd)
        (g$12429$4aEQL core-prim . &i/o-file-is-read-only-rtd)
        (g$12428$4aEQL core-prim . &i/o-file-protection-rcd)
        (g$12427$4aEQL core-prim . &i/o-file-protection-rtd)
        (g$12426$4aEQL core-prim . &i/o-filename-rcd)
        (g$12425$4aEQL core-prim . &i/o-filename-rtd)
        (g$12424$4aEQL core-prim . &i/o-invalid-position-rcd)
        (g$12423$4aEQL core-prim . &i/o-invalid-position-rtd)
        (g$12422$4aEQL core-prim . &i/o-write-rcd)
        (g$12421$4aEQL core-prim . &i/o-write-rtd)
        (g$12420$4aEQL core-prim . &i/o-read-rcd)
        (g$12419$4aEQL core-prim . &i/o-read-rtd)
        (g$12418$4aEQL core-prim . &i/o-rcd)
        (g$12417$4aEQL core-prim . &i/o-rtd)
        (g$12416$4aEQL core-prim . &undefined-rcd)
        (g$12415$4aEQL core-prim . &undefined-rtd)
        (g$12414$4aEQL core-prim . &syntax-rcd)
        (g$12413$4aEQL core-prim . &syntax-rtd)
        (g$12412$4aEQL core-prim . &lexical-rcd)
        (g$12411$4aEQL core-prim . &lexical-rtd)
        (g$12410$4aEQL core-prim . &implementation-restriction-rcd)
        (g$12409$4aEQL core-prim . &implementation-restriction-rtd)
        (g$12408$4aEQL core-prim . &non-continuable-rcd)
        (g$12407$4aEQL core-prim . &non-continuable-rtd)
        (g$12406$4aEQL core-prim . &who-rcd)
        (g$12405$4aEQL core-prim . &who-rtd)
        (g$12404$4aEQL core-prim . &irritants-rcd)
        (g$12403$4aEQL core-prim . &irritants-rtd)
        (g$12402$4aEQL core-prim . &assertion-rcd)
        (g$12401$4aEQL core-prim . &assertion-rtd)
        (g$12400$4aEQL core-prim . &violation-rcd)
        (g$12399$4aEQL core-prim . &violation-rtd)
        (g$12398$4aEQL core-prim . &error-rcd)
        (g$12397$4aEQL core-prim . &error-rtd)
        (g$12396$4aEQL core-prim . &serious-rcd)
        (g$12395$4aEQL core-prim . &serious-rtd)
        (g$12394$4aEQL core-prim . &warning-rcd)
        (g$12393$4aEQL core-prim . &warning-rtd)
        (g$12392$4aEQL core-prim . &message-rcd)
        (g$12391$4aEQL core-prim . &message-rtd)
        (g$12390$4aEQL core-prim . &condition-rcd)
        (g$12389$4aEQL core-prim . &condition-rtd)
        (g$12388$4aEQL core-prim . library-letrec*)
        (g$12387$4aEQL core-prim . annotation-stripped)
        (g$12386$4aEQL core-prim . annotation-source)
        (g$12385$4aEQL core-prim . annotation-expression)
        (g$12384$4aEQL core-prim . annotation?)
        (g$12383$4aEQL core-prim . read-annotated)
        (g$12382$4aEQL core-prim . tanh)
        (g$12381$4aEQL core-prim . cosh)
        (g$12380$4aEQL core-prim . sinh)
        (g$12379$4aEQL core-prim . make-guid)
        (g$12378$4aEQL core-prim . unspecified?)
        (g$12377$4aEQL core-prim . make-trace)
        (g$5840$4aEQL core-prim . make-list)
        (g$5839$4aEQL core-prim . last-pair)
        (g$12376$4aEQL core-prim . load-r5rs)
        (g$12375$4aEQL core-prim . license)
        (g$12374$4aEQL core-prim . stacktrace)
        (g$11808$4aEQL core-prim . ironscheme-build)
        (g$12373$4aEQL core-prim . define-clr-class-internal)
        (g$12372$4aEQL core-prim . clr-field-set!-internal)
        (g$12371$4aEQL core-prim . clr-field-get-internal)
        (g$12370$4aEQL core-prim . clr-cast-internal)
        (g$12369$4aEQL core-prim . clr-call-internal)
        (g$12368$4aEQL core-prim . clr-new-internal)
        (g$12367$4aEQL core-prim . clr-new-array-internal)
        (g$12366$4aEQL core-prim . clr-is-internal)
        (g$12365$4aEQL core-prim . clr-reference-internal)
        (g$12364$4aEQL core-prim . clr-using-internal)
        (g$8826$4aEQL core-prim . syntax-error)
        (g$8697$4aEQL core-prim . syntax-dispatch)
        (g$12363$4aEQL core-prim . compile-core)
        (g$12362$4aEQL core-prim . eval-core)
        (g$12361$4aEQL core-prim . set-symbol-value!)
        (g$12360$4aEQL core-prim . symbol-value)
        (g$12359$4aEQL core-prim . ungensym)
        (g$12358$4aEQL core-prim . gensym)
        (g$12357$4aEQL core-prim . void)
        (g$12356$4aEQL core-prim . load-serialized-library)
        (g$12355$4aEQL core-prim . serialize-library)
        (g$11810$4aEQL core-prim . compile-system-libraries)
        (g$11812$4aEQL core-prim . compile->closure)
        (g$11811$4aEQL core-prim . compile)
        (g$11807$4aEQL core-prim . load)
        (g$8835$4aEQL core-prim . interaction-environment)
        (g$12354$4aEQL core-prim . char-ready?)
        (g$12353$4aEQL core-prim . string-upcase)
        (g$12352$4aEQL core-prim . string-titlecase)
        (g$12351$4aEQL core-prim . string-normalize-nfkd)
        (g$12350$4aEQL core-prim . string-normalize-nfkc)
        (g$12349$4aEQL core-prim . string-normalize-nfd)
        (g$12348$4aEQL core-prim . string-normalize-nfc)
        (g$12347$4aEQL core-prim . string-foldcase)
        (g$12346$4aEQL core-prim . string-downcase)
        (g$6940$4aEQL core-prim . string-ci>?)
        (g$6942$4aEQL core-prim . string-ci>=?)
        (g$6938$4aEQL core-prim . string-ci=?)
        (g$6939$4aEQL core-prim . string-ci<?)
        (g$6941$4aEQL core-prim . string-ci<=?)
        (g$12345$4aEQL core-prim . char-whitespace?)
        (g$12344$4aEQL core-prim . char-upper-case?)
        (g$12343$4aEQL core-prim . char-title-case?)
        (g$12342$4aEQL core-prim . char-numeric?)
        (g$12341$4aEQL core-prim . char-lower-case?)
        (g$12340$4aEQL core-prim . char-general-category)
        (g$12339$4aEQL core-prim . char-upcase)
        (g$12338$4aEQL core-prim . char-titlecase)
        (g$12337$4aEQL core-prim . char-foldcase)
        (g$12336$4aEQL core-prim . char-downcase)
        (g$6979$4aEQL core-prim . char-ci>?)
        (g$6981$4aEQL core-prim . char-ci>=?)
        (g$6977$4aEQL core-prim . char-ci=?)
        (g$6978$4aEQL core-prim . char-ci<?)
        (g$6980$4aEQL core-prim . char-ci<=?)
        (g$12335$4aEQL core-prim . char-alphabetic?)
        (g$8434$4aEQL core-prim . variable-transformer-procedure)
        (g$8433$4aEQL core-prim . variable-transformer?)
        (g$8432$4aEQL core-prim . make-variable-transformer)
        (g$8830$4aEQL core-prim . identifier?)
        (g$8819$4aEQL core-prim . generate-temporaries)
        (g$8820$4aEQL core-prim . free-identifier=?)
        (g$8832$4aEQL core-prim . syntax->datum)
        (g$8831$4aEQL core-prim . datum->syntax)
        (g$8821$4aEQL core-prim . bound-identifier=?)
        (g$12334$4aEQL core-prim . record-type-descriptor?)
        (g$12333$4aEQL core-prim . record-predicate)
        (g$12332$4aEQL core-prim . record-mutator)
        (g$12331$4aEQL core-prim . record-constructor)
        (g$12330$4aEQL core-prim . record-accessor)
        (g$12329$4aEQL core-prim . make-record-type-descriptor)
        (g$12328$4aEQL core-prim . make-record-constructor-descriptor)
        (g$12327$4aEQL core-prim . record?)
        (g$12326$4aEQL core-prim . record-type-uid)
        (g$12325$4aEQL core-prim . record-type-sealed?)
        (g$12324$4aEQL core-prim . record-type-parent)
        (g$12323$4aEQL core-prim . record-type-opaque?)
        (g$12322$4aEQL core-prim . record-type-name)
        (g$12321$4aEQL core-prim . record-type-generative?)
        (g$12320$4aEQL core-prim . record-type-field-names)
        (g$12319$4aEQL core-prim . record-rtd)
        (g$12318$4aEQL core-prim . record-field-mutable?)
        (g$6516$4aEQL core-prim . delete-file)
        (g$6515$4aEQL core-prim . file-exists?)
        (g$12317$4aEQL core-prim . vector-sort!)
        (g$12316$4aEQL core-prim . vector-sort)
        (g$6880$4aEQL core-prim . list-sort)
        (g$12315$4aEQL core-prim . symbol-hash)
        (g$12314$4aEQL core-prim . string-ci-hash)
        (g$12313$4aEQL core-prim . string-hash)
        (g$12312$4aEQL core-prim . equal-hash)
        (g$12311$4aEQL core-prim . hashtable-equivalence-function)
        (g$12310$4aEQL core-prim . make-hashtable)
        (g$12309$4aEQL core-prim . hashtable-hash-function)
        (g$6484$4aEQL core-prim . make-eqv-hashtable)
        (g$6483$4aEQL core-prim . make-eq-hashtable)
        (g$12308$4aEQL core-prim . hashtable?)
        (g$6490$4aEQL core-prim . hashtable-update!)
        (g$6485$4aEQL core-prim . hashtable-size)
        (g$6487$4aEQL core-prim . hashtable-set!)
        (g$6486$4aEQL core-prim . hashtable-ref)
        (g$12307$4aEQL core-prim . hashtable-mutable?)
        (g$12306$4aEQL core-prim . hashtable-keys)
        (g$12305$4aEQL core-prim . hashtable-entries)
        (g$6488$4aEQL core-prim . hashtable-delete!)
        (g$12304$4aEQL core-prim . hashtable-copy)
        (g$6489$4aEQL core-prim . hashtable-contains?)
        (g$6491$4aEQL core-prim . hashtable-clear!)
        (g$7358$4aEQL core-prim . call-with-output-file)
        (g$7357$4aEQL core-prim . call-with-input-file)
        (g$12303$4aEQL core-prim . write-char)
        (g$12302$4aEQL core-prim . write)
        (g$7356$4aEQL core-prim . with-output-to-file)
        (g$7355$4aEQL core-prim . with-input-from-file)
        (g$12301$4aEQL core-prim . read-char)
        (g$12300$4aEQL core-prim . read)
        (g$12299$4aEQL core-prim . peek-char)
        (g$12298$4aEQL core-prim . open-output-file)
        (g$12297$4aEQL core-prim . open-input-file)
        (g$12296$4aEQL core-prim . newline)
        (g$12295$4aEQL core-prim . display)
        (g$12294$4aEQL core-prim . close-output-port)
        (g$12293$4aEQL core-prim . close-input-port)
        (g$12292$4aEQL core-prim . eof-object?)
        (g$12291$4aEQL core-prim . eof-object)
        (g$12290$4aEQL core-prim . current-error-port)
        (g$12289$4aEQL core-prim . current-output-port)
        (g$12288$4aEQL core-prim . current-input-port)
        (g$12287$4aEQL core-prim . output-port?)
        (g$12286$4aEQL core-prim . input-port?)
        (g$12285$4aEQL core-prim . utf-8-codec)
        (g$12284$4aEQL core-prim . utf-16-codec)
        (g$12283$4aEQL core-prim . transcoder-error-handling-mode)
        (g$12282$4aEQL core-prim . transcoder-eol-style)
        (g$12281$4aEQL core-prim . transcoder-codec)
        (g$12280$4aEQL core-prim . transcoded-port)
        (g$12279$4aEQL core-prim . textual-port?)
        (g$12278$4aEQL core-prim . string->bytevector)
        (g$12277$4aEQL core-prim . standard-output-port)
        (g$12276$4aEQL core-prim . standard-input-port)
        (g$12275$4aEQL core-prim . standard-error-port)
        (g$12274$4aEQL core-prim . set-port-position!)
        (g$12273$4aEQL core-prim . put-u8)
        (g$12272$4aEQL core-prim . put-string)
        (g$12271$4aEQL core-prim . put-datum)
        (g$12270$4aEQL core-prim . put-char)
        (g$12269$4aEQL core-prim . put-bytevector)
        (g$7331$4aEQL core-prim . port?)
        (g$12268$4aEQL core-prim . port-transcoder)
        (g$12267$4aEQL core-prim . port-position)
        (g$12266$4aEQL core-prim . port-has-set-port-position!?)
        (g$12265$4aEQL core-prim . port-has-port-position?)
        (g$12264$4aEQL core-prim . port-eof?)
        (g$12263$4aEQL core-prim . output-port-buffer-mode)
        (g$7330$4aEQL core-prim . open-string-output-port)
        (g$12262$4aEQL core-prim . open-string-input-port)
        (g$12261$4aEQL core-prim . open-file-output-port)
        (g$12260$4aEQL core-prim . open-file-input/output-port)
        (g$12259$4aEQL core-prim . open-file-input-port)
        (g$12258$4aEQL core-prim . open-bytevector-output-port)
        (g$12257$4aEQL core-prim . open-bytevector-input-port)
        (g$12256$4aEQL core-prim . native-transcoder)
        (g$12255$4aEQL core-prim . native-eol-style)
        (g$12254$4aEQL core-prim . make-transcoder)
        (g$12253$4aEQL core-prim . latin-1-codec)
        (g$7186$4aEQL core-prim . make-i/o-write-error)
        (g$7172$4aEQL core-prim . make-i/o-read-error)
        (g$7291$4aEQL core-prim . make-i/o-port-error)
        (g$7201$4aEQL core-prim . make-i/o-invalid-position-error)
        (g$7218$4aEQL core-prim . make-i/o-filename-error)
        (g$7234$4aEQL core-prim . make-i/o-file-protection-error)
        (g$7248$4aEQL core-prim . make-i/o-file-is-read-only-error)
        (g$7276$4aEQL core-prim . make-i/o-file-does-not-exist-error)
        (g$7262$4aEQL core-prim . make-i/o-file-already-exists-error)
        (g$7158$4aEQL core-prim . make-i/o-error)
        (g$7322$4aEQL core-prim . make-i/o-encoding-error)
        (g$7307$4aEQL core-prim . make-i/o-decoding-error)
        (g$12252$4aEQL core-prim . make-custom-textual-output-port)
        (g$12251$4aEQL core-prim . make-custom-textual-input/output-port)
        (g$12250$4aEQL core-prim . make-custom-textual-input-port)
        (g$12249$4aEQL core-prim . make-custom-binary-output-port)
        (g$12248$4aEQL core-prim . make-custom-binary-input/output-port)
        (g$12247$4aEQL core-prim . make-custom-binary-input-port)
        (g$12246$4aEQL core-prim . make-bytevector)
        (g$12245$4aEQL core-prim . lookahead-u8)
        (g$12244$4aEQL core-prim . lookahead-char)
        (g$7187$4aEQL core-prim . i/o-write-error?)
        (g$7173$4aEQL core-prim . i/o-read-error?)
        (g$7293$4aEQL core-prim . i/o-port-error?)
        (g$7203$4aEQL core-prim . i/o-invalid-position-error?)
        (g$7204$4aEQL core-prim . i/o-error-position)
        (g$7220$4aEQL core-prim . i/o-filename-error?)
        (g$7235$4aEQL core-prim . i/o-file-protection-error?)
        (g$7249$4aEQL core-prim . i/o-file-is-read-only-error?)
        (g$7277$4aEQL core-prim . i/o-file-does-not-exist-error?)
        (g$7263$4aEQL core-prim . i/o-file-already-exists-error?)
        (g$7159$4aEQL core-prim . i/o-error?)
        (g$7294$4aEQL core-prim . i/o-error-port)
        (g$7221$4aEQL core-prim . i/o-error-filename)
        (g$7324$4aEQL core-prim . i/o-encoding-error?)
        (g$7325$4aEQL core-prim . i/o-encoding-error-char)
        (g$7308$4aEQL core-prim . i/o-decoding-error?)
        (g$12243$4aEQL core-prim . get-u8)
        (g$12242$4aEQL core-prim . get-string-n!)
        (g$12241$4aEQL core-prim . get-string-n)
        (g$12240$4aEQL core-prim . get-string-all)
        (g$12239$4aEQL core-prim . get-line)
        (g$12238$4aEQL core-prim . get-datum)
        (g$12237$4aEQL core-prim . get-char)
        (g$12236$4aEQL core-prim . get-bytevector-some)
        (g$12235$4aEQL core-prim . get-bytevector-n!)
        (g$12234$4aEQL core-prim . get-bytevector-n)
        (g$12233$4aEQL core-prim . get-bytevector-all)
        (g$12232$4aEQL core-prim . flush-output-port)
        (g$12231$4aEQL core-prim . close-port)
        (g$7332$4aEQL core-prim . call-with-string-output-port)
        (g$12230$4aEQL core-prim . call-with-port)
        (g$12229$4aEQL core-prim . call-with-bytevector-output-port)
        (g$12228$4aEQL core-prim . bytevector->string)
        (g$12227$4aEQL core-prim . buffer-mode?)
        (g$12226$4aEQL core-prim . binary-port?)
        (g$8810$4aEQL core-prim . scheme-report-environment)
        (g$6859$4aEQL core-prim . quotient)
        (g$8809$4aEQL core-prim . null-environment)
        (g$6860$4aEQL core-prim . remainder)
        (g$6861$4aEQL core-prim . modulo)
        (g$12225$4aEQL core-prim . inexact->exact)
        (g$6863$4aEQL core-prim . force)
        (g$12224$4aEQL core-prim . exact->inexact)
        (g$12223$4aEQL core-prim . exit)
        (g$11804$4aEQL core-prim . command-line)
        (g$12222$4aEQL core-prim . string-fill!)
        (g$12221$4aEQL core-prim . string-set!)
        (g$12220$4aEQL core-prim . set-cdr!)
        (g$12219$4aEQL core-prim . set-car!)
        (g$5862$4aEQL core-prim . remove)
        (g$5863$4aEQL core-prim . remv)
        (g$5843$4aEQL core-prim . remp)
        (g$5864$4aEQL core-prim . remq)
        (g$5842$4aEQL core-prim . partition)
        (g$5850$4aEQL core-prim . memv)
        (g$5849$4aEQL core-prim . memq)
        (g$5852$4aEQL core-prim . memp)
        (g$5851$4aEQL core-prim . member)
        (g$5856$4aEQL core-prim . exists)
        (g$5855$4aEQL core-prim . for-all)
        (g$5861$4aEQL core-prim . fold-right)
        (g$5860$4aEQL core-prim . fold-left)
        (g$5841$4aEQL core-prim . find)
        (g$5844$4aEQL core-prim . filter)
        (g$5859$4aEQL core-prim . cons*)
        (g$5846$4aEQL core-prim . assv)
        (g$5845$4aEQL core-prim . assq)
        (g$5848$4aEQL core-prim . assp)
        (g$5847$4aEQL core-prim . assoc)
        (g$12218$4aEQL core-prim . with-exception-handler)
        (g$12217$4aEQL core-prim . raise-continuable)
        (g$12216$4aEQL core-prim . raise)
        (g$8812$4aEQL core-prim . eval)
        (g$8808$4aEQL core-prim . environment)
        (g$7416$4aEQL core-prim . make-enumeration)
        (g$7423$4aEQL core-prim . enum-set=?)
        (g$7417$4aEQL core-prim . enum-set-universe)
        (g$7424$4aEQL core-prim . enum-set-union)
        (g$7422$4aEQL core-prim . enum-set-subset?)
        (g$7428$4aEQL core-prim . enum-set-projection)
        (g$7421$4aEQL core-prim . enum-set-member?)
        (g$7425$4aEQL core-prim . enum-set-intersection)
        (g$7418$4aEQL core-prim . enum-set-indexer)
        (g$7426$4aEQL core-prim . enum-set-difference)
        (g$7419$4aEQL core-prim . enum-set-constructor)
        (g$7427$4aEQL core-prim . enum-set-complement)
        (g$7420$4aEQL core-prim . enum-set->list)
        (g$6770$4aEQL core-prim . who-condition?)
        (g$6681$4aEQL core-prim . warning?)
        (g$6723$4aEQL core-prim . violation?)
        (g$6847$4aEQL core-prim . undefined-violation?)
        (g$6831$4aEQL core-prim . syntax-violation?)
        (g$6833$4aEQL core-prim . syntax-violation-subform)
        (g$6832$4aEQL core-prim . syntax-violation-form)
        (g$8829$4aEQL core-prim . syntax-violation)
        (g$12215$4aEQL core-prim . simple-conditions)
        (g$6695$4aEQL core-prim . serious-condition?)
        (g$6785$4aEQL core-prim . non-continuable-violation?)
        (g$6666$4aEQL core-prim . message-condition?)
        (g$6768$4aEQL core-prim . make-who-condition)
        (g$6680$4aEQL core-prim . make-warning)
        (g$6722$4aEQL core-prim . make-violation)
        (g$6846$4aEQL core-prim . make-undefined-violation)
        (g$6828$4aEQL core-prim . make-syntax-violation)
        (g$6694$4aEQL core-prim . make-serious-condition)
        (g$6784$4aEQL core-prim . make-non-continuable-violation)
        (g$6664$4aEQL core-prim . make-message-condition)
        (g$6812$4aEQL core-prim . make-lexical-violation)
        (g$6751$4aEQL core-prim . make-irritants-condition)
        (g$6798$4aEQL core-prim . make-implementation-restriction-violation)
        (g$6708$4aEQL core-prim . make-error)
        (g$6736$4aEQL core-prim . make-assertion-violation)
        (g$6813$4aEQL core-prim . lexical-violation?)
        (g$6753$4aEQL core-prim . irritants-condition?)
        (g$6799$4aEQL core-prim . implementation-restriction-violation?)
        (g$6709$4aEQL core-prim . error?)
        (g$6771$4aEQL core-prim . condition-who)
        (g$12214$4aEQL core-prim . condition-predicate)
        (g$6667$4aEQL core-prim . condition-message)
        (g$6754$4aEQL core-prim . condition-irritants)
        (g$12213$4aEQL core-prim . condition-accessor)
        (g$12212$4aEQL core-prim . condition)
        (g$6737$4aEQL core-prim . assertion-violation?)
        (g$12211$4aEQL core-prim . condition?)
        (g$12210$4aEQL core-prim . utf32->string)
        (g$12209$4aEQL core-prim . utf16->string)
        (g$12208$4aEQL core-prim . utf8->string)
        (g$12207$4aEQL core-prim . uint-list->bytevector)
        (g$12206$4aEQL core-prim . u8-list->bytevector)
        (g$12205$4aEQL core-prim . string->utf8)
        (g$12204$4aEQL core-prim . string->utf32)
        (g$12203$4aEQL core-prim . string->utf16)
        (g$12202$4aEQL core-prim . sint-list->bytevector)
        (g$6522$4aEQL core-prim . native-endianness)
        (g$12201$4aEQL core-prim . bytevector?)
        (g$12200$4aEQL core-prim . bytevector=?)
        (g$12199$4aEQL core-prim . bytevector-uint-set!)
        (g$12198$4aEQL core-prim . bytevector-uint-ref)
        (g$12197$4aEQL core-prim . bytevector-u8-set!)
        (g$12196$4aEQL core-prim . bytevector-u8-ref)
        (g$6543$4aEQL core-prim . bytevector-u64-set!)
        (g$6539$4aEQL core-prim . bytevector-u64-ref)
        (g$6545$4aEQL core-prim . bytevector-u64-native-set!)
        (g$6541$4aEQL core-prim . bytevector-u64-native-ref)
        (g$6535$4aEQL core-prim . bytevector-u32-set!)
        (g$6531$4aEQL core-prim . bytevector-u32-ref)
        (g$6537$4aEQL core-prim . bytevector-u32-native-set!)
        (g$6533$4aEQL core-prim . bytevector-u32-native-ref)
        (g$6527$4aEQL core-prim . bytevector-u16-set!)
        (g$6523$4aEQL core-prim . bytevector-u16-ref)
        (g$6529$4aEQL core-prim . bytevector-u16-native-set!)
        (g$6525$4aEQL core-prim . bytevector-u16-native-ref)
        (g$12195$4aEQL core-prim . bytevector-sint-set!)
        (g$12194$4aEQL core-prim . bytevector-sint-ref)
        (g$12193$4aEQL core-prim . bytevector-s8-set!)
        (g$12192$4aEQL core-prim . bytevector-s8-ref)
        (g$6544$4aEQL core-prim . bytevector-s64-set!)
        (g$6540$4aEQL core-prim . bytevector-s64-ref)
        (g$6546$4aEQL core-prim . bytevector-s64-native-set!)
        (g$6542$4aEQL core-prim . bytevector-s64-native-ref)
        (g$6536$4aEQL core-prim . bytevector-s32-set!)
        (g$6532$4aEQL core-prim . bytevector-s32-ref)
        (g$6538$4aEQL core-prim . bytevector-s32-native-set!)
        (g$6534$4aEQL core-prim . bytevector-s32-native-ref)
        (g$6528$4aEQL core-prim . bytevector-s16-set!)
        (g$6524$4aEQL core-prim . bytevector-s16-ref)
        (g$6530$4aEQL core-prim . bytevector-s16-native-set!)
        (g$6526$4aEQL core-prim . bytevector-s16-native-ref)
        (g$12191$4aEQL core-prim . bytevector-length)
        (g$12190$4aEQL core-prim . bytevector-ieee-single-set!)
        (g$12189$4aEQL core-prim . bytevector-ieee-single-ref)
        (g$6549$4aEQL core-prim . bytevector-ieee-single-native-set!)
        (g$6547$4aEQL core-prim . bytevector-ieee-single-native-ref)
        (g$12188$4aEQL core-prim . bytevector-ieee-double-set!)
        (g$12187$4aEQL core-prim . bytevector-ieee-double-ref)
        (g$6550$4aEQL core-prim . bytevector-ieee-double-native-set!)
        (g$6548$4aEQL core-prim . bytevector-ieee-double-native-ref)
        (g$12186$4aEQL core-prim . bytevector-fill!)
        (g$12185$4aEQL core-prim . bytevector-copy!)
        (g$12184$4aEQL core-prim . bytevector-copy)
        (g$12183$4aEQL core-prim . bytevector->uint-list)
        (g$12182$4aEQL core-prim . bytevector->u8-list)
        (g$12181$4aEQL core-prim . bytevector->sint-list)
        (g$7144$4aEQL core-prim . no-nans-violation?)
        (g$7130$4aEQL core-prim . no-infinities-violation?)
        (g$7143$4aEQL core-prim . make-no-nans-violation)
        (g$7129$4aEQL core-prim . make-no-infinities-violation)
        (g$12180$4aEQL core-prim . real->flonum)
        (g$12179$4aEQL core-prim . flzero?)
        (g$12178$4aEQL core-prim . fltruncate)
        (g$12177$4aEQL core-prim . fltan)
        (g$12176$4aEQL core-prim . flsqrt)
        (g$12175$4aEQL core-prim . flsin)
        (g$12174$4aEQL core-prim . flround)
        (g$12173$4aEQL core-prim . flpositive?)
        (g$12172$4aEQL core-prim . flonum?)
        (g$12171$4aEQL core-prim . flodd?)
        (g$12170$4aEQL core-prim . flnumerator)
        (g$12169$4aEQL core-prim . flnegative?)
        (g$12168$4aEQL core-prim . flnan?)
        (g$12167$4aEQL core-prim . flmod0)
        (g$12166$4aEQL core-prim . flmod)
        (g$12165$4aEQL core-prim . flmin)
        (g$12164$4aEQL core-prim . flmax)
        (g$12163$4aEQL core-prim . fllog)
        (g$12162$4aEQL core-prim . flinteger?)
        (g$12161$4aEQL core-prim . flinfinite?)
        (g$12160$4aEQL core-prim . flfloor)
        (g$12159$4aEQL core-prim . flfinite?)
        (g$12158$4aEQL core-prim . flexpt)
        (g$12157$4aEQL core-prim . flexp)
        (g$12156$4aEQL core-prim . fleven?)
        (g$12155$4aEQL core-prim . fldiv0-and-mod0)
        (g$12154$4aEQL core-prim . fldiv0)
        (g$12153$4aEQL core-prim . fldiv-and-mod)
        (g$12152$4aEQL core-prim . fldiv)
        (g$12151$4aEQL core-prim . fldenominator)
        (g$12150$4aEQL core-prim . flcos)
        (g$12149$4aEQL core-prim . flceiling)
        (g$12148$4aEQL core-prim . flatan)
        (g$12147$4aEQL core-prim . flasin)
        (g$12146$4aEQL core-prim . flacos)
        (g$12145$4aEQL core-prim . flabs)
        (g$12144$4aEQL core-prim . fl>?)
        (g$12143$4aEQL core-prim . fl>=?)
        (g$12142$4aEQL core-prim . fl=?)
        (g$12141$4aEQL core-prim . fl<?)
        (g$12140$4aEQL core-prim . fl<=?)
        (g$12139$4aEQL core-prim . fl/)
        (g$12138$4aEQL core-prim . fl-)
        (g$12137$4aEQL core-prim . fl+)
        (g$12136$4aEQL core-prim . fl*)
        (g$12135$4aEQL core-prim . fixnum->flonum)
        (g$12134$4aEQL core-prim . fxzero?)
        (g$12133$4aEQL core-prim . fxxor)
        (g$7076$4aEQL core-prim . fxrotate-bit-field)
        (g$12132$4aEQL core-prim . fxreverse-bit-field)
        (g$12131$4aEQL core-prim . fxpositive?)
        (g$12130$4aEQL core-prim . fxodd?)
        (g$12129$4aEQL core-prim . fxnot)
        (g$12128$4aEQL core-prim . fxnegative?)
        (g$12127$4aEQL core-prim . fxmod0)
        (g$12126$4aEQL core-prim . fxmod)
        (g$12125$4aEQL core-prim . fxmin)
        (g$12124$4aEQL core-prim . fxmax)
        (g$12123$4aEQL core-prim . fxlength)
        (g$12122$4aEQL core-prim . fxior)
        (g$7070$4aEQL core-prim . fxif)
        (g$12121$4aEQL core-prim . fxfirst-bit-set)
        (g$12120$4aEQL core-prim . fxeven?)
        (g$12119$4aEQL core-prim . fxdiv0-and-mod0)
        (g$12118$4aEQL core-prim . fxdiv0)
        (g$12117$4aEQL core-prim . fxdiv-and-mod)
        (g$12116$4aEQL core-prim . fxdiv)
        (g$7073$4aEQL core-prim . fxcopy-bit-field)
        (g$7071$4aEQL core-prim . fxcopy-bit)
        (g$12115$4aEQL core-prim . fxbit-set?)
        (g$7072$4aEQL core-prim . fxbit-field)
        (g$12114$4aEQL core-prim . fxbit-count)
        (g$7075$4aEQL core-prim . fxarithmetic-shift-right)
        (g$7074$4aEQL core-prim . fxarithmetic-shift-left)
        (g$12113$4aEQL core-prim . fxarithmetic-shift)
        (g$12112$4aEQL core-prim . fxand)
        (g$12111$4aEQL core-prim . fx>?)
        (g$12110$4aEQL core-prim . fx>=?)
        (g$12109$4aEQL core-prim . fx=?)
        (g$12108$4aEQL core-prim . fx<?)
        (g$12107$4aEQL core-prim . fx<=?)
        (g$7068$4aEQL core-prim . fx-/carry)
        (g$12106$4aEQL core-prim . fx-)
        (g$7069$4aEQL core-prim . fx+/carry)
        (g$12105$4aEQL core-prim . fx+)
        (g$7067$4aEQL core-prim . fx*/carry)
        (g$12104$4aEQL core-prim . fx*)
        (g$12103$4aEQL core-prim . greatest-fixnum)
        (g$12102$4aEQL core-prim . least-fixnum)
        (g$12101$4aEQL core-prim . fixnum-width)
        (g$12100$4aEQL core-prim . fixnum?)
        (g$7041$4aEQL core-prim . bitwise-rotate-bit-field)
        (g$12099$4aEQL core-prim . bitwise-reverse-bit-field)
        (g$12098$4aEQL core-prim . bitwise-length)
        (g$7035$4aEQL core-prim . bitwise-if)
        (g$12097$4aEQL core-prim . bitwise-first-bit-set)
        (g$7038$4aEQL core-prim . bitwise-copy-bit-field)
        (g$7036$4aEQL core-prim . bitwise-copy-bit)
        (g$12096$4aEQL core-prim . bitwise-bit-set?)
        (g$7037$4aEQL core-prim . bitwise-bit-field)
        (g$12095$4aEQL core-prim . bitwise-bit-count)
        (g$12094$4aEQL core-prim . bitwise-xor)
        (g$12093$4aEQL core-prim . bitwise-ior)
        (g$12092$4aEQL core-prim . bitwise-and)
        (g$12091$4aEQL core-prim . bitwise-not)
        (g$7040$4aEQL core-prim . bitwise-arithmetic-shift-right)
        (g$7039$4aEQL core-prim . bitwise-arithmetic-shift-left)
        (g$12090$4aEQL core-prim . bitwise-arithmetic-shift)
        (g$12089$4aEQL core-prim . zero?)
        (g$12088$4aEQL core-prim . vector?)
        (g$12087$4aEQL core-prim . vector-set!)
        (g$12086$4aEQL core-prim . vector-ref)
        (g$12085$4aEQL core-prim . vector-map)
        (g$12084$4aEQL core-prim . vector-length)
        (g$12083$4aEQL core-prim . vector-for-each)
        (g$12082$4aEQL core-prim . vector-fill!)
        (g$12081$4aEQL core-prim . vector->list)
        (g$12080$4aEQL core-prim . vector)
        (g$12079$4aEQL core-prim . values)
        (g$12078$4aEQL core-prim . truncate)
        (g$12077$4aEQL core-prim . tan)
        (g$12076$4aEQL core-prim . symbol?)
        (g$6042$4aEQL core-prim . symbol=?)
        (g$12075$4aEQL core-prim . symbol->string)
        (g$12074$4aEQL core-prim . substring)
        (g$12073$4aEQL core-prim . string?)
        (g$6039$4aEQL core-prim . string>?)
        (g$6041$4aEQL core-prim . string>=?)
        (g$6037$4aEQL core-prim . string=?)
        (g$6038$4aEQL core-prim . string<?)
        (g$6040$4aEQL core-prim . string<=?)
        (g$12072$4aEQL core-prim . string-ref)
        (g$12071$4aEQL core-prim . string-length)
        (g$12070$4aEQL core-prim . string-for-each)
        (g$12069$4aEQL core-prim . string-copy)
        (g$12068$4aEQL core-prim . string-append)
        (g$12067$4aEQL core-prim . string->symbol)
        (g$12066$4aEQL core-prim . string->number)
        (g$12065$4aEQL core-prim . string->list)
        (g$12064$4aEQL core-prim . string)
        (g$12063$4aEQL core-prim . sqrt)
        (g$12062$4aEQL core-prim . sin)
        (g$12061$4aEQL core-prim . round)
        (g$12060$4aEQL core-prim . reverse)
        (g$12059$4aEQL core-prim . real?)
        (g$12058$4aEQL core-prim . real-valued?)
        (g$12057$4aEQL core-prim . real-part)
        (g$6083$4aEQL core-prim . rationalize)
        (g$12056$4aEQL core-prim . rational?)
        (g$12055$4aEQL core-prim . rational-valued?)
        (g$12054$4aEQL core-prim . procedure?)
        (g$12053$4aEQL core-prim . positive?)
        (g$12052$4aEQL core-prim . pair?)
        (g$12051$4aEQL core-prim . odd?)
        (g$12050$4aEQL core-prim . numerator)
        (g$12049$4aEQL core-prim . number?)
        (g$12048$4aEQL core-prim . number->string)
        (g$12047$4aEQL core-prim . null?)
        (g$12046$4aEQL core-prim . not)
        (g$12045$4aEQL core-prim . negative?)
        (g$12044$4aEQL core-prim . nan?)
        (g$12043$4aEQL core-prim . min)
        (g$12042$4aEQL core-prim . max)
        (g$5857$4aEQL core-prim . map)
        (g$12041$4aEQL core-prim . make-vector)
        (g$12040$4aEQL core-prim . make-string)
        (g$12039$4aEQL core-prim . make-rectangular)
        (g$12038$4aEQL core-prim . make-polar)
        (g$12037$4aEQL core-prim . magnitude)
        (g$12036$4aEQL core-prim . log)
        (g$12035$4aEQL core-prim . list?)
        (g$5837$4aEQL core-prim . list-tail)
        (g$5838$4aEQL core-prim . list-ref)
        (g$12034$4aEQL core-prim . list->vector)
        (g$12033$4aEQL core-prim . list->string)
        (g$12032$4aEQL core-prim . list)
        (g$12031$4aEQL core-prim . length)
        (g$12030$4aEQL core-prim . lcm)
        (g$12029$4aEQL core-prim . integer?)
        (g$12028$4aEQL core-prim . integer-valued?)
        (g$12027$4aEQL core-prim . integer->char)
        (g$12026$4aEQL core-prim . infinite?)
        (g$12025$4aEQL core-prim . inexact?)
        (g$12024$4aEQL core-prim . inexact)
        (g$12023$4aEQL core-prim . imag-part)
        (g$12022$4aEQL core-prim . gcd)
        (g$5858$4aEQL core-prim . for-each)
        (g$12021$4aEQL core-prim . floor)
        (g$12020$4aEQL core-prim . finite?)
        (g$12019$4aEQL core-prim . expt)
        (g$12018$4aEQL core-prim . exp)
        (g$12017$4aEQL core-prim . exact?)
        (g$12016$4aEQL core-prim . exact-integer-sqrt)
        (g$12015$4aEQL core-prim . exact)
        (g$12014$4aEQL core-prim . even?)
        (g$12013$4aEQL core-prim . error)
        (g$12012$4aEQL core-prim . eqv?)
        (g$12011$4aEQL core-prim . equal?)
        (g$12010$4aEQL core-prim . eq?)
        (g$12009$4aEQL core-prim . dynamic-wind)
        (g$12008$4aEQL core-prim . div0-and-mod0)
        (g$12007$4aEQL core-prim . mod0)
        (g$12006$4aEQL core-prim . div0)
        (g$12005$4aEQL core-prim . div-and-mod)
        (g$12004$4aEQL core-prim . mod)
        (g$12003$4aEQL core-prim . div)
        (g$12002$4aEQL core-prim . denominator)
        (g$12001$4aEQL core-prim . cos)
        (g$12000$4aEQL core-prim . cons)
        (g$11999$4aEQL core-prim . complex?)
        (g$11998$4aEQL core-prim . char?)
        (g$6080$4aEQL core-prim . char>?)
        (g$6082$4aEQL core-prim . char>=?)
        (g$6078$4aEQL core-prim . char=?)
        (g$6079$4aEQL core-prim . char<?)
        (g$6081$4aEQL core-prim . char<=?)
        (g$11997$4aEQL core-prim . char->integer)
        (g$11996$4aEQL core-prim . ceiling)
        (g$11995$4aEQL core-prim . call-with-values)
        (g$11994$4aEQL core-prim . call/cc)
        (g$11993$4aEQL core-prim . call-with-current-continuation)
        (g$6002$4aEQL core-prim . cddddr)
        (g$6001$4aEQL core-prim . cdddar)
        (g$6000$4aEQL core-prim . cddadr)
        (g$5999$4aEQL core-prim . cddaar)
        (g$5998$4aEQL core-prim . cdaddr)
        (g$5997$4aEQL core-prim . cdadar)
        (g$5996$4aEQL core-prim . cdaadr)
        (g$5995$4aEQL core-prim . cdaaar)
        (g$5994$4aEQL core-prim . cadddr)
        (g$5993$4aEQL core-prim . caddar)
        (g$5992$4aEQL core-prim . cadadr)
        (g$5991$4aEQL core-prim . cadaar)
        (g$5990$4aEQL core-prim . caaddr)
        (g$5989$4aEQL core-prim . caadar)
        (g$5988$4aEQL core-prim . caaadr)
        (g$5987$4aEQL core-prim . caaaar)
        (g$5986$4aEQL core-prim . cdddr)
        (g$5985$4aEQL core-prim . cddar)
        (g$5984$4aEQL core-prim . cdadr)
        (g$5983$4aEQL core-prim . cdaar)
        (g$5982$4aEQL core-prim . caddr)
        (g$5981$4aEQL core-prim . cadar)
        (g$5980$4aEQL core-prim . caadr)
        (g$5979$4aEQL core-prim . caaar)
        (g$5978$4aEQL core-prim . cddr)
        (g$5977$4aEQL core-prim . cdar)
        (g$5976$4aEQL core-prim . cadr)
        (g$5975$4aEQL core-prim . caar)
        (g$11992$4aEQL core-prim . cdr)
        (g$11991$4aEQL core-prim . car)
        (g$11990$4aEQL core-prim . boolean?)
        (g$6043$4aEQL core-prim . boolean=?)
        (g$11989$4aEQL core-prim . atan)
        (g$11988$4aEQL core-prim . assertion-violation)
        (g$11987$4aEQL core-prim . asin)
        (g$11986$4aEQL core-prim . apply)
        (g$11985$4aEQL core-prim . append)
        (g$11984$4aEQL core-prim . angle)
        (g$11983$4aEQL core-prim . acos)
        (g$11982$4aEQL core-prim . abs)
        (g$11981$4aEQL core-prim . /)
        (g$11980$4aEQL core-prim . *)
        (g$11979$4aEQL core-prim . -)
        (g$11978$4aEQL core-prim . +)
        (g$11977$4aEQL core-prim . >=)
        (g$11976$4aEQL core-prim . >)
        (g$11975$4aEQL core-prim . =)
        (g$11974$4aEQL core-prim . <=)
        (g$11973$4aEQL core-prim . <)
        (g$11972$4aEQL core-prim . make-record-printer)
        (g$11971$4aEQL core-prim . eqv-hash)
        (g$11970$4aEQL core-prim . reverse!)
        (g$11969$4aEQL core-prim . deserialize-port)
        (g$11968$4aEQL core-prim . serialize-port)
        (g$7391$4aEQL core-prim . enum-set?)
        (g$6862$4aEQL core-prim . make-promise)
        (g$11806$4aEQL core-prim . load/args)
        (g$7502$4aEQL core-prim . printf)
        (g$7503$4aEQL core-prim . fprintf)
        (g$7504$4aEQL core-prim . format)
        (g$11967$4aEQL core-prim . procedure-form)
        (g$11966$4aEQL core-prim . procedure-environment)
        (g$11965$4aEQL core-prim . procedure-name)
        (g$11964$4aEQL core-prim . procedure-arity)
        (g$11963$4aEQL core-prim . gc-collect)
        (g$11962$4aEQL core-prim . clr-type?)
        (g$11961$4aEQL core-prim . get-clr-type)
        (g$11960$4aEQL core-prim . get-command-line)
        (g$11959$4aEQL core-prim . vector-append)
        (g$11958$4aEQL core-prim . vector-filter)
        (g$11957$4aEQL core-prim . vector-reverse!)
        (g$11956$4aEQL core-prim . vector-contains?)
        (g$11955$4aEQL core-prim . vector-index-of)
        (g$11954$4aEQL core-prim . vector-copy)
        (g$11953$4aEQL core-prim . vector-binary-search)
        (g$11952$4aEQL core-prim . string-ci-compare)
        (g$11951$4aEQL core-prim . string-compare)
        (g$11950$4aEQL core-prim . string-format)
        (g$11803$4aEQL core-prim . trace-printer)
        (g$11949$4aEQL core-prim . make-traced-procedure)
        (g$7524$4aEQL core-prim . make-traced-macro)
        (g$8825$4aEQL core-prim . assertion-error)
        (g$11948$4aEQL core-prim . time-it)
        (g$7531$4aEQL core-prim . make-parameter)
        (g$11947$4aEQL core-prim . library-locator)
        (g$11946$4aEQL core-prim . get-library-paths)
        (g$8804$4aEQL core-prim . environment-bindings)
        (g$8807$4aEQL core-prim . environment-symbols)
        (g$8803$4aEQL core-prim . interaction-environment-symbols)
        (g$11945$4aEQL core-prim . optimization-level)
        (g$7986$4aEQL core-prim . library-path)
        (g$8811$4aEQL core-prim . expand)
        (g$11944$4aEQL $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11943$4aEQL $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11942$4aEQL $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11941$4aEQL $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11940$4aEQL $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11939$4aEQL
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11938$4aEQL
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11937$4aEQL
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11936$4aEQL
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11935$4aEQL $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11934$4aEQL
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11933$4aEQL $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11932$4aEQL $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11931$4aEQL $core-rtd &i/o-rtd &i/o-rcd)
        (g$11930$4aEQL $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11929$4aEQL $core-rtd &undefined-rtd &undefined-rcd)
        (g$11928$4aEQL $core-rtd &syntax-rtd &syntax-rcd)
        (g$11927$4aEQL $core-rtd &lexical-rtd &lexical-rcd)
        (g$11926$4aEQL
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11925$4aEQL $core-rtd &who-rtd &who-rcd)
        (g$11924$4aEQL $core-rtd &irritants-rtd &irritants-rcd)
        (g$11923$4aEQL $core-rtd &assertion-rtd &assertion-rcd)
        (g$11922$4aEQL $core-rtd &violation-rtd &violation-rcd)
        (g$11921$4aEQL $core-rtd &error-rtd &error-rcd)
        (g$11920$4aEQL $core-rtd &serious-rtd &serious-rcd)
        (g$11919$4aEQL $core-rtd &warning-rtd &warning-rcd)
        (g$11918$4aEQL $core-rtd &message-rtd &message-rcd)
        (g$11917$4aEQL $core-rtd &condition-rtd &condition-rcd)
        (g$11916$4aEQL macro . define-condition-type)
        (g$11915$4aEQL macro . define-enumeration)
        (g$11914$4aEQL macro . define-record-type)
        (g$11913$4aEQL macro . parent-rtd)
        (g$11912$4aEQL macro . nongenerative)
        (g$11911$4aEQL macro . opaque)
        (g$11910$4aEQL macro . sealed)
        (g$11909$4aEQL macro . protocol)
        (g$11908$4aEQL macro . parent)
        (g$11907$4aEQL macro . immutable)
        (g$11906$4aEQL macro . mutable)
        (g$11905$4aEQL macro . fields)
        (g$11904$4aEQL macro . error-handling-mode)
        (g$11903$4aEQL macro . file-options)
        (g$11902$4aEQL macro . buffer-mode)
        (g$11901$4aEQL macro . eol-style)
        (g$11900$4aEQL macro . guard)
        (g$11899$4aEQL macro . trace-letrec-syntax)
        (g$11898$4aEQL macro . trace-let-syntax)
        (g$11897$4aEQL macro . trace-define-syntax)
        (g$11896$4aEQL macro . trace-define)
        (g$11895$4aEQL macro . trace-lambda)
        (g$11894$4aEQL macro . unsyntax-splicing)
        (g$11893$4aEQL macro . unsyntax)
        (g$11892$4aEQL macro . unquote-splicing)
        (g$11891$4aEQL macro . unquote)
        (g$11890$4aEQL macro . _)
        (g$11889$4aEQL macro . else)
        (g$11888$4aEQL macro . =>)
        (g$11887$4aEQL macro . ...)
        (g$11886$4aEQL macro . assert)
        (g$11885$4aEQL macro . endianness)
        (g$11884$4aEQL macro . delay)
        (g$11883$4aEQL macro . time)
        (g$11882$4aEQL macro . or)
        (g$11881$4aEQL macro . and)
        (g$11880$4aEQL macro . do)
        (g$11879$4aEQL macro . cond)
        (g$11878$4aEQL macro . let*)
        (g$11877$4aEQL macro . let)
        (g$11876$4aEQL macro . identifier-syntax)
        (g$11875$4aEQL macro . with-syntax)
        (g$11874$4aEQL macro . quasisyntax)
        (g$11873$4aEQL macro . quasiquote)
        (g$11872$4aEQL macro . syntax-rules)
        (g$11871$4aEQL macro . include-into)
        (g$11870$4aEQL macro . include)
        (g$11869$4aEQL macro . define-struct)
        (g$11868$4aEQL macro . let-values)
        (g$11867$4aEQL macro . let*-values)
        (g$11866$4aEQL core-macro . record-constructor-descriptor)
        (g$11865$4aEQL core-macro . record-type-descriptor)
        (g$11864$4aEQL core-macro . fluid-let-syntax)
        (g$11863$4aEQL macro . case)
        (g$11862$4aEQL macro . parameterize)
        (g$11861$4aEQL macro . unless)
        (g$11860$4aEQL macro . when)
        (g$11859$4aEQL core-macro . if)
        (g$11858$4aEQL core-macro . letrec*)
        (g$11857$4aEQL core-macro . letrec)
        (g$11856$4aEQL core-macro . type-descriptor)
        (g$11855$4aEQL core-macro . case-lambda)
        (g$11854$4aEQL core-macro . lambda)
        (g$11853$4aEQL core-macro . syntax)
        (g$11852$4aEQL core-macro . syntax-case)
        (g$11851$4aEQL core-macro . quote)
        (g$11850$4aEQL core-macro . foreign-call)
        (g$11849$4aEQL letrec-syntax)
        (g$11848$4aEQL let-syntax)
        (g$11847$4aEQL set!)
        (g$11846$4aEQL export)
        (g$11845$4aEQL import)
        (g$11844$4aEQL library)
        (g$11843$4aEQL begin)
        (g$11842$4aEQL module)
        (g$11841$4aEQL define-syntax)
        (g$11840$4aEQL define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7115$4aEQL
      'g$12481$4aEQL
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12363$4aEQL)
        (eval-core . g$12362$4aEQL)
        (set-symbol-value! . g$12361$4aEQL)
        (symbol-value . g$12360$4aEQL)
        (gensym . g$12358$4aEQL)
        (void . g$12357$4aEQL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11195$4aEQL
     g$trace-printer$11235$4aEQL
     (g$make-parameter$6579$4aEQL write))
   (g$command-line$11196$4aEQL
     g$command-line$11236$4aEQL
     (g$make-parameter$6579$4aEQL (get-command-line)))
   (g$local-library-path$11197$4aEQL
     g$local-library-path$11237$4aEQL
     (case-lambda
       ((g$filename$11208$4aEQL)
        (cons
          (g$get-directory-name$5497$4aEQL g$filename$11208$4aEQL)
          (g$library-path$7099$4aEQL)))))
   (g$load/args$11198$4aEQL
     g$load/args$11238$4aEQL
     (case-lambda
       ((g$filename$11209$4aEQL . g$args$11210$4aEQL)
        (begin
          (apply
            g$load-r6rs-top-level$11205$4aEQL
            g$filename$11209$4aEQL
            'load
            g$args$11210$4aEQL)
          (void)))))
   (g$load$11199$4aEQL
     g$load$11239$4aEQL
     (case-lambda
       ((g$filename$11211$4aEQL)
        (begin
          (apply
            g$load-r6rs-top-level$11205$4aEQL
            g$filename$11211$4aEQL
            'load
            (cdr (g$command-line$11196$4aEQL)))
          (void)))))
   (g$ironscheme-build$11200$4aEQL
     g$ironscheme-build$11240$4aEQL
     (case-lambda (() (g$load$11199$4aEQL '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11201$4aEQL
     g$eval-top-level$11241$4aEQL
     (case-lambda
       ((g$x$11212$4aEQL)
        (g$eval$11170$4aEQL
          g$x$11212$4aEQL
          (g$interaction-environment$11193$4aEQL)))))
   (g$compile-system-libraries$11202$4aEQL
     g$compile-system-libraries$11242$4aEQL
     (case-lambda
       (()
        (g$eval-top-level$11201$4aEQL
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11203$4aEQL
     g$compile$11243$4aEQL
     (case-lambda
       ((g$filename$11213$4aEQL)
        (g$load-r6rs-top-level$11205$4aEQL g$filename$11213$4aEQL 'compile))))
   (g$compile->closure$11204$4aEQL
     g$compile->closure$11244$4aEQL
     (case-lambda
       ((g$filename$11214$4aEQL)
        (g$load-r6rs-top-level$11205$4aEQL g$filename$11214$4aEQL 'closure))))
   (g$load-r6rs-top-level$11205$4aEQL
     g$load-r6rs-top-level$11245$4aEQL
     (case-lambda
       ((g$filename$11215$4aEQL g$how$11216$4aEQL . g$args$11217$4aEQL)
        ((case-lambda
           ((g$library-path$11220$4aEQL g$library-path$11221$4aEQL)
            ((case-lambda
               ((g$swap$11222$4aEQL)
                (dynamic-wind
                  g$swap$11222$4aEQL
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11223$4aEQL)
                         ((case-lambda
                            ((g$t$11224$4aEQL)
                             (if (g$memv$5041$4aEQL g$t$11224$4aEQL '(closure))
                               (g$pre-compile-r6rs-top-level$11192$4aEQL
                                 g$x*$11223$4aEQL)
                               (if (g$memv$5041$4aEQL g$t$11224$4aEQL '(load))
                                 ((case-lambda
                                    ((g$command-line$11227$4aEQL
                                       g$command-line$11228$4aEQL)
                                     ((case-lambda
                                        ((g$swap$11229$4aEQL)
                                         (dynamic-wind
                                           g$swap$11229$4aEQL
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11191$4aEQL
                                                 g$x*$11223$4aEQL))))
                                           g$swap$11229$4aEQL)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11230$4aEQL)
                                             (begin
                                               (g$command-line$11227$4aEQL
                                                 g$command-line$11228$4aEQL)
                                               (set! g$command-line$11228$4aEQL
                                                 g$t$11230$4aEQL))))
                                          (g$command-line$11227$4aEQL)))))))
                                  g$command-line$11196$4aEQL
                                  (cons
                                    g$filename$11215$4aEQL
                                    (g$map$5048$4aEQL
                                      (case-lambda
                                        ((g$x$11231$4aEQL)
                                         (g$format$6475$4aEQL
                                           '"~a"
                                           g$x$11231$4aEQL)))
                                      g$args$11217$4aEQL)))
                                 (if (g$memv$5041$4aEQL
                                       g$t$11224$4aEQL
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11191$4aEQL
                                       g$x*$11223$4aEQL)
                                     (g$serialize-all$7103$4aEQL
                                       serialize-library
                                       g$compile-core-expr$6826$4aEQL))
                                   (if '#f '#f (void)))))))
                          g$how$11216$4aEQL)))
                      (g$with-input-from-file$6302$4aEQL
                        g$filename$11215$4aEQL
                        (case-lambda
                          (()
                           ((letrec ((g$f$11232$4aEQL
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11233$4aEQL)
                                              (if (eof-object? g$x$11233$4aEQL)
                                                '()
                                                (cons
                                                  g$x$11233$4aEQL
                                                  (g$f$11232$4aEQL)))))
                                           (read-annotated))))))
                              g$f$11232$4aEQL))))))))
                  g$swap$11222$4aEQL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11234$4aEQL)
                    (begin
                      (g$library-path$11220$4aEQL g$library-path$11221$4aEQL)
                      (set! g$library-path$11221$4aEQL g$t$11234$4aEQL))))
                 (g$library-path$11220$4aEQL)))))))
         g$library-path$7099$4aEQL
         (g$local-library-path$11197$4aEQL g$filename$11215$4aEQL)))))
   (g$fo$11206$4aEQL
     g$fo$11246$4aEQL
     (g$make-enumeration$6437$4aEQL '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7104$4aEQL
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11207$4aEQL)
         (if (g$serious-condition?$5759$4aEQL g$ex$11207$4aEQL)
           (raise g$ex$11207$4aEQL)
           (begin (display g$ex$11207$4aEQL) (newline))))))
    (set-symbol-value! 'load g$load$11199$4aEQL)
    (set-symbol-value! 'compile g$compile$11203$4aEQL)
    (set-symbol-value! 'compile->closure g$compile->closure$11204$4aEQL)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11201$4aEQL)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11161$4aEQL)
    (set-symbol-value! 'expanded2core g$expanded->core$6825$4aEQL)
    (set-symbol-value! 'trace-printer g$trace-printer$11195$4aEQL)
    (g$file-options-constructor$6580$4aEQL
      (g$enum-set-constructor$6440$4aEQL g$fo$11206$4aEQL))
    (g$library-path$7099$4aEQL (get-library-paths))))

