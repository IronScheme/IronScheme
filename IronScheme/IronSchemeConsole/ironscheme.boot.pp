;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (psyntax config) () (void))

(library-letrec* (ironscheme lists)
  ((g$list-tail$5643$RyrJs
     g$list-tail$5787$RyrJs
     (case-lambda
       ((g$lst$5671$RyrJs g$index$5672$RyrJs)
        (if ((case-lambda
               ((g$t$5673$RyrJs)
                (if g$t$5673$RyrJs
                  g$t$5673$RyrJs
                  (begin
                    '#f
                    (g$negative?$6493$RyrJs g$index$5672$RyrJs)))))
             (null? g$lst$5671$RyrJs))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$5671$RyrJs
            g$index$5672$RyrJs)
          (if (g$zero?$6494$RyrJs g$index$5672$RyrJs)
            g$lst$5671$RyrJs
            (g$list-tail$5643$RyrJs
              (cdr g$lst$5671$RyrJs)
              (- g$index$5672$RyrJs '1)))))))
   (g$list-ref$5644$RyrJs
     g$list-ref$5788$RyrJs
     (case-lambda
       ((g$lst$5674$RyrJs g$index$5675$RyrJs)
        (car (g$list-tail$5643$RyrJs
               g$lst$5674$RyrJs
               g$index$5675$RyrJs)))))
   (g$last-pair$5645$RyrJs
     g$last-pair$5789$RyrJs
     (case-lambda
       ((g$lst$5676$RyrJs)
        (if (null? g$lst$5676$RyrJs)
          g$lst$5676$RyrJs
          (if (null? (cdr g$lst$5676$RyrJs))
            g$lst$5676$RyrJs
            (g$last-pair$5645$RyrJs (cdr g$lst$5676$RyrJs)))))))
   (g$make-list$5646$RyrJs
     g$make-list$5790$RyrJs
     (case-lambda
       ((g$n$5677$RyrJs) (vector->list (make-vector g$n$5677$RyrJs)))
       ((g$n$5678$RyrJs g$fill$5679$RyrJs)
        (vector->list (make-vector g$n$5678$RyrJs g$fill$5679$RyrJs)))))
   (g$find$5647$RyrJs
     g$find$5791$RyrJs
     (case-lambda
       ((g$proc$5680$RyrJs g$l$5681$RyrJs)
        (if (null? g$l$5681$RyrJs)
          '#f
          ((case-lambda
             ((g$e$5682$RyrJs g$r$5683$RyrJs g$proc$5684$RyrJs)
              (if (g$proc$5684$RyrJs g$e$5682$RyrJs)
                g$e$5682$RyrJs
                (g$find$5647$RyrJs g$proc$5684$RyrJs g$r$5683$RyrJs))))
           (car g$l$5681$RyrJs)
           (cdr g$l$5681$RyrJs)
           g$proc$5680$RyrJs)))))
   (g$partition$5648$RyrJs
     g$partition$5792$RyrJs
     (case-lambda
       ((g$proc$5685$RyrJs g$l$5686$RyrJs)
        ((letrec ((g$f$5687$RyrJs
                    (case-lambda
                      ((g$l$5688$RyrJs g$a$5689$RyrJs g$b$5690$RyrJs)
                       (if (null? g$l$5688$RyrJs)
                         (values
                           (reverse! g$a$5689$RyrJs)
                           (reverse! g$b$5690$RyrJs))
                         ((case-lambda
                            ((g$e$5691$RyrJs)
                             (if (g$proc$5685$RyrJs g$e$5691$RyrJs)
                               (g$f$5687$RyrJs
                                 (cdr g$l$5688$RyrJs)
                                 (cons g$e$5691$RyrJs g$a$5689$RyrJs)
                                 g$b$5690$RyrJs)
                               (g$f$5687$RyrJs
                                 (cdr g$l$5688$RyrJs)
                                 g$a$5689$RyrJs
                                 (cons
                                   g$e$5691$RyrJs
                                   g$b$5690$RyrJs)))))
                          (car g$l$5688$RyrJs)))))))
           g$f$5687$RyrJs)
         g$l$5686$RyrJs
         '()
         '()))))
   (g$remp$5649$RyrJs
     g$remp$5793$RyrJs
     (case-lambda
       ((g$proc$5692$RyrJs g$l$5693$RyrJs)
        ((letrec ((g$f$5694$RyrJs
                    (case-lambda
                      ((g$l$5695$RyrJs g$a$5696$RyrJs)
                       (if (null? g$l$5695$RyrJs)
                         (reverse! g$a$5696$RyrJs)
                         ((case-lambda
                            ((g$e$5697$RyrJs)
                             (if (g$proc$5692$RyrJs g$e$5697$RyrJs)
                               (g$f$5694$RyrJs
                                 (cdr g$l$5695$RyrJs)
                                 g$a$5696$RyrJs)
                               (g$f$5694$RyrJs
                                 (cdr g$l$5695$RyrJs)
                                 (cons
                                   g$e$5697$RyrJs
                                   g$a$5696$RyrJs)))))
                          (car g$l$5695$RyrJs)))))))
           g$f$5694$RyrJs)
         g$l$5693$RyrJs
         '()))))
   (g$filter$5650$RyrJs
     g$filter$5794$RyrJs
     (case-lambda
       ((g$proc$5698$RyrJs g$l$5699$RyrJs)
        ((letrec ((g$f$5700$RyrJs
                    (case-lambda
                      ((g$l$5701$RyrJs g$a$5702$RyrJs)
                       (if (null? g$l$5701$RyrJs)
                         (reverse! g$a$5702$RyrJs)
                         ((case-lambda
                            ((g$e$5703$RyrJs)
                             (if (g$proc$5698$RyrJs g$e$5703$RyrJs)
                               (g$f$5700$RyrJs
                                 (cdr g$l$5701$RyrJs)
                                 (cons g$e$5703$RyrJs g$a$5702$RyrJs))
                               (g$f$5700$RyrJs
                                 (cdr g$l$5701$RyrJs)
                                 g$a$5702$RyrJs))))
                          (car g$l$5701$RyrJs)))))))
           g$f$5700$RyrJs)
         g$l$5699$RyrJs
         '()))))
   (g$assq$5651$RyrJs
     g$assq$5795$RyrJs
     (case-lambda
       ((g$obj$5704$RyrJs g$lst$5705$RyrJs)
        (if (null? g$lst$5705$RyrJs)
          '#f
          ((case-lambda
             ((g$obj$5706$RyrJs g$t$5707$RyrJs g$r$5708$RyrJs)
              (if (eq? g$obj$5706$RyrJs (car g$t$5707$RyrJs))
                g$t$5707$RyrJs
                (g$assq$5651$RyrJs g$obj$5706$RyrJs g$r$5708$RyrJs))))
           g$obj$5704$RyrJs
           (car g$lst$5705$RyrJs)
           (cdr g$lst$5705$RyrJs))))))
   (g$assv$5652$RyrJs
     g$assv$5796$RyrJs
     (case-lambda
       ((g$obj$5709$RyrJs g$lst$5710$RyrJs)
        (if (null? g$lst$5710$RyrJs)
          '#f
          ((case-lambda
             ((g$obj$5711$RyrJs g$t$5712$RyrJs g$r$5713$RyrJs)
              (if (eqv? g$obj$5711$RyrJs (car g$t$5712$RyrJs))
                g$t$5712$RyrJs
                (g$assv$5652$RyrJs g$obj$5711$RyrJs g$r$5713$RyrJs))))
           g$obj$5709$RyrJs
           (car g$lst$5710$RyrJs)
           (cdr g$lst$5710$RyrJs))))))
   (g$assoc$5653$RyrJs
     g$assoc$5797$RyrJs
     (case-lambda
       ((g$obj$5714$RyrJs g$lst$5715$RyrJs)
        (if (null? g$lst$5715$RyrJs)
          '#f
          ((case-lambda
             ((g$obj$5716$RyrJs g$t$5717$RyrJs g$r$5718$RyrJs)
              (if (equal? g$obj$5716$RyrJs (car g$t$5717$RyrJs))
                g$t$5717$RyrJs
                (g$assoc$5653$RyrJs g$obj$5716$RyrJs g$r$5718$RyrJs))))
           g$obj$5714$RyrJs
           (car g$lst$5715$RyrJs)
           (cdr g$lst$5715$RyrJs))))))
   (g$assp$5654$RyrJs
     g$assp$5798$RyrJs
     (case-lambda
       ((g$p?$5719$RyrJs g$lst$5720$RyrJs)
        (if (null? g$lst$5720$RyrJs)
          '#f
          ((case-lambda
             ((g$p?$5721$RyrJs g$t$5722$RyrJs g$r$5723$RyrJs)
              (if (g$p?$5721$RyrJs (car g$t$5722$RyrJs))
                g$t$5722$RyrJs
                (g$assp$5654$RyrJs g$p?$5721$RyrJs g$r$5723$RyrJs))))
           g$p?$5719$RyrJs
           (car g$lst$5720$RyrJs)
           (cdr g$lst$5720$RyrJs))))))
   (g$memq$5655$RyrJs
     g$memq$5799$RyrJs
     (case-lambda
       ((g$obj$5724$RyrJs g$lst$5725$RyrJs)
        (if (null? g$lst$5725$RyrJs)
          '#f
          (if (eq? g$obj$5724$RyrJs (car g$lst$5725$RyrJs))
            g$lst$5725$RyrJs
            (g$memq$5655$RyrJs
              g$obj$5724$RyrJs
              (cdr g$lst$5725$RyrJs)))))))
   (g$memv$5656$RyrJs
     g$memv$5800$RyrJs
     (case-lambda
       ((g$obj$5726$RyrJs g$lst$5727$RyrJs)
        (if (null? g$lst$5727$RyrJs)
          '#f
          (if (eqv? g$obj$5726$RyrJs (car g$lst$5727$RyrJs))
            g$lst$5727$RyrJs
            (g$memv$5656$RyrJs
              g$obj$5726$RyrJs
              (cdr g$lst$5727$RyrJs)))))))
   (g$member$5657$RyrJs
     g$member$5801$RyrJs
     (case-lambda
       ((g$obj$5728$RyrJs g$lst$5729$RyrJs)
        (if (null? g$lst$5729$RyrJs)
          '#f
          (if (equal? g$obj$5728$RyrJs (car g$lst$5729$RyrJs))
            g$lst$5729$RyrJs
            (g$member$5657$RyrJs
              g$obj$5728$RyrJs
              (cdr g$lst$5729$RyrJs)))))))
   (g$memp$5658$RyrJs
     g$memp$5802$RyrJs
     (case-lambda
       ((g$p?$5730$RyrJs g$lst$5731$RyrJs)
        (if (null? g$lst$5731$RyrJs)
          '#f
          (if (g$p?$5730$RyrJs (car g$lst$5731$RyrJs))
            g$lst$5731$RyrJs
            (g$memp$5658$RyrJs
              g$p?$5730$RyrJs
              (cdr g$lst$5731$RyrJs)))))))
   (g$all-empty?$5659$RyrJs
     g$all-empty?$5803$RyrJs
     (case-lambda
       ((g$ls$5732$RyrJs)
        ((case-lambda
           ((g$t$5733$RyrJs)
            (if g$t$5733$RyrJs
              g$t$5733$RyrJs
              (begin
                '#f
                (if (null? (car g$ls$5732$RyrJs))
                  (begin
                    '#f
                    (g$all-empty?$5659$RyrJs (cdr g$ls$5732$RyrJs)))
                  '#f)))))
         (null? g$ls$5732$RyrJs)))))
   (g$split$5660$RyrJs
     g$split$5804$RyrJs
     (case-lambda
       ((g$ls$5734$RyrJs)
        (if (null? g$ls$5734$RyrJs)
          (values '() '())
          (call-with-values
            (case-lambda
              (() (g$split$5660$RyrJs (cdr g$ls$5734$RyrJs))))
            (case-lambda
              ((g$cars$5735$RyrJs g$cdrs$5736$RyrJs)
               ((case-lambda
                  ((g$a$5737$RyrJs)
                   (values
                     (cons (car g$a$5737$RyrJs) g$cars$5735$RyrJs)
                     (cons (cdr g$a$5737$RyrJs) g$cdrs$5736$RyrJs))))
                (car g$ls$5734$RyrJs)))))))))
   (g$for-all$5661$RyrJs
     g$for-all$5805$RyrJs
     (case-lambda
       ((g$f$5738$RyrJs g$arg1$5739$RyrJs . g$args$5740$RyrJs)
        ((case-lambda
           ((g$args$5741$RyrJs)
            (if (g$all-empty?$5659$RyrJs g$args$5741$RyrJs)
              '#t
              (call-with-values
                (case-lambda
                  (() (g$split$5660$RyrJs g$args$5741$RyrJs)))
                (case-lambda
                  ((g$cars$5742$RyrJs g$cdrs$5743$RyrJs)
                   (if (g$all-empty?$5659$RyrJs g$cdrs$5743$RyrJs)
                     (apply g$f$5738$RyrJs g$cars$5742$RyrJs)
                     (if (apply g$f$5738$RyrJs g$cars$5742$RyrJs)
                       (begin
                         '#f
                         (apply
                           g$for-all$5661$RyrJs
                           g$f$5738$RyrJs
                           g$cdrs$5743$RyrJs))
                       '#f))))))))
         (cons g$arg1$5739$RyrJs g$args$5740$RyrJs)))))
   (g$exists$5662$RyrJs
     g$exists$5806$RyrJs
     (case-lambda
       ((g$f$5744$RyrJs g$arg1$5745$RyrJs . g$args$5746$RyrJs)
        ((case-lambda
           ((g$args$5747$RyrJs)
            (if (g$all-empty?$5659$RyrJs g$args$5747$RyrJs)
              '#f
              (call-with-values
                (case-lambda
                  (() (g$split$5660$RyrJs g$args$5747$RyrJs)))
                (case-lambda
                  ((g$cars$5748$RyrJs g$cdrs$5749$RyrJs)
                   ((case-lambda
                      ((g$t$5750$RyrJs)
                       (if g$t$5750$RyrJs
                         g$t$5750$RyrJs
                         (begin
                           '#f
                           (apply
                             g$exists$5662$RyrJs
                             g$f$5744$RyrJs
                             g$cdrs$5749$RyrJs)))))
                    (apply g$f$5744$RyrJs g$cars$5748$RyrJs))))))))
         (cons g$arg1$5745$RyrJs g$args$5746$RyrJs)))))
   (g$map$5663$RyrJs
     g$map$5807$RyrJs
     (case-lambda
       ((g$proc$5751$RyrJs g$list1$5752$RyrJs . g$lists$5753$RyrJs)
        ((letrec ((g$f$5754$RyrJs
                    (case-lambda
                      ((g$lists$5755$RyrJs g$a$5756$RyrJs)
                       (if (g$all-empty?$5659$RyrJs g$lists$5755$RyrJs)
                         (reverse! g$a$5756$RyrJs)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$5660$RyrJs g$lists$5755$RyrJs)))
                           (case-lambda
                             ((g$cars$5757$RyrJs g$cdrs$5758$RyrJs)
                              (g$f$5754$RyrJs
                                g$cdrs$5758$RyrJs
                                (cons
                                  (apply
                                    g$proc$5751$RyrJs
                                    g$cars$5757$RyrJs)
                                  g$a$5756$RyrJs))))))))))
           g$f$5754$RyrJs)
         (cons g$list1$5752$RyrJs g$lists$5753$RyrJs)
         '()))))
   (g$for-each$5664$RyrJs
     g$for-each$5808$RyrJs
     (case-lambda
       ((g$f$5759$RyrJs g$arg1$5760$RyrJs . g$args$5761$RyrJs)
        ((case-lambda
           ((g$args$5762$RyrJs)
            (if (not (g$all-empty?$5659$RyrJs g$args$5762$RyrJs))
              (call-with-values
                (case-lambda
                  (() (g$split$5660$RyrJs g$args$5762$RyrJs)))
                (case-lambda
                  ((g$cars$5763$RyrJs g$cdrs$5764$RyrJs)
                   (begin
                     (apply g$f$5759$RyrJs g$cars$5763$RyrJs)
                     (apply
                       g$for-each$5664$RyrJs
                       g$f$5759$RyrJs
                       g$cdrs$5764$RyrJs)))))
              (void))))
         (cons g$arg1$5760$RyrJs g$args$5761$RyrJs)))))
   (g$cons*$5665$RyrJs
     g$cons*$5809$RyrJs
     (case-lambda
       ((g$a$5765$RyrJs . g$rest$5766$RyrJs)
        ((letrec ((g$f$5767$RyrJs
                    (case-lambda
                      ((g$a$5768$RyrJs g$rest$5769$RyrJs)
                       (if (null? g$rest$5769$RyrJs)
                         g$a$5768$RyrJs
                         (cons
                           g$a$5768$RyrJs
                           (g$f$5767$RyrJs
                             (car g$rest$5769$RyrJs)
                             (cdr g$rest$5769$RyrJs))))))))
           g$f$5767$RyrJs)
         g$a$5765$RyrJs
         g$rest$5766$RyrJs))))
   (g$fold-left$5666$RyrJs
     g$fold-left$5810$RyrJs
     (case-lambda
       ((g$combine$5770$RyrJs
          g$nil$5771$RyrJs
          g$list1$5772$RyrJs
          .
          g$lists$5773$RyrJs)
        (if (null? g$list1$5772$RyrJs)
          g$nil$5771$RyrJs
          (apply
            g$fold-left$5666$RyrJs
            (g$cons*$5665$RyrJs
              g$combine$5770$RyrJs
              (apply
                g$combine$5770$RyrJs
                (g$cons*$5665$RyrJs
                  g$nil$5771$RyrJs
                  (car g$list1$5772$RyrJs)
                  (g$map$5663$RyrJs car g$lists$5773$RyrJs)))
              (cdr g$list1$5772$RyrJs)
              (g$map$5663$RyrJs cdr g$lists$5773$RyrJs)))))))
   (g$fold-right$5667$RyrJs
     g$fold-right$5811$RyrJs
     (case-lambda
       ((g$combine$5774$RyrJs
          g$nil$5775$RyrJs
          g$list1$5776$RyrJs
          .
          g$lists$5777$RyrJs)
        (if (null? g$list1$5776$RyrJs)
          g$nil$5775$RyrJs
          (apply
            g$combine$5774$RyrJs
            (append
              (list (car g$list1$5776$RyrJs))
              (g$map$5663$RyrJs car g$lists$5777$RyrJs)
              (list
                (apply
                  g$fold-right$5667$RyrJs
                  (g$cons*$5665$RyrJs
                    g$combine$5774$RyrJs
                    g$nil$5775$RyrJs
                    (cdr g$list1$5776$RyrJs)
                    (g$map$5663$RyrJs cdr g$lists$5777$RyrJs))))))))))
   (g$remove$5668$RyrJs
     g$remove$5812$RyrJs
     (case-lambda
       ((g$obj$5778$RyrJs g$list$5779$RyrJs)
        (g$remp$5649$RyrJs
          (case-lambda
            ((g$x$5780$RyrJs) (equal? g$obj$5778$RyrJs g$x$5780$RyrJs)))
          g$list$5779$RyrJs))))
   (g$remv$5669$RyrJs
     g$remv$5813$RyrJs
     (case-lambda
       ((g$obj$5781$RyrJs g$list$5782$RyrJs)
        (g$remp$5649$RyrJs
          (case-lambda
            ((g$x$5783$RyrJs) (eqv? g$obj$5781$RyrJs g$x$5783$RyrJs)))
          g$list$5782$RyrJs))))
   (g$remq$5670$RyrJs
     g$remq$5814$RyrJs
     (case-lambda
       ((g$obj$5784$RyrJs g$list$5785$RyrJs)
        (g$remp$5649$RyrJs
          (case-lambda
            ((g$x$5786$RyrJs) (eq? g$obj$5784$RyrJs g$x$5786$RyrJs)))
          g$list$5785$RyrJs)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$mod$6123$RyrJs
     g$mod$6447$RyrJs
     (case-lambda
       ((g$x1$6269$RyrJs g$x2$6270$RyrJs)
        (- g$x1$6269$RyrJs
           (* (div g$x1$6269$RyrJs g$x2$6270$RyrJs) g$x2$6270$RyrJs)))))
   (g$mod0$6124$RyrJs
     g$mod0$6448$RyrJs
     (case-lambda
       ((g$x1$6271$RyrJs g$x2$6272$RyrJs)
        (- g$x1$6271$RyrJs
           (* (div0 g$x1$6271$RyrJs g$x2$6272$RyrJs)
              g$x2$6272$RyrJs)))))
   (g$div-and-mod$6125$RyrJs
     g$div-and-mod$6449$RyrJs
     (case-lambda
       ((g$x1$6273$RyrJs g$x2$6274$RyrJs)
        ((case-lambda
           ((g$d$6275$RyrJs)
            (values
              g$d$6275$RyrJs
              (- g$x1$6273$RyrJs (* g$d$6275$RyrJs g$x2$6274$RyrJs)))))
         (div g$x1$6273$RyrJs g$x2$6274$RyrJs)))))
   (g$div0-and-mod0$6126$RyrJs
     g$div0-and-mod0$6450$RyrJs
     (case-lambda
       ((g$x1$6276$RyrJs g$x2$6277$RyrJs)
        ((case-lambda
           ((g$d$6278$RyrJs)
            (values
              g$d$6278$RyrJs
              (- g$x1$6276$RyrJs (* g$d$6278$RyrJs g$x2$6277$RyrJs)))))
         (div0 g$x1$6276$RyrJs g$x2$6277$RyrJs)))))
   (g$list->vector$6127$RyrJs
     g$list->vector$6451$RyrJs
     (case-lambda ((g$lst$6279$RyrJs) (apply vector g$lst$6279$RyrJs))))
   (g$list->string$6128$RyrJs
     g$list->string$6452$RyrJs
     (case-lambda ((g$lst$6280$RyrJs) (apply string g$lst$6280$RyrJs))))
   (g$char?$6129$RyrJs
     g$char?$6453$RyrJs
     (case-lambda
       ((g$obj$6281$RyrJs)
        (clr-is-internal 'system.char g$obj$6281$RyrJs))))
   (g$vector?$6130$RyrJs
     g$vector?$6454$RyrJs
     (case-lambda
       ((g$obj$6282$RyrJs)
        (clr-is-internal 'system.object[] g$obj$6282$RyrJs))))
   (g$bytevector?$6131$RyrJs
     g$bytevector?$6455$RyrJs
     (case-lambda
       ((g$obj$6283$RyrJs)
        (clr-is-internal 'system.byte[] g$obj$6283$RyrJs))))
   (g$symbol?$6132$RyrJs
     g$symbol?$6456$RyrJs
     (case-lambda
       ((g$obj$6284$RyrJs)
        (clr-is-internal
          'microsoft.scripting.symbolid
          g$obj$6284$RyrJs))))
   (g$boolean?$6133$RyrJs
     g$boolean?$6457$RyrJs
     (case-lambda
       ((g$obj$6285$RyrJs)
        (clr-is-internal 'system.boolean g$obj$6285$RyrJs))))
   (g$procedure?$6134$RyrJs
     g$procedure?$6458$RyrJs
     (case-lambda
       ((g$obj$6286$RyrJs)
        (clr-is-internal
          'ironscheme.runtime.icallable
          g$obj$6286$RyrJs))))
   (g$fixnum?$6135$RyrJs
     g$fixnum?$6459$RyrJs
     (case-lambda
       ((g$obj$6287$RyrJs)
        (clr-is-internal 'system.int32 g$obj$6287$RyrJs))))
   (g$flonum?$6136$RyrJs
     g$flonum?$6460$RyrJs
     (case-lambda
       ((g$obj$6288$RyrJs)
        (clr-is-internal 'system.double g$obj$6288$RyrJs))))
   (g$fixnum-width$6137$RyrJs
     g$fixnum-width$6461$RyrJs
     (case-lambda (() '32)))
   (g$vector-fill!$6138$RyrJs
     g$vector-fill!$6462$RyrJs
     (case-lambda
       ((g$vec$6289$RyrJs g$val$6290$RyrJs)
        ((case-lambda
           ((g$len$6291$RyrJs)
            (letrec ((g$loop$6292$RyrJs
                       (case-lambda
                         ((g$i$6293$RyrJs)
                          (if (fx=? g$i$6293$RyrJs g$len$6291$RyrJs)
                            (if '#f '#f (void))
                            (begin
                              (vector-set!
                                g$vec$6289$RyrJs
                                g$i$6293$RyrJs
                                g$val$6290$RyrJs)
                              (g$loop$6292$RyrJs
                                (fx+ g$i$6293$RyrJs '1))))))))
              (g$loop$6292$RyrJs '0))))
         (vector-length g$vec$6289$RyrJs)))))
   (g$reverse$6139$RyrJs
     g$reverse$6463$RyrJs
     (case-lambda
       ((g$lst$6294$RyrJs)
        (g$fold-left$5810$RyrJs
          (case-lambda
            ((g$x$6295$RyrJs g$y$6296$RyrJs)
             (cons g$y$6296$RyrJs g$x$6295$RyrJs)))
          '()
          g$lst$6294$RyrJs))))
   (g$caar$6140$RyrJs
     g$caar$6464$RyrJs
     (case-lambda ((g$x$6297$RyrJs) (car (car g$x$6297$RyrJs)))))
   (g$cadr$6141$RyrJs
     g$cadr$6465$RyrJs
     (case-lambda ((g$x$6298$RyrJs) (car (cdr g$x$6298$RyrJs)))))
   (g$cdar$6142$RyrJs
     g$cdar$6466$RyrJs
     (case-lambda ((g$x$6299$RyrJs) (cdr (car g$x$6299$RyrJs)))))
   (g$cddr$6143$RyrJs
     g$cddr$6467$RyrJs
     (case-lambda ((g$x$6300$RyrJs) (cdr (cdr g$x$6300$RyrJs)))))
   (g$caaar$6144$RyrJs
     g$caaar$6468$RyrJs
     (case-lambda
       ((g$x$6301$RyrJs) (g$caar$6140$RyrJs (car g$x$6301$RyrJs)))))
   (g$caadr$6145$RyrJs
     g$caadr$6469$RyrJs
     (case-lambda
       ((g$x$6302$RyrJs) (g$caar$6140$RyrJs (cdr g$x$6302$RyrJs)))))
   (g$cadar$6146$RyrJs
     g$cadar$6470$RyrJs
     (case-lambda
       ((g$x$6303$RyrJs) (g$cadr$6141$RyrJs (car g$x$6303$RyrJs)))))
   (g$caddr$6147$RyrJs
     g$caddr$6471$RyrJs
     (case-lambda
       ((g$x$6304$RyrJs) (g$cadr$6141$RyrJs (cdr g$x$6304$RyrJs)))))
   (g$cdaar$6148$RyrJs
     g$cdaar$6472$RyrJs
     (case-lambda
       ((g$x$6305$RyrJs) (g$cdar$6142$RyrJs (car g$x$6305$RyrJs)))))
   (g$cdadr$6149$RyrJs
     g$cdadr$6473$RyrJs
     (case-lambda
       ((g$x$6306$RyrJs) (g$cdar$6142$RyrJs (cdr g$x$6306$RyrJs)))))
   (g$cddar$6150$RyrJs
     g$cddar$6474$RyrJs
     (case-lambda
       ((g$x$6307$RyrJs) (g$cddr$6143$RyrJs (car g$x$6307$RyrJs)))))
   (g$cdddr$6151$RyrJs
     g$cdddr$6475$RyrJs
     (case-lambda
       ((g$x$6308$RyrJs) (g$cddr$6143$RyrJs (cdr g$x$6308$RyrJs)))))
   (g$caaaar$6152$RyrJs
     g$caaaar$6476$RyrJs
     (case-lambda
       ((g$x$6309$RyrJs) (g$caaar$6144$RyrJs (car g$x$6309$RyrJs)))))
   (g$caaadr$6153$RyrJs
     g$caaadr$6477$RyrJs
     (case-lambda
       ((g$x$6310$RyrJs) (g$caaar$6144$RyrJs (cdr g$x$6310$RyrJs)))))
   (g$caadar$6154$RyrJs
     g$caadar$6478$RyrJs
     (case-lambda
       ((g$x$6311$RyrJs) (g$caadr$6145$RyrJs (car g$x$6311$RyrJs)))))
   (g$caaddr$6155$RyrJs
     g$caaddr$6479$RyrJs
     (case-lambda
       ((g$x$6312$RyrJs) (g$caadr$6145$RyrJs (cdr g$x$6312$RyrJs)))))
   (g$cadaar$6156$RyrJs
     g$cadaar$6480$RyrJs
     (case-lambda
       ((g$x$6313$RyrJs) (g$cadar$6146$RyrJs (car g$x$6313$RyrJs)))))
   (g$cadadr$6157$RyrJs
     g$cadadr$6481$RyrJs
     (case-lambda
       ((g$x$6314$RyrJs) (g$cadar$6146$RyrJs (cdr g$x$6314$RyrJs)))))
   (g$caddar$6158$RyrJs
     g$caddar$6482$RyrJs
     (case-lambda
       ((g$x$6315$RyrJs) (g$caddr$6147$RyrJs (car g$x$6315$RyrJs)))))
   (g$cadddr$6159$RyrJs
     g$cadddr$6483$RyrJs
     (case-lambda
       ((g$x$6316$RyrJs) (g$caddr$6147$RyrJs (cdr g$x$6316$RyrJs)))))
   (g$cdaaar$6160$RyrJs
     g$cdaaar$6484$RyrJs
     (case-lambda
       ((g$x$6317$RyrJs) (g$cdaar$6148$RyrJs (car g$x$6317$RyrJs)))))
   (g$cdaadr$6161$RyrJs
     g$cdaadr$6485$RyrJs
     (case-lambda
       ((g$x$6318$RyrJs) (g$cdaar$6148$RyrJs (cdr g$x$6318$RyrJs)))))
   (g$cdadar$6162$RyrJs
     g$cdadar$6486$RyrJs
     (case-lambda
       ((g$x$6319$RyrJs) (g$cdadr$6149$RyrJs (car g$x$6319$RyrJs)))))
   (g$cdaddr$6163$RyrJs
     g$cdaddr$6487$RyrJs
     (case-lambda
       ((g$x$6320$RyrJs) (g$cdadr$6149$RyrJs (cdr g$x$6320$RyrJs)))))
   (g$cddaar$6164$RyrJs
     g$cddaar$6488$RyrJs
     (case-lambda
       ((g$x$6321$RyrJs) (g$cddar$6150$RyrJs (car g$x$6321$RyrJs)))))
   (g$cddadr$6165$RyrJs
     g$cddadr$6489$RyrJs
     (case-lambda
       ((g$x$6322$RyrJs) (g$cddar$6150$RyrJs (cdr g$x$6322$RyrJs)))))
   (g$cdddar$6166$RyrJs
     g$cdddar$6490$RyrJs
     (case-lambda
       ((g$x$6323$RyrJs) (g$cdddr$6151$RyrJs (car g$x$6323$RyrJs)))))
   (g$cddddr$6167$RyrJs
     g$cddddr$6491$RyrJs
     (case-lambda
       ((g$x$6324$RyrJs) (g$cdddr$6151$RyrJs (cdr g$x$6324$RyrJs)))))
   (g$positive?$6168$RyrJs
     g$positive?$6492$RyrJs
     (case-lambda
       ((g$r$6325$RyrJs)
        (begin
          (if (not (real-valued? g$r$6325$RyrJs))
            (assertion-violation
              'positive?
              '"not a real"
              g$r$6325$RyrJs)
            (void))
          (< '0 g$r$6325$RyrJs)))))
   (g$negative?$6169$RyrJs
     g$negative?$6493$RyrJs
     (case-lambda
       ((g$r$6326$RyrJs)
        (begin
          (if (not (real-valued? g$r$6326$RyrJs))
            (assertion-violation
              'negative?
              '"not a real"
              g$r$6326$RyrJs)
            (void))
          (> '0 g$r$6326$RyrJs)))))
   (g$zero?$6170$RyrJs
     g$zero?$6494$RyrJs
     (case-lambda
       ((g$z$6327$RyrJs)
        (begin
          (if (not (number? g$z$6327$RyrJs))
            (assertion-violation 'zero? '"not a number" g$z$6327$RyrJs)
            (void))
          (= '0 g$z$6327$RyrJs)))))
   (g$even?$6171$RyrJs
     g$even?$6495$RyrJs
     (case-lambda
       ((g$n$6328$RyrJs)
        (begin
          (if (not (integer-valued? g$n$6328$RyrJs))
            (assertion-violation 'even? '"not a integer" g$n$6328$RyrJs)
            (void))
          (= '0 (g$mod$6123$RyrJs g$n$6328$RyrJs '2))))))
   (g$odd?$6172$RyrJs
     g$odd?$6496$RyrJs
     (case-lambda
       ((g$n$6329$RyrJs)
        (begin
          (if (not (integer-valued? g$n$6329$RyrJs))
            (assertion-violation 'odd? '"not a integer" g$n$6329$RyrJs)
            (void))
          (= '1 (g$mod$6123$RyrJs g$n$6329$RyrJs '2))))))
   (g$max$6173$RyrJs
     g$max$6497$RyrJs
     (case-lambda
       ((g$a$6330$RyrJs . g$rest$6331$RyrJs)
        (begin
          (if (not (real-valued? g$a$6330$RyrJs))
            (assertion-violation 'max '"not a real" g$a$6330$RyrJs)
            (void))
          (g$fold-left$5810$RyrJs
            (case-lambda
              ((g$a$6332$RyrJs g$b$6333$RyrJs)
               ((case-lambda
                  ((g$r$6334$RyrJs)
                   (if ((case-lambda
                          ((g$t$6335$RyrJs)
                           (if g$t$6335$RyrJs
                             g$t$6335$RyrJs
                             (begin '#f (inexact? g$b$6333$RyrJs)))))
                        (inexact? g$a$6332$RyrJs))
                     (inexact g$r$6334$RyrJs)
                     g$r$6334$RyrJs)))
                (if (< g$a$6332$RyrJs g$b$6333$RyrJs)
                  g$b$6333$RyrJs
                  g$a$6332$RyrJs))))
            g$a$6330$RyrJs
            g$rest$6331$RyrJs)))))
   (g$min$6174$RyrJs
     g$min$6498$RyrJs
     (case-lambda
       ((g$a$6336$RyrJs . g$rest$6337$RyrJs)
        (begin
          (if (not (real-valued? g$a$6336$RyrJs))
            (assertion-violation 'min '"not a real" g$a$6336$RyrJs)
            (void))
          (g$fold-left$5810$RyrJs
            (case-lambda
              ((g$a$6338$RyrJs g$b$6339$RyrJs)
               ((case-lambda
                  ((g$r$6340$RyrJs)
                   (if ((case-lambda
                          ((g$t$6341$RyrJs)
                           (if g$t$6341$RyrJs
                             g$t$6341$RyrJs
                             (begin '#f (inexact? g$b$6339$RyrJs)))))
                        (inexact? g$a$6338$RyrJs))
                     (inexact g$r$6340$RyrJs)
                     g$r$6340$RyrJs)))
                (if (> g$a$6338$RyrJs g$b$6339$RyrJs)
                  g$b$6339$RyrJs
                  g$a$6338$RyrJs))))
            g$a$6336$RyrJs
            g$rest$6337$RyrJs)))))
   (g$gcd$6175$RyrJs
     g$gcd$6499$RyrJs
     (case-lambda
       (g$nums$6342$RyrJs
        ((case-lambda
           ((g$t$6343$RyrJs)
            (if (eqv? g$t$6343$RyrJs '0)
              '0
              (if (eqv? g$t$6343$RyrJs '1)
                ((case-lambda
                   ((g$n$6344$RyrJs)
                    (begin
                      (if (not (integer-valued? g$n$6344$RyrJs))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$6344$RyrJs)
                        (void))
                      (abs g$n$6344$RyrJs))))
                 (car g$nums$6342$RyrJs))
                (if (eqv? g$t$6343$RyrJs '2)
                  ((case-lambda
                     ((g$a$6345$RyrJs g$b$6346$RyrJs)
                      (begin
                        (if (not (integer-valued? g$a$6345$RyrJs))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$6345$RyrJs)
                          (void))
                        (if (not (integer-valued? g$b$6346$RyrJs))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$6346$RyrJs)
                          (void))
                        (if (g$zero?$6170$RyrJs g$b$6346$RyrJs)
                          (abs g$a$6345$RyrJs)
                          (abs (g$gcd$6175$RyrJs
                                 g$b$6346$RyrJs
                                 (g$mod$6123$RyrJs
                                   g$a$6345$RyrJs
                                   g$b$6346$RyrJs)))))))
                   (car g$nums$6342$RyrJs)
                   (g$cadr$6141$RyrJs g$nums$6342$RyrJs))
                  (g$fold-left$5810$RyrJs
                    g$gcd$6175$RyrJs
                    (abs (car g$nums$6342$RyrJs))
                    (cdr g$nums$6342$RyrJs)))))))
         (length g$nums$6342$RyrJs)))))
   (g$lcm$6176$RyrJs
     g$lcm$6500$RyrJs
     (case-lambda
       (g$nums$6347$RyrJs
        ((case-lambda
           ((g$t$6348$RyrJs)
            (if (eqv? g$t$6348$RyrJs '0)
              '1
              (if (eqv? g$t$6348$RyrJs '1)
                ((case-lambda
                   ((g$n$6349$RyrJs)
                    (begin
                      (if (not (integer-valued? g$n$6349$RyrJs))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$6349$RyrJs)
                        (void))
                      (abs g$n$6349$RyrJs))))
                 (car g$nums$6347$RyrJs))
                (if (eqv? g$t$6348$RyrJs '2)
                  ((case-lambda
                     ((g$a$6350$RyrJs g$b$6351$RyrJs)
                      (begin
                        (if (not (integer-valued? g$a$6350$RyrJs))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$6350$RyrJs)
                          (void))
                        (if (not (integer-valued? g$b$6351$RyrJs))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$6351$RyrJs)
                          (void))
                        (if ((case-lambda
                               ((g$t$6352$RyrJs)
                                (if g$t$6352$RyrJs
                                  g$t$6352$RyrJs
                                  (begin
                                    '#f
                                    (g$zero?$6170$RyrJs
                                      g$b$6351$RyrJs)))))
                             (g$zero?$6170$RyrJs g$a$6350$RyrJs))
                          '0
                          (abs (* (/ g$a$6350$RyrJs
                                     (g$gcd$6175$RyrJs
                                       g$a$6350$RyrJs
                                       g$b$6351$RyrJs))
                                  g$b$6351$RyrJs))))))
                   (car g$nums$6347$RyrJs)
                   (g$cadr$6141$RyrJs g$nums$6347$RyrJs))
                  (g$fold-left$5810$RyrJs
                    g$lcm$6176$RyrJs
                    (abs (car g$nums$6347$RyrJs))
                    (cdr g$nums$6347$RyrJs)))))))
         (length g$nums$6347$RyrJs)))))
   (g$string=?$6214$RyrJs
     g$string=?$6501$RyrJs
     (case-lambda
       ((g$a$6353$RyrJs g$b$6354$RyrJs . g$rest$6355$RyrJs)
        (begin
          (if (not (string? g$a$6353$RyrJs))
            (assertion-violation
              'string=?
              '"not a string"
              g$a$6353$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6356$RyrJs)
               (begin
                 (if (not (string? g$x$6356$RyrJs))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$6356$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6357$RyrJs)
                     (begin
                       (set! g$a$6353$RyrJs g$x$6356$RyrJs)
                       g$r$6357$RyrJs)))
                  (fx=?
                    (string-compare g$a$6353$RyrJs g$x$6356$RyrJs)
                    '0)))))
            (cons g$b$6354$RyrJs g$rest$6355$RyrJs))))))
   (g$string<?$6215$RyrJs
     g$string<?$6502$RyrJs
     (case-lambda
       ((g$a$6358$RyrJs g$b$6359$RyrJs . g$rest$6360$RyrJs)
        (begin
          (if (not (string? g$a$6358$RyrJs))
            (assertion-violation
              'string<?
              '"not a string"
              g$a$6358$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6361$RyrJs)
               (begin
                 (if (not (string? g$x$6361$RyrJs))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$6361$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6362$RyrJs)
                     (begin
                       (set! g$a$6358$RyrJs g$x$6361$RyrJs)
                       g$r$6362$RyrJs)))
                  (fx<?
                    (string-compare g$a$6358$RyrJs g$x$6361$RyrJs)
                    '0)))))
            (cons g$b$6359$RyrJs g$rest$6360$RyrJs))))))
   (g$string>?$6216$RyrJs
     g$string>?$6503$RyrJs
     (case-lambda
       ((g$a$6363$RyrJs g$b$6364$RyrJs . g$rest$6365$RyrJs)
        (begin
          (if (not (string? g$a$6363$RyrJs))
            (assertion-violation
              'string>?
              '"not a string"
              g$a$6363$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6366$RyrJs)
               (begin
                 (if (not (string? g$x$6366$RyrJs))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$6366$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6367$RyrJs)
                     (begin
                       (set! g$a$6363$RyrJs g$x$6366$RyrJs)
                       g$r$6367$RyrJs)))
                  (fx>?
                    (string-compare g$a$6363$RyrJs g$x$6366$RyrJs)
                    '0)))))
            (cons g$b$6364$RyrJs g$rest$6365$RyrJs))))))
   (g$string<=?$6217$RyrJs
     g$string<=?$6504$RyrJs
     (case-lambda
       ((g$a$6368$RyrJs g$b$6369$RyrJs . g$rest$6370$RyrJs)
        (begin
          (if (not (string? g$a$6368$RyrJs))
            (assertion-violation
              'string<=?
              '"not a string"
              g$a$6368$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6371$RyrJs)
               (begin
                 (if (not (string? g$x$6371$RyrJs))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$6371$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6372$RyrJs)
                     (begin
                       (set! g$a$6368$RyrJs g$x$6371$RyrJs)
                       g$r$6372$RyrJs)))
                  (fx<=?
                    (string-compare g$a$6368$RyrJs g$x$6371$RyrJs)
                    '0)))))
            (cons g$b$6369$RyrJs g$rest$6370$RyrJs))))))
   (g$string>=?$6218$RyrJs
     g$string>=?$6505$RyrJs
     (case-lambda
       ((g$a$6373$RyrJs g$b$6374$RyrJs . g$rest$6375$RyrJs)
        (begin
          (if (not (string? g$a$6373$RyrJs))
            (assertion-violation
              'string>=?
              '"not a string"
              g$a$6373$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6376$RyrJs)
               (begin
                 (if (not (string? g$x$6376$RyrJs))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$6376$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6377$RyrJs)
                     (begin
                       (set! g$a$6373$RyrJs g$x$6376$RyrJs)
                       g$r$6377$RyrJs)))
                  (fx>=?
                    (string-compare g$a$6373$RyrJs g$x$6376$RyrJs)
                    '0)))))
            (cons g$b$6374$RyrJs g$rest$6375$RyrJs))))))
   (g$symbol=?$6219$RyrJs
     g$symbol=?$6506$RyrJs
     (case-lambda
       ((g$a$6378$RyrJs g$b$6379$RyrJs . g$rest$6380$RyrJs)
        (begin
          (if (not (g$symbol?$6132$RyrJs g$a$6378$RyrJs))
            (assertion-violation
              'symbol=?
              '"not a symbol"
              g$a$6378$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6381$RyrJs)
               (begin
                 (if (not (g$symbol?$6132$RyrJs g$x$6381$RyrJs))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$6381$RyrJs)
                   (void))
                 (eq? g$a$6378$RyrJs g$x$6381$RyrJs))))
            (cons g$b$6379$RyrJs g$rest$6380$RyrJs))))))
   (g$boolean=?$6220$RyrJs
     g$boolean=?$6507$RyrJs
     (case-lambda
       ((g$a$6382$RyrJs g$b$6383$RyrJs . g$rest$6384$RyrJs)
        (begin
          (if (not (g$boolean?$6133$RyrJs g$a$6382$RyrJs))
            (assertion-violation
              'boolean=?
              '"not a boolean"
              g$a$6382$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6385$RyrJs)
               (begin
                 (if (not (g$boolean?$6133$RyrJs g$x$6385$RyrJs))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$6385$RyrJs)
                   (void))
                 (eq? g$a$6382$RyrJs g$x$6385$RyrJs))))
            (cons g$b$6383$RyrJs g$rest$6384$RyrJs))))))
   (g$char=?$6258$RyrJs
     g$char=?$6508$RyrJs
     (case-lambda
       ((g$a$6386$RyrJs g$b$6387$RyrJs . g$rest$6388$RyrJs)
        (begin
          (if (not (g$char?$6129$RyrJs g$a$6386$RyrJs))
            (assertion-violation 'char=? '"not a char" g$a$6386$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6389$RyrJs)
               (begin
                 (if (not (g$char?$6129$RyrJs g$x$6389$RyrJs))
                   (assertion-violation
                     'char=?
                     '"not a char"
                     g$x$6389$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6390$RyrJs)
                     (begin
                       (set! g$a$6386$RyrJs g$x$6389$RyrJs)
                       g$r$6390$RyrJs)))
                  (fx=?
                    (char->integer g$a$6386$RyrJs)
                    (char->integer g$x$6389$RyrJs))))))
            (cons g$b$6387$RyrJs g$rest$6388$RyrJs))))))
   (g$char<?$6259$RyrJs
     g$char<?$6509$RyrJs
     (case-lambda
       ((g$a$6391$RyrJs g$b$6392$RyrJs . g$rest$6393$RyrJs)
        (begin
          (if (not (g$char?$6129$RyrJs g$a$6391$RyrJs))
            (assertion-violation 'char<? '"not a char" g$a$6391$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6394$RyrJs)
               (begin
                 (if (not (g$char?$6129$RyrJs g$x$6394$RyrJs))
                   (assertion-violation
                     'char<?
                     '"not a char"
                     g$x$6394$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6395$RyrJs)
                     (begin
                       (set! g$a$6391$RyrJs g$x$6394$RyrJs)
                       g$r$6395$RyrJs)))
                  (fx<?
                    (char->integer g$a$6391$RyrJs)
                    (char->integer g$x$6394$RyrJs))))))
            (cons g$b$6392$RyrJs g$rest$6393$RyrJs))))))
   (g$char>?$6260$RyrJs
     g$char>?$6510$RyrJs
     (case-lambda
       ((g$a$6396$RyrJs g$b$6397$RyrJs . g$rest$6398$RyrJs)
        (begin
          (if (not (g$char?$6129$RyrJs g$a$6396$RyrJs))
            (assertion-violation 'char>? '"not a char" g$a$6396$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6399$RyrJs)
               (begin
                 (if (not (g$char?$6129$RyrJs g$x$6399$RyrJs))
                   (assertion-violation
                     'char>?
                     '"not a char"
                     g$x$6399$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6400$RyrJs)
                     (begin
                       (set! g$a$6396$RyrJs g$x$6399$RyrJs)
                       g$r$6400$RyrJs)))
                  (fx>?
                    (char->integer g$a$6396$RyrJs)
                    (char->integer g$x$6399$RyrJs))))))
            (cons g$b$6397$RyrJs g$rest$6398$RyrJs))))))
   (g$char<=?$6261$RyrJs
     g$char<=?$6511$RyrJs
     (case-lambda
       ((g$a$6401$RyrJs g$b$6402$RyrJs . g$rest$6403$RyrJs)
        (begin
          (if (not (g$char?$6129$RyrJs g$a$6401$RyrJs))
            (assertion-violation 'char<=? '"not a char" g$a$6401$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6404$RyrJs)
               (begin
                 (if (not (g$char?$6129$RyrJs g$x$6404$RyrJs))
                   (assertion-violation
                     'char<=?
                     '"not a char"
                     g$x$6404$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6405$RyrJs)
                     (begin
                       (set! g$a$6401$RyrJs g$x$6404$RyrJs)
                       g$r$6405$RyrJs)))
                  (fx<=?
                    (char->integer g$a$6401$RyrJs)
                    (char->integer g$x$6404$RyrJs))))))
            (cons g$b$6402$RyrJs g$rest$6403$RyrJs))))))
   (g$char>=?$6262$RyrJs
     g$char>=?$6512$RyrJs
     (case-lambda
       ((g$a$6406$RyrJs g$b$6407$RyrJs . g$rest$6408$RyrJs)
        (begin
          (if (not (g$char?$6129$RyrJs g$a$6406$RyrJs))
            (assertion-violation 'char>=? '"not a char" g$a$6406$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$6409$RyrJs)
               (begin
                 (if (not (g$char?$6129$RyrJs g$x$6409$RyrJs))
                   (assertion-violation
                     'char>=?
                     '"not a char"
                     g$x$6409$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$6410$RyrJs)
                     (begin
                       (set! g$a$6406$RyrJs g$x$6409$RyrJs)
                       g$r$6410$RyrJs)))
                  (fx>=?
                    (char->integer g$a$6406$RyrJs)
                    (char->integer g$x$6409$RyrJs))))))
            (cons g$b$6407$RyrJs g$rest$6408$RyrJs))))))
   (g$rationalize$6263$RyrJs
     g$rationalize$6513$RyrJs
     (case-lambda
       ((g$x$6411$RyrJs g$e$6412$RyrJs)
        (if (if (infinite? g$x$6411$RyrJs)
              (begin '#f (infinite? g$e$6412$RyrJs))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$6413$RyrJs)
              (if (if (exact? g$x$6411$RyrJs)
                    (begin '#f (exact? g$e$6412$RyrJs))
                    '#f)
                g$r$6413$RyrJs
                (inexact g$r$6413$RyrJs))))
           (apply
             /
             (g$find-ratio$6264$RyrJs
               g$x$6411$RyrJs
               g$e$6412$RyrJs)))))))
   (g$find-ratio$6264$RyrJs
     g$find-ratio$6514$RyrJs
     (case-lambda
       ((g$x$6414$RyrJs g$e$6415$RyrJs)
        (g$find-ratio-between$6265$RyrJs
          (- g$x$6414$RyrJs g$e$6415$RyrJs)
          (+ g$x$6414$RyrJs g$e$6415$RyrJs)))))
   (g$find-ratio-between$6265$RyrJs
     g$find-ratio-between$6515$RyrJs
     (case-lambda
       ((g$x$6416$RyrJs g$y$6417$RyrJs)
        (letrec* ((g$sr$6418$RyrJs
                    (case-lambda
                      ((g$x$6420$RyrJs g$y$6421$RyrJs)
                       ((case-lambda
                          ((g$fx$6422$RyrJs g$fy$6423$RyrJs)
                           (if (>= g$fx$6422$RyrJs g$x$6420$RyrJs)
                             (list g$fx$6422$RyrJs '1)
                             (if (= g$fx$6422$RyrJs g$fy$6423$RyrJs)
                               ((case-lambda
                                  ((g$rat$6424$RyrJs)
                                   (list
                                     (+ (g$cadr$6141$RyrJs
                                          g$rat$6424$RyrJs)
                                        (* g$fx$6422$RyrJs
                                           (car g$rat$6424$RyrJs)))
                                     (car g$rat$6424$RyrJs))))
                                (g$sr$6418$RyrJs
                                  (/ (- g$y$6421$RyrJs g$fy$6423$RyrJs))
                                  (/ (- g$x$6420$RyrJs
                                        g$fx$6422$RyrJs))))
                               (list (+ '1 g$fx$6422$RyrJs) '1)))))
                        (exact (floor g$x$6420$RyrJs))
                        (exact (floor g$y$6421$RyrJs)))))))
          (if (< g$y$6417$RyrJs g$x$6416$RyrJs)
            (g$find-ratio-between$6265$RyrJs
              g$y$6417$RyrJs
              g$x$6416$RyrJs)
            (if (>= g$x$6416$RyrJs g$y$6417$RyrJs)
              (list g$x$6416$RyrJs '1)
              (if (g$positive?$6168$RyrJs g$x$6416$RyrJs)
                (g$sr$6418$RyrJs g$x$6416$RyrJs g$y$6417$RyrJs)
                (if (g$negative?$6169$RyrJs g$y$6417$RyrJs)
                  ((case-lambda
                     ((g$rat$6419$RyrJs)
                      (list
                        (- (car g$rat$6419$RyrJs))
                        (g$cadr$6141$RyrJs g$rat$6419$RyrJs))))
                   (g$sr$6418$RyrJs
                     (- g$y$6417$RyrJs)
                     (- g$x$6416$RyrJs)))
                  '(0 1)))))))))
   (g$vector-map$6266$RyrJs
     g$vector-map$6516$RyrJs
     (case-lambda
       ((g$p$6425$RyrJs g$vec1$6426$RyrJs . g$vecs$6427$RyrJs)
        ((case-lambda
           ((g$len$6428$RyrJs)
            ((case-lambda
               ((g$res$6429$RyrJs)
                (letrec ((g$loop$6430$RyrJs
                           (case-lambda
                             ((g$i$6431$RyrJs)
                              (if (fx=? g$i$6431$RyrJs g$len$6428$RyrJs)
                                (begin
                                  (if '#f '#f (void))
                                  g$res$6429$RyrJs)
                                (begin
                                  (vector-set!
                                    g$res$6429$RyrJs
                                    g$i$6431$RyrJs
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (apply
                                           values
                                           (g$map$5807$RyrJs
                                             (case-lambda
                                               ((g$x$6432$RyrJs)
                                                (vector-ref
                                                  g$x$6432$RyrJs
                                                  g$i$6431$RyrJs)))
                                             (cons
                                               g$vec1$6426$RyrJs
                                               g$vecs$6427$RyrJs)))))
                                      g$p$6425$RyrJs))
                                  (g$loop$6430$RyrJs
                                    (fx+ g$i$6431$RyrJs '1))))))))
                  (g$loop$6430$RyrJs '0))))
             (make-vector g$len$6428$RyrJs))))
         (vector-length g$vec1$6426$RyrJs)))))
   (g$vector-for-each$6267$RyrJs
     g$vector-for-each$6517$RyrJs
     (case-lambda
       ((g$p$6433$RyrJs g$vec1$6434$RyrJs . g$vecs$6435$RyrJs)
        ((case-lambda
           ((g$len$6436$RyrJs)
            (letrec ((g$loop$6437$RyrJs
                       (case-lambda
                         ((g$i$6438$RyrJs)
                          (if (fx=? g$i$6438$RyrJs g$len$6436$RyrJs)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5807$RyrJs
                                       (case-lambda
                                         ((g$x$6439$RyrJs)
                                          (vector-ref
                                            g$x$6439$RyrJs
                                            g$i$6438$RyrJs)))
                                       (cons
                                         g$vec1$6434$RyrJs
                                         g$vecs$6435$RyrJs)))))
                                g$p$6433$RyrJs)
                              (g$loop$6437$RyrJs
                                (fx+ g$i$6438$RyrJs '1))))))))
              (g$loop$6437$RyrJs '0))))
         (vector-length g$vec1$6434$RyrJs)))))
   (g$string-for-each$6268$RyrJs
     g$string-for-each$6518$RyrJs
     (case-lambda
       ((g$p$6440$RyrJs g$str1$6441$RyrJs . g$strs$6442$RyrJs)
        ((case-lambda
           ((g$len$6443$RyrJs)
            (letrec ((g$loop$6444$RyrJs
                       (case-lambda
                         ((g$i$6445$RyrJs)
                          (if (fx=? g$i$6445$RyrJs g$len$6443$RyrJs)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5807$RyrJs
                                       (case-lambda
                                         ((g$x$6446$RyrJs)
                                          (string-ref
                                            g$x$6446$RyrJs
                                            g$i$6445$RyrJs)))
                                       (cons
                                         g$str1$6441$RyrJs
                                         g$strs$6442$RyrJs)))))
                                g$p$6440$RyrJs)
                              (g$loop$6444$RyrJs
                                (fx+ g$i$6445$RyrJs '1))))))))
              (g$loop$6444$RyrJs '0))))
         (string-length g$str1$6441$RyrJs))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$6520$RyrJs g$using$6554$RyrJs (clr-using-internal 'system))
   (g$using$6522$RyrJs
     g$using$6555$RyrJs
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$6523$RyrJs
     g$make-eq-hashtable$6556$RyrJs
     (case-lambda
       (() (g$make-eq-hashtable$6523$RyrJs '32))
       ((g$k$6532$RyrJs)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$6532$RyrJs)))))
   (g$make-eqv-hashtable$6524$RyrJs
     g$make-eqv-hashtable$6557$RyrJs
     (case-lambda
       (() (g$make-eqv-hashtable$6524$RyrJs '32))
       ((g$k$6533$RyrJs)
        (make-hashtable eqv-hash eqv? g$k$6533$RyrJs))))
   (g$hashtable-size$6525$RyrJs
     g$hashtable-size$6558$RyrJs
     (case-lambda
       ((g$ht$6534$RyrJs)
        (clr-call-internal 'hashtable 'get_count g$ht$6534$RyrJs))))
   (g$hashtable-ref$6526$RyrJs
     g$hashtable-ref$6559$RyrJs
     (case-lambda
       ((g$ht$6535$RyrJs g$key$6536$RyrJs g$default$6537$RyrJs)
        (letrec* ((g$r$6538$RyrJs
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$6535$RyrJs
                      g$key$6536$RyrJs)))
          (if ((case-lambda
                 ((g$t$6539$RyrJs)
                  (if g$t$6539$RyrJs
                    g$t$6539$RyrJs
                    (begin
                      '#f
                      (g$hashtable-contains?$6529$RyrJs
                        g$ht$6535$RyrJs
                        g$key$6536$RyrJs)))))
               (not (null? g$r$6538$RyrJs)))
            g$r$6538$RyrJs
            g$default$6537$RyrJs)))))
   (g$hashtable-set!$6527$RyrJs
     g$hashtable-set!$6560$RyrJs
     (case-lambda
       ((g$ht$6540$RyrJs g$key$6541$RyrJs g$obj$6542$RyrJs)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$6540$RyrJs
          g$key$6541$RyrJs
          g$obj$6542$RyrJs))))
   (g$hashtable-delete!$6528$RyrJs
     g$hashtable-delete!$6561$RyrJs
     (case-lambda
       ((g$ht$6543$RyrJs g$key$6544$RyrJs)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$6543$RyrJs
          g$key$6544$RyrJs))))
   (g$hashtable-contains?$6529$RyrJs
     g$hashtable-contains?$6562$RyrJs
     (case-lambda
       ((g$ht$6545$RyrJs g$key$6546$RyrJs)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$6545$RyrJs
          g$key$6546$RyrJs))))
   (g$hashtable-update!$6530$RyrJs
     g$hashtable-update!$6563$RyrJs
     (case-lambda
       ((g$ht$6547$RyrJs
          g$key$6548$RyrJs
          g$proc$6549$RyrJs
          g$default$6550$RyrJs)
        (g$hashtable-set!$6527$RyrJs
          g$ht$6547$RyrJs
          g$key$6548$RyrJs
          (g$proc$6549$RyrJs
            (g$hashtable-ref$6526$RyrJs
              g$ht$6547$RyrJs
              g$key$6548$RyrJs
              g$default$6550$RyrJs))))))
   (g$hashtable-clear!$6531$RyrJs
     g$hashtable-clear!$6564$RyrJs
     (case-lambda
       ((g$ht$6551$RyrJs)
        (g$hashtable-clear!$6531$RyrJs g$ht$6551$RyrJs '32))
       ((g$ht$6552$RyrJs g$k$6553$RyrJs)
        (clr-call-internal 'hashtable 'clear g$ht$6552$RyrJs)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$6566$RyrJs
     g$using$6573$RyrJs
     (clr-using-internal 'system.io))
   (g$file-exists?$6567$RyrJs
     g$file-exists?$6574$RyrJs
     (case-lambda
       ((g$fn$6570$RyrJs)
        (clr-call-internal 'file 'exists '() g$fn$6570$RyrJs))))
   (g$delete-file$6568$RyrJs
     g$delete-file$6575$RyrJs
     (case-lambda
       ((g$fn$6571$RyrJs)
        (clr-call-internal 'file 'delete '() g$fn$6571$RyrJs))))
   (g$get-directory-name$6569$RyrJs
     g$get-directory-name$6576$RyrJs
     (case-lambda
       ((g$path$6572$RyrJs)
        (clr-call-internal
          'path
          'getdirectoryname
          '()
          g$path$6572$RyrJs)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$6577$RyrJs
     g$native-endianness$6688$RyrJs
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$6578$RyrJs
     g$bytevector-u16-ref$6689$RyrJs
     (case-lambda
       ((g$bytevector$6606$RyrJs g$k$6607$RyrJs g$endianness$6608$RyrJs)
        (bytevector-uint-ref
          g$bytevector$6606$RyrJs
          g$k$6607$RyrJs
          g$endianness$6608$RyrJs
          '2))))
   (g$bytevector-s16-ref$6579$RyrJs
     g$bytevector-s16-ref$6690$RyrJs
     (case-lambda
       ((g$bytevector$6609$RyrJs g$k$6610$RyrJs g$endianness$6611$RyrJs)
        (bytevector-sint-ref
          g$bytevector$6609$RyrJs
          g$k$6610$RyrJs
          g$endianness$6611$RyrJs
          '2))))
   (g$bytevector-u16-native-ref$6580$RyrJs
     g$bytevector-u16-native-ref$6691$RyrJs
     (case-lambda
       ((g$bytevector$6612$RyrJs g$k$6613$RyrJs)
        (bytevector-uint-ref
          g$bytevector$6612$RyrJs
          g$k$6613$RyrJs
          (g$native-endianness$6577$RyrJs)
          '2))))
   (g$bytevector-s16-native-ref$6581$RyrJs
     g$bytevector-s16-native-ref$6692$RyrJs
     (case-lambda
       ((g$bytevector$6614$RyrJs g$k$6615$RyrJs)
        (bytevector-sint-ref
          g$bytevector$6614$RyrJs
          g$k$6615$RyrJs
          (g$native-endianness$6577$RyrJs)
          '2))))
   (g$bytevector-u16-set!$6582$RyrJs
     g$bytevector-u16-set!$6693$RyrJs
     (case-lambda
       ((g$bytevector$6616$RyrJs
          g$k$6617$RyrJs
          g$n$6618$RyrJs
          g$endianness$6619$RyrJs)
        (bytevector-uint-set!
          g$bytevector$6616$RyrJs
          g$k$6617$RyrJs
          g$n$6618$RyrJs
          g$endianness$6619$RyrJs
          '2))))
   (g$bytevector-s16-set!$6583$RyrJs
     g$bytevector-s16-set!$6694$RyrJs
     (case-lambda
       ((g$bytevector$6620$RyrJs
          g$k$6621$RyrJs
          g$n$6622$RyrJs
          g$endianness$6623$RyrJs)
        (bytevector-sint-set!
          g$bytevector$6620$RyrJs
          g$k$6621$RyrJs
          g$n$6622$RyrJs
          g$endianness$6623$RyrJs
          '2))))
   (g$bytevector-u16-native-set!$6584$RyrJs
     g$bytevector-u16-native-set!$6695$RyrJs
     (case-lambda
       ((g$bytevector$6624$RyrJs g$k$6625$RyrJs g$n$6626$RyrJs)
        (bytevector-uint-set!
          g$bytevector$6624$RyrJs
          g$k$6625$RyrJs
          g$n$6626$RyrJs
          (g$native-endianness$6577$RyrJs)
          '2))))
   (g$bytevector-s16-native-set!$6585$RyrJs
     g$bytevector-s16-native-set!$6696$RyrJs
     (case-lambda
       ((g$bytevector$6627$RyrJs g$k$6628$RyrJs g$n$6629$RyrJs)
        (bytevector-sint-set!
          g$bytevector$6627$RyrJs
          g$k$6628$RyrJs
          g$n$6629$RyrJs
          (g$native-endianness$6577$RyrJs)
          '2))))
   (g$bytevector-u32-ref$6586$RyrJs
     g$bytevector-u32-ref$6697$RyrJs
     (case-lambda
       ((g$bytevector$6630$RyrJs g$k$6631$RyrJs g$endianness$6632$RyrJs)
        (bytevector-uint-ref
          g$bytevector$6630$RyrJs
          g$k$6631$RyrJs
          g$endianness$6632$RyrJs
          '4))))
   (g$bytevector-s32-ref$6587$RyrJs
     g$bytevector-s32-ref$6698$RyrJs
     (case-lambda
       ((g$bytevector$6633$RyrJs g$k$6634$RyrJs g$endianness$6635$RyrJs)
        (bytevector-sint-ref
          g$bytevector$6633$RyrJs
          g$k$6634$RyrJs
          g$endianness$6635$RyrJs
          '4))))
   (g$bytevector-u32-native-ref$6588$RyrJs
     g$bytevector-u32-native-ref$6699$RyrJs
     (case-lambda
       ((g$bytevector$6636$RyrJs g$k$6637$RyrJs)
        (bytevector-uint-ref
          g$bytevector$6636$RyrJs
          g$k$6637$RyrJs
          (g$native-endianness$6577$RyrJs)
          '4))))
   (g$bytevector-s32-native-ref$6589$RyrJs
     g$bytevector-s32-native-ref$6700$RyrJs
     (case-lambda
       ((g$bytevector$6638$RyrJs g$k$6639$RyrJs)
        (bytevector-sint-ref
          g$bytevector$6638$RyrJs
          g$k$6639$RyrJs
          (g$native-endianness$6577$RyrJs)
          '4))))
   (g$bytevector-u32-set!$6590$RyrJs
     g$bytevector-u32-set!$6701$RyrJs
     (case-lambda
       ((g$bytevector$6640$RyrJs
          g$k$6641$RyrJs
          g$n$6642$RyrJs
          g$endianness$6643$RyrJs)
        (bytevector-uint-set!
          g$bytevector$6640$RyrJs
          g$k$6641$RyrJs
          g$n$6642$RyrJs
          g$endianness$6643$RyrJs
          '4))))
   (g$bytevector-s32-set!$6591$RyrJs
     g$bytevector-s32-set!$6702$RyrJs
     (case-lambda
       ((g$bytevector$6644$RyrJs
          g$k$6645$RyrJs
          g$n$6646$RyrJs
          g$endianness$6647$RyrJs)
        (bytevector-sint-set!
          g$bytevector$6644$RyrJs
          g$k$6645$RyrJs
          g$n$6646$RyrJs
          g$endianness$6647$RyrJs
          '4))))
   (g$bytevector-u32-native-set!$6592$RyrJs
     g$bytevector-u32-native-set!$6703$RyrJs
     (case-lambda
       ((g$bytevector$6648$RyrJs g$k$6649$RyrJs g$n$6650$RyrJs)
        (bytevector-uint-set!
          g$bytevector$6648$RyrJs
          g$k$6649$RyrJs
          g$n$6650$RyrJs
          (g$native-endianness$6577$RyrJs)
          '4))))
   (g$bytevector-s32-native-set!$6593$RyrJs
     g$bytevector-s32-native-set!$6704$RyrJs
     (case-lambda
       ((g$bytevector$6651$RyrJs g$k$6652$RyrJs g$n$6653$RyrJs)
        (bytevector-sint-set!
          g$bytevector$6651$RyrJs
          g$k$6652$RyrJs
          g$n$6653$RyrJs
          (g$native-endianness$6577$RyrJs)
          '4))))
   (g$bytevector-u64-ref$6594$RyrJs
     g$bytevector-u64-ref$6705$RyrJs
     (case-lambda
       ((g$bytevector$6654$RyrJs g$k$6655$RyrJs g$endianness$6656$RyrJs)
        (bytevector-uint-ref
          g$bytevector$6654$RyrJs
          g$k$6655$RyrJs
          g$endianness$6656$RyrJs
          '8))))
   (g$bytevector-s64-ref$6595$RyrJs
     g$bytevector-s64-ref$6706$RyrJs
     (case-lambda
       ((g$bytevector$6657$RyrJs g$k$6658$RyrJs g$endianness$6659$RyrJs)
        (bytevector-sint-ref
          g$bytevector$6657$RyrJs
          g$k$6658$RyrJs
          g$endianness$6659$RyrJs
          '8))))
   (g$bytevector-u64-native-ref$6596$RyrJs
     g$bytevector-u64-native-ref$6707$RyrJs
     (case-lambda
       ((g$bytevector$6660$RyrJs g$k$6661$RyrJs)
        (bytevector-uint-ref
          g$bytevector$6660$RyrJs
          g$k$6661$RyrJs
          (g$native-endianness$6577$RyrJs)
          '8))))
   (g$bytevector-s64-native-ref$6597$RyrJs
     g$bytevector-s64-native-ref$6708$RyrJs
     (case-lambda
       ((g$bytevector$6662$RyrJs g$k$6663$RyrJs)
        (bytevector-sint-ref
          g$bytevector$6662$RyrJs
          g$k$6663$RyrJs
          (g$native-endianness$6577$RyrJs)
          '8))))
   (g$bytevector-u64-set!$6598$RyrJs
     g$bytevector-u64-set!$6709$RyrJs
     (case-lambda
       ((g$bytevector$6664$RyrJs
          g$k$6665$RyrJs
          g$n$6666$RyrJs
          g$endianness$6667$RyrJs)
        (bytevector-uint-set!
          g$bytevector$6664$RyrJs
          g$k$6665$RyrJs
          g$n$6666$RyrJs
          g$endianness$6667$RyrJs
          '8))))
   (g$bytevector-s64-set!$6599$RyrJs
     g$bytevector-s64-set!$6710$RyrJs
     (case-lambda
       ((g$bytevector$6668$RyrJs
          g$k$6669$RyrJs
          g$n$6670$RyrJs
          g$endianness$6671$RyrJs)
        (bytevector-sint-set!
          g$bytevector$6668$RyrJs
          g$k$6669$RyrJs
          g$n$6670$RyrJs
          g$endianness$6671$RyrJs
          '8))))
   (g$bytevector-u64-native-set!$6600$RyrJs
     g$bytevector-u64-native-set!$6711$RyrJs
     (case-lambda
       ((g$bytevector$6672$RyrJs g$k$6673$RyrJs g$n$6674$RyrJs)
        (bytevector-uint-set!
          g$bytevector$6672$RyrJs
          g$k$6673$RyrJs
          g$n$6674$RyrJs
          (g$native-endianness$6577$RyrJs)
          '8))))
   (g$bytevector-s64-native-set!$6601$RyrJs
     g$bytevector-s64-native-set!$6712$RyrJs
     (case-lambda
       ((g$bytevector$6675$RyrJs g$k$6676$RyrJs g$n$6677$RyrJs)
        (bytevector-sint-set!
          g$bytevector$6675$RyrJs
          g$k$6676$RyrJs
          g$n$6677$RyrJs
          (g$native-endianness$6577$RyrJs)
          '8))))
   (g$bytevector-ieee-single-native-ref$6602$RyrJs
     g$bytevector-ieee-single-native-ref$6713$RyrJs
     (case-lambda
       ((g$bytevector$6678$RyrJs g$k$6679$RyrJs)
        (if (not (g$zero?$6494$RyrJs
                   (g$mod$6447$RyrJs g$k$6679$RyrJs '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$6679$RyrJs)
          (bytevector-ieee-single-ref
            g$bytevector$6678$RyrJs
            g$k$6679$RyrJs
            (g$native-endianness$6577$RyrJs))))))
   (g$bytevector-ieee-double-native-ref$6603$RyrJs
     g$bytevector-ieee-double-native-ref$6714$RyrJs
     (case-lambda
       ((g$bytevector$6680$RyrJs g$k$6681$RyrJs)
        (if (not (g$zero?$6494$RyrJs
                   (g$mod$6447$RyrJs g$k$6681$RyrJs '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$6681$RyrJs)
          (bytevector-ieee-double-ref
            g$bytevector$6680$RyrJs
            g$k$6681$RyrJs
            (g$native-endianness$6577$RyrJs))))))
   (g$bytevector-ieee-single-native-set!$6604$RyrJs
     g$bytevector-ieee-single-native-set!$6715$RyrJs
     (case-lambda
       ((g$bytevector$6682$RyrJs g$k$6683$RyrJs g$x$6684$RyrJs)
        (if (not (g$zero?$6494$RyrJs
                   (g$mod$6447$RyrJs g$k$6683$RyrJs '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$6683$RyrJs)
          (bytevector-ieee-single-set!
            g$bytevector$6682$RyrJs
            g$k$6683$RyrJs
            g$x$6684$RyrJs
            (g$native-endianness$6577$RyrJs))))))
   (g$bytevector-ieee-double-native-set!$6605$RyrJs
     g$bytevector-ieee-double-native-set!$6716$RyrJs
     (case-lambda
       ((g$bytevector$6685$RyrJs g$k$6686$RyrJs g$x$6687$RyrJs)
        (if (not (g$zero?$6494$RyrJs
                   (g$mod$6447$RyrJs g$k$6686$RyrJs '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$6686$RyrJs)
          (bytevector-ieee-double-set!
            g$bytevector$6685$RyrJs
            g$k$6686$RyrJs
            g$x$6687$RyrJs
            (g$native-endianness$6577$RyrJs)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$5815$6717$RyrJs
     g$5815$7095$RyrJs
     (make-record-type-descriptor
       '&condition
       '#f
       'g$5818$RyrJs
       '#f
       '#f
       '#()))
   (g$5817$6718$RyrJs g$5817$7096$RyrJs '#f)
   (g$5816$6719$RyrJs
     g$5816$7097$RyrJs
     (make-record-constructor-descriptor
       g$5815$6717$RyrJs
       '#f
       g$5817$6718$RyrJs))
   (g$&condition?$6722$RyrJs
     g$&condition?$7098$RyrJs
     (record-predicate g$5815$6717$RyrJs))
   (g$make-&condition$6723$RyrJs
     g$make-&condition$7099$RyrJs
     (record-constructor g$5816$6719$RyrJs))
   (g$&condition-rtd$6724$RyrJs
     g$&condition-rtd$7100$RyrJs
     g$5815$6717$RyrJs)
   (g$&condition-rcd$6725$RyrJs
     g$&condition-rcd$7101$RyrJs
     g$5816$6719$RyrJs)
   (g$5852$6799$RyrJs
     g$5852$7102$RyrJs
     (make-record-type-descriptor
       '&message
       g$5815$6717$RyrJs
       'g$5855$RyrJs
       '#f
       '#f
       '#((immutable message))))
   (g$5854$6800$RyrJs g$5854$7103$RyrJs '#f)
   (g$5853$6801$RyrJs
     g$5853$7104$RyrJs
     (make-record-constructor-descriptor
       g$5852$6799$RyrJs
       g$5816$6719$RyrJs
       g$5854$6800$RyrJs))
   (g$p?$6804$RyrJs
     g$p?$7105$RyrJs
     (record-predicate g$5852$6799$RyrJs))
   (g$make-message-condition$6805$RyrJs
     g$make-message-condition$7106$RyrJs
     (record-constructor g$5853$6801$RyrJs))
   (g$condition-message$6806$RyrJs
     g$condition-message$7107$RyrJs
     (record-accessor g$5852$6799$RyrJs '0))
   (g$message-condition?$6807$RyrJs
     g$message-condition?$7108$RyrJs
     (condition-predicate g$5852$6799$RyrJs))
   (g$condition-message$6808$RyrJs
     g$condition-message$7109$RyrJs
     (condition-accessor
       g$5852$6799$RyrJs
       g$condition-message$6806$RyrJs))
   (g$&message-rtd$6809$RyrJs
     g$&message-rtd$7110$RyrJs
     g$5852$6799$RyrJs)
   (g$&message-rcd$6810$RyrJs
     g$&message-rcd$7111$RyrJs
     g$5853$6801$RyrJs)
   (g$5867$6811$RyrJs
     g$5867$7112$RyrJs
     (make-record-type-descriptor
       '&warning
       g$5815$6717$RyrJs
       'g$5870$RyrJs
       '#f
       '#f
       '#()))
   (g$5869$6812$RyrJs g$5869$7113$RyrJs '#f)
   (g$5868$6813$RyrJs
     g$5868$7114$RyrJs
     (make-record-constructor-descriptor
       g$5867$6811$RyrJs
       g$5816$6719$RyrJs
       g$5869$6812$RyrJs))
   (g$p?$6816$RyrJs
     g$p?$7115$RyrJs
     (record-predicate g$5867$6811$RyrJs))
   (g$make-warning$6817$RyrJs
     g$make-warning$7116$RyrJs
     (record-constructor g$5868$6813$RyrJs))
   (g$warning?$6818$RyrJs
     g$warning?$7117$RyrJs
     (condition-predicate g$5867$6811$RyrJs))
   (g$&warning-rtd$6819$RyrJs
     g$&warning-rtd$7118$RyrJs
     g$5867$6811$RyrJs)
   (g$&warning-rcd$6820$RyrJs
     g$&warning-rcd$7119$RyrJs
     g$5868$6813$RyrJs)
   (g$5880$6821$RyrJs
     g$5880$7120$RyrJs
     (make-record-type-descriptor
       '&serious
       g$5815$6717$RyrJs
       'g$5883$RyrJs
       '#f
       '#f
       '#()))
   (g$5882$6822$RyrJs g$5882$7121$RyrJs '#f)
   (g$5881$6823$RyrJs
     g$5881$7122$RyrJs
     (make-record-constructor-descriptor
       g$5880$6821$RyrJs
       g$5816$6719$RyrJs
       g$5882$6822$RyrJs))
   (g$p?$6826$RyrJs
     g$p?$7123$RyrJs
     (record-predicate g$5880$6821$RyrJs))
   (g$make-serious-condition$6827$RyrJs
     g$make-serious-condition$7124$RyrJs
     (record-constructor g$5881$6823$RyrJs))
   (g$serious-condition?$6828$RyrJs
     g$serious-condition?$7125$RyrJs
     (condition-predicate g$5880$6821$RyrJs))
   (g$&serious-rtd$6829$RyrJs
     g$&serious-rtd$7126$RyrJs
     g$5880$6821$RyrJs)
   (g$&serious-rcd$6830$RyrJs
     g$&serious-rcd$7127$RyrJs
     g$5881$6823$RyrJs)
   (g$5893$6831$RyrJs
     g$5893$7128$RyrJs
     (make-record-type-descriptor
       '&error
       g$5880$6821$RyrJs
       'g$5896$RyrJs
       '#f
       '#f
       '#()))
   (g$5895$6832$RyrJs g$5895$7129$RyrJs '#f)
   (g$5894$6833$RyrJs
     g$5894$7130$RyrJs
     (make-record-constructor-descriptor
       g$5893$6831$RyrJs
       g$5881$6823$RyrJs
       g$5895$6832$RyrJs))
   (g$p?$6836$RyrJs
     g$p?$7131$RyrJs
     (record-predicate g$5893$6831$RyrJs))
   (g$make-error$6837$RyrJs
     g$make-error$7132$RyrJs
     (record-constructor g$5894$6833$RyrJs))
   (g$error?$6838$RyrJs
     g$error?$7133$RyrJs
     (condition-predicate g$5893$6831$RyrJs))
   (g$&error-rtd$6839$RyrJs g$&error-rtd$7134$RyrJs g$5893$6831$RyrJs)
   (g$&error-rcd$6840$RyrJs g$&error-rcd$7135$RyrJs g$5894$6833$RyrJs)
   (g$5906$6841$RyrJs
     g$5906$7136$RyrJs
     (make-record-type-descriptor
       '&violation
       g$5880$6821$RyrJs
       'g$5909$RyrJs
       '#f
       '#f
       '#()))
   (g$5908$6842$RyrJs g$5908$7137$RyrJs '#f)
   (g$5907$6843$RyrJs
     g$5907$7138$RyrJs
     (make-record-constructor-descriptor
       g$5906$6841$RyrJs
       g$5881$6823$RyrJs
       g$5908$6842$RyrJs))
   (g$p?$6846$RyrJs
     g$p?$7139$RyrJs
     (record-predicate g$5906$6841$RyrJs))
   (g$make-violation$6847$RyrJs
     g$make-violation$7140$RyrJs
     (record-constructor g$5907$6843$RyrJs))
   (g$violation?$6848$RyrJs
     g$violation?$7141$RyrJs
     (condition-predicate g$5906$6841$RyrJs))
   (g$&violation-rtd$6849$RyrJs
     g$&violation-rtd$7142$RyrJs
     g$5906$6841$RyrJs)
   (g$&violation-rcd$6850$RyrJs
     g$&violation-rcd$7143$RyrJs
     g$5907$6843$RyrJs)
   (g$5919$6851$RyrJs
     g$5919$7144$RyrJs
     (make-record-type-descriptor
       '&assertion
       g$5906$6841$RyrJs
       'g$5922$RyrJs
       '#f
       '#f
       '#()))
   (g$5921$6852$RyrJs g$5921$7145$RyrJs '#f)
   (g$5920$6853$RyrJs
     g$5920$7146$RyrJs
     (make-record-constructor-descriptor
       g$5919$6851$RyrJs
       g$5907$6843$RyrJs
       g$5921$6852$RyrJs))
   (g$p?$6856$RyrJs
     g$p?$7147$RyrJs
     (record-predicate g$5919$6851$RyrJs))
   (g$make-assertion-violation$6857$RyrJs
     g$make-assertion-violation$7148$RyrJs
     (record-constructor g$5920$6853$RyrJs))
   (g$assertion-violation?$6858$RyrJs
     g$assertion-violation?$7149$RyrJs
     (condition-predicate g$5919$6851$RyrJs))
   (g$&assertion-rtd$6859$RyrJs
     g$&assertion-rtd$7150$RyrJs
     g$5919$6851$RyrJs)
   (g$&assertion-rcd$6860$RyrJs
     g$&assertion-rcd$7151$RyrJs
     g$5920$6853$RyrJs)
   (g$5932$6862$RyrJs
     g$5932$7152$RyrJs
     (make-record-type-descriptor
       '&irritants
       g$5815$6717$RyrJs
       'g$5935$RyrJs
       '#f
       '#f
       '#((immutable irritants))))
   (g$5934$6863$RyrJs g$5934$7153$RyrJs '#f)
   (g$5933$6864$RyrJs
     g$5933$7154$RyrJs
     (make-record-constructor-descriptor
       g$5932$6862$RyrJs
       g$5816$6719$RyrJs
       g$5934$6863$RyrJs))
   (g$p?$6867$RyrJs
     g$p?$7155$RyrJs
     (record-predicate g$5932$6862$RyrJs))
   (g$make-irritants-condition$6868$RyrJs
     g$make-irritants-condition$7156$RyrJs
     (record-constructor g$5933$6864$RyrJs))
   (g$condition-irritants$6869$RyrJs
     g$condition-irritants$7157$RyrJs
     (record-accessor g$5932$6862$RyrJs '0))
   (g$irritants-condition?$6870$RyrJs
     g$irritants-condition?$7158$RyrJs
     (condition-predicate g$5932$6862$RyrJs))
   (g$condition-irritants$6871$RyrJs
     g$condition-irritants$7159$RyrJs
     (condition-accessor
       g$5932$6862$RyrJs
       g$condition-irritants$6869$RyrJs))
   (g$&irritants-rtd$6872$RyrJs
     g$&irritants-rtd$7160$RyrJs
     g$5932$6862$RyrJs)
   (g$&irritants-rcd$6873$RyrJs
     g$&irritants-rcd$7161$RyrJs
     g$5933$6864$RyrJs)
   (g$5947$6875$RyrJs
     g$5947$7162$RyrJs
     (make-record-type-descriptor
       '&who
       g$5815$6717$RyrJs
       'g$5950$RyrJs
       '#f
       '#f
       '#((immutable who))))
   (g$5949$6876$RyrJs g$5949$7163$RyrJs '#f)
   (g$5948$6877$RyrJs
     g$5948$7164$RyrJs
     (make-record-constructor-descriptor
       g$5947$6875$RyrJs
       g$5816$6719$RyrJs
       g$5949$6876$RyrJs))
   (g$p?$6880$RyrJs
     g$p?$7165$RyrJs
     (record-predicate g$5947$6875$RyrJs))
   (g$make-who-condition$6881$RyrJs
     g$make-who-condition$7166$RyrJs
     (record-constructor g$5948$6877$RyrJs))
   (g$condition-who$6882$RyrJs
     g$condition-who$7167$RyrJs
     (record-accessor g$5947$6875$RyrJs '0))
   (g$who-condition?$6883$RyrJs
     g$who-condition?$7168$RyrJs
     (condition-predicate g$5947$6875$RyrJs))
   (g$condition-who$6884$RyrJs
     g$condition-who$7169$RyrJs
     (condition-accessor g$5947$6875$RyrJs g$condition-who$6882$RyrJs))
   (g$&who-rtd$6885$RyrJs g$&who-rtd$7170$RyrJs g$5947$6875$RyrJs)
   (g$&who-rcd$6886$RyrJs g$&who-rcd$7171$RyrJs g$5948$6877$RyrJs)
   (g$5962$6887$RyrJs
     g$5962$7172$RyrJs
     (make-record-type-descriptor
       '&non-continuable
       g$5906$6841$RyrJs
       'g$5965$RyrJs
       '#f
       '#f
       '#()))
   (g$5964$6888$RyrJs g$5964$7173$RyrJs '#f)
   (g$5963$6889$RyrJs
     g$5963$7174$RyrJs
     (make-record-constructor-descriptor
       g$5962$6887$RyrJs
       g$5907$6843$RyrJs
       g$5964$6888$RyrJs))
   (g$p?$6892$RyrJs
     g$p?$7175$RyrJs
     (record-predicate g$5962$6887$RyrJs))
   (g$make-non-continuable-violation$6893$RyrJs
     g$make-non-continuable-violation$7176$RyrJs
     (record-constructor g$5963$6889$RyrJs))
   (g$non-continuable-violation?$6894$RyrJs
     g$non-continuable-violation?$7177$RyrJs
     (condition-predicate g$5962$6887$RyrJs))
   (g$&non-continuable-rtd$6895$RyrJs
     g$&non-continuable-rtd$7178$RyrJs
     g$5962$6887$RyrJs)
   (g$&non-continuable-rcd$6896$RyrJs
     g$&non-continuable-rcd$7179$RyrJs
     g$5963$6889$RyrJs)
   (g$5975$6897$RyrJs
     g$5975$7180$RyrJs
     (make-record-type-descriptor
       '&implementation-restriction
       g$5906$6841$RyrJs
       'g$5978$RyrJs
       '#f
       '#f
       '#()))
   (g$5977$6898$RyrJs g$5977$7181$RyrJs '#f)
   (g$5976$6899$RyrJs
     g$5976$7182$RyrJs
     (make-record-constructor-descriptor
       g$5975$6897$RyrJs
       g$5907$6843$RyrJs
       g$5977$6898$RyrJs))
   (g$p?$6902$RyrJs
     g$p?$7183$RyrJs
     (record-predicate g$5975$6897$RyrJs))
   (g$make-implementation-restriction-violation$6903$RyrJs
     g$make-implementation-restriction-violation$7184$RyrJs
     (record-constructor g$5976$6899$RyrJs))
   (g$implementation-restriction-violation?$6904$RyrJs
     g$implementation-restriction-violation?$7185$RyrJs
     (condition-predicate g$5975$6897$RyrJs))
   (g$&implementation-restriction-rtd$6905$RyrJs
     g$&implementation-restriction-rtd$7186$RyrJs
     g$5975$6897$RyrJs)
   (g$&implementation-restriction-rcd$6906$RyrJs
     g$&implementation-restriction-rcd$7187$RyrJs
     g$5976$6899$RyrJs)
   (g$5988$6907$RyrJs
     g$5988$7188$RyrJs
     (make-record-type-descriptor
       '&lexical
       g$5906$6841$RyrJs
       'g$5991$RyrJs
       '#f
       '#f
       '#()))
   (g$5990$6908$RyrJs g$5990$7189$RyrJs '#f)
   (g$5989$6909$RyrJs
     g$5989$7190$RyrJs
     (make-record-constructor-descriptor
       g$5988$6907$RyrJs
       g$5907$6843$RyrJs
       g$5990$6908$RyrJs))
   (g$p?$6912$RyrJs
     g$p?$7191$RyrJs
     (record-predicate g$5988$6907$RyrJs))
   (g$make-lexical-violation$6913$RyrJs
     g$make-lexical-violation$7192$RyrJs
     (record-constructor g$5989$6909$RyrJs))
   (g$lexical-violation?$6914$RyrJs
     g$lexical-violation?$7193$RyrJs
     (condition-predicate g$5988$6907$RyrJs))
   (g$&lexical-rtd$6915$RyrJs
     g$&lexical-rtd$7194$RyrJs
     g$5988$6907$RyrJs)
   (g$&lexical-rcd$6916$RyrJs
     g$&lexical-rcd$7195$RyrJs
     g$5989$6909$RyrJs)
   (g$6001$6919$RyrJs
     g$6001$7196$RyrJs
     (make-record-type-descriptor
       '&syntax
       g$5906$6841$RyrJs
       'g$6004$RyrJs
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6003$6920$RyrJs g$6003$7197$RyrJs '#f)
   (g$6002$6921$RyrJs
     g$6002$7198$RyrJs
     (make-record-constructor-descriptor
       g$6001$6919$RyrJs
       g$5907$6843$RyrJs
       g$6003$6920$RyrJs))
   (g$p?$6924$RyrJs
     g$p?$7199$RyrJs
     (record-predicate g$6001$6919$RyrJs))
   (g$make-syntax-violation$6925$RyrJs
     g$make-syntax-violation$7200$RyrJs
     (record-constructor g$6002$6921$RyrJs))
   (g$syntax-violation-form$6926$RyrJs
     g$syntax-violation-form$7201$RyrJs
     (record-accessor g$6001$6919$RyrJs '0))
   (g$syntax-violation-subform$6927$RyrJs
     g$syntax-violation-subform$7202$RyrJs
     (record-accessor g$6001$6919$RyrJs '1))
   (g$syntax-violation?$6928$RyrJs
     g$syntax-violation?$7203$RyrJs
     (condition-predicate g$6001$6919$RyrJs))
   (g$syntax-violation-form$6929$RyrJs
     g$syntax-violation-form$7204$RyrJs
     (condition-accessor
       g$6001$6919$RyrJs
       g$syntax-violation-form$6926$RyrJs))
   (g$syntax-violation-subform$6930$RyrJs
     g$syntax-violation-subform$7205$RyrJs
     (condition-accessor
       g$6001$6919$RyrJs
       g$syntax-violation-subform$6927$RyrJs))
   (g$&syntax-rtd$6931$RyrJs g$&syntax-rtd$7206$RyrJs g$6001$6919$RyrJs)
   (g$&syntax-rcd$6932$RyrJs g$&syntax-rcd$7207$RyrJs g$6002$6921$RyrJs)
   (g$6018$6933$RyrJs
     g$6018$7208$RyrJs
     (make-record-type-descriptor
       '&undefined
       g$5906$6841$RyrJs
       'g$6021$RyrJs
       '#f
       '#f
       '#()))
   (g$6020$6934$RyrJs g$6020$7209$RyrJs '#f)
   (g$6019$6935$RyrJs
     g$6019$7210$RyrJs
     (make-record-constructor-descriptor
       g$6018$6933$RyrJs
       g$5907$6843$RyrJs
       g$6020$6934$RyrJs))
   (g$p?$6938$RyrJs
     g$p?$7211$RyrJs
     (record-predicate g$6018$6933$RyrJs))
   (g$make-undefined-violation$6939$RyrJs
     g$make-undefined-violation$7212$RyrJs
     (record-constructor g$6019$6935$RyrJs))
   (g$undefined-violation?$6940$RyrJs
     g$undefined-violation?$7213$RyrJs
     (condition-predicate g$6018$6933$RyrJs))
   (g$&undefined-rtd$6941$RyrJs
     g$&undefined-rtd$7214$RyrJs
     g$6018$6933$RyrJs)
   (g$&undefined-rcd$6942$RyrJs
     g$&undefined-rcd$7215$RyrJs
     g$6019$6935$RyrJs)
   (g$6031$6943$RyrJs
     g$6031$7216$RyrJs
     (make-record-type-descriptor
       '&i/o
       g$5893$6831$RyrJs
       'g$6034$RyrJs
       '#f
       '#f
       '#()))
   (g$6033$6944$RyrJs g$6033$7217$RyrJs '#f)
   (g$6032$6945$RyrJs
     g$6032$7218$RyrJs
     (make-record-constructor-descriptor
       g$6031$6943$RyrJs
       g$5894$6833$RyrJs
       g$6033$6944$RyrJs))
   (g$p?$6948$RyrJs
     g$p?$7219$RyrJs
     (record-predicate g$6031$6943$RyrJs))
   (g$make-i/o-error$6949$RyrJs
     g$make-i/o-error$7220$RyrJs
     (record-constructor g$6032$6945$RyrJs))
   (g$i/o-error?$6950$RyrJs
     g$i/o-error?$7221$RyrJs
     (condition-predicate g$6031$6943$RyrJs))
   (g$&i/o-rtd$6951$RyrJs g$&i/o-rtd$7222$RyrJs g$6031$6943$RyrJs)
   (g$&i/o-rcd$6952$RyrJs g$&i/o-rcd$7223$RyrJs g$6032$6945$RyrJs)
   (g$6044$6953$RyrJs
     g$6044$7224$RyrJs
     (make-record-type-descriptor
       '&i/o-read
       g$6031$6943$RyrJs
       'g$6047$RyrJs
       '#f
       '#f
       '#()))
   (g$6046$6954$RyrJs g$6046$7225$RyrJs '#f)
   (g$6045$6955$RyrJs
     g$6045$7226$RyrJs
     (make-record-constructor-descriptor
       g$6044$6953$RyrJs
       g$6032$6945$RyrJs
       g$6046$6954$RyrJs))
   (g$p?$6958$RyrJs
     g$p?$7227$RyrJs
     (record-predicate g$6044$6953$RyrJs))
   (g$make-i/o-read-error$6959$RyrJs
     g$make-i/o-read-error$7228$RyrJs
     (record-constructor g$6045$6955$RyrJs))
   (g$i/o-read-error?$6960$RyrJs
     g$i/o-read-error?$7229$RyrJs
     (condition-predicate g$6044$6953$RyrJs))
   (g$&i/o-read-rtd$6961$RyrJs
     g$&i/o-read-rtd$7230$RyrJs
     g$6044$6953$RyrJs)
   (g$&i/o-read-rcd$6962$RyrJs
     g$&i/o-read-rcd$7231$RyrJs
     g$6045$6955$RyrJs)
   (g$6057$6963$RyrJs
     g$6057$7232$RyrJs
     (make-record-type-descriptor
       '&i/o-write
       g$6031$6943$RyrJs
       'g$6060$RyrJs
       '#f
       '#f
       '#()))
   (g$6059$6964$RyrJs g$6059$7233$RyrJs '#f)
   (g$6058$6965$RyrJs
     g$6058$7234$RyrJs
     (make-record-constructor-descriptor
       g$6057$6963$RyrJs
       g$6032$6945$RyrJs
       g$6059$6964$RyrJs))
   (g$p?$6968$RyrJs
     g$p?$7235$RyrJs
     (record-predicate g$6057$6963$RyrJs))
   (g$make-i/o-write-error$6969$RyrJs
     g$make-i/o-write-error$7236$RyrJs
     (record-constructor g$6058$6965$RyrJs))
   (g$i/o-write-error?$6970$RyrJs
     g$i/o-write-error?$7237$RyrJs
     (condition-predicate g$6057$6963$RyrJs))
   (g$&i/o-write-rtd$6971$RyrJs
     g$&i/o-write-rtd$7238$RyrJs
     g$6057$6963$RyrJs)
   (g$&i/o-write-rcd$6972$RyrJs
     g$&i/o-write-rcd$7239$RyrJs
     g$6058$6965$RyrJs)
   (g$6070$6974$RyrJs
     g$6070$7240$RyrJs
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6031$6943$RyrJs
       'g$6073$RyrJs
       '#f
       '#f
       '#((immutable position))))
   (g$6072$6975$RyrJs g$6072$7241$RyrJs '#f)
   (g$6071$6976$RyrJs
     g$6071$7242$RyrJs
     (make-record-constructor-descriptor
       g$6070$6974$RyrJs
       g$6032$6945$RyrJs
       g$6072$6975$RyrJs))
   (g$p?$6979$RyrJs
     g$p?$7243$RyrJs
     (record-predicate g$6070$6974$RyrJs))
   (g$make-i/o-invalid-position-error$6980$RyrJs
     g$make-i/o-invalid-position-error$7244$RyrJs
     (record-constructor g$6071$6976$RyrJs))
   (g$i/o-error-position$6981$RyrJs
     g$i/o-error-position$7245$RyrJs
     (record-accessor g$6070$6974$RyrJs '0))
   (g$i/o-invalid-position-error?$6982$RyrJs
     g$i/o-invalid-position-error?$7246$RyrJs
     (condition-predicate g$6070$6974$RyrJs))
   (g$i/o-error-position$6983$RyrJs
     g$i/o-error-position$7247$RyrJs
     (condition-accessor
       g$6070$6974$RyrJs
       g$i/o-error-position$6981$RyrJs))
   (g$&i/o-invalid-position-rtd$6984$RyrJs
     g$&i/o-invalid-position-rtd$7248$RyrJs
     g$6070$6974$RyrJs)
   (g$&i/o-invalid-position-rcd$6985$RyrJs
     g$&i/o-invalid-position-rcd$7249$RyrJs
     g$6071$6976$RyrJs)
   (g$6085$6987$RyrJs
     g$6085$7250$RyrJs
     (make-record-type-descriptor
       '&i/o-filename
       g$6031$6943$RyrJs
       'g$6088$RyrJs
       '#f
       '#f
       '#((immutable filename))))
   (g$6087$6988$RyrJs g$6087$7251$RyrJs '#f)
   (g$6086$6989$RyrJs
     g$6086$7252$RyrJs
     (make-record-constructor-descriptor
       g$6085$6987$RyrJs
       g$6032$6945$RyrJs
       g$6087$6988$RyrJs))
   (g$p?$6992$RyrJs
     g$p?$7253$RyrJs
     (record-predicate g$6085$6987$RyrJs))
   (g$make-i/o-filename-error$6993$RyrJs
     g$make-i/o-filename-error$7254$RyrJs
     (record-constructor g$6086$6989$RyrJs))
   (g$i/o-error-filename$6994$RyrJs
     g$i/o-error-filename$7255$RyrJs
     (record-accessor g$6085$6987$RyrJs '0))
   (g$i/o-filename-error?$6995$RyrJs
     g$i/o-filename-error?$7256$RyrJs
     (condition-predicate g$6085$6987$RyrJs))
   (g$i/o-error-filename$6996$RyrJs
     g$i/o-error-filename$7257$RyrJs
     (condition-accessor
       g$6085$6987$RyrJs
       g$i/o-error-filename$6994$RyrJs))
   (g$&i/o-filename-rtd$6997$RyrJs
     g$&i/o-filename-rtd$7258$RyrJs
     g$6085$6987$RyrJs)
   (g$&i/o-filename-rcd$6998$RyrJs
     g$&i/o-filename-rcd$7259$RyrJs
     g$6086$6989$RyrJs)
   (g$6100$6999$RyrJs
     g$6100$7260$RyrJs
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6085$6987$RyrJs
       'g$6103$RyrJs
       '#f
       '#f
       '#()))
   (g$6102$7000$RyrJs g$6102$7261$RyrJs '#f)
   (g$6101$7001$RyrJs
     g$6101$7262$RyrJs
     (make-record-constructor-descriptor
       g$6100$6999$RyrJs
       g$6086$6989$RyrJs
       g$6102$7000$RyrJs))
   (g$p?$7004$RyrJs
     g$p?$7263$RyrJs
     (record-predicate g$6100$6999$RyrJs))
   (g$make-i/o-file-protection-error$7005$RyrJs
     g$make-i/o-file-protection-error$7264$RyrJs
     (record-constructor g$6101$7001$RyrJs))
   (g$i/o-file-protection-error?$7006$RyrJs
     g$i/o-file-protection-error?$7265$RyrJs
     (condition-predicate g$6100$6999$RyrJs))
   (g$&i/o-file-protection-rtd$7007$RyrJs
     g$&i/o-file-protection-rtd$7266$RyrJs
     g$6100$6999$RyrJs)
   (g$&i/o-file-protection-rcd$7008$RyrJs
     g$&i/o-file-protection-rcd$7267$RyrJs
     g$6101$7001$RyrJs)
   (g$6113$7009$RyrJs
     g$6113$7268$RyrJs
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6100$6999$RyrJs
       'g$6116$RyrJs
       '#f
       '#f
       '#()))
   (g$6115$7010$RyrJs g$6115$7269$RyrJs '#f)
   (g$6114$7011$RyrJs
     g$6114$7270$RyrJs
     (make-record-constructor-descriptor
       g$6113$7009$RyrJs
       g$6101$7001$RyrJs
       g$6115$7010$RyrJs))
   (g$p?$7014$RyrJs
     g$p?$7271$RyrJs
     (record-predicate g$6113$7009$RyrJs))
   (g$make-i/o-file-is-read-only-error$7015$RyrJs
     g$make-i/o-file-is-read-only-error$7272$RyrJs
     (record-constructor g$6114$7011$RyrJs))
   (g$i/o-file-is-read-only-error?$7016$RyrJs
     g$i/o-file-is-read-only-error?$7273$RyrJs
     (condition-predicate g$6113$7009$RyrJs))
   (g$&i/o-file-is-read-only-rtd$7017$RyrJs
     g$&i/o-file-is-read-only-rtd$7274$RyrJs
     g$6113$7009$RyrJs)
   (g$&i/o-file-is-read-only-rcd$7018$RyrJs
     g$&i/o-file-is-read-only-rcd$7275$RyrJs
     g$6114$7011$RyrJs)
   (g$6126$7019$RyrJs
     g$6126$7276$RyrJs
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6085$6987$RyrJs
       'g$6129$RyrJs
       '#f
       '#f
       '#()))
   (g$6128$7020$RyrJs g$6128$7277$RyrJs '#f)
   (g$6127$7021$RyrJs
     g$6127$7278$RyrJs
     (make-record-constructor-descriptor
       g$6126$7019$RyrJs
       g$6086$6989$RyrJs
       g$6128$7020$RyrJs))
   (g$p?$7024$RyrJs
     g$p?$7279$RyrJs
     (record-predicate g$6126$7019$RyrJs))
   (g$make-i/o-file-already-exists-error$7025$RyrJs
     g$make-i/o-file-already-exists-error$7280$RyrJs
     (record-constructor g$6127$7021$RyrJs))
   (g$i/o-file-already-exists-error?$7026$RyrJs
     g$i/o-file-already-exists-error?$7281$RyrJs
     (condition-predicate g$6126$7019$RyrJs))
   (g$&i/o-file-already-exists-rtd$7027$RyrJs
     g$&i/o-file-already-exists-rtd$7282$RyrJs
     g$6126$7019$RyrJs)
   (g$&i/o-file-already-exists-rcd$7028$RyrJs
     g$&i/o-file-already-exists-rcd$7283$RyrJs
     g$6127$7021$RyrJs)
   (g$6139$7029$RyrJs
     g$6139$7284$RyrJs
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6085$6987$RyrJs
       'g$6142$RyrJs
       '#f
       '#f
       '#()))
   (g$6141$7030$RyrJs g$6141$7285$RyrJs '#f)
   (g$6140$7031$RyrJs
     g$6140$7286$RyrJs
     (make-record-constructor-descriptor
       g$6139$7029$RyrJs
       g$6086$6989$RyrJs
       g$6141$7030$RyrJs))
   (g$p?$7034$RyrJs
     g$p?$7287$RyrJs
     (record-predicate g$6139$7029$RyrJs))
   (g$make-i/o-file-does-not-exist-error$7035$RyrJs
     g$make-i/o-file-does-not-exist-error$7288$RyrJs
     (record-constructor g$6140$7031$RyrJs))
   (g$i/o-file-does-not-exist-error?$7036$RyrJs
     g$i/o-file-does-not-exist-error?$7289$RyrJs
     (condition-predicate g$6139$7029$RyrJs))
   (g$&i/o-file-does-not-exist-rtd$7037$RyrJs
     g$&i/o-file-does-not-exist-rtd$7290$RyrJs
     g$6139$7029$RyrJs)
   (g$&i/o-file-does-not-exist-rcd$7038$RyrJs
     g$&i/o-file-does-not-exist-rcd$7291$RyrJs
     g$6140$7031$RyrJs)
   (g$6152$7040$RyrJs
     g$6152$7292$RyrJs
     (make-record-type-descriptor
       '&i/o-port
       g$6031$6943$RyrJs
       'g$6155$RyrJs
       '#f
       '#f
       '#((immutable port))))
   (g$6154$7041$RyrJs g$6154$7293$RyrJs '#f)
   (g$6153$7042$RyrJs
     g$6153$7294$RyrJs
     (make-record-constructor-descriptor
       g$6152$7040$RyrJs
       g$6032$6945$RyrJs
       g$6154$7041$RyrJs))
   (g$p?$7045$RyrJs
     g$p?$7295$RyrJs
     (record-predicate g$6152$7040$RyrJs))
   (g$make-i/o-port-error$7046$RyrJs
     g$make-i/o-port-error$7296$RyrJs
     (record-constructor g$6153$7042$RyrJs))
   (g$i/o-error-port$7047$RyrJs
     g$i/o-error-port$7297$RyrJs
     (record-accessor g$6152$7040$RyrJs '0))
   (g$i/o-port-error?$7048$RyrJs
     g$i/o-port-error?$7298$RyrJs
     (condition-predicate g$6152$7040$RyrJs))
   (g$i/o-error-port$7049$RyrJs
     g$i/o-error-port$7299$RyrJs
     (condition-accessor g$6152$7040$RyrJs g$i/o-error-port$7047$RyrJs))
   (g$&i/o-port-rtd$7050$RyrJs
     g$&i/o-port-rtd$7300$RyrJs
     g$6152$7040$RyrJs)
   (g$&i/o-port-rcd$7051$RyrJs
     g$&i/o-port-rcd$7301$RyrJs
     g$6153$7042$RyrJs)
   (g$6167$7052$RyrJs
     g$6167$7302$RyrJs
     (make-record-type-descriptor
       '&i/o-decoding
       g$6152$7040$RyrJs
       'g$6170$RyrJs
       '#f
       '#f
       '#()))
   (g$6169$7053$RyrJs g$6169$7303$RyrJs '#f)
   (g$6168$7054$RyrJs
     g$6168$7304$RyrJs
     (make-record-constructor-descriptor
       g$6167$7052$RyrJs
       g$6153$7042$RyrJs
       g$6169$7053$RyrJs))
   (g$p?$7057$RyrJs
     g$p?$7305$RyrJs
     (record-predicate g$6167$7052$RyrJs))
   (g$make-i/o-decoding-error$7058$RyrJs
     g$make-i/o-decoding-error$7306$RyrJs
     (record-constructor g$6168$7054$RyrJs))
   (g$i/o-decoding-error?$7059$RyrJs
     g$i/o-decoding-error?$7307$RyrJs
     (condition-predicate g$6167$7052$RyrJs))
   (g$&i/o-decoding-rtd$7060$RyrJs
     g$&i/o-decoding-rtd$7308$RyrJs
     g$6167$7052$RyrJs)
   (g$&i/o-decoding-rcd$7061$RyrJs
     g$&i/o-decoding-rcd$7309$RyrJs
     g$6168$7054$RyrJs)
   (g$6180$7063$RyrJs
     g$6180$7310$RyrJs
     (make-record-type-descriptor
       '&i/o-encoding
       g$6152$7040$RyrJs
       'g$6183$RyrJs
       '#f
       '#f
       '#((immutable char))))
   (g$6182$7064$RyrJs g$6182$7311$RyrJs '#f)
   (g$6181$7065$RyrJs
     g$6181$7312$RyrJs
     (make-record-constructor-descriptor
       g$6180$7063$RyrJs
       g$6153$7042$RyrJs
       g$6182$7064$RyrJs))
   (g$p?$7068$RyrJs
     g$p?$7313$RyrJs
     (record-predicate g$6180$7063$RyrJs))
   (g$make-i/o-encoding-error$7069$RyrJs
     g$make-i/o-encoding-error$7314$RyrJs
     (record-constructor g$6181$7065$RyrJs))
   (g$i/o-encoding-error-char$7070$RyrJs
     g$i/o-encoding-error-char$7315$RyrJs
     (record-accessor g$6180$7063$RyrJs '0))
   (g$i/o-encoding-error?$7071$RyrJs
     g$i/o-encoding-error?$7316$RyrJs
     (condition-predicate g$6180$7063$RyrJs))
   (g$i/o-encoding-error-char$7072$RyrJs
     g$i/o-encoding-error-char$7317$RyrJs
     (condition-accessor
       g$6180$7063$RyrJs
       g$i/o-encoding-error-char$7070$RyrJs))
   (g$&i/o-encoding-rtd$7073$RyrJs
     g$&i/o-encoding-rtd$7318$RyrJs
     g$6180$7063$RyrJs)
   (g$&i/o-encoding-rcd$7074$RyrJs
     g$&i/o-encoding-rcd$7319$RyrJs
     g$6181$7065$RyrJs)
   (g$6195$7075$RyrJs
     g$6195$7320$RyrJs
     (make-record-type-descriptor
       '&no-infinities
       g$5975$6897$RyrJs
       'g$6198$RyrJs
       '#f
       '#f
       '#()))
   (g$6197$7076$RyrJs g$6197$7321$RyrJs '#f)
   (g$6196$7077$RyrJs
     g$6196$7322$RyrJs
     (make-record-constructor-descriptor
       g$6195$7075$RyrJs
       g$5976$6899$RyrJs
       g$6197$7076$RyrJs))
   (g$p?$7080$RyrJs
     g$p?$7323$RyrJs
     (record-predicate g$6195$7075$RyrJs))
   (g$make-no-infinities-violation$7081$RyrJs
     g$make-no-infinities-violation$7324$RyrJs
     (record-constructor g$6196$7077$RyrJs))
   (g$no-infinities-violation?$7082$RyrJs
     g$no-infinities-violation?$7325$RyrJs
     (condition-predicate g$6195$7075$RyrJs))
   (g$&no-infinities-rtd$7083$RyrJs
     g$&no-infinities-rtd$7326$RyrJs
     g$6195$7075$RyrJs)
   (g$&no-infinities-rcd$7084$RyrJs
     g$&no-infinities-rcd$7327$RyrJs
     g$6196$7077$RyrJs)
   (g$6208$7085$RyrJs
     g$6208$7328$RyrJs
     (make-record-type-descriptor
       '&no-nans
       g$5975$6897$RyrJs
       'g$6211$RyrJs
       '#f
       '#f
       '#()))
   (g$6210$7086$RyrJs g$6210$7329$RyrJs '#f)
   (g$6209$7087$RyrJs
     g$6209$7330$RyrJs
     (make-record-constructor-descriptor
       g$6208$7085$RyrJs
       g$5976$6899$RyrJs
       g$6210$7086$RyrJs))
   (g$p?$7090$RyrJs
     g$p?$7331$RyrJs
     (record-predicate g$6208$7085$RyrJs))
   (g$make-no-nans-violation$7091$RyrJs
     g$make-no-nans-violation$7332$RyrJs
     (record-constructor g$6209$7087$RyrJs))
   (g$no-nans-violation?$7092$RyrJs
     g$no-nans-violation?$7333$RyrJs
     (condition-predicate g$6208$7085$RyrJs))
   (g$&no-nans-rtd$7093$RyrJs
     g$&no-nans-rtd$7334$RyrJs
     g$6208$7085$RyrJs)
   (g$&no-nans-rcd$7094$RyrJs
     g$&no-nans-rcd$7335$RyrJs
     g$6209$7087$RyrJs))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$7336$RyrJs
     g$append!$7342$RyrJs
     (case-lambda
       ((g$a$7337$RyrJs . g$b$7338$RyrJs)
        (if (null? g$a$7337$RyrJs)
          g$b$7338$RyrJs
          (if (null? g$b$7338$RyrJs)
            g$a$7337$RyrJs
            (begin
              ((letrec ((g$f$7339$RyrJs
                          (case-lambda
                            ((g$a$7340$RyrJs)
                             ((case-lambda
                                ((g$n$7341$RyrJs)
                                 (if (null? g$n$7341$RyrJs)
                                   (set-cdr!
                                     g$a$7340$RyrJs
                                     g$b$7338$RyrJs)
                                   (g$f$7339$RyrJs g$n$7341$RyrJs))))
                              (cdr g$a$7340$RyrJs))))))
                 g$f$7339$RyrJs)
               g$a$7337$RyrJs)
              g$a$7337$RyrJs)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$7343$RyrJs g$inexact->exact$7363$RyrJs exact)
   (g$exact->inexact$7344$RyrJs g$exact->inexact$7364$RyrJs inexact)
   (g$sign$7345$RyrJs
     g$sign$7365$RyrJs
     (case-lambda
       ((g$n$7351$RyrJs)
        (if (> g$n$7351$RyrJs '0)
          '1
          (if (< g$n$7351$RyrJs '0) '-1 '0)))))
   (g$quotient$7346$RyrJs
     g$quotient$7366$RyrJs
     (case-lambda
       ((g$n1$7352$RyrJs g$n2$7353$RyrJs)
        (begin
          (if (not (integer-valued? g$n1$7352$RyrJs))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n1$7352$RyrJs)
            (void))
          (if (not (integer-valued? g$n2$7353$RyrJs))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n2$7353$RyrJs)
            (void))
          (* (g$sign$7345$RyrJs g$n1$7352$RyrJs)
             (g$sign$7345$RyrJs g$n2$7353$RyrJs)
             (div (abs g$n1$7352$RyrJs) (abs g$n2$7353$RyrJs)))))))
   (g$remainder$7347$RyrJs
     g$remainder$7367$RyrJs
     (case-lambda
       ((g$n1$7354$RyrJs g$n2$7355$RyrJs)
        (begin
          (if (not (integer-valued? g$n1$7354$RyrJs))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n1$7354$RyrJs)
            (void))
          (if (not (integer-valued? g$n2$7355$RyrJs))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n2$7355$RyrJs)
            (void))
          (* (g$sign$7345$RyrJs g$n1$7354$RyrJs)
             (g$mod$6447$RyrJs
               (abs g$n1$7354$RyrJs)
               (abs g$n2$7355$RyrJs)))))))
   (g$modulo$7348$RyrJs
     g$modulo$7368$RyrJs
     (case-lambda
       ((g$n1$7356$RyrJs g$n2$7357$RyrJs)
        (begin
          (if (not (integer-valued? g$n1$7356$RyrJs))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n1$7356$RyrJs)
            (void))
          (if (not (integer-valued? g$n2$7357$RyrJs))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n2$7357$RyrJs)
            (void))
          (* (g$sign$7345$RyrJs g$n2$7357$RyrJs)
             (g$mod$6447$RyrJs
               (* (g$sign$7345$RyrJs g$n2$7357$RyrJs) g$n1$7356$RyrJs)
               (abs g$n2$7357$RyrJs)))))))
   (g$make-promise$7349$RyrJs
     g$make-promise$7369$RyrJs
     (case-lambda
       ((g$proc$7358$RyrJs)
        ((case-lambda
           ((g$result-ready?$7359$RyrJs g$result$7360$RyrJs)
            (case-lambda
              (()
               (if g$result-ready?$7359$RyrJs
                 g$result$7360$RyrJs
                 ((case-lambda
                    ((g$x$7361$RyrJs)
                     (if g$result-ready?$7359$RyrJs
                       g$result$7360$RyrJs
                       (begin
                         (set! g$result-ready?$7359$RyrJs '#t)
                         (set! g$result$7360$RyrJs g$x$7361$RyrJs)
                         g$result$7360$RyrJs))))
                  (g$proc$7358$RyrJs)))))))
         '#f
         '#f))))
   (g$force$7350$RyrJs
     g$force$7370$RyrJs
     (case-lambda ((g$object$7362$RyrJs) (g$object$7362$RyrJs)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$7371$RyrJs
     g$split$7396$RyrJs
     (case-lambda
       ((g$ls$7375$RyrJs)
        ((letrec ((g$loop$7376$RyrJs
                    (case-lambda
                      ((g$rest$7377$RyrJs
                         g$left$7378$RyrJs
                         g$right$7379$RyrJs)
                       (if (null? g$rest$7377$RyrJs)
                         (cons g$left$7378$RyrJs g$right$7379$RyrJs)
                         (if (null? (cdr g$rest$7377$RyrJs))
                           (cons
                             (cons
                               (car g$rest$7377$RyrJs)
                               g$left$7378$RyrJs)
                             g$right$7379$RyrJs)
                           (g$loop$7376$RyrJs
                             (g$cddr$6467$RyrJs g$rest$7377$RyrJs)
                             (cons
                               (car g$rest$7377$RyrJs)
                               g$left$7378$RyrJs)
                             (cons
                               (g$cadr$6465$RyrJs g$rest$7377$RyrJs)
                               g$right$7379$RyrJs))))))))
           g$loop$7376$RyrJs)
         g$ls$7375$RyrJs
         '()
         '()))))
   (g$reverse-it$7372$RyrJs
     g$reverse-it$7397$RyrJs
     (case-lambda
       ((g$head$7380$RyrJs g$tail$7381$RyrJs)
        (if (null? g$head$7380$RyrJs)
          g$tail$7381$RyrJs
          (g$reverse-it$7372$RyrJs
            (cdr g$head$7380$RyrJs)
            (cons (car g$head$7380$RyrJs) g$tail$7381$RyrJs))))))
   (g$merge$7373$RyrJs
     g$merge$7398$RyrJs
     (case-lambda
       ((g$list-1$7382$RyrJs g$list-2$7383$RyrJs g$precedes?$7384$RyrJs)
        ((letrec ((g$loop$7385$RyrJs
                    (case-lambda
                      ((g$source-1$7386$RyrJs
                         g$source-2$7387$RyrJs
                         g$so-far$7388$RyrJs)
                       (if (null? g$source-1$7386$RyrJs)
                         (g$reverse-it$7372$RyrJs
                           g$so-far$7388$RyrJs
                           g$source-2$7387$RyrJs)
                         (if (null? g$source-2$7387$RyrJs)
                           (g$reverse-it$7372$RyrJs
                             g$so-far$7388$RyrJs
                             g$source-1$7386$RyrJs)
                           ((case-lambda
                              ((g$car-1$7389$RyrJs g$car-2$7390$RyrJs)
                               (if (g$precedes?$7384$RyrJs
                                     g$car-2$7390$RyrJs
                                     g$car-1$7389$RyrJs)
                                 (g$loop$7385$RyrJs
                                   g$source-1$7386$RyrJs
                                   (cdr g$source-2$7387$RyrJs)
                                   (cons
                                     g$car-2$7390$RyrJs
                                     g$so-far$7388$RyrJs))
                                 (g$loop$7385$RyrJs
                                   g$source-2$7387$RyrJs
                                   (cdr g$source-1$7386$RyrJs)
                                   (cons
                                     g$car-1$7389$RyrJs
                                     g$so-far$7388$RyrJs)))))
                            (car g$source-1$7386$RyrJs)
                            (car g$source-2$7387$RyrJs))))))))
           g$loop$7385$RyrJs)
         g$list-1$7382$RyrJs
         g$list-2$7383$RyrJs
         '()))))
   (g$list-sort$7374$RyrJs
     g$list-sort$7399$RyrJs
     (case-lambda
       ((g$precedes?$7391$RyrJs g$ls$7392$RyrJs)
        (if (null? g$ls$7392$RyrJs)
          '()
          ((letrec ((g$helper$7393$RyrJs
                      (case-lambda
                        ((g$piece$7394$RyrJs)
                         (if (null? (cdr g$piece$7394$RyrJs))
                           g$piece$7394$RyrJs
                           ((case-lambda
                              ((g$parts$7395$RyrJs)
                               (g$merge$7373$RyrJs
                                 (g$helper$7393$RyrJs
                                   (car g$parts$7395$RyrJs))
                                 (g$helper$7393$RyrJs
                                   (cdr g$parts$7395$RyrJs))
                                 g$precedes?$7391$RyrJs)))
                            (g$split$7371$RyrJs
                              g$piece$7394$RyrJs)))))))
             g$helper$7393$RyrJs)
           g$ls$7392$RyrJs))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$7435$RyrJs
     g$string-ci=?$7538$RyrJs
     (case-lambda
       ((g$a$7484$RyrJs g$b$7485$RyrJs . g$rest$7486$RyrJs)
        (begin
          (if (not (string? g$a$7484$RyrJs))
            (assertion-violation
              'string-ci=?
              '"not a string"
              g$a$7484$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7487$RyrJs)
               (begin
                 (if (not (string? g$x$7487$RyrJs))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$7487$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7488$RyrJs)
                     (begin
                       (set! g$a$7484$RyrJs g$x$7487$RyrJs)
                       g$r$7488$RyrJs)))
                  (= (string-ci-compare g$a$7484$RyrJs g$x$7487$RyrJs)
                     '0)))))
            (cons g$b$7485$RyrJs g$rest$7486$RyrJs))))))
   (g$string-ci<?$7436$RyrJs
     g$string-ci<?$7539$RyrJs
     (case-lambda
       ((g$a$7489$RyrJs g$b$7490$RyrJs . g$rest$7491$RyrJs)
        (begin
          (if (not (string? g$a$7489$RyrJs))
            (assertion-violation
              'string-ci<?
              '"not a string"
              g$a$7489$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7492$RyrJs)
               (begin
                 (if (not (string? g$x$7492$RyrJs))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$7492$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7493$RyrJs)
                     (begin
                       (set! g$a$7489$RyrJs g$x$7492$RyrJs)
                       g$r$7493$RyrJs)))
                  (< (string-ci-compare g$a$7489$RyrJs g$x$7492$RyrJs)
                     '0)))))
            (cons g$b$7490$RyrJs g$rest$7491$RyrJs))))))
   (g$string-ci>?$7437$RyrJs
     g$string-ci>?$7540$RyrJs
     (case-lambda
       ((g$a$7494$RyrJs g$b$7495$RyrJs . g$rest$7496$RyrJs)
        (begin
          (if (not (string? g$a$7494$RyrJs))
            (assertion-violation
              'string-ci>?
              '"not a string"
              g$a$7494$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7497$RyrJs)
               (begin
                 (if (not (string? g$x$7497$RyrJs))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$7497$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7498$RyrJs)
                     (begin
                       (set! g$a$7494$RyrJs g$x$7497$RyrJs)
                       g$r$7498$RyrJs)))
                  (> (string-ci-compare g$a$7494$RyrJs g$x$7497$RyrJs)
                     '0)))))
            (cons g$b$7495$RyrJs g$rest$7496$RyrJs))))))
   (g$string-ci<=?$7438$RyrJs
     g$string-ci<=?$7541$RyrJs
     (case-lambda
       ((g$a$7499$RyrJs g$b$7500$RyrJs . g$rest$7501$RyrJs)
        (begin
          (if (not (string? g$a$7499$RyrJs))
            (assertion-violation
              'string-ci<=?
              '"not a string"
              g$a$7499$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7502$RyrJs)
               (begin
                 (if (not (string? g$x$7502$RyrJs))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$7502$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7503$RyrJs)
                     (begin
                       (set! g$a$7499$RyrJs g$x$7502$RyrJs)
                       g$r$7503$RyrJs)))
                  (<= (string-ci-compare g$a$7499$RyrJs g$x$7502$RyrJs)
                      '0)))))
            (cons g$b$7500$RyrJs g$rest$7501$RyrJs))))))
   (g$string-ci>=?$7439$RyrJs
     g$string-ci>=?$7542$RyrJs
     (case-lambda
       ((g$a$7504$RyrJs g$b$7505$RyrJs . g$rest$7506$RyrJs)
        (begin
          (if (not (string? g$a$7504$RyrJs))
            (assertion-violation
              'string-ci>=?
              '"not a string"
              g$a$7504$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7507$RyrJs)
               (begin
                 (if (not (string? g$x$7507$RyrJs))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$7507$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7508$RyrJs)
                     (begin
                       (set! g$a$7504$RyrJs g$x$7507$RyrJs)
                       g$r$7508$RyrJs)))
                  (>= (string-ci-compare g$a$7504$RyrJs g$x$7507$RyrJs)
                      '0)))))
            (cons g$b$7505$RyrJs g$rest$7506$RyrJs))))))
   (g$char-ci=?$7475$RyrJs
     g$char-ci=?$7543$RyrJs
     (case-lambda
       ((g$a$7509$RyrJs g$b$7510$RyrJs . g$rest$7511$RyrJs)
        (begin
          (if (not (g$char?$6453$RyrJs g$a$7509$RyrJs))
            (assertion-violation
              'char-ci=?
              '"not a char"
              g$a$7509$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7512$RyrJs)
               (begin
                 (if (not (g$char?$6453$RyrJs g$x$7512$RyrJs))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$7512$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7513$RyrJs)
                     (begin
                       (set! g$a$7509$RyrJs g$x$7512$RyrJs)
                       g$r$7513$RyrJs)))
                  (= (char->integer (char-upcase g$a$7509$RyrJs))
                     (char->integer (char-upcase g$x$7512$RyrJs)))))))
            (cons g$b$7510$RyrJs g$rest$7511$RyrJs))))))
   (g$char-ci<?$7476$RyrJs
     g$char-ci<?$7544$RyrJs
     (case-lambda
       ((g$a$7514$RyrJs g$b$7515$RyrJs . g$rest$7516$RyrJs)
        (begin
          (if (not (g$char?$6453$RyrJs g$a$7514$RyrJs))
            (assertion-violation
              'char-ci<?
              '"not a char"
              g$a$7514$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7517$RyrJs)
               (begin
                 (if (not (g$char?$6453$RyrJs g$x$7517$RyrJs))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$7517$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7518$RyrJs)
                     (begin
                       (set! g$a$7514$RyrJs g$x$7517$RyrJs)
                       g$r$7518$RyrJs)))
                  (< (char->integer (char-upcase g$a$7514$RyrJs))
                     (char->integer (char-upcase g$x$7517$RyrJs)))))))
            (cons g$b$7515$RyrJs g$rest$7516$RyrJs))))))
   (g$char-ci>?$7477$RyrJs
     g$char-ci>?$7545$RyrJs
     (case-lambda
       ((g$a$7519$RyrJs g$b$7520$RyrJs . g$rest$7521$RyrJs)
        (begin
          (if (not (g$char?$6453$RyrJs g$a$7519$RyrJs))
            (assertion-violation
              'char-ci>?
              '"not a char"
              g$a$7519$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7522$RyrJs)
               (begin
                 (if (not (g$char?$6453$RyrJs g$x$7522$RyrJs))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$7522$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7523$RyrJs)
                     (begin
                       (set! g$a$7519$RyrJs g$x$7522$RyrJs)
                       g$r$7523$RyrJs)))
                  (> (char->integer (char-upcase g$a$7519$RyrJs))
                     (char->integer (char-upcase g$x$7522$RyrJs)))))))
            (cons g$b$7520$RyrJs g$rest$7521$RyrJs))))))
   (g$char-ci<=?$7478$RyrJs
     g$char-ci<=?$7546$RyrJs
     (case-lambda
       ((g$a$7524$RyrJs g$b$7525$RyrJs . g$rest$7526$RyrJs)
        (begin
          (if (not (g$char?$6453$RyrJs g$a$7524$RyrJs))
            (assertion-violation
              'char-ci<=?
              '"not a char"
              g$a$7524$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7527$RyrJs)
               (begin
                 (if (not (g$char?$6453$RyrJs g$x$7527$RyrJs))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$7527$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7528$RyrJs)
                     (begin
                       (set! g$a$7524$RyrJs g$x$7527$RyrJs)
                       g$r$7528$RyrJs)))
                  (<= (char->integer (char-upcase g$a$7524$RyrJs))
                      (char->integer (char-upcase g$x$7527$RyrJs)))))))
            (cons g$b$7525$RyrJs g$rest$7526$RyrJs))))))
   (g$char-ci>=?$7479$RyrJs
     g$char-ci>=?$7547$RyrJs
     (case-lambda
       ((g$a$7529$RyrJs g$b$7530$RyrJs . g$rest$7531$RyrJs)
        (begin
          (if (not (g$char?$6453$RyrJs g$a$7529$RyrJs))
            (assertion-violation
              'char-ci>=?
              '"not a char"
              g$a$7529$RyrJs)
            (void))
          (g$for-all$5805$RyrJs
            (case-lambda
              ((g$x$7532$RyrJs)
               (begin
                 (if (not (g$char?$6453$RyrJs g$x$7532$RyrJs))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$7532$RyrJs)
                   (void))
                 ((case-lambda
                    ((g$r$7533$RyrJs)
                     (begin
                       (set! g$a$7529$RyrJs g$x$7532$RyrJs)
                       g$r$7533$RyrJs)))
                  (>= (char->integer (char-upcase g$a$7529$RyrJs))
                      (char->integer (char-upcase g$x$7532$RyrJs)))))))
            (cons g$b$7530$RyrJs g$rest$7531$RyrJs))))))
   (g$string-normalize-nfc$7480$RyrJs
     g$string-normalize-nfc$7548$RyrJs
     (case-lambda
       ((g$s$7534$RyrJs) (string-normalize g$s$7534$RyrJs 'formc))))
   (g$string-normalize-nfd$7481$RyrJs
     g$string-normalize-nfd$7549$RyrJs
     (case-lambda
       ((g$s$7535$RyrJs) (string-normalize g$s$7535$RyrJs 'formd))))
   (g$string-normalize-nfkc$7482$RyrJs
     g$string-normalize-nfkc$7550$RyrJs
     (case-lambda
       ((g$s$7536$RyrJs) (string-normalize g$s$7536$RyrJs 'formkc))))
   (g$string-normalize-nfkd$7483$RyrJs
     g$string-normalize-nfkd$7551$RyrJs
     (case-lambda
       ((g$s$7537$RyrJs) (string-normalize g$s$7537$RyrJs 'formkd)))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$7552$RyrJs
     g$bitwise-if$7583$RyrJs
     (case-lambda
       ((g$ei1$7559$RyrJs g$ei2$7560$RyrJs g$ei3$7561$RyrJs)
        (bitwise-ior
          (bitwise-and g$ei1$7559$RyrJs g$ei2$7560$RyrJs)
          (bitwise-and
            (bitwise-not g$ei1$7559$RyrJs)
            g$ei3$7561$RyrJs)))))
   (g$bitwise-copy-bit$7553$RyrJs
     g$bitwise-copy-bit$7584$RyrJs
     (case-lambda
       ((g$ei1$7562$RyrJs g$ei2$7563$RyrJs g$ei3$7564$RyrJs)
        (g$bitwise-if$7552$RyrJs
          (g$bitwise-arithmetic-shift-left$7556$RyrJs
            '1
            g$ei2$7563$RyrJs)
          (g$bitwise-arithmetic-shift-left$7556$RyrJs
            g$ei3$7564$RyrJs
            g$ei2$7563$RyrJs)
          g$ei1$7562$RyrJs))))
   (g$bitwise-bit-field$7554$RyrJs
     g$bitwise-bit-field$7585$RyrJs
     (case-lambda
       ((g$ei1$7565$RyrJs g$ei2$7566$RyrJs g$ei3$7567$RyrJs)
        (g$bitwise-arithmetic-shift-right$7557$RyrJs
          (bitwise-and
            g$ei1$7565$RyrJs
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$7556$RyrJs
                '-1
                g$ei3$7567$RyrJs)))
          g$ei2$7566$RyrJs))))
   (g$bitwise-copy-bit-field$7555$RyrJs
     g$bitwise-copy-bit-field$7586$RyrJs
     (case-lambda
       ((g$to$7568$RyrJs
          g$start$7569$RyrJs
          g$end$7570$RyrJs
          g$from$7571$RyrJs)
        (g$bitwise-if$7552$RyrJs
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$7556$RyrJs
              '-1
              g$start$7569$RyrJs)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$7556$RyrJs
                '-1
                g$end$7570$RyrJs)))
          (g$bitwise-arithmetic-shift-left$7556$RyrJs
            g$from$7571$RyrJs
            g$start$7569$RyrJs)
          g$to$7568$RyrJs))))
   (g$bitwise-arithmetic-shift-left$7556$RyrJs
     g$bitwise-arithmetic-shift-left$7587$RyrJs
     (case-lambda
       ((g$ei1$7572$RyrJs g$ei2$7573$RyrJs)
        (bitwise-arithmetic-shift g$ei1$7572$RyrJs g$ei2$7573$RyrJs))))
   (g$bitwise-arithmetic-shift-right$7557$RyrJs
     g$bitwise-arithmetic-shift-right$7588$RyrJs
     (case-lambda
       ((g$ei1$7574$RyrJs g$ei2$7575$RyrJs)
        (bitwise-arithmetic-shift
          g$ei1$7574$RyrJs
          (- g$ei2$7575$RyrJs)))))
   (g$bitwise-rotate-bit-field$7558$RyrJs
     g$bitwise-rotate-bit-field$7589$RyrJs
     (case-lambda
       ((g$n$7576$RyrJs
          g$start$7577$RyrJs
          g$end$7578$RyrJs
          g$count$7579$RyrJs)
        ((case-lambda
           ((g$width$7580$RyrJs)
            (if (g$positive?$6492$RyrJs g$width$7580$RyrJs)
              ((case-lambda
                 ((g$count$7581$RyrJs g$field$7582$RyrJs)
                  (g$bitwise-copy-bit-field$7555$RyrJs
                    g$n$7576$RyrJs
                    g$start$7577$RyrJs
                    g$end$7578$RyrJs
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$7556$RyrJs
                        g$field$7582$RyrJs
                        g$count$7581$RyrJs)
                      (g$bitwise-arithmetic-shift-right$7557$RyrJs
                        g$field$7582$RyrJs
                        (- g$width$7580$RyrJs g$count$7581$RyrJs))))))
               (g$mod$6447$RyrJs g$count$7579$RyrJs g$width$7580$RyrJs)
               (g$bitwise-bit-field$7554$RyrJs
                 g$n$7576$RyrJs
                 g$start$7577$RyrJs
                 g$end$7578$RyrJs))
              g$n$7576$RyrJs)))
         (- g$end$7578$RyrJs g$start$7577$RyrJs))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxmod$7590$RyrJs
     g$fxmod$7673$RyrJs
     (case-lambda
       ((g$x1$7611$RyrJs g$x2$7612$RyrJs)
        (fx- g$x1$7611$RyrJs
             (fx* (fxdiv g$x1$7611$RyrJs g$x2$7612$RyrJs)
                  g$x2$7612$RyrJs)))))
   (g$fxmod0$7591$RyrJs
     g$fxmod0$7674$RyrJs
     (case-lambda
       ((g$x1$7613$RyrJs g$x2$7614$RyrJs)
        (fx- g$x1$7613$RyrJs
             (fx* (fxdiv0 g$x1$7613$RyrJs g$x2$7614$RyrJs)
                  g$x2$7614$RyrJs)))))
   (g$fxdiv-and-mod$7592$RyrJs
     g$fxdiv-and-mod$7675$RyrJs
     (case-lambda
       ((g$x1$7615$RyrJs g$x2$7616$RyrJs)
        ((case-lambda
           ((g$d$7617$RyrJs)
            (values
              g$d$7617$RyrJs
              (fx- g$x1$7615$RyrJs
                   (fx* g$d$7617$RyrJs g$x2$7616$RyrJs)))))
         (fxdiv g$x1$7615$RyrJs g$x2$7616$RyrJs)))))
   (g$fxdiv0-and-mod0$7593$RyrJs
     g$fxdiv0-and-mod0$7676$RyrJs
     (case-lambda
       ((g$x1$7618$RyrJs g$x2$7619$RyrJs)
        ((case-lambda
           ((g$d$7620$RyrJs)
            (values
              g$d$7620$RyrJs
              (fx- g$x1$7618$RyrJs
                   (fx* g$d$7620$RyrJs g$x2$7619$RyrJs)))))
         (fxdiv0 g$x1$7618$RyrJs g$x2$7619$RyrJs)))))
   (g$fxpositive?$7594$RyrJs
     g$fxpositive?$7677$RyrJs
     (case-lambda
       ((g$r$7621$RyrJs)
        (begin
          (if (not (g$fixnum?$6459$RyrJs g$r$7621$RyrJs))
            (assertion-violation
              'fxpositive?
              '"not a fixnum"
              g$r$7621$RyrJs)
            (void))
          (fx<? '0 g$r$7621$RyrJs)))))
   (g$fxnegative?$7595$RyrJs
     g$fxnegative?$7678$RyrJs
     (case-lambda
       ((g$r$7622$RyrJs)
        (begin
          (if (not (g$fixnum?$6459$RyrJs g$r$7622$RyrJs))
            (assertion-violation
              'fxnegative?
              '"not a fixnum"
              g$r$7622$RyrJs)
            (void))
          (fx>? '0 g$r$7622$RyrJs)))))
   (g$fxzero?$7596$RyrJs
     g$fxzero?$7679$RyrJs
     (case-lambda
       ((g$r$7623$RyrJs)
        (begin
          (if (not (g$fixnum?$6459$RyrJs g$r$7623$RyrJs))
            (assertion-violation
              'fxzero?
              '"not a fixnum"
              g$r$7623$RyrJs)
            (void))
          (fx=? '0 g$r$7623$RyrJs)))))
   (g$fxeven?$7597$RyrJs
     g$fxeven?$7680$RyrJs
     (case-lambda
       ((g$n$7624$RyrJs)
        (begin
          (if (not (g$fixnum?$6459$RyrJs g$n$7624$RyrJs))
            (assertion-violation
              'fxeven?
              '"not a fixnum"
              g$n$7624$RyrJs)
            (void))
          (if (fx=? g$n$7624$RyrJs (least-fixnum))
            '#t
            (fx=? '0 (g$fxmod$7590$RyrJs g$n$7624$RyrJs '2)))))))
   (g$fxodd?$7598$RyrJs
     g$fxodd?$7681$RyrJs
     (case-lambda
       ((g$n$7625$RyrJs)
        (begin
          (if (not (g$fixnum?$6459$RyrJs g$n$7625$RyrJs))
            (assertion-violation 'fxodd? '"not a fixnum" g$n$7625$RyrJs)
            (void))
          (if (fx=? g$n$7625$RyrJs (least-fixnum))
            '#f
            (fx=? '1 (g$fxmod$7590$RyrJs g$n$7625$RyrJs '2)))))))
   (g$fxmax$7599$RyrJs
     g$fxmax$7682$RyrJs
     (case-lambda
       ((g$a$7626$RyrJs . g$rest$7627$RyrJs)
        (begin
          (if (not (g$fixnum?$6459$RyrJs g$a$7626$RyrJs))
            (assertion-violation 'fxmax '"not a fixnum" g$a$7626$RyrJs)
            (void))
          (g$fold-left$5810$RyrJs
            (case-lambda
              ((g$a$7628$RyrJs g$b$7629$RyrJs)
               (if (fx<? g$a$7628$RyrJs g$b$7629$RyrJs)
                 g$b$7629$RyrJs
                 g$a$7628$RyrJs)))
            g$a$7626$RyrJs
            g$rest$7627$RyrJs)))))
   (g$fxmin$7600$RyrJs
     g$fxmin$7683$RyrJs
     (case-lambda
       ((g$a$7630$RyrJs . g$rest$7631$RyrJs)
        (begin
          (if (not (g$fixnum?$6459$RyrJs g$a$7630$RyrJs))
            (assertion-violation 'fxmin '"not a fixnum" g$a$7630$RyrJs)
            (void))
          (g$fold-left$5810$RyrJs
            (case-lambda
              ((g$a$7632$RyrJs g$b$7633$RyrJs)
               (if (fx>? g$a$7632$RyrJs g$b$7633$RyrJs)
                 g$b$7633$RyrJs
                 g$a$7632$RyrJs)))
            g$a$7630$RyrJs
            g$rest$7631$RyrJs)))))
   (g$fx*/carry$7601$RyrJs
     g$fx*/carry$7684$RyrJs
     (case-lambda
       ((g$fx1$7634$RyrJs g$fx2$7635$RyrJs g$fx3$7636$RyrJs)
        ((case-lambda
           ((g$s$7637$RyrJs g$e$7638$RyrJs)
            (values
              (g$mod0$6448$RyrJs g$s$7637$RyrJs g$e$7638$RyrJs)
              (div0 g$s$7637$RyrJs g$e$7638$RyrJs))))
         (+ (* g$fx1$7634$RyrJs g$fx2$7635$RyrJs) g$fx3$7636$RyrJs)
         (expt '2 (g$fixnum-width$6461$RyrJs))))))
   (g$fx-/carry$7602$RyrJs
     g$fx-/carry$7685$RyrJs
     (case-lambda
       ((g$fx1$7639$RyrJs g$fx2$7640$RyrJs g$fx3$7641$RyrJs)
        ((case-lambda
           ((g$s$7642$RyrJs g$e$7643$RyrJs)
            (values
              (g$mod0$6448$RyrJs g$s$7642$RyrJs g$e$7643$RyrJs)
              (div0 g$s$7642$RyrJs g$e$7643$RyrJs))))
         (- g$fx1$7639$RyrJs g$fx2$7640$RyrJs g$fx3$7641$RyrJs)
         (expt '2 (g$fixnum-width$6461$RyrJs))))))
   (g$fx+/carry$7603$RyrJs
     g$fx+/carry$7686$RyrJs
     (case-lambda
       ((g$fx1$7644$RyrJs g$fx2$7645$RyrJs g$fx3$7646$RyrJs)
        ((case-lambda
           ((g$s$7647$RyrJs g$e$7648$RyrJs)
            (values
              (g$mod0$6448$RyrJs g$s$7647$RyrJs g$e$7648$RyrJs)
              (div0 g$s$7647$RyrJs g$e$7648$RyrJs))))
         (+ g$fx1$7644$RyrJs g$fx2$7645$RyrJs g$fx3$7646$RyrJs)
         (expt '2 (g$fixnum-width$6461$RyrJs))))))
   (g$fxif$7604$RyrJs
     g$fxif$7687$RyrJs
     (case-lambda
       ((g$fx1$7649$RyrJs g$fx2$7650$RyrJs g$fx3$7651$RyrJs)
        (fxior
          (fxand g$fx1$7649$RyrJs g$fx2$7650$RyrJs)
          (fxand (fxnot g$fx1$7649$RyrJs) g$fx3$7651$RyrJs)))))
   (g$fxcopy-bit$7605$RyrJs
     g$fxcopy-bit$7688$RyrJs
     (case-lambda
       ((g$fx1$7652$RyrJs g$fx2$7653$RyrJs g$fx3$7654$RyrJs)
        (g$fxif$7604$RyrJs
          (g$fxarithmetic-shift-left$7608$RyrJs '1 g$fx2$7653$RyrJs)
          (g$fxarithmetic-shift-left$7608$RyrJs
            g$fx3$7654$RyrJs
            g$fx2$7653$RyrJs)
          g$fx1$7652$RyrJs))))
   (g$fxbit-field$7606$RyrJs
     g$fxbit-field$7689$RyrJs
     (case-lambda
       ((g$fx1$7655$RyrJs g$fx2$7656$RyrJs g$fx3$7657$RyrJs)
        (g$fxarithmetic-shift-right$7609$RyrJs
          (fxand
            g$fx1$7655$RyrJs
            (fxnot
              (g$fxarithmetic-shift-left$7608$RyrJs
                '-1
                g$fx3$7657$RyrJs)))
          g$fx2$7656$RyrJs))))
   (g$fxcopy-bit-field$7607$RyrJs
     g$fxcopy-bit-field$7690$RyrJs
     (case-lambda
       ((g$to$7658$RyrJs
          g$start$7659$RyrJs
          g$end$7660$RyrJs
          g$from$7661$RyrJs)
        (g$fxif$7604$RyrJs
          (fxand
            (g$fxarithmetic-shift-left$7608$RyrJs
              '-1
              g$start$7659$RyrJs)
            (fxnot
              (g$fxarithmetic-shift-left$7608$RyrJs
                '-1
                g$end$7660$RyrJs)))
          (g$fxarithmetic-shift-left$7608$RyrJs
            g$from$7661$RyrJs
            g$start$7659$RyrJs)
          g$to$7658$RyrJs))))
   (g$fxarithmetic-shift-left$7608$RyrJs
     g$fxarithmetic-shift-left$7691$RyrJs
     (case-lambda
       ((g$fx1$7662$RyrJs g$fx2$7663$RyrJs)
        (fxarithmetic-shift g$fx1$7662$RyrJs g$fx2$7663$RyrJs))))
   (g$fxarithmetic-shift-right$7609$RyrJs
     g$fxarithmetic-shift-right$7692$RyrJs
     (case-lambda
       ((g$fx1$7664$RyrJs g$fx2$7665$RyrJs)
        (fxarithmetic-shift g$fx1$7664$RyrJs (fx- g$fx2$7665$RyrJs)))))
   (g$fxrotate-bit-field$7610$RyrJs
     g$fxrotate-bit-field$7693$RyrJs
     (case-lambda
       ((g$n$7666$RyrJs
          g$start$7667$RyrJs
          g$end$7668$RyrJs
          g$count$7669$RyrJs)
        ((case-lambda
           ((g$width$7670$RyrJs)
            (if (g$fxpositive?$7594$RyrJs g$width$7670$RyrJs)
              ((case-lambda
                 ((g$count$7671$RyrJs g$field$7672$RyrJs)
                  (g$fxcopy-bit-field$7607$RyrJs
                    g$n$7666$RyrJs
                    g$start$7667$RyrJs
                    g$end$7668$RyrJs
                    (fxior
                      (g$fxarithmetic-shift-left$7608$RyrJs
                        g$field$7672$RyrJs
                        g$count$7671$RyrJs)
                      (g$fxarithmetic-shift-right$7609$RyrJs
                        g$field$7672$RyrJs
                        (fx- g$width$7670$RyrJs g$count$7671$RyrJs))))))
               (g$fxmod$7590$RyrJs
                 g$count$7669$RyrJs
                 g$width$7670$RyrJs)
               (g$fxbit-field$7606$RyrJs
                 g$n$7666$RyrJs
                 g$start$7667$RyrJs
                 g$end$7668$RyrJs))
              g$n$7666$RyrJs)))
         (fx- g$end$7668$RyrJs g$start$7667$RyrJs))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$flmod$7694$RyrJs
     g$flmod$7771$RyrJs
     (case-lambda
       ((g$x1$7724$RyrJs g$x2$7725$RyrJs)
        (fl- g$x1$7724$RyrJs
             (fl* (fldiv g$x1$7724$RyrJs g$x2$7725$RyrJs)
                  g$x2$7725$RyrJs)))))
   (g$flmod0$7695$RyrJs
     g$flmod0$7772$RyrJs
     (case-lambda
       ((g$x1$7726$RyrJs g$x2$7727$RyrJs)
        (fl- g$x1$7726$RyrJs
             (fl* (fldiv0 g$x1$7726$RyrJs g$x2$7727$RyrJs)
                  g$x2$7727$RyrJs)))))
   (g$fldiv-and-mod$7696$RyrJs
     g$fldiv-and-mod$7773$RyrJs
     (case-lambda
       ((g$x1$7728$RyrJs g$x2$7729$RyrJs)
        ((case-lambda
           ((g$d$7730$RyrJs)
            (values
              g$d$7730$RyrJs
              (fl- g$x1$7728$RyrJs
                   (fl* g$d$7730$RyrJs g$x2$7729$RyrJs)))))
         (fldiv g$x1$7728$RyrJs g$x2$7729$RyrJs)))))
   (g$fldiv0-and-mod0$7697$RyrJs
     g$fldiv0-and-mod0$7774$RyrJs
     (case-lambda
       ((g$x1$7731$RyrJs g$x2$7732$RyrJs)
        ((case-lambda
           ((g$d$7733$RyrJs)
            (values
              g$d$7733$RyrJs
              (fl- g$x1$7731$RyrJs
                   (fl* g$d$7733$RyrJs g$x2$7732$RyrJs)))))
         (fldiv0 g$x1$7731$RyrJs g$x2$7732$RyrJs)))))
   (g$flinteger?$7698$RyrJs
     g$flinteger?$7775$RyrJs
     (case-lambda
       ((g$fl$7734$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7734$RyrJs))
            (assertion-violation
              'flinteger?
              '"not a flonum"
              g$fl$7734$RyrJs)
            (void))
          (fl=? '0.0 (g$flmod$7694$RyrJs g$fl$7734$RyrJs '1.0))))))
   (g$flfinite?$7699$RyrJs
     g$flfinite?$7776$RyrJs
     (case-lambda
       ((g$fl$7735$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7735$RyrJs))
            (assertion-violation
              'flfinite?
              '"not a flonum"
              g$fl$7735$RyrJs)
            (void))
          (not (g$flinfinite?$7700$RyrJs g$fl$7735$RyrJs))))))
   (g$flinfinite?$7700$RyrJs
     g$flinfinite?$7777$RyrJs
     (case-lambda
       ((g$fl$7736$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7736$RyrJs))
            (assertion-violation
              'flinfinite?
              '"not a flonum"
              g$fl$7736$RyrJs)
            (void))
          (clr-call-internal
            'system.double
            'isinfinity
            '()
            g$fl$7736$RyrJs)))))
   (g$flnan?$7701$RyrJs
     g$flnan?$7778$RyrJs
     (case-lambda
       ((g$fl$7737$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7737$RyrJs))
            (assertion-violation
              'flnan?
              '"not a flonum"
              g$fl$7737$RyrJs)
            (void))
          (clr-call-internal
            'system.double
            'isnan
            '()
            g$fl$7737$RyrJs)))))
   (g$flsin$7702$RyrJs
     g$flsin$7779$RyrJs
     (case-lambda
       ((g$fl$7738$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7738$RyrJs))
            (assertion-violation 'flsin '"not a flonum" g$fl$7738$RyrJs)
            (void))
          (clr-call-internal 'system.math 'sin '() g$fl$7738$RyrJs)))))
   (g$flcos$7703$RyrJs
     g$flcos$7780$RyrJs
     (case-lambda
       ((g$fl$7739$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7739$RyrJs))
            (assertion-violation 'flcos '"not a flonum" g$fl$7739$RyrJs)
            (void))
          (clr-call-internal 'system.math 'cos '() g$fl$7739$RyrJs)))))
   (g$fltan$7704$RyrJs
     g$fltan$7781$RyrJs
     (case-lambda
       ((g$fl$7740$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7740$RyrJs))
            (assertion-violation 'fltan '"not a flonum" g$fl$7740$RyrJs)
            (void))
          (clr-call-internal 'system.math 'tan '() g$fl$7740$RyrJs)))))
   (g$flasin$7705$RyrJs
     g$flasin$7782$RyrJs
     (case-lambda
       ((g$fl$7741$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7741$RyrJs))
            (assertion-violation
              'flasin
              '"not a flonum"
              g$fl$7741$RyrJs)
            (void))
          (clr-call-internal 'system.math 'asin '() g$fl$7741$RyrJs)))))
   (g$flacos$7706$RyrJs
     g$flacos$7783$RyrJs
     (case-lambda
       ((g$fl$7742$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7742$RyrJs))
            (assertion-violation
              'flacos
              '"not a flonum"
              g$fl$7742$RyrJs)
            (void))
          (clr-call-internal 'system.math 'acos '() g$fl$7742$RyrJs)))))
   (g$flatan$7707$RyrJs
     g$flatan$7784$RyrJs
     (case-lambda
       ((g$fl$7743$RyrJs)
        (clr-call-internal 'system.math 'atan '() g$fl$7743$RyrJs))
       ((g$fl1$7744$RyrJs g$fl2$7745$RyrJs)
        (clr-call-internal
          'system.math
          'atan2
          '()
          g$fl1$7744$RyrJs
          g$fl2$7745$RyrJs))))
   (g$fllog$7708$RyrJs
     g$fllog$7785$RyrJs
     (case-lambda
       ((g$fl$7746$RyrJs)
        (clr-call-internal 'system.math 'log '() g$fl$7746$RyrJs))
       ((g$fl1$7747$RyrJs g$fl2$7748$RyrJs)
        (clr-call-internal
          'system.math
          'log
          '()
          g$fl1$7747$RyrJs
          g$fl2$7748$RyrJs))))
   (g$flsqrt$7709$RyrJs
     g$flsqrt$7786$RyrJs
     (case-lambda
       ((g$fl$7749$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7749$RyrJs))
            (assertion-violation
              'flsqrt
              '"not a flonum"
              g$fl$7749$RyrJs)
            (void))
          (clr-call-internal 'system.math 'sqrt '() g$fl$7749$RyrJs)))))
   (g$flexp$7710$RyrJs
     g$flexp$7787$RyrJs
     (case-lambda
       ((g$fl$7750$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7750$RyrJs))
            (assertion-violation 'flexp '"not a flonum" g$fl$7750$RyrJs)
            (void))
          (clr-call-internal 'system.math 'exp '() g$fl$7750$RyrJs)))))
   (g$flexpt$7711$RyrJs
     g$flexpt$7788$RyrJs
     (case-lambda
       ((g$fl$7751$RyrJs g$n$7752$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7751$RyrJs))
            (assertion-violation
              'flexpt
              '"not a flonum"
              g$fl$7751$RyrJs)
            (void))
          (clr-call-internal
            'system.math
            'pow
            '()
            g$fl$7751$RyrJs
            g$n$7752$RyrJs)))))
   (g$flceiling$7712$RyrJs
     g$flceiling$7789$RyrJs
     (case-lambda
       ((g$fl$7753$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7753$RyrJs))
            (assertion-violation
              'flceiling
              '"not a flonum"
              g$fl$7753$RyrJs)
            (void))
          (clr-call-internal
            'system.math
            '"ceiling(double)"
            '()
            g$fl$7753$RyrJs)))))
   (g$flfloor$7713$RyrJs
     g$flfloor$7790$RyrJs
     (case-lambda
       ((g$fl$7754$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7754$RyrJs))
            (assertion-violation
              'flfloor
              '"not a flonum"
              g$fl$7754$RyrJs)
            (void))
          (clr-call-internal
            'system.math
            '"floor(double)"
            '()
            g$fl$7754$RyrJs)))))
   (g$fltruncate$7714$RyrJs
     g$fltruncate$7791$RyrJs
     (case-lambda
       ((g$fl$7755$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7755$RyrJs))
            (assertion-violation
              'fltruncate
              '"not a flonum"
              g$fl$7755$RyrJs)
            (void))
          (clr-call-internal
            'system.math
            '"truncate(double)"
            '()
            g$fl$7755$RyrJs)))))
   (g$flround$7715$RyrJs
     g$flround$7792$RyrJs
     (case-lambda
       ((g$fl$7756$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7756$RyrJs))
            (assertion-violation
              'flround
              '"not a flonum"
              g$fl$7756$RyrJs)
            (void))
          (clr-call-internal
            'system.math
            '"round(double)"
            '()
            g$fl$7756$RyrJs)))))
   (g$flabs$7716$RyrJs
     g$flabs$7793$RyrJs
     (case-lambda
       ((g$fl$7757$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$fl$7757$RyrJs))
            (assertion-violation 'flabs '"not a flonum" g$fl$7757$RyrJs)
            (void))
          (clr-call-internal
            'system.math
            '"abs(double)"
            '()
            g$fl$7757$RyrJs)))))
   (g$flpositive?$7717$RyrJs
     g$flpositive?$7794$RyrJs
     (case-lambda
       ((g$r$7758$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$r$7758$RyrJs))
            (assertion-violation
              'flpositive?
              '"not a flonum"
              g$r$7758$RyrJs)
            (void))
          (fl<? '0.0 g$r$7758$RyrJs)))))
   (g$flnegative?$7718$RyrJs
     g$flnegative?$7795$RyrJs
     (case-lambda
       ((g$r$7759$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$r$7759$RyrJs))
            (assertion-violation
              'flnegative?
              '"not a flonum"
              g$r$7759$RyrJs)
            (void))
          (fl>? '0.0 g$r$7759$RyrJs)))))
   (g$flzero?$7719$RyrJs
     g$flzero?$7796$RyrJs
     (case-lambda
       ((g$r$7760$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$r$7760$RyrJs))
            (assertion-violation
              'flzero?
              '"not a flonum"
              g$r$7760$RyrJs)
            (void))
          (fl=? '0.0 g$r$7760$RyrJs)))))
   (g$fleven?$7720$RyrJs
     g$fleven?$7797$RyrJs
     (case-lambda
       ((g$n$7761$RyrJs)
        (begin
          (if (not (integer-valued? g$n$7761$RyrJs))
            (assertion-violation
              'fleven?
              '"not integer valued"
              g$n$7761$RyrJs)
            (void))
          (fl=? '0.0 (g$flmod$7694$RyrJs g$n$7761$RyrJs '2.0))))))
   (g$flodd?$7721$RyrJs
     g$flodd?$7798$RyrJs
     (case-lambda
       ((g$n$7762$RyrJs)
        (begin
          (if (not (integer-valued? g$n$7762$RyrJs))
            (assertion-violation
              'flodd?
              '"not integer valued"
              g$n$7762$RyrJs)
            (void))
          (fl=? '1.0 (g$flmod$7694$RyrJs g$n$7762$RyrJs '2.0))))))
   (g$flmax$7722$RyrJs
     g$flmax$7799$RyrJs
     (case-lambda
       ((g$a$7763$RyrJs . g$rest$7764$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$a$7763$RyrJs))
            (assertion-violation 'flmax '"not a flonum" g$a$7763$RyrJs)
            (void))
          (g$fold-left$5810$RyrJs
            (case-lambda
              ((g$a$7765$RyrJs g$b$7766$RyrJs)
               (if (fl<? g$a$7765$RyrJs g$b$7766$RyrJs)
                 g$b$7766$RyrJs
                 g$a$7765$RyrJs)))
            g$a$7763$RyrJs
            g$rest$7764$RyrJs)))))
   (g$flmin$7723$RyrJs
     g$flmin$7800$RyrJs
     (case-lambda
       ((g$a$7767$RyrJs . g$rest$7768$RyrJs)
        (begin
          (if (not (g$flonum?$6460$RyrJs g$a$7767$RyrJs))
            (assertion-violation 'flmin '"not a flonum" g$a$7767$RyrJs)
            (void))
          (g$fold-left$5810$RyrJs
            (case-lambda
              ((g$a$7769$RyrJs g$b$7770$RyrJs)
               (if (fl>? g$a$7769$RyrJs g$b$7770$RyrJs)
                 g$b$7770$RyrJs
                 g$a$7769$RyrJs)))
            g$a$7767$RyrJs
            g$rest$7768$RyrJs))))))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$7802$RyrJs
     g$using$7822$RyrJs
     (clr-using-internal 'ironscheme.runtime))
   (g$put-datum$7803$RyrJs
     g$put-datum$7823$RyrJs
     (case-lambda
       ((g$p$7811$RyrJs g$datum$7812$RyrJs)
        (write g$datum$7812$RyrJs g$p$7811$RyrJs))))
   (g$get-datum$7804$RyrJs g$get-datum$7824$RyrJs read)
   (g$get-output-string$7805$RyrJs
     g$get-output-string$7825$RyrJs
     (case-lambda
       ((g$port$7813$RyrJs)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$7813$RyrJs))))
   (g$open-output-string$7806$RyrJs
     g$open-output-string$7826$RyrJs
     (case-lambda
       (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$7807$RyrJs
     g$open-string-output-port$7827$RyrJs
     (case-lambda
       (()
        ((case-lambda
           ((g$p$7814$RyrJs)
            (values
              g$p$7814$RyrJs
              (case-lambda
                (() (g$get-output-string$7805$RyrJs g$p$7814$RyrJs))))))
         (g$open-output-string$7806$RyrJs)))))
   (g$port?$7808$RyrJs
     g$port?$7828$RyrJs
     (case-lambda
       ((g$obj$7815$RyrJs)
        ((case-lambda
           ((g$t$7816$RyrJs)
            (if g$t$7816$RyrJs
              g$t$7816$RyrJs
              (begin '#f (binary-port? g$obj$7815$RyrJs)))))
         (textual-port? g$obj$7815$RyrJs)))))
   (g$call-with-string-output-port$7809$RyrJs
     g$call-with-string-output-port$7829$RyrJs
     (case-lambda
       ((g$proc$7817$RyrJs)
        ((case-lambda
           ((g$p$7818$RyrJs)
            (begin
              (g$call-with-port$7810$RyrJs
                g$p$7818$RyrJs
                g$proc$7817$RyrJs)
              (g$get-output-string$7805$RyrJs g$p$7818$RyrJs))))
         (g$open-output-string$7806$RyrJs)))))
   (g$call-with-port$7810$RyrJs
     g$call-with-port$7830$RyrJs
     (case-lambda
       ((g$port$7819$RyrJs g$proc$7820$RyrJs)
        ((case-lambda
           ((g$r$7821$RyrJs)
            (begin (close-port g$port$7819$RyrJs) g$r$7821$RyrJs)))
         (g$proc$7820$RyrJs g$port$7819$RyrJs))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$7831$RyrJs
     g$peek-char$7883$RyrJs
     (case-lambda
       (() (g$peek-char$7831$RyrJs (current-input-port)))
       ((g$port$7855$RyrJs) (lookahead-char g$port$7855$RyrJs))))
   (g$read-char$7832$RyrJs
     g$read-char$7884$RyrJs
     (case-lambda
       (() (g$read-char$7832$RyrJs (current-input-port)))
       ((g$port$7856$RyrJs) (get-char g$port$7856$RyrJs))))
   (g$write-char$7833$RyrJs
     g$write-char$7885$RyrJs
     (case-lambda
       ((g$chr$7857$RyrJs)
        (g$write-char$7833$RyrJs
          g$chr$7857$RyrJs
          (current-output-port)))
       ((g$chr$7858$RyrJs g$port$7859$RyrJs)
        (put-char g$port$7859$RyrJs g$chr$7858$RyrJs))))
   (g$with-input-from-file$7850$RyrJs
     g$with-input-from-file$7886$RyrJs
     (case-lambda
       ((g$filename$7860$RyrJs g$thunk$7861$RyrJs)
        ((case-lambda
           ((g$current-input-port$7864$RyrJs g$t$7865$RyrJs)
            ((case-lambda
               ((g$swap$7866$RyrJs)
                (dynamic-wind
                  g$swap$7866$RyrJs
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$7861$RyrJs)))
                       (case-lambda
                         (()
                          (close-input-port (current-input-port)))))))
                  g$swap$7866$RyrJs)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$7867$RyrJs)
                    (begin
                      (g$current-input-port$7864$RyrJs g$t$7865$RyrJs)
                      (set! g$t$7865$RyrJs g$t$7867$RyrJs))))
                 (g$current-input-port$7864$RyrJs)))))))
         current-input-port
         (open-input-file g$filename$7860$RyrJs)))))
   (g$with-output-to-file$7851$RyrJs
     g$with-output-to-file$7887$RyrJs
     (case-lambda
       ((g$filename$7868$RyrJs g$thunk$7869$RyrJs)
        ((case-lambda
           ((g$current-output-port$7872$RyrJs g$t$7873$RyrJs)
            ((case-lambda
               ((g$swap$7874$RyrJs)
                (dynamic-wind
                  g$swap$7874$RyrJs
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$7869$RyrJs)))
                       (case-lambda
                         (()
                          (close-output-port (current-output-port)))))))
                  g$swap$7874$RyrJs)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$7875$RyrJs)
                    (begin
                      (g$current-output-port$7872$RyrJs g$t$7873$RyrJs)
                      (set! g$t$7873$RyrJs g$t$7875$RyrJs))))
                 (g$current-output-port$7872$RyrJs)))))))
         current-output-port
         (open-output-file g$filename$7868$RyrJs)))))
   (g$call-with-input-file$7852$RyrJs
     g$call-with-input-file$7888$RyrJs
     (case-lambda
       ((g$filename$7876$RyrJs g$proc$7877$RyrJs)
        ((case-lambda
           ((g$p$7878$RyrJs)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$7877$RyrJs g$p$7878$RyrJs)))
              (case-lambda (() (close-input-port g$p$7878$RyrJs))))))
         (open-input-file g$filename$7876$RyrJs)))))
   (g$call-with-output-file$7853$RyrJs
     g$call-with-output-file$7889$RyrJs
     (case-lambda
       ((g$filename$7879$RyrJs g$proc$7880$RyrJs)
        ((case-lambda
           ((g$p$7881$RyrJs)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$7880$RyrJs g$p$7881$RyrJs)))
              (case-lambda (() (close-output-port g$p$7881$RyrJs))))))
         (open-output-file g$filename$7879$RyrJs)))))
   (g$newline$7854$RyrJs
     g$newline$7890$RyrJs
     (case-lambda
       (() (g$newline$7854$RyrJs (current-output-port)))
       ((g$port$7882$RyrJs) (display '"
" g$port$7882$RyrJs)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$6618$7891$RyrJs
     g$6618$8004$RyrJs
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$6620$7892$RyrJs g$6620$8005$RyrJs '#f)
   (g$6619$7893$RyrJs
     g$6619$8006$RyrJs
     (make-record-constructor-descriptor
       g$6618$7891$RyrJs
       '#f
       g$6620$7892$RyrJs))
   (g$enum?$7896$RyrJs
     g$enum?$8007$RyrJs
     (record-predicate g$6618$7891$RyrJs))
   (g$make-enum$7897$RyrJs
     g$make-enum$8008$RyrJs
     (record-constructor g$6619$7893$RyrJs))
   (g$enum-value$7898$RyrJs
     g$enum-value$8009$RyrJs
     (record-accessor g$6618$7891$RyrJs '0))
   (g$enum-info$7899$RyrJs
     g$enum-info$8010$RyrJs
     (record-accessor g$6618$7891$RyrJs '1))
   (g$6629$7900$RyrJs
     g$6629$8011$RyrJs
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$6631$7901$RyrJs g$6631$8012$RyrJs '#f)
   (g$6630$7902$RyrJs
     g$6630$8013$RyrJs
     (make-record-constructor-descriptor
       g$6629$7900$RyrJs
       '#f
       g$6631$7901$RyrJs))
   (g$enum-universe?$7905$RyrJs
     g$enum-universe?$8014$RyrJs
     (record-predicate g$6629$7900$RyrJs))
   (g$make-enum-universe$7906$RyrJs
     g$make-enum-universe$8015$RyrJs
     (record-constructor g$6630$7902$RyrJs))
   (g$enum-universe-id$7907$RyrJs
     g$enum-universe-id$8016$RyrJs
     (record-accessor g$6629$7900$RyrJs '0))
   (g$enum-universe-symbols$7908$RyrJs
     g$enum-universe-symbols$8017$RyrJs
     (record-accessor g$6629$7900$RyrJs '1))
   (g$enum-universe-mapping$7909$RyrJs
     g$enum-universe-mapping$8018$RyrJs
     (record-accessor g$6629$7900$RyrJs '2))
   (g$enum-universe-value$7910$RyrJs
     g$enum-universe-value$8019$RyrJs
     (record-accessor g$6629$7900$RyrJs '3))
   (g$enum-type=?$7911$RyrJs
     g$enum-type=?$8020$RyrJs
     (case-lambda
       ((g$enumset1$7933$RyrJs g$enumset2$7934$RyrJs)
        (eq? (g$enum-universe-id$7907$RyrJs
               (g$enum-info$7899$RyrJs g$enumset1$7933$RyrJs))
             (g$enum-universe-id$7907$RyrJs
               (g$enum-info$7899$RyrJs g$enumset2$7934$RyrJs))))))
   (g$get-symbols$7912$RyrJs
     g$get-symbols$8021$RyrJs
     (case-lambda
       ((g$enumset$7935$RyrJs)
        (g$enum-universe-symbols$7908$RyrJs
          (g$enum-info$7899$RyrJs g$enumset$7935$RyrJs)))))
   (g$get-value$7913$RyrJs
     g$get-value$8022$RyrJs
     (case-lambda
       ((g$enumset$7936$RyrJs g$s$7937$RyrJs)
        (g$hashtable-ref$6559$RyrJs
          (g$enum-universe-mapping$7909$RyrJs
            (g$enum-info$7899$RyrJs g$enumset$7936$RyrJs))
          g$s$7937$RyrJs
          '#f))))
   (g$assert-enum$7914$RyrJs
     g$assert-enum$8023$RyrJs
     (case-lambda
       ((g$who$7938$RyrJs g$enumset$7939$RyrJs)
        (if (not (g$enum?$7896$RyrJs g$enumset$7939$RyrJs))
          (assertion-violation
            g$who$7938$RyrJs
            '"not an enumeration"
            g$enumset$7939$RyrJs)
          (void)))))
   (g$make-info$7915$RyrJs
     g$make-info$8024$RyrJs
     (case-lambda
       ((g$symbols$7940$RyrJs)
        ((case-lambda
           ((g$ht$7941$RyrJs)
            ((letrec ((g$f$7942$RyrJs
                        (case-lambda
                          ((g$s$7943$RyrJs
                             g$a$7944$RyrJs
                             g$mask$7945$RyrJs)
                           (if (null? g$s$7943$RyrJs)
                             (values
                               (reverse! g$a$7944$RyrJs)
                               g$ht$7941$RyrJs
                               (- g$mask$7945$RyrJs '1))
                             ((case-lambda
                                ((g$n$7946$RyrJs)
                                 (if (g$symbol?$6456$RyrJs
                                       g$n$7946$RyrJs)
                                   (if (g$hashtable-contains?$6562$RyrJs
                                         g$ht$7941$RyrJs
                                         g$n$7946$RyrJs)
                                     (g$f$7942$RyrJs
                                       (cdr g$s$7943$RyrJs)
                                       g$a$7944$RyrJs
                                       g$mask$7945$RyrJs)
                                     (begin
                                       (g$hashtable-set!$6560$RyrJs
                                         g$ht$7941$RyrJs
                                         g$n$7946$RyrJs
                                         g$mask$7945$RyrJs)
                                       (g$f$7942$RyrJs
                                         (cdr g$s$7943$RyrJs)
                                         (cons
                                           g$n$7946$RyrJs
                                           g$a$7944$RyrJs)
                                         (g$bitwise-arithmetic-shift-left$7587$RyrJs
                                           g$mask$7945$RyrJs
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$7946$RyrJs))))
                              (car g$s$7943$RyrJs)))))))
               g$f$7942$RyrJs)
             g$symbols$7940$RyrJs
             '()
             '1)))
         (g$make-eq-hashtable$6556$RyrJs)))))
   (g$make-name$7916$RyrJs
     g$make-name$8025$RyrJs
     (case-lambda
       ((g$symbols$7947$RyrJs)
        (string->symbol
          (g$format$8064$RyrJs '"~a" g$symbols$7947$RyrJs)))))
   (g$make-enumeration$7917$RyrJs
     g$make-enumeration$8026$RyrJs
     (case-lambda
       ((g$symbols$7948$RyrJs)
        (call-with-values
          (case-lambda
            (() (g$make-info$7915$RyrJs g$symbols$7948$RyrJs)))
          (case-lambda
            ((g$s$7952$RyrJs g$mapping$7953$RyrJs g$mask$7954$RyrJs)
             ((case-lambda
                ((g$mask$7955$RyrJs g$mapping$7956$RyrJs g$s$7957$RyrJs)
                 (g$make-enum$7897$RyrJs
                   g$mask$7955$RyrJs
                   (g$make-enum-universe$7906$RyrJs
                     (g$make-name$7916$RyrJs g$s$7957$RyrJs)
                     g$s$7957$RyrJs
                     g$mapping$7956$RyrJs
                     g$mask$7955$RyrJs))))
              g$mask$7954$RyrJs
              g$mapping$7953$RyrJs
              g$s$7952$RyrJs)))))))
   (g$enum-set-universe$7918$RyrJs
     g$enum-set-universe$8027$RyrJs
     (case-lambda
       ((g$enumset$7958$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-universe
            g$enumset$7958$RyrJs)
          ((case-lambda
             ((g$ei$7959$RyrJs)
              (g$make-enum$7897$RyrJs
                (g$enum-universe-value$7910$RyrJs g$ei$7959$RyrJs)
                g$ei$7959$RyrJs)))
           (g$enum-info$7899$RyrJs g$enumset$7958$RyrJs))))))
   (g$enum-set-indexer$7919$RyrJs
     g$enum-set-indexer$8028$RyrJs
     (case-lambda
       ((g$enumset$7960$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-indexer
            g$enumset$7960$RyrJs)
          (case-lambda
            ((g$symbol$7961$RyrJs)
             (begin
               (if (not (g$symbol?$6456$RyrJs g$symbol$7961$RyrJs))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$7961$RyrJs)
                 (void))
               ((case-lambda
                  ((g$v$7962$RyrJs)
                   (if g$v$7962$RyrJs
                     (- (bitwise-length g$v$7962$RyrJs) '1)
                     '#f)))
                (g$get-value$7913$RyrJs
                  g$enumset$7960$RyrJs
                  g$symbol$7961$RyrJs)))))))))
   (g$enum-set-constructor$7920$RyrJs
     g$enum-set-constructor$8029$RyrJs
     (case-lambda
       ((g$enumset$7963$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-constructor
            g$enumset$7963$RyrJs)
          (case-lambda
            ((g$symbols$7964$RyrJs)
             ((letrec ((g$f$7965$RyrJs
                         (case-lambda
                           ((g$v$7966$RyrJs g$s$7967$RyrJs)
                            (if (null? g$s$7967$RyrJs)
                              (g$make-enum$7897$RyrJs
                                g$v$7966$RyrJs
                                (g$enum-info$7899$RyrJs
                                  g$enumset$7963$RyrJs))
                              ((case-lambda
                                 ((g$n$7968$RyrJs)
                                  (if (g$symbol?$6456$RyrJs
                                        g$n$7968$RyrJs)
                                    ((case-lambda
                                       ((g$v*$7969$RyrJs)
                                        (if g$v*$7969$RyrJs
                                          (g$f$7965$RyrJs
                                            (bitwise-ior
                                              g$v$7966$RyrJs
                                              g$v*$7969$RyrJs)
                                            (cdr g$s$7967$RyrJs))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$7968$RyrJs))))
                                     (g$get-value$7913$RyrJs
                                       g$enumset$7963$RyrJs
                                       g$n$7968$RyrJs))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$7968$RyrJs))))
                               (car g$s$7967$RyrJs)))))))
                g$f$7965$RyrJs)
              '0
              g$symbols$7964$RyrJs)))))))
   (g$enum-set->list$7921$RyrJs
     g$enum-set->list$8030$RyrJs
     (case-lambda
       ((g$enumset$7970$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set->list
            g$enumset$7970$RyrJs)
          ((case-lambda
             ((g$value$7971$RyrJs)
              ((letrec ((g$f$7972$RyrJs
                          (case-lambda
                            ((g$s$7973$RyrJs g$l$7974$RyrJs)
                             (if (null? g$s$7973$RyrJs)
                               (reverse! g$l$7974$RyrJs)
                               (if (g$zero?$6494$RyrJs
                                     (bitwise-and
                                       (g$get-value$7913$RyrJs
                                         g$enumset$7970$RyrJs
                                         (car g$s$7973$RyrJs))
                                       g$value$7971$RyrJs))
                                 (g$f$7972$RyrJs
                                   (cdr g$s$7973$RyrJs)
                                   g$l$7974$RyrJs)
                                 (g$f$7972$RyrJs
                                   (cdr g$s$7973$RyrJs)
                                   (cons
                                     (car g$s$7973$RyrJs)
                                     g$l$7974$RyrJs))))))))
                 g$f$7972$RyrJs)
               (g$get-symbols$7912$RyrJs g$enumset$7970$RyrJs)
               '())))
           (g$enum-value$7898$RyrJs g$enumset$7970$RyrJs))))))
   (g$enum-set-member?$7922$RyrJs
     g$enum-set-member?$8031$RyrJs
     (case-lambda
       ((g$symbol$7975$RyrJs g$enumset$7976$RyrJs)
        (begin
          (if (not (g$symbol?$6456$RyrJs g$symbol$7975$RyrJs))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$7975$RyrJs)
            (void))
          (g$assert-enum$7914$RyrJs
            'enum-set-member?
            g$enumset$7976$RyrJs)
          ((case-lambda
             ((g$v$7977$RyrJs)
              (if g$v$7977$RyrJs
                (not (g$zero?$6494$RyrJs
                       (bitwise-and
                         g$v$7977$RyrJs
                         (g$enum-value$7898$RyrJs
                           g$enumset$7976$RyrJs))))
                '#f)))
           (g$get-value$7913$RyrJs
             g$enumset$7976$RyrJs
             g$symbol$7975$RyrJs))))))
   (g$enum-set-subset?$7923$RyrJs
     g$enum-set-subset?$8032$RyrJs
     (case-lambda
       ((g$enumset1$7978$RyrJs g$enumset2$7979$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-subset?
            g$enumset1$7978$RyrJs)
          (g$assert-enum$7914$RyrJs
            'enum-set-subset?
            g$enumset2$7979$RyrJs)
          ((case-lambda
             ((g$v1$7980$RyrJs g$v2$7981$RyrJs)
              (if (g$enum-type=?$7911$RyrJs
                    g$enumset1$7978$RyrJs
                    g$enumset2$7979$RyrJs)
                (= (bitwise-and g$v1$7980$RyrJs g$v2$7981$RyrJs)
                   g$v1$7980$RyrJs)
                ((letrec ((g$f$7982$RyrJs
                            (case-lambda
                              ((g$s$7983$RyrJs)
                               (if (null? g$s$7983$RyrJs)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$7984$RyrJs g$v2*$7985$RyrJs)
                                     (if g$v2*$7985$RyrJs
                                       ((case-lambda
                                          ((g$has1$7986$RyrJs
                                             g$has2$7987$RyrJs)
                                           (if (if g$has1$7986$RyrJs
                                                 (begin
                                                   '#f
                                                   (not g$has2$7987$RyrJs))
                                                 '#f)
                                             '#f
                                             (g$f$7982$RyrJs
                                               (cdr g$s$7983$RyrJs)))))
                                        (not (g$zero?$6494$RyrJs
                                               (bitwise-and
                                                 g$v1$7980$RyrJs
                                                 g$v1*$7984$RyrJs)))
                                        (not (g$zero?$6494$RyrJs
                                               (bitwise-and
                                                 g$v2$7981$RyrJs
                                                 g$v2*$7985$RyrJs))))
                                       '#f)))
                                  (g$get-value$7913$RyrJs
                                    g$enumset1$7978$RyrJs
                                    (car g$s$7983$RyrJs))
                                  (g$get-value$7913$RyrJs
                                    g$enumset2$7979$RyrJs
                                    (car g$s$7983$RyrJs))))))))
                   g$f$7982$RyrJs)
                 (g$get-symbols$7912$RyrJs g$enumset1$7978$RyrJs)))))
           (g$enum-value$7898$RyrJs g$enumset1$7978$RyrJs)
           (g$enum-value$7898$RyrJs g$enumset2$7979$RyrJs))))))
   (g$enum-set=?$7924$RyrJs
     g$enum-set=?$8033$RyrJs
     (case-lambda
       ((g$enumset1$7988$RyrJs g$enumset2$7989$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs 'enum-set=? g$enumset1$7988$RyrJs)
          (g$assert-enum$7914$RyrJs 'enum-set=? g$enumset2$7989$RyrJs)
          (if (g$enum-set-subset?$7923$RyrJs
                g$enumset1$7988$RyrJs
                g$enumset2$7989$RyrJs)
            (begin
              '#f
              (g$enum-set-subset?$7923$RyrJs
                g$enumset2$7989$RyrJs
                g$enumset1$7988$RyrJs))
            '#f)))))
   (g$enum-set-union$7925$RyrJs
     g$enum-set-union$8034$RyrJs
     (case-lambda
       ((g$enumset1$7990$RyrJs g$enumset2$7991$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-union
            g$enumset1$7990$RyrJs)
          (g$assert-enum$7914$RyrJs
            'enum-set-union
            g$enumset2$7991$RyrJs)
          (if (g$enum-type=?$7911$RyrJs
                g$enumset1$7990$RyrJs
                g$enumset2$7991$RyrJs)
            (g$make-enum$7897$RyrJs
              (bitwise-ior
                (g$enum-value$7898$RyrJs g$enumset1$7990$RyrJs)
                (g$enum-value$7898$RyrJs g$enumset2$7991$RyrJs))
              (g$enum-info$7899$RyrJs g$enumset1$7990$RyrJs))
            '#f)))))
   (g$enum-set-intersection$7926$RyrJs
     g$enum-set-intersection$8035$RyrJs
     (case-lambda
       ((g$enumset1$7992$RyrJs g$enumset2$7993$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-intersection
            g$enumset1$7992$RyrJs)
          (g$assert-enum$7914$RyrJs
            'enum-set-intersection
            g$enumset2$7993$RyrJs)
          (if (g$enum-type=?$7911$RyrJs
                g$enumset1$7992$RyrJs
                g$enumset2$7993$RyrJs)
            (g$make-enum$7897$RyrJs
              (bitwise-and
                (g$enum-value$7898$RyrJs g$enumset1$7992$RyrJs)
                (g$enum-value$7898$RyrJs g$enumset2$7993$RyrJs))
              (g$enum-info$7899$RyrJs g$enumset1$7992$RyrJs))
            '#f)))))
   (g$enum-set-difference$7927$RyrJs
     g$enum-set-difference$8036$RyrJs
     (case-lambda
       ((g$enumset1$7994$RyrJs g$enumset2$7995$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-difference
            g$enumset1$7994$RyrJs)
          (g$assert-enum$7914$RyrJs
            'enum-set-difference
            g$enumset2$7995$RyrJs)
          (if (g$enum-type=?$7911$RyrJs
                g$enumset1$7994$RyrJs
                g$enumset2$7995$RyrJs)
            (g$make-enum$7897$RyrJs
              (bitwise-and
                (g$enum-value$7898$RyrJs g$enumset1$7994$RyrJs)
                (bitwise-not
                  (g$enum-value$7898$RyrJs g$enumset2$7995$RyrJs)))
              (g$enum-info$7899$RyrJs g$enumset1$7994$RyrJs))
            '#f)))))
   (g$enum-set-complement$7928$RyrJs
     g$enum-set-complement$8037$RyrJs
     (case-lambda
       ((g$enumset$7996$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-complement
            g$enumset$7996$RyrJs)
          (g$make-enum$7897$RyrJs
            (bitwise-not (g$enum-value$7898$RyrJs g$enumset$7996$RyrJs))
            (g$enum-info$7899$RyrJs g$enumset$7996$RyrJs))))))
   (g$enum-set-projection$7929$RyrJs
     g$enum-set-projection$8038$RyrJs
     (case-lambda
       ((g$enumset1$7997$RyrJs g$enumset2$7998$RyrJs)
        (begin
          (g$assert-enum$7914$RyrJs
            'enum-set-projection
            g$enumset1$7997$RyrJs)
          (g$assert-enum$7914$RyrJs
            'enum-set-projection
            g$enumset2$7998$RyrJs)
          ((case-lambda
             ((g$v1$7999$RyrJs)
              ((letrec ((g$f$8000$RyrJs
                          (case-lambda
                            ((g$s$8001$RyrJs g$v$8002$RyrJs)
                             (if (null? g$s$8001$RyrJs)
                               (g$make-enum$7897$RyrJs
                                 g$v$8002$RyrJs
                                 (g$enum-info$7899$RyrJs
                                   g$enumset2$7998$RyrJs))
                               (if (g$zero?$6494$RyrJs
                                     (bitwise-and
                                       g$v1$7999$RyrJs
                                       (g$get-value$7913$RyrJs
                                         g$enumset1$7997$RyrJs
                                         (car g$s$8001$RyrJs))))
                                 (g$f$8000$RyrJs
                                   (cdr g$s$8001$RyrJs)
                                   g$v$8002$RyrJs)
                                 ((case-lambda
                                    ((g$v2$8003$RyrJs)
                                     (if g$v2$8003$RyrJs
                                       (g$f$8000$RyrJs
                                         (cdr g$s$8001$RyrJs)
                                         (bitwise-ior
                                           g$v$8002$RyrJs
                                           g$v2$8003$RyrJs))
                                       (g$f$8000$RyrJs
                                         (cdr g$s$8001$RyrJs)
                                         g$v$8002$RyrJs))))
                                  (g$get-value$7913$RyrJs
                                    g$enumset2$7998$RyrJs
                                    (car g$s$8001$RyrJs)))))))))
                 g$f$8000$RyrJs)
               (g$get-symbols$7912$RyrJs g$enumset1$7997$RyrJs)
               '0)))
           (g$enum-value$7898$RyrJs g$enumset1$7997$RyrJs)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$7930$RyrJs g$p$7931$RyrJs g$wr$7932$RyrJs)
       (g$fprintf$8063$RyrJs
         g$p$7931$RyrJs
         '"#[enum-set ~a]"
         (g$enum-set->list$7921$RyrJs g$x$7930$RyrJs))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$8039$RyrJs
     g$dofmt$8061$RyrJs
     (case-lambda
       ((g$p$8043$RyrJs g$cntl$8044$RyrJs g$args$8045$RyrJs)
        ((case-lambda
           ((g$nmax$8046$RyrJs)
            ((letrec ((g$loop$8047$RyrJs
                        (case-lambda
                          ((g$n$8048$RyrJs g$a$8049$RyrJs)
                           (if (fx<=? g$n$8048$RyrJs g$nmax$8046$RyrJs)
                             ((case-lambda
                                ((g$c$8050$RyrJs)
                                 (if (if (g$char=?$6508$RyrJs
                                           g$c$8050$RyrJs
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$8048$RyrJs
                                           g$nmax$8046$RyrJs))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$8051$RyrJs)
                                       (if (eqv? g$t$8051$RyrJs '#\a)
                                         (begin
                                           (display
                                             (car g$a$8049$RyrJs)
                                             g$p$8043$RyrJs)
                                           (g$loop$8047$RyrJs
                                             (fx+ g$n$8048$RyrJs '2)
                                             (cdr g$a$8049$RyrJs)))
                                         (if (eqv? g$t$8051$RyrJs '#\s)
                                           (begin
                                             (write
                                               (car g$a$8049$RyrJs)
                                               g$p$8043$RyrJs)
                                             (g$loop$8047$RyrJs
                                               (fx+ g$n$8048$RyrJs '2)
                                               (cdr g$a$8049$RyrJs)))
                                           (if (eqv?
                                                 g$t$8051$RyrJs
                                                 '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$8049$RyrJs)
                                                   '2)
                                                 g$p$8043$RyrJs)
                                               (g$loop$8047$RyrJs
                                                 (fx+ g$n$8048$RyrJs '2)
                                                 (cdr g$a$8049$RyrJs)))
                                             (if (eqv?
                                                   g$t$8051$RyrJs
                                                   '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$8049$RyrJs)
                                                     '8)
                                                   g$p$8043$RyrJs)
                                                 (g$loop$8047$RyrJs
                                                   (fx+ g$n$8048$RyrJs
                                                        '2)
                                                   (cdr g$a$8049$RyrJs)))
                                               (if (eqv?
                                                     g$t$8051$RyrJs
                                                     '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$8049$RyrJs)
                                                       '16)
                                                     g$p$8043$RyrJs)
                                                   (g$loop$8047$RyrJs
                                                     (fx+ g$n$8048$RyrJs
                                                          '2)
                                                     (cdr g$a$8049$RyrJs)))
                                                 (if (eqv?
                                                       g$t$8051$RyrJs
                                                       '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$8049$RyrJs)
                                                         '10)
                                                       g$p$8043$RyrJs)
                                                     (g$loop$8047$RyrJs
                                                       (fx+ g$n$8048$RyrJs
                                                            '2)
                                                       (cdr g$a$8049$RyrJs)))
                                                   (if (eqv?
                                                         g$t$8051$RyrJs
                                                         '#\~)
                                                     (begin
                                                       (g$write-char$7885$RyrJs
                                                         '#\~
                                                         g$p$8043$RyrJs)
                                                       (g$loop$8047$RyrJs
                                                         (fx+ g$n$8048$RyrJs
                                                              '2)
                                                         g$a$8049$RyrJs))
                                                     (begin
                                                       (g$write-char$7885$RyrJs
                                                         g$c$8050$RyrJs
                                                         g$p$8043$RyrJs)
                                                       (g$loop$8047$RyrJs
                                                         (fx+ g$n$8048$RyrJs
                                                              '1)
                                                         g$a$8049$RyrJs)))))))))))
                                    (string-ref
                                      g$cntl$8044$RyrJs
                                      (fx+ g$n$8048$RyrJs '1)))
                                   (begin
                                     (g$write-char$7885$RyrJs
                                       g$c$8050$RyrJs
                                       g$p$8043$RyrJs)
                                     (g$loop$8047$RyrJs
                                       (fx+ g$n$8048$RyrJs '1)
                                       g$a$8049$RyrJs)))))
                              (string-ref
                                g$cntl$8044$RyrJs
                                g$n$8048$RyrJs))
                             (void))))))
               g$loop$8047$RyrJs)
             '0
             g$args$8045$RyrJs)))
         (fx- (string-length g$cntl$8044$RyrJs) '1)))))
   (g$printf$8040$RyrJs
     g$printf$8062$RyrJs
     (case-lambda
       ((g$control$8052$RyrJs . g$args$8053$RyrJs)
        (g$dofmt$8039$RyrJs
          (current-output-port)
          g$control$8052$RyrJs
          g$args$8053$RyrJs))))
   (g$fprintf$8041$RyrJs
     g$fprintf$8063$RyrJs
     (case-lambda
       ((g$p$8054$RyrJs g$control$8055$RyrJs . g$args$8056$RyrJs)
        (g$dofmt$8039$RyrJs
          g$p$8054$RyrJs
          g$control$8055$RyrJs
          g$args$8056$RyrJs))))
   (g$format$8042$RyrJs
     g$format$8064$RyrJs
     (case-lambda
       ((g$control$8057$RyrJs . g$args$8058$RyrJs)
        (call-with-values
          g$open-string-output-port$7827$RyrJs
          (case-lambda
            ((g$p$8059$RyrJs g$c$8060$RyrJs)
             (begin
               (g$dofmt$8039$RyrJs
                 g$p$8059$RyrJs
                 g$control$8057$RyrJs
                 g$args$8058$RyrJs)
               (g$c$8060$RyrJs)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$8065$RyrJs
     g$make-traced-macro$8068$RyrJs
     (case-lambda
       ((g$name$8066$RyrJs g$x$8067$RyrJs)
        (if (g$procedure?$6458$RyrJs g$x$8067$RyrJs)
          (make-traced-procedure
            g$name$8066$RyrJs
            g$x$8067$RyrJs
            g$syntax->datum$13392$RyrJs)
          (if (g$variable-transformer?$13213$RyrJs g$x$8067$RyrJs)
            (g$make-variable-transformer$13211$RyrJs
              (make-traced-procedure
                g$name$8066$RyrJs
                (g$variable-transformer-procedure$13214$RyrJs
                  g$x$8067$RyrJs)
                g$syntax->datum$13392$RyrJs))
            g$x$8067$RyrJs))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$8069$RyrJs
     g$library-version-mismatch-warning$8226$RyrJs
     (case-lambda
       ((g$name$8198$RyrJs g$depname$8199$RyrJs g$filename$8200$RyrJs)
        (g$fprintf$8063$RyrJs
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$8198$RyrJs
          g$depname$8199$RyrJs
          g$filename$8200$RyrJs))))
   (g$file-locator-resolution-error$8070$RyrJs
     g$file-locator-resolution-error$8227$RyrJs
     (case-lambda
       ((g$libname$8201$RyrJs g$failed-list$8202$RyrJs)
        (letrec* ((g$6807$8203$RyrJs
                    (make-record-type-descriptor
                      '&library-resolution
                      g$&condition-rtd$7100$RyrJs
                      'g$6810$RyrJs
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$6809$8204$RyrJs '#f)
                  (g$6808$8205$RyrJs
                    (make-record-constructor-descriptor
                      g$6807$8203$RyrJs
                      g$&condition-rcd$7101$RyrJs
                      g$6809$8204$RyrJs))
                  (g$6806$8208$RyrJs
                    (record-predicate g$6807$8203$RyrJs))
                  (g$make-library-resolution-condition$8209$RyrJs
                    (record-constructor g$6808$8205$RyrJs))
                  (g$6804$8210$RyrJs
                    (record-accessor g$6807$8203$RyrJs '0))
                  (g$6805$8211$RyrJs
                    (record-accessor g$6807$8203$RyrJs '1))
                  (g$library-resolution-condition?$8212$RyrJs
                    (condition-predicate g$6807$8203$RyrJs))
                  (g$condition-library$8213$RyrJs
                    (condition-accessor
                      g$6807$8203$RyrJs
                      g$6804$8210$RyrJs))
                  (g$condition-files$8214$RyrJs
                    (condition-accessor
                      g$6807$8203$RyrJs
                      g$6805$8211$RyrJs)))
          (raise
            (condition
              (g$make-error$7132$RyrJs)
              (g$make-who-condition$7166$RyrJs 'expander)
              (g$make-message-condition$7106$RyrJs
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$8209$RyrJs
                g$libname$8201$RyrJs
                g$failed-list$8202$RyrJs)))))))
   (g$read-library-source-file$8071$RyrJs
     g$read-library-source-file$8228$RyrJs
     (case-lambda
       ((g$file-name$8215$RyrJs)
        (g$with-input-from-file$7886$RyrJs
          g$file-name$8215$RyrJs
          read-annotated))))
   (g$make-parameter$8072$RyrJs
     g$make-parameter$8229$RyrJs
     (case-lambda
       ((g$x$8216$RyrJs)
        (g$make-parameter$8072$RyrJs
          g$x$8216$RyrJs
          (case-lambda ((g$x$8217$RyrJs) g$x$8217$RyrJs))))
       ((g$x$8218$RyrJs g$fender$8219$RyrJs)
        (begin
          (if (not (g$procedure?$6458$RyrJs g$fender$8219$RyrJs))
            (g$assertion-error$13385$RyrJs
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(90,8) - (90,36)"))
            (void))
          ((case-lambda
             ((g$x$8220$RyrJs)
              (case-lambda
                (() g$x$8220$RyrJs)
                ((g$v$8221$RyrJs)
                 (set! g$x$8220$RyrJs
                   (g$fender$8219$RyrJs g$v$8221$RyrJs))))))
           (g$fender$8219$RyrJs g$x$8218$RyrJs))))))
   (g$file-options-constructor$8194$RyrJs
     g$file-options-constructor$8230$RyrJs
     (g$make-parameter$8072$RyrJs '#f))
   (g$file-options-spec$8195$RyrJs
     g$file-options-spec$8231$RyrJs
     (case-lambda
       ((g$x$8222$RyrJs)
        ((g$file-options-constructor$8194$RyrJs) g$x$8222$RyrJs))))
   (g$set-label-binding!$8196$RyrJs
     g$set-label-binding!$8232$RyrJs
     (case-lambda
       ((g$label$8223$RyrJs g$binding$8224$RyrJs)
        (set-symbol-value! g$label$8223$RyrJs g$binding$8224$RyrJs))))
   (g$label-binding$8197$RyrJs
     g$label-binding$8233$RyrJs
     (case-lambda
       ((g$label$8225$RyrJs)
        (if (symbol-bound? g$label$8225$RyrJs)
          (begin '#f (symbol-value g$label$8225$RyrJs))
          '#f)))))
  (void))

(library-letrec* (ironscheme pretty-print)
  ((g$genwrite:newline-str$8234$RyrJs
     g$genwrite:newline-str$8424$RyrJs
     (make-string '1 '#\newline))
   (g$generic-write$8235$RyrJs
     g$generic-write$8425$RyrJs
     (case-lambda
       ((g$obj$8239$RyrJs
          g$display?$8240$RyrJs
          g$width$8241$RyrJs
          g$output$8242$RyrJs)
        (letrec* ((g$read-macro?$8243$RyrJs
                    (case-lambda
                      ((g$l$8404$RyrJs)
                       (letrec* ((g$length1?$8405$RyrJs
                                   (case-lambda
                                     ((g$l$8409$RyrJs)
                                      (if (pair? g$l$8409$RyrJs)
                                        (begin
                                          '#f
                                          (null? (cdr g$l$8409$RyrJs)))
                                        '#f)))))
                         ((case-lambda
                            ((g$head$8406$RyrJs g$tail$8407$RyrJs)
                             ((case-lambda
                                ((g$t$8408$RyrJs)
                                 (if (g$memv$5800$RyrJs
                                       g$t$8408$RyrJs
                                       '(quote
                                          quasiquote
                                          unquote
                                          unquote-splicing
                                          syntax
                                          quasisyntax
                                          unsyntax
                                          unsyntax-splicing))
                                   (g$length1?$8405$RyrJs
                                     g$tail$8407$RyrJs)
                                   '#f)))
                              g$head$8406$RyrJs)))
                          (car g$l$8404$RyrJs)
                          (cdr g$l$8404$RyrJs))))))
                  (g$read-macro-body$8244$RyrJs
                    (case-lambda
                      ((g$l$8403$RyrJs)
                       (g$cadr$6465$RyrJs g$l$8403$RyrJs))))
                  (g$read-macro-prefix$8245$RyrJs
                    (case-lambda
                      ((g$l$8399$RyrJs)
                       ((case-lambda
                          ((g$head$8400$RyrJs g$tail$8401$RyrJs)
                           ((case-lambda
                              ((g$t$8402$RyrJs)
                               (if (eqv? g$t$8402$RyrJs 'syntax)
                                 '"#'"
                                 (if (eqv? g$t$8402$RyrJs 'quasisyntax)
                                   '"#`"
                                   (if (eqv? g$t$8402$RyrJs 'unsyntax)
                                     '"#,"
                                     (if (eqv?
                                           g$t$8402$RyrJs
                                           'unsyntax-splicing)
                                       '"#,@"
                                       (if (eqv? g$t$8402$RyrJs 'quote)
                                         '"'"
                                         (if (eqv?
                                               g$t$8402$RyrJs
                                               'quasiquote)
                                           '"`"
                                           (if (eqv?
                                                 g$t$8402$RyrJs
                                                 'unquote)
                                             '","
                                             (if (eqv?
                                                   g$t$8402$RyrJs
                                                   'unquote-splicing)
                                               '",@"
                                               (if '#f
                                                 '#f
                                                 (void))))))))))))
                            g$head$8400$RyrJs)))
                        (car g$l$8399$RyrJs)
                        (cdr g$l$8399$RyrJs)))))
                  (g$out$8246$RyrJs
                    (case-lambda
                      ((g$str$8397$RyrJs g$col$8398$RyrJs)
                       (if g$col$8398$RyrJs
                         (if (g$output$8242$RyrJs g$str$8397$RyrJs)
                           (begin
                             '#f
                             (fx+ g$col$8398$RyrJs
                                  (string-length g$str$8397$RyrJs)))
                           '#f)
                         '#f))))
                  (g$wr$8247$RyrJs
                    (case-lambda
                      ((g$obj$8380$RyrJs g$col$8381$RyrJs)
                       (letrec* ((g$wr-expr$8382$RyrJs
                                   (case-lambda
                                     ((g$expr$8395$RyrJs
                                        g$col$8396$RyrJs)
                                      (if (g$read-macro?$8243$RyrJs
                                            g$expr$8395$RyrJs)
                                        (g$wr$8247$RyrJs
                                          (g$read-macro-body$8244$RyrJs
                                            g$expr$8395$RyrJs)
                                          (g$out$8246$RyrJs
                                            (g$read-macro-prefix$8245$RyrJs
                                              g$expr$8395$RyrJs)
                                            g$col$8396$RyrJs))
                                        (g$wr-lst$8383$RyrJs
                                          g$expr$8395$RyrJs
                                          g$col$8396$RyrJs)))))
                                 (g$wr-lst$8383$RyrJs
                                   (case-lambda
                                     ((g$l$8390$RyrJs g$col$8391$RyrJs)
                                      (if (pair? g$l$8390$RyrJs)
                                        ((letrec ((g$loop$8392$RyrJs
                                                    (case-lambda
                                                      ((g$l$8393$RyrJs
                                                         g$col$8394$RyrJs)
                                                       (if (not g$col$8394$RyrJs)
                                                         g$col$8394$RyrJs
                                                         (if (pair?
                                                               g$l$8393$RyrJs)
                                                           (g$loop$8392$RyrJs
                                                             (cdr g$l$8393$RyrJs)
                                                             (g$wr$8247$RyrJs
                                                               (car g$l$8393$RyrJs)
                                                               (g$out$8246$RyrJs
                                                                 '" "
                                                                 g$col$8394$RyrJs)))
                                                           (if (null?
                                                                 g$l$8393$RyrJs)
                                                             (g$out$8246$RyrJs
                                                               '")"
                                                               g$col$8394$RyrJs)
                                                             (g$out$8246$RyrJs
                                                               '")"
                                                               (g$wr$8247$RyrJs
                                                                 g$l$8393$RyrJs
                                                                 (g$out$8246$RyrJs
                                                                   '" . "
                                                                   g$col$8394$RyrJs))))))))))
                                           g$loop$8392$RyrJs)
                                         (cdr g$l$8390$RyrJs)
                                         (if g$col$8391$RyrJs
                                           (begin
                                             '#f
                                             (g$wr$8247$RyrJs
                                               (car g$l$8390$RyrJs)
                                               (g$out$8246$RyrJs
                                                 '"("
                                                 g$col$8391$RyrJs)))
                                           '#f))
                                        (g$out$8246$RyrJs
                                          '"()"
                                          g$col$8391$RyrJs))))))
                         (if (pair? g$obj$8380$RyrJs)
                           (g$wr-expr$8382$RyrJs
                             g$obj$8380$RyrJs
                             g$col$8381$RyrJs)
                           (if (null? g$obj$8380$RyrJs)
                             (g$wr-lst$8383$RyrJs
                               g$obj$8380$RyrJs
                               g$col$8381$RyrJs)
                             (if (g$vector?$6454$RyrJs g$obj$8380$RyrJs)
                               (g$wr-lst$8383$RyrJs
                                 (vector->list g$obj$8380$RyrJs)
                                 (g$out$8246$RyrJs
                                   '"#"
                                   g$col$8381$RyrJs))
                               (if (g$boolean?$6457$RyrJs
                                     g$obj$8380$RyrJs)
                                 (g$out$8246$RyrJs
                                   (if g$obj$8380$RyrJs '"#t" '"#f")
                                   g$col$8381$RyrJs)
                                 (if (number? g$obj$8380$RyrJs)
                                   (g$out$8246$RyrJs
                                     (number->string g$obj$8380$RyrJs)
                                     g$col$8381$RyrJs)
                                   (if (g$symbol?$6456$RyrJs
                                         g$obj$8380$RyrJs)
                                     (g$out$8246$RyrJs
                                       (symbol->string g$obj$8380$RyrJs)
                                       g$col$8381$RyrJs)
                                     (if (string? g$obj$8380$RyrJs)
                                       (if g$display?$8240$RyrJs
                                         (g$out$8246$RyrJs
                                           g$obj$8380$RyrJs
                                           g$col$8381$RyrJs)
                                         ((letrec ((g$loop$8384$RyrJs
                                                     (case-lambda
                                                       ((g$i$8385$RyrJs
                                                          g$j$8386$RyrJs
                                                          g$col$8387$RyrJs)
                                                        (if (if g$col$8387$RyrJs
                                                              (begin
                                                                '#f
                                                                (fx<?
                                                                  g$j$8386$RyrJs
                                                                  (string-length
                                                                    g$obj$8380$RyrJs)))
                                                              '#f)
                                                          ((case-lambda
                                                             ((g$c$8388$RyrJs)
                                                              (if ((case-lambda
                                                                     ((g$t$8389$RyrJs)
                                                                      (if g$t$8389$RyrJs
                                                                        g$t$8389$RyrJs
                                                                        (begin
                                                                          '#f
                                                                          (g$char=?$6508$RyrJs
                                                                            g$c$8388$RyrJs
                                                                            '#\")))))
                                                                   (g$char=?$6508$RyrJs
                                                                     g$c$8388$RyrJs
                                                                     '#\\))
                                                                (g$loop$8384$RyrJs
                                                                  g$j$8386$RyrJs
                                                                  (fx+ g$j$8386$RyrJs
                                                                       '1)
                                                                  (g$out$8246$RyrJs
                                                                    '"\\"
                                                                    (g$out$8246$RyrJs
                                                                      (substring
                                                                        g$obj$8380$RyrJs
                                                                        g$i$8385$RyrJs
                                                                        g$j$8386$RyrJs)
                                                                      g$col$8387$RyrJs)))
                                                                (g$loop$8384$RyrJs
                                                                  g$i$8385$RyrJs
                                                                  (fx+ g$j$8386$RyrJs
                                                                       '1)
                                                                  g$col$8387$RyrJs))))
                                                           (string-ref
                                                             g$obj$8380$RyrJs
                                                             g$j$8386$RyrJs))
                                                          (g$out$8246$RyrJs
                                                            '"\""
                                                            (g$out$8246$RyrJs
                                                              (substring
                                                                g$obj$8380$RyrJs
                                                                g$i$8385$RyrJs
                                                                g$j$8386$RyrJs)
                                                              g$col$8387$RyrJs)))))))
                                            g$loop$8384$RyrJs)
                                          '0
                                          '0
                                          (g$out$8246$RyrJs
                                            '"\""
                                            g$col$8381$RyrJs)))
                                       (g$out$8246$RyrJs
                                         (g$format$8064$RyrJs
                                           (if g$display?$8240$RyrJs
                                             '"~a"
                                             '"~s")
                                           g$obj$8380$RyrJs)
                                         g$col$8381$RyrJs))))))))))))
                  (g$pp$8248$RyrJs
                    (case-lambda
                      ((g$obj$8249$RyrJs g$col$8250$RyrJs)
                       (letrec* ((g$spaces$8251$RyrJs
                                   (case-lambda
                                     ((g$n$8378$RyrJs g$col$8379$RyrJs)
                                      (if (fx>? g$n$8378$RyrJs '0)
                                        (if (fx>? g$n$8378$RyrJs '7)
                                          (g$spaces$8251$RyrJs
                                            (fx- g$n$8378$RyrJs '8)
                                            (g$out$8246$RyrJs
                                              '"        "
                                              g$col$8379$RyrJs))
                                          (g$out$8246$RyrJs
                                            (substring
                                              '"        "
                                              '0
                                              g$n$8378$RyrJs)
                                            g$col$8379$RyrJs))
                                        g$col$8379$RyrJs))))
                                 (g$indent$8252$RyrJs
                                   (case-lambda
                                     ((g$to$8376$RyrJs g$col$8377$RyrJs)
                                      (if g$col$8377$RyrJs
                                        (begin
                                          '#f
                                          (if (fx<?
                                                g$to$8376$RyrJs
                                                g$col$8377$RyrJs)
                                            (if (g$out$8246$RyrJs
                                                  g$genwrite:newline-str$8234$RyrJs
                                                  g$col$8377$RyrJs)
                                              (begin
                                                '#f
                                                (g$spaces$8251$RyrJs
                                                  g$to$8376$RyrJs
                                                  '0))
                                              '#f)
                                            (g$spaces$8251$RyrJs
                                              (fx- g$to$8376$RyrJs
                                                   g$col$8377$RyrJs)
                                              g$col$8377$RyrJs)))
                                        '#f))))
                                 (g$pr$8253$RyrJs
                                   (case-lambda
                                     ((g$obj$8368$RyrJs
                                        g$col$8369$RyrJs
                                        g$extra$8370$RyrJs
                                        g$pp-pair$8371$RyrJs)
                                      (if ((case-lambda
                                             ((g$t$8372$RyrJs)
                                              (if g$t$8372$RyrJs
                                                g$t$8372$RyrJs
                                                (begin
                                                  '#f
                                                  (g$vector?$6454$RyrJs
                                                    g$obj$8368$RyrJs)))))
                                           (pair? g$obj$8368$RyrJs))
                                        ((case-lambda
                                           ((g$result$8373$RyrJs
                                              g$left$8374$RyrJs)
                                            (begin
                                              (g$generic-write$8235$RyrJs
                                                g$obj$8368$RyrJs
                                                g$display?$8240$RyrJs
                                                '#f
                                                (case-lambda
                                                  ((g$str$8375$RyrJs)
                                                   (begin
                                                     (set! g$result$8373$RyrJs
                                                       (cons
                                                         g$str$8375$RyrJs
                                                         g$result$8373$RyrJs))
                                                     (set! g$left$8374$RyrJs
                                                       (fx- g$left$8374$RyrJs
                                                            (string-length
                                                              g$str$8375$RyrJs)))
                                                     (fx>?
                                                       g$left$8374$RyrJs
                                                       '0)))))
                                              (if (fx>?
                                                    g$left$8374$RyrJs
                                                    '0)
                                                (g$out$8246$RyrJs
                                                  (g$reverse-string-append$8237$RyrJs
                                                    g$result$8373$RyrJs)
                                                  g$col$8369$RyrJs)
                                                (if (pair?
                                                      g$obj$8368$RyrJs)
                                                  (g$pp-pair$8371$RyrJs
                                                    g$obj$8368$RyrJs
                                                    g$col$8369$RyrJs
                                                    g$extra$8370$RyrJs)
                                                  (g$pp-list$8256$RyrJs
                                                    (vector->list
                                                      g$obj$8368$RyrJs)
                                                    (g$out$8246$RyrJs
                                                      '"#"
                                                      g$col$8369$RyrJs)
                                                    g$extra$8370$RyrJs
                                                    g$pp-expr$8254$RyrJs))))))
                                         '()
                                         (g$min$6498$RyrJs
                                           (fx+ (fx- (fx- g$width$8241$RyrJs
                                                          g$col$8369$RyrJs)
                                                     g$extra$8370$RyrJs)
                                                '1)
                                           (g$pretty-width$8236$RyrJs)))
                                        (g$wr$8247$RyrJs
                                          g$obj$8368$RyrJs
                                          g$col$8369$RyrJs)))))
                                 (g$pp-expr$8254$RyrJs
                                   (case-lambda
                                     ((g$expr$8363$RyrJs
                                        g$col$8364$RyrJs
                                        g$extra$8365$RyrJs)
                                      (if (g$read-macro?$8243$RyrJs
                                            g$expr$8363$RyrJs)
                                        (g$pr$8253$RyrJs
                                          (g$read-macro-body$8244$RyrJs
                                            g$expr$8363$RyrJs)
                                          (g$out$8246$RyrJs
                                            (g$read-macro-prefix$8245$RyrJs
                                              g$expr$8363$RyrJs)
                                            g$col$8364$RyrJs)
                                          g$extra$8365$RyrJs
                                          g$pp-expr$8254$RyrJs)
                                        ((case-lambda
                                           ((g$head$8366$RyrJs)
                                            (if (g$symbol?$6456$RyrJs
                                                  g$head$8366$RyrJs)
                                              ((case-lambda
                                                 ((g$proc$8367$RyrJs)
                                                  (if g$proc$8367$RyrJs
                                                    (g$proc$8367$RyrJs
                                                      g$expr$8363$RyrJs
                                                      g$col$8364$RyrJs
                                                      g$extra$8365$RyrJs)
                                                    (if (fx>?
                                                          (string-length
                                                            (symbol->string
                                                              g$head$8366$RyrJs))
                                                          g$max-call-head-width$8271$RyrJs)
                                                      (g$pp-general$8258$RyrJs
                                                        g$expr$8363$RyrJs
                                                        g$col$8364$RyrJs
                                                        g$extra$8365$RyrJs
                                                        '#f
                                                        '#f
                                                        '#f
                                                        g$pp-expr$8254$RyrJs)
                                                      (g$pp-call$8255$RyrJs
                                                        g$expr$8363$RyrJs
                                                        g$col$8364$RyrJs
                                                        g$extra$8365$RyrJs
                                                        g$pp-expr$8254$RyrJs)))))
                                               (g$style$8272$RyrJs
                                                 g$head$8366$RyrJs))
                                              (g$pp-list$8256$RyrJs
                                                g$expr$8363$RyrJs
                                                g$col$8364$RyrJs
                                                g$extra$8365$RyrJs
                                                g$pp-expr$8254$RyrJs))))
                                         (car g$expr$8363$RyrJs))))))
                                 (g$pp-call$8255$RyrJs
                                   (case-lambda
                                     ((g$expr$8358$RyrJs
                                        g$col$8359$RyrJs
                                        g$extra$8360$RyrJs
                                        g$pp-item$8361$RyrJs)
                                      ((case-lambda
                                         ((g$col*$8362$RyrJs)
                                          (if g$col$8359$RyrJs
                                            (begin
                                              '#f
                                              (g$pp-down$8257$RyrJs
                                                (cdr g$expr$8358$RyrJs)
                                                g$col*$8362$RyrJs
                                                (fx+ g$col*$8362$RyrJs
                                                     '1)
                                                g$extra$8360$RyrJs
                                                g$pp-item$8361$RyrJs))
                                            '#f)))
                                       (g$wr$8247$RyrJs
                                         (car g$expr$8358$RyrJs)
                                         (g$out$8246$RyrJs
                                           '"("
                                           g$col$8359$RyrJs))))))
                                 (g$pp-list$8256$RyrJs
                                   (case-lambda
                                     ((g$l$8353$RyrJs
                                        g$col$8354$RyrJs
                                        g$extra$8355$RyrJs
                                        g$pp-item$8356$RyrJs)
                                      ((case-lambda
                                         ((g$col$8357$RyrJs)
                                          (g$pp-down$8257$RyrJs
                                            g$l$8353$RyrJs
                                            g$col$8357$RyrJs
                                            g$col$8357$RyrJs
                                            g$extra$8355$RyrJs
                                            g$pp-item$8356$RyrJs)))
                                       (g$out$8246$RyrJs
                                         '"("
                                         g$col$8354$RyrJs)))))
                                 (g$pp-down$8257$RyrJs
                                   (case-lambda
                                     ((g$l$8343$RyrJs
                                        g$col1$8344$RyrJs
                                        g$col2$8345$RyrJs
                                        g$extra$8346$RyrJs
                                        g$pp-item$8347$RyrJs)
                                      ((letrec ((g$loop$8348$RyrJs
                                                  (case-lambda
                                                    ((g$l$8349$RyrJs
                                                       g$col$8350$RyrJs)
                                                     (if g$col$8350$RyrJs
                                                       (begin
                                                         '#f
                                                         (if (pair?
                                                               g$l$8349$RyrJs)
                                                           ((case-lambda
                                                              ((g$rest$8351$RyrJs)
                                                               ((case-lambda
                                                                  ((g$extra$8352$RyrJs)
                                                                   (g$loop$8348$RyrJs
                                                                     g$rest$8351$RyrJs
                                                                     (g$pr$8253$RyrJs
                                                                       (car g$l$8349$RyrJs)
                                                                       (g$indent$8252$RyrJs
                                                                         g$col2$8345$RyrJs
                                                                         g$col$8350$RyrJs)
                                                                       g$extra$8352$RyrJs
                                                                       g$pp-item$8347$RyrJs))))
                                                                (if (null?
                                                                      g$rest$8351$RyrJs)
                                                                  (fx+ g$extra$8346$RyrJs
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$l$8349$RyrJs))
                                                           (if (null?
                                                                 g$l$8349$RyrJs)
                                                             (g$out$8246$RyrJs
                                                               '")"
                                                               g$col$8350$RyrJs)
                                                             (g$out$8246$RyrJs
                                                               '")"
                                                               (g$pr$8253$RyrJs
                                                                 g$l$8349$RyrJs
                                                                 (g$indent$8252$RyrJs
                                                                   g$col2$8345$RyrJs
                                                                   (g$out$8246$RyrJs
                                                                     '"."
                                                                     (g$indent$8252$RyrJs
                                                                       g$col2$8345$RyrJs
                                                                       g$col$8350$RyrJs)))
                                                                 (fx+ g$extra$8346$RyrJs
                                                                      '1)
                                                                 g$pp-item$8347$RyrJs)))))
                                                       '#f)))))
                                         g$loop$8348$RyrJs)
                                       g$l$8343$RyrJs
                                       g$col1$8344$RyrJs))))
                                 (g$pp-general$8258$RyrJs
                                   (case-lambda
                                     ((g$expr$8310$RyrJs
                                        g$col$8311$RyrJs
                                        g$extra$8312$RyrJs
                                        g$named?$8313$RyrJs
                                        g$pp-1$8314$RyrJs
                                        g$pp-2$8315$RyrJs
                                        g$pp-3$8316$RyrJs)
                                      (letrec* ((g$tail1$8317$RyrJs
                                                  (case-lambda
                                                    ((g$rest$8336$RyrJs
                                                       g$col1$8337$RyrJs
                                                       g$col2$8338$RyrJs
                                                       g$col3$8339$RyrJs)
                                                     (if (if g$pp-1$8314$RyrJs
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$8336$RyrJs))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$8340$RyrJs)
                                                           ((case-lambda
                                                              ((g$rest$8341$RyrJs)
                                                               ((case-lambda
                                                                  ((g$extra$8342$RyrJs)
                                                                   (g$tail2$8318$RyrJs
                                                                     g$rest$8341$RyrJs
                                                                     g$col1$8337$RyrJs
                                                                     (g$pr$8253$RyrJs
                                                                       g$val1$8340$RyrJs
                                                                       (g$indent$8252$RyrJs
                                                                         g$col3$8339$RyrJs
                                                                         g$col2$8338$RyrJs)
                                                                       g$extra$8342$RyrJs
                                                                       g$pp-1$8314$RyrJs)
                                                                     g$col3$8339$RyrJs)))
                                                                (if (null?
                                                                      g$rest$8341$RyrJs)
                                                                  (fx+ g$extra$8312$RyrJs
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$rest$8336$RyrJs))))
                                                        (car g$rest$8336$RyrJs))
                                                       (g$tail2$8318$RyrJs
                                                         g$rest$8336$RyrJs
                                                         g$col1$8337$RyrJs
                                                         g$col2$8338$RyrJs
                                                         g$col3$8339$RyrJs)))))
                                                (g$tail2$8318$RyrJs
                                                  (case-lambda
                                                    ((g$rest$8329$RyrJs
                                                       g$col1$8330$RyrJs
                                                       g$col2$8331$RyrJs
                                                       g$col3$8332$RyrJs)
                                                     (if (if g$pp-2$8315$RyrJs
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$8329$RyrJs))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$8333$RyrJs)
                                                           ((case-lambda
                                                              ((g$rest$8334$RyrJs)
                                                               ((case-lambda
                                                                  ((g$extra$8335$RyrJs)
                                                                   (g$tail3$8319$RyrJs
                                                                     g$rest$8334$RyrJs
                                                                     g$col1$8330$RyrJs
                                                                     (g$pr$8253$RyrJs
                                                                       g$val1$8333$RyrJs
                                                                       (g$indent$8252$RyrJs
                                                                         g$col3$8332$RyrJs
                                                                         g$col2$8331$RyrJs)
                                                                       g$extra$8335$RyrJs
                                                                       g$pp-2$8315$RyrJs))))
                                                                (if (null?
                                                                      g$rest$8334$RyrJs)
                                                                  (fx+ g$extra$8312$RyrJs
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$rest$8329$RyrJs))))
                                                        (car g$rest$8329$RyrJs))
                                                       (g$tail3$8319$RyrJs
                                                         g$rest$8329$RyrJs
                                                         g$col1$8330$RyrJs
                                                         g$col2$8331$RyrJs)))))
                                                (g$tail3$8319$RyrJs
                                                  (case-lambda
                                                    ((g$rest$8326$RyrJs
                                                       g$col1$8327$RyrJs
                                                       g$col2$8328$RyrJs)
                                                     (g$pp-down$8257$RyrJs
                                                       g$rest$8326$RyrJs
                                                       g$col2$8328$RyrJs
                                                       g$col1$8327$RyrJs
                                                       g$extra$8312$RyrJs
                                                       g$pp-3$8316$RyrJs)))))
                                        ((case-lambda
                                           ((g$head$8320$RyrJs)
                                            ((case-lambda
                                               ((g$rest$8321$RyrJs)
                                                ((case-lambda
                                                   ((g$col*$8322$RyrJs)
                                                    (if (if g$named?$8313$RyrJs
                                                          (begin
                                                            '#f
                                                            (pair?
                                                              g$rest$8321$RyrJs))
                                                          '#f)
                                                      ((case-lambda
                                                         ((g$name$8323$RyrJs)
                                                          ((case-lambda
                                                             ((g$rest$8324$RyrJs)
                                                              ((case-lambda
                                                                 ((g$col**$8325$RyrJs)
                                                                  (g$tail1$8317$RyrJs
                                                                    g$rest$8324$RyrJs
                                                                    (fx+ g$col$8311$RyrJs
                                                                         g$indent-general$8270$RyrJs)
                                                                    g$col**$8325$RyrJs
                                                                    (fx+ g$col**$8325$RyrJs
                                                                         '1))))
                                                               (g$wr$8247$RyrJs
                                                                 g$name$8323$RyrJs
                                                                 (g$out$8246$RyrJs
                                                                   '" "
                                                                   g$col*$8322$RyrJs)))))
                                                           (cdr g$rest$8321$RyrJs))))
                                                       (car g$rest$8321$RyrJs))
                                                      (g$tail1$8317$RyrJs
                                                        g$rest$8321$RyrJs
                                                        (fx+ g$col$8311$RyrJs
                                                             g$indent-general$8270$RyrJs)
                                                        g$col*$8322$RyrJs
                                                        (fx+ g$col*$8322$RyrJs
                                                             '1)))))
                                                 (g$wr$8247$RyrJs
                                                   g$head$8320$RyrJs
                                                   (g$out$8246$RyrJs
                                                     '"("
                                                     g$col$8311$RyrJs)))))
                                             (cdr g$expr$8310$RyrJs))))
                                         (car g$expr$8310$RyrJs))))))
                                 (g$pp-expr-list$8259$RyrJs
                                   (case-lambda
                                     ((g$l$8307$RyrJs
                                        g$col$8308$RyrJs
                                        g$extra$8309$RyrJs)
                                      (g$pp-list$8256$RyrJs
                                        g$l$8307$RyrJs
                                        g$col$8308$RyrJs
                                        g$extra$8309$RyrJs
                                        g$pp-expr$8254$RyrJs))))
                                 (g$pp-SYNTAX-CASE$8260$RyrJs
                                   (case-lambda
                                     ((g$expr$8304$RyrJs
                                        g$col$8305$RyrJs
                                        g$extra$8306$RyrJs)
                                      (g$pp-general$8258$RyrJs
                                        g$expr$8304$RyrJs
                                        g$col$8305$RyrJs
                                        g$extra$8306$RyrJs
                                        '#t
                                        g$pp-expr-list$8259$RyrJs
                                        '#f
                                        g$pp-expr$8254$RyrJs))))
                                 (g$pp-LAMBDA$8261$RyrJs
                                   (case-lambda
                                     ((g$expr$8301$RyrJs
                                        g$col$8302$RyrJs
                                        g$extra$8303$RyrJs)
                                      (g$pp-general$8258$RyrJs
                                        g$expr$8301$RyrJs
                                        g$col$8302$RyrJs
                                        g$extra$8303$RyrJs
                                        '#f
                                        g$pp-expr-list$8259$RyrJs
                                        '#f
                                        g$pp-expr$8254$RyrJs))))
                                 (g$pp-IF$8262$RyrJs
                                   (case-lambda
                                     ((g$expr$8298$RyrJs
                                        g$col$8299$RyrJs
                                        g$extra$8300$RyrJs)
                                      (g$pp-general$8258$RyrJs
                                        g$expr$8298$RyrJs
                                        g$col$8299$RyrJs
                                        g$extra$8300$RyrJs
                                        '#f
                                        g$pp-expr$8254$RyrJs
                                        '#f
                                        g$pp-expr$8254$RyrJs))))
                                 (g$pp-COND$8263$RyrJs
                                   (case-lambda
                                     ((g$expr$8295$RyrJs
                                        g$col$8296$RyrJs
                                        g$extra$8297$RyrJs)
                                      (g$pp-call$8255$RyrJs
                                        g$expr$8295$RyrJs
                                        g$col$8296$RyrJs
                                        g$extra$8297$RyrJs
                                        g$pp-expr-list$8259$RyrJs))))
                                 (g$pp-CASE$8264$RyrJs
                                   (case-lambda
                                     ((g$expr$8292$RyrJs
                                        g$col$8293$RyrJs
                                        g$extra$8294$RyrJs)
                                      (g$pp-general$8258$RyrJs
                                        g$expr$8292$RyrJs
                                        g$col$8293$RyrJs
                                        g$extra$8294$RyrJs
                                        '#f
                                        g$pp-expr$8254$RyrJs
                                        '#f
                                        g$pp-expr-list$8259$RyrJs))))
                                 (g$pp-CASE-LAMBDA$8265$RyrJs
                                   (case-lambda
                                     ((g$expr$8289$RyrJs
                                        g$col$8290$RyrJs
                                        g$extra$8291$RyrJs)
                                      (g$pp-general$8258$RyrJs
                                        g$expr$8289$RyrJs
                                        g$col$8290$RyrJs
                                        g$extra$8291$RyrJs
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr-list$8259$RyrJs))))
                                 (g$pp-AND$8266$RyrJs
                                   (case-lambda
                                     ((g$expr$8286$RyrJs
                                        g$col$8287$RyrJs
                                        g$extra$8288$RyrJs)
                                      (g$pp-call$8255$RyrJs
                                        g$expr$8286$RyrJs
                                        g$col$8287$RyrJs
                                        g$extra$8288$RyrJs
                                        g$pp-expr$8254$RyrJs))))
                                 (g$pp-LET$8267$RyrJs
                                   (case-lambda
                                     ((g$expr$8281$RyrJs
                                        g$col$8282$RyrJs
                                        g$extra$8283$RyrJs)
                                      ((case-lambda
                                         ((g$rest$8284$RyrJs)
                                          ((case-lambda
                                             ((g$named?$8285$RyrJs)
                                              (g$pp-general$8258$RyrJs
                                                g$expr$8281$RyrJs
                                                g$col$8282$RyrJs
                                                g$extra$8283$RyrJs
                                                g$named?$8285$RyrJs
                                                g$pp-expr-list$8259$RyrJs
                                                '#f
                                                g$pp-expr$8254$RyrJs)))
                                           (if (pair? g$rest$8284$RyrJs)
                                             (begin
                                               '#f
                                               (g$symbol?$6456$RyrJs
                                                 (car g$rest$8284$RyrJs)))
                                             '#f))))
                                       (cdr g$expr$8281$RyrJs)))))
                                 (g$pp-BEGIN$8268$RyrJs
                                   (case-lambda
                                     ((g$expr$8278$RyrJs
                                        g$col$8279$RyrJs
                                        g$extra$8280$RyrJs)
                                      (g$pp-general$8258$RyrJs
                                        g$expr$8278$RyrJs
                                        g$col$8279$RyrJs
                                        g$extra$8280$RyrJs
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr$8254$RyrJs))))
                                 (g$pp-DO$8269$RyrJs
                                   (case-lambda
                                     ((g$expr$8275$RyrJs
                                        g$col$8276$RyrJs
                                        g$extra$8277$RyrJs)
                                      (g$pp-general$8258$RyrJs
                                        g$expr$8275$RyrJs
                                        g$col$8276$RyrJs
                                        g$extra$8277$RyrJs
                                        '#f
                                        g$pp-expr-list$8259$RyrJs
                                        g$pp-expr-list$8259$RyrJs
                                        g$pp-expr$8254$RyrJs))))
                                 (g$indent-general$8270$RyrJs '2)
                                 (g$max-call-head-width$8271$RyrJs '3)
                                 (g$style$8272$RyrJs
                                   (case-lambda
                                     ((g$head$8273$RyrJs)
                                      ((case-lambda
                                         ((g$t$8274$RyrJs)
                                          (if (g$memv$5800$RyrJs
                                                g$t$8274$RyrJs
                                                '(lambda let*
                                                   letrec
                                                   letrec*
                                                   define
                                                   define-syntax
                                                   syntax-rules
                                                   let-syntax
                                                   letrec-syntax
                                                   with-syntax
                                                   library
                                                   library-letrec*))
                                            g$pp-LAMBDA$8261$RyrJs
                                            (if (eqv?
                                                  g$t$8274$RyrJs
                                                  'syntax-case)
                                              g$pp-SYNTAX-CASE$8260$RyrJs
                                              (if (g$memv$5800$RyrJs
                                                    g$t$8274$RyrJs
                                                    '(if set!
                                                       when
                                                       unless))
                                                g$pp-IF$8262$RyrJs
                                                (if (eqv?
                                                      g$t$8274$RyrJs
                                                      'cond)
                                                  g$pp-COND$8263$RyrJs
                                                  (if (eqv?
                                                        g$t$8274$RyrJs
                                                        'case-lambda)
                                                    g$pp-CASE-LAMBDA$8265$RyrJs
                                                    (if (eqv?
                                                          g$t$8274$RyrJs
                                                          'case)
                                                      g$pp-CASE$8264$RyrJs
                                                      (if (g$memv$5800$RyrJs
                                                            g$t$8274$RyrJs
                                                            '(and or
                                                                  import
                                                                  export))
                                                        g$pp-AND$8266$RyrJs
                                                        (if (eqv?
                                                              g$t$8274$RyrJs
                                                              'let)
                                                          g$pp-LET$8267$RyrJs
                                                          (if (eqv?
                                                                g$t$8274$RyrJs
                                                                'begin)
                                                            g$pp-BEGIN$8268$RyrJs
                                                            (if (eqv?
                                                                  g$t$8274$RyrJs
                                                                  'do)
                                                              g$pp-DO$8269$RyrJs
                                                              '#f))))))))))))
                                       g$head$8273$RyrJs)))))
                         (g$pr$8253$RyrJs
                           g$obj$8249$RyrJs
                           g$col$8250$RyrJs
                           '0
                           g$pp-expr$8254$RyrJs))))))
          (if g$width$8241$RyrJs
            (g$out$8246$RyrJs
              g$genwrite:newline-str$8234$RyrJs
              (g$pp$8248$RyrJs g$obj$8239$RyrJs '0))
            (g$wr$8247$RyrJs g$obj$8239$RyrJs '0))))))
   (g$pretty-width$8236$RyrJs
     g$pretty-width$8426$RyrJs
     (g$make-parameter$8229$RyrJs '72))
   (g$reverse-string-append$8237$RyrJs
     g$reverse-string-append$8427$RyrJs
     (case-lambda
       ((g$l$8410$RyrJs)
        (letrec* ((g$rev-string-append$8411$RyrJs
                    (case-lambda
                      ((g$l$8412$RyrJs g$i$8413$RyrJs)
                       (if (pair? g$l$8412$RyrJs)
                         ((case-lambda
                            ((g$str$8414$RyrJs)
                             ((case-lambda
                                ((g$len$8415$RyrJs)
                                 ((case-lambda
                                    ((g$result$8416$RyrJs)
                                     ((letrec ((g$loop$8417$RyrJs
                                                 (case-lambda
                                                   ((g$j$8418$RyrJs
                                                      g$k$8419$RyrJs)
                                                    (if (fx<?
                                                          g$j$8418$RyrJs
                                                          g$len$8415$RyrJs)
                                                      (begin
                                                        (string-set!
                                                          g$result$8416$RyrJs
                                                          g$k$8419$RyrJs
                                                          (string-ref
                                                            g$str$8414$RyrJs
                                                            g$j$8418$RyrJs))
                                                        (g$loop$8417$RyrJs
                                                          (fx+ g$j$8418$RyrJs
                                                               '1)
                                                          (fx+ g$k$8419$RyrJs
                                                               '1)))
                                                      g$result$8416$RyrJs)))))
                                        g$loop$8417$RyrJs)
                                      '0
                                      (fx- (fx- (string-length
                                                  g$result$8416$RyrJs)
                                                g$i$8413$RyrJs)
                                           g$len$8415$RyrJs))))
                                  (g$rev-string-append$8411$RyrJs
                                    (cdr g$l$8412$RyrJs)
                                    (fx+ g$i$8413$RyrJs
                                         g$len$8415$RyrJs)))))
                              (string-length g$str$8414$RyrJs))))
                          (car g$l$8412$RyrJs))
                         (make-string g$i$8413$RyrJs))))))
          (g$rev-string-append$8411$RyrJs g$l$8410$RyrJs '0)))))
   (g$pretty-print$8238$RyrJs
     g$pretty-print$8428$RyrJs
     (case-lambda
       ((g$obj$8420$RyrJs . g$opt$8421$RyrJs)
        ((case-lambda
           ((g$port$8422$RyrJs)
            (g$generic-write$8235$RyrJs
              g$obj$8420$RyrJs
              '#f
              (g$pretty-width$8236$RyrJs)
              (case-lambda
                ((g$s$8423$RyrJs)
                 (begin
                   (display g$s$8423$RyrJs g$port$8422$RyrJs)
                   '#t))))))
         (if (pair? g$opt$8421$RyrJs)
           (car g$opt$8421$RyrJs)
           (current-output-port)))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$8429$RyrJs
     g$cps/generate-reference$8694$RyrJs
     (case-lambda
       ((g$variable$8482$RyrJs)
        (g$cps/generate-operand$8433$RyrJs
          (g$make-reference$8459$RyrJs g$variable$8482$RyrJs)))))
   (g$cps/generate-literal$8430$RyrJs
     g$cps/generate-literal$8695$RyrJs
     (case-lambda
       ((g$datum$8483$RyrJs)
        (g$cps/generate-operand$8433$RyrJs
          (g$make-literal$8458$RyrJs g$datum$8483$RyrJs)))))
   (g$cps/generate-abstraction$8431$RyrJs
     g$cps/generate-abstraction$8696$RyrJs
     (case-lambda
       ((g$bvl$8484$RyrJs g$body-generator$8485$RyrJs)
        (g$cps/generate-operand$8433$RyrJs
          (g$make-user-abstraction$8460$RyrJs
            g$bvl$8484$RyrJs
            (case-lambda
              ((g$continuation-variable$8486$RyrJs)
               (g$body-generator$8485$RyrJs
                 (g$variable-continuator$8446$RyrJs
                   g$continuation-variable$8486$RyrJs)))))))))
   (g$cps/generate-abstractions$8432$RyrJs
     g$cps/generate-abstractions$8697$RyrJs
     (case-lambda
       ((g$bvls$8487$RyrJs g$body-generators$8488$RyrJs)
        (g$cps/generate-operand$8433$RyrJs
          (g$make-user-abstractions$8461$RyrJs
            g$bvls$8487$RyrJs
            (g$map$5807$RyrJs
              (case-lambda
                ((g$body-generator$8489$RyrJs)
                 (case-lambda
                   ((g$continuation-variable$8490$RyrJs)
                    (g$body-generator$8489$RyrJs
                      (g$variable-continuator$8446$RyrJs
                        g$continuation-variable$8490$RyrJs))))))
              g$body-generators$8488$RyrJs))))))
   (g$cps/generate-operand$8433$RyrJs
     g$cps/generate-operand$8698$RyrJs
     (case-lambda
       ((g$operand$8491$RyrJs)
        (case-lambda
          ((g$continuator$8492$RyrJs)
           (g$continue-with-operand$8449$RyrJs
             g$continuator$8492$RyrJs
             g$operand$8491$RyrJs))))))
   (g$cps/generate-conditional$8434$RyrJs
     g$cps/generate-conditional$8699$RyrJs
     (case-lambda
       ((g$condition-generator$8493$RyrJs
          g$consequent-generator$8494$RyrJs
          g$alternative-generator$8495$RyrJs)
        (case-lambda
          ((g$continuator$8496$RyrJs)
           (letrec* ((g$if-variable$8497$RyrJs
                       (case-lambda
                         ((g$continuation-variable$8499$RyrJs)
                          ((case-lambda
                             ((g$continuator*$8500$RyrJs)
                              (g$condition-generator$8493$RyrJs
                                (g$conditional-continuator$8445$RyrJs
                                  (case-lambda
                                    ((g$condition$8501$RyrJs)
                                     (g$make-conditional$8468$RyrJs
                                       g$condition$8501$RyrJs
                                       (g$consequent-generator$8494$RyrJs
                                         g$continuator*$8500$RyrJs)
                                       (g$alternative-generator$8495$RyrJs
                                         g$continuator*$8500$RyrJs))))))))
                           (g$variable-continuator$8446$RyrJs
                             g$continuation-variable$8499$RyrJs))))))
             (g$reify-continuation*$8451$RyrJs
               g$continuator$8496$RyrJs
               g$if-variable$8497$RyrJs
               (case-lambda
                 ((g$continuation-abstraction$8498$RyrJs)
                  (g$make-conditional-join$8469$RyrJs
                    g$continuation-abstraction$8498$RyrJs
                    g$if-variable$8497$RyrJs))))))))))
   (g$cps/generate-recursive-bind$8435$RyrJs
     g$cps/generate-recursive-bind$8700$RyrJs
     (case-lambda
       ((g$variables$8502$RyrJs
          g$generators$8503$RyrJs
          g$body-generator$8504$RyrJs)
        (case-lambda
          ((g$continuator$8505$RyrJs)
           (g$make-recursive-bind$8463$RyrJs
             g$variables$8502$RyrJs
             (g$map$5807$RyrJs
               (case-lambda
                 ((g$generator$8506$RyrJs)
                  (case-lambda
                    ((g$continuation-variable$8507$RyrJs)
                     (g$generator$8506$RyrJs
                       (g$variable-continuator$8446$RyrJs
                         g$continuation-variable$8507$RyrJs))))))
               g$generators$8503$RyrJs)
             (g$body-generator$8504$RyrJs
               (g$reified-continuator$8448$RyrJs
                 g$continuator$8505$RyrJs))))))))
   (g$cps/generate-recursive*-bind$8436$RyrJs
     g$cps/generate-recursive*-bind$8701$RyrJs
     (case-lambda
       ((g$variables$8508$RyrJs
          g$generators$8509$RyrJs
          g$body-generator$8510$RyrJs)
        (case-lambda
          ((g$continuator$8511$RyrJs)
           (g$make-recursive*-bind$8464$RyrJs
             g$variables$8508$RyrJs
             (g$map$5807$RyrJs
               (case-lambda
                 ((g$generator$8512$RyrJs)
                  (case-lambda
                    ((g$continuation-variable$8513$RyrJs)
                     (g$generator$8512$RyrJs
                       (g$variable-continuator$8446$RyrJs
                         g$continuation-variable$8513$RyrJs))))))
               g$generators$8509$RyrJs)
             (g$body-generator$8510$RyrJs
               (g$reified-continuator$8448$RyrJs
                 g$continuator$8511$RyrJs))))))))
   (g$cps/generate-recursive*-library-bind$8437$RyrJs
     g$cps/generate-recursive*-library-bind$8702$RyrJs
     (case-lambda
       ((g$name$8514$RyrJs
          g$variables$8515$RyrJs
          g$variables*$8516$RyrJs
          g$generators$8517$RyrJs
          g$body-generator$8518$RyrJs)
        (case-lambda
          ((g$continuator$8519$RyrJs)
           (g$make-recursive*-library-bind$8465$RyrJs
             g$name$8514$RyrJs
             g$variables$8515$RyrJs
             g$variables*$8516$RyrJs
             (g$map$5807$RyrJs
               (case-lambda
                 ((g$generator$8520$RyrJs)
                  (case-lambda
                    ((g$continuation-variable$8521$RyrJs)
                     (g$generator$8520$RyrJs
                       (g$variable-continuator$8446$RyrJs
                         g$continuation-variable$8521$RyrJs))))))
               g$generators$8517$RyrJs)
             (g$body-generator$8518$RyrJs
               (g$reified-continuator$8448$RyrJs
                 g$continuator$8519$RyrJs))))))))
   (g$cps/generate-sequence$8438$RyrJs
     g$cps/generate-sequence$8703$RyrJs
     (case-lambda
       ((g$generators$8522$RyrJs)
        (case-lambda
          ((g$continuator$8523$RyrJs)
           ((letrec ((g$recur$8524$RyrJs
                       (case-lambda
                         ((g$generators$8525$RyrJs)
                          ((car g$generators$8525$RyrJs)
                           ((case-lambda
                              ((g$generators$8526$RyrJs)
                               (if (pair? g$generators$8526$RyrJs)
                                 (g$effect-continuator$8444$RyrJs
                                   (case-lambda
                                     (()
                                      (g$recur$8524$RyrJs
                                        g$generators$8526$RyrJs))))
                                 g$continuator$8523$RyrJs)))
                            (cdr g$generators$8525$RyrJs)))))))
              g$recur$8524$RyrJs)
            g$generators$8522$RyrJs))))))
   (g$cps/generate-assignment$8439$RyrJs
     g$cps/generate-assignment$8704$RyrJs
     (case-lambda
       ((g$location$8527$RyrJs g$expression-generator$8528$RyrJs)
        (case-lambda
          ((g$continuator$8529$RyrJs)
           (g$expression-generator$8528$RyrJs
             (g$operand-continuator$8443$RyrJs
               (case-lambda
                 ((g$operand$8530$RyrJs)
                  (g$make-assignment$8471$RyrJs
                    g$location$8527$RyrJs
                    g$operand$8530$RyrJs
                    (g$continue-with-operand$8449$RyrJs
                      g$continuator$8529$RyrJs
                      '(cps-void))))))))))))
   (g$cps/generate-declaration$8440$RyrJs
     g$cps/generate-declaration$8705$RyrJs
     (case-lambda
       ((g$location$8531$RyrJs g$expression-generator$8532$RyrJs)
        (case-lambda
          ((g$continuator$8533$RyrJs)
           (g$expression-generator$8532$RyrJs
             (g$operand-continuator$8443$RyrJs
               (case-lambda
                 ((g$operand$8534$RyrJs)
                  (g$make-declaration$8472$RyrJs
                    g$location$8531$RyrJs
                    g$operand$8534$RyrJs
                    (g$continue-with-operand$8449$RyrJs
                      g$continuator$8533$RyrJs
                      '(cps-void))))))))))))
   (g$cps/generate-combination$8441$RyrJs
     g$cps/generate-combination$8706$RyrJs
     (case-lambda
       ((g$operator-generator$8535$RyrJs
          g$operand-generators$8536$RyrJs)
        (g$cps/generate-subproblems$8442$RyrJs
          (g$reverse$6463$RyrJs
            (cons
              g$operator-generator$8535$RyrJs
              g$operand-generators$8536$RyrJs))
          (case-lambda
            ((g$operands$8537$RyrJs g$continuator$8538$RyrJs)
             (g$make-combination$8466$RyrJs
               (car g$operands$8537$RyrJs)
               (g$reify-continuation$8450$RyrJs
                 g$continuator$8538$RyrJs)
               (cdr g$operands$8537$RyrJs))))))))
   (g$cps/generate-subproblems$8442$RyrJs
     g$cps/generate-subproblems$8707$RyrJs
     (case-lambda
       ((g$generators$8539$RyrJs g$combiner$8540$RyrJs)
        (case-lambda
          ((g$continuator$8541$RyrJs)
           ((letrec ((g$recur$8542$RyrJs
                       (case-lambda
                         ((g$generators$8543$RyrJs
                            g$operands$8544$RyrJs)
                          (if (pair? g$generators$8543$RyrJs)
                            ((car g$generators$8543$RyrJs)
                             ((case-lambda
                                ((g$generators$8545$RyrJs)
                                 (g$operand-continuator$8443$RyrJs
                                   (case-lambda
                                     ((g$operand$8546$RyrJs)
                                      (g$recur$8542$RyrJs
                                        g$generators$8545$RyrJs
                                        (cons
                                          g$operand$8546$RyrJs
                                          g$operands$8544$RyrJs)))))))
                              (cdr g$generators$8543$RyrJs)))
                            (g$combiner$8540$RyrJs
                              g$operands$8544$RyrJs
                              g$continuator$8541$RyrJs))))))
              g$recur$8542$RyrJs)
            g$generators$8539$RyrJs
            '()))))))
   (g$operand-continuator$8443$RyrJs
     g$operand-continuator$8708$RyrJs
     (case-lambda
       ((g$generator$8547$RyrJs)
        (case-lambda
          ((g$if-operand$8548$RyrJs
             g$if-effect$8549$RyrJs
             g$if-conditional$8550$RyrJs
             g$if-variable$8551$RyrJs
             g$if-inline$8552$RyrJs)
           (begin
             g$if-effect$8549$RyrJs
             g$if-conditional$8550$RyrJs
             g$if-variable$8551$RyrJs
             g$if-inline$8552$RyrJs
             (g$if-operand$8548$RyrJs g$generator$8547$RyrJs)))))))
   (g$effect-continuator$8444$RyrJs
     g$effect-continuator$8709$RyrJs
     (case-lambda
       ((g$generator$8553$RyrJs)
        (case-lambda
          ((g$if-operand$8554$RyrJs
             g$if-effect$8555$RyrJs
             g$if-conditional$8556$RyrJs
             g$if-variable$8557$RyrJs
             g$if-inline$8558$RyrJs)
           (begin
             g$if-operand$8554$RyrJs
             g$if-conditional$8556$RyrJs
             g$if-variable$8557$RyrJs
             g$if-inline$8558$RyrJs
             (g$if-effect$8555$RyrJs g$generator$8553$RyrJs)))))))
   (g$conditional-continuator$8445$RyrJs
     g$conditional-continuator$8710$RyrJs
     (case-lambda
       ((g$generator$8559$RyrJs)
        (case-lambda
          ((g$if-operand$8560$RyrJs
             g$if-effect$8561$RyrJs
             g$if-conditional$8562$RyrJs
             g$if-variable$8563$RyrJs
             g$if-inline$8564$RyrJs)
           (begin
             g$if-operand$8560$RyrJs
             g$if-effect$8561$RyrJs
             g$if-variable$8563$RyrJs
             g$if-inline$8564$RyrJs
             (g$if-conditional$8562$RyrJs g$generator$8559$RyrJs)))))))
   (g$variable-continuator$8446$RyrJs
     g$variable-continuator$8711$RyrJs
     (case-lambda
       ((g$variable$8565$RyrJs)
        (case-lambda
          ((g$if-operand$8566$RyrJs
             g$if-effect$8567$RyrJs
             g$if-conditional$8568$RyrJs
             g$if-variable$8569$RyrJs
             g$if-inline$8570$RyrJs)
           (begin
             g$if-operand$8566$RyrJs
             g$if-effect$8567$RyrJs
             g$if-variable$8569$RyrJs
             g$if-inline$8570$RyrJs
             (g$if-variable$8569$RyrJs g$variable$8565$RyrJs)))))))
   (g$inline-continuator$8447$RyrJs
     g$inline-continuator$8712$RyrJs
     (case-lambda
       ((g$continuation$8571$RyrJs)
        (case-lambda
          ((g$if-operand$8572$RyrJs
             g$if-effect$8573$RyrJs
             g$if-conditional$8574$RyrJs
             g$if-variable$8575$RyrJs
             g$if-inline$8576$RyrJs)
           (begin
             g$if-operand$8572$RyrJs
             g$if-effect$8573$RyrJs
             g$if-conditional$8574$RyrJs
             g$if-variable$8575$RyrJs
             (g$if-inline$8576$RyrJs g$continuation$8571$RyrJs)))))))
   (g$reified-continuator$8448$RyrJs
     g$reified-continuator$8713$RyrJs
     (case-lambda
       ((g$continuator$8577$RyrJs)
        (case-lambda
          ((g$if-operand$8578$RyrJs
             g$if-effect$8579$RyrJs
             g$if-conditional$8580$RyrJs
             g$if-variable$8581$RyrJs
             g$if-inline$8582$RyrJs)
           (begin
             g$if-operand$8578$RyrJs
             g$if-effect$8579$RyrJs
             g$if-conditional$8580$RyrJs
             (g$reify-continuation*$8451$RyrJs
               g$continuator$8577$RyrJs
               g$if-variable$8581$RyrJs
               g$if-inline$8582$RyrJs)))))))
   (g$continue-with-operand$8449$RyrJs
     g$continue-with-operand$8714$RyrJs
     (case-lambda
       ((g$continuator$8583$RyrJs g$operand$8584$RyrJs)
        (g$continuator$8583$RyrJs
          (case-lambda
            ((g$generator$8585$RyrJs)
             (g$generator$8585$RyrJs g$operand$8584$RyrJs)))
          (case-lambda
            ((g$generator$8586$RyrJs) (g$generator$8586$RyrJs)))
          (case-lambda
            ((g$generator$8587$RyrJs)
             (g$generator$8587$RyrJs
               (g$make-truth-test$8473$RyrJs g$operand$8584$RyrJs))))
          (case-lambda
            ((g$continuation-variable$8588$RyrJs)
             (g$make-return$8467$RyrJs
               (g$make-reference$8459$RyrJs
                 g$continuation-variable$8588$RyrJs)
               (list g$operand$8584$RyrJs))))
          (case-lambda
            ((g$continuation-abstraction$8589$RyrJs)
             (g$make-return$8467$RyrJs
               g$continuation-abstraction$8589$RyrJs
               (list g$operand$8584$RyrJs))))))))
   (g$reify-continuation$8450$RyrJs
     g$reify-continuation$8715$RyrJs
     (case-lambda
       ((g$continuator$8590$RyrJs)
        (g$continuator$8590$RyrJs
          g$operand-continuation-reifier$8453$RyrJs
          g$effect-continuation-reifier$8455$RyrJs
          g$conditional-continuation-reifier$8457$RyrJs
          (case-lambda
            ((g$variable$8591$RyrJs)
             (g$make-reference$8459$RyrJs g$variable$8591$RyrJs)))
          (case-lambda
            ((g$continuation$8592$RyrJs) g$continuation$8592$RyrJs))))))
   (g$reify-continuation*$8451$RyrJs
     g$reify-continuation*$8716$RyrJs
     (case-lambda
       ((g$continuator$8593$RyrJs
          g$if-variable$8594$RyrJs
          g$if-inline$8595$RyrJs)
        (g$continuator$8593$RyrJs
          (g$operand-continuation-reifier*$8452$RyrJs
            g$if-inline$8595$RyrJs)
          (g$effect-continuation-reifier*$8454$RyrJs
            g$if-inline$8595$RyrJs)
          (g$conditional-continuation-reifier*$8456$RyrJs
            g$if-inline$8595$RyrJs)
          g$if-variable$8594$RyrJs
          g$if-inline$8595$RyrJs))))
   (g$operand-continuation-reifier*$8452$RyrJs
     g$operand-continuation-reifier*$8717$RyrJs
     (case-lambda
       ((g$receiver$8596$RyrJs)
        (case-lambda
          ((g$generator$8597$RyrJs)
           (g$receiver$8596$RyrJs
             ((case-lambda
                ((g$variable$8598$RyrJs)
                 (g$make-continuation-abstraction$8462$RyrJs
                   (list g$variable$8598$RyrJs)
                   (g$generator$8597$RyrJs
                     (g$make-reference$8459$RyrJs
                       g$variable$8598$RyrJs)))))
              (g$generate-variable$8474$RyrJs 'V))))))))
   (g$operand-continuation-reifier$8453$RyrJs
     g$operand-continuation-reifier$8718$RyrJs
     (g$operand-continuation-reifier*$8452$RyrJs values))
   (g$effect-continuation-reifier*$8454$RyrJs
     g$effect-continuation-reifier*$8719$RyrJs
     (case-lambda
       ((g$receiver$8599$RyrJs)
        (case-lambda
          ((g$generator$8600$RyrJs)
           (g$receiver$8599$RyrJs
             ((case-lambda
                ((g$variable$8601$RyrJs)
                 (g$make-continuation-abstraction$8462$RyrJs
                   g$variable$8601$RyrJs
                   (g$generator$8600$RyrJs))))
              (g$generate-variable$8474$RyrJs 'IGNORE))))))))
   (g$effect-continuation-reifier$8455$RyrJs
     g$effect-continuation-reifier$8720$RyrJs
     (g$effect-continuation-reifier*$8454$RyrJs values))
   (g$conditional-continuation-reifier*$8456$RyrJs
     g$conditional-continuation-reifier*$8721$RyrJs
     (case-lambda
       ((g$receiver$8602$RyrJs)
        (case-lambda
          ((g$generator$8603$RyrJs)
           (g$receiver$8602$RyrJs
             ((case-lambda
                ((g$variable$8604$RyrJs)
                 (g$make-continuation-abstraction$8462$RyrJs
                   (list g$variable$8604$RyrJs)
                   (g$generator$8603$RyrJs
                     (g$make-truth-test$8473$RyrJs
                       (g$make-reference$8459$RyrJs
                         g$variable$8604$RyrJs))))))
              (g$generate-variable$8474$RyrJs 'T))))))))
   (g$conditional-continuation-reifier$8457$RyrJs
     g$conditional-continuation-reifier$8722$RyrJs
     (g$conditional-continuation-reifier*$8456$RyrJs values))
   (g$make-literal$8458$RyrJs
     g$make-literal$8723$RyrJs
     (case-lambda
       ((g$datum$8605$RyrJs) (list 'quote g$datum$8605$RyrJs))))
   (g$make-reference$8459$RyrJs
     g$make-reference$8724$RyrJs
     (case-lambda ((g$variable$8606$RyrJs) g$variable$8606$RyrJs)))
   (g$make-user-abstraction$8460$RyrJs
     g$make-user-abstraction$8725$RyrJs
     (case-lambda
       ((g$bvl$8607$RyrJs g$body-constructor$8608$RyrJs)
        ((case-lambda
           ((g$continuation$8609$RyrJs)
            (list
              'case-lambda
              (list
                (cons g$continuation$8609$RyrJs g$bvl$8607$RyrJs)
                (g$body-constructor$8608$RyrJs
                  g$continuation$8609$RyrJs)))))
         (g$generate-variable$8474$RyrJs 'C)))))
   (g$make-user-abstractions$8461$RyrJs
     g$make-user-abstractions$8726$RyrJs
     (case-lambda
       ((g$bvls$8610$RyrJs g$body-constructors$8611$RyrJs)
        ((case-lambda
           ((g$continuation$8612$RyrJs)
            (cons
              'case-lambda
              (g$map$5807$RyrJs
                (case-lambda
                  ((g$bvl$8613$RyrJs g$body-constructor$8614$RyrJs)
                   (list
                     (cons g$continuation$8612$RyrJs g$bvl$8613$RyrJs)
                     (g$body-constructor$8614$RyrJs
                       g$continuation$8612$RyrJs))))
                g$bvls$8610$RyrJs
                g$body-constructors$8611$RyrJs))))
         (g$generate-variable$8474$RyrJs 'C)))))
   (g$make-continuation-abstraction$8462$RyrJs
     g$make-continuation-abstraction$8727$RyrJs
     (case-lambda
       ((g$bvl$8615$RyrJs g$body$8616$RyrJs)
        (list 'case-lambda (list g$bvl$8615$RyrJs g$body$8616$RyrJs)))))
   (g$make-recursive-bind$8463$RyrJs
     g$make-recursive-bind$8728$RyrJs
     (case-lambda
       ((g$variables$8617$RyrJs
          g$constructors$8618$RyrJs
          g$body$8619$RyrJs)
        (list
          'letrec
          (g$map$5807$RyrJs
            (case-lambda
              ((g$variable$8620$RyrJs g$constructor$8621$RyrJs)
               (list
                 g$variable$8620$RyrJs
                 (list
                   (g$make-user-abstraction$8460$RyrJs
                     '()
                     g$constructor$8621$RyrJs)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$8620$RyrJs))))))
            g$variables$8617$RyrJs
            g$constructors$8618$RyrJs)
          g$body$8619$RyrJs))))
   (g$make-recursive*-bind$8464$RyrJs
     g$make-recursive*-bind$8729$RyrJs
     (case-lambda
       ((g$variables$8622$RyrJs
          g$constructors$8623$RyrJs
          g$body$8624$RyrJs)
        (list
          'letrec*
          (g$map$5807$RyrJs
            (case-lambda
              ((g$variable$8625$RyrJs g$constructor$8626$RyrJs)
               (list
                 g$variable$8625$RyrJs
                 (list
                   (g$make-user-abstraction$8460$RyrJs
                     '()
                     g$constructor$8626$RyrJs)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$8625$RyrJs))))))
            g$variables$8622$RyrJs
            g$constructors$8623$RyrJs)
          g$body$8624$RyrJs))))
   (g$make-recursive*-library-bind$8465$RyrJs
     g$make-recursive*-library-bind$8730$RyrJs
     (case-lambda
       ((g$name$8627$RyrJs
          g$variables$8628$RyrJs
          g$variables*$8629$RyrJs
          g$constructors$8630$RyrJs
          g$body$8631$RyrJs)
        (list
          'library-letrec*
          g$name$8627$RyrJs
          (g$map$5807$RyrJs
            (case-lambda
              ((g$variable$8632$RyrJs
                 g$variable*$8633$RyrJs
                 g$constructor$8634$RyrJs)
               (list
                 g$variable$8632$RyrJs
                 g$variable*$8633$RyrJs
                 (list
                   (g$make-user-abstraction$8460$RyrJs
                     '()
                     g$constructor$8634$RyrJs)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$8632$RyrJs))))))
            g$variables$8628$RyrJs
            g$variables*$8629$RyrJs
            g$constructors$8630$RyrJs)
          g$body$8631$RyrJs))))
   (g$make-combination$8466$RyrJs
     g$make-combination$8731$RyrJs
     (case-lambda
       ((g$operator$8635$RyrJs
          g$continuation$8636$RyrJs
          g$operands$8637$RyrJs)
        (cons
          g$operator$8635$RyrJs
          (cons g$continuation$8636$RyrJs g$operands$8637$RyrJs)))))
   (g$make-return$8467$RyrJs
     g$make-return$8732$RyrJs
     (case-lambda
       ((g$continuation$8638$RyrJs g$operands$8639$RyrJs)
        (cons g$continuation$8638$RyrJs g$operands$8639$RyrJs))))
   (g$make-conditional$8468$RyrJs
     g$make-conditional$8733$RyrJs
     (case-lambda
       ((g$condition$8640$RyrJs
          g$consequent$8641$RyrJs
          g$alternative$8642$RyrJs)
        (list
          'if
          g$condition$8640$RyrJs
          g$consequent$8641$RyrJs
          g$alternative$8642$RyrJs))))
   (g$make-conditional-join$8469$RyrJs
     g$make-conditional-join$8734$RyrJs
     (case-lambda
       ((g$continuation$8643$RyrJs g$constructor$8644$RyrJs)
        ((case-lambda
           ((g$variable$8645$RyrJs)
            (g$make-let$8470$RyrJs
              (list g$variable$8645$RyrJs)
              (list g$continuation$8643$RyrJs)
              (g$constructor$8644$RyrJs g$variable$8645$RyrJs))))
         (g$generate-variable$8474$RyrJs 'J)))))
   (g$make-let$8470$RyrJs
     g$make-let$8735$RyrJs
     (case-lambda
       ((g$variables$8646$RyrJs
          g$expressions$8647$RyrJs
          g$body$8648$RyrJs)
        (cons
          (list
            'case-lambda
            (list g$variables$8646$RyrJs g$body$8648$RyrJs))
          g$expressions$8647$RyrJs))))
   (g$make-assignment$8471$RyrJs
     g$make-assignment$8736$RyrJs
     (case-lambda
       ((g$location$8649$RyrJs
          g$operand$8650$RyrJs
          g$expression$8651$RyrJs)
        (list
          'begin
          (list 'set! g$location$8649$RyrJs g$operand$8650$RyrJs)
          g$expression$8651$RyrJs))))
   (g$make-declaration$8472$RyrJs
     g$make-declaration$8737$RyrJs
     (case-lambda
       ((g$location$8652$RyrJs
          g$operand$8653$RyrJs
          g$expression$8654$RyrJs)
        (list
          'begin
          (list 'define g$location$8652$RyrJs g$operand$8653$RyrJs)
          g$expression$8654$RyrJs))))
   (g$make-truth-test$8473$RyrJs
     g$make-truth-test$8738$RyrJs
     (case-lambda ((g$operand$8655$RyrJs) g$operand$8655$RyrJs)))
   (g$generate-variable$8474$RyrJs
     g$generate-variable$8739$RyrJs
     (case-lambda ((g$name$8656$RyrJs) (gensym g$name$8656$RyrJs))))
   (g$parse$8475$RyrJs
     g$parse$8740$RyrJs
     (case-lambda
       ((g$x$8657$RyrJs)
        (if (pair? g$x$8657$RyrJs)
          ((case-lambda
             ((g$t$8658$RyrJs)
              (if (eqv? g$t$8658$RyrJs 'quote)
                (g$cps/generate-literal$8430$RyrJs
                  (g$cadr$6465$RyrJs g$x$8657$RyrJs))
                (if (eqv? g$t$8658$RyrJs 'if)
                  (g$cps/generate-conditional$8434$RyrJs
                    (g$parse$8475$RyrJs
                      (g$cadr$6465$RyrJs g$x$8657$RyrJs))
                    (g$parse$8475$RyrJs
                      (g$caddr$6471$RyrJs g$x$8657$RyrJs))
                    (g$parse$8475$RyrJs
                      (g$cadddr$6483$RyrJs g$x$8657$RyrJs)))
                  (if (eqv? g$t$8658$RyrJs 'case-lambda)
                    ((case-lambda
                       ((g$d$8659$RyrJs)
                        (g$cps/generate-abstractions$8432$RyrJs
                          (g$map$5807$RyrJs car g$d$8659$RyrJs)
                          (g$map$5807$RyrJs
                            (case-lambda
                              ((g$e$8660$RyrJs)
                               (g$cps/generate-sequence$8438$RyrJs
                                 (g$map$5807$RyrJs
                                   g$parse$8475$RyrJs
                                   (cdr g$e$8660$RyrJs)))))
                            g$d$8659$RyrJs))))
                     (cdr g$x$8657$RyrJs))
                    (if (eqv? g$t$8658$RyrJs 'letrec)
                      ((case-lambda
                         ((g$bindings$8661$RyrJs g$body*$8662$RyrJs)
                          ((case-lambda
                             ((g$lhs*$8663$RyrJs g$rhs*$8664$RyrJs)
                              ((case-lambda
                                 ((g$t*$8665$RyrJs g$tmps$8666$RyrJs)
                                  ((case-lambda
                                     ((g$s*$8667$RyrJs)
                                      (g$parse$8475$RyrJs
                                        (cons
                                          (list
                                            'case-lambda
                                            (list
                                              g$lhs*$8663$RyrJs
                                              (cons
                                                (list
                                                  'case-lambda
                                                  (cons
                                                    g$t*$8665$RyrJs
                                                    (append
                                                      g$s*$8667$RyrJs
                                                      g$body*$8662$RyrJs)))
                                                g$rhs*$8664$RyrJs)))
                                          g$tmps$8666$RyrJs))))
                                   (g$map$5807$RyrJs
                                     (case-lambda
                                       ((g$i$8668$RyrJs g$t$8669$RyrJs)
                                        (list
                                          'set!
                                          g$i$8668$RyrJs
                                          g$t$8669$RyrJs)))
                                     g$lhs*$8663$RyrJs
                                     g$t*$8665$RyrJs))))
                               (g$map$5807$RyrJs
                                 gensym
                                 g$lhs*$8663$RyrJs)
                               (g$map$5807$RyrJs
                                 (case-lambda
                                   ((g$x$8670$RyrJs) 'uninitialized))
                                 g$lhs*$8663$RyrJs))))
                           (g$map$5807$RyrJs car g$bindings$8661$RyrJs)
                           (g$map$5807$RyrJs
                             g$cadr$6465$RyrJs
                             g$bindings$8661$RyrJs))))
                       (g$cadr$6465$RyrJs g$x$8657$RyrJs)
                       (g$cddr$6467$RyrJs g$x$8657$RyrJs))
                      (if (eqv? g$t$8658$RyrJs 'letrec*)
                        ((case-lambda
                           ((g$bindings$8671$RyrJs g$body*$8672$RyrJs)
                            ((case-lambda
                               ((g$lhs*$8673$RyrJs g$rhs*$8674$RyrJs)
                                (g$cps/generate-recursive*-bind$8436$RyrJs
                                  g$lhs*$8673$RyrJs
                                  (g$map$5807$RyrJs
                                    g$parse$8475$RyrJs
                                    g$rhs*$8674$RyrJs)
                                  (g$parse$8475$RyrJs
                                    (cons 'begin g$body*$8672$RyrJs)))))
                             (g$map$5807$RyrJs
                               car
                               g$bindings$8671$RyrJs)
                             (g$map$5807$RyrJs
                               g$cadr$6465$RyrJs
                               g$bindings$8671$RyrJs))))
                         (g$cadr$6465$RyrJs g$x$8657$RyrJs)
                         (g$cddr$6467$RyrJs g$x$8657$RyrJs))
                        (if (eqv? g$t$8658$RyrJs 'library-letrec*)
                          ((case-lambda
                             ((g$name$8675$RyrJs g$x$8676$RyrJs)
                              ((case-lambda
                                 ((g$bindings$8677$RyrJs
                                    g$body*$8678$RyrJs)
                                  ((case-lambda
                                     ((g$lhs*$8679$RyrJs
                                        g$lhs**$8680$RyrJs
                                        g$rhs*$8681$RyrJs)
                                      (g$cps/generate-recursive*-library-bind$8437$RyrJs
                                        g$name$8675$RyrJs
                                        g$lhs*$8679$RyrJs
                                        g$lhs**$8680$RyrJs
                                        (g$map$5807$RyrJs
                                          g$parse$8475$RyrJs
                                          g$rhs*$8681$RyrJs)
                                        (g$parse$8475$RyrJs
                                          (cons
                                            'begin
                                            g$body*$8678$RyrJs)))))
                                   (g$map$5807$RyrJs
                                     car
                                     g$bindings$8677$RyrJs)
                                   (g$map$5807$RyrJs
                                     g$cadr$6465$RyrJs
                                     g$bindings$8677$RyrJs)
                                   (g$map$5807$RyrJs
                                     g$caddr$6471$RyrJs
                                     g$bindings$8677$RyrJs))))
                               (g$cadr$6465$RyrJs g$x$8676$RyrJs)
                               (g$cddr$6467$RyrJs g$x$8676$RyrJs))))
                           (g$cadr$6465$RyrJs g$x$8657$RyrJs)
                           (cdr g$x$8657$RyrJs))
                          (if (eqv? g$t$8658$RyrJs 'begin)
                            (g$cps/generate-sequence$8438$RyrJs
                              (g$map$5807$RyrJs
                                g$parse$8475$RyrJs
                                (cdr g$x$8657$RyrJs)))
                            (if (eqv? g$t$8658$RyrJs 'set!)
                              (g$cps/generate-assignment$8439$RyrJs
                                (g$cadr$6465$RyrJs g$x$8657$RyrJs)
                                (g$parse$8475$RyrJs
                                  (g$caddr$6471$RyrJs g$x$8657$RyrJs)))
                              (if (eqv? g$t$8658$RyrJs 'define)
                                (g$cps/generate-declaration$8440$RyrJs
                                  (g$cadr$6465$RyrJs g$x$8657$RyrJs)
                                  (g$parse$8475$RyrJs
                                    (g$caddr$6471$RyrJs
                                      g$x$8657$RyrJs)))
                                (if (list? g$x$8657$RyrJs)
                                  (g$cps/generate-combination$8441$RyrJs
                                    (g$parse$8475$RyrJs
                                      (car g$x$8657$RyrJs))
                                    (g$map$5807$RyrJs
                                      g$parse$8475$RyrJs
                                      (cdr g$x$8657$RyrJs)))
                                  (error
                                    'rewrite
                                    '"invalid form ~s ~s"
                                    g$x$8657$RyrJs
                                    (list? g$x$8657$RyrJs))))))))))))))
           (car g$x$8657$RyrJs))
          (if (g$symbol?$6456$RyrJs g$x$8657$RyrJs)
            (g$cps/generate-reference$8429$RyrJs g$x$8657$RyrJs)
            (g$cps/generate-literal$8430$RyrJs g$x$8657$RyrJs))))))
   (g$starts-with?$8476$RyrJs
     g$starts-with?$8741$RyrJs
     (case-lambda
       ((g$str$8682$RyrJs g$sub$8683$RyrJs)
        (clr-call-internal
          'system.string
          'startswith
          g$str$8682$RyrJs
          g$sub$8683$RyrJs))))
   (g$ends-with?$8477$RyrJs
     g$ends-with?$8742$RyrJs
     (case-lambda
       ((g$str$8684$RyrJs g$sub$8685$RyrJs)
        (clr-call-internal
          'system.string
          'endswith
          g$str$8684$RyrJs
          g$sub$8685$RyrJs))))
   (g$clr-generator?$8478$RyrJs
     g$clr-generator?$8743$RyrJs
     (case-lambda
       ((g$o$8686$RyrJs)
        (if (g$symbol?$6456$RyrJs g$o$8686$RyrJs)
          (begin
            '#f
            ((case-lambda
               ((g$o$8687$RyrJs)
                (if (g$starts-with?$8476$RyrJs g$o$8687$RyrJs '"clr-")
                  (begin
                    '#f
                    (g$ends-with?$8477$RyrJs
                      g$o$8687$RyrJs
                      '"-internal"))
                  '#f)))
             (symbol->string g$o$8686$RyrJs)))
          '#f))))
   (g$fix-primitives$8479$RyrJs
     g$fix-primitives$8744$RyrJs
     (case-lambda
       ((g$e$8688$RyrJs)
        (if (if (pair? g$e$8688$RyrJs)
              (begin '#f (list? g$e$8688$RyrJs))
              '#f)
          ((case-lambda
             ((g$o$8689$RyrJs)
              (if (eq? g$o$8689$RyrJs 'quote)
                g$e$8688$RyrJs
                (if (begin
                      '#f
                      (g$clr-generator?$8478$RyrJs g$o$8689$RyrJs))
                  (if (pair? (cdr g$e$8688$RyrJs))
                    (list
                      (g$fix-primitives$8479$RyrJs
                        (g$cadr$6465$RyrJs g$e$8688$RyrJs))
                      (cons
                        g$o$8689$RyrJs
                        (g$map$5807$RyrJs
                          g$fix-primitives$8479$RyrJs
                          (g$cddr$6467$RyrJs g$e$8688$RyrJs))))
                    g$e$8688$RyrJs)
                  (cons
                    (g$fix-primitives$8479$RyrJs g$o$8689$RyrJs)
                    (g$map$5807$RyrJs
                      g$fix-primitives$8479$RyrJs
                      (cdr g$e$8688$RyrJs)))))))
           (car g$e$8688$RyrJs))
          g$e$8688$RyrJs))))
   (g$parse->cps$8480$RyrJs
     g$parse->cps$8745$RyrJs
     (case-lambda
       ((g$e$8690$RyrJs g$var$8691$RyrJs)
        ((g$parse$8475$RyrJs g$e$8690$RyrJs)
         (g$variable-continuator$8446$RyrJs g$var$8691$RyrJs)))))
   (g$convert->cps$8481$RyrJs
     g$convert->cps$8746$RyrJs
     (case-lambda
       ((g$e$8692$RyrJs g$var$8693$RyrJs)
        (g$fix-primitives$8479$RyrJs
          (g$parse->cps$8480$RyrJs g$e$8692$RyrJs g$var$8693$RyrJs))))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$8747$RyrJs
     g$current-primitive-locations$8792$RyrJs
     (g$make-parameter$8229$RyrJs
       (case-lambda ((g$x$8753$RyrJs) '#f))
       (case-lambda
         ((g$p$8754$RyrJs)
          (begin
            (if (not (g$procedure?$6458$RyrJs g$p$8754$RyrJs))
              (g$assertion-error$13385$RyrJs
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$8754$RyrJs)))))
   (g$mutable?$8748$RyrJs
     g$mutable?$8793$RyrJs
     (case-lambda
       ((g$x$8755$RyrJs)
        (letrec* ((g$simple?$8756$RyrJs
                    (case-lambda
                      ((g$x$8757$RyrJs)
                       ((case-lambda
                          ((g$t$8758$RyrJs)
                           (if g$t$8758$RyrJs
                             g$t$8758$RyrJs
                             ((case-lambda
                                ((g$t$8759$RyrJs)
                                 (if g$t$8759$RyrJs
                                   g$t$8759$RyrJs
                                   ((case-lambda
                                      ((g$t$8760$RyrJs)
                                       (if g$t$8760$RyrJs
                                         g$t$8760$RyrJs
                                         ((case-lambda
                                            ((g$t$8761$RyrJs)
                                             (if g$t$8761$RyrJs
                                               g$t$8761$RyrJs
                                               ((case-lambda
                                                  ((g$t$8762$RyrJs)
                                                   (if g$t$8762$RyrJs
                                                     g$t$8762$RyrJs
                                                     ((case-lambda
                                                        ((g$t$8763$RyrJs)
                                                         (if g$t$8763$RyrJs
                                                           g$t$8763$RyrJs
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$8757$RyrJs)))))
                                                      (g$bytevector?$6455$RyrJs
                                                        g$x$8757$RyrJs)))))
                                                (string?
                                                  g$x$8757$RyrJs)))))
                                          (g$boolean?$6457$RyrJs
                                            g$x$8757$RyrJs)))))
                                    (g$symbol?$6456$RyrJs
                                      g$x$8757$RyrJs)))))
                              (g$char?$6453$RyrJs g$x$8757$RyrJs)))))
                        (null? g$x$8757$RyrJs))))))
          (not (g$simple?$8756$RyrJs g$x$8755$RyrJs))))))
   (g$rewriter$8749$RyrJs
     g$rewriter$8794$RyrJs
     (case-lambda
       ((g$quote-hack?$8764$RyrJs)
        (letrec* ((g$f$8765$RyrJs
                    (case-lambda
                      ((g$x$8766$RyrJs)
                       (if (pair? g$x$8766$RyrJs)
                         ((case-lambda
                            ((g$t$8767$RyrJs)
                             (if (eqv? g$t$8767$RyrJs 'quote)
                               (if (if g$quote-hack?$8764$RyrJs
                                     (begin
                                       '#f
                                       (g$mutable?$8748$RyrJs
                                         (g$cadr$6465$RyrJs
                                           g$x$8766$RyrJs)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$8768$RyrJs)
                                     (begin
                                       (set-symbol-value!
                                         g$g$8768$RyrJs
                                         (g$cadr$6465$RyrJs
                                           g$x$8766$RyrJs))
                                       g$g$8768$RyrJs)))
                                  (gensym 'weak-temp))
                                 g$x$8766$RyrJs)
                               (if (eqv? g$t$8767$RyrJs 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (g$map$5807$RyrJs
                                     (case-lambda
                                       ((g$x$8769$RyrJs)
                                        (cons
                                          (car g$x$8769$RyrJs)
                                          (g$map$5807$RyrJs
                                            g$f$8765$RyrJs
                                            (cdr g$x$8769$RyrJs)))))
                                     (cdr g$x$8766$RyrJs)))
                                 (if (eqv? g$t$8767$RyrJs 'lambda)
                                   (g$cons*$5809$RyrJs
                                     'lambda
                                     (g$cadr$6465$RyrJs g$x$8766$RyrJs)
                                     (g$map$5807$RyrJs
                                       g$f$8765$RyrJs
                                       (g$cddr$6467$RyrJs
                                         g$x$8766$RyrJs)))
                                   (if (eqv? g$t$8767$RyrJs 'letrec)
                                     ((case-lambda
                                        ((g$bindings$8770$RyrJs
                                           g$body*$8771$RyrJs)
                                         ((case-lambda
                                            ((g$lhs*$8772$RyrJs
                                               g$rhs*$8773$RyrJs)
                                             (g$cons*$5809$RyrJs
                                               'letrec
                                               (g$map$5807$RyrJs
                                                 list
                                                 g$lhs*$8772$RyrJs
                                                 (g$map$5807$RyrJs
                                                   g$f$8765$RyrJs
                                                   g$rhs*$8773$RyrJs))
                                               (g$map$5807$RyrJs
                                                 g$f$8765$RyrJs
                                                 g$body*$8771$RyrJs))))
                                          (g$map$5807$RyrJs
                                            car
                                            g$bindings$8770$RyrJs)
                                          (g$map$5807$RyrJs
                                            g$cadr$6465$RyrJs
                                            g$bindings$8770$RyrJs))))
                                      (g$cadr$6465$RyrJs g$x$8766$RyrJs)
                                      (g$cddr$6467$RyrJs
                                        g$x$8766$RyrJs))
                                     (if (eqv? g$t$8767$RyrJs 'letrec*)
                                       ((case-lambda
                                          ((g$bindings$8774$RyrJs
                                             g$body*$8775$RyrJs)
                                           ((case-lambda
                                              ((g$lhs*$8776$RyrJs
                                                 g$rhs*$8777$RyrJs)
                                               (g$cons*$5809$RyrJs
                                                 'letrec*
                                                 (g$map$5807$RyrJs
                                                   list
                                                   g$lhs*$8776$RyrJs
                                                   (g$map$5807$RyrJs
                                                     g$f$8765$RyrJs
                                                     g$rhs*$8777$RyrJs))
                                                 (g$map$5807$RyrJs
                                                   g$f$8765$RyrJs
                                                   g$body*$8775$RyrJs))))
                                            (g$map$5807$RyrJs
                                              car
                                              g$bindings$8774$RyrJs)
                                            (g$map$5807$RyrJs
                                              g$cadr$6465$RyrJs
                                              g$bindings$8774$RyrJs))))
                                        (g$cadr$6465$RyrJs
                                          g$x$8766$RyrJs)
                                        (g$cddr$6467$RyrJs
                                          g$x$8766$RyrJs))
                                       (if (eqv?
                                             g$t$8767$RyrJs
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$8778$RyrJs
                                               g$x$8779$RyrJs)
                                             ((case-lambda
                                                ((g$bindings$8780$RyrJs
                                                   g$body*$8781$RyrJs)
                                                 ((case-lambda
                                                    ((g$lhs*$8782$RyrJs
                                                       g$lhs**$8783$RyrJs
                                                       g$rhs*$8784$RyrJs)
                                                     (g$cons*$5809$RyrJs
                                                       'library-letrec*
                                                       g$name$8778$RyrJs
                                                       (g$map$5807$RyrJs
                                                         list
                                                         g$lhs*$8782$RyrJs
                                                         g$lhs**$8783$RyrJs
                                                         (g$map$5807$RyrJs
                                                           g$f$8765$RyrJs
                                                           g$rhs*$8784$RyrJs))
                                                       (g$map$5807$RyrJs
                                                         g$f$8765$RyrJs
                                                         g$body*$8781$RyrJs))))
                                                  (g$map$5807$RyrJs
                                                    car
                                                    g$bindings$8780$RyrJs)
                                                  (g$map$5807$RyrJs
                                                    g$cadr$6465$RyrJs
                                                    g$bindings$8780$RyrJs)
                                                  (g$map$5807$RyrJs
                                                    g$caddr$6471$RyrJs
                                                    g$bindings$8780$RyrJs))))
                                              (g$cadr$6465$RyrJs
                                                g$x$8779$RyrJs)
                                              (g$cddr$6467$RyrJs
                                                g$x$8779$RyrJs))))
                                          (g$cadr$6465$RyrJs
                                            g$x$8766$RyrJs)
                                          (cdr g$x$8766$RyrJs))
                                         (if (eqv?
                                               g$t$8767$RyrJs
                                               'begin)
                                           (cons
                                             'begin
                                             (g$map$5807$RyrJs
                                               g$f$8765$RyrJs
                                               (cdr g$x$8766$RyrJs)))
                                           (if (eqv?
                                                 g$t$8767$RyrJs
                                                 'set!)
                                             (list
                                               'set!
                                               (g$cadr$6465$RyrJs
                                                 g$x$8766$RyrJs)
                                               (g$f$8765$RyrJs
                                                 (g$caddr$6471$RyrJs
                                                   g$x$8766$RyrJs)))
                                             (if (eqv?
                                                   g$t$8767$RyrJs
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$8785$RyrJs)
                                                   ((case-lambda
                                                      ((g$t$8786$RyrJs)
                                                       (if g$t$8786$RyrJs
                                                         ((case-lambda
                                                            ((g$loc$8787$RyrJs)
                                                             g$loc$8787$RyrJs))
                                                          g$t$8786$RyrJs)
                                                         g$op$8785$RyrJs)))
                                                    ((g$current-primitive-locations$8747$RyrJs)
                                                     g$op$8785$RyrJs))))
                                                (g$cadr$6465$RyrJs
                                                  g$x$8766$RyrJs))
                                               (if (eqv?
                                                     g$t$8767$RyrJs
                                                     'define)
                                                 g$x$8766$RyrJs
                                                 (if (list?
                                                       g$x$8766$RyrJs)
                                                   (g$map$5807$RyrJs
                                                     g$f$8765$RyrJs
                                                     g$x$8766$RyrJs)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$8766$RyrJs
                                                     (list?
                                                       g$x$8766$RyrJs)))))))))))))))
                          (car g$x$8766$RyrJs))
                         g$x$8766$RyrJs)))))
          g$f$8765$RyrJs))))
   (g$expanded->core$8750$RyrJs
     g$expanded->core$8795$RyrJs
     (case-lambda
       ((g$x$8788$RyrJs) ((g$rewriter$8749$RyrJs '#t) g$x$8788$RyrJs))))
   (g$compile-core-expr$8751$RyrJs
     g$compile-core-expr$8796$RyrJs
     (case-lambda
       ((g$x$8789$RyrJs) ((g$rewriter$8749$RyrJs '#f) g$x$8789$RyrJs))))
   (g$compile-core-expr-to-port$8752$RyrJs
     g$compile-core-expr-to-port$8797$RyrJs
     (case-lambda
       ((g$x$8790$RyrJs g$p$8791$RyrJs)
        (g$pretty-print$8428$RyrJs
          ((g$rewriter$8749$RyrJs '#f) g$x$8790$RyrJs)
          g$p$8791$RyrJs)))))
  (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$8798$RyrJs
     g$make-collection$9006$RyrJs
     (case-lambda
       (()
        ((case-lambda
           ((g$set$8861$RyrJs)
            (letrec* ((g$set-cons$8862$RyrJs
                        (case-lambda
                          ((g$x$8866$RyrJs g$ls$8867$RyrJs)
                           (if (g$memq$5799$RyrJs
                                 g$x$8866$RyrJs
                                 g$ls$8867$RyrJs)
                             g$ls$8867$RyrJs
                             (cons g$x$8866$RyrJs g$ls$8867$RyrJs))))))
              (case-lambda
                (() g$set$8861$RyrJs)
                ((g$x$8863$RyrJs)
                 (set! g$set$8861$RyrJs
                   (g$set-cons$8862$RyrJs
                     g$x$8863$RyrJs
                     g$set$8861$RyrJs)))
                ((g$x$8864$RyrJs g$del?$8865$RyrJs)
                 (if g$del?$8865$RyrJs
                   (set! g$set$8861$RyrJs
                     (g$remq$5814$RyrJs
                       g$x$8864$RyrJs
                       g$set$8861$RyrJs))
                   (set! g$set$8861$RyrJs
                     (g$set-cons$8862$RyrJs
                       g$x$8864$RyrJs
                       g$set$8861$RyrJs))))))))
         '()))))
   (g$current-library-collection$8799$RyrJs
     g$current-library-collection$9007$RyrJs
     (g$make-parameter$8229$RyrJs
       (g$make-collection$8798$RyrJs)
       (case-lambda
         ((g$x$8868$RyrJs)
          (begin
            (if (not (g$procedure?$6458$RyrJs g$x$8868$RyrJs))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$8868$RyrJs)
              (void))
            g$x$8868$RyrJs)))))
   (g$7341$8800$RyrJs
     g$7341$9008$RyrJs
     (make-record-type-descriptor
       'library
       '#f
       'g$7344$RyrJs
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7343$8801$RyrJs g$7343$9009$RyrJs '#f)
   (g$7342$8802$RyrJs
     g$7342$9010$RyrJs
     (make-record-constructor-descriptor
       g$7341$8800$RyrJs
       '#f
       g$7343$8801$RyrJs))
   (g$library?$8805$RyrJs
     g$library?$9011$RyrJs
     (record-predicate g$7341$8800$RyrJs))
   (g$make-library$8806$RyrJs
     g$make-library$9012$RyrJs
     (record-constructor g$7342$8802$RyrJs))
   (g$library-id$8807$RyrJs
     g$library-id$9013$RyrJs
     (record-accessor g$7341$8800$RyrJs '0))
   (g$library-name$8808$RyrJs
     g$library-name$9014$RyrJs
     (record-accessor g$7341$8800$RyrJs '1))
   (g$library-version$8809$RyrJs
     g$library-version$9015$RyrJs
     (record-accessor g$7341$8800$RyrJs '2))
   (g$library-imp*$8810$RyrJs
     g$library-imp*$9016$RyrJs
     (record-accessor g$7341$8800$RyrJs '3))
   (g$library-vis*$8811$RyrJs
     g$library-vis*$9017$RyrJs
     (record-accessor g$7341$8800$RyrJs '4))
   (g$library-inv*$8812$RyrJs
     g$library-inv*$9018$RyrJs
     (record-accessor g$7341$8800$RyrJs '5))
   (g$library-subst$8813$RyrJs
     g$library-subst$9019$RyrJs
     (record-accessor g$7341$8800$RyrJs '6))
   (g$library-env$8814$RyrJs
     g$library-env$9020$RyrJs
     (record-accessor g$7341$8800$RyrJs '7))
   (g$library-visit-state$8815$RyrJs
     g$library-visit-state$9021$RyrJs
     (record-accessor g$7341$8800$RyrJs '8))
   (g$library-invoke-state$8816$RyrJs
     g$library-invoke-state$9022$RyrJs
     (record-accessor g$7341$8800$RyrJs '9))
   (g$library-visit-code$8817$RyrJs
     g$library-visit-code$9023$RyrJs
     (record-accessor g$7341$8800$RyrJs '10))
   (g$library-invoke-code$8818$RyrJs
     g$library-invoke-code$9024$RyrJs
     (record-accessor g$7341$8800$RyrJs '11))
   (g$library-visible?$8819$RyrJs
     g$library-visible?$9025$RyrJs
     (record-accessor g$7341$8800$RyrJs '12))
   (g$library-source-file-name$8820$RyrJs
     g$library-source-file-name$9026$RyrJs
     (record-accessor g$7341$8800$RyrJs '13))
   (g$set-library-id!$8821$RyrJs
     g$set-library-id!$9027$RyrJs
     (record-mutator g$7341$8800$RyrJs '0))
   (g$set-library-name!$8822$RyrJs
     g$set-library-name!$9028$RyrJs
     (record-mutator g$7341$8800$RyrJs '1))
   (g$set-library-version!$8823$RyrJs
     g$set-library-version!$9029$RyrJs
     (record-mutator g$7341$8800$RyrJs '2))
   (g$set-library-imp*!$8824$RyrJs
     g$set-library-imp*!$9030$RyrJs
     (record-mutator g$7341$8800$RyrJs '3))
   (g$set-library-vis*!$8825$RyrJs
     g$set-library-vis*!$9031$RyrJs
     (record-mutator g$7341$8800$RyrJs '4))
   (g$set-library-inv*!$8826$RyrJs
     g$set-library-inv*!$9032$RyrJs
     (record-mutator g$7341$8800$RyrJs '5))
   (g$set-library-subst!$8827$RyrJs
     g$set-library-subst!$9033$RyrJs
     (record-mutator g$7341$8800$RyrJs '6))
   (g$set-library-env!$8828$RyrJs
     g$set-library-env!$9034$RyrJs
     (record-mutator g$7341$8800$RyrJs '7))
   (g$set-library-visit-state!$8829$RyrJs
     g$set-library-visit-state!$9035$RyrJs
     (record-mutator g$7341$8800$RyrJs '8))
   (g$set-library-invoke-state!$8830$RyrJs
     g$set-library-invoke-state!$9036$RyrJs
     (record-mutator g$7341$8800$RyrJs '9))
   (g$set-library-visit-code!$8831$RyrJs
     g$set-library-visit-code!$9037$RyrJs
     (record-mutator g$7341$8800$RyrJs '10))
   (g$set-library-invoke-code!$8832$RyrJs
     g$set-library-invoke-code!$9038$RyrJs
     (record-mutator g$7341$8800$RyrJs '11))
   (g$set-library-visible?!$8833$RyrJs
     g$set-library-visible?!$9039$RyrJs
     (record-mutator g$7341$8800$RyrJs '12))
   (g$set-library-source-file-name!$8834$RyrJs
     g$set-library-source-file-name!$9040$RyrJs
     (record-mutator g$7341$8800$RyrJs '13))
   (g$rp$8835$RyrJs
     g$rp$9041$RyrJs
     (make-record-printer
       'library
       (case-lambda
         ((g$x$8869$RyrJs g$p$8870$RyrJs g$wr$8871$RyrJs)
          (begin
            (if (not (g$library?$8805$RyrJs g$x$8869$RyrJs))
              (assertion-violation
                'record-type-printer
                '"not a library")
              (void))
            (display
              (g$format$8064$RyrJs
                '"#<library ~s>"
                (if (null?
                      (g$library-version$8809$RyrJs g$x$8869$RyrJs))
                  (g$library-name$8808$RyrJs g$x$8869$RyrJs)
                  (append
                    (g$library-name$8808$RyrJs g$x$8869$RyrJs)
                    (list
                      (g$library-version$8809$RyrJs g$x$8869$RyrJs)))))
              g$p$8870$RyrJs))))))
   (g$find-dependencies$8836$RyrJs
     g$find-dependencies$9042$RyrJs
     (case-lambda
       ((g$ls$8872$RyrJs)
        (if (null? g$ls$8872$RyrJs)
          '()
          (assertion-violation
            'find-dependencies
            '"cannot handle deps yet")))))
   (g$find-library-by$8837$RyrJs
     g$find-library-by$9043$RyrJs
     (case-lambda
       ((g$pred$8873$RyrJs)
        ((letrec ((g$f$8874$RyrJs
                    (case-lambda
                      ((g$ls$8875$RyrJs)
                       (if (null? g$ls$8875$RyrJs)
                         '#f
                         (if (g$pred$8873$RyrJs (car g$ls$8875$RyrJs))
                           (car g$ls$8875$RyrJs)
                           (g$f$8874$RyrJs (cdr g$ls$8875$RyrJs))))))))
           g$f$8874$RyrJs)
         ((g$current-library-collection$8799$RyrJs))))))
   (g$library-path$8838$RyrJs
     g$library-path$9044$RyrJs
     (g$make-parameter$8229$RyrJs
       '(".")
       (case-lambda
         ((g$x$8876$RyrJs)
          (if (if (list? g$x$8876$RyrJs)
                (begin
                  '#f
                  (g$for-all$5805$RyrJs string? g$x$8876$RyrJs))
                '#f)
            (g$map$5807$RyrJs
              (case-lambda ((g$x$8877$RyrJs) g$x$8877$RyrJs))
              g$x$8876$RyrJs)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$8876$RyrJs))))))
   (g$library-extensions$8839$RyrJs
     g$library-extensions$9045$RyrJs
     (g$make-parameter$8229$RyrJs
       '(".sls" ".ss")
       (case-lambda
         ((g$x$8878$RyrJs)
          (if (if (list? g$x$8878$RyrJs)
                (begin
                  '#f
                  (g$for-all$5805$RyrJs string? g$x$8878$RyrJs))
                '#f)
            (g$map$5807$RyrJs
              (case-lambda ((g$x$8879$RyrJs) g$x$8879$RyrJs))
              g$x$8878$RyrJs)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$8878$RyrJs))))))
   (g$library-name->file-name$8840$RyrJs
     g$library-name->file-name$9046$RyrJs
     (case-lambda
       ((g$x$8880$RyrJs)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$7827$RyrJs)))
          (case-lambda
            ((g$p$8883$RyrJs g$extract$8884$RyrJs)
             ((case-lambda
                ((g$extract$8885$RyrJs g$p$8886$RyrJs)
                 (letrec* ((g$display-hex$8887$RyrJs
                             (case-lambda
                               ((g$n$8895$RyrJs)
                                (if (<= '0 g$n$8895$RyrJs '9)
                                  (display
                                    g$n$8895$RyrJs
                                    g$p$8886$RyrJs)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$8895$RyrJs '10)))
                                    g$p$8886$RyrJs))))))
                   (begin
                     ((letrec ((g$f$8888$RyrJs
                                 (case-lambda
                                   ((g$ls$8889$RyrJs)
                                    (if (not (null? g$ls$8889$RyrJs))
                                      (begin
                                        (display '"/" g$p$8886$RyrJs)
                                        (g$for-each$5808$RyrJs
                                          (case-lambda
                                            ((g$c$8890$RyrJs)
                                             (if ((case-lambda
                                                    ((g$t$8891$RyrJs)
                                                     (if g$t$8891$RyrJs
                                                       g$t$8891$RyrJs
                                                       ((case-lambda
                                                          ((g$t$8892$RyrJs)
                                                           (if g$t$8892$RyrJs
                                                             g$t$8892$RyrJs
                                                             ((case-lambda
                                                                ((g$t$8893$RyrJs)
                                                                 (if g$t$8893$RyrJs
                                                                   g$t$8893$RyrJs
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5800$RyrJs
                                                                       g$c$8890$RyrJs
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$6511$RyrJs
                                                                '#\0
                                                                g$c$8890$RyrJs
                                                                '#\9)))))
                                                        (g$char<=?$6511$RyrJs
                                                          '#\A
                                                          g$c$8890$RyrJs
                                                          '#\Z)))))
                                                  (g$char<=?$6511$RyrJs
                                                    '#\a
                                                    g$c$8890$RyrJs
                                                    '#\z))
                                               (display
                                                 g$c$8890$RyrJs
                                                 g$p$8886$RyrJs)
                                               (begin
                                                 (display
                                                   '"%"
                                                   g$p$8886$RyrJs)
                                                 ((case-lambda
                                                    ((g$n$8894$RyrJs)
                                                     (begin
                                                       (g$display-hex$8887$RyrJs
                                                         (g$quotient$7366$RyrJs
                                                           g$n$8894$RyrJs
                                                           '16))
                                                       (g$display-hex$8887$RyrJs
                                                         (g$remainder$7367$RyrJs
                                                           g$n$8894$RyrJs
                                                           '16)))))
                                                  (char->integer
                                                    g$c$8890$RyrJs))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$8889$RyrJs))))
                                        (g$f$8888$RyrJs
                                          (cdr g$ls$8889$RyrJs)))
                                      (void))))))
                        g$f$8888$RyrJs)
                      g$x$8880$RyrJs)
                     (g$extract$8885$RyrJs)))))
              g$extract$8884$RyrJs
              g$p$8883$RyrJs)))))))
   (g$file-locator$8841$RyrJs
     g$file-locator$9047$RyrJs
     (g$make-parameter$8229$RyrJs
       (case-lambda
         ((g$x$8896$RyrJs)
          ((case-lambda
             ((g$str$8897$RyrJs)
              ((letrec ((g$f$8898$RyrJs
                          (case-lambda
                            ((g$ls$8899$RyrJs
                               g$exts$8900$RyrJs
                               g$failed-list$8901$RyrJs)
                             (if (null? g$ls$8899$RyrJs)
                               (g$file-locator-resolution-error$8227$RyrJs
                                 g$x$8896$RyrJs
                                 (g$reverse$6463$RyrJs
                                   g$failed-list$8901$RyrJs))
                               (if (null? g$exts$8900$RyrJs)
                                 (g$f$8898$RyrJs
                                   (cdr g$ls$8899$RyrJs)
                                   (g$library-extensions$8839$RyrJs)
                                   g$failed-list$8901$RyrJs)
                                 ((case-lambda
                                    ((g$name$8902$RyrJs)
                                     (if (g$file-exists?$6574$RyrJs
                                           g$name$8902$RyrJs)
                                       g$name$8902$RyrJs
                                       (g$f$8898$RyrJs
                                         g$ls$8899$RyrJs
                                         (cdr g$exts$8900$RyrJs)
                                         (cons
                                           g$name$8902$RyrJs
                                           g$failed-list$8901$RyrJs)))))
                                  (string-append
                                    (car g$ls$8899$RyrJs)
                                    g$str$8897$RyrJs
                                    (car g$exts$8900$RyrJs)))))))))
                 g$f$8898$RyrJs)
               (g$library-path$8838$RyrJs)
               (g$library-extensions$8839$RyrJs)
               '())))
           (g$library-name->file-name$8840$RyrJs g$x$8896$RyrJs))))
       (case-lambda
         ((g$f$8903$RyrJs)
          (if (g$procedure?$6458$RyrJs g$f$8903$RyrJs)
            g$f$8903$RyrJs
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$8903$RyrJs))))))
   (g$serialize-all$8842$RyrJs
     g$serialize-all$9048$RyrJs
     (case-lambda
       ((g$serialize$8904$RyrJs g$compile$8905$RyrJs)
        (letrec* ((g$library-desc$8906$RyrJs
                    (case-lambda
                      ((g$x$8908$RyrJs)
                       (list
                         (g$library-id$8807$RyrJs g$x$8908$RyrJs)
                         (g$library-name$8808$RyrJs g$x$8908$RyrJs))))))
          (g$for-each$5808$RyrJs
            (case-lambda
              ((g$x$8907$RyrJs)
               (if (g$library-source-file-name$8820$RyrJs
                     g$x$8907$RyrJs)
                 (g$serialize$8904$RyrJs
                   (g$library-source-file-name$8820$RyrJs
                     g$x$8907$RyrJs)
                   (list
                     (g$library-id$8807$RyrJs g$x$8907$RyrJs)
                     (g$library-name$8808$RyrJs g$x$8907$RyrJs)
                     (g$library-version$8809$RyrJs g$x$8907$RyrJs)
                     (g$map$5807$RyrJs
                       g$library-desc$8906$RyrJs
                       (g$library-imp*$8810$RyrJs g$x$8907$RyrJs))
                     (g$map$5807$RyrJs
                       g$library-desc$8906$RyrJs
                       (g$library-vis*$8811$RyrJs g$x$8907$RyrJs))
                     (g$map$5807$RyrJs
                       g$library-desc$8906$RyrJs
                       (g$library-inv*$8812$RyrJs g$x$8907$RyrJs))
                     (g$library-subst$8813$RyrJs g$x$8907$RyrJs)
                     (g$library-env$8814$RyrJs g$x$8907$RyrJs)
                     (g$compile$8905$RyrJs
                       (g$library-visit-code$8817$RyrJs g$x$8907$RyrJs))
                     (g$compile$8905$RyrJs
                       (g$library-invoke-code$8818$RyrJs
                         g$x$8907$RyrJs))
                     (g$library-visible?$8819$RyrJs g$x$8907$RyrJs)))
                 (void))))
            ((g$current-library-collection$8799$RyrJs)))))))
   (g$current-precompiled-library-loader$8843$RyrJs
     g$current-precompiled-library-loader$9049$RyrJs
     (g$make-parameter$8229$RyrJs
       (case-lambda ((g$filename$8909$RyrJs g$sk$8910$RyrJs) '#f))))
   (g$try-load-from-file$8844$RyrJs
     g$try-load-from-file$9050$RyrJs
     (case-lambda
       ((g$filename$8911$RyrJs)
        ((g$current-precompiled-library-loader$8843$RyrJs)
         g$filename$8911$RyrJs
         (case-lambda
           ((g$id$8912$RyrJs
              g$name$8913$RyrJs
              g$ver$8914$RyrJs
              g$imp*$8915$RyrJs
              g$vis*$8916$RyrJs
              g$inv*$8917$RyrJs
              g$exp-subst$8918$RyrJs
              g$exp-env$8919$RyrJs
              g$visit-proc$8920$RyrJs
              g$invoke-proc$8921$RyrJs
              g$visible?$8922$RyrJs)
            ((letrec ((g$f$8923$RyrJs
                        (case-lambda
                          ((g$deps$8924$RyrJs)
                           (if (null? g$deps$8924$RyrJs)
                             (begin
                               (g$install-library$8854$RyrJs
                                 g$id$8912$RyrJs
                                 g$name$8913$RyrJs
                                 g$ver$8914$RyrJs
                                 g$imp*$8915$RyrJs
                                 g$vis*$8916$RyrJs
                                 g$inv*$8917$RyrJs
                                 g$exp-subst$8918$RyrJs
                                 g$exp-env$8919$RyrJs
                                 g$visit-proc$8920$RyrJs
                                 g$invoke-proc$8921$RyrJs
                                 '#f
                                 '#f
                                 g$visible?$8922$RyrJs
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$8925$RyrJs)
                                 ((case-lambda
                                    ((g$label$8926$RyrJs
                                       g$dname$8927$RyrJs)
                                     ((case-lambda
                                        ((g$l$8928$RyrJs)
                                         (if (if (g$library?$8805$RyrJs
                                                   g$l$8928$RyrJs)
                                               (begin
                                                 '#f
                                                 (eq? g$label$8926$RyrJs
                                                      (g$library-id$8807$RyrJs
                                                        g$l$8928$RyrJs)))
                                               '#f)
                                           (g$f$8923$RyrJs
                                             (cdr g$deps$8924$RyrJs))
                                           (begin
                                             (g$library-version-mismatch-warning$8226$RyrJs
                                               g$name$8913$RyrJs
                                               g$dname$8927$RyrJs
                                               g$filename$8911$RyrJs)
                                             '#f))))
                                      (g$find-library-by-name$8849$RyrJs
                                        g$dname$8927$RyrJs))))
                                  (car g$d$8925$RyrJs)
                                  (g$cadr$6465$RyrJs g$d$8925$RyrJs))))
                              (car g$deps$8924$RyrJs)))))))
               g$f$8923$RyrJs)
             (append
               g$imp*$8915$RyrJs
               g$vis*$8916$RyrJs
               g$inv*$8917$RyrJs)))
           (g$others$8929$RyrJs '#f))))))
   (g$library-loader$8845$RyrJs
     g$library-loader$9051$RyrJs
     (g$make-parameter$8229$RyrJs
       (case-lambda
         ((g$x$8930$RyrJs)
          ((case-lambda
             ((g$file-name$8931$RyrJs)
              (if (not g$file-name$8931$RyrJs)
                (assertion-violation
                  '#f
                  '"cannot find library"
                  g$x$8930$RyrJs)
                ((case-lambda
                   ((g$t$8932$RyrJs)
                    (if g$t$8932$RyrJs
                      g$t$8932$RyrJs
                      (begin
                        '#f
                        ((g$current-library-expander$8846$RyrJs)
                         (g$read-library-source-file$8228$RyrJs
                           g$file-name$8931$RyrJs)
                         g$file-name$8931$RyrJs
                         (case-lambda
                           ((g$name$8933$RyrJs)
                            (if (not (equal?
                                       g$name$8933$RyrJs
                                       g$x$8930$RyrJs))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$7827$RyrJs)))
                                  (case-lambda
                                    ((g$p$8936$RyrJs g$e$8937$RyrJs)
                                     ((case-lambda
                                        ((g$e$8938$RyrJs g$p$8939$RyrJs)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$8939$RyrJs)
                                           (write
                                             g$x$8930$RyrJs
                                             g$p$8939$RyrJs)
                                           (display
                                             '" in file "
                                             g$p$8939$RyrJs)
                                           (display
                                             g$file-name$8931$RyrJs
                                             g$p$8939$RyrJs)
                                           (display
                                             '", found "
                                             g$p$8939$RyrJs)
                                           (write
                                             g$name$8933$RyrJs
                                             g$p$8939$RyrJs)
                                           (display
                                             '" instead"
                                             g$p$8939$RyrJs)
                                           (g$e$8938$RyrJs))))
                                      g$e$8937$RyrJs
                                      g$p$8936$RyrJs)))))
                              (void)))))))))
                 (g$try-load-from-file$8844$RyrJs
                   g$file-name$8931$RyrJs)))))
           ((g$file-locator$8841$RyrJs) g$x$8930$RyrJs))))
       (case-lambda
         ((g$f$8940$RyrJs)
          (if (g$procedure?$6458$RyrJs g$f$8940$RyrJs)
            g$f$8940$RyrJs
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$8940$RyrJs))))))
   (g$current-library-expander$8846$RyrJs
     g$current-library-expander$9052$RyrJs
     (g$make-parameter$8229$RyrJs
       (case-lambda
         ((g$x$8941$RyrJs)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$8942$RyrJs)
          (if (g$procedure?$6458$RyrJs g$f$8942$RyrJs)
            g$f$8942$RyrJs
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$8942$RyrJs))))))
   (g$external-pending-libraries$8847$RyrJs
     g$external-pending-libraries$9053$RyrJs
     (g$make-parameter$8229$RyrJs '()))
   (g$find-external-library$8848$RyrJs
     g$find-external-library$9054$RyrJs
     (case-lambda
       ((g$name$8943$RyrJs)
        (begin
          (if (g$member$5801$RyrJs
                g$name$8943$RyrJs
                (g$external-pending-libraries$8847$RyrJs))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$8943$RyrJs)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$8946$RyrJs
                g$external-pending-libraries$8947$RyrJs)
              ((case-lambda
                 ((g$swap$8948$RyrJs)
                  (dynamic-wind
                    g$swap$8948$RyrJs
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$8845$RyrJs)
                          g$name$8943$RyrJs)
                         ((case-lambda
                            ((g$t$8949$RyrJs)
                             (if g$t$8949$RyrJs
                               g$t$8949$RyrJs
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$8943$RyrJs)))))
                          (g$find-library-by$8837$RyrJs
                            (case-lambda
                              ((g$x$8950$RyrJs)
                               (equal?
                                 (g$library-name$8808$RyrJs
                                   g$x$8950$RyrJs)
                                 g$name$8943$RyrJs))))))))
                    g$swap$8948$RyrJs)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$8951$RyrJs)
                      (begin
                        (g$external-pending-libraries$8946$RyrJs
                          g$external-pending-libraries$8947$RyrJs)
                        (set! g$external-pending-libraries$8947$RyrJs
                          g$t$8951$RyrJs))))
                   (g$external-pending-libraries$8946$RyrJs)))))))
           g$external-pending-libraries$8847$RyrJs
           (cons
             g$name$8943$RyrJs
             (g$external-pending-libraries$8847$RyrJs)))))))
   (g$find-library-by-name$8849$RyrJs
     g$find-library-by-name$9055$RyrJs
     (case-lambda
       ((g$name$8952$RyrJs)
        ((case-lambda
           ((g$t$8953$RyrJs)
            (if g$t$8953$RyrJs
              g$t$8953$RyrJs
              (begin
                '#f
                (g$find-external-library$8848$RyrJs
                  g$name$8952$RyrJs)))))
         (g$find-library-by$8837$RyrJs
           (case-lambda
             ((g$x$8954$RyrJs)
              (equal?
                (g$library-name$8808$RyrJs g$x$8954$RyrJs)
                g$name$8952$RyrJs))))))))
   (g$uninstall-library$8850$RyrJs
     g$uninstall-library$9056$RyrJs
     (case-lambda
       ((g$name$8955$RyrJs g$err?$8956$RyrJs)
        (letrec* ((g$who$8957$RyrJs 'uninstall-library))
          ((case-lambda
             ((g$lib$8958$RyrJs)
              (begin
                (if (if g$err?$8956$RyrJs
                      (begin '#f (not g$lib$8958$RyrJs))
                      '#f)
                  (assertion-violation
                    g$who$8957$RyrJs
                    '"library not installed"
                    g$name$8955$RyrJs)
                  (void))
                ((g$current-library-collection$8799$RyrJs)
                 g$lib$8958$RyrJs
                 '#t)
                (g$for-each$5808$RyrJs
                  (case-lambda
                    ((g$x$8959$RyrJs)
                     ((case-lambda
                        ((g$label$8960$RyrJs g$binding$8961$RyrJs)
                         (begin
                           (remove-location g$label$8960$RyrJs)
                           (if (g$memq$5799$RyrJs
                                 (car g$binding$8961$RyrJs)
                                 '(global
                                    global-macro
                                    global-macro!
                                    global-ctv))
                             (remove-location
                               (cdr g$binding$8961$RyrJs))
                             (void)))))
                      (car g$x$8959$RyrJs)
                      (cdr g$x$8959$RyrJs))))
                  (g$library-env$8814$RyrJs g$lib$8958$RyrJs)))))
           (g$find-library-by$8837$RyrJs
             (case-lambda
               ((g$x$8962$RyrJs)
                (equal?
                  (g$library-name$8808$RyrJs g$x$8962$RyrJs)
                  g$name$8955$RyrJs)))))))
       ((g$name$8963$RyrJs)
        (g$uninstall-library$8850$RyrJs g$name$8963$RyrJs '#t))))
   (g$library-exists?$8851$RyrJs
     g$library-exists?$9057$RyrJs
     (case-lambda
       ((g$name$8964$RyrJs)
        (if (g$find-library-by$8837$RyrJs
              (case-lambda
                ((g$x$8965$RyrJs)
                 (equal?
                   (g$library-name$8808$RyrJs g$x$8965$RyrJs)
                   g$name$8964$RyrJs))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$8852$RyrJs
     g$find-library-by-spec/die$9058$RyrJs
     (case-lambda
       ((g$spec$8966$RyrJs)
        ((case-lambda
           ((g$id$8967$RyrJs)
            ((case-lambda
               ((g$t$8968$RyrJs)
                (if g$t$8968$RyrJs
                  g$t$8968$RyrJs
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$8966$RyrJs)))))
             (g$find-library-by$8837$RyrJs
               (case-lambda
                 ((g$x$8969$RyrJs)
                  (eq? g$id$8967$RyrJs
                       (g$library-id$8807$RyrJs g$x$8969$RyrJs))))))))
         (car g$spec$8966$RyrJs)))))
   (g$install-library-record$8853$RyrJs
     g$install-library-record$9059$RyrJs
     (case-lambda
       ((g$lib$8970$RyrJs)
        (begin
          ((case-lambda
             ((g$exp-env$8971$RyrJs)
              (g$for-each$5808$RyrJs
                (case-lambda
                  ((g$x$8972$RyrJs)
                   ((case-lambda
                      ((g$label$8973$RyrJs g$binding$8974$RyrJs)
                       ((case-lambda
                          ((g$binding$8975$RyrJs)
                           (g$set-label-binding!$8232$RyrJs
                             g$label$8973$RyrJs
                             g$binding$8975$RyrJs)))
                        ((case-lambda
                           ((g$t$8976$RyrJs)
                            (if (eqv? g$t$8976$RyrJs 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$8970$RyrJs
                                  (cdr g$binding$8974$RyrJs)))
                              (if (eqv? g$t$8976$RyrJs 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$8970$RyrJs
                                    (cdr g$binding$8974$RyrJs)))
                                (if (eqv? g$t$8976$RyrJs 'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$8970$RyrJs
                                      (cdr g$binding$8974$RyrJs)))
                                  (if (eqv? g$t$8976$RyrJs 'global-ctv)
                                    (cons
                                      'global-ctv
                                      (cons
                                        g$lib$8970$RyrJs
                                        (cdr g$binding$8974$RyrJs)))
                                    g$binding$8974$RyrJs))))))
                         (car g$binding$8974$RyrJs)))))
                    (car g$x$8972$RyrJs)
                    (cdr g$x$8972$RyrJs))))
                g$exp-env$8971$RyrJs)))
           (g$library-env$8814$RyrJs g$lib$8970$RyrJs))
          ((g$current-library-collection$8799$RyrJs)
           g$lib$8970$RyrJs)))))
   (g$install-library$8854$RyrJs
     g$install-library$9060$RyrJs
     (case-lambda
       ((g$id$8977$RyrJs
          g$name$8978$RyrJs
          g$ver$8979$RyrJs
          g$imp*$8980$RyrJs
          g$vis*$8981$RyrJs
          g$inv*$8982$RyrJs
          g$exp-subst$8983$RyrJs
          g$exp-env$8984$RyrJs
          g$visit-proc$8985$RyrJs
          g$invoke-proc$8986$RyrJs
          g$visit-code$8987$RyrJs
          g$invoke-code$8988$RyrJs
          g$visible?$8989$RyrJs
          g$source-file-name$8990$RyrJs)
        ((case-lambda
           ((g$imp-lib*$8991$RyrJs
              g$vis-lib*$8992$RyrJs
              g$inv-lib*$8993$RyrJs)
            (begin
              (if (not (if (g$symbol?$6456$RyrJs g$id$8977$RyrJs)
                         (if (list? g$name$8978$RyrJs)
                           (begin '#f (list? g$ver$8979$RyrJs))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$8977$RyrJs
                  g$name$8978$RyrJs
                  g$ver$8979$RyrJs)
                (void))
              (if (g$library-exists?$8851$RyrJs g$name$8978$RyrJs)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$8978$RyrJs)
                (void))
              ((case-lambda
                 ((g$lib$8994$RyrJs)
                  (g$install-library-record$8853$RyrJs
                    g$lib$8994$RyrJs)))
               (g$make-library$8806$RyrJs
                 g$id$8977$RyrJs
                 g$name$8978$RyrJs
                 g$ver$8979$RyrJs
                 g$imp-lib*$8991$RyrJs
                 g$vis-lib*$8992$RyrJs
                 g$inv-lib*$8993$RyrJs
                 g$exp-subst$8983$RyrJs
                 g$exp-env$8984$RyrJs
                 g$visit-proc$8985$RyrJs
                 g$invoke-proc$8986$RyrJs
                 g$visit-code$8987$RyrJs
                 g$invoke-code$8988$RyrJs
                 g$visible?$8989$RyrJs
                 g$source-file-name$8990$RyrJs)))))
         (g$map$5807$RyrJs
           g$find-library-by-spec/die$8852$RyrJs
           g$imp*$8980$RyrJs)
         (g$map$5807$RyrJs
           g$find-library-by-spec/die$8852$RyrJs
           g$vis*$8981$RyrJs)
         (g$map$5807$RyrJs
           g$find-library-by-spec/die$8852$RyrJs
           g$inv*$8982$RyrJs)))))
   (g$imported-label->binding$8855$RyrJs
     g$imported-label->binding$9061$RyrJs
     (case-lambda
       ((g$lab$8995$RyrJs)
        (g$label-binding$8233$RyrJs g$lab$8995$RyrJs))))
   (g$invoke-library$8856$RyrJs
     g$invoke-library$9062$RyrJs
     (case-lambda
       ((g$lib$8996$RyrJs)
        ((case-lambda
           ((g$invoke$8997$RyrJs)
            (if (g$procedure?$6458$RyrJs g$invoke$8997$RyrJs)
              (begin
                (g$set-library-invoke-state!$8830$RyrJs
                  g$lib$8996$RyrJs
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$8996$RyrJs))))
                (g$for-each$5808$RyrJs
                  g$invoke-library$8856$RyrJs
                  (g$library-inv*$8812$RyrJs g$lib$8996$RyrJs))
                (g$set-library-invoke-state!$8830$RyrJs
                  g$lib$8996$RyrJs
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$8996$RyrJs))))
                (g$invoke$8997$RyrJs)
                (g$set-library-invoke-state!$8830$RyrJs
                  g$lib$8996$RyrJs
                  '#t))
              (void))))
         (g$library-invoke-state$8816$RyrJs g$lib$8996$RyrJs)))))
   (g$visit-library$8857$RyrJs
     g$visit-library$9063$RyrJs
     (case-lambda
       ((g$lib$8998$RyrJs)
        ((case-lambda
           ((g$visit$8999$RyrJs)
            (if (g$procedure?$6458$RyrJs g$visit$8999$RyrJs)
              (begin
                (g$set-library-visit-state!$8829$RyrJs
                  g$lib$8998$RyrJs
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$8998$RyrJs))))
                (g$for-each$5808$RyrJs
                  g$invoke-library$8856$RyrJs
                  (g$library-vis*$8811$RyrJs g$lib$8998$RyrJs))
                (g$set-library-visit-state!$8829$RyrJs
                  g$lib$8998$RyrJs
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$8998$RyrJs))))
                (g$visit$8999$RyrJs)
                (g$set-library-visit-state!$8829$RyrJs
                  g$lib$8998$RyrJs
                  '#t))
              (void))))
         (g$library-visit-state$8815$RyrJs g$lib$8998$RyrJs)))))
   (g$invoke-library-by-spec$8858$RyrJs
     g$invoke-library-by-spec$9064$RyrJs
     (case-lambda
       ((g$spec$9000$RyrJs)
        (g$invoke-library$8856$RyrJs
          (g$find-library-by-spec/die$8852$RyrJs g$spec$9000$RyrJs)))))
   (g$installed-libraries$8859$RyrJs
     g$installed-libraries$9065$RyrJs
     (case-lambda
       ((g$all?$9001$RyrJs)
        ((letrec ((g$f$9002$RyrJs
                    (case-lambda
                      ((g$ls$9003$RyrJs)
                       (if (null? g$ls$9003$RyrJs)
                         '()
                         (if ((case-lambda
                                ((g$t$9004$RyrJs)
                                 (if g$t$9004$RyrJs
                                   g$t$9004$RyrJs
                                   (begin
                                     '#f
                                     (g$library-visible?$8819$RyrJs
                                       (car g$ls$9003$RyrJs))))))
                              g$all?$9001$RyrJs)
                           (cons
                             (g$library-name$8808$RyrJs
                               (car g$ls$9003$RyrJs))
                             (g$f$9002$RyrJs (cdr g$ls$9003$RyrJs)))
                           (g$f$9002$RyrJs (cdr g$ls$9003$RyrJs))))))))
           g$f$9002$RyrJs)
         ((g$current-library-collection$8799$RyrJs))))
       (() (g$installed-libraries$8859$RyrJs '#f))))
   (g$library-spec$8860$RyrJs
     g$library-spec$9066$RyrJs
     (case-lambda
       ((g$x$9005$RyrJs)
        (begin
          (if (not (g$library?$8805$RyrJs g$x$9005$RyrJs))
            (assertion-violation
              'library-spec
              '"not a library"
              g$x$9005$RyrJs)
            (void))
          (list
            (g$library-id$8807$RyrJs g$x$9005$RyrJs)
            (g$library-name$8808$RyrJs g$x$9005$RyrJs)
            (g$library-version$8809$RyrJs g$x$9005$RyrJs)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$9067$RyrJs
     g$build-global-define$9244$RyrJs
     (case-lambda ((g$x$9215$RyrJs) (g$build-void$9211$RyrJs))))
   (g$build-lambda$9157$RyrJs
     g$build-lambda$9245$RyrJs
     (case-lambda
       ((g$ae$9216$RyrJs g$vars$9217$RyrJs g$exp$9218$RyrJs)
        (list 'case-lambda (list g$vars$9217$RyrJs g$exp$9218$RyrJs)))))
   (g$build-case-lambda$9158$RyrJs
     g$build-case-lambda$9246$RyrJs
     (case-lambda
       ((g$ae$9219$RyrJs g$vars*$9220$RyrJs g$exp*$9221$RyrJs)
        (cons
          'case-lambda
          (g$map$5807$RyrJs
            list
            g$vars*$9220$RyrJs
            g$exp*$9221$RyrJs)))))
   (g$build-let$9159$RyrJs
     g$build-let$9247$RyrJs
     (case-lambda
       ((g$ae$9222$RyrJs
          g$lhs*$9223$RyrJs
          g$rhs*$9224$RyrJs
          g$body$9225$RyrJs)
        (cons
          (g$build-lambda$9157$RyrJs
            g$ae$9222$RyrJs
            g$lhs*$9223$RyrJs
            g$body$9225$RyrJs)
          g$rhs*$9224$RyrJs))))
   (g$build-sequence$9210$RyrJs
     g$build-sequence$9248$RyrJs
     (case-lambda
       ((g$ae$9226$RyrJs g$exps$9227$RyrJs)
        ((letrec ((g$loop$9228$RyrJs
                    (case-lambda
                      ((g$exps$9229$RyrJs)
                       (if (null? (cdr g$exps$9229$RyrJs))
                         (car g$exps$9229$RyrJs)
                         (if (equal?
                               (car g$exps$9229$RyrJs)
                               (g$build-void$9211$RyrJs))
                           (g$loop$9228$RyrJs (cdr g$exps$9229$RyrJs))
                           (cons 'begin g$exps$9229$RyrJs)))))))
           g$loop$9228$RyrJs)
         g$exps$9227$RyrJs))))
   (g$build-void$9211$RyrJs
     g$build-void$9249$RyrJs
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$9212$RyrJs
     g$build-letrec$9250$RyrJs
     (case-lambda
       ((g$ae$9230$RyrJs
          g$vars$9231$RyrJs
          g$val-exps$9232$RyrJs
          g$body-exp$9233$RyrJs)
        (if (null? g$vars$9231$RyrJs)
          g$body-exp$9233$RyrJs
          (list
            'letrec
            (g$map$5807$RyrJs
              list
              g$vars$9231$RyrJs
              g$val-exps$9232$RyrJs)
            g$body-exp$9233$RyrJs)))))
   (g$build-letrec*$9213$RyrJs
     g$build-letrec*$9251$RyrJs
     (case-lambda
       ((g$ae$9234$RyrJs
          g$vars$9235$RyrJs
          g$val-exps$9236$RyrJs
          g$body-exp$9237$RyrJs)
        (if (null? g$vars$9235$RyrJs)
          g$body-exp$9237$RyrJs
          (list
            'letrec*
            (g$map$5807$RyrJs
              list
              g$vars$9235$RyrJs
              g$val-exps$9236$RyrJs)
            g$body-exp$9237$RyrJs)))))
   (g$build-library-letrec*$9214$RyrJs
     g$build-library-letrec*$9252$RyrJs
     (case-lambda
       ((g$ae$9238$RyrJs
          g$name$9239$RyrJs
          g$vars$9240$RyrJs
          g$locs$9241$RyrJs
          g$val-exps$9242$RyrJs
          g$body-exp$9243$RyrJs)
        (list
          'library-letrec*
          g$name$9239$RyrJs
          (g$map$5807$RyrJs
            list
            g$vars$9240$RyrJs
            g$locs$9241$RyrJs
            g$val-exps$9242$RyrJs)
          g$body-exp$9243$RyrJs)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$9253$RyrJs
     g$set-cons$13124$RyrJs
     (case-lambda
       ((g$x$9814$RyrJs g$ls$9815$RyrJs)
        (if (g$memq$5799$RyrJs g$x$9814$RyrJs g$ls$9815$RyrJs)
          g$ls$9815$RyrJs
          (cons g$x$9814$RyrJs g$ls$9815$RyrJs)))))
   (g$set-union$9254$RyrJs
     g$set-union$13125$RyrJs
     (case-lambda
       ((g$ls1$9816$RyrJs g$ls2$9817$RyrJs)
        (if (null? g$ls1$9816$RyrJs)
          g$ls2$9817$RyrJs
          (if (g$memq$5799$RyrJs
                (car g$ls1$9816$RyrJs)
                g$ls2$9817$RyrJs)
            (g$set-union$9254$RyrJs
              (cdr g$ls1$9816$RyrJs)
              g$ls2$9817$RyrJs)
            (cons
              (car g$ls1$9816$RyrJs)
              (g$set-union$9254$RyrJs
                (cdr g$ls1$9816$RyrJs)
                g$ls2$9817$RyrJs)))))))
   (g$top-mark*$9256$RyrJs g$top-mark*$13126$RyrJs '(top))
   (g$top-marked?$9257$RyrJs
     g$top-marked?$13127$RyrJs
     (case-lambda
       ((g$m*$9818$RyrJs) (g$memq$5799$RyrJs 'top g$m*$9818$RyrJs))))
   (g$gen-lexical$9258$RyrJs
     g$gen-lexical$13128$RyrJs
     (case-lambda
       ((g$sym$9819$RyrJs)
        (if (g$symbol?$6456$RyrJs g$sym$9819$RyrJs)
          (gensym g$sym$9819$RyrJs)
          (if (g$stx?$9295$RyrJs g$sym$9819$RyrJs)
            (g$gen-lexical$9258$RyrJs
              (g$id->sym$9324$RyrJs g$sym$9819$RyrJs))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$9819$RyrJs))))))
   (g$gen-global$9259$RyrJs
     g$gen-global$13129$RyrJs
     (case-lambda
       ((g$x$9820$RyrJs) (g$gen-lexical$9258$RyrJs g$x$9820$RyrJs))))
   (g$gen-label$9260$RyrJs
     g$gen-label$13130$RyrJs
     (case-lambda ((g$_$9821$RyrJs) (gensym))))
   (g$gen-top-level-label$9261$RyrJs
     g$gen-top-level-label$13131$RyrJs
     (case-lambda
       ((g$id$9822$RyrJs g$rib$9823$RyrJs)
        (letrec* ((g$find$9824$RyrJs
                    (case-lambda
                      ((g$sym$9830$RyrJs
                         g$mark*$9831$RyrJs
                         g$sym*$9832$RyrJs
                         g$mark**$9833$RyrJs
                         g$label*$9834$RyrJs)
                       (if (pair? g$sym*$9832$RyrJs)
                         (begin
                           '#f
                           (if (if (eq? g$sym$9830$RyrJs
                                        (car g$sym*$9832$RyrJs))
                                 (begin
                                   '#f
                                   (g$same-marks?$9325$RyrJs
                                     g$mark*$9831$RyrJs
                                     (car g$mark**$9833$RyrJs)))
                                 '#f)
                             (car g$label*$9834$RyrJs)
                             (g$find$9824$RyrJs
                               g$sym$9830$RyrJs
                               g$mark*$9831$RyrJs
                               (cdr g$sym*$9832$RyrJs)
                               (cdr g$mark**$9833$RyrJs)
                               (cdr g$label*$9834$RyrJs))))
                         '#f)))))
          ((case-lambda
             ((g$sym$9825$RyrJs g$mark*$9826$RyrJs)
              ((case-lambda
                 ((g$sym*$9827$RyrJs)
                  ((case-lambda
                     ((g$t$9828$RyrJs)
                      (if g$t$9828$RyrJs
                        ((case-lambda
                           ((g$label$9829$RyrJs)
                            (if (g$imported-label->binding$9061$RyrJs
                                  g$label$9829$RyrJs)
                              (gensym)
                              g$label$9829$RyrJs)))
                         g$t$9828$RyrJs)
                        (gensym))))
                   (if (g$memq$5799$RyrJs
                         g$sym$9825$RyrJs
                         (g$rib-sym*$9271$RyrJs g$rib$9823$RyrJs))
                     (begin
                       '#f
                       (g$find$9824$RyrJs
                         g$sym$9825$RyrJs
                         g$mark*$9826$RyrJs
                         g$sym*$9827$RyrJs
                         (g$rib-mark**$9272$RyrJs g$rib$9823$RyrJs)
                         (g$rib-label*$9273$RyrJs g$rib$9823$RyrJs)))
                     '#f))))
               (g$rib-sym*$9271$RyrJs g$rib$9823$RyrJs))))
           (g$id->sym$9324$RyrJs g$id$9822$RyrJs)
           (g$stx-mark*$9298$RyrJs g$id$9822$RyrJs))))))
   (g$gen-define-label+loc$9262$RyrJs
     g$gen-define-label+loc$13132$RyrJs
     (case-lambda
       ((g$id$9835$RyrJs g$rib$9836$RyrJs g$sd?$9837$RyrJs)
        (if g$sd?$9837$RyrJs
          (values (gensym) (g$gen-lexical$9258$RyrJs g$id$9835$RyrJs))
          ((case-lambda
             ((g$env$9838$RyrJs)
              ((case-lambda
                 ((g$label$9839$RyrJs g$locs$9840$RyrJs)
                  (values
                    g$label$9839$RyrJs
                    ((case-lambda
                       ((g$t$9841$RyrJs)
                        (if g$t$9841$RyrJs
                          (cdr g$t$9841$RyrJs)
                          ((case-lambda
                             ((g$loc$9842$RyrJs)
                              (begin
                                (g$set-interaction-env-locs!$9776$RyrJs
                                  g$env$9838$RyrJs
                                  (cons
                                    (cons
                                      g$label$9839$RyrJs
                                      g$loc$9842$RyrJs)
                                    g$locs$9840$RyrJs))
                                g$loc$9842$RyrJs)))
                           (g$gen-lexical$9258$RyrJs
                             g$id$9835$RyrJs)))))
                     (g$assq$5795$RyrJs
                       g$label$9839$RyrJs
                       g$locs$9840$RyrJs)))))
               (g$gen-top-level-label$9261$RyrJs
                 g$id$9835$RyrJs
                 g$rib$9836$RyrJs)
               (g$interaction-env-locs$9773$RyrJs g$env$9838$RyrJs))))
           (g$top-level-context$9813$RyrJs))))))
   (g$gen-define-label$9263$RyrJs
     g$gen-define-label$13133$RyrJs
     (case-lambda
       ((g$id$9843$RyrJs g$rib$9844$RyrJs g$sd?$9845$RyrJs)
        (if g$sd?$9845$RyrJs
          (gensym)
          (g$gen-top-level-label$9261$RyrJs
            g$id$9843$RyrJs
            g$rib$9844$RyrJs)))))
   (g$7667$9264$RyrJs
     g$7667$13134$RyrJs
     (make-record-type-descriptor
       'rib
       '#f
       'g$7670$RyrJs
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$7669$9265$RyrJs g$7669$13135$RyrJs '#f)
   (g$7668$9266$RyrJs
     g$7668$13136$RyrJs
     (make-record-constructor-descriptor
       g$7667$9264$RyrJs
       '#f
       g$7669$9265$RyrJs))
   (g$rib?$9269$RyrJs
     g$rib?$13137$RyrJs
     (record-predicate g$7667$9264$RyrJs))
   (g$make-rib$9270$RyrJs
     g$make-rib$13138$RyrJs
     (record-constructor g$7668$9266$RyrJs))
   (g$rib-sym*$9271$RyrJs
     g$rib-sym*$13139$RyrJs
     (record-accessor g$7667$9264$RyrJs '0))
   (g$rib-mark**$9272$RyrJs
     g$rib-mark**$13140$RyrJs
     (record-accessor g$7667$9264$RyrJs '1))
   (g$rib-label*$9273$RyrJs
     g$rib-label*$13141$RyrJs
     (record-accessor g$7667$9264$RyrJs '2))
   (g$rib-sealed/freq$9274$RyrJs
     g$rib-sealed/freq$13142$RyrJs
     (record-accessor g$7667$9264$RyrJs '3))
   (g$rib-cache$9275$RyrJs
     g$rib-cache$13143$RyrJs
     (record-accessor g$7667$9264$RyrJs '4))
   (g$set-rib-sym*!$9276$RyrJs
     g$set-rib-sym*!$13144$RyrJs
     (record-mutator g$7667$9264$RyrJs '0))
   (g$set-rib-mark**!$9277$RyrJs
     g$set-rib-mark**!$13145$RyrJs
     (record-mutator g$7667$9264$RyrJs '1))
   (g$set-rib-label*!$9278$RyrJs
     g$set-rib-label*!$13146$RyrJs
     (record-mutator g$7667$9264$RyrJs '2))
   (g$set-rib-sealed/freq!$9279$RyrJs
     g$set-rib-sealed/freq!$13147$RyrJs
     (record-mutator g$7667$9264$RyrJs '3))
   (g$set-rib-cache!$9280$RyrJs
     g$set-rib-cache!$13148$RyrJs
     (record-mutator g$7667$9264$RyrJs '4))
   (g$make-empty-rib$9281$RyrJs
     g$make-empty-rib$13149$RyrJs
     (case-lambda (() (g$make-rib$9270$RyrJs '() '() '() '#f '#f))))
   (g$make-cache-rib$9282$RyrJs
     g$make-cache-rib$13150$RyrJs
     (case-lambda
       (()
        (g$make-rib$9270$RyrJs
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$6556$RyrJs)))))
   (g$find-label$9283$RyrJs
     g$find-label$13151$RyrJs
     (case-lambda
       ((g$rib$9846$RyrJs g$sym$9847$RyrJs g$mark*$9848$RyrJs)
        ((case-lambda
           ((g$ht$9849$RyrJs)
            (if g$ht$9849$RyrJs
              (begin
                '#f
                ((case-lambda
                   ((g$cv$9850$RyrJs)
                    ((case-lambda
                       ((g$t$9851$RyrJs)
                        (if g$t$9851$RyrJs (cdr g$t$9851$RyrJs) '#f)))
                     (if g$cv$9850$RyrJs
                       (begin
                         '#f
                         (g$assp$5798$RyrJs
                           (case-lambda
                             ((g$m$9852$RyrJs)
                              (g$same-marks?$9325$RyrJs
                                g$mark*$9848$RyrJs
                                g$m$9852$RyrJs)))
                           g$cv$9850$RyrJs))
                       '#f))))
                 (g$hashtable-ref$6559$RyrJs
                   g$ht$9849$RyrJs
                   g$sym$9847$RyrJs
                   '#f)))
              '#f)))
         (g$rib-cache$9275$RyrJs g$rib$9846$RyrJs)))))
   (g$extend-rib!$9284$RyrJs
     g$extend-rib!$13152$RyrJs
     (case-lambda
       ((g$rib$9853$RyrJs
          g$id$9854$RyrJs
          g$label$9855$RyrJs
          g$sd?$9856$RyrJs)
        (letrec* ((g$find$9857$RyrJs
                    (case-lambda
                      ((g$sym$9866$RyrJs
                         g$mark*$9867$RyrJs
                         g$sym*$9868$RyrJs
                         g$mark**$9869$RyrJs
                         g$label*$9870$RyrJs)
                       (if (pair? g$sym*$9868$RyrJs)
                         (begin
                           '#f
                           (if (if (eq? g$sym$9866$RyrJs
                                        (car g$sym*$9868$RyrJs))
                                 (begin
                                   '#f
                                   (g$same-marks?$9325$RyrJs
                                     g$mark*$9867$RyrJs
                                     (car g$mark**$9869$RyrJs)))
                                 '#f)
                             g$label*$9870$RyrJs
                             (g$find$9857$RyrJs
                               g$sym$9866$RyrJs
                               g$mark*$9867$RyrJs
                               (cdr g$sym*$9868$RyrJs)
                               (cdr g$mark**$9869$RyrJs)
                               (cdr g$label*$9870$RyrJs))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$9274$RyrJs g$rib$9853$RyrJs)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$9853$RyrJs)
              (void))
            ((case-lambda
               ((g$sym$9858$RyrJs g$mark*$9859$RyrJs)
                ((case-lambda
                   ((g$sym*$9860$RyrJs)
                    ((case-lambda
                       ((g$t$9861$RyrJs)
                        (if g$t$9861$RyrJs
                          ((case-lambda
                             ((g$p$9862$RyrJs)
                              (if (not (eq? g$label$9855$RyrJs
                                            g$p$9862$RyrJs))
                                (g$syntax-violation$9805$RyrJs
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$9854$RyrJs)
                                (void))))
                           g$t$9861$RyrJs)
                          ((case-lambda
                             ((g$t$9863$RyrJs)
                              (if g$t$9863$RyrJs
                                ((case-lambda
                                   ((g$p$9864$RyrJs)
                                    (if (not (eq? g$label$9855$RyrJs
                                                  (car g$p$9864$RyrJs)))
                                      (if (not g$sd?$9856$RyrJs)
                                        (set-car!
                                          g$p$9864$RyrJs
                                          g$label$9855$RyrJs)
                                        (g$syntax-violation$9805$RyrJs
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$9854$RyrJs))
                                      (void))))
                                 g$t$9863$RyrJs)
                                (begin
                                  (if (g$rib-cache$9275$RyrJs
                                        g$rib$9853$RyrJs)
                                    (g$hashtable-update!$6563$RyrJs
                                      (g$rib-cache$9275$RyrJs
                                        g$rib$9853$RyrJs)
                                      g$sym$9858$RyrJs
                                      (case-lambda
                                        ((g$e$9865$RyrJs)
                                         (cons
                                           (cons
                                             g$mark*$9859$RyrJs
                                             g$label$9855$RyrJs)
                                           g$e$9865$RyrJs)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$9276$RyrJs
                                    g$rib$9853$RyrJs
                                    (cons
                                      g$sym$9858$RyrJs
                                      g$sym*$9860$RyrJs))
                                  (g$set-rib-mark**!$9277$RyrJs
                                    g$rib$9853$RyrJs
                                    (cons
                                      g$mark*$9859$RyrJs
                                      (g$rib-mark**$9272$RyrJs
                                        g$rib$9853$RyrJs)))
                                  (g$set-rib-label*!$9278$RyrJs
                                    g$rib$9853$RyrJs
                                    (cons
                                      g$label$9855$RyrJs
                                      (g$rib-label*$9273$RyrJs
                                        g$rib$9853$RyrJs)))))))
                           (if (g$memq$5799$RyrJs
                                 g$sym$9858$RyrJs
                                 (g$rib-sym*$9271$RyrJs
                                   g$rib$9853$RyrJs))
                             (begin
                               '#f
                               (g$find$9857$RyrJs
                                 g$sym$9858$RyrJs
                                 g$mark*$9859$RyrJs
                                 g$sym*$9860$RyrJs
                                 (g$rib-mark**$9272$RyrJs
                                   g$rib$9853$RyrJs)
                                 (g$rib-label*$9273$RyrJs
                                   g$rib$9853$RyrJs)))
                             '#f)))))
                     (g$find-label$9283$RyrJs
                       g$rib$9853$RyrJs
                       g$sym$9858$RyrJs
                       g$mark*$9859$RyrJs))))
                 (g$rib-sym*$9271$RyrJs g$rib$9853$RyrJs))))
             (g$id->sym$9324$RyrJs g$id$9854$RyrJs)
             (g$stx-mark*$9298$RyrJs g$id$9854$RyrJs)))))))
   (g$extend-rib/nc!$9285$RyrJs
     g$extend-rib/nc!$13153$RyrJs
     (case-lambda
       ((g$rib$9871$RyrJs g$id$9872$RyrJs g$label$9873$RyrJs)
        ((case-lambda
           ((g$sym$9874$RyrJs g$mark*$9875$RyrJs)
            ((case-lambda
               ((g$sym*$9876$RyrJs)
                (begin
                  (if (g$rib-cache$9275$RyrJs g$rib$9871$RyrJs)
                    (g$hashtable-update!$6563$RyrJs
                      (g$rib-cache$9275$RyrJs g$rib$9871$RyrJs)
                      g$sym$9874$RyrJs
                      (case-lambda
                        ((g$e$9877$RyrJs)
                         (cons
                           (cons g$mark*$9875$RyrJs g$label$9873$RyrJs)
                           g$e$9877$RyrJs)))
                      '())
                    (void))
                  (g$set-rib-sym*!$9276$RyrJs
                    g$rib$9871$RyrJs
                    (cons g$sym$9874$RyrJs g$sym*$9876$RyrJs))
                  (g$set-rib-mark**!$9277$RyrJs
                    g$rib$9871$RyrJs
                    (cons
                      g$mark*$9875$RyrJs
                      (g$rib-mark**$9272$RyrJs g$rib$9871$RyrJs)))
                  (g$set-rib-label*!$9278$RyrJs
                    g$rib$9871$RyrJs
                    (cons
                      g$label$9873$RyrJs
                      (g$rib-label*$9273$RyrJs g$rib$9871$RyrJs))))))
             (g$rib-sym*$9271$RyrJs g$rib$9871$RyrJs))))
         (g$id->sym$9324$RyrJs g$id$9872$RyrJs)
         (g$stx-mark*$9298$RyrJs g$id$9872$RyrJs)))))
   (g$make-rib-map$9286$RyrJs
     g$make-rib-map$13154$RyrJs
     (case-lambda
       ((g$sym*$9878$RyrJs)
        ((case-lambda
           ((g$ht$9879$RyrJs)
            ((letrec ((g$f$9880$RyrJs
                        (case-lambda
                          ((g$i$9881$RyrJs g$sym*$9882$RyrJs)
                           (if (null? g$sym*$9882$RyrJs)
                             g$ht$9879$RyrJs
                             (begin
                               (g$hashtable-update!$6563$RyrJs
                                 g$ht$9879$RyrJs
                                 (car g$sym*$9882$RyrJs)
                                 (case-lambda
                                   ((g$x$9883$RyrJs)
                                    (cons
                                      g$i$9881$RyrJs
                                      g$x$9883$RyrJs)))
                                 '())
                               (g$f$9880$RyrJs
                                 (+ g$i$9881$RyrJs '1)
                                 (cdr g$sym*$9882$RyrJs))))))))
               g$f$9880$RyrJs)
             '0
             g$sym*$9878$RyrJs)))
         (g$make-eq-hashtable$6556$RyrJs)))))
   (g$seal-rib!$9287$RyrJs
     g$seal-rib!$13155$RyrJs
     (case-lambda
       ((g$rib$9884$RyrJs)
        ((case-lambda
           ((g$sym*$9885$RyrJs)
            (if (not (null? g$sym*$9885$RyrJs))
              (begin
                (g$set-rib-sym*!$9276$RyrJs
                  g$rib$9884$RyrJs
                  (g$list->vector$6451$RyrJs g$sym*$9885$RyrJs))
                (g$set-rib-mark**!$9277$RyrJs
                  g$rib$9884$RyrJs
                  (g$list->vector$6451$RyrJs
                    (g$rib-mark**$9272$RyrJs g$rib$9884$RyrJs)))
                (g$set-rib-label*!$9278$RyrJs
                  g$rib$9884$RyrJs
                  (g$list->vector$6451$RyrJs
                    (g$rib-label*$9273$RyrJs g$rib$9884$RyrJs)))
                (g$set-rib-sealed/freq!$9279$RyrJs
                  g$rib$9884$RyrJs
                  (g$make-rib-map$9286$RyrJs g$sym*$9885$RyrJs)))
              (void))))
         (g$rib-sym*$9271$RyrJs g$rib$9884$RyrJs)))))
   (g$unseal-rib!$9288$RyrJs
     g$unseal-rib!$13156$RyrJs
     (case-lambda
       ((g$rib$9886$RyrJs)
        (if (g$rib-sealed/freq$9274$RyrJs g$rib$9886$RyrJs)
          (begin
            (g$set-rib-sealed/freq!$9279$RyrJs g$rib$9886$RyrJs '#f)
            (g$set-rib-sym*!$9276$RyrJs
              g$rib$9886$RyrJs
              (vector->list (g$rib-sym*$9271$RyrJs g$rib$9886$RyrJs)))
            (g$set-rib-mark**!$9277$RyrJs
              g$rib$9886$RyrJs
              (vector->list (g$rib-mark**$9272$RyrJs g$rib$9886$RyrJs)))
            (g$set-rib-label*!$9278$RyrJs
              g$rib$9886$RyrJs
              (vector->list
                (g$rib-label*$9273$RyrJs g$rib$9886$RyrJs))))
          (void)))))
   (g$make-full-rib$9289$RyrJs
     g$make-full-rib$13157$RyrJs
     (case-lambda
       ((g$id*$9887$RyrJs g$label*$9888$RyrJs)
        ((case-lambda
           ((g$r$9889$RyrJs)
            (begin
              (g$seal-rib!$9287$RyrJs g$r$9889$RyrJs)
              g$r$9889$RyrJs)))
         (g$make-rib$9270$RyrJs
           (g$map$5807$RyrJs g$id->sym$9324$RyrJs g$id*$9887$RyrJs)
           (g$map$5807$RyrJs g$stx-mark*$9298$RyrJs g$id*$9887$RyrJs)
           g$label*$9888$RyrJs
           '#f
           '#f)))))
   (g$7696$9290$RyrJs
     g$7696$13158$RyrJs
     (make-record-type-descriptor
       'stx
       '#f
       'g$7699$RyrJs
       '#t
       '#t
       '#((mutable expr)
          (mutable mark*)
          (mutable subst*)
          (mutable ae*))))
   (g$7698$9291$RyrJs g$7698$13159$RyrJs '#f)
   (g$7697$9292$RyrJs
     g$7697$13160$RyrJs
     (make-record-constructor-descriptor
       g$7696$9290$RyrJs
       '#f
       g$7698$9291$RyrJs))
   (g$stx?$9295$RyrJs
     g$stx?$13161$RyrJs
     (record-predicate g$7696$9290$RyrJs))
   (g$make-stx$9296$RyrJs
     g$make-stx$13162$RyrJs
     (record-constructor g$7697$9292$RyrJs))
   (g$stx-expr$9297$RyrJs
     g$stx-expr$13163$RyrJs
     (record-accessor g$7696$9290$RyrJs '0))
   (g$stx-mark*$9298$RyrJs
     g$stx-mark*$13164$RyrJs
     (record-accessor g$7696$9290$RyrJs '1))
   (g$stx-subst*$9299$RyrJs
     g$stx-subst*$13165$RyrJs
     (record-accessor g$7696$9290$RyrJs '2))
   (g$stx-ae*$9300$RyrJs
     g$stx-ae*$13166$RyrJs
     (record-accessor g$7696$9290$RyrJs '3))
   (g$set-stx-expr!$9301$RyrJs
     g$set-stx-expr!$13167$RyrJs
     (record-mutator g$7696$9290$RyrJs '0))
   (g$set-stx-mark*!$9302$RyrJs
     g$set-stx-mark*!$13168$RyrJs
     (record-mutator g$7696$9290$RyrJs '1))
   (g$set-stx-subst*!$9303$RyrJs
     g$set-stx-subst*!$13169$RyrJs
     (record-mutator g$7696$9290$RyrJs '2))
   (g$set-stx-ae*!$9304$RyrJs
     g$set-stx-ae*!$13170$RyrJs
     (record-mutator g$7696$9290$RyrJs '3))
   (g$rp$9305$RyrJs
     g$rp$13171$RyrJs
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$9890$RyrJs g$p$9891$RyrJs g$wr$9892$RyrJs)
          (begin
            (display '"#<syntax " g$p$9891$RyrJs)
            (write
              (g$stx->datum$9334$RyrJs g$x$9890$RyrJs)
              g$p$9891$RyrJs)
            ((case-lambda
               ((g$expr$9893$RyrJs)
                (if (annotation? g$expr$9893$RyrJs)
                  ((case-lambda
                     ((g$src$9894$RyrJs)
                      (if (pair? g$src$9894$RyrJs)
                        (begin
                          (display '" (" g$p$9891$RyrJs)
                          (display
                            (cdr g$src$9894$RyrJs)
                            g$p$9891$RyrJs)
                          (display '" of " g$p$9891$RyrJs)
                          (display
                            (car g$src$9894$RyrJs)
                            g$p$9891$RyrJs)
                          (display '")" g$p$9891$RyrJs))
                        (void))))
                   (annotation-source g$expr$9893$RyrJs))
                  (void))))
             (g$stx-expr$9297$RyrJs g$x$9890$RyrJs))
            (display '">" g$p$9891$RyrJs))))))
   (g$datum->stx$9306$RyrJs
     g$datum->stx$13172$RyrJs
     (case-lambda
       ((g$id$9895$RyrJs g$datum$9896$RyrJs)
        (g$make-stx$9296$RyrJs
          g$datum$9896$RyrJs
          (g$stx-mark*$9298$RyrJs g$id$9895$RyrJs)
          (g$stx-subst*$9299$RyrJs g$id$9895$RyrJs)
          (g$stx-ae*$9300$RyrJs g$id$9895$RyrJs)))))
   (g$gen-mark$9307$RyrJs
     g$gen-mark$13173$RyrJs
     (case-lambda (() (string '#\m))))
   (g$anti-mark$9308$RyrJs g$anti-mark$13174$RyrJs '#f)
   (g$anti-mark?$9309$RyrJs g$anti-mark?$13175$RyrJs not)
   (g$join-wraps$9310$RyrJs
     g$join-wraps$13176$RyrJs
     (case-lambda
       ((g$m1*$9897$RyrJs
          g$s1*$9898$RyrJs
          g$ae1*$9899$RyrJs
          g$e$9900$RyrJs)
        (letrec* ((g$cancel$9901$RyrJs
                    (case-lambda
                      ((g$ls1$9905$RyrJs g$ls2$9906$RyrJs)
                       ((letrec ((g$f$9907$RyrJs
                                   (case-lambda
                                     ((g$x$9908$RyrJs g$ls1$9909$RyrJs)
                                      (if (null? g$ls1$9909$RyrJs)
                                        (cdr g$ls2$9906$RyrJs)
                                        (cons
                                          g$x$9908$RyrJs
                                          (g$f$9907$RyrJs
                                            (car g$ls1$9909$RyrJs)
                                            (cdr g$ls1$9909$RyrJs))))))))
                          g$f$9907$RyrJs)
                        (car g$ls1$9905$RyrJs)
                        (cdr g$ls1$9905$RyrJs))))))
          ((case-lambda
             ((g$m2*$9902$RyrJs g$s2*$9903$RyrJs g$ae2*$9904$RyrJs)
              (if (if (not (null? g$m1*$9897$RyrJs))
                    (if (not (null? g$m2*$9902$RyrJs))
                      (begin
                        '#f
                        (g$anti-mark?$9309$RyrJs
                          (car g$m2*$9902$RyrJs)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$9901$RyrJs
                    g$m1*$9897$RyrJs
                    g$m2*$9902$RyrJs)
                  (g$cancel$9901$RyrJs
                    g$s1*$9898$RyrJs
                    g$s2*$9903$RyrJs)
                  (g$cancel$9901$RyrJs
                    g$ae1*$9899$RyrJs
                    g$ae2*$9904$RyrJs))
                (values
                  (append g$m1*$9897$RyrJs g$m2*$9902$RyrJs)
                  (append g$s1*$9898$RyrJs g$s2*$9903$RyrJs)
                  (append g$ae1*$9899$RyrJs g$ae2*$9904$RyrJs)))))
           (g$stx-mark*$9298$RyrJs g$e$9900$RyrJs)
           (g$stx-subst*$9299$RyrJs g$e$9900$RyrJs)
           (g$stx-ae*$9300$RyrJs g$e$9900$RyrJs))))))
   (g$mkstx$9311$RyrJs
     g$mkstx$13177$RyrJs
     (case-lambda
       ((g$e$9910$RyrJs
          g$m*$9911$RyrJs
          g$s*$9912$RyrJs
          g$ae*$9913$RyrJs)
        (if (if (g$stx?$9295$RyrJs g$e$9910$RyrJs)
              (begin
                '#f
                (not (g$top-marked?$9257$RyrJs g$m*$9911$RyrJs)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$9310$RyrJs
                 g$m*$9911$RyrJs
                 g$s*$9912$RyrJs
                 g$ae*$9913$RyrJs
                 g$e$9910$RyrJs)))
            (case-lambda
              ((g$m*$9917$RyrJs g$s*$9918$RyrJs g$ae*$9919$RyrJs)
               ((case-lambda
                  ((g$ae*$9920$RyrJs g$s*$9921$RyrJs g$m*$9922$RyrJs)
                   (g$make-stx$9296$RyrJs
                     (g$stx-expr$9297$RyrJs g$e$9910$RyrJs)
                     g$m*$9922$RyrJs
                     g$s*$9921$RyrJs
                     g$ae*$9920$RyrJs)))
                g$ae*$9919$RyrJs
                g$s*$9918$RyrJs
                g$m*$9917$RyrJs))))
          (g$make-stx$9296$RyrJs
            g$e$9910$RyrJs
            g$m*$9911$RyrJs
            g$s*$9912$RyrJs
            g$ae*$9913$RyrJs)))))
   (g$add-mark$9312$RyrJs
     g$add-mark$13178$RyrJs
     (case-lambda
       ((g$m$9923$RyrJs g$e$9924$RyrJs g$ae$9925$RyrJs)
        (g$mkstx$9311$RyrJs
          g$e$9924$RyrJs
          (list g$m$9923$RyrJs)
          '(shift)
          (list g$ae$9925$RyrJs)))))
   (g$add-subst$9313$RyrJs
     g$add-subst$13179$RyrJs
     (case-lambda
       ((g$subst$9926$RyrJs g$e$9927$RyrJs)
        (g$mkstx$9311$RyrJs
          g$e$9927$RyrJs
          '()
          (list g$subst$9926$RyrJs)
          '()))))
   (g$syntax-kind?$9314$RyrJs
     g$syntax-kind?$13180$RyrJs
     (case-lambda
       ((g$x$9928$RyrJs g$p?$9929$RyrJs)
        (if (g$stx?$9295$RyrJs g$x$9928$RyrJs)
          (g$syntax-kind?$9314$RyrJs
            (g$stx-expr$9297$RyrJs g$x$9928$RyrJs)
            g$p?$9929$RyrJs)
          (if (annotation? g$x$9928$RyrJs)
            (g$syntax-kind?$9314$RyrJs
              (annotation-expression g$x$9928$RyrJs)
              g$p?$9929$RyrJs)
            (g$p?$9929$RyrJs g$x$9928$RyrJs))))))
   (g$syntax-vector->list$9315$RyrJs
     g$syntax-vector->list$13181$RyrJs
     (case-lambda
       ((g$x$9930$RyrJs)
        (if (g$stx?$9295$RyrJs g$x$9930$RyrJs)
          ((case-lambda
             ((g$ls$9931$RyrJs
                g$m*$9932$RyrJs
                g$s*$9933$RyrJs
                g$ae*$9934$RyrJs)
              (g$map$5807$RyrJs
                (case-lambda
                  ((g$x$9935$RyrJs)
                   (g$mkstx$9311$RyrJs
                     g$x$9935$RyrJs
                     g$m*$9932$RyrJs
                     g$s*$9933$RyrJs
                     g$ae*$9934$RyrJs)))
                g$ls$9931$RyrJs)))
           (g$syntax-vector->list$9315$RyrJs
             (g$stx-expr$9297$RyrJs g$x$9930$RyrJs))
           (g$stx-mark*$9298$RyrJs g$x$9930$RyrJs)
           (g$stx-subst*$9299$RyrJs g$x$9930$RyrJs)
           (g$stx-ae*$9300$RyrJs g$x$9930$RyrJs))
          (if (annotation? g$x$9930$RyrJs)
            (g$syntax-vector->list$9315$RyrJs
              (annotation-expression g$x$9930$RyrJs))
            (if (g$vector?$6454$RyrJs g$x$9930$RyrJs)
              (vector->list g$x$9930$RyrJs)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$9930$RyrJs)))))))
   (g$syntax-pair?$9316$RyrJs
     g$syntax-pair?$13182$RyrJs
     (case-lambda
       ((g$x$9936$RyrJs)
        (g$syntax-kind?$9314$RyrJs g$x$9936$RyrJs pair?))))
   (g$syntax-vector?$9317$RyrJs
     g$syntax-vector?$13183$RyrJs
     (case-lambda
       ((g$x$9937$RyrJs)
        (g$syntax-kind?$9314$RyrJs
          g$x$9937$RyrJs
          g$vector?$6454$RyrJs))))
   (g$syntax-null?$9318$RyrJs
     g$syntax-null?$13184$RyrJs
     (case-lambda
       ((g$x$9938$RyrJs)
        (g$syntax-kind?$9314$RyrJs g$x$9938$RyrJs null?))))
   (g$syntax-list?$9319$RyrJs
     g$syntax-list?$13185$RyrJs
     (case-lambda
       ((g$x$9939$RyrJs)
        ((case-lambda
           ((g$t$9940$RyrJs)
            (if g$t$9940$RyrJs
              g$t$9940$RyrJs
              (begin
                '#f
                (if (g$syntax-pair?$9316$RyrJs g$x$9939$RyrJs)
                  (begin
                    '#f
                    (g$syntax-list?$9319$RyrJs
                      (g$syntax-cdr$9321$RyrJs g$x$9939$RyrJs)))
                  '#f)))))
         (g$syntax-null?$9318$RyrJs g$x$9939$RyrJs)))))
   (g$syntax-car$9320$RyrJs
     g$syntax-car$13186$RyrJs
     (case-lambda
       ((g$x$9941$RyrJs)
        (if (g$stx?$9295$RyrJs g$x$9941$RyrJs)
          (g$mkstx$9311$RyrJs
            (g$syntax-car$9320$RyrJs
              (g$stx-expr$9297$RyrJs g$x$9941$RyrJs))
            (g$stx-mark*$9298$RyrJs g$x$9941$RyrJs)
            (g$stx-subst*$9299$RyrJs g$x$9941$RyrJs)
            (g$stx-ae*$9300$RyrJs g$x$9941$RyrJs))
          (if (annotation? g$x$9941$RyrJs)
            (g$syntax-car$9320$RyrJs
              (annotation-expression g$x$9941$RyrJs))
            (if (pair? g$x$9941$RyrJs)
              (car g$x$9941$RyrJs)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$9941$RyrJs)))))))
   (g$syntax-cdr$9321$RyrJs
     g$syntax-cdr$13187$RyrJs
     (case-lambda
       ((g$x$9942$RyrJs)
        (if (g$stx?$9295$RyrJs g$x$9942$RyrJs)
          (g$mkstx$9311$RyrJs
            (g$syntax-cdr$9321$RyrJs
              (g$stx-expr$9297$RyrJs g$x$9942$RyrJs))
            (g$stx-mark*$9298$RyrJs g$x$9942$RyrJs)
            (g$stx-subst*$9299$RyrJs g$x$9942$RyrJs)
            (g$stx-ae*$9300$RyrJs g$x$9942$RyrJs))
          (if (annotation? g$x$9942$RyrJs)
            (g$syntax-cdr$9321$RyrJs
              (annotation-expression g$x$9942$RyrJs))
            (if (pair? g$x$9942$RyrJs)
              (cdr g$x$9942$RyrJs)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$9942$RyrJs)))))))
   (g$syntax->list$9322$RyrJs
     g$syntax->list$13188$RyrJs
     (case-lambda
       ((g$x$9943$RyrJs)
        (if (g$syntax-pair?$9316$RyrJs g$x$9943$RyrJs)
          (cons
            (g$syntax-car$9320$RyrJs g$x$9943$RyrJs)
            (g$syntax->list$9322$RyrJs
              (g$syntax-cdr$9321$RyrJs g$x$9943$RyrJs)))
          (if (g$syntax-null?$9318$RyrJs g$x$9943$RyrJs)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$9943$RyrJs))))))
   (g$id?$9323$RyrJs
     g$id?$13189$RyrJs
     (case-lambda
       ((g$x$9944$RyrJs)
        (if (g$stx?$9295$RyrJs g$x$9944$RyrJs)
          (begin
            '#f
            ((case-lambda
               ((g$expr$9945$RyrJs)
                (g$symbol?$6456$RyrJs
                  (if (annotation? g$expr$9945$RyrJs)
                    (annotation-stripped g$expr$9945$RyrJs)
                    g$expr$9945$RyrJs))))
             (g$stx-expr$9297$RyrJs g$x$9944$RyrJs)))
          '#f))))
   (g$id->sym$9324$RyrJs
     g$id->sym$13190$RyrJs
     (case-lambda
       ((g$x$9946$RyrJs)
        (begin
          (if (not (g$stx?$9295$RyrJs g$x$9946$RyrJs))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$9946$RyrJs)
            (void))
          ((case-lambda
             ((g$expr$9947$RyrJs)
              ((case-lambda
                 ((g$sym$9948$RyrJs)
                  (if (g$symbol?$6456$RyrJs g$sym$9948$RyrJs)
                    g$sym$9948$RyrJs
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$9946$RyrJs))))
               (if (annotation? g$expr$9947$RyrJs)
                 (annotation-stripped g$expr$9947$RyrJs)
                 g$expr$9947$RyrJs))))
           (g$stx-expr$9297$RyrJs g$x$9946$RyrJs))))))
   (g$same-marks?$9325$RyrJs
     g$same-marks?$13191$RyrJs
     (case-lambda
       ((g$x$9949$RyrJs g$y$9950$RyrJs)
        ((case-lambda
           ((g$t$9951$RyrJs)
            (if g$t$9951$RyrJs
              g$t$9951$RyrJs
              (begin
                '#f
                (if (pair? g$x$9949$RyrJs)
                  (if (pair? g$y$9950$RyrJs)
                    (if (eq? (car g$x$9949$RyrJs) (car g$y$9950$RyrJs))
                      (begin
                        '#f
                        (g$same-marks?$9325$RyrJs
                          (cdr g$x$9949$RyrJs)
                          (cdr g$y$9950$RyrJs)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$9949$RyrJs)
           (begin '#f (null? g$y$9950$RyrJs))
           '#f)))))
   (g$bound-id=?$9326$RyrJs
     g$bound-id=?$13192$RyrJs
     (case-lambda
       ((g$x$9952$RyrJs g$y$9953$RyrJs)
        (if (eq? (g$id->sym$9324$RyrJs g$x$9952$RyrJs)
                 (g$id->sym$9324$RyrJs g$y$9953$RyrJs))
          (begin
            '#f
            (g$same-marks?$9325$RyrJs
              (g$stx-mark*$9298$RyrJs g$x$9952$RyrJs)
              (g$stx-mark*$9298$RyrJs g$y$9953$RyrJs)))
          '#f))))
   (g$free-id=?$9327$RyrJs
     g$free-id=?$13193$RyrJs
     (case-lambda
       ((g$i$9954$RyrJs g$j$9955$RyrJs)
        ((case-lambda
           ((g$t0$9956$RyrJs g$t1$9957$RyrJs)
            (if ((case-lambda
                   ((g$t$9958$RyrJs)
                    (if g$t$9958$RyrJs
                      g$t$9958$RyrJs
                      (begin '#f g$t1$9957$RyrJs))))
                 g$t0$9956$RyrJs)
              (eq? g$t0$9956$RyrJs g$t1$9957$RyrJs)
              (eq? (g$id->sym$9324$RyrJs g$i$9954$RyrJs)
                   (g$id->sym$9324$RyrJs g$j$9955$RyrJs)))))
         (g$id->real-label$9337$RyrJs g$i$9954$RyrJs)
         (g$id->real-label$9337$RyrJs g$j$9955$RyrJs)))))
   (g$valid-bound-ids?$9328$RyrJs
     g$valid-bound-ids?$13194$RyrJs
     (case-lambda
       ((g$id*$9959$RyrJs)
        (if (g$for-all$5805$RyrJs g$id?$9323$RyrJs g$id*$9959$RyrJs)
          (begin
            '#f
            (g$distinct-bound-ids?$9329$RyrJs g$id*$9959$RyrJs))
          '#f))))
   (g$distinct-bound-ids?$9329$RyrJs
     g$distinct-bound-ids?$13195$RyrJs
     (case-lambda
       ((g$id*$9960$RyrJs)
        ((case-lambda
           ((g$t$9961$RyrJs)
            (if g$t$9961$RyrJs
              g$t$9961$RyrJs
              (begin
                '#f
                (if (not (g$bound-id-member?$9330$RyrJs
                           (car g$id*$9960$RyrJs)
                           (cdr g$id*$9960$RyrJs)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$9329$RyrJs
                      (cdr g$id*$9960$RyrJs)))
                  '#f)))))
         (null? g$id*$9960$RyrJs)))))
   (g$bound-id-member?$9330$RyrJs
     g$bound-id-member?$13196$RyrJs
     (case-lambda
       ((g$id$9962$RyrJs g$id*$9963$RyrJs)
        (if (pair? g$id*$9963$RyrJs)
          (begin
            '#f
            ((case-lambda
               ((g$t$9964$RyrJs)
                (if g$t$9964$RyrJs
                  g$t$9964$RyrJs
                  (begin
                    '#f
                    (g$bound-id-member?$9330$RyrJs
                      g$id$9962$RyrJs
                      (cdr g$id*$9963$RyrJs))))))
             (g$bound-id=?$9326$RyrJs
               g$id$9962$RyrJs
               (car g$id*$9963$RyrJs))))
          '#f))))
   (g$self-evaluating?$9331$RyrJs
     g$self-evaluating?$13197$RyrJs
     (case-lambda
       ((g$x$9965$RyrJs)
        ((case-lambda
           ((g$t$9966$RyrJs)
            (if g$t$9966$RyrJs
              g$t$9966$RyrJs
              ((case-lambda
                 ((g$t$9967$RyrJs)
                  (if g$t$9967$RyrJs
                    g$t$9967$RyrJs
                    ((case-lambda
                       ((g$t$9968$RyrJs)
                        (if g$t$9968$RyrJs
                          g$t$9968$RyrJs
                          ((case-lambda
                             ((g$t$9969$RyrJs)
                              (if g$t$9969$RyrJs
                                g$t$9969$RyrJs
                                (begin
                                  '#f
                                  (g$bytevector?$6455$RyrJs
                                    g$x$9965$RyrJs)))))
                           (g$boolean?$6457$RyrJs g$x$9965$RyrJs)))))
                     (g$char?$6453$RyrJs g$x$9965$RyrJs)))))
               (string? g$x$9965$RyrJs)))))
         (number? g$x$9965$RyrJs)))))
   (g$strip-annotations$9332$RyrJs
     g$strip-annotations$13198$RyrJs
     (case-lambda
       ((g$x$9970$RyrJs)
        (if (pair? g$x$9970$RyrJs)
          (cons
            (g$strip-annotations$9332$RyrJs (car g$x$9970$RyrJs))
            (g$strip-annotations$9332$RyrJs (cdr g$x$9970$RyrJs)))
          (if (g$vector?$6454$RyrJs g$x$9970$RyrJs)
            (g$vector-map$6516$RyrJs
              g$strip-annotations$9332$RyrJs
              g$x$9970$RyrJs)
            (if (annotation? g$x$9970$RyrJs)
              (annotation-stripped g$x$9970$RyrJs)
              g$x$9970$RyrJs))))))
   (g$strip$9333$RyrJs
     g$strip$13199$RyrJs
     (case-lambda
       ((g$x$9971$RyrJs g$m*$9972$RyrJs)
        (if (g$top-marked?$9257$RyrJs g$m*$9972$RyrJs)
          (if ((case-lambda
                 ((g$t$9973$RyrJs)
                  (if g$t$9973$RyrJs
                    g$t$9973$RyrJs
                    ((case-lambda
                       ((g$t$9974$RyrJs)
                        (if g$t$9974$RyrJs
                          g$t$9974$RyrJs
                          (begin
                            '#f
                            (if (g$vector?$6454$RyrJs g$x$9971$RyrJs)
                              (if (> (vector-length g$x$9971$RyrJs) '0)
                                (begin
                                  '#f
                                  (annotation?
                                    (vector-ref g$x$9971$RyrJs '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$9971$RyrJs)
                       (begin '#f (annotation? (car g$x$9971$RyrJs)))
                       '#f)))))
               (annotation? g$x$9971$RyrJs))
            (g$strip-annotations$9332$RyrJs g$x$9971$RyrJs)
            g$x$9971$RyrJs)
          ((letrec ((g$f$9975$RyrJs
                      (case-lambda
                        ((g$x$9976$RyrJs)
                         (if (g$stx?$9295$RyrJs g$x$9976$RyrJs)
                           (g$strip$9333$RyrJs
                             (g$stx-expr$9297$RyrJs g$x$9976$RyrJs)
                             (g$stx-mark*$9298$RyrJs g$x$9976$RyrJs))
                           (if (annotation? g$x$9976$RyrJs)
                             (annotation-stripped g$x$9976$RyrJs)
                             (if (pair? g$x$9976$RyrJs)
                               ((case-lambda
                                  ((g$a$9977$RyrJs g$d$9978$RyrJs)
                                   (if (if (eq? g$a$9977$RyrJs
                                                (car g$x$9976$RyrJs))
                                         (begin
                                           '#f
                                           (eq? g$d$9978$RyrJs
                                                (cdr g$x$9976$RyrJs)))
                                         '#f)
                                     g$x$9976$RyrJs
                                     (cons
                                       g$a$9977$RyrJs
                                       g$d$9978$RyrJs))))
                                (g$f$9975$RyrJs (car g$x$9976$RyrJs))
                                (g$f$9975$RyrJs (cdr g$x$9976$RyrJs)))
                               (if (g$vector?$6454$RyrJs g$x$9976$RyrJs)
                                 ((case-lambda
                                    ((g$old$9979$RyrJs)
                                     ((case-lambda
                                        ((g$new$9980$RyrJs)
                                         (if (g$for-all$5805$RyrJs
                                               eq?
                                               g$old$9979$RyrJs
                                               g$new$9980$RyrJs)
                                           g$x$9976$RyrJs
                                           (g$list->vector$6451$RyrJs
                                             g$new$9980$RyrJs))))
                                      (g$map$5807$RyrJs
                                        g$f$9975$RyrJs
                                        g$old$9979$RyrJs))))
                                  (vector->list g$x$9976$RyrJs))
                                 g$x$9976$RyrJs))))))))
             g$f$9975$RyrJs)
           g$x$9971$RyrJs)))))
   (g$stx->datum$9334$RyrJs
     g$stx->datum$13200$RyrJs
     (case-lambda
       ((g$x$9981$RyrJs) (g$strip$9333$RyrJs g$x$9981$RyrJs '()))))
   (g$same-marks*?$9335$RyrJs
     g$same-marks*?$13201$RyrJs
     (case-lambda
       ((g$mark*$9982$RyrJs g$mark**$9983$RyrJs g$si$9984$RyrJs)
        (if (null? g$si$9984$RyrJs)
          '#f
          (if (g$same-marks?$9325$RyrJs
                g$mark*$9982$RyrJs
                (vector-ref g$mark**$9983$RyrJs (car g$si$9984$RyrJs)))
            (car g$si$9984$RyrJs)
            (g$same-marks*?$9335$RyrJs
              g$mark*$9982$RyrJs
              g$mark**$9983$RyrJs
              (cdr g$si$9984$RyrJs)))))))
   (g$id->label$9336$RyrJs
     g$id->label$13202$RyrJs
     (case-lambda
       ((g$id$9985$RyrJs)
        ((case-lambda
           ((g$t$9986$RyrJs)
            (if g$t$9986$RyrJs
              g$t$9986$RyrJs
              (begin
                '#f
                ((case-lambda
                   ((g$t$9987$RyrJs)
                    (if g$t$9987$RyrJs
                      ((case-lambda
                         ((g$env$9988$RyrJs)
                          ((case-lambda
                             ((g$rib$9989$RyrJs)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$9262$RyrJs
                                     g$id$9985$RyrJs
                                     g$rib$9989$RyrJs
                                     '#f)))
                                (case-lambda
                                  ((g$lab$9992$RyrJs g$_loc$9993$RyrJs)
                                   ((case-lambda
                                      ((g$_loc$9994$RyrJs
                                         g$lab$9995$RyrJs)
                                       (begin
                                         (g$extend-rib!$9284$RyrJs
                                           g$rib$9989$RyrJs
                                           g$id$9985$RyrJs
                                           g$lab$9995$RyrJs
                                           '#t)
                                         g$lab$9995$RyrJs)))
                                    g$_loc$9993$RyrJs
                                    g$lab$9992$RyrJs))))))
                           (g$interaction-env-rib$9771$RyrJs
                             g$env$9988$RyrJs))))
                       g$t$9987$RyrJs)
                      '#f)))
                 (g$top-level-context$9813$RyrJs))))))
         (g$id->real-label$9337$RyrJs g$id$9985$RyrJs)))))
   (g$id->real-label$9337$RyrJs
     g$id->real-label$13203$RyrJs
     (case-lambda
       ((g$id$9996$RyrJs)
        ((case-lambda
           ((g$sym$9997$RyrJs)
            ((letrec ((g$search$9998$RyrJs
                        (case-lambda
                          ((g$subst*$9999$RyrJs g$mark*$10000$RyrJs)
                           (if (null? g$subst*$9999$RyrJs)
                             '#f
                             (if (eq? (car g$subst*$9999$RyrJs) 'shift)
                               (g$search$9998$RyrJs
                                 (cdr g$subst*$9999$RyrJs)
                                 (cdr g$mark*$10000$RyrJs))
                               ((case-lambda
                                  ((g$rib$10001$RyrJs)
                                   ((case-lambda
                                      ((g$t$10002$RyrJs)
                                       (if g$t$10002$RyrJs
                                         ((case-lambda
                                            ((g$ht$10003$RyrJs)
                                             ((case-lambda
                                                ((g$si$10004$RyrJs)
                                                 ((case-lambda
                                                    ((g$i$10005$RyrJs)
                                                     (if g$i$10005$RyrJs
                                                       (vector-ref
                                                         (g$rib-label*$9273$RyrJs
                                                           g$rib$10001$RyrJs)
                                                         g$i$10005$RyrJs)
                                                       (g$search$9998$RyrJs
                                                         (cdr g$subst*$9999$RyrJs)
                                                         g$mark*$10000$RyrJs))))
                                                  (if g$si$10004$RyrJs
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$9335$RyrJs
                                                        g$mark*$10000$RyrJs
                                                        (g$rib-mark**$9272$RyrJs
                                                          g$rib$10001$RyrJs)
                                                        (g$reverse$6463$RyrJs
                                                          g$si$10004$RyrJs)))
                                                    '#f))))
                                              (g$hashtable-ref$6559$RyrJs
                                                g$ht$10003$RyrJs
                                                g$sym$9997$RyrJs
                                                '#f))))
                                          g$t$10002$RyrJs)
                                         ((case-lambda
                                            ((g$t$10006$RyrJs)
                                             (if g$t$10006$RyrJs
                                               g$t$10006$RyrJs
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$10007$RyrJs
                                                             (case-lambda
                                                               ((g$sym*$10008$RyrJs
                                                                  g$mark**$10009$RyrJs
                                                                  g$label*$10010$RyrJs)
                                                                (if (null?
                                                                      g$sym*$10008$RyrJs)
                                                                  (g$search$9998$RyrJs
                                                                    (cdr g$subst*$9999$RyrJs)
                                                                    g$mark*$10000$RyrJs)
                                                                  (if (if (eq? (car g$sym*$10008$RyrJs)
                                                                               g$sym$9997$RyrJs)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$9325$RyrJs
                                                                            (car g$mark**$10009$RyrJs)
                                                                            g$mark*$10000$RyrJs))
                                                                        '#f)
                                                                    (car g$label*$10010$RyrJs)
                                                                    (g$f$10007$RyrJs
                                                                      (cdr g$sym*$10008$RyrJs)
                                                                      (cdr g$mark**$10009$RyrJs)
                                                                      (cdr g$label*$10010$RyrJs))))))))
                                                    g$f$10007$RyrJs)
                                                  (g$rib-sym*$9271$RyrJs
                                                    g$rib$10001$RyrJs)
                                                  (g$rib-mark**$9272$RyrJs
                                                    g$rib$10001$RyrJs)
                                                  (g$rib-label*$9273$RyrJs
                                                    g$rib$10001$RyrJs))))))
                                          (g$find-label$9283$RyrJs
                                            g$rib$10001$RyrJs
                                            g$sym$9997$RyrJs
                                            g$mark*$10000$RyrJs)))))
                                    (g$rib-sealed/freq$9274$RyrJs
                                      g$rib$10001$RyrJs))))
                                (car g$subst*$9999$RyrJs))))))))
               g$search$9998$RyrJs)
             (g$stx-subst*$9299$RyrJs g$id$9996$RyrJs)
             (g$stx-mark*$9298$RyrJs g$id$9996$RyrJs))))
         (g$id->sym$9324$RyrJs g$id$9996$RyrJs)))))
   (g$label->binding$9338$RyrJs
     g$label->binding$13204$RyrJs
     (case-lambda
       ((g$x$10011$RyrJs g$r$10012$RyrJs)
        (if (not g$x$10011$RyrJs)
          '(displaced-lexical)
          ((case-lambda
             ((g$t$10013$RyrJs)
              (if g$t$10013$RyrJs
                ((case-lambda
                   ((g$b$10014$RyrJs)
                    (if (if (pair? g$b$10014$RyrJs)
                          (begin
                            '#f
                            (eq? (car g$b$10014$RyrJs) '$core-rtd))
                          '#f)
                      (cons
                        '$rtd
                        (g$map$5807$RyrJs
                          g$bless$9649$RyrJs
                          (cdr g$b$10014$RyrJs)))
                      (if (if (pair? g$b$10014$RyrJs)
                            (begin
                              '#f
                              (eq? (car g$b$10014$RyrJs) 'global-rtd))
                            '#f)
                        ((case-lambda
                           ((g$lib$10015$RyrJs g$loc$10016$RyrJs)
                            (cons
                              '$rtd
                              (symbol-value g$loc$10016$RyrJs))))
                         (g$cadr$6465$RyrJs g$b$10014$RyrJs)
                         (g$cddr$6467$RyrJs g$b$10014$RyrJs))
                        g$b$10014$RyrJs))))
                 g$t$10013$RyrJs)
                ((case-lambda
                   ((g$t$10017$RyrJs)
                    (if g$t$10017$RyrJs
                      (cdr g$t$10017$RyrJs)
                      ((case-lambda
                         ((g$t$10018$RyrJs)
                          (if g$t$10018$RyrJs
                            ((case-lambda
                               ((g$env$10019$RyrJs)
                                ((case-lambda
                                   ((g$t$10020$RyrJs)
                                    (if g$t$10020$RyrJs
                                      ((case-lambda
                                         ((g$p$10021$RyrJs)
                                          (g$cons*$5809$RyrJs
                                            'lexical
                                            (cdr g$p$10021$RyrJs)
                                            '#f)))
                                       g$t$10020$RyrJs)
                                      '(displaced-lexical . #f))))
                                 (g$assq$5795$RyrJs
                                   g$x$10011$RyrJs
                                   (g$interaction-env-locs$9773$RyrJs
                                     g$env$10019$RyrJs)))))
                             g$t$10018$RyrJs)
                            '(displaced-lexical . #f))))
                       (g$top-level-context$9813$RyrJs)))))
                 (g$assq$5795$RyrJs g$x$10011$RyrJs g$r$10012$RyrJs)))))
           (g$imported-label->binding$9061$RyrJs g$x$10011$RyrJs))))))
   (g$make-binding$9339$RyrJs g$make-binding$13205$RyrJs cons)
   (g$binding-type$9340$RyrJs g$binding-type$13206$RyrJs car)
   (g$binding-value$9341$RyrJs g$binding-value$13207$RyrJs cdr)
   (g$raise-unbound-error$9342$RyrJs
     g$raise-unbound-error$13208$RyrJs
     (case-lambda
       ((g$id$10022$RyrJs)
        (g$syntax-violation*$9804$RyrJs
          '#f
          '"unbound identifier"
          g$id$10022$RyrJs
          (g$make-undefined-violation$7212$RyrJs)))))
   (g$syntax-type$9343$RyrJs
     g$syntax-type$13209$RyrJs
     (case-lambda
       ((g$e$10023$RyrJs g$r$10024$RyrJs)
        (if (g$id?$9323$RyrJs g$e$10023$RyrJs)
          ((case-lambda
             ((g$id$10025$RyrJs)
              ((case-lambda
                 ((g$label$10026$RyrJs)
                  ((case-lambda
                     ((g$b$10027$RyrJs)
                      ((case-lambda
                         ((g$type$10028$RyrJs)
                          (begin
                            (if (not g$label$10026$RyrJs)
                              (g$raise-unbound-error$9342$RyrJs
                                g$id$10025$RyrJs)
                              (void))
                            ((case-lambda
                               ((g$t$10029$RyrJs)
                                (if (g$memv$5800$RyrJs
                                      g$t$10029$RyrJs
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable
                                         ctv
                                         local-ctv
                                         global-ctv))
                                  (values
                                    g$type$10028$RyrJs
                                    (g$binding-value$9341$RyrJs
                                      g$b$10027$RyrJs)
                                    g$id$10025$RyrJs)
                                  (values 'other '#f '#f))))
                             g$type$10028$RyrJs))))
                       (g$binding-type$9340$RyrJs g$b$10027$RyrJs))))
                   (g$label->binding$9338$RyrJs
                     g$label$10026$RyrJs
                     g$r$10024$RyrJs))))
               (g$id->label$9336$RyrJs g$id$10025$RyrJs))))
           g$e$10023$RyrJs)
          (if (g$syntax-pair?$9316$RyrJs g$e$10023$RyrJs)
            ((case-lambda
               ((g$id$10030$RyrJs)
                (if (g$id?$9323$RyrJs g$id$10030$RyrJs)
                  ((case-lambda
                     ((g$label$10031$RyrJs)
                      ((case-lambda
                         ((g$b$10032$RyrJs)
                          ((case-lambda
                             ((g$type$10033$RyrJs)
                              (begin
                                (if (not g$label$10031$RyrJs)
                                  (g$raise-unbound-error$9342$RyrJs
                                    g$id$10030$RyrJs)
                                  (void))
                                ((case-lambda
                                   ((g$t$10034$RyrJs)
                                    (if (g$memv$5800$RyrJs
                                          g$t$10034$RyrJs
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd
                                             ctv
                                             local-ctv
                                             global-ctv))
                                      (values
                                        g$type$10033$RyrJs
                                        (g$binding-value$9341$RyrJs
                                          g$b$10032$RyrJs)
                                        g$id$10030$RyrJs)
                                      (values 'call '#f '#f))))
                                 g$type$10033$RyrJs))))
                           (g$binding-type$9340$RyrJs
                             g$b$10032$RyrJs))))
                       (g$label->binding$9338$RyrJs
                         g$label$10031$RyrJs
                         g$r$10024$RyrJs))))
                   (g$id->label$9336$RyrJs g$id$10030$RyrJs))
                  (values 'call '#f '#f))))
             (g$syntax-car$9320$RyrJs g$e$10023$RyrJs))
            ((case-lambda
               ((g$d$10035$RyrJs)
                (if (g$self-evaluating?$9331$RyrJs g$d$10035$RyrJs)
                  (values 'constant g$d$10035$RyrJs '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$9334$RyrJs g$e$10023$RyrJs)))))))
   (g$sanitize-binding$9360$RyrJs
     g$sanitize-binding$13210$RyrJs
     (case-lambda
       ((g$x$10036$RyrJs g$src$10037$RyrJs)
        (if (g$procedure?$6458$RyrJs g$x$10036$RyrJs)
          (g$cons*$5809$RyrJs
            'local-macro
            g$x$10036$RyrJs
            g$src$10037$RyrJs)
          (if (if (pair? g$x$10036$RyrJs)
                (if (eq? (car g$x$10036$RyrJs) 'macro!)
                  (begin
                    '#f
                    (g$procedure?$6458$RyrJs (cdr g$x$10036$RyrJs)))
                  '#f)
                '#f)
            (g$cons*$5809$RyrJs
              'local-macro!
              (cdr g$x$10036$RyrJs)
              g$src$10037$RyrJs)
            (if (if (pair? g$x$10036$RyrJs)
                  (begin '#f (eq? (car g$x$10036$RyrJs) '$rtd))
                  '#f)
              g$x$10036$RyrJs
              (if (if (pair? g$x$10036$RyrJs)
                    (begin '#f (eq? (car g$x$10036$RyrJs) 'ctv))
                    '#f)
                (g$cons*$5809$RyrJs
                  'local-ctv
                  (cdr g$x$10036$RyrJs)
                  g$src$10037$RyrJs)
                (assertion-violation
                  'expand
                  '"invalid transformer"
                  g$x$10036$RyrJs))))))))
   (g$make-variable-transformer$9361$RyrJs
     g$make-variable-transformer$13211$RyrJs
     (case-lambda
       ((g$x$10038$RyrJs)
        (if (g$procedure?$6458$RyrJs g$x$10038$RyrJs)
          (cons 'macro! g$x$10038$RyrJs)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$10038$RyrJs)))))
   (g$make-compile-time-value$9362$RyrJs
     g$make-compile-time-value$13212$RyrJs
     (case-lambda ((g$x$10039$RyrJs) (cons 'ctv g$x$10039$RyrJs))))
   (g$variable-transformer?$9363$RyrJs
     g$variable-transformer?$13213$RyrJs
     (case-lambda
       ((g$x$10040$RyrJs)
        (if (pair? g$x$10040$RyrJs)
          (if (eq? (car g$x$10040$RyrJs) 'macro!)
            (begin '#f (g$procedure?$6458$RyrJs (cdr g$x$10040$RyrJs)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$9364$RyrJs
     g$variable-transformer-procedure$13214$RyrJs
     (case-lambda
       ((g$x$10041$RyrJs)
        (if (g$variable-transformer?$9363$RyrJs g$x$10041$RyrJs)
          (cdr g$x$10041$RyrJs)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$10041$RyrJs)))))
   (g$make-eval-transformer$9365$RyrJs
     g$make-eval-transformer$13215$RyrJs
     (case-lambda
       ((g$x$10042$RyrJs)
        (g$sanitize-binding$9360$RyrJs
          (eval-core (g$expanded->core$8795$RyrJs g$x$10042$RyrJs))
          g$x$10042$RyrJs))))
   (g$parse-define$9626$RyrJs
     g$parse-define$13216$RyrJs
     (case-lambda
       ((g$x$10043$RyrJs)
        ((case-lambda
           ((g$t$10044$RyrJs)
            ((case-lambda
               ((g$ls/false$10045$RyrJs)
                (if (if g$ls/false$10045$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10046$RyrJs
                               g$fmls$10047$RyrJs
                               g$b$10048$RyrJs
                               g$b*$10049$RyrJs)
                             (g$id?$9323$RyrJs g$id$10046$RyrJs)))
                          g$ls/false$10045$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10050$RyrJs
                         g$fmls$10051$RyrJs
                         g$b$10052$RyrJs
                         g$b*$10053$RyrJs)
                       (begin
                         (g$verify-formals$9706$RyrJs
                           g$fmls$10051$RyrJs
                           g$x$10043$RyrJs)
                         (values
                           g$id$10050$RyrJs
                           (cons
                             'defun
                             (cons
                               g$fmls$10051$RyrJs
                               (cons
                                 g$b$10052$RyrJs
                                 g$b*$10053$RyrJs)))))))
                    g$ls/false$10045$RyrJs)
                  ((case-lambda
                     ((g$t$10054$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10055$RyrJs)
                          (if (if g$ls/false$10055$RyrJs
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$10056$RyrJs
                                         g$val$10057$RyrJs)
                                       (g$id?$9323$RyrJs
                                         g$id$10056$RyrJs)))
                                    g$ls/false$10055$RyrJs))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$10058$RyrJs g$val$10059$RyrJs)
                                 (values
                                   g$id$10058$RyrJs
                                   (cons 'expr g$val$10059$RyrJs))))
                              g$ls/false$10055$RyrJs)
                            ((case-lambda
                               ((g$t$10060$RyrJs)
                                ((case-lambda
                                   ((g$ls/false$10061$RyrJs)
                                    (if (if g$ls/false$10061$RyrJs
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$10062$RyrJs)
                                                 (g$id?$9323$RyrJs
                                                   g$id$10062$RyrJs)))
                                              g$ls/false$10061$RyrJs))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$10063$RyrJs)
                                           (values
                                             g$id$10063$RyrJs
                                             (cons
                                               'expr
                                               (g$bless$9649$RyrJs
                                                 '(void))))))
                                        g$ls/false$10061$RyrJs)
                                      (g$syntax-violation$9805$RyrJs
                                        '#f
                                        '"invalid syntax"
                                        g$t$10060$RyrJs))))
                                 (g$syntax-dispatch$9686$RyrJs
                                   g$t$10060$RyrJs
                                   '(_ any)))))
                             g$t$10054$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10054$RyrJs
                         '(_ any any)))))
                   g$t$10044$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10044$RyrJs
               '(_ (any . any) any . each-any)))))
         g$x$10043$RyrJs))))
   (g$parse-define-syntax$9627$RyrJs
     g$parse-define-syntax$13217$RyrJs
     (case-lambda
       ((g$x$10064$RyrJs)
        ((case-lambda
           ((g$t$10065$RyrJs)
            ((case-lambda
               ((g$ls/false$10066$RyrJs)
                (if (if g$ls/false$10066$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10067$RyrJs g$val$10068$RyrJs)
                             (g$id?$9323$RyrJs g$id$10067$RyrJs)))
                          g$ls/false$10066$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10069$RyrJs g$val$10070$RyrJs)
                       (values g$id$10069$RyrJs g$val$10070$RyrJs)))
                    g$ls/false$10066$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10065$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10065$RyrJs
               '(_ any any)))))
         g$x$10064$RyrJs))))
   (g$scheme-stx-hashtable$9628$RyrJs
     g$scheme-stx-hashtable$13218$RyrJs
     (g$make-eq-hashtable$6556$RyrJs))
   (g$scheme-stx$9629$RyrJs
     g$scheme-stx$13219$RyrJs
     (case-lambda
       ((g$sym$10071$RyrJs)
        ((case-lambda
           ((g$t$10072$RyrJs)
            (if g$t$10072$RyrJs
              g$t$10072$RyrJs
              (begin
                '#f
                ((case-lambda
                   ((g$subst$10073$RyrJs)
                    ((case-lambda
                       ((g$stx$10074$RyrJs)
                        ((case-lambda
                           ((g$stx$10075$RyrJs)
                            (begin
                              (g$hashtable-set!$6560$RyrJs
                                g$scheme-stx-hashtable$9628$RyrJs
                                g$sym$10071$RyrJs
                                g$stx$10075$RyrJs)
                              g$stx$10075$RyrJs)))
                         ((case-lambda
                            ((g$t$10076$RyrJs)
                             (if g$t$10076$RyrJs
                               ((case-lambda
                                  ((g$x$10077$RyrJs)
                                   ((case-lambda
                                      ((g$name$10078$RyrJs
                                         g$label$10079$RyrJs)
                                       (g$add-subst$9313$RyrJs
                                         (g$make-rib$9270$RyrJs
                                           (list g$name$10078$RyrJs)
                                           (list g$top-mark*$9256$RyrJs)
                                           (list g$label$10079$RyrJs)
                                           '#f
                                           '#f)
                                         g$stx$10074$RyrJs)))
                                    (car g$x$10077$RyrJs)
                                    (cdr g$x$10077$RyrJs))))
                                g$t$10076$RyrJs)
                               g$stx$10074$RyrJs)))
                          (g$assq$5795$RyrJs
                            g$sym$10071$RyrJs
                            g$subst$10073$RyrJs)))))
                     (g$make-stx$9296$RyrJs
                       g$sym$10071$RyrJs
                       g$top-mark*$9256$RyrJs
                       '()
                       '()))))
                 (g$library-subst$9019$RyrJs
                   (g$find-library-by-name$9055$RyrJs
                     '(psyntax system $all))))))))
         (g$hashtable-ref$6559$RyrJs
           g$scheme-stx-hashtable$9628$RyrJs
           g$sym$10071$RyrJs
           '#f)))))
   (g$lexical-var$9630$RyrJs g$lexical-var$13220$RyrJs car)
   (g$lexical-mutable?$9631$RyrJs g$lexical-mutable?$13221$RyrJs cdr)
   (g$set-lexical-mutable!$9632$RyrJs
     g$set-lexical-mutable!$13222$RyrJs
     set-cdr!)
   (g$add-lexical$9633$RyrJs
     g$add-lexical$13223$RyrJs
     (case-lambda
       ((g$lab$10080$RyrJs g$lex$10081$RyrJs g$r$10082$RyrJs)
        (cons
          (g$cons*$5809$RyrJs
            g$lab$10080$RyrJs
            'lexical
            g$lex$10081$RyrJs
            '#f)
          g$r$10082$RyrJs))))
   (g$add-lexicals$9634$RyrJs
     g$add-lexicals$13224$RyrJs
     (case-lambda
       ((g$lab*$10083$RyrJs g$lex*$10084$RyrJs g$r$10085$RyrJs)
        (if (null? g$lab*$10083$RyrJs)
          g$r$10085$RyrJs
          (g$add-lexicals$9634$RyrJs
            (cdr g$lab*$10083$RyrJs)
            (cdr g$lex*$10084$RyrJs)
            (g$add-lexical$9633$RyrJs
              (car g$lab*$10083$RyrJs)
              (car g$lex*$10084$RyrJs)
              g$r$10085$RyrJs))))))
   (g$letrec-helper$9635$RyrJs
     g$letrec-helper$13225$RyrJs
     (case-lambda
       ((g$e$10086$RyrJs
          g$r$10087$RyrJs
          g$mr$10088$RyrJs
          g$build$10089$RyrJs)
        ((case-lambda
           ((g$t$10090$RyrJs)
            ((case-lambda
               ((g$ls/false$10091$RyrJs)
                (if g$ls/false$10091$RyrJs
                  (apply
                    (case-lambda
                      ((g$lhs*$10092$RyrJs
                         g$rhs*$10093$RyrJs
                         g$b$10094$RyrJs
                         g$b*$10095$RyrJs)
                       (if (not (g$valid-bound-ids?$9328$RyrJs
                                  g$lhs*$10092$RyrJs))
                         (g$invalid-fmls-error$9651$RyrJs
                           g$e$10086$RyrJs
                           g$lhs*$10092$RyrJs)
                         ((case-lambda
                            ((g$lex*$10096$RyrJs g$lab*$10097$RyrJs)
                             ((case-lambda
                                ((g$rib$10098$RyrJs g$r$10099$RyrJs)
                                 ((case-lambda
                                    ((g$body$10100$RyrJs
                                       g$rhs*$10101$RyrJs)
                                     (g$build$10089$RyrJs
                                       '#f
                                       g$lex*$10096$RyrJs
                                       g$rhs*$10101$RyrJs
                                       g$body$10100$RyrJs)))
                                  (g$chi-internal$9715$RyrJs
                                    (g$add-subst$9313$RyrJs
                                      g$rib$10098$RyrJs
                                      (cons
                                        g$b$10094$RyrJs
                                        g$b*$10095$RyrJs))
                                    g$r$10099$RyrJs
                                    g$mr$10088$RyrJs)
                                  (g$chi-expr*$9702$RyrJs
                                    (g$map$5807$RyrJs
                                      (case-lambda
                                        ((g$x$10102$RyrJs)
                                         (g$add-subst$9313$RyrJs
                                           g$rib$10098$RyrJs
                                           g$x$10102$RyrJs)))
                                      g$rhs*$10093$RyrJs)
                                    g$r$10099$RyrJs
                                    g$mr$10088$RyrJs))))
                              (g$make-full-rib$9289$RyrJs
                                g$lhs*$10092$RyrJs
                                g$lab*$10097$RyrJs)
                              (g$add-lexicals$9634$RyrJs
                                g$lab*$10097$RyrJs
                                g$lex*$10096$RyrJs
                                g$r$10087$RyrJs))))
                          (g$map$5807$RyrJs
                            g$gen-lexical$9258$RyrJs
                            g$lhs*$10092$RyrJs)
                          (g$map$5807$RyrJs
                            g$gen-label$9260$RyrJs
                            g$lhs*$10092$RyrJs)))))
                    g$ls/false$10091$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10090$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10090$RyrJs
               '(_ #(each (any any)) any . each-any)))))
         g$e$10086$RyrJs))))
   (g$letrec-transformer$9636$RyrJs
     g$letrec-transformer$13226$RyrJs
     (case-lambda
       ((g$e$10103$RyrJs g$r$10104$RyrJs g$mr$10105$RyrJs)
        (g$letrec-helper$9635$RyrJs
          g$e$10103$RyrJs
          g$r$10104$RyrJs
          g$mr$10105$RyrJs
          g$build-letrec$9250$RyrJs))))
   (g$letrec*-transformer$9637$RyrJs
     g$letrec*-transformer$13227$RyrJs
     (case-lambda
       ((g$e$10106$RyrJs g$r$10107$RyrJs g$mr$10108$RyrJs)
        (g$letrec-helper$9635$RyrJs
          g$e$10106$RyrJs
          g$r$10107$RyrJs
          g$mr$10108$RyrJs
          g$build-letrec*$9251$RyrJs))))
   (g$fluid-let-syntax-transformer$9638$RyrJs
     g$fluid-let-syntax-transformer$13228$RyrJs
     (case-lambda
       ((g$e$10109$RyrJs g$r$10110$RyrJs g$mr$10111$RyrJs)
        (letrec* ((g$lookup$10112$RyrJs
                    (case-lambda
                      ((g$x$10122$RyrJs)
                       ((case-lambda
                          ((g$t$10123$RyrJs)
                           (if g$t$10123$RyrJs
                             g$t$10123$RyrJs
                             (begin
                               '#f
                               (g$syntax-violation$9805$RyrJs
                                 '#f
                                 '"unbound identifier"
                                 g$e$10109$RyrJs
                                 g$x$10122$RyrJs)))))
                        (g$id->label$9336$RyrJs g$x$10122$RyrJs))))))
          ((case-lambda
             ((g$t$10113$RyrJs)
              ((case-lambda
                 ((g$ls/false$10114$RyrJs)
                  (if g$ls/false$10114$RyrJs
                    (apply
                      (case-lambda
                        ((g$lhs*$10115$RyrJs
                           g$rhs*$10116$RyrJs
                           g$b$10117$RyrJs
                           g$b*$10118$RyrJs)
                         (if (not (g$valid-bound-ids?$9328$RyrJs
                                    g$lhs*$10115$RyrJs))
                           (g$invalid-fmls-error$9651$RyrJs
                             g$e$10109$RyrJs
                             g$lhs*$10115$RyrJs)
                           ((case-lambda
                              ((g$lab*$10119$RyrJs g$rhs*$10120$RyrJs)
                               (g$chi-internal$9715$RyrJs
                                 (cons g$b$10117$RyrJs g$b*$10118$RyrJs)
                                 (append
                                   (g$map$5807$RyrJs
                                     cons
                                     g$lab*$10119$RyrJs
                                     g$rhs*$10120$RyrJs)
                                   g$r$10110$RyrJs)
                                 (append
                                   (g$map$5807$RyrJs
                                     cons
                                     g$lab*$10119$RyrJs
                                     g$rhs*$10120$RyrJs)
                                   g$mr$10111$RyrJs))))
                            (g$map$5807$RyrJs
                              g$lookup$10112$RyrJs
                              g$lhs*$10115$RyrJs)
                            (g$map$5807$RyrJs
                              (case-lambda
                                ((g$x$10121$RyrJs)
                                 (g$make-eval-transformer$9365$RyrJs
                                   (g$expand-transformer$9734$RyrJs
                                     g$x$10121$RyrJs
                                     g$mr$10111$RyrJs))))
                              g$rhs*$10116$RyrJs)))))
                      g$ls/false$10114$RyrJs)
                    (g$syntax-violation$9805$RyrJs
                      '#f
                      '"invalid syntax"
                      g$t$10113$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$10113$RyrJs
                 '(_ #(each (any any)) any . each-any)))))
           g$e$10109$RyrJs)))))
   (g$type-descriptor-transformer$9639$RyrJs
     g$type-descriptor-transformer$13229$RyrJs
     (case-lambda
       ((g$e$10124$RyrJs g$r$10125$RyrJs g$mr$10126$RyrJs)
        ((case-lambda
           ((g$t$10127$RyrJs)
            ((case-lambda
               ((g$ls/false$10128$RyrJs)
                (if (if g$ls/false$10128$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10129$RyrJs)
                             (g$id?$9323$RyrJs g$id$10129$RyrJs)))
                          g$ls/false$10128$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10130$RyrJs)
                       ((case-lambda
                          ((g$lab$10131$RyrJs)
                           ((case-lambda
                              ((g$b$10132$RyrJs)
                               ((case-lambda
                                  ((g$type$10133$RyrJs)
                                   (begin
                                     (if (not g$lab$10131$RyrJs)
                                       (g$raise-unbound-error$9342$RyrJs
                                         g$id$10130$RyrJs)
                                       (void))
                                     (if (not (if (eq? g$type$10133$RyrJs
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$9341$RyrJs
                                                           g$b$10132$RyrJs))))
                                                '#f))
                                       (g$syntax-violation$9805$RyrJs
                                         '#f
                                         '"not a record type"
                                         g$e$10124$RyrJs)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$9341$RyrJs
                                         g$b$10132$RyrJs)))))
                                (g$binding-type$9340$RyrJs
                                  g$b$10132$RyrJs))))
                            (g$label->binding$9338$RyrJs
                              g$lab$10131$RyrJs
                              g$r$10125$RyrJs))))
                        (g$id->label$9336$RyrJs g$id$10130$RyrJs))))
                    g$ls/false$10128$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10127$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10127$RyrJs '(_ any)))))
         g$e$10124$RyrJs))))
   (g$record-type-descriptor-transformer$9640$RyrJs
     g$record-type-descriptor-transformer$13230$RyrJs
     (case-lambda
       ((g$e$10134$RyrJs g$r$10135$RyrJs g$mr$10136$RyrJs)
        ((case-lambda
           ((g$t$10137$RyrJs)
            ((case-lambda
               ((g$ls/false$10138$RyrJs)
                (if (if g$ls/false$10138$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10139$RyrJs)
                             (g$id?$9323$RyrJs g$id$10139$RyrJs)))
                          g$ls/false$10138$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10140$RyrJs)
                       ((case-lambda
                          ((g$lab$10141$RyrJs)
                           ((case-lambda
                              ((g$b$10142$RyrJs)
                               ((case-lambda
                                  ((g$type$10143$RyrJs)
                                   (begin
                                     (if (not g$lab$10141$RyrJs)
                                       (g$raise-unbound-error$9342$RyrJs
                                         g$id$10140$RyrJs)
                                       (void))
                                     (if (not (if (eq? g$type$10143$RyrJs
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$9341$RyrJs
                                                      g$b$10142$RyrJs)))
                                                '#f))
                                       (g$syntax-violation$9805$RyrJs
                                         '#f
                                         '"not a record type"
                                         g$e$10134$RyrJs)
                                       (void))
                                     (g$chi-expr$9704$RyrJs
                                       (car (g$binding-value$9341$RyrJs
                                              g$b$10142$RyrJs))
                                       g$r$10135$RyrJs
                                       g$mr$10136$RyrJs))))
                                (g$binding-type$9340$RyrJs
                                  g$b$10142$RyrJs))))
                            (g$label->binding$9338$RyrJs
                              g$lab$10141$RyrJs
                              g$r$10135$RyrJs))))
                        (g$id->label$9336$RyrJs g$id$10140$RyrJs))))
                    g$ls/false$10138$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10137$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10137$RyrJs '(_ any)))))
         g$e$10134$RyrJs))))
   (g$record-constructor-descriptor-transformer$9641$RyrJs
     g$record-constructor-descriptor-transformer$13231$RyrJs
     (case-lambda
       ((g$e$10144$RyrJs g$r$10145$RyrJs g$mr$10146$RyrJs)
        ((case-lambda
           ((g$t$10147$RyrJs)
            ((case-lambda
               ((g$ls/false$10148$RyrJs)
                (if (if g$ls/false$10148$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10149$RyrJs)
                             (g$id?$9323$RyrJs g$id$10149$RyrJs)))
                          g$ls/false$10148$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10150$RyrJs)
                       ((case-lambda
                          ((g$lab$10151$RyrJs)
                           ((case-lambda
                              ((g$b$10152$RyrJs)
                               ((case-lambda
                                  ((g$type$10153$RyrJs)
                                   (begin
                                     (if (not g$lab$10151$RyrJs)
                                       (g$raise-unbound-error$9342$RyrJs
                                         g$id$10150$RyrJs)
                                       (void))
                                     (if (not (if (eq? g$type$10153$RyrJs
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$9341$RyrJs
                                                      g$b$10152$RyrJs)))
                                                '#f))
                                       (g$syntax-violation$9805$RyrJs
                                         '#f
                                         '"invalid type"
                                         g$e$10144$RyrJs)
                                       (void))
                                     (g$chi-expr$9704$RyrJs
                                       (g$cadr$6465$RyrJs
                                         (g$binding-value$9341$RyrJs
                                           g$b$10152$RyrJs))
                                       g$r$10145$RyrJs
                                       g$mr$10146$RyrJs))))
                                (g$binding-type$9340$RyrJs
                                  g$b$10152$RyrJs))))
                            (g$label->binding$9338$RyrJs
                              g$lab$10151$RyrJs
                              g$r$10145$RyrJs))))
                        (g$id->label$9336$RyrJs g$id$10150$RyrJs))))
                    g$ls/false$10148$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10147$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10147$RyrJs '(_ any)))))
         g$e$10144$RyrJs))))
   (g$when-macro$9642$RyrJs
     g$when-macro$13232$RyrJs
     (case-lambda
       ((g$e$10154$RyrJs)
        ((case-lambda
           ((g$t$10155$RyrJs)
            ((case-lambda
               ((g$ls/false$10156$RyrJs)
                (if g$ls/false$10156$RyrJs
                  (apply
                    (case-lambda
                      ((g$test$10157$RyrJs
                         g$e$10158$RyrJs
                         g$e*$10159$RyrJs)
                       (g$bless$9649$RyrJs
                         (list
                           'if
                           g$test$10157$RyrJs
                           (cons
                             'begin
                             (cons
                               g$e$10158$RyrJs
                               g$e*$10159$RyrJs))))))
                    g$ls/false$10156$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10155$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10155$RyrJs
               '(_ any any . each-any)))))
         g$e$10154$RyrJs))))
   (g$unless-macro$9643$RyrJs
     g$unless-macro$13233$RyrJs
     (case-lambda
       ((g$e$10160$RyrJs)
        ((case-lambda
           ((g$t$10161$RyrJs)
            ((case-lambda
               ((g$ls/false$10162$RyrJs)
                (if g$ls/false$10162$RyrJs
                  (apply
                    (case-lambda
                      ((g$test$10163$RyrJs
                         g$e$10164$RyrJs
                         g$e*$10165$RyrJs)
                       (g$bless$9649$RyrJs
                         (list
                           'if
                           (list 'not g$test$10163$RyrJs)
                           (cons
                             'begin
                             (cons
                               g$e$10164$RyrJs
                               g$e*$10165$RyrJs))))))
                    g$ls/false$10162$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10161$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10161$RyrJs
               '(_ any any . each-any)))))
         g$e$10160$RyrJs))))
   (g$if-transformer$9644$RyrJs
     g$if-transformer$13234$RyrJs
     (case-lambda
       ((g$e$10166$RyrJs g$r$10167$RyrJs g$mr$10168$RyrJs)
        ((case-lambda
           ((g$t$10169$RyrJs)
            ((case-lambda
               ((g$ls/false$10170$RyrJs)
                (if g$ls/false$10170$RyrJs
                  (apply
                    (case-lambda
                      ((g$e0$10171$RyrJs
                         g$e1$10172$RyrJs
                         g$e2$10173$RyrJs)
                       (list
                         'if
                         (g$chi-expr$9704$RyrJs
                           g$e0$10171$RyrJs
                           g$r$10167$RyrJs
                           g$mr$10168$RyrJs)
                         (g$chi-expr$9704$RyrJs
                           g$e1$10172$RyrJs
                           g$r$10167$RyrJs
                           g$mr$10168$RyrJs)
                         (g$chi-expr$9704$RyrJs
                           g$e2$10173$RyrJs
                           g$r$10167$RyrJs
                           g$mr$10168$RyrJs))))
                    g$ls/false$10170$RyrJs)
                  ((case-lambda
                     ((g$t$10174$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10175$RyrJs)
                          (if g$ls/false$10175$RyrJs
                            (apply
                              (case-lambda
                                ((g$e0$10176$RyrJs g$e1$10177$RyrJs)
                                 (list
                                   'if
                                   (g$chi-expr$9704$RyrJs
                                     g$e0$10176$RyrJs
                                     g$r$10167$RyrJs
                                     g$mr$10168$RyrJs)
                                   (g$chi-expr$9704$RyrJs
                                     g$e1$10177$RyrJs
                                     g$r$10167$RyrJs
                                     g$mr$10168$RyrJs)
                                   (g$build-void$9249$RyrJs))))
                              g$ls/false$10175$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$10174$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10174$RyrJs
                         '(_ any any)))))
                   g$t$10169$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10169$RyrJs
               '(_ any any any)))))
         g$e$10166$RyrJs))))
   (g$case-macro$9645$RyrJs
     g$case-macro$13235$RyrJs
     (case-lambda
       ((g$e$10178$RyrJs)
        (letrec* ((g$build-last$10179$RyrJs
                    (case-lambda
                      ((g$cls$10199$RyrJs)
                       ((case-lambda
                          ((g$t$10200$RyrJs)
                           ((case-lambda
                              ((g$ls/false$10201$RyrJs)
                               (if g$ls/false$10201$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$e$10202$RyrJs g$e*$10203$RyrJs)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$10202$RyrJs
                                          g$e*$10203$RyrJs))))
                                   g$ls/false$10201$RyrJs)
                                 ((case-lambda
                                    ((g$t$10204$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$10205$RyrJs)
                                         (if g$ls/false$10205$RyrJs
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$10180$RyrJs
                                                  g$cls$10199$RyrJs
                                                  '(if #f #f))))
                                             g$ls/false$10205$RyrJs)
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$t$10204$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$10204$RyrJs
                                        '_))))
                                  g$t$10200$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$10200$RyrJs
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$10199$RyrJs))))
                  (g$build-one$10180$RyrJs
                    (case-lambda
                      ((g$cls$10192$RyrJs g$k$10193$RyrJs)
                       ((case-lambda
                          ((g$t$10194$RyrJs)
                           ((case-lambda
                              ((g$ls/false$10195$RyrJs)
                               (if g$ls/false$10195$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$d*$10196$RyrJs
                                        g$e$10197$RyrJs
                                        g$e*$10198$RyrJs)
                                      (if (= '1
                                             (length g$d*$10196$RyrJs))
                                        (list
                                          'if
                                          (list
                                            'eqv?
                                            't
                                            (list
                                              'quote
                                              (car g$d*$10196$RyrJs)))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$10197$RyrJs
                                              g$e*$10198$RyrJs))
                                          g$k$10193$RyrJs)
                                        (list
                                          'if
                                          (list
                                            'memv
                                            't
                                            (list
                                              'quote
                                              g$d*$10196$RyrJs))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$10197$RyrJs
                                              g$e*$10198$RyrJs))
                                          g$k$10193$RyrJs))))
                                   g$ls/false$10195$RyrJs)
                                 (g$syntax-violation$9805$RyrJs
                                   '#f
                                   '"invalid syntax"
                                   g$t$10194$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$10194$RyrJs
                              '(each-any any . each-any)))))
                        g$cls$10192$RyrJs)))))
          ((case-lambda
             ((g$t$10181$RyrJs)
              ((case-lambda
                 ((g$ls/false$10182$RyrJs)
                  (if g$ls/false$10182$RyrJs
                    (apply
                      (case-lambda
                        ((g$expr$10183$RyrJs)
                         (g$bless$9649$RyrJs
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$10183$RyrJs))
                               '((if #f #f)))))))
                      g$ls/false$10182$RyrJs)
                    ((case-lambda
                       ((g$t$10184$RyrJs)
                        ((case-lambda
                           ((g$ls/false$10185$RyrJs)
                            (if g$ls/false$10185$RyrJs
                              (apply
                                (case-lambda
                                  ((g$expr$10186$RyrJs
                                     g$cls$10187$RyrJs
                                     g$cls*$10188$RyrJs)
                                   (g$bless$9649$RyrJs
                                     (list
                                       'let
                                       (list
                                         (list 't g$expr$10186$RyrJs))
                                       ((letrec ((g$f$10189$RyrJs
                                                   (case-lambda
                                                     ((g$cls$10190$RyrJs
                                                        g$cls*$10191$RyrJs)
                                                      (if (null?
                                                            g$cls*$10191$RyrJs)
                                                        (g$build-last$10179$RyrJs
                                                          g$cls$10190$RyrJs)
                                                        (g$build-one$10180$RyrJs
                                                          g$cls$10190$RyrJs
                                                          (g$f$10189$RyrJs
                                                            (car g$cls*$10191$RyrJs)
                                                            (cdr g$cls*$10191$RyrJs))))))))
                                          g$f$10189$RyrJs)
                                        g$cls$10187$RyrJs
                                        g$cls*$10188$RyrJs)))))
                                g$ls/false$10185$RyrJs)
                              (g$syntax-violation$9805$RyrJs
                                '#f
                                '"invalid syntax"
                                g$t$10184$RyrJs))))
                         (g$syntax-dispatch$9686$RyrJs
                           g$t$10184$RyrJs
                           '(_ any any . each-any)))))
                     g$t$10181$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$10181$RyrJs
                 '(_ any)))))
           g$e$10178$RyrJs)))))
   (g$quote-transformer$9646$RyrJs
     g$quote-transformer$13236$RyrJs
     (case-lambda
       ((g$e$10206$RyrJs g$r$10207$RyrJs g$mr$10208$RyrJs)
        ((case-lambda
           ((g$t$10209$RyrJs)
            ((case-lambda
               ((g$ls/false$10210$RyrJs)
                (if g$ls/false$10210$RyrJs
                  (apply
                    (case-lambda
                      ((g$datum$10211$RyrJs)
                       (list
                         'quote
                         (g$stx->datum$9334$RyrJs
                           g$datum$10211$RyrJs))))
                    g$ls/false$10210$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10209$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10209$RyrJs '(_ any)))))
         g$e$10206$RyrJs))))
   (g$case-lambda-transformer$9647$RyrJs
     g$case-lambda-transformer$13237$RyrJs
     (case-lambda
       ((g$e$10212$RyrJs g$r$10213$RyrJs g$mr$10214$RyrJs)
        ((case-lambda
           ((g$t$10215$RyrJs)
            ((case-lambda
               ((g$ls/false$10216$RyrJs)
                (if g$ls/false$10216$RyrJs
                  (apply
                    (case-lambda
                      ((g$fmls*$10217$RyrJs
                         g$b*$10218$RyrJs
                         g$b**$10219$RyrJs)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$9708$RyrJs
                              g$e$10212$RyrJs
                              g$fmls*$10217$RyrJs
                              (g$map$5807$RyrJs
                                cons
                                g$b*$10218$RyrJs
                                g$b**$10219$RyrJs)
                              g$r$10213$RyrJs
                              g$mr$10214$RyrJs)))
                         (case-lambda
                           ((g$fmls*$10222$RyrJs g$body*$10223$RyrJs)
                            ((case-lambda
                               ((g$body*$10224$RyrJs
                                  g$fmls*$10225$RyrJs)
                                (g$build-case-lambda$9246$RyrJs
                                  '#f
                                  g$fmls*$10225$RyrJs
                                  g$body*$10224$RyrJs)))
                             g$body*$10223$RyrJs
                             g$fmls*$10222$RyrJs))))))
                    g$ls/false$10216$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10215$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10215$RyrJs
               '(_ . #(each (any any . each-any)))))))
         g$e$10212$RyrJs))))
   (g$lambda-transformer$9648$RyrJs
     g$lambda-transformer$13238$RyrJs
     (case-lambda
       ((g$e$10226$RyrJs g$r$10227$RyrJs g$mr$10228$RyrJs)
        ((case-lambda
           ((g$t$10229$RyrJs)
            ((case-lambda
               ((g$ls/false$10230$RyrJs)
                (if g$ls/false$10230$RyrJs
                  (apply
                    (case-lambda
                      ((g$fmls$10231$RyrJs
                         g$b$10232$RyrJs
                         g$b*$10233$RyrJs)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$9707$RyrJs
                              g$e$10226$RyrJs
                              g$fmls$10231$RyrJs
                              (cons g$b$10232$RyrJs g$b*$10233$RyrJs)
                              g$r$10227$RyrJs
                              g$mr$10228$RyrJs)))
                         (case-lambda
                           ((g$fmls$10236$RyrJs g$body$10237$RyrJs)
                            ((case-lambda
                               ((g$body$10238$RyrJs g$fmls$10239$RyrJs)
                                (g$build-lambda$9245$RyrJs
                                  '#f
                                  g$fmls$10239$RyrJs
                                  g$body$10238$RyrJs)))
                             g$body$10237$RyrJs
                             g$fmls$10236$RyrJs))))))
                    g$ls/false$10230$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10229$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10229$RyrJs
               '(_ any any . each-any)))))
         g$e$10226$RyrJs))))
   (g$bless$9649$RyrJs
     g$bless$13239$RyrJs
     (case-lambda
       ((g$x$10240$RyrJs)
        (g$mkstx$9311$RyrJs
          ((letrec ((g$f$10241$RyrJs
                      (case-lambda
                        ((g$x$10242$RyrJs)
                         (if (g$stx?$9295$RyrJs g$x$10242$RyrJs)
                           g$x$10242$RyrJs
                           (if (pair? g$x$10242$RyrJs)
                             (cons
                               (g$f$10241$RyrJs (car g$x$10242$RyrJs))
                               (g$f$10241$RyrJs (cdr g$x$10242$RyrJs)))
                             (if (g$symbol?$6456$RyrJs g$x$10242$RyrJs)
                               (g$scheme-stx$9629$RyrJs g$x$10242$RyrJs)
                               (if (g$vector?$6454$RyrJs
                                     g$x$10242$RyrJs)
                                 (g$vector-map$6516$RyrJs
                                   g$f$10241$RyrJs
                                   g$x$10242$RyrJs)
                                 g$x$10242$RyrJs))))))))
             g$f$10241$RyrJs)
           g$x$10240$RyrJs)
          '()
          '()
          '()))))
   (g$with-syntax-macro$9650$RyrJs
     g$with-syntax-macro$13240$RyrJs
     (case-lambda
       ((g$e$10243$RyrJs)
        ((case-lambda
           ((g$t$10244$RyrJs)
            ((case-lambda
               ((g$ls/false$10245$RyrJs)
                (if g$ls/false$10245$RyrJs
                  (apply
                    (case-lambda
                      ((g$pat*$10246$RyrJs
                         g$expr*$10247$RyrJs
                         g$b$10248$RyrJs
                         g$b*$10249$RyrJs)
                       ((case-lambda
                          ((g$idn*$10250$RyrJs)
                           (begin
                             (g$verify-formals$9706$RyrJs
                               (g$map$5807$RyrJs car g$idn*$10250$RyrJs)
                               g$e$10243$RyrJs)
                             ((case-lambda
                                ((g$t*$10251$RyrJs)
                                 (g$bless$9649$RyrJs
                                   (list
                                     'let
                                     (g$map$5807$RyrJs
                                       list
                                       g$t*$10251$RyrJs
                                       g$expr*$10247$RyrJs)
                                     ((letrec ((g$f$10252$RyrJs
                                                 (case-lambda
                                                   ((g$pat*$10253$RyrJs
                                                      g$t*$10254$RyrJs)
                                                    (if (null?
                                                          g$pat*$10253$RyrJs)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$10248$RyrJs
                                                            g$b*$10249$RyrJs)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$10254$RyrJs)
                                                        '()
                                                        (list
                                                          (car g$pat*$10253$RyrJs)
                                                          (g$f$10252$RyrJs
                                                            (cdr g$pat*$10253$RyrJs)
                                                            (cdr g$t*$10254$RyrJs)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$10253$RyrJs))
                                                            (car g$t*$10254$RyrJs)))))))))
                                        g$f$10252$RyrJs)
                                      g$pat*$10246$RyrJs
                                      g$t*$10251$RyrJs)))))
                              (g$generate-temporaries$9795$RyrJs
                                g$expr*$10247$RyrJs)))))
                        ((letrec ((g$f$10255$RyrJs
                                    (case-lambda
                                      ((g$pat*$10256$RyrJs)
                                       (if (null? g$pat*$10256$RyrJs)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$9685$RyrJs
                                                (car g$pat*$10256$RyrJs)
                                                '())))
                                           (case-lambda
                                             ((g$pat$10259$RyrJs
                                                g$idn*$10260$RyrJs)
                                              ((case-lambda
                                                 ((g$idn*$10261$RyrJs
                                                    g$pat$10262$RyrJs)
                                                  (append
                                                    g$idn*$10261$RyrJs
                                                    (g$f$10255$RyrJs
                                                      (cdr g$pat*$10256$RyrJs)))))
                                               g$idn*$10260$RyrJs
                                               g$pat$10259$RyrJs)))))))))
                           g$f$10255$RyrJs)
                         g$pat*$10246$RyrJs))))
                    g$ls/false$10245$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10244$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10244$RyrJs
               '(_ #(each (any any)) any . each-any)))))
         g$e$10243$RyrJs))))
   (g$invalid-fmls-error$9651$RyrJs
     g$invalid-fmls-error$13241$RyrJs
     (case-lambda
       ((g$stx$10263$RyrJs g$fmls$10264$RyrJs)
        ((case-lambda
           ((g$t$10265$RyrJs)
            ((case-lambda
               ((g$ls/false$10266$RyrJs)
                (if g$ls/false$10266$RyrJs
                  (apply
                    (case-lambda
                      ((g$id*$10267$RyrJs g$last$10268$RyrJs)
                       ((letrec ((g$f$10269$RyrJs
                                   (case-lambda
                                     ((g$id*$10270$RyrJs)
                                      (if (null? g$id*$10270$RyrJs)
                                        (values)
                                        (if (not (g$id?$9323$RyrJs
                                                   (car g$id*$10270$RyrJs)))
                                          (g$syntax-violation$9805$RyrJs
                                            '#f
                                            '"not an identifier"
                                            g$stx$10263$RyrJs
                                            (car g$id*$10270$RyrJs))
                                          (begin
                                            (g$f$10269$RyrJs
                                              (cdr g$id*$10270$RyrJs))
                                            (if (g$bound-id-member?$9330$RyrJs
                                                  (car g$id*$10270$RyrJs)
                                                  (cdr g$id*$10270$RyrJs))
                                              (g$syntax-violation$9805$RyrJs
                                                '#f
                                                '"duplicate binding"
                                                g$stx$10263$RyrJs
                                                (car g$id*$10270$RyrJs))
                                              (void)))))))))
                          g$f$10269$RyrJs)
                        (if (g$id?$9323$RyrJs g$last$10268$RyrJs)
                          (cons g$last$10268$RyrJs g$id*$10267$RyrJs)
                          (if (g$syntax-null?$9318$RyrJs
                                g$last$10268$RyrJs)
                            g$id*$10267$RyrJs
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"not an identifier"
                              g$stx$10263$RyrJs
                              g$last$10268$RyrJs))))))
                    g$ls/false$10266$RyrJs)
                  ((case-lambda
                     ((g$t$10271$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10272$RyrJs)
                          (if g$ls/false$10272$RyrJs
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$9805$RyrJs
                                   '#f
                                   '"malformed binding form"
                                   g$stx$10263$RyrJs
                                   g$fmls$10264$RyrJs)))
                              g$ls/false$10272$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$10271$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10271$RyrJs
                         '_))))
                   g$t$10265$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10265$RyrJs
               '#(each+ any () any)))))
         g$fmls$10264$RyrJs))))
   (g$let-macro$9652$RyrJs
     g$let-macro$13242$RyrJs
     (case-lambda
       ((g$stx$10273$RyrJs)
        ((case-lambda
           ((g$t$10274$RyrJs)
            ((case-lambda
               ((g$ls/false$10275$RyrJs)
                (if g$ls/false$10275$RyrJs
                  (apply
                    (case-lambda
                      ((g$lhs*$10276$RyrJs
                         g$rhs*$10277$RyrJs
                         g$b$10278$RyrJs
                         g$b*$10279$RyrJs)
                       (if (g$valid-bound-ids?$9328$RyrJs
                             g$lhs*$10276$RyrJs)
                         (g$bless$9649$RyrJs
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$10276$RyrJs
                                 (cons
                                   g$b$10278$RyrJs
                                   g$b*$10279$RyrJs)))
                             g$rhs*$10277$RyrJs))
                         (g$invalid-fmls-error$9651$RyrJs
                           g$stx$10273$RyrJs
                           g$lhs*$10276$RyrJs))))
                    g$ls/false$10275$RyrJs)
                  ((case-lambda
                     ((g$t$10280$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10281$RyrJs)
                          (if (if g$ls/false$10281$RyrJs
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$10282$RyrJs
                                         g$lhs*$10283$RyrJs
                                         g$rhs*$10284$RyrJs
                                         g$b$10285$RyrJs
                                         g$b*$10286$RyrJs)
                                       (g$id?$9323$RyrJs
                                         g$f$10282$RyrJs)))
                                    g$ls/false$10281$RyrJs))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$10287$RyrJs
                                   g$lhs*$10288$RyrJs
                                   g$rhs*$10289$RyrJs
                                   g$b$10290$RyrJs
                                   g$b*$10291$RyrJs)
                                 (if (g$valid-bound-ids?$9328$RyrJs
                                       g$lhs*$10288$RyrJs)
                                   (g$bless$9649$RyrJs
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$10287$RyrJs
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$10288$RyrJs
                                                 (cons
                                                   g$b$10290$RyrJs
                                                   g$b*$10291$RyrJs)))))
                                         g$f$10287$RyrJs)
                                       g$rhs*$10289$RyrJs))
                                   (g$invalid-fmls-error$9651$RyrJs
                                     g$stx$10273$RyrJs
                                     g$lhs*$10288$RyrJs))))
                              g$ls/false$10281$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$10280$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10280$RyrJs
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$10274$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10274$RyrJs
               '(_ #(each (any any)) any . each-any)))))
         g$stx$10273$RyrJs))))
   (g$let-values-macro$9653$RyrJs
     g$let-values-macro$13243$RyrJs
     (case-lambda
       ((g$stx$10292$RyrJs)
        (letrec* ((g$rename$10293$RyrJs
                    (case-lambda
                      ((g$x$10344$RyrJs
                         g$old*$10345$RyrJs
                         g$new*$10346$RyrJs)
                       (begin
                         (if (not (g$id?$9323$RyrJs g$x$10344$RyrJs))
                           (g$syntax-violation$9805$RyrJs
                             '#f
                             '"not an indentifier"
                             g$stx$10292$RyrJs
                             g$x$10344$RyrJs)
                           (void))
                         (if (g$bound-id-member?$9330$RyrJs
                               g$x$10344$RyrJs
                               g$old*$10345$RyrJs)
                           (g$syntax-violation$9805$RyrJs
                             '#f
                             '"duplicate binding"
                             g$stx$10292$RyrJs
                             g$x$10344$RyrJs)
                           (void))
                         ((case-lambda
                            ((g$y$10347$RyrJs)
                             (values
                               g$y$10347$RyrJs
                               (cons g$x$10344$RyrJs g$old*$10345$RyrJs)
                               (cons
                                 g$y$10347$RyrJs
                                 g$new*$10346$RyrJs))))
                          (gensym
                            (g$syntax->datum$9808$RyrJs
                              g$x$10344$RyrJs)))))))
                  (g$rename*$10294$RyrJs
                    (case-lambda
                      ((g$x*$10335$RyrJs
                         g$old*$10336$RyrJs
                         g$new*$10337$RyrJs)
                       (if (null? g$x*$10335$RyrJs)
                         (values
                           '()
                           g$old*$10336$RyrJs
                           g$new*$10337$RyrJs)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$10293$RyrJs
                                (car g$x*$10335$RyrJs)
                                g$old*$10336$RyrJs
                                g$new*$10337$RyrJs)))
                           (case-lambda
                             ((g$x$10338$RyrJs
                                g$old*$10339$RyrJs
                                g$new*$10340$RyrJs)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$10294$RyrJs
                                     (cdr g$x*$10335$RyrJs)
                                     g$old*$10339$RyrJs
                                     g$new*$10340$RyrJs)))
                                (case-lambda
                                  ((g$x*$10341$RyrJs
                                     g$old*$10342$RyrJs
                                     g$new*$10343$RyrJs)
                                   (values
                                     (cons
                                       g$x$10338$RyrJs
                                       g$x*$10341$RyrJs)
                                     g$old*$10342$RyrJs
                                     g$new*$10343$RyrJs))))))))))))
          ((case-lambda
             ((g$t$10295$RyrJs)
              ((case-lambda
                 ((g$ls/false$10296$RyrJs)
                  (if g$ls/false$10296$RyrJs
                    (apply
                      (case-lambda
                        ((g$b$10297$RyrJs g$b*$10298$RyrJs)
                         (g$cons*$5809$RyrJs
                           (g$bless$9649$RyrJs 'let)
                           '()
                           g$b$10297$RyrJs
                           g$b*$10298$RyrJs)))
                      g$ls/false$10296$RyrJs)
                    ((case-lambda
                       ((g$t$10299$RyrJs)
                        ((case-lambda
                           ((g$ls/false$10300$RyrJs)
                            (if g$ls/false$10300$RyrJs
                              (apply
                                (case-lambda
                                  ((g$lhs*$10301$RyrJs
                                     g$rhs*$10302$RyrJs
                                     g$b$10303$RyrJs
                                     g$b*$10304$RyrJs)
                                   (g$bless$9649$RyrJs
                                     ((letrec ((g$f$10305$RyrJs
                                                 (case-lambda
                                                   ((g$lhs*$10306$RyrJs
                                                      g$rhs*$10307$RyrJs
                                                      g$old*$10308$RyrJs
                                                      g$new*$10309$RyrJs)
                                                    (if (null?
                                                          g$lhs*$10306$RyrJs)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5807$RyrJs
                                                            list
                                                            g$old*$10308$RyrJs
                                                            g$new*$10309$RyrJs)
                                                          (cons
                                                            g$b$10303$RyrJs
                                                            g$b*$10304$RyrJs)))
                                                      ((case-lambda
                                                         ((g$t$10310$RyrJs)
                                                          ((case-lambda
                                                             ((g$ls/false$10311$RyrJs)
                                                              (if g$ls/false$10311$RyrJs
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$10312$RyrJs)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$10294$RyrJs
                                                                            g$x*$10312$RyrJs
                                                                            g$old*$10308$RyrJs
                                                                            g$new*$10309$RyrJs)))
                                                                       (case-lambda
                                                                         ((g$y*$10316$RyrJs
                                                                            g$old*$10317$RyrJs
                                                                            g$new*$10318$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$new*$10319$RyrJs
                                                                                g$old*$10320$RyrJs
                                                                                g$y*$10321$RyrJs)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$10307$RyrJs))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$10321$RyrJs
                                                                                  (g$f$10305$RyrJs
                                                                                    (cdr g$lhs*$10306$RyrJs)
                                                                                    (cdr g$rhs*$10307$RyrJs)
                                                                                    g$old*$10320$RyrJs
                                                                                    g$new*$10319$RyrJs)))))
                                                                           g$new*$10318$RyrJs
                                                                           g$old*$10317$RyrJs
                                                                           g$y*$10316$RyrJs))))))
                                                                  g$ls/false$10311$RyrJs)
                                                                ((case-lambda
                                                                   ((g$t$10322$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10323$RyrJs)
                                                                        (if g$ls/false$10323$RyrJs
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$10324$RyrJs
                                                                                 g$x$10325$RyrJs)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$10293$RyrJs
                                                                                      g$x$10325$RyrJs
                                                                                      g$old*$10308$RyrJs
                                                                                      g$new*$10309$RyrJs)))
                                                                                 (case-lambda
                                                                                   ((g$y$10326$RyrJs
                                                                                      g$old*$10327$RyrJs
                                                                                      g$new*$10328$RyrJs)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$10294$RyrJs
                                                                                           g$x*$10324$RyrJs
                                                                                           g$old*$10327$RyrJs
                                                                                           g$new*$10328$RyrJs)))
                                                                                      (case-lambda
                                                                                        ((g$y*$10329$RyrJs
                                                                                           g$old*$10330$RyrJs
                                                                                           g$new*$10331$RyrJs)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$10307$RyrJs))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$10329$RyrJs
                                                                                               g$y$10326$RyrJs)
                                                                                             (g$f$10305$RyrJs
                                                                                               (cdr g$lhs*$10306$RyrJs)
                                                                                               (cdr g$rhs*$10307$RyrJs)
                                                                                               g$old*$10330$RyrJs
                                                                                               g$new*$10331$RyrJs)))))))))))
                                                                            g$ls/false$10323$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$t$10332$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10333$RyrJs)
                                                                                  (if g$ls/false$10333$RyrJs
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$10334$RyrJs)
                                                                                         (g$syntax-violation$9805$RyrJs
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$10292$RyrJs
                                                                                           g$others$10334$RyrJs)))
                                                                                      g$ls/false$10333$RyrJs)
                                                                                    (g$syntax-violation$9805$RyrJs
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10332$RyrJs))))
                                                                               (g$syntax-dispatch$9686$RyrJs
                                                                                 g$t$10332$RyrJs
                                                                                 'any))))
                                                                           g$t$10322$RyrJs))))
                                                                     (g$syntax-dispatch$9686$RyrJs
                                                                       g$t$10322$RyrJs
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$10310$RyrJs))))
                                                           (g$syntax-dispatch$9686$RyrJs
                                                             g$t$10310$RyrJs
                                                             'each-any))))
                                                       (car g$lhs*$10306$RyrJs)))))))
                                        g$f$10305$RyrJs)
                                      g$lhs*$10301$RyrJs
                                      g$rhs*$10302$RyrJs
                                      '()
                                      '()))))
                                g$ls/false$10300$RyrJs)
                              (g$syntax-violation$9805$RyrJs
                                '#f
                                '"invalid syntax"
                                g$t$10299$RyrJs))))
                         (g$syntax-dispatch$9686$RyrJs
                           g$t$10299$RyrJs
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$10295$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$10295$RyrJs
                 '(_ () any . each-any)))))
           g$stx$10292$RyrJs)))))
   (g$let*-values-macro$9654$RyrJs
     g$let*-values-macro$13244$RyrJs
     (case-lambda
       ((g$stx$10348$RyrJs)
        (letrec* ((g$check$10349$RyrJs
                    (case-lambda
                      ((g$x*$10373$RyrJs)
                       (if (not (null? g$x*$10373$RyrJs))
                         ((case-lambda
                            ((g$x$10374$RyrJs)
                             (begin
                               (if (not (g$id?$9323$RyrJs
                                          g$x$10374$RyrJs))
                                 (g$syntax-violation$9805$RyrJs
                                   '#f
                                   '"not an identifier"
                                   g$stx$10348$RyrJs
                                   g$x$10374$RyrJs)
                                 (void))
                               (g$check$10349$RyrJs
                                 (cdr g$x*$10373$RyrJs))
                               (if (g$bound-id-member?$9330$RyrJs
                                     g$x$10374$RyrJs
                                     (cdr g$x*$10373$RyrJs))
                                 (g$syntax-violation$9805$RyrJs
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$10348$RyrJs
                                   g$x$10374$RyrJs)
                                 (void)))))
                          (car g$x*$10373$RyrJs))
                         (void))))))
          ((case-lambda
             ((g$t$10350$RyrJs)
              ((case-lambda
                 ((g$ls/false$10351$RyrJs)
                  (if g$ls/false$10351$RyrJs
                    (apply
                      (case-lambda
                        ((g$b$10352$RyrJs g$b*$10353$RyrJs)
                         (g$cons*$5809$RyrJs
                           (g$bless$9649$RyrJs 'let)
                           '()
                           g$b$10352$RyrJs
                           g$b*$10353$RyrJs)))
                      g$ls/false$10351$RyrJs)
                    ((case-lambda
                       ((g$t$10354$RyrJs)
                        ((case-lambda
                           ((g$ls/false$10355$RyrJs)
                            (if g$ls/false$10355$RyrJs
                              (apply
                                (case-lambda
                                  ((g$lhs*$10356$RyrJs
                                     g$rhs*$10357$RyrJs
                                     g$b$10358$RyrJs
                                     g$b*$10359$RyrJs)
                                   (g$bless$9649$RyrJs
                                     ((letrec ((g$f$10360$RyrJs
                                                 (case-lambda
                                                   ((g$lhs*$10361$RyrJs
                                                      g$rhs*$10362$RyrJs)
                                                    (if (null?
                                                          g$lhs*$10361$RyrJs)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$10358$RyrJs
                                                          g$b*$10359$RyrJs))
                                                      ((case-lambda
                                                         ((g$t$10363$RyrJs)
                                                          ((case-lambda
                                                             ((g$ls/false$10364$RyrJs)
                                                              (if g$ls/false$10364$RyrJs
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$10365$RyrJs)
                                                                     (begin
                                                                       (g$check$10349$RyrJs
                                                                         g$x*$10365$RyrJs)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$10362$RyrJs))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$10365$RyrJs
                                                                           (g$f$10360$RyrJs
                                                                             (cdr g$lhs*$10361$RyrJs)
                                                                             (cdr g$rhs*$10362$RyrJs)))))))
                                                                  g$ls/false$10364$RyrJs)
                                                                ((case-lambda
                                                                   ((g$t$10366$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10367$RyrJs)
                                                                        (if g$ls/false$10367$RyrJs
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$10368$RyrJs
                                                                                 g$x$10369$RyrJs)
                                                                               (begin
                                                                                 (g$check$10349$RyrJs
                                                                                   (cons
                                                                                     g$x$10369$RyrJs
                                                                                     g$x*$10368$RyrJs))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$10362$RyrJs))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$10368$RyrJs
                                                                                       g$x$10369$RyrJs)
                                                                                     (g$f$10360$RyrJs
                                                                                       (cdr g$lhs*$10361$RyrJs)
                                                                                       (cdr g$rhs*$10362$RyrJs)))))))
                                                                            g$ls/false$10367$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$t$10370$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10371$RyrJs)
                                                                                  (if g$ls/false$10371$RyrJs
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$10372$RyrJs)
                                                                                         (g$syntax-violation$9805$RyrJs
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$10348$RyrJs
                                                                                           g$others$10372$RyrJs)))
                                                                                      g$ls/false$10371$RyrJs)
                                                                                    (g$syntax-violation$9805$RyrJs
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10370$RyrJs))))
                                                                               (g$syntax-dispatch$9686$RyrJs
                                                                                 g$t$10370$RyrJs
                                                                                 'any))))
                                                                           g$t$10366$RyrJs))))
                                                                     (g$syntax-dispatch$9686$RyrJs
                                                                       g$t$10366$RyrJs
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$10363$RyrJs))))
                                                           (g$syntax-dispatch$9686$RyrJs
                                                             g$t$10363$RyrJs
                                                             'each-any))))
                                                       (car g$lhs*$10361$RyrJs)))))))
                                        g$f$10360$RyrJs)
                                      g$lhs*$10356$RyrJs
                                      g$rhs*$10357$RyrJs))))
                                g$ls/false$10355$RyrJs)
                              (g$syntax-violation$9805$RyrJs
                                '#f
                                '"invalid syntax"
                                g$t$10354$RyrJs))))
                         (g$syntax-dispatch$9686$RyrJs
                           g$t$10354$RyrJs
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$10350$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$10350$RyrJs
                 '(_ () any . each-any)))))
           g$stx$10348$RyrJs)))))
   (g$trace-lambda-macro$9655$RyrJs
     g$trace-lambda-macro$13245$RyrJs
     (case-lambda
       ((g$stx$10375$RyrJs)
        ((case-lambda
           ((g$t$10376$RyrJs)
            ((case-lambda
               ((g$ls/false$10377$RyrJs)
                (if g$ls/false$10377$RyrJs
                  (apply
                    (case-lambda
                      ((g$who$10378$RyrJs
                         g$fmls$10379$RyrJs
                         g$b$10380$RyrJs
                         g$b*$10381$RyrJs)
                       (if (g$valid-bound-ids?$9328$RyrJs
                             g$fmls$10379$RyrJs)
                         (g$bless$9649$RyrJs
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$10378$RyrJs)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$10379$RyrJs
                                 (cons
                                   g$b$10380$RyrJs
                                   g$b*$10381$RyrJs)))))
                         (g$invalid-fmls-error$9651$RyrJs
                           g$stx$10375$RyrJs
                           g$fmls$10379$RyrJs))))
                    g$ls/false$10377$RyrJs)
                  ((case-lambda
                     ((g$t$10382$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10383$RyrJs)
                          (if g$ls/false$10383$RyrJs
                            (apply
                              (case-lambda
                                ((g$who$10384$RyrJs
                                   g$fmls$10385$RyrJs
                                   g$last$10386$RyrJs
                                   g$b$10387$RyrJs
                                   g$b*$10388$RyrJs)
                                 (if (g$valid-bound-ids?$9328$RyrJs
                                       (cons
                                         g$last$10386$RyrJs
                                         g$fmls$10385$RyrJs))
                                   (g$bless$9649$RyrJs
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$10384$RyrJs)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$10385$RyrJs
                                             g$last$10386$RyrJs)
                                           (cons
                                             g$b$10387$RyrJs
                                             g$b*$10388$RyrJs)))))
                                   (g$invalid-fmls-error$9651$RyrJs
                                     g$stx$10375$RyrJs
                                     (append
                                       g$fmls$10385$RyrJs
                                       g$last$10386$RyrJs)))))
                              g$ls/false$10383$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$10382$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10382$RyrJs
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$10376$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10376$RyrJs
               '(_ any each-any any . each-any)))))
         g$stx$10375$RyrJs))))
   (g$trace-define-macro$9656$RyrJs
     g$trace-define-macro$13246$RyrJs
     (case-lambda
       ((g$stx$10389$RyrJs)
        ((case-lambda
           ((g$t$10390$RyrJs)
            ((case-lambda
               ((g$ls/false$10391$RyrJs)
                (if g$ls/false$10391$RyrJs
                  (apply
                    (case-lambda
                      ((g$who$10392$RyrJs
                         g$fmls$10393$RyrJs
                         g$b$10394$RyrJs
                         g$b*$10395$RyrJs)
                       (if (g$valid-bound-ids?$9328$RyrJs
                             g$fmls$10393$RyrJs)
                         (g$bless$9649$RyrJs
                           (list
                             'define
                             g$who$10392$RyrJs
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$10392$RyrJs)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$10393$RyrJs
                                   (cons
                                     g$b$10394$RyrJs
                                     g$b*$10395$RyrJs))))))
                         (g$invalid-fmls-error$9651$RyrJs
                           g$stx$10389$RyrJs
                           g$fmls$10393$RyrJs))))
                    g$ls/false$10391$RyrJs)
                  ((case-lambda
                     ((g$t$10396$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10397$RyrJs)
                          (if g$ls/false$10397$RyrJs
                            (apply
                              (case-lambda
                                ((g$who$10398$RyrJs
                                   g$fmls$10399$RyrJs
                                   g$last$10400$RyrJs
                                   g$b$10401$RyrJs
                                   g$b*$10402$RyrJs)
                                 (if (g$valid-bound-ids?$9328$RyrJs
                                       (cons
                                         g$last$10400$RyrJs
                                         g$fmls$10399$RyrJs))
                                   (g$bless$9649$RyrJs
                                     (list
                                       'define
                                       g$who$10398$RyrJs
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$10398$RyrJs)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$10399$RyrJs
                                               g$last$10400$RyrJs)
                                             (cons
                                               g$b$10401$RyrJs
                                               g$b*$10402$RyrJs))))))
                                   (g$invalid-fmls-error$9651$RyrJs
                                     g$stx$10389$RyrJs
                                     (append
                                       g$fmls$10399$RyrJs
                                       g$last$10400$RyrJs)))))
                              g$ls/false$10397$RyrJs)
                            ((case-lambda
                               ((g$t$10403$RyrJs)
                                ((case-lambda
                                   ((g$ls/false$10404$RyrJs)
                                    (if g$ls/false$10404$RyrJs
                                      (apply
                                        (case-lambda
                                          ((g$who$10405$RyrJs
                                             g$expr$10406$RyrJs)
                                           (if (g$id?$9323$RyrJs
                                                 g$who$10405$RyrJs)
                                             (g$bless$9649$RyrJs
                                               (list
                                                 'define
                                                 g$who$10405$RyrJs
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$10406$RyrJs))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$10405$RyrJs)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$9805$RyrJs
                                               '#f
                                               '"invalid name"
                                               g$stx$10389$RyrJs))))
                                        g$ls/false$10404$RyrJs)
                                      (g$syntax-violation$9805$RyrJs
                                        '#f
                                        '"invalid syntax"
                                        g$t$10403$RyrJs))))
                                 (g$syntax-dispatch$9686$RyrJs
                                   g$t$10403$RyrJs
                                   '(_ any any)))))
                             g$t$10396$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10396$RyrJs
                         '(_ (any . #(each+ any () any))
                             any
                             .
                             each-any)))))
                   g$t$10390$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10390$RyrJs
               '(_ (any . each-any) any . each-any)))))
         g$stx$10389$RyrJs))))
   (g$trace-define-syntax-macro$9657$RyrJs
     g$trace-define-syntax-macro$13247$RyrJs
     (case-lambda
       ((g$stx$10407$RyrJs)
        ((case-lambda
           ((g$t$10408$RyrJs)
            ((case-lambda
               ((g$ls/false$10409$RyrJs)
                (if g$ls/false$10409$RyrJs
                  (apply
                    (case-lambda
                      ((g$who$10410$RyrJs g$expr$10411$RyrJs)
                       (if (g$id?$9323$RyrJs g$who$10410$RyrJs)
                         (g$bless$9649$RyrJs
                           (list
                             'define-syntax
                             g$who$10410$RyrJs
                             (list
                               'make-traced-macro
                               (list 'quote g$who$10410$RyrJs)
                               g$expr$10411$RyrJs)))
                         (g$syntax-violation$9805$RyrJs
                           '#f
                           '"invalid name"
                           g$stx$10407$RyrJs))))
                    g$ls/false$10409$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10408$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10408$RyrJs
               '(_ any any)))))
         g$stx$10407$RyrJs))))
   (g$trace-let/rec-syntax$9658$RyrJs
     g$trace-let/rec-syntax$13248$RyrJs
     (case-lambda
       ((g$who$10412$RyrJs)
        (case-lambda
          ((g$stx$10413$RyrJs)
           ((case-lambda
              ((g$t$10414$RyrJs)
               ((case-lambda
                  ((g$ls/false$10415$RyrJs)
                   (if g$ls/false$10415$RyrJs
                     (apply
                       (case-lambda
                         ((g$lhs*$10416$RyrJs
                            g$rhs*$10417$RyrJs
                            g$b$10418$RyrJs
                            g$b*$10419$RyrJs)
                          (if (g$valid-bound-ids?$9328$RyrJs
                                g$lhs*$10416$RyrJs)
                            ((case-lambda
                               ((g$rhs*$10420$RyrJs)
                                (g$bless$9649$RyrJs
                                  (cons
                                    g$who$10412$RyrJs
                                    (cons
                                      (g$map$5807$RyrJs
                                        list
                                        g$lhs*$10416$RyrJs
                                        g$rhs*$10420$RyrJs)
                                      (cons
                                        g$b$10418$RyrJs
                                        g$b*$10419$RyrJs))))))
                             (g$map$5807$RyrJs
                               (case-lambda
                                 ((g$lhs$10421$RyrJs g$rhs$10422$RyrJs)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$10421$RyrJs)
                                    g$rhs$10422$RyrJs)))
                               g$lhs*$10416$RyrJs
                               g$rhs*$10417$RyrJs))
                            (g$invalid-fmls-error$9651$RyrJs
                              g$stx$10413$RyrJs
                              g$lhs*$10416$RyrJs))))
                       g$ls/false$10415$RyrJs)
                     (g$syntax-violation$9805$RyrJs
                       '#f
                       '"invalid syntax"
                       g$t$10414$RyrJs))))
                (g$syntax-dispatch$9686$RyrJs
                  g$t$10414$RyrJs
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$10413$RyrJs))))))
   (g$trace-let-syntax-macro$9659$RyrJs
     g$trace-let-syntax-macro$13249$RyrJs
     (g$trace-let/rec-syntax$9658$RyrJs 'let-syntax))
   (g$trace-letrec-syntax-macro$9660$RyrJs
     g$trace-letrec-syntax-macro$13250$RyrJs
     (g$trace-let/rec-syntax$9658$RyrJs 'letrec-syntax))
   (g$guard-macro$9661$RyrJs
     g$guard-macro$13251$RyrJs
     (case-lambda
       ((g$x$10423$RyrJs)
        (letrec* ((g$gen-clauses$10424$RyrJs
                    (case-lambda
                      ((g$con$10436$RyrJs
                         g$outerk$10437$RyrJs
                         g$clause*$10438$RyrJs)
                       (letrec* ((g$f$10439$RyrJs
                                   (case-lambda
                                     ((g$x$10467$RyrJs g$k$10468$RyrJs)
                                      ((case-lambda
                                         ((g$t$10469$RyrJs)
                                          ((case-lambda
                                             ((g$ls/false$10470$RyrJs)
                                              (if g$ls/false$10470$RyrJs
                                                (apply
                                                  (case-lambda
                                                    ((g$e$10471$RyrJs
                                                       g$p$10472$RyrJs)
                                                     ((case-lambda
                                                        ((g$t$10473$RyrJs)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$10473$RyrJs
                                                               g$e$10471$RyrJs))
                                                           (list
                                                             'if
                                                             g$t$10473$RyrJs
                                                             (list
                                                               g$p$10472$RyrJs
                                                               g$t$10473$RyrJs)
                                                             g$k$10468$RyrJs))))
                                                      (gensym))))
                                                  g$ls/false$10470$RyrJs)
                                                ((case-lambda
                                                   ((g$t$10474$RyrJs)
                                                    ((case-lambda
                                                       ((g$ls/false$10475$RyrJs)
                                                        (if g$ls/false$10475$RyrJs
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$10476$RyrJs)
                                                               ((case-lambda
                                                                  ((g$t$10477$RyrJs)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$10477$RyrJs
                                                                         g$e$10476$RyrJs))
                                                                     (list
                                                                       'if
                                                                       g$t$10477$RyrJs
                                                                       g$t$10477$RyrJs
                                                                       g$k$10468$RyrJs))))
                                                                (gensym))))
                                                            g$ls/false$10475$RyrJs)
                                                          ((case-lambda
                                                             ((g$t$10478$RyrJs)
                                                              ((case-lambda
                                                                 ((g$ls/false$10479$RyrJs)
                                                                  (if g$ls/false$10479$RyrJs
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$10480$RyrJs
                                                                           g$v$10481$RyrJs
                                                                           g$v*$10482$RyrJs)
                                                                         (list
                                                                           'if
                                                                           g$e$10480$RyrJs
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$10481$RyrJs
                                                                               g$v*$10482$RyrJs))
                                                                           g$k$10468$RyrJs)))
                                                                      g$ls/false$10479$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$t$10483$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10484$RyrJs)
                                                                            (if g$ls/false$10484$RyrJs
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$9805$RyrJs
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$10467$RyrJs)))
                                                                                g$ls/false$10484$RyrJs)
                                                                              (g$syntax-violation$9805$RyrJs
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$10483$RyrJs))))
                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                           g$t$10483$RyrJs
                                                                           '_))))
                                                                     g$t$10478$RyrJs))))
                                                               (g$syntax-dispatch$9686$RyrJs
                                                                 g$t$10478$RyrJs
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$10474$RyrJs))))
                                                     (g$syntax-dispatch$9686$RyrJs
                                                       g$t$10474$RyrJs
                                                       '(any)))))
                                                 g$t$10469$RyrJs))))
                                           (g$syntax-dispatch$9686$RyrJs
                                             g$t$10469$RyrJs
                                             '(any #(scheme-id =>)
                                                   any)))))
                                       g$x$10467$RyrJs))))
                                 (g$f*$10440$RyrJs
                                   (case-lambda
                                     ((g$x*$10447$RyrJs)
                                      ((case-lambda
                                         ((g$t$10448$RyrJs)
                                          ((case-lambda
                                             ((g$ls/false$10449$RyrJs)
                                              (if g$ls/false$10449$RyrJs
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$10436$RyrJs)
                                                       '#t)))
                                                  g$ls/false$10449$RyrJs)
                                                ((case-lambda
                                                   ((g$t$10450$RyrJs)
                                                    ((case-lambda
                                                       ((g$ls/false$10451$RyrJs)
                                                        (if g$ls/false$10451$RyrJs
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$10452$RyrJs
                                                                 g$e*$10453$RyrJs)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$10452$RyrJs
                                                                     g$e*$10453$RyrJs))
                                                                 '#f)))
                                                            g$ls/false$10451$RyrJs)
                                                          ((case-lambda
                                                             ((g$t$10454$RyrJs)
                                                              ((case-lambda
                                                                 ((g$ls/false$10455$RyrJs)
                                                                  (if g$ls/false$10455$RyrJs
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$10456$RyrJs
                                                                           g$cls*$10457$RyrJs)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$10440$RyrJs
                                                                                g$cls*$10457$RyrJs)))
                                                                           (case-lambda
                                                                             ((g$e$10460$RyrJs
                                                                                g$g$10461$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$g$10462$RyrJs
                                                                                    g$e$10463$RyrJs)
                                                                                  (values
                                                                                    (g$f$10439$RyrJs
                                                                                      g$cls$10456$RyrJs
                                                                                      g$e$10463$RyrJs)
                                                                                    g$g$10462$RyrJs)))
                                                                               g$g$10461$RyrJs
                                                                               g$e$10460$RyrJs))))))
                                                                      g$ls/false$10455$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$t$10464$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10465$RyrJs)
                                                                            (if g$ls/false$10465$RyrJs
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$10466$RyrJs)
                                                                                   (g$syntax-violation$9805$RyrJs
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$10466$RyrJs)))
                                                                                g$ls/false$10465$RyrJs)
                                                                              (g$syntax-violation$9805$RyrJs
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$10464$RyrJs))))
                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                           g$t$10464$RyrJs
                                                                           'any))))
                                                                     g$t$10454$RyrJs))))
                                                               (g$syntax-dispatch$9686$RyrJs
                                                                 g$t$10454$RyrJs
                                                                 '(any .
                                                                       any)))))
                                                           g$t$10450$RyrJs))))
                                                     (g$syntax-dispatch$9686$RyrJs
                                                       g$t$10450$RyrJs
                                                       '((#(scheme-id
                                                            else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$10448$RyrJs))))
                                           (g$syntax-dispatch$9686$RyrJs
                                             g$t$10448$RyrJs
                                             '()))))
                                       g$x*$10447$RyrJs)))))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$f*$10440$RyrJs g$clause*$10438$RyrJs)))
                           (case-lambda
                             ((g$code$10443$RyrJs g$raisek$10444$RyrJs)
                              ((case-lambda
                                 ((g$raisek$10445$RyrJs
                                    g$code$10446$RyrJs)
                                  (if g$raisek$10445$RyrJs
                                    (list
                                      g$outerk$10437$RyrJs
                                      g$code$10446$RyrJs)
                                    g$code$10446$RyrJs)))
                               g$raisek$10444$RyrJs
                               g$code$10443$RyrJs)))))))))
          ((case-lambda
             ((g$t$10425$RyrJs)
              ((case-lambda
                 ((g$ls/false$10426$RyrJs)
                  (if (if g$ls/false$10426$RyrJs
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$10427$RyrJs
                                 g$clause*$10428$RyrJs
                                 g$b$10429$RyrJs
                                 g$b*$10430$RyrJs)
                               (g$id?$9323$RyrJs g$con$10427$RyrJs)))
                            g$ls/false$10426$RyrJs))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$10431$RyrJs
                           g$clause*$10432$RyrJs
                           g$b$10433$RyrJs
                           g$b*$10434$RyrJs)
                         ((case-lambda
                            ((g$outerk$10435$RyrJs)
                             (g$bless$9649$RyrJs
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$10435$RyrJs)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$10431$RyrJs)
                                           (g$gen-clauses$10424$RyrJs
                                             g$con$10431$RyrJs
                                             g$outerk$10435$RyrJs
                                             g$clause*$10432$RyrJs))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$10433$RyrJs
                                                 g$b*$10434$RyrJs))))))))))))
                          (gensym))))
                      g$ls/false$10426$RyrJs)
                    (g$syntax-violation$9805$RyrJs
                      '#f
                      '"invalid syntax"
                      g$t$10425$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$10425$RyrJs
                 '(_ (any . each-any) any . each-any)))))
           g$x$10423$RyrJs)))))
   (g$define-enumeration-macro$9662$RyrJs
     g$define-enumeration-macro$13252$RyrJs
     (case-lambda
       ((g$stx$10485$RyrJs)
        (letrec* ((g$set?$10486$RyrJs
                    (case-lambda
                      ((g$x$10499$RyrJs)
                       ((case-lambda
                          ((g$t$10500$RyrJs)
                           (if g$t$10500$RyrJs
                             g$t$10500$RyrJs
                             (begin
                               '#f
                               (if (not (g$memq$5799$RyrJs
                                          (car g$x$10499$RyrJs)
                                          (cdr g$x$10499$RyrJs)))
                                 (begin
                                   '#f
                                   (g$set?$10486$RyrJs
                                     (cdr g$x$10499$RyrJs)))
                                 '#f)))))
                        (null? g$x$10499$RyrJs)))))
                  (g$remove-dups$10487$RyrJs
                    (case-lambda
                      ((g$ls$10498$RyrJs)
                       (if (null? g$ls$10498$RyrJs)
                         '()
                         (cons
                           (car g$ls$10498$RyrJs)
                           (g$remove-dups$10487$RyrJs
                             (g$remq$5814$RyrJs
                               (car g$ls$10498$RyrJs)
                               (cdr g$ls$10498$RyrJs)))))))))
          ((case-lambda
             ((g$t$10488$RyrJs)
              ((case-lambda
                 ((g$ls/false$10489$RyrJs)
                  (if (if g$ls/false$10489$RyrJs
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$10490$RyrJs
                                 g$id*$10491$RyrJs
                                 g$maker$10492$RyrJs)
                               (if (g$id?$9323$RyrJs g$name$10490$RyrJs)
                                 (if (g$id?$9323$RyrJs
                                       g$maker$10492$RyrJs)
                                   (begin
                                     '#f
                                     (g$for-all$5805$RyrJs
                                       g$id?$9323$RyrJs
                                       g$id*$10491$RyrJs))
                                   '#f)
                                 '#f)))
                            g$ls/false$10489$RyrJs))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$10493$RyrJs
                           g$id*$10494$RyrJs
                           g$maker$10495$RyrJs)
                         ((case-lambda
                            ((g$name*$10496$RyrJs g$mk$10497$RyrJs)
                             (g$bless$9649$RyrJs
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$10497$RyrJs
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list
                                         'quote
                                         g$name*$10496$RyrJs))))
                                 (list
                                   'define-syntax
                                   g$name$10493$RyrJs
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list
                                               'quote
                                               g$name*$10496$RyrJs))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list
                                                 'quote
                                                 g$name$10493$RyrJs)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$10495$RyrJs
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$10495$RyrJs)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$10496$RyrJs))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$10495$RyrJs)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$10497$RyrJs
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$10487$RyrJs
                            (g$syntax->datum$9808$RyrJs
                              g$id*$10494$RyrJs))
                          (gensym))))
                      g$ls/false$10489$RyrJs)
                    (g$syntax-violation$9805$RyrJs
                      '#f
                      '"invalid syntax"
                      g$t$10488$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$10488$RyrJs
                 '(_ any each-any any)))))
           g$stx$10485$RyrJs)))))
   (g$time-macro$9663$RyrJs
     g$time-macro$13253$RyrJs
     (case-lambda
       ((g$stx$10501$RyrJs)
        ((case-lambda
           ((g$t$10502$RyrJs)
            ((case-lambda
               ((g$ls/false$10503$RyrJs)
                (if g$ls/false$10503$RyrJs
                  (apply
                    (case-lambda
                      ((g$expr$10504$RyrJs)
                       ((case-lambda
                          ((g$str$10505$RyrJs)
                           (g$bless$9649$RyrJs
                             (list
                               'time-it
                               g$str$10505$RyrJs
                               (list 'lambda '() g$expr$10504$RyrJs)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$7827$RyrJs)))
                          (case-lambda
                            ((g$p$10508$RyrJs g$e$10509$RyrJs)
                             ((case-lambda
                                ((g$e$10510$RyrJs g$p$10511$RyrJs)
                                 (begin
                                   (write
                                     (g$syntax->datum$9808$RyrJs
                                       g$expr$10504$RyrJs)
                                     g$p$10511$RyrJs)
                                   (g$e$10510$RyrJs))))
                              g$e$10509$RyrJs
                              g$p$10508$RyrJs)))))))
                    g$ls/false$10503$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10502$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10502$RyrJs '(_ any)))))
         g$stx$10501$RyrJs))))
   (g$delay-macro$9664$RyrJs
     g$delay-macro$13254$RyrJs
     (case-lambda
       ((g$stx$10512$RyrJs)
        ((case-lambda
           ((g$t$10513$RyrJs)
            ((case-lambda
               ((g$ls/false$10514$RyrJs)
                (if g$ls/false$10514$RyrJs
                  (apply
                    (case-lambda
                      ((g$expr$10515$RyrJs)
                       (g$bless$9649$RyrJs
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$10515$RyrJs)))))
                    g$ls/false$10514$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10513$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10513$RyrJs '(_ any)))))
         g$stx$10512$RyrJs))))
   (g$assert-macro$9665$RyrJs
     g$assert-macro$13255$RyrJs
     (case-lambda
       ((g$stx$10516$RyrJs)
        ((case-lambda
           ((g$t$10517$RyrJs)
            ((case-lambda
               ((g$ls/false$10518$RyrJs)
                (if g$ls/false$10518$RyrJs
                  (apply
                    (case-lambda
                      ((g$expr$10519$RyrJs)
                       ((case-lambda
                          ((g$pos$10520$RyrJs)
                           (g$bless$9649$RyrJs
                             (list
                               'unless
                               g$expr$10519$RyrJs
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$10519$RyrJs)
                                 (list 'quote g$pos$10520$RyrJs))))))
                        ((case-lambda
                           ((g$t$10521$RyrJs)
                            (if g$t$10521$RyrJs
                              g$t$10521$RyrJs
                              (begin
                                '#f
                                (g$expression-position$9800$RyrJs
                                  g$expr$10519$RyrJs)))))
                         (g$expression-position$9800$RyrJs
                           g$stx$10516$RyrJs)))))
                    g$ls/false$10518$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10517$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10517$RyrJs '(_ any)))))
         g$stx$10516$RyrJs))))
   (g$endianness-macro$9666$RyrJs
     g$endianness-macro$13256$RyrJs
     (case-lambda
       ((g$stx$10522$RyrJs)
        ((case-lambda
           ((g$t$10523$RyrJs)
            ((case-lambda
               ((g$ls/false$10524$RyrJs)
                (if g$ls/false$10524$RyrJs
                  (apply
                    (case-lambda
                      ((g$e$10525$RyrJs)
                       ((case-lambda
                          ((g$t$10526$RyrJs)
                           (if (eqv? g$t$10526$RyrJs 'little)
                             (g$bless$9649$RyrJs ''little)
                             (if (eqv? g$t$10526$RyrJs 'big)
                               (g$bless$9649$RyrJs ''big)
                               (g$syntax-violation$9805$RyrJs
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$10522$RyrJs)))))
                        (g$syntax->datum$9808$RyrJs g$e$10525$RyrJs))))
                    g$ls/false$10524$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10523$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10523$RyrJs '(_ any)))))
         g$stx$10522$RyrJs))))
   (g$identifier-syntax-macro$9667$RyrJs
     g$identifier-syntax-macro$13257$RyrJs
     (case-lambda
       ((g$stx$10527$RyrJs)
        ((case-lambda
           ((g$t$10528$RyrJs)
            ((case-lambda
               ((g$ls/false$10529$RyrJs)
                (if g$ls/false$10529$RyrJs
                  (apply
                    (case-lambda
                      ((g$expr$10530$RyrJs)
                       (g$bless$9649$RyrJs
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$10530$RyrJs))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$10530$RyrJs)
                                   '(#'(e* ...))))))))))
                    g$ls/false$10529$RyrJs)
                  ((case-lambda
                     ((g$t$10531$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10532$RyrJs)
                          (if (if g$ls/false$10532$RyrJs
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$10533$RyrJs
                                         g$expr1$10534$RyrJs
                                         g$id2$10535$RyrJs
                                         g$expr2$10536$RyrJs
                                         g$expr3$10537$RyrJs)
                                       (if (g$id?$9323$RyrJs
                                             g$id1$10533$RyrJs)
                                         (if (g$id?$9323$RyrJs
                                               g$id2$10535$RyrJs)
                                           (begin
                                             '#f
                                             (g$id?$9323$RyrJs
                                               g$expr2$10536$RyrJs))
                                           '#f)
                                         '#f)))
                                    g$ls/false$10532$RyrJs))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$10538$RyrJs
                                   g$expr1$10539$RyrJs
                                   g$id2$10540$RyrJs
                                   g$expr2$10541$RyrJs
                                   g$expr3$10542$RyrJs)
                                 (g$bless$9649$RyrJs
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             g$expr1$10539$RyrJs))
                                         (list
                                           (list
                                             'set!
                                             'id
                                             g$expr2$10541$RyrJs)
                                           (list
                                             'syntax
                                             g$expr3$10542$RyrJs))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$10539$RyrJs
                                               '(e* ...))))))))))
                              g$ls/false$10532$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$10531$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10531$RyrJs
                         '(_ (any any)
                             ((#(scheme-id set!) any any) any))))))
                   g$t$10528$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10528$RyrJs '(_ any)))))
         g$stx$10527$RyrJs))))
   (g$do-macro$9668$RyrJs
     g$do-macro$13258$RyrJs
     (case-lambda
       ((g$stx$10543$RyrJs)
        (letrec* ((g$bind$10544$RyrJs
                    (case-lambda
                      ((g$x$10556$RyrJs)
                       ((case-lambda
                          ((g$t$10557$RyrJs)
                           ((case-lambda
                              ((g$ls/false$10558$RyrJs)
                               (if g$ls/false$10558$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$x$10559$RyrJs
                                        g$init$10560$RyrJs)
                                      (list
                                        g$x$10559$RyrJs
                                        g$init$10560$RyrJs
                                        g$x$10559$RyrJs)))
                                   g$ls/false$10558$RyrJs)
                                 ((case-lambda
                                    ((g$t$10561$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$10562$RyrJs)
                                         (if g$ls/false$10562$RyrJs
                                           (apply
                                             (case-lambda
                                               ((g$x$10563$RyrJs
                                                  g$init$10564$RyrJs
                                                  g$step$10565$RyrJs)
                                                (list
                                                  g$x$10563$RyrJs
                                                  g$init$10564$RyrJs
                                                  g$step$10565$RyrJs)))
                                             g$ls/false$10562$RyrJs)
                                           ((case-lambda
                                              ((g$t$10566$RyrJs)
                                               ((case-lambda
                                                  ((g$ls/false$10567$RyrJs)
                                                   (if g$ls/false$10567$RyrJs
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$9805$RyrJs
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$10543$RyrJs)))
                                                       g$ls/false$10567$RyrJs)
                                                     (g$syntax-violation$9805$RyrJs
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10566$RyrJs))))
                                                (g$syntax-dispatch$9686$RyrJs
                                                  g$t$10566$RyrJs
                                                  '_))))
                                            g$t$10561$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$10561$RyrJs
                                        '(any any any)))))
                                  g$t$10557$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$10557$RyrJs
                              '(any any)))))
                        g$x$10556$RyrJs)))))
          ((case-lambda
             ((g$t$10545$RyrJs)
              ((case-lambda
                 ((g$ls/false$10546$RyrJs)
                  (if g$ls/false$10546$RyrJs
                    (apply
                      (case-lambda
                        ((g$binding*$10547$RyrJs
                           g$test$10548$RyrJs
                           g$expr*$10549$RyrJs
                           g$command*$10550$RyrJs)
                         ((case-lambda
                            ((g$t$10551$RyrJs)
                             ((case-lambda
                                ((g$ls/false$10552$RyrJs)
                                 (if g$ls/false$10552$RyrJs
                                   (apply
                                     (case-lambda
                                       ((g$x*$10553$RyrJs
                                          g$init*$10554$RyrJs
                                          g$step*$10555$RyrJs)
                                        (if (g$valid-bound-ids?$9328$RyrJs
                                              g$x*$10553$RyrJs)
                                          (g$bless$9649$RyrJs
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$10553$RyrJs
                                                    (list
                                                      'if
                                                      g$test$10548$RyrJs
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$10549$RyrJs))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$10550$RyrJs
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$10555$RyrJs))))))))
                                              (cons
                                                'loop
                                                g$init*$10554$RyrJs)))
                                          (g$syntax-violation$9805$RyrJs
                                            '#f
                                            '"invalid bindings"
                                            g$stx$10543$RyrJs))))
                                     g$ls/false$10552$RyrJs)
                                   (g$syntax-violation$9805$RyrJs
                                     '#f
                                     '"invalid syntax"
                                     g$t$10551$RyrJs))))
                              (g$syntax-dispatch$9686$RyrJs
                                g$t$10551$RyrJs
                                '#(each (any any any))))))
                          (g$map$5807$RyrJs
                            g$bind$10544$RyrJs
                            g$binding*$10547$RyrJs))))
                      g$ls/false$10546$RyrJs)
                    (g$syntax-violation$9805$RyrJs
                      '#f
                      '"invalid syntax"
                      g$t$10545$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$10545$RyrJs
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$10543$RyrJs)))))
   (g$let*-macro$9669$RyrJs
     g$let*-macro$13259$RyrJs
     (case-lambda
       ((g$stx$10568$RyrJs)
        ((case-lambda
           ((g$t$10569$RyrJs)
            ((case-lambda
               ((g$ls/false$10570$RyrJs)
                (if (if g$ls/false$10570$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$10571$RyrJs
                               g$rhs*$10572$RyrJs
                               g$b$10573$RyrJs
                               g$b*$10574$RyrJs)
                             (g$for-all$5805$RyrJs
                               g$id?$9323$RyrJs
                               g$lhs*$10571$RyrJs)))
                          g$ls/false$10570$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$10575$RyrJs
                         g$rhs*$10576$RyrJs
                         g$b$10577$RyrJs
                         g$b*$10578$RyrJs)
                       (g$bless$9649$RyrJs
                         ((letrec ((g$f$10579$RyrJs
                                     (case-lambda
                                       ((g$x*$10580$RyrJs)
                                        (if (null? g$x*$10580$RyrJs)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$10577$RyrJs
                                                g$b*$10578$RyrJs)))
                                          (if (null?
                                                (cdr g$x*$10580$RyrJs))
                                            (cons
                                              'let
                                              (cons
                                                (list
                                                  (car g$x*$10580$RyrJs))
                                                (cons
                                                  g$b$10577$RyrJs
                                                  g$b*$10578$RyrJs)))
                                            (list
                                              'let
                                              (list
                                                (car g$x*$10580$RyrJs))
                                              (g$f$10579$RyrJs
                                                (cdr g$x*$10580$RyrJs)))))))))
                            g$f$10579$RyrJs)
                          (g$map$5807$RyrJs
                            list
                            g$lhs*$10575$RyrJs
                            g$rhs*$10576$RyrJs)))))
                    g$ls/false$10570$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10569$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10569$RyrJs
               '(_ #(each (any any)) any . each-any)))))
         g$stx$10568$RyrJs))))
   (g$or-macro$9670$RyrJs
     g$or-macro$13260$RyrJs
     (case-lambda
       ((g$stx$10581$RyrJs)
        ((case-lambda
           ((g$t$10582$RyrJs)
            ((case-lambda
               ((g$ls/false$10583$RyrJs)
                (if g$ls/false$10583$RyrJs
                  (apply (case-lambda (() '#f)) g$ls/false$10583$RyrJs)
                  ((case-lambda
                     ((g$t$10584$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10585$RyrJs)
                          (if g$ls/false$10585$RyrJs
                            (apply
                              (case-lambda
                                ((g$e$10586$RyrJs g$e*$10587$RyrJs)
                                 (g$bless$9649$RyrJs
                                   ((letrec ((g$f$10588$RyrJs
                                               (case-lambda
                                                 ((g$e$10589$RyrJs
                                                    g$e*$10590$RyrJs)
                                                  (if (null?
                                                        g$e*$10590$RyrJs)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$10589$RyrJs)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$10589$RyrJs))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$10588$RyrJs
                                                          (car g$e*$10590$RyrJs)
                                                          (cdr g$e*$10590$RyrJs)))))))))
                                      g$f$10588$RyrJs)
                                    g$e$10586$RyrJs
                                    g$e*$10587$RyrJs))))
                              g$ls/false$10585$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$10584$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10584$RyrJs
                         '(_ any . each-any)))))
                   g$t$10582$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10582$RyrJs '(_)))))
         g$stx$10581$RyrJs))))
   (g$and-macro$9671$RyrJs
     g$and-macro$13261$RyrJs
     (case-lambda
       ((g$stx$10591$RyrJs)
        ((case-lambda
           ((g$t$10592$RyrJs)
            ((case-lambda
               ((g$ls/false$10593$RyrJs)
                (if g$ls/false$10593$RyrJs
                  (apply (case-lambda (() '#t)) g$ls/false$10593$RyrJs)
                  ((case-lambda
                     ((g$t$10594$RyrJs)
                      ((case-lambda
                         ((g$ls/false$10595$RyrJs)
                          (if g$ls/false$10595$RyrJs
                            (apply
                              (case-lambda
                                ((g$e$10596$RyrJs g$e*$10597$RyrJs)
                                 (g$bless$9649$RyrJs
                                   ((letrec ((g$f$10598$RyrJs
                                               (case-lambda
                                                 ((g$e$10599$RyrJs
                                                    g$e*$10600$RyrJs)
                                                  (if (null?
                                                        g$e*$10600$RyrJs)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$10599$RyrJs)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$10599$RyrJs
                                                        (cons
                                                          (g$f$10598$RyrJs
                                                            (car g$e*$10600$RyrJs)
                                                            (cdr g$e*$10600$RyrJs))
                                                          '(#f)))))))))
                                      g$f$10598$RyrJs)
                                    g$e$10596$RyrJs
                                    g$e*$10597$RyrJs))))
                              g$ls/false$10595$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$10594$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$10594$RyrJs
                         '(_ any . each-any)))))
                   g$t$10592$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$10592$RyrJs '(_)))))
         g$stx$10591$RyrJs))))
   (g$cond-macro$9672$RyrJs
     g$cond-macro$13262$RyrJs
     (case-lambda
       ((g$stx$10601$RyrJs)
        ((case-lambda
           ((g$t$10602$RyrJs)
            ((case-lambda
               ((g$ls/false$10603$RyrJs)
                (if g$ls/false$10603$RyrJs
                  (apply
                    (case-lambda
                      ((g$cls$10604$RyrJs g$cls*$10605$RyrJs)
                       (g$bless$9649$RyrJs
                         ((letrec ((g$f$10606$RyrJs
                                     (case-lambda
                                       ((g$cls$10607$RyrJs
                                          g$cls*$10608$RyrJs)
                                        (if (null? g$cls*$10608$RyrJs)
                                          ((case-lambda
                                             ((g$t$10609$RyrJs)
                                              ((case-lambda
                                                 ((g$ls/false$10610$RyrJs)
                                                  (if g$ls/false$10610$RyrJs
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$10611$RyrJs
                                                           g$e*$10612$RyrJs)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$10611$RyrJs
                                                             g$e*$10612$RyrJs))))
                                                      g$ls/false$10610$RyrJs)
                                                    ((case-lambda
                                                       ((g$t$10613$RyrJs)
                                                        ((case-lambda
                                                           ((g$ls/false$10614$RyrJs)
                                                            (if g$ls/false$10614$RyrJs
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$10615$RyrJs
                                                                     g$p$10616$RyrJs)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$10615$RyrJs))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$10616$RyrJs
                                                                         '(t))))))
                                                                g$ls/false$10614$RyrJs)
                                                              ((case-lambda
                                                                 ((g$t$10617$RyrJs)
                                                                  ((case-lambda
                                                                     ((g$ls/false$10618$RyrJs)
                                                                      (if g$ls/false$10618$RyrJs
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$10619$RyrJs)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$10619$RyrJs
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$10618$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$t$10620$RyrJs)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10621$RyrJs)
                                                                                (if g$ls/false$10621$RyrJs
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$10622$RyrJs
                                                                                         g$e*$10623$RyrJs)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$10622$RyrJs
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$10623$RyrJs))))
                                                                                    g$ls/false$10621$RyrJs)
                                                                                  ((case-lambda
                                                                                     ((g$t$10624$RyrJs)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10625$RyrJs)
                                                                                          (if g$ls/false$10625$RyrJs
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9805$RyrJs
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$10601$RyrJs)))
                                                                                              g$ls/false$10625$RyrJs)
                                                                                            (g$syntax-violation$9805$RyrJs
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10624$RyrJs))))
                                                                                       (g$syntax-dispatch$9686$RyrJs
                                                                                         g$t$10624$RyrJs
                                                                                         '_))))
                                                                                   g$t$10620$RyrJs))))
                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                               g$t$10620$RyrJs
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$10617$RyrJs))))
                                                                   (g$syntax-dispatch$9686$RyrJs
                                                                     g$t$10617$RyrJs
                                                                     '(any)))))
                                                               g$t$10613$RyrJs))))
                                                         (g$syntax-dispatch$9686$RyrJs
                                                           g$t$10613$RyrJs
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$10609$RyrJs))))
                                               (g$syntax-dispatch$9686$RyrJs
                                                 g$t$10609$RyrJs
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$10607$RyrJs)
                                          ((case-lambda
                                             ((g$t$10626$RyrJs)
                                              ((case-lambda
                                                 ((g$ls/false$10627$RyrJs)
                                                  (if g$ls/false$10627$RyrJs
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$10628$RyrJs
                                                           g$e*$10629$RyrJs)
                                                         (g$syntax-violation$9805$RyrJs
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$10601$RyrJs)))
                                                      g$ls/false$10627$RyrJs)
                                                    ((case-lambda
                                                       ((g$t$10630$RyrJs)
                                                        ((case-lambda
                                                           ((g$ls/false$10631$RyrJs)
                                                            (if g$ls/false$10631$RyrJs
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$10632$RyrJs
                                                                     g$p$10633$RyrJs)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$10632$RyrJs))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$10633$RyrJs
                                                                         '(t))
                                                                       (g$f$10606$RyrJs
                                                                         (car g$cls*$10608$RyrJs)
                                                                         (cdr g$cls*$10608$RyrJs))))))
                                                                g$ls/false$10631$RyrJs)
                                                              ((case-lambda
                                                                 ((g$t$10634$RyrJs)
                                                                  ((case-lambda
                                                                     ((g$ls/false$10635$RyrJs)
                                                                      (if g$ls/false$10635$RyrJs
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$10636$RyrJs)
                                                                             (list
                                                                               'or
                                                                               g$e$10636$RyrJs
                                                                               (g$f$10606$RyrJs
                                                                                 (car g$cls*$10608$RyrJs)
                                                                                 (cdr g$cls*$10608$RyrJs)))))
                                                                          g$ls/false$10635$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$t$10637$RyrJs)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10638$RyrJs)
                                                                                (if g$ls/false$10638$RyrJs
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$10639$RyrJs
                                                                                         g$e*$10640$RyrJs)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$10639$RyrJs
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$10640$RyrJs)
                                                                                         (g$f$10606$RyrJs
                                                                                           (car g$cls*$10608$RyrJs)
                                                                                           (cdr g$cls*$10608$RyrJs)))))
                                                                                    g$ls/false$10638$RyrJs)
                                                                                  ((case-lambda
                                                                                     ((g$t$10641$RyrJs)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10642$RyrJs)
                                                                                          (if g$ls/false$10642$RyrJs
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9805$RyrJs
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$10601$RyrJs)))
                                                                                              g$ls/false$10642$RyrJs)
                                                                                            (g$syntax-violation$9805$RyrJs
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10641$RyrJs))))
                                                                                       (g$syntax-dispatch$9686$RyrJs
                                                                                         g$t$10641$RyrJs
                                                                                         '_))))
                                                                                   g$t$10637$RyrJs))))
                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                               g$t$10637$RyrJs
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$10634$RyrJs))))
                                                                   (g$syntax-dispatch$9686$RyrJs
                                                                     g$t$10634$RyrJs
                                                                     '(any)))))
                                                               g$t$10630$RyrJs))))
                                                         (g$syntax-dispatch$9686$RyrJs
                                                           g$t$10630$RyrJs
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$10626$RyrJs))))
                                               (g$syntax-dispatch$9686$RyrJs
                                                 g$t$10626$RyrJs
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$10607$RyrJs))))))
                            g$f$10606$RyrJs)
                          g$cls$10604$RyrJs
                          g$cls*$10605$RyrJs))))
                    g$ls/false$10603$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10602$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10602$RyrJs
               '(_ any . each-any)))))
         g$stx$10601$RyrJs))))
   (g$do-include$9673$RyrJs
     g$do-include$13263$RyrJs
     (case-lambda
       ((g$stx$10643$RyrJs g$id$10644$RyrJs g$filename$10645$RyrJs)
        ((case-lambda
           ((g$filename$10646$RyrJs)
            (begin
              (if (not (if (string? g$filename$10646$RyrJs)
                         (begin '#f (g$id?$9323$RyrJs g$id$10644$RyrJs))
                         '#f))
                (g$syntax-violation$9805$RyrJs
                  '#f
                  '"invalid syntax"
                  g$stx$10643$RyrJs)
                (void))
              (cons
                (g$bless$9649$RyrJs 'begin)
                (g$with-input-from-file$7886$RyrJs
                  g$filename$10646$RyrJs
                  (case-lambda
                    (()
                     ((letrec ((g$f$10647$RyrJs
                                 (case-lambda
                                   ((g$ls$10648$RyrJs)
                                    ((case-lambda
                                       ((g$x$10649$RyrJs)
                                        (if (eof-object?
                                              g$x$10649$RyrJs)
                                          (g$reverse$6463$RyrJs
                                            g$ls$10648$RyrJs)
                                          (g$f$10647$RyrJs
                                            (cons
                                              (g$datum->stx$9306$RyrJs
                                                g$id$10644$RyrJs
                                                g$x$10649$RyrJs)
                                              g$ls$10648$RyrJs)))))
                                     (read-annotated))))))
                        g$f$10647$RyrJs)
                      '()))))))))
         (g$stx->datum$9334$RyrJs g$filename$10645$RyrJs)))))
   (g$include-macro$9674$RyrJs
     g$include-macro$13264$RyrJs
     (case-lambda
       ((g$e$10650$RyrJs)
        ((case-lambda
           ((g$t$10651$RyrJs)
            ((case-lambda
               ((g$ls/false$10652$RyrJs)
                (if g$ls/false$10652$RyrJs
                  (apply
                    (case-lambda
                      ((g$id$10653$RyrJs g$filename$10654$RyrJs)
                       (g$do-include$9673$RyrJs
                         g$e$10650$RyrJs
                         g$id$10653$RyrJs
                         g$filename$10654$RyrJs)))
                    g$ls/false$10652$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10651$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10651$RyrJs
               '(any any)))))
         g$e$10650$RyrJs))))
   (g$include-into-macro$9675$RyrJs
     g$include-into-macro$13265$RyrJs
     (case-lambda
       ((g$e$10655$RyrJs)
        ((case-lambda
           ((g$t$10656$RyrJs)
            ((case-lambda
               ((g$ls/false$10657$RyrJs)
                (if g$ls/false$10657$RyrJs
                  (apply
                    (case-lambda
                      ((g$id$10658$RyrJs g$filename$10659$RyrJs)
                       (g$do-include$9673$RyrJs
                         g$e$10655$RyrJs
                         g$id$10658$RyrJs
                         g$filename$10659$RyrJs)))
                    g$ls/false$10657$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10656$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10656$RyrJs
               '(_ any any)))))
         g$e$10655$RyrJs))))
   (g$syntax-rules-macro$9676$RyrJs
     g$syntax-rules-macro$13266$RyrJs
     (case-lambda
       ((g$e$10660$RyrJs)
        ((case-lambda
           ((g$t$10661$RyrJs)
            ((case-lambda
               ((g$ls/false$10662$RyrJs)
                (if g$ls/false$10662$RyrJs
                  (apply
                    (case-lambda
                      ((g$lits$10663$RyrJs
                         g$pat*$10664$RyrJs
                         g$tmp*$10665$RyrJs)
                       (begin
                         (g$verify-literals$9689$RyrJs
                           g$lits$10663$RyrJs
                           g$e$10660$RyrJs)
                         (g$bless$9649$RyrJs
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$10663$RyrJs
                                   (g$map$5807$RyrJs
                                     (case-lambda
                                       ((g$pat$10666$RyrJs
                                          g$tmp$10667$RyrJs)
                                        ((case-lambda
                                           ((g$t$10668$RyrJs)
                                            ((case-lambda
                                               ((g$ls/false$10669$RyrJs)
                                                (if g$ls/false$10669$RyrJs
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$10670$RyrJs)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$10670$RyrJs)
                                                         (list
                                                           'syntax
                                                           g$tmp$10667$RyrJs))))
                                                    g$ls/false$10669$RyrJs)
                                                  ((case-lambda
                                                     ((g$t$10671$RyrJs)
                                                      ((case-lambda
                                                         ((g$ls/false$10672$RyrJs)
                                                          (if g$ls/false$10672$RyrJs
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$9805$RyrJs
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$10660$RyrJs
                                                                   g$pat$10666$RyrJs)))
                                                              g$ls/false$10672$RyrJs)
                                                            (g$syntax-violation$9805$RyrJs
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$10671$RyrJs))))
                                                       (g$syntax-dispatch$9686$RyrJs
                                                         g$t$10671$RyrJs
                                                         '_))))
                                                   g$t$10668$RyrJs))))
                                             (g$syntax-dispatch$9686$RyrJs
                                               g$t$10668$RyrJs
                                               '(_ . any)))))
                                         g$pat$10666$RyrJs)))
                                     g$pat*$10664$RyrJs
                                     g$tmp*$10665$RyrJs)))))))))
                    g$ls/false$10662$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$10661$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$10661$RyrJs
               '(_ each-any . #(each (any any)))))))
         g$e$10660$RyrJs))))
   (g$quasiquote-macro$9677$RyrJs
     g$quasiquote-macro$13267$RyrJs
     ((case-lambda
        (()
         (letrec* ((g$datum$10673$RyrJs
                     (case-lambda
                       ((g$x$10817$RyrJs)
                        (list
                          (g$scheme-stx$9629$RyrJs 'quote)
                          (g$mkstx$9311$RyrJs
                            g$x$10817$RyrJs
                            '()
                            '()
                            '())))))
                   (g$quasicons*$10702$RyrJs
                     (case-lambda
                       ((g$x$10813$RyrJs g$y$10814$RyrJs)
                        ((letrec ((g$f$10815$RyrJs
                                    (case-lambda
                                      ((g$x$10816$RyrJs)
                                       (if (null? g$x$10816$RyrJs)
                                         g$y$10814$RyrJs
                                         (g$quasicons$10703$RyrJs
                                           (car g$x$10816$RyrJs)
                                           (g$f$10815$RyrJs
                                             (cdr g$x$10816$RyrJs))))))))
                           g$f$10815$RyrJs)
                         g$x$10813$RyrJs))))
                   (g$quasicons$10703$RyrJs
                     (case-lambda
                       ((g$x$10794$RyrJs g$y$10795$RyrJs)
                        ((case-lambda
                           ((g$t$10796$RyrJs)
                            ((case-lambda
                               ((g$ls/false$10797$RyrJs)
                                (if g$ls/false$10797$RyrJs
                                  (apply
                                    (case-lambda
                                      ((g$dy$10798$RyrJs)
                                       ((case-lambda
                                          ((g$t$10799$RyrJs)
                                           ((case-lambda
                                              ((g$ls/false$10800$RyrJs)
                                               (if g$ls/false$10800$RyrJs
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$10801$RyrJs)
                                                      (list
                                                        (g$scheme-stx$9629$RyrJs
                                                          'quote)
                                                        (cons
                                                          g$dx$10801$RyrJs
                                                          g$dy$10798$RyrJs))))
                                                   g$ls/false$10800$RyrJs)
                                                 ((case-lambda
                                                    ((g$t$10802$RyrJs)
                                                     ((case-lambda
                                                        ((g$ls/false$10803$RyrJs)
                                                         (if g$ls/false$10803$RyrJs
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$10804$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10805$RyrJs)
                                                                        (if g$ls/false$10805$RyrJs
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$9629$RyrJs
                                                                                   'list)
                                                                                 g$x$10794$RyrJs)))
                                                                            g$ls/false$10805$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$t$10806$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10807$RyrJs)
                                                                                  (if g$ls/false$10807$RyrJs
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$9629$RyrJs
                                                                                             'cons)
                                                                                           g$x$10794$RyrJs
                                                                                           g$y$10795$RyrJs)))
                                                                                      g$ls/false$10807$RyrJs)
                                                                                    (g$syntax-violation$9805$RyrJs
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10806$RyrJs))))
                                                                               (g$syntax-dispatch$9686$RyrJs
                                                                                 g$t$10806$RyrJs
                                                                                 '_))))
                                                                           g$t$10804$RyrJs))))
                                                                     (g$syntax-dispatch$9686$RyrJs
                                                                       g$t$10804$RyrJs
                                                                       '()))))
                                                                 g$dy$10798$RyrJs)))
                                                             g$ls/false$10803$RyrJs)
                                                           (g$syntax-violation$9805$RyrJs
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$10802$RyrJs))))
                                                      (g$syntax-dispatch$9686$RyrJs
                                                        g$t$10802$RyrJs
                                                        '_))))
                                                  g$t$10799$RyrJs))))
                                            (g$syntax-dispatch$9686$RyrJs
                                              g$t$10799$RyrJs
                                              '(#(scheme-id quote)
                                                any)))))
                                        g$x$10794$RyrJs)))
                                    g$ls/false$10797$RyrJs)
                                  ((case-lambda
                                     ((g$t$10808$RyrJs)
                                      ((case-lambda
                                         ((g$ls/false$10809$RyrJs)
                                          (if g$ls/false$10809$RyrJs
                                            (apply
                                              (case-lambda
                                                ((g$stuff$10810$RyrJs)
                                                 (g$cons*$5809$RyrJs
                                                   (g$scheme-stx$9629$RyrJs
                                                     'list)
                                                   g$x$10794$RyrJs
                                                   g$stuff$10810$RyrJs)))
                                              g$ls/false$10809$RyrJs)
                                            ((case-lambda
                                               ((g$t$10811$RyrJs)
                                                ((case-lambda
                                                   ((g$ls/false$10812$RyrJs)
                                                    (if g$ls/false$10812$RyrJs
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$9629$RyrJs
                                                               'cons)
                                                             g$x$10794$RyrJs
                                                             g$y$10795$RyrJs)))
                                                        g$ls/false$10812$RyrJs)
                                                      (g$syntax-violation$9805$RyrJs
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$10811$RyrJs))))
                                                 (g$syntax-dispatch$9686$RyrJs
                                                   g$t$10811$RyrJs
                                                   '_))))
                                             g$t$10808$RyrJs))))
                                       (g$syntax-dispatch$9686$RyrJs
                                         g$t$10808$RyrJs
                                         '(#(scheme-id list)
                                           .
                                           each-any)))))
                                   g$t$10796$RyrJs))))
                             (g$syntax-dispatch$9686$RyrJs
                               g$t$10796$RyrJs
                               '(#(scheme-id quote) any)))))
                         g$y$10795$RyrJs))))
                   (g$quasiappend$10704$RyrJs
                     (case-lambda
                       ((g$x$10781$RyrJs g$y$10782$RyrJs)
                        ((case-lambda
                           ((g$ls$10783$RyrJs)
                            (if (null? g$ls$10783$RyrJs)
                              (list
                                (g$scheme-stx$9629$RyrJs 'quote)
                                '())
                              (if (null? (cdr g$ls$10783$RyrJs))
                                (car g$ls$10783$RyrJs)
                                (g$cons*$5809$RyrJs
                                  (g$scheme-stx$9629$RyrJs 'append)
                                  g$ls$10783$RyrJs)))))
                         ((letrec ((g$f$10784$RyrJs
                                     (case-lambda
                                       ((g$x$10785$RyrJs)
                                        (if (null? g$x$10785$RyrJs)
                                          ((case-lambda
                                             ((g$t$10786$RyrJs)
                                              ((case-lambda
                                                 ((g$ls/false$10787$RyrJs)
                                                  (if g$ls/false$10787$RyrJs
                                                    (apply
                                                      (case-lambda
                                                        (() '()))
                                                      g$ls/false$10787$RyrJs)
                                                    ((case-lambda
                                                       ((g$t$10788$RyrJs)
                                                        ((case-lambda
                                                           ((g$ls/false$10789$RyrJs)
                                                            (if g$ls/false$10789$RyrJs
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$10782$RyrJs)))
                                                                g$ls/false$10789$RyrJs)
                                                              (g$syntax-violation$9805$RyrJs
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$10788$RyrJs))))
                                                         (g$syntax-dispatch$9686$RyrJs
                                                           g$t$10788$RyrJs
                                                           '_))))
                                                     g$t$10786$RyrJs))))
                                               (g$syntax-dispatch$9686$RyrJs
                                                 g$t$10786$RyrJs
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           g$y$10782$RyrJs)
                                          ((case-lambda
                                             ((g$t$10790$RyrJs)
                                              ((case-lambda
                                                 ((g$ls/false$10791$RyrJs)
                                                  (if g$ls/false$10791$RyrJs
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$10784$RyrJs
                                                           (cdr g$x$10785$RyrJs))))
                                                      g$ls/false$10791$RyrJs)
                                                    ((case-lambda
                                                       ((g$t$10792$RyrJs)
                                                        ((case-lambda
                                                           ((g$ls/false$10793$RyrJs)
                                                            (if g$ls/false$10793$RyrJs
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$10785$RyrJs)
                                                                     (g$f$10784$RyrJs
                                                                       (cdr g$x$10785$RyrJs)))))
                                                                g$ls/false$10793$RyrJs)
                                                              (g$syntax-violation$9805$RyrJs
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$10792$RyrJs))))
                                                         (g$syntax-dispatch$9686$RyrJs
                                                           g$t$10792$RyrJs
                                                           '_))))
                                                     g$t$10790$RyrJs))))
                                               (g$syntax-dispatch$9686$RyrJs
                                                 g$t$10790$RyrJs
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           (car g$x$10785$RyrJs)))))))
                            g$f$10784$RyrJs)
                          g$x$10781$RyrJs)))))
                   (g$quasivector$10705$RyrJs
                     (case-lambda
                       ((g$x$10756$RyrJs)
                        ((case-lambda
                           ((g$pat-x$10757$RyrJs)
                            ((case-lambda
                               ((g$t$10758$RyrJs)
                                ((case-lambda
                                   ((g$ls/false$10759$RyrJs)
                                    (if g$ls/false$10759$RyrJs
                                      (apply
                                        (case-lambda
                                          ((g$x*$10760$RyrJs)
                                           (list
                                             (g$scheme-stx$9629$RyrJs
                                               'quote)
                                             (g$list->vector$6451$RyrJs
                                               g$x*$10760$RyrJs))))
                                        g$ls/false$10759$RyrJs)
                                      ((case-lambda
                                         ((g$t$10761$RyrJs)
                                          ((case-lambda
                                             ((g$ls/false$10762$RyrJs)
                                              (if g$ls/false$10762$RyrJs
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$10763$RyrJs
                                                                 (case-lambda
                                                                   ((g$x$10764$RyrJs
                                                                      g$k$10765$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$t$10766$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10767$RyrJs)
                                                                            (if g$ls/false$10767$RyrJs
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$10768$RyrJs)
                                                                                   (g$k$10765$RyrJs
                                                                                     (g$map$5807$RyrJs
                                                                                       (case-lambda
                                                                                         ((g$x$10769$RyrJs)
                                                                                          (list
                                                                                            (g$scheme-stx$9629$RyrJs
                                                                                              'quote)
                                                                                            g$x$10769$RyrJs)))
                                                                                       g$x*$10768$RyrJs))))
                                                                                g$ls/false$10767$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$t$10770$RyrJs)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10771$RyrJs)
                                                                                      (if g$ls/false$10771$RyrJs
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$10772$RyrJs)
                                                                                             (g$k$10765$RyrJs
                                                                                               g$x*$10772$RyrJs)))
                                                                                          g$ls/false$10771$RyrJs)
                                                                                        ((case-lambda
                                                                                           ((g$t$10773$RyrJs)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10774$RyrJs)
                                                                                                (if g$ls/false$10774$RyrJs
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$10775$RyrJs
                                                                                                         g$y$10776$RyrJs)
                                                                                                       (g$f$10763$RyrJs
                                                                                                         g$y$10776$RyrJs
                                                                                                         (case-lambda
                                                                                                           ((g$ls$10777$RyrJs)
                                                                                                            (g$k$10765$RyrJs
                                                                                                              (cons
                                                                                                                g$x$10775$RyrJs
                                                                                                                g$ls$10777$RyrJs)))))))
                                                                                                    g$ls/false$10774$RyrJs)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10778$RyrJs)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$10779$RyrJs)
                                                                                                          (if g$ls/false$10779$RyrJs
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$9629$RyrJs
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$10757$RyrJs)))
                                                                                                              g$ls/false$10779$RyrJs)
                                                                                                            (g$syntax-violation$9805$RyrJs
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$10778$RyrJs))))
                                                                                                       (g$syntax-dispatch$9686$RyrJs
                                                                                                         g$t$10778$RyrJs
                                                                                                         '_))))
                                                                                                   g$t$10773$RyrJs))))
                                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                                               g$t$10773$RyrJs
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$10770$RyrJs))))
                                                                                   (g$syntax-dispatch$9686$RyrJs
                                                                                     g$t$10770$RyrJs
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$10766$RyrJs))))
                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                           g$t$10766$RyrJs
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$10764$RyrJs)))))
                                                        g$f$10763$RyrJs)
                                                      g$x$10756$RyrJs
                                                      (case-lambda
                                                        ((g$ls$10780$RyrJs)
                                                         (g$cons*$5809$RyrJs
                                                           (g$scheme-stx$9629$RyrJs
                                                             'vector)
                                                           g$ls$10780$RyrJs))))))
                                                  g$ls/false$10762$RyrJs)
                                                (g$syntax-violation$9805$RyrJs
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$10761$RyrJs))))
                                           (g$syntax-dispatch$9686$RyrJs
                                             g$t$10761$RyrJs
                                             '_))))
                                       g$t$10758$RyrJs))))
                                 (g$syntax-dispatch$9686$RyrJs
                                   g$t$10758$RyrJs
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$10757$RyrJs)))
                         g$x$10756$RyrJs))))
                   (g$vquasi$10706$RyrJs
                     (case-lambda
                       ((g$p$10739$RyrJs g$lev$10740$RyrJs)
                        ((case-lambda
                           ((g$t$10741$RyrJs)
                            ((case-lambda
                               ((g$ls/false$10742$RyrJs)
                                (if g$ls/false$10742$RyrJs
                                  (apply
                                    (case-lambda
                                      ((g$p$10743$RyrJs g$q$10744$RyrJs)
                                       ((case-lambda
                                          ((g$t$10745$RyrJs)
                                           ((case-lambda
                                              ((g$ls/false$10746$RyrJs)
                                               (if g$ls/false$10746$RyrJs
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$10747$RyrJs)
                                                      (if (= g$lev$10740$RyrJs
                                                             '0)
                                                        (g$quasicons*$10702$RyrJs
                                                          g$p$10747$RyrJs
                                                          (g$vquasi$10706$RyrJs
                                                            g$q$10744$RyrJs
                                                            g$lev$10740$RyrJs))
                                                        (g$quasicons$10703$RyrJs
                                                          (g$quasicons$10703$RyrJs
                                                            (g$datum$10673$RyrJs
                                                              'unquote)
                                                            (g$quasi$10707$RyrJs
                                                              g$p$10747$RyrJs
                                                              (- g$lev$10740$RyrJs
                                                                 '1)))
                                                          (g$vquasi$10706$RyrJs
                                                            g$q$10744$RyrJs
                                                            g$lev$10740$RyrJs)))))
                                                   g$ls/false$10746$RyrJs)
                                                 ((case-lambda
                                                    ((g$t$10748$RyrJs)
                                                     ((case-lambda
                                                        ((g$ls/false$10749$RyrJs)
                                                         (if g$ls/false$10749$RyrJs
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$10750$RyrJs)
                                                                (if (= g$lev$10740$RyrJs
                                                                       '0)
                                                                  (g$quasiappend$10704$RyrJs
                                                                    g$p$10750$RyrJs
                                                                    (g$vquasi$10706$RyrJs
                                                                      g$q$10744$RyrJs
                                                                      g$lev$10740$RyrJs))
                                                                  (g$quasicons$10703$RyrJs
                                                                    (g$quasicons$10703$RyrJs
                                                                      (g$datum$10673$RyrJs
                                                                        'unquote-splicing)
                                                                      (g$quasi$10707$RyrJs
                                                                        g$p$10750$RyrJs
                                                                        (- g$lev$10740$RyrJs
                                                                           '1)))
                                                                    (g$vquasi$10706$RyrJs
                                                                      g$q$10744$RyrJs
                                                                      g$lev$10740$RyrJs)))))
                                                             g$ls/false$10749$RyrJs)
                                                           ((case-lambda
                                                              ((g$t$10751$RyrJs)
                                                               ((case-lambda
                                                                  ((g$ls/false$10752$RyrJs)
                                                                   (if g$ls/false$10752$RyrJs
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$10753$RyrJs)
                                                                          (g$quasicons$10703$RyrJs
                                                                            (g$quasi$10707$RyrJs
                                                                              g$p$10753$RyrJs
                                                                              g$lev$10740$RyrJs)
                                                                            (g$vquasi$10706$RyrJs
                                                                              g$q$10744$RyrJs
                                                                              g$lev$10740$RyrJs))))
                                                                       g$ls/false$10752$RyrJs)
                                                                     (g$syntax-violation$9805$RyrJs
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$10751$RyrJs))))
                                                                (g$syntax-dispatch$9686$RyrJs
                                                                  g$t$10751$RyrJs
                                                                  'any))))
                                                            g$t$10748$RyrJs))))
                                                      (g$syntax-dispatch$9686$RyrJs
                                                        g$t$10748$RyrJs
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$10745$RyrJs))))
                                            (g$syntax-dispatch$9686$RyrJs
                                              g$t$10745$RyrJs
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$10743$RyrJs)))
                                    g$ls/false$10742$RyrJs)
                                  ((case-lambda
                                     ((g$t$10754$RyrJs)
                                      ((case-lambda
                                         ((g$ls/false$10755$RyrJs)
                                          (if g$ls/false$10755$RyrJs
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$9629$RyrJs
                                                     'quote)
                                                   '())))
                                              g$ls/false$10755$RyrJs)
                                            (g$syntax-violation$9805$RyrJs
                                              '#f
                                              '"invalid syntax"
                                              g$t$10754$RyrJs))))
                                       (g$syntax-dispatch$9686$RyrJs
                                         g$t$10754$RyrJs
                                         '()))))
                                   g$t$10741$RyrJs))))
                             (g$syntax-dispatch$9686$RyrJs
                               g$t$10741$RyrJs
                               '(any . any)))))
                         g$p$10739$RyrJs))))
                   (g$quasi$10707$RyrJs
                     (case-lambda
                       ((g$p$10712$RyrJs g$lev$10713$RyrJs)
                        ((case-lambda
                           ((g$t$10714$RyrJs)
                            ((case-lambda
                               ((g$ls/false$10715$RyrJs)
                                (if g$ls/false$10715$RyrJs
                                  (apply
                                    (case-lambda
                                      ((g$p$10716$RyrJs)
                                       (if (= g$lev$10713$RyrJs '0)
                                         g$p$10716$RyrJs
                                         (g$quasicons$10703$RyrJs
                                           (g$datum$10673$RyrJs
                                             'unquote)
                                           (g$quasi$10707$RyrJs
                                             (list g$p$10716$RyrJs)
                                             (- g$lev$10713$RyrJs
                                                '1))))))
                                    g$ls/false$10715$RyrJs)
                                  ((case-lambda
                                     ((g$t$10717$RyrJs)
                                      ((case-lambda
                                         ((g$ls/false$10718$RyrJs)
                                          (if g$ls/false$10718$RyrJs
                                            (apply
                                              (case-lambda
                                                ((g$p$10719$RyrJs
                                                   g$q$10720$RyrJs)
                                                 (if (= g$lev$10713$RyrJs
                                                        '0)
                                                   (g$quasicons*$10702$RyrJs
                                                     g$p$10719$RyrJs
                                                     (g$quasi$10707$RyrJs
                                                       g$q$10720$RyrJs
                                                       g$lev$10713$RyrJs))
                                                   (g$quasicons$10703$RyrJs
                                                     (g$quasicons$10703$RyrJs
                                                       (g$datum$10673$RyrJs
                                                         'unquote)
                                                       (g$quasi$10707$RyrJs
                                                         g$p$10719$RyrJs
                                                         (- g$lev$10713$RyrJs
                                                            '1)))
                                                     (g$quasi$10707$RyrJs
                                                       g$q$10720$RyrJs
                                                       g$lev$10713$RyrJs)))))
                                              g$ls/false$10718$RyrJs)
                                            ((case-lambda
                                               ((g$t$10721$RyrJs)
                                                ((case-lambda
                                                   ((g$ls/false$10722$RyrJs)
                                                    (if g$ls/false$10722$RyrJs
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$10723$RyrJs
                                                             g$q$10724$RyrJs)
                                                           (if (= g$lev$10713$RyrJs
                                                                  '0)
                                                             (g$quasiappend$10704$RyrJs
                                                               g$p$10723$RyrJs
                                                               (g$quasi$10707$RyrJs
                                                                 g$q$10724$RyrJs
                                                                 g$lev$10713$RyrJs))
                                                             (g$quasicons$10703$RyrJs
                                                               (g$quasicons$10703$RyrJs
                                                                 (g$datum$10673$RyrJs
                                                                   'unquote-splicing)
                                                                 (g$quasi$10707$RyrJs
                                                                   g$p$10723$RyrJs
                                                                   (- g$lev$10713$RyrJs
                                                                      '1)))
                                                               (g$quasi$10707$RyrJs
                                                                 g$q$10724$RyrJs
                                                                 g$lev$10713$RyrJs)))))
                                                        g$ls/false$10722$RyrJs)
                                                      ((case-lambda
                                                         ((g$t$10725$RyrJs)
                                                          ((case-lambda
                                                             ((g$ls/false$10726$RyrJs)
                                                              (if g$ls/false$10726$RyrJs
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$10727$RyrJs)
                                                                     (g$quasicons$10703$RyrJs
                                                                       (g$datum$10673$RyrJs
                                                                         'quasiquote)
                                                                       (g$quasi$10707$RyrJs
                                                                         (list
                                                                           g$p$10727$RyrJs)
                                                                         (+ g$lev$10713$RyrJs
                                                                            '1)))))
                                                                  g$ls/false$10726$RyrJs)
                                                                ((case-lambda
                                                                   ((g$t$10728$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10729$RyrJs)
                                                                        (if g$ls/false$10729$RyrJs
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$10730$RyrJs
                                                                                 g$q$10731$RyrJs)
                                                                               (g$quasicons$10703$RyrJs
                                                                                 (g$quasi$10707$RyrJs
                                                                                   g$p$10730$RyrJs
                                                                                   g$lev$10713$RyrJs)
                                                                                 (g$quasi$10707$RyrJs
                                                                                   g$q$10731$RyrJs
                                                                                   g$lev$10713$RyrJs))))
                                                                            g$ls/false$10729$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$t$10732$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10733$RyrJs)
                                                                                  (if (if g$ls/false$10733$RyrJs
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$10734$RyrJs)
                                                                                               (not (g$stx?$9295$RyrJs
                                                                                                      g$x$10734$RyrJs))))
                                                                                            g$ls/false$10733$RyrJs))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$10735$RyrJs)
                                                                                         (g$quasivector$10705$RyrJs
                                                                                           (g$vquasi$10706$RyrJs
                                                                                             g$x$10735$RyrJs
                                                                                             g$lev$10713$RyrJs))))
                                                                                      g$ls/false$10733$RyrJs)
                                                                                    ((case-lambda
                                                                                       ((g$t$10736$RyrJs)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10737$RyrJs)
                                                                                            (if g$ls/false$10737$RyrJs
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$10738$RyrJs)
                                                                                                   (list
                                                                                                     (g$scheme-stx$9629$RyrJs
                                                                                                       'quote)
                                                                                                     g$p$10738$RyrJs)))
                                                                                                g$ls/false$10737$RyrJs)
                                                                                              (g$syntax-violation$9805$RyrJs
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10736$RyrJs))))
                                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                                           g$t$10736$RyrJs
                                                                                           'any))))
                                                                                     g$t$10732$RyrJs))))
                                                                               (g$syntax-dispatch$9686$RyrJs
                                                                                 g$t$10732$RyrJs
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$10728$RyrJs))))
                                                                     (g$syntax-dispatch$9686$RyrJs
                                                                       g$t$10728$RyrJs
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$10725$RyrJs))))
                                                           (g$syntax-dispatch$9686$RyrJs
                                                             g$t$10725$RyrJs
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$10721$RyrJs))))
                                                 (g$syntax-dispatch$9686$RyrJs
                                                   g$t$10721$RyrJs
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$10717$RyrJs))))
                                       (g$syntax-dispatch$9686$RyrJs
                                         g$t$10717$RyrJs
                                         '((#(scheme-id unquote)
                                            .
                                            each-any)
                                           .
                                           any)))))
                                   g$t$10714$RyrJs))))
                             (g$syntax-dispatch$9686$RyrJs
                               g$t$10714$RyrJs
                               '(#(scheme-id unquote) any)))))
                         g$p$10712$RyrJs)))))
           (case-lambda
             ((g$x$10708$RyrJs)
              ((case-lambda
                 ((g$t$10709$RyrJs)
                  ((case-lambda
                     ((g$ls/false$10710$RyrJs)
                      (if g$ls/false$10710$RyrJs
                        (apply
                          (case-lambda
                            ((g$e$10711$RyrJs)
                             (g$quasi$10707$RyrJs g$e$10711$RyrJs '0)))
                          g$ls/false$10710$RyrJs)
                        (g$syntax-violation$9805$RyrJs
                          '#f
                          '"invalid syntax"
                          g$t$10709$RyrJs))))
                   (g$syntax-dispatch$9686$RyrJs
                     g$t$10709$RyrJs
                     '(_ any)))))
               g$x$10708$RyrJs))))))))
   (g$quasisyntax-macro$9678$RyrJs
     g$quasisyntax-macro$13268$RyrJs
     ((case-lambda
        (()
         (letrec* ((g$quasi$10818$RyrJs
                     (case-lambda
                       ((g$p$10832$RyrJs g$lev$10833$RyrJs)
                        ((case-lambda
                           ((g$t$10834$RyrJs)
                            ((case-lambda
                               ((g$ls/false$10835$RyrJs)
                                (if g$ls/false$10835$RyrJs
                                  (apply
                                    (case-lambda
                                      ((g$p$10836$RyrJs)
                                       (if (= g$lev$10833$RyrJs '0)
                                         ((case-lambda
                                            ((g$g$10837$RyrJs)
                                             (values
                                               (list g$g$10837$RyrJs)
                                               (list g$p$10836$RyrJs)
                                               g$g$10837$RyrJs)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$10818$RyrJs
                                                g$p$10836$RyrJs
                                                (- g$lev$10833$RyrJs
                                                   '1))))
                                           (case-lambda
                                             ((g$lhs*$10841$RyrJs
                                                g$rhs*$10842$RyrJs
                                                g$p$10843$RyrJs)
                                              ((case-lambda
                                                 ((g$p$10844$RyrJs
                                                    g$rhs*$10845$RyrJs
                                                    g$lhs*$10846$RyrJs)
                                                  (values
                                                    g$lhs*$10846$RyrJs
                                                    g$rhs*$10845$RyrJs
                                                    (list
                                                      'unsyntax
                                                      g$p$10844$RyrJs))))
                                               g$p$10843$RyrJs
                                               g$rhs*$10842$RyrJs
                                               g$lhs*$10841$RyrJs)))))))
                                    g$ls/false$10835$RyrJs)
                                  ((case-lambda
                                     ((g$t$10847$RyrJs)
                                      ((case-lambda
                                         ((g$ls/false$10848$RyrJs)
                                          (if (if g$ls/false$10848$RyrJs
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$10833$RyrJs
                                                          '0)))
                                                    g$ls/false$10848$RyrJs))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$9805$RyrJs
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$10832$RyrJs)))
                                              g$ls/false$10848$RyrJs)
                                            ((case-lambda
                                               ((g$t$10849$RyrJs)
                                                ((case-lambda
                                                   ((g$ls/false$10850$RyrJs)
                                                    (if g$ls/false$10850$RyrJs
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$10851$RyrJs
                                                             g$q$10852$RyrJs)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$10818$RyrJs
                                                                  g$q$10852$RyrJs
                                                                  g$lev$10833$RyrJs)))
                                                             (case-lambda
                                                               ((g$lhs*$10856$RyrJs
                                                                  g$rhs*$10857$RyrJs
                                                                  g$q$10858$RyrJs)
                                                                ((case-lambda
                                                                   ((g$q$10859$RyrJs
                                                                      g$rhs*$10860$RyrJs
                                                                      g$lhs*$10861$RyrJs)
                                                                    (if (= g$lev$10833$RyrJs
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$10862$RyrJs)
                                                                          (values
                                                                            (append
                                                                              g$g*$10862$RyrJs
                                                                              g$lhs*$10861$RyrJs)
                                                                            (append
                                                                              g$p*$10851$RyrJs
                                                                              g$rhs*$10860$RyrJs)
                                                                            (append
                                                                              g$g*$10862$RyrJs
                                                                              g$q$10859$RyrJs))))
                                                                       (g$map$5807$RyrJs
                                                                         (case-lambda
                                                                           ((g$x$10863$RyrJs)
                                                                            (gensym)))
                                                                         g$p*$10851$RyrJs))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$10818$RyrJs
                                                                             g$p*$10851$RyrJs
                                                                             (- g$lev$10833$RyrJs
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$10867$RyrJs
                                                                             g$rhs2*$10868$RyrJs
                                                                             g$p*$10869$RyrJs)
                                                                           ((case-lambda
                                                                              ((g$p*$10870$RyrJs
                                                                                 g$rhs2*$10871$RyrJs
                                                                                 g$lhs2*$10872$RyrJs)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$10872$RyrJs
                                                                                   g$lhs*$10861$RyrJs)
                                                                                 (append
                                                                                   g$rhs2*$10871$RyrJs
                                                                                   g$rhs*$10860$RyrJs)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$10870$RyrJs)
                                                                                   g$q$10859$RyrJs))))
                                                                            g$p*$10869$RyrJs
                                                                            g$rhs2*$10868$RyrJs
                                                                            g$lhs2*$10867$RyrJs)))))))
                                                                 g$q$10858$RyrJs
                                                                 g$rhs*$10857$RyrJs
                                                                 g$lhs*$10856$RyrJs))))))
                                                        g$ls/false$10850$RyrJs)
                                                      ((case-lambda
                                                         ((g$t$10873$RyrJs)
                                                          ((case-lambda
                                                             ((g$ls/false$10874$RyrJs)
                                                              (if g$ls/false$10874$RyrJs
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$10875$RyrJs
                                                                       g$q$10876$RyrJs)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$10818$RyrJs
                                                                            g$q$10876$RyrJs
                                                                            g$lev$10833$RyrJs)))
                                                                       (case-lambda
                                                                         ((g$lhs*$10880$RyrJs
                                                                            g$rhs*$10881$RyrJs
                                                                            g$q$10882$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$q$10883$RyrJs
                                                                                g$rhs*$10884$RyrJs
                                                                                g$lhs*$10885$RyrJs)
                                                                              (if (= g$lev$10833$RyrJs
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$10886$RyrJs)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5807$RyrJs
                                                                                          (case-lambda
                                                                                            ((g$g$10887$RyrJs)
                                                                                             (cons
                                                                                               g$g$10887$RyrJs
                                                                                               '(...))))
                                                                                          g$g*$10886$RyrJs)
                                                                                        g$lhs*$10885$RyrJs)
                                                                                      (append
                                                                                        g$p*$10875$RyrJs
                                                                                        g$rhs*$10884$RyrJs)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5807$RyrJs
                                                                                            (case-lambda
                                                                                              ((g$g$10888$RyrJs)
                                                                                               (cons
                                                                                                 g$g$10888$RyrJs
                                                                                                 '(...))))
                                                                                            g$g*$10886$RyrJs))
                                                                                        g$q$10883$RyrJs))))
                                                                                 (g$map$5807$RyrJs
                                                                                   (case-lambda
                                                                                     ((g$x$10889$RyrJs)
                                                                                      (gensym)))
                                                                                   g$p*$10875$RyrJs))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$10818$RyrJs
                                                                                       g$p*$10875$RyrJs
                                                                                       (- g$lev$10833$RyrJs
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$10893$RyrJs
                                                                                       g$rhs2*$10894$RyrJs
                                                                                       g$p*$10895$RyrJs)
                                                                                     ((case-lambda
                                                                                        ((g$p*$10896$RyrJs
                                                                                           g$rhs2*$10897$RyrJs
                                                                                           g$lhs2*$10898$RyrJs)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$10898$RyrJs
                                                                                             g$lhs*$10885$RyrJs)
                                                                                           (append
                                                                                             g$rhs2*$10897$RyrJs
                                                                                             g$rhs*$10884$RyrJs)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$10896$RyrJs)
                                                                                             g$q$10883$RyrJs))))
                                                                                      g$p*$10895$RyrJs
                                                                                      g$rhs2*$10894$RyrJs
                                                                                      g$lhs2*$10893$RyrJs)))))))
                                                                           g$q$10882$RyrJs
                                                                           g$rhs*$10881$RyrJs
                                                                           g$lhs*$10880$RyrJs))))))
                                                                  g$ls/false$10874$RyrJs)
                                                                ((case-lambda
                                                                   ((g$t$10899$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10900$RyrJs)
                                                                        (if (if g$ls/false$10900$RyrJs
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$10833$RyrJs
                                                                                        '0)))
                                                                                  g$ls/false$10900$RyrJs))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$9805$RyrJs
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$10832$RyrJs)))
                                                                            g$ls/false$10900$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$t$10901$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10902$RyrJs)
                                                                                  (if g$ls/false$10902$RyrJs
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$10903$RyrJs)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$10818$RyrJs
                                                                                                g$p$10903$RyrJs
                                                                                                (+ g$lev$10833$RyrJs
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$10907$RyrJs
                                                                                                g$rhs*$10908$RyrJs
                                                                                                g$p$10909$RyrJs)
                                                                                              ((case-lambda
                                                                                                 ((g$p$10910$RyrJs
                                                                                                    g$rhs*$10911$RyrJs
                                                                                                    g$lhs*$10912$RyrJs)
                                                                                                  (values
                                                                                                    g$lhs*$10912$RyrJs
                                                                                                    g$rhs*$10911$RyrJs
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$10910$RyrJs))))
                                                                                               g$p$10909$RyrJs
                                                                                               g$rhs*$10908$RyrJs
                                                                                               g$lhs*$10907$RyrJs))))))
                                                                                      g$ls/false$10902$RyrJs)
                                                                                    ((case-lambda
                                                                                       ((g$t$10913$RyrJs)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10914$RyrJs)
                                                                                            (if g$ls/false$10914$RyrJs
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$10915$RyrJs
                                                                                                     g$q$10916$RyrJs)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$10818$RyrJs
                                                                                                          g$p$10915$RyrJs
                                                                                                          g$lev$10833$RyrJs)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$10923$RyrJs
                                                                                                          g$rhs*$10924$RyrJs
                                                                                                          g$p$10925$RyrJs)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$10818$RyrJs
                                                                                                               g$q$10916$RyrJs
                                                                                                               g$lev$10833$RyrJs)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$10926$RyrJs
                                                                                                               g$rhs2*$10927$RyrJs
                                                                                                               g$q$10928$RyrJs)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$10929$RyrJs
                                                                                                                   g$rhs2*$10930$RyrJs
                                                                                                                   g$lhs2*$10931$RyrJs
                                                                                                                   g$p$10932$RyrJs
                                                                                                                   g$rhs*$10933$RyrJs
                                                                                                                   g$lhs*$10934$RyrJs)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$10931$RyrJs
                                                                                                                     g$lhs*$10934$RyrJs)
                                                                                                                   (append
                                                                                                                     g$rhs2*$10930$RyrJs
                                                                                                                     g$rhs*$10933$RyrJs)
                                                                                                                   (cons
                                                                                                                     g$p$10932$RyrJs
                                                                                                                     g$q$10929$RyrJs))))
                                                                                                              g$q$10928$RyrJs
                                                                                                              g$rhs2*$10927$RyrJs
                                                                                                              g$lhs2*$10926$RyrJs
                                                                                                              g$p$10925$RyrJs
                                                                                                              g$rhs*$10924$RyrJs
                                                                                                              g$lhs*$10923$RyrJs)))))))))
                                                                                                g$ls/false$10914$RyrJs)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10935$RyrJs)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10936$RyrJs)
                                                                                                      (if g$ls/false$10936$RyrJs
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$10937$RyrJs)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$10818$RyrJs
                                                                                                                    g$x*$10937$RyrJs
                                                                                                                    g$lev$10833$RyrJs)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$10941$RyrJs
                                                                                                                    g$rhs*$10942$RyrJs
                                                                                                                    g$x*$10943$RyrJs)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$10944$RyrJs
                                                                                                                        g$rhs*$10945$RyrJs
                                                                                                                        g$lhs*$10946$RyrJs)
                                                                                                                      (values
                                                                                                                        g$lhs*$10946$RyrJs
                                                                                                                        g$rhs*$10945$RyrJs
                                                                                                                        (g$list->vector$6451$RyrJs
                                                                                                                          g$x*$10944$RyrJs))))
                                                                                                                   g$x*$10943$RyrJs
                                                                                                                   g$rhs*$10942$RyrJs
                                                                                                                   g$lhs*$10941$RyrJs))))))
                                                                                                          g$ls/false$10936$RyrJs)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$10947$RyrJs)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$10948$RyrJs)
                                                                                                                (if g$ls/false$10948$RyrJs
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$10832$RyrJs)))
                                                                                                                    g$ls/false$10948$RyrJs)
                                                                                                                  (g$syntax-violation$9805$RyrJs
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$10947$RyrJs))))
                                                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                                                               g$t$10947$RyrJs
                                                                                                               '_))))
                                                                                                         g$t$10935$RyrJs))))
                                                                                                   (g$syntax-dispatch$9686$RyrJs
                                                                                                     g$t$10935$RyrJs
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$10913$RyrJs))))
                                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                                           g$t$10913$RyrJs
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$10901$RyrJs))))
                                                                               (g$syntax-dispatch$9686$RyrJs
                                                                                 g$t$10901$RyrJs
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$10899$RyrJs))))
                                                                     (g$syntax-dispatch$9686$RyrJs
                                                                       g$t$10899$RyrJs
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$10873$RyrJs))))
                                                           (g$syntax-dispatch$9686$RyrJs
                                                             g$t$10873$RyrJs
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$10849$RyrJs))))
                                                 (g$syntax-dispatch$9686$RyrJs
                                                   g$t$10849$RyrJs
                                                   '((#(scheme-id
                                                        unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$10847$RyrJs))))
                                       (g$syntax-dispatch$9686$RyrJs
                                         g$t$10847$RyrJs
                                         '#(scheme-id unsyntax)))))
                                   g$t$10834$RyrJs))))
                             (g$syntax-dispatch$9686$RyrJs
                               g$t$10834$RyrJs
                               '(#(scheme-id unsyntax) any)))))
                         g$p$10832$RyrJs)))))
           (case-lambda
             ((g$x$10819$RyrJs)
              ((case-lambda
                 ((g$t$10820$RyrJs)
                  ((case-lambda
                     ((g$ls/false$10821$RyrJs)
                      (if g$ls/false$10821$RyrJs
                        (apply
                          (case-lambda
                            ((g$e$10822$RyrJs)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$quasi$10818$RyrJs
                                    g$e$10822$RyrJs
                                    '0)))
                               (case-lambda
                                 ((g$lhs*$10826$RyrJs
                                    g$rhs*$10827$RyrJs
                                    g$v$10828$RyrJs)
                                  ((case-lambda
                                     ((g$v$10829$RyrJs
                                        g$rhs*$10830$RyrJs
                                        g$lhs*$10831$RyrJs)
                                      (g$bless$9649$RyrJs
                                        (list
                                          'syntax-case
                                          (cons
                                            'list
                                            g$rhs*$10830$RyrJs)
                                          '()
                                          (list
                                            g$lhs*$10831$RyrJs
                                            (list
                                              'syntax
                                              g$v$10829$RyrJs))))))
                                   g$v$10828$RyrJs
                                   g$rhs*$10827$RyrJs
                                   g$lhs*$10826$RyrJs))))))
                          g$ls/false$10821$RyrJs)
                        (g$syntax-violation$9805$RyrJs
                          '#f
                          '"invalid syntax"
                          g$t$10820$RyrJs))))
                   (g$syntax-dispatch$9686$RyrJs
                     g$t$10820$RyrJs
                     '(_ any)))))
               g$x$10819$RyrJs))))))))
   (g$define-struct-macro$9679$RyrJs
     g$define-struct-macro$13269$RyrJs
     (case-lambda
       ((g$stx$10949$RyrJs)
        (g$syntax-violation$9805$RyrJs
          '#f
          '"define-struct not supported"
          g$stx$10949$RyrJs))))
   (g$define-record-type-macro$9680$RyrJs
     g$define-record-type-macro$13270$RyrJs
     (case-lambda
       ((g$x$10950$RyrJs)
        (letrec* ((g$id$10951$RyrJs
                    (case-lambda
                      ((g$ctxt$11203$RyrJs . g$str*$11204$RyrJs)
                       (g$datum->syntax$9807$RyrJs
                         g$ctxt$11203$RyrJs
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5807$RyrJs
                               (case-lambda
                                 ((g$x$11205$RyrJs)
                                  (if (g$symbol?$6456$RyrJs
                                        g$x$11205$RyrJs)
                                    (symbol->string g$x$11205$RyrJs)
                                    (if (string? g$x$11205$RyrJs)
                                      g$x$11205$RyrJs
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$11204$RyrJs)))))))
                  (g$get-record-name$10952$RyrJs
                    (case-lambda
                      ((g$spec$11194$RyrJs)
                       ((case-lambda
                          ((g$t$11195$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11196$RyrJs)
                               (if g$ls/false$11196$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$foo$11197$RyrJs
                                        g$make-foo$11198$RyrJs
                                        g$foo?$11199$RyrJs)
                                      g$foo$11197$RyrJs))
                                   g$ls/false$11196$RyrJs)
                                 ((case-lambda
                                    ((g$t$11200$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11201$RyrJs)
                                         (if g$ls/false$11201$RyrJs
                                           (apply
                                             (case-lambda
                                               ((g$foo$11202$RyrJs)
                                                g$foo$11202$RyrJs))
                                             g$ls/false$11201$RyrJs)
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$t$11200$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11200$RyrJs
                                        'any))))
                                  g$t$11195$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11195$RyrJs
                              '(any any any)))))
                        g$spec$11194$RyrJs))))
                  (g$get-record-constructor-name$10953$RyrJs
                    (case-lambda
                      ((g$spec$11184$RyrJs)
                       ((case-lambda
                          ((g$t$11185$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11186$RyrJs)
                               (if g$ls/false$11186$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$foo$11187$RyrJs
                                        g$make-foo$11188$RyrJs
                                        g$foo?$11189$RyrJs)
                                      g$make-foo$11188$RyrJs))
                                   g$ls/false$11186$RyrJs)
                                 ((case-lambda
                                    ((g$t$11190$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11191$RyrJs)
                                         (if (if g$ls/false$11191$RyrJs
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$11192$RyrJs)
                                                      (g$id?$9323$RyrJs
                                                        g$foo$11192$RyrJs)))
                                                   g$ls/false$11191$RyrJs))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$11193$RyrJs)
                                                (g$id$10951$RyrJs
                                                  g$foo$11193$RyrJs
                                                  '"make-"
                                                  (g$stx->datum$9334$RyrJs
                                                    g$foo$11193$RyrJs))))
                                             g$ls/false$11191$RyrJs)
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$t$11190$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11190$RyrJs
                                        'any))))
                                  g$t$11185$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11185$RyrJs
                              '(any any any)))))
                        g$spec$11184$RyrJs))))
                  (g$get-record-predicate-name$10954$RyrJs
                    (case-lambda
                      ((g$spec$11174$RyrJs)
                       ((case-lambda
                          ((g$t$11175$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11176$RyrJs)
                               (if g$ls/false$11176$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$foo$11177$RyrJs
                                        g$make-foo$11178$RyrJs
                                        g$foo?$11179$RyrJs)
                                      g$foo?$11179$RyrJs))
                                   g$ls/false$11176$RyrJs)
                                 ((case-lambda
                                    ((g$t$11180$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11181$RyrJs)
                                         (if (if g$ls/false$11181$RyrJs
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$11182$RyrJs)
                                                      (g$id?$9323$RyrJs
                                                        g$foo$11182$RyrJs)))
                                                   g$ls/false$11181$RyrJs))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$11183$RyrJs)
                                                (g$id$10951$RyrJs
                                                  g$foo$11183$RyrJs
                                                  (g$stx->datum$9334$RyrJs
                                                    g$foo$11183$RyrJs)
                                                  '"?")))
                                             g$ls/false$11181$RyrJs)
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$t$11180$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11180$RyrJs
                                        'any))))
                                  g$t$11175$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11175$RyrJs
                              '(any any any)))))
                        g$spec$11174$RyrJs))))
                  (g$get-clause$10955$RyrJs
                    (case-lambda
                      ((g$id$11165$RyrJs g$ls$11166$RyrJs)
                       ((case-lambda
                          ((g$t$11167$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11168$RyrJs)
                               (if g$ls/false$11168$RyrJs
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$11168$RyrJs)
                                 ((case-lambda
                                    ((g$t$11169$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11170$RyrJs)
                                         (if g$ls/false$11170$RyrJs
                                           (apply
                                             (case-lambda
                                               ((g$x$11171$RyrJs
                                                  g$rest$11172$RyrJs
                                                  g$ls$11173$RyrJs)
                                                (if (g$free-id=?$9327$RyrJs
                                                      (g$bless$9649$RyrJs
                                                        g$id$11165$RyrJs)
                                                      g$x$11171$RyrJs)
                                                  (cons
                                                    g$x$11171$RyrJs
                                                    g$rest$11172$RyrJs)
                                                  (g$get-clause$10955$RyrJs
                                                    g$id$11165$RyrJs
                                                    g$ls$11173$RyrJs))))
                                             g$ls/false$11170$RyrJs)
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$t$11169$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11169$RyrJs
                                        '((any . any) . any)))))
                                  g$t$11167$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11167$RyrJs
                              '()))))
                        g$ls$11166$RyrJs))))
                  (g$foo-rtd-code$10956$RyrJs
                    (case-lambda
                      ((g$name$11124$RyrJs
                         g$clause*$11125$RyrJs
                         g$parent-rtd-code$11126$RyrJs)
                       (letrec* ((g$convert-field-spec*$11127$RyrJs
                                   (case-lambda
                                     ((g$ls$11152$RyrJs)
                                      (g$list->vector$6451$RyrJs
                                        (g$map$5807$RyrJs
                                          (case-lambda
                                            ((g$x$11153$RyrJs)
                                             ((case-lambda
                                                ((g$t$11154$RyrJs)
                                                 ((case-lambda
                                                    ((g$ls/false$11155$RyrJs)
                                                     (if g$ls/false$11155$RyrJs
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$11156$RyrJs
                                                              g$rest$11157$RyrJs)
                                                            (list
                                                              'mutable
                                                              g$name$11156$RyrJs)))
                                                         g$ls/false$11155$RyrJs)
                                                       ((case-lambda
                                                          ((g$t$11158$RyrJs)
                                                           ((case-lambda
                                                              ((g$ls/false$11159$RyrJs)
                                                               (if g$ls/false$11159$RyrJs
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$11160$RyrJs
                                                                        g$rest$11161$RyrJs)
                                                                      (list
                                                                        'immutable
                                                                        g$name$11160$RyrJs)))
                                                                   g$ls/false$11159$RyrJs)
                                                                 ((case-lambda
                                                                    ((g$t$11162$RyrJs)
                                                                     ((case-lambda
                                                                        ((g$ls/false$11163$RyrJs)
                                                                         (if g$ls/false$11163$RyrJs
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$11164$RyrJs)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$11164$RyrJs)))
                                                                             g$ls/false$11163$RyrJs)
                                                                           (g$syntax-violation$9805$RyrJs
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$11162$RyrJs))))
                                                                      (g$syntax-dispatch$9686$RyrJs
                                                                        g$t$11162$RyrJs
                                                                        'any))))
                                                                  g$t$11158$RyrJs))))
                                                            (g$syntax-dispatch$9686$RyrJs
                                                              g$t$11158$RyrJs
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$11154$RyrJs))))
                                                  (g$syntax-dispatch$9686$RyrJs
                                                    g$t$11154$RyrJs
                                                    '(#(scheme-id
                                                        mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$11153$RyrJs)))
                                          g$ls$11152$RyrJs))))))
                         ((case-lambda
                            ((g$uid-code$11128$RyrJs
                               g$sealed?$11129$RyrJs
                               g$opaque?$11130$RyrJs
                               g$fields$11131$RyrJs)
                             (g$bless$9649$RyrJs
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$11124$RyrJs)
                                 g$parent-rtd-code$11126$RyrJs
                                 g$uid-code$11128$RyrJs
                                 g$sealed?$11129$RyrJs
                                 g$opaque?$11130$RyrJs
                                 g$fields$11131$RyrJs))))
                          ((case-lambda
                             ((g$t$11132$RyrJs)
                              ((case-lambda
                                 ((g$ls/false$11133$RyrJs)
                                  (if g$ls/false$11133$RyrJs
                                    (apply
                                      (case-lambda
                                        (() (list 'quote (gensym))))
                                      g$ls/false$11133$RyrJs)
                                    ((case-lambda
                                       ((g$t$11134$RyrJs)
                                        ((case-lambda
                                           ((g$ls/false$11135$RyrJs)
                                            (if g$ls/false$11135$RyrJs
                                              (apply
                                                (case-lambda
                                                  ((g$uid$11136$RyrJs)
                                                   (list
                                                     'quote
                                                     g$uid$11136$RyrJs)))
                                                g$ls/false$11135$RyrJs)
                                              ((case-lambda
                                                 ((g$t$11137$RyrJs)
                                                  ((case-lambda
                                                     ((g$ls/false$11138$RyrJs)
                                                      (if g$ls/false$11138$RyrJs
                                                        (apply
                                                          (case-lambda
                                                            (() '#f))
                                                          g$ls/false$11138$RyrJs)
                                                        (g$syntax-violation$9805$RyrJs
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$11137$RyrJs))))
                                                   (g$syntax-dispatch$9686$RyrJs
                                                     g$t$11137$RyrJs
                                                     '_))))
                                               g$t$11134$RyrJs))))
                                         (g$syntax-dispatch$9686$RyrJs
                                           g$t$11134$RyrJs
                                           '(_ any)))))
                                     g$t$11132$RyrJs))))
                               (g$syntax-dispatch$9686$RyrJs
                                 g$t$11132$RyrJs
                                 '(_)))))
                           (g$get-clause$10955$RyrJs
                             'nongenerative
                             g$clause*$11125$RyrJs))
                          ((case-lambda
                             ((g$t$11139$RyrJs)
                              ((case-lambda
                                 ((g$ls/false$11140$RyrJs)
                                  (if g$ls/false$11140$RyrJs
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$11140$RyrJs)
                                    ((case-lambda
                                       ((g$t$11141$RyrJs)
                                        ((case-lambda
                                           ((g$ls/false$11142$RyrJs)
                                            (if g$ls/false$11142$RyrJs
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$11142$RyrJs)
                                              (g$syntax-violation$9805$RyrJs
                                                '#f
                                                '"invalid syntax"
                                                g$t$11141$RyrJs))))
                                         (g$syntax-dispatch$9686$RyrJs
                                           g$t$11141$RyrJs
                                           '_))))
                                     g$t$11139$RyrJs))))
                               (g$syntax-dispatch$9686$RyrJs
                                 g$t$11139$RyrJs
                                 '(_ #(atom #t))))))
                           (g$get-clause$10955$RyrJs
                             'sealed
                             g$clause*$11125$RyrJs))
                          ((case-lambda
                             ((g$t$11143$RyrJs)
                              ((case-lambda
                                 ((g$ls/false$11144$RyrJs)
                                  (if g$ls/false$11144$RyrJs
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$11144$RyrJs)
                                    ((case-lambda
                                       ((g$t$11145$RyrJs)
                                        ((case-lambda
                                           ((g$ls/false$11146$RyrJs)
                                            (if g$ls/false$11146$RyrJs
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$11146$RyrJs)
                                              (g$syntax-violation$9805$RyrJs
                                                '#f
                                                '"invalid syntax"
                                                g$t$11145$RyrJs))))
                                         (g$syntax-dispatch$9686$RyrJs
                                           g$t$11145$RyrJs
                                           '_))))
                                     g$t$11143$RyrJs))))
                               (g$syntax-dispatch$9686$RyrJs
                                 g$t$11143$RyrJs
                                 '(_ #(atom #t))))))
                           (g$get-clause$10955$RyrJs
                             'opaque
                             g$clause*$11125$RyrJs))
                          ((case-lambda
                             ((g$t$11147$RyrJs)
                              ((case-lambda
                                 ((g$ls/false$11148$RyrJs)
                                  (if g$ls/false$11148$RyrJs
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$11149$RyrJs)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$11127$RyrJs
                                             g$field-spec*$11149$RyrJs))))
                                      g$ls/false$11148$RyrJs)
                                    ((case-lambda
                                       ((g$t$11150$RyrJs)
                                        ((case-lambda
                                           ((g$ls/false$11151$RyrJs)
                                            (if g$ls/false$11151$RyrJs
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$11151$RyrJs)
                                              (g$syntax-violation$9805$RyrJs
                                                '#f
                                                '"invalid syntax"
                                                g$t$11150$RyrJs))))
                                         (g$syntax-dispatch$9686$RyrJs
                                           g$t$11150$RyrJs
                                           '_))))
                                     g$t$11147$RyrJs))))
                               (g$syntax-dispatch$9686$RyrJs
                                 g$t$11147$RyrJs
                                 '(_ . each-any)))))
                           (g$get-clause$10955$RyrJs
                             'fields
                             g$clause*$11125$RyrJs)))))))
                  (g$parent-rtd-code$10957$RyrJs
                    (case-lambda
                      ((g$clause*$11112$RyrJs)
                       ((case-lambda
                          ((g$t$11113$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11114$RyrJs)
                               (if g$ls/false$11114$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$name$11115$RyrJs)
                                      (list
                                        'record-type-descriptor
                                        g$name$11115$RyrJs)))
                                   g$ls/false$11114$RyrJs)
                                 ((case-lambda
                                    ((g$t$11116$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11117$RyrJs)
                                         (if g$ls/false$11117$RyrJs
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$11118$RyrJs)
                                                    ((case-lambda
                                                       ((g$ls/false$11119$RyrJs)
                                                        (if g$ls/false$11119$RyrJs
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$11120$RyrJs
                                                                 g$rcd$11121$RyrJs)
                                                               g$rtd$11120$RyrJs))
                                                            g$ls/false$11119$RyrJs)
                                                          ((case-lambda
                                                             ((g$t$11122$RyrJs)
                                                              ((case-lambda
                                                                 ((g$ls/false$11123$RyrJs)
                                                                  (if g$ls/false$11123$RyrJs
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$11123$RyrJs)
                                                                    (g$syntax-violation$9805$RyrJs
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11122$RyrJs))))
                                                               (g$syntax-dispatch$9686$RyrJs
                                                                 g$t$11122$RyrJs
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$11118$RyrJs))))
                                                     (g$syntax-dispatch$9686$RyrJs
                                                       g$t$11118$RyrJs
                                                       '(_ any any)))))
                                                 (g$get-clause$10955$RyrJs
                                                   'parent-rtd
                                                   g$clause*$11112$RyrJs))))
                                             g$ls/false$11117$RyrJs)
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$t$11116$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11116$RyrJs
                                        '#(atom #f)))))
                                  g$t$11113$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11113$RyrJs
                              '(_ any)))))
                        (g$get-clause$10955$RyrJs
                          'parent
                          g$clause*$11112$RyrJs)))))
                  (g$parent-rcd-code$10958$RyrJs
                    (case-lambda
                      ((g$clause*$11100$RyrJs)
                       ((case-lambda
                          ((g$t$11101$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11102$RyrJs)
                               (if g$ls/false$11102$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$name$11103$RyrJs)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$11103$RyrJs)))
                                   g$ls/false$11102$RyrJs)
                                 ((case-lambda
                                    ((g$t$11104$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11105$RyrJs)
                                         (if g$ls/false$11105$RyrJs
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$11106$RyrJs)
                                                    ((case-lambda
                                                       ((g$ls/false$11107$RyrJs)
                                                        (if g$ls/false$11107$RyrJs
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$11108$RyrJs
                                                                 g$rcd$11109$RyrJs)
                                                               g$rcd$11109$RyrJs))
                                                            g$ls/false$11107$RyrJs)
                                                          ((case-lambda
                                                             ((g$t$11110$RyrJs)
                                                              ((case-lambda
                                                                 ((g$ls/false$11111$RyrJs)
                                                                  (if g$ls/false$11111$RyrJs
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$11111$RyrJs)
                                                                    (g$syntax-violation$9805$RyrJs
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11110$RyrJs))))
                                                               (g$syntax-dispatch$9686$RyrJs
                                                                 g$t$11110$RyrJs
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$11106$RyrJs))))
                                                     (g$syntax-dispatch$9686$RyrJs
                                                       g$t$11106$RyrJs
                                                       '(_ any any)))))
                                                 (g$get-clause$10955$RyrJs
                                                   'parent-rtd
                                                   g$clause*$11100$RyrJs))))
                                             g$ls/false$11105$RyrJs)
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$t$11104$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11104$RyrJs
                                        '#(atom #f)))))
                                  g$t$11101$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11101$RyrJs
                              '(_ any)))))
                        (g$get-clause$10955$RyrJs
                          'parent
                          g$clause*$11100$RyrJs)))))
                  (g$foo-rcd-code$10959$RyrJs
                    (case-lambda
                      ((g$clause*$11096$RyrJs
                         g$foo-rtd$11097$RyrJs
                         g$protocol$11098$RyrJs
                         g$parent-rcd-code$11099$RyrJs)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$11097$RyrJs
                         g$parent-rcd-code$11099$RyrJs
                         g$protocol$11098$RyrJs))))
                  (g$get-protocol-code$10960$RyrJs
                    (case-lambda
                      ((g$clause*$11090$RyrJs)
                       ((case-lambda
                          ((g$t$11091$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11092$RyrJs)
                               (if g$ls/false$11092$RyrJs
                                 (apply
                                   (case-lambda
                                     ((g$expr$11093$RyrJs)
                                      g$expr$11093$RyrJs))
                                   g$ls/false$11092$RyrJs)
                                 ((case-lambda
                                    ((g$t$11094$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11095$RyrJs)
                                         (if g$ls/false$11095$RyrJs
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$11095$RyrJs)
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$t$11094$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11094$RyrJs
                                        '_))))
                                  g$t$11091$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11091$RyrJs
                              '(_ any)))))
                        (g$get-clause$10955$RyrJs
                          'protocol
                          g$clause*$11090$RyrJs)))))
                  (g$get-fields$10961$RyrJs
                    (case-lambda
                      ((g$clause*$11081$RyrJs)
                       ((case-lambda
                          ((g$t$11082$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11083$RyrJs)
                               (if g$ls/false$11083$RyrJs
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$11083$RyrJs)
                                 ((case-lambda
                                    ((g$t$11084$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11085$RyrJs)
                                         (if g$ls/false$11085$RyrJs
                                           (apply
                                             (case-lambda
                                               ((g$f*$11086$RyrJs)
                                                g$f*$11086$RyrJs))
                                             g$ls/false$11085$RyrJs)
                                           ((case-lambda
                                              ((g$t$11087$RyrJs)
                                               ((case-lambda
                                                  ((g$ls/false$11088$RyrJs)
                                                   (if g$ls/false$11088$RyrJs
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$11089$RyrJs)
                                                          (g$get-fields$10961$RyrJs
                                                            g$rest$11089$RyrJs)))
                                                       g$ls/false$11088$RyrJs)
                                                     (g$syntax-violation$9805$RyrJs
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$11087$RyrJs))))
                                                (g$syntax-dispatch$9686$RyrJs
                                                  g$t$11087$RyrJs
                                                  '(_ . any)))))
                                            g$t$11084$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11084$RyrJs
                                        '((#(scheme-id fields)
                                           .
                                           each-any)
                                          .
                                          _)))))
                                  g$t$11082$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11082$RyrJs
                              '()))))
                        g$clause*$11081$RyrJs))))
                  (g$get-mutator-indices$10962$RyrJs
                    (case-lambda
                      ((g$fields$11069$RyrJs)
                       ((letrec ((g$f$11070$RyrJs
                                   (case-lambda
                                     ((g$fields$11071$RyrJs
                                        g$i$11072$RyrJs)
                                      ((case-lambda
                                         ((g$t$11073$RyrJs)
                                          ((case-lambda
                                             ((g$ls/false$11074$RyrJs)
                                              (if g$ls/false$11074$RyrJs
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$11074$RyrJs)
                                                ((case-lambda
                                                   ((g$t$11075$RyrJs)
                                                    ((case-lambda
                                                       ((g$ls/false$11076$RyrJs)
                                                        (if g$ls/false$11076$RyrJs
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$11077$RyrJs)
                                                               (cons
                                                                 g$i$11072$RyrJs
                                                                 (g$f$11070$RyrJs
                                                                   g$rest$11077$RyrJs
                                                                   (+ g$i$11072$RyrJs
                                                                      '1)))))
                                                            g$ls/false$11076$RyrJs)
                                                          ((case-lambda
                                                             ((g$t$11078$RyrJs)
                                                              ((case-lambda
                                                                 ((g$ls/false$11079$RyrJs)
                                                                  (if g$ls/false$11079$RyrJs
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$11080$RyrJs)
                                                                         (g$f$11070$RyrJs
                                                                           g$rest$11080$RyrJs
                                                                           (+ g$i$11072$RyrJs
                                                                              '1))))
                                                                      g$ls/false$11079$RyrJs)
                                                                    (g$syntax-violation$9805$RyrJs
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11078$RyrJs))))
                                                               (g$syntax-dispatch$9686$RyrJs
                                                                 g$t$11078$RyrJs
                                                                 '(_ .
                                                                     any)))))
                                                           g$t$11075$RyrJs))))
                                                     (g$syntax-dispatch$9686$RyrJs
                                                       g$t$11075$RyrJs
                                                       '((#(scheme-id
                                                            mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$11073$RyrJs))))
                                           (g$syntax-dispatch$9686$RyrJs
                                             g$t$11073$RyrJs
                                             '()))))
                                       g$fields$11071$RyrJs)))))
                          g$f$11070$RyrJs)
                        g$fields$11069$RyrJs
                        '0))))
                  (g$get-mutators$10963$RyrJs
                    (case-lambda
                      ((g$foo$11048$RyrJs g$fields$11049$RyrJs)
                       (letrec* ((g$gen-name$11050$RyrJs
                                   (case-lambda
                                     ((g$x$11068$RyrJs)
                                      (g$datum->syntax$9807$RyrJs
                                        g$foo$11048$RyrJs
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$9808$RyrJs
                                                g$foo$11048$RyrJs))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$9808$RyrJs
                                                g$x$11068$RyrJs))
                                            '"-set!")))))))
                         ((letrec ((g$f$11051$RyrJs
                                     (case-lambda
                                       ((g$fields$11052$RyrJs)
                                        ((case-lambda
                                           ((g$t$11053$RyrJs)
                                            ((case-lambda
                                               ((g$ls/false$11054$RyrJs)
                                                (if g$ls/false$11054$RyrJs
                                                  (apply
                                                    (case-lambda
                                                      (() '()))
                                                    g$ls/false$11054$RyrJs)
                                                  ((case-lambda
                                                     ((g$t$11055$RyrJs)
                                                      ((case-lambda
                                                         ((g$ls/false$11056$RyrJs)
                                                          (if g$ls/false$11056$RyrJs
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$11057$RyrJs
                                                                   g$accessor$11058$RyrJs
                                                                   g$mutator$11059$RyrJs
                                                                   g$rest$11060$RyrJs)
                                                                 (cons
                                                                   g$mutator$11059$RyrJs
                                                                   (g$f$11051$RyrJs
                                                                     g$rest$11060$RyrJs))))
                                                              g$ls/false$11056$RyrJs)
                                                            ((case-lambda
                                                               ((g$t$11061$RyrJs)
                                                                ((case-lambda
                                                                   ((g$ls/false$11062$RyrJs)
                                                                    (if g$ls/false$11062$RyrJs
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$11063$RyrJs
                                                                             g$rest$11064$RyrJs)
                                                                           (cons
                                                                             (g$gen-name$11050$RyrJs
                                                                               g$name$11063$RyrJs)
                                                                             (g$f$11051$RyrJs
                                                                               g$rest$11064$RyrJs))))
                                                                        g$ls/false$11062$RyrJs)
                                                                      ((case-lambda
                                                                         ((g$t$11065$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$ls/false$11066$RyrJs)
                                                                              (if g$ls/false$11066$RyrJs
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$11067$RyrJs)
                                                                                     (g$f$11051$RyrJs
                                                                                       g$rest$11067$RyrJs)))
                                                                                  g$ls/false$11066$RyrJs)
                                                                                (g$syntax-violation$9805$RyrJs
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$11065$RyrJs))))
                                                                           (g$syntax-dispatch$9686$RyrJs
                                                                             g$t$11065$RyrJs
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$11061$RyrJs))))
                                                                 (g$syntax-dispatch$9686$RyrJs
                                                                   g$t$11061$RyrJs
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$11055$RyrJs))))
                                                       (g$syntax-dispatch$9686$RyrJs
                                                         g$t$11055$RyrJs
                                                         '((#(scheme-id
                                                              mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$11053$RyrJs))))
                                             (g$syntax-dispatch$9686$RyrJs
                                               g$t$11053$RyrJs
                                               '()))))
                                         g$fields$11052$RyrJs)))))
                            g$f$11051$RyrJs)
                          g$fields$11049$RyrJs)))))
                  (g$get-accessors$10964$RyrJs
                    (case-lambda
                      ((g$foo$11014$RyrJs g$fields$11015$RyrJs)
                       (letrec* ((g$gen-name$11016$RyrJs
                                   (case-lambda
                                     ((g$x$11047$RyrJs)
                                      (g$datum->syntax$9807$RyrJs
                                        g$foo$11014$RyrJs
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$9808$RyrJs
                                                g$foo$11014$RyrJs))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$9808$RyrJs
                                                g$x$11047$RyrJs)))))))))
                         (g$map$5807$RyrJs
                           (case-lambda
                             ((g$field$11017$RyrJs)
                              ((case-lambda
                                 ((g$t$11018$RyrJs)
                                  ((case-lambda
                                     ((g$ls/false$11019$RyrJs)
                                      (if (if g$ls/false$11019$RyrJs
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$11020$RyrJs
                                                     g$accessor$11021$RyrJs
                                                     g$mutator$11022$RyrJs)
                                                   (g$id?$9323$RyrJs
                                                     g$accessor$11021$RyrJs)))
                                                g$ls/false$11019$RyrJs))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$11023$RyrJs
                                               g$accessor$11024$RyrJs
                                               g$mutator$11025$RyrJs)
                                             g$accessor$11024$RyrJs))
                                          g$ls/false$11019$RyrJs)
                                        ((case-lambda
                                           ((g$t$11026$RyrJs)
                                            ((case-lambda
                                               ((g$ls/false$11027$RyrJs)
                                                (if (if g$ls/false$11027$RyrJs
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$11028$RyrJs
                                                               g$accessor$11029$RyrJs)
                                                             (g$id?$9323$RyrJs
                                                               g$accessor$11029$RyrJs)))
                                                          g$ls/false$11027$RyrJs))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$11030$RyrJs
                                                         g$accessor$11031$RyrJs)
                                                       g$accessor$11031$RyrJs))
                                                    g$ls/false$11027$RyrJs)
                                                  ((case-lambda
                                                     ((g$t$11032$RyrJs)
                                                      ((case-lambda
                                                         ((g$ls/false$11033$RyrJs)
                                                          (if (if g$ls/false$11033$RyrJs
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$11034$RyrJs)
                                                                       (g$id?$9323$RyrJs
                                                                         g$name$11034$RyrJs)))
                                                                    g$ls/false$11033$RyrJs))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$11035$RyrJs)
                                                                 (g$gen-name$11016$RyrJs
                                                                   g$name$11035$RyrJs)))
                                                              g$ls/false$11033$RyrJs)
                                                            ((case-lambda
                                                               ((g$t$11036$RyrJs)
                                                                ((case-lambda
                                                                   ((g$ls/false$11037$RyrJs)
                                                                    (if (if g$ls/false$11037$RyrJs
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$11038$RyrJs)
                                                                                 (g$id?$9323$RyrJs
                                                                                   g$name$11038$RyrJs)))
                                                                              g$ls/false$11037$RyrJs))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$11039$RyrJs)
                                                                           (g$gen-name$11016$RyrJs
                                                                             g$name$11039$RyrJs)))
                                                                        g$ls/false$11037$RyrJs)
                                                                      ((case-lambda
                                                                         ((g$t$11040$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$ls/false$11041$RyrJs)
                                                                              (if (if g$ls/false$11041$RyrJs
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$11042$RyrJs)
                                                                                           (g$id?$9323$RyrJs
                                                                                             g$name$11042$RyrJs)))
                                                                                        g$ls/false$11041$RyrJs))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$11043$RyrJs)
                                                                                     (g$gen-name$11016$RyrJs
                                                                                       g$name$11043$RyrJs)))
                                                                                  g$ls/false$11041$RyrJs)
                                                                                ((case-lambda
                                                                                   ((g$t$11044$RyrJs)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$11045$RyrJs)
                                                                                        (if g$ls/false$11045$RyrJs
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$11046$RyrJs)
                                                                                               (g$syntax-violation$9805$RyrJs
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$11017$RyrJs)))
                                                                                            g$ls/false$11045$RyrJs)
                                                                                          (g$syntax-violation$9805$RyrJs
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$11044$RyrJs))))
                                                                                     (g$syntax-dispatch$9686$RyrJs
                                                                                       g$t$11044$RyrJs
                                                                                       'any))))
                                                                                 g$t$11040$RyrJs))))
                                                                           (g$syntax-dispatch$9686$RyrJs
                                                                             g$t$11040$RyrJs
                                                                             'any))))
                                                                       g$t$11036$RyrJs))))
                                                                 (g$syntax-dispatch$9686$RyrJs
                                                                   g$t$11036$RyrJs
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$11032$RyrJs))))
                                                       (g$syntax-dispatch$9686$RyrJs
                                                         g$t$11032$RyrJs
                                                         '(#(scheme-id
                                                             mutable)
                                                           any)))))
                                                   g$t$11026$RyrJs))))
                                             (g$syntax-dispatch$9686$RyrJs
                                               g$t$11026$RyrJs
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$11018$RyrJs))))
                                   (g$syntax-dispatch$9686$RyrJs
                                     g$t$11018$RyrJs
                                     '(#(scheme-id mutable)
                                       any
                                       any
                                       any)))))
                               g$field$11017$RyrJs)))
                           g$fields$11015$RyrJs)))))
                  (g$enumerate$10965$RyrJs
                    (case-lambda
                      ((g$ls$11010$RyrJs)
                       ((letrec ((g$f$11011$RyrJs
                                   (case-lambda
                                     ((g$ls$11012$RyrJs g$i$11013$RyrJs)
                                      (if (null? g$ls$11012$RyrJs)
                                        '()
                                        (cons
                                          g$i$11013$RyrJs
                                          (g$f$11011$RyrJs
                                            (cdr g$ls$11012$RyrJs)
                                            (+ g$i$11013$RyrJs
                                               '1))))))))
                          g$f$11011$RyrJs)
                        g$ls$11010$RyrJs
                        '0))))
                  (g$do-define-record$10966$RyrJs
                    (case-lambda
                      ((g$namespec$10990$RyrJs g$clause*$10991$RyrJs)
                       ((case-lambda
                          ((g$foo$10992$RyrJs)
                           ((case-lambda
                              ((g$foo-rtd$10993$RyrJs)
                               ((case-lambda
                                  ((g$foo-rcd$10994$RyrJs)
                                   ((case-lambda
                                      ((g$protocol$10995$RyrJs)
                                       ((case-lambda
                                          ((g$make-foo$10996$RyrJs)
                                           ((case-lambda
                                              ((g$fields$10997$RyrJs)
                                               ((case-lambda
                                                  ((g$idx*$10998$RyrJs)
                                                   ((case-lambda
                                                      ((g$foo-x*$10999$RyrJs)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$11000$RyrJs)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$11001$RyrJs)
                                                               ((case-lambda
                                                                  ((g$foo?$11002$RyrJs)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$11003$RyrJs)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$11004$RyrJs)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$11005$RyrJs)
                                                                               (g$bless$9649$RyrJs
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$10993$RyrJs
                                                                                       g$foo-rtd-code$11003$RyrJs)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$10995$RyrJs
                                                                                         g$protocol-code$11005$RyrJs)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$10994$RyrJs
                                                                                           g$foo-rcd-code$11004$RyrJs)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$10992$RyrJs
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$10993$RyrJs)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$10994$RyrJs)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$11002$RyrJs
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$10993$RyrJs))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$10996$RyrJs
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$10994$RyrJs))
                                                                                               (append
                                                                                                 (g$map$5807$RyrJs
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$11006$RyrJs
                                                                                                        g$idx$11007$RyrJs)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$11006$RyrJs
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$10993$RyrJs
                                                                                                          g$idx$11007$RyrJs))))
                                                                                                   g$foo-x*$10999$RyrJs
                                                                                                   g$idx*$10998$RyrJs)
                                                                                                 (g$map$5807$RyrJs
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$11008$RyrJs
                                                                                                        g$idx$11009$RyrJs)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$11008$RyrJs
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$10993$RyrJs
                                                                                                          g$idx$11009$RyrJs))))
                                                                                                   g$set-foo-x!*$11000$RyrJs
                                                                                                   g$set-foo-idx*$11001$RyrJs))))))))))))
                                                                            (g$get-protocol-code$10960$RyrJs
                                                                              g$clause*$10991$RyrJs))))
                                                                        (g$foo-rcd-code$10959$RyrJs
                                                                          g$clause*$10991$RyrJs
                                                                          g$foo-rtd$10993$RyrJs
                                                                          g$protocol$10995$RyrJs
                                                                          (g$parent-rcd-code$10958$RyrJs
                                                                            g$clause*$10991$RyrJs)))))
                                                                    (g$foo-rtd-code$10956$RyrJs
                                                                      g$foo$10992$RyrJs
                                                                      g$clause*$10991$RyrJs
                                                                      (g$parent-rtd-code$10957$RyrJs
                                                                        g$clause*$10991$RyrJs)))))
                                                                (g$get-record-predicate-name$10954$RyrJs
                                                                  g$namespec$10990$RyrJs))))
                                                            (g$get-mutator-indices$10962$RyrJs
                                                              g$fields$10997$RyrJs))))
                                                        (g$get-mutators$10963$RyrJs
                                                          g$foo$10992$RyrJs
                                                          g$fields$10997$RyrJs))))
                                                    (g$get-accessors$10964$RyrJs
                                                      g$foo$10992$RyrJs
                                                      g$fields$10997$RyrJs))))
                                                (g$enumerate$10965$RyrJs
                                                  g$fields$10997$RyrJs))))
                                            (g$get-fields$10961$RyrJs
                                              g$clause*$10991$RyrJs))))
                                        (g$get-record-constructor-name$10953$RyrJs
                                          g$namespec$10990$RyrJs))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$10952$RyrJs
                          g$namespec$10990$RyrJs)))))
                  (g$verify-clauses$10967$RyrJs
                    (case-lambda
                      ((g$x$10972$RyrJs g$cls*$10973$RyrJs)
                       (letrec* ((g$valid-kwds$10974$RyrJs
                                   (g$map$5807$RyrJs
                                     g$bless$9649$RyrJs
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$10975$RyrJs
                                   (case-lambda
                                     ((g$x$10987$RyrJs g$ls$10988$RyrJs)
                                      (if (pair? g$ls$10988$RyrJs)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$10989$RyrJs)
                                              (if g$t$10989$RyrJs
                                                g$t$10989$RyrJs
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$10975$RyrJs
                                                    g$x$10987$RyrJs
                                                    (cdr g$ls$10988$RyrJs))))))
                                           (g$free-id=?$9327$RyrJs
                                             g$x$10987$RyrJs
                                             (car g$ls$10988$RyrJs))))
                                        '#f)))))
                         ((letrec ((g$f$10976$RyrJs
                                     (case-lambda
                                       ((g$cls*$10977$RyrJs
                                          g$seen*$10978$RyrJs)
                                        (if (not (null?
                                                   g$cls*$10977$RyrJs))
                                          ((case-lambda
                                             ((g$t$10979$RyrJs)
                                              ((case-lambda
                                                 ((g$ls/false$10980$RyrJs)
                                                  (if g$ls/false$10980$RyrJs
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$10981$RyrJs
                                                           g$rest$10982$RyrJs)
                                                         (if ((case-lambda
                                                                ((g$t$10983$RyrJs)
                                                                 (if g$t$10983$RyrJs
                                                                   g$t$10983$RyrJs
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$10975$RyrJs
                                                                            g$kwd$10981$RyrJs
                                                                            g$valid-kwds$10974$RyrJs))))))
                                                              (not (g$id?$9323$RyrJs
                                                                     g$kwd$10981$RyrJs)))
                                                           (g$syntax-violation$9805$RyrJs
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$10981$RyrJs)
                                                           (if (g$bound-id-member?$9330$RyrJs
                                                                 g$kwd$10981$RyrJs
                                                                 g$seen*$10978$RyrJs)
                                                             (g$syntax-violation$9805$RyrJs
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$10972$RyrJs
                                                               g$kwd$10981$RyrJs)
                                                             (g$f$10976$RyrJs
                                                               (cdr g$cls*$10977$RyrJs)
                                                               (cons
                                                                 g$kwd$10981$RyrJs
                                                                 g$seen*$10978$RyrJs))))))
                                                      g$ls/false$10980$RyrJs)
                                                    ((case-lambda
                                                       ((g$t$10984$RyrJs)
                                                        ((case-lambda
                                                           ((g$ls/false$10985$RyrJs)
                                                            (if g$ls/false$10985$RyrJs
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$10986$RyrJs)
                                                                   (g$syntax-violation$9805$RyrJs
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$10986$RyrJs)))
                                                                g$ls/false$10985$RyrJs)
                                                              (g$syntax-violation$9805$RyrJs
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$10984$RyrJs))))
                                                         (g$syntax-dispatch$9686$RyrJs
                                                           g$t$10984$RyrJs
                                                           'any))))
                                                     g$t$10979$RyrJs))))
                                               (g$syntax-dispatch$9686$RyrJs
                                                 g$t$10979$RyrJs
                                                 '(any . any)))))
                                           (car g$cls*$10977$RyrJs))
                                          (void))))))
                            g$f$10976$RyrJs)
                          g$cls*$10973$RyrJs
                          '()))))))
          ((case-lambda
             ((g$t$10968$RyrJs)
              ((case-lambda
                 ((g$ls/false$10969$RyrJs)
                  (if g$ls/false$10969$RyrJs
                    (apply
                      (case-lambda
                        ((g$namespec$10970$RyrJs g$clause*$10971$RyrJs)
                         (begin
                           (g$verify-clauses$10967$RyrJs
                             g$x$10950$RyrJs
                             g$clause*$10971$RyrJs)
                           (g$do-define-record$10966$RyrJs
                             g$namespec$10970$RyrJs
                             g$clause*$10971$RyrJs))))
                      g$ls/false$10969$RyrJs)
                    (g$syntax-violation$9805$RyrJs
                      '#f
                      '"invalid syntax"
                      g$t$10968$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$10968$RyrJs
                 '(_ any . each-any)))))
           g$x$10950$RyrJs)))))
   (g$define-condition-type-macro$9681$RyrJs
     g$define-condition-type-macro$13271$RyrJs
     (case-lambda
       ((g$x$11206$RyrJs)
        (letrec* ((g$mkname$11207$RyrJs
                    (case-lambda
                      ((g$name$11230$RyrJs g$suffix$11231$RyrJs)
                       (g$datum->syntax$9807$RyrJs
                         g$name$11230$RyrJs
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$9808$RyrJs
                                 g$name$11230$RyrJs))
                             g$suffix$11231$RyrJs)))))))
          ((case-lambda
             ((g$t$11208$RyrJs)
              ((case-lambda
                 ((g$ls/false$11209$RyrJs)
                  (if (if g$ls/false$11209$RyrJs
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$11210$RyrJs
                                 g$name$11211$RyrJs
                                 g$super$11212$RyrJs
                                 g$constructor$11213$RyrJs
                                 g$predicate$11214$RyrJs
                                 g$field*$11215$RyrJs
                                 g$accessor*$11216$RyrJs)
                               (if (g$id?$9323$RyrJs g$name$11211$RyrJs)
                                 (if (g$id?$9323$RyrJs
                                       g$super$11212$RyrJs)
                                   (if (g$id?$9323$RyrJs
                                         g$constructor$11213$RyrJs)
                                     (if (g$id?$9323$RyrJs
                                           g$predicate$11214$RyrJs)
                                       (if (g$for-all$5805$RyrJs
                                             g$id?$9323$RyrJs
                                             g$field*$11215$RyrJs)
                                         (begin
                                           '#f
                                           (g$for-all$5805$RyrJs
                                             g$id?$9323$RyrJs
                                             g$accessor*$11216$RyrJs))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$11209$RyrJs))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$11217$RyrJs
                           g$name$11218$RyrJs
                           g$super$11219$RyrJs
                           g$constructor$11220$RyrJs
                           g$predicate$11221$RyrJs
                           g$field*$11222$RyrJs
                           g$accessor*$11223$RyrJs)
                         ((case-lambda
                            ((g$aux-accessor*$11224$RyrJs)
                             (g$bless$9649$RyrJs
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$11218$RyrJs
                                         g$constructor$11220$RyrJs
                                         (gensym))
                                       (cons
                                         (list
                                           'parent
                                           g$super$11219$RyrJs)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5807$RyrJs
                                               (case-lambda
                                                 ((g$field$11225$RyrJs
                                                    g$aux$11226$RyrJs)
                                                  (list
                                                    'immutable
                                                    g$field$11225$RyrJs
                                                    g$aux$11226$RyrJs)))
                                               g$field*$11222$RyrJs
                                               g$aux-accessor*$11224$RyrJs))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$11221$RyrJs
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$11218$RyrJs)))
                                     (g$map$5807$RyrJs
                                       (case-lambda
                                         ((g$accessor$11227$RyrJs
                                            g$aux$11228$RyrJs)
                                          (list
                                            'define
                                            g$accessor$11227$RyrJs
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$11218$RyrJs)
                                              g$aux$11228$RyrJs))))
                                       g$accessor*$11223$RyrJs
                                       g$aux-accessor*$11224$RyrJs)))))))
                          (g$map$5807$RyrJs
                            (case-lambda ((g$x$11229$RyrJs) (gensym)))
                            g$accessor*$11223$RyrJs))))
                      g$ls/false$11209$RyrJs)
                    (g$syntax-violation$9805$RyrJs
                      '#f
                      '"invalid syntax"
                      g$t$11208$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$11208$RyrJs
                 '(any any any any any . #(each (any any)))))))
           g$x$11206$RyrJs)))))
   (g$incorrect-usage-macro$9682$RyrJs
     g$incorrect-usage-macro$13272$RyrJs
     (case-lambda
       ((g$e$11232$RyrJs)
        (g$syntax-violation$9805$RyrJs
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$11232$RyrJs))))
   (g$parameterize-macro$9683$RyrJs
     g$parameterize-macro$13273$RyrJs
     (case-lambda
       ((g$e$11233$RyrJs)
        ((case-lambda
           ((g$t$11234$RyrJs)
            ((case-lambda
               ((g$ls/false$11235$RyrJs)
                (if g$ls/false$11235$RyrJs
                  (apply
                    (case-lambda
                      ((g$b$11236$RyrJs g$b*$11237$RyrJs)
                       (g$bless$9649$RyrJs
                         (cons
                           'let
                           (cons
                             '()
                             (cons
                               g$b$11236$RyrJs
                               g$b*$11237$RyrJs))))))
                    g$ls/false$11235$RyrJs)
                  ((case-lambda
                     ((g$t$11238$RyrJs)
                      ((case-lambda
                         ((g$ls/false$11239$RyrJs)
                          (if g$ls/false$11239$RyrJs
                            (apply
                              (case-lambda
                                ((g$olhs*$11240$RyrJs
                                   g$orhs*$11241$RyrJs
                                   g$b$11242$RyrJs
                                   g$b*$11243$RyrJs)
                                 ((case-lambda
                                    ((g$lhs*$11244$RyrJs
                                       g$rhs*$11245$RyrJs)
                                     (g$bless$9649$RyrJs
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$11244$RyrJs
                                             g$rhs*$11245$RyrJs)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5807$RyrJs
                                                       (case-lambda
                                                         ((g$lhs$11246$RyrJs
                                                            g$rhs$11247$RyrJs)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$11246$RyrJs)))
                                                            (list
                                                              g$lhs$11246$RyrJs
                                                              g$rhs$11247$RyrJs)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$11247$RyrJs
                                                                '(t))))))
                                                       g$lhs*$11244$RyrJs
                                                       g$rhs*$11245$RyrJs)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$11242$RyrJs
                                                         g$b*$11243$RyrJs)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$11240$RyrJs
                                           g$orhs*$11241$RyrJs)))))
                                  (g$generate-temporaries$9795$RyrJs
                                    g$olhs*$11240$RyrJs)
                                  (g$generate-temporaries$9795$RyrJs
                                    g$orhs*$11241$RyrJs))))
                              g$ls/false$11239$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$11238$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$11238$RyrJs
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$11234$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$11234$RyrJs
               '(_ () any . each-any)))))
         g$e$11233$RyrJs))))
   (g$foreign-call-transformer$9684$RyrJs
     g$foreign-call-transformer$13274$RyrJs
     (case-lambda
       ((g$e$11248$RyrJs g$r$11249$RyrJs g$mr$11250$RyrJs)
        ((case-lambda
           ((g$t$11251$RyrJs)
            ((case-lambda
               ((g$ls/false$11252$RyrJs)
                (if g$ls/false$11252$RyrJs
                  (apply
                    (case-lambda
                      ((g$name$11253$RyrJs g$arg*$11254$RyrJs)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$9704$RyrJs
                             g$name$11253$RyrJs
                             g$r$11249$RyrJs
                             g$mr$11250$RyrJs)
                           (g$chi-expr*$9702$RyrJs
                             g$arg*$11254$RyrJs
                             g$r$11249$RyrJs
                             g$mr$11250$RyrJs)))))
                    g$ls/false$11252$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$11251$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$11251$RyrJs
               '(_ any . each-any)))))
         g$e$11248$RyrJs))))
   (g$convert-pattern$9685$RyrJs
     g$convert-pattern$13275$RyrJs
     (case-lambda
       ((g$pattern$11255$RyrJs g$keys$11256$RyrJs)
        (letrec* ((g$cvt*$11257$RyrJs
                    (case-lambda
                      ((g$p*$11337$RyrJs
                         g$n$11338$RyrJs
                         g$ids$11339$RyrJs)
                       (if (null? g$p*$11337$RyrJs)
                         (values '() g$ids$11339$RyrJs)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$11257$RyrJs
                                (cdr g$p*$11337$RyrJs)
                                g$n$11338$RyrJs
                                g$ids$11339$RyrJs)))
                           (case-lambda
                             ((g$y$11342$RyrJs g$ids$11343$RyrJs)
                              ((case-lambda
                                 ((g$ids$11344$RyrJs g$y$11345$RyrJs)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$11258$RyrJs
                                         (car g$p*$11337$RyrJs)
                                         g$n$11338$RyrJs
                                         g$ids$11344$RyrJs)))
                                    (case-lambda
                                      ((g$x$11348$RyrJs
                                         g$ids$11349$RyrJs)
                                       ((case-lambda
                                          ((g$ids$11350$RyrJs
                                             g$x$11351$RyrJs)
                                           (values
                                             (cons
                                               g$x$11351$RyrJs
                                               g$y$11345$RyrJs)
                                             g$ids$11350$RyrJs)))
                                        g$ids$11349$RyrJs
                                        g$x$11348$RyrJs))))))
                               g$ids$11343$RyrJs
                               g$y$11342$RyrJs))))))))
                  (g$cvt$11258$RyrJs
                    (case-lambda
                      ((g$p$11259$RyrJs
                         g$n$11260$RyrJs
                         g$ids$11261$RyrJs)
                       ((case-lambda
                          ((g$t$11262$RyrJs)
                           ((case-lambda
                              ((g$ls/false$11263$RyrJs)
                               (if (if g$ls/false$11263$RyrJs
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$11264$RyrJs)
                                            (g$id?$9323$RyrJs
                                              g$id$11264$RyrJs)))
                                         g$ls/false$11263$RyrJs))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$11265$RyrJs)
                                      (if (g$bound-id-member?$9330$RyrJs
                                            g$p$11259$RyrJs
                                            g$keys$11256$RyrJs)
                                        (values
                                          (vector
                                            'free-id
                                            g$p$11259$RyrJs)
                                          g$ids$11261$RyrJs)
                                        (if (g$free-id=?$9327$RyrJs
                                              g$p$11259$RyrJs
                                              (g$scheme-stx$9629$RyrJs
                                                '_))
                                          (values '_ g$ids$11261$RyrJs)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$11259$RyrJs
                                                g$n$11260$RyrJs)
                                              g$ids$11261$RyrJs))))))
                                   g$ls/false$11263$RyrJs)
                                 ((case-lambda
                                    ((g$t$11266$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$11267$RyrJs)
                                         (if (if g$ls/false$11267$RyrJs
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$11268$RyrJs
                                                        g$dots$11269$RyrJs)
                                                      (g$ellipsis?$9687$RyrJs
                                                        g$dots$11269$RyrJs)))
                                                   g$ls/false$11267$RyrJs))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$11270$RyrJs
                                                  g$dots$11271$RyrJs)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$11258$RyrJs
                                                       g$p$11270$RyrJs
                                                       (+ g$n$11260$RyrJs
                                                          '1)
                                                       g$ids$11261$RyrJs)))
                                                  (case-lambda
                                                    ((g$p$11274$RyrJs
                                                       g$ids$11275$RyrJs)
                                                     ((case-lambda
                                                        ((g$ids$11276$RyrJs
                                                           g$p$11277$RyrJs)
                                                         (values
                                                           (if (eq? g$p$11277$RyrJs
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$11277$RyrJs))
                                                           g$ids$11276$RyrJs)))
                                                      g$ids$11275$RyrJs
                                                      g$p$11274$RyrJs))))))
                                             g$ls/false$11267$RyrJs)
                                           ((case-lambda
                                              ((g$t$11278$RyrJs)
                                               ((case-lambda
                                                  ((g$ls/false$11279$RyrJs)
                                                   (if (if g$ls/false$11279$RyrJs
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$11280$RyrJs
                                                                  g$dots$11281$RyrJs
                                                                  g$ys$11282$RyrJs
                                                                  g$z$11283$RyrJs)
                                                                (g$ellipsis?$9687$RyrJs
                                                                  g$dots$11281$RyrJs)))
                                                             g$ls/false$11279$RyrJs))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$11284$RyrJs
                                                            g$dots$11285$RyrJs
                                                            g$ys$11286$RyrJs
                                                            g$z$11287$RyrJs)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$11258$RyrJs
                                                                 g$z$11287$RyrJs
                                                                 g$n$11260$RyrJs
                                                                 g$ids$11261$RyrJs)))
                                                            (case-lambda
                                                              ((g$z$11290$RyrJs
                                                                 g$ids$11291$RyrJs)
                                                               ((case-lambda
                                                                  ((g$ids$11292$RyrJs
                                                                     g$z$11293$RyrJs)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$11257$RyrJs
                                                                          g$ys$11286$RyrJs
                                                                          g$n$11260$RyrJs
                                                                          g$ids$11292$RyrJs)))
                                                                     (case-lambda
                                                                       ((g$ys$11296$RyrJs
                                                                          g$ids$11297$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$ids$11298$RyrJs
                                                                              g$ys$11299$RyrJs)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$11258$RyrJs
                                                                                   g$x$11284$RyrJs
                                                                                   (+ g$n$11260$RyrJs
                                                                                      '1)
                                                                                   g$ids$11298$RyrJs)))
                                                                              (case-lambda
                                                                                ((g$x$11302$RyrJs
                                                                                   g$ids$11303$RyrJs)
                                                                                 ((case-lambda
                                                                                    ((g$ids$11304$RyrJs
                                                                                       g$x$11305$RyrJs)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$11305$RyrJs
                                                                                         (g$reverse$6463$RyrJs
                                                                                           g$ys$11299$RyrJs)
                                                                                         g$z$11293$RyrJs)
                                                                                       g$ids$11304$RyrJs)))
                                                                                  g$ids$11303$RyrJs
                                                                                  g$x$11302$RyrJs))))))
                                                                         g$ids$11297$RyrJs
                                                                         g$ys$11296$RyrJs))))))
                                                                g$ids$11291$RyrJs
                                                                g$z$11290$RyrJs))))))
                                                       g$ls/false$11279$RyrJs)
                                                     ((case-lambda
                                                        ((g$t$11306$RyrJs)
                                                         ((case-lambda
                                                            ((g$ls/false$11307$RyrJs)
                                                             (if g$ls/false$11307$RyrJs
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$11308$RyrJs
                                                                      g$y$11309$RyrJs)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$11258$RyrJs
                                                                           g$y$11309$RyrJs
                                                                           g$n$11260$RyrJs
                                                                           g$ids$11261$RyrJs)))
                                                                      (case-lambda
                                                                        ((g$y$11312$RyrJs
                                                                           g$ids$11313$RyrJs)
                                                                         ((case-lambda
                                                                            ((g$ids$11314$RyrJs
                                                                               g$y$11315$RyrJs)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$11258$RyrJs
                                                                                    g$x$11308$RyrJs
                                                                                    g$n$11260$RyrJs
                                                                                    g$ids$11314$RyrJs)))
                                                                               (case-lambda
                                                                                 ((g$x$11318$RyrJs
                                                                                    g$ids$11319$RyrJs)
                                                                                  ((case-lambda
                                                                                     ((g$ids$11320$RyrJs
                                                                                        g$x$11321$RyrJs)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$11321$RyrJs
                                                                                          g$y$11315$RyrJs)
                                                                                        g$ids$11320$RyrJs)))
                                                                                   g$ids$11319$RyrJs
                                                                                   g$x$11318$RyrJs))))))
                                                                          g$ids$11313$RyrJs
                                                                          g$y$11312$RyrJs))))))
                                                                 g$ls/false$11307$RyrJs)
                                                               ((case-lambda
                                                                  ((g$t$11322$RyrJs)
                                                                   ((case-lambda
                                                                      ((g$ls/false$11323$RyrJs)
                                                                       (if g$ls/false$11323$RyrJs
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$11261$RyrJs)))
                                                                           g$ls/false$11323$RyrJs)
                                                                         ((case-lambda
                                                                            ((g$t$11324$RyrJs)
                                                                             ((case-lambda
                                                                                ((g$ls/false$11325$RyrJs)
                                                                                 (if (if g$ls/false$11325$RyrJs
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$11326$RyrJs)
                                                                                              (not (g$stx?$9295$RyrJs
                                                                                                     g$p$11326$RyrJs))))
                                                                                           g$ls/false$11325$RyrJs))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$11327$RyrJs)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$11258$RyrJs
                                                                                               g$p$11327$RyrJs
                                                                                               g$n$11260$RyrJs
                                                                                               g$ids$11261$RyrJs)))
                                                                                          (case-lambda
                                                                                            ((g$p$11330$RyrJs
                                                                                               g$ids$11331$RyrJs)
                                                                                             ((case-lambda
                                                                                                ((g$ids$11332$RyrJs
                                                                                                   g$p$11333$RyrJs)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$11333$RyrJs)
                                                                                                   g$ids$11332$RyrJs)))
                                                                                              g$ids$11331$RyrJs
                                                                                              g$p$11330$RyrJs))))))
                                                                                     g$ls/false$11325$RyrJs)
                                                                                   ((case-lambda
                                                                                      ((g$t$11334$RyrJs)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$11335$RyrJs)
                                                                                           (if g$ls/false$11335$RyrJs
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$11336$RyrJs)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$9334$RyrJs
                                                                                                        g$datum$11336$RyrJs))
                                                                                                    g$ids$11261$RyrJs)))
                                                                                               g$ls/false$11335$RyrJs)
                                                                                             (g$syntax-violation$9805$RyrJs
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$11334$RyrJs))))
                                                                                        (g$syntax-dispatch$9686$RyrJs
                                                                                          g$t$11334$RyrJs
                                                                                          'any))))
                                                                                    g$t$11324$RyrJs))))
                                                                              (g$syntax-dispatch$9686$RyrJs
                                                                                g$t$11324$RyrJs
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$11322$RyrJs))))
                                                                    (g$syntax-dispatch$9686$RyrJs
                                                                      g$t$11322$RyrJs
                                                                      '()))))
                                                                g$t$11306$RyrJs))))
                                                          (g$syntax-dispatch$9686$RyrJs
                                                            g$t$11306$RyrJs
                                                            '(any .
                                                                  any)))))
                                                      g$t$11278$RyrJs))))
                                                (g$syntax-dispatch$9686$RyrJs
                                                  g$t$11278$RyrJs
                                                  '(any any
                                                        .
                                                        #(each+
                                                          any
                                                          ()
                                                          any))))))
                                            g$t$11266$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$11266$RyrJs
                                        '(any any)))))
                                  g$t$11262$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$11262$RyrJs
                              'any))))
                        g$p$11259$RyrJs)))))
          (g$cvt$11258$RyrJs g$pattern$11255$RyrJs '0 '())))))
   (g$syntax-dispatch$9686$RyrJs
     g$syntax-dispatch$13276$RyrJs
     (case-lambda
       ((g$e$11352$RyrJs g$p$11353$RyrJs)
        (letrec* ((g$stx^$11354$RyrJs
                    (case-lambda
                      ((g$e$11462$RyrJs
                         g$m*$11463$RyrJs
                         g$s*$11464$RyrJs
                         g$ae*$11465$RyrJs)
                       (if (if (null? g$m*$11463$RyrJs)
                             (if (null? g$s*$11464$RyrJs)
                               (begin '#f (null? g$ae*$11465$RyrJs))
                               '#f)
                             '#f)
                         g$e$11462$RyrJs
                         (g$mkstx$9311$RyrJs
                           g$e$11462$RyrJs
                           g$m*$11463$RyrJs
                           g$s*$11464$RyrJs
                           g$ae*$11465$RyrJs)))))
                  (g$match-each$11355$RyrJs
                    (case-lambda
                      ((g$e$11446$RyrJs
                         g$p$11447$RyrJs
                         g$m*$11448$RyrJs
                         g$s*$11449$RyrJs
                         g$ae*$11450$RyrJs)
                       (if (pair? g$e$11446$RyrJs)
                         ((case-lambda
                            ((g$first$11451$RyrJs)
                             (if g$first$11451$RyrJs
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$11452$RyrJs)
                                     (if g$rest$11452$RyrJs
                                       (begin
                                         '#f
                                         (cons
                                           g$first$11451$RyrJs
                                           g$rest$11452$RyrJs))
                                       '#f)))
                                  (g$match-each$11355$RyrJs
                                    (cdr g$e$11446$RyrJs)
                                    g$p$11447$RyrJs
                                    g$m*$11448$RyrJs
                                    g$s*$11449$RyrJs
                                    g$ae*$11450$RyrJs)))
                               '#f)))
                          (g$match$11361$RyrJs
                            (car g$e$11446$RyrJs)
                            g$p$11447$RyrJs
                            g$m*$11448$RyrJs
                            g$s*$11449$RyrJs
                            g$ae*$11450$RyrJs
                            '()))
                         (if (null? g$e$11446$RyrJs)
                           '()
                           (if (g$stx?$9295$RyrJs g$e$11446$RyrJs)
                             (if (not (g$top-marked?$9257$RyrJs
                                        g$m*$11448$RyrJs))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$9310$RyrJs
                                        g$m*$11448$RyrJs
                                        g$s*$11449$RyrJs
                                        g$ae*$11450$RyrJs
                                        g$e$11446$RyrJs)))
                                   (case-lambda
                                     ((g$m*$11456$RyrJs
                                        g$s*$11457$RyrJs
                                        g$ae*$11458$RyrJs)
                                      ((case-lambda
                                         ((g$ae*$11459$RyrJs
                                            g$s*$11460$RyrJs
                                            g$m*$11461$RyrJs)
                                          (g$match-each$11355$RyrJs
                                            (g$stx-expr$9297$RyrJs
                                              g$e$11446$RyrJs)
                                            g$p$11447$RyrJs
                                            g$m*$11461$RyrJs
                                            g$s*$11460$RyrJs
                                            g$ae*$11459$RyrJs)))
                                       g$ae*$11458$RyrJs
                                       g$s*$11457$RyrJs
                                       g$m*$11456$RyrJs)))))
                               '#f)
                             (if (annotation? g$e$11446$RyrJs)
                               (g$match-each$11355$RyrJs
                                 (annotation-expression g$e$11446$RyrJs)
                                 g$p$11447$RyrJs
                                 g$m*$11448$RyrJs
                                 g$s*$11449$RyrJs
                                 g$ae*$11450$RyrJs)
                               '#f)))))))
                  (g$match-each+$11356$RyrJs
                    (case-lambda
                      ((g$e$11414$RyrJs
                         g$x-pat$11415$RyrJs
                         g$y-pat$11416$RyrJs
                         g$z-pat$11417$RyrJs
                         g$m*$11418$RyrJs
                         g$s*$11419$RyrJs
                         g$ae*$11420$RyrJs
                         g$r$11421$RyrJs)
                       ((letrec ((g$f$11422$RyrJs
                                   (case-lambda
                                     ((g$e$11423$RyrJs
                                        g$m*$11424$RyrJs
                                        g$s*$11425$RyrJs
                                        g$ae*$11426$RyrJs)
                                      (if (pair? g$e$11423$RyrJs)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$11422$RyrJs
                                               (cdr g$e$11423$RyrJs)
                                               g$m*$11424$RyrJs
                                               g$s*$11425$RyrJs
                                               g$ae*$11426$RyrJs)))
                                          (case-lambda
                                            ((g$xr*$11430$RyrJs
                                               g$y-pat$11431$RyrJs
                                               g$r$11432$RyrJs)
                                             ((case-lambda
                                                ((g$r$11433$RyrJs
                                                   g$y-pat$11434$RyrJs
                                                   g$xr*$11435$RyrJs)
                                                 (if g$r$11433$RyrJs
                                                   (if (null?
                                                         g$y-pat$11434$RyrJs)
                                                     ((case-lambda
                                                        ((g$xr$11436$RyrJs)
                                                         (if g$xr$11436$RyrJs
                                                           (values
                                                             (cons
                                                               g$xr$11436$RyrJs
                                                               g$xr*$11435$RyrJs)
                                                             g$y-pat$11434$RyrJs
                                                             g$r$11433$RyrJs)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$11361$RyrJs
                                                        (car g$e$11423$RyrJs)
                                                        g$x-pat$11415$RyrJs
                                                        g$m*$11424$RyrJs
                                                        g$s*$11425$RyrJs
                                                        g$ae*$11426$RyrJs
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$11434$RyrJs)
                                                       (g$match$11361$RyrJs
                                                         (car g$e$11423$RyrJs)
                                                         (car g$y-pat$11434$RyrJs)
                                                         g$m*$11424$RyrJs
                                                         g$s*$11425$RyrJs
                                                         g$ae*$11426$RyrJs
                                                         g$r$11433$RyrJs)))
                                                   (values
                                                     '#f
                                                     '#f
                                                     '#f))))
                                              g$r$11432$RyrJs
                                              g$y-pat$11431$RyrJs
                                              g$xr*$11430$RyrJs))))
                                        (if (g$stx?$9295$RyrJs
                                              g$e$11423$RyrJs)
                                          (if (g$top-marked?$9257$RyrJs
                                                g$m*$11424$RyrJs)
                                            (values
                                              '()
                                              g$y-pat$11416$RyrJs
                                              (g$match$11361$RyrJs
                                                g$e$11423$RyrJs
                                                g$z-pat$11417$RyrJs
                                                g$m*$11424$RyrJs
                                                g$s*$11425$RyrJs
                                                g$ae*$11426$RyrJs
                                                g$r$11421$RyrJs))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$9310$RyrJs
                                                   g$m*$11424$RyrJs
                                                   g$s*$11425$RyrJs
                                                   g$ae*$11426$RyrJs
                                                   g$e$11423$RyrJs)))
                                              (case-lambda
                                                ((g$m*$11440$RyrJs
                                                   g$s*$11441$RyrJs
                                                   g$ae*$11442$RyrJs)
                                                 ((case-lambda
                                                    ((g$ae*$11443$RyrJs
                                                       g$s*$11444$RyrJs
                                                       g$m*$11445$RyrJs)
                                                     (g$f$11422$RyrJs
                                                       (g$stx-expr$9297$RyrJs
                                                         g$e$11423$RyrJs)
                                                       g$m*$11445$RyrJs
                                                       g$s*$11444$RyrJs
                                                       g$ae*$11443$RyrJs)))
                                                  g$ae*$11442$RyrJs
                                                  g$s*$11441$RyrJs
                                                  g$m*$11440$RyrJs)))))
                                          (if (annotation?
                                                g$e$11423$RyrJs)
                                            (g$f$11422$RyrJs
                                              (annotation-expression
                                                g$e$11423$RyrJs)
                                              g$m*$11424$RyrJs
                                              g$s*$11425$RyrJs
                                              g$ae*$11426$RyrJs)
                                            (values
                                              '()
                                              g$y-pat$11416$RyrJs
                                              (g$match$11361$RyrJs
                                                g$e$11423$RyrJs
                                                g$z-pat$11417$RyrJs
                                                g$m*$11424$RyrJs
                                                g$s*$11425$RyrJs
                                                g$ae*$11426$RyrJs
                                                g$r$11421$RyrJs)))))))))
                          g$f$11422$RyrJs)
                        g$e$11414$RyrJs
                        g$m*$11418$RyrJs
                        g$s*$11419$RyrJs
                        g$ae*$11420$RyrJs))))
                  (g$match-each-any$11357$RyrJs
                    (case-lambda
                      ((g$e$11400$RyrJs
                         g$m*$11401$RyrJs
                         g$s*$11402$RyrJs
                         g$ae*$11403$RyrJs)
                       (if (pair? g$e$11400$RyrJs)
                         ((case-lambda
                            ((g$l$11404$RyrJs)
                             (if g$l$11404$RyrJs
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$11354$RyrJs
                                     (car g$e$11400$RyrJs)
                                     g$m*$11401$RyrJs
                                     g$s*$11402$RyrJs
                                     g$ae*$11403$RyrJs)
                                   g$l$11404$RyrJs))
                               '#f)))
                          (g$match-each-any$11357$RyrJs
                            (cdr g$e$11400$RyrJs)
                            g$m*$11401$RyrJs
                            g$s*$11402$RyrJs
                            g$ae*$11403$RyrJs))
                         (if (null? g$e$11400$RyrJs)
                           '()
                           (if (g$stx?$9295$RyrJs g$e$11400$RyrJs)
                             (if (not (g$top-marked?$9257$RyrJs
                                        g$m*$11401$RyrJs))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$9310$RyrJs
                                        g$m*$11401$RyrJs
                                        g$s*$11402$RyrJs
                                        g$ae*$11403$RyrJs
                                        g$e$11400$RyrJs)))
                                   (case-lambda
                                     ((g$m*$11408$RyrJs
                                        g$s*$11409$RyrJs
                                        g$ae*$11410$RyrJs)
                                      ((case-lambda
                                         ((g$ae*$11411$RyrJs
                                            g$s*$11412$RyrJs
                                            g$m*$11413$RyrJs)
                                          (g$match-each-any$11357$RyrJs
                                            (g$stx-expr$9297$RyrJs
                                              g$e$11400$RyrJs)
                                            g$m*$11413$RyrJs
                                            g$s*$11412$RyrJs
                                            g$ae*$11411$RyrJs)))
                                       g$ae*$11410$RyrJs
                                       g$s*$11409$RyrJs
                                       g$m*$11408$RyrJs)))))
                               '#f)
                             (if (annotation? g$e$11400$RyrJs)
                               (g$match-each-any$11357$RyrJs
                                 (annotation-expression g$e$11400$RyrJs)
                                 g$m*$11401$RyrJs
                                 g$s*$11402$RyrJs
                                 g$ae*$11403$RyrJs)
                               '#f)))))))
                  (g$match-empty$11358$RyrJs
                    (case-lambda
                      ((g$p$11397$RyrJs g$r$11398$RyrJs)
                       (if (null? g$p$11397$RyrJs)
                         g$r$11398$RyrJs
                         (if (eq? g$p$11397$RyrJs '_)
                           g$r$11398$RyrJs
                           (if (eq? g$p$11397$RyrJs 'any)
                             (cons '() g$r$11398$RyrJs)
                             (if (pair? g$p$11397$RyrJs)
                               (g$match-empty$11358$RyrJs
                                 (car g$p$11397$RyrJs)
                                 (g$match-empty$11358$RyrJs
                                   (cdr g$p$11397$RyrJs)
                                   g$r$11398$RyrJs))
                               (if (eq? g$p$11397$RyrJs 'each-any)
                                 (cons '() g$r$11398$RyrJs)
                                 ((case-lambda
                                    ((g$t$11399$RyrJs)
                                     (if (eqv? g$t$11399$RyrJs 'each)
                                       (g$match-empty$11358$RyrJs
                                         (vector-ref g$p$11397$RyrJs '1)
                                         g$r$11398$RyrJs)
                                       (if (eqv? g$t$11399$RyrJs 'each+)
                                         (g$match-empty$11358$RyrJs
                                           (vector-ref
                                             g$p$11397$RyrJs
                                             '1)
                                           (g$match-empty$11358$RyrJs
                                             (g$reverse$6463$RyrJs
                                               (vector-ref
                                                 g$p$11397$RyrJs
                                                 '2))
                                             (g$match-empty$11358$RyrJs
                                               (vector-ref
                                                 g$p$11397$RyrJs
                                                 '3)
                                               g$r$11398$RyrJs)))
                                         (if (g$memv$5800$RyrJs
                                               g$t$11399$RyrJs
                                               '(free-id atom))
                                           g$r$11398$RyrJs
                                           (if (g$memv$5800$RyrJs
                                                 g$t$11399$RyrJs
                                                 '(scheme-id atom))
                                             g$r$11398$RyrJs
                                             (if (eqv?
                                                   g$t$11399$RyrJs
                                                   'vector)
                                               (g$match-empty$11358$RyrJs
                                                 (vector-ref
                                                   g$p$11397$RyrJs
                                                   '1)
                                                 g$r$11398$RyrJs)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$11397$RyrJs))))))))
                                  (vector-ref
                                    g$p$11397$RyrJs
                                    '0))))))))))
                  (g$combine$11359$RyrJs
                    (case-lambda
                      ((g$r*$11395$RyrJs g$r$11396$RyrJs)
                       (if (null? (car g$r*$11395$RyrJs))
                         g$r$11396$RyrJs
                         (cons
                           (g$map$5807$RyrJs car g$r*$11395$RyrJs)
                           (g$combine$11359$RyrJs
                             (g$map$5807$RyrJs cdr g$r*$11395$RyrJs)
                             g$r$11396$RyrJs))))))
                  (g$match*$11360$RyrJs
                    (case-lambda
                      ((g$e$11377$RyrJs
                         g$p$11378$RyrJs
                         g$m*$11379$RyrJs
                         g$s*$11380$RyrJs
                         g$ae*$11381$RyrJs
                         g$r$11382$RyrJs)
                       (if (null? g$p$11378$RyrJs)
                         (if (null? g$e$11377$RyrJs)
                           (begin '#f g$r$11382$RyrJs)
                           '#f)
                         (if (pair? g$p$11378$RyrJs)
                           (if (pair? g$e$11377$RyrJs)
                             (begin
                               '#f
                               (g$match$11361$RyrJs
                                 (car g$e$11377$RyrJs)
                                 (car g$p$11378$RyrJs)
                                 g$m*$11379$RyrJs
                                 g$s*$11380$RyrJs
                                 g$ae*$11381$RyrJs
                                 (g$match$11361$RyrJs
                                   (cdr g$e$11377$RyrJs)
                                   (cdr g$p$11378$RyrJs)
                                   g$m*$11379$RyrJs
                                   g$s*$11380$RyrJs
                                   g$ae*$11381$RyrJs
                                   g$r$11382$RyrJs)))
                             '#f)
                           (if (eq? g$p$11378$RyrJs 'each-any)
                             ((case-lambda
                                ((g$l$11383$RyrJs)
                                 (if g$l$11383$RyrJs
                                   (begin
                                     '#f
                                     (cons
                                       g$l$11383$RyrJs
                                       g$r$11382$RyrJs))
                                   '#f)))
                              (g$match-each-any$11357$RyrJs
                                g$e$11377$RyrJs
                                g$m*$11379$RyrJs
                                g$s*$11380$RyrJs
                                g$ae*$11381$RyrJs))
                             ((case-lambda
                                ((g$t$11384$RyrJs)
                                 (if (eqv? g$t$11384$RyrJs 'each)
                                   (if (null? g$e$11377$RyrJs)
                                     (g$match-empty$11358$RyrJs
                                       (vector-ref g$p$11378$RyrJs '1)
                                       g$r$11382$RyrJs)
                                     ((case-lambda
                                        ((g$r*$11385$RyrJs)
                                         (if g$r*$11385$RyrJs
                                           (begin
                                             '#f
                                             (g$combine$11359$RyrJs
                                               g$r*$11385$RyrJs
                                               g$r$11382$RyrJs))
                                           '#f)))
                                      (g$match-each$11355$RyrJs
                                        g$e$11377$RyrJs
                                        (vector-ref g$p$11378$RyrJs '1)
                                        g$m*$11379$RyrJs
                                        g$s*$11380$RyrJs
                                        g$ae*$11381$RyrJs)))
                                   (if (eqv? g$t$11384$RyrJs 'free-id)
                                     (if (g$symbol?$6456$RyrJs
                                           g$e$11377$RyrJs)
                                       (if (g$top-marked?$9257$RyrJs
                                             g$m*$11379$RyrJs)
                                         (if (g$free-id=?$9327$RyrJs
                                               (g$stx^$11354$RyrJs
                                                 g$e$11377$RyrJs
                                                 g$m*$11379$RyrJs
                                                 g$s*$11380$RyrJs
                                                 g$ae*$11381$RyrJs)
                                               (vector-ref
                                                 g$p$11378$RyrJs
                                                 '1))
                                           (begin '#f g$r$11382$RyrJs)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (eqv?
                                           g$t$11384$RyrJs
                                           'scheme-id)
                                       (if (g$symbol?$6456$RyrJs
                                             g$e$11377$RyrJs)
                                         (if (g$top-marked?$9257$RyrJs
                                               g$m*$11379$RyrJs)
                                           (if (g$free-id=?$9327$RyrJs
                                                 (g$stx^$11354$RyrJs
                                                   g$e$11377$RyrJs
                                                   g$m*$11379$RyrJs
                                                   g$s*$11380$RyrJs
                                                   g$ae*$11381$RyrJs)
                                                 (g$scheme-stx$9629$RyrJs
                                                   (vector-ref
                                                     g$p$11378$RyrJs
                                                     '1)))
                                             (begin '#f g$r$11382$RyrJs)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv? g$t$11384$RyrJs 'each+)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$11356$RyrJs
                                                g$e$11377$RyrJs
                                                (vector-ref
                                                  g$p$11378$RyrJs
                                                  '1)
                                                (vector-ref
                                                  g$p$11378$RyrJs
                                                  '2)
                                                (vector-ref
                                                  g$p$11378$RyrJs
                                                  '3)
                                                g$m*$11379$RyrJs
                                                g$s*$11380$RyrJs
                                                g$ae*$11381$RyrJs
                                                g$r$11382$RyrJs)))
                                           (case-lambda
                                             ((g$xr*$11389$RyrJs
                                                g$y-pat$11390$RyrJs
                                                g$r$11391$RyrJs)
                                              ((case-lambda
                                                 ((g$r$11392$RyrJs
                                                    g$y-pat$11393$RyrJs
                                                    g$xr*$11394$RyrJs)
                                                  (if g$r$11392$RyrJs
                                                    (if (null?
                                                          g$y-pat$11393$RyrJs)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$11394$RyrJs)
                                                          (g$match-empty$11358$RyrJs
                                                            (vector-ref
                                                              g$p$11378$RyrJs
                                                              '1)
                                                            g$r$11392$RyrJs)
                                                          (g$combine$11359$RyrJs
                                                            g$xr*$11394$RyrJs
                                                            g$r$11392$RyrJs)))
                                                      '#f)
                                                    '#f)))
                                               g$r$11391$RyrJs
                                               g$y-pat$11390$RyrJs
                                               g$xr*$11389$RyrJs))))
                                         (if (eqv?
                                               g$t$11384$RyrJs
                                               'atom)
                                           (if (equal?
                                                 (vector-ref
                                                   g$p$11378$RyrJs
                                                   '1)
                                                 (g$strip$9333$RyrJs
                                                   g$e$11377$RyrJs
                                                   g$m*$11379$RyrJs))
                                             (begin '#f g$r$11382$RyrJs)
                                             '#f)
                                           (if (eqv?
                                                 g$t$11384$RyrJs
                                                 'vector)
                                             (if (g$vector?$6454$RyrJs
                                                   g$e$11377$RyrJs)
                                               (begin
                                                 '#f
                                                 (g$match$11361$RyrJs
                                                   (vector->list
                                                     g$e$11377$RyrJs)
                                                   (vector-ref
                                                     g$p$11378$RyrJs
                                                     '1)
                                                   g$m*$11379$RyrJs
                                                   g$s*$11380$RyrJs
                                                   g$ae*$11381$RyrJs
                                                   g$r$11382$RyrJs))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$11378$RyrJs)))))))))
                              (vector-ref g$p$11378$RyrJs '0))))))))
                  (g$match$11361$RyrJs
                    (case-lambda
                      ((g$e$11362$RyrJs
                         g$p$11363$RyrJs
                         g$m*$11364$RyrJs
                         g$s*$11365$RyrJs
                         g$ae*$11366$RyrJs
                         g$r$11367$RyrJs)
                       (if (not g$r$11367$RyrJs)
                         '#f
                         (if (eq? g$p$11363$RyrJs '_)
                           g$r$11367$RyrJs
                           (if (eq? g$p$11363$RyrJs 'any)
                             (cons
                               (g$stx^$11354$RyrJs
                                 g$e$11362$RyrJs
                                 g$m*$11364$RyrJs
                                 g$s*$11365$RyrJs
                                 g$ae*$11366$RyrJs)
                               g$r$11367$RyrJs)
                             (if (g$stx?$9295$RyrJs g$e$11362$RyrJs)
                               (if (not (g$top-marked?$9257$RyrJs
                                          g$m*$11364$RyrJs))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$9310$RyrJs
                                          g$m*$11364$RyrJs
                                          g$s*$11365$RyrJs
                                          g$ae*$11366$RyrJs
                                          g$e$11362$RyrJs)))
                                     (case-lambda
                                       ((g$m*$11371$RyrJs
                                          g$s*$11372$RyrJs
                                          g$ae*$11373$RyrJs)
                                        ((case-lambda
                                           ((g$ae*$11374$RyrJs
                                              g$s*$11375$RyrJs
                                              g$m*$11376$RyrJs)
                                            (g$match$11361$RyrJs
                                              (g$stx-expr$9297$RyrJs
                                                g$e$11362$RyrJs)
                                              g$p$11363$RyrJs
                                              g$m*$11376$RyrJs
                                              g$s*$11375$RyrJs
                                              g$ae*$11374$RyrJs
                                              g$r$11367$RyrJs)))
                                         g$ae*$11373$RyrJs
                                         g$s*$11372$RyrJs
                                         g$m*$11371$RyrJs)))))
                                 '#f)
                               (if (annotation? g$e$11362$RyrJs)
                                 (g$match$11361$RyrJs
                                   (annotation-expression
                                     g$e$11362$RyrJs)
                                   g$p$11363$RyrJs
                                   g$m*$11364$RyrJs
                                   g$s*$11365$RyrJs
                                   g$ae*$11366$RyrJs
                                   g$r$11367$RyrJs)
                                 (g$match*$11360$RyrJs
                                   g$e$11362$RyrJs
                                   g$p$11363$RyrJs
                                   g$m*$11364$RyrJs
                                   g$s*$11365$RyrJs
                                   g$ae*$11366$RyrJs
                                   g$r$11367$RyrJs))))))))))
          (g$match$11361$RyrJs
            g$e$11352$RyrJs
            g$p$11353$RyrJs
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$9687$RyrJs
     g$ellipsis?$13277$RyrJs
     (case-lambda
       ((g$x$11466$RyrJs)
        (if (g$id?$9323$RyrJs g$x$11466$RyrJs)
          (begin
            '#f
            (g$free-id=?$9327$RyrJs
              g$x$11466$RyrJs
              (g$scheme-stx$9629$RyrJs '...)))
          '#f))))
   (g$underscore?$9688$RyrJs
     g$underscore?$13278$RyrJs
     (case-lambda
       ((g$x$11467$RyrJs)
        (if (g$id?$9323$RyrJs g$x$11467$RyrJs)
          (begin
            '#f
            (g$free-id=?$9327$RyrJs
              g$x$11467$RyrJs
              (g$scheme-stx$9629$RyrJs '_)))
          '#f))))
   (g$verify-literals$9689$RyrJs
     g$verify-literals$13279$RyrJs
     (case-lambda
       ((g$lits$11468$RyrJs g$expr$11469$RyrJs)
        (g$for-each$5808$RyrJs
          (case-lambda
            ((g$x$11470$RyrJs)
             (if ((case-lambda
                    ((g$t$11471$RyrJs)
                     (if g$t$11471$RyrJs
                       g$t$11471$RyrJs
                       ((case-lambda
                          ((g$t$11472$RyrJs)
                           (if g$t$11472$RyrJs
                             g$t$11472$RyrJs
                             (begin
                               '#f
                               (g$underscore?$9688$RyrJs
                                 g$x$11470$RyrJs)))))
                        (g$ellipsis?$9687$RyrJs g$x$11470$RyrJs)))))
                  (not (g$id?$9323$RyrJs g$x$11470$RyrJs)))
               (g$syntax-violation$9805$RyrJs
                 '#f
                 '"invalid literal"
                 g$expr$11469$RyrJs
                 g$x$11470$RyrJs)
               (void))))
          g$lits$11468$RyrJs))))
   (g$syntax-case-transformer$9690$RyrJs
     g$syntax-case-transformer$13280$RyrJs
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$11473$RyrJs
                     (case-lambda
                       ((g$pvars$11530$RyrJs
                          g$expr$11531$RyrJs
                          g$y$11532$RyrJs
                          g$r$11533$RyrJs
                          g$mr$11534$RyrJs)
                        ((case-lambda
                           ((g$ids$11535$RyrJs g$levels$11536$RyrJs)
                            ((case-lambda
                               ((g$labels$11537$RyrJs
                                  g$new-vars$11538$RyrJs)
                                ((case-lambda
                                   ((g$body$11539$RyrJs)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$9245$RyrJs
                                        '#f
                                        g$new-vars$11538$RyrJs
                                        g$body$11539$RyrJs)
                                      g$y$11532$RyrJs)))
                                 (g$chi-expr$9704$RyrJs
                                   (g$add-subst$9313$RyrJs
                                     (g$make-full-rib$9289$RyrJs
                                       g$ids$11535$RyrJs
                                       g$labels$11537$RyrJs)
                                     g$expr$11531$RyrJs)
                                   (append
                                     (g$map$5807$RyrJs
                                       (case-lambda
                                         ((g$label$11540$RyrJs
                                            g$var$11541$RyrJs
                                            g$level$11542$RyrJs)
                                          (cons
                                            g$label$11540$RyrJs
                                            (g$make-binding$9339$RyrJs
                                              'syntax
                                              (cons
                                                g$var$11541$RyrJs
                                                g$level$11542$RyrJs)))))
                                       g$labels$11537$RyrJs
                                       g$new-vars$11538$RyrJs
                                       (g$map$5807$RyrJs
                                         cdr
                                         g$pvars$11530$RyrJs))
                                     g$r$11533$RyrJs)
                                   g$mr$11534$RyrJs))))
                             (g$map$5807$RyrJs
                               g$gen-label$9260$RyrJs
                               g$ids$11535$RyrJs)
                             (g$map$5807$RyrJs
                               g$gen-lexical$9258$RyrJs
                               g$ids$11535$RyrJs))))
                         (g$map$5807$RyrJs car g$pvars$11530$RyrJs)
                         (g$map$5807$RyrJs cdr g$pvars$11530$RyrJs)))))
                   (g$invalid-ids-error$11474$RyrJs
                     (case-lambda
                       ((g$id*$11524$RyrJs
                          g$e$11525$RyrJs
                          g$class$11526$RyrJs)
                        ((letrec ((g$find$11527$RyrJs
                                    (case-lambda
                                      ((g$id*$11528$RyrJs
                                         g$ok*$11529$RyrJs)
                                       (if (null? g$id*$11528$RyrJs)
                                         (g$syntax-violation$9805$RyrJs
                                           '#f
                                           '"invalid syntax"
                                           g$e$11525$RyrJs)
                                         (if (g$id?$9323$RyrJs
                                               (car g$id*$11528$RyrJs))
                                           (if (g$bound-id-member?$9330$RyrJs
                                                 (car g$id*$11528$RyrJs)
                                                 g$ok*$11529$RyrJs)
                                             (g$syntax-error$9802$RyrJs
                                               (car g$id*$11528$RyrJs)
                                               '"duplicate "
                                               g$class$11526$RyrJs)
                                             (g$find$11527$RyrJs
                                               (cdr g$id*$11528$RyrJs)
                                               (cons
                                                 (car g$id*$11528$RyrJs)
                                                 g$ok*$11529$RyrJs)))
                                           (g$syntax-error$9802$RyrJs
                                             (car g$id*$11528$RyrJs)
                                             '"invalid "
                                             g$class$11526$RyrJs)))))))
                           g$find$11527$RyrJs)
                         g$id*$11524$RyrJs
                         '()))))
                   (g$gen-clause$11475$RyrJs
                     (case-lambda
                       ((g$x$11504$RyrJs
                          g$keys$11505$RyrJs
                          g$clauses$11506$RyrJs
                          g$r$11507$RyrJs
                          g$mr$11508$RyrJs
                          g$pat$11509$RyrJs
                          g$fender$11510$RyrJs
                          g$expr$11511$RyrJs)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$9685$RyrJs
                               g$pat$11509$RyrJs
                               g$keys$11505$RyrJs)))
                          (case-lambda
                            ((g$p$11514$RyrJs g$pvars$11515$RyrJs)
                             ((case-lambda
                                ((g$pvars$11516$RyrJs g$p$11517$RyrJs)
                                 (if (not (g$distinct-bound-ids?$9329$RyrJs
                                            (g$map$5807$RyrJs
                                              car
                                              g$pvars$11516$RyrJs)))
                                   (g$invalid-ids-error$11474$RyrJs
                                     (g$map$5807$RyrJs
                                       car
                                       g$pvars$11516$RyrJs)
                                     g$pat$11509$RyrJs
                                     '"pattern variable")
                                   (if (not (g$for-all$5805$RyrJs
                                              (case-lambda
                                                ((g$x$11518$RyrJs)
                                                 (not (g$ellipsis?$9687$RyrJs
                                                        (car g$x$11518$RyrJs)))))
                                              g$pvars$11516$RyrJs))
                                     (g$syntax-violation$9805$RyrJs
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$11509$RyrJs)
                                     ((case-lambda
                                        ((g$y$11519$RyrJs)
                                         ((case-lambda
                                            ((g$test$11520$RyrJs)
                                             ((case-lambda
                                                ((g$conseq$11521$RyrJs)
                                                 ((case-lambda
                                                    ((g$altern$11522$RyrJs)
                                                     (list
                                                       (g$build-lambda$9245$RyrJs
                                                         '#f
                                                         (list
                                                           g$y$11519$RyrJs)
                                                         (list
                                                           'if
                                                           g$test$11520$RyrJs
                                                           g$conseq$11521$RyrJs
                                                           g$altern$11522$RyrJs))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$11504$RyrJs
                                                         (list
                                                           'quote
                                                           g$p$11517$RyrJs)))))
                                                  (g$gen-syntax-case$11476$RyrJs
                                                    g$x$11504$RyrJs
                                                    g$keys$11505$RyrJs
                                                    g$clauses$11506$RyrJs
                                                    g$r$11507$RyrJs
                                                    g$mr$11508$RyrJs))))
                                              (g$build-dispatch-call$11473$RyrJs
                                                g$pvars$11516$RyrJs
                                                g$expr$11511$RyrJs
                                                g$y$11519$RyrJs
                                                g$r$11507$RyrJs
                                                g$mr$11508$RyrJs))))
                                          (if (eq? g$fender$11510$RyrJs
                                                   '#t)
                                            g$y$11519$RyrJs
                                            ((case-lambda
                                               ((g$call$11523$RyrJs)
                                                (list
                                                  'if
                                                  g$y$11519$RyrJs
                                                  g$call$11523$RyrJs
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$11473$RyrJs
                                               g$pvars$11516$RyrJs
                                               g$fender$11510$RyrJs
                                               g$y$11519$RyrJs
                                               g$r$11507$RyrJs
                                               g$mr$11508$RyrJs))))))
                                      (g$gen-lexical$9258$RyrJs
                                        'tmp))))))
                              g$pvars$11515$RyrJs
                              g$p$11514$RyrJs)))))))
                   (g$gen-syntax-case$11476$RyrJs
                     (case-lambda
                       ((g$x$11487$RyrJs
                          g$keys$11488$RyrJs
                          g$clauses$11489$RyrJs
                          g$r$11490$RyrJs
                          g$mr$11491$RyrJs)
                        (if (null? g$clauses$11489$RyrJs)
                          (list
                            '(primitive syntax-error)
                            g$x$11487$RyrJs)
                          ((case-lambda
                             ((g$t$11492$RyrJs)
                              ((case-lambda
                                 ((g$ls/false$11493$RyrJs)
                                  (if g$ls/false$11493$RyrJs
                                    (apply
                                      (case-lambda
                                        ((g$pat$11494$RyrJs
                                           g$expr$11495$RyrJs)
                                         (if (if (g$id?$9323$RyrJs
                                                   g$pat$11494$RyrJs)
                                               (if (not (g$bound-id-member?$9330$RyrJs
                                                          g$pat$11494$RyrJs
                                                          g$keys$11488$RyrJs))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$9687$RyrJs
                                                          g$pat$11494$RyrJs)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$9327$RyrJs
                                                 g$pat$11494$RyrJs
                                                 (g$scheme-stx$9629$RyrJs
                                                   '_))
                                             (g$chi-expr$9704$RyrJs
                                               g$expr$11495$RyrJs
                                               g$r$11490$RyrJs
                                               g$mr$11491$RyrJs)
                                             ((case-lambda
                                                ((g$lab$11496$RyrJs
                                                   g$lex$11497$RyrJs)
                                                 ((case-lambda
                                                    ((g$body$11498$RyrJs)
                                                     (list
                                                       (g$build-lambda$9245$RyrJs
                                                         '#f
                                                         (list
                                                           g$lex$11497$RyrJs)
                                                         g$body$11498$RyrJs)
                                                       g$x$11487$RyrJs)))
                                                  (g$chi-expr$9704$RyrJs
                                                    (g$add-subst$9313$RyrJs
                                                      (g$make-full-rib$9289$RyrJs
                                                        (list
                                                          g$pat$11494$RyrJs)
                                                        (list
                                                          g$lab$11496$RyrJs))
                                                      g$expr$11495$RyrJs)
                                                    (cons
                                                      (cons
                                                        g$lab$11496$RyrJs
                                                        (g$make-binding$9339$RyrJs
                                                          'syntax
                                                          (cons
                                                            g$lex$11497$RyrJs
                                                            '0)))
                                                      g$r$11490$RyrJs)
                                                    g$mr$11491$RyrJs))))
                                              (g$gen-label$9260$RyrJs
                                                g$pat$11494$RyrJs)
                                              (g$gen-lexical$9258$RyrJs
                                                g$pat$11494$RyrJs)))
                                           (g$gen-clause$11475$RyrJs
                                             g$x$11487$RyrJs
                                             g$keys$11488$RyrJs
                                             (cdr g$clauses$11489$RyrJs)
                                             g$r$11490$RyrJs
                                             g$mr$11491$RyrJs
                                             g$pat$11494$RyrJs
                                             '#t
                                             g$expr$11495$RyrJs))))
                                      g$ls/false$11493$RyrJs)
                                    ((case-lambda
                                       ((g$t$11499$RyrJs)
                                        ((case-lambda
                                           ((g$ls/false$11500$RyrJs)
                                            (if g$ls/false$11500$RyrJs
                                              (apply
                                                (case-lambda
                                                  ((g$pat$11501$RyrJs
                                                     g$fender$11502$RyrJs
                                                     g$expr$11503$RyrJs)
                                                   (g$gen-clause$11475$RyrJs
                                                     g$x$11487$RyrJs
                                                     g$keys$11488$RyrJs
                                                     (cdr g$clauses$11489$RyrJs)
                                                     g$r$11490$RyrJs
                                                     g$mr$11491$RyrJs
                                                     g$pat$11501$RyrJs
                                                     g$fender$11502$RyrJs
                                                     g$expr$11503$RyrJs)))
                                                g$ls/false$11500$RyrJs)
                                              (g$syntax-violation$9805$RyrJs
                                                '#f
                                                '"invalid syntax"
                                                g$t$11499$RyrJs))))
                                         (g$syntax-dispatch$9686$RyrJs
                                           g$t$11499$RyrJs
                                           '(any any any)))))
                                     g$t$11492$RyrJs))))
                               (g$syntax-dispatch$9686$RyrJs
                                 g$t$11492$RyrJs
                                 '(any any)))))
                           (car g$clauses$11489$RyrJs)))))))
           (case-lambda
             ((g$e$11477$RyrJs g$r$11478$RyrJs g$mr$11479$RyrJs)
              ((case-lambda
                 ((g$t$11480$RyrJs)
                  ((case-lambda
                     ((g$ls/false$11481$RyrJs)
                      (if g$ls/false$11481$RyrJs
                        (apply
                          (case-lambda
                            ((g$expr$11482$RyrJs
                               g$keys$11483$RyrJs
                               g$clauses$11484$RyrJs)
                             (begin
                               (g$verify-literals$9689$RyrJs
                                 g$keys$11483$RyrJs
                                 g$e$11477$RyrJs)
                               ((case-lambda
                                  ((g$x$11485$RyrJs)
                                   ((case-lambda
                                      ((g$body$11486$RyrJs)
                                       (list
                                         (g$build-lambda$9245$RyrJs
                                           '#f
                                           (list g$x$11485$RyrJs)
                                           g$body$11486$RyrJs)
                                         (g$chi-expr$9704$RyrJs
                                           g$expr$11482$RyrJs
                                           g$r$11478$RyrJs
                                           g$mr$11479$RyrJs))))
                                    (g$gen-syntax-case$11476$RyrJs
                                      g$x$11485$RyrJs
                                      g$keys$11483$RyrJs
                                      g$clauses$11484$RyrJs
                                      g$r$11478$RyrJs
                                      g$mr$11479$RyrJs))))
                                (g$gen-lexical$9258$RyrJs 'tmp)))))
                          g$ls/false$11481$RyrJs)
                        (g$syntax-violation$9805$RyrJs
                          '#f
                          '"invalid syntax"
                          g$t$11480$RyrJs))))
                   (g$syntax-dispatch$9686$RyrJs
                     g$t$11480$RyrJs
                     '(_ any each-any . each-any)))))
               g$e$11477$RyrJs))))))))
   (g$ellipsis-map$9691$RyrJs
     g$ellipsis-map$13281$RyrJs
     (case-lambda
       ((g$proc$11543$RyrJs g$ls$11544$RyrJs . g$ls*$11545$RyrJs)
        (letrec* ((g$who$11546$RyrJs '...))
          (begin
            (if (not (list? g$ls$11544$RyrJs))
              (assertion-violation
                g$who$11546$RyrJs
                '"not a list"
                g$ls$11544$RyrJs)
              (void))
            (if (not (null? g$ls*$11545$RyrJs))
              ((case-lambda
                 ((g$n$11547$RyrJs)
                  (g$for-each$5808$RyrJs
                    (case-lambda
                      ((g$x$11548$RyrJs)
                       (begin
                         (if (not (list? g$x$11548$RyrJs))
                           (assertion-violation
                             g$who$11546$RyrJs
                             '"not a list"
                             g$x$11548$RyrJs)
                           (void))
                         (if (not (= (length g$x$11548$RyrJs)
                                     g$n$11547$RyrJs))
                           (assertion-violation
                             g$who$11546$RyrJs
                             '"length mismatch"
                             g$ls$11544$RyrJs
                             g$x$11548$RyrJs)
                           (void)))))
                    g$ls*$11545$RyrJs)))
               (length g$ls$11544$RyrJs))
              (void))
            (apply
              g$map$5807$RyrJs
              g$proc$11543$RyrJs
              g$ls$11544$RyrJs
              g$ls*$11545$RyrJs))))))
   (g$syntax-transformer$9692$RyrJs
     g$syntax-transformer$13282$RyrJs
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$11549$RyrJs
                     (case-lambda
                       ((g$src$11609$RyrJs
                          g$e$11610$RyrJs
                          g$r$11611$RyrJs
                          g$maps$11612$RyrJs
                          g$ellipsis?$11613$RyrJs
                          g$vec?$11614$RyrJs)
                        ((case-lambda
                           ((g$t$11615$RyrJs)
                            ((case-lambda
                               ((g$ls/false$11616$RyrJs)
                                (if (if g$ls/false$11616$RyrJs
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$11617$RyrJs)
                                             (g$ellipsis?$11613$RyrJs
                                               g$dots$11617$RyrJs)))
                                          g$ls/false$11616$RyrJs))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$11618$RyrJs)
                                       (g$syntax-violation$9805$RyrJs
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$11609$RyrJs)))
                                    g$ls/false$11616$RyrJs)
                                  ((case-lambda
                                     ((g$t$11619$RyrJs)
                                      ((case-lambda
                                         ((g$ls/false$11620$RyrJs)
                                          (if (if g$ls/false$11620$RyrJs
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$11621$RyrJs)
                                                       (g$id?$9323$RyrJs
                                                         g$id$11621$RyrJs)))
                                                    g$ls/false$11620$RyrJs))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$11622$RyrJs)
                                                 ((case-lambda
                                                    ((g$label$11623$RyrJs)
                                                     ((case-lambda
                                                        ((g$b$11624$RyrJs)
                                                         (if (eq? (g$binding-type$9340$RyrJs
                                                                    g$b$11624$RyrJs)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$11627$RyrJs)
                                                                    (g$gen-ref$11550$RyrJs
                                                                      g$src$11609$RyrJs
                                                                      (car g$var.lev$11627$RyrJs)
                                                                      (cdr g$var.lev$11627$RyrJs)
                                                                      g$maps$11612$RyrJs)))
                                                                 (g$binding-value$9341$RyrJs
                                                                   g$b$11624$RyrJs))))
                                                             (case-lambda
                                                               ((g$var$11628$RyrJs
                                                                  g$maps$11629$RyrJs)
                                                                ((case-lambda
                                                                   ((g$maps$11630$RyrJs
                                                                      g$var$11631$RyrJs)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$11631$RyrJs)
                                                                      g$maps$11630$RyrJs)))
                                                                 g$maps$11629$RyrJs
                                                                 g$var$11628$RyrJs))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$11610$RyrJs)
                                                             g$maps$11612$RyrJs))))
                                                      (g$label->binding$9338$RyrJs
                                                        g$label$11623$RyrJs
                                                        g$r$11611$RyrJs))))
                                                  (g$id->label$9336$RyrJs
                                                    g$e$11610$RyrJs))))
                                              g$ls/false$11620$RyrJs)
                                            ((case-lambda
                                               ((g$t$11632$RyrJs)
                                                ((case-lambda
                                                   ((g$ls/false$11633$RyrJs)
                                                    (if (if g$ls/false$11633$RyrJs
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$11634$RyrJs
                                                                   g$e$11635$RyrJs)
                                                                 (g$ellipsis?$11613$RyrJs
                                                                   g$dots$11634$RyrJs)))
                                                              g$ls/false$11633$RyrJs))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$11636$RyrJs
                                                             g$e$11637$RyrJs)
                                                           (if g$vec?$11614$RyrJs
                                                             (g$syntax-violation$9805$RyrJs
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$11609$RyrJs)
                                                             (g$gen-syntax$11549$RyrJs
                                                               g$src$11609$RyrJs
                                                               g$e$11637$RyrJs
                                                               g$r$11611$RyrJs
                                                               g$maps$11612$RyrJs
                                                               (case-lambda
                                                                 ((g$x$11638$RyrJs)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$11633$RyrJs)
                                                      ((case-lambda
                                                         ((g$t$11639$RyrJs)
                                                          ((case-lambda
                                                             ((g$ls/false$11640$RyrJs)
                                                              (if (if g$ls/false$11640$RyrJs
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$11641$RyrJs
                                                                             g$dots$11642$RyrJs
                                                                             g$y$11643$RyrJs)
                                                                           (g$ellipsis?$11613$RyrJs
                                                                             g$dots$11642$RyrJs)))
                                                                        g$ls/false$11640$RyrJs))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$11644$RyrJs
                                                                       g$dots$11645$RyrJs
                                                                       g$y$11646$RyrJs)
                                                                     ((letrec ((g$f$11647$RyrJs
                                                                                 (case-lambda
                                                                                   ((g$y$11648$RyrJs
                                                                                      g$k$11649$RyrJs)
                                                                                    ((case-lambda
                                                                                       ((g$t$11650$RyrJs)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$11651$RyrJs)
                                                                                            (if g$ls/false$11651$RyrJs
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$11649$RyrJs
                                                                                                     g$maps$11612$RyrJs)))
                                                                                                g$ls/false$11651$RyrJs)
                                                                                              ((case-lambda
                                                                                                 ((g$t$11652$RyrJs)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$11653$RyrJs)
                                                                                                      (if (if g$ls/false$11653$RyrJs
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$11654$RyrJs
                                                                                                                     g$y$11655$RyrJs)
                                                                                                                   (g$ellipsis?$11613$RyrJs
                                                                                                                     g$dots$11654$RyrJs)))
                                                                                                                g$ls/false$11653$RyrJs))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$11656$RyrJs
                                                                                                               g$y$11657$RyrJs)
                                                                                                             (g$f$11647$RyrJs
                                                                                                               g$y$11657$RyrJs
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$11658$RyrJs)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$11649$RyrJs
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$11658$RyrJs))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$11661$RyrJs
                                                                                                                         g$maps$11662$RyrJs)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$11663$RyrJs
                                                                                                                             g$x$11664$RyrJs)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$11663$RyrJs))
                                                                                                                             (g$syntax-violation$9805$RyrJs
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$11609$RyrJs)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$11552$RyrJs
                                                                                                                                 g$x$11664$RyrJs
                                                                                                                                 (car g$maps$11663$RyrJs))
                                                                                                                               (cdr g$maps$11663$RyrJs)))))
                                                                                                                        g$maps$11662$RyrJs
                                                                                                                        g$x$11661$RyrJs)))))))))
                                                                                                          g$ls/false$11653$RyrJs)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$11665$RyrJs)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$11666$RyrJs)
                                                                                                                (if g$ls/false$11666$RyrJs
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$11549$RyrJs
                                                                                                                              g$src$11609$RyrJs
                                                                                                                              g$y$11648$RyrJs
                                                                                                                              g$r$11611$RyrJs
                                                                                                                              g$maps$11612$RyrJs
                                                                                                                              g$ellipsis?$11613$RyrJs
                                                                                                                              g$vec?$11614$RyrJs)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$11669$RyrJs
                                                                                                                              g$maps$11670$RyrJs)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$11671$RyrJs
                                                                                                                                  g$y$11672$RyrJs)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$11649$RyrJs
                                                                                                                                       g$maps$11671$RyrJs)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$11675$RyrJs
                                                                                                                                       g$maps$11676$RyrJs)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$11677$RyrJs
                                                                                                                                           g$x$11678$RyrJs)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$11551$RyrJs
                                                                                                                                             g$x$11678$RyrJs
                                                                                                                                             g$y$11672$RyrJs)
                                                                                                                                           g$maps$11677$RyrJs)))
                                                                                                                                      g$maps$11676$RyrJs
                                                                                                                                      g$x$11675$RyrJs))))))
                                                                                                                             g$maps$11670$RyrJs
                                                                                                                             g$y$11669$RyrJs))))))
                                                                                                                    g$ls/false$11666$RyrJs)
                                                                                                                  (g$syntax-violation$9805$RyrJs
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$11665$RyrJs))))
                                                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                                                               g$t$11665$RyrJs
                                                                                                               '_))))
                                                                                                         g$t$11652$RyrJs))))
                                                                                                   (g$syntax-dispatch$9686$RyrJs
                                                                                                     g$t$11652$RyrJs
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$11650$RyrJs))))
                                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                                           g$t$11650$RyrJs
                                                                                           '()))))
                                                                                     g$y$11648$RyrJs)))))
                                                                        g$f$11647$RyrJs)
                                                                      g$y$11646$RyrJs
                                                                      (case-lambda
                                                                        ((g$maps$11679$RyrJs)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$11549$RyrJs
                                                                                g$src$11609$RyrJs
                                                                                g$x$11644$RyrJs
                                                                                g$r$11611$RyrJs
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$11679$RyrJs)
                                                                                g$ellipsis?$11613$RyrJs
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$11682$RyrJs
                                                                                g$maps$11683$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$maps$11684$RyrJs
                                                                                    g$x$11685$RyrJs)
                                                                                  (if (null?
                                                                                        (car g$maps$11684$RyrJs))
                                                                                    (g$syntax-violation$9805$RyrJs
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$11609$RyrJs)
                                                                                    (values
                                                                                      (g$gen-map$11553$RyrJs
                                                                                        g$x$11685$RyrJs
                                                                                        (car g$maps$11684$RyrJs))
                                                                                      (cdr g$maps$11684$RyrJs)))))
                                                                               g$maps$11683$RyrJs
                                                                               g$x$11682$RyrJs)))))))))
                                                                  g$ls/false$11640$RyrJs)
                                                                ((case-lambda
                                                                   ((g$t$11686$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$ls/false$11687$RyrJs)
                                                                        (if g$ls/false$11687$RyrJs
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$11688$RyrJs
                                                                                 g$y$11689$RyrJs)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$11549$RyrJs
                                                                                      g$src$11609$RyrJs
                                                                                      g$x$11688$RyrJs
                                                                                      g$r$11611$RyrJs
                                                                                      g$maps$11612$RyrJs
                                                                                      g$ellipsis?$11613$RyrJs
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$11692$RyrJs
                                                                                      g$maps$11693$RyrJs)
                                                                                    ((case-lambda
                                                                                       ((g$maps$11694$RyrJs
                                                                                          g$xnew$11695$RyrJs)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$11549$RyrJs
                                                                                               g$src$11609$RyrJs
                                                                                               g$y$11689$RyrJs
                                                                                               g$r$11611$RyrJs
                                                                                               g$maps$11694$RyrJs
                                                                                               g$ellipsis?$11613$RyrJs
                                                                                               g$vec?$11614$RyrJs)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$11698$RyrJs
                                                                                               g$maps$11699$RyrJs)
                                                                                             ((case-lambda
                                                                                                ((g$maps$11700$RyrJs
                                                                                                   g$ynew$11701$RyrJs)
                                                                                                 (values
                                                                                                   (g$gen-cons$11554$RyrJs
                                                                                                     g$e$11610$RyrJs
                                                                                                     g$x$11688$RyrJs
                                                                                                     g$y$11689$RyrJs
                                                                                                     g$xnew$11695$RyrJs
                                                                                                     g$ynew$11701$RyrJs)
                                                                                                   g$maps$11700$RyrJs)))
                                                                                              g$maps$11699$RyrJs
                                                                                              g$ynew$11698$RyrJs))))))
                                                                                     g$maps$11693$RyrJs
                                                                                     g$xnew$11692$RyrJs))))))
                                                                            g$ls/false$11687$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$t$11702$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$11703$RyrJs)
                                                                                  (if g$ls/false$11703$RyrJs
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$11704$RyrJs)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$11549$RyrJs
                                                                                                g$src$11609$RyrJs
                                                                                                g$ls$11704$RyrJs
                                                                                                g$r$11611$RyrJs
                                                                                                g$maps$11612$RyrJs
                                                                                                g$ellipsis?$11613$RyrJs
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$11707$RyrJs
                                                                                                g$maps$11708$RyrJs)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$11709$RyrJs
                                                                                                    g$lsnew$11710$RyrJs)
                                                                                                  (values
                                                                                                    (g$gen-vector$11555$RyrJs
                                                                                                      g$e$11610$RyrJs
                                                                                                      g$ls$11704$RyrJs
                                                                                                      g$lsnew$11710$RyrJs)
                                                                                                    g$maps$11709$RyrJs)))
                                                                                               g$maps$11708$RyrJs
                                                                                               g$lsnew$11707$RyrJs))))))
                                                                                      g$ls/false$11703$RyrJs)
                                                                                    ((case-lambda
                                                                                       ((g$t$11711$RyrJs)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$11712$RyrJs)
                                                                                            (if g$ls/false$11712$RyrJs
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$11610$RyrJs)
                                                                                                     g$maps$11612$RyrJs)))
                                                                                                g$ls/false$11712$RyrJs)
                                                                                              (g$syntax-violation$9805$RyrJs
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$11711$RyrJs))))
                                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                                           g$t$11711$RyrJs
                                                                                           '_))))
                                                                                     g$t$11702$RyrJs))))
                                                                               (g$syntax-dispatch$9686$RyrJs
                                                                                 g$t$11702$RyrJs
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$11686$RyrJs))))
                                                                     (g$syntax-dispatch$9686$RyrJs
                                                                       g$t$11686$RyrJs
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$11639$RyrJs))))
                                                           (g$syntax-dispatch$9686$RyrJs
                                                             g$t$11639$RyrJs
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$11632$RyrJs))))
                                                 (g$syntax-dispatch$9686$RyrJs
                                                   g$t$11632$RyrJs
                                                   '(any any)))))
                                             g$t$11619$RyrJs))))
                                       (g$syntax-dispatch$9686$RyrJs
                                         g$t$11619$RyrJs
                                         'any))))
                                   g$t$11615$RyrJs))))
                             (g$syntax-dispatch$9686$RyrJs
                               g$t$11615$RyrJs
                               'any))))
                         g$e$11610$RyrJs))))
                   (g$gen-ref$11550$RyrJs
                     (case-lambda
                       ((g$src$11596$RyrJs
                          g$var$11597$RyrJs
                          g$level$11598$RyrJs
                          g$maps$11599$RyrJs)
                        (if (= g$level$11598$RyrJs '0)
                          (values g$var$11597$RyrJs g$maps$11599$RyrJs)
                          (if (null? g$maps$11599$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$11596$RyrJs)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$11550$RyrJs
                                   g$src$11596$RyrJs
                                   g$var$11597$RyrJs
                                   (- g$level$11598$RyrJs '1)
                                   (cdr g$maps$11599$RyrJs))))
                              (case-lambda
                                ((g$outer-var$11602$RyrJs
                                   g$outer-maps$11603$RyrJs)
                                 ((case-lambda
                                    ((g$outer-maps$11604$RyrJs
                                       g$outer-var$11605$RyrJs)
                                     ((case-lambda
                                        ((g$t$11606$RyrJs)
                                         (if g$t$11606$RyrJs
                                           ((case-lambda
                                              ((g$b$11607$RyrJs)
                                               (values
                                                 (cdr g$b$11607$RyrJs)
                                                 g$maps$11599$RyrJs)))
                                            g$t$11606$RyrJs)
                                           ((case-lambda
                                              ((g$inner-var$11608$RyrJs)
                                               (values
                                                 g$inner-var$11608$RyrJs
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$11605$RyrJs
                                                       g$inner-var$11608$RyrJs)
                                                     (car g$maps$11599$RyrJs))
                                                   g$outer-maps$11604$RyrJs))))
                                            (g$gen-lexical$9258$RyrJs
                                              'tmp)))))
                                      (g$assq$5795$RyrJs
                                        g$outer-var$11605$RyrJs
                                        (car g$maps$11599$RyrJs)))))
                                  g$outer-maps$11603$RyrJs
                                  g$outer-var$11602$RyrJs)))))))))
                   (g$gen-append$11551$RyrJs
                     (case-lambda
                       ((g$x$11594$RyrJs g$y$11595$RyrJs)
                        (if (equal? g$y$11595$RyrJs ''())
                          g$x$11594$RyrJs
                          (list
                            'append
                            g$x$11594$RyrJs
                            g$y$11595$RyrJs)))))
                   (g$gen-mappend$11552$RyrJs
                     (case-lambda
                       ((g$e$11592$RyrJs g$map-env$11593$RyrJs)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$11553$RyrJs
                            g$e$11592$RyrJs
                            g$map-env$11593$RyrJs)))))
                   (g$gen-map$11553$RyrJs
                     (case-lambda
                       ((g$e$11583$RyrJs g$map-env$11584$RyrJs)
                        ((case-lambda
                           ((g$formals$11585$RyrJs
                              g$actuals$11586$RyrJs)
                            (if (eq? (car g$e$11583$RyrJs) 'ref)
                              (car g$actuals$11586$RyrJs)
                              (if (g$for-all$5805$RyrJs
                                    (case-lambda
                                      ((g$x$11587$RyrJs)
                                       (if (eq? (car g$x$11587$RyrJs)
                                                'ref)
                                         (begin
                                           '#f
                                           (g$memq$5799$RyrJs
                                             (g$cadr$6465$RyrJs
                                               g$x$11587$RyrJs)
                                             g$formals$11585$RyrJs))
                                         '#f)))
                                    (cdr g$e$11583$RyrJs))
                                ((case-lambda
                                   ((g$args$11588$RyrJs)
                                    (cons
                                      'map
                                      (cons
                                        (list
                                          'primitive
                                          (car g$e$11583$RyrJs))
                                        g$args$11588$RyrJs))))
                                 (g$map$5807$RyrJs
                                   ((case-lambda
                                      ((g$r$11589$RyrJs)
                                       (case-lambda
                                         ((g$x$11590$RyrJs)
                                          (cdr (g$assq$5795$RyrJs
                                                 (g$cadr$6465$RyrJs
                                                   g$x$11590$RyrJs)
                                                 g$r$11589$RyrJs))))))
                                    (g$map$5807$RyrJs
                                      cons
                                      g$formals$11585$RyrJs
                                      g$actuals$11586$RyrJs))
                                   (cdr g$e$11583$RyrJs)))
                                (g$cons*$5809$RyrJs
                                  'map
                                  (list
                                    'lambda
                                    g$formals$11585$RyrJs
                                    g$e$11583$RyrJs)
                                  g$actuals$11586$RyrJs)))))
                         (g$map$5807$RyrJs cdr g$map-env$11584$RyrJs)
                         (g$map$5807$RyrJs
                           (case-lambda
                             ((g$x$11591$RyrJs)
                              (list 'ref (car g$x$11591$RyrJs))))
                           g$map-env$11584$RyrJs)))))
                   (g$gen-cons$11554$RyrJs
                     (case-lambda
                       ((g$e$11575$RyrJs
                          g$x$11576$RyrJs
                          g$y$11577$RyrJs
                          g$xnew$11578$RyrJs
                          g$ynew$11579$RyrJs)
                        ((case-lambda
                           ((g$t$11580$RyrJs)
                            (if (eqv? g$t$11580$RyrJs 'quote)
                              (if (eq? (car g$xnew$11578$RyrJs) 'quote)
                                ((case-lambda
                                   ((g$xnew$11581$RyrJs
                                      g$ynew$11582$RyrJs)
                                    (if (if (eq? g$xnew$11581$RyrJs
                                                 g$x$11576$RyrJs)
                                          (begin
                                            '#f
                                            (eq? g$ynew$11582$RyrJs
                                                 g$y$11577$RyrJs))
                                          '#f)
                                      (list 'quote g$e$11575$RyrJs)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$11581$RyrJs
                                          g$ynew$11582$RyrJs)))))
                                 (g$cadr$6465$RyrJs g$xnew$11578$RyrJs)
                                 (g$cadr$6465$RyrJs g$ynew$11579$RyrJs))
                                (if (null?
                                      (g$cadr$6465$RyrJs
                                        g$ynew$11579$RyrJs))
                                  (list 'list g$xnew$11578$RyrJs)
                                  (list
                                    'cons
                                    g$xnew$11578$RyrJs
                                    g$ynew$11579$RyrJs)))
                              (if (eqv? g$t$11580$RyrJs 'list)
                                (cons
                                  'list
                                  (cons
                                    g$xnew$11578$RyrJs
                                    (cdr g$ynew$11579$RyrJs)))
                                (list
                                  'cons
                                  g$xnew$11578$RyrJs
                                  g$ynew$11579$RyrJs)))))
                         (car g$ynew$11579$RyrJs)))))
                   (g$gen-vector$11555$RyrJs
                     (case-lambda
                       ((g$e$11572$RyrJs
                          g$ls$11573$RyrJs
                          g$lsnew$11574$RyrJs)
                        (if (eq? (car g$lsnew$11574$RyrJs) 'quote)
                          (if (eq? (g$cadr$6465$RyrJs
                                     g$lsnew$11574$RyrJs)
                                   g$ls$11573$RyrJs)
                            (list 'quote g$e$11572$RyrJs)
                            (list
                              'quote
                              (g$list->vector$6451$RyrJs
                                (g$cadr$6465$RyrJs
                                  g$lsnew$11574$RyrJs))))
                          (if (eq? (car g$lsnew$11574$RyrJs) 'list)
                            (cons 'vector (cdr g$lsnew$11574$RyrJs))
                            (list
                              'list->vector
                              g$lsnew$11574$RyrJs))))))
                   (g$regen$11556$RyrJs
                     (case-lambda
                       ((g$x$11569$RyrJs)
                        ((case-lambda
                           ((g$t$11570$RyrJs)
                            (if (eqv? g$t$11570$RyrJs 'ref)
                              (g$cadr$6465$RyrJs g$x$11569$RyrJs)
                              (if (eqv? g$t$11570$RyrJs 'primitive)
                                (list
                                  'primitive
                                  (g$cadr$6465$RyrJs g$x$11569$RyrJs))
                                (if (eqv? g$t$11570$RyrJs 'quote)
                                  (list
                                    'quote
                                    (g$cadr$6465$RyrJs g$x$11569$RyrJs))
                                  (if (eqv? g$t$11570$RyrJs 'lambda)
                                    (g$build-lambda$9245$RyrJs
                                      '#f
                                      (g$cadr$6465$RyrJs
                                        g$x$11569$RyrJs)
                                      (g$regen$11556$RyrJs
                                        (g$caddr$6471$RyrJs
                                          g$x$11569$RyrJs)))
                                    (if (eqv? g$t$11570$RyrJs 'map)
                                      ((case-lambda
                                         ((g$ls$11571$RyrJs)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$11571$RyrJs)))
                                       (g$map$5807$RyrJs
                                         g$regen$11556$RyrJs
                                         (cdr g$x$11569$RyrJs)))
                                      (cons
                                        (list
                                          'primitive
                                          (car g$x$11569$RyrJs))
                                        (g$map$5807$RyrJs
                                          g$regen$11556$RyrJs
                                          (cdr g$x$11569$RyrJs))))))))))
                         (car g$x$11569$RyrJs))))))
           (case-lambda
             ((g$e$11557$RyrJs g$r$11558$RyrJs g$mr$11559$RyrJs)
              ((case-lambda
                 ((g$t$11560$RyrJs)
                  ((case-lambda
                     ((g$ls/false$11561$RyrJs)
                      (if g$ls/false$11561$RyrJs
                        (apply
                          (case-lambda
                            ((g$x$11562$RyrJs)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$11549$RyrJs
                                    g$e$11557$RyrJs
                                    g$x$11562$RyrJs
                                    g$r$11558$RyrJs
                                    '()
                                    g$ellipsis?$9687$RyrJs
                                    '#f)))
                               (case-lambda
                                 ((g$e$11565$RyrJs g$maps$11566$RyrJs)
                                  ((case-lambda
                                     ((g$maps$11567$RyrJs
                                        g$e$11568$RyrJs)
                                      (g$regen$11556$RyrJs
                                        g$e$11568$RyrJs)))
                                   g$maps$11566$RyrJs
                                   g$e$11565$RyrJs))))))
                          g$ls/false$11561$RyrJs)
                        (g$syntax-violation$9805$RyrJs
                          '#f
                          '"invalid syntax"
                          g$t$11560$RyrJs))))
                   (g$syntax-dispatch$9686$RyrJs
                     g$t$11560$RyrJs
                     '(_ any)))))
               g$e$11557$RyrJs))))))))
   (g$core-macro-transformer$9693$RyrJs
     g$core-macro-transformer$13283$RyrJs
     (case-lambda
       ((g$name$11713$RyrJs)
        ((case-lambda
           ((g$t$11714$RyrJs)
            (if (eqv? g$t$11714$RyrJs 'quote)
              g$quote-transformer$9646$RyrJs
              (if (eqv? g$t$11714$RyrJs 'lambda)
                g$lambda-transformer$9648$RyrJs
                (if (eqv? g$t$11714$RyrJs 'case-lambda)
                  g$case-lambda-transformer$9647$RyrJs
                  (if (eqv? g$t$11714$RyrJs 'letrec)
                    g$letrec-transformer$9636$RyrJs
                    (if (eqv? g$t$11714$RyrJs 'letrec*)
                      g$letrec*-transformer$9637$RyrJs
                      (if (eqv? g$t$11714$RyrJs 'if)
                        g$if-transformer$9644$RyrJs
                        (if (eqv? g$t$11714$RyrJs 'foreign-call)
                          g$foreign-call-transformer$9684$RyrJs
                          (if (eqv? g$t$11714$RyrJs 'syntax-case)
                            g$syntax-case-transformer$9690$RyrJs
                            (if (eqv? g$t$11714$RyrJs 'syntax)
                              g$syntax-transformer$9692$RyrJs
                              (if (eqv?
                                    g$t$11714$RyrJs
                                    'type-descriptor)
                                g$type-descriptor-transformer$9639$RyrJs
                                (if (eqv?
                                      g$t$11714$RyrJs
                                      'record-type-descriptor)
                                  g$record-type-descriptor-transformer$9640$RyrJs
                                  (if (eqv?
                                        g$t$11714$RyrJs
                                        'record-constructor-descriptor)
                                    g$record-constructor-descriptor-transformer$9641$RyrJs
                                    (if (eqv?
                                          g$t$11714$RyrJs
                                          'fluid-let-syntax)
                                      g$fluid-let-syntax-transformer$9638$RyrJs
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$11713$RyrJs))))))))))))))))
         g$name$11713$RyrJs))))
   (g$file-options-macro$9694$RyrJs
     g$file-options-macro$13284$RyrJs
     (case-lambda
       ((g$x$11715$RyrJs)
        (letrec* ((g$valid-option?$11716$RyrJs
                    (case-lambda
                      ((g$x$11721$RyrJs)
                       (if (g$id?$9323$RyrJs g$x$11721$RyrJs)
                         (begin
                           '#f
                           (g$memq$5799$RyrJs
                             (g$id->sym$9324$RyrJs g$x$11721$RyrJs)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$11717$RyrJs)
              ((case-lambda
                 ((g$ls/false$11718$RyrJs)
                  (if (if g$ls/false$11718$RyrJs
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$11719$RyrJs)
                               (if (g$for-all$5805$RyrJs
                                     g$valid-option?$11716$RyrJs
                                     g$opt*$11719$RyrJs)
                                 (begin
                                   '#f
                                   (g$file-options-spec$8231$RyrJs
                                     (g$map$5807$RyrJs
                                       g$id->sym$9324$RyrJs
                                       g$opt*$11719$RyrJs)))
                                 '#f)))
                            g$ls/false$11718$RyrJs))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$11720$RyrJs)
                         (g$bless$9649$RyrJs
                           (list
                             'quote
                             (g$file-options-spec$8231$RyrJs
                               (g$map$5807$RyrJs
                                 g$id->sym$9324$RyrJs
                                 g$opt*$11720$RyrJs))))))
                      g$ls/false$11718$RyrJs)
                    (g$syntax-violation$9805$RyrJs
                      '#f
                      '"invalid syntax"
                      g$t$11717$RyrJs))))
               (g$syntax-dispatch$9686$RyrJs
                 g$t$11717$RyrJs
                 '(_ . each-any)))))
           g$x$11715$RyrJs)))))
   (g$symbol-macro$9695$RyrJs
     g$symbol-macro$13285$RyrJs
     (case-lambda
       ((g$x$11722$RyrJs g$set$11723$RyrJs)
        ((case-lambda
           ((g$t$11724$RyrJs)
            ((case-lambda
               ((g$ls/false$11725$RyrJs)
                (if (if g$ls/false$11725$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$11726$RyrJs)
                             (if (g$id?$9323$RyrJs g$name$11726$RyrJs)
                               (begin
                                 '#f
                                 (g$memq$5799$RyrJs
                                   (g$id->sym$9324$RyrJs
                                     g$name$11726$RyrJs)
                                   g$set$11723$RyrJs))
                               '#f)))
                          g$ls/false$11725$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$11727$RyrJs)
                       (g$bless$9649$RyrJs
                         (list 'quote g$name$11727$RyrJs))))
                    g$ls/false$11725$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$11724$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$11724$RyrJs '(_ any)))))
         g$x$11722$RyrJs))))
   (g$macro-transformer$9696$RyrJs
     g$macro-transformer$13286$RyrJs
     (case-lambda
       ((g$x$11728$RyrJs)
        (if (g$procedure?$6458$RyrJs g$x$11728$RyrJs)
          g$x$11728$RyrJs
          (if (g$symbol?$6456$RyrJs g$x$11728$RyrJs)
            ((case-lambda
               ((g$t$11729$RyrJs)
                (if (eqv? g$t$11729$RyrJs 'define-record-type)
                  g$define-record-type-macro$9680$RyrJs
                  (if (eqv? g$t$11729$RyrJs 'define-struct)
                    g$define-struct-macro$9679$RyrJs
                    (if (eqv? g$t$11729$RyrJs 'include)
                      g$include-macro$9674$RyrJs
                      (if (eqv? g$t$11729$RyrJs 'cond)
                        g$cond-macro$9672$RyrJs
                        (if (eqv? g$t$11729$RyrJs 'let)
                          g$let-macro$9652$RyrJs
                          (if (eqv? g$t$11729$RyrJs 'do)
                            g$do-macro$9668$RyrJs
                            (if (eqv? g$t$11729$RyrJs 'or)
                              g$or-macro$9670$RyrJs
                              (if (eqv? g$t$11729$RyrJs 'and)
                                g$and-macro$9671$RyrJs
                                (if (eqv? g$t$11729$RyrJs 'let*)
                                  g$let*-macro$9669$RyrJs
                                  (if (eqv? g$t$11729$RyrJs 'let-values)
                                    g$let-values-macro$9653$RyrJs
                                    (if (eqv?
                                          g$t$11729$RyrJs
                                          'let*-values)
                                      g$let*-values-macro$9654$RyrJs
                                      (if (eqv?
                                            g$t$11729$RyrJs
                                            'syntax-rules)
                                        g$syntax-rules-macro$9676$RyrJs
                                        (if (eqv?
                                              g$t$11729$RyrJs
                                              'quasiquote)
                                          g$quasiquote-macro$9677$RyrJs
                                          (if (eqv?
                                                g$t$11729$RyrJs
                                                'quasisyntax)
                                            g$quasisyntax-macro$9678$RyrJs
                                            (if (eqv?
                                                  g$t$11729$RyrJs
                                                  'with-syntax)
                                              g$with-syntax-macro$9650$RyrJs
                                              (if (eqv?
                                                    g$t$11729$RyrJs
                                                    'when)
                                                g$when-macro$9642$RyrJs
                                                (if (eqv?
                                                      g$t$11729$RyrJs
                                                      'unless)
                                                  g$unless-macro$9643$RyrJs
                                                  (if (eqv?
                                                        g$t$11729$RyrJs
                                                        'case)
                                                    g$case-macro$9645$RyrJs
                                                    (if (eqv?
                                                          g$t$11729$RyrJs
                                                          'identifier-syntax)
                                                      g$identifier-syntax-macro$9667$RyrJs
                                                      (if (eqv?
                                                            g$t$11729$RyrJs
                                                            'time)
                                                        g$time-macro$9663$RyrJs
                                                        (if (eqv?
                                                              g$t$11729$RyrJs
                                                              'delay)
                                                          g$delay-macro$9664$RyrJs
                                                          (if (eqv?
                                                                g$t$11729$RyrJs
                                                                'assert)
                                                            g$assert-macro$9665$RyrJs
                                                            (if (eqv?
                                                                  g$t$11729$RyrJs
                                                                  'endianness)
                                                              g$endianness-macro$9666$RyrJs
                                                              (if (eqv?
                                                                    g$t$11729$RyrJs
                                                                    'guard)
                                                                g$guard-macro$9661$RyrJs
                                                                (if (eqv?
                                                                      g$t$11729$RyrJs
                                                                      'define-enumeration)
                                                                  g$define-enumeration-macro$9662$RyrJs
                                                                  (if (eqv?
                                                                        g$t$11729$RyrJs
                                                                        'trace-lambda)
                                                                    g$trace-lambda-macro$9655$RyrJs
                                                                    (if (eqv?
                                                                          g$t$11729$RyrJs
                                                                          'trace-define)
                                                                      g$trace-define-macro$9656$RyrJs
                                                                      (if (eqv?
                                                                            g$t$11729$RyrJs
                                                                            'trace-define-syntax)
                                                                        g$trace-define-syntax-macro$9657$RyrJs
                                                                        (if (eqv?
                                                                              g$t$11729$RyrJs
                                                                              'trace-let-syntax)
                                                                          g$trace-let-syntax-macro$9659$RyrJs
                                                                          (if (eqv?
                                                                                g$t$11729$RyrJs
                                                                                'trace-letrec-syntax)
                                                                            g$trace-letrec-syntax-macro$9660$RyrJs
                                                                            (if (eqv?
                                                                                  g$t$11729$RyrJs
                                                                                  'define-condition-type)
                                                                              g$define-condition-type-macro$9681$RyrJs
                                                                              (if (eqv?
                                                                                    g$t$11729$RyrJs
                                                                                    'parameterize)
                                                                                g$parameterize-macro$9683$RyrJs
                                                                                (if (eqv?
                                                                                      g$t$11729$RyrJs
                                                                                      'include-into)
                                                                                  g$include-into-macro$9675$RyrJs
                                                                                  (if (eqv?
                                                                                        g$t$11729$RyrJs
                                                                                        'eol-style)
                                                                                    (case-lambda
                                                                                      ((g$x$11730$RyrJs)
                                                                                       (g$symbol-macro$9695$RyrJs
                                                                                         g$x$11730$RyrJs
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (eqv?
                                                                                          g$t$11729$RyrJs
                                                                                          'error-handling-mode)
                                                                                      (case-lambda
                                                                                        ((g$x$11731$RyrJs)
                                                                                         (g$symbol-macro$9695$RyrJs
                                                                                           g$x$11731$RyrJs
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (eqv?
                                                                                            g$t$11729$RyrJs
                                                                                            'buffer-mode)
                                                                                        (case-lambda
                                                                                          ((g$x$11732$RyrJs)
                                                                                           (g$symbol-macro$9695$RyrJs
                                                                                             g$x$11732$RyrJs
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (eqv?
                                                                                              g$t$11729$RyrJs
                                                                                              'file-options)
                                                                                          g$file-options-macro$9694$RyrJs
                                                                                          (if (g$memv$5800$RyrJs
                                                                                                g$t$11729$RyrJs
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$9682$RyrJs
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$11728$RyrJs)))))))))))))))))))))))))))))))))))))))))
             g$x$11728$RyrJs)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$11728$RyrJs))))))
   (g$local-macro-transformer$9697$RyrJs
     g$local-macro-transformer$13287$RyrJs
     (case-lambda ((g$x$11733$RyrJs) (car g$x$11733$RyrJs))))
   (g$do-macro-call$9698$RyrJs
     g$do-macro-call$13288$RyrJs
     (case-lambda
       ((g$transformer$11734$RyrJs g$expr$11735$RyrJs g$r$11736$RyrJs)
        (letrec* ((g$return$11737$RyrJs
                    (case-lambda
                      ((g$x$11745$RyrJs)
                       (begin
                         ((letrec ((g$f$11746$RyrJs
                                     (case-lambda
                                       ((g$x$11747$RyrJs)
                                        (if (not (g$stx?$9295$RyrJs
                                                   g$x$11747$RyrJs))
                                          (if (pair? g$x$11747$RyrJs)
                                            (begin
                                              (g$f$11746$RyrJs
                                                (car g$x$11747$RyrJs))
                                              (g$f$11746$RyrJs
                                                (cdr g$x$11747$RyrJs)))
                                            (if (g$vector?$6454$RyrJs
                                                  g$x$11747$RyrJs)
                                              (g$vector-for-each$6517$RyrJs
                                                g$f$11746$RyrJs
                                                g$x$11747$RyrJs)
                                              (if (g$symbol?$6456$RyrJs
                                                    g$x$11747$RyrJs)
                                                (g$syntax-violation$9805$RyrJs
                                                  '#f
                                                  '"raw symbol encountered in output of macro"
                                                  g$expr$11735$RyrJs
                                                  g$x$11747$RyrJs)
                                                (void))))
                                          (void))))))
                            g$f$11746$RyrJs)
                          g$x$11745$RyrJs)
                         (g$add-mark$9312$RyrJs
                           (g$gen-mark$9307$RyrJs)
                           g$x$11745$RyrJs
                           g$expr$11735$RyrJs))))))
          ((case-lambda
             ((g$x$11738$RyrJs)
              (if (g$procedure?$6458$RyrJs g$x$11738$RyrJs)
                (g$return$11737$RyrJs
                  (g$x$11738$RyrJs
                    (case-lambda
                      ((g$id$11739$RyrJs)
                       (begin
                         (if (not (g$id?$9323$RyrJs g$id$11739$RyrJs))
                           (assertion-violation
                             'rho
                             '"not an identifier"
                             g$id$11739$RyrJs)
                           (void))
                         ((case-lambda
                            ((g$label$11740$RyrJs)
                             ((case-lambda
                                ((g$binding$11741$RyrJs)
                                 ((case-lambda
                                    ((g$t$11742$RyrJs)
                                     (if (eqv?
                                           g$t$11742$RyrJs
                                           'local-ctv)
                                       (g$cadr$6465$RyrJs
                                         g$binding$11741$RyrJs)
                                       (if (eqv?
                                             g$t$11742$RyrJs
                                             'global-ctv)
                                         ((case-lambda
                                            ((g$lib$11743$RyrJs
                                               g$loc$11744$RyrJs)
                                             (begin
                                               (g$visit-library$9063$RyrJs
                                                 g$lib$11743$RyrJs)
                                               (symbol-value
                                                 g$loc$11744$RyrJs))))
                                          (g$cadr$6465$RyrJs
                                            g$binding$11741$RyrJs)
                                          (g$cddr$6467$RyrJs
                                            g$binding$11741$RyrJs))
                                         '#f))))
                                  (car g$binding$11741$RyrJs))))
                              (g$label->binding$9338$RyrJs
                                g$label$11740$RyrJs
                                g$r$11736$RyrJs))))
                          (g$id->label$9336$RyrJs
                            g$id$11739$RyrJs)))))))
                (g$return$11737$RyrJs g$x$11738$RyrJs))))
           (g$transformer$11734$RyrJs
             (g$add-mark$9312$RyrJs
               g$anti-mark$9308$RyrJs
               g$expr$11735$RyrJs
               '#f)))))))
   (g$chi-macro$9699$RyrJs
     g$chi-macro$13289$RyrJs
     (case-lambda
       ((g$p$11748$RyrJs g$e$11749$RyrJs g$r$11750$RyrJs)
        (g$do-macro-call$9698$RyrJs
          (g$macro-transformer$9696$RyrJs g$p$11748$RyrJs)
          g$e$11749$RyrJs
          g$r$11750$RyrJs))))
   (g$chi-local-macro$9700$RyrJs
     g$chi-local-macro$13290$RyrJs
     (case-lambda
       ((g$p$11751$RyrJs g$e$11752$RyrJs g$r$11753$RyrJs)
        (g$do-macro-call$9698$RyrJs
          (g$local-macro-transformer$9697$RyrJs g$p$11751$RyrJs)
          g$e$11752$RyrJs
          g$r$11753$RyrJs))))
   (g$chi-global-macro$9701$RyrJs
     g$chi-global-macro$13291$RyrJs
     (case-lambda
       ((g$p$11754$RyrJs g$e$11755$RyrJs g$r$11756$RyrJs)
        ((case-lambda
           ((g$lib$11757$RyrJs g$loc$11758$RyrJs)
            (begin
              (g$visit-library$9063$RyrJs g$lib$11757$RyrJs)
              ((case-lambda
                 ((g$x$11759$RyrJs)
                  ((case-lambda
                     ((g$transformer$11760$RyrJs)
                      (g$do-macro-call$9698$RyrJs
                        g$transformer$11760$RyrJs
                        g$e$11755$RyrJs
                        g$r$11756$RyrJs)))
                   (if (g$procedure?$6458$RyrJs g$x$11759$RyrJs)
                     g$x$11759$RyrJs
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$11759$RyrJs)))))
               (symbol-value g$loc$11758$RyrJs)))))
         (car g$p$11754$RyrJs)
         (cdr g$p$11754$RyrJs)))))
   (g$chi-expr*$9702$RyrJs
     g$chi-expr*$13292$RyrJs
     (case-lambda
       ((g$e*$11761$RyrJs g$r$11762$RyrJs g$mr$11763$RyrJs)
        (if (null? g$e*$11761$RyrJs)
          '()
          ((case-lambda
             ((g$e$11764$RyrJs)
              (cons
                g$e$11764$RyrJs
                (g$chi-expr*$9702$RyrJs
                  (cdr g$e*$11761$RyrJs)
                  g$r$11762$RyrJs
                  g$mr$11763$RyrJs))))
           (g$chi-expr$9704$RyrJs
             (car g$e*$11761$RyrJs)
             g$r$11762$RyrJs
             g$mr$11763$RyrJs))))))
   (g$chi-application$9703$RyrJs
     g$chi-application$13293$RyrJs
     (case-lambda
       ((g$e$11765$RyrJs g$r$11766$RyrJs g$mr$11767$RyrJs)
        ((case-lambda
           ((g$t$11768$RyrJs)
            ((case-lambda
               ((g$ls/false$11769$RyrJs)
                (if g$ls/false$11769$RyrJs
                  (apply
                    (case-lambda
                      ((g$rator$11770$RyrJs g$rands$11771$RyrJs)
                       ((case-lambda
                          ((g$rator$11772$RyrJs)
                           (cons
                             g$rator$11772$RyrJs
                             (g$chi-expr*$9702$RyrJs
                               g$rands$11771$RyrJs
                               g$r$11766$RyrJs
                               g$mr$11767$RyrJs))))
                        (g$chi-expr$9704$RyrJs
                          g$rator$11770$RyrJs
                          g$r$11766$RyrJs
                          g$mr$11767$RyrJs))))
                    g$ls/false$11769$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$11768$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$11768$RyrJs
               '(any . each-any)))))
         g$e$11765$RyrJs))))
   (g$chi-expr$9704$RyrJs
     g$chi-expr$13294$RyrJs
     (case-lambda
       ((g$e$11773$RyrJs g$r$11774$RyrJs g$mr$11775$RyrJs)
        (call-with-values
          (case-lambda
            (()
             (g$syntax-type$9343$RyrJs
               g$e$11773$RyrJs
               g$r$11774$RyrJs)))
          (case-lambda
            ((g$type$11779$RyrJs g$value$11780$RyrJs g$kwd$11781$RyrJs)
             ((case-lambda
                ((g$kwd$11782$RyrJs
                   g$value$11783$RyrJs
                   g$type$11784$RyrJs)
                 ((case-lambda
                    ((g$t$11785$RyrJs)
                     (if (eqv? g$t$11785$RyrJs 'core-macro)
                       ((case-lambda
                          ((g$transformer$11786$RyrJs)
                           (g$transformer$11786$RyrJs
                             g$e$11773$RyrJs
                             g$r$11774$RyrJs
                             g$mr$11775$RyrJs)))
                        (g$core-macro-transformer$9693$RyrJs
                          g$value$11783$RyrJs))
                       (if (eqv? g$t$11785$RyrJs 'global)
                         ((case-lambda
                            ((g$lib$11787$RyrJs)
                             ((case-lambda
                                ((g$loc$11788$RyrJs)
                                 (begin
                                   ((g$inv-collector$9741$RyrJs)
                                    g$lib$11787$RyrJs)
                                   g$loc$11788$RyrJs)))
                              (cdr g$value$11783$RyrJs))))
                          (car g$value$11783$RyrJs))
                         (if (eqv? g$t$11785$RyrJs 'core-prim)
                           ((case-lambda
                              ((g$name$11789$RyrJs)
                               (list 'primitive g$name$11789$RyrJs)))
                            g$value$11783$RyrJs)
                           (if (eqv? g$t$11785$RyrJs 'call)
                             (g$chi-application$9703$RyrJs
                               g$e$11773$RyrJs
                               g$r$11774$RyrJs
                               g$mr$11775$RyrJs)
                             (if (eqv? g$t$11785$RyrJs 'lexical)
                               ((case-lambda
                                  ((g$lex$11790$RyrJs)
                                   g$lex$11790$RyrJs))
                                (g$lexical-var$9630$RyrJs
                                  g$value$11783$RyrJs))
                               (if (g$memv$5800$RyrJs
                                     g$t$11785$RyrJs
                                     '(global-macro global-macro!))
                                 (g$chi-expr$9704$RyrJs
                                   (g$chi-global-macro$9701$RyrJs
                                     g$value$11783$RyrJs
                                     g$e$11773$RyrJs
                                     g$r$11774$RyrJs)
                                   g$r$11774$RyrJs
                                   g$mr$11775$RyrJs)
                                 (if (g$memv$5800$RyrJs
                                       g$t$11785$RyrJs
                                       '(local-macro local-macro!))
                                   (g$chi-expr$9704$RyrJs
                                     (g$chi-local-macro$9700$RyrJs
                                       g$value$11783$RyrJs
                                       g$e$11773$RyrJs
                                       g$r$11774$RyrJs)
                                     g$r$11774$RyrJs
                                     g$mr$11775$RyrJs)
                                   (if (g$memv$5800$RyrJs
                                         g$t$11785$RyrJs
                                         '(macro macro!))
                                     (g$chi-expr$9704$RyrJs
                                       (g$chi-macro$9699$RyrJs
                                         g$value$11783$RyrJs
                                         g$e$11773$RyrJs
                                         g$r$11774$RyrJs)
                                       g$r$11774$RyrJs
                                       g$mr$11775$RyrJs)
                                     (if (eqv?
                                           g$t$11785$RyrJs
                                           'constant)
                                       ((case-lambda
                                          ((g$datum$11791$RyrJs)
                                           (list
                                             'quote
                                             g$datum$11791$RyrJs)))
                                        g$value$11783$RyrJs)
                                       (if (eqv? g$t$11785$RyrJs 'set!)
                                         (g$chi-set!$9705$RyrJs
                                           g$e$11773$RyrJs
                                           g$r$11774$RyrJs
                                           g$mr$11775$RyrJs)
                                         (if (eqv?
                                               g$t$11785$RyrJs
                                               'begin)
                                           ((case-lambda
                                              ((g$t$11792$RyrJs)
                                               ((case-lambda
                                                  ((g$ls/false$11793$RyrJs)
                                                   (if g$ls/false$11793$RyrJs
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$11794$RyrJs
                                                            g$x*$11795$RyrJs)
                                                          (g$build-sequence$9248$RyrJs
                                                            '#f
                                                            (g$chi-expr*$9702$RyrJs
                                                              (cons
                                                                g$x$11794$RyrJs
                                                                g$x*$11795$RyrJs)
                                                              g$r$11774$RyrJs
                                                              g$mr$11775$RyrJs))))
                                                       g$ls/false$11793$RyrJs)
                                                     (g$syntax-violation$9805$RyrJs
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$11792$RyrJs))))
                                                (g$syntax-dispatch$9686$RyrJs
                                                  g$t$11792$RyrJs
                                                  '(_ any
                                                      .
                                                      each-any)))))
                                            g$e$11773$RyrJs)
                                           (if (g$memv$5800$RyrJs
                                                 g$t$11785$RyrJs
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$11796$RyrJs)
                                                 ((case-lambda
                                                    ((g$ls/false$11797$RyrJs)
                                                     (if (if g$ls/false$11797$RyrJs
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$11798$RyrJs
                                                                    g$xrhs*$11799$RyrJs
                                                                    g$xbody$11800$RyrJs
                                                                    g$xbody*$11801$RyrJs)
                                                                  (if (not (g$valid-bound-ids?$9328$RyrJs
                                                                             g$xlhs*$11798$RyrJs))
                                                                    (g$syntax-violation$9805$RyrJs
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$11773$RyrJs)
                                                                    (void))))
                                                               g$ls/false$11797$RyrJs))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$11802$RyrJs
                                                              g$xrhs*$11803$RyrJs
                                                              g$xbody$11804$RyrJs
                                                              g$xbody*$11805$RyrJs)
                                                            ((case-lambda
                                                               ((g$xlab*$11806$RyrJs)
                                                                ((case-lambda
                                                                   ((g$xrib$11807$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$xb*$11808$RyrJs)
                                                                        (g$build-sequence$9248$RyrJs
                                                                          '#f
                                                                          (g$chi-expr*$9702$RyrJs
                                                                            (g$map$5807$RyrJs
                                                                              (case-lambda
                                                                                ((g$x$11809$RyrJs)
                                                                                 (g$add-subst$9313$RyrJs
                                                                                   g$xrib$11807$RyrJs
                                                                                   g$x$11809$RyrJs)))
                                                                              (cons
                                                                                g$xbody$11804$RyrJs
                                                                                g$xbody*$11805$RyrJs))
                                                                            (append
                                                                              (g$map$5807$RyrJs
                                                                                cons
                                                                                g$xlab*$11806$RyrJs
                                                                                g$xb*$11808$RyrJs)
                                                                              g$r$11774$RyrJs)
                                                                            (append
                                                                              (g$map$5807$RyrJs
                                                                                cons
                                                                                g$xlab*$11806$RyrJs
                                                                                g$xb*$11808$RyrJs)
                                                                              g$mr$11775$RyrJs)))))
                                                                     (g$map$5807$RyrJs
                                                                       (case-lambda
                                                                         ((g$x$11810$RyrJs)
                                                                          (g$make-eval-transformer$9365$RyrJs
                                                                            (g$expand-transformer$9734$RyrJs
                                                                              (if (eq? g$type$11784$RyrJs
                                                                                       'let-syntax)
                                                                                g$x$11810$RyrJs
                                                                                (g$add-subst$9313$RyrJs
                                                                                  g$xrib$11807$RyrJs
                                                                                  g$x$11810$RyrJs))
                                                                              g$mr$11775$RyrJs))))
                                                                       g$xrhs*$11803$RyrJs))))
                                                                 (g$make-full-rib$9289$RyrJs
                                                                   g$xlhs*$11802$RyrJs
                                                                   g$xlab*$11806$RyrJs))))
                                                             (g$map$5807$RyrJs
                                                               g$gen-label$9260$RyrJs
                                                               g$xlhs*$11802$RyrJs))))
                                                         g$ls/false$11797$RyrJs)
                                                       (g$syntax-violation$9805$RyrJs
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$11796$RyrJs))))
                                                  (g$syntax-dispatch$9686$RyrJs
                                                    g$t$11796$RyrJs
                                                    '(_ #(each
                                                          (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$11773$RyrJs)
                                             (if (eqv?
                                                   g$t$11785$RyrJs
                                                   'displaced-lexical)
                                               (g$syntax-violation$9805$RyrJs
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$11773$RyrJs)
                                               (if (eqv?
                                                     g$t$11785$RyrJs
                                                     'syntax)
                                                 (g$syntax-violation$9805$RyrJs
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$11773$RyrJs)
                                                 (if (g$memv$5800$RyrJs
                                                       g$t$11785$RyrJs
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$9805$RyrJs
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$11811$RyrJs)
                                                           (if (eqv?
                                                                 g$t$11811$RyrJs
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$11811$RyrJs
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$11811$RyrJs
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$11811$RyrJs
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$11811$RyrJs
                                                                         'import)
                                                                     '"an import declaration"
                                                                     (if (eqv?
                                                                           g$t$11811$RyrJs
                                                                           'export)
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$11784$RyrJs)
                                                       '" was found where an expression was expected")
                                                     g$e$11773$RyrJs)
                                                   (if (eqv?
                                                         g$t$11785$RyrJs
                                                         'mutable)
                                                     (g$syntax-violation$9805$RyrJs
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$11773$RyrJs)
                                                     (g$syntax-violation$9805$RyrJs
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$11773$RyrJs)))))))))))))))))))
                  g$type$11784$RyrJs)))
              g$kwd$11781$RyrJs
              g$value$11780$RyrJs
              g$type$11779$RyrJs)))))))
   (g$chi-set!$9705$RyrJs
     g$chi-set!$13295$RyrJs
     (case-lambda
       ((g$e$11812$RyrJs g$r$11813$RyrJs g$mr$11814$RyrJs)
        ((case-lambda
           ((g$t$11815$RyrJs)
            ((case-lambda
               ((g$ls/false$11816$RyrJs)
                (if (if g$ls/false$11816$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$11817$RyrJs g$v$11818$RyrJs)
                             (g$id?$9323$RyrJs g$x$11817$RyrJs)))
                          g$ls/false$11816$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$11819$RyrJs g$v$11820$RyrJs)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$9343$RyrJs
                              g$x$11819$RyrJs
                              g$r$11813$RyrJs)))
                         (case-lambda
                           ((g$type$11824$RyrJs
                              g$value$11825$RyrJs
                              g$kwd$11826$RyrJs)
                            ((case-lambda
                               ((g$kwd$11827$RyrJs
                                  g$value$11828$RyrJs
                                  g$type$11829$RyrJs)
                                ((case-lambda
                                   ((g$t$11830$RyrJs)
                                    (if (eqv? g$t$11830$RyrJs 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$9632$RyrJs
                                          g$value$11828$RyrJs
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$9630$RyrJs
                                            g$value$11828$RyrJs)
                                          (g$chi-expr$9704$RyrJs
                                            g$v$11820$RyrJs
                                            g$r$11813$RyrJs
                                            g$mr$11814$RyrJs)))
                                      (if (eqv?
                                            g$t$11830$RyrJs
                                            'core-prim)
                                        (g$syntax-violation$9805$RyrJs
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$11812$RyrJs)
                                        (if (eqv?
                                              g$t$11830$RyrJs
                                              'global)
                                          (g$syntax-violation$9805$RyrJs
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$11812$RyrJs)
                                          (if (eqv?
                                                g$t$11830$RyrJs
                                                'global-macro!)
                                            (g$chi-expr$9704$RyrJs
                                              (g$chi-global-macro$9701$RyrJs
                                                g$value$11828$RyrJs
                                                g$e$11812$RyrJs
                                                g$r$11813$RyrJs)
                                              g$r$11813$RyrJs
                                              g$mr$11814$RyrJs)
                                            (if (eqv?
                                                  g$t$11830$RyrJs
                                                  'local-macro!)
                                              (g$chi-expr$9704$RyrJs
                                                (g$chi-local-macro$9700$RyrJs
                                                  g$value$11828$RyrJs
                                                  g$e$11812$RyrJs
                                                  g$r$11813$RyrJs)
                                                g$r$11813$RyrJs
                                                g$mr$11814$RyrJs)
                                              (if (eqv?
                                                    g$t$11830$RyrJs
                                                    'mutable)
                                                (g$syntax-violation$9805$RyrJs
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$11812$RyrJs)
                                                (g$syntax-violation$9805$RyrJs
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$11812$RyrJs)))))))))
                                 g$type$11829$RyrJs)))
                             g$kwd$11826$RyrJs
                             g$value$11825$RyrJs
                             g$type$11824$RyrJs))))))
                    g$ls/false$11816$RyrJs)
                  (g$syntax-violation$9805$RyrJs
                    '#f
                    '"invalid syntax"
                    g$t$11815$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$11815$RyrJs
               '(_ any any)))))
         g$e$11812$RyrJs))))
   (g$verify-formals$9706$RyrJs
     g$verify-formals$13296$RyrJs
     (case-lambda
       ((g$fmls$11831$RyrJs g$stx$11832$RyrJs)
        ((case-lambda
           ((g$t$11833$RyrJs)
            ((case-lambda
               ((g$ls/false$11834$RyrJs)
                (if g$ls/false$11834$RyrJs
                  (apply
                    (case-lambda
                      ((g$x*$11835$RyrJs)
                       (if (not (g$valid-bound-ids?$9328$RyrJs
                                  g$x*$11835$RyrJs))
                         (g$invalid-fmls-error$9651$RyrJs
                           g$stx$11832$RyrJs
                           g$fmls$11831$RyrJs)
                         (void))))
                    g$ls/false$11834$RyrJs)
                  ((case-lambda
                     ((g$t$11836$RyrJs)
                      ((case-lambda
                         ((g$ls/false$11837$RyrJs)
                          (if g$ls/false$11837$RyrJs
                            (apply
                              (case-lambda
                                ((g$x*$11838$RyrJs g$x$11839$RyrJs)
                                 (if (not (g$valid-bound-ids?$9328$RyrJs
                                            (cons
                                              g$x$11839$RyrJs
                                              g$x*$11838$RyrJs)))
                                   (g$invalid-fmls-error$9651$RyrJs
                                     g$stx$11832$RyrJs
                                     g$fmls$11831$RyrJs)
                                   (void))))
                              g$ls/false$11837$RyrJs)
                            ((case-lambda
                               ((g$t$11840$RyrJs)
                                ((case-lambda
                                   ((g$ls/false$11841$RyrJs)
                                    (if g$ls/false$11841$RyrJs
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$stx$11832$RyrJs)))
                                        g$ls/false$11841$RyrJs)
                                      (g$syntax-violation$9805$RyrJs
                                        '#f
                                        '"invalid syntax"
                                        g$t$11840$RyrJs))))
                                 (g$syntax-dispatch$9686$RyrJs
                                   g$t$11840$RyrJs
                                   '_))))
                             g$t$11836$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$11836$RyrJs
                         '#(each+ any () any)))))
                   g$t$11833$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$11833$RyrJs 'each-any))))
         g$fmls$11831$RyrJs))))
   (g$chi-lambda-clause$9707$RyrJs
     g$chi-lambda-clause$13297$RyrJs
     (case-lambda
       ((g$stx$11842$RyrJs
          g$fmls$11843$RyrJs
          g$body*$11844$RyrJs
          g$r$11845$RyrJs
          g$mr$11846$RyrJs)
        ((case-lambda
           ((g$t$11847$RyrJs)
            ((case-lambda
               ((g$ls/false$11848$RyrJs)
                (if g$ls/false$11848$RyrJs
                  (apply
                    (case-lambda
                      ((g$x*$11849$RyrJs)
                       (begin
                         (g$verify-formals$9706$RyrJs
                           g$fmls$11843$RyrJs
                           g$stx$11842$RyrJs)
                         ((case-lambda
                            ((g$lex*$11850$RyrJs g$lab*$11851$RyrJs)
                             (values
                               g$lex*$11850$RyrJs
                               (g$chi-internal$9715$RyrJs
                                 (g$add-subst$9313$RyrJs
                                   (g$make-full-rib$9289$RyrJs
                                     g$x*$11849$RyrJs
                                     g$lab*$11851$RyrJs)
                                   g$body*$11844$RyrJs)
                                 (g$add-lexicals$9634$RyrJs
                                   g$lab*$11851$RyrJs
                                   g$lex*$11850$RyrJs
                                   g$r$11845$RyrJs)
                                 g$mr$11846$RyrJs))))
                          (g$map$5807$RyrJs
                            g$gen-lexical$9258$RyrJs
                            g$x*$11849$RyrJs)
                          (g$map$5807$RyrJs
                            g$gen-label$9260$RyrJs
                            g$x*$11849$RyrJs)))))
                    g$ls/false$11848$RyrJs)
                  ((case-lambda
                     ((g$t$11852$RyrJs)
                      ((case-lambda
                         ((g$ls/false$11853$RyrJs)
                          (if g$ls/false$11853$RyrJs
                            (apply
                              (case-lambda
                                ((g$x*$11854$RyrJs g$x$11855$RyrJs)
                                 (begin
                                   (g$verify-formals$9706$RyrJs
                                     g$fmls$11843$RyrJs
                                     g$stx$11842$RyrJs)
                                   ((case-lambda
                                      ((g$lex*$11856$RyrJs
                                         g$lab*$11857$RyrJs
                                         g$lex$11858$RyrJs
                                         g$lab$11859$RyrJs)
                                       (values
                                         (append
                                           g$lex*$11856$RyrJs
                                           g$lex$11858$RyrJs)
                                         (g$chi-internal$9715$RyrJs
                                           (g$add-subst$9313$RyrJs
                                             (g$make-full-rib$9289$RyrJs
                                               (cons
                                                 g$x$11855$RyrJs
                                                 g$x*$11854$RyrJs)
                                               (cons
                                                 g$lab$11859$RyrJs
                                                 g$lab*$11857$RyrJs))
                                             g$body*$11844$RyrJs)
                                           (g$add-lexicals$9634$RyrJs
                                             (cons
                                               g$lab$11859$RyrJs
                                               g$lab*$11857$RyrJs)
                                             (cons
                                               g$lex$11858$RyrJs
                                               g$lex*$11856$RyrJs)
                                             g$r$11845$RyrJs)
                                           g$mr$11846$RyrJs))))
                                    (g$map$5807$RyrJs
                                      g$gen-lexical$9258$RyrJs
                                      g$x*$11854$RyrJs)
                                    (g$map$5807$RyrJs
                                      g$gen-label$9260$RyrJs
                                      g$x*$11854$RyrJs)
                                    (g$gen-lexical$9258$RyrJs
                                      g$x$11855$RyrJs)
                                    (g$gen-label$9260$RyrJs
                                      g$x$11855$RyrJs)))))
                              g$ls/false$11853$RyrJs)
                            ((case-lambda
                               ((g$t$11860$RyrJs)
                                ((case-lambda
                                   ((g$ls/false$11861$RyrJs)
                                    (if g$ls/false$11861$RyrJs
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$9805$RyrJs
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$11843$RyrJs)))
                                        g$ls/false$11861$RyrJs)
                                      (g$syntax-violation$9805$RyrJs
                                        '#f
                                        '"invalid syntax"
                                        g$t$11860$RyrJs))))
                                 (g$syntax-dispatch$9686$RyrJs
                                   g$t$11860$RyrJs
                                   '_))))
                             g$t$11852$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$11852$RyrJs
                         '#(each+ any () any)))))
                   g$t$11847$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$11847$RyrJs 'each-any))))
         g$fmls$11843$RyrJs))))
   (g$chi-lambda-clause*$9708$RyrJs
     g$chi-lambda-clause*$13298$RyrJs
     (case-lambda
       ((g$stx$11862$RyrJs
          g$fmls*$11863$RyrJs
          g$body**$11864$RyrJs
          g$r$11865$RyrJs
          g$mr$11866$RyrJs)
        (if (null? g$fmls*$11863$RyrJs)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$9707$RyrJs
                 g$stx$11862$RyrJs
                 (car g$fmls*$11863$RyrJs)
                 (car g$body**$11864$RyrJs)
                 g$r$11865$RyrJs
                 g$mr$11866$RyrJs)))
            (case-lambda
              ((g$a$11869$RyrJs g$b$11870$RyrJs)
               ((case-lambda
                  ((g$b$11871$RyrJs g$a$11872$RyrJs)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$9708$RyrJs
                          g$stx$11862$RyrJs
                          (cdr g$fmls*$11863$RyrJs)
                          (cdr g$body**$11864$RyrJs)
                          g$r$11865$RyrJs
                          g$mr$11866$RyrJs)))
                     (case-lambda
                       ((g$a*$11875$RyrJs g$b*$11876$RyrJs)
                        ((case-lambda
                           ((g$b*$11877$RyrJs g$a*$11878$RyrJs)
                            (values
                              (cons g$a$11872$RyrJs g$a*$11878$RyrJs)
                              (cons g$b$11871$RyrJs g$b*$11877$RyrJs))))
                         g$b*$11876$RyrJs
                         g$a*$11875$RyrJs))))))
                g$b$11870$RyrJs
                g$a$11869$RyrJs))))))))
   (g$chi-defun$9709$RyrJs
     g$chi-defun$13299$RyrJs
     (case-lambda
       ((g$x$11879$RyrJs g$r$11880$RyrJs g$mr$11881$RyrJs)
        ((case-lambda
           ((g$fmls$11882$RyrJs g$body*$11883$RyrJs)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$9707$RyrJs
                   g$fmls$11882$RyrJs
                   g$fmls$11882$RyrJs
                   g$body*$11883$RyrJs
                   g$r$11880$RyrJs
                   g$mr$11881$RyrJs)))
              (case-lambda
                ((g$fmls$11886$RyrJs g$body$11887$RyrJs)
                 ((case-lambda
                    ((g$body$11888$RyrJs g$fmls$11889$RyrJs)
                     (g$build-lambda$9245$RyrJs
                       '#f
                       g$fmls$11889$RyrJs
                       g$body$11888$RyrJs)))
                  g$body$11887$RyrJs
                  g$fmls$11886$RyrJs))))))
         (car g$x$11879$RyrJs)
         (cdr g$x$11879$RyrJs)))))
   (g$chi-rhs$9710$RyrJs
     g$chi-rhs$13300$RyrJs
     (case-lambda
       ((g$rhs$11890$RyrJs g$r$11891$RyrJs g$mr$11892$RyrJs)
        ((case-lambda
           ((g$t$11893$RyrJs)
            (if (eqv? g$t$11893$RyrJs 'defun)
              (g$chi-defun$9709$RyrJs
                (cdr g$rhs$11890$RyrJs)
                g$r$11891$RyrJs
                g$mr$11892$RyrJs)
              (if (eqv? g$t$11893$RyrJs 'expr)
                ((case-lambda
                   ((g$expr$11894$RyrJs)
                    (g$chi-expr$9704$RyrJs
                      g$expr$11894$RyrJs
                      g$r$11891$RyrJs
                      g$mr$11892$RyrJs)))
                 (cdr g$rhs$11890$RyrJs))
                (if (eqv? g$t$11893$RyrJs 'top-expr)
                  ((case-lambda
                     ((g$expr$11895$RyrJs)
                      (g$build-sequence$9248$RyrJs
                        '#f
                        (list
                          (g$chi-expr$9704$RyrJs
                            g$expr$11895$RyrJs
                            g$r$11891$RyrJs
                            g$mr$11892$RyrJs)
                          (g$build-void$9249$RyrJs)))))
                   (cdr g$rhs$11890$RyrJs))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$11890$RyrJs))))))
         (car g$rhs$11890$RyrJs)))))
   (g$expand-interaction-rhs*/init*$9711$RyrJs
     g$expand-interaction-rhs*/init*$13301$RyrJs
     (case-lambda
       ((g$lhs*$11896$RyrJs
          g$rhs*$11897$RyrJs
          g$init*$11898$RyrJs
          g$r$11899$RyrJs
          g$mr$11900$RyrJs)
        ((letrec ((g$f$11901$RyrJs
                    (case-lambda
                      ((g$lhs*$11902$RyrJs g$rhs*$11903$RyrJs)
                       (if (null? g$lhs*$11902$RyrJs)
                         (g$map$5807$RyrJs
                           (case-lambda
                             ((g$x$11904$RyrJs)
                              (g$chi-expr$9704$RyrJs
                                g$x$11904$RyrJs
                                g$r$11899$RyrJs
                                g$mr$11900$RyrJs)))
                           g$init*$11898$RyrJs)
                         ((case-lambda
                            ((g$lhs$11905$RyrJs g$rhs$11906$RyrJs)
                             ((case-lambda
                                ((g$t$11907$RyrJs)
                                 (if (eqv? g$t$11907$RyrJs 'defun)
                                   ((case-lambda
                                      ((g$rhs$11908$RyrJs)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$11905$RyrJs
                                           g$rhs$11908$RyrJs)
                                         (g$f$11901$RyrJs
                                           (cdr g$lhs*$11902$RyrJs)
                                           (cdr g$rhs*$11903$RyrJs)))))
                                    (g$chi-defun$9709$RyrJs
                                      (cdr g$rhs$11906$RyrJs)
                                      g$r$11899$RyrJs
                                      g$mr$11900$RyrJs))
                                   (if (eqv? g$t$11907$RyrJs 'expr)
                                     ((case-lambda
                                        ((g$rhs$11909$RyrJs)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$11905$RyrJs
                                             g$rhs$11909$RyrJs)
                                           (g$f$11901$RyrJs
                                             (cdr g$lhs*$11902$RyrJs)
                                             (cdr g$rhs*$11903$RyrJs)))))
                                      (g$chi-expr$9704$RyrJs
                                        (cdr g$rhs$11906$RyrJs)
                                        g$r$11899$RyrJs
                                        g$mr$11900$RyrJs))
                                     (if (eqv?
                                           g$t$11907$RyrJs
                                           'top-expr)
                                       ((case-lambda
                                          ((g$e$11910$RyrJs)
                                           (cons
                                             g$e$11910$RyrJs
                                             (g$f$11901$RyrJs
                                               (cdr g$lhs*$11902$RyrJs)
                                               (cdr g$rhs*$11903$RyrJs)))))
                                        (g$chi-expr$9704$RyrJs
                                          (cdr g$rhs$11906$RyrJs)
                                          g$r$11899$RyrJs
                                          g$mr$11900$RyrJs))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$11906$RyrJs))))))
                              (car g$rhs$11906$RyrJs))))
                          (car g$lhs*$11902$RyrJs)
                          (car g$rhs*$11903$RyrJs)))))))
           g$f$11901$RyrJs)
         g$lhs*$11896$RyrJs
         g$rhs*$11897$RyrJs))))
   (g$chi-rhs*$9712$RyrJs
     g$chi-rhs*$13302$RyrJs
     (case-lambda
       ((g$rhs*$11911$RyrJs g$r$11912$RyrJs g$mr$11913$RyrJs)
        ((letrec ((g$f$11914$RyrJs
                    (case-lambda
                      ((g$ls$11915$RyrJs)
                       (if (null? g$ls$11915$RyrJs)
                         '()
                         ((case-lambda
                            ((g$a$11916$RyrJs)
                             (cons
                               g$a$11916$RyrJs
                               (g$f$11914$RyrJs
                                 (cdr g$ls$11915$RyrJs)))))
                          (g$chi-rhs$9710$RyrJs
                            (car g$ls$11915$RyrJs)
                            g$r$11912$RyrJs
                            g$mr$11913$RyrJs)))))))
           g$f$11914$RyrJs)
         g$rhs*$11911$RyrJs))))
   (g$find-bound=?$9713$RyrJs
     g$find-bound=?$13303$RyrJs
     (case-lambda
       ((g$x$11917$RyrJs g$lhs*$11918$RyrJs g$rhs*$11919$RyrJs)
        (if (null? g$lhs*$11918$RyrJs)
          '#f
          (if (g$bound-id=?$9326$RyrJs
                g$x$11917$RyrJs
                (car g$lhs*$11918$RyrJs))
            (car g$rhs*$11919$RyrJs)
            (g$find-bound=?$9713$RyrJs
              g$x$11917$RyrJs
              (cdr g$lhs*$11918$RyrJs)
              (cdr g$rhs*$11919$RyrJs)))))))
   (g$find-dups$9714$RyrJs
     g$find-dups$13304$RyrJs
     (case-lambda
       ((g$ls$11920$RyrJs)
        ((letrec ((g$f$11921$RyrJs
                    (case-lambda
                      ((g$ls$11922$RyrJs g$dups$11923$RyrJs)
                       (if (null? g$ls$11922$RyrJs)
                         g$dups$11923$RyrJs
                         ((case-lambda
                            ((g$t$11924$RyrJs)
                             (if g$t$11924$RyrJs
                               ((case-lambda
                                  ((g$x$11925$RyrJs)
                                   (g$f$11921$RyrJs
                                     (cdr g$ls$11922$RyrJs)
                                     (cons
                                       (list
                                         (car g$ls$11922$RyrJs)
                                         g$x$11925$RyrJs)
                                       g$dups$11923$RyrJs))))
                                g$t$11924$RyrJs)
                               (g$f$11921$RyrJs
                                 (cdr g$ls$11922$RyrJs)
                                 g$dups$11923$RyrJs))))
                          (g$find-bound=?$9713$RyrJs
                            (car g$ls$11922$RyrJs)
                            (cdr g$ls$11922$RyrJs)
                            (cdr g$ls$11922$RyrJs))))))))
           g$f$11921$RyrJs)
         g$ls$11920$RyrJs
         '()))))
   (g$chi-internal$9715$RyrJs
     g$chi-internal$13305$RyrJs
     (case-lambda
       ((g$e*$11926$RyrJs g$r$11927$RyrJs g$mr$11928$RyrJs)
        ((case-lambda
           ((g$rib$11929$RyrJs)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$9733$RyrJs
                   (g$map$5807$RyrJs
                     (case-lambda
                       ((g$x$11938$RyrJs)
                        (g$add-subst$9313$RyrJs
                          g$rib$11929$RyrJs
                          g$x$11938$RyrJs)))
                     (g$syntax->list$9322$RyrJs g$e*$11926$RyrJs))
                   g$r$11927$RyrJs
                   g$mr$11928$RyrJs
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$11929$RyrJs
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$11939$RyrJs
                   g$r$11940$RyrJs
                   g$mr$11941$RyrJs
                   g$lex*$11942$RyrJs
                   g$rhs*$11943$RyrJs
                   g$mod**$11944$RyrJs
                   g$kwd*$11945$RyrJs
                   g$_exp*$11946$RyrJs)
                 ((case-lambda
                    ((g$_exp*$11947$RyrJs
                       g$kwd*$11948$RyrJs
                       g$mod**$11949$RyrJs
                       g$rhs*$11950$RyrJs
                       g$lex*$11951$RyrJs
                       g$mr$11952$RyrJs
                       g$r$11953$RyrJs
                       g$e*$11954$RyrJs)
                     (begin
                       (if (null? g$e*$11954$RyrJs)
                         (g$syntax-violation$9805$RyrJs
                           '#f
                           '"no expression in body"
                           g$e*$11954$RyrJs)
                         (void))
                       ((case-lambda
                          ((g$init*$11955$RyrJs)
                           ((case-lambda
                              ((g$rhs*$11956$RyrJs)
                               (g$build-letrec*$9251$RyrJs
                                 '#f
                                 (g$reverse$6463$RyrJs
                                   g$lex*$11951$RyrJs)
                                 (g$reverse$6463$RyrJs
                                   g$rhs*$11956$RyrJs)
                                 (g$build-sequence$9248$RyrJs
                                   '#f
                                   g$init*$11955$RyrJs))))
                            (g$chi-rhs*$9712$RyrJs
                              g$rhs*$11950$RyrJs
                              g$r$11953$RyrJs
                              g$mr$11952$RyrJs))))
                        (g$chi-expr*$9702$RyrJs
                          (append
                            (apply
                              append
                              (g$reverse$6463$RyrJs
                                g$mod**$11949$RyrJs))
                            g$e*$11954$RyrJs)
                          g$r$11953$RyrJs
                          g$mr$11952$RyrJs)))))
                  g$_exp*$11946$RyrJs
                  g$kwd*$11945$RyrJs
                  g$mod**$11944$RyrJs
                  g$rhs*$11943$RyrJs
                  g$lex*$11942$RyrJs
                  g$mr$11941$RyrJs
                  g$r$11940$RyrJs
                  g$e*$11939$RyrJs))))))
         (g$make-empty-rib$9281$RyrJs)))))
   (g$parse-module$9716$RyrJs
     g$parse-module$13306$RyrJs
     (case-lambda
       ((g$e$11957$RyrJs)
        ((case-lambda
           ((g$t$11958$RyrJs)
            ((case-lambda
               ((g$ls/false$11959$RyrJs)
                (if g$ls/false$11959$RyrJs
                  (apply
                    (case-lambda
                      ((g$export*$11960$RyrJs g$b*$11961$RyrJs)
                       (begin
                         (if (not (g$for-all$5805$RyrJs
                                    g$id?$9323$RyrJs
                                    g$export*$11960$RyrJs))
                           (g$syntax-violation$9805$RyrJs
                             '#f
                             '"module exports must be identifiers"
                             g$e$11957$RyrJs)
                           (void))
                         (values
                           '#f
                           (g$list->vector$6451$RyrJs
                             g$export*$11960$RyrJs)
                           g$b*$11961$RyrJs))))
                    g$ls/false$11959$RyrJs)
                  ((case-lambda
                     ((g$t$11962$RyrJs)
                      ((case-lambda
                         ((g$ls/false$11963$RyrJs)
                          (if g$ls/false$11963$RyrJs
                            (apply
                              (case-lambda
                                ((g$name$11964$RyrJs
                                   g$export*$11965$RyrJs
                                   g$b*$11966$RyrJs)
                                 (begin
                                   (if (not (g$id?$9323$RyrJs
                                              g$name$11964$RyrJs))
                                     (g$syntax-violation$9805$RyrJs
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$11957$RyrJs)
                                     (void))
                                   (if (not (g$for-all$5805$RyrJs
                                              g$id?$9323$RyrJs
                                              g$export*$11965$RyrJs))
                                     (g$syntax-violation$9805$RyrJs
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$11957$RyrJs)
                                     (void))
                                   (values
                                     g$name$11964$RyrJs
                                     (g$list->vector$6451$RyrJs
                                       g$export*$11965$RyrJs)
                                     g$b*$11966$RyrJs))))
                              g$ls/false$11963$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$11962$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$11962$RyrJs
                         '(_ any each-any . each-any)))))
                   g$t$11958$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$11958$RyrJs
               '(_ each-any . each-any)))))
         g$e$11957$RyrJs))))
   (g$7981$9717$RyrJs
     g$7981$13307$RyrJs
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$7984$RyrJs
       '#t
       '#t
       '#((mutable first-mark)
          (mutable exp-id-vec)
          (mutable exp-lab-vec))))
   (g$7983$9718$RyrJs g$7983$13308$RyrJs '#f)
   (g$7982$9719$RyrJs
     g$7982$13309$RyrJs
     (make-record-constructor-descriptor
       g$7981$9717$RyrJs
       '#f
       g$7983$9718$RyrJs))
   (g$module-interface?$9722$RyrJs
     g$module-interface?$13310$RyrJs
     (record-predicate g$7981$9717$RyrJs))
   (g$make-module-interface$9723$RyrJs
     g$make-module-interface$13311$RyrJs
     (record-constructor g$7982$9719$RyrJs))
   (g$module-interface-first-mark$9724$RyrJs
     g$module-interface-first-mark$13312$RyrJs
     (record-accessor g$7981$9717$RyrJs '0))
   (g$module-interface-exp-id-vec$9725$RyrJs
     g$module-interface-exp-id-vec$13313$RyrJs
     (record-accessor g$7981$9717$RyrJs '1))
   (g$module-interface-exp-lab-vec$9726$RyrJs
     g$module-interface-exp-lab-vec$13314$RyrJs
     (record-accessor g$7981$9717$RyrJs '2))
   (g$set-module-interface-first-mark!$9727$RyrJs
     g$set-module-interface-first-mark!$13315$RyrJs
     (record-mutator g$7981$9717$RyrJs '0))
   (g$set-module-interface-exp-id-vec!$9728$RyrJs
     g$set-module-interface-exp-id-vec!$13316$RyrJs
     (record-mutator g$7981$9717$RyrJs '1))
   (g$set-module-interface-exp-lab-vec!$9729$RyrJs
     g$set-module-interface-exp-lab-vec!$13317$RyrJs
     (record-mutator g$7981$9717$RyrJs '2))
   (g$module-interface-exp-id*$9730$RyrJs
     g$module-interface-exp-id*$13318$RyrJs
     (case-lambda
       ((g$iface$11967$RyrJs g$id$11968$RyrJs)
        (letrec* ((g$diff-marks$11969$RyrJs
                    (case-lambda
                      ((g$ls$11973$RyrJs g$x$11974$RyrJs)
                       (begin
                         (if (null? g$ls$11973$RyrJs)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$11975$RyrJs)
                             (if (eq? g$a$11975$RyrJs g$x$11974$RyrJs)
                               '()
                               (cons
                                 g$a$11975$RyrJs
                                 (g$diff-marks$11969$RyrJs
                                   (cdr g$ls$11973$RyrJs)
                                   g$x$11974$RyrJs)))))
                          (car g$ls$11973$RyrJs)))))))
          ((case-lambda
             ((g$diff$11970$RyrJs g$id-vec$11971$RyrJs)
              (if (null? g$diff$11970$RyrJs)
                g$id-vec$11971$RyrJs
                (g$vector-map$6516$RyrJs
                  (case-lambda
                    ((g$x$11972$RyrJs)
                     (g$make-stx$9296$RyrJs
                       (g$stx-expr$9297$RyrJs g$x$11972$RyrJs)
                       (append
                         g$diff$11970$RyrJs
                         (g$stx-mark*$9298$RyrJs g$x$11972$RyrJs))
                       '()
                       '())))
                  g$id-vec$11971$RyrJs))))
           (g$diff-marks$11969$RyrJs
             (g$stx-mark*$9298$RyrJs g$id$11968$RyrJs)
             (g$module-interface-first-mark$9724$RyrJs
               g$iface$11967$RyrJs))
           (g$module-interface-exp-id-vec$9725$RyrJs
             g$iface$11967$RyrJs))))))
   (g$syntax-transpose$9731$RyrJs
     g$syntax-transpose$13319$RyrJs
     (case-lambda
       ((g$object$11976$RyrJs
          g$base-id$11977$RyrJs
          g$new-id$11978$RyrJs)
        (letrec* ((g$who$11979$RyrJs 'syntax-transpose)
                  (g$err$11980$RyrJs
                    (case-lambda
                      ((g$msg$12022$RyrJs . g$args$12023$RyrJs)
                       (apply
                         assertion-violation
                         g$who$11979$RyrJs
                         g$msg$12022$RyrJs
                         g$args$12023$RyrJs))))
                  (g$split$11981$RyrJs
                    (case-lambda
                      ((g$s*$12015$RyrJs)
                       (if (eq? (car g$s*$12015$RyrJs) 'shift)
                         (values (list 'shift) (cdr g$s*$12015$RyrJs))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$11981$RyrJs
                                (cdr g$s*$12015$RyrJs))))
                           (case-lambda
                             ((g$s1*$12018$RyrJs g$s2*$12019$RyrJs)
                              ((case-lambda
                                 ((g$s2*$12020$RyrJs g$s1*$12021$RyrJs)
                                  (values
                                    (cons
                                      (car g$s*$12015$RyrJs)
                                      g$s1*$12021$RyrJs)
                                    g$s2*$12020$RyrJs)))
                               g$s2*$12019$RyrJs
                               g$s1*$12018$RyrJs))))))))
                  (g$final$11982$RyrJs
                    (case-lambda
                      ((g$s*$12013$RyrJs)
                       (if ((case-lambda
                              ((g$t$12014$RyrJs)
                               (if g$t$12014$RyrJs
                                 g$t$12014$RyrJs
                                 (begin
                                   '#f
                                   (eq? (car g$s*$12013$RyrJs)
                                        'shift)))))
                            (null? g$s*$12013$RyrJs))
                         '()
                         (cons
                           (car g$s*$12013$RyrJs)
                           (g$final$11982$RyrJs
                             (cdr g$s*$12013$RyrJs)))))))
                  (g$diff$11983$RyrJs
                    (case-lambda
                      ((g$m$11993$RyrJs
                         g$m*$11994$RyrJs
                         g$s*$11995$RyrJs
                         g$ae*$11996$RyrJs)
                       (if (null? g$m*$11994$RyrJs)
                         (g$err$11980$RyrJs
                           '"unmatched identifiers"
                           g$base-id$11977$RyrJs
                           g$new-id$11978$RyrJs)
                         ((case-lambda
                            ((g$m1$11997$RyrJs)
                             (if (eq? g$m$11993$RyrJs g$m1$11997$RyrJs)
                               (values
                                 '()
                                 (g$final$11982$RyrJs g$s*$11995$RyrJs)
                                 '())
                               (call-with-values
                                 (case-lambda
                                   (()
                                    (g$split$11981$RyrJs
                                      g$s*$11995$RyrJs)))
                                 (case-lambda
                                   ((g$s1*$12000$RyrJs
                                      g$s2*$12001$RyrJs)
                                    ((case-lambda
                                       ((g$s2*$12002$RyrJs
                                          g$s1*$12003$RyrJs)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$diff$11983$RyrJs
                                               g$m$11993$RyrJs
                                               (cdr g$m*$11994$RyrJs)
                                               g$s2*$12002$RyrJs
                                               (cdr g$ae*$11996$RyrJs))))
                                          (case-lambda
                                            ((g$nm*$12007$RyrJs
                                               g$ns*$12008$RyrJs
                                               g$nae*$12009$RyrJs)
                                             ((case-lambda
                                                ((g$nae*$12010$RyrJs
                                                   g$ns*$12011$RyrJs
                                                   g$nm*$12012$RyrJs)
                                                 (values
                                                   (cons
                                                     g$m1$11997$RyrJs
                                                     g$nm*$12012$RyrJs)
                                                   (append
                                                     g$s1*$12003$RyrJs
                                                     g$ns*$12011$RyrJs)
                                                   (cons
                                                     (car g$ae*$11996$RyrJs)
                                                     g$nae*$12010$RyrJs))))
                                              g$nae*$12009$RyrJs
                                              g$ns*$12008$RyrJs
                                              g$nm*$12007$RyrJs))))))
                                     g$s2*$12001$RyrJs
                                     g$s1*$12000$RyrJs)))))))
                          (car g$m*$11994$RyrJs)))))))
          (begin
            (if (not (g$id?$9323$RyrJs g$base-id$11977$RyrJs))
              (g$err$11980$RyrJs
                '"not an identifier"
                g$base-id$11977$RyrJs)
              (void))
            (if (not (g$id?$9323$RyrJs g$new-id$11978$RyrJs))
              (g$err$11980$RyrJs
                '"not an identifier"
                g$new-id$11978$RyrJs)
              (void))
            (if (not (g$free-identifier=?$9796$RyrJs
                       g$base-id$11977$RyrJs
                       g$new-id$11978$RyrJs))
              (g$err$11980$RyrJs
                '"not the same identifier"
                g$base-id$11977$RyrJs
                g$new-id$11978$RyrJs)
              (void))
            (call-with-values
              (case-lambda
                (()
                 (g$diff$11983$RyrJs
                   (car (g$stx-mark*$9298$RyrJs g$base-id$11977$RyrJs))
                   (g$stx-mark*$9298$RyrJs g$new-id$11978$RyrJs)
                   (g$stx-subst*$9299$RyrJs g$new-id$11978$RyrJs)
                   (g$stx-ae*$9300$RyrJs g$new-id$11978$RyrJs))))
              (case-lambda
                ((g$m*$11987$RyrJs g$s*$11988$RyrJs g$ae*$11989$RyrJs)
                 ((case-lambda
                    ((g$ae*$11990$RyrJs
                       g$s*$11991$RyrJs
                       g$m*$11992$RyrJs)
                     (if (if (null? g$m*$11992$RyrJs)
                           (begin '#f (null? g$s*$11991$RyrJs))
                           '#f)
                       g$object$11976$RyrJs
                       (g$mkstx$9311$RyrJs
                         g$object$11976$RyrJs
                         g$m*$11992$RyrJs
                         g$s*$11991$RyrJs
                         g$ae*$11990$RyrJs))))
                  g$ae*$11989$RyrJs
                  g$s*$11988$RyrJs
                  g$m*$11987$RyrJs)))))))))
   (g$chi-internal-module$9732$RyrJs
     g$chi-internal-module$13320$RyrJs
     (case-lambda
       ((g$e$12024$RyrJs
          g$r$12025$RyrJs
          g$mr$12026$RyrJs
          g$lex*$12027$RyrJs
          g$rhs*$12028$RyrJs
          g$mod**$12029$RyrJs
          g$kwd*$12030$RyrJs)
        (call-with-values
          (case-lambda (() (g$parse-module$9716$RyrJs g$e$12024$RyrJs)))
          (case-lambda
            ((g$name$12034$RyrJs g$exp-id*$12035$RyrJs g$e*$12036$RyrJs)
             ((case-lambda
                ((g$e*$12037$RyrJs
                   g$exp-id*$12038$RyrJs
                   g$name$12039$RyrJs)
                 ((case-lambda
                    ((g$rib$12040$RyrJs)
                     ((case-lambda
                        ((g$e*$12041$RyrJs)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$9733$RyrJs
                                g$e*$12041$RyrJs
                                g$r$12025$RyrJs
                                g$mr$12026$RyrJs
                                g$lex*$12027$RyrJs
                                g$rhs*$12028$RyrJs
                                g$mod**$12029$RyrJs
                                g$kwd*$12030$RyrJs
                                '()
                                g$rib$12040$RyrJs
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$12050$RyrJs
                                g$r$12051$RyrJs
                                g$mr$12052$RyrJs
                                g$lex*$12053$RyrJs
                                g$rhs*$12054$RyrJs
                                g$mod**$12055$RyrJs
                                g$kwd*$12056$RyrJs
                                g$_exp*$12057$RyrJs)
                              ((case-lambda
                                 ((g$_exp*$12058$RyrJs
                                    g$kwd*$12059$RyrJs
                                    g$mod**$12060$RyrJs
                                    g$rhs*$12061$RyrJs
                                    g$lex*$12062$RyrJs
                                    g$mr$12063$RyrJs
                                    g$r$12064$RyrJs
                                    g$e*$12065$RyrJs)
                                  ((case-lambda
                                     ((g$exp-lab*$12066$RyrJs
                                        g$mod**$12067$RyrJs)
                                      (if (not g$name$12039$RyrJs)
                                        (values
                                          g$lex*$12062$RyrJs
                                          g$rhs*$12061$RyrJs
                                          g$exp-id*$12038$RyrJs
                                          g$exp-lab*$12066$RyrJs
                                          g$r$12064$RyrJs
                                          g$mr$12063$RyrJs
                                          g$mod**$12067$RyrJs
                                          g$kwd*$12059$RyrJs)
                                        ((case-lambda
                                           ((g$lab$12068$RyrJs
                                              g$iface$12069$RyrJs)
                                            (values
                                              g$lex*$12062$RyrJs
                                              g$rhs*$12061$RyrJs
                                              (vector
                                                g$name$12039$RyrJs)
                                              (vector g$lab$12068$RyrJs)
                                              (cons
                                                (cons
                                                  g$lab$12068$RyrJs
                                                  (cons
                                                    '$module
                                                    g$iface$12069$RyrJs))
                                                g$r$12064$RyrJs)
                                              (cons
                                                (cons
                                                  g$lab$12068$RyrJs
                                                  (cons
                                                    '$module
                                                    g$iface$12069$RyrJs))
                                                g$mr$12063$RyrJs)
                                              g$mod**$12067$RyrJs
                                              g$kwd*$12059$RyrJs)))
                                         (g$gen-label$9260$RyrJs
                                           'module)
                                         (g$make-module-interface$9723$RyrJs
                                           (car (g$stx-mark*$9298$RyrJs
                                                  g$name$12039$RyrJs))
                                           (g$vector-map$6516$RyrJs
                                             (case-lambda
                                               ((g$x$12070$RyrJs)
                                                (g$make-stx$9296$RyrJs
                                                  (g$stx-expr$9297$RyrJs
                                                    g$x$12070$RyrJs)
                                                  (g$stx-mark*$9298$RyrJs
                                                    g$x$12070$RyrJs)
                                                  '()
                                                  '())))
                                             g$exp-id*$12038$RyrJs)
                                           g$exp-lab*$12066$RyrJs)))))
                                   (g$vector-map$6516$RyrJs
                                     (case-lambda
                                       ((g$x$12071$RyrJs)
                                        ((case-lambda
                                           ((g$t$12072$RyrJs)
                                            (if g$t$12072$RyrJs
                                              g$t$12072$RyrJs
                                              (begin
                                                '#f
                                                (g$syntax-violation$9805$RyrJs
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$12071$RyrJs)))))
                                         (g$id->label$9336$RyrJs
                                           (g$make-stx$9296$RyrJs
                                             (g$id->sym$9324$RyrJs
                                               g$x$12071$RyrJs)
                                             (g$stx-mark*$9298$RyrJs
                                               g$x$12071$RyrJs)
                                             (list g$rib$12040$RyrJs)
                                             '())))))
                                     g$exp-id*$12038$RyrJs)
                                   (cons
                                     g$e*$12065$RyrJs
                                     g$mod**$12060$RyrJs))))
                               g$_exp*$12057$RyrJs
                               g$kwd*$12056$RyrJs
                               g$mod**$12055$RyrJs
                               g$rhs*$12054$RyrJs
                               g$lex*$12053$RyrJs
                               g$mr$12052$RyrJs
                               g$r$12051$RyrJs
                               g$e*$12050$RyrJs))))))
                      (g$map$5807$RyrJs
                        (case-lambda
                          ((g$x$12073$RyrJs)
                           (g$add-subst$9313$RyrJs
                             g$rib$12040$RyrJs
                             g$x$12073$RyrJs)))
                        (g$syntax->list$9322$RyrJs g$e*$12037$RyrJs)))))
                  (g$make-empty-rib$9281$RyrJs))))
              g$e*$12036$RyrJs
              g$exp-id*$12035$RyrJs
              g$name$12034$RyrJs)))))))
   (g$chi-body*$9733$RyrJs
     g$chi-body*$13321$RyrJs
     (case-lambda
       ((g$e*$12074$RyrJs
          g$r$12075$RyrJs
          g$mr$12076$RyrJs
          g$lex*$12077$RyrJs
          g$rhs*$12078$RyrJs
          g$mod**$12079$RyrJs
          g$kwd*$12080$RyrJs
          g$exp*$12081$RyrJs
          g$rib$12082$RyrJs
          g$mix?$12083$RyrJs
          g$sd?$12084$RyrJs)
        (if (null? g$e*$12074$RyrJs)
          (values
            g$e*$12074$RyrJs
            g$r$12075$RyrJs
            g$mr$12076$RyrJs
            g$lex*$12077$RyrJs
            g$rhs*$12078$RyrJs
            g$mod**$12079$RyrJs
            g$kwd*$12080$RyrJs
            g$exp*$12081$RyrJs)
          ((case-lambda
             ((g$e$12085$RyrJs)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$9343$RyrJs
                     g$e$12085$RyrJs
                     g$r$12075$RyrJs)))
                (case-lambda
                  ((g$type$12089$RyrJs
                     g$value$12090$RyrJs
                     g$kwd$12091$RyrJs)
                   ((case-lambda
                      ((g$kwd$12092$RyrJs
                         g$value$12093$RyrJs
                         g$type$12094$RyrJs)
                       ((case-lambda
                          ((g$kwd*$12095$RyrJs)
                           ((case-lambda
                              ((g$t$12096$RyrJs)
                               (if (eqv? g$t$12096$RyrJs 'define)
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$9626$RyrJs
                                        g$e$12085$RyrJs)))
                                   (case-lambda
                                     ((g$id$12099$RyrJs
                                        g$rhs$12100$RyrJs)
                                      ((case-lambda
                                         ((g$rhs$12101$RyrJs
                                            g$id$12102$RyrJs)
                                          (begin
                                            (if (g$bound-id-member?$9330$RyrJs
                                                  g$id$12102$RyrJs
                                                  g$kwd*$12095$RyrJs)
                                              (g$syntax-violation$9805$RyrJs
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$12085$RyrJs)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$9262$RyrJs
                                                   g$id$12102$RyrJs
                                                   g$rib$12082$RyrJs
                                                   g$sd?$12084$RyrJs)))
                                              (case-lambda
                                                ((g$lab$12105$RyrJs
                                                   g$lex$12106$RyrJs)
                                                 ((case-lambda
                                                    ((g$lex$12107$RyrJs
                                                       g$lab$12108$RyrJs)
                                                     (begin
                                                       (g$extend-rib!$9284$RyrJs
                                                         g$rib$12082$RyrJs
                                                         g$id$12102$RyrJs
                                                         g$lab$12108$RyrJs
                                                         g$sd?$12084$RyrJs)
                                                       (g$chi-body*$9733$RyrJs
                                                         (cdr g$e*$12074$RyrJs)
                                                         (g$add-lexical$9633$RyrJs
                                                           g$lab$12108$RyrJs
                                                           g$lex$12107$RyrJs
                                                           g$r$12075$RyrJs)
                                                         g$mr$12076$RyrJs
                                                         (cons
                                                           g$lex$12107$RyrJs
                                                           g$lex*$12077$RyrJs)
                                                         (cons
                                                           g$rhs$12101$RyrJs
                                                           g$rhs*$12078$RyrJs)
                                                         g$mod**$12079$RyrJs
                                                         g$kwd*$12095$RyrJs
                                                         g$exp*$12081$RyrJs
                                                         g$rib$12082$RyrJs
                                                         g$mix?$12083$RyrJs
                                                         g$sd?$12084$RyrJs))))
                                                  g$lex$12106$RyrJs
                                                  g$lab$12105$RyrJs)))))))
                                       g$rhs$12100$RyrJs
                                       g$id$12099$RyrJs))))
                                 (if (eqv?
                                       g$t$12096$RyrJs
                                       'define-syntax)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$9627$RyrJs
                                          g$e$12085$RyrJs)))
                                     (case-lambda
                                       ((g$id$12111$RyrJs
                                          g$rhs$12112$RyrJs)
                                        ((case-lambda
                                           ((g$rhs$12113$RyrJs
                                              g$id$12114$RyrJs)
                                            (begin
                                              (if (g$bound-id-member?$9330$RyrJs
                                                    g$id$12114$RyrJs
                                                    g$kwd*$12095$RyrJs)
                                                (g$syntax-violation$9805$RyrJs
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$12085$RyrJs)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$12115$RyrJs)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$12116$RyrJs)
                                                      (begin
                                                        (g$extend-rib!$9284$RyrJs
                                                          g$rib$12082$RyrJs
                                                          g$id$12114$RyrJs
                                                          g$lab$12115$RyrJs
                                                          g$sd?$12084$RyrJs)
                                                        ((case-lambda
                                                           ((g$b$12117$RyrJs)
                                                            (g$chi-body*$9733$RyrJs
                                                              (cdr g$e*$12074$RyrJs)
                                                              (cons
                                                                (cons
                                                                  g$lab$12115$RyrJs
                                                                  g$b$12117$RyrJs)
                                                                g$r$12075$RyrJs)
                                                              (cons
                                                                (cons
                                                                  g$lab$12115$RyrJs
                                                                  g$b$12117$RyrJs)
                                                                g$mr$12076$RyrJs)
                                                              g$lex*$12077$RyrJs
                                                              g$rhs*$12078$RyrJs
                                                              g$mod**$12079$RyrJs
                                                              g$kwd*$12095$RyrJs
                                                              g$exp*$12081$RyrJs
                                                              g$rib$12082$RyrJs
                                                              g$mix?$12083$RyrJs
                                                              g$sd?$12084$RyrJs)))
                                                         (g$make-eval-transformer$9365$RyrJs
                                                           g$expanded-rhs$12116$RyrJs)))))
                                                   (g$expand-transformer$9734$RyrJs
                                                     g$rhs$12113$RyrJs
                                                     g$mr$12076$RyrJs))))
                                               (g$gen-define-label$9263$RyrJs
                                                 g$id$12114$RyrJs
                                                 g$rib$12082$RyrJs
                                                 g$sd?$12084$RyrJs)))))
                                         g$rhs$12112$RyrJs
                                         g$id$12111$RyrJs))))
                                   (if (g$memv$5800$RyrJs
                                         g$t$12096$RyrJs
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$12118$RyrJs)
                                         ((case-lambda
                                            ((g$ls/false$12119$RyrJs)
                                             (if (if g$ls/false$12119$RyrJs
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$12120$RyrJs
                                                            g$xrhs*$12121$RyrJs
                                                            g$xbody*$12122$RyrJs)
                                                          (if (not (g$valid-bound-ids?$9328$RyrJs
                                                                     g$xlhs*$12120$RyrJs))
                                                            (g$syntax-violation$9805$RyrJs
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$12085$RyrJs)
                                                            (void))))
                                                       g$ls/false$12119$RyrJs))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$12123$RyrJs
                                                      g$xrhs*$12124$RyrJs
                                                      g$xbody*$12125$RyrJs)
                                                    ((case-lambda
                                                       ((g$xlab*$12126$RyrJs)
                                                        ((case-lambda
                                                           ((g$xrib$12127$RyrJs)
                                                            ((case-lambda
                                                               ((g$xb*$12128$RyrJs)
                                                                (g$chi-body*$9733$RyrJs
                                                                  (append
                                                                    (g$map$5807$RyrJs
                                                                      (case-lambda
                                                                        ((g$x$12129$RyrJs)
                                                                         (g$add-subst$9313$RyrJs
                                                                           g$xrib$12127$RyrJs
                                                                           g$x$12129$RyrJs)))
                                                                      g$xbody*$12125$RyrJs)
                                                                    (cdr g$e*$12074$RyrJs))
                                                                  (append
                                                                    (g$map$5807$RyrJs
                                                                      cons
                                                                      g$xlab*$12126$RyrJs
                                                                      g$xb*$12128$RyrJs)
                                                                    g$r$12075$RyrJs)
                                                                  (append
                                                                    (g$map$5807$RyrJs
                                                                      cons
                                                                      g$xlab*$12126$RyrJs
                                                                      g$xb*$12128$RyrJs)
                                                                    g$mr$12076$RyrJs)
                                                                  g$lex*$12077$RyrJs
                                                                  g$rhs*$12078$RyrJs
                                                                  g$mod**$12079$RyrJs
                                                                  g$kwd*$12095$RyrJs
                                                                  g$exp*$12081$RyrJs
                                                                  g$rib$12082$RyrJs
                                                                  g$mix?$12083$RyrJs
                                                                  g$sd?$12084$RyrJs)))
                                                             (g$map$5807$RyrJs
                                                               (case-lambda
                                                                 ((g$x$12130$RyrJs)
                                                                  (g$make-eval-transformer$9365$RyrJs
                                                                    (g$expand-transformer$9734$RyrJs
                                                                      (if (eq? g$type$12094$RyrJs
                                                                               'let-syntax)
                                                                        g$x$12130$RyrJs
                                                                        (g$add-subst$9313$RyrJs
                                                                          g$xrib$12127$RyrJs
                                                                          g$x$12130$RyrJs))
                                                                      g$mr$12076$RyrJs))))
                                                               g$xrhs*$12124$RyrJs))))
                                                         (g$make-full-rib$9289$RyrJs
                                                           g$xlhs*$12123$RyrJs
                                                           g$xlab*$12126$RyrJs))))
                                                     (g$map$5807$RyrJs
                                                       g$gen-label$9260$RyrJs
                                                       g$xlhs*$12123$RyrJs))))
                                                 g$ls/false$12119$RyrJs)
                                               (g$syntax-violation$9805$RyrJs
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$12118$RyrJs))))
                                          (g$syntax-dispatch$9686$RyrJs
                                            g$t$12118$RyrJs
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$12085$RyrJs)
                                     (if (eqv? g$t$12096$RyrJs 'begin)
                                       ((case-lambda
                                          ((g$t$12131$RyrJs)
                                           ((case-lambda
                                              ((g$ls/false$12132$RyrJs)
                                               (if g$ls/false$12132$RyrJs
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$12133$RyrJs)
                                                      (g$chi-body*$9733$RyrJs
                                                        (append
                                                          g$x*$12133$RyrJs
                                                          (cdr g$e*$12074$RyrJs))
                                                        g$r$12075$RyrJs
                                                        g$mr$12076$RyrJs
                                                        g$lex*$12077$RyrJs
                                                        g$rhs*$12078$RyrJs
                                                        g$mod**$12079$RyrJs
                                                        g$kwd*$12095$RyrJs
                                                        g$exp*$12081$RyrJs
                                                        g$rib$12082$RyrJs
                                                        g$mix?$12083$RyrJs
                                                        g$sd?$12084$RyrJs)))
                                                   g$ls/false$12132$RyrJs)
                                                 (g$syntax-violation$9805$RyrJs
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$12131$RyrJs))))
                                            (g$syntax-dispatch$9686$RyrJs
                                              g$t$12131$RyrJs
                                              '(_ . each-any)))))
                                        g$e$12085$RyrJs)
                                       (if (g$memv$5800$RyrJs
                                             g$t$12096$RyrJs
                                             '(global-macro
                                                global-macro!))
                                         (g$chi-body*$9733$RyrJs
                                           (cons
                                             (g$add-subst$9313$RyrJs
                                               g$rib$12082$RyrJs
                                               (g$chi-global-macro$9701$RyrJs
                                                 g$value$12093$RyrJs
                                                 g$e$12085$RyrJs
                                                 g$r$12075$RyrJs))
                                             (cdr g$e*$12074$RyrJs))
                                           g$r$12075$RyrJs
                                           g$mr$12076$RyrJs
                                           g$lex*$12077$RyrJs
                                           g$rhs*$12078$RyrJs
                                           g$mod**$12079$RyrJs
                                           g$kwd*$12095$RyrJs
                                           g$exp*$12081$RyrJs
                                           g$rib$12082$RyrJs
                                           g$mix?$12083$RyrJs
                                           g$sd?$12084$RyrJs)
                                         (if (g$memv$5800$RyrJs
                                               g$t$12096$RyrJs
                                               '(local-macro
                                                  local-macro!))
                                           (g$chi-body*$9733$RyrJs
                                             (cons
                                               (g$add-subst$9313$RyrJs
                                                 g$rib$12082$RyrJs
                                                 (g$chi-local-macro$9700$RyrJs
                                                   g$value$12093$RyrJs
                                                   g$e$12085$RyrJs
                                                   g$r$12075$RyrJs))
                                               (cdr g$e*$12074$RyrJs))
                                             g$r$12075$RyrJs
                                             g$mr$12076$RyrJs
                                             g$lex*$12077$RyrJs
                                             g$rhs*$12078$RyrJs
                                             g$mod**$12079$RyrJs
                                             g$kwd*$12095$RyrJs
                                             g$exp*$12081$RyrJs
                                             g$rib$12082$RyrJs
                                             g$mix?$12083$RyrJs
                                             g$sd?$12084$RyrJs)
                                           (if (g$memv$5800$RyrJs
                                                 g$t$12096$RyrJs
                                                 '(macro macro!))
                                             (g$chi-body*$9733$RyrJs
                                               (cons
                                                 (g$add-subst$9313$RyrJs
                                                   g$rib$12082$RyrJs
                                                   (g$chi-macro$9699$RyrJs
                                                     g$value$12093$RyrJs
                                                     g$e$12085$RyrJs
                                                     g$r$12075$RyrJs))
                                                 (cdr g$e*$12074$RyrJs))
                                               g$r$12075$RyrJs
                                               g$mr$12076$RyrJs
                                               g$lex*$12077$RyrJs
                                               g$rhs*$12078$RyrJs
                                               g$mod**$12079$RyrJs
                                               g$kwd*$12095$RyrJs
                                               g$exp*$12081$RyrJs
                                               g$rib$12082$RyrJs
                                               g$mix?$12083$RyrJs
                                               g$sd?$12084$RyrJs)
                                             (if (eqv?
                                                   g$t$12096$RyrJs
                                                   'module)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$9732$RyrJs
                                                      g$e$12085$RyrJs
                                                      g$r$12075$RyrJs
                                                      g$mr$12076$RyrJs
                                                      g$lex*$12077$RyrJs
                                                      g$rhs*$12078$RyrJs
                                                      g$mod**$12079$RyrJs
                                                      g$kwd*$12095$RyrJs)))
                                                 (case-lambda
                                                   ((g$lex*$12142$RyrJs
                                                      g$rhs*$12143$RyrJs
                                                      g$m-exp-id*$12144$RyrJs
                                                      g$m-exp-lab*$12145$RyrJs
                                                      g$r$12146$RyrJs
                                                      g$mr$12147$RyrJs
                                                      g$mod**$12148$RyrJs
                                                      g$kwd*$12149$RyrJs)
                                                    ((case-lambda
                                                       ((g$kwd*$12150$RyrJs
                                                          g$mod**$12151$RyrJs
                                                          g$mr$12152$RyrJs
                                                          g$r$12153$RyrJs
                                                          g$m-exp-lab*$12154$RyrJs
                                                          g$m-exp-id*$12155$RyrJs
                                                          g$rhs*$12156$RyrJs
                                                          g$lex*$12157$RyrJs)
                                                        (begin
                                                          (g$vector-for-each$6517$RyrJs
                                                            (case-lambda
                                                              ((g$id$12158$RyrJs
                                                                 g$lab$12159$RyrJs)
                                                               (g$extend-rib!$9284$RyrJs
                                                                 g$rib$12082$RyrJs
                                                                 g$id$12158$RyrJs
                                                                 g$lab$12159$RyrJs
                                                                 g$sd?$12084$RyrJs)))
                                                            g$m-exp-id*$12155$RyrJs
                                                            g$m-exp-lab*$12154$RyrJs)
                                                          (g$chi-body*$9733$RyrJs
                                                            (cdr g$e*$12074$RyrJs)
                                                            g$r$12153$RyrJs
                                                            g$mr$12152$RyrJs
                                                            g$lex*$12157$RyrJs
                                                            g$rhs*$12156$RyrJs
                                                            g$mod**$12151$RyrJs
                                                            g$kwd*$12150$RyrJs
                                                            g$exp*$12081$RyrJs
                                                            g$rib$12082$RyrJs
                                                            g$mix?$12083$RyrJs
                                                            g$sd?$12084$RyrJs))))
                                                     g$kwd*$12149$RyrJs
                                                     g$mod**$12148$RyrJs
                                                     g$mr$12147$RyrJs
                                                     g$r$12146$RyrJs
                                                     g$m-exp-lab*$12145$RyrJs
                                                     g$m-exp-id*$12144$RyrJs
                                                     g$rhs*$12143$RyrJs
                                                     g$lex*$12142$RyrJs))))
                                               (if (eqv?
                                                     g$t$12096$RyrJs
                                                     'library)
                                                 (begin
                                                   (g$library-expander$9789$RyrJs
                                                     (g$stx->datum$9334$RyrJs
                                                       g$e$12085$RyrJs))
                                                   (g$chi-body*$9733$RyrJs
                                                     (cdr g$e*$12074$RyrJs)
                                                     g$r$12075$RyrJs
                                                     g$mr$12076$RyrJs
                                                     g$lex*$12077$RyrJs
                                                     g$rhs*$12078$RyrJs
                                                     g$mod**$12079$RyrJs
                                                     g$kwd*$12095$RyrJs
                                                     g$exp*$12081$RyrJs
                                                     g$rib$12082$RyrJs
                                                     g$mix?$12083$RyrJs
                                                     g$sd?$12084$RyrJs))
                                                 (if (eqv?
                                                       g$t$12096$RyrJs
                                                       'export)
                                                   ((case-lambda
                                                      ((g$t$12160$RyrJs)
                                                       ((case-lambda
                                                          ((g$ls/false$12161$RyrJs)
                                                           (if g$ls/false$12161$RyrJs
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$12162$RyrJs)
                                                                  (g$chi-body*$9733$RyrJs
                                                                    (cdr g$e*$12074$RyrJs)
                                                                    g$r$12075$RyrJs
                                                                    g$mr$12076$RyrJs
                                                                    g$lex*$12077$RyrJs
                                                                    g$rhs*$12078$RyrJs
                                                                    g$mod**$12079$RyrJs
                                                                    g$kwd*$12095$RyrJs
                                                                    (append
                                                                      g$exp-decl*$12162$RyrJs
                                                                      g$exp*$12081$RyrJs)
                                                                    g$rib$12082$RyrJs
                                                                    g$mix?$12083$RyrJs
                                                                    g$sd?$12084$RyrJs)))
                                                               g$ls/false$12161$RyrJs)
                                                             (g$syntax-violation$9805$RyrJs
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$12160$RyrJs))))
                                                        (g$syntax-dispatch$9686$RyrJs
                                                          g$t$12160$RyrJs
                                                          '(_ .
                                                              each-any)))))
                                                    g$e$12085$RyrJs)
                                                   (if (eqv?
                                                         g$t$12096$RyrJs
                                                         'import)
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$12163$RyrJs
                                                                     (case-lambda
                                                                       ((g$e$12205$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$t$12206$RyrJs)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12207$RyrJs)
                                                                                (if (if g$ls/false$12207$RyrJs
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$12208$RyrJs)
                                                                                             (g$id?$9323$RyrJs
                                                                                               g$id$12208$RyrJs)))
                                                                                          g$ls/false$12207$RyrJs))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$12209$RyrJs)
                                                                                       '#t))
                                                                                    g$ls/false$12207$RyrJs)
                                                                                  ((case-lambda
                                                                                     ((g$t$12210$RyrJs)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$12211$RyrJs)
                                                                                          (if g$ls/false$12211$RyrJs
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$12212$RyrJs)
                                                                                                 '#f))
                                                                                              g$ls/false$12211$RyrJs)
                                                                                            ((case-lambda
                                                                                               ((g$t$12213$RyrJs)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$12214$RyrJs)
                                                                                                    (if g$ls/false$12214$RyrJs
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$9805$RyrJs
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$12205$RyrJs)))
                                                                                                        g$ls/false$12214$RyrJs)
                                                                                                      (g$syntax-violation$9805$RyrJs
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$12213$RyrJs))))
                                                                                                 (g$syntax-dispatch$9686$RyrJs
                                                                                                   g$t$12213$RyrJs
                                                                                                   '_))))
                                                                                             g$t$12210$RyrJs))))
                                                                                       (g$syntax-dispatch$9686$RyrJs
                                                                                         g$t$12210$RyrJs
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$12206$RyrJs))))
                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                               g$t$12206$RyrJs
                                                                               '(_ any)))))
                                                                         g$e$12205$RyrJs))))
                                                                   (g$module-import$12164$RyrJs
                                                                     (case-lambda
                                                                       ((g$e$12188$RyrJs
                                                                          g$r$12189$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$t$12190$RyrJs)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12191$RyrJs)
                                                                                (if (if g$ls/false$12191$RyrJs
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$12192$RyrJs)
                                                                                             (g$id?$9323$RyrJs
                                                                                               g$id$12192$RyrJs)))
                                                                                          g$ls/false$12191$RyrJs))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$12193$RyrJs)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$9343$RyrJs
                                                                                              g$id$12193$RyrJs
                                                                                              g$r$12189$RyrJs)))
                                                                                         (case-lambda
                                                                                           ((g$type$12197$RyrJs
                                                                                              g$value$12198$RyrJs
                                                                                              g$kwd$12199$RyrJs)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$12200$RyrJs
                                                                                                  g$value$12201$RyrJs
                                                                                                  g$type$12202$RyrJs)
                                                                                                ((case-lambda
                                                                                                   ((g$t$12203$RyrJs)
                                                                                                    (if (eqv?
                                                                                                          g$t$12203$RyrJs
                                                                                                          '$module)
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$12204$RyrJs)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$9730$RyrJs
                                                                                                              g$iface$12204$RyrJs
                                                                                                              g$id$12193$RyrJs)
                                                                                                            (g$module-interface-exp-lab-vec$9726$RyrJs
                                                                                                              g$iface$12204$RyrJs))))
                                                                                                       g$value$12201$RyrJs)
                                                                                                      (g$syntax-violation$9805$RyrJs
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$12188$RyrJs))))
                                                                                                 g$type$12202$RyrJs)))
                                                                                             g$kwd$12199$RyrJs
                                                                                             g$value$12198$RyrJs
                                                                                             g$type$12197$RyrJs))))))
                                                                                    g$ls/false$12191$RyrJs)
                                                                                  (g$syntax-violation$9805$RyrJs
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$12190$RyrJs))))
                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                               g$t$12190$RyrJs
                                                                               '(_ any)))))
                                                                         g$e$12188$RyrJs))))
                                                                   (g$library-import$12165$RyrJs
                                                                     (case-lambda
                                                                       ((g$e$12174$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$t$12175$RyrJs)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12176$RyrJs)
                                                                                (if g$ls/false$12176$RyrJs
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$12177$RyrJs
                                                                                         g$imp*$12178$RyrJs)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$9738$RyrJs
                                                                                              (g$syntax->datum$9808$RyrJs
                                                                                                g$imp*$12178$RyrJs))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$12181$RyrJs
                                                                                              g$subst-labels$12182$RyrJs)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$12183$RyrJs
                                                                                                  g$subst-names$12184$RyrJs)
                                                                                                (values
                                                                                                  (g$vector-map$6516$RyrJs
                                                                                                    (case-lambda
                                                                                                      ((g$name$12185$RyrJs)
                                                                                                       (g$datum->stx$9306$RyrJs
                                                                                                         g$ctxt$12177$RyrJs
                                                                                                         g$name$12185$RyrJs)))
                                                                                                    g$subst-names$12184$RyrJs)
                                                                                                  g$subst-labels$12183$RyrJs)))
                                                                                             g$subst-labels$12182$RyrJs
                                                                                             g$subst-names$12181$RyrJs))))))
                                                                                    g$ls/false$12176$RyrJs)
                                                                                  ((case-lambda
                                                                                     ((g$t$12186$RyrJs)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$12187$RyrJs)
                                                                                          (if g$ls/false$12187$RyrJs
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9805$RyrJs
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$12174$RyrJs)))
                                                                                              g$ls/false$12187$RyrJs)
                                                                                            (g$syntax-violation$9805$RyrJs
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$12186$RyrJs))))
                                                                                       (g$syntax-dispatch$9686$RyrJs
                                                                                         g$t$12186$RyrJs
                                                                                         '_))))
                                                                                   g$t$12175$RyrJs))))
                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                               g$t$12175$RyrJs
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$12174$RyrJs)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$12163$RyrJs
                                                                        g$e$12085$RyrJs)
                                                                    (g$module-import$12164$RyrJs
                                                                      g$e$12085$RyrJs
                                                                      g$r$12075$RyrJs)
                                                                    (g$library-import$12165$RyrJs
                                                                      g$e$12085$RyrJs))))
                                                               (case-lambda
                                                                 ((g$id*$12168$RyrJs
                                                                    g$lab*$12169$RyrJs)
                                                                  ((case-lambda
                                                                     ((g$lab*$12170$RyrJs
                                                                        g$id*$12171$RyrJs)
                                                                      (g$vector-for-each$6517$RyrJs
                                                                        (case-lambda
                                                                          ((g$id$12172$RyrJs
                                                                             g$lab$12173$RyrJs)
                                                                           (g$extend-rib!$9284$RyrJs
                                                                             g$rib$12082$RyrJs
                                                                             g$id$12172$RyrJs
                                                                             g$lab$12173$RyrJs
                                                                             g$sd?$12084$RyrJs)))
                                                                        g$id*$12171$RyrJs
                                                                        g$lab*$12170$RyrJs)))
                                                                   g$lab*$12169$RyrJs
                                                                   g$id*$12168$RyrJs))))
                                                             (g$chi-body*$9733$RyrJs
                                                               (cdr g$e*$12074$RyrJs)
                                                               g$r$12075$RyrJs
                                                               g$mr$12076$RyrJs
                                                               g$lex*$12077$RyrJs
                                                               g$rhs*$12078$RyrJs
                                                               g$mod**$12079$RyrJs
                                                               g$kwd*$12095$RyrJs
                                                               g$exp*$12081$RyrJs
                                                               g$rib$12082$RyrJs
                                                               g$mix?$12083$RyrJs
                                                               g$sd?$12084$RyrJs))))))
                                                     (if g$mix?$12083$RyrJs
                                                       (g$chi-body*$9733$RyrJs
                                                         (cdr g$e*$12074$RyrJs)
                                                         g$r$12075$RyrJs
                                                         g$mr$12076$RyrJs
                                                         (cons
                                                           (g$gen-lexical$9258$RyrJs
                                                             'dummy)
                                                           g$lex*$12077$RyrJs)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$12085$RyrJs)
                                                           g$rhs*$12078$RyrJs)
                                                         g$mod**$12079$RyrJs
                                                         g$kwd*$12095$RyrJs
                                                         g$exp*$12081$RyrJs
                                                         g$rib$12082$RyrJs
                                                         '#t
                                                         g$sd?$12084$RyrJs)
                                                       (values
                                                         g$e*$12074$RyrJs
                                                         g$r$12075$RyrJs
                                                         g$mr$12076$RyrJs
                                                         g$lex*$12077$RyrJs
                                                         g$rhs*$12078$RyrJs
                                                         g$mod**$12079$RyrJs
                                                         g$kwd*$12095$RyrJs
                                                         g$exp*$12081$RyrJs)))))))))))))))
                            g$type$12094$RyrJs)))
                        (if (g$id?$9323$RyrJs g$kwd$12092$RyrJs)
                          (cons g$kwd$12092$RyrJs g$kwd*$12080$RyrJs)
                          g$kwd*$12080$RyrJs))))
                    g$kwd$12091$RyrJs
                    g$value$12090$RyrJs
                    g$type$12089$RyrJs))))))
           (car g$e*$12074$RyrJs))))))
   (g$expand-transformer$9734$RyrJs
     g$expand-transformer$13322$RyrJs
     (case-lambda
       ((g$expr$12215$RyrJs g$r$12216$RyrJs)
        ((case-lambda
           ((g$rtc$12217$RyrJs)
            ((case-lambda
               ((g$expanded-rhs$12218$RyrJs)
                (begin
                  (g$for-each$5808$RyrJs
                    ((case-lambda
                       ((g$mark-visit$12219$RyrJs)
                        (case-lambda
                          ((g$x$12220$RyrJs)
                           (begin
                             (g$invoke-library$9062$RyrJs
                               g$x$12220$RyrJs)
                             (g$mark-visit$12219$RyrJs
                               g$x$12220$RyrJs))))))
                     (g$vis-collector$9742$RyrJs))
                    (g$rtc$12217$RyrJs))
                  g$expanded-rhs$12218$RyrJs)))
             ((case-lambda
                ((g$inv-collector$12225$RyrJs
                   g$vis-collector$12226$RyrJs
                   g$inv-collector$12227$RyrJs
                   g$vis-collector$12228$RyrJs)
                 ((case-lambda
                    ((g$swap$12229$RyrJs)
                     (dynamic-wind
                       g$swap$12229$RyrJs
                       (case-lambda
                         (()
                          (g$chi-expr$9704$RyrJs
                            g$expr$12215$RyrJs
                            g$r$12216$RyrJs
                            g$r$12216$RyrJs)))
                       g$swap$12229$RyrJs)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$12230$RyrJs)
                           (begin
                             (g$inv-collector$12225$RyrJs
                               g$inv-collector$12227$RyrJs)
                             (set! g$inv-collector$12227$RyrJs
                               g$t$12230$RyrJs))))
                        (g$inv-collector$12225$RyrJs))
                       ((case-lambda
                          ((g$t$12231$RyrJs)
                           (begin
                             (g$vis-collector$12226$RyrJs
                               g$vis-collector$12228$RyrJs)
                             (set! g$vis-collector$12228$RyrJs
                               g$t$12231$RyrJs))))
                        (g$vis-collector$12226$RyrJs))))))))
              g$inv-collector$9741$RyrJs
              g$vis-collector$9742$RyrJs
              g$rtc$12217$RyrJs
              (case-lambda ((g$x$12232$RyrJs) (values)))))))
         (g$make-collector$9740$RyrJs)))))
   (g$parse-exports$9735$RyrJs
     g$parse-exports$13323$RyrJs
     (case-lambda
       ((g$exp*$12233$RyrJs)
        ((letrec ((g$f$12234$RyrJs
                    (case-lambda
                      ((g$exp*$12235$RyrJs
                         g$int*$12236$RyrJs
                         g$ext*$12237$RyrJs)
                       (if (null? g$exp*$12235$RyrJs)
                         (begin
                           (if (not (g$valid-bound-ids?$9328$RyrJs
                                      g$ext*$12237$RyrJs))
                             (g$syntax-violation$9805$RyrJs
                               'export
                               '"invalid exports"
                               (g$find-dups$9714$RyrJs
                                 g$ext*$12237$RyrJs))
                             (void))
                           (values
                             (g$map$5807$RyrJs
                               g$syntax->datum$9808$RyrJs
                               g$ext*$12237$RyrJs)
                             g$int*$12236$RyrJs))
                         ((case-lambda
                            ((g$t$12238$RyrJs)
                             ((case-lambda
                                ((g$ls/false$12239$RyrJs)
                                 (if g$ls/false$12239$RyrJs
                                   (apply
                                     (case-lambda
                                       ((g$rename$12240$RyrJs
                                          g$i*$12241$RyrJs
                                          g$e*$12242$RyrJs)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$9808$RyrJs
                                                              g$rename$12240$RyrJs)
                                                            'rename)
                                                     (if (g$for-all$5805$RyrJs
                                                           g$id?$9323$RyrJs
                                                           g$i*$12241$RyrJs)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5805$RyrJs
                                                           g$id?$9323$RyrJs
                                                           g$e*$12242$RyrJs))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$9805$RyrJs
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$12235$RyrJs))
                                            (void))
                                          (g$f$12234$RyrJs
                                            (cdr g$exp*$12235$RyrJs)
                                            (append
                                              g$i*$12241$RyrJs
                                              g$int*$12236$RyrJs)
                                            (append
                                              g$e*$12242$RyrJs
                                              g$ext*$12237$RyrJs)))))
                                     g$ls/false$12239$RyrJs)
                                   ((case-lambda
                                      ((g$t$12243$RyrJs)
                                       ((case-lambda
                                          ((g$ls/false$12244$RyrJs)
                                           (if g$ls/false$12244$RyrJs
                                             (apply
                                               (case-lambda
                                                 ((g$ie$12245$RyrJs)
                                                  (begin
                                                    (if (not (g$id?$9323$RyrJs
                                                               g$ie$12245$RyrJs))
                                                      (g$syntax-violation$9805$RyrJs
                                                        'export
                                                        '"invalid export"
                                                        g$ie$12245$RyrJs)
                                                      (void))
                                                    (g$f$12234$RyrJs
                                                      (cdr g$exp*$12235$RyrJs)
                                                      (cons
                                                        g$ie$12245$RyrJs
                                                        g$int*$12236$RyrJs)
                                                      (cons
                                                        g$ie$12245$RyrJs
                                                        g$ext*$12237$RyrJs)))))
                                               g$ls/false$12244$RyrJs)
                                             (g$syntax-violation$9805$RyrJs
                                               '#f
                                               '"invalid syntax"
                                               g$t$12243$RyrJs))))
                                        (g$syntax-dispatch$9686$RyrJs
                                          g$t$12243$RyrJs
                                          'any))))
                                    g$t$12238$RyrJs))))
                              (g$syntax-dispatch$9686$RyrJs
                                g$t$12238$RyrJs
                                '(any . #(each (any any)))))))
                          (car g$exp*$12235$RyrJs)))))))
           g$f$12234$RyrJs)
         g$exp*$12233$RyrJs
         '()
         '()))))
   (g$parse-library-name$9736$RyrJs
     g$parse-library-name$13324$RyrJs
     (case-lambda
       ((g$spec$12246$RyrJs)
        (letrec* ((g$parse$12247$RyrJs
                    (case-lambda
                      ((g$x$12254$RyrJs)
                       ((case-lambda
                          ((g$t$12255$RyrJs)
                           ((case-lambda
                              ((g$ls/false$12256$RyrJs)
                               (if (if g$ls/false$12256$RyrJs
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$12257$RyrJs)
                                            (g$for-all$5805$RyrJs
                                              (case-lambda
                                                ((g$x$12258$RyrJs)
                                                 ((case-lambda
                                                    ((g$x$12259$RyrJs)
                                                     (if (integer?
                                                           g$x$12259$RyrJs)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$12259$RyrJs))
                                                       '#f)))
                                                  (g$syntax->datum$9808$RyrJs
                                                    g$x$12258$RyrJs))))
                                              g$v*$12257$RyrJs)))
                                         g$ls/false$12256$RyrJs))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$12260$RyrJs)
                                      (values
                                        '()
                                        (g$map$5807$RyrJs
                                          g$syntax->datum$9808$RyrJs
                                          g$v*$12260$RyrJs))))
                                   g$ls/false$12256$RyrJs)
                                 ((case-lambda
                                    ((g$t$12261$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$12262$RyrJs)
                                         (if (if g$ls/false$12262$RyrJs
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$12263$RyrJs
                                                        g$rest$12264$RyrJs)
                                                      (g$symbol?$6456$RyrJs
                                                        (g$syntax->datum$9808$RyrJs
                                                          g$x$12263$RyrJs))))
                                                   g$ls/false$12262$RyrJs))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$12265$RyrJs
                                                  g$rest$12266$RyrJs)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$12247$RyrJs
                                                       g$rest$12266$RyrJs)))
                                                  (case-lambda
                                                    ((g$x*$12269$RyrJs
                                                       g$v*$12270$RyrJs)
                                                     ((case-lambda
                                                        ((g$v*$12271$RyrJs
                                                           g$x*$12272$RyrJs)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$9808$RyrJs
                                                               g$x$12265$RyrJs)
                                                             g$x*$12272$RyrJs)
                                                           g$v*$12271$RyrJs)))
                                                      g$v*$12270$RyrJs
                                                      g$x*$12269$RyrJs))))))
                                             g$ls/false$12262$RyrJs)
                                           ((case-lambda
                                              ((g$t$12273$RyrJs)
                                               ((case-lambda
                                                  ((g$ls/false$12274$RyrJs)
                                                   (if g$ls/false$12274$RyrJs
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (values
                                                            '()
                                                            '())))
                                                       g$ls/false$12274$RyrJs)
                                                     ((case-lambda
                                                        ((g$t$12275$RyrJs)
                                                         ((case-lambda
                                                            ((g$ls/false$12276$RyrJs)
                                                             (if g$ls/false$12276$RyrJs
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$9805$RyrJs
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$12246$RyrJs)))
                                                                 g$ls/false$12276$RyrJs)
                                                               (g$syntax-violation$9805$RyrJs
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$12275$RyrJs))))
                                                          (g$syntax-dispatch$9686$RyrJs
                                                            g$t$12275$RyrJs
                                                            '_))))
                                                      g$t$12273$RyrJs))))
                                                (g$syntax-dispatch$9686$RyrJs
                                                  g$t$12273$RyrJs
                                                  '()))))
                                            g$t$12261$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$12261$RyrJs
                                        '(any . any)))))
                                  g$t$12255$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$12255$RyrJs
                              '(each-any)))))
                        g$x$12254$RyrJs)))))
          (call-with-values
            (case-lambda (() (g$parse$12247$RyrJs g$spec$12246$RyrJs)))
            (case-lambda
              ((g$name*$12250$RyrJs g$ver*$12251$RyrJs)
               ((case-lambda
                  ((g$ver*$12252$RyrJs g$name*$12253$RyrJs)
                   (begin
                     (if (null? g$name*$12253$RyrJs)
                       (g$syntax-violation$9805$RyrJs
                         '#f
                         '"empty library name"
                         g$spec$12246$RyrJs)
                       (void))
                     (values g$name*$12253$RyrJs g$ver*$12252$RyrJs))))
                g$ver*$12251$RyrJs
                g$name*$12250$RyrJs))))))))
   (g$parse-library$9737$RyrJs
     g$parse-library$13325$RyrJs
     (case-lambda
       ((g$e$12277$RyrJs)
        ((case-lambda
           ((g$t$12278$RyrJs)
            ((case-lambda
               ((g$ls/false$12279$RyrJs)
                (if (if g$ls/false$12279$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$12280$RyrJs
                               g$name*$12281$RyrJs
                               g$export$12282$RyrJs
                               g$exp*$12283$RyrJs
                               g$import$12284$RyrJs
                               g$imp*$12285$RyrJs
                               g$b*$12286$RyrJs)
                             (if (eq? (g$syntax->datum$9808$RyrJs
                                        g$export$12282$RyrJs)
                                      'export)
                               (if (eq? (g$syntax->datum$9808$RyrJs
                                          g$import$12284$RyrJs)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$9808$RyrJs
                                          g$library$12280$RyrJs)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$12279$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$12287$RyrJs
                         g$name*$12288$RyrJs
                         g$export$12289$RyrJs
                         g$exp*$12290$RyrJs
                         g$import$12291$RyrJs
                         g$imp*$12292$RyrJs
                         g$b*$12293$RyrJs)
                       (values
                         g$name*$12288$RyrJs
                         g$exp*$12290$RyrJs
                         g$imp*$12292$RyrJs
                         g$b*$12293$RyrJs)))
                    g$ls/false$12279$RyrJs)
                  ((case-lambda
                     ((g$t$12294$RyrJs)
                      ((case-lambda
                         ((g$ls/false$12295$RyrJs)
                          (if g$ls/false$12295$RyrJs
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$9805$RyrJs
                                   '#f
                                   '"malformed library"
                                   g$e$12277$RyrJs)))
                              g$ls/false$12295$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$12294$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$12294$RyrJs
                         '_))))
                   g$t$12278$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$12278$RyrJs
               '(any each-any
                     (any . each-any)
                     (any . each-any)
                     .
                     each-any)))))
         g$e$12277$RyrJs))))
   (g$parse-import-spec*$9738$RyrJs
     g$parse-import-spec*$13326$RyrJs
     (case-lambda
       ((g$imp*$12296$RyrJs)
        (letrec* ((g$idsyn?$12297$RyrJs
                    (case-lambda
                      ((g$x$12557$RyrJs)
                       (g$symbol?$6456$RyrJs
                         (g$syntax->datum$9808$RyrJs
                           g$x$12557$RyrJs)))))
                  (g$dup-error$12298$RyrJs
                    (case-lambda
                      ((g$name$12556$RyrJs)
                       (g$syntax-violation$9805$RyrJs
                         'import
                         '"two imports with different bindings"
                         g$name$12556$RyrJs))))
                  (g$merge-substs$12299$RyrJs
                    (case-lambda
                      ((g$s$12547$RyrJs g$subst$12548$RyrJs)
                       (letrec* ((g$insert-to-subst$12549$RyrJs
                                   (case-lambda
                                     ((g$a$12550$RyrJs
                                        g$subst$12551$RyrJs)
                                      ((case-lambda
                                         ((g$name$12552$RyrJs
                                            g$label$12553$RyrJs)
                                          ((case-lambda
                                             ((g$t$12554$RyrJs)
                                              (if g$t$12554$RyrJs
                                                ((case-lambda
                                                   ((g$x$12555$RyrJs)
                                                    (if (eq? (cdr g$x$12555$RyrJs)
                                                             g$label$12553$RyrJs)
                                                      g$subst$12551$RyrJs
                                                      (g$dup-error$12298$RyrJs
                                                        g$name$12552$RyrJs))))
                                                 g$t$12554$RyrJs)
                                                (cons
                                                  g$a$12550$RyrJs
                                                  g$subst$12551$RyrJs))))
                                           (g$assq$5795$RyrJs
                                             g$name$12552$RyrJs
                                             g$subst$12551$RyrJs))))
                                       (car g$a$12550$RyrJs)
                                       (cdr g$a$12550$RyrJs))))))
                         (if (null? g$s$12547$RyrJs)
                           g$subst$12548$RyrJs
                           (g$insert-to-subst$12549$RyrJs
                             (car g$s$12547$RyrJs)
                             (g$merge-substs$12299$RyrJs
                               (cdr g$s$12547$RyrJs)
                               g$subst$12548$RyrJs)))))))
                  (g$exclude*$12300$RyrJs
                    (case-lambda
                      ((g$sym*$12523$RyrJs g$subst$12524$RyrJs)
                       (letrec* ((g$exclude$12525$RyrJs
                                   (case-lambda
                                     ((g$sym$12538$RyrJs
                                        g$subst$12539$RyrJs)
                                      (if (null? g$subst$12539$RyrJs)
                                        (g$syntax-violation$9805$RyrJs
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$12538$RyrJs)
                                        (if (eq? g$sym$12538$RyrJs
                                                 (g$caar$6464$RyrJs
                                                   g$subst$12539$RyrJs))
                                          (values
                                            (g$cdar$6466$RyrJs
                                              g$subst$12539$RyrJs)
                                            (cdr g$subst$12539$RyrJs))
                                          ((case-lambda
                                             ((g$a$12540$RyrJs)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$12525$RyrJs
                                                     g$sym$12538$RyrJs
                                                     (cdr g$subst$12539$RyrJs))))
                                                (case-lambda
                                                  ((g$old$12543$RyrJs
                                                     g$subst$12544$RyrJs)
                                                   ((case-lambda
                                                      ((g$subst$12545$RyrJs
                                                         g$old$12546$RyrJs)
                                                       (values
                                                         g$old$12546$RyrJs
                                                         (cons
                                                           g$a$12540$RyrJs
                                                           g$subst$12545$RyrJs))))
                                                    g$subst$12544$RyrJs
                                                    g$old$12543$RyrJs))))))
                                           (car g$subst$12539$RyrJs))))))))
                         (if (null? g$sym*$12523$RyrJs)
                           (values '() g$subst$12524$RyrJs)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$12525$RyrJs
                                  (car g$sym*$12523$RyrJs)
                                  g$subst$12524$RyrJs)))
                             (case-lambda
                               ((g$old$12528$RyrJs g$subst$12529$RyrJs)
                                ((case-lambda
                                   ((g$subst$12530$RyrJs
                                      g$old$12531$RyrJs)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$12300$RyrJs
                                           (cdr g$sym*$12523$RyrJs)
                                           g$subst$12530$RyrJs)))
                                      (case-lambda
                                        ((g$old*$12534$RyrJs
                                           g$subst$12535$RyrJs)
                                         ((case-lambda
                                            ((g$subst$12536$RyrJs
                                               g$old*$12537$RyrJs)
                                             (values
                                               (cons
                                                 g$old$12531$RyrJs
                                                 g$old*$12537$RyrJs)
                                               g$subst$12536$RyrJs)))
                                          g$subst$12535$RyrJs
                                          g$old*$12534$RyrJs))))))
                                 g$subst$12529$RyrJs
                                 g$old$12528$RyrJs)))))))))
                  (g$find*$12301$RyrJs
                    (case-lambda
                      ((g$sym*$12519$RyrJs g$subst$12520$RyrJs)
                       (g$map$5807$RyrJs
                         (case-lambda
                           ((g$x$12521$RyrJs)
                            ((case-lambda
                               ((g$t$12522$RyrJs)
                                (if g$t$12522$RyrJs
                                  (cdr g$t$12522$RyrJs)
                                  (g$syntax-violation$9805$RyrJs
                                    'import
                                    '"cannot find identifier"
                                    g$x$12521$RyrJs))))
                             (g$assq$5795$RyrJs
                               g$x$12521$RyrJs
                               g$subst$12520$RyrJs))))
                         g$sym*$12519$RyrJs))))
                  (g$rem*$12302$RyrJs
                    (case-lambda
                      ((g$sym*$12515$RyrJs g$subst$12516$RyrJs)
                       ((letrec ((g$f$12517$RyrJs
                                   (case-lambda
                                     ((g$subst$12518$RyrJs)
                                      (if (null? g$subst$12518$RyrJs)
                                        '()
                                        (if (g$memq$5799$RyrJs
                                              (g$caar$6464$RyrJs
                                                g$subst$12518$RyrJs)
                                              g$sym*$12515$RyrJs)
                                          (g$f$12517$RyrJs
                                            (cdr g$subst$12518$RyrJs))
                                          (cons
                                            (car g$subst$12518$RyrJs)
                                            (g$f$12517$RyrJs
                                              (cdr g$subst$12518$RyrJs)))))))))
                          g$f$12517$RyrJs)
                        g$subst$12516$RyrJs))))
                  (g$remove-dups$12303$RyrJs
                    (case-lambda
                      ((g$ls$12514$RyrJs)
                       (if (null? g$ls$12514$RyrJs)
                         '()
                         (if (g$memq$5799$RyrJs
                               (car g$ls$12514$RyrJs)
                               (cdr g$ls$12514$RyrJs))
                           (g$remove-dups$12303$RyrJs
                             (cdr g$ls$12514$RyrJs))
                           (cons
                             (car g$ls$12514$RyrJs)
                             (g$remove-dups$12303$RyrJs
                               (cdr g$ls$12514$RyrJs))))))))
                  (g$parse-library-name$12304$RyrJs
                    (case-lambda
                      ((g$spec$12398$RyrJs)
                       (letrec* ((g$subversion?$12399$RyrJs
                                   (case-lambda
                                     ((g$x$12512$RyrJs)
                                      ((case-lambda
                                         ((g$x$12513$RyrJs)
                                          (if (integer? g$x$12513$RyrJs)
                                            (if (exact? g$x$12513$RyrJs)
                                              (begin
                                                '#f
                                                (>= g$x$12513$RyrJs '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$9808$RyrJs
                                         g$x$12512$RyrJs)))))
                                 (g$subversion-pred$12400$RyrJs
                                   (case-lambda
                                     ((g$x*$12464$RyrJs)
                                      ((case-lambda
                                         ((g$t$12465$RyrJs)
                                          ((case-lambda
                                             ((g$ls/false$12466$RyrJs)
                                              (if (if g$ls/false$12466$RyrJs
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$12467$RyrJs)
                                                           (g$subversion?$12399$RyrJs
                                                             g$n$12467$RyrJs)))
                                                        g$ls/false$12466$RyrJs))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$12468$RyrJs)
                                                     (case-lambda
                                                       ((g$x$12469$RyrJs)
                                                        (= g$x$12469$RyrJs
                                                           (g$syntax->datum$9808$RyrJs
                                                             g$n$12468$RyrJs))))))
                                                  g$ls/false$12466$RyrJs)
                                                ((case-lambda
                                                   ((g$t$12470$RyrJs)
                                                    ((case-lambda
                                                       ((g$ls/false$12471$RyrJs)
                                                        (if (if g$ls/false$12471$RyrJs
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$12472$RyrJs
                                                                       g$sub*$12473$RyrJs)
                                                                     (eq? (g$syntax->datum$9808$RyrJs
                                                                            g$p?$12472$RyrJs)
                                                                          'and)))
                                                                  g$ls/false$12471$RyrJs))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$12474$RyrJs
                                                                 g$sub*$12475$RyrJs)
                                                               ((case-lambda
                                                                  ((g$p*$12476$RyrJs)
                                                                   (case-lambda
                                                                     ((g$x$12477$RyrJs)
                                                                      (g$for-all$5805$RyrJs
                                                                        (case-lambda
                                                                          ((g$p$12478$RyrJs)
                                                                           (g$p$12478$RyrJs
                                                                             g$x$12477$RyrJs)))
                                                                        g$p*$12476$RyrJs)))))
                                                                (g$map$5807$RyrJs
                                                                  g$subversion-pred$12400$RyrJs
                                                                  g$sub*$12475$RyrJs))))
                                                            g$ls/false$12471$RyrJs)
                                                          ((case-lambda
                                                             ((g$t$12479$RyrJs)
                                                              ((case-lambda
                                                                 ((g$ls/false$12480$RyrJs)
                                                                  (if (if g$ls/false$12480$RyrJs
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$12481$RyrJs
                                                                                 g$sub*$12482$RyrJs)
                                                                               (eq? (g$syntax->datum$9808$RyrJs
                                                                                      g$p?$12481$RyrJs)
                                                                                    'or)))
                                                                            g$ls/false$12480$RyrJs))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$12483$RyrJs
                                                                           g$sub*$12484$RyrJs)
                                                                         ((case-lambda
                                                                            ((g$p*$12485$RyrJs)
                                                                             (case-lambda
                                                                               ((g$x$12486$RyrJs)
                                                                                (g$exists$5806$RyrJs
                                                                                  (case-lambda
                                                                                    ((g$p$12487$RyrJs)
                                                                                     (g$p$12487$RyrJs
                                                                                       g$x$12486$RyrJs)))
                                                                                  g$p*$12485$RyrJs)))))
                                                                          (g$map$5807$RyrJs
                                                                            g$subversion-pred$12400$RyrJs
                                                                            g$sub*$12484$RyrJs))))
                                                                      g$ls/false$12480$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$t$12488$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$ls/false$12489$RyrJs)
                                                                            (if (if g$ls/false$12489$RyrJs
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$12490$RyrJs
                                                                                           g$sub$12491$RyrJs)
                                                                                         (eq? (g$syntax->datum$9808$RyrJs
                                                                                                g$p?$12490$RyrJs)
                                                                                              'not)))
                                                                                      g$ls/false$12489$RyrJs))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$12492$RyrJs
                                                                                     g$sub$12493$RyrJs)
                                                                                   ((case-lambda
                                                                                      ((g$p$12494$RyrJs)
                                                                                       (case-lambda
                                                                                         ((g$x$12495$RyrJs)
                                                                                          (not (g$p$12494$RyrJs
                                                                                                 g$x$12495$RyrJs))))))
                                                                                    (g$subversion-pred$12400$RyrJs
                                                                                      g$sub$12493$RyrJs))))
                                                                                g$ls/false$12489$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$t$12496$RyrJs)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$12497$RyrJs)
                                                                                      (if (if g$ls/false$12497$RyrJs
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$12498$RyrJs
                                                                                                     g$n$12499$RyrJs)
                                                                                                   (if (eq? (g$syntax->datum$9808$RyrJs
                                                                                                              g$p?$12498$RyrJs)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$12399$RyrJs
                                                                                                         g$n$12499$RyrJs))
                                                                                                     '#f)))
                                                                                                g$ls/false$12497$RyrJs))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$12500$RyrJs
                                                                                               g$n$12501$RyrJs)
                                                                                             (case-lambda
                                                                                               ((g$x$12502$RyrJs)
                                                                                                (<= g$x$12502$RyrJs
                                                                                                    (g$syntax->datum$9808$RyrJs
                                                                                                      g$n$12501$RyrJs))))))
                                                                                          g$ls/false$12497$RyrJs)
                                                                                        ((case-lambda
                                                                                           ((g$t$12503$RyrJs)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$12504$RyrJs)
                                                                                                (if (if g$ls/false$12504$RyrJs
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$12505$RyrJs
                                                                                                               g$n$12506$RyrJs)
                                                                                                             (if (eq? (g$syntax->datum$9808$RyrJs
                                                                                                                        g$p?$12505$RyrJs)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$12399$RyrJs
                                                                                                                   g$n$12506$RyrJs))
                                                                                                               '#f)))
                                                                                                          g$ls/false$12504$RyrJs))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$12507$RyrJs
                                                                                                         g$n$12508$RyrJs)
                                                                                                       (case-lambda
                                                                                                         ((g$x$12509$RyrJs)
                                                                                                          (>= g$x$12509$RyrJs
                                                                                                              (g$syntax->datum$9808$RyrJs
                                                                                                                g$n$12508$RyrJs))))))
                                                                                                    g$ls/false$12504$RyrJs)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$12510$RyrJs)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$12511$RyrJs)
                                                                                                          (if g$ls/false$12511$RyrJs
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$9805$RyrJs
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$12398$RyrJs
                                                                                                                   g$x*$12464$RyrJs)))
                                                                                                              g$ls/false$12511$RyrJs)
                                                                                                            (g$syntax-violation$9805$RyrJs
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$12510$RyrJs))))
                                                                                                       (g$syntax-dispatch$9686$RyrJs
                                                                                                         g$t$12510$RyrJs
                                                                                                         '_))))
                                                                                                   g$t$12503$RyrJs))))
                                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                                               g$t$12503$RyrJs
                                                                                               '(any any)))))
                                                                                         g$t$12496$RyrJs))))
                                                                                   (g$syntax-dispatch$9686$RyrJs
                                                                                     g$t$12496$RyrJs
                                                                                     '(any any)))))
                                                                               g$t$12488$RyrJs))))
                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                           g$t$12488$RyrJs
                                                                           '(any any)))))
                                                                     g$t$12479$RyrJs))))
                                                               (g$syntax-dispatch$9686$RyrJs
                                                                 g$t$12479$RyrJs
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$12470$RyrJs))))
                                                     (g$syntax-dispatch$9686$RyrJs
                                                       g$t$12470$RyrJs
                                                       '(any .
                                                             each-any)))))
                                                 g$t$12465$RyrJs))))
                                           (g$syntax-dispatch$9686$RyrJs
                                             g$t$12465$RyrJs
                                             'any))))
                                       g$x*$12464$RyrJs))))
                                 (g$version-pred$12401$RyrJs
                                   (case-lambda
                                     ((g$x*$12424$RyrJs)
                                      ((case-lambda
                                         ((g$t$12425$RyrJs)
                                          ((case-lambda
                                             ((g$ls/false$12426$RyrJs)
                                              (if g$ls/false$12426$RyrJs
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$12427$RyrJs)
                                                        '#t))))
                                                  g$ls/false$12426$RyrJs)
                                                ((case-lambda
                                                   ((g$t$12428$RyrJs)
                                                    ((case-lambda
                                                       ((g$ls/false$12429$RyrJs)
                                                        (if (if g$ls/false$12429$RyrJs
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$12430$RyrJs
                                                                       g$ver*$12431$RyrJs)
                                                                     (eq? (g$syntax->datum$9808$RyrJs
                                                                            g$c$12430$RyrJs)
                                                                          'and)))
                                                                  g$ls/false$12429$RyrJs))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$12432$RyrJs
                                                                 g$ver*$12433$RyrJs)
                                                               ((case-lambda
                                                                  ((g$p*$12434$RyrJs)
                                                                   (case-lambda
                                                                     ((g$x$12435$RyrJs)
                                                                      (g$for-all$5805$RyrJs
                                                                        (case-lambda
                                                                          ((g$p$12436$RyrJs)
                                                                           (g$p$12436$RyrJs
                                                                             g$x$12435$RyrJs)))
                                                                        g$p*$12434$RyrJs)))))
                                                                (g$map$5807$RyrJs
                                                                  g$version-pred$12401$RyrJs
                                                                  g$ver*$12433$RyrJs))))
                                                            g$ls/false$12429$RyrJs)
                                                          ((case-lambda
                                                             ((g$t$12437$RyrJs)
                                                              ((case-lambda
                                                                 ((g$ls/false$12438$RyrJs)
                                                                  (if (if g$ls/false$12438$RyrJs
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$12439$RyrJs
                                                                                 g$ver*$12440$RyrJs)
                                                                               (eq? (g$syntax->datum$9808$RyrJs
                                                                                      g$c$12439$RyrJs)
                                                                                    'or)))
                                                                            g$ls/false$12438$RyrJs))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$12441$RyrJs
                                                                           g$ver*$12442$RyrJs)
                                                                         ((case-lambda
                                                                            ((g$p*$12443$RyrJs)
                                                                             (case-lambda
                                                                               ((g$x$12444$RyrJs)
                                                                                (g$exists$5806$RyrJs
                                                                                  (case-lambda
                                                                                    ((g$p$12445$RyrJs)
                                                                                     (g$p$12445$RyrJs
                                                                                       g$x$12444$RyrJs)))
                                                                                  g$p*$12443$RyrJs)))))
                                                                          (g$map$5807$RyrJs
                                                                            g$version-pred$12401$RyrJs
                                                                            g$ver*$12442$RyrJs))))
                                                                      g$ls/false$12438$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$t$12446$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$ls/false$12447$RyrJs)
                                                                            (if (if g$ls/false$12447$RyrJs
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$12448$RyrJs
                                                                                           g$ver$12449$RyrJs)
                                                                                         (eq? (g$syntax->datum$9808$RyrJs
                                                                                                g$c$12448$RyrJs)
                                                                                              'not)))
                                                                                      g$ls/false$12447$RyrJs))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$12450$RyrJs
                                                                                     g$ver$12451$RyrJs)
                                                                                   ((case-lambda
                                                                                      ((g$p$12452$RyrJs)
                                                                                       (case-lambda
                                                                                         ((g$x$12453$RyrJs)
                                                                                          (not (g$p$12452$RyrJs
                                                                                                 g$x$12453$RyrJs))))))
                                                                                    (g$version-pred$12401$RyrJs
                                                                                      g$ver$12451$RyrJs))))
                                                                                g$ls/false$12447$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$t$12454$RyrJs)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$12455$RyrJs)
                                                                                      (if g$ls/false$12455$RyrJs
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$12456$RyrJs)
                                                                                             ((case-lambda
                                                                                                ((g$p*$12457$RyrJs)
                                                                                                 (case-lambda
                                                                                                   ((g$x$12458$RyrJs)
                                                                                                    ((letrec ((g$f$12459$RyrJs
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$12460$RyrJs
                                                                                                                     g$x$12461$RyrJs)
                                                                                                                   (if (null?
                                                                                                                         g$p*$12460$RyrJs)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$12461$RyrJs)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$12460$RyrJs)
                                                                                                                            (car g$x$12461$RyrJs))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$12459$RyrJs
                                                                                                                             (cdr g$p*$12460$RyrJs)
                                                                                                                             (cdr g$x$12461$RyrJs)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$12459$RyrJs)
                                                                                                     g$p*$12457$RyrJs
                                                                                                     g$x$12458$RyrJs)))))
                                                                                              (g$map$5807$RyrJs
                                                                                                g$subversion-pred$12400$RyrJs
                                                                                                g$sub*$12456$RyrJs))))
                                                                                          g$ls/false$12455$RyrJs)
                                                                                        ((case-lambda
                                                                                           ((g$t$12462$RyrJs)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$12463$RyrJs)
                                                                                                (if g$ls/false$12463$RyrJs
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$9805$RyrJs
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$12398$RyrJs
                                                                                                         g$x*$12424$RyrJs)))
                                                                                                    g$ls/false$12463$RyrJs)
                                                                                                  (g$syntax-violation$9805$RyrJs
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$12462$RyrJs))))
                                                                                             (g$syntax-dispatch$9686$RyrJs
                                                                                               g$t$12462$RyrJs
                                                                                               '_))))
                                                                                         g$t$12454$RyrJs))))
                                                                                   (g$syntax-dispatch$9686$RyrJs
                                                                                     g$t$12454$RyrJs
                                                                                     'each-any))))
                                                                               g$t$12446$RyrJs))))
                                                                         (g$syntax-dispatch$9686$RyrJs
                                                                           g$t$12446$RyrJs
                                                                           '(any any)))))
                                                                     g$t$12437$RyrJs))))
                                                               (g$syntax-dispatch$9686$RyrJs
                                                                 g$t$12437$RyrJs
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$12428$RyrJs))))
                                                     (g$syntax-dispatch$9686$RyrJs
                                                       g$t$12428$RyrJs
                                                       '(any .
                                                             each-any)))))
                                                 g$t$12425$RyrJs))))
                                           (g$syntax-dispatch$9686$RyrJs
                                             g$t$12425$RyrJs
                                             '()))))
                                       g$x*$12424$RyrJs)))))
                         ((letrec ((g$f$12402$RyrJs
                                     (case-lambda
                                       ((g$x$12403$RyrJs)
                                        ((case-lambda
                                           ((g$t$12404$RyrJs)
                                            ((case-lambda
                                               ((g$ls/false$12405$RyrJs)
                                                (if g$ls/false$12405$RyrJs
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$12406$RyrJs)
                                                       (values
                                                         '()
                                                         (g$version-pred$12401$RyrJs
                                                           g$version-spec*$12406$RyrJs))))
                                                    g$ls/false$12405$RyrJs)
                                                  ((case-lambda
                                                     ((g$t$12407$RyrJs)
                                                      ((case-lambda
                                                         ((g$ls/false$12408$RyrJs)
                                                          (if (if g$ls/false$12408$RyrJs
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$12409$RyrJs
                                                                         g$x*$12410$RyrJs)
                                                                       (g$idsyn?$12297$RyrJs
                                                                         g$x$12409$RyrJs)))
                                                                    g$ls/false$12408$RyrJs))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$12411$RyrJs
                                                                   g$x*$12412$RyrJs)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$12402$RyrJs
                                                                        g$x*$12412$RyrJs)))
                                                                   (case-lambda
                                                                     ((g$name$12415$RyrJs
                                                                        g$pred$12416$RyrJs)
                                                                      ((case-lambda
                                                                         ((g$pred$12417$RyrJs
                                                                            g$name$12418$RyrJs)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$9808$RyrJs
                                                                                g$x$12411$RyrJs)
                                                                              g$name$12418$RyrJs)
                                                                            g$pred$12417$RyrJs)))
                                                                       g$pred$12416$RyrJs
                                                                       g$name$12415$RyrJs))))))
                                                              g$ls/false$12408$RyrJs)
                                                            ((case-lambda
                                                               ((g$t$12419$RyrJs)
                                                                ((case-lambda
                                                                   ((g$ls/false$12420$RyrJs)
                                                                    (if g$ls/false$12420$RyrJs
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$12421$RyrJs)
                                                                                '#t)))))
                                                                        g$ls/false$12420$RyrJs)
                                                                      ((case-lambda
                                                                         ((g$t$12422$RyrJs)
                                                                          ((case-lambda
                                                                             ((g$ls/false$12423$RyrJs)
                                                                              (if g$ls/false$12423$RyrJs
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$9805$RyrJs
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$12398$RyrJs)))
                                                                                  g$ls/false$12423$RyrJs)
                                                                                (g$syntax-violation$9805$RyrJs
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$12422$RyrJs))))
                                                                           (g$syntax-dispatch$9686$RyrJs
                                                                             g$t$12422$RyrJs
                                                                             '_))))
                                                                       g$t$12419$RyrJs))))
                                                                 (g$syntax-dispatch$9686$RyrJs
                                                                   g$t$12419$RyrJs
                                                                   '()))))
                                                             g$t$12407$RyrJs))))
                                                       (g$syntax-dispatch$9686$RyrJs
                                                         g$t$12407$RyrJs
                                                         '(any .
                                                               any)))))
                                                   g$t$12404$RyrJs))))
                                             (g$syntax-dispatch$9686$RyrJs
                                               g$t$12404$RyrJs
                                               '(each-any)))))
                                         g$x$12403$RyrJs)))))
                            g$f$12402$RyrJs)
                          g$spec$12398$RyrJs)))))
                  (g$import-library$12305$RyrJs
                    (case-lambda
                      ((g$spec*$12390$RyrJs)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$12304$RyrJs
                              g$spec*$12390$RyrJs)))
                         (case-lambda
                           ((g$name$12393$RyrJs g$pred$12394$RyrJs)
                            ((case-lambda
                               ((g$pred$12395$RyrJs g$name$12396$RyrJs)
                                (begin
                                  (if (null? g$name$12396$RyrJs)
                                    (g$syntax-violation$9805$RyrJs
                                      'import
                                      '"empty library name"
                                      g$spec*$12390$RyrJs)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$12397$RyrJs)
                                      (begin
                                        (if (not g$lib$12397$RyrJs)
                                          (g$syntax-violation$9805$RyrJs
                                            'import
                                            '"cannot find library with required name"
                                            g$name$12396$RyrJs)
                                          (void))
                                        (if (not (g$pred$12395$RyrJs
                                                   (g$library-version$9015$RyrJs
                                                     g$lib$12397$RyrJs)))
                                          (g$syntax-violation$9805$RyrJs
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$12390$RyrJs
                                            g$lib$12397$RyrJs)
                                          (void))
                                        ((g$imp-collector$9743$RyrJs)
                                         g$lib$12397$RyrJs)
                                        (g$library-subst$9019$RyrJs
                                          g$lib$12397$RyrJs))))
                                   (g$find-library-by-name$9055$RyrJs
                                     g$name$12396$RyrJs)))))
                             g$pred$12394$RyrJs
                             g$name$12393$RyrJs)))))))
                  (g$get-import$12306$RyrJs
                    (case-lambda
                      ((g$spec$12319$RyrJs)
                       ((case-lambda
                          ((g$t$12320$RyrJs)
                           ((case-lambda
                              ((g$ls/false$12321$RyrJs)
                               (if (if g$ls/false$12321$RyrJs
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$12322$RyrJs
                                              g$x*$12323$RyrJs)
                                            (not (g$memq$5799$RyrJs
                                                   (g$syntax->datum$9808$RyrJs
                                                     g$x$12322$RyrJs)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$12321$RyrJs))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$12324$RyrJs g$x*$12325$RyrJs)
                                      (g$import-library$12305$RyrJs
                                        (cons
                                          g$x$12324$RyrJs
                                          g$x*$12325$RyrJs))))
                                   g$ls/false$12321$RyrJs)
                                 ((case-lambda
                                    ((g$t$12326$RyrJs)
                                     ((case-lambda
                                        ((g$ls/false$12327$RyrJs)
                                         (if (if g$ls/false$12327$RyrJs
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$12328$RyrJs
                                                        g$isp$12329$RyrJs
                                                        g$old*$12330$RyrJs
                                                        g$new*$12331$RyrJs)
                                                      (if (eq? (g$syntax->datum$9808$RyrJs
                                                                 g$rename$12328$RyrJs)
                                                               'rename)
                                                        (if (g$for-all$5805$RyrJs
                                                              g$idsyn?$12297$RyrJs
                                                              g$old*$12330$RyrJs)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5805$RyrJs
                                                              g$idsyn?$12297$RyrJs
                                                              g$new*$12331$RyrJs))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$12327$RyrJs))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$12332$RyrJs
                                                  g$isp$12333$RyrJs
                                                  g$old*$12334$RyrJs
                                                  g$new*$12335$RyrJs)
                                                ((case-lambda
                                                   ((g$subst$12336$RyrJs
                                                      g$old*$12337$RyrJs
                                                      g$new*$12338$RyrJs)
                                                    ((case-lambda
                                                       ((g$old-label*$12339$RyrJs)
                                                        ((case-lambda
                                                           ((g$subst$12340$RyrJs)
                                                            (g$merge-substs$12299$RyrJs
                                                              (g$map$5807$RyrJs
                                                                cons
                                                                g$new*$12338$RyrJs
                                                                g$old-label*$12339$RyrJs)
                                                              g$subst$12340$RyrJs)))
                                                         (g$rem*$12302$RyrJs
                                                           g$old*$12337$RyrJs
                                                           g$subst$12336$RyrJs))))
                                                     (g$find*$12301$RyrJs
                                                       g$old*$12337$RyrJs
                                                       g$subst$12336$RyrJs))))
                                                 (g$get-import$12306$RyrJs
                                                   g$isp$12333$RyrJs)
                                                 (g$map$5807$RyrJs
                                                   g$syntax->datum$9808$RyrJs
                                                   g$old*$12334$RyrJs)
                                                 (g$map$5807$RyrJs
                                                   g$syntax->datum$9808$RyrJs
                                                   g$new*$12335$RyrJs))))
                                             g$ls/false$12327$RyrJs)
                                           ((case-lambda
                                              ((g$t$12341$RyrJs)
                                               ((case-lambda
                                                  ((g$ls/false$12342$RyrJs)
                                                   (if (if g$ls/false$12342$RyrJs
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$12343$RyrJs
                                                                  g$isp$12344$RyrJs
                                                                  g$sym*$12345$RyrJs)
                                                                (if (eq? (g$syntax->datum$9808$RyrJs
                                                                           g$except$12343$RyrJs)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5805$RyrJs
                                                                      g$idsyn?$12297$RyrJs
                                                                      g$sym*$12345$RyrJs))
                                                                  '#f)))
                                                             g$ls/false$12342$RyrJs))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$12346$RyrJs
                                                            g$isp$12347$RyrJs
                                                            g$sym*$12348$RyrJs)
                                                          ((case-lambda
                                                             ((g$subst$12349$RyrJs)
                                                              (g$rem*$12302$RyrJs
                                                                (g$map$5807$RyrJs
                                                                  g$syntax->datum$9808$RyrJs
                                                                  g$sym*$12348$RyrJs)
                                                                g$subst$12349$RyrJs)))
                                                           (g$get-import$12306$RyrJs
                                                             g$isp$12347$RyrJs))))
                                                       g$ls/false$12342$RyrJs)
                                                     ((case-lambda
                                                        ((g$t$12350$RyrJs)
                                                         ((case-lambda
                                                            ((g$ls/false$12351$RyrJs)
                                                             (if (if g$ls/false$12351$RyrJs
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$12352$RyrJs
                                                                            g$isp$12353$RyrJs
                                                                            g$sym*$12354$RyrJs)
                                                                          (if (eq? (g$syntax->datum$9808$RyrJs
                                                                                     g$only$12352$RyrJs)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5805$RyrJs
                                                                                g$idsyn?$12297$RyrJs
                                                                                g$sym*$12354$RyrJs))
                                                                            '#f)))
                                                                       g$ls/false$12351$RyrJs))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$12355$RyrJs
                                                                      g$isp$12356$RyrJs
                                                                      g$sym*$12357$RyrJs)
                                                                    ((case-lambda
                                                                       ((g$subst$12358$RyrJs
                                                                          g$sym*$12359$RyrJs)
                                                                        ((case-lambda
                                                                           ((g$sym*$12360$RyrJs)
                                                                            ((case-lambda
                                                                               ((g$lab*$12361$RyrJs)
                                                                                (g$map$5807$RyrJs
                                                                                  cons
                                                                                  g$sym*$12360$RyrJs
                                                                                  g$lab*$12361$RyrJs)))
                                                                             (g$find*$12301$RyrJs
                                                                               g$sym*$12360$RyrJs
                                                                               g$subst$12358$RyrJs))))
                                                                         (g$remove-dups$12303$RyrJs
                                                                           g$sym*$12359$RyrJs))))
                                                                     (g$get-import$12306$RyrJs
                                                                       g$isp$12356$RyrJs)
                                                                     (g$map$5807$RyrJs
                                                                       g$syntax->datum$9808$RyrJs
                                                                       g$sym*$12357$RyrJs))))
                                                                 g$ls/false$12351$RyrJs)
                                                               ((case-lambda
                                                                  ((g$t$12362$RyrJs)
                                                                   ((case-lambda
                                                                      ((g$ls/false$12363$RyrJs)
                                                                       (if (if g$ls/false$12363$RyrJs
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$12364$RyrJs
                                                                                      g$isp$12365$RyrJs
                                                                                      g$p$12366$RyrJs)
                                                                                    (if (eq? (g$syntax->datum$9808$RyrJs
                                                                                               g$prefix$12364$RyrJs)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$12297$RyrJs
                                                                                          g$p$12366$RyrJs))
                                                                                      '#f)))
                                                                                 g$ls/false$12363$RyrJs))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$12367$RyrJs
                                                                                g$isp$12368$RyrJs
                                                                                g$p$12369$RyrJs)
                                                                              ((case-lambda
                                                                                 ((g$subst$12370$RyrJs
                                                                                    g$prefix$12371$RyrJs)
                                                                                  (g$map$5807$RyrJs
                                                                                    (case-lambda
                                                                                      ((g$x$12372$RyrJs)
                                                                                       (cons
                                                                                         (string->symbol
                                                                                           (string-append
                                                                                             g$prefix$12371$RyrJs
                                                                                             (symbol->string
                                                                                               (car g$x$12372$RyrJs))))
                                                                                         (cdr g$x$12372$RyrJs))))
                                                                                    g$subst$12370$RyrJs)))
                                                                               (g$get-import$12306$RyrJs
                                                                                 g$isp$12368$RyrJs)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$9808$RyrJs
                                                                                   g$p$12369$RyrJs)))))
                                                                           g$ls/false$12363$RyrJs)
                                                                         ((case-lambda
                                                                            ((g$t$12373$RyrJs)
                                                                             ((case-lambda
                                                                                ((g$ls/false$12374$RyrJs)
                                                                                 (if (if g$ls/false$12374$RyrJs
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$12375$RyrJs
                                                                                                g$spec*$12376$RyrJs)
                                                                                              (eq? (g$syntax->datum$9808$RyrJs
                                                                                                     g$library$12375$RyrJs)
                                                                                                   'library)))
                                                                                           g$ls/false$12374$RyrJs))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$12377$RyrJs
                                                                                          g$spec*$12378$RyrJs)
                                                                                        (g$import-library$12305$RyrJs
                                                                                          g$spec*$12378$RyrJs)))
                                                                                     g$ls/false$12374$RyrJs)
                                                                                   ((case-lambda
                                                                                      ((g$t$12379$RyrJs)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$12380$RyrJs)
                                                                                           (if (if g$ls/false$12380$RyrJs
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$12381$RyrJs
                                                                                                          g$isp$12382$RyrJs
                                                                                                          g$rest$12383$RyrJs)
                                                                                                        (eq? (g$syntax->datum$9808$RyrJs
                                                                                                               g$for$12381$RyrJs)
                                                                                                             'for)))
                                                                                                     g$ls/false$12380$RyrJs))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$12384$RyrJs
                                                                                                    g$isp$12385$RyrJs
                                                                                                    g$rest$12386$RyrJs)
                                                                                                  (g$get-import$12306$RyrJs
                                                                                                    g$isp$12385$RyrJs)))
                                                                                               g$ls/false$12380$RyrJs)
                                                                                             ((case-lambda
                                                                                                ((g$t$12387$RyrJs)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$12388$RyrJs)
                                                                                                     (if g$ls/false$12388$RyrJs
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$12389$RyrJs)
                                                                                                            (g$syntax-violation$9805$RyrJs
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$12389$RyrJs)))
                                                                                                         g$ls/false$12388$RyrJs)
                                                                                                       (g$syntax-violation$9805$RyrJs
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$12387$RyrJs))))
                                                                                                  (g$syntax-dispatch$9686$RyrJs
                                                                                                    g$t$12387$RyrJs
                                                                                                    'any))))
                                                                                              g$t$12379$RyrJs))))
                                                                                        (g$syntax-dispatch$9686$RyrJs
                                                                                          g$t$12379$RyrJs
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$12373$RyrJs))))
                                                                              (g$syntax-dispatch$9686$RyrJs
                                                                                g$t$12373$RyrJs
                                                                                '(any each-any)))))
                                                                          g$t$12362$RyrJs))))
                                                                    (g$syntax-dispatch$9686$RyrJs
                                                                      g$t$12362$RyrJs
                                                                      '(any any
                                                                            any)))))
                                                                g$t$12350$RyrJs))))
                                                          (g$syntax-dispatch$9686$RyrJs
                                                            g$t$12350$RyrJs
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$12341$RyrJs))))
                                                (g$syntax-dispatch$9686$RyrJs
                                                  g$t$12341$RyrJs
                                                  '(any any
                                                        .
                                                        each-any)))))
                                            g$t$12326$RyrJs))))
                                      (g$syntax-dispatch$9686$RyrJs
                                        g$t$12326$RyrJs
                                        '(any any
                                              .
                                              #(each (any any)))))))
                                  g$t$12320$RyrJs))))
                            (g$syntax-dispatch$9686$RyrJs
                              g$t$12320$RyrJs
                              '(any . each-any)))))
                        g$spec$12319$RyrJs))))
                  (g$add-imports!$12307$RyrJs
                    (case-lambda
                      ((g$imp$12311$RyrJs g$h$12312$RyrJs)
                       ((case-lambda
                          ((g$subst$12313$RyrJs)
                           (g$for-each$5808$RyrJs
                             (case-lambda
                               ((g$x$12314$RyrJs)
                                ((case-lambda
                                   ((g$name$12315$RyrJs
                                      g$label$12316$RyrJs)
                                    ((case-lambda
                                       ((g$t$12317$RyrJs)
                                        (if g$t$12317$RyrJs
                                          ((case-lambda
                                             ((g$l$12318$RyrJs)
                                              (if (not (eq? g$l$12318$RyrJs
                                                            g$label$12316$RyrJs))
                                                (g$dup-error$12298$RyrJs
                                                  g$name$12315$RyrJs)
                                                (void))))
                                           g$t$12317$RyrJs)
                                          (g$hashtable-set!$6560$RyrJs
                                            g$h$12312$RyrJs
                                            g$name$12315$RyrJs
                                            g$label$12316$RyrJs))))
                                     (g$hashtable-ref$6559$RyrJs
                                       g$h$12312$RyrJs
                                       g$name$12315$RyrJs
                                       '#f))))
                                 (car g$x$12314$RyrJs)
                                 (cdr g$x$12314$RyrJs))))
                             g$subst$12313$RyrJs)))
                        (g$get-import$12306$RyrJs
                          g$imp$12311$RyrJs))))))
          ((letrec ((g$f$12308$RyrJs
                      (case-lambda
                        ((g$imp*$12309$RyrJs g$h$12310$RyrJs)
                         (if (null? g$imp*$12309$RyrJs)
                           (hashtable-entries g$h$12310$RyrJs)
                           (begin
                             (g$add-imports!$12307$RyrJs
                               (car g$imp*$12309$RyrJs)
                               g$h$12310$RyrJs)
                             (g$f$12308$RyrJs
                               (cdr g$imp*$12309$RyrJs)
                               g$h$12310$RyrJs)))))))
             g$f$12308$RyrJs)
           g$imp*$12296$RyrJs
           (g$make-eq-hashtable$6556$RyrJs))))))
   (g$make-top-rib$9739$RyrJs
     g$make-top-rib$13327$RyrJs
     (case-lambda
       ((g$names$12558$RyrJs g$labels$12559$RyrJs)
        ((case-lambda
           ((g$rib$12560$RyrJs)
            (begin
              (g$vector-for-each$6517$RyrJs
                (case-lambda
                  ((g$name$12561$RyrJs g$label$12562$RyrJs)
                   (begin
                     (if (not (g$symbol?$6456$RyrJs g$name$12561$RyrJs))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$12561$RyrJs)
                       (void))
                     (g$extend-rib/nc!$9285$RyrJs
                       g$rib$12560$RyrJs
                       (g$make-stx$9296$RyrJs
                         g$name$12561$RyrJs
                         g$top-mark*$9256$RyrJs
                         '()
                         '())
                       g$label$12562$RyrJs))))
                g$names$12558$RyrJs
                g$labels$12559$RyrJs)
              g$rib$12560$RyrJs)))
         (g$make-cache-rib$9282$RyrJs)))))
   (g$make-collector$9740$RyrJs
     g$make-collector$13328$RyrJs
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$12563$RyrJs)
            (case-lambda
              (() g$ls$12563$RyrJs)
              ((g$x$12564$RyrJs)
               (set! g$ls$12563$RyrJs
                 (g$set-cons$9253$RyrJs
                   g$x$12564$RyrJs
                   g$ls$12563$RyrJs))))))
         '()))))
   (g$inv-collector$9741$RyrJs
     g$inv-collector$13329$RyrJs
     (g$make-parameter$8229$RyrJs
       (case-lambda
         (g$args$12565$RyrJs
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12566$RyrJs)
          (begin
            (if (not (g$procedure?$6458$RyrJs g$x$12566$RyrJs))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$12566$RyrJs)
              (void))
            g$x$12566$RyrJs)))))
   (g$vis-collector$9742$RyrJs
     g$vis-collector$13330$RyrJs
     (g$make-parameter$8229$RyrJs
       (case-lambda
         (g$args$12567$RyrJs
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12568$RyrJs)
          (begin
            (if (not (g$procedure?$6458$RyrJs g$x$12568$RyrJs))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$12568$RyrJs)
              (void))
            g$x$12568$RyrJs)))))
   (g$imp-collector$9743$RyrJs
     g$imp-collector$13331$RyrJs
     (g$make-parameter$8229$RyrJs
       (case-lambda
         (g$args$12569$RyrJs
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12570$RyrJs)
          (begin
            (if (not (g$procedure?$6458$RyrJs g$x$12570$RyrJs))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$12570$RyrJs)
              (void))
            g$x$12570$RyrJs)))))
   (g$chi-library-internal$9744$RyrJs
     g$chi-library-internal$13332$RyrJs
     (case-lambda
       ((g$e*$12571$RyrJs g$rib$12572$RyrJs g$mix?$12573$RyrJs)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$9733$RyrJs
               g$e*$12571$RyrJs
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$12572$RyrJs
               g$mix?$12573$RyrJs
               '#t)))
          (case-lambda
            ((g$e*$12582$RyrJs
               g$r$12583$RyrJs
               g$mr$12584$RyrJs
               g$lex*$12585$RyrJs
               g$rhs*$12586$RyrJs
               g$mod**$12587$RyrJs
               g$_kwd*$12588$RyrJs
               g$exp*$12589$RyrJs)
             ((case-lambda
                ((g$exp*$12590$RyrJs
                   g$_kwd*$12591$RyrJs
                   g$mod**$12592$RyrJs
                   g$rhs*$12593$RyrJs
                   g$lex*$12594$RyrJs
                   g$mr$12595$RyrJs
                   g$r$12596$RyrJs
                   g$e*$12597$RyrJs)
                 (values
                   (append
                     (apply
                       append
                       (g$reverse$6463$RyrJs g$mod**$12592$RyrJs))
                     g$e*$12597$RyrJs)
                   g$r$12596$RyrJs
                   g$mr$12595$RyrJs
                   (g$reverse$6463$RyrJs g$lex*$12594$RyrJs)
                   (g$reverse$6463$RyrJs g$rhs*$12593$RyrJs)
                   g$exp*$12590$RyrJs)))
              g$exp*$12589$RyrJs
              g$_kwd*$12588$RyrJs
              g$mod**$12587$RyrJs
              g$rhs*$12586$RyrJs
              g$lex*$12585$RyrJs
              g$mr$12584$RyrJs
              g$r$12583$RyrJs
              g$e*$12582$RyrJs)))))))
   (g$chi-interaction-expr$9745$RyrJs
     g$chi-interaction-expr$13333$RyrJs
     (case-lambda
       ((g$e$12598$RyrJs g$rib$12599$RyrJs g$r$12600$RyrJs)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$9733$RyrJs
               (list g$e$12598$RyrJs)
               g$r$12600$RyrJs
               g$r$12600$RyrJs
               '()
               '()
               '()
               '()
               '()
               g$rib$12599$RyrJs
               '#t
               '#f)))
          (case-lambda
            ((g$e*$12609$RyrJs
               g$r$12610$RyrJs
               g$mr$12611$RyrJs
               g$lex*$12612$RyrJs
               g$rhs*$12613$RyrJs
               g$mod**$12614$RyrJs
               g$_kwd*$12615$RyrJs
               g$_exp*$12616$RyrJs)
             ((case-lambda
                ((g$_exp*$12617$RyrJs
                   g$_kwd*$12618$RyrJs
                   g$mod**$12619$RyrJs
                   g$rhs*$12620$RyrJs
                   g$lex*$12621$RyrJs
                   g$mr$12622$RyrJs
                   g$r$12623$RyrJs
                   g$e*$12624$RyrJs)
                 ((case-lambda
                    ((g$e*$12625$RyrJs)
                     ((case-lambda
                        ((g$e$12626$RyrJs)
                         (values g$e$12626$RyrJs g$r$12623$RyrJs)))
                      (if (null? g$e*$12625$RyrJs)
                        (g$build-void$9249$RyrJs)
                        (if (null? (cdr g$e*$12625$RyrJs))
                          (car g$e*$12625$RyrJs)
                          (g$build-sequence$9248$RyrJs
                            '#f
                            g$e*$12625$RyrJs))))))
                  (g$expand-interaction-rhs*/init*$9711$RyrJs
                    (g$reverse$6463$RyrJs g$lex*$12621$RyrJs)
                    (g$reverse$6463$RyrJs g$rhs*$12620$RyrJs)
                    (append
                      (apply
                        append
                        (g$reverse$6463$RyrJs g$mod**$12619$RyrJs))
                      g$e*$12624$RyrJs)
                    g$r$12623$RyrJs
                    g$mr$12622$RyrJs))))
              g$_exp*$12616$RyrJs
              g$_kwd*$12615$RyrJs
              g$mod**$12614$RyrJs
              g$rhs*$12613$RyrJs
              g$lex*$12612$RyrJs
              g$mr$12611$RyrJs
              g$r$12610$RyrJs
              g$e*$12609$RyrJs)))))))
   (g$library-body-expander$9746$RyrJs
     g$library-body-expander$13334$RyrJs
     (case-lambda
       ((g$name$12627$RyrJs
          g$main-exp*$12628$RyrJs
          g$imp*$12629$RyrJs
          g$b*$12630$RyrJs
          g$mix?$12631$RyrJs)
        (letrec* ((g$itc$12632$RyrJs (g$make-collector$9740$RyrJs)))
          ((case-lambda
             ((g$imp-collector$12637$RyrJs
                g$top-level-context$12638$RyrJs
                g$imp-collector$12639$RyrJs
                g$top-level-context$12640$RyrJs)
              ((case-lambda
                 ((g$swap$12641$RyrJs)
                  (dynamic-wind
                    g$swap$12641$RyrJs
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$9738$RyrJs
                              g$imp*$12629$RyrJs)))
                         (case-lambda
                           ((g$subst-names$12644$RyrJs
                              g$subst-labels$12645$RyrJs)
                            ((case-lambda
                               ((g$subst-labels$12646$RyrJs
                                  g$subst-names$12647$RyrJs)
                                ((case-lambda
                                   ((g$rib$12648$RyrJs)
                                    (letrec* ((g$wrap$12649$RyrJs
                                                (case-lambda
                                                  ((g$x$12711$RyrJs)
                                                   (g$make-stx$9296$RyrJs
                                                     g$x$12711$RyrJs
                                                     g$top-mark*$9256$RyrJs
                                                     (list
                                                       g$rib$12648$RyrJs)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$12650$RyrJs
                                            g$main-exp*$12651$RyrJs
                                            g$rtc$12652$RyrJs
                                            g$vtc$12653$RyrJs)
                                          ((case-lambda
                                             ((g$inv-collector$12658$RyrJs
                                                g$vis-collector$12659$RyrJs
                                                g$inv-collector$12660$RyrJs
                                                g$vis-collector$12661$RyrJs)
                                              ((case-lambda
                                                 ((g$swap$12662$RyrJs)
                                                  (dynamic-wind
                                                    g$swap$12662$RyrJs
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$9744$RyrJs
                                                              g$b*$12650$RyrJs
                                                              g$rib$12648$RyrJs
                                                              g$mix?$12631$RyrJs)))
                                                         (case-lambda
                                                           ((g$init*$12669$RyrJs
                                                              g$r$12670$RyrJs
                                                              g$mr$12671$RyrJs
                                                              g$lex*$12672$RyrJs
                                                              g$rhs*$12673$RyrJs
                                                              g$internal-exp*$12674$RyrJs)
                                                            ((case-lambda
                                                               ((g$internal-exp*$12675$RyrJs
                                                                  g$rhs*$12676$RyrJs
                                                                  g$lex*$12677$RyrJs
                                                                  g$mr$12678$RyrJs
                                                                  g$r$12679$RyrJs
                                                                  g$init*$12680$RyrJs)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$9735$RyrJs
                                                                       (append
                                                                         g$main-exp*$12651$RyrJs
                                                                         g$internal-exp*$12675$RyrJs))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$12683$RyrJs
                                                                       g$exp-id*$12684$RyrJs)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$12685$RyrJs
                                                                           g$exp-name*$12686$RyrJs)
                                                                         (begin
                                                                           (g$seal-rib!$9287$RyrJs
                                                                             g$rib$12648$RyrJs)
                                                                           ((case-lambda
                                                                              ((g$init*$12687$RyrJs)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$12688$RyrJs)
                                                                                   (begin
                                                                                     (g$unseal-rib!$9288$RyrJs
                                                                                       g$rib$12648$RyrJs)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$12689$RyrJs
                                                                                           g$export-subst$12690$RyrJs)
                                                                                         (letrec* ((g$errstr$12691$RyrJs
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$9794$RyrJs
                                                                                                  g$lex*$12677$RyrJs
                                                                                                  g$loc*$12689$RyrJs
                                                                                                  g$r$12679$RyrJs)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$12695$RyrJs
                                                                                                  g$global*$12696$RyrJs
                                                                                                  g$macro*$12697$RyrJs)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$12698$RyrJs
                                                                                                      g$global*$12699$RyrJs
                                                                                                      g$export-env$12700$RyrJs)
                                                                                                    (begin
                                                                                                      (g$for-each$5808$RyrJs
                                                                                                        (case-lambda
                                                                                                          ((g$s$12701$RyrJs)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$12702$RyrJs
                                                                                                                 g$label$12703$RyrJs)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$12704$RyrJs)
                                                                                                                   (if g$p$12704$RyrJs
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$12705$RyrJs)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$12706$RyrJs)
                                                                                                                             (if (eq? g$type$12706$RyrJs
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$9805$RyrJs
                                                                                                                                 'export
                                                                                                                                 g$errstr$12691$RyrJs
                                                                                                                                 g$name$12702$RyrJs)
                                                                                                                               (void))))
                                                                                                                          (car g$b$12705$RyrJs))))
                                                                                                                      (cdr g$p$12704$RyrJs))
                                                                                                                     (void))))
                                                                                                                (g$assq$5795$RyrJs
                                                                                                                  g$label$12703$RyrJs
                                                                                                                  g$export-env$12700$RyrJs))))
                                                                                                            (car g$s$12701$RyrJs)
                                                                                                            (cdr g$s$12701$RyrJs))))
                                                                                                        g$export-subst$12690$RyrJs)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$12707$RyrJs
                                                                                                            g$invoke-definitions$12708$RyrJs)
                                                                                                          (values
                                                                                                            (g$itc$12632$RyrJs)
                                                                                                            (g$rtc$12652$RyrJs)
                                                                                                            (g$vtc$12653$RyrJs)
                                                                                                            (g$build-sequence$9248$RyrJs
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$12708$RyrJs
                                                                                                                (list
                                                                                                                  g$invoke-body$12707$RyrJs)))
                                                                                                            g$macro*$12698$RyrJs
                                                                                                            g$export-subst$12690$RyrJs
                                                                                                            g$export-env$12700$RyrJs)))
                                                                                                       (g$build-library-letrec*$9252$RyrJs
                                                                                                         '#f
                                                                                                         g$name$12627$RyrJs
                                                                                                         g$lex*$12677$RyrJs
                                                                                                         g$loc*$12689$RyrJs
                                                                                                         g$rhs*$12688$RyrJs
                                                                                                         (if (null?
                                                                                                               g$init*$12687$RyrJs)
                                                                                                           (g$build-void$9249$RyrJs)
                                                                                                           (g$build-sequence$9248$RyrJs
                                                                                                             '#f
                                                                                                             g$init*$12687$RyrJs)))
                                                                                                       (g$map$5807$RyrJs
                                                                                                         g$build-global-define$9244$RyrJs
                                                                                                         (g$map$5807$RyrJs
                                                                                                           cdr
                                                                                                           g$global*$12699$RyrJs))))))
                                                                                                 g$macro*$12697$RyrJs
                                                                                                 g$global*$12696$RyrJs
                                                                                                 g$export-env$12695$RyrJs)))))))
                                                                                      (g$map$5807$RyrJs
                                                                                        g$gen-global$9259$RyrJs
                                                                                        g$lex*$12677$RyrJs)
                                                                                      (g$make-export-subst$9793$RyrJs
                                                                                        g$exp-name*$12686$RyrJs
                                                                                        g$exp-id*$12685$RyrJs)))))
                                                                                (g$chi-rhs*$9712$RyrJs
                                                                                  g$rhs*$12676$RyrJs
                                                                                  g$r$12679$RyrJs
                                                                                  g$mr$12678$RyrJs))))
                                                                            (g$chi-expr*$9702$RyrJs
                                                                              g$init*$12680$RyrJs
                                                                              g$r$12679$RyrJs
                                                                              g$mr$12678$RyrJs)))))
                                                                      g$exp-id*$12684$RyrJs
                                                                      g$exp-name*$12683$RyrJs))))))
                                                             g$internal-exp*$12674$RyrJs
                                                             g$rhs*$12673$RyrJs
                                                             g$lex*$12672$RyrJs
                                                             g$mr$12671$RyrJs
                                                             g$r$12670$RyrJs
                                                             g$init*$12669$RyrJs))))))
                                                    g$swap$12662$RyrJs)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$12709$RyrJs)
                                                        (begin
                                                          (g$inv-collector$12658$RyrJs
                                                            g$inv-collector$12660$RyrJs)
                                                          (set! g$inv-collector$12660$RyrJs
                                                            g$t$12709$RyrJs))))
                                                     (g$inv-collector$12658$RyrJs))
                                                    ((case-lambda
                                                       ((g$t$12710$RyrJs)
                                                        (begin
                                                          (g$vis-collector$12659$RyrJs
                                                            g$vis-collector$12661$RyrJs)
                                                          (set! g$vis-collector$12661$RyrJs
                                                            g$t$12710$RyrJs))))
                                                     (g$vis-collector$12659$RyrJs))))))))
                                           g$inv-collector$9741$RyrJs
                                           g$vis-collector$9742$RyrJs
                                           g$rtc$12652$RyrJs
                                           g$vtc$12653$RyrJs)))
                                       (g$map$5807$RyrJs
                                         g$wrap$12649$RyrJs
                                         g$b*$12630$RyrJs)
                                       (g$map$5807$RyrJs
                                         g$wrap$12649$RyrJs
                                         g$main-exp*$12628$RyrJs)
                                       (g$make-collector$9740$RyrJs)
                                       (g$make-collector$9740$RyrJs)))))
                                 (g$make-top-rib$9739$RyrJs
                                   g$subst-names$12647$RyrJs
                                   g$subst-labels$12646$RyrJs))))
                             g$subst-labels$12645$RyrJs
                             g$subst-names$12644$RyrJs))))))
                    g$swap$12641$RyrJs)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$12712$RyrJs)
                        (begin
                          (g$imp-collector$12637$RyrJs
                            g$imp-collector$12639$RyrJs)
                          (set! g$imp-collector$12639$RyrJs
                            g$t$12712$RyrJs))))
                     (g$imp-collector$12637$RyrJs))
                    ((case-lambda
                       ((g$t$12713$RyrJs)
                        (begin
                          (g$top-level-context$12638$RyrJs
                            g$top-level-context$12640$RyrJs)
                          (set! g$top-level-context$12640$RyrJs
                            g$t$12713$RyrJs))))
                     (g$top-level-context$12638$RyrJs))))))))
           g$imp-collector$9743$RyrJs
           g$top-level-context$9813$RyrJs
           g$itc$12632$RyrJs
           '#f)))))
   (g$core-library-expander$9747$RyrJs
     g$core-library-expander$13335$RyrJs
     (case-lambda
       ((g$e$12714$RyrJs g$verify-name$12715$RyrJs)
        (call-with-values
          (case-lambda
            (() (g$parse-library$9737$RyrJs g$e$12714$RyrJs)))
          (case-lambda
            ((g$name*$12720$RyrJs
               g$exp*$12721$RyrJs
               g$imp*$12722$RyrJs
               g$b*$12723$RyrJs)
             ((case-lambda
                ((g$b*$12724$RyrJs
                   g$imp*$12725$RyrJs
                   g$exp*$12726$RyrJs
                   g$name*$12727$RyrJs)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$9736$RyrJs
                        g$name*$12727$RyrJs)))
                   (case-lambda
                     ((g$name$12730$RyrJs g$ver$12731$RyrJs)
                      ((case-lambda
                         ((g$ver$12732$RyrJs g$name$12733$RyrJs)
                          (begin
                            (g$verify-name$12715$RyrJs
                              g$name$12733$RyrJs)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$9746$RyrJs
                                   g$name$12733$RyrJs
                                   g$exp*$12726$RyrJs
                                   g$imp*$12725$RyrJs
                                   g$b*$12724$RyrJs
                                   '#f)))
                              (case-lambda
                                ((g$imp*$12741$RyrJs
                                   g$invoke-req*$12742$RyrJs
                                   g$visit-req*$12743$RyrJs
                                   g$invoke-code$12744$RyrJs
                                   g$visit-code$12745$RyrJs
                                   g$export-subst$12746$RyrJs
                                   g$export-env$12747$RyrJs)
                                 ((case-lambda
                                    ((g$export-env$12748$RyrJs
                                       g$export-subst$12749$RyrJs
                                       g$visit-code$12750$RyrJs
                                       g$invoke-code$12751$RyrJs
                                       g$visit-req*$12752$RyrJs
                                       g$invoke-req*$12753$RyrJs
                                       g$imp*$12754$RyrJs)
                                     (values
                                       g$name$12733$RyrJs
                                       g$ver$12732$RyrJs
                                       g$imp*$12754$RyrJs
                                       g$invoke-req*$12753$RyrJs
                                       g$visit-req*$12752$RyrJs
                                       g$invoke-code$12751$RyrJs
                                       g$visit-code$12750$RyrJs
                                       g$export-subst$12749$RyrJs
                                       g$export-env$12748$RyrJs)))
                                  g$export-env$12747$RyrJs
                                  g$export-subst$12746$RyrJs
                                  g$visit-code$12745$RyrJs
                                  g$invoke-code$12744$RyrJs
                                  g$visit-req*$12743$RyrJs
                                  g$invoke-req*$12742$RyrJs
                                  g$imp*$12741$RyrJs)))))))
                       g$ver$12731$RyrJs
                       g$name$12730$RyrJs))))))
              g$b*$12723$RyrJs
              g$imp*$12722$RyrJs
              g$exp*$12721$RyrJs
              g$name*$12720$RyrJs)))))))
   (g$parse-top-level-program$9748$RyrJs
     g$parse-top-level-program$13336$RyrJs
     (case-lambda
       ((g$e*$12755$RyrJs)
        ((case-lambda
           ((g$t$12756$RyrJs)
            ((case-lambda
               ((g$ls/false$12757$RyrJs)
                (if (if g$ls/false$12757$RyrJs
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$12758$RyrJs
                               g$imp*$12759$RyrJs
                               g$b*$12760$RyrJs)
                             (eq? (g$syntax->datum$9808$RyrJs
                                    g$import$12758$RyrJs)
                                  'import)))
                          g$ls/false$12757$RyrJs))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$12761$RyrJs
                         g$imp*$12762$RyrJs
                         g$b*$12763$RyrJs)
                       (values g$imp*$12762$RyrJs g$b*$12763$RyrJs)))
                    g$ls/false$12757$RyrJs)
                  ((case-lambda
                     ((g$t$12764$RyrJs)
                      ((case-lambda
                         ((g$ls/false$12765$RyrJs)
                          (if (if g$ls/false$12765$RyrJs
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$12766$RyrJs
                                         g$x$12767$RyrJs
                                         g$y$12768$RyrJs)
                                       (eq? (g$syntax->datum$9808$RyrJs
                                              g$import$12766$RyrJs)
                                            'import)))
                                    g$ls/false$12765$RyrJs))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$12769$RyrJs
                                   g$x$12770$RyrJs
                                   g$y$12771$RyrJs)
                                 (g$syntax-violation$9805$RyrJs
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$9320$RyrJs
                                     g$e*$12755$RyrJs))))
                              g$ls/false$12765$RyrJs)
                            ((case-lambda
                               ((g$t$12772$RyrJs)
                                ((case-lambda
                                   ((g$ls/false$12773$RyrJs)
                                    (if g$ls/false$12773$RyrJs
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$12773$RyrJs)
                                      (g$syntax-violation$9805$RyrJs
                                        '#f
                                        '"invalid syntax"
                                        g$t$12772$RyrJs))))
                                 (g$syntax-dispatch$9686$RyrJs
                                   g$t$12772$RyrJs
                                   '_))))
                             g$t$12764$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$12764$RyrJs
                         '((any . any) . any)))))
                   g$t$12756$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs
               g$t$12756$RyrJs
               '((any . each-any) . each-any)))))
         g$e*$12755$RyrJs))))
   (g$top-level-expander$9749$RyrJs
     g$top-level-expander$13337$RyrJs
     (case-lambda
       ((g$e*$12774$RyrJs)
        (call-with-values
          (case-lambda
            (()
             (g$parse-top-level-program$9748$RyrJs g$e*$12774$RyrJs)))
          (case-lambda
            ((g$imp*$12777$RyrJs g$b*$12778$RyrJs)
             ((case-lambda
                ((g$b*$12779$RyrJs g$imp*$12780$RyrJs)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$9746$RyrJs
                        '()
                        '()
                        g$imp*$12780$RyrJs
                        g$b*$12779$RyrJs
                        '#t)))
                   (case-lambda
                     ((g$imp*$12788$RyrJs
                        g$invoke-req*$12789$RyrJs
                        g$visit-req*$12790$RyrJs
                        g$invoke-code$12791$RyrJs
                        g$visit-code$12792$RyrJs
                        g$export-subst$12793$RyrJs
                        g$export-env$12794$RyrJs)
                      ((case-lambda
                         ((g$export-env$12795$RyrJs
                            g$export-subst$12796$RyrJs
                            g$visit-code$12797$RyrJs
                            g$invoke-code$12798$RyrJs
                            g$visit-req*$12799$RyrJs
                            g$invoke-req*$12800$RyrJs
                            g$imp*$12801$RyrJs)
                          (values
                            g$invoke-req*$12800$RyrJs
                            g$invoke-code$12798$RyrJs)))
                       g$export-env$12794$RyrJs
                       g$export-subst$12793$RyrJs
                       g$visit-code$12792$RyrJs
                       g$invoke-code$12791$RyrJs
                       g$visit-req*$12790$RyrJs
                       g$invoke-req*$12789$RyrJs
                       g$imp*$12788$RyrJs))))))
              g$b*$12778$RyrJs
              g$imp*$12777$RyrJs)))))))
   (g$8017$9750$RyrJs
     g$8017$13338$RyrJs
     (make-record-type-descriptor
       'env
       '#f
       'g$8020$RyrJs
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8019$9751$RyrJs g$8019$13339$RyrJs '#f)
   (g$8018$9752$RyrJs
     g$8018$13340$RyrJs
     (make-record-constructor-descriptor
       g$8017$9750$RyrJs
       '#f
       g$8019$9751$RyrJs))
   (g$env?$9755$RyrJs
     g$env?$13341$RyrJs
     (record-predicate g$8017$9750$RyrJs))
   (g$make-env$9756$RyrJs
     g$make-env$13342$RyrJs
     (record-constructor g$8018$9752$RyrJs))
   (g$env-names$9757$RyrJs
     g$env-names$13343$RyrJs
     (record-accessor g$8017$9750$RyrJs '0))
   (g$env-labels$9758$RyrJs
     g$env-labels$13344$RyrJs
     (record-accessor g$8017$9750$RyrJs '1))
   (g$env-itc$9759$RyrJs
     g$env-itc$13345$RyrJs
     (record-accessor g$8017$9750$RyrJs '2))
   (g$set-env-names!$9760$RyrJs
     g$set-env-names!$13346$RyrJs
     (record-mutator g$8017$9750$RyrJs '0))
   (g$set-env-labels!$9761$RyrJs
     g$set-env-labels!$13347$RyrJs
     (record-mutator g$8017$9750$RyrJs '1))
   (g$set-env-itc!$9762$RyrJs
     g$set-env-itc!$13348$RyrJs
     (record-mutator g$8017$9750$RyrJs '2))
   (g$rp$9763$RyrJs
     g$rp$13349$RyrJs
     (make-record-printer
       'env
       (case-lambda
         ((g$x$12802$RyrJs g$p$12803$RyrJs g$wr$12804$RyrJs)
          (display '"#<environment>" g$p$12803$RyrJs)))))
   (g$8034$9764$RyrJs
     g$8034$13350$RyrJs
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8037$RyrJs
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8036$9765$RyrJs g$8036$13351$RyrJs '#f)
   (g$8035$9766$RyrJs
     g$8035$13352$RyrJs
     (make-record-constructor-descriptor
       g$8034$9764$RyrJs
       '#f
       g$8036$9765$RyrJs))
   (g$interaction-env?$9769$RyrJs
     g$interaction-env?$13353$RyrJs
     (record-predicate g$8034$9764$RyrJs))
   (g$make-interaction-env$9770$RyrJs
     g$make-interaction-env$13354$RyrJs
     (record-constructor g$8035$9766$RyrJs))
   (g$interaction-env-rib$9771$RyrJs
     g$interaction-env-rib$13355$RyrJs
     (record-accessor g$8034$9764$RyrJs '0))
   (g$interaction-env-r$9772$RyrJs
     g$interaction-env-r$13356$RyrJs
     (record-accessor g$8034$9764$RyrJs '1))
   (g$interaction-env-locs$9773$RyrJs
     g$interaction-env-locs$13357$RyrJs
     (record-accessor g$8034$9764$RyrJs '2))
   (g$set-interaction-env-rib!$9774$RyrJs
     g$set-interaction-env-rib!$13358$RyrJs
     (record-mutator g$8034$9764$RyrJs '0))
   (g$set-interaction-env-r!$9775$RyrJs
     g$set-interaction-env-r!$13359$RyrJs
     (record-mutator g$8034$9764$RyrJs '1))
   (g$set-interaction-env-locs!$9776$RyrJs
     g$set-interaction-env-locs!$13360$RyrJs
     (record-mutator g$8034$9764$RyrJs '2))
   (g$rp$9777$RyrJs
     g$rp$13361$RyrJs
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$12805$RyrJs g$p$12806$RyrJs g$wr$12807$RyrJs)
          (display '"#<environment>" g$p$12806$RyrJs)))))
   (g$interaction-environment-symbols$9778$RyrJs
     g$interaction-environment-symbols$13362$RyrJs
     (case-lambda
       (()
        (g$environment-symbols$9782$RyrJs
          (g$interaction-environment$9812$RyrJs)))))
   (g$environment-bindings$9779$RyrJs
     g$environment-bindings$13363$RyrJs
     (case-lambda
       ((g$e$12808$RyrJs)
        (vector->list
          (g$vector-map$6516$RyrJs
            (case-lambda
              ((g$name$12809$RyrJs g$label$12810$RyrJs)
               (g$parse-binding$9780$RyrJs
                 (cons
                   g$name$12809$RyrJs
                   (g$imported-label->binding$9061$RyrJs
                     g$label$12810$RyrJs)))))
            (g$env-names$9757$RyrJs g$e$12808$RyrJs)
            (g$env-labels$9758$RyrJs g$e$12808$RyrJs))))))
   (g$parse-binding$9780$RyrJs
     g$parse-binding$13364$RyrJs
     (case-lambda
       ((g$b$12811$RyrJs)
        (cons
          (car g$b$12811$RyrJs)
          ((case-lambda
             ((g$t$12812$RyrJs)
              (if (g$memv$5800$RyrJs
                    g$t$12812$RyrJs
                    '(core-prim global))
                'procedure
                (if (g$memv$5800$RyrJs
                      g$t$12812$RyrJs
                      '(core-macro macro global-macro))
                  'syntax
                  (if (eqv? g$t$12812$RyrJs '$core-rtd)
                    'record
                    (if (eq? (car g$b$12811$RyrJs)
                             (g$cadr$6465$RyrJs g$b$12811$RyrJs))
                      'syntax
                      'unknown))))))
           (g$cadr$6465$RyrJs g$b$12811$RyrJs))))))
   (g$environment?$9781$RyrJs
     g$environment?$13365$RyrJs
     (case-lambda
       ((g$x$12813$RyrJs)
        ((case-lambda
           ((g$t$12814$RyrJs)
            (if g$t$12814$RyrJs
              g$t$12814$RyrJs
              (begin
                '#f
                (g$interaction-env?$9769$RyrJs g$x$12813$RyrJs)))))
         (g$env?$9755$RyrJs g$x$12813$RyrJs)))))
   (g$environment-symbols$9782$RyrJs
     g$environment-symbols$13366$RyrJs
     (case-lambda
       ((g$x$12815$RyrJs)
        (if (g$env?$9755$RyrJs g$x$12815$RyrJs)
          (vector->list (g$env-names$9757$RyrJs g$x$12815$RyrJs))
          (if (g$interaction-env?$9769$RyrJs g$x$12815$RyrJs)
            (g$map$5807$RyrJs
              values
              (g$rib-sym*$9271$RyrJs
                (g$interaction-env-rib$9771$RyrJs g$x$12815$RyrJs)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$12815$RyrJs))))))
   (g$environment$9783$RyrJs
     g$environment$13367$RyrJs
     (case-lambda
       (g$imp*$12816$RyrJs
        ((case-lambda
           ((g$itc$12817$RyrJs)
            ((case-lambda
               ((g$imp-collector$12820$RyrJs
                  g$imp-collector$12821$RyrJs)
                ((case-lambda
                   ((g$swap$12822$RyrJs)
                    (dynamic-wind
                      g$swap$12822$RyrJs
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$9738$RyrJs
                                g$imp*$12816$RyrJs)))
                           (case-lambda
                             ((g$subst-names$12825$RyrJs
                                g$subst-labels$12826$RyrJs)
                              ((case-lambda
                                 ((g$subst-labels$12827$RyrJs
                                    g$subst-names$12828$RyrJs)
                                  (g$make-env$9756$RyrJs
                                    g$subst-names$12828$RyrJs
                                    g$subst-labels$12827$RyrJs
                                    g$itc$12817$RyrJs)))
                               g$subst-labels$12826$RyrJs
                               g$subst-names$12825$RyrJs))))))
                      g$swap$12822$RyrJs)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$12829$RyrJs)
                        (begin
                          (g$imp-collector$12820$RyrJs
                            g$imp-collector$12821$RyrJs)
                          (set! g$imp-collector$12821$RyrJs
                            g$t$12829$RyrJs))))
                     (g$imp-collector$12820$RyrJs)))))))
             g$imp-collector$9743$RyrJs
             g$itc$12817$RyrJs)))
         (g$make-collector$9740$RyrJs)))))
   (g$null-environment$9784$RyrJs
     g$null-environment$13368$RyrJs
     (case-lambda
       ((g$n$12830$RyrJs)
        (begin
          (if (not (eqv? g$n$12830$RyrJs '5))
            (assertion-violation
              'null-environment
              '"not 5"
              g$n$12830$RyrJs)
            (void))
          (g$environment$9783$RyrJs '(psyntax null-environment-5))))))
   (g$scheme-report-environment$9785$RyrJs
     g$scheme-report-environment$13369$RyrJs
     (case-lambda
       ((g$n$12831$RyrJs)
        (begin
          (if (not (eqv? g$n$12831$RyrJs '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$12831$RyrJs)
            (void))
          (g$environment$9783$RyrJs
            '(psyntax scheme-report-environment-5))))))
   (g$expand$9786$RyrJs
     g$expand$13370$RyrJs
     (case-lambda
       ((g$x$12832$RyrJs g$env$12833$RyrJs)
        (if (g$env?$9755$RyrJs g$env$12833$RyrJs)
          ((case-lambda
             ((g$rib$12834$RyrJs)
              ((case-lambda
                 ((g$x$12835$RyrJs
                    g$itc$12836$RyrJs
                    g$rtc$12837$RyrJs
                    g$vtc$12838$RyrJs)
                  ((case-lambda
                     ((g$x$12839$RyrJs)
                      (begin
                        (g$seal-rib!$9287$RyrJs g$rib$12834$RyrJs)
                        (values g$x$12839$RyrJs (g$rtc$12837$RyrJs)))))
                   ((case-lambda
                      ((g$top-level-context$12848$RyrJs
                         g$inv-collector$12849$RyrJs
                         g$vis-collector$12850$RyrJs
                         g$imp-collector$12851$RyrJs
                         g$top-level-context$12852$RyrJs
                         g$inv-collector$12853$RyrJs
                         g$vis-collector$12854$RyrJs
                         g$imp-collector$12855$RyrJs)
                       ((case-lambda
                          ((g$swap$12856$RyrJs)
                           (dynamic-wind
                             g$swap$12856$RyrJs
                             (case-lambda
                               (()
                                (g$chi-expr$9704$RyrJs
                                  g$x$12835$RyrJs
                                  '()
                                  '())))
                             g$swap$12856$RyrJs)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$12857$RyrJs)
                                 (begin
                                   (g$top-level-context$12848$RyrJs
                                     g$top-level-context$12852$RyrJs)
                                   (set! g$top-level-context$12852$RyrJs
                                     g$t$12857$RyrJs))))
                              (g$top-level-context$12848$RyrJs))
                             ((case-lambda
                                ((g$t$12858$RyrJs)
                                 (begin
                                   (g$inv-collector$12849$RyrJs
                                     g$inv-collector$12853$RyrJs)
                                   (set! g$inv-collector$12853$RyrJs
                                     g$t$12858$RyrJs))))
                              (g$inv-collector$12849$RyrJs))
                             ((case-lambda
                                ((g$t$12859$RyrJs)
                                 (begin
                                   (g$vis-collector$12850$RyrJs
                                     g$vis-collector$12854$RyrJs)
                                   (set! g$vis-collector$12854$RyrJs
                                     g$t$12859$RyrJs))))
                              (g$vis-collector$12850$RyrJs))
                             ((case-lambda
                                ((g$t$12860$RyrJs)
                                 (begin
                                   (g$imp-collector$12851$RyrJs
                                     g$imp-collector$12855$RyrJs)
                                   (set! g$imp-collector$12855$RyrJs
                                     g$t$12860$RyrJs))))
                              (g$imp-collector$12851$RyrJs))))))))
                    g$top-level-context$9813$RyrJs
                    g$inv-collector$9741$RyrJs
                    g$vis-collector$9742$RyrJs
                    g$imp-collector$9743$RyrJs
                    '#f
                    g$rtc$12837$RyrJs
                    g$vtc$12838$RyrJs
                    g$itc$12836$RyrJs))))
               (g$make-stx$9296$RyrJs
                 g$x$12832$RyrJs
                 g$top-mark*$9256$RyrJs
                 (list g$rib$12834$RyrJs)
                 '())
               (g$env-itc$9759$RyrJs g$env$12833$RyrJs)
               (g$make-collector$9740$RyrJs)
               (g$make-collector$9740$RyrJs))))
           (g$make-top-rib$9739$RyrJs
             (g$env-names$9757$RyrJs g$env$12833$RyrJs)
             (g$env-labels$9758$RyrJs g$env$12833$RyrJs)))
          (if (g$interaction-env?$9769$RyrJs g$env$12833$RyrJs)
            ((case-lambda
               ((g$rib$12861$RyrJs g$r$12862$RyrJs g$rtc$12863$RyrJs)
                ((case-lambda
                   ((g$x$12864$RyrJs)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$12875$RyrJs
                               g$inv-collector$12876$RyrJs
                               g$vis-collector$12877$RyrJs
                               g$imp-collector$12878$RyrJs
                               g$top-level-context$12879$RyrJs
                               g$inv-collector$12880$RyrJs
                               g$vis-collector$12881$RyrJs
                               g$imp-collector$12882$RyrJs)
                             ((case-lambda
                                ((g$swap$12883$RyrJs)
                                 (dynamic-wind
                                   g$swap$12883$RyrJs
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$9745$RyrJs
                                        g$x$12864$RyrJs
                                        g$rib$12861$RyrJs
                                        g$r$12862$RyrJs)))
                                   g$swap$12883$RyrJs)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$12884$RyrJs)
                                       (begin
                                         (g$top-level-context$12875$RyrJs
                                           g$top-level-context$12879$RyrJs)
                                         (set! g$top-level-context$12879$RyrJs
                                           g$t$12884$RyrJs))))
                                    (g$top-level-context$12875$RyrJs))
                                   ((case-lambda
                                      ((g$t$12885$RyrJs)
                                       (begin
                                         (g$inv-collector$12876$RyrJs
                                           g$inv-collector$12880$RyrJs)
                                         (set! g$inv-collector$12880$RyrJs
                                           g$t$12885$RyrJs))))
                                    (g$inv-collector$12876$RyrJs))
                                   ((case-lambda
                                      ((g$t$12886$RyrJs)
                                       (begin
                                         (g$vis-collector$12877$RyrJs
                                           g$vis-collector$12881$RyrJs)
                                         (set! g$vis-collector$12881$RyrJs
                                           g$t$12886$RyrJs))))
                                    (g$vis-collector$12877$RyrJs))
                                   ((case-lambda
                                      ((g$t$12887$RyrJs)
                                       (begin
                                         (g$imp-collector$12878$RyrJs
                                           g$imp-collector$12882$RyrJs)
                                         (set! g$imp-collector$12882$RyrJs
                                           g$t$12887$RyrJs))))
                                    (g$imp-collector$12878$RyrJs))))))))
                          g$top-level-context$9813$RyrJs
                          g$inv-collector$9741$RyrJs
                          g$vis-collector$9742$RyrJs
                          g$imp-collector$9743$RyrJs
                          g$env$12833$RyrJs
                          g$rtc$12863$RyrJs
                          (g$make-collector$9740$RyrJs)
                          (g$make-collector$9740$RyrJs))))
                      (case-lambda
                        ((g$e$12888$RyrJs g$r^$12889$RyrJs)
                         ((case-lambda
                            ((g$r^$12890$RyrJs g$e$12891$RyrJs)
                             (begin
                               (g$set-interaction-env-r!$9775$RyrJs
                                 g$env$12833$RyrJs
                                 g$r^$12890$RyrJs)
                               (values
                                 g$e$12891$RyrJs
                                 (g$rtc$12863$RyrJs)))))
                          g$r^$12889$RyrJs
                          g$e$12888$RyrJs))))))
                 (g$make-stx$9296$RyrJs
                   g$x$12832$RyrJs
                   g$top-mark*$9256$RyrJs
                   (list g$rib$12861$RyrJs)
                   '()))))
             (g$interaction-env-rib$9771$RyrJs g$env$12833$RyrJs)
             (g$interaction-env-r$9772$RyrJs g$env$12833$RyrJs)
             (g$make-collector$9740$RyrJs))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$12833$RyrJs))))))
   (g$eval$9787$RyrJs
     g$eval$13371$RyrJs
     (case-lambda
       ((g$x$12892$RyrJs g$env$12893$RyrJs)
        (begin
          (if (not (g$environment?$9781$RyrJs g$env$12893$RyrJs))
            (error 'eval '"not an environment" g$env$12893$RyrJs)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$9786$RyrJs g$x$12892$RyrJs g$env$12893$RyrJs)))
            (case-lambda
              ((g$x$12896$RyrJs g$invoke-req*$12897$RyrJs)
               ((case-lambda
                  ((g$invoke-req*$12898$RyrJs g$x$12899$RyrJs)
                   (begin
                     (g$for-each$5808$RyrJs
                       g$invoke-library$9062$RyrJs
                       g$invoke-req*$12898$RyrJs)
                     (eval-core
                       (g$expanded->core$8795$RyrJs g$x$12899$RyrJs)))))
                g$invoke-req*$12897$RyrJs
                g$x$12896$RyrJs))))))))
   (g$expand->core$9788$RyrJs
     g$expand->core$13372$RyrJs
     (case-lambda
       ((g$x$12900$RyrJs g$env$12901$RyrJs)
        (begin
          (if (not (g$environment?$9781$RyrJs g$env$12901$RyrJs))
            (error 'eval '"not an environment" g$env$12901$RyrJs)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$9786$RyrJs g$x$12900$RyrJs g$env$12901$RyrJs)))
            (case-lambda
              ((g$x$12904$RyrJs g$invoke-req*$12905$RyrJs)
               ((case-lambda
                  ((g$invoke-req*$12906$RyrJs g$x$12907$RyrJs)
                   (begin
                     (g$for-each$5808$RyrJs
                       g$invoke-library$9062$RyrJs
                       g$invoke-req*$12906$RyrJs)
                     (g$expanded->core$8795$RyrJs g$x$12907$RyrJs))))
                g$invoke-req*$12905$RyrJs
                g$x$12904$RyrJs))))))))
   (g$library-expander$9789$RyrJs
     g$library-expander$13373$RyrJs
     (case-lambda
       ((g$x$12908$RyrJs
          g$filename$12909$RyrJs
          g$verify-name$12910$RyrJs)
        (letrec* ((g$build-visit-code$12911$RyrJs
                    (case-lambda
                      ((g$macro*$12954$RyrJs)
                       (if (null? g$macro*$12954$RyrJs)
                         (g$build-void$9249$RyrJs)
                         (g$build-sequence$9248$RyrJs
                           '#f
                           (g$map$5807$RyrJs
                             (case-lambda
                               ((g$x$12955$RyrJs)
                                ((case-lambda
                                   ((g$loc$12956$RyrJs
                                      g$src$12957$RyrJs)
                                    (list
                                      'set!
                                      g$loc$12956$RyrJs
                                      g$src$12957$RyrJs)))
                                 (car g$x$12955$RyrJs)
                                 (g$cddr$6467$RyrJs g$x$12955$RyrJs))))
                             g$macro*$12954$RyrJs))))))
                  (g$visit!$12912$RyrJs
                    (case-lambda
                      ((g$macro*$12950$RyrJs)
                       (g$for-each$5808$RyrJs
                         (case-lambda
                           ((g$x$12951$RyrJs)
                            ((case-lambda
                               ((g$loc$12952$RyrJs g$proc$12953$RyrJs)
                                (set-symbol-value!
                                  g$loc$12952$RyrJs
                                  g$proc$12953$RyrJs)))
                             (car g$x$12951$RyrJs)
                             (g$cadr$6465$RyrJs g$x$12951$RyrJs))))
                         g$macro*$12950$RyrJs)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$9747$RyrJs
                 g$x$12908$RyrJs
                 g$verify-name$12910$RyrJs)))
            (case-lambda
              ((g$name$12922$RyrJs
                 g$ver$12923$RyrJs
                 g$imp*$12924$RyrJs
                 g$inv*$12925$RyrJs
                 g$vis*$12926$RyrJs
                 g$invoke-code$12927$RyrJs
                 g$macro*$12928$RyrJs
                 g$export-subst$12929$RyrJs
                 g$export-env$12930$RyrJs)
               ((case-lambda
                  ((g$export-env$12931$RyrJs
                     g$export-subst$12932$RyrJs
                     g$macro*$12933$RyrJs
                     g$invoke-code$12934$RyrJs
                     g$vis*$12935$RyrJs
                     g$inv*$12936$RyrJs
                     g$imp*$12937$RyrJs
                     g$ver$12938$RyrJs
                     g$name$12939$RyrJs)
                   ((case-lambda
                      ((g$id$12940$RyrJs
                         g$name$12941$RyrJs
                         g$ver$12942$RyrJs
                         g$imp*$12943$RyrJs
                         g$vis*$12944$RyrJs
                         g$inv*$12945$RyrJs
                         g$visit-proc$12946$RyrJs
                         g$invoke-proc$12947$RyrJs
                         g$visit-code$12948$RyrJs
                         g$invoke-code$12949$RyrJs)
                       (begin
                         (g$install-library$9060$RyrJs
                           g$id$12940$RyrJs
                           g$name$12941$RyrJs
                           g$ver$12942$RyrJs
                           g$imp*$12943$RyrJs
                           g$vis*$12944$RyrJs
                           g$inv*$12945$RyrJs
                           g$export-subst$12932$RyrJs
                           g$export-env$12931$RyrJs
                           g$visit-proc$12946$RyrJs
                           g$invoke-proc$12947$RyrJs
                           g$visit-code$12948$RyrJs
                           g$invoke-code$12949$RyrJs
                           '#t
                           g$filename$12909$RyrJs)
                         (values
                           g$id$12940$RyrJs
                           g$name$12941$RyrJs
                           g$ver$12942$RyrJs
                           g$imp*$12943$RyrJs
                           g$vis*$12944$RyrJs
                           g$inv*$12945$RyrJs
                           g$invoke-code$12949$RyrJs
                           g$visit-code$12948$RyrJs
                           g$export-subst$12932$RyrJs
                           g$export-env$12931$RyrJs))))
                    (gensym)
                    g$name$12939$RyrJs
                    g$ver$12938$RyrJs
                    (g$map$5807$RyrJs
                      g$library-spec$9066$RyrJs
                      g$imp*$12937$RyrJs)
                    (g$map$5807$RyrJs
                      g$library-spec$9066$RyrJs
                      g$vis*$12935$RyrJs)
                    (g$map$5807$RyrJs
                      g$library-spec$9066$RyrJs
                      g$inv*$12936$RyrJs)
                    (case-lambda
                      (() (g$visit!$12912$RyrJs g$macro*$12933$RyrJs)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$8795$RyrJs
                           g$invoke-code$12934$RyrJs))))
                    (g$build-visit-code$12911$RyrJs
                      g$macro*$12933$RyrJs)
                    g$invoke-code$12934$RyrJs)))
                g$export-env$12930$RyrJs
                g$export-subst$12929$RyrJs
                g$macro*$12928$RyrJs
                g$invoke-code$12927$RyrJs
                g$vis*$12926$RyrJs
                g$inv*$12925$RyrJs
                g$imp*$12924$RyrJs
                g$ver$12923$RyrJs
                g$name$12922$RyrJs))))))
       ((g$x$12958$RyrJs g$filename$12959$RyrJs)
        (g$library-expander$9789$RyrJs
          g$x$12958$RyrJs
          g$filename$12959$RyrJs
          (case-lambda ((g$x$12960$RyrJs) (values)))))
       ((g$x$12961$RyrJs)
        (g$library-expander$9789$RyrJs
          g$x$12961$RyrJs
          '#f
          (case-lambda ((g$x$12962$RyrJs) (values)))))))
   (g$boot-library-expand$9790$RyrJs
     g$boot-library-expand$13374$RyrJs
     (case-lambda
       ((g$x$12963$RyrJs)
        (call-with-values
          (case-lambda
            (() (g$library-expander$9789$RyrJs g$x$12963$RyrJs)))
          (case-lambda
            ((g$id$12974$RyrJs
               g$name$12975$RyrJs
               g$ver$12976$RyrJs
               g$imp*$12977$RyrJs
               g$vis*$12978$RyrJs
               g$inv*$12979$RyrJs
               g$invoke-code$12980$RyrJs
               g$visit-code$12981$RyrJs
               g$export-subst$12982$RyrJs
               g$export-env$12983$RyrJs)
             ((case-lambda
                ((g$export-env$12984$RyrJs
                   g$export-subst$12985$RyrJs
                   g$visit-code$12986$RyrJs
                   g$invoke-code$12987$RyrJs
                   g$inv*$12988$RyrJs
                   g$vis*$12989$RyrJs
                   g$imp*$12990$RyrJs
                   g$ver$12991$RyrJs
                   g$name$12992$RyrJs
                   g$id$12993$RyrJs)
                 (values
                   g$name$12992$RyrJs
                   g$invoke-code$12987$RyrJs
                   g$export-subst$12985$RyrJs
                   g$export-env$12984$RyrJs)))
              g$export-env$12983$RyrJs
              g$export-subst$12982$RyrJs
              g$visit-code$12981$RyrJs
              g$invoke-code$12980$RyrJs
              g$inv*$12979$RyrJs
              g$vis*$12978$RyrJs
              g$imp*$12977$RyrJs
              g$ver$12976$RyrJs
              g$name$12975$RyrJs
              g$id$12974$RyrJs)))))))
   (g$rev-map-append$9791$RyrJs
     g$rev-map-append$13375$RyrJs
     (case-lambda
       ((g$f$12994$RyrJs g$ls$12995$RyrJs g$ac$12996$RyrJs)
        (if (null? g$ls$12995$RyrJs)
          g$ac$12996$RyrJs
          (g$rev-map-append$9791$RyrJs
            g$f$12994$RyrJs
            (cdr g$ls$12995$RyrJs)
            (cons
              (g$f$12994$RyrJs (car g$ls$12995$RyrJs))
              g$ac$12996$RyrJs))))))
   (g$build-exports$9792$RyrJs
     g$build-exports$13376$RyrJs
     (case-lambda
       ((g$lex*+loc*$12997$RyrJs g$init*$12998$RyrJs)
        (g$build-sequence$9248$RyrJs
          '#f
          (cons
            (g$build-void$9249$RyrJs)
            (g$rev-map-append$9791$RyrJs
              (case-lambda
                ((g$x$12999$RyrJs)
                 (list
                   'set!
                   (cdr g$x$12999$RyrJs)
                   (car g$x$12999$RyrJs))))
              g$lex*+loc*$12997$RyrJs
              g$init*$12998$RyrJs))))))
   (g$make-export-subst$9793$RyrJs
     g$make-export-subst$13377$RyrJs
     (case-lambda
       ((g$name*$13000$RyrJs g$id*$13001$RyrJs)
        (g$map$5807$RyrJs
          (case-lambda
            ((g$name$13002$RyrJs g$id$13003$RyrJs)
             ((case-lambda
                ((g$label$13004$RyrJs)
                 (begin
                   (if (not g$label$13004$RyrJs)
                     (g$syntax-violation$9805$RyrJs
                       '#f
                       '"cannot export unbound identifier"
                       g$id$13003$RyrJs)
                     (void))
                   (cons g$name$13002$RyrJs g$label$13004$RyrJs))))
              (g$id->label$9336$RyrJs g$id$13003$RyrJs))))
          g$name*$13000$RyrJs
          g$id*$13001$RyrJs))))
   (g$make-export-env/macros$9794$RyrJs
     g$make-export-env/macros$13378$RyrJs
     (case-lambda
       ((g$lex*$13005$RyrJs g$loc*$13006$RyrJs g$r$13007$RyrJs)
        (letrec* ((g$lookup$13008$RyrJs
                    (case-lambda
                      ((g$x$13024$RyrJs)
                       ((letrec ((g$f$13025$RyrJs
                                   (case-lambda
                                     ((g$x$13026$RyrJs
                                        g$lex*$13027$RyrJs
                                        g$loc*$13028$RyrJs)
                                      (if (pair? g$lex*$13027$RyrJs)
                                        (if (eq? g$x$13026$RyrJs
                                                 (car g$lex*$13027$RyrJs))
                                          (car g$loc*$13028$RyrJs)
                                          (g$f$13025$RyrJs
                                            g$x$13026$RyrJs
                                            (cdr g$lex*$13027$RyrJs)
                                            (cdr g$loc*$13028$RyrJs)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$13025$RyrJs)
                        g$x$13024$RyrJs
                        g$lex*$13005$RyrJs
                        g$loc*$13006$RyrJs)))))
          ((letrec ((g$f$13009$RyrJs
                      (case-lambda
                        ((g$r$13010$RyrJs
                           g$env$13011$RyrJs
                           g$global*$13012$RyrJs
                           g$macro*$13013$RyrJs)
                         (if (null? g$r$13010$RyrJs)
                           (values
                             g$env$13011$RyrJs
                             g$global*$13012$RyrJs
                             g$macro*$13013$RyrJs)
                           ((case-lambda
                              ((g$x$13014$RyrJs)
                               ((case-lambda
                                  ((g$label$13015$RyrJs g$b$13016$RyrJs)
                                   ((case-lambda
                                      ((g$t$13017$RyrJs)
                                       (if (eqv?
                                             g$t$13017$RyrJs
                                             'lexical)
                                         ((case-lambda
                                            ((g$v$13018$RyrJs)
                                             ((case-lambda
                                                ((g$loc$13019$RyrJs
                                                   g$type$13020$RyrJs)
                                                 (g$f$13009$RyrJs
                                                   (cdr g$r$13010$RyrJs)
                                                   (cons
                                                     (g$cons*$5809$RyrJs
                                                       g$label$13015$RyrJs
                                                       g$type$13020$RyrJs
                                                       g$loc$13019$RyrJs)
                                                     g$env$13011$RyrJs)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$9630$RyrJs
                                                         g$v$13018$RyrJs)
                                                       g$loc$13019$RyrJs)
                                                     g$global*$13012$RyrJs)
                                                   g$macro*$13013$RyrJs)))
                                              (g$lookup$13008$RyrJs
                                                (g$lexical-var$9630$RyrJs
                                                  g$v$13018$RyrJs))
                                              (if (g$lexical-mutable?$9631$RyrJs
                                                    g$v$13018$RyrJs)
                                                'mutable
                                                'global))))
                                          (g$binding-value$9341$RyrJs
                                            g$b$13016$RyrJs))
                                         (if (eqv?
                                               g$t$13017$RyrJs
                                               'local-macro)
                                           ((case-lambda
                                              ((g$loc$13021$RyrJs)
                                               (g$f$13009$RyrJs
                                                 (cdr g$r$13010$RyrJs)
                                                 (cons
                                                   (g$cons*$5809$RyrJs
                                                     g$label$13015$RyrJs
                                                     'global-macro
                                                     g$loc$13021$RyrJs)
                                                   g$env$13011$RyrJs)
                                                 g$global*$13012$RyrJs
                                                 (cons
                                                   (cons
                                                     g$loc$13021$RyrJs
                                                     (g$binding-value$9341$RyrJs
                                                       g$b$13016$RyrJs))
                                                   g$macro*$13013$RyrJs))))
                                            (gensym))
                                           (if (eqv?
                                                 g$t$13017$RyrJs
                                                 'local-macro!)
                                             ((case-lambda
                                                ((g$loc$13022$RyrJs)
                                                 (g$f$13009$RyrJs
                                                   (cdr g$r$13010$RyrJs)
                                                   (cons
                                                     (g$cons*$5809$RyrJs
                                                       g$label$13015$RyrJs
                                                       'global-macro!
                                                       g$loc$13022$RyrJs)
                                                     g$env$13011$RyrJs)
                                                   g$global*$13012$RyrJs
                                                   (cons
                                                     (cons
                                                       g$loc$13022$RyrJs
                                                       (g$binding-value$9341$RyrJs
                                                         g$b$13016$RyrJs))
                                                     g$macro*$13013$RyrJs))))
                                              (gensym))
                                             (if (eqv?
                                                   g$t$13017$RyrJs
                                                   'local-ctv)
                                               ((case-lambda
                                                  ((g$loc$13023$RyrJs)
                                                   (g$f$13009$RyrJs
                                                     (cdr g$r$13010$RyrJs)
                                                     (cons
                                                       (g$cons*$5809$RyrJs
                                                         g$label$13015$RyrJs
                                                         'global-ctv
                                                         g$loc$13023$RyrJs)
                                                       g$env$13011$RyrJs)
                                                     g$global*$13012$RyrJs
                                                     (cons
                                                       (cons
                                                         g$loc$13023$RyrJs
                                                         (g$binding-value$9341$RyrJs
                                                           g$b$13016$RyrJs))
                                                       g$macro*$13013$RyrJs))))
                                                (gensym))
                                               (if (g$memv$5800$RyrJs
                                                     g$t$13017$RyrJs
                                                     '($rtd $module))
                                                 (g$f$13009$RyrJs
                                                   (cdr g$r$13010$RyrJs)
                                                   (cons
                                                     g$x$13014$RyrJs
                                                     g$env$13011$RyrJs)
                                                   g$global*$13012$RyrJs
                                                   g$macro*$13013$RyrJs)
                                                 (assertion-violation
                                                   'expander
                                                   '"BUG: do not know how to export"
                                                   (g$binding-type$9340$RyrJs
                                                     g$b$13016$RyrJs)
                                                   (g$binding-value$9341$RyrJs
                                                     g$b$13016$RyrJs)))))))))
                                    (g$binding-type$9340$RyrJs
                                      g$b$13016$RyrJs))))
                                (car g$x$13014$RyrJs)
                                (cdr g$x$13014$RyrJs))))
                            (car g$r$13010$RyrJs)))))))
             g$f$13009$RyrJs)
           g$r$13007$RyrJs
           '()
           '()
           '())))))
   (g$generate-temporaries$9795$RyrJs
     g$generate-temporaries$13379$RyrJs
     (case-lambda
       ((g$ls$13029$RyrJs)
        ((case-lambda
           ((g$t$13030$RyrJs)
            ((case-lambda
               ((g$ls/false$13031$RyrJs)
                (if g$ls/false$13031$RyrJs
                  (apply
                    (case-lambda
                      ((g$ls$13032$RyrJs)
                       (g$map$5807$RyrJs
                         (case-lambda
                           ((g$x$13033$RyrJs)
                            (g$make-stx$9296$RyrJs
                              ((case-lambda
                                 ((g$x$13034$RyrJs)
                                  (if ((case-lambda
                                         ((g$t$13035$RyrJs)
                                          (if g$t$13035$RyrJs
                                            g$t$13035$RyrJs
                                            (begin
                                              '#f
                                              (string?
                                                g$x$13034$RyrJs)))))
                                       (g$symbol?$6456$RyrJs
                                         g$x$13034$RyrJs))
                                    (gensym g$x$13034$RyrJs)
                                    (gensym 't))))
                               (g$syntax->datum$9808$RyrJs
                                 g$x$13033$RyrJs))
                              g$top-mark*$9256$RyrJs
                              '()
                              '())))
                         g$ls$13032$RyrJs)))
                    g$ls/false$13031$RyrJs)
                  ((case-lambda
                     ((g$t$13036$RyrJs)
                      ((case-lambda
                         ((g$ls/false$13037$RyrJs)
                          (if g$ls/false$13037$RyrJs
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$13037$RyrJs)
                            (g$syntax-violation$9805$RyrJs
                              '#f
                              '"invalid syntax"
                              g$t$13036$RyrJs))))
                       (g$syntax-dispatch$9686$RyrJs
                         g$t$13036$RyrJs
                         '_))))
                   g$t$13030$RyrJs))))
             (g$syntax-dispatch$9686$RyrJs g$t$13030$RyrJs 'each-any))))
         g$ls$13029$RyrJs))))
   (g$free-identifier=?$9796$RyrJs
     g$free-identifier=?$13380$RyrJs
     (case-lambda
       ((g$x$13038$RyrJs g$y$13039$RyrJs)
        (if (g$id?$9323$RyrJs g$x$13038$RyrJs)
          (if (g$id?$9323$RyrJs g$y$13039$RyrJs)
            (g$free-id=?$9327$RyrJs g$x$13038$RyrJs g$y$13039$RyrJs)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$13039$RyrJs))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$13038$RyrJs)))))
   (g$bound-identifier=?$9797$RyrJs
     g$bound-identifier=?$13381$RyrJs
     (case-lambda
       ((g$x$13040$RyrJs g$y$13041$RyrJs)
        (if (g$id?$9323$RyrJs g$x$13040$RyrJs)
          (if (g$id?$9323$RyrJs g$y$13041$RyrJs)
            (g$bound-id=?$9326$RyrJs g$x$13040$RyrJs g$y$13041$RyrJs)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$13041$RyrJs))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$13040$RyrJs)))))
   (g$make-source-condition$9798$RyrJs
     g$make-source-condition$13382$RyrJs
     (case-lambda
       ((g$x$13042$RyrJs)
        (letrec* ((g$11007$13043$RyrJs
                    (make-record-type-descriptor
                      '&source-information
                      g$&condition-rtd$7100$RyrJs
                      'g$11010$RyrJs
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11009$13044$RyrJs '#f)
                  (g$11008$13045$RyrJs
                    (make-record-constructor-descriptor
                      g$11007$13043$RyrJs
                      g$&condition-rcd$7101$RyrJs
                      g$11009$13044$RyrJs))
                  (g$11006$13048$RyrJs
                    (record-predicate g$11007$13043$RyrJs))
                  (g$make-source-condition$13049$RyrJs
                    (record-constructor g$11008$13045$RyrJs))
                  (g$11004$13050$RyrJs
                    (record-accessor g$11007$13043$RyrJs '0))
                  (g$11005$13051$RyrJs
                    (record-accessor g$11007$13043$RyrJs '1))
                  (g$source-condition?$13052$RyrJs
                    (condition-predicate g$11007$13043$RyrJs))
                  (g$source-filename$13053$RyrJs
                    (condition-accessor
                      g$11007$13043$RyrJs
                      g$11004$13050$RyrJs))
                  (g$source-character$13054$RyrJs
                    (condition-accessor
                      g$11007$13043$RyrJs
                      g$11005$13051$RyrJs)))
          (if (pair? g$x$13042$RyrJs)
            (g$make-source-condition$13049$RyrJs
              (car g$x$13042$RyrJs)
              (cdr g$x$13042$RyrJs))
            (condition))))))
   (g$extract-position-condition$9799$RyrJs
     g$extract-position-condition$13383$RyrJs
     (case-lambda
       ((g$x$13055$RyrJs)
        (g$make-source-condition$9798$RyrJs
          (g$expression-position$9800$RyrJs g$x$13055$RyrJs)))))
   (g$expression-position$9800$RyrJs
     g$expression-position$13384$RyrJs
     (case-lambda
       ((g$x$13056$RyrJs)
        (if (g$stx?$9295$RyrJs g$x$13056$RyrJs)
          (begin
            '#f
            ((case-lambda
               ((g$x$13057$RyrJs)
                (if (annotation? g$x$13057$RyrJs)
                  (begin '#f (annotation-source g$x$13057$RyrJs))
                  '#f)))
             (g$stx-expr$9297$RyrJs g$x$13056$RyrJs)))
          '#f))))
   (g$assertion-error$9801$RyrJs
     g$assertion-error$13385$RyrJs
     (case-lambda
       ((g$expr$13058$RyrJs g$pos$13059$RyrJs)
        (raise
          (condition
            (g$make-assertion-violation$7148$RyrJs)
            (g$make-who-condition$7166$RyrJs 'assert)
            (g$make-message-condition$7106$RyrJs '"assertion failed")
            (g$make-irritants-condition$7156$RyrJs
              (list g$expr$13058$RyrJs))
            (g$make-source-condition$9798$RyrJs g$pos$13059$RyrJs))))))
   (g$syntax-error$9802$RyrJs
     g$syntax-error$13386$RyrJs
     (case-lambda
       ((g$x$13060$RyrJs . g$args$13061$RyrJs)
        (begin
          (if (not (g$for-all$5805$RyrJs string? g$args$13061$RyrJs))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$13061$RyrJs)
            (void))
          (raise
            (condition
              (g$make-message-condition$7106$RyrJs
                (if (null? g$args$13061$RyrJs)
                  '"invalid syntax"
                  (apply string-append g$args$13061$RyrJs)))
              (g$make-syntax-violation$7200$RyrJs
                (g$syntax->datum$9808$RyrJs g$x$13060$RyrJs)
                '#f)
              (g$extract-position-condition$9799$RyrJs g$x$13060$RyrJs)
              (g$extract-trace$9803$RyrJs g$x$13060$RyrJs)))))))
   (g$extract-trace$9803$RyrJs
     g$extract-trace$13387$RyrJs
     (case-lambda
       ((g$x$13062$RyrJs)
        (letrec* ((g$11032$13063$RyrJs
                    (make-record-type-descriptor
                      '&trace
                      g$&condition-rtd$7100$RyrJs
                      'g$11035$RyrJs
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11034$13064$RyrJs '#f)
                  (g$11033$13065$RyrJs
                    (make-record-constructor-descriptor
                      g$11032$13063$RyrJs
                      g$&condition-rcd$7101$RyrJs
                      g$11034$13064$RyrJs))
                  (g$11031$13068$RyrJs
                    (record-predicate g$11032$13063$RyrJs))
                  (g$make-trace$13069$RyrJs
                    (record-constructor g$11033$13065$RyrJs))
                  (g$11030$13070$RyrJs
                    (record-accessor g$11032$13063$RyrJs '0))
                  (g$trace?$13071$RyrJs
                    (condition-predicate g$11032$13063$RyrJs))
                  (g$trace-form$13072$RyrJs
                    (condition-accessor
                      g$11032$13063$RyrJs
                      g$11030$13070$RyrJs)))
          ((letrec ((g$f$13073$RyrJs
                      (case-lambda
                        ((g$x$13074$RyrJs)
                         (if (g$stx?$9295$RyrJs g$x$13074$RyrJs)
                           (apply
                             condition
                             (g$make-trace$13069$RyrJs g$x$13074$RyrJs)
                             (g$map$5807$RyrJs
                               g$f$13073$RyrJs
                               (g$stx-ae*$9300$RyrJs g$x$13074$RyrJs)))
                           (if (annotation? g$x$13074$RyrJs)
                             (g$make-trace$13069$RyrJs
                               (g$make-stx$9296$RyrJs
                                 g$x$13074$RyrJs
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$13073$RyrJs)
           g$x$13062$RyrJs)))))
   (g$syntax-violation*$9804$RyrJs
     g$syntax-violation*$13388$RyrJs
     (case-lambda
       ((g$who$13075$RyrJs
          g$msg$13076$RyrJs
          g$form$13077$RyrJs
          g$condition-object$13078$RyrJs)
        (begin
          (if (not (string? g$msg$13076$RyrJs))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$13076$RyrJs)
            (void))
          ((case-lambda
             ((g$who$13079$RyrJs)
              (raise
                (condition
                  (if g$who$13079$RyrJs
                    (g$make-who-condition$7166$RyrJs g$who$13079$RyrJs)
                    (condition))
                  (g$make-message-condition$7106$RyrJs
                    g$msg$13076$RyrJs)
                  g$condition-object$13078$RyrJs
                  (g$extract-position-condition$9799$RyrJs
                    g$form$13077$RyrJs)
                  (g$extract-trace$9803$RyrJs g$form$13077$RyrJs)))))
           (if ((case-lambda
                  ((g$t$13080$RyrJs)
                   (if g$t$13080$RyrJs
                     g$t$13080$RyrJs
                     (begin
                       '#f
                       (g$symbol?$6456$RyrJs g$who$13075$RyrJs)))))
                (string? g$who$13075$RyrJs))
             g$who$13075$RyrJs
             (if (not g$who$13075$RyrJs)
               ((case-lambda
                  ((g$t$13081$RyrJs)
                   ((case-lambda
                      ((g$ls/false$13082$RyrJs)
                       (if (if g$ls/false$13082$RyrJs
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$13083$RyrJs)
                                    (g$id?$9323$RyrJs
                                      g$id$13083$RyrJs)))
                                 g$ls/false$13082$RyrJs))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$13084$RyrJs)
                              (g$syntax->datum$9808$RyrJs
                                g$id$13084$RyrJs)))
                           g$ls/false$13082$RyrJs)
                         ((case-lambda
                            ((g$t$13085$RyrJs)
                             ((case-lambda
                                ((g$ls/false$13086$RyrJs)
                                 (if (if g$ls/false$13086$RyrJs
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$13087$RyrJs
                                                g$rest$13088$RyrJs)
                                              (g$id?$9323$RyrJs
                                                g$id$13087$RyrJs)))
                                           g$ls/false$13086$RyrJs))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$13089$RyrJs
                                          g$rest$13090$RyrJs)
                                        (g$syntax->datum$9808$RyrJs
                                          g$id$13089$RyrJs)))
                                     g$ls/false$13086$RyrJs)
                                   ((case-lambda
                                      ((g$t$13091$RyrJs)
                                       ((case-lambda
                                          ((g$ls/false$13092$RyrJs)
                                           (if g$ls/false$13092$RyrJs
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$13092$RyrJs)
                                             (g$syntax-violation$9805$RyrJs
                                               '#f
                                               '"invalid syntax"
                                               g$t$13091$RyrJs))))
                                        (g$syntax-dispatch$9686$RyrJs
                                          g$t$13091$RyrJs
                                          '_))))
                                    g$t$13085$RyrJs))))
                              (g$syntax-dispatch$9686$RyrJs
                                g$t$13085$RyrJs
                                '(any . any)))))
                          g$t$13081$RyrJs))))
                    (g$syntax-dispatch$9686$RyrJs
                      g$t$13081$RyrJs
                      'any))))
                g$form$13077$RyrJs)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$13075$RyrJs))))))))
   (g$syntax-violation$9805$RyrJs
     g$syntax-violation$13389$RyrJs
     (case-lambda
       ((g$who$13093$RyrJs g$msg$13094$RyrJs g$form$13095$RyrJs)
        (g$syntax-violation$9805$RyrJs
          g$who$13093$RyrJs
          g$msg$13094$RyrJs
          g$form$13095$RyrJs
          '#f))
       ((g$who$13096$RyrJs
          g$msg$13097$RyrJs
          g$form$13098$RyrJs
          g$subform$13099$RyrJs)
        (g$syntax-violation*$9804$RyrJs
          g$who$13096$RyrJs
          g$msg$13097$RyrJs
          g$form$13098$RyrJs
          (g$make-syntax-violation$7200$RyrJs
            (g$syntax->datum$9808$RyrJs g$form$13098$RyrJs)
            (g$syntax->datum$9808$RyrJs g$subform$13099$RyrJs))))))
   (g$identifier?$9806$RyrJs
     g$identifier?$13390$RyrJs
     (case-lambda
       ((g$x$13100$RyrJs) (g$id?$9323$RyrJs g$x$13100$RyrJs))))
   (g$datum->syntax$9807$RyrJs
     g$datum->syntax$13391$RyrJs
     (case-lambda
       ((g$id$13101$RyrJs g$datum$13102$RyrJs)
        (if (g$id?$9323$RyrJs g$id$13101$RyrJs)
          (g$datum->stx$9306$RyrJs g$id$13101$RyrJs g$datum$13102$RyrJs)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$13101$RyrJs)))))
   (g$syntax->datum$9808$RyrJs
     g$syntax->datum$13392$RyrJs
     (case-lambda
       ((g$x$13103$RyrJs) (g$stx->datum$9334$RyrJs g$x$13103$RyrJs))))
   (g$compile-r6rs-top-level$9809$RyrJs
     g$compile-r6rs-top-level$13393$RyrJs
     (case-lambda
       ((g$x*$13104$RyrJs)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$9749$RyrJs g$x*$13104$RyrJs)))
          (case-lambda
            ((g$lib*$13107$RyrJs g$invoke-code$13108$RyrJs)
             ((case-lambda
                ((g$invoke-code$13109$RyrJs g$lib*$13110$RyrJs)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5808$RyrJs
                        g$invoke-library$9062$RyrJs
                        g$lib*$13110$RyrJs)
                      (eval-core
                        (g$expanded->core$8795$RyrJs
                          g$invoke-code$13109$RyrJs)))))))
              g$invoke-code$13108$RyrJs
              g$lib*$13107$RyrJs)))))))
   (g$pre-compile-r6rs-top-level$9810$RyrJs
     g$pre-compile-r6rs-top-level$13394$RyrJs
     (case-lambda
       ((g$x*$13111$RyrJs)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$9749$RyrJs g$x*$13111$RyrJs)))
          (case-lambda
            ((g$lib*$13114$RyrJs g$invoke-code$13115$RyrJs)
             ((case-lambda
                ((g$invoke-code$13116$RyrJs g$lib*$13117$RyrJs)
                 (begin
                   (g$for-each$5808$RyrJs
                     g$invoke-library$9062$RyrJs
                     g$lib*$13117$RyrJs)
                   (compile-core
                     (g$expanded->core$8795$RyrJs
                       g$invoke-code$13116$RyrJs)))))
              g$invoke-code$13115$RyrJs
              g$lib*$13114$RyrJs)))))))
   (g$new-interaction-environment$9811$RyrJs
     g$new-interaction-environment$13395$RyrJs
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$13118$RyrJs g$rib$13119$RyrJs)
            (begin
              ((case-lambda
                 ((g$subst$13120$RyrJs)
                  (begin
                    (g$set-rib-sym*!$9276$RyrJs
                      g$rib$13119$RyrJs
                      (g$map$5807$RyrJs car g$subst$13120$RyrJs))
                    (g$set-rib-mark**!$9277$RyrJs
                      g$rib$13119$RyrJs
                      (g$map$5807$RyrJs
                        (case-lambda
                          ((g$x$13121$RyrJs) g$top-mark*$9256$RyrJs))
                        g$subst$13120$RyrJs))
                    (g$set-rib-label*!$9278$RyrJs
                      g$rib$13119$RyrJs
                      (g$map$5807$RyrJs cdr g$subst$13120$RyrJs)))))
               (g$library-subst$9019$RyrJs g$lib$13118$RyrJs))
              (g$make-interaction-env$9770$RyrJs
                g$rib$13119$RyrJs
                '()
                '()))))
         (g$find-library-by-name$9055$RyrJs '(ironscheme))
         (g$make-empty-rib$9281$RyrJs)))))
   (g$interaction-environment$9812$RyrJs
     g$interaction-environment$13396$RyrJs
     ((case-lambda
        ((g$e$13122$RyrJs)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$13123$RyrJs)
                (if g$t$13123$RyrJs
                  g$t$13123$RyrJs
                  (begin
                    '#f
                    (begin
                      (set! g$e$13122$RyrJs
                        (g$new-interaction-environment$9811$RyrJs))
                      g$e$13122$RyrJs)))))
             g$e$13122$RyrJs)))))
      '#f))
   (g$top-level-context$9813$RyrJs
     g$top-level-context$13397$RyrJs
     (g$make-parameter$8229$RyrJs '#f)))
  (g$current-library-expander$9052$RyrJs g$library-expander$9789$RyrJs))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$8792$RyrJs
      (case-lambda
        ((g$x$13478$RyrJs)
         ((case-lambda
            ((g$t$13479$RyrJs)
             (if g$t$13479$RyrJs (cdr g$t$13479$RyrJs) '#f)))
          (g$assq$5795$RyrJs
            g$x$13478$RyrJs
            '((ellipsis-map . g$ellipsis-map$13281$RyrJs)
              (&no-nans-rcd . g$&no-nans-rcd$7335$RyrJs)
              (&no-nans-rtd . g$&no-nans-rtd$7334$RyrJs)
              (&no-infinities-rcd . g$&no-infinities-rcd$7327$RyrJs)
              (&no-infinities-rtd . g$&no-infinities-rtd$7326$RyrJs)
              (&i/o-encoding-rcd . g$&i/o-encoding-rcd$7319$RyrJs)
              (&i/o-encoding-rtd . g$&i/o-encoding-rtd$7318$RyrJs)
              (&i/o-decoding-rcd . g$&i/o-decoding-rcd$7309$RyrJs)
              (&i/o-decoding-rtd . g$&i/o-decoding-rtd$7308$RyrJs)
              (&i/o-port-rcd . g$&i/o-port-rcd$7301$RyrJs)
              (&i/o-port-rtd . g$&i/o-port-rtd$7300$RyrJs)
              (&i/o-file-does-not-exist-rcd
                .
                g$&i/o-file-does-not-exist-rcd$7291$RyrJs)
              (&i/o-file-does-not-exist-rtd
                .
                g$&i/o-file-does-not-exist-rtd$7290$RyrJs)
              (&i/o-file-already-exists-rcd
                .
                g$&i/o-file-already-exists-rcd$7283$RyrJs)
              (&i/o-file-already-exists-rtd
                .
                g$&i/o-file-already-exists-rtd$7282$RyrJs)
              (&i/o-file-is-read-only-rcd
                .
                g$&i/o-file-is-read-only-rcd$7275$RyrJs)
              (&i/o-file-is-read-only-rtd
                .
                g$&i/o-file-is-read-only-rtd$7274$RyrJs)
              (&i/o-file-protection-rcd
                .
                g$&i/o-file-protection-rcd$7267$RyrJs)
              (&i/o-file-protection-rtd
                .
                g$&i/o-file-protection-rtd$7266$RyrJs)
              (&i/o-filename-rcd . g$&i/o-filename-rcd$7259$RyrJs)
              (&i/o-filename-rtd . g$&i/o-filename-rtd$7258$RyrJs)
              (&i/o-invalid-position-rcd
                .
                g$&i/o-invalid-position-rcd$7249$RyrJs)
              (&i/o-invalid-position-rtd
                .
                g$&i/o-invalid-position-rtd$7248$RyrJs)
              (&i/o-write-rcd . g$&i/o-write-rcd$7239$RyrJs)
              (&i/o-write-rtd . g$&i/o-write-rtd$7238$RyrJs)
              (&i/o-read-rcd . g$&i/o-read-rcd$7231$RyrJs)
              (&i/o-read-rtd . g$&i/o-read-rtd$7230$RyrJs)
              (&i/o-rcd . g$&i/o-rcd$7223$RyrJs)
              (&i/o-rtd . g$&i/o-rtd$7222$RyrJs)
              (&undefined-rcd . g$&undefined-rcd$7215$RyrJs)
              (&undefined-rtd . g$&undefined-rtd$7214$RyrJs)
              (&syntax-rcd . g$&syntax-rcd$7207$RyrJs)
              (&syntax-rtd . g$&syntax-rtd$7206$RyrJs)
              (&lexical-rcd . g$&lexical-rcd$7195$RyrJs)
              (&lexical-rtd . g$&lexical-rtd$7194$RyrJs)
              (&implementation-restriction-rcd
                .
                g$&implementation-restriction-rcd$7187$RyrJs)
              (&implementation-restriction-rtd
                .
                g$&implementation-restriction-rtd$7186$RyrJs)
              (&non-continuable-rcd . g$&non-continuable-rcd$7179$RyrJs)
              (&non-continuable-rtd . g$&non-continuable-rtd$7178$RyrJs)
              (&who-rcd . g$&who-rcd$7171$RyrJs)
              (&who-rtd . g$&who-rtd$7170$RyrJs)
              (&irritants-rcd . g$&irritants-rcd$7161$RyrJs)
              (&irritants-rtd . g$&irritants-rtd$7160$RyrJs)
              (&assertion-rcd . g$&assertion-rcd$7151$RyrJs)
              (&assertion-rtd . g$&assertion-rtd$7150$RyrJs)
              (&violation-rcd . g$&violation-rcd$7143$RyrJs)
              (&violation-rtd . g$&violation-rtd$7142$RyrJs)
              (&error-rcd . g$&error-rcd$7135$RyrJs)
              (&error-rtd . g$&error-rtd$7134$RyrJs)
              (&serious-rcd . g$&serious-rcd$7127$RyrJs)
              (&serious-rtd . g$&serious-rtd$7126$RyrJs)
              (&warning-rcd . g$&warning-rcd$7119$RyrJs)
              (&warning-rtd . g$&warning-rtd$7118$RyrJs)
              (&message-rcd . g$&message-rcd$7111$RyrJs)
              (&message-rtd . g$&message-rtd$7110$RyrJs)
              (&condition-rcd . g$&condition-rcd$7101$RyrJs)
              (&condition-rtd . g$&condition-rtd$7100$RyrJs)
              (make-list . g$make-list$5790$RyrJs)
              (last-pair . g$last-pair$5789$RyrJs)
              (ironscheme-build . g$ironscheme-build$13469$RyrJs)
              (syntax-error . g$syntax-error$13386$RyrJs)
              (syntax-dispatch . g$syntax-dispatch$13276$RyrJs)
              (compile-system-libraries
                .
                g$compile-system-libraries$13473$RyrJs)
              (compile->closure . g$compile->closure$13475$RyrJs)
              (compile . g$compile$13474$RyrJs)
              (load . g$load$13468$RyrJs)
              (interaction-environment
                .
                g$interaction-environment$13396$RyrJs)
              (string-normalize-nfkd
                .
                g$string-normalize-nfkd$7551$RyrJs)
              (string-normalize-nfkc
                .
                g$string-normalize-nfkc$7550$RyrJs)
              (string-normalize-nfd . g$string-normalize-nfd$7549$RyrJs)
              (string-normalize-nfc . g$string-normalize-nfc$7548$RyrJs)
              (string-ci>? . g$string-ci>?$7540$RyrJs)
              (string-ci>=? . g$string-ci>=?$7542$RyrJs)
              (string-ci=? . g$string-ci=?$7538$RyrJs)
              (string-ci<? . g$string-ci<?$7539$RyrJs)
              (string-ci<=? . g$string-ci<=?$7541$RyrJs)
              (char-ci>? . g$char-ci>?$7545$RyrJs)
              (char-ci>=? . g$char-ci>=?$7547$RyrJs)
              (char-ci=? . g$char-ci=?$7543$RyrJs)
              (char-ci<? . g$char-ci<?$7544$RyrJs)
              (char-ci<=? . g$char-ci<=?$7546$RyrJs)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$13214$RyrJs)
              (variable-transformer?
                .
                g$variable-transformer?$13213$RyrJs)
              (make-variable-transformer
                .
                g$make-variable-transformer$13211$RyrJs)
              (identifier? . g$identifier?$13390$RyrJs)
              (generate-temporaries
                .
                g$generate-temporaries$13379$RyrJs)
              (free-identifier=? . g$free-identifier=?$13380$RyrJs)
              (syntax->datum . g$syntax->datum$13392$RyrJs)
              (datum->syntax . g$datum->syntax$13391$RyrJs)
              (bound-identifier=? . g$bound-identifier=?$13381$RyrJs)
              (delete-file . g$delete-file$6575$RyrJs)
              (file-exists? . g$file-exists?$6574$RyrJs)
              (list-sort . g$list-sort$7399$RyrJs)
              (make-eqv-hashtable . g$make-eqv-hashtable$6557$RyrJs)
              (make-eq-hashtable . g$make-eq-hashtable$6556$RyrJs)
              (hashtable-update! . g$hashtable-update!$6563$RyrJs)
              (hashtable-size . g$hashtable-size$6558$RyrJs)
              (hashtable-set! . g$hashtable-set!$6560$RyrJs)
              (hashtable-ref . g$hashtable-ref$6559$RyrJs)
              (hashtable-delete! . g$hashtable-delete!$6561$RyrJs)
              (hashtable-contains? . g$hashtable-contains?$6562$RyrJs)
              (hashtable-clear! . g$hashtable-clear!$6564$RyrJs)
              (call-with-output-file
                .
                g$call-with-output-file$7889$RyrJs)
              (call-with-input-file . g$call-with-input-file$7888$RyrJs)
              (write-char . g$write-char$7885$RyrJs)
              (with-output-to-file . g$with-output-to-file$7887$RyrJs)
              (with-input-from-file . g$with-input-from-file$7886$RyrJs)
              (read-char . g$read-char$7884$RyrJs)
              (peek-char . g$peek-char$7883$RyrJs)
              (newline . g$newline$7890$RyrJs)
              (put-datum . g$put-datum$7823$RyrJs)
              (port? . g$port?$7828$RyrJs)
              (open-string-output-port
                .
                g$open-string-output-port$7827$RyrJs)
              (make-i/o-write-error . g$make-i/o-write-error$7236$RyrJs)
              (make-i/o-read-error . g$make-i/o-read-error$7228$RyrJs)
              (make-i/o-port-error . g$make-i/o-port-error$7296$RyrJs)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$7244$RyrJs)
              (make-i/o-filename-error
                .
                g$make-i/o-filename-error$7254$RyrJs)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$7264$RyrJs)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$7272$RyrJs)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$7288$RyrJs)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$7280$RyrJs)
              (make-i/o-error . g$make-i/o-error$7220$RyrJs)
              (make-i/o-encoding-error
                .
                g$make-i/o-encoding-error$7314$RyrJs)
              (make-i/o-decoding-error
                .
                g$make-i/o-decoding-error$7306$RyrJs)
              (i/o-write-error? . g$i/o-write-error?$7237$RyrJs)
              (i/o-read-error? . g$i/o-read-error?$7229$RyrJs)
              (i/o-port-error? . g$i/o-port-error?$7298$RyrJs)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$7246$RyrJs)
              (i/o-error-position . g$i/o-error-position$7247$RyrJs)
              (i/o-filename-error? . g$i/o-filename-error?$7256$RyrJs)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$7265$RyrJs)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$7273$RyrJs)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$7289$RyrJs)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$7281$RyrJs)
              (i/o-error? . g$i/o-error?$7221$RyrJs)
              (i/o-error-port . g$i/o-error-port$7299$RyrJs)
              (i/o-error-filename . g$i/o-error-filename$7257$RyrJs)
              (i/o-encoding-error? . g$i/o-encoding-error?$7316$RyrJs)
              (i/o-encoding-error-char
                .
                g$i/o-encoding-error-char$7317$RyrJs)
              (i/o-decoding-error? . g$i/o-decoding-error?$7307$RyrJs)
              (get-datum . g$get-datum$7824$RyrJs)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$7829$RyrJs)
              (call-with-port . g$call-with-port$7830$RyrJs)
              (scheme-report-environment
                .
                g$scheme-report-environment$13369$RyrJs)
              (quotient . g$quotient$7366$RyrJs)
              (null-environment . g$null-environment$13368$RyrJs)
              (remainder . g$remainder$7367$RyrJs)
              (modulo . g$modulo$7368$RyrJs)
              (inexact->exact . g$inexact->exact$7363$RyrJs)
              (force . g$force$7370$RyrJs)
              (exact->inexact . g$exact->inexact$7364$RyrJs)
              (command-line . g$command-line$13464$RyrJs)
              (remove . g$remove$5812$RyrJs)
              (remv . g$remv$5813$RyrJs)
              (remp . g$remp$5793$RyrJs)
              (remq . g$remq$5814$RyrJs)
              (partition . g$partition$5792$RyrJs)
              (memv . g$memv$5800$RyrJs)
              (memq . g$memq$5799$RyrJs)
              (memp . g$memp$5802$RyrJs)
              (member . g$member$5801$RyrJs)
              (exists . g$exists$5806$RyrJs)
              (for-all . g$for-all$5805$RyrJs)
              (fold-right . g$fold-right$5811$RyrJs)
              (fold-left . g$fold-left$5810$RyrJs)
              (find . g$find$5791$RyrJs)
              (filter . g$filter$5794$RyrJs)
              (cons* . g$cons*$5809$RyrJs)
              (assv . g$assv$5796$RyrJs)
              (assq . g$assq$5795$RyrJs)
              (assp . g$assp$5798$RyrJs)
              (assoc . g$assoc$5797$RyrJs)
              (eval . g$eval$13371$RyrJs)
              (environment . g$environment$13367$RyrJs)
              (make-enumeration . g$make-enumeration$8026$RyrJs)
              (enum-set=? . g$enum-set=?$8033$RyrJs)
              (enum-set-universe . g$enum-set-universe$8027$RyrJs)
              (enum-set-union . g$enum-set-union$8034$RyrJs)
              (enum-set-subset? . g$enum-set-subset?$8032$RyrJs)
              (enum-set-projection . g$enum-set-projection$8038$RyrJs)
              (enum-set-member? . g$enum-set-member?$8031$RyrJs)
              (enum-set-intersection
                .
                g$enum-set-intersection$8035$RyrJs)
              (enum-set-indexer . g$enum-set-indexer$8028$RyrJs)
              (enum-set-difference . g$enum-set-difference$8036$RyrJs)
              (enum-set-constructor . g$enum-set-constructor$8029$RyrJs)
              (enum-set-complement . g$enum-set-complement$8037$RyrJs)
              (enum-set->list . g$enum-set->list$8030$RyrJs)
              (who-condition? . g$who-condition?$7168$RyrJs)
              (warning? . g$warning?$7117$RyrJs)
              (violation? . g$violation?$7141$RyrJs)
              (undefined-violation? . g$undefined-violation?$7213$RyrJs)
              (syntax-violation? . g$syntax-violation?$7203$RyrJs)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$7205$RyrJs)
              (syntax-violation-form
                .
                g$syntax-violation-form$7204$RyrJs)
              (syntax-violation . g$syntax-violation$13389$RyrJs)
              (serious-condition? . g$serious-condition?$7125$RyrJs)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$7177$RyrJs)
              (message-condition? . g$message-condition?$7108$RyrJs)
              (make-who-condition . g$make-who-condition$7166$RyrJs)
              (make-warning . g$make-warning$7116$RyrJs)
              (make-violation . g$make-violation$7140$RyrJs)
              (make-undefined-violation
                .
                g$make-undefined-violation$7212$RyrJs)
              (make-syntax-violation
                .
                g$make-syntax-violation$7200$RyrJs)
              (make-serious-condition
                .
                g$make-serious-condition$7124$RyrJs)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$7176$RyrJs)
              (make-message-condition
                .
                g$make-message-condition$7106$RyrJs)
              (make-lexical-violation
                .
                g$make-lexical-violation$7192$RyrJs)
              (make-irritants-condition
                .
                g$make-irritants-condition$7156$RyrJs)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$7184$RyrJs)
              (make-error . g$make-error$7132$RyrJs)
              (make-assertion-violation
                .
                g$make-assertion-violation$7148$RyrJs)
              (lexical-violation? . g$lexical-violation?$7193$RyrJs)
              (irritants-condition? . g$irritants-condition?$7158$RyrJs)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$7185$RyrJs)
              (error? . g$error?$7133$RyrJs)
              (condition-who . g$condition-who$7169$RyrJs)
              (condition-message . g$condition-message$7109$RyrJs)
              (condition-irritants . g$condition-irritants$7159$RyrJs)
              (assertion-violation? . g$assertion-violation?$7149$RyrJs)
              (native-endianness . g$native-endianness$6688$RyrJs)
              (bytevector? . g$bytevector?$6455$RyrJs)
              (bytevector-u64-set! . g$bytevector-u64-set!$6709$RyrJs)
              (bytevector-u64-ref . g$bytevector-u64-ref$6705$RyrJs)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$6711$RyrJs)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$6707$RyrJs)
              (bytevector-u32-set! . g$bytevector-u32-set!$6701$RyrJs)
              (bytevector-u32-ref . g$bytevector-u32-ref$6697$RyrJs)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$6703$RyrJs)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$6699$RyrJs)
              (bytevector-u16-set! . g$bytevector-u16-set!$6693$RyrJs)
              (bytevector-u16-ref . g$bytevector-u16-ref$6689$RyrJs)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$6695$RyrJs)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$6691$RyrJs)
              (bytevector-s64-set! . g$bytevector-s64-set!$6710$RyrJs)
              (bytevector-s64-ref . g$bytevector-s64-ref$6706$RyrJs)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$6712$RyrJs)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$6708$RyrJs)
              (bytevector-s32-set! . g$bytevector-s32-set!$6702$RyrJs)
              (bytevector-s32-ref . g$bytevector-s32-ref$6698$RyrJs)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$6704$RyrJs)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$6700$RyrJs)
              (bytevector-s16-set! . g$bytevector-s16-set!$6694$RyrJs)
              (bytevector-s16-ref . g$bytevector-s16-ref$6690$RyrJs)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$6696$RyrJs)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$6692$RyrJs)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$6715$RyrJs)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$6713$RyrJs)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$6716$RyrJs)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$6714$RyrJs)
              (no-nans-violation? . g$no-nans-violation?$7333$RyrJs)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$7325$RyrJs)
              (make-no-nans-violation
                .
                g$make-no-nans-violation$7332$RyrJs)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$7324$RyrJs)
              (flzero? . g$flzero?$7796$RyrJs)
              (fltruncate . g$fltruncate$7791$RyrJs)
              (fltan . g$fltan$7781$RyrJs)
              (flsqrt . g$flsqrt$7786$RyrJs)
              (flsin . g$flsin$7779$RyrJs)
              (flround . g$flround$7792$RyrJs)
              (flpositive? . g$flpositive?$7794$RyrJs)
              (flonum? . g$flonum?$6460$RyrJs)
              (flodd? . g$flodd?$7798$RyrJs)
              (flnegative? . g$flnegative?$7795$RyrJs)
              (flnan? . g$flnan?$7778$RyrJs)
              (flmod0 . g$flmod0$7772$RyrJs)
              (flmod . g$flmod$7771$RyrJs)
              (flmin . g$flmin$7800$RyrJs)
              (flmax . g$flmax$7799$RyrJs)
              (fllog . g$fllog$7785$RyrJs)
              (flinteger? . g$flinteger?$7775$RyrJs)
              (flinfinite? . g$flinfinite?$7777$RyrJs)
              (flfloor . g$flfloor$7790$RyrJs)
              (flfinite? . g$flfinite?$7776$RyrJs)
              (flexpt . g$flexpt$7788$RyrJs)
              (flexp . g$flexp$7787$RyrJs)
              (fleven? . g$fleven?$7797$RyrJs)
              (fldiv0-and-mod0 . g$fldiv0-and-mod0$7774$RyrJs)
              (fldiv-and-mod . g$fldiv-and-mod$7773$RyrJs)
              (flcos . g$flcos$7780$RyrJs)
              (flceiling . g$flceiling$7789$RyrJs)
              (flatan . g$flatan$7784$RyrJs)
              (flasin . g$flasin$7782$RyrJs)
              (flacos . g$flacos$7783$RyrJs)
              (flabs . g$flabs$7793$RyrJs)
              (fxzero? . g$fxzero?$7679$RyrJs)
              (fxrotate-bit-field . g$fxrotate-bit-field$7693$RyrJs)
              (fxpositive? . g$fxpositive?$7677$RyrJs)
              (fxodd? . g$fxodd?$7681$RyrJs)
              (fxnegative? . g$fxnegative?$7678$RyrJs)
              (fxmod0 . g$fxmod0$7674$RyrJs)
              (fxmod . g$fxmod$7673$RyrJs)
              (fxmin . g$fxmin$7683$RyrJs)
              (fxmax . g$fxmax$7682$RyrJs)
              (fxif . g$fxif$7687$RyrJs)
              (fxeven? . g$fxeven?$7680$RyrJs)
              (fxdiv0-and-mod0 . g$fxdiv0-and-mod0$7676$RyrJs)
              (fxdiv-and-mod . g$fxdiv-and-mod$7675$RyrJs)
              (fxcopy-bit-field . g$fxcopy-bit-field$7690$RyrJs)
              (fxcopy-bit . g$fxcopy-bit$7688$RyrJs)
              (fxbit-field . g$fxbit-field$7689$RyrJs)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$7692$RyrJs)
              (fxarithmetic-shift-left
                .
                g$fxarithmetic-shift-left$7691$RyrJs)
              (fx-/carry . g$fx-/carry$7685$RyrJs)
              (fx+/carry . g$fx+/carry$7686$RyrJs)
              (fx*/carry . g$fx*/carry$7684$RyrJs)
              (fixnum-width . g$fixnum-width$6461$RyrJs)
              (fixnum? . g$fixnum?$6459$RyrJs)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$7589$RyrJs)
              (bitwise-if . g$bitwise-if$7583$RyrJs)
              (bitwise-copy-bit-field
                .
                g$bitwise-copy-bit-field$7586$RyrJs)
              (bitwise-copy-bit . g$bitwise-copy-bit$7584$RyrJs)
              (bitwise-bit-field . g$bitwise-bit-field$7585$RyrJs)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$7588$RyrJs)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$7587$RyrJs)
              (zero? . g$zero?$6494$RyrJs)
              (vector? . g$vector?$6454$RyrJs)
              (vector-map . g$vector-map$6516$RyrJs)
              (vector-for-each . g$vector-for-each$6517$RyrJs)
              (vector-fill! . g$vector-fill!$6462$RyrJs)
              (symbol? . g$symbol?$6456$RyrJs)
              (symbol=? . g$symbol=?$6506$RyrJs)
              (string>? . g$string>?$6503$RyrJs)
              (string>=? . g$string>=?$6505$RyrJs)
              (string=? . g$string=?$6501$RyrJs)
              (string<? . g$string<?$6502$RyrJs)
              (string<=? . g$string<=?$6504$RyrJs)
              (string-for-each . g$string-for-each$6518$RyrJs)
              (reverse . g$reverse$6463$RyrJs)
              (rationalize . g$rationalize$6513$RyrJs)
              (procedure? . g$procedure?$6458$RyrJs)
              (positive? . g$positive?$6492$RyrJs)
              (odd? . g$odd?$6496$RyrJs)
              (negative? . g$negative?$6493$RyrJs)
              (min . g$min$6498$RyrJs)
              (max . g$max$6497$RyrJs)
              (map . g$map$5807$RyrJs)
              (list-tail . g$list-tail$5787$RyrJs)
              (list-ref . g$list-ref$5788$RyrJs)
              (list->vector . g$list->vector$6451$RyrJs)
              (list->string . g$list->string$6452$RyrJs)
              (lcm . g$lcm$6500$RyrJs)
              (gcd . g$gcd$6499$RyrJs)
              (for-each . g$for-each$5808$RyrJs)
              (even? . g$even?$6495$RyrJs)
              (div0-and-mod0 . g$div0-and-mod0$6450$RyrJs)
              (mod0 . g$mod0$6448$RyrJs)
              (div-and-mod . g$div-and-mod$6449$RyrJs)
              (mod . g$mod$6447$RyrJs)
              (char? . g$char?$6453$RyrJs)
              (char>? . g$char>?$6510$RyrJs)
              (char>=? . g$char>=?$6512$RyrJs)
              (char=? . g$char=?$6508$RyrJs)
              (char<? . g$char<?$6509$RyrJs)
              (char<=? . g$char<=?$6511$RyrJs)
              (cddddr . g$cddddr$6491$RyrJs)
              (cdddar . g$cdddar$6490$RyrJs)
              (cddadr . g$cddadr$6489$RyrJs)
              (cddaar . g$cddaar$6488$RyrJs)
              (cdaddr . g$cdaddr$6487$RyrJs)
              (cdadar . g$cdadar$6486$RyrJs)
              (cdaadr . g$cdaadr$6485$RyrJs)
              (cdaaar . g$cdaaar$6484$RyrJs)
              (cadddr . g$cadddr$6483$RyrJs)
              (caddar . g$caddar$6482$RyrJs)
              (cadadr . g$cadadr$6481$RyrJs)
              (cadaar . g$cadaar$6480$RyrJs)
              (caaddr . g$caaddr$6479$RyrJs)
              (caadar . g$caadar$6478$RyrJs)
              (caaadr . g$caaadr$6477$RyrJs)
              (caaaar . g$caaaar$6476$RyrJs)
              (cdddr . g$cdddr$6475$RyrJs)
              (cddar . g$cddar$6474$RyrJs)
              (cdadr . g$cdadr$6473$RyrJs)
              (cdaar . g$cdaar$6472$RyrJs)
              (caddr . g$caddr$6471$RyrJs)
              (cadar . g$cadar$6470$RyrJs)
              (caadr . g$caadr$6469$RyrJs)
              (caaar . g$caaar$6468$RyrJs)
              (cddr . g$cddr$6467$RyrJs)
              (cdar . g$cdar$6466$RyrJs)
              (cadr . g$cadr$6465$RyrJs)
              (caar . g$caar$6464$RyrJs)
              (boolean? . g$boolean?$6457$RyrJs)
              (boolean=? . g$boolean=?$6507$RyrJs)
              (enum-set? . g$enum?$8007$RyrJs)
              (make-promise . g$make-promise$7369$RyrJs)
              (load/unload . g$load/unload$13467$RyrJs)
              (load/args . g$load/args$13466$RyrJs)
              (printf . g$printf$8062$RyrJs)
              (fprintf . g$fprintf$8063$RyrJs)
              (format . g$format$8064$RyrJs)
              (trace-printer . g$trace-printer$13463$RyrJs)
              (make-traced-macro . g$make-traced-macro$8068$RyrJs)
              (assertion-error . g$assertion-error$13385$RyrJs)
              (make-parameter . g$make-parameter$8229$RyrJs)
              (environment-bindings
                .
                g$environment-bindings$13363$RyrJs)
              (environment-symbols . g$environment-symbols$13366$RyrJs)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$13362$RyrJs)
              (library-path . g$library-path$9044$RyrJs)
              (make-compile-time-value
                .
                g$make-compile-time-value$13212$RyrJs)
              (expand->core . g$expand->core$13372$RyrJs)
              (expand . g$expand$13370$RyrJs)
              (syntax-transpose . g$syntax-transpose$13319$RyrJs)
              (convert->cps . g$convert->cps$8746$RyrJs)
              (installed-libraries . g$installed-libraries$9065$RyrJs)
              (uninstall-library . g$uninstall-library$9056$RyrJs)
              (pretty-width . g$pretty-width$8426$RyrJs)
              (pretty-print . g$pretty-print$8428$RyrJs)))))))
    (g$install-library$9060$RyrJs
      'g$11626$RyrJs
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$11619$RyrJs)
        (cosh . g$11618$RyrJs)
        (sinh . g$11617$RyrJs)
        (make-guid . g$11616$RyrJs)
        (unspecified? . g$11615$RyrJs)
        (make-list . g$5082$RyrJs)
        (last-pair . g$5081$RyrJs)
        (load-r5rs . g$11614$RyrJs)
        (license . g$11613$RyrJs)
        (stacktrace . g$11612$RyrJs)
        (ironscheme-build . g$11102$RyrJs)
        (remove-location . g$11599$RyrJs)
        (set-symbol-value! . g$11598$RyrJs)
        (symbol-value . g$11597$RyrJs)
        (symbol-bound? . g$11596$RyrJs)
        (ungensym . g$11595$RyrJs)
        (gensym . g$11594$RyrJs)
        (void . g$11593$RyrJs)
        (compile-system-libraries . g$11106$RyrJs)
        (compile->closure . g$11108$RyrJs)
        (compile . g$11107$RyrJs)
        (load . g$11101$RyrJs)
        (interaction-environment . g$8085$RyrJs)
        (string-upcase . g$11588$RyrJs)
        (string-titlecase . g$11587$RyrJs)
        (string-normalize-nfkd . g$6303$RyrJs)
        (string-normalize-nfkc . g$6302$RyrJs)
        (string-normalize-nfd . g$6301$RyrJs)
        (string-normalize-nfc . g$6300$RyrJs)
        (string-foldcase . g$11586$RyrJs)
        (string-downcase . g$11585$RyrJs)
        (string-ci>? . g$6287$RyrJs)
        (string-ci>=? . g$6289$RyrJs)
        (string-ci=? . g$6285$RyrJs)
        (string-ci<? . g$6286$RyrJs)
        (string-ci<=? . g$6288$RyrJs)
        (char-whitespace? . g$11584$RyrJs)
        (char-upper-case? . g$11583$RyrJs)
        (char-title-case? . g$11582$RyrJs)
        (char-numeric? . g$11581$RyrJs)
        (char-lower-case? . g$11580$RyrJs)
        (char-general-category . g$11579$RyrJs)
        (char-upcase . g$11578$RyrJs)
        (char-titlecase . g$11577$RyrJs)
        (char-foldcase . g$11576$RyrJs)
        (char-downcase . g$11575$RyrJs)
        (char-ci>? . g$6297$RyrJs)
        (char-ci>=? . g$6299$RyrJs)
        (char-ci=? . g$6295$RyrJs)
        (char-ci<? . g$6296$RyrJs)
        (char-ci<=? . g$6298$RyrJs)
        (char-alphabetic? . g$11574$RyrJs)
        (make-variable-transformer . g$7759$RyrJs)
        (identifier? . g$8079$RyrJs)
        (generate-temporaries . g$8068$RyrJs)
        (free-identifier=? . g$8069$RyrJs)
        (syntax->datum . g$8081$RyrJs)
        (datum->syntax . g$8080$RyrJs)
        (bound-identifier=? . g$8070$RyrJs)
        (record-type-descriptor? . g$11573$RyrJs)
        (record-predicate . g$11572$RyrJs)
        (record-mutator . g$11571$RyrJs)
        (record-constructor . g$11570$RyrJs)
        (record-accessor . g$11569$RyrJs)
        (make-record-type-descriptor . g$11568$RyrJs)
        (make-record-constructor-descriptor . g$11567$RyrJs)
        (record? . g$11566$RyrJs)
        (record-type-uid . g$11565$RyrJs)
        (record-type-sealed? . g$11564$RyrJs)
        (record-type-parent . g$11563$RyrJs)
        (record-type-opaque? . g$11562$RyrJs)
        (record-type-name . g$11561$RyrJs)
        (record-type-generative? . g$11560$RyrJs)
        (record-type-field-names . g$11559$RyrJs)
        (record-rtd . g$11558$RyrJs)
        (record-field-mutable? . g$11557$RyrJs)
        (delete-file . g$5694$RyrJs)
        (file-exists? . g$5693$RyrJs)
        (vector-sort! . g$11556$RyrJs)
        (vector-sort . g$11555$RyrJs)
        (list-sort . g$6256$RyrJs)
        (symbol-hash . g$11554$RyrJs)
        (string-ci-hash . g$11553$RyrJs)
        (string-hash . g$11552$RyrJs)
        (equal-hash . g$11551$RyrJs)
        (hashtable-equivalence-function . g$11550$RyrJs)
        (make-hashtable . g$11549$RyrJs)
        (hashtable-hash-function . g$11548$RyrJs)
        (make-eqv-hashtable . g$5661$RyrJs)
        (make-eq-hashtable . g$5660$RyrJs)
        (hashtable? . g$11547$RyrJs)
        (hashtable-update! . g$5667$RyrJs)
        (hashtable-size . g$5662$RyrJs)
        (hashtable-set! . g$5664$RyrJs)
        (hashtable-ref . g$5663$RyrJs)
        (hashtable-mutable? . g$11546$RyrJs)
        (hashtable-keys . g$11545$RyrJs)
        (hashtable-entries . g$11544$RyrJs)
        (hashtable-delete! . g$5665$RyrJs)
        (hashtable-copy . g$11543$RyrJs)
        (hashtable-contains? . g$5666$RyrJs)
        (hashtable-clear! . g$5668$RyrJs)
        (call-with-output-file . g$6587$RyrJs)
        (call-with-input-file . g$6586$RyrJs)
        (write-char . g$6578$RyrJs)
        (write . g$11542$RyrJs)
        (with-output-to-file . g$6585$RyrJs)
        (with-input-from-file . g$6584$RyrJs)
        (read-char . g$6577$RyrJs)
        (read . g$11541$RyrJs)
        (peek-char . g$6576$RyrJs)
        (open-output-file . g$11540$RyrJs)
        (open-input-file . g$11539$RyrJs)
        (newline . g$6588$RyrJs)
        (display . g$11538$RyrJs)
        (close-output-port . g$11537$RyrJs)
        (close-input-port . g$11536$RyrJs)
        (eof-object? . g$11535$RyrJs)
        (eof-object . g$11534$RyrJs)
        (current-error-port . g$11533$RyrJs)
        (current-output-port . g$11532$RyrJs)
        (current-input-port . g$11531$RyrJs)
        (output-port? . g$11530$RyrJs)
        (input-port? . g$11529$RyrJs)
        (utf-8-codec . g$11528$RyrJs)
        (utf-16-codec . g$11527$RyrJs)
        (transcoder-error-handling-mode . g$11526$RyrJs)
        (transcoder-eol-style . g$11525$RyrJs)
        (transcoder-codec . g$11524$RyrJs)
        (transcoded-port . g$11523$RyrJs)
        (textual-port? . g$11522$RyrJs)
        (string->bytevector . g$11521$RyrJs)
        (standard-output-port . g$11520$RyrJs)
        (standard-input-port . g$11519$RyrJs)
        (standard-error-port . g$11518$RyrJs)
        (set-port-position! . g$11517$RyrJs)
        (put-u8 . g$11516$RyrJs)
        (put-string . g$11515$RyrJs)
        (put-datum . g$6556$RyrJs)
        (put-char . g$11514$RyrJs)
        (put-bytevector . g$11513$RyrJs)
        (port? . g$6561$RyrJs)
        (port-transcoder . g$11512$RyrJs)
        (port-position . g$11511$RyrJs)
        (port-has-set-port-position!? . g$11510$RyrJs)
        (port-has-port-position? . g$11509$RyrJs)
        (port-eof? . g$11508$RyrJs)
        (output-port-buffer-mode . g$11507$RyrJs)
        (open-string-output-port . g$6560$RyrJs)
        (open-string-input-port . g$11506$RyrJs)
        (open-file-output-port . g$11505$RyrJs)
        (open-file-input/output-port . g$11504$RyrJs)
        (open-file-input-port . g$11503$RyrJs)
        (open-bytevector-output-port . g$11502$RyrJs)
        (open-bytevector-input-port . g$11501$RyrJs)
        (native-transcoder . g$11500$RyrJs)
        (native-eol-style . g$11499$RyrJs)
        (make-transcoder . g$11498$RyrJs)
        (latin-1-codec . g$11497$RyrJs)
        (make-i/o-write-error . g$6066$RyrJs)
        (make-i/o-read-error . g$6053$RyrJs)
        (make-i/o-port-error . g$6161$RyrJs)
        (make-i/o-invalid-position-error . g$6079$RyrJs)
        (make-i/o-filename-error . g$6094$RyrJs)
        (make-i/o-file-protection-error . g$6109$RyrJs)
        (make-i/o-file-is-read-only-error . g$6122$RyrJs)
        (make-i/o-file-does-not-exist-error . g$6148$RyrJs)
        (make-i/o-file-already-exists-error . g$6135$RyrJs)
        (make-i/o-error . g$6040$RyrJs)
        (make-i/o-encoding-error . g$6189$RyrJs)
        (make-i/o-decoding-error . g$6176$RyrJs)
        (make-custom-textual-output-port . g$11496$RyrJs)
        (make-custom-textual-input/output-port . g$11495$RyrJs)
        (make-custom-textual-input-port . g$11494$RyrJs)
        (make-custom-binary-output-port . g$11493$RyrJs)
        (make-custom-binary-input/output-port . g$11492$RyrJs)
        (make-custom-binary-input-port . g$11491$RyrJs)
        (make-bytevector . g$11490$RyrJs)
        (lookahead-u8 . g$11489$RyrJs)
        (lookahead-char . g$11488$RyrJs)
        (i/o-write-error? . g$6067$RyrJs)
        (i/o-read-error? . g$6054$RyrJs)
        (i/o-port-error? . g$6163$RyrJs)
        (i/o-invalid-position-error? . g$6081$RyrJs)
        (i/o-error-position . g$6082$RyrJs)
        (i/o-filename-error? . g$6096$RyrJs)
        (i/o-file-protection-error? . g$6110$RyrJs)
        (i/o-file-is-read-only-error? . g$6123$RyrJs)
        (i/o-file-does-not-exist-error? . g$6149$RyrJs)
        (i/o-file-already-exists-error? . g$6136$RyrJs)
        (i/o-error? . g$6041$RyrJs)
        (i/o-error-port . g$6164$RyrJs)
        (i/o-error-filename . g$6097$RyrJs)
        (i/o-encoding-error? . g$6191$RyrJs)
        (i/o-encoding-error-char . g$6192$RyrJs)
        (i/o-decoding-error? . g$6177$RyrJs)
        (get-u8 . g$11487$RyrJs)
        (get-string-n! . g$11486$RyrJs)
        (get-string-n . g$11485$RyrJs)
        (get-string-all . g$11484$RyrJs)
        (get-line . g$11483$RyrJs)
        (get-datum . g$6557$RyrJs)
        (get-char . g$11482$RyrJs)
        (get-bytevector-some . g$11481$RyrJs)
        (get-bytevector-n! . g$11480$RyrJs)
        (get-bytevector-n . g$11479$RyrJs)
        (get-bytevector-all . g$11478$RyrJs)
        (flush-output-port . g$11477$RyrJs)
        (close-port . g$11476$RyrJs)
        (call-with-string-output-port . g$6562$RyrJs)
        (call-with-port . g$6563$RyrJs)
        (call-with-bytevector-output-port . g$11475$RyrJs)
        (bytevector->string . g$11474$RyrJs)
        (buffer-mode? . g$11473$RyrJs)
        (binary-port? . g$11472$RyrJs)
        (scheme-report-environment . g$8058$RyrJs)
        (quotient . g$6235$RyrJs)
        (null-environment . g$8057$RyrJs)
        (remainder . g$6236$RyrJs)
        (modulo . g$6237$RyrJs)
        (inexact->exact . g$6232$RyrJs)
        (force . g$6239$RyrJs)
        (exact->inexact . g$6233$RyrJs)
        (exit . g$11471$RyrJs)
        (command-line . g$11097$RyrJs)
        (string-fill! . g$11470$RyrJs)
        (string-set! . g$11469$RyrJs)
        (set-cdr! . g$11468$RyrJs)
        (set-car! . g$11467$RyrJs)
        (remove . g$5104$RyrJs)
        (remv . g$5105$RyrJs)
        (remp . g$5085$RyrJs)
        (remq . g$5106$RyrJs)
        (partition . g$5084$RyrJs)
        (memv . g$5092$RyrJs)
        (memq . g$5091$RyrJs)
        (memp . g$5094$RyrJs)
        (member . g$5093$RyrJs)
        (exists . g$5098$RyrJs)
        (for-all . g$5097$RyrJs)
        (fold-right . g$5103$RyrJs)
        (fold-left . g$5102$RyrJs)
        (find . g$5083$RyrJs)
        (filter . g$5086$RyrJs)
        (cons* . g$5101$RyrJs)
        (assv . g$5088$RyrJs)
        (assq . g$5087$RyrJs)
        (assp . g$5090$RyrJs)
        (assoc . g$5089$RyrJs)
        (with-exception-handler . g$11466$RyrJs)
        (raise-continuable . g$11465$RyrJs)
        (raise . g$11464$RyrJs)
        (eval . g$8060$RyrJs)
        (environment . g$8056$RyrJs)
        (make-enumeration . g$6648$RyrJs)
        (enum-set=? . g$6655$RyrJs)
        (enum-set-universe . g$6649$RyrJs)
        (enum-set-union . g$6656$RyrJs)
        (enum-set-subset? . g$6654$RyrJs)
        (enum-set-projection . g$6660$RyrJs)
        (enum-set-member? . g$6653$RyrJs)
        (enum-set-intersection . g$6657$RyrJs)
        (enum-set-indexer . g$6650$RyrJs)
        (enum-set-difference . g$6658$RyrJs)
        (enum-set-constructor . g$6651$RyrJs)
        (enum-set-complement . g$6659$RyrJs)
        (enum-set->list . g$6652$RyrJs)
        (who-condition? . g$5958$RyrJs)
        (warning? . g$5877$RyrJs)
        (violation? . g$5916$RyrJs)
        (undefined-violation? . g$6028$RyrJs)
        (syntax-violation? . g$6013$RyrJs)
        (syntax-violation-subform . g$6015$RyrJs)
        (syntax-violation-form . g$6014$RyrJs)
        (syntax-violation . g$8078$RyrJs)
        (simple-conditions . g$11463$RyrJs)
        (serious-condition? . g$5890$RyrJs)
        (non-continuable-violation? . g$5972$RyrJs)
        (message-condition? . g$5863$RyrJs)
        (make-who-condition . g$5956$RyrJs)
        (make-warning . g$5876$RyrJs)
        (make-violation . g$5915$RyrJs)
        (make-undefined-violation . g$6027$RyrJs)
        (make-syntax-violation . g$6010$RyrJs)
        (make-serious-condition . g$5889$RyrJs)
        (make-non-continuable-violation . g$5971$RyrJs)
        (make-message-condition . g$5861$RyrJs)
        (make-lexical-violation . g$5997$RyrJs)
        (make-irritants-condition . g$5941$RyrJs)
        (make-implementation-restriction-violation . g$5984$RyrJs)
        (make-error . g$5902$RyrJs)
        (make-assertion-violation . g$5928$RyrJs)
        (lexical-violation? . g$5998$RyrJs)
        (irritants-condition? . g$5943$RyrJs)
        (implementation-restriction-violation? . g$5985$RyrJs)
        (error? . g$5903$RyrJs)
        (condition-who . g$5959$RyrJs)
        (condition-predicate . g$11462$RyrJs)
        (condition-message . g$5864$RyrJs)
        (condition-irritants . g$5944$RyrJs)
        (condition-accessor . g$11461$RyrJs)
        (condition . g$11460$RyrJs)
        (assertion-violation? . g$5929$RyrJs)
        (condition? . g$11459$RyrJs)
        (utf32->string . g$11458$RyrJs)
        (utf16->string . g$11457$RyrJs)
        (utf8->string . g$11456$RyrJs)
        (uint-list->bytevector . g$11455$RyrJs)
        (u8-list->bytevector . g$11454$RyrJs)
        (string->utf8 . g$11453$RyrJs)
        (string->utf32 . g$11452$RyrJs)
        (string->utf16 . g$11451$RyrJs)
        (sint-list->bytevector . g$11450$RyrJs)
        (native-endianness . g$5700$RyrJs)
        (bytevector? . g$5403$RyrJs)
        (bytevector=? . g$11449$RyrJs)
        (bytevector-uint-set! . g$11448$RyrJs)
        (bytevector-uint-ref . g$11447$RyrJs)
        (bytevector-u8-set! . g$11446$RyrJs)
        (bytevector-u8-ref . g$11445$RyrJs)
        (bytevector-u64-set! . g$5721$RyrJs)
        (bytevector-u64-ref . g$5717$RyrJs)
        (bytevector-u64-native-set! . g$5723$RyrJs)
        (bytevector-u64-native-ref . g$5719$RyrJs)
        (bytevector-u32-set! . g$5713$RyrJs)
        (bytevector-u32-ref . g$5709$RyrJs)
        (bytevector-u32-native-set! . g$5715$RyrJs)
        (bytevector-u32-native-ref . g$5711$RyrJs)
        (bytevector-u16-set! . g$5705$RyrJs)
        (bytevector-u16-ref . g$5701$RyrJs)
        (bytevector-u16-native-set! . g$5707$RyrJs)
        (bytevector-u16-native-ref . g$5703$RyrJs)
        (bytevector-sint-set! . g$11444$RyrJs)
        (bytevector-sint-ref . g$11443$RyrJs)
        (bytevector-s8-set! . g$11442$RyrJs)
        (bytevector-s8-ref . g$11441$RyrJs)
        (bytevector-s64-set! . g$5722$RyrJs)
        (bytevector-s64-ref . g$5718$RyrJs)
        (bytevector-s64-native-set! . g$5724$RyrJs)
        (bytevector-s64-native-ref . g$5720$RyrJs)
        (bytevector-s32-set! . g$5714$RyrJs)
        (bytevector-s32-ref . g$5710$RyrJs)
        (bytevector-s32-native-set! . g$5716$RyrJs)
        (bytevector-s32-native-ref . g$5712$RyrJs)
        (bytevector-s16-set! . g$5706$RyrJs)
        (bytevector-s16-ref . g$5702$RyrJs)
        (bytevector-s16-native-set! . g$5708$RyrJs)
        (bytevector-s16-native-ref . g$5704$RyrJs)
        (bytevector-length . g$11440$RyrJs)
        (bytevector-ieee-single-set! . g$11439$RyrJs)
        (bytevector-ieee-single-ref . g$11438$RyrJs)
        (bytevector-ieee-single-native-set! . g$5727$RyrJs)
        (bytevector-ieee-single-native-ref . g$5725$RyrJs)
        (bytevector-ieee-double-set! . g$11437$RyrJs)
        (bytevector-ieee-double-ref . g$11436$RyrJs)
        (bytevector-ieee-double-native-set! . g$5728$RyrJs)
        (bytevector-ieee-double-native-ref . g$5726$RyrJs)
        (bytevector-fill! . g$11435$RyrJs)
        (bytevector-copy! . g$11434$RyrJs)
        (bytevector-copy . g$11433$RyrJs)
        (bytevector->uint-list . g$11432$RyrJs)
        (bytevector->u8-list . g$11431$RyrJs)
        (bytevector->sint-list . g$11430$RyrJs)
        (no-nans-violation? . g$6218$RyrJs)
        (no-infinities-violation? . g$6205$RyrJs)
        (make-no-nans-violation . g$6217$RyrJs)
        (make-no-infinities-violation . g$6204$RyrJs)
        (real->flonum . g$11429$RyrJs)
        (flzero? . g$6502$RyrJs)
        (fltruncate . g$6497$RyrJs)
        (fltan . g$6487$RyrJs)
        (flsqrt . g$6492$RyrJs)
        (flsin . g$6485$RyrJs)
        (flround . g$6498$RyrJs)
        (flpositive? . g$6500$RyrJs)
        (flonum? . g$5408$RyrJs)
        (flodd? . g$6504$RyrJs)
        (flnumerator . g$11428$RyrJs)
        (flnegative? . g$6501$RyrJs)
        (flnan? . g$6484$RyrJs)
        (flmod0 . g$6478$RyrJs)
        (flmod . g$6477$RyrJs)
        (flmin . g$6506$RyrJs)
        (flmax . g$6505$RyrJs)
        (fllog . g$6491$RyrJs)
        (flinteger? . g$6481$RyrJs)
        (flinfinite? . g$6483$RyrJs)
        (flfloor . g$6496$RyrJs)
        (flfinite? . g$6482$RyrJs)
        (flexpt . g$6494$RyrJs)
        (flexp . g$6493$RyrJs)
        (fleven? . g$6503$RyrJs)
        (fldiv0-and-mod0 . g$6480$RyrJs)
        (fldiv0 . g$11427$RyrJs)
        (fldiv-and-mod . g$6479$RyrJs)
        (fldiv . g$11426$RyrJs)
        (fldenominator . g$11425$RyrJs)
        (flcos . g$6486$RyrJs)
        (flceiling . g$6495$RyrJs)
        (flatan . g$6490$RyrJs)
        (flasin . g$6488$RyrJs)
        (flacos . g$6489$RyrJs)
        (flabs . g$6499$RyrJs)
        (fl>? . g$11424$RyrJs)
        (fl>=? . g$11423$RyrJs)
        (fl=? . g$11422$RyrJs)
        (fl<? . g$11421$RyrJs)
        (fl<=? . g$11420$RyrJs)
        (fl/ . g$11419$RyrJs)
        (fl- . g$11418$RyrJs)
        (fl+ . g$11417$RyrJs)
        (fl* . g$11416$RyrJs)
        (fixnum->flonum . g$11415$RyrJs)
        (fxzero? . g$6399$RyrJs)
        (fxxor . g$11414$RyrJs)
        (fxrotate-bit-field . g$6413$RyrJs)
        (fxreverse-bit-field . g$11413$RyrJs)
        (fxpositive? . g$6397$RyrJs)
        (fxodd? . g$6401$RyrJs)
        (fxnot . g$11412$RyrJs)
        (fxnegative? . g$6398$RyrJs)
        (fxmod0 . g$6394$RyrJs)
        (fxmod . g$6393$RyrJs)
        (fxmin . g$6403$RyrJs)
        (fxmax . g$6402$RyrJs)
        (fxlength . g$11411$RyrJs)
        (fxior . g$11410$RyrJs)
        (fxif . g$6407$RyrJs)
        (fxfirst-bit-set . g$11409$RyrJs)
        (fxeven? . g$6400$RyrJs)
        (fxdiv0-and-mod0 . g$6396$RyrJs)
        (fxdiv0 . g$11408$RyrJs)
        (fxdiv-and-mod . g$6395$RyrJs)
        (fxdiv . g$11407$RyrJs)
        (fxcopy-bit-field . g$6410$RyrJs)
        (fxcopy-bit . g$6408$RyrJs)
        (fxbit-set? . g$11406$RyrJs)
        (fxbit-field . g$6409$RyrJs)
        (fxbit-count . g$11405$RyrJs)
        (fxarithmetic-shift-right . g$6412$RyrJs)
        (fxarithmetic-shift-left . g$6411$RyrJs)
        (fxarithmetic-shift . g$11404$RyrJs)
        (fxand . g$11403$RyrJs)
        (fx>? . g$11402$RyrJs)
        (fx>=? . g$11401$RyrJs)
        (fx=? . g$11400$RyrJs)
        (fx<? . g$11399$RyrJs)
        (fx<=? . g$11398$RyrJs)
        (fx-/carry . g$6405$RyrJs)
        (fx- . g$11397$RyrJs)
        (fx+/carry . g$6406$RyrJs)
        (fx+ . g$11396$RyrJs)
        (fx*/carry . g$6404$RyrJs)
        (fx* . g$11395$RyrJs)
        (greatest-fixnum . g$11394$RyrJs)
        (least-fixnum . g$11393$RyrJs)
        (fixnum-width . g$5409$RyrJs)
        (fixnum? . g$5407$RyrJs)
        (bitwise-rotate-bit-field . g$6367$RyrJs)
        (bitwise-reverse-bit-field . g$11392$RyrJs)
        (bitwise-length . g$11391$RyrJs)
        (bitwise-if . g$6361$RyrJs)
        (bitwise-first-bit-set . g$11390$RyrJs)
        (bitwise-copy-bit-field . g$6364$RyrJs)
        (bitwise-copy-bit . g$6362$RyrJs)
        (bitwise-bit-set? . g$11389$RyrJs)
        (bitwise-bit-field . g$6363$RyrJs)
        (bitwise-bit-count . g$11388$RyrJs)
        (bitwise-xor . g$11387$RyrJs)
        (bitwise-ior . g$11386$RyrJs)
        (bitwise-and . g$11385$RyrJs)
        (bitwise-not . g$11384$RyrJs)
        (bitwise-arithmetic-shift-right . g$6366$RyrJs)
        (bitwise-arithmetic-shift-left . g$6365$RyrJs)
        (bitwise-arithmetic-shift . g$11383$RyrJs)
        (zero? . g$5442$RyrJs)
        (vector? . g$5402$RyrJs)
        (vector-set! . g$11382$RyrJs)
        (vector-ref . g$11381$RyrJs)
        (vector-map . g$5474$RyrJs)
        (vector-length . g$11380$RyrJs)
        (vector-for-each . g$5475$RyrJs)
        (vector-fill! . g$5410$RyrJs)
        (vector->list . g$11379$RyrJs)
        (vector . g$11378$RyrJs)
        (values . g$11377$RyrJs)
        (truncate . g$11376$RyrJs)
        (tan . g$11375$RyrJs)
        (symbol? . g$5404$RyrJs)
        (symbol=? . g$5459$RyrJs)
        (symbol->string . g$11374$RyrJs)
        (substring . g$11373$RyrJs)
        (string? . g$11372$RyrJs)
        (string>? . g$5456$RyrJs)
        (string>=? . g$5458$RyrJs)
        (string=? . g$5454$RyrJs)
        (string<? . g$5455$RyrJs)
        (string<=? . g$5457$RyrJs)
        (string-ref . g$11371$RyrJs)
        (string-length . g$11370$RyrJs)
        (string-for-each . g$5476$RyrJs)
        (string-copy . g$11369$RyrJs)
        (string-append . g$11368$RyrJs)
        (string->symbol . g$11367$RyrJs)
        (string->number . g$11366$RyrJs)
        (string->list . g$11365$RyrJs)
        (string . g$11364$RyrJs)
        (sqrt . g$11363$RyrJs)
        (sin . g$11362$RyrJs)
        (round . g$11361$RyrJs)
        (reverse . g$5411$RyrJs)
        (real? . g$11360$RyrJs)
        (real-valued? . g$11359$RyrJs)
        (real-part . g$11358$RyrJs)
        (rationalize . g$5471$RyrJs)
        (rational? . g$11357$RyrJs)
        (rational-valued? . g$11356$RyrJs)
        (procedure? . g$5406$RyrJs)
        (positive? . g$5440$RyrJs)
        (pair? . g$11355$RyrJs)
        (odd? . g$5444$RyrJs)
        (numerator . g$11354$RyrJs)
        (number? . g$11353$RyrJs)
        (number->string . g$11352$RyrJs)
        (null? . g$11351$RyrJs)
        (not . g$11350$RyrJs)
        (negative? . g$5441$RyrJs)
        (nan? . g$11349$RyrJs)
        (min . g$5446$RyrJs)
        (max . g$5445$RyrJs)
        (map . g$5099$RyrJs)
        (make-vector . g$11348$RyrJs)
        (make-string . g$11347$RyrJs)
        (make-rectangular . g$11346$RyrJs)
        (make-polar . g$11345$RyrJs)
        (magnitude . g$11344$RyrJs)
        (log . g$11343$RyrJs)
        (list? . g$11342$RyrJs)
        (list-tail . g$5079$RyrJs)
        (list-ref . g$5080$RyrJs)
        (list->vector . g$5399$RyrJs)
        (list->string . g$5400$RyrJs)
        (list . g$11341$RyrJs)
        (length . g$11340$RyrJs)
        (lcm . g$5448$RyrJs)
        (integer? . g$11339$RyrJs)
        (integer-valued? . g$11338$RyrJs)
        (integer->char . g$11337$RyrJs)
        (infinite? . g$11336$RyrJs)
        (inexact? . g$11335$RyrJs)
        (inexact . g$11334$RyrJs)
        (imag-part . g$11333$RyrJs)
        (gcd . g$5447$RyrJs)
        (for-each . g$5100$RyrJs)
        (floor . g$11332$RyrJs)
        (finite? . g$11331$RyrJs)
        (expt . g$11330$RyrJs)
        (exp . g$11329$RyrJs)
        (exact? . g$11328$RyrJs)
        (exact-integer-sqrt . g$11327$RyrJs)
        (exact . g$11326$RyrJs)
        (even? . g$5443$RyrJs)
        (error . g$11325$RyrJs)
        (eqv? . g$11324$RyrJs)
        (equal? . g$11323$RyrJs)
        (eq? . g$11322$RyrJs)
        (dynamic-wind . g$11321$RyrJs)
        (div0-and-mod0 . g$5398$RyrJs)
        (mod0 . g$5396$RyrJs)
        (div0 . g$11320$RyrJs)
        (div-and-mod . g$5397$RyrJs)
        (mod . g$5395$RyrJs)
        (div . g$11319$RyrJs)
        (denominator . g$11318$RyrJs)
        (cos . g$11317$RyrJs)
        (cons . g$11316$RyrJs)
        (complex? . g$11315$RyrJs)
        (char? . g$5401$RyrJs)
        (char>? . g$5468$RyrJs)
        (char>=? . g$5470$RyrJs)
        (char=? . g$5466$RyrJs)
        (char<? . g$5467$RyrJs)
        (char<=? . g$5469$RyrJs)
        (char->integer . g$11314$RyrJs)
        (ceiling . g$11313$RyrJs)
        (call-with-values . g$11312$RyrJs)
        (call/cc . g$11311$RyrJs)
        (call-with-current-continuation . g$11310$RyrJs)
        (cddddr . g$5439$RyrJs)
        (cdddar . g$5438$RyrJs)
        (cddadr . g$5437$RyrJs)
        (cddaar . g$5436$RyrJs)
        (cdaddr . g$5435$RyrJs)
        (cdadar . g$5434$RyrJs)
        (cdaadr . g$5433$RyrJs)
        (cdaaar . g$5432$RyrJs)
        (cadddr . g$5431$RyrJs)
        (caddar . g$5430$RyrJs)
        (cadadr . g$5429$RyrJs)
        (cadaar . g$5428$RyrJs)
        (caaddr . g$5427$RyrJs)
        (caadar . g$5426$RyrJs)
        (caaadr . g$5425$RyrJs)
        (caaaar . g$5424$RyrJs)
        (cdddr . g$5423$RyrJs)
        (cddar . g$5422$RyrJs)
        (cdadr . g$5421$RyrJs)
        (cdaar . g$5420$RyrJs)
        (caddr . g$5419$RyrJs)
        (cadar . g$5418$RyrJs)
        (caadr . g$5417$RyrJs)
        (caaar . g$5416$RyrJs)
        (cddr . g$5415$RyrJs)
        (cdar . g$5414$RyrJs)
        (cadr . g$5413$RyrJs)
        (caar . g$5412$RyrJs)
        (cdr . g$11309$RyrJs)
        (car . g$11308$RyrJs)
        (boolean? . g$5405$RyrJs)
        (boolean=? . g$5460$RyrJs)
        (atan . g$11307$RyrJs)
        (assertion-violation . g$11306$RyrJs)
        (asin . g$11305$RyrJs)
        (apply . g$11304$RyrJs)
        (append . g$11303$RyrJs)
        (angle . g$11302$RyrJs)
        (acos . g$11301$RyrJs)
        (abs . g$11300$RyrJs)
        (/ . g$11299$RyrJs)
        (* . g$11298$RyrJs)
        (- . g$11297$RyrJs)
        (+ . g$11296$RyrJs)
        (>= . g$11295$RyrJs)
        (> . g$11294$RyrJs)
        (= . g$11293$RyrJs)
        (<= . g$11292$RyrJs)
        (< . g$11291$RyrJs)
        (deserialize-port . g$11287$RyrJs)
        (serialize-port . g$11286$RyrJs)
        (enum-set? . g$6625$RyrJs)
        (load/unload . g$11100$RyrJs)
        (load/args . g$11099$RyrJs)
        (printf . g$6734$RyrJs)
        (fprintf . g$6735$RyrJs)
        (format . g$6736$RyrJs)
        (procedure-form . g$11285$RyrJs)
        (procedure-environment . g$11284$RyrJs)
        (procedure-name . g$11283$RyrJs)
        (procedure-arity . g$11282$RyrJs)
        (gc-collect . g$11281$RyrJs)
        (typeof . g$11280$RyrJs)
        (clr-type? . g$11279$RyrJs)
        (get-clr-type . g$11278$RyrJs)
        (vector-append . g$11276$RyrJs)
        (vector-filter . g$11275$RyrJs)
        (vector-reverse! . g$11274$RyrJs)
        (vector-contains? . g$11273$RyrJs)
        (vector-index-of . g$11272$RyrJs)
        (vector-copy . g$11271$RyrJs)
        (vector-binary-search . g$11270$RyrJs)
        (string-ci-compare . g$11269$RyrJs)
        (string-compare . g$11268$RyrJs)
        (string-format . g$11267$RyrJs)
        (trace-printer . g$11096$RyrJs)
        (time-it . g$11265$RyrJs)
        (make-parameter . g$6763$RyrJs)
        (open-tcp-input/output-port . g$11262$RyrJs)
        (hashtable-for-each . g$11261$RyrJs)
        (hashtable-map . g$11260$RyrJs)
        (environment-bindings . g$8052$RyrJs)
        (environment-symbols . g$8055$RyrJs)
        (interaction-environment-symbols . g$8051$RyrJs)
        (optimization-level . g$11259$RyrJs)
        (library-path . g$7382$RyrJs)
        (make-compile-time-value . g$7760$RyrJs)
        (expand->core . g$8061$RyrJs)
        (expand . g$8059$RyrJs)
        (syntax-transpose . g$7998$RyrJs)
        (convert->cps . g$7079$RyrJs)
        (installed-libraries . g$7403$RyrJs)
        (uninstall-library . g$7394$RyrJs)
        (pretty-width . g$6838$RyrJs)
        (pretty-print . g$6840$RyrJs)
        (&no-nans . g$11258$RyrJs)
        (&no-infinities . g$11257$RyrJs)
        (&i/o-encoding . g$11256$RyrJs)
        (&i/o-decoding . g$11255$RyrJs)
        (&i/o-port . g$11254$RyrJs)
        (&i/o-file-does-not-exist . g$11253$RyrJs)
        (&i/o-file-already-exists . g$11252$RyrJs)
        (&i/o-file-is-read-only . g$11251$RyrJs)
        (&i/o-file-protection . g$11250$RyrJs)
        (&i/o-filename . g$11249$RyrJs)
        (&i/o-invalid-position . g$11248$RyrJs)
        (&i/o-write . g$11247$RyrJs)
        (&i/o-read . g$11246$RyrJs)
        (&i/o . g$11245$RyrJs)
        (&non-continuable . g$11244$RyrJs)
        (&undefined . g$11243$RyrJs)
        (&syntax . g$11242$RyrJs)
        (&lexical . g$11241$RyrJs)
        (&implementation-restriction . g$11240$RyrJs)
        (&who . g$11239$RyrJs)
        (&irritants . g$11238$RyrJs)
        (&assertion . g$11237$RyrJs)
        (&violation . g$11236$RyrJs)
        (&error . g$11235$RyrJs)
        (&serious . g$11234$RyrJs)
        (&warning . g$11233$RyrJs)
        (&message . g$11232$RyrJs)
        (&condition . g$11231$RyrJs)
        (define-condition-type . g$11230$RyrJs)
        (define-enumeration . g$11229$RyrJs)
        (define-record-type . g$11228$RyrJs)
        (parent-rtd . g$11227$RyrJs)
        (nongenerative . g$11226$RyrJs)
        (opaque . g$11225$RyrJs)
        (sealed . g$11224$RyrJs)
        (protocol . g$11223$RyrJs)
        (parent . g$11222$RyrJs)
        (immutable . g$11221$RyrJs)
        (mutable . g$11220$RyrJs)
        (fields . g$11219$RyrJs)
        (error-handling-mode . g$11218$RyrJs)
        (file-options . g$11217$RyrJs)
        (buffer-mode . g$11216$RyrJs)
        (eol-style . g$11215$RyrJs)
        (guard . g$11214$RyrJs)
        (trace-letrec-syntax . g$11213$RyrJs)
        (trace-let-syntax . g$11212$RyrJs)
        (trace-define-syntax . g$11211$RyrJs)
        (trace-define . g$11210$RyrJs)
        (trace-lambda . g$11209$RyrJs)
        (unsyntax-splicing . g$11208$RyrJs)
        (unsyntax . g$11207$RyrJs)
        (unquote-splicing . g$11206$RyrJs)
        (unquote . g$11205$RyrJs)
        (_ . g$11204$RyrJs)
        (else . g$11203$RyrJs)
        (=> . g$11202$RyrJs)
        (... . g$11201$RyrJs)
        (assert . g$11200$RyrJs)
        (endianness . g$11199$RyrJs)
        (delay . g$11198$RyrJs)
        (time . g$11197$RyrJs)
        (or . g$11196$RyrJs)
        (and . g$11195$RyrJs)
        (do . g$11194$RyrJs)
        (cond . g$11193$RyrJs)
        (let* . g$11192$RyrJs)
        (let . g$11191$RyrJs)
        (identifier-syntax . g$11190$RyrJs)
        (with-syntax . g$11189$RyrJs)
        (quasisyntax . g$11188$RyrJs)
        (quasiquote . g$11187$RyrJs)
        (syntax-rules . g$11186$RyrJs)
        (include-into . g$11185$RyrJs)
        (include . g$11184$RyrJs)
        (let-values . g$11182$RyrJs)
        (let*-values . g$11181$RyrJs)
        (record-constructor-descriptor . g$11180$RyrJs)
        (record-type-descriptor . g$11179$RyrJs)
        (fluid-let-syntax . g$11178$RyrJs)
        (case . g$11177$RyrJs)
        (parameterize . g$11176$RyrJs)
        (unless . g$11175$RyrJs)
        (when . g$11174$RyrJs)
        (if . g$11173$RyrJs)
        (letrec* . g$11172$RyrJs)
        (letrec . g$11171$RyrJs)
        (case-lambda . g$11169$RyrJs)
        (lambda . g$11168$RyrJs)
        (syntax . g$11167$RyrJs)
        (syntax-case . g$11166$RyrJs)
        (quote . g$11165$RyrJs)
        (letrec-syntax . g$11163$RyrJs)
        (let-syntax . g$11162$RyrJs)
        (set! . g$11161$RyrJs)
        (export . g$11160$RyrJs)
        (import . g$11159$RyrJs)
        (library . g$11158$RyrJs)
        (begin . g$11157$RyrJs)
        (module . g$11156$RyrJs)
        (define-syntax . g$11155$RyrJs)
        (define . g$11154$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11627$RyrJs
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11263$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9060$RyrJs
      'g$11628$RyrJs
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$11624$RyrJs)
        (annotation-source . g$11623$RyrJs)
        (annotation-expression . g$11622$RyrJs)
        (annotation? . g$11621$RyrJs)
        (read-annotated . g$11620$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9060$RyrJs
      'g$11629$RyrJs
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$11592$RyrJs)
        (serialize-library . g$11591$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9060$RyrJs
      'g$11630$RyrJs
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((string-normalize . g$11590$RyrJs)
        (variable-transformer-procedure . g$7762$RyrJs)
        (variable-transformer? . g$7761$RyrJs)
        (eqv-hash . g$11289$RyrJs)
        (reverse! . g$11288$RyrJs)
        (make-promise . g$6238$RyrJs)
        (format . g$6736$RyrJs)
        (get-command-line . g$11277$RyrJs)
        (make-traced-procedure . g$11266$RyrJs)
        (make-traced-macro . g$6756$RyrJs)
        (assertion-error . g$8074$RyrJs)
        (library-locator . g$11264$RyrJs)
        (get-library-paths . g$11263$RyrJs)
        (library-path . g$7382$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9060$RyrJs
      'g$11631$RyrJs
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11290$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11632$RyrJs
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$11611$RyrJs)
        (clr-field-set!-internal . g$11610$RyrJs)
        (clr-field-get-internal . g$11609$RyrJs)
        (clr-cast-internal . g$11608$RyrJs)
        (clr-call-internal . g$11607$RyrJs)
        (clr-new-internal . g$11606$RyrJs)
        (clr-new-array-internal . g$11605$RyrJs)
        (clr-is-internal . g$11604$RyrJs)
        (clr-reference-internal . g$11603$RyrJs)
        (clr-using-internal . g$11602$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11633$RyrJs
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11206$RyrJs)
        (unquote . g$11205$RyrJs)
        (else . g$11203$RyrJs)
        (=> . g$11202$RyrJs)
        (delay . g$11198$RyrJs)
        (or . g$11196$RyrJs)
        (and . g$11195$RyrJs)
        (do . g$11194$RyrJs)
        (cond . g$11193$RyrJs)
        (let* . g$11192$RyrJs)
        (let . g$11191$RyrJs)
        (quasiquote . g$11187$RyrJs)
        (syntax-rules . g$11186$RyrJs)
        (case . g$11177$RyrJs)
        (if . g$11173$RyrJs)
        (letrec . g$11171$RyrJs)
        (lambda . g$11168$RyrJs)
        (quote . g$11165$RyrJs)
        (letrec-syntax . g$11163$RyrJs)
        (let-syntax . g$11162$RyrJs)
        (set! . g$11161$RyrJs)
        (begin . g$11157$RyrJs)
        (define-syntax . g$11155$RyrJs)
        (define . g$11154$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9060$RyrJs
      'g$11634$RyrJs
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((char-ready? . g$11589$RyrJs)
        (string-ci>? . g$6287$RyrJs)
        (string-ci>=? . g$6289$RyrJs)
        (string-ci=? . g$6285$RyrJs)
        (string-ci<? . g$6286$RyrJs)
        (string-ci<=? . g$6288$RyrJs)
        (char-whitespace? . g$11584$RyrJs)
        (char-upper-case? . g$11583$RyrJs)
        (char-numeric? . g$11581$RyrJs)
        (char-lower-case? . g$11580$RyrJs)
        (char-upcase . g$11578$RyrJs)
        (char-downcase . g$11575$RyrJs)
        (char-ci>? . g$6297$RyrJs)
        (char-ci>=? . g$6299$RyrJs)
        (char-ci=? . g$6295$RyrJs)
        (char-ci<? . g$6296$RyrJs)
        (char-ci<=? . g$6298$RyrJs)
        (char-alphabetic? . g$11574$RyrJs)
        (call-with-output-file . g$6587$RyrJs)
        (call-with-input-file . g$6586$RyrJs)
        (write-char . g$6578$RyrJs)
        (write . g$11542$RyrJs)
        (with-output-to-file . g$6585$RyrJs)
        (with-input-from-file . g$6584$RyrJs)
        (read-char . g$6577$RyrJs)
        (read . g$11541$RyrJs)
        (peek-char . g$6576$RyrJs)
        (open-output-file . g$11540$RyrJs)
        (open-input-file . g$11539$RyrJs)
        (newline . g$6588$RyrJs)
        (display . g$11538$RyrJs)
        (close-output-port . g$11537$RyrJs)
        (close-input-port . g$11536$RyrJs)
        (eof-object? . g$11535$RyrJs)
        (current-error-port . g$11533$RyrJs)
        (current-output-port . g$11532$RyrJs)
        (current-input-port . g$11531$RyrJs)
        (output-port? . g$11530$RyrJs)
        (input-port? . g$11529$RyrJs)
        (scheme-report-environment . g$8058$RyrJs)
        (quotient . g$6235$RyrJs)
        (null-environment . g$8057$RyrJs)
        (remainder . g$6236$RyrJs)
        (modulo . g$6237$RyrJs)
        (inexact->exact . g$6232$RyrJs)
        (force . g$6239$RyrJs)
        (exact->inexact . g$6233$RyrJs)
        (string-fill! . g$11470$RyrJs)
        (string-set! . g$11469$RyrJs)
        (set-cdr! . g$11468$RyrJs)
        (set-car! . g$11467$RyrJs)
        (memv . g$5092$RyrJs)
        (memq . g$5091$RyrJs)
        (member . g$5093$RyrJs)
        (assv . g$5088$RyrJs)
        (assq . g$5087$RyrJs)
        (assoc . g$5089$RyrJs)
        (eval . g$8060$RyrJs)
        (zero? . g$5442$RyrJs)
        (vector? . g$5402$RyrJs)
        (vector-set! . g$11382$RyrJs)
        (vector-ref . g$11381$RyrJs)
        (vector-length . g$11380$RyrJs)
        (vector-fill! . g$5410$RyrJs)
        (vector->list . g$11379$RyrJs)
        (vector . g$11378$RyrJs)
        (values . g$11377$RyrJs)
        (truncate . g$11376$RyrJs)
        (tan . g$11375$RyrJs)
        (symbol? . g$5404$RyrJs)
        (symbol->string . g$11374$RyrJs)
        (substring . g$11373$RyrJs)
        (string? . g$11372$RyrJs)
        (string>? . g$5456$RyrJs)
        (string>=? . g$5458$RyrJs)
        (string=? . g$5454$RyrJs)
        (string<? . g$5455$RyrJs)
        (string<=? . g$5457$RyrJs)
        (string-ref . g$11371$RyrJs)
        (string-length . g$11370$RyrJs)
        (string-copy . g$11369$RyrJs)
        (string-append . g$11368$RyrJs)
        (string->symbol . g$11367$RyrJs)
        (string->number . g$11366$RyrJs)
        (string->list . g$11365$RyrJs)
        (string . g$11364$RyrJs)
        (sqrt . g$11363$RyrJs)
        (sin . g$11362$RyrJs)
        (round . g$11361$RyrJs)
        (reverse . g$5411$RyrJs)
        (real? . g$11360$RyrJs)
        (real-part . g$11358$RyrJs)
        (rationalize . g$5471$RyrJs)
        (rational? . g$11357$RyrJs)
        (procedure? . g$5406$RyrJs)
        (positive? . g$5440$RyrJs)
        (pair? . g$11355$RyrJs)
        (odd? . g$5444$RyrJs)
        (numerator . g$11354$RyrJs)
        (number? . g$11353$RyrJs)
        (number->string . g$11352$RyrJs)
        (null? . g$11351$RyrJs)
        (not . g$11350$RyrJs)
        (negative? . g$5441$RyrJs)
        (min . g$5446$RyrJs)
        (max . g$5445$RyrJs)
        (map . g$5099$RyrJs)
        (make-vector . g$11348$RyrJs)
        (make-string . g$11347$RyrJs)
        (make-rectangular . g$11346$RyrJs)
        (make-polar . g$11345$RyrJs)
        (magnitude . g$11344$RyrJs)
        (log . g$11343$RyrJs)
        (list? . g$11342$RyrJs)
        (list-tail . g$5079$RyrJs)
        (list-ref . g$5080$RyrJs)
        (list->vector . g$5399$RyrJs)
        (list->string . g$5400$RyrJs)
        (list . g$11341$RyrJs)
        (length . g$11340$RyrJs)
        (lcm . g$5448$RyrJs)
        (integer? . g$11339$RyrJs)
        (integer->char . g$11337$RyrJs)
        (inexact? . g$11335$RyrJs)
        (imag-part . g$11333$RyrJs)
        (gcd . g$5447$RyrJs)
        (for-each . g$5100$RyrJs)
        (floor . g$11332$RyrJs)
        (expt . g$11330$RyrJs)
        (exp . g$11329$RyrJs)
        (exact? . g$11328$RyrJs)
        (even? . g$5443$RyrJs)
        (eqv? . g$11324$RyrJs)
        (equal? . g$11323$RyrJs)
        (eq? . g$11322$RyrJs)
        (dynamic-wind . g$11321$RyrJs)
        (denominator . g$11318$RyrJs)
        (cos . g$11317$RyrJs)
        (cons . g$11316$RyrJs)
        (complex? . g$11315$RyrJs)
        (char? . g$5401$RyrJs)
        (char>? . g$5468$RyrJs)
        (char>=? . g$5470$RyrJs)
        (char=? . g$5466$RyrJs)
        (char<? . g$5467$RyrJs)
        (char<=? . g$5469$RyrJs)
        (char->integer . g$11314$RyrJs)
        (ceiling . g$11313$RyrJs)
        (call-with-values . g$11312$RyrJs)
        (call-with-current-continuation . g$11310$RyrJs)
        (cddddr . g$5439$RyrJs)
        (cdddar . g$5438$RyrJs)
        (cddadr . g$5437$RyrJs)
        (cddaar . g$5436$RyrJs)
        (cdaddr . g$5435$RyrJs)
        (cdadar . g$5434$RyrJs)
        (cdaadr . g$5433$RyrJs)
        (cdaaar . g$5432$RyrJs)
        (cadddr . g$5431$RyrJs)
        (caddar . g$5430$RyrJs)
        (cadadr . g$5429$RyrJs)
        (cadaar . g$5428$RyrJs)
        (caaddr . g$5427$RyrJs)
        (caadar . g$5426$RyrJs)
        (caaadr . g$5425$RyrJs)
        (caaaar . g$5424$RyrJs)
        (cdddr . g$5423$RyrJs)
        (cddar . g$5422$RyrJs)
        (cdadr . g$5421$RyrJs)
        (cdaar . g$5420$RyrJs)
        (caddr . g$5419$RyrJs)
        (cadar . g$5418$RyrJs)
        (caadr . g$5417$RyrJs)
        (caaar . g$5416$RyrJs)
        (cddr . g$5415$RyrJs)
        (cdar . g$5414$RyrJs)
        (cadr . g$5413$RyrJs)
        (caar . g$5412$RyrJs)
        (cdr . g$11309$RyrJs)
        (car . g$11308$RyrJs)
        (boolean? . g$5405$RyrJs)
        (atan . g$11307$RyrJs)
        (asin . g$11305$RyrJs)
        (apply . g$11304$RyrJs)
        (append . g$11303$RyrJs)
        (angle . g$11302$RyrJs)
        (acos . g$11301$RyrJs)
        (abs . g$11300$RyrJs)
        (/ . g$11299$RyrJs)
        (* . g$11298$RyrJs)
        (- . g$11297$RyrJs)
        (+ . g$11296$RyrJs)
        (>= . g$11295$RyrJs)
        (> . g$11294$RyrJs)
        (= . g$11293$RyrJs)
        (<= . g$11292$RyrJs)
        (< . g$11291$RyrJs)
        (unquote-splicing . g$11206$RyrJs)
        (unquote . g$11205$RyrJs)
        (else . g$11203$RyrJs)
        (=> . g$11202$RyrJs)
        (... . g$11201$RyrJs)
        (delay . g$11198$RyrJs)
        (or . g$11196$RyrJs)
        (and . g$11195$RyrJs)
        (do . g$11194$RyrJs)
        (cond . g$11193$RyrJs)
        (let* . g$11192$RyrJs)
        (let . g$11191$RyrJs)
        (quasiquote . g$11187$RyrJs)
        (syntax-rules . g$11186$RyrJs)
        (case . g$11177$RyrJs)
        (if . g$11173$RyrJs)
        (letrec . g$11171$RyrJs)
        (lambda . g$11168$RyrJs)
        (quote . g$11165$RyrJs)
        (letrec-syntax . g$11163$RyrJs)
        (let-syntax . g$11162$RyrJs)
        (set! . g$11161$RyrJs)
        (begin . g$11157$RyrJs)
        (define-syntax . g$11155$RyrJs)
        (define . g$11154$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9060$RyrJs
      'g$11635$RyrJs
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11588$RyrJs)
        (string-titlecase . g$11587$RyrJs)
        (string-normalize-nfkd . g$6303$RyrJs)
        (string-normalize-nfkc . g$6302$RyrJs)
        (string-normalize-nfd . g$6301$RyrJs)
        (string-normalize-nfc . g$6300$RyrJs)
        (string-foldcase . g$11586$RyrJs)
        (string-downcase . g$11585$RyrJs)
        (string-ci>? . g$6287$RyrJs)
        (string-ci>=? . g$6289$RyrJs)
        (string-ci=? . g$6285$RyrJs)
        (string-ci<? . g$6286$RyrJs)
        (string-ci<=? . g$6288$RyrJs)
        (char-whitespace? . g$11584$RyrJs)
        (char-upper-case? . g$11583$RyrJs)
        (char-title-case? . g$11582$RyrJs)
        (char-numeric? . g$11581$RyrJs)
        (char-lower-case? . g$11580$RyrJs)
        (char-general-category . g$11579$RyrJs)
        (char-upcase . g$11578$RyrJs)
        (char-titlecase . g$11577$RyrJs)
        (char-foldcase . g$11576$RyrJs)
        (char-downcase . g$11575$RyrJs)
        (char-ci>? . g$6297$RyrJs)
        (char-ci>=? . g$6299$RyrJs)
        (char-ci=? . g$6295$RyrJs)
        (char-ci<? . g$6296$RyrJs)
        (char-ci<=? . g$6298$RyrJs)
        (char-alphabetic? . g$11574$RyrJs)
        (make-variable-transformer . g$7759$RyrJs)
        (identifier? . g$8079$RyrJs)
        (generate-temporaries . g$8068$RyrJs)
        (free-identifier=? . g$8069$RyrJs)
        (syntax->datum . g$8081$RyrJs)
        (datum->syntax . g$8080$RyrJs)
        (bound-identifier=? . g$8070$RyrJs)
        (record-type-descriptor? . g$11573$RyrJs)
        (record-predicate . g$11572$RyrJs)
        (record-mutator . g$11571$RyrJs)
        (record-constructor . g$11570$RyrJs)
        (record-accessor . g$11569$RyrJs)
        (make-record-type-descriptor . g$11568$RyrJs)
        (make-record-constructor-descriptor . g$11567$RyrJs)
        (record? . g$11566$RyrJs)
        (record-type-uid . g$11565$RyrJs)
        (record-type-sealed? . g$11564$RyrJs)
        (record-type-parent . g$11563$RyrJs)
        (record-type-opaque? . g$11562$RyrJs)
        (record-type-name . g$11561$RyrJs)
        (record-type-generative? . g$11560$RyrJs)
        (record-type-field-names . g$11559$RyrJs)
        (record-rtd . g$11558$RyrJs)
        (record-field-mutable? . g$11557$RyrJs)
        (delete-file . g$5694$RyrJs)
        (file-exists? . g$5693$RyrJs)
        (vector-sort! . g$11556$RyrJs)
        (vector-sort . g$11555$RyrJs)
        (list-sort . g$6256$RyrJs)
        (symbol-hash . g$11554$RyrJs)
        (string-ci-hash . g$11553$RyrJs)
        (string-hash . g$11552$RyrJs)
        (equal-hash . g$11551$RyrJs)
        (hashtable-equivalence-function . g$11550$RyrJs)
        (make-hashtable . g$11549$RyrJs)
        (hashtable-hash-function . g$11548$RyrJs)
        (make-eqv-hashtable . g$5661$RyrJs)
        (make-eq-hashtable . g$5660$RyrJs)
        (hashtable? . g$11547$RyrJs)
        (hashtable-update! . g$5667$RyrJs)
        (hashtable-size . g$5662$RyrJs)
        (hashtable-set! . g$5664$RyrJs)
        (hashtable-ref . g$5663$RyrJs)
        (hashtable-mutable? . g$11546$RyrJs)
        (hashtable-keys . g$11545$RyrJs)
        (hashtable-entries . g$11544$RyrJs)
        (hashtable-delete! . g$5665$RyrJs)
        (hashtable-copy . g$11543$RyrJs)
        (hashtable-contains? . g$5666$RyrJs)
        (hashtable-clear! . g$5668$RyrJs)
        (call-with-output-file . g$6587$RyrJs)
        (call-with-input-file . g$6586$RyrJs)
        (write-char . g$6578$RyrJs)
        (write . g$11542$RyrJs)
        (with-output-to-file . g$6585$RyrJs)
        (with-input-from-file . g$6584$RyrJs)
        (read-char . g$6577$RyrJs)
        (read . g$11541$RyrJs)
        (peek-char . g$6576$RyrJs)
        (open-output-file . g$11540$RyrJs)
        (open-input-file . g$11539$RyrJs)
        (newline . g$6588$RyrJs)
        (display . g$11538$RyrJs)
        (close-output-port . g$11537$RyrJs)
        (close-input-port . g$11536$RyrJs)
        (eof-object? . g$11535$RyrJs)
        (eof-object . g$11534$RyrJs)
        (current-error-port . g$11533$RyrJs)
        (current-output-port . g$11532$RyrJs)
        (current-input-port . g$11531$RyrJs)
        (output-port? . g$11530$RyrJs)
        (input-port? . g$11529$RyrJs)
        (utf-8-codec . g$11528$RyrJs)
        (utf-16-codec . g$11527$RyrJs)
        (transcoder-error-handling-mode . g$11526$RyrJs)
        (transcoder-eol-style . g$11525$RyrJs)
        (transcoder-codec . g$11524$RyrJs)
        (transcoded-port . g$11523$RyrJs)
        (textual-port? . g$11522$RyrJs)
        (string->bytevector . g$11521$RyrJs)
        (standard-output-port . g$11520$RyrJs)
        (standard-input-port . g$11519$RyrJs)
        (standard-error-port . g$11518$RyrJs)
        (set-port-position! . g$11517$RyrJs)
        (put-u8 . g$11516$RyrJs)
        (put-string . g$11515$RyrJs)
        (put-datum . g$6556$RyrJs)
        (put-char . g$11514$RyrJs)
        (put-bytevector . g$11513$RyrJs)
        (port? . g$6561$RyrJs)
        (port-transcoder . g$11512$RyrJs)
        (port-position . g$11511$RyrJs)
        (port-has-set-port-position!? . g$11510$RyrJs)
        (port-has-port-position? . g$11509$RyrJs)
        (port-eof? . g$11508$RyrJs)
        (output-port-buffer-mode . g$11507$RyrJs)
        (open-string-output-port . g$6560$RyrJs)
        (open-string-input-port . g$11506$RyrJs)
        (open-file-output-port . g$11505$RyrJs)
        (open-file-input/output-port . g$11504$RyrJs)
        (open-file-input-port . g$11503$RyrJs)
        (open-bytevector-output-port . g$11502$RyrJs)
        (open-bytevector-input-port . g$11501$RyrJs)
        (native-transcoder . g$11500$RyrJs)
        (native-eol-style . g$11499$RyrJs)
        (make-transcoder . g$11498$RyrJs)
        (latin-1-codec . g$11497$RyrJs)
        (make-i/o-write-error . g$6066$RyrJs)
        (make-i/o-read-error . g$6053$RyrJs)
        (make-i/o-port-error . g$6161$RyrJs)
        (make-i/o-invalid-position-error . g$6079$RyrJs)
        (make-i/o-filename-error . g$6094$RyrJs)
        (make-i/o-file-protection-error . g$6109$RyrJs)
        (make-i/o-file-is-read-only-error . g$6122$RyrJs)
        (make-i/o-file-does-not-exist-error . g$6148$RyrJs)
        (make-i/o-file-already-exists-error . g$6135$RyrJs)
        (make-i/o-error . g$6040$RyrJs)
        (make-i/o-encoding-error . g$6189$RyrJs)
        (make-i/o-decoding-error . g$6176$RyrJs)
        (make-custom-textual-output-port . g$11496$RyrJs)
        (make-custom-textual-input/output-port . g$11495$RyrJs)
        (make-custom-textual-input-port . g$11494$RyrJs)
        (make-custom-binary-output-port . g$11493$RyrJs)
        (make-custom-binary-input/output-port . g$11492$RyrJs)
        (make-custom-binary-input-port . g$11491$RyrJs)
        (make-bytevector . g$11490$RyrJs)
        (lookahead-u8 . g$11489$RyrJs)
        (lookahead-char . g$11488$RyrJs)
        (i/o-write-error? . g$6067$RyrJs)
        (i/o-read-error? . g$6054$RyrJs)
        (i/o-port-error? . g$6163$RyrJs)
        (i/o-invalid-position-error? . g$6081$RyrJs)
        (i/o-error-position . g$6082$RyrJs)
        (i/o-filename-error? . g$6096$RyrJs)
        (i/o-file-protection-error? . g$6110$RyrJs)
        (i/o-file-is-read-only-error? . g$6123$RyrJs)
        (i/o-file-does-not-exist-error? . g$6149$RyrJs)
        (i/o-file-already-exists-error? . g$6136$RyrJs)
        (i/o-error? . g$6041$RyrJs)
        (i/o-error-port . g$6164$RyrJs)
        (i/o-error-filename . g$6097$RyrJs)
        (i/o-encoding-error? . g$6191$RyrJs)
        (i/o-encoding-error-char . g$6192$RyrJs)
        (i/o-decoding-error? . g$6177$RyrJs)
        (get-u8 . g$11487$RyrJs)
        (get-string-n! . g$11486$RyrJs)
        (get-string-n . g$11485$RyrJs)
        (get-string-all . g$11484$RyrJs)
        (get-line . g$11483$RyrJs)
        (get-datum . g$6557$RyrJs)
        (get-char . g$11482$RyrJs)
        (get-bytevector-some . g$11481$RyrJs)
        (get-bytevector-n! . g$11480$RyrJs)
        (get-bytevector-n . g$11479$RyrJs)
        (get-bytevector-all . g$11478$RyrJs)
        (flush-output-port . g$11477$RyrJs)
        (close-port . g$11476$RyrJs)
        (call-with-string-output-port . g$6562$RyrJs)
        (call-with-port . g$6563$RyrJs)
        (call-with-bytevector-output-port . g$11475$RyrJs)
        (bytevector->string . g$11474$RyrJs)
        (buffer-mode? . g$11473$RyrJs)
        (binary-port? . g$11472$RyrJs)
        (exit . g$11471$RyrJs)
        (command-line . g$11097$RyrJs)
        (remove . g$5104$RyrJs)
        (remv . g$5105$RyrJs)
        (remp . g$5085$RyrJs)
        (remq . g$5106$RyrJs)
        (partition . g$5084$RyrJs)
        (memv . g$5092$RyrJs)
        (memq . g$5091$RyrJs)
        (memp . g$5094$RyrJs)
        (member . g$5093$RyrJs)
        (exists . g$5098$RyrJs)
        (for-all . g$5097$RyrJs)
        (fold-right . g$5103$RyrJs)
        (fold-left . g$5102$RyrJs)
        (find . g$5083$RyrJs)
        (filter . g$5086$RyrJs)
        (cons* . g$5101$RyrJs)
        (assv . g$5088$RyrJs)
        (assq . g$5087$RyrJs)
        (assp . g$5090$RyrJs)
        (assoc . g$5089$RyrJs)
        (with-exception-handler . g$11466$RyrJs)
        (raise-continuable . g$11465$RyrJs)
        (raise . g$11464$RyrJs)
        (make-enumeration . g$6648$RyrJs)
        (enum-set=? . g$6655$RyrJs)
        (enum-set-universe . g$6649$RyrJs)
        (enum-set-union . g$6656$RyrJs)
        (enum-set-subset? . g$6654$RyrJs)
        (enum-set-projection . g$6660$RyrJs)
        (enum-set-member? . g$6653$RyrJs)
        (enum-set-intersection . g$6657$RyrJs)
        (enum-set-indexer . g$6650$RyrJs)
        (enum-set-difference . g$6658$RyrJs)
        (enum-set-constructor . g$6651$RyrJs)
        (enum-set-complement . g$6659$RyrJs)
        (enum-set->list . g$6652$RyrJs)
        (who-condition? . g$5958$RyrJs)
        (warning? . g$5877$RyrJs)
        (violation? . g$5916$RyrJs)
        (undefined-violation? . g$6028$RyrJs)
        (syntax-violation? . g$6013$RyrJs)
        (syntax-violation-subform . g$6015$RyrJs)
        (syntax-violation-form . g$6014$RyrJs)
        (syntax-violation . g$8078$RyrJs)
        (simple-conditions . g$11463$RyrJs)
        (serious-condition? . g$5890$RyrJs)
        (non-continuable-violation? . g$5972$RyrJs)
        (message-condition? . g$5863$RyrJs)
        (make-who-condition . g$5956$RyrJs)
        (make-warning . g$5876$RyrJs)
        (make-violation . g$5915$RyrJs)
        (make-undefined-violation . g$6027$RyrJs)
        (make-syntax-violation . g$6010$RyrJs)
        (make-serious-condition . g$5889$RyrJs)
        (make-non-continuable-violation . g$5971$RyrJs)
        (make-message-condition . g$5861$RyrJs)
        (make-lexical-violation . g$5997$RyrJs)
        (make-irritants-condition . g$5941$RyrJs)
        (make-implementation-restriction-violation . g$5984$RyrJs)
        (make-error . g$5902$RyrJs)
        (make-assertion-violation . g$5928$RyrJs)
        (lexical-violation? . g$5998$RyrJs)
        (irritants-condition? . g$5943$RyrJs)
        (implementation-restriction-violation? . g$5985$RyrJs)
        (error? . g$5903$RyrJs)
        (condition-who . g$5959$RyrJs)
        (condition-predicate . g$11462$RyrJs)
        (condition-message . g$5864$RyrJs)
        (condition-irritants . g$5944$RyrJs)
        (condition-accessor . g$11461$RyrJs)
        (condition . g$11460$RyrJs)
        (assertion-violation? . g$5929$RyrJs)
        (condition? . g$11459$RyrJs)
        (utf32->string . g$11458$RyrJs)
        (utf16->string . g$11457$RyrJs)
        (utf8->string . g$11456$RyrJs)
        (uint-list->bytevector . g$11455$RyrJs)
        (u8-list->bytevector . g$11454$RyrJs)
        (string->utf8 . g$11453$RyrJs)
        (string->utf32 . g$11452$RyrJs)
        (string->utf16 . g$11451$RyrJs)
        (sint-list->bytevector . g$11450$RyrJs)
        (native-endianness . g$5700$RyrJs)
        (bytevector? . g$5403$RyrJs)
        (bytevector=? . g$11449$RyrJs)
        (bytevector-uint-set! . g$11448$RyrJs)
        (bytevector-uint-ref . g$11447$RyrJs)
        (bytevector-u8-set! . g$11446$RyrJs)
        (bytevector-u8-ref . g$11445$RyrJs)
        (bytevector-u64-set! . g$5721$RyrJs)
        (bytevector-u64-ref . g$5717$RyrJs)
        (bytevector-u64-native-set! . g$5723$RyrJs)
        (bytevector-u64-native-ref . g$5719$RyrJs)
        (bytevector-u32-set! . g$5713$RyrJs)
        (bytevector-u32-ref . g$5709$RyrJs)
        (bytevector-u32-native-set! . g$5715$RyrJs)
        (bytevector-u32-native-ref . g$5711$RyrJs)
        (bytevector-u16-set! . g$5705$RyrJs)
        (bytevector-u16-ref . g$5701$RyrJs)
        (bytevector-u16-native-set! . g$5707$RyrJs)
        (bytevector-u16-native-ref . g$5703$RyrJs)
        (bytevector-sint-set! . g$11444$RyrJs)
        (bytevector-sint-ref . g$11443$RyrJs)
        (bytevector-s8-set! . g$11442$RyrJs)
        (bytevector-s8-ref . g$11441$RyrJs)
        (bytevector-s64-set! . g$5722$RyrJs)
        (bytevector-s64-ref . g$5718$RyrJs)
        (bytevector-s64-native-set! . g$5724$RyrJs)
        (bytevector-s64-native-ref . g$5720$RyrJs)
        (bytevector-s32-set! . g$5714$RyrJs)
        (bytevector-s32-ref . g$5710$RyrJs)
        (bytevector-s32-native-set! . g$5716$RyrJs)
        (bytevector-s32-native-ref . g$5712$RyrJs)
        (bytevector-s16-set! . g$5706$RyrJs)
        (bytevector-s16-ref . g$5702$RyrJs)
        (bytevector-s16-native-set! . g$5708$RyrJs)
        (bytevector-s16-native-ref . g$5704$RyrJs)
        (bytevector-length . g$11440$RyrJs)
        (bytevector-ieee-single-set! . g$11439$RyrJs)
        (bytevector-ieee-single-ref . g$11438$RyrJs)
        (bytevector-ieee-single-native-set! . g$5727$RyrJs)
        (bytevector-ieee-single-native-ref . g$5725$RyrJs)
        (bytevector-ieee-double-set! . g$11437$RyrJs)
        (bytevector-ieee-double-ref . g$11436$RyrJs)
        (bytevector-ieee-double-native-set! . g$5728$RyrJs)
        (bytevector-ieee-double-native-ref . g$5726$RyrJs)
        (bytevector-fill! . g$11435$RyrJs)
        (bytevector-copy! . g$11434$RyrJs)
        (bytevector-copy . g$11433$RyrJs)
        (bytevector->uint-list . g$11432$RyrJs)
        (bytevector->u8-list . g$11431$RyrJs)
        (bytevector->sint-list . g$11430$RyrJs)
        (no-nans-violation? . g$6218$RyrJs)
        (no-infinities-violation? . g$6205$RyrJs)
        (make-no-nans-violation . g$6217$RyrJs)
        (make-no-infinities-violation . g$6204$RyrJs)
        (real->flonum . g$11429$RyrJs)
        (flzero? . g$6502$RyrJs)
        (fltruncate . g$6497$RyrJs)
        (fltan . g$6487$RyrJs)
        (flsqrt . g$6492$RyrJs)
        (flsin . g$6485$RyrJs)
        (flround . g$6498$RyrJs)
        (flpositive? . g$6500$RyrJs)
        (flonum? . g$5408$RyrJs)
        (flodd? . g$6504$RyrJs)
        (flnumerator . g$11428$RyrJs)
        (flnegative? . g$6501$RyrJs)
        (flnan? . g$6484$RyrJs)
        (flmod0 . g$6478$RyrJs)
        (flmod . g$6477$RyrJs)
        (flmin . g$6506$RyrJs)
        (flmax . g$6505$RyrJs)
        (fllog . g$6491$RyrJs)
        (flinteger? . g$6481$RyrJs)
        (flinfinite? . g$6483$RyrJs)
        (flfloor . g$6496$RyrJs)
        (flfinite? . g$6482$RyrJs)
        (flexpt . g$6494$RyrJs)
        (flexp . g$6493$RyrJs)
        (fleven? . g$6503$RyrJs)
        (fldiv0-and-mod0 . g$6480$RyrJs)
        (fldiv0 . g$11427$RyrJs)
        (fldiv-and-mod . g$6479$RyrJs)
        (fldiv . g$11426$RyrJs)
        (fldenominator . g$11425$RyrJs)
        (flcos . g$6486$RyrJs)
        (flceiling . g$6495$RyrJs)
        (flatan . g$6490$RyrJs)
        (flasin . g$6488$RyrJs)
        (flacos . g$6489$RyrJs)
        (flabs . g$6499$RyrJs)
        (fl>? . g$11424$RyrJs)
        (fl>=? . g$11423$RyrJs)
        (fl=? . g$11422$RyrJs)
        (fl<? . g$11421$RyrJs)
        (fl<=? . g$11420$RyrJs)
        (fl/ . g$11419$RyrJs)
        (fl- . g$11418$RyrJs)
        (fl+ . g$11417$RyrJs)
        (fl* . g$11416$RyrJs)
        (fixnum->flonum . g$11415$RyrJs)
        (fxzero? . g$6399$RyrJs)
        (fxxor . g$11414$RyrJs)
        (fxrotate-bit-field . g$6413$RyrJs)
        (fxreverse-bit-field . g$11413$RyrJs)
        (fxpositive? . g$6397$RyrJs)
        (fxodd? . g$6401$RyrJs)
        (fxnot . g$11412$RyrJs)
        (fxnegative? . g$6398$RyrJs)
        (fxmod0 . g$6394$RyrJs)
        (fxmod . g$6393$RyrJs)
        (fxmin . g$6403$RyrJs)
        (fxmax . g$6402$RyrJs)
        (fxlength . g$11411$RyrJs)
        (fxior . g$11410$RyrJs)
        (fxif . g$6407$RyrJs)
        (fxfirst-bit-set . g$11409$RyrJs)
        (fxeven? . g$6400$RyrJs)
        (fxdiv0-and-mod0 . g$6396$RyrJs)
        (fxdiv0 . g$11408$RyrJs)
        (fxdiv-and-mod . g$6395$RyrJs)
        (fxdiv . g$11407$RyrJs)
        (fxcopy-bit-field . g$6410$RyrJs)
        (fxcopy-bit . g$6408$RyrJs)
        (fxbit-set? . g$11406$RyrJs)
        (fxbit-field . g$6409$RyrJs)
        (fxbit-count . g$11405$RyrJs)
        (fxarithmetic-shift-right . g$6412$RyrJs)
        (fxarithmetic-shift-left . g$6411$RyrJs)
        (fxarithmetic-shift . g$11404$RyrJs)
        (fxand . g$11403$RyrJs)
        (fx>? . g$11402$RyrJs)
        (fx>=? . g$11401$RyrJs)
        (fx=? . g$11400$RyrJs)
        (fx<? . g$11399$RyrJs)
        (fx<=? . g$11398$RyrJs)
        (fx-/carry . g$6405$RyrJs)
        (fx- . g$11397$RyrJs)
        (fx+/carry . g$6406$RyrJs)
        (fx+ . g$11396$RyrJs)
        (fx*/carry . g$6404$RyrJs)
        (fx* . g$11395$RyrJs)
        (greatest-fixnum . g$11394$RyrJs)
        (least-fixnum . g$11393$RyrJs)
        (fixnum-width . g$5409$RyrJs)
        (fixnum? . g$5407$RyrJs)
        (bitwise-rotate-bit-field . g$6367$RyrJs)
        (bitwise-reverse-bit-field . g$11392$RyrJs)
        (bitwise-length . g$11391$RyrJs)
        (bitwise-if . g$6361$RyrJs)
        (bitwise-first-bit-set . g$11390$RyrJs)
        (bitwise-copy-bit-field . g$6364$RyrJs)
        (bitwise-copy-bit . g$6362$RyrJs)
        (bitwise-bit-set? . g$11389$RyrJs)
        (bitwise-bit-field . g$6363$RyrJs)
        (bitwise-bit-count . g$11388$RyrJs)
        (bitwise-xor . g$11387$RyrJs)
        (bitwise-ior . g$11386$RyrJs)
        (bitwise-and . g$11385$RyrJs)
        (bitwise-not . g$11384$RyrJs)
        (bitwise-arithmetic-shift-right . g$6366$RyrJs)
        (bitwise-arithmetic-shift-left . g$6365$RyrJs)
        (bitwise-arithmetic-shift . g$11383$RyrJs)
        (zero? . g$5442$RyrJs)
        (vector? . g$5402$RyrJs)
        (vector-set! . g$11382$RyrJs)
        (vector-ref . g$11381$RyrJs)
        (vector-map . g$5474$RyrJs)
        (vector-length . g$11380$RyrJs)
        (vector-for-each . g$5475$RyrJs)
        (vector-fill! . g$5410$RyrJs)
        (vector->list . g$11379$RyrJs)
        (vector . g$11378$RyrJs)
        (values . g$11377$RyrJs)
        (truncate . g$11376$RyrJs)
        (tan . g$11375$RyrJs)
        (symbol? . g$5404$RyrJs)
        (symbol=? . g$5459$RyrJs)
        (symbol->string . g$11374$RyrJs)
        (substring . g$11373$RyrJs)
        (string? . g$11372$RyrJs)
        (string>? . g$5456$RyrJs)
        (string>=? . g$5458$RyrJs)
        (string=? . g$5454$RyrJs)
        (string<? . g$5455$RyrJs)
        (string<=? . g$5457$RyrJs)
        (string-ref . g$11371$RyrJs)
        (string-length . g$11370$RyrJs)
        (string-for-each . g$5476$RyrJs)
        (string-copy . g$11369$RyrJs)
        (string-append . g$11368$RyrJs)
        (string->symbol . g$11367$RyrJs)
        (string->number . g$11366$RyrJs)
        (string->list . g$11365$RyrJs)
        (string . g$11364$RyrJs)
        (sqrt . g$11363$RyrJs)
        (sin . g$11362$RyrJs)
        (round . g$11361$RyrJs)
        (reverse . g$5411$RyrJs)
        (real? . g$11360$RyrJs)
        (real-valued? . g$11359$RyrJs)
        (real-part . g$11358$RyrJs)
        (rationalize . g$5471$RyrJs)
        (rational? . g$11357$RyrJs)
        (rational-valued? . g$11356$RyrJs)
        (procedure? . g$5406$RyrJs)
        (positive? . g$5440$RyrJs)
        (pair? . g$11355$RyrJs)
        (odd? . g$5444$RyrJs)
        (numerator . g$11354$RyrJs)
        (number? . g$11353$RyrJs)
        (number->string . g$11352$RyrJs)
        (null? . g$11351$RyrJs)
        (not . g$11350$RyrJs)
        (negative? . g$5441$RyrJs)
        (nan? . g$11349$RyrJs)
        (min . g$5446$RyrJs)
        (max . g$5445$RyrJs)
        (map . g$5099$RyrJs)
        (make-vector . g$11348$RyrJs)
        (make-string . g$11347$RyrJs)
        (make-rectangular . g$11346$RyrJs)
        (make-polar . g$11345$RyrJs)
        (magnitude . g$11344$RyrJs)
        (log . g$11343$RyrJs)
        (list? . g$11342$RyrJs)
        (list-tail . g$5079$RyrJs)
        (list-ref . g$5080$RyrJs)
        (list->vector . g$5399$RyrJs)
        (list->string . g$5400$RyrJs)
        (list . g$11341$RyrJs)
        (length . g$11340$RyrJs)
        (lcm . g$5448$RyrJs)
        (integer? . g$11339$RyrJs)
        (integer-valued? . g$11338$RyrJs)
        (integer->char . g$11337$RyrJs)
        (infinite? . g$11336$RyrJs)
        (inexact? . g$11335$RyrJs)
        (inexact . g$11334$RyrJs)
        (imag-part . g$11333$RyrJs)
        (gcd . g$5447$RyrJs)
        (for-each . g$5100$RyrJs)
        (floor . g$11332$RyrJs)
        (finite? . g$11331$RyrJs)
        (expt . g$11330$RyrJs)
        (exp . g$11329$RyrJs)
        (exact? . g$11328$RyrJs)
        (exact-integer-sqrt . g$11327$RyrJs)
        (exact . g$11326$RyrJs)
        (even? . g$5443$RyrJs)
        (error . g$11325$RyrJs)
        (eqv? . g$11324$RyrJs)
        (equal? . g$11323$RyrJs)
        (eq? . g$11322$RyrJs)
        (dynamic-wind . g$11321$RyrJs)
        (div0-and-mod0 . g$5398$RyrJs)
        (mod0 . g$5396$RyrJs)
        (div0 . g$11320$RyrJs)
        (div-and-mod . g$5397$RyrJs)
        (mod . g$5395$RyrJs)
        (div . g$11319$RyrJs)
        (denominator . g$11318$RyrJs)
        (cos . g$11317$RyrJs)
        (cons . g$11316$RyrJs)
        (complex? . g$11315$RyrJs)
        (char? . g$5401$RyrJs)
        (char>? . g$5468$RyrJs)
        (char>=? . g$5470$RyrJs)
        (char=? . g$5466$RyrJs)
        (char<? . g$5467$RyrJs)
        (char<=? . g$5469$RyrJs)
        (char->integer . g$11314$RyrJs)
        (ceiling . g$11313$RyrJs)
        (call-with-values . g$11312$RyrJs)
        (call/cc . g$11311$RyrJs)
        (call-with-current-continuation . g$11310$RyrJs)
        (cddddr . g$5439$RyrJs)
        (cdddar . g$5438$RyrJs)
        (cddadr . g$5437$RyrJs)
        (cddaar . g$5436$RyrJs)
        (cdaddr . g$5435$RyrJs)
        (cdadar . g$5434$RyrJs)
        (cdaadr . g$5433$RyrJs)
        (cdaaar . g$5432$RyrJs)
        (cadddr . g$5431$RyrJs)
        (caddar . g$5430$RyrJs)
        (cadadr . g$5429$RyrJs)
        (cadaar . g$5428$RyrJs)
        (caaddr . g$5427$RyrJs)
        (caadar . g$5426$RyrJs)
        (caaadr . g$5425$RyrJs)
        (caaaar . g$5424$RyrJs)
        (cdddr . g$5423$RyrJs)
        (cddar . g$5422$RyrJs)
        (cdadr . g$5421$RyrJs)
        (cdaar . g$5420$RyrJs)
        (caddr . g$5419$RyrJs)
        (cadar . g$5418$RyrJs)
        (caadr . g$5417$RyrJs)
        (caaar . g$5416$RyrJs)
        (cddr . g$5415$RyrJs)
        (cdar . g$5414$RyrJs)
        (cadr . g$5413$RyrJs)
        (caar . g$5412$RyrJs)
        (cdr . g$11309$RyrJs)
        (car . g$11308$RyrJs)
        (boolean? . g$5405$RyrJs)
        (boolean=? . g$5460$RyrJs)
        (atan . g$11307$RyrJs)
        (assertion-violation . g$11306$RyrJs)
        (asin . g$11305$RyrJs)
        (apply . g$11304$RyrJs)
        (append . g$11303$RyrJs)
        (angle . g$11302$RyrJs)
        (acos . g$11301$RyrJs)
        (abs . g$11300$RyrJs)
        (/ . g$11299$RyrJs)
        (* . g$11298$RyrJs)
        (- . g$11297$RyrJs)
        (+ . g$11296$RyrJs)
        (>= . g$11295$RyrJs)
        (> . g$11294$RyrJs)
        (= . g$11293$RyrJs)
        (<= . g$11292$RyrJs)
        (< . g$11291$RyrJs)
        (&no-nans . g$11258$RyrJs)
        (&no-infinities . g$11257$RyrJs)
        (&i/o-encoding . g$11256$RyrJs)
        (&i/o-decoding . g$11255$RyrJs)
        (&i/o-port . g$11254$RyrJs)
        (&i/o-file-does-not-exist . g$11253$RyrJs)
        (&i/o-file-already-exists . g$11252$RyrJs)
        (&i/o-file-is-read-only . g$11251$RyrJs)
        (&i/o-file-protection . g$11250$RyrJs)
        (&i/o-filename . g$11249$RyrJs)
        (&i/o-invalid-position . g$11248$RyrJs)
        (&i/o-write . g$11247$RyrJs)
        (&i/o-read . g$11246$RyrJs)
        (&i/o . g$11245$RyrJs)
        (&non-continuable . g$11244$RyrJs)
        (&undefined . g$11243$RyrJs)
        (&syntax . g$11242$RyrJs)
        (&lexical . g$11241$RyrJs)
        (&implementation-restriction . g$11240$RyrJs)
        (&who . g$11239$RyrJs)
        (&irritants . g$11238$RyrJs)
        (&assertion . g$11237$RyrJs)
        (&violation . g$11236$RyrJs)
        (&error . g$11235$RyrJs)
        (&serious . g$11234$RyrJs)
        (&warning . g$11233$RyrJs)
        (&message . g$11232$RyrJs)
        (&condition . g$11231$RyrJs)
        (define-condition-type . g$11230$RyrJs)
        (define-enumeration . g$11229$RyrJs)
        (define-record-type . g$11228$RyrJs)
        (parent-rtd . g$11227$RyrJs)
        (nongenerative . g$11226$RyrJs)
        (opaque . g$11225$RyrJs)
        (sealed . g$11224$RyrJs)
        (protocol . g$11223$RyrJs)
        (parent . g$11222$RyrJs)
        (immutable . g$11221$RyrJs)
        (mutable . g$11220$RyrJs)
        (fields . g$11219$RyrJs)
        (error-handling-mode . g$11218$RyrJs)
        (file-options . g$11217$RyrJs)
        (buffer-mode . g$11216$RyrJs)
        (eol-style . g$11215$RyrJs)
        (guard . g$11214$RyrJs)
        (unsyntax-splicing . g$11208$RyrJs)
        (unsyntax . g$11207$RyrJs)
        (unquote-splicing . g$11206$RyrJs)
        (unquote . g$11205$RyrJs)
        (_ . g$11204$RyrJs)
        (else . g$11203$RyrJs)
        (=> . g$11202$RyrJs)
        (... . g$11201$RyrJs)
        (assert . g$11200$RyrJs)
        (endianness . g$11199$RyrJs)
        (or . g$11196$RyrJs)
        (and . g$11195$RyrJs)
        (do . g$11194$RyrJs)
        (cond . g$11193$RyrJs)
        (let* . g$11192$RyrJs)
        (let . g$11191$RyrJs)
        (identifier-syntax . g$11190$RyrJs)
        (with-syntax . g$11189$RyrJs)
        (quasisyntax . g$11188$RyrJs)
        (quasiquote . g$11187$RyrJs)
        (syntax-rules . g$11186$RyrJs)
        (let-values . g$11182$RyrJs)
        (let*-values . g$11181$RyrJs)
        (record-constructor-descriptor . g$11180$RyrJs)
        (record-type-descriptor . g$11179$RyrJs)
        (case . g$11177$RyrJs)
        (unless . g$11175$RyrJs)
        (when . g$11174$RyrJs)
        (if . g$11173$RyrJs)
        (letrec* . g$11172$RyrJs)
        (letrec . g$11171$RyrJs)
        (case-lambda . g$11169$RyrJs)
        (lambda . g$11168$RyrJs)
        (syntax . g$11167$RyrJs)
        (syntax-case . g$11166$RyrJs)
        (quote . g$11165$RyrJs)
        (letrec-syntax . g$11163$RyrJs)
        (let-syntax . g$11162$RyrJs)
        (set! . g$11161$RyrJs)
        (begin . g$11157$RyrJs)
        (define-syntax . g$11155$RyrJs)
        (define . g$11154$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11636$RyrJs
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((scheme-report-environment . g$8058$RyrJs)
        (quotient . g$6235$RyrJs)
        (null-environment . g$8057$RyrJs)
        (remainder . g$6236$RyrJs)
        (modulo . g$6237$RyrJs)
        (inexact->exact . g$6232$RyrJs)
        (force . g$6239$RyrJs)
        (exact->inexact . g$6233$RyrJs)
        (delay . g$11198$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11637$RyrJs
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11194$RyrJs)
        (unless . g$11175$RyrJs)
        (when . g$11174$RyrJs)
        (case-lambda . g$11169$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11638$RyrJs
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8060$RyrJs) (environment . g$8056$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11639$RyrJs
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$11468$RyrJs) (set-car! . g$11467$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11640$RyrJs
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$11470$RyrJs) (string-set! . g$11469$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11641$RyrJs
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$11471$RyrJs) (command-line . g$11097$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11642$RyrJs
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$7759$RyrJs)
        (identifier? . g$8079$RyrJs)
        (generate-temporaries . g$8068$RyrJs)
        (free-identifier=? . g$8069$RyrJs)
        (syntax->datum . g$8081$RyrJs)
        (datum->syntax . g$8080$RyrJs)
        (bound-identifier=? . g$8070$RyrJs)
        (syntax-violation . g$8078$RyrJs)
        (unsyntax-splicing . g$11208$RyrJs)
        (unsyntax . g$11207$RyrJs)
        (_ . g$11204$RyrJs)
        (... . g$11201$RyrJs)
        (with-syntax . g$11189$RyrJs)
        (quasisyntax . g$11188$RyrJs)
        (syntax . g$11167$RyrJs)
        (syntax-case . g$11166$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11643$RyrJs
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$5694$RyrJs)
        (file-exists? . g$5693$RyrJs)
        (make-i/o-write-error . g$6066$RyrJs)
        (make-i/o-read-error . g$6053$RyrJs)
        (make-i/o-port-error . g$6161$RyrJs)
        (make-i/o-invalid-position-error . g$6079$RyrJs)
        (make-i/o-filename-error . g$6094$RyrJs)
        (make-i/o-file-protection-error . g$6109$RyrJs)
        (make-i/o-file-is-read-only-error . g$6122$RyrJs)
        (make-i/o-file-does-not-exist-error . g$6148$RyrJs)
        (make-i/o-file-already-exists-error . g$6135$RyrJs)
        (make-i/o-error . g$6040$RyrJs)
        (i/o-write-error? . g$6067$RyrJs)
        (i/o-read-error? . g$6054$RyrJs)
        (i/o-port-error? . g$6163$RyrJs)
        (i/o-invalid-position-error? . g$6081$RyrJs)
        (i/o-error-position . g$6082$RyrJs)
        (i/o-filename-error? . g$6096$RyrJs)
        (i/o-file-protection-error? . g$6110$RyrJs)
        (i/o-file-is-read-only-error? . g$6123$RyrJs)
        (i/o-file-does-not-exist-error? . g$6149$RyrJs)
        (i/o-file-already-exists-error? . g$6136$RyrJs)
        (i/o-error? . g$6041$RyrJs)
        (i/o-error-port . g$6164$RyrJs)
        (i/o-error-filename . g$6097$RyrJs)
        (&i/o-port . g$11254$RyrJs)
        (&i/o-file-does-not-exist . g$11253$RyrJs)
        (&i/o-file-already-exists . g$11252$RyrJs)
        (&i/o-file-is-read-only . g$11251$RyrJs)
        (&i/o-file-protection . g$11250$RyrJs)
        (&i/o-filename . g$11249$RyrJs)
        (&i/o-invalid-position . g$11248$RyrJs)
        (&i/o-write . g$11247$RyrJs)
        (&i/o-read . g$11246$RyrJs)
        (&i/o . g$11245$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11644$RyrJs
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$11556$RyrJs)
        (vector-sort . g$11555$RyrJs)
        (list-sort . g$6256$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11645$RyrJs
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$5442$RyrJs)
        (vector? . g$5402$RyrJs)
        (vector-set! . g$11382$RyrJs)
        (vector-ref . g$11381$RyrJs)
        (vector-map . g$5474$RyrJs)
        (vector-length . g$11380$RyrJs)
        (vector-for-each . g$5475$RyrJs)
        (vector-fill! . g$5410$RyrJs)
        (vector->list . g$11379$RyrJs)
        (vector . g$11378$RyrJs)
        (values . g$11377$RyrJs)
        (truncate . g$11376$RyrJs)
        (tan . g$11375$RyrJs)
        (symbol? . g$5404$RyrJs)
        (symbol=? . g$5459$RyrJs)
        (symbol->string . g$11374$RyrJs)
        (substring . g$11373$RyrJs)
        (string? . g$11372$RyrJs)
        (string>? . g$5456$RyrJs)
        (string>=? . g$5458$RyrJs)
        (string=? . g$5454$RyrJs)
        (string<? . g$5455$RyrJs)
        (string<=? . g$5457$RyrJs)
        (string-ref . g$11371$RyrJs)
        (string-length . g$11370$RyrJs)
        (string-for-each . g$5476$RyrJs)
        (string-copy . g$11369$RyrJs)
        (string-append . g$11368$RyrJs)
        (string->symbol . g$11367$RyrJs)
        (string->number . g$11366$RyrJs)
        (string->list . g$11365$RyrJs)
        (string . g$11364$RyrJs)
        (sqrt . g$11363$RyrJs)
        (sin . g$11362$RyrJs)
        (round . g$11361$RyrJs)
        (reverse . g$5411$RyrJs)
        (real? . g$11360$RyrJs)
        (real-valued? . g$11359$RyrJs)
        (real-part . g$11358$RyrJs)
        (rationalize . g$5471$RyrJs)
        (rational? . g$11357$RyrJs)
        (rational-valued? . g$11356$RyrJs)
        (procedure? . g$5406$RyrJs)
        (positive? . g$5440$RyrJs)
        (pair? . g$11355$RyrJs)
        (odd? . g$5444$RyrJs)
        (numerator . g$11354$RyrJs)
        (number? . g$11353$RyrJs)
        (number->string . g$11352$RyrJs)
        (null? . g$11351$RyrJs)
        (not . g$11350$RyrJs)
        (negative? . g$5441$RyrJs)
        (nan? . g$11349$RyrJs)
        (min . g$5446$RyrJs)
        (max . g$5445$RyrJs)
        (map . g$5099$RyrJs)
        (make-vector . g$11348$RyrJs)
        (make-string . g$11347$RyrJs)
        (make-rectangular . g$11346$RyrJs)
        (make-polar . g$11345$RyrJs)
        (magnitude . g$11344$RyrJs)
        (log . g$11343$RyrJs)
        (list? . g$11342$RyrJs)
        (list-tail . g$5079$RyrJs)
        (list-ref . g$5080$RyrJs)
        (list->vector . g$5399$RyrJs)
        (list->string . g$5400$RyrJs)
        (list . g$11341$RyrJs)
        (length . g$11340$RyrJs)
        (lcm . g$5448$RyrJs)
        (integer? . g$11339$RyrJs)
        (integer-valued? . g$11338$RyrJs)
        (integer->char . g$11337$RyrJs)
        (infinite? . g$11336$RyrJs)
        (inexact? . g$11335$RyrJs)
        (inexact . g$11334$RyrJs)
        (imag-part . g$11333$RyrJs)
        (gcd . g$5447$RyrJs)
        (for-each . g$5100$RyrJs)
        (floor . g$11332$RyrJs)
        (finite? . g$11331$RyrJs)
        (expt . g$11330$RyrJs)
        (exp . g$11329$RyrJs)
        (exact? . g$11328$RyrJs)
        (exact-integer-sqrt . g$11327$RyrJs)
        (exact . g$11326$RyrJs)
        (even? . g$5443$RyrJs)
        (error . g$11325$RyrJs)
        (eqv? . g$11324$RyrJs)
        (equal? . g$11323$RyrJs)
        (eq? . g$11322$RyrJs)
        (dynamic-wind . g$11321$RyrJs)
        (div0-and-mod0 . g$5398$RyrJs)
        (mod0 . g$5396$RyrJs)
        (div0 . g$11320$RyrJs)
        (div-and-mod . g$5397$RyrJs)
        (mod . g$5395$RyrJs)
        (div . g$11319$RyrJs)
        (denominator . g$11318$RyrJs)
        (cos . g$11317$RyrJs)
        (cons . g$11316$RyrJs)
        (complex? . g$11315$RyrJs)
        (char? . g$5401$RyrJs)
        (char>? . g$5468$RyrJs)
        (char>=? . g$5470$RyrJs)
        (char=? . g$5466$RyrJs)
        (char<? . g$5467$RyrJs)
        (char<=? . g$5469$RyrJs)
        (char->integer . g$11314$RyrJs)
        (ceiling . g$11313$RyrJs)
        (call-with-values . g$11312$RyrJs)
        (call/cc . g$11311$RyrJs)
        (call-with-current-continuation . g$11310$RyrJs)
        (cddddr . g$5439$RyrJs)
        (cdddar . g$5438$RyrJs)
        (cddadr . g$5437$RyrJs)
        (cddaar . g$5436$RyrJs)
        (cdaddr . g$5435$RyrJs)
        (cdadar . g$5434$RyrJs)
        (cdaadr . g$5433$RyrJs)
        (cdaaar . g$5432$RyrJs)
        (cadddr . g$5431$RyrJs)
        (caddar . g$5430$RyrJs)
        (cadadr . g$5429$RyrJs)
        (cadaar . g$5428$RyrJs)
        (caaddr . g$5427$RyrJs)
        (caadar . g$5426$RyrJs)
        (caaadr . g$5425$RyrJs)
        (caaaar . g$5424$RyrJs)
        (cdddr . g$5423$RyrJs)
        (cddar . g$5422$RyrJs)
        (cdadr . g$5421$RyrJs)
        (cdaar . g$5420$RyrJs)
        (caddr . g$5419$RyrJs)
        (cadar . g$5418$RyrJs)
        (caadr . g$5417$RyrJs)
        (caaar . g$5416$RyrJs)
        (cddr . g$5415$RyrJs)
        (cdar . g$5414$RyrJs)
        (cadr . g$5413$RyrJs)
        (caar . g$5412$RyrJs)
        (cdr . g$11309$RyrJs)
        (car . g$11308$RyrJs)
        (boolean? . g$5405$RyrJs)
        (boolean=? . g$5460$RyrJs)
        (atan . g$11307$RyrJs)
        (assertion-violation . g$11306$RyrJs)
        (asin . g$11305$RyrJs)
        (apply . g$11304$RyrJs)
        (append . g$11303$RyrJs)
        (angle . g$11302$RyrJs)
        (acos . g$11301$RyrJs)
        (abs . g$11300$RyrJs)
        (/ . g$11299$RyrJs)
        (* . g$11298$RyrJs)
        (- . g$11297$RyrJs)
        (+ . g$11296$RyrJs)
        (>= . g$11295$RyrJs)
        (> . g$11294$RyrJs)
        (= . g$11293$RyrJs)
        (<= . g$11292$RyrJs)
        (< . g$11291$RyrJs)
        (unquote-splicing . g$11206$RyrJs)
        (unquote . g$11205$RyrJs)
        (_ . g$11204$RyrJs)
        (else . g$11203$RyrJs)
        (=> . g$11202$RyrJs)
        (... . g$11201$RyrJs)
        (assert . g$11200$RyrJs)
        (or . g$11196$RyrJs)
        (and . g$11195$RyrJs)
        (cond . g$11193$RyrJs)
        (let* . g$11192$RyrJs)
        (let . g$11191$RyrJs)
        (identifier-syntax . g$11190$RyrJs)
        (quasiquote . g$11187$RyrJs)
        (syntax-rules . g$11186$RyrJs)
        (let-values . g$11182$RyrJs)
        (let*-values . g$11181$RyrJs)
        (case . g$11177$RyrJs)
        (if . g$11173$RyrJs)
        (letrec* . g$11172$RyrJs)
        (letrec . g$11171$RyrJs)
        (lambda . g$11168$RyrJs)
        (quote . g$11165$RyrJs)
        (letrec-syntax . g$11163$RyrJs)
        (let-syntax . g$11162$RyrJs)
        (set! . g$11161$RyrJs)
        (begin . g$11157$RyrJs)
        (define-syntax . g$11155$RyrJs)
        (define . g$11154$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11646$RyrJs
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5104$RyrJs)
        (remv . g$5105$RyrJs)
        (remp . g$5085$RyrJs)
        (remq . g$5106$RyrJs)
        (partition . g$5084$RyrJs)
        (memv . g$5092$RyrJs)
        (memq . g$5091$RyrJs)
        (memp . g$5094$RyrJs)
        (member . g$5093$RyrJs)
        (exists . g$5098$RyrJs)
        (for-all . g$5097$RyrJs)
        (fold-right . g$5103$RyrJs)
        (fold-left . g$5102$RyrJs)
        (find . g$5083$RyrJs)
        (filter . g$5086$RyrJs)
        (cons* . g$5101$RyrJs)
        (assv . g$5088$RyrJs)
        (assq . g$5087$RyrJs)
        (assp . g$5090$RyrJs)
        (assoc . g$5089$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11647$RyrJs
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$6587$RyrJs)
        (call-with-input-file . g$6586$RyrJs)
        (write-char . g$6578$RyrJs)
        (write . g$11542$RyrJs)
        (with-output-to-file . g$6585$RyrJs)
        (with-input-from-file . g$6584$RyrJs)
        (read-char . g$6577$RyrJs)
        (read . g$11541$RyrJs)
        (peek-char . g$6576$RyrJs)
        (open-output-file . g$11540$RyrJs)
        (open-input-file . g$11539$RyrJs)
        (newline . g$6588$RyrJs)
        (display . g$11538$RyrJs)
        (close-output-port . g$11537$RyrJs)
        (close-input-port . g$11536$RyrJs)
        (eof-object? . g$11535$RyrJs)
        (eof-object . g$11534$RyrJs)
        (current-error-port . g$11533$RyrJs)
        (current-output-port . g$11532$RyrJs)
        (current-input-port . g$11531$RyrJs)
        (output-port? . g$11530$RyrJs)
        (input-port? . g$11529$RyrJs)
        (make-i/o-write-error . g$6066$RyrJs)
        (make-i/o-read-error . g$6053$RyrJs)
        (make-i/o-port-error . g$6161$RyrJs)
        (make-i/o-invalid-position-error . g$6079$RyrJs)
        (make-i/o-filename-error . g$6094$RyrJs)
        (make-i/o-file-protection-error . g$6109$RyrJs)
        (make-i/o-file-is-read-only-error . g$6122$RyrJs)
        (make-i/o-file-does-not-exist-error . g$6148$RyrJs)
        (make-i/o-file-already-exists-error . g$6135$RyrJs)
        (make-i/o-error . g$6040$RyrJs)
        (i/o-write-error? . g$6067$RyrJs)
        (i/o-read-error? . g$6054$RyrJs)
        (i/o-port-error? . g$6163$RyrJs)
        (i/o-invalid-position-error? . g$6081$RyrJs)
        (i/o-error-position . g$6082$RyrJs)
        (i/o-filename-error? . g$6096$RyrJs)
        (i/o-file-protection-error? . g$6110$RyrJs)
        (i/o-file-is-read-only-error? . g$6123$RyrJs)
        (i/o-file-does-not-exist-error? . g$6149$RyrJs)
        (i/o-file-already-exists-error? . g$6136$RyrJs)
        (i/o-error? . g$6041$RyrJs)
        (i/o-error-port . g$6164$RyrJs)
        (i/o-error-filename . g$6097$RyrJs)
        (&i/o-port . g$11254$RyrJs)
        (&i/o-file-does-not-exist . g$11253$RyrJs)
        (&i/o-file-already-exists . g$11252$RyrJs)
        (&i/o-file-is-read-only . g$11251$RyrJs)
        (&i/o-file-protection . g$11250$RyrJs)
        (&i/o-filename . g$11249$RyrJs)
        (&i/o-invalid-position . g$11248$RyrJs)
        (&i/o-write . g$11247$RyrJs)
        (&i/o-read . g$11246$RyrJs)
        (&i/o . g$11245$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11648$RyrJs
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$11490$RyrJs)
        (utf32->string . g$11458$RyrJs)
        (utf16->string . g$11457$RyrJs)
        (utf8->string . g$11456$RyrJs)
        (uint-list->bytevector . g$11455$RyrJs)
        (u8-list->bytevector . g$11454$RyrJs)
        (string->utf8 . g$11453$RyrJs)
        (string->utf32 . g$11452$RyrJs)
        (string->utf16 . g$11451$RyrJs)
        (sint-list->bytevector . g$11450$RyrJs)
        (native-endianness . g$5700$RyrJs)
        (bytevector? . g$5403$RyrJs)
        (bytevector=? . g$11449$RyrJs)
        (bytevector-uint-set! . g$11448$RyrJs)
        (bytevector-uint-ref . g$11447$RyrJs)
        (bytevector-u8-set! . g$11446$RyrJs)
        (bytevector-u8-ref . g$11445$RyrJs)
        (bytevector-u64-set! . g$5721$RyrJs)
        (bytevector-u64-ref . g$5717$RyrJs)
        (bytevector-u64-native-set! . g$5723$RyrJs)
        (bytevector-u64-native-ref . g$5719$RyrJs)
        (bytevector-u32-set! . g$5713$RyrJs)
        (bytevector-u32-ref . g$5709$RyrJs)
        (bytevector-u32-native-set! . g$5715$RyrJs)
        (bytevector-u32-native-ref . g$5711$RyrJs)
        (bytevector-u16-set! . g$5705$RyrJs)
        (bytevector-u16-ref . g$5701$RyrJs)
        (bytevector-u16-native-set! . g$5707$RyrJs)
        (bytevector-u16-native-ref . g$5703$RyrJs)
        (bytevector-sint-set! . g$11444$RyrJs)
        (bytevector-sint-ref . g$11443$RyrJs)
        (bytevector-s8-set! . g$11442$RyrJs)
        (bytevector-s8-ref . g$11441$RyrJs)
        (bytevector-s64-set! . g$5722$RyrJs)
        (bytevector-s64-ref . g$5718$RyrJs)
        (bytevector-s64-native-set! . g$5724$RyrJs)
        (bytevector-s64-native-ref . g$5720$RyrJs)
        (bytevector-s32-set! . g$5714$RyrJs)
        (bytevector-s32-ref . g$5710$RyrJs)
        (bytevector-s32-native-set! . g$5716$RyrJs)
        (bytevector-s32-native-ref . g$5712$RyrJs)
        (bytevector-s16-set! . g$5706$RyrJs)
        (bytevector-s16-ref . g$5702$RyrJs)
        (bytevector-s16-native-set! . g$5708$RyrJs)
        (bytevector-s16-native-ref . g$5704$RyrJs)
        (bytevector-length . g$11440$RyrJs)
        (bytevector-ieee-single-set! . g$11439$RyrJs)
        (bytevector-ieee-single-ref . g$11438$RyrJs)
        (bytevector-ieee-single-native-set! . g$5727$RyrJs)
        (bytevector-ieee-single-native-ref . g$5725$RyrJs)
        (bytevector-ieee-double-set! . g$11437$RyrJs)
        (bytevector-ieee-double-ref . g$11436$RyrJs)
        (bytevector-ieee-double-native-set! . g$5728$RyrJs)
        (bytevector-ieee-double-native-ref . g$5726$RyrJs)
        (bytevector-fill! . g$11435$RyrJs)
        (bytevector-copy! . g$11434$RyrJs)
        (bytevector-copy . g$11433$RyrJs)
        (bytevector->uint-list . g$11432$RyrJs)
        (bytevector->u8-list . g$11431$RyrJs)
        (bytevector->sint-list . g$11430$RyrJs)
        (endianness . g$11199$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11649$RyrJs
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11588$RyrJs)
        (string-titlecase . g$11587$RyrJs)
        (string-normalize-nfkd . g$6303$RyrJs)
        (string-normalize-nfkc . g$6302$RyrJs)
        (string-normalize-nfd . g$6301$RyrJs)
        (string-normalize-nfc . g$6300$RyrJs)
        (string-foldcase . g$11586$RyrJs)
        (string-downcase . g$11585$RyrJs)
        (string-ci>? . g$6287$RyrJs)
        (string-ci>=? . g$6289$RyrJs)
        (string-ci=? . g$6285$RyrJs)
        (string-ci<? . g$6286$RyrJs)
        (string-ci<=? . g$6288$RyrJs)
        (char-whitespace? . g$11584$RyrJs)
        (char-upper-case? . g$11583$RyrJs)
        (char-title-case? . g$11582$RyrJs)
        (char-numeric? . g$11581$RyrJs)
        (char-lower-case? . g$11580$RyrJs)
        (char-general-category . g$11579$RyrJs)
        (char-upcase . g$11578$RyrJs)
        (char-titlecase . g$11577$RyrJs)
        (char-foldcase . g$11576$RyrJs)
        (char-downcase . g$11575$RyrJs)
        (char-ci>? . g$6297$RyrJs)
        (char-ci>=? . g$6299$RyrJs)
        (char-ci=? . g$6295$RyrJs)
        (char-ci<? . g$6296$RyrJs)
        (char-ci<=? . g$6298$RyrJs)
        (char-alphabetic? . g$11574$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11650$RyrJs
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$11466$RyrJs)
        (raise-continuable . g$11465$RyrJs)
        (raise . g$11464$RyrJs)
        (guard . g$11214$RyrJs)
        (else . g$11203$RyrJs)
        (=> . g$11202$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11651$RyrJs
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6367$RyrJs)
        (bitwise-reverse-bit-field . g$11392$RyrJs)
        (bitwise-length . g$11391$RyrJs)
        (bitwise-if . g$6361$RyrJs)
        (bitwise-first-bit-set . g$11390$RyrJs)
        (bitwise-copy-bit-field . g$6364$RyrJs)
        (bitwise-copy-bit . g$6362$RyrJs)
        (bitwise-bit-set? . g$11389$RyrJs)
        (bitwise-bit-field . g$6363$RyrJs)
        (bitwise-bit-count . g$11388$RyrJs)
        (bitwise-xor . g$11387$RyrJs)
        (bitwise-ior . g$11386$RyrJs)
        (bitwise-and . g$11385$RyrJs)
        (bitwise-not . g$11384$RyrJs)
        (bitwise-arithmetic-shift-right . g$6366$RyrJs)
        (bitwise-arithmetic-shift-left . g$6365$RyrJs)
        (bitwise-arithmetic-shift . g$11383$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11652$RyrJs
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$6399$RyrJs)
        (fxxor . g$11414$RyrJs)
        (fxrotate-bit-field . g$6413$RyrJs)
        (fxreverse-bit-field . g$11413$RyrJs)
        (fxpositive? . g$6397$RyrJs)
        (fxodd? . g$6401$RyrJs)
        (fxnot . g$11412$RyrJs)
        (fxnegative? . g$6398$RyrJs)
        (fxmod0 . g$6394$RyrJs)
        (fxmod . g$6393$RyrJs)
        (fxmin . g$6403$RyrJs)
        (fxmax . g$6402$RyrJs)
        (fxlength . g$11411$RyrJs)
        (fxior . g$11410$RyrJs)
        (fxif . g$6407$RyrJs)
        (fxfirst-bit-set . g$11409$RyrJs)
        (fxeven? . g$6400$RyrJs)
        (fxdiv0-and-mod0 . g$6396$RyrJs)
        (fxdiv0 . g$11408$RyrJs)
        (fxdiv-and-mod . g$6395$RyrJs)
        (fxdiv . g$11407$RyrJs)
        (fxcopy-bit-field . g$6410$RyrJs)
        (fxcopy-bit . g$6408$RyrJs)
        (fxbit-set? . g$11406$RyrJs)
        (fxbit-field . g$6409$RyrJs)
        (fxbit-count . g$11405$RyrJs)
        (fxarithmetic-shift-right . g$6412$RyrJs)
        (fxarithmetic-shift-left . g$6411$RyrJs)
        (fxarithmetic-shift . g$11404$RyrJs)
        (fxand . g$11403$RyrJs)
        (fx>? . g$11402$RyrJs)
        (fx>=? . g$11401$RyrJs)
        (fx=? . g$11400$RyrJs)
        (fx<? . g$11399$RyrJs)
        (fx<=? . g$11398$RyrJs)
        (fx-/carry . g$6405$RyrJs)
        (fx- . g$11397$RyrJs)
        (fx+/carry . g$6406$RyrJs)
        (fx+ . g$11396$RyrJs)
        (fx*/carry . g$6404$RyrJs)
        (fx* . g$11395$RyrJs)
        (greatest-fixnum . g$11394$RyrJs)
        (least-fixnum . g$11393$RyrJs)
        (fixnum-width . g$5409$RyrJs)
        (fixnum? . g$5407$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11653$RyrJs
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6218$RyrJs)
        (no-infinities-violation? . g$6205$RyrJs)
        (make-no-nans-violation . g$6217$RyrJs)
        (make-no-infinities-violation . g$6204$RyrJs)
        (real->flonum . g$11429$RyrJs)
        (flzero? . g$6502$RyrJs)
        (fltruncate . g$6497$RyrJs)
        (fltan . g$6487$RyrJs)
        (flsqrt . g$6492$RyrJs)
        (flsin . g$6485$RyrJs)
        (flround . g$6498$RyrJs)
        (flpositive? . g$6500$RyrJs)
        (flonum? . g$5408$RyrJs)
        (flodd? . g$6504$RyrJs)
        (flnumerator . g$11428$RyrJs)
        (flnegative? . g$6501$RyrJs)
        (flnan? . g$6484$RyrJs)
        (flmod0 . g$6478$RyrJs)
        (flmod . g$6477$RyrJs)
        (flmin . g$6506$RyrJs)
        (flmax . g$6505$RyrJs)
        (fllog . g$6491$RyrJs)
        (flinteger? . g$6481$RyrJs)
        (flinfinite? . g$6483$RyrJs)
        (flfloor . g$6496$RyrJs)
        (flfinite? . g$6482$RyrJs)
        (flexpt . g$6494$RyrJs)
        (flexp . g$6493$RyrJs)
        (fleven? . g$6503$RyrJs)
        (fldiv0-and-mod0 . g$6480$RyrJs)
        (fldiv0 . g$11427$RyrJs)
        (fldiv-and-mod . g$6479$RyrJs)
        (fldiv . g$11426$RyrJs)
        (fldenominator . g$11425$RyrJs)
        (flcos . g$6486$RyrJs)
        (flceiling . g$6495$RyrJs)
        (flatan . g$6490$RyrJs)
        (flasin . g$6488$RyrJs)
        (flacos . g$6489$RyrJs)
        (flabs . g$6499$RyrJs)
        (fl>? . g$11424$RyrJs)
        (fl>=? . g$11423$RyrJs)
        (fl=? . g$11422$RyrJs)
        (fl<? . g$11421$RyrJs)
        (fl<=? . g$11420$RyrJs)
        (fl/ . g$11419$RyrJs)
        (fl- . g$11418$RyrJs)
        (fl+ . g$11417$RyrJs)
        (fl* . g$11416$RyrJs)
        (fixnum->flonum . g$11415$RyrJs)
        (&no-nans . g$11258$RyrJs)
        (&no-infinities . g$11257$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11654$RyrJs
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$11554$RyrJs)
        (string-ci-hash . g$11553$RyrJs)
        (string-hash . g$11552$RyrJs)
        (equal-hash . g$11551$RyrJs)
        (hashtable-equivalence-function . g$11550$RyrJs)
        (make-hashtable . g$11549$RyrJs)
        (hashtable-hash-function . g$11548$RyrJs)
        (make-eqv-hashtable . g$5661$RyrJs)
        (make-eq-hashtable . g$5660$RyrJs)
        (hashtable? . g$11547$RyrJs)
        (hashtable-update! . g$5667$RyrJs)
        (hashtable-size . g$5662$RyrJs)
        (hashtable-set! . g$5664$RyrJs)
        (hashtable-ref . g$5663$RyrJs)
        (hashtable-mutable? . g$11546$RyrJs)
        (hashtable-keys . g$11545$RyrJs)
        (hashtable-entries . g$11544$RyrJs)
        (hashtable-delete! . g$5665$RyrJs)
        (hashtable-copy . g$11543$RyrJs)
        (hashtable-contains? . g$5666$RyrJs)
        (hashtable-clear! . g$5668$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11655$RyrJs
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$11535$RyrJs)
        (eof-object . g$11534$RyrJs)
        (current-error-port . g$11533$RyrJs)
        (current-output-port . g$11532$RyrJs)
        (current-input-port . g$11531$RyrJs)
        (output-port? . g$11530$RyrJs)
        (input-port? . g$11529$RyrJs)
        (utf-8-codec . g$11528$RyrJs)
        (utf-16-codec . g$11527$RyrJs)
        (transcoder-error-handling-mode . g$11526$RyrJs)
        (transcoder-eol-style . g$11525$RyrJs)
        (transcoder-codec . g$11524$RyrJs)
        (transcoded-port . g$11523$RyrJs)
        (textual-port? . g$11522$RyrJs)
        (string->bytevector . g$11521$RyrJs)
        (standard-output-port . g$11520$RyrJs)
        (standard-input-port . g$11519$RyrJs)
        (standard-error-port . g$11518$RyrJs)
        (set-port-position! . g$11517$RyrJs)
        (put-u8 . g$11516$RyrJs)
        (put-string . g$11515$RyrJs)
        (put-datum . g$6556$RyrJs)
        (put-char . g$11514$RyrJs)
        (put-bytevector . g$11513$RyrJs)
        (port? . g$6561$RyrJs)
        (port-transcoder . g$11512$RyrJs)
        (port-position . g$11511$RyrJs)
        (port-has-set-port-position!? . g$11510$RyrJs)
        (port-has-port-position? . g$11509$RyrJs)
        (port-eof? . g$11508$RyrJs)
        (output-port-buffer-mode . g$11507$RyrJs)
        (open-string-output-port . g$6560$RyrJs)
        (open-string-input-port . g$11506$RyrJs)
        (open-file-output-port . g$11505$RyrJs)
        (open-file-input/output-port . g$11504$RyrJs)
        (open-file-input-port . g$11503$RyrJs)
        (open-bytevector-output-port . g$11502$RyrJs)
        (open-bytevector-input-port . g$11501$RyrJs)
        (native-transcoder . g$11500$RyrJs)
        (native-eol-style . g$11499$RyrJs)
        (make-transcoder . g$11498$RyrJs)
        (latin-1-codec . g$11497$RyrJs)
        (make-i/o-write-error . g$6066$RyrJs)
        (make-i/o-read-error . g$6053$RyrJs)
        (make-i/o-port-error . g$6161$RyrJs)
        (make-i/o-invalid-position-error . g$6079$RyrJs)
        (make-i/o-filename-error . g$6094$RyrJs)
        (make-i/o-file-protection-error . g$6109$RyrJs)
        (make-i/o-file-is-read-only-error . g$6122$RyrJs)
        (make-i/o-file-does-not-exist-error . g$6148$RyrJs)
        (make-i/o-file-already-exists-error . g$6135$RyrJs)
        (make-i/o-error . g$6040$RyrJs)
        (make-i/o-encoding-error . g$6189$RyrJs)
        (make-i/o-decoding-error . g$6176$RyrJs)
        (make-custom-textual-output-port . g$11496$RyrJs)
        (make-custom-textual-input/output-port . g$11495$RyrJs)
        (make-custom-textual-input-port . g$11494$RyrJs)
        (make-custom-binary-output-port . g$11493$RyrJs)
        (make-custom-binary-input/output-port . g$11492$RyrJs)
        (make-custom-binary-input-port . g$11491$RyrJs)
        (lookahead-u8 . g$11489$RyrJs)
        (lookahead-char . g$11488$RyrJs)
        (i/o-write-error? . g$6067$RyrJs)
        (i/o-read-error? . g$6054$RyrJs)
        (i/o-port-error? . g$6163$RyrJs)
        (i/o-invalid-position-error? . g$6081$RyrJs)
        (i/o-error-position . g$6082$RyrJs)
        (i/o-filename-error? . g$6096$RyrJs)
        (i/o-file-protection-error? . g$6110$RyrJs)
        (i/o-file-is-read-only-error? . g$6123$RyrJs)
        (i/o-file-does-not-exist-error? . g$6149$RyrJs)
        (i/o-file-already-exists-error? . g$6136$RyrJs)
        (i/o-error? . g$6041$RyrJs)
        (i/o-error-port . g$6164$RyrJs)
        (i/o-error-filename . g$6097$RyrJs)
        (i/o-encoding-error? . g$6191$RyrJs)
        (i/o-encoding-error-char . g$6192$RyrJs)
        (i/o-decoding-error? . g$6177$RyrJs)
        (get-u8 . g$11487$RyrJs)
        (get-string-n! . g$11486$RyrJs)
        (get-string-n . g$11485$RyrJs)
        (get-string-all . g$11484$RyrJs)
        (get-line . g$11483$RyrJs)
        (get-datum . g$6557$RyrJs)
        (get-char . g$11482$RyrJs)
        (get-bytevector-some . g$11481$RyrJs)
        (get-bytevector-n! . g$11480$RyrJs)
        (get-bytevector-n . g$11479$RyrJs)
        (get-bytevector-all . g$11478$RyrJs)
        (flush-output-port . g$11477$RyrJs)
        (close-port . g$11476$RyrJs)
        (call-with-string-output-port . g$6562$RyrJs)
        (call-with-port . g$6563$RyrJs)
        (call-with-bytevector-output-port . g$11475$RyrJs)
        (bytevector->string . g$11474$RyrJs)
        (buffer-mode? . g$11473$RyrJs)
        (binary-port? . g$11472$RyrJs)
        (&i/o-encoding . g$11256$RyrJs)
        (&i/o-decoding . g$11255$RyrJs)
        (&i/o-port . g$11254$RyrJs)
        (&i/o-file-does-not-exist . g$11253$RyrJs)
        (&i/o-file-already-exists . g$11252$RyrJs)
        (&i/o-file-is-read-only . g$11251$RyrJs)
        (&i/o-file-protection . g$11250$RyrJs)
        (&i/o-filename . g$11249$RyrJs)
        (&i/o-invalid-position . g$11248$RyrJs)
        (&i/o-write . g$11247$RyrJs)
        (&i/o-read . g$11246$RyrJs)
        (&i/o . g$11245$RyrJs)
        (error-handling-mode . g$11218$RyrJs)
        (file-options . g$11217$RyrJs)
        (buffer-mode . g$11216$RyrJs)
        (eol-style . g$11215$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11656$RyrJs
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$6648$RyrJs)
        (enum-set=? . g$6655$RyrJs)
        (enum-set-universe . g$6649$RyrJs)
        (enum-set-union . g$6656$RyrJs)
        (enum-set-subset? . g$6654$RyrJs)
        (enum-set-projection . g$6660$RyrJs)
        (enum-set-member? . g$6653$RyrJs)
        (enum-set-intersection . g$6657$RyrJs)
        (enum-set-indexer . g$6650$RyrJs)
        (enum-set-difference . g$6658$RyrJs)
        (enum-set-constructor . g$6651$RyrJs)
        (enum-set-complement . g$6659$RyrJs)
        (enum-set->list . g$6652$RyrJs)
        (define-enumeration . g$11229$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11657$RyrJs
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$5958$RyrJs)
        (warning? . g$5877$RyrJs)
        (violation? . g$5916$RyrJs)
        (undefined-violation? . g$6028$RyrJs)
        (syntax-violation? . g$6013$RyrJs)
        (syntax-violation-subform . g$6015$RyrJs)
        (syntax-violation-form . g$6014$RyrJs)
        (simple-conditions . g$11463$RyrJs)
        (serious-condition? . g$5890$RyrJs)
        (non-continuable-violation? . g$5972$RyrJs)
        (message-condition? . g$5863$RyrJs)
        (make-who-condition . g$5956$RyrJs)
        (make-warning . g$5876$RyrJs)
        (make-violation . g$5915$RyrJs)
        (make-undefined-violation . g$6027$RyrJs)
        (make-syntax-violation . g$6010$RyrJs)
        (make-serious-condition . g$5889$RyrJs)
        (make-non-continuable-violation . g$5971$RyrJs)
        (make-message-condition . g$5861$RyrJs)
        (make-lexical-violation . g$5997$RyrJs)
        (make-irritants-condition . g$5941$RyrJs)
        (make-implementation-restriction-violation . g$5984$RyrJs)
        (make-error . g$5902$RyrJs)
        (make-assertion-violation . g$5928$RyrJs)
        (lexical-violation? . g$5998$RyrJs)
        (irritants-condition? . g$5943$RyrJs)
        (implementation-restriction-violation? . g$5985$RyrJs)
        (error? . g$5903$RyrJs)
        (condition-who . g$5959$RyrJs)
        (condition-predicate . g$11462$RyrJs)
        (condition-message . g$5864$RyrJs)
        (condition-irritants . g$5944$RyrJs)
        (condition-accessor . g$11461$RyrJs)
        (condition . g$11460$RyrJs)
        (assertion-violation? . g$5929$RyrJs)
        (condition? . g$11459$RyrJs)
        (&non-continuable . g$11244$RyrJs)
        (&undefined . g$11243$RyrJs)
        (&syntax . g$11242$RyrJs)
        (&lexical . g$11241$RyrJs)
        (&implementation-restriction . g$11240$RyrJs)
        (&who . g$11239$RyrJs)
        (&irritants . g$11238$RyrJs)
        (&assertion . g$11237$RyrJs)
        (&violation . g$11236$RyrJs)
        (&error . g$11235$RyrJs)
        (&serious . g$11234$RyrJs)
        (&warning . g$11233$RyrJs)
        (&message . g$11232$RyrJs)
        (&condition . g$11231$RyrJs)
        (define-condition-type . g$11230$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11658$RyrJs
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$11566$RyrJs)
        (record-type-uid . g$11565$RyrJs)
        (record-type-sealed? . g$11564$RyrJs)
        (record-type-parent . g$11563$RyrJs)
        (record-type-opaque? . g$11562$RyrJs)
        (record-type-name . g$11561$RyrJs)
        (record-type-generative? . g$11560$RyrJs)
        (record-type-field-names . g$11559$RyrJs)
        (record-rtd . g$11558$RyrJs)
        (record-field-mutable? . g$11557$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11659$RyrJs
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$11573$RyrJs)
        (record-predicate . g$11572$RyrJs)
        (record-mutator . g$11571$RyrJs)
        (record-constructor . g$11570$RyrJs)
        (record-accessor . g$11569$RyrJs)
        (make-record-type-descriptor . g$11568$RyrJs)
        (make-record-constructor-descriptor . g$11567$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11660$RyrJs
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11228$RyrJs)
        (parent-rtd . g$11227$RyrJs)
        (nongenerative . g$11226$RyrJs)
        (opaque . g$11225$RyrJs)
        (sealed . g$11224$RyrJs)
        (protocol . g$11223$RyrJs)
        (parent . g$11222$RyrJs)
        (immutable . g$11221$RyrJs)
        (mutable . g$11220$RyrJs)
        (fields . g$11219$RyrJs)
        (record-constructor-descriptor . g$11180$RyrJs)
        (record-type-descriptor . g$11179$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9060$RyrJs
      'g$11661$RyrJs
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$7955$RyrJs)
        (&no-nans-rcd . g$6220$RyrJs)
        (&no-nans-rtd . g$6219$RyrJs)
        (&no-infinities-rcd . g$6207$RyrJs)
        (&no-infinities-rtd . g$6206$RyrJs)
        (&i/o-encoding-rcd . g$6194$RyrJs)
        (&i/o-encoding-rtd . g$6193$RyrJs)
        (&i/o-decoding-rcd . g$6179$RyrJs)
        (&i/o-decoding-rtd . g$6178$RyrJs)
        (&i/o-port-rcd . g$6166$RyrJs)
        (&i/o-port-rtd . g$6165$RyrJs)
        (&i/o-file-does-not-exist-rcd . g$6151$RyrJs)
        (&i/o-file-does-not-exist-rtd . g$6150$RyrJs)
        (&i/o-file-already-exists-rcd . g$6138$RyrJs)
        (&i/o-file-already-exists-rtd . g$6137$RyrJs)
        (&i/o-file-is-read-only-rcd . g$6125$RyrJs)
        (&i/o-file-is-read-only-rtd . g$6124$RyrJs)
        (&i/o-file-protection-rcd . g$6112$RyrJs)
        (&i/o-file-protection-rtd . g$6111$RyrJs)
        (&i/o-filename-rcd . g$6099$RyrJs)
        (&i/o-filename-rtd . g$6098$RyrJs)
        (&i/o-invalid-position-rcd . g$6084$RyrJs)
        (&i/o-invalid-position-rtd . g$6083$RyrJs)
        (&i/o-write-rcd . g$6069$RyrJs)
        (&i/o-write-rtd . g$6068$RyrJs)
        (&i/o-read-rcd . g$6056$RyrJs)
        (&i/o-read-rtd . g$6055$RyrJs)
        (&i/o-rcd . g$6043$RyrJs)
        (&i/o-rtd . g$6042$RyrJs)
        (&undefined-rcd . g$6030$RyrJs)
        (&undefined-rtd . g$6029$RyrJs)
        (&syntax-rcd . g$6017$RyrJs)
        (&syntax-rtd . g$6016$RyrJs)
        (&lexical-rcd . g$6000$RyrJs)
        (&lexical-rtd . g$5999$RyrJs)
        (&implementation-restriction-rcd . g$5987$RyrJs)
        (&implementation-restriction-rtd . g$5986$RyrJs)
        (&non-continuable-rcd . g$5974$RyrJs)
        (&non-continuable-rtd . g$5973$RyrJs)
        (&who-rcd . g$5961$RyrJs)
        (&who-rtd . g$5960$RyrJs)
        (&irritants-rcd . g$5946$RyrJs)
        (&irritants-rtd . g$5945$RyrJs)
        (&assertion-rcd . g$5931$RyrJs)
        (&assertion-rtd . g$5930$RyrJs)
        (&violation-rcd . g$5918$RyrJs)
        (&violation-rtd . g$5917$RyrJs)
        (&error-rcd . g$5905$RyrJs)
        (&error-rtd . g$5904$RyrJs)
        (&serious-rcd . g$5892$RyrJs)
        (&serious-rtd . g$5891$RyrJs)
        (&warning-rcd . g$5879$RyrJs)
        (&warning-rtd . g$5878$RyrJs)
        (&message-rcd . g$5866$RyrJs)
        (&message-rtd . g$5865$RyrJs)
        (&condition-rcd . g$5826$RyrJs)
        (&condition-rtd . g$5825$RyrJs)
        (library-letrec* . g$11625$RyrJs)
        (annotation-stripped . g$11624$RyrJs)
        (annotation-source . g$11623$RyrJs)
        (annotation-expression . g$11622$RyrJs)
        (annotation? . g$11621$RyrJs)
        (read-annotated . g$11620$RyrJs)
        (tanh . g$11619$RyrJs)
        (cosh . g$11618$RyrJs)
        (sinh . g$11617$RyrJs)
        (make-guid . g$11616$RyrJs)
        (unspecified? . g$11615$RyrJs)
        (make-list . g$5082$RyrJs)
        (last-pair . g$5081$RyrJs)
        (load-r5rs . g$11614$RyrJs)
        (license . g$11613$RyrJs)
        (stacktrace . g$11612$RyrJs)
        (ironscheme-build . g$11102$RyrJs)
        (define-clr-class-internal . g$11611$RyrJs)
        (clr-field-set!-internal . g$11610$RyrJs)
        (clr-field-get-internal . g$11609$RyrJs)
        (clr-cast-internal . g$11608$RyrJs)
        (clr-call-internal . g$11607$RyrJs)
        (clr-new-internal . g$11606$RyrJs)
        (clr-new-array-internal . g$11605$RyrJs)
        (clr-is-internal . g$11604$RyrJs)
        (clr-reference-internal . g$11603$RyrJs)
        (clr-using-internal . g$11602$RyrJs)
        (syntax-error . g$8075$RyrJs)
        (syntax-dispatch . g$7950$RyrJs)
        (compile-core . g$11601$RyrJs)
        (eval-core . g$11600$RyrJs)
        (remove-location . g$11599$RyrJs)
        (set-symbol-value! . g$11598$RyrJs)
        (symbol-value . g$11597$RyrJs)
        (symbol-bound? . g$11596$RyrJs)
        (ungensym . g$11595$RyrJs)
        (gensym . g$11594$RyrJs)
        (void . g$11593$RyrJs)
        (load-serialized-library . g$11592$RyrJs)
        (serialize-library . g$11591$RyrJs)
        (compile-system-libraries . g$11106$RyrJs)
        (compile->closure . g$11108$RyrJs)
        (compile . g$11107$RyrJs)
        (load . g$11101$RyrJs)
        (string-normalize . g$11590$RyrJs)
        (interaction-environment . g$8085$RyrJs)
        (char-ready? . g$11589$RyrJs)
        (string-upcase . g$11588$RyrJs)
        (string-titlecase . g$11587$RyrJs)
        (string-normalize-nfkd . g$6303$RyrJs)
        (string-normalize-nfkc . g$6302$RyrJs)
        (string-normalize-nfd . g$6301$RyrJs)
        (string-normalize-nfc . g$6300$RyrJs)
        (string-foldcase . g$11586$RyrJs)
        (string-downcase . g$11585$RyrJs)
        (string-ci>? . g$6287$RyrJs)
        (string-ci>=? . g$6289$RyrJs)
        (string-ci=? . g$6285$RyrJs)
        (string-ci<? . g$6286$RyrJs)
        (string-ci<=? . g$6288$RyrJs)
        (char-whitespace? . g$11584$RyrJs)
        (char-upper-case? . g$11583$RyrJs)
        (char-title-case? . g$11582$RyrJs)
        (char-numeric? . g$11581$RyrJs)
        (char-lower-case? . g$11580$RyrJs)
        (char-general-category . g$11579$RyrJs)
        (char-upcase . g$11578$RyrJs)
        (char-titlecase . g$11577$RyrJs)
        (char-foldcase . g$11576$RyrJs)
        (char-downcase . g$11575$RyrJs)
        (char-ci>? . g$6297$RyrJs)
        (char-ci>=? . g$6299$RyrJs)
        (char-ci=? . g$6295$RyrJs)
        (char-ci<? . g$6296$RyrJs)
        (char-ci<=? . g$6298$RyrJs)
        (char-alphabetic? . g$11574$RyrJs)
        (variable-transformer-procedure . g$7762$RyrJs)
        (variable-transformer? . g$7761$RyrJs)
        (make-variable-transformer . g$7759$RyrJs)
        (identifier? . g$8079$RyrJs)
        (generate-temporaries . g$8068$RyrJs)
        (free-identifier=? . g$8069$RyrJs)
        (syntax->datum . g$8081$RyrJs)
        (datum->syntax . g$8080$RyrJs)
        (bound-identifier=? . g$8070$RyrJs)
        (record-type-descriptor? . g$11573$RyrJs)
        (record-predicate . g$11572$RyrJs)
        (record-mutator . g$11571$RyrJs)
        (record-constructor . g$11570$RyrJs)
        (record-accessor . g$11569$RyrJs)
        (make-record-type-descriptor . g$11568$RyrJs)
        (make-record-constructor-descriptor . g$11567$RyrJs)
        (record? . g$11566$RyrJs)
        (record-type-uid . g$11565$RyrJs)
        (record-type-sealed? . g$11564$RyrJs)
        (record-type-parent . g$11563$RyrJs)
        (record-type-opaque? . g$11562$RyrJs)
        (record-type-name . g$11561$RyrJs)
        (record-type-generative? . g$11560$RyrJs)
        (record-type-field-names . g$11559$RyrJs)
        (record-rtd . g$11558$RyrJs)
        (record-field-mutable? . g$11557$RyrJs)
        (delete-file . g$5694$RyrJs)
        (file-exists? . g$5693$RyrJs)
        (vector-sort! . g$11556$RyrJs)
        (vector-sort . g$11555$RyrJs)
        (list-sort . g$6256$RyrJs)
        (symbol-hash . g$11554$RyrJs)
        (string-ci-hash . g$11553$RyrJs)
        (string-hash . g$11552$RyrJs)
        (equal-hash . g$11551$RyrJs)
        (hashtable-equivalence-function . g$11550$RyrJs)
        (make-hashtable . g$11549$RyrJs)
        (hashtable-hash-function . g$11548$RyrJs)
        (make-eqv-hashtable . g$5661$RyrJs)
        (make-eq-hashtable . g$5660$RyrJs)
        (hashtable? . g$11547$RyrJs)
        (hashtable-update! . g$5667$RyrJs)
        (hashtable-size . g$5662$RyrJs)
        (hashtable-set! . g$5664$RyrJs)
        (hashtable-ref . g$5663$RyrJs)
        (hashtable-mutable? . g$11546$RyrJs)
        (hashtable-keys . g$11545$RyrJs)
        (hashtable-entries . g$11544$RyrJs)
        (hashtable-delete! . g$5665$RyrJs)
        (hashtable-copy . g$11543$RyrJs)
        (hashtable-contains? . g$5666$RyrJs)
        (hashtable-clear! . g$5668$RyrJs)
        (call-with-output-file . g$6587$RyrJs)
        (call-with-input-file . g$6586$RyrJs)
        (write-char . g$6578$RyrJs)
        (write . g$11542$RyrJs)
        (with-output-to-file . g$6585$RyrJs)
        (with-input-from-file . g$6584$RyrJs)
        (read-char . g$6577$RyrJs)
        (read . g$11541$RyrJs)
        (peek-char . g$6576$RyrJs)
        (open-output-file . g$11540$RyrJs)
        (open-input-file . g$11539$RyrJs)
        (newline . g$6588$RyrJs)
        (display . g$11538$RyrJs)
        (close-output-port . g$11537$RyrJs)
        (close-input-port . g$11536$RyrJs)
        (eof-object? . g$11535$RyrJs)
        (eof-object . g$11534$RyrJs)
        (current-error-port . g$11533$RyrJs)
        (current-output-port . g$11532$RyrJs)
        (current-input-port . g$11531$RyrJs)
        (output-port? . g$11530$RyrJs)
        (input-port? . g$11529$RyrJs)
        (utf-8-codec . g$11528$RyrJs)
        (utf-16-codec . g$11527$RyrJs)
        (transcoder-error-handling-mode . g$11526$RyrJs)
        (transcoder-eol-style . g$11525$RyrJs)
        (transcoder-codec . g$11524$RyrJs)
        (transcoded-port . g$11523$RyrJs)
        (textual-port? . g$11522$RyrJs)
        (string->bytevector . g$11521$RyrJs)
        (standard-output-port . g$11520$RyrJs)
        (standard-input-port . g$11519$RyrJs)
        (standard-error-port . g$11518$RyrJs)
        (set-port-position! . g$11517$RyrJs)
        (put-u8 . g$11516$RyrJs)
        (put-string . g$11515$RyrJs)
        (put-datum . g$6556$RyrJs)
        (put-char . g$11514$RyrJs)
        (put-bytevector . g$11513$RyrJs)
        (port? . g$6561$RyrJs)
        (port-transcoder . g$11512$RyrJs)
        (port-position . g$11511$RyrJs)
        (port-has-set-port-position!? . g$11510$RyrJs)
        (port-has-port-position? . g$11509$RyrJs)
        (port-eof? . g$11508$RyrJs)
        (output-port-buffer-mode . g$11507$RyrJs)
        (open-string-output-port . g$6560$RyrJs)
        (open-string-input-port . g$11506$RyrJs)
        (open-file-output-port . g$11505$RyrJs)
        (open-file-input/output-port . g$11504$RyrJs)
        (open-file-input-port . g$11503$RyrJs)
        (open-bytevector-output-port . g$11502$RyrJs)
        (open-bytevector-input-port . g$11501$RyrJs)
        (native-transcoder . g$11500$RyrJs)
        (native-eol-style . g$11499$RyrJs)
        (make-transcoder . g$11498$RyrJs)
        (latin-1-codec . g$11497$RyrJs)
        (make-i/o-write-error . g$6066$RyrJs)
        (make-i/o-read-error . g$6053$RyrJs)
        (make-i/o-port-error . g$6161$RyrJs)
        (make-i/o-invalid-position-error . g$6079$RyrJs)
        (make-i/o-filename-error . g$6094$RyrJs)
        (make-i/o-file-protection-error . g$6109$RyrJs)
        (make-i/o-file-is-read-only-error . g$6122$RyrJs)
        (make-i/o-file-does-not-exist-error . g$6148$RyrJs)
        (make-i/o-file-already-exists-error . g$6135$RyrJs)
        (make-i/o-error . g$6040$RyrJs)
        (make-i/o-encoding-error . g$6189$RyrJs)
        (make-i/o-decoding-error . g$6176$RyrJs)
        (make-custom-textual-output-port . g$11496$RyrJs)
        (make-custom-textual-input/output-port . g$11495$RyrJs)
        (make-custom-textual-input-port . g$11494$RyrJs)
        (make-custom-binary-output-port . g$11493$RyrJs)
        (make-custom-binary-input/output-port . g$11492$RyrJs)
        (make-custom-binary-input-port . g$11491$RyrJs)
        (make-bytevector . g$11490$RyrJs)
        (lookahead-u8 . g$11489$RyrJs)
        (lookahead-char . g$11488$RyrJs)
        (i/o-write-error? . g$6067$RyrJs)
        (i/o-read-error? . g$6054$RyrJs)
        (i/o-port-error? . g$6163$RyrJs)
        (i/o-invalid-position-error? . g$6081$RyrJs)
        (i/o-error-position . g$6082$RyrJs)
        (i/o-filename-error? . g$6096$RyrJs)
        (i/o-file-protection-error? . g$6110$RyrJs)
        (i/o-file-is-read-only-error? . g$6123$RyrJs)
        (i/o-file-does-not-exist-error? . g$6149$RyrJs)
        (i/o-file-already-exists-error? . g$6136$RyrJs)
        (i/o-error? . g$6041$RyrJs)
        (i/o-error-port . g$6164$RyrJs)
        (i/o-error-filename . g$6097$RyrJs)
        (i/o-encoding-error? . g$6191$RyrJs)
        (i/o-encoding-error-char . g$6192$RyrJs)
        (i/o-decoding-error? . g$6177$RyrJs)
        (get-u8 . g$11487$RyrJs)
        (get-string-n! . g$11486$RyrJs)
        (get-string-n . g$11485$RyrJs)
        (get-string-all . g$11484$RyrJs)
        (get-line . g$11483$RyrJs)
        (get-datum . g$6557$RyrJs)
        (get-char . g$11482$RyrJs)
        (get-bytevector-some . g$11481$RyrJs)
        (get-bytevector-n! . g$11480$RyrJs)
        (get-bytevector-n . g$11479$RyrJs)
        (get-bytevector-all . g$11478$RyrJs)
        (flush-output-port . g$11477$RyrJs)
        (close-port . g$11476$RyrJs)
        (call-with-string-output-port . g$6562$RyrJs)
        (call-with-port . g$6563$RyrJs)
        (call-with-bytevector-output-port . g$11475$RyrJs)
        (bytevector->string . g$11474$RyrJs)
        (buffer-mode? . g$11473$RyrJs)
        (binary-port? . g$11472$RyrJs)
        (scheme-report-environment . g$8058$RyrJs)
        (quotient . g$6235$RyrJs)
        (null-environment . g$8057$RyrJs)
        (remainder . g$6236$RyrJs)
        (modulo . g$6237$RyrJs)
        (inexact->exact . g$6232$RyrJs)
        (force . g$6239$RyrJs)
        (exact->inexact . g$6233$RyrJs)
        (exit . g$11471$RyrJs)
        (command-line . g$11097$RyrJs)
        (string-fill! . g$11470$RyrJs)
        (string-set! . g$11469$RyrJs)
        (set-cdr! . g$11468$RyrJs)
        (set-car! . g$11467$RyrJs)
        (remove . g$5104$RyrJs)
        (remv . g$5105$RyrJs)
        (remp . g$5085$RyrJs)
        (remq . g$5106$RyrJs)
        (partition . g$5084$RyrJs)
        (memv . g$5092$RyrJs)
        (memq . g$5091$RyrJs)
        (memp . g$5094$RyrJs)
        (member . g$5093$RyrJs)
        (exists . g$5098$RyrJs)
        (for-all . g$5097$RyrJs)
        (fold-right . g$5103$RyrJs)
        (fold-left . g$5102$RyrJs)
        (find . g$5083$RyrJs)
        (filter . g$5086$RyrJs)
        (cons* . g$5101$RyrJs)
        (assv . g$5088$RyrJs)
        (assq . g$5087$RyrJs)
        (assp . g$5090$RyrJs)
        (assoc . g$5089$RyrJs)
        (with-exception-handler . g$11466$RyrJs)
        (raise-continuable . g$11465$RyrJs)
        (raise . g$11464$RyrJs)
        (eval . g$8060$RyrJs)
        (environment . g$8056$RyrJs)
        (make-enumeration . g$6648$RyrJs)
        (enum-set=? . g$6655$RyrJs)
        (enum-set-universe . g$6649$RyrJs)
        (enum-set-union . g$6656$RyrJs)
        (enum-set-subset? . g$6654$RyrJs)
        (enum-set-projection . g$6660$RyrJs)
        (enum-set-member? . g$6653$RyrJs)
        (enum-set-intersection . g$6657$RyrJs)
        (enum-set-indexer . g$6650$RyrJs)
        (enum-set-difference . g$6658$RyrJs)
        (enum-set-constructor . g$6651$RyrJs)
        (enum-set-complement . g$6659$RyrJs)
        (enum-set->list . g$6652$RyrJs)
        (who-condition? . g$5958$RyrJs)
        (warning? . g$5877$RyrJs)
        (violation? . g$5916$RyrJs)
        (undefined-violation? . g$6028$RyrJs)
        (syntax-violation? . g$6013$RyrJs)
        (syntax-violation-subform . g$6015$RyrJs)
        (syntax-violation-form . g$6014$RyrJs)
        (syntax-violation . g$8078$RyrJs)
        (simple-conditions . g$11463$RyrJs)
        (serious-condition? . g$5890$RyrJs)
        (non-continuable-violation? . g$5972$RyrJs)
        (message-condition? . g$5863$RyrJs)
        (make-who-condition . g$5956$RyrJs)
        (make-warning . g$5876$RyrJs)
        (make-violation . g$5915$RyrJs)
        (make-undefined-violation . g$6027$RyrJs)
        (make-syntax-violation . g$6010$RyrJs)
        (make-serious-condition . g$5889$RyrJs)
        (make-non-continuable-violation . g$5971$RyrJs)
        (make-message-condition . g$5861$RyrJs)
        (make-lexical-violation . g$5997$RyrJs)
        (make-irritants-condition . g$5941$RyrJs)
        (make-implementation-restriction-violation . g$5984$RyrJs)
        (make-error . g$5902$RyrJs)
        (make-assertion-violation . g$5928$RyrJs)
        (lexical-violation? . g$5998$RyrJs)
        (irritants-condition? . g$5943$RyrJs)
        (implementation-restriction-violation? . g$5985$RyrJs)
        (error? . g$5903$RyrJs)
        (condition-who . g$5959$RyrJs)
        (condition-predicate . g$11462$RyrJs)
        (condition-message . g$5864$RyrJs)
        (condition-irritants . g$5944$RyrJs)
        (condition-accessor . g$11461$RyrJs)
        (condition . g$11460$RyrJs)
        (assertion-violation? . g$5929$RyrJs)
        (condition? . g$11459$RyrJs)
        (utf32->string . g$11458$RyrJs)
        (utf16->string . g$11457$RyrJs)
        (utf8->string . g$11456$RyrJs)
        (uint-list->bytevector . g$11455$RyrJs)
        (u8-list->bytevector . g$11454$RyrJs)
        (string->utf8 . g$11453$RyrJs)
        (string->utf32 . g$11452$RyrJs)
        (string->utf16 . g$11451$RyrJs)
        (sint-list->bytevector . g$11450$RyrJs)
        (native-endianness . g$5700$RyrJs)
        (bytevector? . g$5403$RyrJs)
        (bytevector=? . g$11449$RyrJs)
        (bytevector-uint-set! . g$11448$RyrJs)
        (bytevector-uint-ref . g$11447$RyrJs)
        (bytevector-u8-set! . g$11446$RyrJs)
        (bytevector-u8-ref . g$11445$RyrJs)
        (bytevector-u64-set! . g$5721$RyrJs)
        (bytevector-u64-ref . g$5717$RyrJs)
        (bytevector-u64-native-set! . g$5723$RyrJs)
        (bytevector-u64-native-ref . g$5719$RyrJs)
        (bytevector-u32-set! . g$5713$RyrJs)
        (bytevector-u32-ref . g$5709$RyrJs)
        (bytevector-u32-native-set! . g$5715$RyrJs)
        (bytevector-u32-native-ref . g$5711$RyrJs)
        (bytevector-u16-set! . g$5705$RyrJs)
        (bytevector-u16-ref . g$5701$RyrJs)
        (bytevector-u16-native-set! . g$5707$RyrJs)
        (bytevector-u16-native-ref . g$5703$RyrJs)
        (bytevector-sint-set! . g$11444$RyrJs)
        (bytevector-sint-ref . g$11443$RyrJs)
        (bytevector-s8-set! . g$11442$RyrJs)
        (bytevector-s8-ref . g$11441$RyrJs)
        (bytevector-s64-set! . g$5722$RyrJs)
        (bytevector-s64-ref . g$5718$RyrJs)
        (bytevector-s64-native-set! . g$5724$RyrJs)
        (bytevector-s64-native-ref . g$5720$RyrJs)
        (bytevector-s32-set! . g$5714$RyrJs)
        (bytevector-s32-ref . g$5710$RyrJs)
        (bytevector-s32-native-set! . g$5716$RyrJs)
        (bytevector-s32-native-ref . g$5712$RyrJs)
        (bytevector-s16-set! . g$5706$RyrJs)
        (bytevector-s16-ref . g$5702$RyrJs)
        (bytevector-s16-native-set! . g$5708$RyrJs)
        (bytevector-s16-native-ref . g$5704$RyrJs)
        (bytevector-length . g$11440$RyrJs)
        (bytevector-ieee-single-set! . g$11439$RyrJs)
        (bytevector-ieee-single-ref . g$11438$RyrJs)
        (bytevector-ieee-single-native-set! . g$5727$RyrJs)
        (bytevector-ieee-single-native-ref . g$5725$RyrJs)
        (bytevector-ieee-double-set! . g$11437$RyrJs)
        (bytevector-ieee-double-ref . g$11436$RyrJs)
        (bytevector-ieee-double-native-set! . g$5728$RyrJs)
        (bytevector-ieee-double-native-ref . g$5726$RyrJs)
        (bytevector-fill! . g$11435$RyrJs)
        (bytevector-copy! . g$11434$RyrJs)
        (bytevector-copy . g$11433$RyrJs)
        (bytevector->uint-list . g$11432$RyrJs)
        (bytevector->u8-list . g$11431$RyrJs)
        (bytevector->sint-list . g$11430$RyrJs)
        (no-nans-violation? . g$6218$RyrJs)
        (no-infinities-violation? . g$6205$RyrJs)
        (make-no-nans-violation . g$6217$RyrJs)
        (make-no-infinities-violation . g$6204$RyrJs)
        (real->flonum . g$11429$RyrJs)
        (flzero? . g$6502$RyrJs)
        (fltruncate . g$6497$RyrJs)
        (fltan . g$6487$RyrJs)
        (flsqrt . g$6492$RyrJs)
        (flsin . g$6485$RyrJs)
        (flround . g$6498$RyrJs)
        (flpositive? . g$6500$RyrJs)
        (flonum? . g$5408$RyrJs)
        (flodd? . g$6504$RyrJs)
        (flnumerator . g$11428$RyrJs)
        (flnegative? . g$6501$RyrJs)
        (flnan? . g$6484$RyrJs)
        (flmod0 . g$6478$RyrJs)
        (flmod . g$6477$RyrJs)
        (flmin . g$6506$RyrJs)
        (flmax . g$6505$RyrJs)
        (fllog . g$6491$RyrJs)
        (flinteger? . g$6481$RyrJs)
        (flinfinite? . g$6483$RyrJs)
        (flfloor . g$6496$RyrJs)
        (flfinite? . g$6482$RyrJs)
        (flexpt . g$6494$RyrJs)
        (flexp . g$6493$RyrJs)
        (fleven? . g$6503$RyrJs)
        (fldiv0-and-mod0 . g$6480$RyrJs)
        (fldiv0 . g$11427$RyrJs)
        (fldiv-and-mod . g$6479$RyrJs)
        (fldiv . g$11426$RyrJs)
        (fldenominator . g$11425$RyrJs)
        (flcos . g$6486$RyrJs)
        (flceiling . g$6495$RyrJs)
        (flatan . g$6490$RyrJs)
        (flasin . g$6488$RyrJs)
        (flacos . g$6489$RyrJs)
        (flabs . g$6499$RyrJs)
        (fl>? . g$11424$RyrJs)
        (fl>=? . g$11423$RyrJs)
        (fl=? . g$11422$RyrJs)
        (fl<? . g$11421$RyrJs)
        (fl<=? . g$11420$RyrJs)
        (fl/ . g$11419$RyrJs)
        (fl- . g$11418$RyrJs)
        (fl+ . g$11417$RyrJs)
        (fl* . g$11416$RyrJs)
        (fixnum->flonum . g$11415$RyrJs)
        (fxzero? . g$6399$RyrJs)
        (fxxor . g$11414$RyrJs)
        (fxrotate-bit-field . g$6413$RyrJs)
        (fxreverse-bit-field . g$11413$RyrJs)
        (fxpositive? . g$6397$RyrJs)
        (fxodd? . g$6401$RyrJs)
        (fxnot . g$11412$RyrJs)
        (fxnegative? . g$6398$RyrJs)
        (fxmod0 . g$6394$RyrJs)
        (fxmod . g$6393$RyrJs)
        (fxmin . g$6403$RyrJs)
        (fxmax . g$6402$RyrJs)
        (fxlength . g$11411$RyrJs)
        (fxior . g$11410$RyrJs)
        (fxif . g$6407$RyrJs)
        (fxfirst-bit-set . g$11409$RyrJs)
        (fxeven? . g$6400$RyrJs)
        (fxdiv0-and-mod0 . g$6396$RyrJs)
        (fxdiv0 . g$11408$RyrJs)
        (fxdiv-and-mod . g$6395$RyrJs)
        (fxdiv . g$11407$RyrJs)
        (fxcopy-bit-field . g$6410$RyrJs)
        (fxcopy-bit . g$6408$RyrJs)
        (fxbit-set? . g$11406$RyrJs)
        (fxbit-field . g$6409$RyrJs)
        (fxbit-count . g$11405$RyrJs)
        (fxarithmetic-shift-right . g$6412$RyrJs)
        (fxarithmetic-shift-left . g$6411$RyrJs)
        (fxarithmetic-shift . g$11404$RyrJs)
        (fxand . g$11403$RyrJs)
        (fx>? . g$11402$RyrJs)
        (fx>=? . g$11401$RyrJs)
        (fx=? . g$11400$RyrJs)
        (fx<? . g$11399$RyrJs)
        (fx<=? . g$11398$RyrJs)
        (fx-/carry . g$6405$RyrJs)
        (fx- . g$11397$RyrJs)
        (fx+/carry . g$6406$RyrJs)
        (fx+ . g$11396$RyrJs)
        (fx*/carry . g$6404$RyrJs)
        (fx* . g$11395$RyrJs)
        (greatest-fixnum . g$11394$RyrJs)
        (least-fixnum . g$11393$RyrJs)
        (fixnum-width . g$5409$RyrJs)
        (fixnum? . g$5407$RyrJs)
        (bitwise-rotate-bit-field . g$6367$RyrJs)
        (bitwise-reverse-bit-field . g$11392$RyrJs)
        (bitwise-length . g$11391$RyrJs)
        (bitwise-if . g$6361$RyrJs)
        (bitwise-first-bit-set . g$11390$RyrJs)
        (bitwise-copy-bit-field . g$6364$RyrJs)
        (bitwise-copy-bit . g$6362$RyrJs)
        (bitwise-bit-set? . g$11389$RyrJs)
        (bitwise-bit-field . g$6363$RyrJs)
        (bitwise-bit-count . g$11388$RyrJs)
        (bitwise-xor . g$11387$RyrJs)
        (bitwise-ior . g$11386$RyrJs)
        (bitwise-and . g$11385$RyrJs)
        (bitwise-not . g$11384$RyrJs)
        (bitwise-arithmetic-shift-right . g$6366$RyrJs)
        (bitwise-arithmetic-shift-left . g$6365$RyrJs)
        (bitwise-arithmetic-shift . g$11383$RyrJs)
        (zero? . g$5442$RyrJs)
        (vector? . g$5402$RyrJs)
        (vector-set! . g$11382$RyrJs)
        (vector-ref . g$11381$RyrJs)
        (vector-map . g$5474$RyrJs)
        (vector-length . g$11380$RyrJs)
        (vector-for-each . g$5475$RyrJs)
        (vector-fill! . g$5410$RyrJs)
        (vector->list . g$11379$RyrJs)
        (vector . g$11378$RyrJs)
        (values . g$11377$RyrJs)
        (truncate . g$11376$RyrJs)
        (tan . g$11375$RyrJs)
        (symbol? . g$5404$RyrJs)
        (symbol=? . g$5459$RyrJs)
        (symbol->string . g$11374$RyrJs)
        (substring . g$11373$RyrJs)
        (string? . g$11372$RyrJs)
        (string>? . g$5456$RyrJs)
        (string>=? . g$5458$RyrJs)
        (string=? . g$5454$RyrJs)
        (string<? . g$5455$RyrJs)
        (string<=? . g$5457$RyrJs)
        (string-ref . g$11371$RyrJs)
        (string-length . g$11370$RyrJs)
        (string-for-each . g$5476$RyrJs)
        (string-copy . g$11369$RyrJs)
        (string-append . g$11368$RyrJs)
        (string->symbol . g$11367$RyrJs)
        (string->number . g$11366$RyrJs)
        (string->list . g$11365$RyrJs)
        (string . g$11364$RyrJs)
        (sqrt . g$11363$RyrJs)
        (sin . g$11362$RyrJs)
        (round . g$11361$RyrJs)
        (reverse . g$5411$RyrJs)
        (real? . g$11360$RyrJs)
        (real-valued? . g$11359$RyrJs)
        (real-part . g$11358$RyrJs)
        (rationalize . g$5471$RyrJs)
        (rational? . g$11357$RyrJs)
        (rational-valued? . g$11356$RyrJs)
        (procedure? . g$5406$RyrJs)
        (positive? . g$5440$RyrJs)
        (pair? . g$11355$RyrJs)
        (odd? . g$5444$RyrJs)
        (numerator . g$11354$RyrJs)
        (number? . g$11353$RyrJs)
        (number->string . g$11352$RyrJs)
        (null? . g$11351$RyrJs)
        (not . g$11350$RyrJs)
        (negative? . g$5441$RyrJs)
        (nan? . g$11349$RyrJs)
        (min . g$5446$RyrJs)
        (max . g$5445$RyrJs)
        (map . g$5099$RyrJs)
        (make-vector . g$11348$RyrJs)
        (make-string . g$11347$RyrJs)
        (make-rectangular . g$11346$RyrJs)
        (make-polar . g$11345$RyrJs)
        (magnitude . g$11344$RyrJs)
        (log . g$11343$RyrJs)
        (list? . g$11342$RyrJs)
        (list-tail . g$5079$RyrJs)
        (list-ref . g$5080$RyrJs)
        (list->vector . g$5399$RyrJs)
        (list->string . g$5400$RyrJs)
        (list . g$11341$RyrJs)
        (length . g$11340$RyrJs)
        (lcm . g$5448$RyrJs)
        (integer? . g$11339$RyrJs)
        (integer-valued? . g$11338$RyrJs)
        (integer->char . g$11337$RyrJs)
        (infinite? . g$11336$RyrJs)
        (inexact? . g$11335$RyrJs)
        (inexact . g$11334$RyrJs)
        (imag-part . g$11333$RyrJs)
        (gcd . g$5447$RyrJs)
        (for-each . g$5100$RyrJs)
        (floor . g$11332$RyrJs)
        (finite? . g$11331$RyrJs)
        (expt . g$11330$RyrJs)
        (exp . g$11329$RyrJs)
        (exact? . g$11328$RyrJs)
        (exact-integer-sqrt . g$11327$RyrJs)
        (exact . g$11326$RyrJs)
        (even? . g$5443$RyrJs)
        (error . g$11325$RyrJs)
        (eqv? . g$11324$RyrJs)
        (equal? . g$11323$RyrJs)
        (eq? . g$11322$RyrJs)
        (dynamic-wind . g$11321$RyrJs)
        (div0-and-mod0 . g$5398$RyrJs)
        (mod0 . g$5396$RyrJs)
        (div0 . g$11320$RyrJs)
        (div-and-mod . g$5397$RyrJs)
        (mod . g$5395$RyrJs)
        (div . g$11319$RyrJs)
        (denominator . g$11318$RyrJs)
        (cos . g$11317$RyrJs)
        (cons . g$11316$RyrJs)
        (complex? . g$11315$RyrJs)
        (char? . g$5401$RyrJs)
        (char>? . g$5468$RyrJs)
        (char>=? . g$5470$RyrJs)
        (char=? . g$5466$RyrJs)
        (char<? . g$5467$RyrJs)
        (char<=? . g$5469$RyrJs)
        (char->integer . g$11314$RyrJs)
        (ceiling . g$11313$RyrJs)
        (call-with-values . g$11312$RyrJs)
        (call/cc . g$11311$RyrJs)
        (call-with-current-continuation . g$11310$RyrJs)
        (cddddr . g$5439$RyrJs)
        (cdddar . g$5438$RyrJs)
        (cddadr . g$5437$RyrJs)
        (cddaar . g$5436$RyrJs)
        (cdaddr . g$5435$RyrJs)
        (cdadar . g$5434$RyrJs)
        (cdaadr . g$5433$RyrJs)
        (cdaaar . g$5432$RyrJs)
        (cadddr . g$5431$RyrJs)
        (caddar . g$5430$RyrJs)
        (cadadr . g$5429$RyrJs)
        (cadaar . g$5428$RyrJs)
        (caaddr . g$5427$RyrJs)
        (caadar . g$5426$RyrJs)
        (caaadr . g$5425$RyrJs)
        (caaaar . g$5424$RyrJs)
        (cdddr . g$5423$RyrJs)
        (cddar . g$5422$RyrJs)
        (cdadr . g$5421$RyrJs)
        (cdaar . g$5420$RyrJs)
        (caddr . g$5419$RyrJs)
        (cadar . g$5418$RyrJs)
        (caadr . g$5417$RyrJs)
        (caaar . g$5416$RyrJs)
        (cddr . g$5415$RyrJs)
        (cdar . g$5414$RyrJs)
        (cadr . g$5413$RyrJs)
        (caar . g$5412$RyrJs)
        (cdr . g$11309$RyrJs)
        (car . g$11308$RyrJs)
        (boolean? . g$5405$RyrJs)
        (boolean=? . g$5460$RyrJs)
        (atan . g$11307$RyrJs)
        (assertion-violation . g$11306$RyrJs)
        (asin . g$11305$RyrJs)
        (apply . g$11304$RyrJs)
        (append . g$11303$RyrJs)
        (angle . g$11302$RyrJs)
        (acos . g$11301$RyrJs)
        (abs . g$11300$RyrJs)
        (/ . g$11299$RyrJs)
        (* . g$11298$RyrJs)
        (- . g$11297$RyrJs)
        (+ . g$11296$RyrJs)
        (>= . g$11295$RyrJs)
        (> . g$11294$RyrJs)
        (= . g$11293$RyrJs)
        (<= . g$11292$RyrJs)
        (< . g$11291$RyrJs)
        (make-record-printer . g$11290$RyrJs)
        (eqv-hash . g$11289$RyrJs)
        (reverse! . g$11288$RyrJs)
        (deserialize-port . g$11287$RyrJs)
        (serialize-port . g$11286$RyrJs)
        (enum-set? . g$6625$RyrJs)
        (make-promise . g$6238$RyrJs)
        (load/unload . g$11100$RyrJs)
        (load/args . g$11099$RyrJs)
        (printf . g$6734$RyrJs)
        (fprintf . g$6735$RyrJs)
        (format . g$6736$RyrJs)
        (procedure-form . g$11285$RyrJs)
        (procedure-environment . g$11284$RyrJs)
        (procedure-name . g$11283$RyrJs)
        (procedure-arity . g$11282$RyrJs)
        (gc-collect . g$11281$RyrJs)
        (typeof . g$11280$RyrJs)
        (clr-type? . g$11279$RyrJs)
        (get-clr-type . g$11278$RyrJs)
        (get-command-line . g$11277$RyrJs)
        (vector-append . g$11276$RyrJs)
        (vector-filter . g$11275$RyrJs)
        (vector-reverse! . g$11274$RyrJs)
        (vector-contains? . g$11273$RyrJs)
        (vector-index-of . g$11272$RyrJs)
        (vector-copy . g$11271$RyrJs)
        (vector-binary-search . g$11270$RyrJs)
        (string-ci-compare . g$11269$RyrJs)
        (string-compare . g$11268$RyrJs)
        (string-format . g$11267$RyrJs)
        (trace-printer . g$11096$RyrJs)
        (make-traced-procedure . g$11266$RyrJs)
        (make-traced-macro . g$6756$RyrJs)
        (assertion-error . g$8074$RyrJs)
        (time-it . g$11265$RyrJs)
        (make-parameter . g$6763$RyrJs)
        (library-locator . g$11264$RyrJs)
        (get-library-paths . g$11263$RyrJs)
        (open-tcp-input/output-port . g$11262$RyrJs)
        (hashtable-for-each . g$11261$RyrJs)
        (hashtable-map . g$11260$RyrJs)
        (environment-bindings . g$8052$RyrJs)
        (environment-symbols . g$8055$RyrJs)
        (interaction-environment-symbols . g$8051$RyrJs)
        (optimization-level . g$11259$RyrJs)
        (library-path . g$7382$RyrJs)
        (make-compile-time-value . g$7760$RyrJs)
        (expand->core . g$8061$RyrJs)
        (expand . g$8059$RyrJs)
        (syntax-transpose . g$7998$RyrJs)
        (convert->cps . g$7079$RyrJs)
        (installed-libraries . g$7403$RyrJs)
        (uninstall-library . g$7394$RyrJs)
        (pretty-width . g$6838$RyrJs)
        (pretty-print . g$6840$RyrJs)
        (&no-nans . g$11258$RyrJs)
        (&no-infinities . g$11257$RyrJs)
        (&i/o-encoding . g$11256$RyrJs)
        (&i/o-decoding . g$11255$RyrJs)
        (&i/o-port . g$11254$RyrJs)
        (&i/o-file-does-not-exist . g$11253$RyrJs)
        (&i/o-file-already-exists . g$11252$RyrJs)
        (&i/o-file-is-read-only . g$11251$RyrJs)
        (&i/o-file-protection . g$11250$RyrJs)
        (&i/o-filename . g$11249$RyrJs)
        (&i/o-invalid-position . g$11248$RyrJs)
        (&i/o-write . g$11247$RyrJs)
        (&i/o-read . g$11246$RyrJs)
        (&i/o . g$11245$RyrJs)
        (&non-continuable . g$11244$RyrJs)
        (&undefined . g$11243$RyrJs)
        (&syntax . g$11242$RyrJs)
        (&lexical . g$11241$RyrJs)
        (&implementation-restriction . g$11240$RyrJs)
        (&who . g$11239$RyrJs)
        (&irritants . g$11238$RyrJs)
        (&assertion . g$11237$RyrJs)
        (&violation . g$11236$RyrJs)
        (&error . g$11235$RyrJs)
        (&serious . g$11234$RyrJs)
        (&warning . g$11233$RyrJs)
        (&message . g$11232$RyrJs)
        (&condition . g$11231$RyrJs)
        (define-condition-type . g$11230$RyrJs)
        (define-enumeration . g$11229$RyrJs)
        (define-record-type . g$11228$RyrJs)
        (parent-rtd . g$11227$RyrJs)
        (nongenerative . g$11226$RyrJs)
        (opaque . g$11225$RyrJs)
        (sealed . g$11224$RyrJs)
        (protocol . g$11223$RyrJs)
        (parent . g$11222$RyrJs)
        (immutable . g$11221$RyrJs)
        (mutable . g$11220$RyrJs)
        (fields . g$11219$RyrJs)
        (error-handling-mode . g$11218$RyrJs)
        (file-options . g$11217$RyrJs)
        (buffer-mode . g$11216$RyrJs)
        (eol-style . g$11215$RyrJs)
        (guard . g$11214$RyrJs)
        (trace-letrec-syntax . g$11213$RyrJs)
        (trace-let-syntax . g$11212$RyrJs)
        (trace-define-syntax . g$11211$RyrJs)
        (trace-define . g$11210$RyrJs)
        (trace-lambda . g$11209$RyrJs)
        (unsyntax-splicing . g$11208$RyrJs)
        (unsyntax . g$11207$RyrJs)
        (unquote-splicing . g$11206$RyrJs)
        (unquote . g$11205$RyrJs)
        (_ . g$11204$RyrJs)
        (else . g$11203$RyrJs)
        (=> . g$11202$RyrJs)
        (... . g$11201$RyrJs)
        (assert . g$11200$RyrJs)
        (endianness . g$11199$RyrJs)
        (delay . g$11198$RyrJs)
        (time . g$11197$RyrJs)
        (or . g$11196$RyrJs)
        (and . g$11195$RyrJs)
        (do . g$11194$RyrJs)
        (cond . g$11193$RyrJs)
        (let* . g$11192$RyrJs)
        (let . g$11191$RyrJs)
        (identifier-syntax . g$11190$RyrJs)
        (with-syntax . g$11189$RyrJs)
        (quasisyntax . g$11188$RyrJs)
        (quasiquote . g$11187$RyrJs)
        (syntax-rules . g$11186$RyrJs)
        (include-into . g$11185$RyrJs)
        (include . g$11184$RyrJs)
        (define-struct . g$11183$RyrJs)
        (let-values . g$11182$RyrJs)
        (let*-values . g$11181$RyrJs)
        (record-constructor-descriptor . g$11180$RyrJs)
        (record-type-descriptor . g$11179$RyrJs)
        (fluid-let-syntax . g$11178$RyrJs)
        (case . g$11177$RyrJs)
        (parameterize . g$11176$RyrJs)
        (unless . g$11175$RyrJs)
        (when . g$11174$RyrJs)
        (if . g$11173$RyrJs)
        (letrec* . g$11172$RyrJs)
        (letrec . g$11171$RyrJs)
        (type-descriptor . g$11170$RyrJs)
        (case-lambda . g$11169$RyrJs)
        (lambda . g$11168$RyrJs)
        (syntax . g$11167$RyrJs)
        (syntax-case . g$11166$RyrJs)
        (quote . g$11165$RyrJs)
        (foreign-call . g$11164$RyrJs)
        (letrec-syntax . g$11163$RyrJs)
        (let-syntax . g$11162$RyrJs)
        (set! . g$11161$RyrJs)
        (export . g$11160$RyrJs)
        (import . g$11159$RyrJs)
        (library . g$11158$RyrJs)
        (begin . g$11157$RyrJs)
        (module . g$11156$RyrJs)
        (define-syntax . g$11155$RyrJs)
        (define . g$11154$RyrJs))
      '((g$7955$RyrJs core-prim . ellipsis-map)
        (g$6220$RyrJs core-prim . &no-nans-rcd)
        (g$6219$RyrJs core-prim . &no-nans-rtd)
        (g$6207$RyrJs core-prim . &no-infinities-rcd)
        (g$6206$RyrJs core-prim . &no-infinities-rtd)
        (g$6194$RyrJs core-prim . &i/o-encoding-rcd)
        (g$6193$RyrJs core-prim . &i/o-encoding-rtd)
        (g$6179$RyrJs core-prim . &i/o-decoding-rcd)
        (g$6178$RyrJs core-prim . &i/o-decoding-rtd)
        (g$6166$RyrJs core-prim . &i/o-port-rcd)
        (g$6165$RyrJs core-prim . &i/o-port-rtd)
        (g$6151$RyrJs core-prim . &i/o-file-does-not-exist-rcd)
        (g$6150$RyrJs core-prim . &i/o-file-does-not-exist-rtd)
        (g$6138$RyrJs core-prim . &i/o-file-already-exists-rcd)
        (g$6137$RyrJs core-prim . &i/o-file-already-exists-rtd)
        (g$6125$RyrJs core-prim . &i/o-file-is-read-only-rcd)
        (g$6124$RyrJs core-prim . &i/o-file-is-read-only-rtd)
        (g$6112$RyrJs core-prim . &i/o-file-protection-rcd)
        (g$6111$RyrJs core-prim . &i/o-file-protection-rtd)
        (g$6099$RyrJs core-prim . &i/o-filename-rcd)
        (g$6098$RyrJs core-prim . &i/o-filename-rtd)
        (g$6084$RyrJs core-prim . &i/o-invalid-position-rcd)
        (g$6083$RyrJs core-prim . &i/o-invalid-position-rtd)
        (g$6069$RyrJs core-prim . &i/o-write-rcd)
        (g$6068$RyrJs core-prim . &i/o-write-rtd)
        (g$6056$RyrJs core-prim . &i/o-read-rcd)
        (g$6055$RyrJs core-prim . &i/o-read-rtd)
        (g$6043$RyrJs core-prim . &i/o-rcd)
        (g$6042$RyrJs core-prim . &i/o-rtd)
        (g$6030$RyrJs core-prim . &undefined-rcd)
        (g$6029$RyrJs core-prim . &undefined-rtd)
        (g$6017$RyrJs core-prim . &syntax-rcd)
        (g$6016$RyrJs core-prim . &syntax-rtd)
        (g$6000$RyrJs core-prim . &lexical-rcd)
        (g$5999$RyrJs core-prim . &lexical-rtd)
        (g$5987$RyrJs core-prim . &implementation-restriction-rcd)
        (g$5986$RyrJs core-prim . &implementation-restriction-rtd)
        (g$5974$RyrJs core-prim . &non-continuable-rcd)
        (g$5973$RyrJs core-prim . &non-continuable-rtd)
        (g$5961$RyrJs core-prim . &who-rcd)
        (g$5960$RyrJs core-prim . &who-rtd)
        (g$5946$RyrJs core-prim . &irritants-rcd)
        (g$5945$RyrJs core-prim . &irritants-rtd)
        (g$5931$RyrJs core-prim . &assertion-rcd)
        (g$5930$RyrJs core-prim . &assertion-rtd)
        (g$5918$RyrJs core-prim . &violation-rcd)
        (g$5917$RyrJs core-prim . &violation-rtd)
        (g$5905$RyrJs core-prim . &error-rcd)
        (g$5904$RyrJs core-prim . &error-rtd)
        (g$5892$RyrJs core-prim . &serious-rcd)
        (g$5891$RyrJs core-prim . &serious-rtd)
        (g$5879$RyrJs core-prim . &warning-rcd)
        (g$5878$RyrJs core-prim . &warning-rtd)
        (g$5866$RyrJs core-prim . &message-rcd)
        (g$5865$RyrJs core-prim . &message-rtd)
        (g$5826$RyrJs core-prim . &condition-rcd)
        (g$5825$RyrJs core-prim . &condition-rtd)
        (g$11625$RyrJs core-prim . library-letrec*)
        (g$11624$RyrJs core-prim . annotation-stripped)
        (g$11623$RyrJs core-prim . annotation-source)
        (g$11622$RyrJs core-prim . annotation-expression)
        (g$11621$RyrJs core-prim . annotation?)
        (g$11620$RyrJs core-prim . read-annotated)
        (g$11619$RyrJs core-prim . tanh)
        (g$11618$RyrJs core-prim . cosh)
        (g$11617$RyrJs core-prim . sinh)
        (g$11616$RyrJs core-prim . make-guid)
        (g$11615$RyrJs core-prim . unspecified?)
        (g$5082$RyrJs core-prim . make-list)
        (g$5081$RyrJs core-prim . last-pair)
        (g$11614$RyrJs core-prim . load-r5rs)
        (g$11613$RyrJs core-prim . license)
        (g$11612$RyrJs core-prim . stacktrace)
        (g$11102$RyrJs core-prim . ironscheme-build)
        (g$11611$RyrJs core-prim . define-clr-class-internal)
        (g$11610$RyrJs core-prim . clr-field-set!-internal)
        (g$11609$RyrJs core-prim . clr-field-get-internal)
        (g$11608$RyrJs core-prim . clr-cast-internal)
        (g$11607$RyrJs core-prim . clr-call-internal)
        (g$11606$RyrJs core-prim . clr-new-internal)
        (g$11605$RyrJs core-prim . clr-new-array-internal)
        (g$11604$RyrJs core-prim . clr-is-internal)
        (g$11603$RyrJs core-prim . clr-reference-internal)
        (g$11602$RyrJs core-prim . clr-using-internal)
        (g$8075$RyrJs core-prim . syntax-error)
        (g$7950$RyrJs core-prim . syntax-dispatch)
        (g$11601$RyrJs core-prim . compile-core)
        (g$11600$RyrJs core-prim . eval-core)
        (g$11599$RyrJs core-prim . remove-location)
        (g$11598$RyrJs core-prim . set-symbol-value!)
        (g$11597$RyrJs core-prim . symbol-value)
        (g$11596$RyrJs core-prim . symbol-bound?)
        (g$11595$RyrJs core-prim . ungensym)
        (g$11594$RyrJs core-prim . gensym)
        (g$11593$RyrJs core-prim . void)
        (g$11592$RyrJs core-prim . load-serialized-library)
        (g$11591$RyrJs core-prim . serialize-library)
        (g$11106$RyrJs core-prim . compile-system-libraries)
        (g$11108$RyrJs core-prim . compile->closure)
        (g$11107$RyrJs core-prim . compile)
        (g$11101$RyrJs core-prim . load)
        (g$11590$RyrJs core-prim . string-normalize)
        (g$8085$RyrJs core-prim . interaction-environment)
        (g$11589$RyrJs core-prim . char-ready?)
        (g$11588$RyrJs core-prim . string-upcase)
        (g$11587$RyrJs core-prim . string-titlecase)
        (g$6303$RyrJs core-prim . string-normalize-nfkd)
        (g$6302$RyrJs core-prim . string-normalize-nfkc)
        (g$6301$RyrJs core-prim . string-normalize-nfd)
        (g$6300$RyrJs core-prim . string-normalize-nfc)
        (g$11586$RyrJs core-prim . string-foldcase)
        (g$11585$RyrJs core-prim . string-downcase)
        (g$6287$RyrJs core-prim . string-ci>?)
        (g$6289$RyrJs core-prim . string-ci>=?)
        (g$6285$RyrJs core-prim . string-ci=?)
        (g$6286$RyrJs core-prim . string-ci<?)
        (g$6288$RyrJs core-prim . string-ci<=?)
        (g$11584$RyrJs core-prim . char-whitespace?)
        (g$11583$RyrJs core-prim . char-upper-case?)
        (g$11582$RyrJs core-prim . char-title-case?)
        (g$11581$RyrJs core-prim . char-numeric?)
        (g$11580$RyrJs core-prim . char-lower-case?)
        (g$11579$RyrJs core-prim . char-general-category)
        (g$11578$RyrJs core-prim . char-upcase)
        (g$11577$RyrJs core-prim . char-titlecase)
        (g$11576$RyrJs core-prim . char-foldcase)
        (g$11575$RyrJs core-prim . char-downcase)
        (g$6297$RyrJs core-prim . char-ci>?)
        (g$6299$RyrJs core-prim . char-ci>=?)
        (g$6295$RyrJs core-prim . char-ci=?)
        (g$6296$RyrJs core-prim . char-ci<?)
        (g$6298$RyrJs core-prim . char-ci<=?)
        (g$11574$RyrJs core-prim . char-alphabetic?)
        (g$7762$RyrJs core-prim . variable-transformer-procedure)
        (g$7761$RyrJs core-prim . variable-transformer?)
        (g$7759$RyrJs core-prim . make-variable-transformer)
        (g$8079$RyrJs core-prim . identifier?)
        (g$8068$RyrJs core-prim . generate-temporaries)
        (g$8069$RyrJs core-prim . free-identifier=?)
        (g$8081$RyrJs core-prim . syntax->datum)
        (g$8080$RyrJs core-prim . datum->syntax)
        (g$8070$RyrJs core-prim . bound-identifier=?)
        (g$11573$RyrJs core-prim . record-type-descriptor?)
        (g$11572$RyrJs core-prim . record-predicate)
        (g$11571$RyrJs core-prim . record-mutator)
        (g$11570$RyrJs core-prim . record-constructor)
        (g$11569$RyrJs core-prim . record-accessor)
        (g$11568$RyrJs core-prim . make-record-type-descriptor)
        (g$11567$RyrJs core-prim . make-record-constructor-descriptor)
        (g$11566$RyrJs core-prim . record?)
        (g$11565$RyrJs core-prim . record-type-uid)
        (g$11564$RyrJs core-prim . record-type-sealed?)
        (g$11563$RyrJs core-prim . record-type-parent)
        (g$11562$RyrJs core-prim . record-type-opaque?)
        (g$11561$RyrJs core-prim . record-type-name)
        (g$11560$RyrJs core-prim . record-type-generative?)
        (g$11559$RyrJs core-prim . record-type-field-names)
        (g$11558$RyrJs core-prim . record-rtd)
        (g$11557$RyrJs core-prim . record-field-mutable?)
        (g$5694$RyrJs core-prim . delete-file)
        (g$5693$RyrJs core-prim . file-exists?)
        (g$11556$RyrJs core-prim . vector-sort!)
        (g$11555$RyrJs core-prim . vector-sort)
        (g$6256$RyrJs core-prim . list-sort)
        (g$11554$RyrJs core-prim . symbol-hash)
        (g$11553$RyrJs core-prim . string-ci-hash)
        (g$11552$RyrJs core-prim . string-hash)
        (g$11551$RyrJs core-prim . equal-hash)
        (g$11550$RyrJs core-prim . hashtable-equivalence-function)
        (g$11549$RyrJs core-prim . make-hashtable)
        (g$11548$RyrJs core-prim . hashtable-hash-function)
        (g$5661$RyrJs core-prim . make-eqv-hashtable)
        (g$5660$RyrJs core-prim . make-eq-hashtable)
        (g$11547$RyrJs core-prim . hashtable?)
        (g$5667$RyrJs core-prim . hashtable-update!)
        (g$5662$RyrJs core-prim . hashtable-size)
        (g$5664$RyrJs core-prim . hashtable-set!)
        (g$5663$RyrJs core-prim . hashtable-ref)
        (g$11546$RyrJs core-prim . hashtable-mutable?)
        (g$11545$RyrJs core-prim . hashtable-keys)
        (g$11544$RyrJs core-prim . hashtable-entries)
        (g$5665$RyrJs core-prim . hashtable-delete!)
        (g$11543$RyrJs core-prim . hashtable-copy)
        (g$5666$RyrJs core-prim . hashtable-contains?)
        (g$5668$RyrJs core-prim . hashtable-clear!)
        (g$6587$RyrJs core-prim . call-with-output-file)
        (g$6586$RyrJs core-prim . call-with-input-file)
        (g$6578$RyrJs core-prim . write-char)
        (g$11542$RyrJs core-prim . write)
        (g$6585$RyrJs core-prim . with-output-to-file)
        (g$6584$RyrJs core-prim . with-input-from-file)
        (g$6577$RyrJs core-prim . read-char)
        (g$11541$RyrJs core-prim . read)
        (g$6576$RyrJs core-prim . peek-char)
        (g$11540$RyrJs core-prim . open-output-file)
        (g$11539$RyrJs core-prim . open-input-file)
        (g$6588$RyrJs core-prim . newline)
        (g$11538$RyrJs core-prim . display)
        (g$11537$RyrJs core-prim . close-output-port)
        (g$11536$RyrJs core-prim . close-input-port)
        (g$11535$RyrJs core-prim . eof-object?)
        (g$11534$RyrJs core-prim . eof-object)
        (g$11533$RyrJs core-prim . current-error-port)
        (g$11532$RyrJs core-prim . current-output-port)
        (g$11531$RyrJs core-prim . current-input-port)
        (g$11530$RyrJs core-prim . output-port?)
        (g$11529$RyrJs core-prim . input-port?)
        (g$11528$RyrJs core-prim . utf-8-codec)
        (g$11527$RyrJs core-prim . utf-16-codec)
        (g$11526$RyrJs core-prim . transcoder-error-handling-mode)
        (g$11525$RyrJs core-prim . transcoder-eol-style)
        (g$11524$RyrJs core-prim . transcoder-codec)
        (g$11523$RyrJs core-prim . transcoded-port)
        (g$11522$RyrJs core-prim . textual-port?)
        (g$11521$RyrJs core-prim . string->bytevector)
        (g$11520$RyrJs core-prim . standard-output-port)
        (g$11519$RyrJs core-prim . standard-input-port)
        (g$11518$RyrJs core-prim . standard-error-port)
        (g$11517$RyrJs core-prim . set-port-position!)
        (g$11516$RyrJs core-prim . put-u8)
        (g$11515$RyrJs core-prim . put-string)
        (g$6556$RyrJs core-prim . put-datum)
        (g$11514$RyrJs core-prim . put-char)
        (g$11513$RyrJs core-prim . put-bytevector)
        (g$6561$RyrJs core-prim . port?)
        (g$11512$RyrJs core-prim . port-transcoder)
        (g$11511$RyrJs core-prim . port-position)
        (g$11510$RyrJs core-prim . port-has-set-port-position!?)
        (g$11509$RyrJs core-prim . port-has-port-position?)
        (g$11508$RyrJs core-prim . port-eof?)
        (g$11507$RyrJs core-prim . output-port-buffer-mode)
        (g$6560$RyrJs core-prim . open-string-output-port)
        (g$11506$RyrJs core-prim . open-string-input-port)
        (g$11505$RyrJs core-prim . open-file-output-port)
        (g$11504$RyrJs core-prim . open-file-input/output-port)
        (g$11503$RyrJs core-prim . open-file-input-port)
        (g$11502$RyrJs core-prim . open-bytevector-output-port)
        (g$11501$RyrJs core-prim . open-bytevector-input-port)
        (g$11500$RyrJs core-prim . native-transcoder)
        (g$11499$RyrJs core-prim . native-eol-style)
        (g$11498$RyrJs core-prim . make-transcoder)
        (g$11497$RyrJs core-prim . latin-1-codec)
        (g$6066$RyrJs core-prim . make-i/o-write-error)
        (g$6053$RyrJs core-prim . make-i/o-read-error)
        (g$6161$RyrJs core-prim . make-i/o-port-error)
        (g$6079$RyrJs core-prim . make-i/o-invalid-position-error)
        (g$6094$RyrJs core-prim . make-i/o-filename-error)
        (g$6109$RyrJs core-prim . make-i/o-file-protection-error)
        (g$6122$RyrJs core-prim . make-i/o-file-is-read-only-error)
        (g$6148$RyrJs core-prim . make-i/o-file-does-not-exist-error)
        (g$6135$RyrJs core-prim . make-i/o-file-already-exists-error)
        (g$6040$RyrJs core-prim . make-i/o-error)
        (g$6189$RyrJs core-prim . make-i/o-encoding-error)
        (g$6176$RyrJs core-prim . make-i/o-decoding-error)
        (g$11496$RyrJs core-prim . make-custom-textual-output-port)
        (g$11495$RyrJs
          core-prim
          .
          make-custom-textual-input/output-port)
        (g$11494$RyrJs core-prim . make-custom-textual-input-port)
        (g$11493$RyrJs core-prim . make-custom-binary-output-port)
        (g$11492$RyrJs core-prim . make-custom-binary-input/output-port)
        (g$11491$RyrJs core-prim . make-custom-binary-input-port)
        (g$11490$RyrJs core-prim . make-bytevector)
        (g$11489$RyrJs core-prim . lookahead-u8)
        (g$11488$RyrJs core-prim . lookahead-char)
        (g$6067$RyrJs core-prim . i/o-write-error?)
        (g$6054$RyrJs core-prim . i/o-read-error?)
        (g$6163$RyrJs core-prim . i/o-port-error?)
        (g$6081$RyrJs core-prim . i/o-invalid-position-error?)
        (g$6082$RyrJs core-prim . i/o-error-position)
        (g$6096$RyrJs core-prim . i/o-filename-error?)
        (g$6110$RyrJs core-prim . i/o-file-protection-error?)
        (g$6123$RyrJs core-prim . i/o-file-is-read-only-error?)
        (g$6149$RyrJs core-prim . i/o-file-does-not-exist-error?)
        (g$6136$RyrJs core-prim . i/o-file-already-exists-error?)
        (g$6041$RyrJs core-prim . i/o-error?)
        (g$6164$RyrJs core-prim . i/o-error-port)
        (g$6097$RyrJs core-prim . i/o-error-filename)
        (g$6191$RyrJs core-prim . i/o-encoding-error?)
        (g$6192$RyrJs core-prim . i/o-encoding-error-char)
        (g$6177$RyrJs core-prim . i/o-decoding-error?)
        (g$11487$RyrJs core-prim . get-u8)
        (g$11486$RyrJs core-prim . get-string-n!)
        (g$11485$RyrJs core-prim . get-string-n)
        (g$11484$RyrJs core-prim . get-string-all)
        (g$11483$RyrJs core-prim . get-line)
        (g$6557$RyrJs core-prim . get-datum)
        (g$11482$RyrJs core-prim . get-char)
        (g$11481$RyrJs core-prim . get-bytevector-some)
        (g$11480$RyrJs core-prim . get-bytevector-n!)
        (g$11479$RyrJs core-prim . get-bytevector-n)
        (g$11478$RyrJs core-prim . get-bytevector-all)
        (g$11477$RyrJs core-prim . flush-output-port)
        (g$11476$RyrJs core-prim . close-port)
        (g$6562$RyrJs core-prim . call-with-string-output-port)
        (g$6563$RyrJs core-prim . call-with-port)
        (g$11475$RyrJs core-prim . call-with-bytevector-output-port)
        (g$11474$RyrJs core-prim . bytevector->string)
        (g$11473$RyrJs core-prim . buffer-mode?)
        (g$11472$RyrJs core-prim . binary-port?)
        (g$8058$RyrJs core-prim . scheme-report-environment)
        (g$6235$RyrJs core-prim . quotient)
        (g$8057$RyrJs core-prim . null-environment)
        (g$6236$RyrJs core-prim . remainder)
        (g$6237$RyrJs core-prim . modulo)
        (g$6232$RyrJs core-prim . inexact->exact)
        (g$6239$RyrJs core-prim . force)
        (g$6233$RyrJs core-prim . exact->inexact)
        (g$11471$RyrJs core-prim . exit)
        (g$11097$RyrJs core-prim . command-line)
        (g$11470$RyrJs core-prim . string-fill!)
        (g$11469$RyrJs core-prim . string-set!)
        (g$11468$RyrJs core-prim . set-cdr!)
        (g$11467$RyrJs core-prim . set-car!)
        (g$5104$RyrJs core-prim . remove)
        (g$5105$RyrJs core-prim . remv)
        (g$5085$RyrJs core-prim . remp)
        (g$5106$RyrJs core-prim . remq)
        (g$5084$RyrJs core-prim . partition)
        (g$5092$RyrJs core-prim . memv)
        (g$5091$RyrJs core-prim . memq)
        (g$5094$RyrJs core-prim . memp)
        (g$5093$RyrJs core-prim . member)
        (g$5098$RyrJs core-prim . exists)
        (g$5097$RyrJs core-prim . for-all)
        (g$5103$RyrJs core-prim . fold-right)
        (g$5102$RyrJs core-prim . fold-left)
        (g$5083$RyrJs core-prim . find)
        (g$5086$RyrJs core-prim . filter)
        (g$5101$RyrJs core-prim . cons*)
        (g$5088$RyrJs core-prim . assv)
        (g$5087$RyrJs core-prim . assq)
        (g$5090$RyrJs core-prim . assp)
        (g$5089$RyrJs core-prim . assoc)
        (g$11466$RyrJs core-prim . with-exception-handler)
        (g$11465$RyrJs core-prim . raise-continuable)
        (g$11464$RyrJs core-prim . raise)
        (g$8060$RyrJs core-prim . eval)
        (g$8056$RyrJs core-prim . environment)
        (g$6648$RyrJs core-prim . make-enumeration)
        (g$6655$RyrJs core-prim . enum-set=?)
        (g$6649$RyrJs core-prim . enum-set-universe)
        (g$6656$RyrJs core-prim . enum-set-union)
        (g$6654$RyrJs core-prim . enum-set-subset?)
        (g$6660$RyrJs core-prim . enum-set-projection)
        (g$6653$RyrJs core-prim . enum-set-member?)
        (g$6657$RyrJs core-prim . enum-set-intersection)
        (g$6650$RyrJs core-prim . enum-set-indexer)
        (g$6658$RyrJs core-prim . enum-set-difference)
        (g$6651$RyrJs core-prim . enum-set-constructor)
        (g$6659$RyrJs core-prim . enum-set-complement)
        (g$6652$RyrJs core-prim . enum-set->list)
        (g$5958$RyrJs core-prim . who-condition?)
        (g$5877$RyrJs core-prim . warning?)
        (g$5916$RyrJs core-prim . violation?)
        (g$6028$RyrJs core-prim . undefined-violation?)
        (g$6013$RyrJs core-prim . syntax-violation?)
        (g$6015$RyrJs core-prim . syntax-violation-subform)
        (g$6014$RyrJs core-prim . syntax-violation-form)
        (g$8078$RyrJs core-prim . syntax-violation)
        (g$11463$RyrJs core-prim . simple-conditions)
        (g$5890$RyrJs core-prim . serious-condition?)
        (g$5972$RyrJs core-prim . non-continuable-violation?)
        (g$5863$RyrJs core-prim . message-condition?)
        (g$5956$RyrJs core-prim . make-who-condition)
        (g$5876$RyrJs core-prim . make-warning)
        (g$5915$RyrJs core-prim . make-violation)
        (g$6027$RyrJs core-prim . make-undefined-violation)
        (g$6010$RyrJs core-prim . make-syntax-violation)
        (g$5889$RyrJs core-prim . make-serious-condition)
        (g$5971$RyrJs core-prim . make-non-continuable-violation)
        (g$5861$RyrJs core-prim . make-message-condition)
        (g$5997$RyrJs core-prim . make-lexical-violation)
        (g$5941$RyrJs core-prim . make-irritants-condition)
        (g$5984$RyrJs
          core-prim
          .
          make-implementation-restriction-violation)
        (g$5902$RyrJs core-prim . make-error)
        (g$5928$RyrJs core-prim . make-assertion-violation)
        (g$5998$RyrJs core-prim . lexical-violation?)
        (g$5943$RyrJs core-prim . irritants-condition?)
        (g$5985$RyrJs core-prim . implementation-restriction-violation?)
        (g$5903$RyrJs core-prim . error?)
        (g$5959$RyrJs core-prim . condition-who)
        (g$11462$RyrJs core-prim . condition-predicate)
        (g$5864$RyrJs core-prim . condition-message)
        (g$5944$RyrJs core-prim . condition-irritants)
        (g$11461$RyrJs core-prim . condition-accessor)
        (g$11460$RyrJs core-prim . condition)
        (g$5929$RyrJs core-prim . assertion-violation?)
        (g$11459$RyrJs core-prim . condition?)
        (g$11458$RyrJs core-prim . utf32->string)
        (g$11457$RyrJs core-prim . utf16->string)
        (g$11456$RyrJs core-prim . utf8->string)
        (g$11455$RyrJs core-prim . uint-list->bytevector)
        (g$11454$RyrJs core-prim . u8-list->bytevector)
        (g$11453$RyrJs core-prim . string->utf8)
        (g$11452$RyrJs core-prim . string->utf32)
        (g$11451$RyrJs core-prim . string->utf16)
        (g$11450$RyrJs core-prim . sint-list->bytevector)
        (g$5700$RyrJs core-prim . native-endianness)
        (g$5403$RyrJs core-prim . bytevector?)
        (g$11449$RyrJs core-prim . bytevector=?)
        (g$11448$RyrJs core-prim . bytevector-uint-set!)
        (g$11447$RyrJs core-prim . bytevector-uint-ref)
        (g$11446$RyrJs core-prim . bytevector-u8-set!)
        (g$11445$RyrJs core-prim . bytevector-u8-ref)
        (g$5721$RyrJs core-prim . bytevector-u64-set!)
        (g$5717$RyrJs core-prim . bytevector-u64-ref)
        (g$5723$RyrJs core-prim . bytevector-u64-native-set!)
        (g$5719$RyrJs core-prim . bytevector-u64-native-ref)
        (g$5713$RyrJs core-prim . bytevector-u32-set!)
        (g$5709$RyrJs core-prim . bytevector-u32-ref)
        (g$5715$RyrJs core-prim . bytevector-u32-native-set!)
        (g$5711$RyrJs core-prim . bytevector-u32-native-ref)
        (g$5705$RyrJs core-prim . bytevector-u16-set!)
        (g$5701$RyrJs core-prim . bytevector-u16-ref)
        (g$5707$RyrJs core-prim . bytevector-u16-native-set!)
        (g$5703$RyrJs core-prim . bytevector-u16-native-ref)
        (g$11444$RyrJs core-prim . bytevector-sint-set!)
        (g$11443$RyrJs core-prim . bytevector-sint-ref)
        (g$11442$RyrJs core-prim . bytevector-s8-set!)
        (g$11441$RyrJs core-prim . bytevector-s8-ref)
        (g$5722$RyrJs core-prim . bytevector-s64-set!)
        (g$5718$RyrJs core-prim . bytevector-s64-ref)
        (g$5724$RyrJs core-prim . bytevector-s64-native-set!)
        (g$5720$RyrJs core-prim . bytevector-s64-native-ref)
        (g$5714$RyrJs core-prim . bytevector-s32-set!)
        (g$5710$RyrJs core-prim . bytevector-s32-ref)
        (g$5716$RyrJs core-prim . bytevector-s32-native-set!)
        (g$5712$RyrJs core-prim . bytevector-s32-native-ref)
        (g$5706$RyrJs core-prim . bytevector-s16-set!)
        (g$5702$RyrJs core-prim . bytevector-s16-ref)
        (g$5708$RyrJs core-prim . bytevector-s16-native-set!)
        (g$5704$RyrJs core-prim . bytevector-s16-native-ref)
        (g$11440$RyrJs core-prim . bytevector-length)
        (g$11439$RyrJs core-prim . bytevector-ieee-single-set!)
        (g$11438$RyrJs core-prim . bytevector-ieee-single-ref)
        (g$5727$RyrJs core-prim . bytevector-ieee-single-native-set!)
        (g$5725$RyrJs core-prim . bytevector-ieee-single-native-ref)
        (g$11437$RyrJs core-prim . bytevector-ieee-double-set!)
        (g$11436$RyrJs core-prim . bytevector-ieee-double-ref)
        (g$5728$RyrJs core-prim . bytevector-ieee-double-native-set!)
        (g$5726$RyrJs core-prim . bytevector-ieee-double-native-ref)
        (g$11435$RyrJs core-prim . bytevector-fill!)
        (g$11434$RyrJs core-prim . bytevector-copy!)
        (g$11433$RyrJs core-prim . bytevector-copy)
        (g$11432$RyrJs core-prim . bytevector->uint-list)
        (g$11431$RyrJs core-prim . bytevector->u8-list)
        (g$11430$RyrJs core-prim . bytevector->sint-list)
        (g$6218$RyrJs core-prim . no-nans-violation?)
        (g$6205$RyrJs core-prim . no-infinities-violation?)
        (g$6217$RyrJs core-prim . make-no-nans-violation)
        (g$6204$RyrJs core-prim . make-no-infinities-violation)
        (g$11429$RyrJs core-prim . real->flonum)
        (g$6502$RyrJs core-prim . flzero?)
        (g$6497$RyrJs core-prim . fltruncate)
        (g$6487$RyrJs core-prim . fltan)
        (g$6492$RyrJs core-prim . flsqrt)
        (g$6485$RyrJs core-prim . flsin)
        (g$6498$RyrJs core-prim . flround)
        (g$6500$RyrJs core-prim . flpositive?)
        (g$5408$RyrJs core-prim . flonum?)
        (g$6504$RyrJs core-prim . flodd?)
        (g$11428$RyrJs core-prim . flnumerator)
        (g$6501$RyrJs core-prim . flnegative?)
        (g$6484$RyrJs core-prim . flnan?)
        (g$6478$RyrJs core-prim . flmod0)
        (g$6477$RyrJs core-prim . flmod)
        (g$6506$RyrJs core-prim . flmin)
        (g$6505$RyrJs core-prim . flmax)
        (g$6491$RyrJs core-prim . fllog)
        (g$6481$RyrJs core-prim . flinteger?)
        (g$6483$RyrJs core-prim . flinfinite?)
        (g$6496$RyrJs core-prim . flfloor)
        (g$6482$RyrJs core-prim . flfinite?)
        (g$6494$RyrJs core-prim . flexpt)
        (g$6493$RyrJs core-prim . flexp)
        (g$6503$RyrJs core-prim . fleven?)
        (g$6480$RyrJs core-prim . fldiv0-and-mod0)
        (g$11427$RyrJs core-prim . fldiv0)
        (g$6479$RyrJs core-prim . fldiv-and-mod)
        (g$11426$RyrJs core-prim . fldiv)
        (g$11425$RyrJs core-prim . fldenominator)
        (g$6486$RyrJs core-prim . flcos)
        (g$6495$RyrJs core-prim . flceiling)
        (g$6490$RyrJs core-prim . flatan)
        (g$6488$RyrJs core-prim . flasin)
        (g$6489$RyrJs core-prim . flacos)
        (g$6499$RyrJs core-prim . flabs)
        (g$11424$RyrJs core-prim . fl>?)
        (g$11423$RyrJs core-prim . fl>=?)
        (g$11422$RyrJs core-prim . fl=?)
        (g$11421$RyrJs core-prim . fl<?)
        (g$11420$RyrJs core-prim . fl<=?)
        (g$11419$RyrJs core-prim . fl/)
        (g$11418$RyrJs core-prim . fl-)
        (g$11417$RyrJs core-prim . fl+)
        (g$11416$RyrJs core-prim . fl*)
        (g$11415$RyrJs core-prim . fixnum->flonum)
        (g$6399$RyrJs core-prim . fxzero?)
        (g$11414$RyrJs core-prim . fxxor)
        (g$6413$RyrJs core-prim . fxrotate-bit-field)
        (g$11413$RyrJs core-prim . fxreverse-bit-field)
        (g$6397$RyrJs core-prim . fxpositive?)
        (g$6401$RyrJs core-prim . fxodd?)
        (g$11412$RyrJs core-prim . fxnot)
        (g$6398$RyrJs core-prim . fxnegative?)
        (g$6394$RyrJs core-prim . fxmod0)
        (g$6393$RyrJs core-prim . fxmod)
        (g$6403$RyrJs core-prim . fxmin)
        (g$6402$RyrJs core-prim . fxmax)
        (g$11411$RyrJs core-prim . fxlength)
        (g$11410$RyrJs core-prim . fxior)
        (g$6407$RyrJs core-prim . fxif)
        (g$11409$RyrJs core-prim . fxfirst-bit-set)
        (g$6400$RyrJs core-prim . fxeven?)
        (g$6396$RyrJs core-prim . fxdiv0-and-mod0)
        (g$11408$RyrJs core-prim . fxdiv0)
        (g$6395$RyrJs core-prim . fxdiv-and-mod)
        (g$11407$RyrJs core-prim . fxdiv)
        (g$6410$RyrJs core-prim . fxcopy-bit-field)
        (g$6408$RyrJs core-prim . fxcopy-bit)
        (g$11406$RyrJs core-prim . fxbit-set?)
        (g$6409$RyrJs core-prim . fxbit-field)
        (g$11405$RyrJs core-prim . fxbit-count)
        (g$6412$RyrJs core-prim . fxarithmetic-shift-right)
        (g$6411$RyrJs core-prim . fxarithmetic-shift-left)
        (g$11404$RyrJs core-prim . fxarithmetic-shift)
        (g$11403$RyrJs core-prim . fxand)
        (g$11402$RyrJs core-prim . fx>?)
        (g$11401$RyrJs core-prim . fx>=?)
        (g$11400$RyrJs core-prim . fx=?)
        (g$11399$RyrJs core-prim . fx<?)
        (g$11398$RyrJs core-prim . fx<=?)
        (g$6405$RyrJs core-prim . fx-/carry)
        (g$11397$RyrJs core-prim . fx-)
        (g$6406$RyrJs core-prim . fx+/carry)
        (g$11396$RyrJs core-prim . fx+)
        (g$6404$RyrJs core-prim . fx*/carry)
        (g$11395$RyrJs core-prim . fx*)
        (g$11394$RyrJs core-prim . greatest-fixnum)
        (g$11393$RyrJs core-prim . least-fixnum)
        (g$5409$RyrJs core-prim . fixnum-width)
        (g$5407$RyrJs core-prim . fixnum?)
        (g$6367$RyrJs core-prim . bitwise-rotate-bit-field)
        (g$11392$RyrJs core-prim . bitwise-reverse-bit-field)
        (g$11391$RyrJs core-prim . bitwise-length)
        (g$6361$RyrJs core-prim . bitwise-if)
        (g$11390$RyrJs core-prim . bitwise-first-bit-set)
        (g$6364$RyrJs core-prim . bitwise-copy-bit-field)
        (g$6362$RyrJs core-prim . bitwise-copy-bit)
        (g$11389$RyrJs core-prim . bitwise-bit-set?)
        (g$6363$RyrJs core-prim . bitwise-bit-field)
        (g$11388$RyrJs core-prim . bitwise-bit-count)
        (g$11387$RyrJs core-prim . bitwise-xor)
        (g$11386$RyrJs core-prim . bitwise-ior)
        (g$11385$RyrJs core-prim . bitwise-and)
        (g$11384$RyrJs core-prim . bitwise-not)
        (g$6366$RyrJs core-prim . bitwise-arithmetic-shift-right)
        (g$6365$RyrJs core-prim . bitwise-arithmetic-shift-left)
        (g$11383$RyrJs core-prim . bitwise-arithmetic-shift)
        (g$5442$RyrJs core-prim . zero?)
        (g$5402$RyrJs core-prim . vector?)
        (g$11382$RyrJs core-prim . vector-set!)
        (g$11381$RyrJs core-prim . vector-ref)
        (g$5474$RyrJs core-prim . vector-map)
        (g$11380$RyrJs core-prim . vector-length)
        (g$5475$RyrJs core-prim . vector-for-each)
        (g$5410$RyrJs core-prim . vector-fill!)
        (g$11379$RyrJs core-prim . vector->list)
        (g$11378$RyrJs core-prim . vector)
        (g$11377$RyrJs core-prim . values)
        (g$11376$RyrJs core-prim . truncate)
        (g$11375$RyrJs core-prim . tan)
        (g$5404$RyrJs core-prim . symbol?)
        (g$5459$RyrJs core-prim . symbol=?)
        (g$11374$RyrJs core-prim . symbol->string)
        (g$11373$RyrJs core-prim . substring)
        (g$11372$RyrJs core-prim . string?)
        (g$5456$RyrJs core-prim . string>?)
        (g$5458$RyrJs core-prim . string>=?)
        (g$5454$RyrJs core-prim . string=?)
        (g$5455$RyrJs core-prim . string<?)
        (g$5457$RyrJs core-prim . string<=?)
        (g$11371$RyrJs core-prim . string-ref)
        (g$11370$RyrJs core-prim . string-length)
        (g$5476$RyrJs core-prim . string-for-each)
        (g$11369$RyrJs core-prim . string-copy)
        (g$11368$RyrJs core-prim . string-append)
        (g$11367$RyrJs core-prim . string->symbol)
        (g$11366$RyrJs core-prim . string->number)
        (g$11365$RyrJs core-prim . string->list)
        (g$11364$RyrJs core-prim . string)
        (g$11363$RyrJs core-prim . sqrt)
        (g$11362$RyrJs core-prim . sin)
        (g$11361$RyrJs core-prim . round)
        (g$5411$RyrJs core-prim . reverse)
        (g$11360$RyrJs core-prim . real?)
        (g$11359$RyrJs core-prim . real-valued?)
        (g$11358$RyrJs core-prim . real-part)
        (g$5471$RyrJs core-prim . rationalize)
        (g$11357$RyrJs core-prim . rational?)
        (g$11356$RyrJs core-prim . rational-valued?)
        (g$5406$RyrJs core-prim . procedure?)
        (g$5440$RyrJs core-prim . positive?)
        (g$11355$RyrJs core-prim . pair?)
        (g$5444$RyrJs core-prim . odd?)
        (g$11354$RyrJs core-prim . numerator)
        (g$11353$RyrJs core-prim . number?)
        (g$11352$RyrJs core-prim . number->string)
        (g$11351$RyrJs core-prim . null?)
        (g$11350$RyrJs core-prim . not)
        (g$5441$RyrJs core-prim . negative?)
        (g$11349$RyrJs core-prim . nan?)
        (g$5446$RyrJs core-prim . min)
        (g$5445$RyrJs core-prim . max)
        (g$5099$RyrJs core-prim . map)
        (g$11348$RyrJs core-prim . make-vector)
        (g$11347$RyrJs core-prim . make-string)
        (g$11346$RyrJs core-prim . make-rectangular)
        (g$11345$RyrJs core-prim . make-polar)
        (g$11344$RyrJs core-prim . magnitude)
        (g$11343$RyrJs core-prim . log)
        (g$11342$RyrJs core-prim . list?)
        (g$5079$RyrJs core-prim . list-tail)
        (g$5080$RyrJs core-prim . list-ref)
        (g$5399$RyrJs core-prim . list->vector)
        (g$5400$RyrJs core-prim . list->string)
        (g$11341$RyrJs core-prim . list)
        (g$11340$RyrJs core-prim . length)
        (g$5448$RyrJs core-prim . lcm)
        (g$11339$RyrJs core-prim . integer?)
        (g$11338$RyrJs core-prim . integer-valued?)
        (g$11337$RyrJs core-prim . integer->char)
        (g$11336$RyrJs core-prim . infinite?)
        (g$11335$RyrJs core-prim . inexact?)
        (g$11334$RyrJs core-prim . inexact)
        (g$11333$RyrJs core-prim . imag-part)
        (g$5447$RyrJs core-prim . gcd)
        (g$5100$RyrJs core-prim . for-each)
        (g$11332$RyrJs core-prim . floor)
        (g$11331$RyrJs core-prim . finite?)
        (g$11330$RyrJs core-prim . expt)
        (g$11329$RyrJs core-prim . exp)
        (g$11328$RyrJs core-prim . exact?)
        (g$11327$RyrJs core-prim . exact-integer-sqrt)
        (g$11326$RyrJs core-prim . exact)
        (g$5443$RyrJs core-prim . even?)
        (g$11325$RyrJs core-prim . error)
        (g$11324$RyrJs core-prim . eqv?)
        (g$11323$RyrJs core-prim . equal?)
        (g$11322$RyrJs core-prim . eq?)
        (g$11321$RyrJs core-prim . dynamic-wind)
        (g$5398$RyrJs core-prim . div0-and-mod0)
        (g$5396$RyrJs core-prim . mod0)
        (g$11320$RyrJs core-prim . div0)
        (g$5397$RyrJs core-prim . div-and-mod)
        (g$5395$RyrJs core-prim . mod)
        (g$11319$RyrJs core-prim . div)
        (g$11318$RyrJs core-prim . denominator)
        (g$11317$RyrJs core-prim . cos)
        (g$11316$RyrJs core-prim . cons)
        (g$11315$RyrJs core-prim . complex?)
        (g$5401$RyrJs core-prim . char?)
        (g$5468$RyrJs core-prim . char>?)
        (g$5470$RyrJs core-prim . char>=?)
        (g$5466$RyrJs core-prim . char=?)
        (g$5467$RyrJs core-prim . char<?)
        (g$5469$RyrJs core-prim . char<=?)
        (g$11314$RyrJs core-prim . char->integer)
        (g$11313$RyrJs core-prim . ceiling)
        (g$11312$RyrJs core-prim . call-with-values)
        (g$11311$RyrJs core-prim . call/cc)
        (g$11310$RyrJs core-prim . call-with-current-continuation)
        (g$5439$RyrJs core-prim . cddddr)
        (g$5438$RyrJs core-prim . cdddar)
        (g$5437$RyrJs core-prim . cddadr)
        (g$5436$RyrJs core-prim . cddaar)
        (g$5435$RyrJs core-prim . cdaddr)
        (g$5434$RyrJs core-prim . cdadar)
        (g$5433$RyrJs core-prim . cdaadr)
        (g$5432$RyrJs core-prim . cdaaar)
        (g$5431$RyrJs core-prim . cadddr)
        (g$5430$RyrJs core-prim . caddar)
        (g$5429$RyrJs core-prim . cadadr)
        (g$5428$RyrJs core-prim . cadaar)
        (g$5427$RyrJs core-prim . caaddr)
        (g$5426$RyrJs core-prim . caadar)
        (g$5425$RyrJs core-prim . caaadr)
        (g$5424$RyrJs core-prim . caaaar)
        (g$5423$RyrJs core-prim . cdddr)
        (g$5422$RyrJs core-prim . cddar)
        (g$5421$RyrJs core-prim . cdadr)
        (g$5420$RyrJs core-prim . cdaar)
        (g$5419$RyrJs core-prim . caddr)
        (g$5418$RyrJs core-prim . cadar)
        (g$5417$RyrJs core-prim . caadr)
        (g$5416$RyrJs core-prim . caaar)
        (g$5415$RyrJs core-prim . cddr)
        (g$5414$RyrJs core-prim . cdar)
        (g$5413$RyrJs core-prim . cadr)
        (g$5412$RyrJs core-prim . caar)
        (g$11309$RyrJs core-prim . cdr)
        (g$11308$RyrJs core-prim . car)
        (g$5405$RyrJs core-prim . boolean?)
        (g$5460$RyrJs core-prim . boolean=?)
        (g$11307$RyrJs core-prim . atan)
        (g$11306$RyrJs core-prim . assertion-violation)
        (g$11305$RyrJs core-prim . asin)
        (g$11304$RyrJs core-prim . apply)
        (g$11303$RyrJs core-prim . append)
        (g$11302$RyrJs core-prim . angle)
        (g$11301$RyrJs core-prim . acos)
        (g$11300$RyrJs core-prim . abs)
        (g$11299$RyrJs core-prim . /)
        (g$11298$RyrJs core-prim . *)
        (g$11297$RyrJs core-prim . -)
        (g$11296$RyrJs core-prim . +)
        (g$11295$RyrJs core-prim . >=)
        (g$11294$RyrJs core-prim . >)
        (g$11293$RyrJs core-prim . =)
        (g$11292$RyrJs core-prim . <=)
        (g$11291$RyrJs core-prim . <)
        (g$11290$RyrJs core-prim . make-record-printer)
        (g$11289$RyrJs core-prim . eqv-hash)
        (g$11288$RyrJs core-prim . reverse!)
        (g$11287$RyrJs core-prim . deserialize-port)
        (g$11286$RyrJs core-prim . serialize-port)
        (g$6625$RyrJs core-prim . enum-set?)
        (g$6238$RyrJs core-prim . make-promise)
        (g$11100$RyrJs core-prim . load/unload)
        (g$11099$RyrJs core-prim . load/args)
        (g$6734$RyrJs core-prim . printf)
        (g$6735$RyrJs core-prim . fprintf)
        (g$6736$RyrJs core-prim . format)
        (g$11285$RyrJs core-prim . procedure-form)
        (g$11284$RyrJs core-prim . procedure-environment)
        (g$11283$RyrJs core-prim . procedure-name)
        (g$11282$RyrJs core-prim . procedure-arity)
        (g$11281$RyrJs core-prim . gc-collect)
        (g$11280$RyrJs core-prim . typeof)
        (g$11279$RyrJs core-prim . clr-type?)
        (g$11278$RyrJs core-prim . get-clr-type)
        (g$11277$RyrJs core-prim . get-command-line)
        (g$11276$RyrJs core-prim . vector-append)
        (g$11275$RyrJs core-prim . vector-filter)
        (g$11274$RyrJs core-prim . vector-reverse!)
        (g$11273$RyrJs core-prim . vector-contains?)
        (g$11272$RyrJs core-prim . vector-index-of)
        (g$11271$RyrJs core-prim . vector-copy)
        (g$11270$RyrJs core-prim . vector-binary-search)
        (g$11269$RyrJs core-prim . string-ci-compare)
        (g$11268$RyrJs core-prim . string-compare)
        (g$11267$RyrJs core-prim . string-format)
        (g$11096$RyrJs core-prim . trace-printer)
        (g$11266$RyrJs core-prim . make-traced-procedure)
        (g$6756$RyrJs core-prim . make-traced-macro)
        (g$8074$RyrJs core-prim . assertion-error)
        (g$11265$RyrJs core-prim . time-it)
        (g$6763$RyrJs core-prim . make-parameter)
        (g$11264$RyrJs core-prim . library-locator)
        (g$11263$RyrJs core-prim . get-library-paths)
        (g$11262$RyrJs core-prim . open-tcp-input/output-port)
        (g$11261$RyrJs core-prim . hashtable-for-each)
        (g$11260$RyrJs core-prim . hashtable-map)
        (g$8052$RyrJs core-prim . environment-bindings)
        (g$8055$RyrJs core-prim . environment-symbols)
        (g$8051$RyrJs core-prim . interaction-environment-symbols)
        (g$11259$RyrJs core-prim . optimization-level)
        (g$7382$RyrJs core-prim . library-path)
        (g$7760$RyrJs core-prim . make-compile-time-value)
        (g$8061$RyrJs core-prim . expand->core)
        (g$8059$RyrJs core-prim . expand)
        (g$7998$RyrJs core-prim . syntax-transpose)
        (g$7079$RyrJs core-prim . convert->cps)
        (g$7403$RyrJs core-prim . installed-libraries)
        (g$7394$RyrJs core-prim . uninstall-library)
        (g$6838$RyrJs core-prim . pretty-width)
        (g$6840$RyrJs core-prim . pretty-print)
        (g$11258$RyrJs $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11257$RyrJs $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11256$RyrJs $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11255$RyrJs $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11254$RyrJs $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11253$RyrJs
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11252$RyrJs
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11251$RyrJs
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11250$RyrJs
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11249$RyrJs $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11248$RyrJs
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11247$RyrJs $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11246$RyrJs $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11245$RyrJs $core-rtd &i/o-rtd &i/o-rcd)
        (g$11244$RyrJs
          $core-rtd
          &non-continuable-rtd
          &non-continuable-rcd)
        (g$11243$RyrJs $core-rtd &undefined-rtd &undefined-rcd)
        (g$11242$RyrJs $core-rtd &syntax-rtd &syntax-rcd)
        (g$11241$RyrJs $core-rtd &lexical-rtd &lexical-rcd)
        (g$11240$RyrJs
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11239$RyrJs $core-rtd &who-rtd &who-rcd)
        (g$11238$RyrJs $core-rtd &irritants-rtd &irritants-rcd)
        (g$11237$RyrJs $core-rtd &assertion-rtd &assertion-rcd)
        (g$11236$RyrJs $core-rtd &violation-rtd &violation-rcd)
        (g$11235$RyrJs $core-rtd &error-rtd &error-rcd)
        (g$11234$RyrJs $core-rtd &serious-rtd &serious-rcd)
        (g$11233$RyrJs $core-rtd &warning-rtd &warning-rcd)
        (g$11232$RyrJs $core-rtd &message-rtd &message-rcd)
        (g$11231$RyrJs $core-rtd &condition-rtd &condition-rcd)
        (g$11230$RyrJs macro . define-condition-type)
        (g$11229$RyrJs macro . define-enumeration)
        (g$11228$RyrJs macro . define-record-type)
        (g$11227$RyrJs macro . parent-rtd)
        (g$11226$RyrJs macro . nongenerative)
        (g$11225$RyrJs macro . opaque)
        (g$11224$RyrJs macro . sealed)
        (g$11223$RyrJs macro . protocol)
        (g$11222$RyrJs macro . parent)
        (g$11221$RyrJs macro . immutable)
        (g$11220$RyrJs macro . mutable)
        (g$11219$RyrJs macro . fields)
        (g$11218$RyrJs macro . error-handling-mode)
        (g$11217$RyrJs macro . file-options)
        (g$11216$RyrJs macro . buffer-mode)
        (g$11215$RyrJs macro . eol-style)
        (g$11214$RyrJs macro . guard)
        (g$11213$RyrJs macro . trace-letrec-syntax)
        (g$11212$RyrJs macro . trace-let-syntax)
        (g$11211$RyrJs macro . trace-define-syntax)
        (g$11210$RyrJs macro . trace-define)
        (g$11209$RyrJs macro . trace-lambda)
        (g$11208$RyrJs macro . unsyntax-splicing)
        (g$11207$RyrJs macro . unsyntax)
        (g$11206$RyrJs macro . unquote-splicing)
        (g$11205$RyrJs macro . unquote)
        (g$11204$RyrJs macro . _)
        (g$11203$RyrJs macro . else)
        (g$11202$RyrJs macro . =>)
        (g$11201$RyrJs macro . ...)
        (g$11200$RyrJs macro . assert)
        (g$11199$RyrJs macro . endianness)
        (g$11198$RyrJs macro . delay)
        (g$11197$RyrJs macro . time)
        (g$11196$RyrJs macro . or)
        (g$11195$RyrJs macro . and)
        (g$11194$RyrJs macro . do)
        (g$11193$RyrJs macro . cond)
        (g$11192$RyrJs macro . let*)
        (g$11191$RyrJs macro . let)
        (g$11190$RyrJs macro . identifier-syntax)
        (g$11189$RyrJs macro . with-syntax)
        (g$11188$RyrJs macro . quasisyntax)
        (g$11187$RyrJs macro . quasiquote)
        (g$11186$RyrJs macro . syntax-rules)
        (g$11185$RyrJs macro . include-into)
        (g$11184$RyrJs macro . include)
        (g$11183$RyrJs macro . define-struct)
        (g$11182$RyrJs macro . let-values)
        (g$11181$RyrJs macro . let*-values)
        (g$11180$RyrJs core-macro . record-constructor-descriptor)
        (g$11179$RyrJs core-macro . record-type-descriptor)
        (g$11178$RyrJs core-macro . fluid-let-syntax)
        (g$11177$RyrJs macro . case)
        (g$11176$RyrJs macro . parameterize)
        (g$11175$RyrJs macro . unless)
        (g$11174$RyrJs macro . when)
        (g$11173$RyrJs core-macro . if)
        (g$11172$RyrJs core-macro . letrec*)
        (g$11171$RyrJs core-macro . letrec)
        (g$11170$RyrJs core-macro . type-descriptor)
        (g$11169$RyrJs core-macro . case-lambda)
        (g$11168$RyrJs core-macro . lambda)
        (g$11167$RyrJs core-macro . syntax)
        (g$11166$RyrJs core-macro . syntax-case)
        (g$11165$RyrJs core-macro . quote)
        (g$11164$RyrJs core-macro . foreign-call)
        (g$11163$RyrJs letrec-syntax)
        (g$11162$RyrJs let-syntax)
        (g$11161$RyrJs set!)
        (g$11160$RyrJs export)
        (g$11159$RyrJs import)
        (g$11158$RyrJs library)
        (g$11157$RyrJs begin)
        (g$11156$RyrJs module)
        (g$11155$RyrJs define-syntax)
        (g$11154$RyrJs define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9060$RyrJs
      'g$11662$RyrJs
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$11601$RyrJs)
        (eval-core . g$11600$RyrJs)
        (set-symbol-value! . g$11598$RyrJs)
        (symbol-value . g$11597$RyrJs)
        (gensym . g$11594$RyrJs)
        (void . g$11593$RyrJs))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$13398$RyrJs
     g$trace-printer$13463$RyrJs
     (g$make-parameter$8229$RyrJs g$pretty-print$8428$RyrJs))
   (g$command-line$13399$RyrJs
     g$command-line$13464$RyrJs
     (g$make-parameter$8229$RyrJs (get-command-line)))
   (g$local-library-path$13400$RyrJs
     g$local-library-path$13465$RyrJs
     (case-lambda
       ((g$filename$13414$RyrJs)
        (cons
          (g$get-directory-name$6576$RyrJs g$filename$13414$RyrJs)
          (g$library-path$9044$RyrJs)))))
   (g$load/args$13401$RyrJs
     g$load/args$13466$RyrJs
     (case-lambda
       ((g$filename$13415$RyrJs . g$args$13416$RyrJs)
        (begin
          (apply
            g$load-r6rs-top-level$13411$RyrJs
            g$filename$13415$RyrJs
            'load
            g$args$13416$RyrJs)
          (void)))))
   (g$load/unload$13402$RyrJs
     g$load/unload$13467$RyrJs
     (case-lambda
       ((g$filename$13417$RyrJs)
        ((case-lambda
           ((g$libs$13418$RyrJs)
            (begin
              (g$load$13403$RyrJs g$filename$13417$RyrJs)
              (g$for-each$5808$RyrJs
                (case-lambda
                  ((g$lib$13419$RyrJs)
                   (if (not (g$memq$5799$RyrJs
                              g$lib$13419$RyrJs
                              g$libs$13418$RyrJs))
                     (g$uninstall-library$9056$RyrJs g$lib$13419$RyrJs)
                     (void))))
                (g$installed-libraries$9065$RyrJs)))))
         (g$installed-libraries$9065$RyrJs)))))
   (g$load$13403$RyrJs
     g$load$13468$RyrJs
     (case-lambda
       ((g$filename$13420$RyrJs)
        (begin
          (apply
            g$load-r6rs-top-level$13411$RyrJs
            g$filename$13420$RyrJs
            'load
            (cdr (g$command-line$13399$RyrJs)))
          (void)))))
   (g$ironscheme-build$13404$RyrJs
     g$ironscheme-build$13469$RyrJs
     (case-lambda
       (() (g$ironscheme-build$13404$RyrJs '#f))
       ((g$cps?$13421$RyrJs)
        (begin
          (g$call-with-output-file$7889$RyrJs
            '"build-options.ss"
            (case-lambda
              ((g$p$13422$RyrJs)
               (begin
                 (write
                   (list 'define-option 'cps-mode g$cps?$13421$RyrJs)
                   g$p$13422$RyrJs)
                 (write
                   (list
                     'define-option
                     'if-wants-letrec*
                     (not g$cps?$13421$RyrJs))
                   g$p$13422$RyrJs)
                 (g$newline$7890$RyrJs g$p$13422$RyrJs)))))
          (g$load$13403$RyrJs '"ironscheme-buildscript.ss")))))
   (g$foreground-color$13405$RyrJs
     g$foreground-color$13470$RyrJs
     (case-lambda
       (() (clr-call-internal 'console 'get_foregroundcolor '()))
       ((g$color$13423$RyrJs)
        (clr-call-internal
          'console
          'set_foregroundcolor
          '()
          g$color$13423$RyrJs))))
   (g$system-exception?$13406$RyrJs
     g$system-exception?$13471$RyrJs
     (case-lambda
       ((g$e$13424$RyrJs)
        (clr-is-internal 'SystemException g$e$13424$RyrJs))))
   (g$eval-top-level$13407$RyrJs
     g$eval-top-level$13472$RyrJs
     (case-lambda
       ((g$x$13425$RyrJs)
        (call/cc
          (case-lambda
            ((g$k$13426$RyrJs)
             (with-exception-handler
               (case-lambda
                 ((g$e$13427$RyrJs)
                  ((case-lambda
                     ((g$serious?$13428$RyrJs)
                      (begin
                        ((case-lambda
                           ((g$foreground-color$13433$RyrJs
                              g$current-output-port$13434$RyrJs
                              g$foreground-color$13435$RyrJs
                              g$current-output-port$13436$RyrJs)
                            ((case-lambda
                               ((g$swap$13437$RyrJs)
                                (dynamic-wind
                                  g$swap$13437$RyrJs
                                  (case-lambda
                                    (()
                                     (begin
                                       (if g$serious?$13428$RyrJs
                                         (display
                                           '"Unhandled exception during evaluation:
")
                                         (void))
                                       (display g$e$13427$RyrJs)
                                       (g$newline$7890$RyrJs))))
                                  g$swap$13437$RyrJs)))
                             (case-lambda
                               (()
                                (begin
                                  ((case-lambda
                                     ((g$t$13438$RyrJs)
                                      (begin
                                        (g$foreground-color$13433$RyrJs
                                          g$foreground-color$13435$RyrJs)
                                        (set! g$foreground-color$13435$RyrJs
                                          g$t$13438$RyrJs))))
                                   (g$foreground-color$13433$RyrJs))
                                  ((case-lambda
                                     ((g$t$13439$RyrJs)
                                      (begin
                                        (g$current-output-port$13434$RyrJs
                                          g$current-output-port$13436$RyrJs)
                                        (set! g$current-output-port$13436$RyrJs
                                          g$t$13439$RyrJs))))
                                   (g$current-output-port$13434$RyrJs))))))))
                         g$foreground-color$13405$RyrJs
                         current-output-port
                         (if g$serious?$13428$RyrJs 'red 'yellow)
                         (current-error-port))
                        (if g$serious?$13428$RyrJs
                          (g$k$13426$RyrJs)
                          (void)))))
                   ((case-lambda
                      ((g$t$13440$RyrJs)
                       (if g$t$13440$RyrJs
                         g$t$13440$RyrJs
                         (begin
                           '#f
                           (g$system-exception?$13406$RyrJs
                             g$e$13427$RyrJs)))))
                    (g$serious-condition?$7125$RyrJs
                      g$e$13427$RyrJs)))))
               (case-lambda
                 (()
                  (g$eval$13371$RyrJs
                    g$x$13425$RyrJs
                    (g$interaction-environment$13396$RyrJs)))))))))))
   (g$compile-system-libraries$13408$RyrJs
     g$compile-system-libraries$13473$RyrJs
     (case-lambda
       (()
        (g$eval-top-level$13407$RyrJs
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$13409$RyrJs
     g$compile$13474$RyrJs
     (case-lambda
       ((g$filename$13441$RyrJs)
        (g$load-r6rs-top-level$13411$RyrJs
          g$filename$13441$RyrJs
          'compile))))
   (g$compile->closure$13410$RyrJs
     g$compile->closure$13475$RyrJs
     (case-lambda
       ((g$filename$13442$RyrJs)
        (g$load-r6rs-top-level$13411$RyrJs
          g$filename$13442$RyrJs
          'closure))))
   (g$load-r6rs-top-level$13411$RyrJs
     g$load-r6rs-top-level$13476$RyrJs
     (case-lambda
       ((g$filename$13443$RyrJs g$how$13444$RyrJs . g$args$13445$RyrJs)
        ((case-lambda
           ((g$library-path$13448$RyrJs g$library-path$13449$RyrJs)
            ((case-lambda
               ((g$swap$13450$RyrJs)
                (dynamic-wind
                  g$swap$13450$RyrJs
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$13451$RyrJs)
                         ((case-lambda
                            ((g$t$13452$RyrJs)
                             (if (eqv? g$t$13452$RyrJs 'closure)
                               (g$pre-compile-r6rs-top-level$13394$RyrJs
                                 g$x*$13451$RyrJs)
                               (if (eqv? g$t$13452$RyrJs 'load)
                                 ((case-lambda
                                    ((g$command-line$13455$RyrJs
                                       g$command-line$13456$RyrJs)
                                     ((case-lambda
                                        ((g$swap$13457$RyrJs)
                                         (dynamic-wind
                                           g$swap$13457$RyrJs
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$13393$RyrJs
                                                 g$x*$13451$RyrJs))))
                                           g$swap$13457$RyrJs)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$13458$RyrJs)
                                             (begin
                                               (g$command-line$13455$RyrJs
                                                 g$command-line$13456$RyrJs)
                                               (set! g$command-line$13456$RyrJs
                                                 g$t$13458$RyrJs))))
                                          (g$command-line$13455$RyrJs)))))))
                                  g$command-line$13399$RyrJs
                                  (cons
                                    g$filename$13443$RyrJs
                                    (g$map$5807$RyrJs
                                      (case-lambda
                                        ((g$x$13459$RyrJs)
                                         (g$format$8064$RyrJs
                                           '"~a"
                                           g$x$13459$RyrJs)))
                                      g$args$13445$RyrJs)))
                                 (if (eqv? g$t$13452$RyrJs 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$13393$RyrJs
                                       g$x*$13451$RyrJs)
                                     (g$serialize-all$9048$RyrJs
                                       serialize-library
                                       g$compile-core-expr$8796$RyrJs))
                                   (if '#f '#f (void)))))))
                          g$how$13444$RyrJs)))
                      (g$with-input-from-file$7886$RyrJs
                        g$filename$13443$RyrJs
                        (case-lambda
                          (()
                           ((letrec ((g$f$13460$RyrJs
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$13461$RyrJs)
                                              (if (eof-object?
                                                    g$x$13461$RyrJs)
                                                '()
                                                (cons
                                                  g$x$13461$RyrJs
                                                  (g$f$13460$RyrJs)))))
                                           (read-annotated))))))
                              g$f$13460$RyrJs))))))))
                  g$swap$13450$RyrJs)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$13462$RyrJs)
                    (begin
                      (g$library-path$13448$RyrJs
                        g$library-path$13449$RyrJs)
                      (set! g$library-path$13449$RyrJs
                        g$t$13462$RyrJs))))
                 (g$library-path$13448$RyrJs)))))))
         g$library-path$9044$RyrJs
         (g$local-library-path$13400$RyrJs g$filename$13443$RyrJs)))))
   (g$fo$13412$RyrJs
     g$fo$13477$RyrJs
     (g$make-enumeration$8026$RyrJs '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$9049$RyrJs
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$13413$RyrJs)
         (if (g$serious-condition?$7125$RyrJs g$ex$13413$RyrJs)
           (raise g$ex$13413$RyrJs)
           (begin (display g$ex$13413$RyrJs) (g$newline$7890$RyrJs))))))
    (set-symbol-value! 'load g$load$13403$RyrJs)
    (set-symbol-value! 'compile g$compile$13409$RyrJs)
    (set-symbol-value! 'compile->closure g$compile->closure$13410$RyrJs)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$13407$RyrJs)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$13362$RyrJs)
    (set-symbol-value! 'expanded2core g$expanded->core$8795$RyrJs)
    (set-symbol-value! 'trace-printer g$trace-printer$13398$RyrJs)
    (set-symbol-value! 'convert->cps g$convert->cps$8746$RyrJs)
    (set-symbol-value! 'assertion-violation assertion-violation)
    (set-symbol-value! 'raise raise)
    (g$file-options-constructor$8230$RyrJs
      (g$enum-set-constructor$8029$RyrJs g$fo$13412$RyrJs))
    (g$library-path$9044$RyrJs (get-library-paths))
    (g$library-extensions$9045$RyrJs
      (cons '".ironscheme.sls" (g$library-extensions$9045$RyrJs)))))

