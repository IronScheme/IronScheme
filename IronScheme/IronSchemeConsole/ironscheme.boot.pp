;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (psyntax config) () (void))

(library-letrec* (ironscheme lists)
  ((g$list-tail$5589$MT&Mo
     g$list-tail$5733$MT&Mo
     (case-lambda
       ((g$lst$5617$MT&Mo g$index$5618$MT&Mo)
        (if ((case-lambda
               ((g$t$5619$MT&Mo)
                (if g$t$5619$MT&Mo
                  g$t$5619$MT&Mo
                  (begin
                    '#f
                    (g$negative?$6439$MT&Mo g$index$5618$MT&Mo)))))
             (null? g$lst$5617$MT&Mo))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$5617$MT&Mo
            g$index$5618$MT&Mo)
          (if (g$zero?$6440$MT&Mo g$index$5618$MT&Mo)
            g$lst$5617$MT&Mo
            (g$list-tail$5589$MT&Mo
              (cdr g$lst$5617$MT&Mo)
              (- g$index$5618$MT&Mo '1)))))))
   (g$list-ref$5590$MT&Mo
     g$list-ref$5734$MT&Mo
     (case-lambda
       ((g$lst$5620$MT&Mo g$index$5621$MT&Mo)
        (car (g$list-tail$5589$MT&Mo
               g$lst$5620$MT&Mo
               g$index$5621$MT&Mo)))))
   (g$last-pair$5591$MT&Mo
     g$last-pair$5735$MT&Mo
     (case-lambda
       ((g$lst$5622$MT&Mo)
        (if (null? g$lst$5622$MT&Mo)
          g$lst$5622$MT&Mo
          (if (null? (cdr g$lst$5622$MT&Mo))
            g$lst$5622$MT&Mo
            (g$last-pair$5591$MT&Mo (cdr g$lst$5622$MT&Mo)))))))
   (g$make-list$5592$MT&Mo
     g$make-list$5736$MT&Mo
     (case-lambda
       ((g$n$5623$MT&Mo) (vector->list (make-vector g$n$5623$MT&Mo)))
       ((g$n$5624$MT&Mo g$fill$5625$MT&Mo)
        (vector->list (make-vector g$n$5624$MT&Mo g$fill$5625$MT&Mo)))))
   (g$find$5593$MT&Mo
     g$find$5737$MT&Mo
     (case-lambda
       ((g$proc$5626$MT&Mo g$l$5627$MT&Mo)
        (if (null? g$l$5627$MT&Mo)
          '#f
          ((case-lambda
             ((g$e$5628$MT&Mo g$r$5629$MT&Mo g$proc$5630$MT&Mo)
              (if (g$proc$5630$MT&Mo g$e$5628$MT&Mo)
                g$e$5628$MT&Mo
                (g$find$5593$MT&Mo g$proc$5630$MT&Mo g$r$5629$MT&Mo))))
           (car g$l$5627$MT&Mo)
           (cdr g$l$5627$MT&Mo)
           g$proc$5626$MT&Mo)))))
   (g$partition$5594$MT&Mo
     g$partition$5738$MT&Mo
     (case-lambda
       ((g$proc$5631$MT&Mo g$l$5632$MT&Mo)
        ((letrec ((g$f$5633$MT&Mo
                    (case-lambda
                      ((g$l$5634$MT&Mo g$a$5635$MT&Mo g$b$5636$MT&Mo)
                       (if (null? g$l$5634$MT&Mo)
                         (values
                           (reverse! g$a$5635$MT&Mo)
                           (reverse! g$b$5636$MT&Mo))
                         ((case-lambda
                            ((g$e$5637$MT&Mo)
                             (if (g$proc$5631$MT&Mo g$e$5637$MT&Mo)
                               (g$f$5633$MT&Mo
                                 (cdr g$l$5634$MT&Mo)
                                 (cons g$e$5637$MT&Mo g$a$5635$MT&Mo)
                                 g$b$5636$MT&Mo)
                               (g$f$5633$MT&Mo
                                 (cdr g$l$5634$MT&Mo)
                                 g$a$5635$MT&Mo
                                 (cons
                                   g$e$5637$MT&Mo
                                   g$b$5636$MT&Mo)))))
                          (car g$l$5634$MT&Mo)))))))
           g$f$5633$MT&Mo)
         g$l$5632$MT&Mo
         '()
         '()))))
   (g$remp$5595$MT&Mo
     g$remp$5739$MT&Mo
     (case-lambda
       ((g$proc$5638$MT&Mo g$l$5639$MT&Mo)
        ((letrec ((g$f$5640$MT&Mo
                    (case-lambda
                      ((g$l$5641$MT&Mo g$a$5642$MT&Mo)
                       (if (null? g$l$5641$MT&Mo)
                         (reverse! g$a$5642$MT&Mo)
                         ((case-lambda
                            ((g$e$5643$MT&Mo)
                             (if (g$proc$5638$MT&Mo g$e$5643$MT&Mo)
                               (g$f$5640$MT&Mo
                                 (cdr g$l$5641$MT&Mo)
                                 g$a$5642$MT&Mo)
                               (g$f$5640$MT&Mo
                                 (cdr g$l$5641$MT&Mo)
                                 (cons
                                   g$e$5643$MT&Mo
                                   g$a$5642$MT&Mo)))))
                          (car g$l$5641$MT&Mo)))))))
           g$f$5640$MT&Mo)
         g$l$5639$MT&Mo
         '()))))
   (g$filter$5596$MT&Mo
     g$filter$5740$MT&Mo
     (case-lambda
       ((g$proc$5644$MT&Mo g$l$5645$MT&Mo)
        ((letrec ((g$f$5646$MT&Mo
                    (case-lambda
                      ((g$l$5647$MT&Mo g$a$5648$MT&Mo)
                       (if (null? g$l$5647$MT&Mo)
                         (reverse! g$a$5648$MT&Mo)
                         ((case-lambda
                            ((g$e$5649$MT&Mo)
                             (if (g$proc$5644$MT&Mo g$e$5649$MT&Mo)
                               (g$f$5646$MT&Mo
                                 (cdr g$l$5647$MT&Mo)
                                 (cons g$e$5649$MT&Mo g$a$5648$MT&Mo))
                               (g$f$5646$MT&Mo
                                 (cdr g$l$5647$MT&Mo)
                                 g$a$5648$MT&Mo))))
                          (car g$l$5647$MT&Mo)))))))
           g$f$5646$MT&Mo)
         g$l$5645$MT&Mo
         '()))))
   (g$assq$5597$MT&Mo
     g$assq$5741$MT&Mo
     (case-lambda
       ((g$obj$5650$MT&Mo g$lst$5651$MT&Mo)
        (if (null? g$lst$5651$MT&Mo)
          '#f
          ((case-lambda
             ((g$obj$5652$MT&Mo g$t$5653$MT&Mo g$r$5654$MT&Mo)
              (if (eq? g$obj$5652$MT&Mo (car g$t$5653$MT&Mo))
                g$t$5653$MT&Mo
                (g$assq$5597$MT&Mo g$obj$5652$MT&Mo g$r$5654$MT&Mo))))
           g$obj$5650$MT&Mo
           (car g$lst$5651$MT&Mo)
           (cdr g$lst$5651$MT&Mo))))))
   (g$assv$5598$MT&Mo
     g$assv$5742$MT&Mo
     (case-lambda
       ((g$obj$5655$MT&Mo g$lst$5656$MT&Mo)
        (if (null? g$lst$5656$MT&Mo)
          '#f
          ((case-lambda
             ((g$obj$5657$MT&Mo g$t$5658$MT&Mo g$r$5659$MT&Mo)
              (if (eqv? g$obj$5657$MT&Mo (car g$t$5658$MT&Mo))
                g$t$5658$MT&Mo
                (g$assv$5598$MT&Mo g$obj$5657$MT&Mo g$r$5659$MT&Mo))))
           g$obj$5655$MT&Mo
           (car g$lst$5656$MT&Mo)
           (cdr g$lst$5656$MT&Mo))))))
   (g$assoc$5599$MT&Mo
     g$assoc$5743$MT&Mo
     (case-lambda
       ((g$obj$5660$MT&Mo g$lst$5661$MT&Mo)
        (if (null? g$lst$5661$MT&Mo)
          '#f
          ((case-lambda
             ((g$obj$5662$MT&Mo g$t$5663$MT&Mo g$r$5664$MT&Mo)
              (if (equal? g$obj$5662$MT&Mo (car g$t$5663$MT&Mo))
                g$t$5663$MT&Mo
                (g$assoc$5599$MT&Mo g$obj$5662$MT&Mo g$r$5664$MT&Mo))))
           g$obj$5660$MT&Mo
           (car g$lst$5661$MT&Mo)
           (cdr g$lst$5661$MT&Mo))))))
   (g$assp$5600$MT&Mo
     g$assp$5744$MT&Mo
     (case-lambda
       ((g$p?$5665$MT&Mo g$lst$5666$MT&Mo)
        (if (null? g$lst$5666$MT&Mo)
          '#f
          ((case-lambda
             ((g$p?$5667$MT&Mo g$t$5668$MT&Mo g$r$5669$MT&Mo)
              (if (g$p?$5667$MT&Mo (car g$t$5668$MT&Mo))
                g$t$5668$MT&Mo
                (g$assp$5600$MT&Mo g$p?$5667$MT&Mo g$r$5669$MT&Mo))))
           g$p?$5665$MT&Mo
           (car g$lst$5666$MT&Mo)
           (cdr g$lst$5666$MT&Mo))))))
   (g$memq$5601$MT&Mo
     g$memq$5745$MT&Mo
     (case-lambda
       ((g$obj$5670$MT&Mo g$lst$5671$MT&Mo)
        (if (null? g$lst$5671$MT&Mo)
          '#f
          (if (eq? g$obj$5670$MT&Mo (car g$lst$5671$MT&Mo))
            g$lst$5671$MT&Mo
            (g$memq$5601$MT&Mo
              g$obj$5670$MT&Mo
              (cdr g$lst$5671$MT&Mo)))))))
   (g$memv$5602$MT&Mo
     g$memv$5746$MT&Mo
     (case-lambda
       ((g$obj$5672$MT&Mo g$lst$5673$MT&Mo)
        (if (null? g$lst$5673$MT&Mo)
          '#f
          (if (eqv? g$obj$5672$MT&Mo (car g$lst$5673$MT&Mo))
            g$lst$5673$MT&Mo
            (g$memv$5602$MT&Mo
              g$obj$5672$MT&Mo
              (cdr g$lst$5673$MT&Mo)))))))
   (g$member$5603$MT&Mo
     g$member$5747$MT&Mo
     (case-lambda
       ((g$obj$5674$MT&Mo g$lst$5675$MT&Mo)
        (if (null? g$lst$5675$MT&Mo)
          '#f
          (if (equal? g$obj$5674$MT&Mo (car g$lst$5675$MT&Mo))
            g$lst$5675$MT&Mo
            (g$member$5603$MT&Mo
              g$obj$5674$MT&Mo
              (cdr g$lst$5675$MT&Mo)))))))
   (g$memp$5604$MT&Mo
     g$memp$5748$MT&Mo
     (case-lambda
       ((g$p?$5676$MT&Mo g$lst$5677$MT&Mo)
        (if (null? g$lst$5677$MT&Mo)
          '#f
          (if (g$p?$5676$MT&Mo (car g$lst$5677$MT&Mo))
            g$lst$5677$MT&Mo
            (g$memp$5604$MT&Mo
              g$p?$5676$MT&Mo
              (cdr g$lst$5677$MT&Mo)))))))
   (g$all-empty?$5605$MT&Mo
     g$all-empty?$5749$MT&Mo
     (case-lambda
       ((g$ls$5678$MT&Mo)
        ((case-lambda
           ((g$t$5679$MT&Mo)
            (if g$t$5679$MT&Mo
              g$t$5679$MT&Mo
              (begin
                '#f
                (if (null? (car g$ls$5678$MT&Mo))
                  (begin
                    '#f
                    (g$all-empty?$5605$MT&Mo (cdr g$ls$5678$MT&Mo)))
                  '#f)))))
         (null? g$ls$5678$MT&Mo)))))
   (g$split$5606$MT&Mo
     g$split$5750$MT&Mo
     (case-lambda
       ((g$ls$5680$MT&Mo)
        (if (null? g$ls$5680$MT&Mo)
          (values '() '())
          (call-with-values
            (case-lambda
              (() (g$split$5606$MT&Mo (cdr g$ls$5680$MT&Mo))))
            (case-lambda
              ((g$cars$5681$MT&Mo g$cdrs$5682$MT&Mo)
               ((case-lambda
                  ((g$a$5683$MT&Mo)
                   (values
                     (cons (car g$a$5683$MT&Mo) g$cars$5681$MT&Mo)
                     (cons (cdr g$a$5683$MT&Mo) g$cdrs$5682$MT&Mo))))
                (car g$ls$5680$MT&Mo)))))))))
   (g$for-all$5607$MT&Mo
     g$for-all$5751$MT&Mo
     (case-lambda
       ((g$f$5684$MT&Mo g$arg1$5685$MT&Mo . g$args$5686$MT&Mo)
        ((case-lambda
           ((g$args$5687$MT&Mo)
            (if (g$all-empty?$5605$MT&Mo g$args$5687$MT&Mo)
              '#t
              (call-with-values
                (case-lambda
                  (() (g$split$5606$MT&Mo g$args$5687$MT&Mo)))
                (case-lambda
                  ((g$cars$5688$MT&Mo g$cdrs$5689$MT&Mo)
                   (if (g$all-empty?$5605$MT&Mo g$cdrs$5689$MT&Mo)
                     (apply g$f$5684$MT&Mo g$cars$5688$MT&Mo)
                     (if (apply g$f$5684$MT&Mo g$cars$5688$MT&Mo)
                       (begin
                         '#f
                         (apply
                           g$for-all$5607$MT&Mo
                           g$f$5684$MT&Mo
                           g$cdrs$5689$MT&Mo))
                       '#f))))))))
         (cons g$arg1$5685$MT&Mo g$args$5686$MT&Mo)))))
   (g$exists$5608$MT&Mo
     g$exists$5752$MT&Mo
     (case-lambda
       ((g$f$5690$MT&Mo g$arg1$5691$MT&Mo . g$args$5692$MT&Mo)
        ((case-lambda
           ((g$args$5693$MT&Mo)
            (if (g$all-empty?$5605$MT&Mo g$args$5693$MT&Mo)
              '#f
              (call-with-values
                (case-lambda
                  (() (g$split$5606$MT&Mo g$args$5693$MT&Mo)))
                (case-lambda
                  ((g$cars$5694$MT&Mo g$cdrs$5695$MT&Mo)
                   ((case-lambda
                      ((g$t$5696$MT&Mo)
                       (if g$t$5696$MT&Mo
                         g$t$5696$MT&Mo
                         (begin
                           '#f
                           (apply
                             g$exists$5608$MT&Mo
                             g$f$5690$MT&Mo
                             g$cdrs$5695$MT&Mo)))))
                    (apply g$f$5690$MT&Mo g$cars$5694$MT&Mo))))))))
         (cons g$arg1$5691$MT&Mo g$args$5692$MT&Mo)))))
   (g$map$5609$MT&Mo
     g$map$5753$MT&Mo
     (case-lambda
       ((g$proc$5697$MT&Mo g$list1$5698$MT&Mo . g$lists$5699$MT&Mo)
        ((letrec ((g$f$5700$MT&Mo
                    (case-lambda
                      ((g$lists$5701$MT&Mo g$a$5702$MT&Mo)
                       (if (g$all-empty?$5605$MT&Mo g$lists$5701$MT&Mo)
                         (reverse! g$a$5702$MT&Mo)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$split$5606$MT&Mo g$lists$5701$MT&Mo)))
                           (case-lambda
                             ((g$cars$5703$MT&Mo g$cdrs$5704$MT&Mo)
                              (g$f$5700$MT&Mo
                                g$cdrs$5704$MT&Mo
                                (cons
                                  (apply
                                    g$proc$5697$MT&Mo
                                    g$cars$5703$MT&Mo)
                                  g$a$5702$MT&Mo))))))))))
           g$f$5700$MT&Mo)
         (cons g$list1$5698$MT&Mo g$lists$5699$MT&Mo)
         '()))))
   (g$for-each$5610$MT&Mo
     g$for-each$5754$MT&Mo
     (case-lambda
       ((g$f$5705$MT&Mo g$arg1$5706$MT&Mo . g$args$5707$MT&Mo)
        ((case-lambda
           ((g$args$5708$MT&Mo)
            (if (not (g$all-empty?$5605$MT&Mo g$args$5708$MT&Mo))
              (call-with-values
                (case-lambda
                  (() (g$split$5606$MT&Mo g$args$5708$MT&Mo)))
                (case-lambda
                  ((g$cars$5709$MT&Mo g$cdrs$5710$MT&Mo)
                   (begin
                     (apply g$f$5705$MT&Mo g$cars$5709$MT&Mo)
                     (apply
                       g$for-each$5610$MT&Mo
                       g$f$5705$MT&Mo
                       g$cdrs$5710$MT&Mo)))))
              (void))))
         (cons g$arg1$5706$MT&Mo g$args$5707$MT&Mo)))))
   (g$cons*$5611$MT&Mo
     g$cons*$5755$MT&Mo
     (case-lambda
       ((g$a$5711$MT&Mo . g$rest$5712$MT&Mo)
        ((letrec ((g$f$5713$MT&Mo
                    (case-lambda
                      ((g$a$5714$MT&Mo g$rest$5715$MT&Mo)
                       (if (null? g$rest$5715$MT&Mo)
                         g$a$5714$MT&Mo
                         (cons
                           g$a$5714$MT&Mo
                           (g$f$5713$MT&Mo
                             (car g$rest$5715$MT&Mo)
                             (cdr g$rest$5715$MT&Mo))))))))
           g$f$5713$MT&Mo)
         g$a$5711$MT&Mo
         g$rest$5712$MT&Mo))))
   (g$fold-left$5612$MT&Mo
     g$fold-left$5756$MT&Mo
     (case-lambda
       ((g$combine$5716$MT&Mo
          g$nil$5717$MT&Mo
          g$list1$5718$MT&Mo
          .
          g$lists$5719$MT&Mo)
        (if (null? g$list1$5718$MT&Mo)
          g$nil$5717$MT&Mo
          (apply
            g$fold-left$5612$MT&Mo
            (g$cons*$5611$MT&Mo
              g$combine$5716$MT&Mo
              (apply
                g$combine$5716$MT&Mo
                (g$cons*$5611$MT&Mo
                  g$nil$5717$MT&Mo
                  (car g$list1$5718$MT&Mo)
                  (g$map$5609$MT&Mo car g$lists$5719$MT&Mo)))
              (cdr g$list1$5718$MT&Mo)
              (g$map$5609$MT&Mo cdr g$lists$5719$MT&Mo)))))))
   (g$fold-right$5613$MT&Mo
     g$fold-right$5757$MT&Mo
     (case-lambda
       ((g$combine$5720$MT&Mo
          g$nil$5721$MT&Mo
          g$list1$5722$MT&Mo
          .
          g$lists$5723$MT&Mo)
        (if (null? g$list1$5722$MT&Mo)
          g$nil$5721$MT&Mo
          (apply
            g$combine$5720$MT&Mo
            (append
              (list (car g$list1$5722$MT&Mo))
              (g$map$5609$MT&Mo car g$lists$5723$MT&Mo)
              (list
                (apply
                  g$fold-right$5613$MT&Mo
                  (g$cons*$5611$MT&Mo
                    g$combine$5720$MT&Mo
                    g$nil$5721$MT&Mo
                    (cdr g$list1$5722$MT&Mo)
                    (g$map$5609$MT&Mo cdr g$lists$5723$MT&Mo))))))))))
   (g$remove$5614$MT&Mo
     g$remove$5758$MT&Mo
     (case-lambda
       ((g$obj$5724$MT&Mo g$list$5725$MT&Mo)
        (g$remp$5595$MT&Mo
          (case-lambda
            ((g$x$5726$MT&Mo) (equal? g$obj$5724$MT&Mo g$x$5726$MT&Mo)))
          g$list$5725$MT&Mo))))
   (g$remv$5615$MT&Mo
     g$remv$5759$MT&Mo
     (case-lambda
       ((g$obj$5727$MT&Mo g$list$5728$MT&Mo)
        (g$remp$5595$MT&Mo
          (case-lambda
            ((g$x$5729$MT&Mo) (eqv? g$obj$5727$MT&Mo g$x$5729$MT&Mo)))
          g$list$5728$MT&Mo))))
   (g$remq$5616$MT&Mo
     g$remq$5760$MT&Mo
     (case-lambda
       ((g$obj$5730$MT&Mo g$list$5731$MT&Mo)
        (g$remp$5595$MT&Mo
          (case-lambda
            ((g$x$5732$MT&Mo) (eq? g$obj$5730$MT&Mo g$x$5732$MT&Mo)))
          g$list$5731$MT&Mo)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$mod$6069$MT&Mo
     g$mod$6393$MT&Mo
     (case-lambda
       ((g$x1$6215$MT&Mo g$x2$6216$MT&Mo)
        (- g$x1$6215$MT&Mo
           (* (div g$x1$6215$MT&Mo g$x2$6216$MT&Mo) g$x2$6216$MT&Mo)))))
   (g$mod0$6070$MT&Mo
     g$mod0$6394$MT&Mo
     (case-lambda
       ((g$x1$6217$MT&Mo g$x2$6218$MT&Mo)
        (- g$x1$6217$MT&Mo
           (* (div0 g$x1$6217$MT&Mo g$x2$6218$MT&Mo)
              g$x2$6218$MT&Mo)))))
   (g$div-and-mod$6071$MT&Mo
     g$div-and-mod$6395$MT&Mo
     (case-lambda
       ((g$x1$6219$MT&Mo g$x2$6220$MT&Mo)
        ((case-lambda
           ((g$d$6221$MT&Mo)
            (values
              g$d$6221$MT&Mo
              (- g$x1$6219$MT&Mo (* g$d$6221$MT&Mo g$x2$6220$MT&Mo)))))
         (div g$x1$6219$MT&Mo g$x2$6220$MT&Mo)))))
   (g$div0-and-mod0$6072$MT&Mo
     g$div0-and-mod0$6396$MT&Mo
     (case-lambda
       ((g$x1$6222$MT&Mo g$x2$6223$MT&Mo)
        ((case-lambda
           ((g$d$6224$MT&Mo)
            (values
              g$d$6224$MT&Mo
              (- g$x1$6222$MT&Mo (* g$d$6224$MT&Mo g$x2$6223$MT&Mo)))))
         (div0 g$x1$6222$MT&Mo g$x2$6223$MT&Mo)))))
   (g$list->vector$6073$MT&Mo
     g$list->vector$6397$MT&Mo
     (case-lambda ((g$lst$6225$MT&Mo) (apply vector g$lst$6225$MT&Mo))))
   (g$list->string$6074$MT&Mo
     g$list->string$6398$MT&Mo
     (case-lambda ((g$lst$6226$MT&Mo) (apply string g$lst$6226$MT&Mo))))
   (g$char?$6075$MT&Mo
     g$char?$6399$MT&Mo
     (case-lambda
       ((g$obj$6227$MT&Mo)
        (clr-is-internal 'system.char g$obj$6227$MT&Mo))))
   (g$vector?$6076$MT&Mo
     g$vector?$6400$MT&Mo
     (case-lambda
       ((g$obj$6228$MT&Mo)
        (clr-is-internal 'system.object[] g$obj$6228$MT&Mo))))
   (g$bytevector?$6077$MT&Mo
     g$bytevector?$6401$MT&Mo
     (case-lambda
       ((g$obj$6229$MT&Mo)
        (clr-is-internal 'system.byte[] g$obj$6229$MT&Mo))))
   (g$symbol?$6078$MT&Mo
     g$symbol?$6402$MT&Mo
     (case-lambda
       ((g$obj$6230$MT&Mo)
        (clr-is-internal
          'microsoft.scripting.symbolid
          g$obj$6230$MT&Mo))))
   (g$boolean?$6079$MT&Mo
     g$boolean?$6403$MT&Mo
     (case-lambda
       ((g$obj$6231$MT&Mo)
        (clr-is-internal 'system.boolean g$obj$6231$MT&Mo))))
   (g$procedure?$6080$MT&Mo
     g$procedure?$6404$MT&Mo
     (case-lambda
       ((g$obj$6232$MT&Mo)
        (clr-is-internal
          'ironscheme.runtime.icallable
          g$obj$6232$MT&Mo))))
   (g$fixnum?$6081$MT&Mo
     g$fixnum?$6405$MT&Mo
     (case-lambda
       ((g$obj$6233$MT&Mo)
        (clr-is-internal 'system.int32 g$obj$6233$MT&Mo))))
   (g$flonum?$6082$MT&Mo
     g$flonum?$6406$MT&Mo
     (case-lambda
       ((g$obj$6234$MT&Mo)
        (clr-is-internal 'system.double g$obj$6234$MT&Mo))))
   (g$fixnum-width$6083$MT&Mo
     g$fixnum-width$6407$MT&Mo
     (case-lambda (() '32)))
   (g$vector-fill!$6084$MT&Mo
     g$vector-fill!$6408$MT&Mo
     (case-lambda
       ((g$vec$6235$MT&Mo g$val$6236$MT&Mo)
        ((case-lambda
           ((g$len$6237$MT&Mo)
            (letrec ((g$loop$6238$MT&Mo
                       (case-lambda
                         ((g$i$6239$MT&Mo)
                          (if (fx=? g$i$6239$MT&Mo g$len$6237$MT&Mo)
                            (if '#f '#f (void))
                            (begin
                              (vector-set!
                                g$vec$6235$MT&Mo
                                g$i$6239$MT&Mo
                                g$val$6236$MT&Mo)
                              (g$loop$6238$MT&Mo
                                (fx+ g$i$6239$MT&Mo '1))))))))
              (g$loop$6238$MT&Mo '0))))
         (vector-length g$vec$6235$MT&Mo)))))
   (g$reverse$6085$MT&Mo
     g$reverse$6409$MT&Mo
     (case-lambda
       ((g$lst$6240$MT&Mo)
        (g$fold-left$5756$MT&Mo
          (case-lambda
            ((g$x$6241$MT&Mo g$y$6242$MT&Mo)
             (cons g$y$6242$MT&Mo g$x$6241$MT&Mo)))
          '()
          g$lst$6240$MT&Mo))))
   (g$caar$6086$MT&Mo
     g$caar$6410$MT&Mo
     (case-lambda ((g$x$6243$MT&Mo) (car (car g$x$6243$MT&Mo)))))
   (g$cadr$6087$MT&Mo
     g$cadr$6411$MT&Mo
     (case-lambda ((g$x$6244$MT&Mo) (car (cdr g$x$6244$MT&Mo)))))
   (g$cdar$6088$MT&Mo
     g$cdar$6412$MT&Mo
     (case-lambda ((g$x$6245$MT&Mo) (cdr (car g$x$6245$MT&Mo)))))
   (g$cddr$6089$MT&Mo
     g$cddr$6413$MT&Mo
     (case-lambda ((g$x$6246$MT&Mo) (cdr (cdr g$x$6246$MT&Mo)))))
   (g$caaar$6090$MT&Mo
     g$caaar$6414$MT&Mo
     (case-lambda
       ((g$x$6247$MT&Mo) (g$caar$6086$MT&Mo (car g$x$6247$MT&Mo)))))
   (g$caadr$6091$MT&Mo
     g$caadr$6415$MT&Mo
     (case-lambda
       ((g$x$6248$MT&Mo) (g$caar$6086$MT&Mo (cdr g$x$6248$MT&Mo)))))
   (g$cadar$6092$MT&Mo
     g$cadar$6416$MT&Mo
     (case-lambda
       ((g$x$6249$MT&Mo) (g$cadr$6087$MT&Mo (car g$x$6249$MT&Mo)))))
   (g$caddr$6093$MT&Mo
     g$caddr$6417$MT&Mo
     (case-lambda
       ((g$x$6250$MT&Mo) (g$cadr$6087$MT&Mo (cdr g$x$6250$MT&Mo)))))
   (g$cdaar$6094$MT&Mo
     g$cdaar$6418$MT&Mo
     (case-lambda
       ((g$x$6251$MT&Mo) (g$cdar$6088$MT&Mo (car g$x$6251$MT&Mo)))))
   (g$cdadr$6095$MT&Mo
     g$cdadr$6419$MT&Mo
     (case-lambda
       ((g$x$6252$MT&Mo) (g$cdar$6088$MT&Mo (cdr g$x$6252$MT&Mo)))))
   (g$cddar$6096$MT&Mo
     g$cddar$6420$MT&Mo
     (case-lambda
       ((g$x$6253$MT&Mo) (g$cddr$6089$MT&Mo (car g$x$6253$MT&Mo)))))
   (g$cdddr$6097$MT&Mo
     g$cdddr$6421$MT&Mo
     (case-lambda
       ((g$x$6254$MT&Mo) (g$cddr$6089$MT&Mo (cdr g$x$6254$MT&Mo)))))
   (g$caaaar$6098$MT&Mo
     g$caaaar$6422$MT&Mo
     (case-lambda
       ((g$x$6255$MT&Mo) (g$caaar$6090$MT&Mo (car g$x$6255$MT&Mo)))))
   (g$caaadr$6099$MT&Mo
     g$caaadr$6423$MT&Mo
     (case-lambda
       ((g$x$6256$MT&Mo) (g$caaar$6090$MT&Mo (cdr g$x$6256$MT&Mo)))))
   (g$caadar$6100$MT&Mo
     g$caadar$6424$MT&Mo
     (case-lambda
       ((g$x$6257$MT&Mo) (g$caadr$6091$MT&Mo (car g$x$6257$MT&Mo)))))
   (g$caaddr$6101$MT&Mo
     g$caaddr$6425$MT&Mo
     (case-lambda
       ((g$x$6258$MT&Mo) (g$caadr$6091$MT&Mo (cdr g$x$6258$MT&Mo)))))
   (g$cadaar$6102$MT&Mo
     g$cadaar$6426$MT&Mo
     (case-lambda
       ((g$x$6259$MT&Mo) (g$cadar$6092$MT&Mo (car g$x$6259$MT&Mo)))))
   (g$cadadr$6103$MT&Mo
     g$cadadr$6427$MT&Mo
     (case-lambda
       ((g$x$6260$MT&Mo) (g$cadar$6092$MT&Mo (cdr g$x$6260$MT&Mo)))))
   (g$caddar$6104$MT&Mo
     g$caddar$6428$MT&Mo
     (case-lambda
       ((g$x$6261$MT&Mo) (g$caddr$6093$MT&Mo (car g$x$6261$MT&Mo)))))
   (g$cadddr$6105$MT&Mo
     g$cadddr$6429$MT&Mo
     (case-lambda
       ((g$x$6262$MT&Mo) (g$caddr$6093$MT&Mo (cdr g$x$6262$MT&Mo)))))
   (g$cdaaar$6106$MT&Mo
     g$cdaaar$6430$MT&Mo
     (case-lambda
       ((g$x$6263$MT&Mo) (g$cdaar$6094$MT&Mo (car g$x$6263$MT&Mo)))))
   (g$cdaadr$6107$MT&Mo
     g$cdaadr$6431$MT&Mo
     (case-lambda
       ((g$x$6264$MT&Mo) (g$cdaar$6094$MT&Mo (cdr g$x$6264$MT&Mo)))))
   (g$cdadar$6108$MT&Mo
     g$cdadar$6432$MT&Mo
     (case-lambda
       ((g$x$6265$MT&Mo) (g$cdadr$6095$MT&Mo (car g$x$6265$MT&Mo)))))
   (g$cdaddr$6109$MT&Mo
     g$cdaddr$6433$MT&Mo
     (case-lambda
       ((g$x$6266$MT&Mo) (g$cdadr$6095$MT&Mo (cdr g$x$6266$MT&Mo)))))
   (g$cddaar$6110$MT&Mo
     g$cddaar$6434$MT&Mo
     (case-lambda
       ((g$x$6267$MT&Mo) (g$cddar$6096$MT&Mo (car g$x$6267$MT&Mo)))))
   (g$cddadr$6111$MT&Mo
     g$cddadr$6435$MT&Mo
     (case-lambda
       ((g$x$6268$MT&Mo) (g$cddar$6096$MT&Mo (cdr g$x$6268$MT&Mo)))))
   (g$cdddar$6112$MT&Mo
     g$cdddar$6436$MT&Mo
     (case-lambda
       ((g$x$6269$MT&Mo) (g$cdddr$6097$MT&Mo (car g$x$6269$MT&Mo)))))
   (g$cddddr$6113$MT&Mo
     g$cddddr$6437$MT&Mo
     (case-lambda
       ((g$x$6270$MT&Mo) (g$cdddr$6097$MT&Mo (cdr g$x$6270$MT&Mo)))))
   (g$positive?$6114$MT&Mo
     g$positive?$6438$MT&Mo
     (case-lambda
       ((g$r$6271$MT&Mo)
        (begin
          (if (not (real-valued? g$r$6271$MT&Mo))
            (assertion-violation
              'positive?
              '"not a real"
              g$r$6271$MT&Mo)
            (void))
          (< '0 g$r$6271$MT&Mo)))))
   (g$negative?$6115$MT&Mo
     g$negative?$6439$MT&Mo
     (case-lambda
       ((g$r$6272$MT&Mo)
        (begin
          (if (not (real-valued? g$r$6272$MT&Mo))
            (assertion-violation
              'negative?
              '"not a real"
              g$r$6272$MT&Mo)
            (void))
          (> '0 g$r$6272$MT&Mo)))))
   (g$zero?$6116$MT&Mo
     g$zero?$6440$MT&Mo
     (case-lambda
       ((g$z$6273$MT&Mo)
        (begin
          (if (not (number? g$z$6273$MT&Mo))
            (assertion-violation 'zero? '"not a number" g$z$6273$MT&Mo)
            (void))
          (= '0 g$z$6273$MT&Mo)))))
   (g$even?$6117$MT&Mo
     g$even?$6441$MT&Mo
     (case-lambda
       ((g$n$6274$MT&Mo)
        (begin
          (if (not (integer-valued? g$n$6274$MT&Mo))
            (assertion-violation 'even? '"not a integer" g$n$6274$MT&Mo)
            (void))
          (= '0 (g$mod$6069$MT&Mo g$n$6274$MT&Mo '2))))))
   (g$odd?$6118$MT&Mo
     g$odd?$6442$MT&Mo
     (case-lambda
       ((g$n$6275$MT&Mo)
        (begin
          (if (not (integer-valued? g$n$6275$MT&Mo))
            (assertion-violation 'odd? '"not a integer" g$n$6275$MT&Mo)
            (void))
          (= '1 (g$mod$6069$MT&Mo g$n$6275$MT&Mo '2))))))
   (g$max$6119$MT&Mo
     g$max$6443$MT&Mo
     (case-lambda
       ((g$a$6276$MT&Mo . g$rest$6277$MT&Mo)
        (begin
          (if (not (real-valued? g$a$6276$MT&Mo))
            (assertion-violation 'max '"not a real" g$a$6276$MT&Mo)
            (void))
          (g$fold-left$5756$MT&Mo
            (case-lambda
              ((g$a$6278$MT&Mo g$b$6279$MT&Mo)
               ((case-lambda
                  ((g$r$6280$MT&Mo)
                   (if ((case-lambda
                          ((g$t$6281$MT&Mo)
                           (if g$t$6281$MT&Mo
                             g$t$6281$MT&Mo
                             (begin '#f (inexact? g$b$6279$MT&Mo)))))
                        (inexact? g$a$6278$MT&Mo))
                     (inexact g$r$6280$MT&Mo)
                     g$r$6280$MT&Mo)))
                (if (< g$a$6278$MT&Mo g$b$6279$MT&Mo)
                  g$b$6279$MT&Mo
                  g$a$6278$MT&Mo))))
            g$a$6276$MT&Mo
            g$rest$6277$MT&Mo)))))
   (g$min$6120$MT&Mo
     g$min$6444$MT&Mo
     (case-lambda
       ((g$a$6282$MT&Mo . g$rest$6283$MT&Mo)
        (begin
          (if (not (real-valued? g$a$6282$MT&Mo))
            (assertion-violation 'min '"not a real" g$a$6282$MT&Mo)
            (void))
          (g$fold-left$5756$MT&Mo
            (case-lambda
              ((g$a$6284$MT&Mo g$b$6285$MT&Mo)
               ((case-lambda
                  ((g$r$6286$MT&Mo)
                   (if ((case-lambda
                          ((g$t$6287$MT&Mo)
                           (if g$t$6287$MT&Mo
                             g$t$6287$MT&Mo
                             (begin '#f (inexact? g$b$6285$MT&Mo)))))
                        (inexact? g$a$6284$MT&Mo))
                     (inexact g$r$6286$MT&Mo)
                     g$r$6286$MT&Mo)))
                (if (> g$a$6284$MT&Mo g$b$6285$MT&Mo)
                  g$b$6285$MT&Mo
                  g$a$6284$MT&Mo))))
            g$a$6282$MT&Mo
            g$rest$6283$MT&Mo)))))
   (g$gcd$6121$MT&Mo
     g$gcd$6445$MT&Mo
     (case-lambda
       (g$nums$6288$MT&Mo
        ((case-lambda
           ((g$t$6289$MT&Mo)
            (if (eqv? g$t$6289$MT&Mo '0)
              '0
              (if (eqv? g$t$6289$MT&Mo '1)
                ((case-lambda
                   ((g$n$6290$MT&Mo)
                    (begin
                      (if (not (integer-valued? g$n$6290$MT&Mo))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$6290$MT&Mo)
                        (void))
                      (abs g$n$6290$MT&Mo))))
                 (car g$nums$6288$MT&Mo))
                (if (eqv? g$t$6289$MT&Mo '2)
                  ((case-lambda
                     ((g$a$6291$MT&Mo g$b$6292$MT&Mo)
                      (begin
                        (if (not (integer-valued? g$a$6291$MT&Mo))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$6291$MT&Mo)
                          (void))
                        (if (not (integer-valued? g$b$6292$MT&Mo))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$6292$MT&Mo)
                          (void))
                        (if (g$zero?$6116$MT&Mo g$b$6292$MT&Mo)
                          (abs g$a$6291$MT&Mo)
                          (abs (g$gcd$6121$MT&Mo
                                 g$b$6292$MT&Mo
                                 (g$mod$6069$MT&Mo
                                   g$a$6291$MT&Mo
                                   g$b$6292$MT&Mo)))))))
                   (car g$nums$6288$MT&Mo)
                   (g$cadr$6087$MT&Mo g$nums$6288$MT&Mo))
                  (g$fold-left$5756$MT&Mo
                    g$gcd$6121$MT&Mo
                    (abs (car g$nums$6288$MT&Mo))
                    (cdr g$nums$6288$MT&Mo)))))))
         (length g$nums$6288$MT&Mo)))))
   (g$lcm$6122$MT&Mo
     g$lcm$6446$MT&Mo
     (case-lambda
       (g$nums$6293$MT&Mo
        ((case-lambda
           ((g$t$6294$MT&Mo)
            (if (eqv? g$t$6294$MT&Mo '0)
              '1
              (if (eqv? g$t$6294$MT&Mo '1)
                ((case-lambda
                   ((g$n$6295$MT&Mo)
                    (begin
                      (if (not (integer-valued? g$n$6295$MT&Mo))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$6295$MT&Mo)
                        (void))
                      (abs g$n$6295$MT&Mo))))
                 (car g$nums$6293$MT&Mo))
                (if (eqv? g$t$6294$MT&Mo '2)
                  ((case-lambda
                     ((g$a$6296$MT&Mo g$b$6297$MT&Mo)
                      (begin
                        (if (not (integer-valued? g$a$6296$MT&Mo))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$6296$MT&Mo)
                          (void))
                        (if (not (integer-valued? g$b$6297$MT&Mo))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$6297$MT&Mo)
                          (void))
                        (if ((case-lambda
                               ((g$t$6298$MT&Mo)
                                (if g$t$6298$MT&Mo
                                  g$t$6298$MT&Mo
                                  (begin
                                    '#f
                                    (g$zero?$6116$MT&Mo
                                      g$b$6297$MT&Mo)))))
                             (g$zero?$6116$MT&Mo g$a$6296$MT&Mo))
                          '0
                          (abs (* (/ g$a$6296$MT&Mo
                                     (g$gcd$6121$MT&Mo
                                       g$a$6296$MT&Mo
                                       g$b$6297$MT&Mo))
                                  g$b$6297$MT&Mo))))))
                   (car g$nums$6293$MT&Mo)
                   (g$cadr$6087$MT&Mo g$nums$6293$MT&Mo))
                  (g$fold-left$5756$MT&Mo
                    g$lcm$6122$MT&Mo
                    (abs (car g$nums$6293$MT&Mo))
                    (cdr g$nums$6293$MT&Mo)))))))
         (length g$nums$6293$MT&Mo)))))
   (g$string=?$6160$MT&Mo
     g$string=?$6447$MT&Mo
     (case-lambda
       ((g$a$6299$MT&Mo g$b$6300$MT&Mo . g$rest$6301$MT&Mo)
        (begin
          (if (not (string? g$a$6299$MT&Mo))
            (assertion-violation
              'string=?
              '"not a string"
              g$a$6299$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6302$MT&Mo)
               (begin
                 (if (not (string? g$x$6302$MT&Mo))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$6302$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6303$MT&Mo)
                     (begin
                       (set! g$a$6299$MT&Mo g$x$6302$MT&Mo)
                       g$r$6303$MT&Mo)))
                  (fx=?
                    (string-compare g$a$6299$MT&Mo g$x$6302$MT&Mo)
                    '0)))))
            (cons g$b$6300$MT&Mo g$rest$6301$MT&Mo))))))
   (g$string<?$6161$MT&Mo
     g$string<?$6448$MT&Mo
     (case-lambda
       ((g$a$6304$MT&Mo g$b$6305$MT&Mo . g$rest$6306$MT&Mo)
        (begin
          (if (not (string? g$a$6304$MT&Mo))
            (assertion-violation
              'string<?
              '"not a string"
              g$a$6304$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6307$MT&Mo)
               (begin
                 (if (not (string? g$x$6307$MT&Mo))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$6307$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6308$MT&Mo)
                     (begin
                       (set! g$a$6304$MT&Mo g$x$6307$MT&Mo)
                       g$r$6308$MT&Mo)))
                  (fx<?
                    (string-compare g$a$6304$MT&Mo g$x$6307$MT&Mo)
                    '0)))))
            (cons g$b$6305$MT&Mo g$rest$6306$MT&Mo))))))
   (g$string>?$6162$MT&Mo
     g$string>?$6449$MT&Mo
     (case-lambda
       ((g$a$6309$MT&Mo g$b$6310$MT&Mo . g$rest$6311$MT&Mo)
        (begin
          (if (not (string? g$a$6309$MT&Mo))
            (assertion-violation
              'string>?
              '"not a string"
              g$a$6309$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6312$MT&Mo)
               (begin
                 (if (not (string? g$x$6312$MT&Mo))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$6312$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6313$MT&Mo)
                     (begin
                       (set! g$a$6309$MT&Mo g$x$6312$MT&Mo)
                       g$r$6313$MT&Mo)))
                  (fx>?
                    (string-compare g$a$6309$MT&Mo g$x$6312$MT&Mo)
                    '0)))))
            (cons g$b$6310$MT&Mo g$rest$6311$MT&Mo))))))
   (g$string<=?$6163$MT&Mo
     g$string<=?$6450$MT&Mo
     (case-lambda
       ((g$a$6314$MT&Mo g$b$6315$MT&Mo . g$rest$6316$MT&Mo)
        (begin
          (if (not (string? g$a$6314$MT&Mo))
            (assertion-violation
              'string<=?
              '"not a string"
              g$a$6314$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6317$MT&Mo)
               (begin
                 (if (not (string? g$x$6317$MT&Mo))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$6317$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6318$MT&Mo)
                     (begin
                       (set! g$a$6314$MT&Mo g$x$6317$MT&Mo)
                       g$r$6318$MT&Mo)))
                  (fx<=?
                    (string-compare g$a$6314$MT&Mo g$x$6317$MT&Mo)
                    '0)))))
            (cons g$b$6315$MT&Mo g$rest$6316$MT&Mo))))))
   (g$string>=?$6164$MT&Mo
     g$string>=?$6451$MT&Mo
     (case-lambda
       ((g$a$6319$MT&Mo g$b$6320$MT&Mo . g$rest$6321$MT&Mo)
        (begin
          (if (not (string? g$a$6319$MT&Mo))
            (assertion-violation
              'string>=?
              '"not a string"
              g$a$6319$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6322$MT&Mo)
               (begin
                 (if (not (string? g$x$6322$MT&Mo))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$6322$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6323$MT&Mo)
                     (begin
                       (set! g$a$6319$MT&Mo g$x$6322$MT&Mo)
                       g$r$6323$MT&Mo)))
                  (fx>=?
                    (string-compare g$a$6319$MT&Mo g$x$6322$MT&Mo)
                    '0)))))
            (cons g$b$6320$MT&Mo g$rest$6321$MT&Mo))))))
   (g$symbol=?$6165$MT&Mo
     g$symbol=?$6452$MT&Mo
     (case-lambda
       ((g$a$6324$MT&Mo g$b$6325$MT&Mo . g$rest$6326$MT&Mo)
        (begin
          (if (not (g$symbol?$6078$MT&Mo g$a$6324$MT&Mo))
            (assertion-violation
              'symbol=?
              '"not a symbol"
              g$a$6324$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6327$MT&Mo)
               (begin
                 (if (not (g$symbol?$6078$MT&Mo g$x$6327$MT&Mo))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$6327$MT&Mo)
                   (void))
                 (eq? g$a$6324$MT&Mo g$x$6327$MT&Mo))))
            (cons g$b$6325$MT&Mo g$rest$6326$MT&Mo))))))
   (g$boolean=?$6166$MT&Mo
     g$boolean=?$6453$MT&Mo
     (case-lambda
       ((g$a$6328$MT&Mo g$b$6329$MT&Mo . g$rest$6330$MT&Mo)
        (begin
          (if (not (g$boolean?$6079$MT&Mo g$a$6328$MT&Mo))
            (assertion-violation
              'boolean=?
              '"not a boolean"
              g$a$6328$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6331$MT&Mo)
               (begin
                 (if (not (g$boolean?$6079$MT&Mo g$x$6331$MT&Mo))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$6331$MT&Mo)
                   (void))
                 (eq? g$a$6328$MT&Mo g$x$6331$MT&Mo))))
            (cons g$b$6329$MT&Mo g$rest$6330$MT&Mo))))))
   (g$char=?$6204$MT&Mo
     g$char=?$6454$MT&Mo
     (case-lambda
       ((g$a$6332$MT&Mo g$b$6333$MT&Mo . g$rest$6334$MT&Mo)
        (begin
          (if (not (g$char?$6075$MT&Mo g$a$6332$MT&Mo))
            (assertion-violation 'char=? '"not a char" g$a$6332$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6335$MT&Mo)
               (begin
                 (if (not (g$char?$6075$MT&Mo g$x$6335$MT&Mo))
                   (assertion-violation
                     'char=?
                     '"not a char"
                     g$x$6335$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6336$MT&Mo)
                     (begin
                       (set! g$a$6332$MT&Mo g$x$6335$MT&Mo)
                       g$r$6336$MT&Mo)))
                  (fx=?
                    (char->integer g$a$6332$MT&Mo)
                    (char->integer g$x$6335$MT&Mo))))))
            (cons g$b$6333$MT&Mo g$rest$6334$MT&Mo))))))
   (g$char<?$6205$MT&Mo
     g$char<?$6455$MT&Mo
     (case-lambda
       ((g$a$6337$MT&Mo g$b$6338$MT&Mo . g$rest$6339$MT&Mo)
        (begin
          (if (not (g$char?$6075$MT&Mo g$a$6337$MT&Mo))
            (assertion-violation 'char<? '"not a char" g$a$6337$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6340$MT&Mo)
               (begin
                 (if (not (g$char?$6075$MT&Mo g$x$6340$MT&Mo))
                   (assertion-violation
                     'char<?
                     '"not a char"
                     g$x$6340$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6341$MT&Mo)
                     (begin
                       (set! g$a$6337$MT&Mo g$x$6340$MT&Mo)
                       g$r$6341$MT&Mo)))
                  (fx<?
                    (char->integer g$a$6337$MT&Mo)
                    (char->integer g$x$6340$MT&Mo))))))
            (cons g$b$6338$MT&Mo g$rest$6339$MT&Mo))))))
   (g$char>?$6206$MT&Mo
     g$char>?$6456$MT&Mo
     (case-lambda
       ((g$a$6342$MT&Mo g$b$6343$MT&Mo . g$rest$6344$MT&Mo)
        (begin
          (if (not (g$char?$6075$MT&Mo g$a$6342$MT&Mo))
            (assertion-violation 'char>? '"not a char" g$a$6342$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6345$MT&Mo)
               (begin
                 (if (not (g$char?$6075$MT&Mo g$x$6345$MT&Mo))
                   (assertion-violation
                     'char>?
                     '"not a char"
                     g$x$6345$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6346$MT&Mo)
                     (begin
                       (set! g$a$6342$MT&Mo g$x$6345$MT&Mo)
                       g$r$6346$MT&Mo)))
                  (fx>?
                    (char->integer g$a$6342$MT&Mo)
                    (char->integer g$x$6345$MT&Mo))))))
            (cons g$b$6343$MT&Mo g$rest$6344$MT&Mo))))))
   (g$char<=?$6207$MT&Mo
     g$char<=?$6457$MT&Mo
     (case-lambda
       ((g$a$6347$MT&Mo g$b$6348$MT&Mo . g$rest$6349$MT&Mo)
        (begin
          (if (not (g$char?$6075$MT&Mo g$a$6347$MT&Mo))
            (assertion-violation 'char<=? '"not a char" g$a$6347$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6350$MT&Mo)
               (begin
                 (if (not (g$char?$6075$MT&Mo g$x$6350$MT&Mo))
                   (assertion-violation
                     'char<=?
                     '"not a char"
                     g$x$6350$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6351$MT&Mo)
                     (begin
                       (set! g$a$6347$MT&Mo g$x$6350$MT&Mo)
                       g$r$6351$MT&Mo)))
                  (fx<=?
                    (char->integer g$a$6347$MT&Mo)
                    (char->integer g$x$6350$MT&Mo))))))
            (cons g$b$6348$MT&Mo g$rest$6349$MT&Mo))))))
   (g$char>=?$6208$MT&Mo
     g$char>=?$6458$MT&Mo
     (case-lambda
       ((g$a$6352$MT&Mo g$b$6353$MT&Mo . g$rest$6354$MT&Mo)
        (begin
          (if (not (g$char?$6075$MT&Mo g$a$6352$MT&Mo))
            (assertion-violation 'char>=? '"not a char" g$a$6352$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$6355$MT&Mo)
               (begin
                 (if (not (g$char?$6075$MT&Mo g$x$6355$MT&Mo))
                   (assertion-violation
                     'char>=?
                     '"not a char"
                     g$x$6355$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$6356$MT&Mo)
                     (begin
                       (set! g$a$6352$MT&Mo g$x$6355$MT&Mo)
                       g$r$6356$MT&Mo)))
                  (fx>=?
                    (char->integer g$a$6352$MT&Mo)
                    (char->integer g$x$6355$MT&Mo))))))
            (cons g$b$6353$MT&Mo g$rest$6354$MT&Mo))))))
   (g$rationalize$6209$MT&Mo
     g$rationalize$6459$MT&Mo
     (case-lambda
       ((g$x$6357$MT&Mo g$e$6358$MT&Mo)
        (if (if (infinite? g$x$6357$MT&Mo)
              (begin '#f (infinite? g$e$6358$MT&Mo))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$6359$MT&Mo)
              (if (if (exact? g$x$6357$MT&Mo)
                    (begin '#f (exact? g$e$6358$MT&Mo))
                    '#f)
                g$r$6359$MT&Mo
                (inexact g$r$6359$MT&Mo))))
           (apply
             /
             (g$find-ratio$6210$MT&Mo
               g$x$6357$MT&Mo
               g$e$6358$MT&Mo)))))))
   (g$find-ratio$6210$MT&Mo
     g$find-ratio$6460$MT&Mo
     (case-lambda
       ((g$x$6360$MT&Mo g$e$6361$MT&Mo)
        (g$find-ratio-between$6211$MT&Mo
          (- g$x$6360$MT&Mo g$e$6361$MT&Mo)
          (+ g$x$6360$MT&Mo g$e$6361$MT&Mo)))))
   (g$find-ratio-between$6211$MT&Mo
     g$find-ratio-between$6461$MT&Mo
     (case-lambda
       ((g$x$6362$MT&Mo g$y$6363$MT&Mo)
        (letrec* ((g$sr$6364$MT&Mo
                    (case-lambda
                      ((g$x$6366$MT&Mo g$y$6367$MT&Mo)
                       ((case-lambda
                          ((g$fx$6368$MT&Mo g$fy$6369$MT&Mo)
                           (if (>= g$fx$6368$MT&Mo g$x$6366$MT&Mo)
                             (list g$fx$6368$MT&Mo '1)
                             (if (= g$fx$6368$MT&Mo g$fy$6369$MT&Mo)
                               ((case-lambda
                                  ((g$rat$6370$MT&Mo)
                                   (list
                                     (+ (g$cadr$6087$MT&Mo
                                          g$rat$6370$MT&Mo)
                                        (* g$fx$6368$MT&Mo
                                           (car g$rat$6370$MT&Mo)))
                                     (car g$rat$6370$MT&Mo))))
                                (g$sr$6364$MT&Mo
                                  (/ (- g$y$6367$MT&Mo g$fy$6369$MT&Mo))
                                  (/ (- g$x$6366$MT&Mo
                                        g$fx$6368$MT&Mo))))
                               (list (+ '1 g$fx$6368$MT&Mo) '1)))))
                        (exact (floor g$x$6366$MT&Mo))
                        (exact (floor g$y$6367$MT&Mo)))))))
          (if (< g$y$6363$MT&Mo g$x$6362$MT&Mo)
            (g$find-ratio-between$6211$MT&Mo
              g$y$6363$MT&Mo
              g$x$6362$MT&Mo)
            (if (>= g$x$6362$MT&Mo g$y$6363$MT&Mo)
              (list g$x$6362$MT&Mo '1)
              (if (g$positive?$6114$MT&Mo g$x$6362$MT&Mo)
                (g$sr$6364$MT&Mo g$x$6362$MT&Mo g$y$6363$MT&Mo)
                (if (g$negative?$6115$MT&Mo g$y$6363$MT&Mo)
                  ((case-lambda
                     ((g$rat$6365$MT&Mo)
                      (list
                        (- (car g$rat$6365$MT&Mo))
                        (g$cadr$6087$MT&Mo g$rat$6365$MT&Mo))))
                   (g$sr$6364$MT&Mo
                     (- g$y$6363$MT&Mo)
                     (- g$x$6362$MT&Mo)))
                  '(0 1)))))))))
   (g$vector-map$6212$MT&Mo
     g$vector-map$6462$MT&Mo
     (case-lambda
       ((g$p$6371$MT&Mo g$vec1$6372$MT&Mo . g$vecs$6373$MT&Mo)
        ((case-lambda
           ((g$len$6374$MT&Mo)
            ((case-lambda
               ((g$res$6375$MT&Mo)
                (letrec ((g$loop$6376$MT&Mo
                           (case-lambda
                             ((g$i$6377$MT&Mo)
                              (if (fx=? g$i$6377$MT&Mo g$len$6374$MT&Mo)
                                (begin
                                  (if '#f '#f (void))
                                  g$res$6375$MT&Mo)
                                (begin
                                  (vector-set!
                                    g$res$6375$MT&Mo
                                    g$i$6377$MT&Mo
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (apply
                                           values
                                           (g$map$5753$MT&Mo
                                             (case-lambda
                                               ((g$x$6378$MT&Mo)
                                                (vector-ref
                                                  g$x$6378$MT&Mo
                                                  g$i$6377$MT&Mo)))
                                             (cons
                                               g$vec1$6372$MT&Mo
                                               g$vecs$6373$MT&Mo)))))
                                      g$p$6371$MT&Mo))
                                  (g$loop$6376$MT&Mo
                                    (fx+ g$i$6377$MT&Mo '1))))))))
                  (g$loop$6376$MT&Mo '0))))
             (make-vector g$len$6374$MT&Mo))))
         (vector-length g$vec1$6372$MT&Mo)))))
   (g$vector-for-each$6213$MT&Mo
     g$vector-for-each$6463$MT&Mo
     (case-lambda
       ((g$p$6379$MT&Mo g$vec1$6380$MT&Mo . g$vecs$6381$MT&Mo)
        ((case-lambda
           ((g$len$6382$MT&Mo)
            (letrec ((g$loop$6383$MT&Mo
                       (case-lambda
                         ((g$i$6384$MT&Mo)
                          (if (fx=? g$i$6384$MT&Mo g$len$6382$MT&Mo)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5753$MT&Mo
                                       (case-lambda
                                         ((g$x$6385$MT&Mo)
                                          (vector-ref
                                            g$x$6385$MT&Mo
                                            g$i$6384$MT&Mo)))
                                       (cons
                                         g$vec1$6380$MT&Mo
                                         g$vecs$6381$MT&Mo)))))
                                g$p$6379$MT&Mo)
                              (g$loop$6383$MT&Mo
                                (fx+ g$i$6384$MT&Mo '1))))))))
              (g$loop$6383$MT&Mo '0))))
         (vector-length g$vec1$6380$MT&Mo)))))
   (g$string-for-each$6214$MT&Mo
     g$string-for-each$6464$MT&Mo
     (case-lambda
       ((g$p$6386$MT&Mo g$str1$6387$MT&Mo . g$strs$6388$MT&Mo)
        ((case-lambda
           ((g$len$6389$MT&Mo)
            (letrec ((g$loop$6390$MT&Mo
                       (case-lambda
                         ((g$i$6391$MT&Mo)
                          (if (fx=? g$i$6391$MT&Mo g$len$6389$MT&Mo)
                            (if '#f '#f (void))
                            (begin
                              (call-with-values
                                (case-lambda
                                  (()
                                   (apply
                                     values
                                     (g$map$5753$MT&Mo
                                       (case-lambda
                                         ((g$x$6392$MT&Mo)
                                          (string-ref
                                            g$x$6392$MT&Mo
                                            g$i$6391$MT&Mo)))
                                       (cons
                                         g$str1$6387$MT&Mo
                                         g$strs$6388$MT&Mo)))))
                                g$p$6386$MT&Mo)
                              (g$loop$6390$MT&Mo
                                (fx+ g$i$6391$MT&Mo '1))))))))
              (g$loop$6390$MT&Mo '0))))
         (string-length g$str1$6387$MT&Mo))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$6466$MT&Mo g$using$6499$MT&Mo (clr-using-internal 'system))
   (g$using$6468$MT&Mo
     g$using$6500$MT&Mo
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$6469$MT&Mo
     g$make-eq-hashtable$6501$MT&Mo
     (case-lambda
       (() (g$make-eq-hashtable$6469$MT&Mo '32))
       ((g$k$6478$MT&Mo)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$6478$MT&Mo)))))
   (g$make-eqv-hashtable$6470$MT&Mo
     g$make-eqv-hashtable$6502$MT&Mo
     (case-lambda
       (() (g$make-eqv-hashtable$6470$MT&Mo '32))
       ((g$k$6479$MT&Mo)
        (make-hashtable eqv-hash eqv? g$k$6479$MT&Mo))))
   (g$hashtable-size$6471$MT&Mo
     g$hashtable-size$6503$MT&Mo
     (case-lambda
       ((g$ht$6480$MT&Mo)
        (clr-call-internal 'hashtable 'get_count g$ht$6480$MT&Mo))))
   (g$hashtable-ref$6472$MT&Mo
     g$hashtable-ref$6504$MT&Mo
     (case-lambda
       ((g$ht$6481$MT&Mo g$key$6482$MT&Mo g$default$6483$MT&Mo)
        (letrec* ((g$r$6484$MT&Mo
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$6481$MT&Mo
                      g$key$6482$MT&Mo)))
          (if (not (null? g$r$6484$MT&Mo))
            g$r$6484$MT&Mo
            g$default$6483$MT&Mo)))))
   (g$hashtable-set!$6473$MT&Mo
     g$hashtable-set!$6505$MT&Mo
     (case-lambda
       ((g$ht$6485$MT&Mo g$key$6486$MT&Mo g$obj$6487$MT&Mo)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$6485$MT&Mo
          g$key$6486$MT&Mo
          g$obj$6487$MT&Mo))))
   (g$hashtable-delete!$6474$MT&Mo
     g$hashtable-delete!$6506$MT&Mo
     (case-lambda
       ((g$ht$6488$MT&Mo g$key$6489$MT&Mo)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$6488$MT&Mo
          g$key$6489$MT&Mo))))
   (g$hashtable-contains?$6475$MT&Mo
     g$hashtable-contains?$6507$MT&Mo
     (case-lambda
       ((g$ht$6490$MT&Mo g$key$6491$MT&Mo)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$6490$MT&Mo
          g$key$6491$MT&Mo))))
   (g$hashtable-update!$6476$MT&Mo
     g$hashtable-update!$6508$MT&Mo
     (case-lambda
       ((g$ht$6492$MT&Mo
          g$key$6493$MT&Mo
          g$proc$6494$MT&Mo
          g$default$6495$MT&Mo)
        (g$hashtable-set!$6473$MT&Mo
          g$ht$6492$MT&Mo
          g$key$6493$MT&Mo
          (g$proc$6494$MT&Mo
            (g$hashtable-ref$6472$MT&Mo
              g$ht$6492$MT&Mo
              g$key$6493$MT&Mo
              g$default$6495$MT&Mo))))))
   (g$hashtable-clear!$6477$MT&Mo
     g$hashtable-clear!$6509$MT&Mo
     (case-lambda
       ((g$ht$6496$MT&Mo)
        (g$hashtable-clear!$6477$MT&Mo g$ht$6496$MT&Mo '32))
       ((g$ht$6497$MT&Mo g$k$6498$MT&Mo)
        (clr-call-internal 'hashtable 'clear g$ht$6497$MT&Mo)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$6511$MT&Mo
     g$using$6518$MT&Mo
     (clr-using-internal 'system.io))
   (g$file-exists?$6512$MT&Mo
     g$file-exists?$6519$MT&Mo
     (case-lambda
       ((g$fn$6515$MT&Mo)
        (clr-call-internal 'file 'exists '() g$fn$6515$MT&Mo))))
   (g$delete-file$6513$MT&Mo
     g$delete-file$6520$MT&Mo
     (case-lambda
       ((g$fn$6516$MT&Mo)
        (clr-call-internal 'file 'delete '() g$fn$6516$MT&Mo))))
   (g$get-directory-name$6514$MT&Mo
     g$get-directory-name$6521$MT&Mo
     (case-lambda
       ((g$path$6517$MT&Mo)
        (clr-call-internal
          'path
          'getdirectoryname
          '()
          g$path$6517$MT&Mo)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$6522$MT&Mo
     g$native-endianness$6633$MT&Mo
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$6523$MT&Mo
     g$bytevector-u16-ref$6634$MT&Mo
     (case-lambda
       ((g$bytevector$6551$MT&Mo g$k$6552$MT&Mo g$endianness$6553$MT&Mo)
        (bytevector-uint-ref
          g$bytevector$6551$MT&Mo
          g$k$6552$MT&Mo
          g$endianness$6553$MT&Mo
          '2))))
   (g$bytevector-s16-ref$6524$MT&Mo
     g$bytevector-s16-ref$6635$MT&Mo
     (case-lambda
       ((g$bytevector$6554$MT&Mo g$k$6555$MT&Mo g$endianness$6556$MT&Mo)
        (bytevector-sint-ref
          g$bytevector$6554$MT&Mo
          g$k$6555$MT&Mo
          g$endianness$6556$MT&Mo
          '2))))
   (g$bytevector-u16-native-ref$6525$MT&Mo
     g$bytevector-u16-native-ref$6636$MT&Mo
     (case-lambda
       ((g$bytevector$6557$MT&Mo g$k$6558$MT&Mo)
        (bytevector-uint-ref
          g$bytevector$6557$MT&Mo
          g$k$6558$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '2))))
   (g$bytevector-s16-native-ref$6526$MT&Mo
     g$bytevector-s16-native-ref$6637$MT&Mo
     (case-lambda
       ((g$bytevector$6559$MT&Mo g$k$6560$MT&Mo)
        (bytevector-sint-ref
          g$bytevector$6559$MT&Mo
          g$k$6560$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '2))))
   (g$bytevector-u16-set!$6527$MT&Mo
     g$bytevector-u16-set!$6638$MT&Mo
     (case-lambda
       ((g$bytevector$6561$MT&Mo
          g$k$6562$MT&Mo
          g$n$6563$MT&Mo
          g$endianness$6564$MT&Mo)
        (bytevector-uint-set!
          g$bytevector$6561$MT&Mo
          g$k$6562$MT&Mo
          g$n$6563$MT&Mo
          g$endianness$6564$MT&Mo
          '2))))
   (g$bytevector-s16-set!$6528$MT&Mo
     g$bytevector-s16-set!$6639$MT&Mo
     (case-lambda
       ((g$bytevector$6565$MT&Mo
          g$k$6566$MT&Mo
          g$n$6567$MT&Mo
          g$endianness$6568$MT&Mo)
        (bytevector-sint-set!
          g$bytevector$6565$MT&Mo
          g$k$6566$MT&Mo
          g$n$6567$MT&Mo
          g$endianness$6568$MT&Mo
          '2))))
   (g$bytevector-u16-native-set!$6529$MT&Mo
     g$bytevector-u16-native-set!$6640$MT&Mo
     (case-lambda
       ((g$bytevector$6569$MT&Mo g$k$6570$MT&Mo g$n$6571$MT&Mo)
        (bytevector-uint-set!
          g$bytevector$6569$MT&Mo
          g$k$6570$MT&Mo
          g$n$6571$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '2))))
   (g$bytevector-s16-native-set!$6530$MT&Mo
     g$bytevector-s16-native-set!$6641$MT&Mo
     (case-lambda
       ((g$bytevector$6572$MT&Mo g$k$6573$MT&Mo g$n$6574$MT&Mo)
        (bytevector-sint-set!
          g$bytevector$6572$MT&Mo
          g$k$6573$MT&Mo
          g$n$6574$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '2))))
   (g$bytevector-u32-ref$6531$MT&Mo
     g$bytevector-u32-ref$6642$MT&Mo
     (case-lambda
       ((g$bytevector$6575$MT&Mo g$k$6576$MT&Mo g$endianness$6577$MT&Mo)
        (bytevector-uint-ref
          g$bytevector$6575$MT&Mo
          g$k$6576$MT&Mo
          g$endianness$6577$MT&Mo
          '4))))
   (g$bytevector-s32-ref$6532$MT&Mo
     g$bytevector-s32-ref$6643$MT&Mo
     (case-lambda
       ((g$bytevector$6578$MT&Mo g$k$6579$MT&Mo g$endianness$6580$MT&Mo)
        (bytevector-sint-ref
          g$bytevector$6578$MT&Mo
          g$k$6579$MT&Mo
          g$endianness$6580$MT&Mo
          '4))))
   (g$bytevector-u32-native-ref$6533$MT&Mo
     g$bytevector-u32-native-ref$6644$MT&Mo
     (case-lambda
       ((g$bytevector$6581$MT&Mo g$k$6582$MT&Mo)
        (bytevector-uint-ref
          g$bytevector$6581$MT&Mo
          g$k$6582$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '4))))
   (g$bytevector-s32-native-ref$6534$MT&Mo
     g$bytevector-s32-native-ref$6645$MT&Mo
     (case-lambda
       ((g$bytevector$6583$MT&Mo g$k$6584$MT&Mo)
        (bytevector-sint-ref
          g$bytevector$6583$MT&Mo
          g$k$6584$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '4))))
   (g$bytevector-u32-set!$6535$MT&Mo
     g$bytevector-u32-set!$6646$MT&Mo
     (case-lambda
       ((g$bytevector$6585$MT&Mo
          g$k$6586$MT&Mo
          g$n$6587$MT&Mo
          g$endianness$6588$MT&Mo)
        (bytevector-uint-set!
          g$bytevector$6585$MT&Mo
          g$k$6586$MT&Mo
          g$n$6587$MT&Mo
          g$endianness$6588$MT&Mo
          '4))))
   (g$bytevector-s32-set!$6536$MT&Mo
     g$bytevector-s32-set!$6647$MT&Mo
     (case-lambda
       ((g$bytevector$6589$MT&Mo
          g$k$6590$MT&Mo
          g$n$6591$MT&Mo
          g$endianness$6592$MT&Mo)
        (bytevector-sint-set!
          g$bytevector$6589$MT&Mo
          g$k$6590$MT&Mo
          g$n$6591$MT&Mo
          g$endianness$6592$MT&Mo
          '4))))
   (g$bytevector-u32-native-set!$6537$MT&Mo
     g$bytevector-u32-native-set!$6648$MT&Mo
     (case-lambda
       ((g$bytevector$6593$MT&Mo g$k$6594$MT&Mo g$n$6595$MT&Mo)
        (bytevector-uint-set!
          g$bytevector$6593$MT&Mo
          g$k$6594$MT&Mo
          g$n$6595$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '4))))
   (g$bytevector-s32-native-set!$6538$MT&Mo
     g$bytevector-s32-native-set!$6649$MT&Mo
     (case-lambda
       ((g$bytevector$6596$MT&Mo g$k$6597$MT&Mo g$n$6598$MT&Mo)
        (bytevector-sint-set!
          g$bytevector$6596$MT&Mo
          g$k$6597$MT&Mo
          g$n$6598$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '4))))
   (g$bytevector-u64-ref$6539$MT&Mo
     g$bytevector-u64-ref$6650$MT&Mo
     (case-lambda
       ((g$bytevector$6599$MT&Mo g$k$6600$MT&Mo g$endianness$6601$MT&Mo)
        (bytevector-uint-ref
          g$bytevector$6599$MT&Mo
          g$k$6600$MT&Mo
          g$endianness$6601$MT&Mo
          '8))))
   (g$bytevector-s64-ref$6540$MT&Mo
     g$bytevector-s64-ref$6651$MT&Mo
     (case-lambda
       ((g$bytevector$6602$MT&Mo g$k$6603$MT&Mo g$endianness$6604$MT&Mo)
        (bytevector-sint-ref
          g$bytevector$6602$MT&Mo
          g$k$6603$MT&Mo
          g$endianness$6604$MT&Mo
          '8))))
   (g$bytevector-u64-native-ref$6541$MT&Mo
     g$bytevector-u64-native-ref$6652$MT&Mo
     (case-lambda
       ((g$bytevector$6605$MT&Mo g$k$6606$MT&Mo)
        (bytevector-uint-ref
          g$bytevector$6605$MT&Mo
          g$k$6606$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '8))))
   (g$bytevector-s64-native-ref$6542$MT&Mo
     g$bytevector-s64-native-ref$6653$MT&Mo
     (case-lambda
       ((g$bytevector$6607$MT&Mo g$k$6608$MT&Mo)
        (bytevector-sint-ref
          g$bytevector$6607$MT&Mo
          g$k$6608$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '8))))
   (g$bytevector-u64-set!$6543$MT&Mo
     g$bytevector-u64-set!$6654$MT&Mo
     (case-lambda
       ((g$bytevector$6609$MT&Mo
          g$k$6610$MT&Mo
          g$n$6611$MT&Mo
          g$endianness$6612$MT&Mo)
        (bytevector-uint-set!
          g$bytevector$6609$MT&Mo
          g$k$6610$MT&Mo
          g$n$6611$MT&Mo
          g$endianness$6612$MT&Mo
          '8))))
   (g$bytevector-s64-set!$6544$MT&Mo
     g$bytevector-s64-set!$6655$MT&Mo
     (case-lambda
       ((g$bytevector$6613$MT&Mo
          g$k$6614$MT&Mo
          g$n$6615$MT&Mo
          g$endianness$6616$MT&Mo)
        (bytevector-sint-set!
          g$bytevector$6613$MT&Mo
          g$k$6614$MT&Mo
          g$n$6615$MT&Mo
          g$endianness$6616$MT&Mo
          '8))))
   (g$bytevector-u64-native-set!$6545$MT&Mo
     g$bytevector-u64-native-set!$6656$MT&Mo
     (case-lambda
       ((g$bytevector$6617$MT&Mo g$k$6618$MT&Mo g$n$6619$MT&Mo)
        (bytevector-uint-set!
          g$bytevector$6617$MT&Mo
          g$k$6618$MT&Mo
          g$n$6619$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '8))))
   (g$bytevector-s64-native-set!$6546$MT&Mo
     g$bytevector-s64-native-set!$6657$MT&Mo
     (case-lambda
       ((g$bytevector$6620$MT&Mo g$k$6621$MT&Mo g$n$6622$MT&Mo)
        (bytevector-sint-set!
          g$bytevector$6620$MT&Mo
          g$k$6621$MT&Mo
          g$n$6622$MT&Mo
          (g$native-endianness$6522$MT&Mo)
          '8))))
   (g$bytevector-ieee-single-native-ref$6547$MT&Mo
     g$bytevector-ieee-single-native-ref$6658$MT&Mo
     (case-lambda
       ((g$bytevector$6623$MT&Mo g$k$6624$MT&Mo)
        (if (not (g$zero?$6440$MT&Mo
                   (g$mod$6393$MT&Mo g$k$6624$MT&Mo '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$6624$MT&Mo)
          (bytevector-ieee-single-ref
            g$bytevector$6623$MT&Mo
            g$k$6624$MT&Mo
            (g$native-endianness$6522$MT&Mo))))))
   (g$bytevector-ieee-double-native-ref$6548$MT&Mo
     g$bytevector-ieee-double-native-ref$6659$MT&Mo
     (case-lambda
       ((g$bytevector$6625$MT&Mo g$k$6626$MT&Mo)
        (if (not (g$zero?$6440$MT&Mo
                   (g$mod$6393$MT&Mo g$k$6626$MT&Mo '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$6626$MT&Mo)
          (bytevector-ieee-double-ref
            g$bytevector$6625$MT&Mo
            g$k$6626$MT&Mo
            (g$native-endianness$6522$MT&Mo))))))
   (g$bytevector-ieee-single-native-set!$6549$MT&Mo
     g$bytevector-ieee-single-native-set!$6660$MT&Mo
     (case-lambda
       ((g$bytevector$6627$MT&Mo g$k$6628$MT&Mo g$x$6629$MT&Mo)
        (if (not (g$zero?$6440$MT&Mo
                   (g$mod$6393$MT&Mo g$k$6628$MT&Mo '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$6628$MT&Mo)
          (bytevector-ieee-single-set!
            g$bytevector$6627$MT&Mo
            g$k$6628$MT&Mo
            g$x$6629$MT&Mo
            (g$native-endianness$6522$MT&Mo))))))
   (g$bytevector-ieee-double-native-set!$6550$MT&Mo
     g$bytevector-ieee-double-native-set!$6661$MT&Mo
     (case-lambda
       ((g$bytevector$6630$MT&Mo g$k$6631$MT&Mo g$x$6632$MT&Mo)
        (if (not (g$zero?$6440$MT&Mo
                   (g$mod$6393$MT&Mo g$k$6631$MT&Mo '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$6631$MT&Mo)
          (bytevector-ieee-double-set!
            g$bytevector$6630$MT&Mo
            g$k$6631$MT&Mo
            g$x$6632$MT&Mo
            (g$native-endianness$6522$MT&Mo)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$5774$6662$MT&Mo
     g$5774$7040$MT&Mo
     (make-record-type-descriptor
       '&condition
       '#f
       'g$5777$MT&Mo
       '#f
       '#f
       '#()))
   (g$5776$6663$MT&Mo g$5776$7041$MT&Mo '#f)
   (g$5775$6664$MT&Mo
     g$5775$7042$MT&Mo
     (make-record-constructor-descriptor
       g$5774$6662$MT&Mo
       '#f
       g$5776$6663$MT&Mo))
   (g$&condition?$6667$MT&Mo
     g$&condition?$7043$MT&Mo
     (record-predicate g$5774$6662$MT&Mo))
   (g$make-&condition$6668$MT&Mo
     g$make-&condition$7044$MT&Mo
     (record-constructor g$5775$6664$MT&Mo))
   (g$&condition-rtd$6669$MT&Mo
     g$&condition-rtd$7045$MT&Mo
     g$5774$6662$MT&Mo)
   (g$&condition-rcd$6670$MT&Mo
     g$&condition-rcd$7046$MT&Mo
     g$5775$6664$MT&Mo)
   (g$5811$6744$MT&Mo
     g$5811$7047$MT&Mo
     (make-record-type-descriptor
       '&message
       g$5774$6662$MT&Mo
       'g$5814$MT&Mo
       '#f
       '#f
       '#((immutable message))))
   (g$5813$6745$MT&Mo g$5813$7048$MT&Mo '#f)
   (g$5812$6746$MT&Mo
     g$5812$7049$MT&Mo
     (make-record-constructor-descriptor
       g$5811$6744$MT&Mo
       g$5775$6664$MT&Mo
       g$5813$6745$MT&Mo))
   (g$p?$6749$MT&Mo
     g$p?$7050$MT&Mo
     (record-predicate g$5811$6744$MT&Mo))
   (g$make-message-condition$6750$MT&Mo
     g$make-message-condition$7051$MT&Mo
     (record-constructor g$5812$6746$MT&Mo))
   (g$condition-message$6751$MT&Mo
     g$condition-message$7052$MT&Mo
     (record-accessor g$5811$6744$MT&Mo '0))
   (g$message-condition?$6752$MT&Mo
     g$message-condition?$7053$MT&Mo
     (condition-predicate g$5811$6744$MT&Mo))
   (g$condition-message$6753$MT&Mo
     g$condition-message$7054$MT&Mo
     (condition-accessor
       g$5811$6744$MT&Mo
       g$condition-message$6751$MT&Mo))
   (g$&message-rtd$6754$MT&Mo
     g$&message-rtd$7055$MT&Mo
     g$5811$6744$MT&Mo)
   (g$&message-rcd$6755$MT&Mo
     g$&message-rcd$7056$MT&Mo
     g$5812$6746$MT&Mo)
   (g$5826$6756$MT&Mo
     g$5826$7057$MT&Mo
     (make-record-type-descriptor
       '&warning
       g$5774$6662$MT&Mo
       'g$5829$MT&Mo
       '#f
       '#f
       '#()))
   (g$5828$6757$MT&Mo g$5828$7058$MT&Mo '#f)
   (g$5827$6758$MT&Mo
     g$5827$7059$MT&Mo
     (make-record-constructor-descriptor
       g$5826$6756$MT&Mo
       g$5775$6664$MT&Mo
       g$5828$6757$MT&Mo))
   (g$p?$6761$MT&Mo
     g$p?$7060$MT&Mo
     (record-predicate g$5826$6756$MT&Mo))
   (g$make-warning$6762$MT&Mo
     g$make-warning$7061$MT&Mo
     (record-constructor g$5827$6758$MT&Mo))
   (g$warning?$6763$MT&Mo
     g$warning?$7062$MT&Mo
     (condition-predicate g$5826$6756$MT&Mo))
   (g$&warning-rtd$6764$MT&Mo
     g$&warning-rtd$7063$MT&Mo
     g$5826$6756$MT&Mo)
   (g$&warning-rcd$6765$MT&Mo
     g$&warning-rcd$7064$MT&Mo
     g$5827$6758$MT&Mo)
   (g$5839$6766$MT&Mo
     g$5839$7065$MT&Mo
     (make-record-type-descriptor
       '&serious
       g$5774$6662$MT&Mo
       'g$5842$MT&Mo
       '#f
       '#f
       '#()))
   (g$5841$6767$MT&Mo g$5841$7066$MT&Mo '#f)
   (g$5840$6768$MT&Mo
     g$5840$7067$MT&Mo
     (make-record-constructor-descriptor
       g$5839$6766$MT&Mo
       g$5775$6664$MT&Mo
       g$5841$6767$MT&Mo))
   (g$p?$6771$MT&Mo
     g$p?$7068$MT&Mo
     (record-predicate g$5839$6766$MT&Mo))
   (g$make-serious-condition$6772$MT&Mo
     g$make-serious-condition$7069$MT&Mo
     (record-constructor g$5840$6768$MT&Mo))
   (g$serious-condition?$6773$MT&Mo
     g$serious-condition?$7070$MT&Mo
     (condition-predicate g$5839$6766$MT&Mo))
   (g$&serious-rtd$6774$MT&Mo
     g$&serious-rtd$7071$MT&Mo
     g$5839$6766$MT&Mo)
   (g$&serious-rcd$6775$MT&Mo
     g$&serious-rcd$7072$MT&Mo
     g$5840$6768$MT&Mo)
   (g$5852$6776$MT&Mo
     g$5852$7073$MT&Mo
     (make-record-type-descriptor
       '&error
       g$5839$6766$MT&Mo
       'g$5855$MT&Mo
       '#f
       '#f
       '#()))
   (g$5854$6777$MT&Mo g$5854$7074$MT&Mo '#f)
   (g$5853$6778$MT&Mo
     g$5853$7075$MT&Mo
     (make-record-constructor-descriptor
       g$5852$6776$MT&Mo
       g$5840$6768$MT&Mo
       g$5854$6777$MT&Mo))
   (g$p?$6781$MT&Mo
     g$p?$7076$MT&Mo
     (record-predicate g$5852$6776$MT&Mo))
   (g$make-error$6782$MT&Mo
     g$make-error$7077$MT&Mo
     (record-constructor g$5853$6778$MT&Mo))
   (g$error?$6783$MT&Mo
     g$error?$7078$MT&Mo
     (condition-predicate g$5852$6776$MT&Mo))
   (g$&error-rtd$6784$MT&Mo g$&error-rtd$7079$MT&Mo g$5852$6776$MT&Mo)
   (g$&error-rcd$6785$MT&Mo g$&error-rcd$7080$MT&Mo g$5853$6778$MT&Mo)
   (g$5865$6786$MT&Mo
     g$5865$7081$MT&Mo
     (make-record-type-descriptor
       '&violation
       g$5839$6766$MT&Mo
       'g$5868$MT&Mo
       '#f
       '#f
       '#()))
   (g$5867$6787$MT&Mo g$5867$7082$MT&Mo '#f)
   (g$5866$6788$MT&Mo
     g$5866$7083$MT&Mo
     (make-record-constructor-descriptor
       g$5865$6786$MT&Mo
       g$5840$6768$MT&Mo
       g$5867$6787$MT&Mo))
   (g$p?$6791$MT&Mo
     g$p?$7084$MT&Mo
     (record-predicate g$5865$6786$MT&Mo))
   (g$make-violation$6792$MT&Mo
     g$make-violation$7085$MT&Mo
     (record-constructor g$5866$6788$MT&Mo))
   (g$violation?$6793$MT&Mo
     g$violation?$7086$MT&Mo
     (condition-predicate g$5865$6786$MT&Mo))
   (g$&violation-rtd$6794$MT&Mo
     g$&violation-rtd$7087$MT&Mo
     g$5865$6786$MT&Mo)
   (g$&violation-rcd$6795$MT&Mo
     g$&violation-rcd$7088$MT&Mo
     g$5866$6788$MT&Mo)
   (g$5878$6796$MT&Mo
     g$5878$7089$MT&Mo
     (make-record-type-descriptor
       '&assertion
       g$5865$6786$MT&Mo
       'g$5881$MT&Mo
       '#f
       '#f
       '#()))
   (g$5880$6797$MT&Mo g$5880$7090$MT&Mo '#f)
   (g$5879$6798$MT&Mo
     g$5879$7091$MT&Mo
     (make-record-constructor-descriptor
       g$5878$6796$MT&Mo
       g$5866$6788$MT&Mo
       g$5880$6797$MT&Mo))
   (g$p?$6801$MT&Mo
     g$p?$7092$MT&Mo
     (record-predicate g$5878$6796$MT&Mo))
   (g$make-assertion-violation$6802$MT&Mo
     g$make-assertion-violation$7093$MT&Mo
     (record-constructor g$5879$6798$MT&Mo))
   (g$assertion-violation?$6803$MT&Mo
     g$assertion-violation?$7094$MT&Mo
     (condition-predicate g$5878$6796$MT&Mo))
   (g$&assertion-rtd$6804$MT&Mo
     g$&assertion-rtd$7095$MT&Mo
     g$5878$6796$MT&Mo)
   (g$&assertion-rcd$6805$MT&Mo
     g$&assertion-rcd$7096$MT&Mo
     g$5879$6798$MT&Mo)
   (g$5891$6807$MT&Mo
     g$5891$7097$MT&Mo
     (make-record-type-descriptor
       '&irritants
       g$5774$6662$MT&Mo
       'g$5894$MT&Mo
       '#f
       '#f
       '#((immutable irritants))))
   (g$5893$6808$MT&Mo g$5893$7098$MT&Mo '#f)
   (g$5892$6809$MT&Mo
     g$5892$7099$MT&Mo
     (make-record-constructor-descriptor
       g$5891$6807$MT&Mo
       g$5775$6664$MT&Mo
       g$5893$6808$MT&Mo))
   (g$p?$6812$MT&Mo
     g$p?$7100$MT&Mo
     (record-predicate g$5891$6807$MT&Mo))
   (g$make-irritants-condition$6813$MT&Mo
     g$make-irritants-condition$7101$MT&Mo
     (record-constructor g$5892$6809$MT&Mo))
   (g$condition-irritants$6814$MT&Mo
     g$condition-irritants$7102$MT&Mo
     (record-accessor g$5891$6807$MT&Mo '0))
   (g$irritants-condition?$6815$MT&Mo
     g$irritants-condition?$7103$MT&Mo
     (condition-predicate g$5891$6807$MT&Mo))
   (g$condition-irritants$6816$MT&Mo
     g$condition-irritants$7104$MT&Mo
     (condition-accessor
       g$5891$6807$MT&Mo
       g$condition-irritants$6814$MT&Mo))
   (g$&irritants-rtd$6817$MT&Mo
     g$&irritants-rtd$7105$MT&Mo
     g$5891$6807$MT&Mo)
   (g$&irritants-rcd$6818$MT&Mo
     g$&irritants-rcd$7106$MT&Mo
     g$5892$6809$MT&Mo)
   (g$5906$6820$MT&Mo
     g$5906$7107$MT&Mo
     (make-record-type-descriptor
       '&who
       g$5774$6662$MT&Mo
       'g$5909$MT&Mo
       '#f
       '#f
       '#((immutable who))))
   (g$5908$6821$MT&Mo g$5908$7108$MT&Mo '#f)
   (g$5907$6822$MT&Mo
     g$5907$7109$MT&Mo
     (make-record-constructor-descriptor
       g$5906$6820$MT&Mo
       g$5775$6664$MT&Mo
       g$5908$6821$MT&Mo))
   (g$p?$6825$MT&Mo
     g$p?$7110$MT&Mo
     (record-predicate g$5906$6820$MT&Mo))
   (g$make-who-condition$6826$MT&Mo
     g$make-who-condition$7111$MT&Mo
     (record-constructor g$5907$6822$MT&Mo))
   (g$condition-who$6827$MT&Mo
     g$condition-who$7112$MT&Mo
     (record-accessor g$5906$6820$MT&Mo '0))
   (g$who-condition?$6828$MT&Mo
     g$who-condition?$7113$MT&Mo
     (condition-predicate g$5906$6820$MT&Mo))
   (g$condition-who$6829$MT&Mo
     g$condition-who$7114$MT&Mo
     (condition-accessor g$5906$6820$MT&Mo g$condition-who$6827$MT&Mo))
   (g$&who-rtd$6830$MT&Mo g$&who-rtd$7115$MT&Mo g$5906$6820$MT&Mo)
   (g$&who-rcd$6831$MT&Mo g$&who-rcd$7116$MT&Mo g$5907$6822$MT&Mo)
   (g$5921$6832$MT&Mo
     g$5921$7117$MT&Mo
     (make-record-type-descriptor
       '&non-continuable
       g$5865$6786$MT&Mo
       'g$5924$MT&Mo
       '#f
       '#f
       '#()))
   (g$5923$6833$MT&Mo g$5923$7118$MT&Mo '#f)
   (g$5922$6834$MT&Mo
     g$5922$7119$MT&Mo
     (make-record-constructor-descriptor
       g$5921$6832$MT&Mo
       g$5866$6788$MT&Mo
       g$5923$6833$MT&Mo))
   (g$p?$6837$MT&Mo
     g$p?$7120$MT&Mo
     (record-predicate g$5921$6832$MT&Mo))
   (g$make-non-continuable-violation$6838$MT&Mo
     g$make-non-continuable-violation$7121$MT&Mo
     (record-constructor g$5922$6834$MT&Mo))
   (g$non-continuable-violation?$6839$MT&Mo
     g$non-continuable-violation?$7122$MT&Mo
     (condition-predicate g$5921$6832$MT&Mo))
   (g$&non-continuable-rtd$6840$MT&Mo
     g$&non-continuable-rtd$7123$MT&Mo
     g$5921$6832$MT&Mo)
   (g$&non-continuable-rcd$6841$MT&Mo
     g$&non-continuable-rcd$7124$MT&Mo
     g$5922$6834$MT&Mo)
   (g$5934$6842$MT&Mo
     g$5934$7125$MT&Mo
     (make-record-type-descriptor
       '&implementation-restriction
       g$5865$6786$MT&Mo
       'g$5937$MT&Mo
       '#f
       '#f
       '#()))
   (g$5936$6843$MT&Mo g$5936$7126$MT&Mo '#f)
   (g$5935$6844$MT&Mo
     g$5935$7127$MT&Mo
     (make-record-constructor-descriptor
       g$5934$6842$MT&Mo
       g$5866$6788$MT&Mo
       g$5936$6843$MT&Mo))
   (g$p?$6847$MT&Mo
     g$p?$7128$MT&Mo
     (record-predicate g$5934$6842$MT&Mo))
   (g$make-implementation-restriction-violation$6848$MT&Mo
     g$make-implementation-restriction-violation$7129$MT&Mo
     (record-constructor g$5935$6844$MT&Mo))
   (g$implementation-restriction-violation?$6849$MT&Mo
     g$implementation-restriction-violation?$7130$MT&Mo
     (condition-predicate g$5934$6842$MT&Mo))
   (g$&implementation-restriction-rtd$6850$MT&Mo
     g$&implementation-restriction-rtd$7131$MT&Mo
     g$5934$6842$MT&Mo)
   (g$&implementation-restriction-rcd$6851$MT&Mo
     g$&implementation-restriction-rcd$7132$MT&Mo
     g$5935$6844$MT&Mo)
   (g$5947$6852$MT&Mo
     g$5947$7133$MT&Mo
     (make-record-type-descriptor
       '&lexical
       g$5865$6786$MT&Mo
       'g$5950$MT&Mo
       '#f
       '#f
       '#()))
   (g$5949$6853$MT&Mo g$5949$7134$MT&Mo '#f)
   (g$5948$6854$MT&Mo
     g$5948$7135$MT&Mo
     (make-record-constructor-descriptor
       g$5947$6852$MT&Mo
       g$5866$6788$MT&Mo
       g$5949$6853$MT&Mo))
   (g$p?$6857$MT&Mo
     g$p?$7136$MT&Mo
     (record-predicate g$5947$6852$MT&Mo))
   (g$make-lexical-violation$6858$MT&Mo
     g$make-lexical-violation$7137$MT&Mo
     (record-constructor g$5948$6854$MT&Mo))
   (g$lexical-violation?$6859$MT&Mo
     g$lexical-violation?$7138$MT&Mo
     (condition-predicate g$5947$6852$MT&Mo))
   (g$&lexical-rtd$6860$MT&Mo
     g$&lexical-rtd$7139$MT&Mo
     g$5947$6852$MT&Mo)
   (g$&lexical-rcd$6861$MT&Mo
     g$&lexical-rcd$7140$MT&Mo
     g$5948$6854$MT&Mo)
   (g$5960$6864$MT&Mo
     g$5960$7141$MT&Mo
     (make-record-type-descriptor
       '&syntax
       g$5865$6786$MT&Mo
       'g$5963$MT&Mo
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$5962$6865$MT&Mo g$5962$7142$MT&Mo '#f)
   (g$5961$6866$MT&Mo
     g$5961$7143$MT&Mo
     (make-record-constructor-descriptor
       g$5960$6864$MT&Mo
       g$5866$6788$MT&Mo
       g$5962$6865$MT&Mo))
   (g$p?$6869$MT&Mo
     g$p?$7144$MT&Mo
     (record-predicate g$5960$6864$MT&Mo))
   (g$make-syntax-violation$6870$MT&Mo
     g$make-syntax-violation$7145$MT&Mo
     (record-constructor g$5961$6866$MT&Mo))
   (g$syntax-violation-form$6871$MT&Mo
     g$syntax-violation-form$7146$MT&Mo
     (record-accessor g$5960$6864$MT&Mo '0))
   (g$syntax-violation-subform$6872$MT&Mo
     g$syntax-violation-subform$7147$MT&Mo
     (record-accessor g$5960$6864$MT&Mo '1))
   (g$syntax-violation?$6873$MT&Mo
     g$syntax-violation?$7148$MT&Mo
     (condition-predicate g$5960$6864$MT&Mo))
   (g$syntax-violation-form$6874$MT&Mo
     g$syntax-violation-form$7149$MT&Mo
     (condition-accessor
       g$5960$6864$MT&Mo
       g$syntax-violation-form$6871$MT&Mo))
   (g$syntax-violation-subform$6875$MT&Mo
     g$syntax-violation-subform$7150$MT&Mo
     (condition-accessor
       g$5960$6864$MT&Mo
       g$syntax-violation-subform$6872$MT&Mo))
   (g$&syntax-rtd$6876$MT&Mo g$&syntax-rtd$7151$MT&Mo g$5960$6864$MT&Mo)
   (g$&syntax-rcd$6877$MT&Mo g$&syntax-rcd$7152$MT&Mo g$5961$6866$MT&Mo)
   (g$5977$6878$MT&Mo
     g$5977$7153$MT&Mo
     (make-record-type-descriptor
       '&undefined
       g$5865$6786$MT&Mo
       'g$5980$MT&Mo
       '#f
       '#f
       '#()))
   (g$5979$6879$MT&Mo g$5979$7154$MT&Mo '#f)
   (g$5978$6880$MT&Mo
     g$5978$7155$MT&Mo
     (make-record-constructor-descriptor
       g$5977$6878$MT&Mo
       g$5866$6788$MT&Mo
       g$5979$6879$MT&Mo))
   (g$p?$6883$MT&Mo
     g$p?$7156$MT&Mo
     (record-predicate g$5977$6878$MT&Mo))
   (g$make-undefined-violation$6884$MT&Mo
     g$make-undefined-violation$7157$MT&Mo
     (record-constructor g$5978$6880$MT&Mo))
   (g$undefined-violation?$6885$MT&Mo
     g$undefined-violation?$7158$MT&Mo
     (condition-predicate g$5977$6878$MT&Mo))
   (g$&undefined-rtd$6886$MT&Mo
     g$&undefined-rtd$7159$MT&Mo
     g$5977$6878$MT&Mo)
   (g$&undefined-rcd$6887$MT&Mo
     g$&undefined-rcd$7160$MT&Mo
     g$5978$6880$MT&Mo)
   (g$5990$6888$MT&Mo
     g$5990$7161$MT&Mo
     (make-record-type-descriptor
       '&i/o
       g$5852$6776$MT&Mo
       'g$5993$MT&Mo
       '#f
       '#f
       '#()))
   (g$5992$6889$MT&Mo g$5992$7162$MT&Mo '#f)
   (g$5991$6890$MT&Mo
     g$5991$7163$MT&Mo
     (make-record-constructor-descriptor
       g$5990$6888$MT&Mo
       g$5853$6778$MT&Mo
       g$5992$6889$MT&Mo))
   (g$p?$6893$MT&Mo
     g$p?$7164$MT&Mo
     (record-predicate g$5990$6888$MT&Mo))
   (g$make-i/o-error$6894$MT&Mo
     g$make-i/o-error$7165$MT&Mo
     (record-constructor g$5991$6890$MT&Mo))
   (g$i/o-error?$6895$MT&Mo
     g$i/o-error?$7166$MT&Mo
     (condition-predicate g$5990$6888$MT&Mo))
   (g$&i/o-rtd$6896$MT&Mo g$&i/o-rtd$7167$MT&Mo g$5990$6888$MT&Mo)
   (g$&i/o-rcd$6897$MT&Mo g$&i/o-rcd$7168$MT&Mo g$5991$6890$MT&Mo)
   (g$6003$6898$MT&Mo
     g$6003$7169$MT&Mo
     (make-record-type-descriptor
       '&i/o-read
       g$5990$6888$MT&Mo
       'g$6006$MT&Mo
       '#f
       '#f
       '#()))
   (g$6005$6899$MT&Mo g$6005$7170$MT&Mo '#f)
   (g$6004$6900$MT&Mo
     g$6004$7171$MT&Mo
     (make-record-constructor-descriptor
       g$6003$6898$MT&Mo
       g$5991$6890$MT&Mo
       g$6005$6899$MT&Mo))
   (g$p?$6903$MT&Mo
     g$p?$7172$MT&Mo
     (record-predicate g$6003$6898$MT&Mo))
   (g$make-i/o-read-error$6904$MT&Mo
     g$make-i/o-read-error$7173$MT&Mo
     (record-constructor g$6004$6900$MT&Mo))
   (g$i/o-read-error?$6905$MT&Mo
     g$i/o-read-error?$7174$MT&Mo
     (condition-predicate g$6003$6898$MT&Mo))
   (g$&i/o-read-rtd$6906$MT&Mo
     g$&i/o-read-rtd$7175$MT&Mo
     g$6003$6898$MT&Mo)
   (g$&i/o-read-rcd$6907$MT&Mo
     g$&i/o-read-rcd$7176$MT&Mo
     g$6004$6900$MT&Mo)
   (g$6016$6908$MT&Mo
     g$6016$7177$MT&Mo
     (make-record-type-descriptor
       '&i/o-write
       g$5990$6888$MT&Mo
       'g$6019$MT&Mo
       '#f
       '#f
       '#()))
   (g$6018$6909$MT&Mo g$6018$7178$MT&Mo '#f)
   (g$6017$6910$MT&Mo
     g$6017$7179$MT&Mo
     (make-record-constructor-descriptor
       g$6016$6908$MT&Mo
       g$5991$6890$MT&Mo
       g$6018$6909$MT&Mo))
   (g$p?$6913$MT&Mo
     g$p?$7180$MT&Mo
     (record-predicate g$6016$6908$MT&Mo))
   (g$make-i/o-write-error$6914$MT&Mo
     g$make-i/o-write-error$7181$MT&Mo
     (record-constructor g$6017$6910$MT&Mo))
   (g$i/o-write-error?$6915$MT&Mo
     g$i/o-write-error?$7182$MT&Mo
     (condition-predicate g$6016$6908$MT&Mo))
   (g$&i/o-write-rtd$6916$MT&Mo
     g$&i/o-write-rtd$7183$MT&Mo
     g$6016$6908$MT&Mo)
   (g$&i/o-write-rcd$6917$MT&Mo
     g$&i/o-write-rcd$7184$MT&Mo
     g$6017$6910$MT&Mo)
   (g$6029$6919$MT&Mo
     g$6029$7185$MT&Mo
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$5990$6888$MT&Mo
       'g$6032$MT&Mo
       '#f
       '#f
       '#((immutable position))))
   (g$6031$6920$MT&Mo g$6031$7186$MT&Mo '#f)
   (g$6030$6921$MT&Mo
     g$6030$7187$MT&Mo
     (make-record-constructor-descriptor
       g$6029$6919$MT&Mo
       g$5991$6890$MT&Mo
       g$6031$6920$MT&Mo))
   (g$p?$6924$MT&Mo
     g$p?$7188$MT&Mo
     (record-predicate g$6029$6919$MT&Mo))
   (g$make-i/o-invalid-position-error$6925$MT&Mo
     g$make-i/o-invalid-position-error$7189$MT&Mo
     (record-constructor g$6030$6921$MT&Mo))
   (g$i/o-error-position$6926$MT&Mo
     g$i/o-error-position$7190$MT&Mo
     (record-accessor g$6029$6919$MT&Mo '0))
   (g$i/o-invalid-position-error?$6927$MT&Mo
     g$i/o-invalid-position-error?$7191$MT&Mo
     (condition-predicate g$6029$6919$MT&Mo))
   (g$i/o-error-position$6928$MT&Mo
     g$i/o-error-position$7192$MT&Mo
     (condition-accessor
       g$6029$6919$MT&Mo
       g$i/o-error-position$6926$MT&Mo))
   (g$&i/o-invalid-position-rtd$6929$MT&Mo
     g$&i/o-invalid-position-rtd$7193$MT&Mo
     g$6029$6919$MT&Mo)
   (g$&i/o-invalid-position-rcd$6930$MT&Mo
     g$&i/o-invalid-position-rcd$7194$MT&Mo
     g$6030$6921$MT&Mo)
   (g$6044$6932$MT&Mo
     g$6044$7195$MT&Mo
     (make-record-type-descriptor
       '&i/o-filename
       g$5990$6888$MT&Mo
       'g$6047$MT&Mo
       '#f
       '#f
       '#((immutable filename))))
   (g$6046$6933$MT&Mo g$6046$7196$MT&Mo '#f)
   (g$6045$6934$MT&Mo
     g$6045$7197$MT&Mo
     (make-record-constructor-descriptor
       g$6044$6932$MT&Mo
       g$5991$6890$MT&Mo
       g$6046$6933$MT&Mo))
   (g$p?$6937$MT&Mo
     g$p?$7198$MT&Mo
     (record-predicate g$6044$6932$MT&Mo))
   (g$make-i/o-filename-error$6938$MT&Mo
     g$make-i/o-filename-error$7199$MT&Mo
     (record-constructor g$6045$6934$MT&Mo))
   (g$i/o-error-filename$6939$MT&Mo
     g$i/o-error-filename$7200$MT&Mo
     (record-accessor g$6044$6932$MT&Mo '0))
   (g$i/o-filename-error?$6940$MT&Mo
     g$i/o-filename-error?$7201$MT&Mo
     (condition-predicate g$6044$6932$MT&Mo))
   (g$i/o-error-filename$6941$MT&Mo
     g$i/o-error-filename$7202$MT&Mo
     (condition-accessor
       g$6044$6932$MT&Mo
       g$i/o-error-filename$6939$MT&Mo))
   (g$&i/o-filename-rtd$6942$MT&Mo
     g$&i/o-filename-rtd$7203$MT&Mo
     g$6044$6932$MT&Mo)
   (g$&i/o-filename-rcd$6943$MT&Mo
     g$&i/o-filename-rcd$7204$MT&Mo
     g$6045$6934$MT&Mo)
   (g$6059$6944$MT&Mo
     g$6059$7205$MT&Mo
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6044$6932$MT&Mo
       'g$6062$MT&Mo
       '#f
       '#f
       '#()))
   (g$6061$6945$MT&Mo g$6061$7206$MT&Mo '#f)
   (g$6060$6946$MT&Mo
     g$6060$7207$MT&Mo
     (make-record-constructor-descriptor
       g$6059$6944$MT&Mo
       g$6045$6934$MT&Mo
       g$6061$6945$MT&Mo))
   (g$p?$6949$MT&Mo
     g$p?$7208$MT&Mo
     (record-predicate g$6059$6944$MT&Mo))
   (g$make-i/o-file-protection-error$6950$MT&Mo
     g$make-i/o-file-protection-error$7209$MT&Mo
     (record-constructor g$6060$6946$MT&Mo))
   (g$i/o-file-protection-error?$6951$MT&Mo
     g$i/o-file-protection-error?$7210$MT&Mo
     (condition-predicate g$6059$6944$MT&Mo))
   (g$&i/o-file-protection-rtd$6952$MT&Mo
     g$&i/o-file-protection-rtd$7211$MT&Mo
     g$6059$6944$MT&Mo)
   (g$&i/o-file-protection-rcd$6953$MT&Mo
     g$&i/o-file-protection-rcd$7212$MT&Mo
     g$6060$6946$MT&Mo)
   (g$6072$6954$MT&Mo
     g$6072$7213$MT&Mo
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6059$6944$MT&Mo
       'g$6075$MT&Mo
       '#f
       '#f
       '#()))
   (g$6074$6955$MT&Mo g$6074$7214$MT&Mo '#f)
   (g$6073$6956$MT&Mo
     g$6073$7215$MT&Mo
     (make-record-constructor-descriptor
       g$6072$6954$MT&Mo
       g$6060$6946$MT&Mo
       g$6074$6955$MT&Mo))
   (g$p?$6959$MT&Mo
     g$p?$7216$MT&Mo
     (record-predicate g$6072$6954$MT&Mo))
   (g$make-i/o-file-is-read-only-error$6960$MT&Mo
     g$make-i/o-file-is-read-only-error$7217$MT&Mo
     (record-constructor g$6073$6956$MT&Mo))
   (g$i/o-file-is-read-only-error?$6961$MT&Mo
     g$i/o-file-is-read-only-error?$7218$MT&Mo
     (condition-predicate g$6072$6954$MT&Mo))
   (g$&i/o-file-is-read-only-rtd$6962$MT&Mo
     g$&i/o-file-is-read-only-rtd$7219$MT&Mo
     g$6072$6954$MT&Mo)
   (g$&i/o-file-is-read-only-rcd$6963$MT&Mo
     g$&i/o-file-is-read-only-rcd$7220$MT&Mo
     g$6073$6956$MT&Mo)
   (g$6085$6964$MT&Mo
     g$6085$7221$MT&Mo
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6044$6932$MT&Mo
       'g$6088$MT&Mo
       '#f
       '#f
       '#()))
   (g$6087$6965$MT&Mo g$6087$7222$MT&Mo '#f)
   (g$6086$6966$MT&Mo
     g$6086$7223$MT&Mo
     (make-record-constructor-descriptor
       g$6085$6964$MT&Mo
       g$6045$6934$MT&Mo
       g$6087$6965$MT&Mo))
   (g$p?$6969$MT&Mo
     g$p?$7224$MT&Mo
     (record-predicate g$6085$6964$MT&Mo))
   (g$make-i/o-file-already-exists-error$6970$MT&Mo
     g$make-i/o-file-already-exists-error$7225$MT&Mo
     (record-constructor g$6086$6966$MT&Mo))
   (g$i/o-file-already-exists-error?$6971$MT&Mo
     g$i/o-file-already-exists-error?$7226$MT&Mo
     (condition-predicate g$6085$6964$MT&Mo))
   (g$&i/o-file-already-exists-rtd$6972$MT&Mo
     g$&i/o-file-already-exists-rtd$7227$MT&Mo
     g$6085$6964$MT&Mo)
   (g$&i/o-file-already-exists-rcd$6973$MT&Mo
     g$&i/o-file-already-exists-rcd$7228$MT&Mo
     g$6086$6966$MT&Mo)
   (g$6098$6974$MT&Mo
     g$6098$7229$MT&Mo
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6044$6932$MT&Mo
       'g$6101$MT&Mo
       '#f
       '#f
       '#()))
   (g$6100$6975$MT&Mo g$6100$7230$MT&Mo '#f)
   (g$6099$6976$MT&Mo
     g$6099$7231$MT&Mo
     (make-record-constructor-descriptor
       g$6098$6974$MT&Mo
       g$6045$6934$MT&Mo
       g$6100$6975$MT&Mo))
   (g$p?$6979$MT&Mo
     g$p?$7232$MT&Mo
     (record-predicate g$6098$6974$MT&Mo))
   (g$make-i/o-file-does-not-exist-error$6980$MT&Mo
     g$make-i/o-file-does-not-exist-error$7233$MT&Mo
     (record-constructor g$6099$6976$MT&Mo))
   (g$i/o-file-does-not-exist-error?$6981$MT&Mo
     g$i/o-file-does-not-exist-error?$7234$MT&Mo
     (condition-predicate g$6098$6974$MT&Mo))
   (g$&i/o-file-does-not-exist-rtd$6982$MT&Mo
     g$&i/o-file-does-not-exist-rtd$7235$MT&Mo
     g$6098$6974$MT&Mo)
   (g$&i/o-file-does-not-exist-rcd$6983$MT&Mo
     g$&i/o-file-does-not-exist-rcd$7236$MT&Mo
     g$6099$6976$MT&Mo)
   (g$6111$6985$MT&Mo
     g$6111$7237$MT&Mo
     (make-record-type-descriptor
       '&i/o-port
       g$5990$6888$MT&Mo
       'g$6114$MT&Mo
       '#f
       '#f
       '#((immutable port))))
   (g$6113$6986$MT&Mo g$6113$7238$MT&Mo '#f)
   (g$6112$6987$MT&Mo
     g$6112$7239$MT&Mo
     (make-record-constructor-descriptor
       g$6111$6985$MT&Mo
       g$5991$6890$MT&Mo
       g$6113$6986$MT&Mo))
   (g$p?$6990$MT&Mo
     g$p?$7240$MT&Mo
     (record-predicate g$6111$6985$MT&Mo))
   (g$make-i/o-port-error$6991$MT&Mo
     g$make-i/o-port-error$7241$MT&Mo
     (record-constructor g$6112$6987$MT&Mo))
   (g$i/o-error-port$6992$MT&Mo
     g$i/o-error-port$7242$MT&Mo
     (record-accessor g$6111$6985$MT&Mo '0))
   (g$i/o-port-error?$6993$MT&Mo
     g$i/o-port-error?$7243$MT&Mo
     (condition-predicate g$6111$6985$MT&Mo))
   (g$i/o-error-port$6994$MT&Mo
     g$i/o-error-port$7244$MT&Mo
     (condition-accessor g$6111$6985$MT&Mo g$i/o-error-port$6992$MT&Mo))
   (g$&i/o-port-rtd$6995$MT&Mo
     g$&i/o-port-rtd$7245$MT&Mo
     g$6111$6985$MT&Mo)
   (g$&i/o-port-rcd$6996$MT&Mo
     g$&i/o-port-rcd$7246$MT&Mo
     g$6112$6987$MT&Mo)
   (g$6126$6997$MT&Mo
     g$6126$7247$MT&Mo
     (make-record-type-descriptor
       '&i/o-decoding
       g$6111$6985$MT&Mo
       'g$6129$MT&Mo
       '#f
       '#f
       '#()))
   (g$6128$6998$MT&Mo g$6128$7248$MT&Mo '#f)
   (g$6127$6999$MT&Mo
     g$6127$7249$MT&Mo
     (make-record-constructor-descriptor
       g$6126$6997$MT&Mo
       g$6112$6987$MT&Mo
       g$6128$6998$MT&Mo))
   (g$p?$7002$MT&Mo
     g$p?$7250$MT&Mo
     (record-predicate g$6126$6997$MT&Mo))
   (g$make-i/o-decoding-error$7003$MT&Mo
     g$make-i/o-decoding-error$7251$MT&Mo
     (record-constructor g$6127$6999$MT&Mo))
   (g$i/o-decoding-error?$7004$MT&Mo
     g$i/o-decoding-error?$7252$MT&Mo
     (condition-predicate g$6126$6997$MT&Mo))
   (g$&i/o-decoding-rtd$7005$MT&Mo
     g$&i/o-decoding-rtd$7253$MT&Mo
     g$6126$6997$MT&Mo)
   (g$&i/o-decoding-rcd$7006$MT&Mo
     g$&i/o-decoding-rcd$7254$MT&Mo
     g$6127$6999$MT&Mo)
   (g$6139$7008$MT&Mo
     g$6139$7255$MT&Mo
     (make-record-type-descriptor
       '&i/o-encoding
       g$6111$6985$MT&Mo
       'g$6142$MT&Mo
       '#f
       '#f
       '#((immutable char))))
   (g$6141$7009$MT&Mo g$6141$7256$MT&Mo '#f)
   (g$6140$7010$MT&Mo
     g$6140$7257$MT&Mo
     (make-record-constructor-descriptor
       g$6139$7008$MT&Mo
       g$6112$6987$MT&Mo
       g$6141$7009$MT&Mo))
   (g$p?$7013$MT&Mo
     g$p?$7258$MT&Mo
     (record-predicate g$6139$7008$MT&Mo))
   (g$make-i/o-encoding-error$7014$MT&Mo
     g$make-i/o-encoding-error$7259$MT&Mo
     (record-constructor g$6140$7010$MT&Mo))
   (g$i/o-encoding-error-char$7015$MT&Mo
     g$i/o-encoding-error-char$7260$MT&Mo
     (record-accessor g$6139$7008$MT&Mo '0))
   (g$i/o-encoding-error?$7016$MT&Mo
     g$i/o-encoding-error?$7261$MT&Mo
     (condition-predicate g$6139$7008$MT&Mo))
   (g$i/o-encoding-error-char$7017$MT&Mo
     g$i/o-encoding-error-char$7262$MT&Mo
     (condition-accessor
       g$6139$7008$MT&Mo
       g$i/o-encoding-error-char$7015$MT&Mo))
   (g$&i/o-encoding-rtd$7018$MT&Mo
     g$&i/o-encoding-rtd$7263$MT&Mo
     g$6139$7008$MT&Mo)
   (g$&i/o-encoding-rcd$7019$MT&Mo
     g$&i/o-encoding-rcd$7264$MT&Mo
     g$6140$7010$MT&Mo)
   (g$6154$7020$MT&Mo
     g$6154$7265$MT&Mo
     (make-record-type-descriptor
       '&no-infinities
       g$5934$6842$MT&Mo
       'g$6157$MT&Mo
       '#f
       '#f
       '#()))
   (g$6156$7021$MT&Mo g$6156$7266$MT&Mo '#f)
   (g$6155$7022$MT&Mo
     g$6155$7267$MT&Mo
     (make-record-constructor-descriptor
       g$6154$7020$MT&Mo
       g$5935$6844$MT&Mo
       g$6156$7021$MT&Mo))
   (g$p?$7025$MT&Mo
     g$p?$7268$MT&Mo
     (record-predicate g$6154$7020$MT&Mo))
   (g$make-no-infinities-violation$7026$MT&Mo
     g$make-no-infinities-violation$7269$MT&Mo
     (record-constructor g$6155$7022$MT&Mo))
   (g$no-infinities-violation?$7027$MT&Mo
     g$no-infinities-violation?$7270$MT&Mo
     (condition-predicate g$6154$7020$MT&Mo))
   (g$&no-infinities-rtd$7028$MT&Mo
     g$&no-infinities-rtd$7271$MT&Mo
     g$6154$7020$MT&Mo)
   (g$&no-infinities-rcd$7029$MT&Mo
     g$&no-infinities-rcd$7272$MT&Mo
     g$6155$7022$MT&Mo)
   (g$6167$7030$MT&Mo
     g$6167$7273$MT&Mo
     (make-record-type-descriptor
       '&no-nans
       g$5934$6842$MT&Mo
       'g$6170$MT&Mo
       '#f
       '#f
       '#()))
   (g$6169$7031$MT&Mo g$6169$7274$MT&Mo '#f)
   (g$6168$7032$MT&Mo
     g$6168$7275$MT&Mo
     (make-record-constructor-descriptor
       g$6167$7030$MT&Mo
       g$5935$6844$MT&Mo
       g$6169$7031$MT&Mo))
   (g$p?$7035$MT&Mo
     g$p?$7276$MT&Mo
     (record-predicate g$6167$7030$MT&Mo))
   (g$make-no-nans-violation$7036$MT&Mo
     g$make-no-nans-violation$7277$MT&Mo
     (record-constructor g$6168$7032$MT&Mo))
   (g$no-nans-violation?$7037$MT&Mo
     g$no-nans-violation?$7278$MT&Mo
     (condition-predicate g$6167$7030$MT&Mo))
   (g$&no-nans-rtd$7038$MT&Mo
     g$&no-nans-rtd$7279$MT&Mo
     g$6167$7030$MT&Mo)
   (g$&no-nans-rcd$7039$MT&Mo
     g$&no-nans-rcd$7280$MT&Mo
     g$6168$7032$MT&Mo))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$7281$MT&Mo
     g$append!$7287$MT&Mo
     (case-lambda
       ((g$a$7282$MT&Mo . g$b$7283$MT&Mo)
        (if (null? g$a$7282$MT&Mo)
          g$b$7283$MT&Mo
          (if (null? g$b$7283$MT&Mo)
            g$a$7282$MT&Mo
            (begin
              ((letrec ((g$f$7284$MT&Mo
                          (case-lambda
                            ((g$a$7285$MT&Mo)
                             ((case-lambda
                                ((g$n$7286$MT&Mo)
                                 (if (null? g$n$7286$MT&Mo)
                                   (set-cdr!
                                     g$a$7285$MT&Mo
                                     g$b$7283$MT&Mo)
                                   (g$f$7284$MT&Mo g$n$7286$MT&Mo))))
                              (cdr g$a$7285$MT&Mo))))))
                 g$f$7284$MT&Mo)
               g$a$7282$MT&Mo)
              g$a$7282$MT&Mo)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$7288$MT&Mo g$inexact->exact$7308$MT&Mo exact)
   (g$exact->inexact$7289$MT&Mo g$exact->inexact$7309$MT&Mo inexact)
   (g$sign$7290$MT&Mo
     g$sign$7310$MT&Mo
     (case-lambda
       ((g$n$7296$MT&Mo)
        (if (> g$n$7296$MT&Mo '0)
          '1
          (if (< g$n$7296$MT&Mo '0) '-1 '0)))))
   (g$quotient$7291$MT&Mo
     g$quotient$7311$MT&Mo
     (case-lambda
       ((g$n1$7297$MT&Mo g$n2$7298$MT&Mo)
        (begin
          (if (not (integer-valued? g$n1$7297$MT&Mo))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n1$7297$MT&Mo)
            (void))
          (if (not (integer-valued? g$n2$7298$MT&Mo))
            (assertion-violation
              'quotient
              '"not an integer"
              g$n2$7298$MT&Mo)
            (void))
          (* (g$sign$7290$MT&Mo g$n1$7297$MT&Mo)
             (g$sign$7290$MT&Mo g$n2$7298$MT&Mo)
             (div (abs g$n1$7297$MT&Mo) (abs g$n2$7298$MT&Mo)))))))
   (g$remainder$7292$MT&Mo
     g$remainder$7312$MT&Mo
     (case-lambda
       ((g$n1$7299$MT&Mo g$n2$7300$MT&Mo)
        (begin
          (if (not (integer-valued? g$n1$7299$MT&Mo))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n1$7299$MT&Mo)
            (void))
          (if (not (integer-valued? g$n2$7300$MT&Mo))
            (assertion-violation
              'remainder
              '"not an integer"
              g$n2$7300$MT&Mo)
            (void))
          (* (g$sign$7290$MT&Mo g$n1$7299$MT&Mo)
             (g$mod$6393$MT&Mo
               (abs g$n1$7299$MT&Mo)
               (abs g$n2$7300$MT&Mo)))))))
   (g$modulo$7293$MT&Mo
     g$modulo$7313$MT&Mo
     (case-lambda
       ((g$n1$7301$MT&Mo g$n2$7302$MT&Mo)
        (begin
          (if (not (integer-valued? g$n1$7301$MT&Mo))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n1$7301$MT&Mo)
            (void))
          (if (not (integer-valued? g$n2$7302$MT&Mo))
            (assertion-violation
              'modulo
              '"not an integer"
              g$n2$7302$MT&Mo)
            (void))
          (* (g$sign$7290$MT&Mo g$n2$7302$MT&Mo)
             (g$mod$6393$MT&Mo
               (* (g$sign$7290$MT&Mo g$n2$7302$MT&Mo) g$n1$7301$MT&Mo)
               (abs g$n2$7302$MT&Mo)))))))
   (g$make-promise$7294$MT&Mo
     g$make-promise$7314$MT&Mo
     (case-lambda
       ((g$proc$7303$MT&Mo)
        ((case-lambda
           ((g$result-ready?$7304$MT&Mo g$result$7305$MT&Mo)
            (case-lambda
              (()
               (if g$result-ready?$7304$MT&Mo
                 g$result$7305$MT&Mo
                 ((case-lambda
                    ((g$x$7306$MT&Mo)
                     (if g$result-ready?$7304$MT&Mo
                       g$result$7305$MT&Mo
                       (begin
                         (set! g$result-ready?$7304$MT&Mo '#t)
                         (set! g$result$7305$MT&Mo g$x$7306$MT&Mo)
                         g$result$7305$MT&Mo))))
                  (g$proc$7303$MT&Mo)))))))
         '#f
         '#f))))
   (g$force$7295$MT&Mo
     g$force$7315$MT&Mo
     (case-lambda ((g$object$7307$MT&Mo) (g$object$7307$MT&Mo)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$7316$MT&Mo
     g$split$7341$MT&Mo
     (case-lambda
       ((g$ls$7320$MT&Mo)
        ((letrec ((g$loop$7321$MT&Mo
                    (case-lambda
                      ((g$rest$7322$MT&Mo
                         g$left$7323$MT&Mo
                         g$right$7324$MT&Mo)
                       (if (null? g$rest$7322$MT&Mo)
                         (cons g$left$7323$MT&Mo g$right$7324$MT&Mo)
                         (if (null? (cdr g$rest$7322$MT&Mo))
                           (cons
                             (cons
                               (car g$rest$7322$MT&Mo)
                               g$left$7323$MT&Mo)
                             g$right$7324$MT&Mo)
                           (g$loop$7321$MT&Mo
                             (g$cddr$6413$MT&Mo g$rest$7322$MT&Mo)
                             (cons
                               (car g$rest$7322$MT&Mo)
                               g$left$7323$MT&Mo)
                             (cons
                               (g$cadr$6411$MT&Mo g$rest$7322$MT&Mo)
                               g$right$7324$MT&Mo))))))))
           g$loop$7321$MT&Mo)
         g$ls$7320$MT&Mo
         '()
         '()))))
   (g$reverse-it$7317$MT&Mo
     g$reverse-it$7342$MT&Mo
     (case-lambda
       ((g$head$7325$MT&Mo g$tail$7326$MT&Mo)
        (if (null? g$head$7325$MT&Mo)
          g$tail$7326$MT&Mo
          (g$reverse-it$7317$MT&Mo
            (cdr g$head$7325$MT&Mo)
            (cons (car g$head$7325$MT&Mo) g$tail$7326$MT&Mo))))))
   (g$merge$7318$MT&Mo
     g$merge$7343$MT&Mo
     (case-lambda
       ((g$list-1$7327$MT&Mo g$list-2$7328$MT&Mo g$precedes?$7329$MT&Mo)
        ((letrec ((g$loop$7330$MT&Mo
                    (case-lambda
                      ((g$source-1$7331$MT&Mo
                         g$source-2$7332$MT&Mo
                         g$so-far$7333$MT&Mo)
                       (if (null? g$source-1$7331$MT&Mo)
                         (g$reverse-it$7317$MT&Mo
                           g$so-far$7333$MT&Mo
                           g$source-2$7332$MT&Mo)
                         (if (null? g$source-2$7332$MT&Mo)
                           (g$reverse-it$7317$MT&Mo
                             g$so-far$7333$MT&Mo
                             g$source-1$7331$MT&Mo)
                           ((case-lambda
                              ((g$car-1$7334$MT&Mo g$car-2$7335$MT&Mo)
                               (if (g$precedes?$7329$MT&Mo
                                     g$car-2$7335$MT&Mo
                                     g$car-1$7334$MT&Mo)
                                 (g$loop$7330$MT&Mo
                                   g$source-1$7331$MT&Mo
                                   (cdr g$source-2$7332$MT&Mo)
                                   (cons
                                     g$car-2$7335$MT&Mo
                                     g$so-far$7333$MT&Mo))
                                 (g$loop$7330$MT&Mo
                                   g$source-2$7332$MT&Mo
                                   (cdr g$source-1$7331$MT&Mo)
                                   (cons
                                     g$car-1$7334$MT&Mo
                                     g$so-far$7333$MT&Mo)))))
                            (car g$source-1$7331$MT&Mo)
                            (car g$source-2$7332$MT&Mo))))))))
           g$loop$7330$MT&Mo)
         g$list-1$7327$MT&Mo
         g$list-2$7328$MT&Mo
         '()))))
   (g$list-sort$7319$MT&Mo
     g$list-sort$7344$MT&Mo
     (case-lambda
       ((g$precedes?$7336$MT&Mo g$ls$7337$MT&Mo)
        (if (null? g$ls$7337$MT&Mo)
          '()
          ((letrec ((g$helper$7338$MT&Mo
                      (case-lambda
                        ((g$piece$7339$MT&Mo)
                         (if (null? (cdr g$piece$7339$MT&Mo))
                           g$piece$7339$MT&Mo
                           ((case-lambda
                              ((g$parts$7340$MT&Mo)
                               (g$merge$7318$MT&Mo
                                 (g$helper$7338$MT&Mo
                                   (car g$parts$7340$MT&Mo))
                                 (g$helper$7338$MT&Mo
                                   (cdr g$parts$7340$MT&Mo))
                                 g$precedes?$7336$MT&Mo)))
                            (g$split$7316$MT&Mo
                              g$piece$7339$MT&Mo)))))))
             g$helper$7338$MT&Mo)
           g$ls$7337$MT&Mo))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$7380$MT&Mo
     g$string-ci=?$7483$MT&Mo
     (case-lambda
       ((g$a$7429$MT&Mo g$b$7430$MT&Mo . g$rest$7431$MT&Mo)
        (begin
          (if (not (string? g$a$7429$MT&Mo))
            (assertion-violation
              'string-ci=?
              '"not a string"
              g$a$7429$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7432$MT&Mo)
               (begin
                 (if (not (string? g$x$7432$MT&Mo))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$7432$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7433$MT&Mo)
                     (begin
                       (set! g$a$7429$MT&Mo g$x$7432$MT&Mo)
                       g$r$7433$MT&Mo)))
                  (= (string-ci-compare g$a$7429$MT&Mo g$x$7432$MT&Mo)
                     '0)))))
            (cons g$b$7430$MT&Mo g$rest$7431$MT&Mo))))))
   (g$string-ci<?$7381$MT&Mo
     g$string-ci<?$7484$MT&Mo
     (case-lambda
       ((g$a$7434$MT&Mo g$b$7435$MT&Mo . g$rest$7436$MT&Mo)
        (begin
          (if (not (string? g$a$7434$MT&Mo))
            (assertion-violation
              'string-ci<?
              '"not a string"
              g$a$7434$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7437$MT&Mo)
               (begin
                 (if (not (string? g$x$7437$MT&Mo))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$7437$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7438$MT&Mo)
                     (begin
                       (set! g$a$7434$MT&Mo g$x$7437$MT&Mo)
                       g$r$7438$MT&Mo)))
                  (< (string-ci-compare g$a$7434$MT&Mo g$x$7437$MT&Mo)
                     '0)))))
            (cons g$b$7435$MT&Mo g$rest$7436$MT&Mo))))))
   (g$string-ci>?$7382$MT&Mo
     g$string-ci>?$7485$MT&Mo
     (case-lambda
       ((g$a$7439$MT&Mo g$b$7440$MT&Mo . g$rest$7441$MT&Mo)
        (begin
          (if (not (string? g$a$7439$MT&Mo))
            (assertion-violation
              'string-ci>?
              '"not a string"
              g$a$7439$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7442$MT&Mo)
               (begin
                 (if (not (string? g$x$7442$MT&Mo))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$7442$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7443$MT&Mo)
                     (begin
                       (set! g$a$7439$MT&Mo g$x$7442$MT&Mo)
                       g$r$7443$MT&Mo)))
                  (> (string-ci-compare g$a$7439$MT&Mo g$x$7442$MT&Mo)
                     '0)))))
            (cons g$b$7440$MT&Mo g$rest$7441$MT&Mo))))))
   (g$string-ci<=?$7383$MT&Mo
     g$string-ci<=?$7486$MT&Mo
     (case-lambda
       ((g$a$7444$MT&Mo g$b$7445$MT&Mo . g$rest$7446$MT&Mo)
        (begin
          (if (not (string? g$a$7444$MT&Mo))
            (assertion-violation
              'string-ci<=?
              '"not a string"
              g$a$7444$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7447$MT&Mo)
               (begin
                 (if (not (string? g$x$7447$MT&Mo))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$7447$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7448$MT&Mo)
                     (begin
                       (set! g$a$7444$MT&Mo g$x$7447$MT&Mo)
                       g$r$7448$MT&Mo)))
                  (<= (string-ci-compare g$a$7444$MT&Mo g$x$7447$MT&Mo)
                      '0)))))
            (cons g$b$7445$MT&Mo g$rest$7446$MT&Mo))))))
   (g$string-ci>=?$7384$MT&Mo
     g$string-ci>=?$7487$MT&Mo
     (case-lambda
       ((g$a$7449$MT&Mo g$b$7450$MT&Mo . g$rest$7451$MT&Mo)
        (begin
          (if (not (string? g$a$7449$MT&Mo))
            (assertion-violation
              'string-ci>=?
              '"not a string"
              g$a$7449$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7452$MT&Mo)
               (begin
                 (if (not (string? g$x$7452$MT&Mo))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$7452$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7453$MT&Mo)
                     (begin
                       (set! g$a$7449$MT&Mo g$x$7452$MT&Mo)
                       g$r$7453$MT&Mo)))
                  (>= (string-ci-compare g$a$7449$MT&Mo g$x$7452$MT&Mo)
                      '0)))))
            (cons g$b$7450$MT&Mo g$rest$7451$MT&Mo))))))
   (g$char-ci=?$7420$MT&Mo
     g$char-ci=?$7488$MT&Mo
     (case-lambda
       ((g$a$7454$MT&Mo g$b$7455$MT&Mo . g$rest$7456$MT&Mo)
        (begin
          (if (not (g$char?$6399$MT&Mo g$a$7454$MT&Mo))
            (assertion-violation
              'char-ci=?
              '"not a char"
              g$a$7454$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7457$MT&Mo)
               (begin
                 (if (not (g$char?$6399$MT&Mo g$x$7457$MT&Mo))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$7457$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7458$MT&Mo)
                     (begin
                       (set! g$a$7454$MT&Mo g$x$7457$MT&Mo)
                       g$r$7458$MT&Mo)))
                  (= (char->integer (char-upcase g$a$7454$MT&Mo))
                     (char->integer (char-upcase g$x$7457$MT&Mo)))))))
            (cons g$b$7455$MT&Mo g$rest$7456$MT&Mo))))))
   (g$char-ci<?$7421$MT&Mo
     g$char-ci<?$7489$MT&Mo
     (case-lambda
       ((g$a$7459$MT&Mo g$b$7460$MT&Mo . g$rest$7461$MT&Mo)
        (begin
          (if (not (g$char?$6399$MT&Mo g$a$7459$MT&Mo))
            (assertion-violation
              'char-ci<?
              '"not a char"
              g$a$7459$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7462$MT&Mo)
               (begin
                 (if (not (g$char?$6399$MT&Mo g$x$7462$MT&Mo))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$7462$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7463$MT&Mo)
                     (begin
                       (set! g$a$7459$MT&Mo g$x$7462$MT&Mo)
                       g$r$7463$MT&Mo)))
                  (< (char->integer (char-upcase g$a$7459$MT&Mo))
                     (char->integer (char-upcase g$x$7462$MT&Mo)))))))
            (cons g$b$7460$MT&Mo g$rest$7461$MT&Mo))))))
   (g$char-ci>?$7422$MT&Mo
     g$char-ci>?$7490$MT&Mo
     (case-lambda
       ((g$a$7464$MT&Mo g$b$7465$MT&Mo . g$rest$7466$MT&Mo)
        (begin
          (if (not (g$char?$6399$MT&Mo g$a$7464$MT&Mo))
            (assertion-violation
              'char-ci>?
              '"not a char"
              g$a$7464$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7467$MT&Mo)
               (begin
                 (if (not (g$char?$6399$MT&Mo g$x$7467$MT&Mo))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$7467$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7468$MT&Mo)
                     (begin
                       (set! g$a$7464$MT&Mo g$x$7467$MT&Mo)
                       g$r$7468$MT&Mo)))
                  (> (char->integer (char-upcase g$a$7464$MT&Mo))
                     (char->integer (char-upcase g$x$7467$MT&Mo)))))))
            (cons g$b$7465$MT&Mo g$rest$7466$MT&Mo))))))
   (g$char-ci<=?$7423$MT&Mo
     g$char-ci<=?$7491$MT&Mo
     (case-lambda
       ((g$a$7469$MT&Mo g$b$7470$MT&Mo . g$rest$7471$MT&Mo)
        (begin
          (if (not (g$char?$6399$MT&Mo g$a$7469$MT&Mo))
            (assertion-violation
              'char-ci<=?
              '"not a char"
              g$a$7469$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7472$MT&Mo)
               (begin
                 (if (not (g$char?$6399$MT&Mo g$x$7472$MT&Mo))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$7472$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7473$MT&Mo)
                     (begin
                       (set! g$a$7469$MT&Mo g$x$7472$MT&Mo)
                       g$r$7473$MT&Mo)))
                  (<= (char->integer (char-upcase g$a$7469$MT&Mo))
                      (char->integer (char-upcase g$x$7472$MT&Mo)))))))
            (cons g$b$7470$MT&Mo g$rest$7471$MT&Mo))))))
   (g$char-ci>=?$7424$MT&Mo
     g$char-ci>=?$7492$MT&Mo
     (case-lambda
       ((g$a$7474$MT&Mo g$b$7475$MT&Mo . g$rest$7476$MT&Mo)
        (begin
          (if (not (g$char?$6399$MT&Mo g$a$7474$MT&Mo))
            (assertion-violation
              'char-ci>=?
              '"not a char"
              g$a$7474$MT&Mo)
            (void))
          (g$for-all$5751$MT&Mo
            (case-lambda
              ((g$x$7477$MT&Mo)
               (begin
                 (if (not (g$char?$6399$MT&Mo g$x$7477$MT&Mo))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$7477$MT&Mo)
                   (void))
                 ((case-lambda
                    ((g$r$7478$MT&Mo)
                     (begin
                       (set! g$a$7474$MT&Mo g$x$7477$MT&Mo)
                       g$r$7478$MT&Mo)))
                  (>= (char->integer (char-upcase g$a$7474$MT&Mo))
                      (char->integer (char-upcase g$x$7477$MT&Mo)))))))
            (cons g$b$7475$MT&Mo g$rest$7476$MT&Mo))))))
   (g$string-normalize-nfc$7425$MT&Mo
     g$string-normalize-nfc$7493$MT&Mo
     (case-lambda
       ((g$s$7479$MT&Mo) (string-normalize g$s$7479$MT&Mo 'formc))))
   (g$string-normalize-nfd$7426$MT&Mo
     g$string-normalize-nfd$7494$MT&Mo
     (case-lambda
       ((g$s$7480$MT&Mo) (string-normalize g$s$7480$MT&Mo 'formd))))
   (g$string-normalize-nfkc$7427$MT&Mo
     g$string-normalize-nfkc$7495$MT&Mo
     (case-lambda
       ((g$s$7481$MT&Mo) (string-normalize g$s$7481$MT&Mo 'formkc))))
   (g$string-normalize-nfkd$7428$MT&Mo
     g$string-normalize-nfkd$7496$MT&Mo
     (case-lambda
       ((g$s$7482$MT&Mo) (string-normalize g$s$7482$MT&Mo 'formkd)))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$7497$MT&Mo
     g$bitwise-if$7528$MT&Mo
     (case-lambda
       ((g$ei1$7504$MT&Mo g$ei2$7505$MT&Mo g$ei3$7506$MT&Mo)
        (bitwise-ior
          (bitwise-and g$ei1$7504$MT&Mo g$ei2$7505$MT&Mo)
          (bitwise-and
            (bitwise-not g$ei1$7504$MT&Mo)
            g$ei3$7506$MT&Mo)))))
   (g$bitwise-copy-bit$7498$MT&Mo
     g$bitwise-copy-bit$7529$MT&Mo
     (case-lambda
       ((g$ei1$7507$MT&Mo g$ei2$7508$MT&Mo g$ei3$7509$MT&Mo)
        (g$bitwise-if$7497$MT&Mo
          (g$bitwise-arithmetic-shift-left$7501$MT&Mo
            '1
            g$ei2$7508$MT&Mo)
          (g$bitwise-arithmetic-shift-left$7501$MT&Mo
            g$ei3$7509$MT&Mo
            g$ei2$7508$MT&Mo)
          g$ei1$7507$MT&Mo))))
   (g$bitwise-bit-field$7499$MT&Mo
     g$bitwise-bit-field$7530$MT&Mo
     (case-lambda
       ((g$ei1$7510$MT&Mo g$ei2$7511$MT&Mo g$ei3$7512$MT&Mo)
        (g$bitwise-arithmetic-shift-right$7502$MT&Mo
          (bitwise-and
            g$ei1$7510$MT&Mo
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$7501$MT&Mo
                '-1
                g$ei3$7512$MT&Mo)))
          g$ei2$7511$MT&Mo))))
   (g$bitwise-copy-bit-field$7500$MT&Mo
     g$bitwise-copy-bit-field$7531$MT&Mo
     (case-lambda
       ((g$to$7513$MT&Mo
          g$start$7514$MT&Mo
          g$end$7515$MT&Mo
          g$from$7516$MT&Mo)
        (g$bitwise-if$7497$MT&Mo
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$7501$MT&Mo
              '-1
              g$start$7514$MT&Mo)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$7501$MT&Mo
                '-1
                g$end$7515$MT&Mo)))
          (g$bitwise-arithmetic-shift-left$7501$MT&Mo
            g$from$7516$MT&Mo
            g$start$7514$MT&Mo)
          g$to$7513$MT&Mo))))
   (g$bitwise-arithmetic-shift-left$7501$MT&Mo
     g$bitwise-arithmetic-shift-left$7532$MT&Mo
     (case-lambda
       ((g$ei1$7517$MT&Mo g$ei2$7518$MT&Mo)
        (bitwise-arithmetic-shift g$ei1$7517$MT&Mo g$ei2$7518$MT&Mo))))
   (g$bitwise-arithmetic-shift-right$7502$MT&Mo
     g$bitwise-arithmetic-shift-right$7533$MT&Mo
     (case-lambda
       ((g$ei1$7519$MT&Mo g$ei2$7520$MT&Mo)
        (bitwise-arithmetic-shift
          g$ei1$7519$MT&Mo
          (- g$ei2$7520$MT&Mo)))))
   (g$bitwise-rotate-bit-field$7503$MT&Mo
     g$bitwise-rotate-bit-field$7534$MT&Mo
     (case-lambda
       ((g$n$7521$MT&Mo
          g$start$7522$MT&Mo
          g$end$7523$MT&Mo
          g$count$7524$MT&Mo)
        ((case-lambda
           ((g$width$7525$MT&Mo)
            (if (g$positive?$6438$MT&Mo g$width$7525$MT&Mo)
              ((case-lambda
                 ((g$count$7526$MT&Mo g$field$7527$MT&Mo)
                  (g$bitwise-copy-bit-field$7500$MT&Mo
                    g$n$7521$MT&Mo
                    g$start$7522$MT&Mo
                    g$end$7523$MT&Mo
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$7501$MT&Mo
                        g$field$7527$MT&Mo
                        g$count$7526$MT&Mo)
                      (g$bitwise-arithmetic-shift-right$7502$MT&Mo
                        g$field$7527$MT&Mo
                        (- g$width$7525$MT&Mo g$count$7526$MT&Mo))))))
               (g$mod$6393$MT&Mo g$count$7524$MT&Mo g$width$7525$MT&Mo)
               (g$bitwise-bit-field$7499$MT&Mo
                 g$n$7521$MT&Mo
                 g$start$7522$MT&Mo
                 g$end$7523$MT&Mo))
              g$n$7521$MT&Mo)))
         (- g$end$7523$MT&Mo g$start$7522$MT&Mo))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxmod$7535$MT&Mo
     g$fxmod$7618$MT&Mo
     (case-lambda
       ((g$x1$7556$MT&Mo g$x2$7557$MT&Mo)
        (fx- g$x1$7556$MT&Mo
             (fx* (fxdiv g$x1$7556$MT&Mo g$x2$7557$MT&Mo)
                  g$x2$7557$MT&Mo)))))
   (g$fxmod0$7536$MT&Mo
     g$fxmod0$7619$MT&Mo
     (case-lambda
       ((g$x1$7558$MT&Mo g$x2$7559$MT&Mo)
        (fx- g$x1$7558$MT&Mo
             (fx* (fxdiv0 g$x1$7558$MT&Mo g$x2$7559$MT&Mo)
                  g$x2$7559$MT&Mo)))))
   (g$fxdiv-and-mod$7537$MT&Mo
     g$fxdiv-and-mod$7620$MT&Mo
     (case-lambda
       ((g$x1$7560$MT&Mo g$x2$7561$MT&Mo)
        ((case-lambda
           ((g$d$7562$MT&Mo)
            (values
              g$d$7562$MT&Mo
              (fx- g$x1$7560$MT&Mo
                   (fx* g$d$7562$MT&Mo g$x2$7561$MT&Mo)))))
         (fxdiv g$x1$7560$MT&Mo g$x2$7561$MT&Mo)))))
   (g$fxdiv0-and-mod0$7538$MT&Mo
     g$fxdiv0-and-mod0$7621$MT&Mo
     (case-lambda
       ((g$x1$7563$MT&Mo g$x2$7564$MT&Mo)
        ((case-lambda
           ((g$d$7565$MT&Mo)
            (values
              g$d$7565$MT&Mo
              (fx- g$x1$7563$MT&Mo
                   (fx* g$d$7565$MT&Mo g$x2$7564$MT&Mo)))))
         (fxdiv0 g$x1$7563$MT&Mo g$x2$7564$MT&Mo)))))
   (g$fxpositive?$7539$MT&Mo
     g$fxpositive?$7622$MT&Mo
     (case-lambda
       ((g$r$7566$MT&Mo)
        (begin
          (if (not (g$fixnum?$6405$MT&Mo g$r$7566$MT&Mo))
            (assertion-violation
              'fxpositive?
              '"not a fixnum"
              g$r$7566$MT&Mo)
            (void))
          (fx<? '0 g$r$7566$MT&Mo)))))
   (g$fxnegative?$7540$MT&Mo
     g$fxnegative?$7623$MT&Mo
     (case-lambda
       ((g$r$7567$MT&Mo)
        (begin
          (if (not (g$fixnum?$6405$MT&Mo g$r$7567$MT&Mo))
            (assertion-violation
              'fxnegative?
              '"not a fixnum"
              g$r$7567$MT&Mo)
            (void))
          (fx>? '0 g$r$7567$MT&Mo)))))
   (g$fxzero?$7541$MT&Mo
     g$fxzero?$7624$MT&Mo
     (case-lambda
       ((g$r$7568$MT&Mo)
        (begin
          (if (not (g$fixnum?$6405$MT&Mo g$r$7568$MT&Mo))
            (assertion-violation
              'fxzero?
              '"not a fixnum"
              g$r$7568$MT&Mo)
            (void))
          (fx=? '0 g$r$7568$MT&Mo)))))
   (g$fxeven?$7542$MT&Mo
     g$fxeven?$7625$MT&Mo
     (case-lambda
       ((g$n$7569$MT&Mo)
        (begin
          (if (not (g$fixnum?$6405$MT&Mo g$n$7569$MT&Mo))
            (assertion-violation
              'fxeven?
              '"not a fixnum"
              g$n$7569$MT&Mo)
            (void))
          (if (fx=? g$n$7569$MT&Mo (least-fixnum))
            '#t
            (fx=? '0 (g$fxmod$7535$MT&Mo g$n$7569$MT&Mo '2)))))))
   (g$fxodd?$7543$MT&Mo
     g$fxodd?$7626$MT&Mo
     (case-lambda
       ((g$n$7570$MT&Mo)
        (begin
          (if (not (g$fixnum?$6405$MT&Mo g$n$7570$MT&Mo))
            (assertion-violation 'fxodd? '"not a fixnum" g$n$7570$MT&Mo)
            (void))
          (if (fx=? g$n$7570$MT&Mo (least-fixnum))
            '#f
            (fx=? '1 (g$fxmod$7535$MT&Mo g$n$7570$MT&Mo '2)))))))
   (g$fxmax$7544$MT&Mo
     g$fxmax$7627$MT&Mo
     (case-lambda
       ((g$a$7571$MT&Mo . g$rest$7572$MT&Mo)
        (begin
          (if (not (g$fixnum?$6405$MT&Mo g$a$7571$MT&Mo))
            (assertion-violation 'fxmax '"not a fixnum" g$a$7571$MT&Mo)
            (void))
          (g$fold-left$5756$MT&Mo
            (case-lambda
              ((g$a$7573$MT&Mo g$b$7574$MT&Mo)
               (if (fx<? g$a$7573$MT&Mo g$b$7574$MT&Mo)
                 g$b$7574$MT&Mo
                 g$a$7573$MT&Mo)))
            g$a$7571$MT&Mo
            g$rest$7572$MT&Mo)))))
   (g$fxmin$7545$MT&Mo
     g$fxmin$7628$MT&Mo
     (case-lambda
       ((g$a$7575$MT&Mo . g$rest$7576$MT&Mo)
        (begin
          (if (not (g$fixnum?$6405$MT&Mo g$a$7575$MT&Mo))
            (assertion-violation 'fxmin '"not a fixnum" g$a$7575$MT&Mo)
            (void))
          (g$fold-left$5756$MT&Mo
            (case-lambda
              ((g$a$7577$MT&Mo g$b$7578$MT&Mo)
               (if (fx>? g$a$7577$MT&Mo g$b$7578$MT&Mo)
                 g$b$7578$MT&Mo
                 g$a$7577$MT&Mo)))
            g$a$7575$MT&Mo
            g$rest$7576$MT&Mo)))))
   (g$fx*/carry$7546$MT&Mo
     g$fx*/carry$7629$MT&Mo
     (case-lambda
       ((g$fx1$7579$MT&Mo g$fx2$7580$MT&Mo g$fx3$7581$MT&Mo)
        ((case-lambda
           ((g$s$7582$MT&Mo g$e$7583$MT&Mo)
            (values
              (g$mod0$6394$MT&Mo g$s$7582$MT&Mo g$e$7583$MT&Mo)
              (div0 g$s$7582$MT&Mo g$e$7583$MT&Mo))))
         (+ (* g$fx1$7579$MT&Mo g$fx2$7580$MT&Mo) g$fx3$7581$MT&Mo)
         (expt '2 (g$fixnum-width$6407$MT&Mo))))))
   (g$fx-/carry$7547$MT&Mo
     g$fx-/carry$7630$MT&Mo
     (case-lambda
       ((g$fx1$7584$MT&Mo g$fx2$7585$MT&Mo g$fx3$7586$MT&Mo)
        ((case-lambda
           ((g$s$7587$MT&Mo g$e$7588$MT&Mo)
            (values
              (g$mod0$6394$MT&Mo g$s$7587$MT&Mo g$e$7588$MT&Mo)
              (div0 g$s$7587$MT&Mo g$e$7588$MT&Mo))))
         (- g$fx1$7584$MT&Mo g$fx2$7585$MT&Mo g$fx3$7586$MT&Mo)
         (expt '2 (g$fixnum-width$6407$MT&Mo))))))
   (g$fx+/carry$7548$MT&Mo
     g$fx+/carry$7631$MT&Mo
     (case-lambda
       ((g$fx1$7589$MT&Mo g$fx2$7590$MT&Mo g$fx3$7591$MT&Mo)
        ((case-lambda
           ((g$s$7592$MT&Mo g$e$7593$MT&Mo)
            (values
              (g$mod0$6394$MT&Mo g$s$7592$MT&Mo g$e$7593$MT&Mo)
              (div0 g$s$7592$MT&Mo g$e$7593$MT&Mo))))
         (+ g$fx1$7589$MT&Mo g$fx2$7590$MT&Mo g$fx3$7591$MT&Mo)
         (expt '2 (g$fixnum-width$6407$MT&Mo))))))
   (g$fxif$7549$MT&Mo
     g$fxif$7632$MT&Mo
     (case-lambda
       ((g$fx1$7594$MT&Mo g$fx2$7595$MT&Mo g$fx3$7596$MT&Mo)
        (fxior
          (fxand g$fx1$7594$MT&Mo g$fx2$7595$MT&Mo)
          (fxand (fxnot g$fx1$7594$MT&Mo) g$fx3$7596$MT&Mo)))))
   (g$fxcopy-bit$7550$MT&Mo
     g$fxcopy-bit$7633$MT&Mo
     (case-lambda
       ((g$fx1$7597$MT&Mo g$fx2$7598$MT&Mo g$fx3$7599$MT&Mo)
        (g$fxif$7549$MT&Mo
          (g$fxarithmetic-shift-left$7553$MT&Mo '1 g$fx2$7598$MT&Mo)
          (g$fxarithmetic-shift-left$7553$MT&Mo
            g$fx3$7599$MT&Mo
            g$fx2$7598$MT&Mo)
          g$fx1$7597$MT&Mo))))
   (g$fxbit-field$7551$MT&Mo
     g$fxbit-field$7634$MT&Mo
     (case-lambda
       ((g$fx1$7600$MT&Mo g$fx2$7601$MT&Mo g$fx3$7602$MT&Mo)
        (g$fxarithmetic-shift-right$7554$MT&Mo
          (fxand
            g$fx1$7600$MT&Mo
            (fxnot
              (g$fxarithmetic-shift-left$7553$MT&Mo
                '-1
                g$fx3$7602$MT&Mo)))
          g$fx2$7601$MT&Mo))))
   (g$fxcopy-bit-field$7552$MT&Mo
     g$fxcopy-bit-field$7635$MT&Mo
     (case-lambda
       ((g$to$7603$MT&Mo
          g$start$7604$MT&Mo
          g$end$7605$MT&Mo
          g$from$7606$MT&Mo)
        (g$fxif$7549$MT&Mo
          (fxand
            (g$fxarithmetic-shift-left$7553$MT&Mo
              '-1
              g$start$7604$MT&Mo)
            (fxnot
              (g$fxarithmetic-shift-left$7553$MT&Mo
                '-1
                g$end$7605$MT&Mo)))
          (g$fxarithmetic-shift-left$7553$MT&Mo
            g$from$7606$MT&Mo
            g$start$7604$MT&Mo)
          g$to$7603$MT&Mo))))
   (g$fxarithmetic-shift-left$7553$MT&Mo
     g$fxarithmetic-shift-left$7636$MT&Mo
     (case-lambda
       ((g$fx1$7607$MT&Mo g$fx2$7608$MT&Mo)
        (fxarithmetic-shift g$fx1$7607$MT&Mo g$fx2$7608$MT&Mo))))
   (g$fxarithmetic-shift-right$7554$MT&Mo
     g$fxarithmetic-shift-right$7637$MT&Mo
     (case-lambda
       ((g$fx1$7609$MT&Mo g$fx2$7610$MT&Mo)
        (fxarithmetic-shift g$fx1$7609$MT&Mo (fx- g$fx2$7610$MT&Mo)))))
   (g$fxrotate-bit-field$7555$MT&Mo
     g$fxrotate-bit-field$7638$MT&Mo
     (case-lambda
       ((g$n$7611$MT&Mo
          g$start$7612$MT&Mo
          g$end$7613$MT&Mo
          g$count$7614$MT&Mo)
        ((case-lambda
           ((g$width$7615$MT&Mo)
            (if (g$fxpositive?$7539$MT&Mo g$width$7615$MT&Mo)
              ((case-lambda
                 ((g$count$7616$MT&Mo g$field$7617$MT&Mo)
                  (g$fxcopy-bit-field$7552$MT&Mo
                    g$n$7611$MT&Mo
                    g$start$7612$MT&Mo
                    g$end$7613$MT&Mo
                    (fxior
                      (g$fxarithmetic-shift-left$7553$MT&Mo
                        g$field$7617$MT&Mo
                        g$count$7616$MT&Mo)
                      (g$fxarithmetic-shift-right$7554$MT&Mo
                        g$field$7617$MT&Mo
                        (fx- g$width$7615$MT&Mo g$count$7616$MT&Mo))))))
               (g$fxmod$7535$MT&Mo
                 g$count$7614$MT&Mo
                 g$width$7615$MT&Mo)
               (g$fxbit-field$7551$MT&Mo
                 g$n$7611$MT&Mo
                 g$start$7612$MT&Mo
                 g$end$7613$MT&Mo))
              g$n$7611$MT&Mo)))
         (fx- g$end$7613$MT&Mo g$start$7612$MT&Mo))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$flmod$7639$MT&Mo
     g$flmod$7716$MT&Mo
     (case-lambda
       ((g$x1$7669$MT&Mo g$x2$7670$MT&Mo)
        (fl- g$x1$7669$MT&Mo
             (fl* (fldiv g$x1$7669$MT&Mo g$x2$7670$MT&Mo)
                  g$x2$7670$MT&Mo)))))
   (g$flmod0$7640$MT&Mo
     g$flmod0$7717$MT&Mo
     (case-lambda
       ((g$x1$7671$MT&Mo g$x2$7672$MT&Mo)
        (fl- g$x1$7671$MT&Mo
             (fl* (fldiv0 g$x1$7671$MT&Mo g$x2$7672$MT&Mo)
                  g$x2$7672$MT&Mo)))))
   (g$fldiv-and-mod$7641$MT&Mo
     g$fldiv-and-mod$7718$MT&Mo
     (case-lambda
       ((g$x1$7673$MT&Mo g$x2$7674$MT&Mo)
        ((case-lambda
           ((g$d$7675$MT&Mo)
            (values
              g$d$7675$MT&Mo
              (fl- g$x1$7673$MT&Mo
                   (fl* g$d$7675$MT&Mo g$x2$7674$MT&Mo)))))
         (fldiv g$x1$7673$MT&Mo g$x2$7674$MT&Mo)))))
   (g$fldiv0-and-mod0$7642$MT&Mo
     g$fldiv0-and-mod0$7719$MT&Mo
     (case-lambda
       ((g$x1$7676$MT&Mo g$x2$7677$MT&Mo)
        ((case-lambda
           ((g$d$7678$MT&Mo)
            (values
              g$d$7678$MT&Mo
              (fl- g$x1$7676$MT&Mo
                   (fl* g$d$7678$MT&Mo g$x2$7677$MT&Mo)))))
         (fldiv0 g$x1$7676$MT&Mo g$x2$7677$MT&Mo)))))
   (g$flinteger?$7643$MT&Mo
     g$flinteger?$7720$MT&Mo
     (case-lambda
       ((g$fl$7679$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7679$MT&Mo))
            (assertion-violation
              'flinteger?
              '"not a flonum"
              g$fl$7679$MT&Mo)
            (void))
          (fl=? '0.0 (g$flmod$7639$MT&Mo g$fl$7679$MT&Mo '1.0))))))
   (g$flfinite?$7644$MT&Mo
     g$flfinite?$7721$MT&Mo
     (case-lambda
       ((g$fl$7680$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7680$MT&Mo))
            (assertion-violation
              'flfinite?
              '"not a flonum"
              g$fl$7680$MT&Mo)
            (void))
          (not (g$flinfinite?$7645$MT&Mo g$fl$7680$MT&Mo))))))
   (g$flinfinite?$7645$MT&Mo
     g$flinfinite?$7722$MT&Mo
     (case-lambda
       ((g$fl$7681$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7681$MT&Mo))
            (assertion-violation
              'flinfinite?
              '"not a flonum"
              g$fl$7681$MT&Mo)
            (void))
          (clr-call-internal
            'system.double
            'isinfinity
            '()
            g$fl$7681$MT&Mo)))))
   (g$flnan?$7646$MT&Mo
     g$flnan?$7723$MT&Mo
     (case-lambda
       ((g$fl$7682$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7682$MT&Mo))
            (assertion-violation
              'flnan?
              '"not a flonum"
              g$fl$7682$MT&Mo)
            (void))
          (clr-call-internal
            'system.double
            'isnan
            '()
            g$fl$7682$MT&Mo)))))
   (g$flsin$7647$MT&Mo
     g$flsin$7724$MT&Mo
     (case-lambda
       ((g$fl$7683$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7683$MT&Mo))
            (assertion-violation 'flsin '"not a flonum" g$fl$7683$MT&Mo)
            (void))
          (clr-call-internal 'system.math 'sin '() g$fl$7683$MT&Mo)))))
   (g$flcos$7648$MT&Mo
     g$flcos$7725$MT&Mo
     (case-lambda
       ((g$fl$7684$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7684$MT&Mo))
            (assertion-violation 'flcos '"not a flonum" g$fl$7684$MT&Mo)
            (void))
          (clr-call-internal 'system.math 'cos '() g$fl$7684$MT&Mo)))))
   (g$fltan$7649$MT&Mo
     g$fltan$7726$MT&Mo
     (case-lambda
       ((g$fl$7685$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7685$MT&Mo))
            (assertion-violation 'fltan '"not a flonum" g$fl$7685$MT&Mo)
            (void))
          (clr-call-internal 'system.math 'tan '() g$fl$7685$MT&Mo)))))
   (g$flasin$7650$MT&Mo
     g$flasin$7727$MT&Mo
     (case-lambda
       ((g$fl$7686$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7686$MT&Mo))
            (assertion-violation
              'flasin
              '"not a flonum"
              g$fl$7686$MT&Mo)
            (void))
          (clr-call-internal 'system.math 'asin '() g$fl$7686$MT&Mo)))))
   (g$flacos$7651$MT&Mo
     g$flacos$7728$MT&Mo
     (case-lambda
       ((g$fl$7687$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7687$MT&Mo))
            (assertion-violation
              'flacos
              '"not a flonum"
              g$fl$7687$MT&Mo)
            (void))
          (clr-call-internal 'system.math 'acos '() g$fl$7687$MT&Mo)))))
   (g$flatan$7652$MT&Mo
     g$flatan$7729$MT&Mo
     (case-lambda
       ((g$fl$7688$MT&Mo)
        (clr-call-internal 'system.math 'atan '() g$fl$7688$MT&Mo))
       ((g$fl1$7689$MT&Mo g$fl2$7690$MT&Mo)
        (clr-call-internal
          'system.math
          'atan2
          '()
          g$fl1$7689$MT&Mo
          g$fl2$7690$MT&Mo))))
   (g$fllog$7653$MT&Mo
     g$fllog$7730$MT&Mo
     (case-lambda
       ((g$fl$7691$MT&Mo)
        (clr-call-internal 'system.math 'log '() g$fl$7691$MT&Mo))
       ((g$fl1$7692$MT&Mo g$fl2$7693$MT&Mo)
        (clr-call-internal
          'system.math
          'log
          '()
          g$fl1$7692$MT&Mo
          g$fl2$7693$MT&Mo))))
   (g$flsqrt$7654$MT&Mo
     g$flsqrt$7731$MT&Mo
     (case-lambda
       ((g$fl$7694$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7694$MT&Mo))
            (assertion-violation
              'flsqrt
              '"not a flonum"
              g$fl$7694$MT&Mo)
            (void))
          (clr-call-internal 'system.math 'sqrt '() g$fl$7694$MT&Mo)))))
   (g$flexp$7655$MT&Mo
     g$flexp$7732$MT&Mo
     (case-lambda
       ((g$fl$7695$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7695$MT&Mo))
            (assertion-violation 'flexp '"not a flonum" g$fl$7695$MT&Mo)
            (void))
          (clr-call-internal 'system.math 'exp '() g$fl$7695$MT&Mo)))))
   (g$flexpt$7656$MT&Mo
     g$flexpt$7733$MT&Mo
     (case-lambda
       ((g$fl$7696$MT&Mo g$n$7697$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7696$MT&Mo))
            (assertion-violation
              'flexpt
              '"not a flonum"
              g$fl$7696$MT&Mo)
            (void))
          (clr-call-internal
            'system.math
            'pow
            '()
            g$fl$7696$MT&Mo
            g$n$7697$MT&Mo)))))
   (g$flceiling$7657$MT&Mo
     g$flceiling$7734$MT&Mo
     (case-lambda
       ((g$fl$7698$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7698$MT&Mo))
            (assertion-violation
              'flceiling
              '"not a flonum"
              g$fl$7698$MT&Mo)
            (void))
          (clr-call-internal
            'system.math
            '"ceiling(double)"
            '()
            g$fl$7698$MT&Mo)))))
   (g$flfloor$7658$MT&Mo
     g$flfloor$7735$MT&Mo
     (case-lambda
       ((g$fl$7699$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7699$MT&Mo))
            (assertion-violation
              'flfloor
              '"not a flonum"
              g$fl$7699$MT&Mo)
            (void))
          (clr-call-internal
            'system.math
            '"floor(double)"
            '()
            g$fl$7699$MT&Mo)))))
   (g$fltruncate$7659$MT&Mo
     g$fltruncate$7736$MT&Mo
     (case-lambda
       ((g$fl$7700$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7700$MT&Mo))
            (assertion-violation
              'fltruncate
              '"not a flonum"
              g$fl$7700$MT&Mo)
            (void))
          (clr-call-internal
            'system.math
            '"truncate(double)"
            '()
            g$fl$7700$MT&Mo)))))
   (g$flround$7660$MT&Mo
     g$flround$7737$MT&Mo
     (case-lambda
       ((g$fl$7701$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7701$MT&Mo))
            (assertion-violation
              'flround
              '"not a flonum"
              g$fl$7701$MT&Mo)
            (void))
          (clr-call-internal
            'system.math
            '"round(double)"
            '()
            g$fl$7701$MT&Mo)))))
   (g$flabs$7661$MT&Mo
     g$flabs$7738$MT&Mo
     (case-lambda
       ((g$fl$7702$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$fl$7702$MT&Mo))
            (assertion-violation 'flabs '"not a flonum" g$fl$7702$MT&Mo)
            (void))
          (clr-call-internal
            'system.math
            '"abs(double)"
            '()
            g$fl$7702$MT&Mo)))))
   (g$flpositive?$7662$MT&Mo
     g$flpositive?$7739$MT&Mo
     (case-lambda
       ((g$r$7703$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$r$7703$MT&Mo))
            (assertion-violation
              'flpositive?
              '"not a flonum"
              g$r$7703$MT&Mo)
            (void))
          (fl<? '0.0 g$r$7703$MT&Mo)))))
   (g$flnegative?$7663$MT&Mo
     g$flnegative?$7740$MT&Mo
     (case-lambda
       ((g$r$7704$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$r$7704$MT&Mo))
            (assertion-violation
              'flnegative?
              '"not a flonum"
              g$r$7704$MT&Mo)
            (void))
          (fl>? '0.0 g$r$7704$MT&Mo)))))
   (g$flzero?$7664$MT&Mo
     g$flzero?$7741$MT&Mo
     (case-lambda
       ((g$r$7705$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$r$7705$MT&Mo))
            (assertion-violation
              'flzero?
              '"not a flonum"
              g$r$7705$MT&Mo)
            (void))
          (fl=? '0.0 g$r$7705$MT&Mo)))))
   (g$fleven?$7665$MT&Mo
     g$fleven?$7742$MT&Mo
     (case-lambda
       ((g$n$7706$MT&Mo)
        (begin
          (if (not (integer-valued? g$n$7706$MT&Mo))
            (assertion-violation
              'fleven?
              '"not integer valued"
              g$n$7706$MT&Mo)
            (void))
          (fl=? '0.0 (g$flmod$7639$MT&Mo g$n$7706$MT&Mo '2.0))))))
   (g$flodd?$7666$MT&Mo
     g$flodd?$7743$MT&Mo
     (case-lambda
       ((g$n$7707$MT&Mo)
        (begin
          (if (not (integer-valued? g$n$7707$MT&Mo))
            (assertion-violation
              'flodd?
              '"not integer valued"
              g$n$7707$MT&Mo)
            (void))
          (fl=? '1.0 (g$flmod$7639$MT&Mo g$n$7707$MT&Mo '2.0))))))
   (g$flmax$7667$MT&Mo
     g$flmax$7744$MT&Mo
     (case-lambda
       ((g$a$7708$MT&Mo . g$rest$7709$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$a$7708$MT&Mo))
            (assertion-violation 'flmax '"not a flonum" g$a$7708$MT&Mo)
            (void))
          (g$fold-left$5756$MT&Mo
            (case-lambda
              ((g$a$7710$MT&Mo g$b$7711$MT&Mo)
               (if (fl<? g$a$7710$MT&Mo g$b$7711$MT&Mo)
                 g$b$7711$MT&Mo
                 g$a$7710$MT&Mo)))
            g$a$7708$MT&Mo
            g$rest$7709$MT&Mo)))))
   (g$flmin$7668$MT&Mo
     g$flmin$7745$MT&Mo
     (case-lambda
       ((g$a$7712$MT&Mo . g$rest$7713$MT&Mo)
        (begin
          (if (not (g$flonum?$6406$MT&Mo g$a$7712$MT&Mo))
            (assertion-violation 'flmin '"not a flonum" g$a$7712$MT&Mo)
            (void))
          (g$fold-left$5756$MT&Mo
            (case-lambda
              ((g$a$7714$MT&Mo g$b$7715$MT&Mo)
               (if (fl>? g$a$7714$MT&Mo g$b$7715$MT&Mo)
                 g$b$7715$MT&Mo
                 g$a$7714$MT&Mo)))
            g$a$7712$MT&Mo
            g$rest$7713$MT&Mo))))))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$7747$MT&Mo
     g$using$7767$MT&Mo
     (clr-using-internal 'ironscheme.runtime))
   (g$put-datum$7748$MT&Mo
     g$put-datum$7768$MT&Mo
     (case-lambda
       ((g$p$7756$MT&Mo g$datum$7757$MT&Mo)
        (write g$datum$7757$MT&Mo g$p$7756$MT&Mo))))
   (g$get-datum$7749$MT&Mo g$get-datum$7769$MT&Mo read)
   (g$get-output-string$7750$MT&Mo
     g$get-output-string$7770$MT&Mo
     (case-lambda
       ((g$port$7758$MT&Mo)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$7758$MT&Mo))))
   (g$open-output-string$7751$MT&Mo
     g$open-output-string$7771$MT&Mo
     (case-lambda
       (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$7752$MT&Mo
     g$open-string-output-port$7772$MT&Mo
     (case-lambda
       (()
        ((case-lambda
           ((g$p$7759$MT&Mo)
            (values
              g$p$7759$MT&Mo
              (case-lambda
                (() (g$get-output-string$7750$MT&Mo g$p$7759$MT&Mo))))))
         (g$open-output-string$7751$MT&Mo)))))
   (g$port?$7753$MT&Mo
     g$port?$7773$MT&Mo
     (case-lambda
       ((g$obj$7760$MT&Mo)
        ((case-lambda
           ((g$t$7761$MT&Mo)
            (if g$t$7761$MT&Mo
              g$t$7761$MT&Mo
              (begin '#f (binary-port? g$obj$7760$MT&Mo)))))
         (textual-port? g$obj$7760$MT&Mo)))))
   (g$call-with-string-output-port$7754$MT&Mo
     g$call-with-string-output-port$7774$MT&Mo
     (case-lambda
       ((g$proc$7762$MT&Mo)
        ((case-lambda
           ((g$p$7763$MT&Mo)
            (begin
              (g$call-with-port$7755$MT&Mo
                g$p$7763$MT&Mo
                g$proc$7762$MT&Mo)
              (g$get-output-string$7750$MT&Mo g$p$7763$MT&Mo))))
         (g$open-output-string$7751$MT&Mo)))))
   (g$call-with-port$7755$MT&Mo
     g$call-with-port$7775$MT&Mo
     (case-lambda
       ((g$port$7764$MT&Mo g$proc$7765$MT&Mo)
        ((case-lambda
           ((g$r$7766$MT&Mo)
            (begin (close-port g$port$7764$MT&Mo) g$r$7766$MT&Mo)))
         (g$proc$7765$MT&Mo g$port$7764$MT&Mo))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$7776$MT&Mo
     g$peek-char$7828$MT&Mo
     (case-lambda
       (() (g$peek-char$7776$MT&Mo (current-input-port)))
       ((g$port$7800$MT&Mo) (lookahead-char g$port$7800$MT&Mo))))
   (g$read-char$7777$MT&Mo
     g$read-char$7829$MT&Mo
     (case-lambda
       (() (g$read-char$7777$MT&Mo (current-input-port)))
       ((g$port$7801$MT&Mo) (get-char g$port$7801$MT&Mo))))
   (g$write-char$7778$MT&Mo
     g$write-char$7830$MT&Mo
     (case-lambda
       ((g$chr$7802$MT&Mo)
        (g$write-char$7778$MT&Mo
          g$chr$7802$MT&Mo
          (current-output-port)))
       ((g$chr$7803$MT&Mo g$port$7804$MT&Mo)
        (put-char g$port$7804$MT&Mo g$chr$7803$MT&Mo))))
   (g$with-input-from-file$7795$MT&Mo
     g$with-input-from-file$7831$MT&Mo
     (case-lambda
       ((g$filename$7805$MT&Mo g$thunk$7806$MT&Mo)
        ((case-lambda
           ((g$current-input-port$7809$MT&Mo g$t$7810$MT&Mo)
            ((case-lambda
               ((g$swap$7811$MT&Mo)
                (dynamic-wind
                  g$swap$7811$MT&Mo
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$7806$MT&Mo)))
                       (case-lambda
                         (()
                          (close-input-port (current-input-port)))))))
                  g$swap$7811$MT&Mo)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$7812$MT&Mo)
                    (begin
                      (g$current-input-port$7809$MT&Mo g$t$7810$MT&Mo)
                      (set! g$t$7810$MT&Mo g$t$7812$MT&Mo))))
                 (g$current-input-port$7809$MT&Mo)))))))
         current-input-port
         (open-input-file g$filename$7805$MT&Mo)))))
   (g$with-output-to-file$7796$MT&Mo
     g$with-output-to-file$7832$MT&Mo
     (case-lambda
       ((g$filename$7813$MT&Mo g$thunk$7814$MT&Mo)
        ((case-lambda
           ((g$current-output-port$7817$MT&Mo g$t$7818$MT&Mo)
            ((case-lambda
               ((g$swap$7819$MT&Mo)
                (dynamic-wind
                  g$swap$7819$MT&Mo
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$7814$MT&Mo)))
                       (case-lambda
                         (()
                          (close-output-port (current-output-port)))))))
                  g$swap$7819$MT&Mo)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$7820$MT&Mo)
                    (begin
                      (g$current-output-port$7817$MT&Mo g$t$7818$MT&Mo)
                      (set! g$t$7818$MT&Mo g$t$7820$MT&Mo))))
                 (g$current-output-port$7817$MT&Mo)))))))
         current-output-port
         (open-output-file g$filename$7813$MT&Mo)))))
   (g$call-with-input-file$7797$MT&Mo
     g$call-with-input-file$7833$MT&Mo
     (case-lambda
       ((g$filename$7821$MT&Mo g$proc$7822$MT&Mo)
        ((case-lambda
           ((g$p$7823$MT&Mo)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$7822$MT&Mo g$p$7823$MT&Mo)))
              (case-lambda (() (close-input-port g$p$7823$MT&Mo))))))
         (open-input-file g$filename$7821$MT&Mo)))))
   (g$call-with-output-file$7798$MT&Mo
     g$call-with-output-file$7834$MT&Mo
     (case-lambda
       ((g$filename$7824$MT&Mo g$proc$7825$MT&Mo)
        ((case-lambda
           ((g$p$7826$MT&Mo)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$7825$MT&Mo g$p$7826$MT&Mo)))
              (case-lambda (() (close-output-port g$p$7826$MT&Mo))))))
         (open-output-file g$filename$7824$MT&Mo)))))
   (g$newline$7799$MT&Mo
     g$newline$7835$MT&Mo
     (case-lambda
       (() (g$newline$7799$MT&Mo (current-output-port)))
       ((g$port$7827$MT&Mo) (display '"
" g$port$7827$MT&Mo)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$6577$7836$MT&Mo
     g$6577$7949$MT&Mo
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$6579$7837$MT&Mo g$6579$7950$MT&Mo '#f)
   (g$6578$7838$MT&Mo
     g$6578$7951$MT&Mo
     (make-record-constructor-descriptor
       g$6577$7836$MT&Mo
       '#f
       g$6579$7837$MT&Mo))
   (g$enum?$7841$MT&Mo
     g$enum?$7952$MT&Mo
     (record-predicate g$6577$7836$MT&Mo))
   (g$make-enum$7842$MT&Mo
     g$make-enum$7953$MT&Mo
     (record-constructor g$6578$7838$MT&Mo))
   (g$enum-value$7843$MT&Mo
     g$enum-value$7954$MT&Mo
     (record-accessor g$6577$7836$MT&Mo '0))
   (g$enum-info$7844$MT&Mo
     g$enum-info$7955$MT&Mo
     (record-accessor g$6577$7836$MT&Mo '1))
   (g$6588$7845$MT&Mo
     g$6588$7956$MT&Mo
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$6590$7846$MT&Mo g$6590$7957$MT&Mo '#f)
   (g$6589$7847$MT&Mo
     g$6589$7958$MT&Mo
     (make-record-constructor-descriptor
       g$6588$7845$MT&Mo
       '#f
       g$6590$7846$MT&Mo))
   (g$enum-universe?$7850$MT&Mo
     g$enum-universe?$7959$MT&Mo
     (record-predicate g$6588$7845$MT&Mo))
   (g$make-enum-universe$7851$MT&Mo
     g$make-enum-universe$7960$MT&Mo
     (record-constructor g$6589$7847$MT&Mo))
   (g$enum-universe-id$7852$MT&Mo
     g$enum-universe-id$7961$MT&Mo
     (record-accessor g$6588$7845$MT&Mo '0))
   (g$enum-universe-symbols$7853$MT&Mo
     g$enum-universe-symbols$7962$MT&Mo
     (record-accessor g$6588$7845$MT&Mo '1))
   (g$enum-universe-mapping$7854$MT&Mo
     g$enum-universe-mapping$7963$MT&Mo
     (record-accessor g$6588$7845$MT&Mo '2))
   (g$enum-universe-value$7855$MT&Mo
     g$enum-universe-value$7964$MT&Mo
     (record-accessor g$6588$7845$MT&Mo '3))
   (g$enum-type=?$7856$MT&Mo
     g$enum-type=?$7965$MT&Mo
     (case-lambda
       ((g$enumset1$7878$MT&Mo g$enumset2$7879$MT&Mo)
        (eq? (g$enum-universe-id$7852$MT&Mo
               (g$enum-info$7844$MT&Mo g$enumset1$7878$MT&Mo))
             (g$enum-universe-id$7852$MT&Mo
               (g$enum-info$7844$MT&Mo g$enumset2$7879$MT&Mo))))))
   (g$get-symbols$7857$MT&Mo
     g$get-symbols$7966$MT&Mo
     (case-lambda
       ((g$enumset$7880$MT&Mo)
        (g$enum-universe-symbols$7853$MT&Mo
          (g$enum-info$7844$MT&Mo g$enumset$7880$MT&Mo)))))
   (g$get-value$7858$MT&Mo
     g$get-value$7967$MT&Mo
     (case-lambda
       ((g$enumset$7881$MT&Mo g$s$7882$MT&Mo)
        (g$hashtable-ref$6504$MT&Mo
          (g$enum-universe-mapping$7854$MT&Mo
            (g$enum-info$7844$MT&Mo g$enumset$7881$MT&Mo))
          g$s$7882$MT&Mo
          '#f))))
   (g$assert-enum$7859$MT&Mo
     g$assert-enum$7968$MT&Mo
     (case-lambda
       ((g$who$7883$MT&Mo g$enumset$7884$MT&Mo)
        (if (not (g$enum?$7841$MT&Mo g$enumset$7884$MT&Mo))
          (assertion-violation
            g$who$7883$MT&Mo
            '"not an enumeration"
            g$enumset$7884$MT&Mo)
          (void)))))
   (g$make-info$7860$MT&Mo
     g$make-info$7969$MT&Mo
     (case-lambda
       ((g$symbols$7885$MT&Mo)
        ((case-lambda
           ((g$ht$7886$MT&Mo)
            ((letrec ((g$f$7887$MT&Mo
                        (case-lambda
                          ((g$s$7888$MT&Mo
                             g$a$7889$MT&Mo
                             g$mask$7890$MT&Mo)
                           (if (null? g$s$7888$MT&Mo)
                             (values
                               (reverse! g$a$7889$MT&Mo)
                               g$ht$7886$MT&Mo
                               (- g$mask$7890$MT&Mo '1))
                             ((case-lambda
                                ((g$n$7891$MT&Mo)
                                 (if (g$symbol?$6402$MT&Mo
                                       g$n$7891$MT&Mo)
                                   (if (g$hashtable-contains?$6507$MT&Mo
                                         g$ht$7886$MT&Mo
                                         g$n$7891$MT&Mo)
                                     (g$f$7887$MT&Mo
                                       (cdr g$s$7888$MT&Mo)
                                       g$a$7889$MT&Mo
                                       g$mask$7890$MT&Mo)
                                     (begin
                                       (g$hashtable-set!$6505$MT&Mo
                                         g$ht$7886$MT&Mo
                                         g$n$7891$MT&Mo
                                         g$mask$7890$MT&Mo)
                                       (g$f$7887$MT&Mo
                                         (cdr g$s$7888$MT&Mo)
                                         (cons
                                           g$n$7891$MT&Mo
                                           g$a$7889$MT&Mo)
                                         (g$bitwise-arithmetic-shift-left$7532$MT&Mo
                                           g$mask$7890$MT&Mo
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$7891$MT&Mo))))
                              (car g$s$7888$MT&Mo)))))))
               g$f$7887$MT&Mo)
             g$symbols$7885$MT&Mo
             '()
             '1)))
         (g$make-eq-hashtable$6501$MT&Mo)))))
   (g$make-name$7861$MT&Mo
     g$make-name$7970$MT&Mo
     (case-lambda
       ((g$symbols$7892$MT&Mo)
        (string->symbol
          (g$format$8009$MT&Mo '"~a" g$symbols$7892$MT&Mo)))))
   (g$make-enumeration$7862$MT&Mo
     g$make-enumeration$7971$MT&Mo
     (case-lambda
       ((g$symbols$7893$MT&Mo)
        (call-with-values
          (case-lambda
            (() (g$make-info$7860$MT&Mo g$symbols$7893$MT&Mo)))
          (case-lambda
            ((g$s$7897$MT&Mo g$mapping$7898$MT&Mo g$mask$7899$MT&Mo)
             ((case-lambda
                ((g$mask$7900$MT&Mo g$mapping$7901$MT&Mo g$s$7902$MT&Mo)
                 (g$make-enum$7842$MT&Mo
                   g$mask$7900$MT&Mo
                   (g$make-enum-universe$7851$MT&Mo
                     (g$make-name$7861$MT&Mo g$s$7902$MT&Mo)
                     g$s$7902$MT&Mo
                     g$mapping$7901$MT&Mo
                     g$mask$7900$MT&Mo))))
              g$mask$7899$MT&Mo
              g$mapping$7898$MT&Mo
              g$s$7897$MT&Mo)))))))
   (g$enum-set-universe$7863$MT&Mo
     g$enum-set-universe$7972$MT&Mo
     (case-lambda
       ((g$enumset$7903$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-universe
            g$enumset$7903$MT&Mo)
          ((case-lambda
             ((g$ei$7904$MT&Mo)
              (g$make-enum$7842$MT&Mo
                (g$enum-universe-value$7855$MT&Mo g$ei$7904$MT&Mo)
                g$ei$7904$MT&Mo)))
           (g$enum-info$7844$MT&Mo g$enumset$7903$MT&Mo))))))
   (g$enum-set-indexer$7864$MT&Mo
     g$enum-set-indexer$7973$MT&Mo
     (case-lambda
       ((g$enumset$7905$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-indexer
            g$enumset$7905$MT&Mo)
          (case-lambda
            ((g$symbol$7906$MT&Mo)
             (begin
               (if (not (g$symbol?$6402$MT&Mo g$symbol$7906$MT&Mo))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$7906$MT&Mo)
                 (void))
               ((case-lambda
                  ((g$v$7907$MT&Mo)
                   (if g$v$7907$MT&Mo
                     (- (bitwise-length g$v$7907$MT&Mo) '1)
                     '#f)))
                (g$get-value$7858$MT&Mo
                  g$enumset$7905$MT&Mo
                  g$symbol$7906$MT&Mo)))))))))
   (g$enum-set-constructor$7865$MT&Mo
     g$enum-set-constructor$7974$MT&Mo
     (case-lambda
       ((g$enumset$7908$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-constructor
            g$enumset$7908$MT&Mo)
          (case-lambda
            ((g$symbols$7909$MT&Mo)
             ((letrec ((g$f$7910$MT&Mo
                         (case-lambda
                           ((g$v$7911$MT&Mo g$s$7912$MT&Mo)
                            (if (null? g$s$7912$MT&Mo)
                              (g$make-enum$7842$MT&Mo
                                g$v$7911$MT&Mo
                                (g$enum-info$7844$MT&Mo
                                  g$enumset$7908$MT&Mo))
                              ((case-lambda
                                 ((g$n$7913$MT&Mo)
                                  (if (g$symbol?$6402$MT&Mo
                                        g$n$7913$MT&Mo)
                                    ((case-lambda
                                       ((g$v*$7914$MT&Mo)
                                        (if g$v*$7914$MT&Mo
                                          (g$f$7910$MT&Mo
                                            (bitwise-ior
                                              g$v$7911$MT&Mo
                                              g$v*$7914$MT&Mo)
                                            (cdr g$s$7912$MT&Mo))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$7913$MT&Mo))))
                                     (g$get-value$7858$MT&Mo
                                       g$enumset$7908$MT&Mo
                                       g$n$7913$MT&Mo))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$7913$MT&Mo))))
                               (car g$s$7912$MT&Mo)))))))
                g$f$7910$MT&Mo)
              '0
              g$symbols$7909$MT&Mo)))))))
   (g$enum-set->list$7866$MT&Mo
     g$enum-set->list$7975$MT&Mo
     (case-lambda
       ((g$enumset$7915$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set->list
            g$enumset$7915$MT&Mo)
          ((case-lambda
             ((g$value$7916$MT&Mo)
              ((letrec ((g$f$7917$MT&Mo
                          (case-lambda
                            ((g$s$7918$MT&Mo g$l$7919$MT&Mo)
                             (if (null? g$s$7918$MT&Mo)
                               (reverse! g$l$7919$MT&Mo)
                               (if (g$zero?$6440$MT&Mo
                                     (bitwise-and
                                       (g$get-value$7858$MT&Mo
                                         g$enumset$7915$MT&Mo
                                         (car g$s$7918$MT&Mo))
                                       g$value$7916$MT&Mo))
                                 (g$f$7917$MT&Mo
                                   (cdr g$s$7918$MT&Mo)
                                   g$l$7919$MT&Mo)
                                 (g$f$7917$MT&Mo
                                   (cdr g$s$7918$MT&Mo)
                                   (cons
                                     (car g$s$7918$MT&Mo)
                                     g$l$7919$MT&Mo))))))))
                 g$f$7917$MT&Mo)
               (g$get-symbols$7857$MT&Mo g$enumset$7915$MT&Mo)
               '())))
           (g$enum-value$7843$MT&Mo g$enumset$7915$MT&Mo))))))
   (g$enum-set-member?$7867$MT&Mo
     g$enum-set-member?$7976$MT&Mo
     (case-lambda
       ((g$symbol$7920$MT&Mo g$enumset$7921$MT&Mo)
        (begin
          (if (not (g$symbol?$6402$MT&Mo g$symbol$7920$MT&Mo))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$7920$MT&Mo)
            (void))
          (g$assert-enum$7859$MT&Mo
            'enum-set-member?
            g$enumset$7921$MT&Mo)
          ((case-lambda
             ((g$v$7922$MT&Mo)
              (if g$v$7922$MT&Mo
                (not (g$zero?$6440$MT&Mo
                       (bitwise-and
                         g$v$7922$MT&Mo
                         (g$enum-value$7843$MT&Mo
                           g$enumset$7921$MT&Mo))))
                '#f)))
           (g$get-value$7858$MT&Mo
             g$enumset$7921$MT&Mo
             g$symbol$7920$MT&Mo))))))
   (g$enum-set-subset?$7868$MT&Mo
     g$enum-set-subset?$7977$MT&Mo
     (case-lambda
       ((g$enumset1$7923$MT&Mo g$enumset2$7924$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-subset?
            g$enumset1$7923$MT&Mo)
          (g$assert-enum$7859$MT&Mo
            'enum-set-subset?
            g$enumset2$7924$MT&Mo)
          ((case-lambda
             ((g$v1$7925$MT&Mo g$v2$7926$MT&Mo)
              (if (g$enum-type=?$7856$MT&Mo
                    g$enumset1$7923$MT&Mo
                    g$enumset2$7924$MT&Mo)
                (= (bitwise-and g$v1$7925$MT&Mo g$v2$7926$MT&Mo)
                   g$v1$7925$MT&Mo)
                ((letrec ((g$f$7927$MT&Mo
                            (case-lambda
                              ((g$s$7928$MT&Mo)
                               (if (null? g$s$7928$MT&Mo)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$7929$MT&Mo g$v2*$7930$MT&Mo)
                                     (if g$v2*$7930$MT&Mo
                                       ((case-lambda
                                          ((g$has1$7931$MT&Mo
                                             g$has2$7932$MT&Mo)
                                           (if (if g$has1$7931$MT&Mo
                                                 (begin
                                                   '#f
                                                   (not g$has2$7932$MT&Mo))
                                                 '#f)
                                             '#f
                                             (g$f$7927$MT&Mo
                                               (cdr g$s$7928$MT&Mo)))))
                                        (not (g$zero?$6440$MT&Mo
                                               (bitwise-and
                                                 g$v1$7925$MT&Mo
                                                 g$v1*$7929$MT&Mo)))
                                        (not (g$zero?$6440$MT&Mo
                                               (bitwise-and
                                                 g$v2$7926$MT&Mo
                                                 g$v2*$7930$MT&Mo))))
                                       '#f)))
                                  (g$get-value$7858$MT&Mo
                                    g$enumset1$7923$MT&Mo
                                    (car g$s$7928$MT&Mo))
                                  (g$get-value$7858$MT&Mo
                                    g$enumset2$7924$MT&Mo
                                    (car g$s$7928$MT&Mo))))))))
                   g$f$7927$MT&Mo)
                 (g$get-symbols$7857$MT&Mo g$enumset1$7923$MT&Mo)))))
           (g$enum-value$7843$MT&Mo g$enumset1$7923$MT&Mo)
           (g$enum-value$7843$MT&Mo g$enumset2$7924$MT&Mo))))))
   (g$enum-set=?$7869$MT&Mo
     g$enum-set=?$7978$MT&Mo
     (case-lambda
       ((g$enumset1$7933$MT&Mo g$enumset2$7934$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo 'enum-set=? g$enumset1$7933$MT&Mo)
          (g$assert-enum$7859$MT&Mo 'enum-set=? g$enumset2$7934$MT&Mo)
          (if (g$enum-set-subset?$7868$MT&Mo
                g$enumset1$7933$MT&Mo
                g$enumset2$7934$MT&Mo)
            (begin
              '#f
              (g$enum-set-subset?$7868$MT&Mo
                g$enumset2$7934$MT&Mo
                g$enumset1$7933$MT&Mo))
            '#f)))))
   (g$enum-set-union$7870$MT&Mo
     g$enum-set-union$7979$MT&Mo
     (case-lambda
       ((g$enumset1$7935$MT&Mo g$enumset2$7936$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-union
            g$enumset1$7935$MT&Mo)
          (g$assert-enum$7859$MT&Mo
            'enum-set-union
            g$enumset2$7936$MT&Mo)
          (if (g$enum-type=?$7856$MT&Mo
                g$enumset1$7935$MT&Mo
                g$enumset2$7936$MT&Mo)
            (g$make-enum$7842$MT&Mo
              (bitwise-ior
                (g$enum-value$7843$MT&Mo g$enumset1$7935$MT&Mo)
                (g$enum-value$7843$MT&Mo g$enumset2$7936$MT&Mo))
              (g$enum-info$7844$MT&Mo g$enumset1$7935$MT&Mo))
            '#f)))))
   (g$enum-set-intersection$7871$MT&Mo
     g$enum-set-intersection$7980$MT&Mo
     (case-lambda
       ((g$enumset1$7937$MT&Mo g$enumset2$7938$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-intersection
            g$enumset1$7937$MT&Mo)
          (g$assert-enum$7859$MT&Mo
            'enum-set-intersection
            g$enumset2$7938$MT&Mo)
          (if (g$enum-type=?$7856$MT&Mo
                g$enumset1$7937$MT&Mo
                g$enumset2$7938$MT&Mo)
            (g$make-enum$7842$MT&Mo
              (bitwise-and
                (g$enum-value$7843$MT&Mo g$enumset1$7937$MT&Mo)
                (g$enum-value$7843$MT&Mo g$enumset2$7938$MT&Mo))
              (g$enum-info$7844$MT&Mo g$enumset1$7937$MT&Mo))
            '#f)))))
   (g$enum-set-difference$7872$MT&Mo
     g$enum-set-difference$7981$MT&Mo
     (case-lambda
       ((g$enumset1$7939$MT&Mo g$enumset2$7940$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-difference
            g$enumset1$7939$MT&Mo)
          (g$assert-enum$7859$MT&Mo
            'enum-set-difference
            g$enumset2$7940$MT&Mo)
          (if (g$enum-type=?$7856$MT&Mo
                g$enumset1$7939$MT&Mo
                g$enumset2$7940$MT&Mo)
            (g$make-enum$7842$MT&Mo
              (bitwise-and
                (g$enum-value$7843$MT&Mo g$enumset1$7939$MT&Mo)
                (bitwise-not
                  (g$enum-value$7843$MT&Mo g$enumset2$7940$MT&Mo)))
              (g$enum-info$7844$MT&Mo g$enumset1$7939$MT&Mo))
            '#f)))))
   (g$enum-set-complement$7873$MT&Mo
     g$enum-set-complement$7982$MT&Mo
     (case-lambda
       ((g$enumset$7941$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-complement
            g$enumset$7941$MT&Mo)
          (g$make-enum$7842$MT&Mo
            (bitwise-not (g$enum-value$7843$MT&Mo g$enumset$7941$MT&Mo))
            (g$enum-info$7844$MT&Mo g$enumset$7941$MT&Mo))))))
   (g$enum-set-projection$7874$MT&Mo
     g$enum-set-projection$7983$MT&Mo
     (case-lambda
       ((g$enumset1$7942$MT&Mo g$enumset2$7943$MT&Mo)
        (begin
          (g$assert-enum$7859$MT&Mo
            'enum-set-projection
            g$enumset1$7942$MT&Mo)
          (g$assert-enum$7859$MT&Mo
            'enum-set-projection
            g$enumset2$7943$MT&Mo)
          ((case-lambda
             ((g$v1$7944$MT&Mo)
              ((letrec ((g$f$7945$MT&Mo
                          (case-lambda
                            ((g$s$7946$MT&Mo g$v$7947$MT&Mo)
                             (if (null? g$s$7946$MT&Mo)
                               (g$make-enum$7842$MT&Mo
                                 g$v$7947$MT&Mo
                                 (g$enum-info$7844$MT&Mo
                                   g$enumset2$7943$MT&Mo))
                               (if (g$zero?$6440$MT&Mo
                                     (bitwise-and
                                       g$v1$7944$MT&Mo
                                       (g$get-value$7858$MT&Mo
                                         g$enumset1$7942$MT&Mo
                                         (car g$s$7946$MT&Mo))))
                                 (g$f$7945$MT&Mo
                                   (cdr g$s$7946$MT&Mo)
                                   g$v$7947$MT&Mo)
                                 ((case-lambda
                                    ((g$v2$7948$MT&Mo)
                                     (if g$v2$7948$MT&Mo
                                       (g$f$7945$MT&Mo
                                         (cdr g$s$7946$MT&Mo)
                                         (bitwise-ior
                                           g$v$7947$MT&Mo
                                           g$v2$7948$MT&Mo))
                                       (g$f$7945$MT&Mo
                                         (cdr g$s$7946$MT&Mo)
                                         g$v$7947$MT&Mo))))
                                  (g$get-value$7858$MT&Mo
                                    g$enumset2$7943$MT&Mo
                                    (car g$s$7946$MT&Mo)))))))))
                 g$f$7945$MT&Mo)
               (g$get-symbols$7857$MT&Mo g$enumset1$7942$MT&Mo)
               '0)))
           (g$enum-value$7843$MT&Mo g$enumset1$7942$MT&Mo)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$7875$MT&Mo g$p$7876$MT&Mo g$wr$7877$MT&Mo)
       (g$fprintf$8008$MT&Mo
         g$p$7876$MT&Mo
         '"#[enum-set ~a]"
         (g$enum-set->list$7866$MT&Mo g$x$7875$MT&Mo))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$7984$MT&Mo
     g$dofmt$8006$MT&Mo
     (case-lambda
       ((g$p$7988$MT&Mo g$cntl$7989$MT&Mo g$args$7990$MT&Mo)
        ((case-lambda
           ((g$nmax$7991$MT&Mo)
            ((letrec ((g$loop$7992$MT&Mo
                        (case-lambda
                          ((g$n$7993$MT&Mo g$a$7994$MT&Mo)
                           (if (fx<=? g$n$7993$MT&Mo g$nmax$7991$MT&Mo)
                             ((case-lambda
                                ((g$c$7995$MT&Mo)
                                 (if (if (g$char=?$6454$MT&Mo
                                           g$c$7995$MT&Mo
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$7993$MT&Mo
                                           g$nmax$7991$MT&Mo))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$7996$MT&Mo)
                                       (if (eqv? g$t$7996$MT&Mo '#\a)
                                         (begin
                                           (display
                                             (car g$a$7994$MT&Mo)
                                             g$p$7988$MT&Mo)
                                           (g$loop$7992$MT&Mo
                                             (fx+ g$n$7993$MT&Mo '2)
                                             (cdr g$a$7994$MT&Mo)))
                                         (if (eqv? g$t$7996$MT&Mo '#\s)
                                           (begin
                                             (write
                                               (car g$a$7994$MT&Mo)
                                               g$p$7988$MT&Mo)
                                             (g$loop$7992$MT&Mo
                                               (fx+ g$n$7993$MT&Mo '2)
                                               (cdr g$a$7994$MT&Mo)))
                                           (if (eqv?
                                                 g$t$7996$MT&Mo
                                                 '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$7994$MT&Mo)
                                                   '2)
                                                 g$p$7988$MT&Mo)
                                               (g$loop$7992$MT&Mo
                                                 (fx+ g$n$7993$MT&Mo '2)
                                                 (cdr g$a$7994$MT&Mo)))
                                             (if (eqv?
                                                   g$t$7996$MT&Mo
                                                   '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$7994$MT&Mo)
                                                     '8)
                                                   g$p$7988$MT&Mo)
                                                 (g$loop$7992$MT&Mo
                                                   (fx+ g$n$7993$MT&Mo
                                                        '2)
                                                   (cdr g$a$7994$MT&Mo)))
                                               (if (eqv?
                                                     g$t$7996$MT&Mo
                                                     '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$7994$MT&Mo)
                                                       '16)
                                                     g$p$7988$MT&Mo)
                                                   (g$loop$7992$MT&Mo
                                                     (fx+ g$n$7993$MT&Mo
                                                          '2)
                                                     (cdr g$a$7994$MT&Mo)))
                                                 (if (eqv?
                                                       g$t$7996$MT&Mo
                                                       '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$7994$MT&Mo)
                                                         '10)
                                                       g$p$7988$MT&Mo)
                                                     (g$loop$7992$MT&Mo
                                                       (fx+ g$n$7993$MT&Mo
                                                            '2)
                                                       (cdr g$a$7994$MT&Mo)))
                                                   (if (eqv?
                                                         g$t$7996$MT&Mo
                                                         '#\~)
                                                     (begin
                                                       (g$write-char$7830$MT&Mo
                                                         '#\~
                                                         g$p$7988$MT&Mo)
                                                       (g$loop$7992$MT&Mo
                                                         (fx+ g$n$7993$MT&Mo
                                                              '2)
                                                         g$a$7994$MT&Mo))
                                                     (begin
                                                       (g$write-char$7830$MT&Mo
                                                         g$c$7995$MT&Mo
                                                         g$p$7988$MT&Mo)
                                                       (g$loop$7992$MT&Mo
                                                         (fx+ g$n$7993$MT&Mo
                                                              '1)
                                                         g$a$7994$MT&Mo)))))))))))
                                    (string-ref
                                      g$cntl$7989$MT&Mo
                                      (fx+ g$n$7993$MT&Mo '1)))
                                   (begin
                                     (g$write-char$7830$MT&Mo
                                       g$c$7995$MT&Mo
                                       g$p$7988$MT&Mo)
                                     (g$loop$7992$MT&Mo
                                       (fx+ g$n$7993$MT&Mo '1)
                                       g$a$7994$MT&Mo)))))
                              (string-ref
                                g$cntl$7989$MT&Mo
                                g$n$7993$MT&Mo))
                             (void))))))
               g$loop$7992$MT&Mo)
             '0
             g$args$7990$MT&Mo)))
         (fx- (string-length g$cntl$7989$MT&Mo) '1)))))
   (g$printf$7985$MT&Mo
     g$printf$8007$MT&Mo
     (case-lambda
       ((g$control$7997$MT&Mo . g$args$7998$MT&Mo)
        (g$dofmt$7984$MT&Mo
          (current-output-port)
          g$control$7997$MT&Mo
          g$args$7998$MT&Mo))))
   (g$fprintf$7986$MT&Mo
     g$fprintf$8008$MT&Mo
     (case-lambda
       ((g$p$7999$MT&Mo g$control$8000$MT&Mo . g$args$8001$MT&Mo)
        (g$dofmt$7984$MT&Mo
          g$p$7999$MT&Mo
          g$control$8000$MT&Mo
          g$args$8001$MT&Mo))))
   (g$format$7987$MT&Mo
     g$format$8009$MT&Mo
     (case-lambda
       ((g$control$8002$MT&Mo . g$args$8003$MT&Mo)
        (call-with-values
          g$open-string-output-port$7772$MT&Mo
          (case-lambda
            ((g$p$8004$MT&Mo g$c$8005$MT&Mo)
             (begin
               (g$dofmt$7984$MT&Mo
                 g$p$8004$MT&Mo
                 g$control$8002$MT&Mo
                 g$args$8003$MT&Mo)
               (g$c$8005$MT&Mo)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$8010$MT&Mo
     g$make-traced-macro$8013$MT&Mo
     (case-lambda
       ((g$name$8011$MT&Mo g$x$8012$MT&Mo)
        (if (g$procedure?$6404$MT&Mo g$x$8012$MT&Mo)
          (make-traced-procedure
            g$name$8011$MT&Mo
            g$x$8012$MT&Mo
            g$syntax->datum$13287$MT&Mo)
          (if (g$variable-transformer?$13109$MT&Mo g$x$8012$MT&Mo)
            (g$make-variable-transformer$13107$MT&Mo
              (make-traced-procedure
                g$name$8011$MT&Mo
                (g$variable-transformer-procedure$13110$MT&Mo
                  g$x$8012$MT&Mo)
                g$syntax->datum$13287$MT&Mo))
            g$x$8012$MT&Mo))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$8014$MT&Mo
     g$library-version-mismatch-warning$8171$MT&Mo
     (case-lambda
       ((g$name$8143$MT&Mo g$depname$8144$MT&Mo g$filename$8145$MT&Mo)
        (g$fprintf$8008$MT&Mo
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$8143$MT&Mo
          g$depname$8144$MT&Mo
          g$filename$8145$MT&Mo))))
   (g$file-locator-resolution-error$8015$MT&Mo
     g$file-locator-resolution-error$8172$MT&Mo
     (case-lambda
       ((g$libname$8146$MT&Mo g$failed-list$8147$MT&Mo)
        (letrec* ((g$6766$8148$MT&Mo
                    (make-record-type-descriptor
                      '&library-resolution
                      g$&condition-rtd$7045$MT&Mo
                      'g$6769$MT&Mo
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$6768$8149$MT&Mo '#f)
                  (g$6767$8150$MT&Mo
                    (make-record-constructor-descriptor
                      g$6766$8148$MT&Mo
                      g$&condition-rcd$7046$MT&Mo
                      g$6768$8149$MT&Mo))
                  (g$6765$8153$MT&Mo
                    (record-predicate g$6766$8148$MT&Mo))
                  (g$make-library-resolution-condition$8154$MT&Mo
                    (record-constructor g$6767$8150$MT&Mo))
                  (g$6763$8155$MT&Mo
                    (record-accessor g$6766$8148$MT&Mo '0))
                  (g$6764$8156$MT&Mo
                    (record-accessor g$6766$8148$MT&Mo '1))
                  (g$library-resolution-condition?$8157$MT&Mo
                    (condition-predicate g$6766$8148$MT&Mo))
                  (g$condition-library$8158$MT&Mo
                    (condition-accessor
                      g$6766$8148$MT&Mo
                      g$6763$8155$MT&Mo))
                  (g$condition-files$8159$MT&Mo
                    (condition-accessor
                      g$6766$8148$MT&Mo
                      g$6764$8156$MT&Mo)))
          (raise
            (condition
              (g$make-error$7077$MT&Mo)
              (g$make-who-condition$7111$MT&Mo 'expander)
              (g$make-message-condition$7051$MT&Mo
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$8154$MT&Mo
                g$libname$8146$MT&Mo
                g$failed-list$8147$MT&Mo)))))))
   (g$read-library-source-file$8016$MT&Mo
     g$read-library-source-file$8173$MT&Mo
     (case-lambda
       ((g$file-name$8160$MT&Mo)
        (g$with-input-from-file$7831$MT&Mo
          g$file-name$8160$MT&Mo
          read-annotated))))
   (g$make-parameter$8017$MT&Mo
     g$make-parameter$8174$MT&Mo
     (case-lambda
       ((g$x$8161$MT&Mo)
        (g$make-parameter$8017$MT&Mo
          g$x$8161$MT&Mo
          (case-lambda ((g$x$8162$MT&Mo) g$x$8162$MT&Mo))))
       ((g$x$8163$MT&Mo g$fender$8164$MT&Mo)
        (begin
          (if (not (g$procedure?$6404$MT&Mo g$fender$8164$MT&Mo))
            (g$assertion-error$13280$MT&Mo
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(90,8) - (90,36)"))
            (void))
          ((case-lambda
             ((g$x$8165$MT&Mo)
              (case-lambda
                (() g$x$8165$MT&Mo)
                ((g$v$8166$MT&Mo)
                 (set! g$x$8165$MT&Mo
                   (g$fender$8164$MT&Mo g$v$8166$MT&Mo))))))
           (g$fender$8164$MT&Mo g$x$8163$MT&Mo))))))
   (g$file-options-constructor$8139$MT&Mo
     g$file-options-constructor$8175$MT&Mo
     (g$make-parameter$8017$MT&Mo '#f))
   (g$file-options-spec$8140$MT&Mo
     g$file-options-spec$8176$MT&Mo
     (case-lambda
       ((g$x$8167$MT&Mo)
        ((g$file-options-constructor$8139$MT&Mo) g$x$8167$MT&Mo))))
   (g$set-label-binding!$8141$MT&Mo
     g$set-label-binding!$8177$MT&Mo
     (case-lambda
       ((g$label$8168$MT&Mo g$binding$8169$MT&Mo)
        (set-symbol-value! g$label$8168$MT&Mo g$binding$8169$MT&Mo))))
   (g$label-binding$8142$MT&Mo
     g$label-binding$8178$MT&Mo
     (case-lambda
       ((g$label$8170$MT&Mo)
        (if (symbol-bound? g$label$8170$MT&Mo)
          (begin '#f (symbol-value g$label$8170$MT&Mo))
          '#f)))))
  (void))

(library-letrec* (ironscheme pretty-print)
  ((g$genwrite:newline-str$8179$MT&Mo
     g$genwrite:newline-str$8369$MT&Mo
     (make-string '1 '#\newline))
   (g$generic-write$8180$MT&Mo
     g$generic-write$8370$MT&Mo
     (case-lambda
       ((g$obj$8184$MT&Mo
          g$display?$8185$MT&Mo
          g$width$8186$MT&Mo
          g$output$8187$MT&Mo)
        (letrec* ((g$read-macro?$8188$MT&Mo
                    (case-lambda
                      ((g$l$8349$MT&Mo)
                       (letrec* ((g$length1?$8350$MT&Mo
                                   (case-lambda
                                     ((g$l$8354$MT&Mo)
                                      (if (pair? g$l$8354$MT&Mo)
                                        (begin
                                          '#f
                                          (null? (cdr g$l$8354$MT&Mo)))
                                        '#f)))))
                         ((case-lambda
                            ((g$head$8351$MT&Mo g$tail$8352$MT&Mo)
                             ((case-lambda
                                ((g$t$8353$MT&Mo)
                                 (if (g$memv$5746$MT&Mo
                                       g$t$8353$MT&Mo
                                       '(quote
                                          quasiquote
                                          unquote
                                          unquote-splicing
                                          syntax
                                          quasisyntax
                                          unsyntax
                                          unsyntax-splicing))
                                   (g$length1?$8350$MT&Mo
                                     g$tail$8352$MT&Mo)
                                   '#f)))
                              g$head$8351$MT&Mo)))
                          (car g$l$8349$MT&Mo)
                          (cdr g$l$8349$MT&Mo))))))
                  (g$read-macro-body$8189$MT&Mo
                    (case-lambda
                      ((g$l$8348$MT&Mo)
                       (g$cadr$6411$MT&Mo g$l$8348$MT&Mo))))
                  (g$read-macro-prefix$8190$MT&Mo
                    (case-lambda
                      ((g$l$8344$MT&Mo)
                       ((case-lambda
                          ((g$head$8345$MT&Mo g$tail$8346$MT&Mo)
                           ((case-lambda
                              ((g$t$8347$MT&Mo)
                               (if (eqv? g$t$8347$MT&Mo 'syntax)
                                 '"#'"
                                 (if (eqv? g$t$8347$MT&Mo 'quasisyntax)
                                   '"#`"
                                   (if (eqv? g$t$8347$MT&Mo 'unsyntax)
                                     '"#,"
                                     (if (eqv?
                                           g$t$8347$MT&Mo
                                           'unsyntax-splicing)
                                       '"#,@"
                                       (if (eqv? g$t$8347$MT&Mo 'quote)
                                         '"'"
                                         (if (eqv?
                                               g$t$8347$MT&Mo
                                               'quasiquote)
                                           '"`"
                                           (if (eqv?
                                                 g$t$8347$MT&Mo
                                                 'unquote)
                                             '","
                                             (if (eqv?
                                                   g$t$8347$MT&Mo
                                                   'unquote-splicing)
                                               '",@"
                                               (if '#f
                                                 '#f
                                                 (void))))))))))))
                            g$head$8345$MT&Mo)))
                        (car g$l$8344$MT&Mo)
                        (cdr g$l$8344$MT&Mo)))))
                  (g$out$8191$MT&Mo
                    (case-lambda
                      ((g$str$8342$MT&Mo g$col$8343$MT&Mo)
                       (if g$col$8343$MT&Mo
                         (if (g$output$8187$MT&Mo g$str$8342$MT&Mo)
                           (begin
                             '#f
                             (fx+ g$col$8343$MT&Mo
                                  (string-length g$str$8342$MT&Mo)))
                           '#f)
                         '#f))))
                  (g$wr$8192$MT&Mo
                    (case-lambda
                      ((g$obj$8325$MT&Mo g$col$8326$MT&Mo)
                       (letrec* ((g$wr-expr$8327$MT&Mo
                                   (case-lambda
                                     ((g$expr$8340$MT&Mo
                                        g$col$8341$MT&Mo)
                                      (if (g$read-macro?$8188$MT&Mo
                                            g$expr$8340$MT&Mo)
                                        (g$wr$8192$MT&Mo
                                          (g$read-macro-body$8189$MT&Mo
                                            g$expr$8340$MT&Mo)
                                          (g$out$8191$MT&Mo
                                            (g$read-macro-prefix$8190$MT&Mo
                                              g$expr$8340$MT&Mo)
                                            g$col$8341$MT&Mo))
                                        (g$wr-lst$8328$MT&Mo
                                          g$expr$8340$MT&Mo
                                          g$col$8341$MT&Mo)))))
                                 (g$wr-lst$8328$MT&Mo
                                   (case-lambda
                                     ((g$l$8335$MT&Mo g$col$8336$MT&Mo)
                                      (if (pair? g$l$8335$MT&Mo)
                                        ((letrec ((g$loop$8337$MT&Mo
                                                    (case-lambda
                                                      ((g$l$8338$MT&Mo
                                                         g$col$8339$MT&Mo)
                                                       (if (not g$col$8339$MT&Mo)
                                                         g$col$8339$MT&Mo
                                                         (if (pair?
                                                               g$l$8338$MT&Mo)
                                                           (g$loop$8337$MT&Mo
                                                             (cdr g$l$8338$MT&Mo)
                                                             (g$wr$8192$MT&Mo
                                                               (car g$l$8338$MT&Mo)
                                                               (g$out$8191$MT&Mo
                                                                 '" "
                                                                 g$col$8339$MT&Mo)))
                                                           (if (null?
                                                                 g$l$8338$MT&Mo)
                                                             (g$out$8191$MT&Mo
                                                               '")"
                                                               g$col$8339$MT&Mo)
                                                             (g$out$8191$MT&Mo
                                                               '")"
                                                               (g$wr$8192$MT&Mo
                                                                 g$l$8338$MT&Mo
                                                                 (g$out$8191$MT&Mo
                                                                   '" . "
                                                                   g$col$8339$MT&Mo))))))))))
                                           g$loop$8337$MT&Mo)
                                         (cdr g$l$8335$MT&Mo)
                                         (if g$col$8336$MT&Mo
                                           (begin
                                             '#f
                                             (g$wr$8192$MT&Mo
                                               (car g$l$8335$MT&Mo)
                                               (g$out$8191$MT&Mo
                                                 '"("
                                                 g$col$8336$MT&Mo)))
                                           '#f))
                                        (g$out$8191$MT&Mo
                                          '"()"
                                          g$col$8336$MT&Mo))))))
                         (if (pair? g$obj$8325$MT&Mo)
                           (g$wr-expr$8327$MT&Mo
                             g$obj$8325$MT&Mo
                             g$col$8326$MT&Mo)
                           (if (null? g$obj$8325$MT&Mo)
                             (g$wr-lst$8328$MT&Mo
                               g$obj$8325$MT&Mo
                               g$col$8326$MT&Mo)
                             (if (g$vector?$6400$MT&Mo g$obj$8325$MT&Mo)
                               (g$wr-lst$8328$MT&Mo
                                 (vector->list g$obj$8325$MT&Mo)
                                 (g$out$8191$MT&Mo
                                   '"#"
                                   g$col$8326$MT&Mo))
                               (if (g$boolean?$6403$MT&Mo
                                     g$obj$8325$MT&Mo)
                                 (g$out$8191$MT&Mo
                                   (if g$obj$8325$MT&Mo '"#t" '"#f")
                                   g$col$8326$MT&Mo)
                                 (if (number? g$obj$8325$MT&Mo)
                                   (g$out$8191$MT&Mo
                                     (number->string g$obj$8325$MT&Mo)
                                     g$col$8326$MT&Mo)
                                   (if (g$symbol?$6402$MT&Mo
                                         g$obj$8325$MT&Mo)
                                     (g$out$8191$MT&Mo
                                       (symbol->string g$obj$8325$MT&Mo)
                                       g$col$8326$MT&Mo)
                                     (if (string? g$obj$8325$MT&Mo)
                                       (if g$display?$8185$MT&Mo
                                         (g$out$8191$MT&Mo
                                           g$obj$8325$MT&Mo
                                           g$col$8326$MT&Mo)
                                         ((letrec ((g$loop$8329$MT&Mo
                                                     (case-lambda
                                                       ((g$i$8330$MT&Mo
                                                          g$j$8331$MT&Mo
                                                          g$col$8332$MT&Mo)
                                                        (if (if g$col$8332$MT&Mo
                                                              (begin
                                                                '#f
                                                                (fx<?
                                                                  g$j$8331$MT&Mo
                                                                  (string-length
                                                                    g$obj$8325$MT&Mo)))
                                                              '#f)
                                                          ((case-lambda
                                                             ((g$c$8333$MT&Mo)
                                                              (if ((case-lambda
                                                                     ((g$t$8334$MT&Mo)
                                                                      (if g$t$8334$MT&Mo
                                                                        g$t$8334$MT&Mo
                                                                        (begin
                                                                          '#f
                                                                          (g$char=?$6454$MT&Mo
                                                                            g$c$8333$MT&Mo
                                                                            '#\")))))
                                                                   (g$char=?$6454$MT&Mo
                                                                     g$c$8333$MT&Mo
                                                                     '#\\))
                                                                (g$loop$8329$MT&Mo
                                                                  g$j$8331$MT&Mo
                                                                  (fx+ g$j$8331$MT&Mo
                                                                       '1)
                                                                  (g$out$8191$MT&Mo
                                                                    '"\\"
                                                                    (g$out$8191$MT&Mo
                                                                      (substring
                                                                        g$obj$8325$MT&Mo
                                                                        g$i$8330$MT&Mo
                                                                        g$j$8331$MT&Mo)
                                                                      g$col$8332$MT&Mo)))
                                                                (g$loop$8329$MT&Mo
                                                                  g$i$8330$MT&Mo
                                                                  (fx+ g$j$8331$MT&Mo
                                                                       '1)
                                                                  g$col$8332$MT&Mo))))
                                                           (string-ref
                                                             g$obj$8325$MT&Mo
                                                             g$j$8331$MT&Mo))
                                                          (g$out$8191$MT&Mo
                                                            '"\""
                                                            (g$out$8191$MT&Mo
                                                              (substring
                                                                g$obj$8325$MT&Mo
                                                                g$i$8330$MT&Mo
                                                                g$j$8331$MT&Mo)
                                                              g$col$8332$MT&Mo)))))))
                                            g$loop$8329$MT&Mo)
                                          '0
                                          '0
                                          (g$out$8191$MT&Mo
                                            '"\""
                                            g$col$8326$MT&Mo)))
                                       (g$out$8191$MT&Mo
                                         (g$format$8009$MT&Mo
                                           (if g$display?$8185$MT&Mo
                                             '"~a"
                                             '"~s")
                                           g$obj$8325$MT&Mo)
                                         g$col$8326$MT&Mo))))))))))))
                  (g$pp$8193$MT&Mo
                    (case-lambda
                      ((g$obj$8194$MT&Mo g$col$8195$MT&Mo)
                       (letrec* ((g$spaces$8196$MT&Mo
                                   (case-lambda
                                     ((g$n$8323$MT&Mo g$col$8324$MT&Mo)
                                      (if (fx>? g$n$8323$MT&Mo '0)
                                        (if (fx>? g$n$8323$MT&Mo '7)
                                          (g$spaces$8196$MT&Mo
                                            (fx- g$n$8323$MT&Mo '8)
                                            (g$out$8191$MT&Mo
                                              '"        "
                                              g$col$8324$MT&Mo))
                                          (g$out$8191$MT&Mo
                                            (substring
                                              '"        "
                                              '0
                                              g$n$8323$MT&Mo)
                                            g$col$8324$MT&Mo))
                                        g$col$8324$MT&Mo))))
                                 (g$indent$8197$MT&Mo
                                   (case-lambda
                                     ((g$to$8321$MT&Mo g$col$8322$MT&Mo)
                                      (if g$col$8322$MT&Mo
                                        (begin
                                          '#f
                                          (if (fx<?
                                                g$to$8321$MT&Mo
                                                g$col$8322$MT&Mo)
                                            (if (g$out$8191$MT&Mo
                                                  g$genwrite:newline-str$8179$MT&Mo
                                                  g$col$8322$MT&Mo)
                                              (begin
                                                '#f
                                                (g$spaces$8196$MT&Mo
                                                  g$to$8321$MT&Mo
                                                  '0))
                                              '#f)
                                            (g$spaces$8196$MT&Mo
                                              (fx- g$to$8321$MT&Mo
                                                   g$col$8322$MT&Mo)
                                              g$col$8322$MT&Mo)))
                                        '#f))))
                                 (g$pr$8198$MT&Mo
                                   (case-lambda
                                     ((g$obj$8313$MT&Mo
                                        g$col$8314$MT&Mo
                                        g$extra$8315$MT&Mo
                                        g$pp-pair$8316$MT&Mo)
                                      (if ((case-lambda
                                             ((g$t$8317$MT&Mo)
                                              (if g$t$8317$MT&Mo
                                                g$t$8317$MT&Mo
                                                (begin
                                                  '#f
                                                  (g$vector?$6400$MT&Mo
                                                    g$obj$8313$MT&Mo)))))
                                           (pair? g$obj$8313$MT&Mo))
                                        ((case-lambda
                                           ((g$result$8318$MT&Mo
                                              g$left$8319$MT&Mo)
                                            (begin
                                              (g$generic-write$8180$MT&Mo
                                                g$obj$8313$MT&Mo
                                                g$display?$8185$MT&Mo
                                                '#f
                                                (case-lambda
                                                  ((g$str$8320$MT&Mo)
                                                   (begin
                                                     (set! g$result$8318$MT&Mo
                                                       (cons
                                                         g$str$8320$MT&Mo
                                                         g$result$8318$MT&Mo))
                                                     (set! g$left$8319$MT&Mo
                                                       (fx- g$left$8319$MT&Mo
                                                            (string-length
                                                              g$str$8320$MT&Mo)))
                                                     (fx>?
                                                       g$left$8319$MT&Mo
                                                       '0)))))
                                              (if (fx>?
                                                    g$left$8319$MT&Mo
                                                    '0)
                                                (g$out$8191$MT&Mo
                                                  (g$reverse-string-append$8182$MT&Mo
                                                    g$result$8318$MT&Mo)
                                                  g$col$8314$MT&Mo)
                                                (if (pair?
                                                      g$obj$8313$MT&Mo)
                                                  (g$pp-pair$8316$MT&Mo
                                                    g$obj$8313$MT&Mo
                                                    g$col$8314$MT&Mo
                                                    g$extra$8315$MT&Mo)
                                                  (g$pp-list$8201$MT&Mo
                                                    (vector->list
                                                      g$obj$8313$MT&Mo)
                                                    (g$out$8191$MT&Mo
                                                      '"#"
                                                      g$col$8314$MT&Mo)
                                                    g$extra$8315$MT&Mo
                                                    g$pp-expr$8199$MT&Mo))))))
                                         '()
                                         (g$min$6444$MT&Mo
                                           (fx+ (fx- (fx- g$width$8186$MT&Mo
                                                          g$col$8314$MT&Mo)
                                                     g$extra$8315$MT&Mo)
                                                '1)
                                           (g$pretty-width$8181$MT&Mo)))
                                        (g$wr$8192$MT&Mo
                                          g$obj$8313$MT&Mo
                                          g$col$8314$MT&Mo)))))
                                 (g$pp-expr$8199$MT&Mo
                                   (case-lambda
                                     ((g$expr$8308$MT&Mo
                                        g$col$8309$MT&Mo
                                        g$extra$8310$MT&Mo)
                                      (if (g$read-macro?$8188$MT&Mo
                                            g$expr$8308$MT&Mo)
                                        (g$pr$8198$MT&Mo
                                          (g$read-macro-body$8189$MT&Mo
                                            g$expr$8308$MT&Mo)
                                          (g$out$8191$MT&Mo
                                            (g$read-macro-prefix$8190$MT&Mo
                                              g$expr$8308$MT&Mo)
                                            g$col$8309$MT&Mo)
                                          g$extra$8310$MT&Mo
                                          g$pp-expr$8199$MT&Mo)
                                        ((case-lambda
                                           ((g$head$8311$MT&Mo)
                                            (if (g$symbol?$6402$MT&Mo
                                                  g$head$8311$MT&Mo)
                                              ((case-lambda
                                                 ((g$proc$8312$MT&Mo)
                                                  (if g$proc$8312$MT&Mo
                                                    (g$proc$8312$MT&Mo
                                                      g$expr$8308$MT&Mo
                                                      g$col$8309$MT&Mo
                                                      g$extra$8310$MT&Mo)
                                                    (if (fx>?
                                                          (string-length
                                                            (symbol->string
                                                              g$head$8311$MT&Mo))
                                                          g$max-call-head-width$8216$MT&Mo)
                                                      (g$pp-general$8203$MT&Mo
                                                        g$expr$8308$MT&Mo
                                                        g$col$8309$MT&Mo
                                                        g$extra$8310$MT&Mo
                                                        '#f
                                                        '#f
                                                        '#f
                                                        g$pp-expr$8199$MT&Mo)
                                                      (g$pp-call$8200$MT&Mo
                                                        g$expr$8308$MT&Mo
                                                        g$col$8309$MT&Mo
                                                        g$extra$8310$MT&Mo
                                                        g$pp-expr$8199$MT&Mo)))))
                                               (g$style$8217$MT&Mo
                                                 g$head$8311$MT&Mo))
                                              (g$pp-list$8201$MT&Mo
                                                g$expr$8308$MT&Mo
                                                g$col$8309$MT&Mo
                                                g$extra$8310$MT&Mo
                                                g$pp-expr$8199$MT&Mo))))
                                         (car g$expr$8308$MT&Mo))))))
                                 (g$pp-call$8200$MT&Mo
                                   (case-lambda
                                     ((g$expr$8303$MT&Mo
                                        g$col$8304$MT&Mo
                                        g$extra$8305$MT&Mo
                                        g$pp-item$8306$MT&Mo)
                                      ((case-lambda
                                         ((g$col*$8307$MT&Mo)
                                          (if g$col$8304$MT&Mo
                                            (begin
                                              '#f
                                              (g$pp-down$8202$MT&Mo
                                                (cdr g$expr$8303$MT&Mo)
                                                g$col*$8307$MT&Mo
                                                (fx+ g$col*$8307$MT&Mo
                                                     '1)
                                                g$extra$8305$MT&Mo
                                                g$pp-item$8306$MT&Mo))
                                            '#f)))
                                       (g$wr$8192$MT&Mo
                                         (car g$expr$8303$MT&Mo)
                                         (g$out$8191$MT&Mo
                                           '"("
                                           g$col$8304$MT&Mo))))))
                                 (g$pp-list$8201$MT&Mo
                                   (case-lambda
                                     ((g$l$8298$MT&Mo
                                        g$col$8299$MT&Mo
                                        g$extra$8300$MT&Mo
                                        g$pp-item$8301$MT&Mo)
                                      ((case-lambda
                                         ((g$col$8302$MT&Mo)
                                          (g$pp-down$8202$MT&Mo
                                            g$l$8298$MT&Mo
                                            g$col$8302$MT&Mo
                                            g$col$8302$MT&Mo
                                            g$extra$8300$MT&Mo
                                            g$pp-item$8301$MT&Mo)))
                                       (g$out$8191$MT&Mo
                                         '"("
                                         g$col$8299$MT&Mo)))))
                                 (g$pp-down$8202$MT&Mo
                                   (case-lambda
                                     ((g$l$8288$MT&Mo
                                        g$col1$8289$MT&Mo
                                        g$col2$8290$MT&Mo
                                        g$extra$8291$MT&Mo
                                        g$pp-item$8292$MT&Mo)
                                      ((letrec ((g$loop$8293$MT&Mo
                                                  (case-lambda
                                                    ((g$l$8294$MT&Mo
                                                       g$col$8295$MT&Mo)
                                                     (if g$col$8295$MT&Mo
                                                       (begin
                                                         '#f
                                                         (if (pair?
                                                               g$l$8294$MT&Mo)
                                                           ((case-lambda
                                                              ((g$rest$8296$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$extra$8297$MT&Mo)
                                                                   (g$loop$8293$MT&Mo
                                                                     g$rest$8296$MT&Mo
                                                                     (g$pr$8198$MT&Mo
                                                                       (car g$l$8294$MT&Mo)
                                                                       (g$indent$8197$MT&Mo
                                                                         g$col2$8290$MT&Mo
                                                                         g$col$8295$MT&Mo)
                                                                       g$extra$8297$MT&Mo
                                                                       g$pp-item$8292$MT&Mo))))
                                                                (if (null?
                                                                      g$rest$8296$MT&Mo)
                                                                  (fx+ g$extra$8291$MT&Mo
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$l$8294$MT&Mo))
                                                           (if (null?
                                                                 g$l$8294$MT&Mo)
                                                             (g$out$8191$MT&Mo
                                                               '")"
                                                               g$col$8295$MT&Mo)
                                                             (g$out$8191$MT&Mo
                                                               '")"
                                                               (g$pr$8198$MT&Mo
                                                                 g$l$8294$MT&Mo
                                                                 (g$indent$8197$MT&Mo
                                                                   g$col2$8290$MT&Mo
                                                                   (g$out$8191$MT&Mo
                                                                     '"."
                                                                     (g$indent$8197$MT&Mo
                                                                       g$col2$8290$MT&Mo
                                                                       g$col$8295$MT&Mo)))
                                                                 (fx+ g$extra$8291$MT&Mo
                                                                      '1)
                                                                 g$pp-item$8292$MT&Mo)))))
                                                       '#f)))))
                                         g$loop$8293$MT&Mo)
                                       g$l$8288$MT&Mo
                                       g$col1$8289$MT&Mo))))
                                 (g$pp-general$8203$MT&Mo
                                   (case-lambda
                                     ((g$expr$8255$MT&Mo
                                        g$col$8256$MT&Mo
                                        g$extra$8257$MT&Mo
                                        g$named?$8258$MT&Mo
                                        g$pp-1$8259$MT&Mo
                                        g$pp-2$8260$MT&Mo
                                        g$pp-3$8261$MT&Mo)
                                      (letrec* ((g$tail1$8262$MT&Mo
                                                  (case-lambda
                                                    ((g$rest$8281$MT&Mo
                                                       g$col1$8282$MT&Mo
                                                       g$col2$8283$MT&Mo
                                                       g$col3$8284$MT&Mo)
                                                     (if (if g$pp-1$8259$MT&Mo
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$8281$MT&Mo))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$8285$MT&Mo)
                                                           ((case-lambda
                                                              ((g$rest$8286$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$extra$8287$MT&Mo)
                                                                   (g$tail2$8263$MT&Mo
                                                                     g$rest$8286$MT&Mo
                                                                     g$col1$8282$MT&Mo
                                                                     (g$pr$8198$MT&Mo
                                                                       g$val1$8285$MT&Mo
                                                                       (g$indent$8197$MT&Mo
                                                                         g$col3$8284$MT&Mo
                                                                         g$col2$8283$MT&Mo)
                                                                       g$extra$8287$MT&Mo
                                                                       g$pp-1$8259$MT&Mo)
                                                                     g$col3$8284$MT&Mo)))
                                                                (if (null?
                                                                      g$rest$8286$MT&Mo)
                                                                  (fx+ g$extra$8257$MT&Mo
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$rest$8281$MT&Mo))))
                                                        (car g$rest$8281$MT&Mo))
                                                       (g$tail2$8263$MT&Mo
                                                         g$rest$8281$MT&Mo
                                                         g$col1$8282$MT&Mo
                                                         g$col2$8283$MT&Mo
                                                         g$col3$8284$MT&Mo)))))
                                                (g$tail2$8263$MT&Mo
                                                  (case-lambda
                                                    ((g$rest$8274$MT&Mo
                                                       g$col1$8275$MT&Mo
                                                       g$col2$8276$MT&Mo
                                                       g$col3$8277$MT&Mo)
                                                     (if (if g$pp-2$8260$MT&Mo
                                                           (begin
                                                             '#f
                                                             (pair?
                                                               g$rest$8274$MT&Mo))
                                                           '#f)
                                                       ((case-lambda
                                                          ((g$val1$8278$MT&Mo)
                                                           ((case-lambda
                                                              ((g$rest$8279$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$extra$8280$MT&Mo)
                                                                   (g$tail3$8264$MT&Mo
                                                                     g$rest$8279$MT&Mo
                                                                     g$col1$8275$MT&Mo
                                                                     (g$pr$8198$MT&Mo
                                                                       g$val1$8278$MT&Mo
                                                                       (g$indent$8197$MT&Mo
                                                                         g$col3$8277$MT&Mo
                                                                         g$col2$8276$MT&Mo)
                                                                       g$extra$8280$MT&Mo
                                                                       g$pp-2$8260$MT&Mo))))
                                                                (if (null?
                                                                      g$rest$8279$MT&Mo)
                                                                  (fx+ g$extra$8257$MT&Mo
                                                                       '1)
                                                                  '0))))
                                                            (cdr g$rest$8274$MT&Mo))))
                                                        (car g$rest$8274$MT&Mo))
                                                       (g$tail3$8264$MT&Mo
                                                         g$rest$8274$MT&Mo
                                                         g$col1$8275$MT&Mo
                                                         g$col2$8276$MT&Mo)))))
                                                (g$tail3$8264$MT&Mo
                                                  (case-lambda
                                                    ((g$rest$8271$MT&Mo
                                                       g$col1$8272$MT&Mo
                                                       g$col2$8273$MT&Mo)
                                                     (g$pp-down$8202$MT&Mo
                                                       g$rest$8271$MT&Mo
                                                       g$col2$8273$MT&Mo
                                                       g$col1$8272$MT&Mo
                                                       g$extra$8257$MT&Mo
                                                       g$pp-3$8261$MT&Mo)))))
                                        ((case-lambda
                                           ((g$head$8265$MT&Mo)
                                            ((case-lambda
                                               ((g$rest$8266$MT&Mo)
                                                ((case-lambda
                                                   ((g$col*$8267$MT&Mo)
                                                    (if (if g$named?$8258$MT&Mo
                                                          (begin
                                                            '#f
                                                            (pair?
                                                              g$rest$8266$MT&Mo))
                                                          '#f)
                                                      ((case-lambda
                                                         ((g$name$8268$MT&Mo)
                                                          ((case-lambda
                                                             ((g$rest$8269$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$col**$8270$MT&Mo)
                                                                  (g$tail1$8262$MT&Mo
                                                                    g$rest$8269$MT&Mo
                                                                    (fx+ g$col$8256$MT&Mo
                                                                         g$indent-general$8215$MT&Mo)
                                                                    g$col**$8270$MT&Mo
                                                                    (fx+ g$col**$8270$MT&Mo
                                                                         '1))))
                                                               (g$wr$8192$MT&Mo
                                                                 g$name$8268$MT&Mo
                                                                 (g$out$8191$MT&Mo
                                                                   '" "
                                                                   g$col*$8267$MT&Mo)))))
                                                           (cdr g$rest$8266$MT&Mo))))
                                                       (car g$rest$8266$MT&Mo))
                                                      (g$tail1$8262$MT&Mo
                                                        g$rest$8266$MT&Mo
                                                        (fx+ g$col$8256$MT&Mo
                                                             g$indent-general$8215$MT&Mo)
                                                        g$col*$8267$MT&Mo
                                                        (fx+ g$col*$8267$MT&Mo
                                                             '1)))))
                                                 (g$wr$8192$MT&Mo
                                                   g$head$8265$MT&Mo
                                                   (g$out$8191$MT&Mo
                                                     '"("
                                                     g$col$8256$MT&Mo)))))
                                             (cdr g$expr$8255$MT&Mo))))
                                         (car g$expr$8255$MT&Mo))))))
                                 (g$pp-expr-list$8204$MT&Mo
                                   (case-lambda
                                     ((g$l$8252$MT&Mo
                                        g$col$8253$MT&Mo
                                        g$extra$8254$MT&Mo)
                                      (g$pp-list$8201$MT&Mo
                                        g$l$8252$MT&Mo
                                        g$col$8253$MT&Mo
                                        g$extra$8254$MT&Mo
                                        g$pp-expr$8199$MT&Mo))))
                                 (g$pp-SYNTAX-CASE$8205$MT&Mo
                                   (case-lambda
                                     ((g$expr$8249$MT&Mo
                                        g$col$8250$MT&Mo
                                        g$extra$8251$MT&Mo)
                                      (g$pp-general$8203$MT&Mo
                                        g$expr$8249$MT&Mo
                                        g$col$8250$MT&Mo
                                        g$extra$8251$MT&Mo
                                        '#t
                                        g$pp-expr-list$8204$MT&Mo
                                        '#f
                                        g$pp-expr$8199$MT&Mo))))
                                 (g$pp-LAMBDA$8206$MT&Mo
                                   (case-lambda
                                     ((g$expr$8246$MT&Mo
                                        g$col$8247$MT&Mo
                                        g$extra$8248$MT&Mo)
                                      (g$pp-general$8203$MT&Mo
                                        g$expr$8246$MT&Mo
                                        g$col$8247$MT&Mo
                                        g$extra$8248$MT&Mo
                                        '#f
                                        g$pp-expr-list$8204$MT&Mo
                                        '#f
                                        g$pp-expr$8199$MT&Mo))))
                                 (g$pp-IF$8207$MT&Mo
                                   (case-lambda
                                     ((g$expr$8243$MT&Mo
                                        g$col$8244$MT&Mo
                                        g$extra$8245$MT&Mo)
                                      (g$pp-general$8203$MT&Mo
                                        g$expr$8243$MT&Mo
                                        g$col$8244$MT&Mo
                                        g$extra$8245$MT&Mo
                                        '#f
                                        g$pp-expr$8199$MT&Mo
                                        '#f
                                        g$pp-expr$8199$MT&Mo))))
                                 (g$pp-COND$8208$MT&Mo
                                   (case-lambda
                                     ((g$expr$8240$MT&Mo
                                        g$col$8241$MT&Mo
                                        g$extra$8242$MT&Mo)
                                      (g$pp-call$8200$MT&Mo
                                        g$expr$8240$MT&Mo
                                        g$col$8241$MT&Mo
                                        g$extra$8242$MT&Mo
                                        g$pp-expr-list$8204$MT&Mo))))
                                 (g$pp-CASE$8209$MT&Mo
                                   (case-lambda
                                     ((g$expr$8237$MT&Mo
                                        g$col$8238$MT&Mo
                                        g$extra$8239$MT&Mo)
                                      (g$pp-general$8203$MT&Mo
                                        g$expr$8237$MT&Mo
                                        g$col$8238$MT&Mo
                                        g$extra$8239$MT&Mo
                                        '#f
                                        g$pp-expr$8199$MT&Mo
                                        '#f
                                        g$pp-expr-list$8204$MT&Mo))))
                                 (g$pp-CASE-LAMBDA$8210$MT&Mo
                                   (case-lambda
                                     ((g$expr$8234$MT&Mo
                                        g$col$8235$MT&Mo
                                        g$extra$8236$MT&Mo)
                                      (g$pp-general$8203$MT&Mo
                                        g$expr$8234$MT&Mo
                                        g$col$8235$MT&Mo
                                        g$extra$8236$MT&Mo
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr-list$8204$MT&Mo))))
                                 (g$pp-AND$8211$MT&Mo
                                   (case-lambda
                                     ((g$expr$8231$MT&Mo
                                        g$col$8232$MT&Mo
                                        g$extra$8233$MT&Mo)
                                      (g$pp-call$8200$MT&Mo
                                        g$expr$8231$MT&Mo
                                        g$col$8232$MT&Mo
                                        g$extra$8233$MT&Mo
                                        g$pp-expr$8199$MT&Mo))))
                                 (g$pp-LET$8212$MT&Mo
                                   (case-lambda
                                     ((g$expr$8226$MT&Mo
                                        g$col$8227$MT&Mo
                                        g$extra$8228$MT&Mo)
                                      ((case-lambda
                                         ((g$rest$8229$MT&Mo)
                                          ((case-lambda
                                             ((g$named?$8230$MT&Mo)
                                              (g$pp-general$8203$MT&Mo
                                                g$expr$8226$MT&Mo
                                                g$col$8227$MT&Mo
                                                g$extra$8228$MT&Mo
                                                g$named?$8230$MT&Mo
                                                g$pp-expr-list$8204$MT&Mo
                                                '#f
                                                g$pp-expr$8199$MT&Mo)))
                                           (if (pair? g$rest$8229$MT&Mo)
                                             (begin
                                               '#f
                                               (g$symbol?$6402$MT&Mo
                                                 (car g$rest$8229$MT&Mo)))
                                             '#f))))
                                       (cdr g$expr$8226$MT&Mo)))))
                                 (g$pp-BEGIN$8213$MT&Mo
                                   (case-lambda
                                     ((g$expr$8223$MT&Mo
                                        g$col$8224$MT&Mo
                                        g$extra$8225$MT&Mo)
                                      (g$pp-general$8203$MT&Mo
                                        g$expr$8223$MT&Mo
                                        g$col$8224$MT&Mo
                                        g$extra$8225$MT&Mo
                                        '#f
                                        '#f
                                        '#f
                                        g$pp-expr$8199$MT&Mo))))
                                 (g$pp-DO$8214$MT&Mo
                                   (case-lambda
                                     ((g$expr$8220$MT&Mo
                                        g$col$8221$MT&Mo
                                        g$extra$8222$MT&Mo)
                                      (g$pp-general$8203$MT&Mo
                                        g$expr$8220$MT&Mo
                                        g$col$8221$MT&Mo
                                        g$extra$8222$MT&Mo
                                        '#f
                                        g$pp-expr-list$8204$MT&Mo
                                        g$pp-expr-list$8204$MT&Mo
                                        g$pp-expr$8199$MT&Mo))))
                                 (g$indent-general$8215$MT&Mo '2)
                                 (g$max-call-head-width$8216$MT&Mo '3)
                                 (g$style$8217$MT&Mo
                                   (case-lambda
                                     ((g$head$8218$MT&Mo)
                                      ((case-lambda
                                         ((g$t$8219$MT&Mo)
                                          (if (g$memv$5746$MT&Mo
                                                g$t$8219$MT&Mo
                                                '(lambda let*
                                                   letrec
                                                   letrec*
                                                   define
                                                   define-syntax
                                                   syntax-rules
                                                   let-syntax
                                                   letrec-syntax
                                                   with-syntax
                                                   library
                                                   library-letrec*))
                                            g$pp-LAMBDA$8206$MT&Mo
                                            (if (eqv?
                                                  g$t$8219$MT&Mo
                                                  'syntax-case)
                                              g$pp-SYNTAX-CASE$8205$MT&Mo
                                              (if (g$memv$5746$MT&Mo
                                                    g$t$8219$MT&Mo
                                                    '(if set!
                                                       when
                                                       unless))
                                                g$pp-IF$8207$MT&Mo
                                                (if (eqv?
                                                      g$t$8219$MT&Mo
                                                      'cond)
                                                  g$pp-COND$8208$MT&Mo
                                                  (if (eqv?
                                                        g$t$8219$MT&Mo
                                                        'case-lambda)
                                                    g$pp-CASE-LAMBDA$8210$MT&Mo
                                                    (if (eqv?
                                                          g$t$8219$MT&Mo
                                                          'case)
                                                      g$pp-CASE$8209$MT&Mo
                                                      (if (g$memv$5746$MT&Mo
                                                            g$t$8219$MT&Mo
                                                            '(and or
                                                                  import
                                                                  export))
                                                        g$pp-AND$8211$MT&Mo
                                                        (if (eqv?
                                                              g$t$8219$MT&Mo
                                                              'let)
                                                          g$pp-LET$8212$MT&Mo
                                                          (if (eqv?
                                                                g$t$8219$MT&Mo
                                                                'begin)
                                                            g$pp-BEGIN$8213$MT&Mo
                                                            (if (eqv?
                                                                  g$t$8219$MT&Mo
                                                                  'do)
                                                              g$pp-DO$8214$MT&Mo
                                                              '#f))))))))))))
                                       g$head$8218$MT&Mo)))))
                         (g$pr$8198$MT&Mo
                           g$obj$8194$MT&Mo
                           g$col$8195$MT&Mo
                           '0
                           g$pp-expr$8199$MT&Mo))))))
          (if g$width$8186$MT&Mo
            (g$out$8191$MT&Mo
              g$genwrite:newline-str$8179$MT&Mo
              (g$pp$8193$MT&Mo g$obj$8184$MT&Mo '0))
            (g$wr$8192$MT&Mo g$obj$8184$MT&Mo '0))))))
   (g$pretty-width$8181$MT&Mo
     g$pretty-width$8371$MT&Mo
     (g$make-parameter$8174$MT&Mo '72))
   (g$reverse-string-append$8182$MT&Mo
     g$reverse-string-append$8372$MT&Mo
     (case-lambda
       ((g$l$8355$MT&Mo)
        (letrec* ((g$rev-string-append$8356$MT&Mo
                    (case-lambda
                      ((g$l$8357$MT&Mo g$i$8358$MT&Mo)
                       (if (pair? g$l$8357$MT&Mo)
                         ((case-lambda
                            ((g$str$8359$MT&Mo)
                             ((case-lambda
                                ((g$len$8360$MT&Mo)
                                 ((case-lambda
                                    ((g$result$8361$MT&Mo)
                                     ((letrec ((g$loop$8362$MT&Mo
                                                 (case-lambda
                                                   ((g$j$8363$MT&Mo
                                                      g$k$8364$MT&Mo)
                                                    (if (fx<?
                                                          g$j$8363$MT&Mo
                                                          g$len$8360$MT&Mo)
                                                      (begin
                                                        (string-set!
                                                          g$result$8361$MT&Mo
                                                          g$k$8364$MT&Mo
                                                          (string-ref
                                                            g$str$8359$MT&Mo
                                                            g$j$8363$MT&Mo))
                                                        (g$loop$8362$MT&Mo
                                                          (fx+ g$j$8363$MT&Mo
                                                               '1)
                                                          (fx+ g$k$8364$MT&Mo
                                                               '1)))
                                                      g$result$8361$MT&Mo)))))
                                        g$loop$8362$MT&Mo)
                                      '0
                                      (fx- (fx- (string-length
                                                  g$result$8361$MT&Mo)
                                                g$i$8358$MT&Mo)
                                           g$len$8360$MT&Mo))))
                                  (g$rev-string-append$8356$MT&Mo
                                    (cdr g$l$8357$MT&Mo)
                                    (fx+ g$i$8358$MT&Mo
                                         g$len$8360$MT&Mo)))))
                              (string-length g$str$8359$MT&Mo))))
                          (car g$l$8357$MT&Mo))
                         (make-string g$i$8358$MT&Mo))))))
          (g$rev-string-append$8356$MT&Mo g$l$8355$MT&Mo '0)))))
   (g$pretty-print$8183$MT&Mo
     g$pretty-print$8373$MT&Mo
     (case-lambda
       ((g$obj$8365$MT&Mo . g$opt$8366$MT&Mo)
        ((case-lambda
           ((g$port$8367$MT&Mo)
            (g$generic-write$8180$MT&Mo
              g$obj$8365$MT&Mo
              '#f
              (g$pretty-width$8181$MT&Mo)
              (case-lambda
                ((g$s$8368$MT&Mo)
                 (begin
                   (display g$s$8368$MT&Mo g$port$8367$MT&Mo)
                   '#t))))))
         (if (pair? g$opt$8366$MT&Mo)
           (car g$opt$8366$MT&Mo)
           (current-output-port)))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$8374$MT&Mo
     g$cps/generate-reference$8639$MT&Mo
     (case-lambda
       ((g$variable$8427$MT&Mo)
        (g$cps/generate-operand$8378$MT&Mo
          (g$make-reference$8404$MT&Mo g$variable$8427$MT&Mo)))))
   (g$cps/generate-literal$8375$MT&Mo
     g$cps/generate-literal$8640$MT&Mo
     (case-lambda
       ((g$datum$8428$MT&Mo)
        (g$cps/generate-operand$8378$MT&Mo
          (g$make-literal$8403$MT&Mo g$datum$8428$MT&Mo)))))
   (g$cps/generate-abstraction$8376$MT&Mo
     g$cps/generate-abstraction$8641$MT&Mo
     (case-lambda
       ((g$bvl$8429$MT&Mo g$body-generator$8430$MT&Mo)
        (g$cps/generate-operand$8378$MT&Mo
          (g$make-user-abstraction$8405$MT&Mo
            g$bvl$8429$MT&Mo
            (case-lambda
              ((g$continuation-variable$8431$MT&Mo)
               (g$body-generator$8430$MT&Mo
                 (g$variable-continuator$8391$MT&Mo
                   g$continuation-variable$8431$MT&Mo)))))))))
   (g$cps/generate-abstractions$8377$MT&Mo
     g$cps/generate-abstractions$8642$MT&Mo
     (case-lambda
       ((g$bvls$8432$MT&Mo g$body-generators$8433$MT&Mo)
        (g$cps/generate-operand$8378$MT&Mo
          (g$make-user-abstractions$8406$MT&Mo
            g$bvls$8432$MT&Mo
            (g$map$5753$MT&Mo
              (case-lambda
                ((g$body-generator$8434$MT&Mo)
                 (case-lambda
                   ((g$continuation-variable$8435$MT&Mo)
                    (g$body-generator$8434$MT&Mo
                      (g$variable-continuator$8391$MT&Mo
                        g$continuation-variable$8435$MT&Mo))))))
              g$body-generators$8433$MT&Mo))))))
   (g$cps/generate-operand$8378$MT&Mo
     g$cps/generate-operand$8643$MT&Mo
     (case-lambda
       ((g$operand$8436$MT&Mo)
        (case-lambda
          ((g$continuator$8437$MT&Mo)
           (g$continue-with-operand$8394$MT&Mo
             g$continuator$8437$MT&Mo
             g$operand$8436$MT&Mo))))))
   (g$cps/generate-conditional$8379$MT&Mo
     g$cps/generate-conditional$8644$MT&Mo
     (case-lambda
       ((g$condition-generator$8438$MT&Mo
          g$consequent-generator$8439$MT&Mo
          g$alternative-generator$8440$MT&Mo)
        (case-lambda
          ((g$continuator$8441$MT&Mo)
           (letrec* ((g$if-variable$8442$MT&Mo
                       (case-lambda
                         ((g$continuation-variable$8444$MT&Mo)
                          ((case-lambda
                             ((g$continuator*$8445$MT&Mo)
                              (g$condition-generator$8438$MT&Mo
                                (g$conditional-continuator$8390$MT&Mo
                                  (case-lambda
                                    ((g$condition$8446$MT&Mo)
                                     (g$make-conditional$8413$MT&Mo
                                       g$condition$8446$MT&Mo
                                       (g$consequent-generator$8439$MT&Mo
                                         g$continuator*$8445$MT&Mo)
                                       (g$alternative-generator$8440$MT&Mo
                                         g$continuator*$8445$MT&Mo))))))))
                           (g$variable-continuator$8391$MT&Mo
                             g$continuation-variable$8444$MT&Mo))))))
             (g$reify-continuation*$8396$MT&Mo
               g$continuator$8441$MT&Mo
               g$if-variable$8442$MT&Mo
               (case-lambda
                 ((g$continuation-abstraction$8443$MT&Mo)
                  (g$make-conditional-join$8414$MT&Mo
                    g$continuation-abstraction$8443$MT&Mo
                    g$if-variable$8442$MT&Mo))))))))))
   (g$cps/generate-recursive-bind$8380$MT&Mo
     g$cps/generate-recursive-bind$8645$MT&Mo
     (case-lambda
       ((g$variables$8447$MT&Mo
          g$generators$8448$MT&Mo
          g$body-generator$8449$MT&Mo)
        (case-lambda
          ((g$continuator$8450$MT&Mo)
           (g$make-recursive-bind$8408$MT&Mo
             g$variables$8447$MT&Mo
             (g$map$5753$MT&Mo
               (case-lambda
                 ((g$generator$8451$MT&Mo)
                  (case-lambda
                    ((g$continuation-variable$8452$MT&Mo)
                     (g$generator$8451$MT&Mo
                       (g$variable-continuator$8391$MT&Mo
                         g$continuation-variable$8452$MT&Mo))))))
               g$generators$8448$MT&Mo)
             (g$body-generator$8449$MT&Mo
               (g$reified-continuator$8393$MT&Mo
                 g$continuator$8450$MT&Mo))))))))
   (g$cps/generate-recursive*-bind$8381$MT&Mo
     g$cps/generate-recursive*-bind$8646$MT&Mo
     (case-lambda
       ((g$variables$8453$MT&Mo
          g$generators$8454$MT&Mo
          g$body-generator$8455$MT&Mo)
        (case-lambda
          ((g$continuator$8456$MT&Mo)
           (g$make-recursive*-bind$8409$MT&Mo
             g$variables$8453$MT&Mo
             (g$map$5753$MT&Mo
               (case-lambda
                 ((g$generator$8457$MT&Mo)
                  (case-lambda
                    ((g$continuation-variable$8458$MT&Mo)
                     (g$generator$8457$MT&Mo
                       (g$variable-continuator$8391$MT&Mo
                         g$continuation-variable$8458$MT&Mo))))))
               g$generators$8454$MT&Mo)
             (g$body-generator$8455$MT&Mo
               (g$reified-continuator$8393$MT&Mo
                 g$continuator$8456$MT&Mo))))))))
   (g$cps/generate-recursive*-library-bind$8382$MT&Mo
     g$cps/generate-recursive*-library-bind$8647$MT&Mo
     (case-lambda
       ((g$name$8459$MT&Mo
          g$variables$8460$MT&Mo
          g$variables*$8461$MT&Mo
          g$generators$8462$MT&Mo
          g$body-generator$8463$MT&Mo)
        (case-lambda
          ((g$continuator$8464$MT&Mo)
           (g$make-recursive*-library-bind$8410$MT&Mo
             g$name$8459$MT&Mo
             g$variables$8460$MT&Mo
             g$variables*$8461$MT&Mo
             (g$map$5753$MT&Mo
               (case-lambda
                 ((g$generator$8465$MT&Mo)
                  (case-lambda
                    ((g$continuation-variable$8466$MT&Mo)
                     (g$generator$8465$MT&Mo
                       (g$variable-continuator$8391$MT&Mo
                         g$continuation-variable$8466$MT&Mo))))))
               g$generators$8462$MT&Mo)
             (g$body-generator$8463$MT&Mo
               (g$reified-continuator$8393$MT&Mo
                 g$continuator$8464$MT&Mo))))))))
   (g$cps/generate-sequence$8383$MT&Mo
     g$cps/generate-sequence$8648$MT&Mo
     (case-lambda
       ((g$generators$8467$MT&Mo)
        (case-lambda
          ((g$continuator$8468$MT&Mo)
           ((letrec ((g$recur$8469$MT&Mo
                       (case-lambda
                         ((g$generators$8470$MT&Mo)
                          ((car g$generators$8470$MT&Mo)
                           ((case-lambda
                              ((g$generators$8471$MT&Mo)
                               (if (pair? g$generators$8471$MT&Mo)
                                 (g$effect-continuator$8389$MT&Mo
                                   (case-lambda
                                     (()
                                      (g$recur$8469$MT&Mo
                                        g$generators$8471$MT&Mo))))
                                 g$continuator$8468$MT&Mo)))
                            (cdr g$generators$8470$MT&Mo)))))))
              g$recur$8469$MT&Mo)
            g$generators$8467$MT&Mo))))))
   (g$cps/generate-assignment$8384$MT&Mo
     g$cps/generate-assignment$8649$MT&Mo
     (case-lambda
       ((g$location$8472$MT&Mo g$expression-generator$8473$MT&Mo)
        (case-lambda
          ((g$continuator$8474$MT&Mo)
           (g$expression-generator$8473$MT&Mo
             (g$operand-continuator$8388$MT&Mo
               (case-lambda
                 ((g$operand$8475$MT&Mo)
                  (g$make-assignment$8416$MT&Mo
                    g$location$8472$MT&Mo
                    g$operand$8475$MT&Mo
                    (g$continue-with-operand$8394$MT&Mo
                      g$continuator$8474$MT&Mo
                      '(cps-void))))))))))))
   (g$cps/generate-declaration$8385$MT&Mo
     g$cps/generate-declaration$8650$MT&Mo
     (case-lambda
       ((g$location$8476$MT&Mo g$expression-generator$8477$MT&Mo)
        (case-lambda
          ((g$continuator$8478$MT&Mo)
           (g$expression-generator$8477$MT&Mo
             (g$operand-continuator$8388$MT&Mo
               (case-lambda
                 ((g$operand$8479$MT&Mo)
                  (g$make-declaration$8417$MT&Mo
                    g$location$8476$MT&Mo
                    g$operand$8479$MT&Mo
                    (g$continue-with-operand$8394$MT&Mo
                      g$continuator$8478$MT&Mo
                      '(cps-void))))))))))))
   (g$cps/generate-combination$8386$MT&Mo
     g$cps/generate-combination$8651$MT&Mo
     (case-lambda
       ((g$operator-generator$8480$MT&Mo
          g$operand-generators$8481$MT&Mo)
        (g$cps/generate-subproblems$8387$MT&Mo
          (g$reverse$6409$MT&Mo
            (cons
              g$operator-generator$8480$MT&Mo
              g$operand-generators$8481$MT&Mo))
          (case-lambda
            ((g$operands$8482$MT&Mo g$continuator$8483$MT&Mo)
             (g$make-combination$8411$MT&Mo
               (car g$operands$8482$MT&Mo)
               (g$reify-continuation$8395$MT&Mo
                 g$continuator$8483$MT&Mo)
               (cdr g$operands$8482$MT&Mo))))))))
   (g$cps/generate-subproblems$8387$MT&Mo
     g$cps/generate-subproblems$8652$MT&Mo
     (case-lambda
       ((g$generators$8484$MT&Mo g$combiner$8485$MT&Mo)
        (case-lambda
          ((g$continuator$8486$MT&Mo)
           ((letrec ((g$recur$8487$MT&Mo
                       (case-lambda
                         ((g$generators$8488$MT&Mo
                            g$operands$8489$MT&Mo)
                          (if (pair? g$generators$8488$MT&Mo)
                            ((car g$generators$8488$MT&Mo)
                             ((case-lambda
                                ((g$generators$8490$MT&Mo)
                                 (g$operand-continuator$8388$MT&Mo
                                   (case-lambda
                                     ((g$operand$8491$MT&Mo)
                                      (g$recur$8487$MT&Mo
                                        g$generators$8490$MT&Mo
                                        (cons
                                          g$operand$8491$MT&Mo
                                          g$operands$8489$MT&Mo)))))))
                              (cdr g$generators$8488$MT&Mo)))
                            (g$combiner$8485$MT&Mo
                              g$operands$8489$MT&Mo
                              g$continuator$8486$MT&Mo))))))
              g$recur$8487$MT&Mo)
            g$generators$8484$MT&Mo
            '()))))))
   (g$operand-continuator$8388$MT&Mo
     g$operand-continuator$8653$MT&Mo
     (case-lambda
       ((g$generator$8492$MT&Mo)
        (case-lambda
          ((g$if-operand$8493$MT&Mo
             g$if-effect$8494$MT&Mo
             g$if-conditional$8495$MT&Mo
             g$if-variable$8496$MT&Mo
             g$if-inline$8497$MT&Mo)
           (begin
             g$if-effect$8494$MT&Mo
             g$if-conditional$8495$MT&Mo
             g$if-variable$8496$MT&Mo
             g$if-inline$8497$MT&Mo
             (g$if-operand$8493$MT&Mo g$generator$8492$MT&Mo)))))))
   (g$effect-continuator$8389$MT&Mo
     g$effect-continuator$8654$MT&Mo
     (case-lambda
       ((g$generator$8498$MT&Mo)
        (case-lambda
          ((g$if-operand$8499$MT&Mo
             g$if-effect$8500$MT&Mo
             g$if-conditional$8501$MT&Mo
             g$if-variable$8502$MT&Mo
             g$if-inline$8503$MT&Mo)
           (begin
             g$if-operand$8499$MT&Mo
             g$if-conditional$8501$MT&Mo
             g$if-variable$8502$MT&Mo
             g$if-inline$8503$MT&Mo
             (g$if-effect$8500$MT&Mo g$generator$8498$MT&Mo)))))))
   (g$conditional-continuator$8390$MT&Mo
     g$conditional-continuator$8655$MT&Mo
     (case-lambda
       ((g$generator$8504$MT&Mo)
        (case-lambda
          ((g$if-operand$8505$MT&Mo
             g$if-effect$8506$MT&Mo
             g$if-conditional$8507$MT&Mo
             g$if-variable$8508$MT&Mo
             g$if-inline$8509$MT&Mo)
           (begin
             g$if-operand$8505$MT&Mo
             g$if-effect$8506$MT&Mo
             g$if-variable$8508$MT&Mo
             g$if-inline$8509$MT&Mo
             (g$if-conditional$8507$MT&Mo g$generator$8504$MT&Mo)))))))
   (g$variable-continuator$8391$MT&Mo
     g$variable-continuator$8656$MT&Mo
     (case-lambda
       ((g$variable$8510$MT&Mo)
        (case-lambda
          ((g$if-operand$8511$MT&Mo
             g$if-effect$8512$MT&Mo
             g$if-conditional$8513$MT&Mo
             g$if-variable$8514$MT&Mo
             g$if-inline$8515$MT&Mo)
           (begin
             g$if-operand$8511$MT&Mo
             g$if-effect$8512$MT&Mo
             g$if-variable$8514$MT&Mo
             g$if-inline$8515$MT&Mo
             (g$if-variable$8514$MT&Mo g$variable$8510$MT&Mo)))))))
   (g$inline-continuator$8392$MT&Mo
     g$inline-continuator$8657$MT&Mo
     (case-lambda
       ((g$continuation$8516$MT&Mo)
        (case-lambda
          ((g$if-operand$8517$MT&Mo
             g$if-effect$8518$MT&Mo
             g$if-conditional$8519$MT&Mo
             g$if-variable$8520$MT&Mo
             g$if-inline$8521$MT&Mo)
           (begin
             g$if-operand$8517$MT&Mo
             g$if-effect$8518$MT&Mo
             g$if-conditional$8519$MT&Mo
             g$if-variable$8520$MT&Mo
             (g$if-inline$8521$MT&Mo g$continuation$8516$MT&Mo)))))))
   (g$reified-continuator$8393$MT&Mo
     g$reified-continuator$8658$MT&Mo
     (case-lambda
       ((g$continuator$8522$MT&Mo)
        (case-lambda
          ((g$if-operand$8523$MT&Mo
             g$if-effect$8524$MT&Mo
             g$if-conditional$8525$MT&Mo
             g$if-variable$8526$MT&Mo
             g$if-inline$8527$MT&Mo)
           (begin
             g$if-operand$8523$MT&Mo
             g$if-effect$8524$MT&Mo
             g$if-conditional$8525$MT&Mo
             (g$reify-continuation*$8396$MT&Mo
               g$continuator$8522$MT&Mo
               g$if-variable$8526$MT&Mo
               g$if-inline$8527$MT&Mo)))))))
   (g$continue-with-operand$8394$MT&Mo
     g$continue-with-operand$8659$MT&Mo
     (case-lambda
       ((g$continuator$8528$MT&Mo g$operand$8529$MT&Mo)
        (g$continuator$8528$MT&Mo
          (case-lambda
            ((g$generator$8530$MT&Mo)
             (g$generator$8530$MT&Mo g$operand$8529$MT&Mo)))
          (case-lambda
            ((g$generator$8531$MT&Mo) (g$generator$8531$MT&Mo)))
          (case-lambda
            ((g$generator$8532$MT&Mo)
             (g$generator$8532$MT&Mo
               (g$make-truth-test$8418$MT&Mo g$operand$8529$MT&Mo))))
          (case-lambda
            ((g$continuation-variable$8533$MT&Mo)
             (g$make-return$8412$MT&Mo
               (g$make-reference$8404$MT&Mo
                 g$continuation-variable$8533$MT&Mo)
               (list g$operand$8529$MT&Mo))))
          (case-lambda
            ((g$continuation-abstraction$8534$MT&Mo)
             (g$make-return$8412$MT&Mo
               g$continuation-abstraction$8534$MT&Mo
               (list g$operand$8529$MT&Mo))))))))
   (g$reify-continuation$8395$MT&Mo
     g$reify-continuation$8660$MT&Mo
     (case-lambda
       ((g$continuator$8535$MT&Mo)
        (g$continuator$8535$MT&Mo
          g$operand-continuation-reifier$8398$MT&Mo
          g$effect-continuation-reifier$8400$MT&Mo
          g$conditional-continuation-reifier$8402$MT&Mo
          (case-lambda
            ((g$variable$8536$MT&Mo)
             (g$make-reference$8404$MT&Mo g$variable$8536$MT&Mo)))
          (case-lambda
            ((g$continuation$8537$MT&Mo) g$continuation$8537$MT&Mo))))))
   (g$reify-continuation*$8396$MT&Mo
     g$reify-continuation*$8661$MT&Mo
     (case-lambda
       ((g$continuator$8538$MT&Mo
          g$if-variable$8539$MT&Mo
          g$if-inline$8540$MT&Mo)
        (g$continuator$8538$MT&Mo
          (g$operand-continuation-reifier*$8397$MT&Mo
            g$if-inline$8540$MT&Mo)
          (g$effect-continuation-reifier*$8399$MT&Mo
            g$if-inline$8540$MT&Mo)
          (g$conditional-continuation-reifier*$8401$MT&Mo
            g$if-inline$8540$MT&Mo)
          g$if-variable$8539$MT&Mo
          g$if-inline$8540$MT&Mo))))
   (g$operand-continuation-reifier*$8397$MT&Mo
     g$operand-continuation-reifier*$8662$MT&Mo
     (case-lambda
       ((g$receiver$8541$MT&Mo)
        (case-lambda
          ((g$generator$8542$MT&Mo)
           (g$receiver$8541$MT&Mo
             ((case-lambda
                ((g$variable$8543$MT&Mo)
                 (g$make-continuation-abstraction$8407$MT&Mo
                   (list g$variable$8543$MT&Mo)
                   (g$generator$8542$MT&Mo
                     (g$make-reference$8404$MT&Mo
                       g$variable$8543$MT&Mo)))))
              (g$generate-variable$8419$MT&Mo 'V))))))))
   (g$operand-continuation-reifier$8398$MT&Mo
     g$operand-continuation-reifier$8663$MT&Mo
     (g$operand-continuation-reifier*$8397$MT&Mo values))
   (g$effect-continuation-reifier*$8399$MT&Mo
     g$effect-continuation-reifier*$8664$MT&Mo
     (case-lambda
       ((g$receiver$8544$MT&Mo)
        (case-lambda
          ((g$generator$8545$MT&Mo)
           (g$receiver$8544$MT&Mo
             ((case-lambda
                ((g$variable$8546$MT&Mo)
                 (g$make-continuation-abstraction$8407$MT&Mo
                   g$variable$8546$MT&Mo
                   (g$generator$8545$MT&Mo))))
              (g$generate-variable$8419$MT&Mo 'IGNORE))))))))
   (g$effect-continuation-reifier$8400$MT&Mo
     g$effect-continuation-reifier$8665$MT&Mo
     (g$effect-continuation-reifier*$8399$MT&Mo values))
   (g$conditional-continuation-reifier*$8401$MT&Mo
     g$conditional-continuation-reifier*$8666$MT&Mo
     (case-lambda
       ((g$receiver$8547$MT&Mo)
        (case-lambda
          ((g$generator$8548$MT&Mo)
           (g$receiver$8547$MT&Mo
             ((case-lambda
                ((g$variable$8549$MT&Mo)
                 (g$make-continuation-abstraction$8407$MT&Mo
                   (list g$variable$8549$MT&Mo)
                   (g$generator$8548$MT&Mo
                     (g$make-truth-test$8418$MT&Mo
                       (g$make-reference$8404$MT&Mo
                         g$variable$8549$MT&Mo))))))
              (g$generate-variable$8419$MT&Mo 'T))))))))
   (g$conditional-continuation-reifier$8402$MT&Mo
     g$conditional-continuation-reifier$8667$MT&Mo
     (g$conditional-continuation-reifier*$8401$MT&Mo values))
   (g$make-literal$8403$MT&Mo
     g$make-literal$8668$MT&Mo
     (case-lambda
       ((g$datum$8550$MT&Mo) (list 'quote g$datum$8550$MT&Mo))))
   (g$make-reference$8404$MT&Mo
     g$make-reference$8669$MT&Mo
     (case-lambda ((g$variable$8551$MT&Mo) g$variable$8551$MT&Mo)))
   (g$make-user-abstraction$8405$MT&Mo
     g$make-user-abstraction$8670$MT&Mo
     (case-lambda
       ((g$bvl$8552$MT&Mo g$body-constructor$8553$MT&Mo)
        ((case-lambda
           ((g$continuation$8554$MT&Mo)
            (list
              'case-lambda
              (list
                (cons g$continuation$8554$MT&Mo g$bvl$8552$MT&Mo)
                (g$body-constructor$8553$MT&Mo
                  g$continuation$8554$MT&Mo)))))
         (g$generate-variable$8419$MT&Mo 'C)))))
   (g$make-user-abstractions$8406$MT&Mo
     g$make-user-abstractions$8671$MT&Mo
     (case-lambda
       ((g$bvls$8555$MT&Mo g$body-constructors$8556$MT&Mo)
        ((case-lambda
           ((g$continuation$8557$MT&Mo)
            (cons
              'case-lambda
              (g$map$5753$MT&Mo
                (case-lambda
                  ((g$bvl$8558$MT&Mo g$body-constructor$8559$MT&Mo)
                   (list
                     (cons g$continuation$8557$MT&Mo g$bvl$8558$MT&Mo)
                     (g$body-constructor$8559$MT&Mo
                       g$continuation$8557$MT&Mo))))
                g$bvls$8555$MT&Mo
                g$body-constructors$8556$MT&Mo))))
         (g$generate-variable$8419$MT&Mo 'C)))))
   (g$make-continuation-abstraction$8407$MT&Mo
     g$make-continuation-abstraction$8672$MT&Mo
     (case-lambda
       ((g$bvl$8560$MT&Mo g$body$8561$MT&Mo)
        (list 'case-lambda (list g$bvl$8560$MT&Mo g$body$8561$MT&Mo)))))
   (g$make-recursive-bind$8408$MT&Mo
     g$make-recursive-bind$8673$MT&Mo
     (case-lambda
       ((g$variables$8562$MT&Mo
          g$constructors$8563$MT&Mo
          g$body$8564$MT&Mo)
        (list
          'letrec
          (g$map$5753$MT&Mo
            (case-lambda
              ((g$variable$8565$MT&Mo g$constructor$8566$MT&Mo)
               (list
                 g$variable$8565$MT&Mo
                 (list
                   (g$make-user-abstraction$8405$MT&Mo
                     '()
                     g$constructor$8566$MT&Mo)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$8565$MT&Mo))))))
            g$variables$8562$MT&Mo
            g$constructors$8563$MT&Mo)
          g$body$8564$MT&Mo))))
   (g$make-recursive*-bind$8409$MT&Mo
     g$make-recursive*-bind$8674$MT&Mo
     (case-lambda
       ((g$variables$8567$MT&Mo
          g$constructors$8568$MT&Mo
          g$body$8569$MT&Mo)
        (list
          'letrec*
          (g$map$5753$MT&Mo
            (case-lambda
              ((g$variable$8570$MT&Mo g$constructor$8571$MT&Mo)
               (list
                 g$variable$8570$MT&Mo
                 (list
                   (g$make-user-abstraction$8405$MT&Mo
                     '()
                     g$constructor$8571$MT&Mo)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$8570$MT&Mo))))))
            g$variables$8567$MT&Mo
            g$constructors$8568$MT&Mo)
          g$body$8569$MT&Mo))))
   (g$make-recursive*-library-bind$8410$MT&Mo
     g$make-recursive*-library-bind$8675$MT&Mo
     (case-lambda
       ((g$name$8572$MT&Mo
          g$variables$8573$MT&Mo
          g$variables*$8574$MT&Mo
          g$constructors$8575$MT&Mo
          g$body$8576$MT&Mo)
        (list
          'library-letrec*
          g$name$8572$MT&Mo
          (g$map$5753$MT&Mo
            (case-lambda
              ((g$variable$8577$MT&Mo
                 g$variable*$8578$MT&Mo
                 g$constructor$8579$MT&Mo)
               (list
                 g$variable$8577$MT&Mo
                 g$variable*$8578$MT&Mo
                 (list
                   (g$make-user-abstraction$8405$MT&Mo
                     '()
                     g$constructor$8579$MT&Mo)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$8577$MT&Mo))))))
            g$variables$8573$MT&Mo
            g$variables*$8574$MT&Mo
            g$constructors$8575$MT&Mo)
          g$body$8576$MT&Mo))))
   (g$make-combination$8411$MT&Mo
     g$make-combination$8676$MT&Mo
     (case-lambda
       ((g$operator$8580$MT&Mo
          g$continuation$8581$MT&Mo
          g$operands$8582$MT&Mo)
        (cons
          g$operator$8580$MT&Mo
          (cons g$continuation$8581$MT&Mo g$operands$8582$MT&Mo)))))
   (g$make-return$8412$MT&Mo
     g$make-return$8677$MT&Mo
     (case-lambda
       ((g$continuation$8583$MT&Mo g$operands$8584$MT&Mo)
        (cons g$continuation$8583$MT&Mo g$operands$8584$MT&Mo))))
   (g$make-conditional$8413$MT&Mo
     g$make-conditional$8678$MT&Mo
     (case-lambda
       ((g$condition$8585$MT&Mo
          g$consequent$8586$MT&Mo
          g$alternative$8587$MT&Mo)
        (list
          'if
          g$condition$8585$MT&Mo
          g$consequent$8586$MT&Mo
          g$alternative$8587$MT&Mo))))
   (g$make-conditional-join$8414$MT&Mo
     g$make-conditional-join$8679$MT&Mo
     (case-lambda
       ((g$continuation$8588$MT&Mo g$constructor$8589$MT&Mo)
        ((case-lambda
           ((g$variable$8590$MT&Mo)
            (g$make-let$8415$MT&Mo
              (list g$variable$8590$MT&Mo)
              (list g$continuation$8588$MT&Mo)
              (g$constructor$8589$MT&Mo g$variable$8590$MT&Mo))))
         (g$generate-variable$8419$MT&Mo 'J)))))
   (g$make-let$8415$MT&Mo
     g$make-let$8680$MT&Mo
     (case-lambda
       ((g$variables$8591$MT&Mo
          g$expressions$8592$MT&Mo
          g$body$8593$MT&Mo)
        (cons
          (list
            'case-lambda
            (list g$variables$8591$MT&Mo g$body$8593$MT&Mo))
          g$expressions$8592$MT&Mo))))
   (g$make-assignment$8416$MT&Mo
     g$make-assignment$8681$MT&Mo
     (case-lambda
       ((g$location$8594$MT&Mo
          g$operand$8595$MT&Mo
          g$expression$8596$MT&Mo)
        (list
          'begin
          (list 'set! g$location$8594$MT&Mo g$operand$8595$MT&Mo)
          g$expression$8596$MT&Mo))))
   (g$make-declaration$8417$MT&Mo
     g$make-declaration$8682$MT&Mo
     (case-lambda
       ((g$location$8597$MT&Mo
          g$operand$8598$MT&Mo
          g$expression$8599$MT&Mo)
        (list
          'begin
          (list 'define g$location$8597$MT&Mo g$operand$8598$MT&Mo)
          g$expression$8599$MT&Mo))))
   (g$make-truth-test$8418$MT&Mo
     g$make-truth-test$8683$MT&Mo
     (case-lambda ((g$operand$8600$MT&Mo) g$operand$8600$MT&Mo)))
   (g$generate-variable$8419$MT&Mo
     g$generate-variable$8684$MT&Mo
     (case-lambda ((g$name$8601$MT&Mo) (gensym g$name$8601$MT&Mo))))
   (g$parse$8420$MT&Mo
     g$parse$8685$MT&Mo
     (case-lambda
       ((g$x$8602$MT&Mo)
        (if (pair? g$x$8602$MT&Mo)
          ((case-lambda
             ((g$t$8603$MT&Mo)
              (if (eqv? g$t$8603$MT&Mo 'quote)
                (g$cps/generate-literal$8375$MT&Mo
                  (g$cadr$6411$MT&Mo g$x$8602$MT&Mo))
                (if (eqv? g$t$8603$MT&Mo 'if)
                  (g$cps/generate-conditional$8379$MT&Mo
                    (g$parse$8420$MT&Mo
                      (g$cadr$6411$MT&Mo g$x$8602$MT&Mo))
                    (g$parse$8420$MT&Mo
                      (g$caddr$6417$MT&Mo g$x$8602$MT&Mo))
                    (g$parse$8420$MT&Mo
                      (g$cadddr$6429$MT&Mo g$x$8602$MT&Mo)))
                  (if (eqv? g$t$8603$MT&Mo 'case-lambda)
                    ((case-lambda
                       ((g$d$8604$MT&Mo)
                        (g$cps/generate-abstractions$8377$MT&Mo
                          (g$map$5753$MT&Mo car g$d$8604$MT&Mo)
                          (g$map$5753$MT&Mo
                            (case-lambda
                              ((g$e$8605$MT&Mo)
                               (g$cps/generate-sequence$8383$MT&Mo
                                 (g$map$5753$MT&Mo
                                   g$parse$8420$MT&Mo
                                   (cdr g$e$8605$MT&Mo)))))
                            g$d$8604$MT&Mo))))
                     (cdr g$x$8602$MT&Mo))
                    (if (eqv? g$t$8603$MT&Mo 'letrec)
                      ((case-lambda
                         ((g$bindings$8606$MT&Mo g$body*$8607$MT&Mo)
                          ((case-lambda
                             ((g$lhs*$8608$MT&Mo g$rhs*$8609$MT&Mo)
                              ((case-lambda
                                 ((g$t*$8610$MT&Mo g$tmps$8611$MT&Mo)
                                  ((case-lambda
                                     ((g$s*$8612$MT&Mo)
                                      (g$parse$8420$MT&Mo
                                        (cons
                                          (list
                                            'case-lambda
                                            (list
                                              g$lhs*$8608$MT&Mo
                                              (cons
                                                (list
                                                  'case-lambda
                                                  (cons
                                                    g$t*$8610$MT&Mo
                                                    (append
                                                      g$s*$8612$MT&Mo
                                                      g$body*$8607$MT&Mo)))
                                                g$rhs*$8609$MT&Mo)))
                                          g$tmps$8611$MT&Mo))))
                                   (g$map$5753$MT&Mo
                                     (case-lambda
                                       ((g$i$8613$MT&Mo g$t$8614$MT&Mo)
                                        (list
                                          'set!
                                          g$i$8613$MT&Mo
                                          g$t$8614$MT&Mo)))
                                     g$lhs*$8608$MT&Mo
                                     g$t*$8610$MT&Mo))))
                               (g$map$5753$MT&Mo
                                 gensym
                                 g$lhs*$8608$MT&Mo)
                               (g$map$5753$MT&Mo
                                 (case-lambda
                                   ((g$x$8615$MT&Mo) 'uninitialized))
                                 g$lhs*$8608$MT&Mo))))
                           (g$map$5753$MT&Mo car g$bindings$8606$MT&Mo)
                           (g$map$5753$MT&Mo
                             g$cadr$6411$MT&Mo
                             g$bindings$8606$MT&Mo))))
                       (g$cadr$6411$MT&Mo g$x$8602$MT&Mo)
                       (g$cddr$6413$MT&Mo g$x$8602$MT&Mo))
                      (if (eqv? g$t$8603$MT&Mo 'letrec*)
                        ((case-lambda
                           ((g$bindings$8616$MT&Mo g$body*$8617$MT&Mo)
                            ((case-lambda
                               ((g$lhs*$8618$MT&Mo g$rhs*$8619$MT&Mo)
                                (g$cps/generate-recursive*-bind$8381$MT&Mo
                                  g$lhs*$8618$MT&Mo
                                  (g$map$5753$MT&Mo
                                    g$parse$8420$MT&Mo
                                    g$rhs*$8619$MT&Mo)
                                  (g$parse$8420$MT&Mo
                                    (cons 'begin g$body*$8617$MT&Mo)))))
                             (g$map$5753$MT&Mo
                               car
                               g$bindings$8616$MT&Mo)
                             (g$map$5753$MT&Mo
                               g$cadr$6411$MT&Mo
                               g$bindings$8616$MT&Mo))))
                         (g$cadr$6411$MT&Mo g$x$8602$MT&Mo)
                         (g$cddr$6413$MT&Mo g$x$8602$MT&Mo))
                        (if (eqv? g$t$8603$MT&Mo 'library-letrec*)
                          ((case-lambda
                             ((g$name$8620$MT&Mo g$x$8621$MT&Mo)
                              ((case-lambda
                                 ((g$bindings$8622$MT&Mo
                                    g$body*$8623$MT&Mo)
                                  ((case-lambda
                                     ((g$lhs*$8624$MT&Mo
                                        g$lhs**$8625$MT&Mo
                                        g$rhs*$8626$MT&Mo)
                                      (g$cps/generate-recursive*-library-bind$8382$MT&Mo
                                        g$name$8620$MT&Mo
                                        g$lhs*$8624$MT&Mo
                                        g$lhs**$8625$MT&Mo
                                        (g$map$5753$MT&Mo
                                          g$parse$8420$MT&Mo
                                          g$rhs*$8626$MT&Mo)
                                        (g$parse$8420$MT&Mo
                                          (cons
                                            'begin
                                            g$body*$8623$MT&Mo)))))
                                   (g$map$5753$MT&Mo
                                     car
                                     g$bindings$8622$MT&Mo)
                                   (g$map$5753$MT&Mo
                                     g$cadr$6411$MT&Mo
                                     g$bindings$8622$MT&Mo)
                                   (g$map$5753$MT&Mo
                                     g$caddr$6417$MT&Mo
                                     g$bindings$8622$MT&Mo))))
                               (g$cadr$6411$MT&Mo g$x$8621$MT&Mo)
                               (g$cddr$6413$MT&Mo g$x$8621$MT&Mo))))
                           (g$cadr$6411$MT&Mo g$x$8602$MT&Mo)
                           (cdr g$x$8602$MT&Mo))
                          (if (eqv? g$t$8603$MT&Mo 'begin)
                            (g$cps/generate-sequence$8383$MT&Mo
                              (g$map$5753$MT&Mo
                                g$parse$8420$MT&Mo
                                (cdr g$x$8602$MT&Mo)))
                            (if (eqv? g$t$8603$MT&Mo 'set!)
                              (g$cps/generate-assignment$8384$MT&Mo
                                (g$cadr$6411$MT&Mo g$x$8602$MT&Mo)
                                (g$parse$8420$MT&Mo
                                  (g$caddr$6417$MT&Mo g$x$8602$MT&Mo)))
                              (if (eqv? g$t$8603$MT&Mo 'define)
                                (g$cps/generate-declaration$8385$MT&Mo
                                  (g$cadr$6411$MT&Mo g$x$8602$MT&Mo)
                                  (g$parse$8420$MT&Mo
                                    (g$caddr$6417$MT&Mo
                                      g$x$8602$MT&Mo)))
                                (if (list? g$x$8602$MT&Mo)
                                  (g$cps/generate-combination$8386$MT&Mo
                                    (g$parse$8420$MT&Mo
                                      (car g$x$8602$MT&Mo))
                                    (g$map$5753$MT&Mo
                                      g$parse$8420$MT&Mo
                                      (cdr g$x$8602$MT&Mo)))
                                  (error
                                    'rewrite
                                    '"invalid form ~s ~s"
                                    g$x$8602$MT&Mo
                                    (list? g$x$8602$MT&Mo))))))))))))))
           (car g$x$8602$MT&Mo))
          (if (g$symbol?$6402$MT&Mo g$x$8602$MT&Mo)
            (g$cps/generate-reference$8374$MT&Mo g$x$8602$MT&Mo)
            (g$cps/generate-literal$8375$MT&Mo g$x$8602$MT&Mo))))))
   (g$starts-with?$8421$MT&Mo
     g$starts-with?$8686$MT&Mo
     (case-lambda
       ((g$str$8627$MT&Mo g$sub$8628$MT&Mo)
        (clr-call-internal
          'system.string
          'startswith
          g$str$8627$MT&Mo
          g$sub$8628$MT&Mo))))
   (g$ends-with?$8422$MT&Mo
     g$ends-with?$8687$MT&Mo
     (case-lambda
       ((g$str$8629$MT&Mo g$sub$8630$MT&Mo)
        (clr-call-internal
          'system.string
          'endswith
          g$str$8629$MT&Mo
          g$sub$8630$MT&Mo))))
   (g$clr-generator?$8423$MT&Mo
     g$clr-generator?$8688$MT&Mo
     (case-lambda
       ((g$o$8631$MT&Mo)
        (if (g$symbol?$6402$MT&Mo g$o$8631$MT&Mo)
          (begin
            '#f
            ((case-lambda
               ((g$o$8632$MT&Mo)
                (if (g$starts-with?$8421$MT&Mo g$o$8632$MT&Mo '"clr-")
                  (begin
                    '#f
                    (g$ends-with?$8422$MT&Mo
                      g$o$8632$MT&Mo
                      '"-internal"))
                  '#f)))
             (symbol->string g$o$8631$MT&Mo)))
          '#f))))
   (g$fix-primitives$8424$MT&Mo
     g$fix-primitives$8689$MT&Mo
     (case-lambda
       ((g$e$8633$MT&Mo)
        (if (if (pair? g$e$8633$MT&Mo)
              (begin '#f (list? g$e$8633$MT&Mo))
              '#f)
          ((case-lambda
             ((g$o$8634$MT&Mo)
              (if (eq? g$o$8634$MT&Mo 'quote)
                g$e$8633$MT&Mo
                (if (begin
                      '#f
                      (g$clr-generator?$8423$MT&Mo g$o$8634$MT&Mo))
                  (if (pair? (cdr g$e$8633$MT&Mo))
                    (list
                      (g$fix-primitives$8424$MT&Mo
                        (g$cadr$6411$MT&Mo g$e$8633$MT&Mo))
                      (cons
                        g$o$8634$MT&Mo
                        (g$map$5753$MT&Mo
                          g$fix-primitives$8424$MT&Mo
                          (g$cddr$6413$MT&Mo g$e$8633$MT&Mo))))
                    g$e$8633$MT&Mo)
                  (cons
                    (g$fix-primitives$8424$MT&Mo g$o$8634$MT&Mo)
                    (g$map$5753$MT&Mo
                      g$fix-primitives$8424$MT&Mo
                      (cdr g$e$8633$MT&Mo)))))))
           (car g$e$8633$MT&Mo))
          g$e$8633$MT&Mo))))
   (g$parse->cps$8425$MT&Mo
     g$parse->cps$8690$MT&Mo
     (case-lambda
       ((g$e$8635$MT&Mo g$var$8636$MT&Mo)
        ((g$parse$8420$MT&Mo g$e$8635$MT&Mo)
         (g$variable-continuator$8391$MT&Mo g$var$8636$MT&Mo)))))
   (g$convert->cps$8426$MT&Mo
     g$convert->cps$8691$MT&Mo
     (case-lambda
       ((g$e$8637$MT&Mo g$var$8638$MT&Mo)
        (g$fix-primitives$8424$MT&Mo
          (g$parse->cps$8425$MT&Mo g$e$8637$MT&Mo g$var$8638$MT&Mo))))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$8692$MT&Mo
     g$current-primitive-locations$8737$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (case-lambda ((g$x$8698$MT&Mo) '#f))
       (case-lambda
         ((g$p$8699$MT&Mo)
          (begin
            (if (not (g$procedure?$6404$MT&Mo g$p$8699$MT&Mo))
              (g$assertion-error$13280$MT&Mo
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$8699$MT&Mo)))))
   (g$mutable?$8693$MT&Mo
     g$mutable?$8738$MT&Mo
     (case-lambda
       ((g$x$8700$MT&Mo)
        (letrec* ((g$simple?$8701$MT&Mo
                    (case-lambda
                      ((g$x$8702$MT&Mo)
                       ((case-lambda
                          ((g$t$8703$MT&Mo)
                           (if g$t$8703$MT&Mo
                             g$t$8703$MT&Mo
                             ((case-lambda
                                ((g$t$8704$MT&Mo)
                                 (if g$t$8704$MT&Mo
                                   g$t$8704$MT&Mo
                                   ((case-lambda
                                      ((g$t$8705$MT&Mo)
                                       (if g$t$8705$MT&Mo
                                         g$t$8705$MT&Mo
                                         ((case-lambda
                                            ((g$t$8706$MT&Mo)
                                             (if g$t$8706$MT&Mo
                                               g$t$8706$MT&Mo
                                               ((case-lambda
                                                  ((g$t$8707$MT&Mo)
                                                   (if g$t$8707$MT&Mo
                                                     g$t$8707$MT&Mo
                                                     ((case-lambda
                                                        ((g$t$8708$MT&Mo)
                                                         (if g$t$8708$MT&Mo
                                                           g$t$8708$MT&Mo
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$8702$MT&Mo)))))
                                                      (g$bytevector?$6401$MT&Mo
                                                        g$x$8702$MT&Mo)))))
                                                (string?
                                                  g$x$8702$MT&Mo)))))
                                          (g$boolean?$6403$MT&Mo
                                            g$x$8702$MT&Mo)))))
                                    (g$symbol?$6402$MT&Mo
                                      g$x$8702$MT&Mo)))))
                              (g$char?$6399$MT&Mo g$x$8702$MT&Mo)))))
                        (null? g$x$8702$MT&Mo))))))
          (not (g$simple?$8701$MT&Mo g$x$8700$MT&Mo))))))
   (g$rewriter$8694$MT&Mo
     g$rewriter$8739$MT&Mo
     (case-lambda
       ((g$quote-hack?$8709$MT&Mo)
        (letrec* ((g$f$8710$MT&Mo
                    (case-lambda
                      ((g$x$8711$MT&Mo)
                       (if (pair? g$x$8711$MT&Mo)
                         ((case-lambda
                            ((g$t$8712$MT&Mo)
                             (if (eqv? g$t$8712$MT&Mo 'quote)
                               (if (if g$quote-hack?$8709$MT&Mo
                                     (begin
                                       '#f
                                       (g$mutable?$8693$MT&Mo
                                         (g$cadr$6411$MT&Mo
                                           g$x$8711$MT&Mo)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$8713$MT&Mo)
                                     (begin
                                       (set-symbol-value!
                                         g$g$8713$MT&Mo
                                         (g$cadr$6411$MT&Mo
                                           g$x$8711$MT&Mo))
                                       g$g$8713$MT&Mo)))
                                  (gensym 'weak-temp))
                                 g$x$8711$MT&Mo)
                               (if (eqv? g$t$8712$MT&Mo 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (g$map$5753$MT&Mo
                                     (case-lambda
                                       ((g$x$8714$MT&Mo)
                                        (cons
                                          (car g$x$8714$MT&Mo)
                                          (g$map$5753$MT&Mo
                                            g$f$8710$MT&Mo
                                            (cdr g$x$8714$MT&Mo)))))
                                     (cdr g$x$8711$MT&Mo)))
                                 (if (eqv? g$t$8712$MT&Mo 'lambda)
                                   (g$cons*$5755$MT&Mo
                                     'lambda
                                     (g$cadr$6411$MT&Mo g$x$8711$MT&Mo)
                                     (g$map$5753$MT&Mo
                                       g$f$8710$MT&Mo
                                       (g$cddr$6413$MT&Mo
                                         g$x$8711$MT&Mo)))
                                   (if (eqv? g$t$8712$MT&Mo 'letrec)
                                     ((case-lambda
                                        ((g$bindings$8715$MT&Mo
                                           g$body*$8716$MT&Mo)
                                         ((case-lambda
                                            ((g$lhs*$8717$MT&Mo
                                               g$rhs*$8718$MT&Mo)
                                             (g$cons*$5755$MT&Mo
                                               'letrec
                                               (g$map$5753$MT&Mo
                                                 list
                                                 g$lhs*$8717$MT&Mo
                                                 (g$map$5753$MT&Mo
                                                   g$f$8710$MT&Mo
                                                   g$rhs*$8718$MT&Mo))
                                               (g$map$5753$MT&Mo
                                                 g$f$8710$MT&Mo
                                                 g$body*$8716$MT&Mo))))
                                          (g$map$5753$MT&Mo
                                            car
                                            g$bindings$8715$MT&Mo)
                                          (g$map$5753$MT&Mo
                                            g$cadr$6411$MT&Mo
                                            g$bindings$8715$MT&Mo))))
                                      (g$cadr$6411$MT&Mo g$x$8711$MT&Mo)
                                      (g$cddr$6413$MT&Mo
                                        g$x$8711$MT&Mo))
                                     (if (eqv? g$t$8712$MT&Mo 'letrec*)
                                       ((case-lambda
                                          ((g$bindings$8719$MT&Mo
                                             g$body*$8720$MT&Mo)
                                           ((case-lambda
                                              ((g$lhs*$8721$MT&Mo
                                                 g$rhs*$8722$MT&Mo)
                                               (g$cons*$5755$MT&Mo
                                                 'letrec*
                                                 (g$map$5753$MT&Mo
                                                   list
                                                   g$lhs*$8721$MT&Mo
                                                   (g$map$5753$MT&Mo
                                                     g$f$8710$MT&Mo
                                                     g$rhs*$8722$MT&Mo))
                                                 (g$map$5753$MT&Mo
                                                   g$f$8710$MT&Mo
                                                   g$body*$8720$MT&Mo))))
                                            (g$map$5753$MT&Mo
                                              car
                                              g$bindings$8719$MT&Mo)
                                            (g$map$5753$MT&Mo
                                              g$cadr$6411$MT&Mo
                                              g$bindings$8719$MT&Mo))))
                                        (g$cadr$6411$MT&Mo
                                          g$x$8711$MT&Mo)
                                        (g$cddr$6413$MT&Mo
                                          g$x$8711$MT&Mo))
                                       (if (eqv?
                                             g$t$8712$MT&Mo
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$8723$MT&Mo
                                               g$x$8724$MT&Mo)
                                             ((case-lambda
                                                ((g$bindings$8725$MT&Mo
                                                   g$body*$8726$MT&Mo)
                                                 ((case-lambda
                                                    ((g$lhs*$8727$MT&Mo
                                                       g$lhs**$8728$MT&Mo
                                                       g$rhs*$8729$MT&Mo)
                                                     (g$cons*$5755$MT&Mo
                                                       'library-letrec*
                                                       g$name$8723$MT&Mo
                                                       (g$map$5753$MT&Mo
                                                         list
                                                         g$lhs*$8727$MT&Mo
                                                         g$lhs**$8728$MT&Mo
                                                         (g$map$5753$MT&Mo
                                                           g$f$8710$MT&Mo
                                                           g$rhs*$8729$MT&Mo))
                                                       (g$map$5753$MT&Mo
                                                         g$f$8710$MT&Mo
                                                         g$body*$8726$MT&Mo))))
                                                  (g$map$5753$MT&Mo
                                                    car
                                                    g$bindings$8725$MT&Mo)
                                                  (g$map$5753$MT&Mo
                                                    g$cadr$6411$MT&Mo
                                                    g$bindings$8725$MT&Mo)
                                                  (g$map$5753$MT&Mo
                                                    g$caddr$6417$MT&Mo
                                                    g$bindings$8725$MT&Mo))))
                                              (g$cadr$6411$MT&Mo
                                                g$x$8724$MT&Mo)
                                              (g$cddr$6413$MT&Mo
                                                g$x$8724$MT&Mo))))
                                          (g$cadr$6411$MT&Mo
                                            g$x$8711$MT&Mo)
                                          (cdr g$x$8711$MT&Mo))
                                         (if (eqv?
                                               g$t$8712$MT&Mo
                                               'begin)
                                           (cons
                                             'begin
                                             (g$map$5753$MT&Mo
                                               g$f$8710$MT&Mo
                                               (cdr g$x$8711$MT&Mo)))
                                           (if (eqv?
                                                 g$t$8712$MT&Mo
                                                 'set!)
                                             (list
                                               'set!
                                               (g$cadr$6411$MT&Mo
                                                 g$x$8711$MT&Mo)
                                               (g$f$8710$MT&Mo
                                                 (g$caddr$6417$MT&Mo
                                                   g$x$8711$MT&Mo)))
                                             (if (eqv?
                                                   g$t$8712$MT&Mo
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$8730$MT&Mo)
                                                   ((case-lambda
                                                      ((g$t$8731$MT&Mo)
                                                       (if g$t$8731$MT&Mo
                                                         ((case-lambda
                                                            ((g$loc$8732$MT&Mo)
                                                             g$loc$8732$MT&Mo))
                                                          g$t$8731$MT&Mo)
                                                         g$op$8730$MT&Mo)))
                                                    ((g$current-primitive-locations$8692$MT&Mo)
                                                     g$op$8730$MT&Mo))))
                                                (g$cadr$6411$MT&Mo
                                                  g$x$8711$MT&Mo))
                                               (if (eqv?
                                                     g$t$8712$MT&Mo
                                                     'define)
                                                 g$x$8711$MT&Mo
                                                 (if (list?
                                                       g$x$8711$MT&Mo)
                                                   (g$map$5753$MT&Mo
                                                     g$f$8710$MT&Mo
                                                     g$x$8711$MT&Mo)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$8711$MT&Mo
                                                     (list?
                                                       g$x$8711$MT&Mo)))))))))))))))
                          (car g$x$8711$MT&Mo))
                         g$x$8711$MT&Mo)))))
          g$f$8710$MT&Mo))))
   (g$expanded->core$8695$MT&Mo
     g$expanded->core$8740$MT&Mo
     (case-lambda
       ((g$x$8733$MT&Mo) ((g$rewriter$8694$MT&Mo '#t) g$x$8733$MT&Mo))))
   (g$compile-core-expr$8696$MT&Mo
     g$compile-core-expr$8741$MT&Mo
     (case-lambda
       ((g$x$8734$MT&Mo) ((g$rewriter$8694$MT&Mo '#f) g$x$8734$MT&Mo))))
   (g$compile-core-expr-to-port$8697$MT&Mo
     g$compile-core-expr-to-port$8742$MT&Mo
     (case-lambda
       ((g$x$8735$MT&Mo g$p$8736$MT&Mo)
        (g$pretty-print$8373$MT&Mo
          ((g$rewriter$8694$MT&Mo '#f) g$x$8735$MT&Mo)
          g$p$8736$MT&Mo)))))
  (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$8743$MT&Mo
     g$make-collection$8951$MT&Mo
     (case-lambda
       (()
        ((case-lambda
           ((g$set$8806$MT&Mo)
            (letrec* ((g$set-cons$8807$MT&Mo
                        (case-lambda
                          ((g$x$8811$MT&Mo g$ls$8812$MT&Mo)
                           (if (g$memq$5745$MT&Mo
                                 g$x$8811$MT&Mo
                                 g$ls$8812$MT&Mo)
                             g$ls$8812$MT&Mo
                             (cons g$x$8811$MT&Mo g$ls$8812$MT&Mo))))))
              (case-lambda
                (() g$set$8806$MT&Mo)
                ((g$x$8808$MT&Mo)
                 (set! g$set$8806$MT&Mo
                   (g$set-cons$8807$MT&Mo
                     g$x$8808$MT&Mo
                     g$set$8806$MT&Mo)))
                ((g$x$8809$MT&Mo g$del?$8810$MT&Mo)
                 (if g$del?$8810$MT&Mo
                   (set! g$set$8806$MT&Mo
                     (g$remq$5760$MT&Mo
                       g$x$8809$MT&Mo
                       g$set$8806$MT&Mo))
                   (set! g$set$8806$MT&Mo
                     (g$set-cons$8807$MT&Mo
                       g$x$8809$MT&Mo
                       g$set$8806$MT&Mo))))))))
         '()))))
   (g$current-library-collection$8744$MT&Mo
     g$current-library-collection$8952$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (g$make-collection$8743$MT&Mo)
       (case-lambda
         ((g$x$8813$MT&Mo)
          (begin
            (if (not (g$procedure?$6404$MT&Mo g$x$8813$MT&Mo))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$8813$MT&Mo)
              (void))
            g$x$8813$MT&Mo)))))
   (g$7300$8745$MT&Mo
     g$7300$8953$MT&Mo
     (make-record-type-descriptor
       'library
       '#f
       'g$7303$MT&Mo
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7302$8746$MT&Mo g$7302$8954$MT&Mo '#f)
   (g$7301$8747$MT&Mo
     g$7301$8955$MT&Mo
     (make-record-constructor-descriptor
       g$7300$8745$MT&Mo
       '#f
       g$7302$8746$MT&Mo))
   (g$library?$8750$MT&Mo
     g$library?$8956$MT&Mo
     (record-predicate g$7300$8745$MT&Mo))
   (g$make-library$8751$MT&Mo
     g$make-library$8957$MT&Mo
     (record-constructor g$7301$8747$MT&Mo))
   (g$library-id$8752$MT&Mo
     g$library-id$8958$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '0))
   (g$library-name$8753$MT&Mo
     g$library-name$8959$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '1))
   (g$library-version$8754$MT&Mo
     g$library-version$8960$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '2))
   (g$library-imp*$8755$MT&Mo
     g$library-imp*$8961$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '3))
   (g$library-vis*$8756$MT&Mo
     g$library-vis*$8962$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '4))
   (g$library-inv*$8757$MT&Mo
     g$library-inv*$8963$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '5))
   (g$library-subst$8758$MT&Mo
     g$library-subst$8964$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '6))
   (g$library-env$8759$MT&Mo
     g$library-env$8965$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '7))
   (g$library-visit-state$8760$MT&Mo
     g$library-visit-state$8966$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '8))
   (g$library-invoke-state$8761$MT&Mo
     g$library-invoke-state$8967$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '9))
   (g$library-visit-code$8762$MT&Mo
     g$library-visit-code$8968$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '10))
   (g$library-invoke-code$8763$MT&Mo
     g$library-invoke-code$8969$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '11))
   (g$library-visible?$8764$MT&Mo
     g$library-visible?$8970$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '12))
   (g$library-source-file-name$8765$MT&Mo
     g$library-source-file-name$8971$MT&Mo
     (record-accessor g$7300$8745$MT&Mo '13))
   (g$set-library-id!$8766$MT&Mo
     g$set-library-id!$8972$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '0))
   (g$set-library-name!$8767$MT&Mo
     g$set-library-name!$8973$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '1))
   (g$set-library-version!$8768$MT&Mo
     g$set-library-version!$8974$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '2))
   (g$set-library-imp*!$8769$MT&Mo
     g$set-library-imp*!$8975$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '3))
   (g$set-library-vis*!$8770$MT&Mo
     g$set-library-vis*!$8976$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '4))
   (g$set-library-inv*!$8771$MT&Mo
     g$set-library-inv*!$8977$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '5))
   (g$set-library-subst!$8772$MT&Mo
     g$set-library-subst!$8978$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '6))
   (g$set-library-env!$8773$MT&Mo
     g$set-library-env!$8979$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '7))
   (g$set-library-visit-state!$8774$MT&Mo
     g$set-library-visit-state!$8980$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '8))
   (g$set-library-invoke-state!$8775$MT&Mo
     g$set-library-invoke-state!$8981$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '9))
   (g$set-library-visit-code!$8776$MT&Mo
     g$set-library-visit-code!$8982$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '10))
   (g$set-library-invoke-code!$8777$MT&Mo
     g$set-library-invoke-code!$8983$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '11))
   (g$set-library-visible?!$8778$MT&Mo
     g$set-library-visible?!$8984$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '12))
   (g$set-library-source-file-name!$8779$MT&Mo
     g$set-library-source-file-name!$8985$MT&Mo
     (record-mutator g$7300$8745$MT&Mo '13))
   (g$rp$8780$MT&Mo
     g$rp$8986$MT&Mo
     (make-record-printer
       'library
       (case-lambda
         ((g$x$8814$MT&Mo g$p$8815$MT&Mo g$wr$8816$MT&Mo)
          (begin
            (if (not (g$library?$8750$MT&Mo g$x$8814$MT&Mo))
              (assertion-violation
                'record-type-printer
                '"not a library")
              (void))
            (display
              (g$format$8009$MT&Mo
                '"#<library ~s>"
                (if (null?
                      (g$library-version$8754$MT&Mo g$x$8814$MT&Mo))
                  (g$library-name$8753$MT&Mo g$x$8814$MT&Mo)
                  (append
                    (g$library-name$8753$MT&Mo g$x$8814$MT&Mo)
                    (list
                      (g$library-version$8754$MT&Mo g$x$8814$MT&Mo)))))
              g$p$8815$MT&Mo))))))
   (g$find-dependencies$8781$MT&Mo
     g$find-dependencies$8987$MT&Mo
     (case-lambda
       ((g$ls$8817$MT&Mo)
        (if (null? g$ls$8817$MT&Mo)
          '()
          (assertion-violation
            'find-dependencies
            '"cannot handle deps yet")))))
   (g$find-library-by$8782$MT&Mo
     g$find-library-by$8988$MT&Mo
     (case-lambda
       ((g$pred$8818$MT&Mo)
        ((letrec ((g$f$8819$MT&Mo
                    (case-lambda
                      ((g$ls$8820$MT&Mo)
                       (if (null? g$ls$8820$MT&Mo)
                         '#f
                         (if (g$pred$8818$MT&Mo (car g$ls$8820$MT&Mo))
                           (car g$ls$8820$MT&Mo)
                           (g$f$8819$MT&Mo (cdr g$ls$8820$MT&Mo))))))))
           g$f$8819$MT&Mo)
         ((g$current-library-collection$8744$MT&Mo))))))
   (g$library-path$8783$MT&Mo
     g$library-path$8989$MT&Mo
     (g$make-parameter$8174$MT&Mo
       '(".")
       (case-lambda
         ((g$x$8821$MT&Mo)
          (if (if (list? g$x$8821$MT&Mo)
                (begin
                  '#f
                  (g$for-all$5751$MT&Mo string? g$x$8821$MT&Mo))
                '#f)
            (g$map$5753$MT&Mo
              (case-lambda ((g$x$8822$MT&Mo) g$x$8822$MT&Mo))
              g$x$8821$MT&Mo)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$8821$MT&Mo))))))
   (g$library-extensions$8784$MT&Mo
     g$library-extensions$8990$MT&Mo
     (g$make-parameter$8174$MT&Mo
       '(".sls" ".ss")
       (case-lambda
         ((g$x$8823$MT&Mo)
          (if (if (list? g$x$8823$MT&Mo)
                (begin
                  '#f
                  (g$for-all$5751$MT&Mo string? g$x$8823$MT&Mo))
                '#f)
            (g$map$5753$MT&Mo
              (case-lambda ((g$x$8824$MT&Mo) g$x$8824$MT&Mo))
              g$x$8823$MT&Mo)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$8823$MT&Mo))))))
   (g$library-name->file-name$8785$MT&Mo
     g$library-name->file-name$8991$MT&Mo
     (case-lambda
       ((g$x$8825$MT&Mo)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$7772$MT&Mo)))
          (case-lambda
            ((g$p$8828$MT&Mo g$extract$8829$MT&Mo)
             ((case-lambda
                ((g$extract$8830$MT&Mo g$p$8831$MT&Mo)
                 (letrec* ((g$display-hex$8832$MT&Mo
                             (case-lambda
                               ((g$n$8840$MT&Mo)
                                (if (<= '0 g$n$8840$MT&Mo '9)
                                  (display
                                    g$n$8840$MT&Mo
                                    g$p$8831$MT&Mo)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$8840$MT&Mo '10)))
                                    g$p$8831$MT&Mo))))))
                   (begin
                     ((letrec ((g$f$8833$MT&Mo
                                 (case-lambda
                                   ((g$ls$8834$MT&Mo)
                                    (if (not (null? g$ls$8834$MT&Mo))
                                      (begin
                                        (display '"/" g$p$8831$MT&Mo)
                                        (g$for-each$5754$MT&Mo
                                          (case-lambda
                                            ((g$c$8835$MT&Mo)
                                             (if ((case-lambda
                                                    ((g$t$8836$MT&Mo)
                                                     (if g$t$8836$MT&Mo
                                                       g$t$8836$MT&Mo
                                                       ((case-lambda
                                                          ((g$t$8837$MT&Mo)
                                                           (if g$t$8837$MT&Mo
                                                             g$t$8837$MT&Mo
                                                             ((case-lambda
                                                                ((g$t$8838$MT&Mo)
                                                                 (if g$t$8838$MT&Mo
                                                                   g$t$8838$MT&Mo
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5746$MT&Mo
                                                                       g$c$8835$MT&Mo
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$6457$MT&Mo
                                                                '#\0
                                                                g$c$8835$MT&Mo
                                                                '#\9)))))
                                                        (g$char<=?$6457$MT&Mo
                                                          '#\A
                                                          g$c$8835$MT&Mo
                                                          '#\Z)))))
                                                  (g$char<=?$6457$MT&Mo
                                                    '#\a
                                                    g$c$8835$MT&Mo
                                                    '#\z))
                                               (display
                                                 g$c$8835$MT&Mo
                                                 g$p$8831$MT&Mo)
                                               (begin
                                                 (display
                                                   '"%"
                                                   g$p$8831$MT&Mo)
                                                 ((case-lambda
                                                    ((g$n$8839$MT&Mo)
                                                     (begin
                                                       (g$display-hex$8832$MT&Mo
                                                         (g$quotient$7311$MT&Mo
                                                           g$n$8839$MT&Mo
                                                           '16))
                                                       (g$display-hex$8832$MT&Mo
                                                         (g$remainder$7312$MT&Mo
                                                           g$n$8839$MT&Mo
                                                           '16)))))
                                                  (char->integer
                                                    g$c$8835$MT&Mo))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$8834$MT&Mo))))
                                        (g$f$8833$MT&Mo
                                          (cdr g$ls$8834$MT&Mo)))
                                      (void))))))
                        g$f$8833$MT&Mo)
                      g$x$8825$MT&Mo)
                     (g$extract$8830$MT&Mo)))))
              g$extract$8829$MT&Mo
              g$p$8828$MT&Mo)))))))
   (g$file-locator$8786$MT&Mo
     g$file-locator$8992$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (case-lambda
         ((g$x$8841$MT&Mo)
          ((case-lambda
             ((g$str$8842$MT&Mo)
              ((letrec ((g$f$8843$MT&Mo
                          (case-lambda
                            ((g$ls$8844$MT&Mo
                               g$exts$8845$MT&Mo
                               g$failed-list$8846$MT&Mo)
                             (if (null? g$ls$8844$MT&Mo)
                               (g$file-locator-resolution-error$8172$MT&Mo
                                 g$x$8841$MT&Mo
                                 (g$reverse$6409$MT&Mo
                                   g$failed-list$8846$MT&Mo))
                               (if (null? g$exts$8845$MT&Mo)
                                 (g$f$8843$MT&Mo
                                   (cdr g$ls$8844$MT&Mo)
                                   (g$library-extensions$8784$MT&Mo)
                                   g$failed-list$8846$MT&Mo)
                                 ((case-lambda
                                    ((g$name$8847$MT&Mo)
                                     (if (g$file-exists?$6519$MT&Mo
                                           g$name$8847$MT&Mo)
                                       g$name$8847$MT&Mo
                                       (g$f$8843$MT&Mo
                                         g$ls$8844$MT&Mo
                                         (cdr g$exts$8845$MT&Mo)
                                         (cons
                                           g$name$8847$MT&Mo
                                           g$failed-list$8846$MT&Mo)))))
                                  (string-append
                                    (car g$ls$8844$MT&Mo)
                                    g$str$8842$MT&Mo
                                    (car g$exts$8845$MT&Mo)))))))))
                 g$f$8843$MT&Mo)
               (g$library-path$8783$MT&Mo)
               (g$library-extensions$8784$MT&Mo)
               '())))
           (g$library-name->file-name$8785$MT&Mo g$x$8841$MT&Mo))))
       (case-lambda
         ((g$f$8848$MT&Mo)
          (if (g$procedure?$6404$MT&Mo g$f$8848$MT&Mo)
            g$f$8848$MT&Mo
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$8848$MT&Mo))))))
   (g$serialize-all$8787$MT&Mo
     g$serialize-all$8993$MT&Mo
     (case-lambda
       ((g$serialize$8849$MT&Mo g$compile$8850$MT&Mo)
        (letrec* ((g$library-desc$8851$MT&Mo
                    (case-lambda
                      ((g$x$8853$MT&Mo)
                       (list
                         (g$library-id$8752$MT&Mo g$x$8853$MT&Mo)
                         (g$library-name$8753$MT&Mo g$x$8853$MT&Mo))))))
          (g$for-each$5754$MT&Mo
            (case-lambda
              ((g$x$8852$MT&Mo)
               (if (g$library-source-file-name$8765$MT&Mo
                     g$x$8852$MT&Mo)
                 (g$serialize$8849$MT&Mo
                   (g$library-source-file-name$8765$MT&Mo
                     g$x$8852$MT&Mo)
                   (list
                     (g$library-id$8752$MT&Mo g$x$8852$MT&Mo)
                     (g$library-name$8753$MT&Mo g$x$8852$MT&Mo)
                     (g$library-version$8754$MT&Mo g$x$8852$MT&Mo)
                     (g$map$5753$MT&Mo
                       g$library-desc$8851$MT&Mo
                       (g$library-imp*$8755$MT&Mo g$x$8852$MT&Mo))
                     (g$map$5753$MT&Mo
                       g$library-desc$8851$MT&Mo
                       (g$library-vis*$8756$MT&Mo g$x$8852$MT&Mo))
                     (g$map$5753$MT&Mo
                       g$library-desc$8851$MT&Mo
                       (g$library-inv*$8757$MT&Mo g$x$8852$MT&Mo))
                     (g$library-subst$8758$MT&Mo g$x$8852$MT&Mo)
                     (g$library-env$8759$MT&Mo g$x$8852$MT&Mo)
                     (g$compile$8850$MT&Mo
                       (g$library-visit-code$8762$MT&Mo g$x$8852$MT&Mo))
                     (g$compile$8850$MT&Mo
                       (g$library-invoke-code$8763$MT&Mo
                         g$x$8852$MT&Mo))
                     (g$library-visible?$8764$MT&Mo g$x$8852$MT&Mo)))
                 (void))))
            ((g$current-library-collection$8744$MT&Mo)))))))
   (g$current-precompiled-library-loader$8788$MT&Mo
     g$current-precompiled-library-loader$8994$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (case-lambda ((g$filename$8854$MT&Mo g$sk$8855$MT&Mo) '#f))))
   (g$try-load-from-file$8789$MT&Mo
     g$try-load-from-file$8995$MT&Mo
     (case-lambda
       ((g$filename$8856$MT&Mo)
        ((g$current-precompiled-library-loader$8788$MT&Mo)
         g$filename$8856$MT&Mo
         (case-lambda
           ((g$id$8857$MT&Mo
              g$name$8858$MT&Mo
              g$ver$8859$MT&Mo
              g$imp*$8860$MT&Mo
              g$vis*$8861$MT&Mo
              g$inv*$8862$MT&Mo
              g$exp-subst$8863$MT&Mo
              g$exp-env$8864$MT&Mo
              g$visit-proc$8865$MT&Mo
              g$invoke-proc$8866$MT&Mo
              g$visible?$8867$MT&Mo)
            ((letrec ((g$f$8868$MT&Mo
                        (case-lambda
                          ((g$deps$8869$MT&Mo)
                           (if (null? g$deps$8869$MT&Mo)
                             (begin
                               (g$install-library$8799$MT&Mo
                                 g$id$8857$MT&Mo
                                 g$name$8858$MT&Mo
                                 g$ver$8859$MT&Mo
                                 g$imp*$8860$MT&Mo
                                 g$vis*$8861$MT&Mo
                                 g$inv*$8862$MT&Mo
                                 g$exp-subst$8863$MT&Mo
                                 g$exp-env$8864$MT&Mo
                                 g$visit-proc$8865$MT&Mo
                                 g$invoke-proc$8866$MT&Mo
                                 '#f
                                 '#f
                                 g$visible?$8867$MT&Mo
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$8870$MT&Mo)
                                 ((case-lambda
                                    ((g$label$8871$MT&Mo
                                       g$dname$8872$MT&Mo)
                                     ((case-lambda
                                        ((g$l$8873$MT&Mo)
                                         (if (if (g$library?$8750$MT&Mo
                                                   g$l$8873$MT&Mo)
                                               (begin
                                                 '#f
                                                 (eq? g$label$8871$MT&Mo
                                                      (g$library-id$8752$MT&Mo
                                                        g$l$8873$MT&Mo)))
                                               '#f)
                                           (g$f$8868$MT&Mo
                                             (cdr g$deps$8869$MT&Mo))
                                           (begin
                                             (g$library-version-mismatch-warning$8171$MT&Mo
                                               g$name$8858$MT&Mo
                                               g$dname$8872$MT&Mo
                                               g$filename$8856$MT&Mo)
                                             '#f))))
                                      (g$find-library-by-name$8794$MT&Mo
                                        g$dname$8872$MT&Mo))))
                                  (car g$d$8870$MT&Mo)
                                  (g$cadr$6411$MT&Mo g$d$8870$MT&Mo))))
                              (car g$deps$8869$MT&Mo)))))))
               g$f$8868$MT&Mo)
             (append
               g$imp*$8860$MT&Mo
               g$vis*$8861$MT&Mo
               g$inv*$8862$MT&Mo)))
           (g$others$8874$MT&Mo '#f))))))
   (g$library-loader$8790$MT&Mo
     g$library-loader$8996$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (case-lambda
         ((g$x$8875$MT&Mo)
          ((case-lambda
             ((g$file-name$8876$MT&Mo)
              (if (not g$file-name$8876$MT&Mo)
                (assertion-violation
                  '#f
                  '"cannot find library"
                  g$x$8875$MT&Mo)
                ((case-lambda
                   ((g$t$8877$MT&Mo)
                    (if g$t$8877$MT&Mo
                      g$t$8877$MT&Mo
                      (begin
                        '#f
                        ((g$current-library-expander$8791$MT&Mo)
                         (g$read-library-source-file$8173$MT&Mo
                           g$file-name$8876$MT&Mo)
                         g$file-name$8876$MT&Mo
                         (case-lambda
                           ((g$name$8878$MT&Mo)
                            (if (not (equal?
                                       g$name$8878$MT&Mo
                                       g$x$8875$MT&Mo))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$7772$MT&Mo)))
                                  (case-lambda
                                    ((g$p$8881$MT&Mo g$e$8882$MT&Mo)
                                     ((case-lambda
                                        ((g$e$8883$MT&Mo g$p$8884$MT&Mo)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$8884$MT&Mo)
                                           (write
                                             g$x$8875$MT&Mo
                                             g$p$8884$MT&Mo)
                                           (display
                                             '" in file "
                                             g$p$8884$MT&Mo)
                                           (display
                                             g$file-name$8876$MT&Mo
                                             g$p$8884$MT&Mo)
                                           (display
                                             '", found "
                                             g$p$8884$MT&Mo)
                                           (write
                                             g$name$8878$MT&Mo
                                             g$p$8884$MT&Mo)
                                           (display
                                             '" instead"
                                             g$p$8884$MT&Mo)
                                           (g$e$8883$MT&Mo))))
                                      g$e$8882$MT&Mo
                                      g$p$8881$MT&Mo)))))
                              (void)))))))))
                 (g$try-load-from-file$8789$MT&Mo
                   g$file-name$8876$MT&Mo)))))
           ((g$file-locator$8786$MT&Mo) g$x$8875$MT&Mo))))
       (case-lambda
         ((g$f$8885$MT&Mo)
          (if (g$procedure?$6404$MT&Mo g$f$8885$MT&Mo)
            g$f$8885$MT&Mo
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$8885$MT&Mo))))))
   (g$current-library-expander$8791$MT&Mo
     g$current-library-expander$8997$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (case-lambda
         ((g$x$8886$MT&Mo)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$8887$MT&Mo)
          (if (g$procedure?$6404$MT&Mo g$f$8887$MT&Mo)
            g$f$8887$MT&Mo
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$8887$MT&Mo))))))
   (g$external-pending-libraries$8792$MT&Mo
     g$external-pending-libraries$8998$MT&Mo
     (g$make-parameter$8174$MT&Mo '()))
   (g$find-external-library$8793$MT&Mo
     g$find-external-library$8999$MT&Mo
     (case-lambda
       ((g$name$8888$MT&Mo)
        (begin
          (if (g$member$5747$MT&Mo
                g$name$8888$MT&Mo
                (g$external-pending-libraries$8792$MT&Mo))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$8888$MT&Mo)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$8891$MT&Mo
                g$external-pending-libraries$8892$MT&Mo)
              ((case-lambda
                 ((g$swap$8893$MT&Mo)
                  (dynamic-wind
                    g$swap$8893$MT&Mo
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$8790$MT&Mo)
                          g$name$8888$MT&Mo)
                         ((case-lambda
                            ((g$t$8894$MT&Mo)
                             (if g$t$8894$MT&Mo
                               g$t$8894$MT&Mo
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$8888$MT&Mo)))))
                          (g$find-library-by$8782$MT&Mo
                            (case-lambda
                              ((g$x$8895$MT&Mo)
                               (equal?
                                 (g$library-name$8753$MT&Mo
                                   g$x$8895$MT&Mo)
                                 g$name$8888$MT&Mo))))))))
                    g$swap$8893$MT&Mo)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$8896$MT&Mo)
                      (begin
                        (g$external-pending-libraries$8891$MT&Mo
                          g$external-pending-libraries$8892$MT&Mo)
                        (set! g$external-pending-libraries$8892$MT&Mo
                          g$t$8896$MT&Mo))))
                   (g$external-pending-libraries$8891$MT&Mo)))))))
           g$external-pending-libraries$8792$MT&Mo
           (cons
             g$name$8888$MT&Mo
             (g$external-pending-libraries$8792$MT&Mo)))))))
   (g$find-library-by-name$8794$MT&Mo
     g$find-library-by-name$9000$MT&Mo
     (case-lambda
       ((g$name$8897$MT&Mo)
        ((case-lambda
           ((g$t$8898$MT&Mo)
            (if g$t$8898$MT&Mo
              g$t$8898$MT&Mo
              (begin
                '#f
                (g$find-external-library$8793$MT&Mo
                  g$name$8897$MT&Mo)))))
         (g$find-library-by$8782$MT&Mo
           (case-lambda
             ((g$x$8899$MT&Mo)
              (equal?
                (g$library-name$8753$MT&Mo g$x$8899$MT&Mo)
                g$name$8897$MT&Mo))))))))
   (g$uninstall-library$8795$MT&Mo
     g$uninstall-library$9001$MT&Mo
     (case-lambda
       ((g$name$8900$MT&Mo g$err?$8901$MT&Mo)
        (letrec* ((g$who$8902$MT&Mo 'uninstall-library))
          ((case-lambda
             ((g$lib$8903$MT&Mo)
              (begin
                (if (if g$err?$8901$MT&Mo
                      (begin '#f (not g$lib$8903$MT&Mo))
                      '#f)
                  (assertion-violation
                    g$who$8902$MT&Mo
                    '"library not installed"
                    g$name$8900$MT&Mo)
                  (void))
                ((g$current-library-collection$8744$MT&Mo)
                 g$lib$8903$MT&Mo
                 '#t)
                (g$for-each$5754$MT&Mo
                  (case-lambda
                    ((g$x$8904$MT&Mo)
                     ((case-lambda
                        ((g$label$8905$MT&Mo g$binding$8906$MT&Mo)
                         (begin
                           (remove-location g$label$8905$MT&Mo)
                           (if (g$memq$5745$MT&Mo
                                 (car g$binding$8906$MT&Mo)
                                 '(global
                                    global-macro
                                    global-macro!
                                    global-ctv))
                             (remove-location
                               (cdr g$binding$8906$MT&Mo))
                             (void)))))
                      (car g$x$8904$MT&Mo)
                      (cdr g$x$8904$MT&Mo))))
                  (g$library-env$8759$MT&Mo g$lib$8903$MT&Mo)))))
           (g$find-library-by$8782$MT&Mo
             (case-lambda
               ((g$x$8907$MT&Mo)
                (equal?
                  (g$library-name$8753$MT&Mo g$x$8907$MT&Mo)
                  g$name$8900$MT&Mo)))))))
       ((g$name$8908$MT&Mo)
        (g$uninstall-library$8795$MT&Mo g$name$8908$MT&Mo '#t))))
   (g$library-exists?$8796$MT&Mo
     g$library-exists?$9002$MT&Mo
     (case-lambda
       ((g$name$8909$MT&Mo)
        (if (g$find-library-by$8782$MT&Mo
              (case-lambda
                ((g$x$8910$MT&Mo)
                 (equal?
                   (g$library-name$8753$MT&Mo g$x$8910$MT&Mo)
                   g$name$8909$MT&Mo))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$8797$MT&Mo
     g$find-library-by-spec/die$9003$MT&Mo
     (case-lambda
       ((g$spec$8911$MT&Mo)
        ((case-lambda
           ((g$id$8912$MT&Mo)
            ((case-lambda
               ((g$t$8913$MT&Mo)
                (if g$t$8913$MT&Mo
                  g$t$8913$MT&Mo
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$8911$MT&Mo)))))
             (g$find-library-by$8782$MT&Mo
               (case-lambda
                 ((g$x$8914$MT&Mo)
                  (eq? g$id$8912$MT&Mo
                       (g$library-id$8752$MT&Mo g$x$8914$MT&Mo))))))))
         (car g$spec$8911$MT&Mo)))))
   (g$install-library-record$8798$MT&Mo
     g$install-library-record$9004$MT&Mo
     (case-lambda
       ((g$lib$8915$MT&Mo)
        (begin
          ((case-lambda
             ((g$exp-env$8916$MT&Mo)
              (g$for-each$5754$MT&Mo
                (case-lambda
                  ((g$x$8917$MT&Mo)
                   ((case-lambda
                      ((g$label$8918$MT&Mo g$binding$8919$MT&Mo)
                       ((case-lambda
                          ((g$binding$8920$MT&Mo)
                           (g$set-label-binding!$8177$MT&Mo
                             g$label$8918$MT&Mo
                             g$binding$8920$MT&Mo)))
                        ((case-lambda
                           ((g$t$8921$MT&Mo)
                            (if (eqv? g$t$8921$MT&Mo 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$8915$MT&Mo
                                  (cdr g$binding$8919$MT&Mo)))
                              (if (eqv? g$t$8921$MT&Mo 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$8915$MT&Mo
                                    (cdr g$binding$8919$MT&Mo)))
                                (if (eqv? g$t$8921$MT&Mo 'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$8915$MT&Mo
                                      (cdr g$binding$8919$MT&Mo)))
                                  (if (eqv? g$t$8921$MT&Mo 'global-ctv)
                                    (cons
                                      'global-ctv
                                      (cons
                                        g$lib$8915$MT&Mo
                                        (cdr g$binding$8919$MT&Mo)))
                                    g$binding$8919$MT&Mo))))))
                         (car g$binding$8919$MT&Mo)))))
                    (car g$x$8917$MT&Mo)
                    (cdr g$x$8917$MT&Mo))))
                g$exp-env$8916$MT&Mo)))
           (g$library-env$8759$MT&Mo g$lib$8915$MT&Mo))
          ((g$current-library-collection$8744$MT&Mo)
           g$lib$8915$MT&Mo)))))
   (g$install-library$8799$MT&Mo
     g$install-library$9005$MT&Mo
     (case-lambda
       ((g$id$8922$MT&Mo
          g$name$8923$MT&Mo
          g$ver$8924$MT&Mo
          g$imp*$8925$MT&Mo
          g$vis*$8926$MT&Mo
          g$inv*$8927$MT&Mo
          g$exp-subst$8928$MT&Mo
          g$exp-env$8929$MT&Mo
          g$visit-proc$8930$MT&Mo
          g$invoke-proc$8931$MT&Mo
          g$visit-code$8932$MT&Mo
          g$invoke-code$8933$MT&Mo
          g$visible?$8934$MT&Mo
          g$source-file-name$8935$MT&Mo)
        ((case-lambda
           ((g$imp-lib*$8936$MT&Mo
              g$vis-lib*$8937$MT&Mo
              g$inv-lib*$8938$MT&Mo)
            (begin
              (if (not (if (g$symbol?$6402$MT&Mo g$id$8922$MT&Mo)
                         (if (list? g$name$8923$MT&Mo)
                           (begin '#f (list? g$ver$8924$MT&Mo))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$8922$MT&Mo
                  g$name$8923$MT&Mo
                  g$ver$8924$MT&Mo)
                (void))
              (if (g$library-exists?$8796$MT&Mo g$name$8923$MT&Mo)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$8923$MT&Mo)
                (void))
              ((case-lambda
                 ((g$lib$8939$MT&Mo)
                  (g$install-library-record$8798$MT&Mo
                    g$lib$8939$MT&Mo)))
               (g$make-library$8751$MT&Mo
                 g$id$8922$MT&Mo
                 g$name$8923$MT&Mo
                 g$ver$8924$MT&Mo
                 g$imp-lib*$8936$MT&Mo
                 g$vis-lib*$8937$MT&Mo
                 g$inv-lib*$8938$MT&Mo
                 g$exp-subst$8928$MT&Mo
                 g$exp-env$8929$MT&Mo
                 g$visit-proc$8930$MT&Mo
                 g$invoke-proc$8931$MT&Mo
                 g$visit-code$8932$MT&Mo
                 g$invoke-code$8933$MT&Mo
                 g$visible?$8934$MT&Mo
                 g$source-file-name$8935$MT&Mo)))))
         (g$map$5753$MT&Mo
           g$find-library-by-spec/die$8797$MT&Mo
           g$imp*$8925$MT&Mo)
         (g$map$5753$MT&Mo
           g$find-library-by-spec/die$8797$MT&Mo
           g$vis*$8926$MT&Mo)
         (g$map$5753$MT&Mo
           g$find-library-by-spec/die$8797$MT&Mo
           g$inv*$8927$MT&Mo)))))
   (g$imported-label->binding$8800$MT&Mo
     g$imported-label->binding$9006$MT&Mo
     (case-lambda
       ((g$lab$8940$MT&Mo)
        (g$label-binding$8178$MT&Mo g$lab$8940$MT&Mo))))
   (g$invoke-library$8801$MT&Mo
     g$invoke-library$9007$MT&Mo
     (case-lambda
       ((g$lib$8941$MT&Mo)
        ((case-lambda
           ((g$invoke$8942$MT&Mo)
            (if (g$procedure?$6404$MT&Mo g$invoke$8942$MT&Mo)
              (begin
                (g$set-library-invoke-state!$8775$MT&Mo
                  g$lib$8941$MT&Mo
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$8941$MT&Mo))))
                (g$for-each$5754$MT&Mo
                  g$invoke-library$8801$MT&Mo
                  (g$library-inv*$8757$MT&Mo g$lib$8941$MT&Mo))
                (g$set-library-invoke-state!$8775$MT&Mo
                  g$lib$8941$MT&Mo
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$8941$MT&Mo))))
                (g$invoke$8942$MT&Mo)
                (g$set-library-invoke-state!$8775$MT&Mo
                  g$lib$8941$MT&Mo
                  '#t))
              (void))))
         (g$library-invoke-state$8761$MT&Mo g$lib$8941$MT&Mo)))))
   (g$visit-library$8802$MT&Mo
     g$visit-library$9008$MT&Mo
     (case-lambda
       ((g$lib$8943$MT&Mo)
        ((case-lambda
           ((g$visit$8944$MT&Mo)
            (if (g$procedure?$6404$MT&Mo g$visit$8944$MT&Mo)
              (begin
                (g$set-library-visit-state!$8774$MT&Mo
                  g$lib$8943$MT&Mo
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$8943$MT&Mo))))
                (g$for-each$5754$MT&Mo
                  g$invoke-library$8801$MT&Mo
                  (g$library-vis*$8756$MT&Mo g$lib$8943$MT&Mo))
                (g$set-library-visit-state!$8774$MT&Mo
                  g$lib$8943$MT&Mo
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$8943$MT&Mo))))
                (g$visit$8944$MT&Mo)
                (g$set-library-visit-state!$8774$MT&Mo
                  g$lib$8943$MT&Mo
                  '#t))
              (void))))
         (g$library-visit-state$8760$MT&Mo g$lib$8943$MT&Mo)))))
   (g$invoke-library-by-spec$8803$MT&Mo
     g$invoke-library-by-spec$9009$MT&Mo
     (case-lambda
       ((g$spec$8945$MT&Mo)
        (g$invoke-library$8801$MT&Mo
          (g$find-library-by-spec/die$8797$MT&Mo g$spec$8945$MT&Mo)))))
   (g$installed-libraries$8804$MT&Mo
     g$installed-libraries$9010$MT&Mo
     (case-lambda
       ((g$all?$8946$MT&Mo)
        ((letrec ((g$f$8947$MT&Mo
                    (case-lambda
                      ((g$ls$8948$MT&Mo)
                       (if (null? g$ls$8948$MT&Mo)
                         '()
                         (if ((case-lambda
                                ((g$t$8949$MT&Mo)
                                 (if g$t$8949$MT&Mo
                                   g$t$8949$MT&Mo
                                   (begin
                                     '#f
                                     (g$library-visible?$8764$MT&Mo
                                       (car g$ls$8948$MT&Mo))))))
                              g$all?$8946$MT&Mo)
                           (cons
                             (g$library-name$8753$MT&Mo
                               (car g$ls$8948$MT&Mo))
                             (g$f$8947$MT&Mo (cdr g$ls$8948$MT&Mo)))
                           (g$f$8947$MT&Mo (cdr g$ls$8948$MT&Mo))))))))
           g$f$8947$MT&Mo)
         ((g$current-library-collection$8744$MT&Mo))))
       (() (g$installed-libraries$8804$MT&Mo '#f))))
   (g$library-spec$8805$MT&Mo
     g$library-spec$9011$MT&Mo
     (case-lambda
       ((g$x$8950$MT&Mo)
        (begin
          (if (not (g$library?$8750$MT&Mo g$x$8950$MT&Mo))
            (assertion-violation
              'library-spec
              '"not a library"
              g$x$8950$MT&Mo)
            (void))
          (list
            (g$library-id$8752$MT&Mo g$x$8950$MT&Mo)
            (g$library-name$8753$MT&Mo g$x$8950$MT&Mo)
            (g$library-version$8754$MT&Mo g$x$8950$MT&Mo)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$9012$MT&Mo
     g$build-global-define$9189$MT&Mo
     (case-lambda ((g$x$9160$MT&Mo) (g$build-void$9156$MT&Mo))))
   (g$build-lambda$9102$MT&Mo
     g$build-lambda$9190$MT&Mo
     (case-lambda
       ((g$ae$9161$MT&Mo g$vars$9162$MT&Mo g$exp$9163$MT&Mo)
        (list 'case-lambda (list g$vars$9162$MT&Mo g$exp$9163$MT&Mo)))))
   (g$build-case-lambda$9103$MT&Mo
     g$build-case-lambda$9191$MT&Mo
     (case-lambda
       ((g$ae$9164$MT&Mo g$vars*$9165$MT&Mo g$exp*$9166$MT&Mo)
        (cons
          'case-lambda
          (g$map$5753$MT&Mo
            list
            g$vars*$9165$MT&Mo
            g$exp*$9166$MT&Mo)))))
   (g$build-let$9104$MT&Mo
     g$build-let$9192$MT&Mo
     (case-lambda
       ((g$ae$9167$MT&Mo
          g$lhs*$9168$MT&Mo
          g$rhs*$9169$MT&Mo
          g$body$9170$MT&Mo)
        (cons
          (g$build-lambda$9102$MT&Mo
            g$ae$9167$MT&Mo
            g$lhs*$9168$MT&Mo
            g$body$9170$MT&Mo)
          g$rhs*$9169$MT&Mo))))
   (g$build-sequence$9155$MT&Mo
     g$build-sequence$9193$MT&Mo
     (case-lambda
       ((g$ae$9171$MT&Mo g$exps$9172$MT&Mo)
        ((letrec ((g$loop$9173$MT&Mo
                    (case-lambda
                      ((g$exps$9174$MT&Mo)
                       (if (null? (cdr g$exps$9174$MT&Mo))
                         (car g$exps$9174$MT&Mo)
                         (if (equal?
                               (car g$exps$9174$MT&Mo)
                               (g$build-void$9156$MT&Mo))
                           (g$loop$9173$MT&Mo (cdr g$exps$9174$MT&Mo))
                           (cons 'begin g$exps$9174$MT&Mo)))))))
           g$loop$9173$MT&Mo)
         g$exps$9172$MT&Mo))))
   (g$build-void$9156$MT&Mo
     g$build-void$9194$MT&Mo
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$9157$MT&Mo
     g$build-letrec$9195$MT&Mo
     (case-lambda
       ((g$ae$9175$MT&Mo
          g$vars$9176$MT&Mo
          g$val-exps$9177$MT&Mo
          g$body-exp$9178$MT&Mo)
        (if (null? g$vars$9176$MT&Mo)
          g$body-exp$9178$MT&Mo
          (list
            'letrec
            (g$map$5753$MT&Mo
              list
              g$vars$9176$MT&Mo
              g$val-exps$9177$MT&Mo)
            g$body-exp$9178$MT&Mo)))))
   (g$build-letrec*$9158$MT&Mo
     g$build-letrec*$9196$MT&Mo
     (case-lambda
       ((g$ae$9179$MT&Mo
          g$vars$9180$MT&Mo
          g$val-exps$9181$MT&Mo
          g$body-exp$9182$MT&Mo)
        (if (null? g$vars$9180$MT&Mo)
          g$body-exp$9182$MT&Mo
          (list
            'letrec*
            (g$map$5753$MT&Mo
              list
              g$vars$9180$MT&Mo
              g$val-exps$9181$MT&Mo)
            g$body-exp$9182$MT&Mo)))))
   (g$build-library-letrec*$9159$MT&Mo
     g$build-library-letrec*$9197$MT&Mo
     (case-lambda
       ((g$ae$9183$MT&Mo
          g$name$9184$MT&Mo
          g$vars$9185$MT&Mo
          g$locs$9186$MT&Mo
          g$val-exps$9187$MT&Mo
          g$body-exp$9188$MT&Mo)
        (list
          'library-letrec*
          g$name$9184$MT&Mo
          (g$map$5753$MT&Mo
            list
            g$vars$9185$MT&Mo
            g$locs$9186$MT&Mo
            g$val-exps$9187$MT&Mo)
          g$body-exp$9188$MT&Mo)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$9198$MT&Mo
     g$set-cons$13020$MT&Mo
     (case-lambda
       ((g$x$9758$MT&Mo g$ls$9759$MT&Mo)
        (if (g$memq$5745$MT&Mo g$x$9758$MT&Mo g$ls$9759$MT&Mo)
          g$ls$9759$MT&Mo
          (cons g$x$9758$MT&Mo g$ls$9759$MT&Mo)))))
   (g$set-union$9199$MT&Mo
     g$set-union$13021$MT&Mo
     (case-lambda
       ((g$ls1$9760$MT&Mo g$ls2$9761$MT&Mo)
        (if (null? g$ls1$9760$MT&Mo)
          g$ls2$9761$MT&Mo
          (if (g$memq$5745$MT&Mo
                (car g$ls1$9760$MT&Mo)
                g$ls2$9761$MT&Mo)
            (g$set-union$9199$MT&Mo
              (cdr g$ls1$9760$MT&Mo)
              g$ls2$9761$MT&Mo)
            (cons
              (car g$ls1$9760$MT&Mo)
              (g$set-union$9199$MT&Mo
                (cdr g$ls1$9760$MT&Mo)
                g$ls2$9761$MT&Mo)))))))
   (g$top-mark*$9201$MT&Mo g$top-mark*$13022$MT&Mo '(top))
   (g$top-marked?$9202$MT&Mo
     g$top-marked?$13023$MT&Mo
     (case-lambda
       ((g$m*$9762$MT&Mo) (g$memq$5745$MT&Mo 'top g$m*$9762$MT&Mo))))
   (g$gen-lexical$9203$MT&Mo
     g$gen-lexical$13024$MT&Mo
     (case-lambda
       ((g$sym$9763$MT&Mo)
        (if (g$symbol?$6402$MT&Mo g$sym$9763$MT&Mo)
          (gensym g$sym$9763$MT&Mo)
          (if (g$stx?$9240$MT&Mo g$sym$9763$MT&Mo)
            (g$gen-lexical$9203$MT&Mo
              (g$id->sym$9269$MT&Mo g$sym$9763$MT&Mo))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$9763$MT&Mo))))))
   (g$gen-global$9204$MT&Mo
     g$gen-global$13025$MT&Mo
     (case-lambda
       ((g$x$9764$MT&Mo) (g$gen-lexical$9203$MT&Mo g$x$9764$MT&Mo))))
   (g$gen-label$9205$MT&Mo
     g$gen-label$13026$MT&Mo
     (case-lambda ((g$_$9765$MT&Mo) (gensym))))
   (g$gen-top-level-label$9206$MT&Mo
     g$gen-top-level-label$13027$MT&Mo
     (case-lambda
       ((g$id$9766$MT&Mo g$rib$9767$MT&Mo)
        (letrec* ((g$find$9768$MT&Mo
                    (case-lambda
                      ((g$sym$9774$MT&Mo
                         g$mark*$9775$MT&Mo
                         g$sym*$9776$MT&Mo
                         g$mark**$9777$MT&Mo
                         g$label*$9778$MT&Mo)
                       (if (pair? g$sym*$9776$MT&Mo)
                         (begin
                           '#f
                           (if (if (eq? g$sym$9774$MT&Mo
                                        (car g$sym*$9776$MT&Mo))
                                 (begin
                                   '#f
                                   (g$same-marks?$9270$MT&Mo
                                     g$mark*$9775$MT&Mo
                                     (car g$mark**$9777$MT&Mo)))
                                 '#f)
                             (car g$label*$9778$MT&Mo)
                             (g$find$9768$MT&Mo
                               g$sym$9774$MT&Mo
                               g$mark*$9775$MT&Mo
                               (cdr g$sym*$9776$MT&Mo)
                               (cdr g$mark**$9777$MT&Mo)
                               (cdr g$label*$9778$MT&Mo))))
                         '#f)))))
          ((case-lambda
             ((g$sym$9769$MT&Mo g$mark*$9770$MT&Mo)
              ((case-lambda
                 ((g$sym*$9771$MT&Mo)
                  ((case-lambda
                     ((g$t$9772$MT&Mo)
                      (if g$t$9772$MT&Mo
                        ((case-lambda
                           ((g$label$9773$MT&Mo)
                            (if (g$imported-label->binding$9006$MT&Mo
                                  g$label$9773$MT&Mo)
                              (gensym)
                              g$label$9773$MT&Mo)))
                         g$t$9772$MT&Mo)
                        (gensym))))
                   (if (g$memq$5745$MT&Mo
                         g$sym$9769$MT&Mo
                         (g$rib-sym*$9216$MT&Mo g$rib$9767$MT&Mo))
                     (begin
                       '#f
                       (g$find$9768$MT&Mo
                         g$sym$9769$MT&Mo
                         g$mark*$9770$MT&Mo
                         g$sym*$9771$MT&Mo
                         (g$rib-mark**$9217$MT&Mo g$rib$9767$MT&Mo)
                         (g$rib-label*$9218$MT&Mo g$rib$9767$MT&Mo)))
                     '#f))))
               (g$rib-sym*$9216$MT&Mo g$rib$9767$MT&Mo))))
           (g$id->sym$9269$MT&Mo g$id$9766$MT&Mo)
           (g$stx-mark*$9243$MT&Mo g$id$9766$MT&Mo))))))
   (g$gen-define-label+loc$9207$MT&Mo
     g$gen-define-label+loc$13028$MT&Mo
     (case-lambda
       ((g$id$9779$MT&Mo g$rib$9780$MT&Mo g$sd?$9781$MT&Mo)
        (if g$sd?$9781$MT&Mo
          (values (gensym) (g$gen-lexical$9203$MT&Mo g$id$9779$MT&Mo))
          ((case-lambda
             ((g$env$9782$MT&Mo)
              ((case-lambda
                 ((g$label$9783$MT&Mo g$locs$9784$MT&Mo)
                  (values
                    g$label$9783$MT&Mo
                    ((case-lambda
                       ((g$t$9785$MT&Mo)
                        (if g$t$9785$MT&Mo
                          (cdr g$t$9785$MT&Mo)
                          ((case-lambda
                             ((g$loc$9786$MT&Mo)
                              (begin
                                (g$set-interaction-env-locs!$9720$MT&Mo
                                  g$env$9782$MT&Mo
                                  (cons
                                    (cons
                                      g$label$9783$MT&Mo
                                      g$loc$9786$MT&Mo)
                                    g$locs$9784$MT&Mo))
                                g$loc$9786$MT&Mo)))
                           (g$gen-lexical$9203$MT&Mo
                             g$id$9779$MT&Mo)))))
                     (g$assq$5741$MT&Mo
                       g$label$9783$MT&Mo
                       g$locs$9784$MT&Mo)))))
               (g$gen-top-level-label$9206$MT&Mo
                 g$id$9779$MT&Mo
                 g$rib$9780$MT&Mo)
               (g$interaction-env-locs$9717$MT&Mo g$env$9782$MT&Mo))))
           (g$top-level-context$9757$MT&Mo))))))
   (g$gen-define-label$9208$MT&Mo
     g$gen-define-label$13029$MT&Mo
     (case-lambda
       ((g$id$9787$MT&Mo g$rib$9788$MT&Mo g$sd?$9789$MT&Mo)
        (if g$sd?$9789$MT&Mo
          (gensym)
          (g$gen-top-level-label$9206$MT&Mo
            g$id$9787$MT&Mo
            g$rib$9788$MT&Mo)))))
   (g$7626$9209$MT&Mo
     g$7626$13030$MT&Mo
     (make-record-type-descriptor
       'rib
       '#f
       'g$7629$MT&Mo
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$7628$9210$MT&Mo g$7628$13031$MT&Mo '#f)
   (g$7627$9211$MT&Mo
     g$7627$13032$MT&Mo
     (make-record-constructor-descriptor
       g$7626$9209$MT&Mo
       '#f
       g$7628$9210$MT&Mo))
   (g$rib?$9214$MT&Mo
     g$rib?$13033$MT&Mo
     (record-predicate g$7626$9209$MT&Mo))
   (g$make-rib$9215$MT&Mo
     g$make-rib$13034$MT&Mo
     (record-constructor g$7627$9211$MT&Mo))
   (g$rib-sym*$9216$MT&Mo
     g$rib-sym*$13035$MT&Mo
     (record-accessor g$7626$9209$MT&Mo '0))
   (g$rib-mark**$9217$MT&Mo
     g$rib-mark**$13036$MT&Mo
     (record-accessor g$7626$9209$MT&Mo '1))
   (g$rib-label*$9218$MT&Mo
     g$rib-label*$13037$MT&Mo
     (record-accessor g$7626$9209$MT&Mo '2))
   (g$rib-sealed/freq$9219$MT&Mo
     g$rib-sealed/freq$13038$MT&Mo
     (record-accessor g$7626$9209$MT&Mo '3))
   (g$rib-cache$9220$MT&Mo
     g$rib-cache$13039$MT&Mo
     (record-accessor g$7626$9209$MT&Mo '4))
   (g$set-rib-sym*!$9221$MT&Mo
     g$set-rib-sym*!$13040$MT&Mo
     (record-mutator g$7626$9209$MT&Mo '0))
   (g$set-rib-mark**!$9222$MT&Mo
     g$set-rib-mark**!$13041$MT&Mo
     (record-mutator g$7626$9209$MT&Mo '1))
   (g$set-rib-label*!$9223$MT&Mo
     g$set-rib-label*!$13042$MT&Mo
     (record-mutator g$7626$9209$MT&Mo '2))
   (g$set-rib-sealed/freq!$9224$MT&Mo
     g$set-rib-sealed/freq!$13043$MT&Mo
     (record-mutator g$7626$9209$MT&Mo '3))
   (g$set-rib-cache!$9225$MT&Mo
     g$set-rib-cache!$13044$MT&Mo
     (record-mutator g$7626$9209$MT&Mo '4))
   (g$make-empty-rib$9226$MT&Mo
     g$make-empty-rib$13045$MT&Mo
     (case-lambda (() (g$make-rib$9215$MT&Mo '() '() '() '#f '#f))))
   (g$make-cache-rib$9227$MT&Mo
     g$make-cache-rib$13046$MT&Mo
     (case-lambda
       (()
        (g$make-rib$9215$MT&Mo
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$6501$MT&Mo)))))
   (g$find-label$9228$MT&Mo
     g$find-label$13047$MT&Mo
     (case-lambda
       ((g$rib$9790$MT&Mo g$sym$9791$MT&Mo g$mark*$9792$MT&Mo)
        ((case-lambda
           ((g$ht$9793$MT&Mo)
            (if g$ht$9793$MT&Mo
              (begin
                '#f
                ((case-lambda
                   ((g$cv$9794$MT&Mo)
                    ((case-lambda
                       ((g$t$9795$MT&Mo)
                        (if g$t$9795$MT&Mo (cdr g$t$9795$MT&Mo) '#f)))
                     (if g$cv$9794$MT&Mo
                       (begin
                         '#f
                         (g$assp$5744$MT&Mo
                           (case-lambda
                             ((g$m$9796$MT&Mo)
                              (g$same-marks?$9270$MT&Mo
                                g$mark*$9792$MT&Mo
                                g$m$9796$MT&Mo)))
                           g$cv$9794$MT&Mo))
                       '#f))))
                 (g$hashtable-ref$6504$MT&Mo
                   g$ht$9793$MT&Mo
                   g$sym$9791$MT&Mo
                   '#f)))
              '#f)))
         (g$rib-cache$9220$MT&Mo g$rib$9790$MT&Mo)))))
   (g$extend-rib!$9229$MT&Mo
     g$extend-rib!$13048$MT&Mo
     (case-lambda
       ((g$rib$9797$MT&Mo
          g$id$9798$MT&Mo
          g$label$9799$MT&Mo
          g$sd?$9800$MT&Mo)
        (letrec* ((g$find$9801$MT&Mo
                    (case-lambda
                      ((g$sym$9810$MT&Mo
                         g$mark*$9811$MT&Mo
                         g$sym*$9812$MT&Mo
                         g$mark**$9813$MT&Mo
                         g$label*$9814$MT&Mo)
                       (if (pair? g$sym*$9812$MT&Mo)
                         (begin
                           '#f
                           (if (if (eq? g$sym$9810$MT&Mo
                                        (car g$sym*$9812$MT&Mo))
                                 (begin
                                   '#f
                                   (g$same-marks?$9270$MT&Mo
                                     g$mark*$9811$MT&Mo
                                     (car g$mark**$9813$MT&Mo)))
                                 '#f)
                             g$label*$9814$MT&Mo
                             (g$find$9801$MT&Mo
                               g$sym$9810$MT&Mo
                               g$mark*$9811$MT&Mo
                               (cdr g$sym*$9812$MT&Mo)
                               (cdr g$mark**$9813$MT&Mo)
                               (cdr g$label*$9814$MT&Mo))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$9219$MT&Mo g$rib$9797$MT&Mo)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$9797$MT&Mo)
              (void))
            ((case-lambda
               ((g$sym$9802$MT&Mo g$mark*$9803$MT&Mo)
                ((case-lambda
                   ((g$sym*$9804$MT&Mo)
                    ((case-lambda
                       ((g$t$9805$MT&Mo)
                        (if g$t$9805$MT&Mo
                          ((case-lambda
                             ((g$p$9806$MT&Mo)
                              (if (not (eq? g$label$9799$MT&Mo
                                            g$p$9806$MT&Mo))
                                (g$syntax-violation$9749$MT&Mo
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$9798$MT&Mo)
                                (void))))
                           g$t$9805$MT&Mo)
                          ((case-lambda
                             ((g$t$9807$MT&Mo)
                              (if g$t$9807$MT&Mo
                                ((case-lambda
                                   ((g$p$9808$MT&Mo)
                                    (if (not (eq? g$label$9799$MT&Mo
                                                  (car g$p$9808$MT&Mo)))
                                      (if (not g$sd?$9800$MT&Mo)
                                        (set-car!
                                          g$p$9808$MT&Mo
                                          g$label$9799$MT&Mo)
                                        (g$syntax-violation$9749$MT&Mo
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$9798$MT&Mo))
                                      (void))))
                                 g$t$9807$MT&Mo)
                                (begin
                                  (if (g$rib-cache$9220$MT&Mo
                                        g$rib$9797$MT&Mo)
                                    (g$hashtable-update!$6508$MT&Mo
                                      (g$rib-cache$9220$MT&Mo
                                        g$rib$9797$MT&Mo)
                                      g$sym$9802$MT&Mo
                                      (case-lambda
                                        ((g$e$9809$MT&Mo)
                                         (cons
                                           (cons
                                             g$mark*$9803$MT&Mo
                                             g$label$9799$MT&Mo)
                                           g$e$9809$MT&Mo)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$9221$MT&Mo
                                    g$rib$9797$MT&Mo
                                    (cons
                                      g$sym$9802$MT&Mo
                                      g$sym*$9804$MT&Mo))
                                  (g$set-rib-mark**!$9222$MT&Mo
                                    g$rib$9797$MT&Mo
                                    (cons
                                      g$mark*$9803$MT&Mo
                                      (g$rib-mark**$9217$MT&Mo
                                        g$rib$9797$MT&Mo)))
                                  (g$set-rib-label*!$9223$MT&Mo
                                    g$rib$9797$MT&Mo
                                    (cons
                                      g$label$9799$MT&Mo
                                      (g$rib-label*$9218$MT&Mo
                                        g$rib$9797$MT&Mo)))))))
                           (if (g$memq$5745$MT&Mo
                                 g$sym$9802$MT&Mo
                                 (g$rib-sym*$9216$MT&Mo
                                   g$rib$9797$MT&Mo))
                             (begin
                               '#f
                               (g$find$9801$MT&Mo
                                 g$sym$9802$MT&Mo
                                 g$mark*$9803$MT&Mo
                                 g$sym*$9804$MT&Mo
                                 (g$rib-mark**$9217$MT&Mo
                                   g$rib$9797$MT&Mo)
                                 (g$rib-label*$9218$MT&Mo
                                   g$rib$9797$MT&Mo)))
                             '#f)))))
                     (g$find-label$9228$MT&Mo
                       g$rib$9797$MT&Mo
                       g$sym$9802$MT&Mo
                       g$mark*$9803$MT&Mo))))
                 (g$rib-sym*$9216$MT&Mo g$rib$9797$MT&Mo))))
             (g$id->sym$9269$MT&Mo g$id$9798$MT&Mo)
             (g$stx-mark*$9243$MT&Mo g$id$9798$MT&Mo)))))))
   (g$extend-rib/nc!$9230$MT&Mo
     g$extend-rib/nc!$13049$MT&Mo
     (case-lambda
       ((g$rib$9815$MT&Mo g$id$9816$MT&Mo g$label$9817$MT&Mo)
        ((case-lambda
           ((g$sym$9818$MT&Mo g$mark*$9819$MT&Mo)
            ((case-lambda
               ((g$sym*$9820$MT&Mo)
                (begin
                  (if (g$rib-cache$9220$MT&Mo g$rib$9815$MT&Mo)
                    (g$hashtable-update!$6508$MT&Mo
                      (g$rib-cache$9220$MT&Mo g$rib$9815$MT&Mo)
                      g$sym$9818$MT&Mo
                      (case-lambda
                        ((g$e$9821$MT&Mo)
                         (cons
                           (cons g$mark*$9819$MT&Mo g$label$9817$MT&Mo)
                           g$e$9821$MT&Mo)))
                      '())
                    (void))
                  (g$set-rib-sym*!$9221$MT&Mo
                    g$rib$9815$MT&Mo
                    (cons g$sym$9818$MT&Mo g$sym*$9820$MT&Mo))
                  (g$set-rib-mark**!$9222$MT&Mo
                    g$rib$9815$MT&Mo
                    (cons
                      g$mark*$9819$MT&Mo
                      (g$rib-mark**$9217$MT&Mo g$rib$9815$MT&Mo)))
                  (g$set-rib-label*!$9223$MT&Mo
                    g$rib$9815$MT&Mo
                    (cons
                      g$label$9817$MT&Mo
                      (g$rib-label*$9218$MT&Mo g$rib$9815$MT&Mo))))))
             (g$rib-sym*$9216$MT&Mo g$rib$9815$MT&Mo))))
         (g$id->sym$9269$MT&Mo g$id$9816$MT&Mo)
         (g$stx-mark*$9243$MT&Mo g$id$9816$MT&Mo)))))
   (g$make-rib-map$9231$MT&Mo
     g$make-rib-map$13050$MT&Mo
     (case-lambda
       ((g$sym*$9822$MT&Mo)
        ((case-lambda
           ((g$ht$9823$MT&Mo)
            ((letrec ((g$f$9824$MT&Mo
                        (case-lambda
                          ((g$i$9825$MT&Mo g$sym*$9826$MT&Mo)
                           (if (null? g$sym*$9826$MT&Mo)
                             g$ht$9823$MT&Mo
                             (begin
                               (g$hashtable-update!$6508$MT&Mo
                                 g$ht$9823$MT&Mo
                                 (car g$sym*$9826$MT&Mo)
                                 (case-lambda
                                   ((g$x$9827$MT&Mo)
                                    (cons
                                      g$i$9825$MT&Mo
                                      g$x$9827$MT&Mo)))
                                 '())
                               (g$f$9824$MT&Mo
                                 (+ g$i$9825$MT&Mo '1)
                                 (cdr g$sym*$9826$MT&Mo))))))))
               g$f$9824$MT&Mo)
             '0
             g$sym*$9822$MT&Mo)))
         (g$make-eq-hashtable$6501$MT&Mo)))))
   (g$seal-rib!$9232$MT&Mo
     g$seal-rib!$13051$MT&Mo
     (case-lambda
       ((g$rib$9828$MT&Mo)
        ((case-lambda
           ((g$sym*$9829$MT&Mo)
            (if (not (null? g$sym*$9829$MT&Mo))
              (begin
                (g$set-rib-sym*!$9221$MT&Mo
                  g$rib$9828$MT&Mo
                  (g$list->vector$6397$MT&Mo g$sym*$9829$MT&Mo))
                (g$set-rib-mark**!$9222$MT&Mo
                  g$rib$9828$MT&Mo
                  (g$list->vector$6397$MT&Mo
                    (g$rib-mark**$9217$MT&Mo g$rib$9828$MT&Mo)))
                (g$set-rib-label*!$9223$MT&Mo
                  g$rib$9828$MT&Mo
                  (g$list->vector$6397$MT&Mo
                    (g$rib-label*$9218$MT&Mo g$rib$9828$MT&Mo)))
                (g$set-rib-sealed/freq!$9224$MT&Mo
                  g$rib$9828$MT&Mo
                  (g$make-rib-map$9231$MT&Mo g$sym*$9829$MT&Mo)))
              (void))))
         (g$rib-sym*$9216$MT&Mo g$rib$9828$MT&Mo)))))
   (g$unseal-rib!$9233$MT&Mo
     g$unseal-rib!$13052$MT&Mo
     (case-lambda
       ((g$rib$9830$MT&Mo)
        (if (g$rib-sealed/freq$9219$MT&Mo g$rib$9830$MT&Mo)
          (begin
            (g$set-rib-sealed/freq!$9224$MT&Mo g$rib$9830$MT&Mo '#f)
            (g$set-rib-sym*!$9221$MT&Mo
              g$rib$9830$MT&Mo
              (vector->list (g$rib-sym*$9216$MT&Mo g$rib$9830$MT&Mo)))
            (g$set-rib-mark**!$9222$MT&Mo
              g$rib$9830$MT&Mo
              (vector->list (g$rib-mark**$9217$MT&Mo g$rib$9830$MT&Mo)))
            (g$set-rib-label*!$9223$MT&Mo
              g$rib$9830$MT&Mo
              (vector->list
                (g$rib-label*$9218$MT&Mo g$rib$9830$MT&Mo))))
          (void)))))
   (g$make-full-rib$9234$MT&Mo
     g$make-full-rib$13053$MT&Mo
     (case-lambda
       ((g$id*$9831$MT&Mo g$label*$9832$MT&Mo)
        ((case-lambda
           ((g$r$9833$MT&Mo)
            (begin
              (g$seal-rib!$9232$MT&Mo g$r$9833$MT&Mo)
              g$r$9833$MT&Mo)))
         (g$make-rib$9215$MT&Mo
           (g$map$5753$MT&Mo g$id->sym$9269$MT&Mo g$id*$9831$MT&Mo)
           (g$map$5753$MT&Mo g$stx-mark*$9243$MT&Mo g$id*$9831$MT&Mo)
           g$label*$9832$MT&Mo
           '#f
           '#f)))))
   (g$7655$9235$MT&Mo
     g$7655$13054$MT&Mo
     (make-record-type-descriptor
       'stx
       '#f
       'g$7658$MT&Mo
       '#t
       '#t
       '#((mutable expr)
          (mutable mark*)
          (mutable subst*)
          (mutable ae*))))
   (g$7657$9236$MT&Mo g$7657$13055$MT&Mo '#f)
   (g$7656$9237$MT&Mo
     g$7656$13056$MT&Mo
     (make-record-constructor-descriptor
       g$7655$9235$MT&Mo
       '#f
       g$7657$9236$MT&Mo))
   (g$stx?$9240$MT&Mo
     g$stx?$13057$MT&Mo
     (record-predicate g$7655$9235$MT&Mo))
   (g$make-stx$9241$MT&Mo
     g$make-stx$13058$MT&Mo
     (record-constructor g$7656$9237$MT&Mo))
   (g$stx-expr$9242$MT&Mo
     g$stx-expr$13059$MT&Mo
     (record-accessor g$7655$9235$MT&Mo '0))
   (g$stx-mark*$9243$MT&Mo
     g$stx-mark*$13060$MT&Mo
     (record-accessor g$7655$9235$MT&Mo '1))
   (g$stx-subst*$9244$MT&Mo
     g$stx-subst*$13061$MT&Mo
     (record-accessor g$7655$9235$MT&Mo '2))
   (g$stx-ae*$9245$MT&Mo
     g$stx-ae*$13062$MT&Mo
     (record-accessor g$7655$9235$MT&Mo '3))
   (g$set-stx-expr!$9246$MT&Mo
     g$set-stx-expr!$13063$MT&Mo
     (record-mutator g$7655$9235$MT&Mo '0))
   (g$set-stx-mark*!$9247$MT&Mo
     g$set-stx-mark*!$13064$MT&Mo
     (record-mutator g$7655$9235$MT&Mo '1))
   (g$set-stx-subst*!$9248$MT&Mo
     g$set-stx-subst*!$13065$MT&Mo
     (record-mutator g$7655$9235$MT&Mo '2))
   (g$set-stx-ae*!$9249$MT&Mo
     g$set-stx-ae*!$13066$MT&Mo
     (record-mutator g$7655$9235$MT&Mo '3))
   (g$rp$9250$MT&Mo
     g$rp$13067$MT&Mo
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$9834$MT&Mo g$p$9835$MT&Mo g$wr$9836$MT&Mo)
          (begin
            (display '"#<syntax " g$p$9835$MT&Mo)
            (write
              (g$stx->datum$9279$MT&Mo g$x$9834$MT&Mo)
              g$p$9835$MT&Mo)
            ((case-lambda
               ((g$expr$9837$MT&Mo)
                (if (annotation? g$expr$9837$MT&Mo)
                  ((case-lambda
                     ((g$src$9838$MT&Mo)
                      (if (pair? g$src$9838$MT&Mo)
                        (begin
                          (display '" (" g$p$9835$MT&Mo)
                          (display
                            (cdr g$src$9838$MT&Mo)
                            g$p$9835$MT&Mo)
                          (display '" of " g$p$9835$MT&Mo)
                          (display
                            (car g$src$9838$MT&Mo)
                            g$p$9835$MT&Mo)
                          (display '")" g$p$9835$MT&Mo))
                        (void))))
                   (annotation-source g$expr$9837$MT&Mo))
                  (void))))
             (g$stx-expr$9242$MT&Mo g$x$9834$MT&Mo))
            (display '">" g$p$9835$MT&Mo))))))
   (g$datum->stx$9251$MT&Mo
     g$datum->stx$13068$MT&Mo
     (case-lambda
       ((g$id$9839$MT&Mo g$datum$9840$MT&Mo)
        (g$make-stx$9241$MT&Mo
          g$datum$9840$MT&Mo
          (g$stx-mark*$9243$MT&Mo g$id$9839$MT&Mo)
          (g$stx-subst*$9244$MT&Mo g$id$9839$MT&Mo)
          (g$stx-ae*$9245$MT&Mo g$id$9839$MT&Mo)))))
   (g$gen-mark$9252$MT&Mo
     g$gen-mark$13069$MT&Mo
     (case-lambda (() (string '#\m))))
   (g$anti-mark$9253$MT&Mo g$anti-mark$13070$MT&Mo '#f)
   (g$anti-mark?$9254$MT&Mo g$anti-mark?$13071$MT&Mo not)
   (g$join-wraps$9255$MT&Mo
     g$join-wraps$13072$MT&Mo
     (case-lambda
       ((g$m1*$9841$MT&Mo
          g$s1*$9842$MT&Mo
          g$ae1*$9843$MT&Mo
          g$e$9844$MT&Mo)
        (letrec* ((g$cancel$9845$MT&Mo
                    (case-lambda
                      ((g$ls1$9849$MT&Mo g$ls2$9850$MT&Mo)
                       ((letrec ((g$f$9851$MT&Mo
                                   (case-lambda
                                     ((g$x$9852$MT&Mo g$ls1$9853$MT&Mo)
                                      (if (null? g$ls1$9853$MT&Mo)
                                        (cdr g$ls2$9850$MT&Mo)
                                        (cons
                                          g$x$9852$MT&Mo
                                          (g$f$9851$MT&Mo
                                            (car g$ls1$9853$MT&Mo)
                                            (cdr g$ls1$9853$MT&Mo))))))))
                          g$f$9851$MT&Mo)
                        (car g$ls1$9849$MT&Mo)
                        (cdr g$ls1$9849$MT&Mo))))))
          ((case-lambda
             ((g$m2*$9846$MT&Mo g$s2*$9847$MT&Mo g$ae2*$9848$MT&Mo)
              (if (if (not (null? g$m1*$9841$MT&Mo))
                    (if (not (null? g$m2*$9846$MT&Mo))
                      (begin
                        '#f
                        (g$anti-mark?$9254$MT&Mo
                          (car g$m2*$9846$MT&Mo)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$9845$MT&Mo
                    g$m1*$9841$MT&Mo
                    g$m2*$9846$MT&Mo)
                  (g$cancel$9845$MT&Mo
                    g$s1*$9842$MT&Mo
                    g$s2*$9847$MT&Mo)
                  (g$cancel$9845$MT&Mo
                    g$ae1*$9843$MT&Mo
                    g$ae2*$9848$MT&Mo))
                (values
                  (append g$m1*$9841$MT&Mo g$m2*$9846$MT&Mo)
                  (append g$s1*$9842$MT&Mo g$s2*$9847$MT&Mo)
                  (append g$ae1*$9843$MT&Mo g$ae2*$9848$MT&Mo)))))
           (g$stx-mark*$9243$MT&Mo g$e$9844$MT&Mo)
           (g$stx-subst*$9244$MT&Mo g$e$9844$MT&Mo)
           (g$stx-ae*$9245$MT&Mo g$e$9844$MT&Mo))))))
   (g$mkstx$9256$MT&Mo
     g$mkstx$13073$MT&Mo
     (case-lambda
       ((g$e$9854$MT&Mo
          g$m*$9855$MT&Mo
          g$s*$9856$MT&Mo
          g$ae*$9857$MT&Mo)
        (if (if (g$stx?$9240$MT&Mo g$e$9854$MT&Mo)
              (begin
                '#f
                (not (g$top-marked?$9202$MT&Mo g$m*$9855$MT&Mo)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$9255$MT&Mo
                 g$m*$9855$MT&Mo
                 g$s*$9856$MT&Mo
                 g$ae*$9857$MT&Mo
                 g$e$9854$MT&Mo)))
            (case-lambda
              ((g$m*$9861$MT&Mo g$s*$9862$MT&Mo g$ae*$9863$MT&Mo)
               ((case-lambda
                  ((g$ae*$9864$MT&Mo g$s*$9865$MT&Mo g$m*$9866$MT&Mo)
                   (g$make-stx$9241$MT&Mo
                     (g$stx-expr$9242$MT&Mo g$e$9854$MT&Mo)
                     g$m*$9866$MT&Mo
                     g$s*$9865$MT&Mo
                     g$ae*$9864$MT&Mo)))
                g$ae*$9863$MT&Mo
                g$s*$9862$MT&Mo
                g$m*$9861$MT&Mo))))
          (g$make-stx$9241$MT&Mo
            g$e$9854$MT&Mo
            g$m*$9855$MT&Mo
            g$s*$9856$MT&Mo
            g$ae*$9857$MT&Mo)))))
   (g$add-mark$9257$MT&Mo
     g$add-mark$13074$MT&Mo
     (case-lambda
       ((g$m$9867$MT&Mo g$e$9868$MT&Mo g$ae$9869$MT&Mo)
        (g$mkstx$9256$MT&Mo
          g$e$9868$MT&Mo
          (list g$m$9867$MT&Mo)
          '(shift)
          (list g$ae$9869$MT&Mo)))))
   (g$add-subst$9258$MT&Mo
     g$add-subst$13075$MT&Mo
     (case-lambda
       ((g$subst$9870$MT&Mo g$e$9871$MT&Mo)
        (g$mkstx$9256$MT&Mo
          g$e$9871$MT&Mo
          '()
          (list g$subst$9870$MT&Mo)
          '()))))
   (g$syntax-kind?$9259$MT&Mo
     g$syntax-kind?$13076$MT&Mo
     (case-lambda
       ((g$x$9872$MT&Mo g$p?$9873$MT&Mo)
        (if (g$stx?$9240$MT&Mo g$x$9872$MT&Mo)
          (g$syntax-kind?$9259$MT&Mo
            (g$stx-expr$9242$MT&Mo g$x$9872$MT&Mo)
            g$p?$9873$MT&Mo)
          (if (annotation? g$x$9872$MT&Mo)
            (g$syntax-kind?$9259$MT&Mo
              (annotation-expression g$x$9872$MT&Mo)
              g$p?$9873$MT&Mo)
            (g$p?$9873$MT&Mo g$x$9872$MT&Mo))))))
   (g$syntax-vector->list$9260$MT&Mo
     g$syntax-vector->list$13077$MT&Mo
     (case-lambda
       ((g$x$9874$MT&Mo)
        (if (g$stx?$9240$MT&Mo g$x$9874$MT&Mo)
          ((case-lambda
             ((g$ls$9875$MT&Mo
                g$m*$9876$MT&Mo
                g$s*$9877$MT&Mo
                g$ae*$9878$MT&Mo)
              (g$map$5753$MT&Mo
                (case-lambda
                  ((g$x$9879$MT&Mo)
                   (g$mkstx$9256$MT&Mo
                     g$x$9879$MT&Mo
                     g$m*$9876$MT&Mo
                     g$s*$9877$MT&Mo
                     g$ae*$9878$MT&Mo)))
                g$ls$9875$MT&Mo)))
           (g$syntax-vector->list$9260$MT&Mo
             (g$stx-expr$9242$MT&Mo g$x$9874$MT&Mo))
           (g$stx-mark*$9243$MT&Mo g$x$9874$MT&Mo)
           (g$stx-subst*$9244$MT&Mo g$x$9874$MT&Mo)
           (g$stx-ae*$9245$MT&Mo g$x$9874$MT&Mo))
          (if (annotation? g$x$9874$MT&Mo)
            (g$syntax-vector->list$9260$MT&Mo
              (annotation-expression g$x$9874$MT&Mo))
            (if (g$vector?$6400$MT&Mo g$x$9874$MT&Mo)
              (vector->list g$x$9874$MT&Mo)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$9874$MT&Mo)))))))
   (g$syntax-pair?$9261$MT&Mo
     g$syntax-pair?$13078$MT&Mo
     (case-lambda
       ((g$x$9880$MT&Mo)
        (g$syntax-kind?$9259$MT&Mo g$x$9880$MT&Mo pair?))))
   (g$syntax-vector?$9262$MT&Mo
     g$syntax-vector?$13079$MT&Mo
     (case-lambda
       ((g$x$9881$MT&Mo)
        (g$syntax-kind?$9259$MT&Mo
          g$x$9881$MT&Mo
          g$vector?$6400$MT&Mo))))
   (g$syntax-null?$9263$MT&Mo
     g$syntax-null?$13080$MT&Mo
     (case-lambda
       ((g$x$9882$MT&Mo)
        (g$syntax-kind?$9259$MT&Mo g$x$9882$MT&Mo null?))))
   (g$syntax-list?$9264$MT&Mo
     g$syntax-list?$13081$MT&Mo
     (case-lambda
       ((g$x$9883$MT&Mo)
        ((case-lambda
           ((g$t$9884$MT&Mo)
            (if g$t$9884$MT&Mo
              g$t$9884$MT&Mo
              (begin
                '#f
                (if (g$syntax-pair?$9261$MT&Mo g$x$9883$MT&Mo)
                  (begin
                    '#f
                    (g$syntax-list?$9264$MT&Mo
                      (g$syntax-cdr$9266$MT&Mo g$x$9883$MT&Mo)))
                  '#f)))))
         (g$syntax-null?$9263$MT&Mo g$x$9883$MT&Mo)))))
   (g$syntax-car$9265$MT&Mo
     g$syntax-car$13082$MT&Mo
     (case-lambda
       ((g$x$9885$MT&Mo)
        (if (g$stx?$9240$MT&Mo g$x$9885$MT&Mo)
          (g$mkstx$9256$MT&Mo
            (g$syntax-car$9265$MT&Mo
              (g$stx-expr$9242$MT&Mo g$x$9885$MT&Mo))
            (g$stx-mark*$9243$MT&Mo g$x$9885$MT&Mo)
            (g$stx-subst*$9244$MT&Mo g$x$9885$MT&Mo)
            (g$stx-ae*$9245$MT&Mo g$x$9885$MT&Mo))
          (if (annotation? g$x$9885$MT&Mo)
            (g$syntax-car$9265$MT&Mo
              (annotation-expression g$x$9885$MT&Mo))
            (if (pair? g$x$9885$MT&Mo)
              (car g$x$9885$MT&Mo)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$9885$MT&Mo)))))))
   (g$syntax-cdr$9266$MT&Mo
     g$syntax-cdr$13083$MT&Mo
     (case-lambda
       ((g$x$9886$MT&Mo)
        (if (g$stx?$9240$MT&Mo g$x$9886$MT&Mo)
          (g$mkstx$9256$MT&Mo
            (g$syntax-cdr$9266$MT&Mo
              (g$stx-expr$9242$MT&Mo g$x$9886$MT&Mo))
            (g$stx-mark*$9243$MT&Mo g$x$9886$MT&Mo)
            (g$stx-subst*$9244$MT&Mo g$x$9886$MT&Mo)
            (g$stx-ae*$9245$MT&Mo g$x$9886$MT&Mo))
          (if (annotation? g$x$9886$MT&Mo)
            (g$syntax-cdr$9266$MT&Mo
              (annotation-expression g$x$9886$MT&Mo))
            (if (pair? g$x$9886$MT&Mo)
              (cdr g$x$9886$MT&Mo)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$9886$MT&Mo)))))))
   (g$syntax->list$9267$MT&Mo
     g$syntax->list$13084$MT&Mo
     (case-lambda
       ((g$x$9887$MT&Mo)
        (if (g$syntax-pair?$9261$MT&Mo g$x$9887$MT&Mo)
          (cons
            (g$syntax-car$9265$MT&Mo g$x$9887$MT&Mo)
            (g$syntax->list$9267$MT&Mo
              (g$syntax-cdr$9266$MT&Mo g$x$9887$MT&Mo)))
          (if (g$syntax-null?$9263$MT&Mo g$x$9887$MT&Mo)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$9887$MT&Mo))))))
   (g$id?$9268$MT&Mo
     g$id?$13085$MT&Mo
     (case-lambda
       ((g$x$9888$MT&Mo)
        (if (g$stx?$9240$MT&Mo g$x$9888$MT&Mo)
          (begin
            '#f
            ((case-lambda
               ((g$expr$9889$MT&Mo)
                (g$symbol?$6402$MT&Mo
                  (if (annotation? g$expr$9889$MT&Mo)
                    (annotation-stripped g$expr$9889$MT&Mo)
                    g$expr$9889$MT&Mo))))
             (g$stx-expr$9242$MT&Mo g$x$9888$MT&Mo)))
          '#f))))
   (g$id->sym$9269$MT&Mo
     g$id->sym$13086$MT&Mo
     (case-lambda
       ((g$x$9890$MT&Mo)
        (begin
          (if (not (g$stx?$9240$MT&Mo g$x$9890$MT&Mo))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$9890$MT&Mo)
            (void))
          ((case-lambda
             ((g$expr$9891$MT&Mo)
              ((case-lambda
                 ((g$sym$9892$MT&Mo)
                  (if (g$symbol?$6402$MT&Mo g$sym$9892$MT&Mo)
                    g$sym$9892$MT&Mo
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$9890$MT&Mo))))
               (if (annotation? g$expr$9891$MT&Mo)
                 (annotation-stripped g$expr$9891$MT&Mo)
                 g$expr$9891$MT&Mo))))
           (g$stx-expr$9242$MT&Mo g$x$9890$MT&Mo))))))
   (g$same-marks?$9270$MT&Mo
     g$same-marks?$13087$MT&Mo
     (case-lambda
       ((g$x$9893$MT&Mo g$y$9894$MT&Mo)
        ((case-lambda
           ((g$t$9895$MT&Mo)
            (if g$t$9895$MT&Mo
              g$t$9895$MT&Mo
              (begin
                '#f
                (if (pair? g$x$9893$MT&Mo)
                  (if (pair? g$y$9894$MT&Mo)
                    (if (eq? (car g$x$9893$MT&Mo) (car g$y$9894$MT&Mo))
                      (begin
                        '#f
                        (g$same-marks?$9270$MT&Mo
                          (cdr g$x$9893$MT&Mo)
                          (cdr g$y$9894$MT&Mo)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$9893$MT&Mo)
           (begin '#f (null? g$y$9894$MT&Mo))
           '#f)))))
   (g$bound-id=?$9271$MT&Mo
     g$bound-id=?$13088$MT&Mo
     (case-lambda
       ((g$x$9896$MT&Mo g$y$9897$MT&Mo)
        (if (eq? (g$id->sym$9269$MT&Mo g$x$9896$MT&Mo)
                 (g$id->sym$9269$MT&Mo g$y$9897$MT&Mo))
          (begin
            '#f
            (g$same-marks?$9270$MT&Mo
              (g$stx-mark*$9243$MT&Mo g$x$9896$MT&Mo)
              (g$stx-mark*$9243$MT&Mo g$y$9897$MT&Mo)))
          '#f))))
   (g$free-id=?$9272$MT&Mo
     g$free-id=?$13089$MT&Mo
     (case-lambda
       ((g$i$9898$MT&Mo g$j$9899$MT&Mo)
        ((case-lambda
           ((g$t0$9900$MT&Mo g$t1$9901$MT&Mo)
            (if ((case-lambda
                   ((g$t$9902$MT&Mo)
                    (if g$t$9902$MT&Mo
                      g$t$9902$MT&Mo
                      (begin '#f g$t1$9901$MT&Mo))))
                 g$t0$9900$MT&Mo)
              (eq? g$t0$9900$MT&Mo g$t1$9901$MT&Mo)
              (eq? (g$id->sym$9269$MT&Mo g$i$9898$MT&Mo)
                   (g$id->sym$9269$MT&Mo g$j$9899$MT&Mo)))))
         (g$id->real-label$9282$MT&Mo g$i$9898$MT&Mo)
         (g$id->real-label$9282$MT&Mo g$j$9899$MT&Mo)))))
   (g$valid-bound-ids?$9273$MT&Mo
     g$valid-bound-ids?$13090$MT&Mo
     (case-lambda
       ((g$id*$9903$MT&Mo)
        (if (g$for-all$5751$MT&Mo g$id?$9268$MT&Mo g$id*$9903$MT&Mo)
          (begin
            '#f
            (g$distinct-bound-ids?$9274$MT&Mo g$id*$9903$MT&Mo))
          '#f))))
   (g$distinct-bound-ids?$9274$MT&Mo
     g$distinct-bound-ids?$13091$MT&Mo
     (case-lambda
       ((g$id*$9904$MT&Mo)
        ((case-lambda
           ((g$t$9905$MT&Mo)
            (if g$t$9905$MT&Mo
              g$t$9905$MT&Mo
              (begin
                '#f
                (if (not (g$bound-id-member?$9275$MT&Mo
                           (car g$id*$9904$MT&Mo)
                           (cdr g$id*$9904$MT&Mo)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$9274$MT&Mo
                      (cdr g$id*$9904$MT&Mo)))
                  '#f)))))
         (null? g$id*$9904$MT&Mo)))))
   (g$bound-id-member?$9275$MT&Mo
     g$bound-id-member?$13092$MT&Mo
     (case-lambda
       ((g$id$9906$MT&Mo g$id*$9907$MT&Mo)
        (if (pair? g$id*$9907$MT&Mo)
          (begin
            '#f
            ((case-lambda
               ((g$t$9908$MT&Mo)
                (if g$t$9908$MT&Mo
                  g$t$9908$MT&Mo
                  (begin
                    '#f
                    (g$bound-id-member?$9275$MT&Mo
                      g$id$9906$MT&Mo
                      (cdr g$id*$9907$MT&Mo))))))
             (g$bound-id=?$9271$MT&Mo
               g$id$9906$MT&Mo
               (car g$id*$9907$MT&Mo))))
          '#f))))
   (g$self-evaluating?$9276$MT&Mo
     g$self-evaluating?$13093$MT&Mo
     (case-lambda
       ((g$x$9909$MT&Mo)
        ((case-lambda
           ((g$t$9910$MT&Mo)
            (if g$t$9910$MT&Mo
              g$t$9910$MT&Mo
              ((case-lambda
                 ((g$t$9911$MT&Mo)
                  (if g$t$9911$MT&Mo
                    g$t$9911$MT&Mo
                    ((case-lambda
                       ((g$t$9912$MT&Mo)
                        (if g$t$9912$MT&Mo
                          g$t$9912$MT&Mo
                          ((case-lambda
                             ((g$t$9913$MT&Mo)
                              (if g$t$9913$MT&Mo
                                g$t$9913$MT&Mo
                                (begin
                                  '#f
                                  (g$bytevector?$6401$MT&Mo
                                    g$x$9909$MT&Mo)))))
                           (g$boolean?$6403$MT&Mo g$x$9909$MT&Mo)))))
                     (g$char?$6399$MT&Mo g$x$9909$MT&Mo)))))
               (string? g$x$9909$MT&Mo)))))
         (number? g$x$9909$MT&Mo)))))
   (g$strip-annotations$9277$MT&Mo
     g$strip-annotations$13094$MT&Mo
     (case-lambda
       ((g$x$9914$MT&Mo)
        (if (pair? g$x$9914$MT&Mo)
          (cons
            (g$strip-annotations$9277$MT&Mo (car g$x$9914$MT&Mo))
            (g$strip-annotations$9277$MT&Mo (cdr g$x$9914$MT&Mo)))
          (if (g$vector?$6400$MT&Mo g$x$9914$MT&Mo)
            (g$vector-map$6462$MT&Mo
              g$strip-annotations$9277$MT&Mo
              g$x$9914$MT&Mo)
            (if (annotation? g$x$9914$MT&Mo)
              (annotation-stripped g$x$9914$MT&Mo)
              g$x$9914$MT&Mo))))))
   (g$strip$9278$MT&Mo
     g$strip$13095$MT&Mo
     (case-lambda
       ((g$x$9915$MT&Mo g$m*$9916$MT&Mo)
        (if (g$top-marked?$9202$MT&Mo g$m*$9916$MT&Mo)
          (if ((case-lambda
                 ((g$t$9917$MT&Mo)
                  (if g$t$9917$MT&Mo
                    g$t$9917$MT&Mo
                    ((case-lambda
                       ((g$t$9918$MT&Mo)
                        (if g$t$9918$MT&Mo
                          g$t$9918$MT&Mo
                          (begin
                            '#f
                            (if (g$vector?$6400$MT&Mo g$x$9915$MT&Mo)
                              (if (> (vector-length g$x$9915$MT&Mo) '0)
                                (begin
                                  '#f
                                  (annotation?
                                    (vector-ref g$x$9915$MT&Mo '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$9915$MT&Mo)
                       (begin '#f (annotation? (car g$x$9915$MT&Mo)))
                       '#f)))))
               (annotation? g$x$9915$MT&Mo))
            (g$strip-annotations$9277$MT&Mo g$x$9915$MT&Mo)
            g$x$9915$MT&Mo)
          ((letrec ((g$f$9919$MT&Mo
                      (case-lambda
                        ((g$x$9920$MT&Mo)
                         (if (g$stx?$9240$MT&Mo g$x$9920$MT&Mo)
                           (g$strip$9278$MT&Mo
                             (g$stx-expr$9242$MT&Mo g$x$9920$MT&Mo)
                             (g$stx-mark*$9243$MT&Mo g$x$9920$MT&Mo))
                           (if (annotation? g$x$9920$MT&Mo)
                             (annotation-stripped g$x$9920$MT&Mo)
                             (if (pair? g$x$9920$MT&Mo)
                               ((case-lambda
                                  ((g$a$9921$MT&Mo g$d$9922$MT&Mo)
                                   (if (if (eq? g$a$9921$MT&Mo
                                                (car g$x$9920$MT&Mo))
                                         (begin
                                           '#f
                                           (eq? g$d$9922$MT&Mo
                                                (cdr g$x$9920$MT&Mo)))
                                         '#f)
                                     g$x$9920$MT&Mo
                                     (cons
                                       g$a$9921$MT&Mo
                                       g$d$9922$MT&Mo))))
                                (g$f$9919$MT&Mo (car g$x$9920$MT&Mo))
                                (g$f$9919$MT&Mo (cdr g$x$9920$MT&Mo)))
                               (if (g$vector?$6400$MT&Mo g$x$9920$MT&Mo)
                                 ((case-lambda
                                    ((g$old$9923$MT&Mo)
                                     ((case-lambda
                                        ((g$new$9924$MT&Mo)
                                         (if (g$for-all$5751$MT&Mo
                                               eq?
                                               g$old$9923$MT&Mo
                                               g$new$9924$MT&Mo)
                                           g$x$9920$MT&Mo
                                           (g$list->vector$6397$MT&Mo
                                             g$new$9924$MT&Mo))))
                                      (g$map$5753$MT&Mo
                                        g$f$9919$MT&Mo
                                        g$old$9923$MT&Mo))))
                                  (vector->list g$x$9920$MT&Mo))
                                 g$x$9920$MT&Mo))))))))
             g$f$9919$MT&Mo)
           g$x$9915$MT&Mo)))))
   (g$stx->datum$9279$MT&Mo
     g$stx->datum$13096$MT&Mo
     (case-lambda
       ((g$x$9925$MT&Mo) (g$strip$9278$MT&Mo g$x$9925$MT&Mo '()))))
   (g$same-marks*?$9280$MT&Mo
     g$same-marks*?$13097$MT&Mo
     (case-lambda
       ((g$mark*$9926$MT&Mo g$mark**$9927$MT&Mo g$si$9928$MT&Mo)
        (if (null? g$si$9928$MT&Mo)
          '#f
          (if (g$same-marks?$9270$MT&Mo
                g$mark*$9926$MT&Mo
                (vector-ref g$mark**$9927$MT&Mo (car g$si$9928$MT&Mo)))
            (car g$si$9928$MT&Mo)
            (g$same-marks*?$9280$MT&Mo
              g$mark*$9926$MT&Mo
              g$mark**$9927$MT&Mo
              (cdr g$si$9928$MT&Mo)))))))
   (g$id->label$9281$MT&Mo
     g$id->label$13098$MT&Mo
     (case-lambda
       ((g$id$9929$MT&Mo)
        ((case-lambda
           ((g$t$9930$MT&Mo)
            (if g$t$9930$MT&Mo
              g$t$9930$MT&Mo
              (begin
                '#f
                ((case-lambda
                   ((g$t$9931$MT&Mo)
                    (if g$t$9931$MT&Mo
                      ((case-lambda
                         ((g$env$9932$MT&Mo)
                          ((case-lambda
                             ((g$rib$9933$MT&Mo)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$9207$MT&Mo
                                     g$id$9929$MT&Mo
                                     g$rib$9933$MT&Mo
                                     '#f)))
                                (case-lambda
                                  ((g$lab$9936$MT&Mo g$_loc$9937$MT&Mo)
                                   ((case-lambda
                                      ((g$_loc$9938$MT&Mo
                                         g$lab$9939$MT&Mo)
                                       (begin
                                         (g$extend-rib!$9229$MT&Mo
                                           g$rib$9933$MT&Mo
                                           g$id$9929$MT&Mo
                                           g$lab$9939$MT&Mo
                                           '#t)
                                         g$lab$9939$MT&Mo)))
                                    g$_loc$9937$MT&Mo
                                    g$lab$9936$MT&Mo))))))
                           (g$interaction-env-rib$9715$MT&Mo
                             g$env$9932$MT&Mo))))
                       g$t$9931$MT&Mo)
                      '#f)))
                 (g$top-level-context$9757$MT&Mo))))))
         (g$id->real-label$9282$MT&Mo g$id$9929$MT&Mo)))))
   (g$id->real-label$9282$MT&Mo
     g$id->real-label$13099$MT&Mo
     (case-lambda
       ((g$id$9940$MT&Mo)
        ((case-lambda
           ((g$sym$9941$MT&Mo)
            ((letrec ((g$search$9942$MT&Mo
                        (case-lambda
                          ((g$subst*$9943$MT&Mo g$mark*$9944$MT&Mo)
                           (if (null? g$subst*$9943$MT&Mo)
                             '#f
                             (if (eq? (car g$subst*$9943$MT&Mo) 'shift)
                               (g$search$9942$MT&Mo
                                 (cdr g$subst*$9943$MT&Mo)
                                 (cdr g$mark*$9944$MT&Mo))
                               ((case-lambda
                                  ((g$rib$9945$MT&Mo)
                                   ((case-lambda
                                      ((g$t$9946$MT&Mo)
                                       (if g$t$9946$MT&Mo
                                         ((case-lambda
                                            ((g$ht$9947$MT&Mo)
                                             ((case-lambda
                                                ((g$si$9948$MT&Mo)
                                                 ((case-lambda
                                                    ((g$i$9949$MT&Mo)
                                                     (if g$i$9949$MT&Mo
                                                       (vector-ref
                                                         (g$rib-label*$9218$MT&Mo
                                                           g$rib$9945$MT&Mo)
                                                         g$i$9949$MT&Mo)
                                                       (g$search$9942$MT&Mo
                                                         (cdr g$subst*$9943$MT&Mo)
                                                         g$mark*$9944$MT&Mo))))
                                                  (if g$si$9948$MT&Mo
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$9280$MT&Mo
                                                        g$mark*$9944$MT&Mo
                                                        (g$rib-mark**$9217$MT&Mo
                                                          g$rib$9945$MT&Mo)
                                                        (g$reverse$6409$MT&Mo
                                                          g$si$9948$MT&Mo)))
                                                    '#f))))
                                              (g$hashtable-ref$6504$MT&Mo
                                                g$ht$9947$MT&Mo
                                                g$sym$9941$MT&Mo
                                                '#f))))
                                          g$t$9946$MT&Mo)
                                         ((case-lambda
                                            ((g$t$9950$MT&Mo)
                                             (if g$t$9950$MT&Mo
                                               g$t$9950$MT&Mo
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$9951$MT&Mo
                                                             (case-lambda
                                                               ((g$sym*$9952$MT&Mo
                                                                  g$mark**$9953$MT&Mo
                                                                  g$label*$9954$MT&Mo)
                                                                (if (null?
                                                                      g$sym*$9952$MT&Mo)
                                                                  (g$search$9942$MT&Mo
                                                                    (cdr g$subst*$9943$MT&Mo)
                                                                    g$mark*$9944$MT&Mo)
                                                                  (if (if (eq? (car g$sym*$9952$MT&Mo)
                                                                               g$sym$9941$MT&Mo)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$9270$MT&Mo
                                                                            (car g$mark**$9953$MT&Mo)
                                                                            g$mark*$9944$MT&Mo))
                                                                        '#f)
                                                                    (car g$label*$9954$MT&Mo)
                                                                    (g$f$9951$MT&Mo
                                                                      (cdr g$sym*$9952$MT&Mo)
                                                                      (cdr g$mark**$9953$MT&Mo)
                                                                      (cdr g$label*$9954$MT&Mo))))))))
                                                    g$f$9951$MT&Mo)
                                                  (g$rib-sym*$9216$MT&Mo
                                                    g$rib$9945$MT&Mo)
                                                  (g$rib-mark**$9217$MT&Mo
                                                    g$rib$9945$MT&Mo)
                                                  (g$rib-label*$9218$MT&Mo
                                                    g$rib$9945$MT&Mo))))))
                                          (g$find-label$9228$MT&Mo
                                            g$rib$9945$MT&Mo
                                            g$sym$9941$MT&Mo
                                            g$mark*$9944$MT&Mo)))))
                                    (g$rib-sealed/freq$9219$MT&Mo
                                      g$rib$9945$MT&Mo))))
                                (car g$subst*$9943$MT&Mo))))))))
               g$search$9942$MT&Mo)
             (g$stx-subst*$9244$MT&Mo g$id$9940$MT&Mo)
             (g$stx-mark*$9243$MT&Mo g$id$9940$MT&Mo))))
         (g$id->sym$9269$MT&Mo g$id$9940$MT&Mo)))))
   (g$label->binding$9283$MT&Mo
     g$label->binding$13100$MT&Mo
     (case-lambda
       ((g$x$9955$MT&Mo g$r$9956$MT&Mo)
        (if (not g$x$9955$MT&Mo)
          '(displaced-lexical)
          ((case-lambda
             ((g$t$9957$MT&Mo)
              (if g$t$9957$MT&Mo
                ((case-lambda
                   ((g$b$9958$MT&Mo)
                    (if (if (pair? g$b$9958$MT&Mo)
                          (begin
                            '#f
                            (eq? (car g$b$9958$MT&Mo) '$core-rtd))
                          '#f)
                      (cons
                        '$rtd
                        (g$map$5753$MT&Mo
                          g$bless$9594$MT&Mo
                          (cdr g$b$9958$MT&Mo)))
                      (if (if (pair? g$b$9958$MT&Mo)
                            (begin
                              '#f
                              (eq? (car g$b$9958$MT&Mo) 'global-rtd))
                            '#f)
                        ((case-lambda
                           ((g$lib$9959$MT&Mo g$loc$9960$MT&Mo)
                            (cons
                              '$rtd
                              (symbol-value g$loc$9960$MT&Mo))))
                         (g$cadr$6411$MT&Mo g$b$9958$MT&Mo)
                         (g$cddr$6413$MT&Mo g$b$9958$MT&Mo))
                        g$b$9958$MT&Mo))))
                 g$t$9957$MT&Mo)
                ((case-lambda
                   ((g$t$9961$MT&Mo)
                    (if g$t$9961$MT&Mo
                      (cdr g$t$9961$MT&Mo)
                      ((case-lambda
                         ((g$t$9962$MT&Mo)
                          (if g$t$9962$MT&Mo
                            ((case-lambda
                               ((g$env$9963$MT&Mo)
                                ((case-lambda
                                   ((g$t$9964$MT&Mo)
                                    (if g$t$9964$MT&Mo
                                      ((case-lambda
                                         ((g$p$9965$MT&Mo)
                                          (g$cons*$5755$MT&Mo
                                            'lexical
                                            (cdr g$p$9965$MT&Mo)
                                            '#f)))
                                       g$t$9964$MT&Mo)
                                      '(displaced-lexical . #f))))
                                 (g$assq$5741$MT&Mo
                                   g$x$9955$MT&Mo
                                   (g$interaction-env-locs$9717$MT&Mo
                                     g$env$9963$MT&Mo)))))
                             g$t$9962$MT&Mo)
                            '(displaced-lexical . #f))))
                       (g$top-level-context$9757$MT&Mo)))))
                 (g$assq$5741$MT&Mo g$x$9955$MT&Mo g$r$9956$MT&Mo)))))
           (g$imported-label->binding$9006$MT&Mo g$x$9955$MT&Mo))))))
   (g$make-binding$9284$MT&Mo g$make-binding$13101$MT&Mo cons)
   (g$binding-type$9285$MT&Mo g$binding-type$13102$MT&Mo car)
   (g$binding-value$9286$MT&Mo g$binding-value$13103$MT&Mo cdr)
   (g$raise-unbound-error$9287$MT&Mo
     g$raise-unbound-error$13104$MT&Mo
     (case-lambda
       ((g$id$9966$MT&Mo)
        (g$syntax-violation*$9748$MT&Mo
          '#f
          '"unbound identifier"
          g$id$9966$MT&Mo
          (g$make-undefined-violation$7157$MT&Mo)))))
   (g$syntax-type$9288$MT&Mo
     g$syntax-type$13105$MT&Mo
     (case-lambda
       ((g$e$9967$MT&Mo g$r$9968$MT&Mo)
        (if (g$id?$9268$MT&Mo g$e$9967$MT&Mo)
          ((case-lambda
             ((g$id$9969$MT&Mo)
              ((case-lambda
                 ((g$label$9970$MT&Mo)
                  ((case-lambda
                     ((g$b$9971$MT&Mo)
                      ((case-lambda
                         ((g$type$9972$MT&Mo)
                          (begin
                            (if (not g$label$9970$MT&Mo)
                              (g$raise-unbound-error$9287$MT&Mo
                                g$id$9969$MT&Mo)
                              (void))
                            ((case-lambda
                               ((g$t$9973$MT&Mo)
                                (if (g$memv$5746$MT&Mo
                                      g$t$9973$MT&Mo
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable
                                         ctv
                                         local-ctv
                                         global-ctv))
                                  (values
                                    g$type$9972$MT&Mo
                                    (g$binding-value$9286$MT&Mo
                                      g$b$9971$MT&Mo)
                                    g$id$9969$MT&Mo)
                                  (values 'other '#f '#f))))
                             g$type$9972$MT&Mo))))
                       (g$binding-type$9285$MT&Mo g$b$9971$MT&Mo))))
                   (g$label->binding$9283$MT&Mo
                     g$label$9970$MT&Mo
                     g$r$9968$MT&Mo))))
               (g$id->label$9281$MT&Mo g$id$9969$MT&Mo))))
           g$e$9967$MT&Mo)
          (if (g$syntax-pair?$9261$MT&Mo g$e$9967$MT&Mo)
            ((case-lambda
               ((g$id$9974$MT&Mo)
                (if (g$id?$9268$MT&Mo g$id$9974$MT&Mo)
                  ((case-lambda
                     ((g$label$9975$MT&Mo)
                      ((case-lambda
                         ((g$b$9976$MT&Mo)
                          ((case-lambda
                             ((g$type$9977$MT&Mo)
                              (begin
                                (if (not g$label$9975$MT&Mo)
                                  (g$raise-unbound-error$9287$MT&Mo
                                    g$id$9974$MT&Mo)
                                  (void))
                                ((case-lambda
                                   ((g$t$9978$MT&Mo)
                                    (if (g$memv$5746$MT&Mo
                                          g$t$9978$MT&Mo
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd
                                             ctv
                                             local-ctv
                                             global-ctv))
                                      (values
                                        g$type$9977$MT&Mo
                                        (g$binding-value$9286$MT&Mo
                                          g$b$9976$MT&Mo)
                                        g$id$9974$MT&Mo)
                                      (values 'call '#f '#f))))
                                 g$type$9977$MT&Mo))))
                           (g$binding-type$9285$MT&Mo g$b$9976$MT&Mo))))
                       (g$label->binding$9283$MT&Mo
                         g$label$9975$MT&Mo
                         g$r$9968$MT&Mo))))
                   (g$id->label$9281$MT&Mo g$id$9974$MT&Mo))
                  (values 'call '#f '#f))))
             (g$syntax-car$9265$MT&Mo g$e$9967$MT&Mo))
            ((case-lambda
               ((g$d$9979$MT&Mo)
                (if (g$self-evaluating?$9276$MT&Mo g$d$9979$MT&Mo)
                  (values 'constant g$d$9979$MT&Mo '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$9279$MT&Mo g$e$9967$MT&Mo)))))))
   (g$sanitize-binding$9305$MT&Mo
     g$sanitize-binding$13106$MT&Mo
     (case-lambda
       ((g$x$9980$MT&Mo g$src$9981$MT&Mo)
        (if (g$procedure?$6404$MT&Mo g$x$9980$MT&Mo)
          (g$cons*$5755$MT&Mo
            'local-macro
            g$x$9980$MT&Mo
            g$src$9981$MT&Mo)
          (if (if (pair? g$x$9980$MT&Mo)
                (if (eq? (car g$x$9980$MT&Mo) 'macro!)
                  (begin
                    '#f
                    (g$procedure?$6404$MT&Mo (cdr g$x$9980$MT&Mo)))
                  '#f)
                '#f)
            (g$cons*$5755$MT&Mo
              'local-macro!
              (cdr g$x$9980$MT&Mo)
              g$src$9981$MT&Mo)
            (if (if (pair? g$x$9980$MT&Mo)
                  (begin '#f (eq? (car g$x$9980$MT&Mo) '$rtd))
                  '#f)
              g$x$9980$MT&Mo
              (if (if (pair? g$x$9980$MT&Mo)
                    (begin '#f (eq? (car g$x$9980$MT&Mo) 'ctv))
                    '#f)
                (g$cons*$5755$MT&Mo
                  'local-ctv
                  (cdr g$x$9980$MT&Mo)
                  g$src$9981$MT&Mo)
                (assertion-violation
                  'expand
                  '"invalid transformer"
                  g$x$9980$MT&Mo))))))))
   (g$make-variable-transformer$9306$MT&Mo
     g$make-variable-transformer$13107$MT&Mo
     (case-lambda
       ((g$x$9982$MT&Mo)
        (if (g$procedure?$6404$MT&Mo g$x$9982$MT&Mo)
          (cons 'macro! g$x$9982$MT&Mo)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$9982$MT&Mo)))))
   (g$make-compile-time-value$9307$MT&Mo
     g$make-compile-time-value$13108$MT&Mo
     (case-lambda ((g$x$9983$MT&Mo) (cons 'ctv g$x$9983$MT&Mo))))
   (g$variable-transformer?$9308$MT&Mo
     g$variable-transformer?$13109$MT&Mo
     (case-lambda
       ((g$x$9984$MT&Mo)
        (if (pair? g$x$9984$MT&Mo)
          (if (eq? (car g$x$9984$MT&Mo) 'macro!)
            (begin '#f (g$procedure?$6404$MT&Mo (cdr g$x$9984$MT&Mo)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$9309$MT&Mo
     g$variable-transformer-procedure$13110$MT&Mo
     (case-lambda
       ((g$x$9985$MT&Mo)
        (if (g$variable-transformer?$9308$MT&Mo g$x$9985$MT&Mo)
          (cdr g$x$9985$MT&Mo)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$9985$MT&Mo)))))
   (g$make-eval-transformer$9310$MT&Mo
     g$make-eval-transformer$13111$MT&Mo
     (case-lambda
       ((g$x$9986$MT&Mo)
        (g$sanitize-binding$9305$MT&Mo
          (eval-core (g$expanded->core$8740$MT&Mo g$x$9986$MT&Mo))
          g$x$9986$MT&Mo))))
   (g$parse-define$9571$MT&Mo
     g$parse-define$13112$MT&Mo
     (case-lambda
       ((g$x$9987$MT&Mo)
        ((case-lambda
           ((g$t$9988$MT&Mo)
            ((case-lambda
               ((g$ls/false$9989$MT&Mo)
                (if (if g$ls/false$9989$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$9990$MT&Mo
                               g$fmls$9991$MT&Mo
                               g$b$9992$MT&Mo
                               g$b*$9993$MT&Mo)
                             (g$id?$9268$MT&Mo g$id$9990$MT&Mo)))
                          g$ls/false$9989$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$9994$MT&Mo
                         g$fmls$9995$MT&Mo
                         g$b$9996$MT&Mo
                         g$b*$9997$MT&Mo)
                       (begin
                         (g$verify-formals$9651$MT&Mo
                           g$fmls$9995$MT&Mo
                           g$x$9987$MT&Mo)
                         (values
                           g$id$9994$MT&Mo
                           (cons
                             'defun
                             (cons
                               g$fmls$9995$MT&Mo
                               (cons
                                 g$b$9996$MT&Mo
                                 g$b*$9997$MT&Mo)))))))
                    g$ls/false$9989$MT&Mo)
                  ((case-lambda
                     ((g$t$9998$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$9999$MT&Mo)
                          (if (if g$ls/false$9999$MT&Mo
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$10000$MT&Mo
                                         g$val$10001$MT&Mo)
                                       (g$id?$9268$MT&Mo
                                         g$id$10000$MT&Mo)))
                                    g$ls/false$9999$MT&Mo))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$10002$MT&Mo g$val$10003$MT&Mo)
                                 (values
                                   g$id$10002$MT&Mo
                                   (cons 'expr g$val$10003$MT&Mo))))
                              g$ls/false$9999$MT&Mo)
                            ((case-lambda
                               ((g$t$10004$MT&Mo)
                                ((case-lambda
                                   ((g$ls/false$10005$MT&Mo)
                                    (if (if g$ls/false$10005$MT&Mo
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$10006$MT&Mo)
                                                 (g$id?$9268$MT&Mo
                                                   g$id$10006$MT&Mo)))
                                              g$ls/false$10005$MT&Mo))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$10007$MT&Mo)
                                           (values
                                             g$id$10007$MT&Mo
                                             (cons
                                               'expr
                                               (g$bless$9594$MT&Mo
                                                 '(void))))))
                                        g$ls/false$10005$MT&Mo)
                                      (g$syntax-violation$9749$MT&Mo
                                        '#f
                                        '"invalid syntax"
                                        g$t$10004$MT&Mo))))
                                 (g$syntax-dispatch$9631$MT&Mo
                                   g$t$10004$MT&Mo
                                   '(_ any)))))
                             g$t$9998$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$9998$MT&Mo
                         '(_ any any)))))
                   g$t$9988$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$9988$MT&Mo
               '(_ (any . any) any . each-any)))))
         g$x$9987$MT&Mo))))
   (g$parse-define-syntax$9572$MT&Mo
     g$parse-define-syntax$13113$MT&Mo
     (case-lambda
       ((g$x$10008$MT&Mo)
        ((case-lambda
           ((g$t$10009$MT&Mo)
            ((case-lambda
               ((g$ls/false$10010$MT&Mo)
                (if (if g$ls/false$10010$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10011$MT&Mo g$val$10012$MT&Mo)
                             (g$id?$9268$MT&Mo g$id$10011$MT&Mo)))
                          g$ls/false$10010$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10013$MT&Mo g$val$10014$MT&Mo)
                       (values g$id$10013$MT&Mo g$val$10014$MT&Mo)))
                    g$ls/false$10010$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10009$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10009$MT&Mo
               '(_ any any)))))
         g$x$10008$MT&Mo))))
   (g$scheme-stx-hashtable$9573$MT&Mo
     g$scheme-stx-hashtable$13114$MT&Mo
     (g$make-eq-hashtable$6501$MT&Mo))
   (g$scheme-stx$9574$MT&Mo
     g$scheme-stx$13115$MT&Mo
     (case-lambda
       ((g$sym$10015$MT&Mo)
        ((case-lambda
           ((g$t$10016$MT&Mo)
            (if g$t$10016$MT&Mo
              g$t$10016$MT&Mo
              (begin
                '#f
                ((case-lambda
                   ((g$subst$10017$MT&Mo)
                    ((case-lambda
                       ((g$stx$10018$MT&Mo)
                        ((case-lambda
                           ((g$stx$10019$MT&Mo)
                            (begin
                              (g$hashtable-set!$6505$MT&Mo
                                g$scheme-stx-hashtable$9573$MT&Mo
                                g$sym$10015$MT&Mo
                                g$stx$10019$MT&Mo)
                              g$stx$10019$MT&Mo)))
                         ((case-lambda
                            ((g$t$10020$MT&Mo)
                             (if g$t$10020$MT&Mo
                               ((case-lambda
                                  ((g$x$10021$MT&Mo)
                                   ((case-lambda
                                      ((g$name$10022$MT&Mo
                                         g$label$10023$MT&Mo)
                                       (g$add-subst$9258$MT&Mo
                                         (g$make-rib$9215$MT&Mo
                                           (list g$name$10022$MT&Mo)
                                           (list g$top-mark*$9201$MT&Mo)
                                           (list g$label$10023$MT&Mo)
                                           '#f
                                           '#f)
                                         g$stx$10018$MT&Mo)))
                                    (car g$x$10021$MT&Mo)
                                    (cdr g$x$10021$MT&Mo))))
                                g$t$10020$MT&Mo)
                               g$stx$10018$MT&Mo)))
                          (g$assq$5741$MT&Mo
                            g$sym$10015$MT&Mo
                            g$subst$10017$MT&Mo)))))
                     (g$make-stx$9241$MT&Mo
                       g$sym$10015$MT&Mo
                       g$top-mark*$9201$MT&Mo
                       '()
                       '()))))
                 (g$library-subst$8964$MT&Mo
                   (g$find-library-by-name$9000$MT&Mo
                     '(psyntax system $all))))))))
         (g$hashtable-ref$6504$MT&Mo
           g$scheme-stx-hashtable$9573$MT&Mo
           g$sym$10015$MT&Mo
           '#f)))))
   (g$lexical-var$9575$MT&Mo g$lexical-var$13116$MT&Mo car)
   (g$lexical-mutable?$9576$MT&Mo g$lexical-mutable?$13117$MT&Mo cdr)
   (g$set-lexical-mutable!$9577$MT&Mo
     g$set-lexical-mutable!$13118$MT&Mo
     set-cdr!)
   (g$add-lexical$9578$MT&Mo
     g$add-lexical$13119$MT&Mo
     (case-lambda
       ((g$lab$10024$MT&Mo g$lex$10025$MT&Mo g$r$10026$MT&Mo)
        (cons
          (g$cons*$5755$MT&Mo
            g$lab$10024$MT&Mo
            'lexical
            g$lex$10025$MT&Mo
            '#f)
          g$r$10026$MT&Mo))))
   (g$add-lexicals$9579$MT&Mo
     g$add-lexicals$13120$MT&Mo
     (case-lambda
       ((g$lab*$10027$MT&Mo g$lex*$10028$MT&Mo g$r$10029$MT&Mo)
        (if (null? g$lab*$10027$MT&Mo)
          g$r$10029$MT&Mo
          (g$add-lexicals$9579$MT&Mo
            (cdr g$lab*$10027$MT&Mo)
            (cdr g$lex*$10028$MT&Mo)
            (g$add-lexical$9578$MT&Mo
              (car g$lab*$10027$MT&Mo)
              (car g$lex*$10028$MT&Mo)
              g$r$10029$MT&Mo))))))
   (g$letrec-helper$9580$MT&Mo
     g$letrec-helper$13121$MT&Mo
     (case-lambda
       ((g$e$10030$MT&Mo
          g$r$10031$MT&Mo
          g$mr$10032$MT&Mo
          g$build$10033$MT&Mo)
        ((case-lambda
           ((g$t$10034$MT&Mo)
            ((case-lambda
               ((g$ls/false$10035$MT&Mo)
                (if g$ls/false$10035$MT&Mo
                  (apply
                    (case-lambda
                      ((g$lhs*$10036$MT&Mo
                         g$rhs*$10037$MT&Mo
                         g$b$10038$MT&Mo
                         g$b*$10039$MT&Mo)
                       (if (not (g$valid-bound-ids?$9273$MT&Mo
                                  g$lhs*$10036$MT&Mo))
                         (g$invalid-fmls-error$9596$MT&Mo
                           g$e$10030$MT&Mo
                           g$lhs*$10036$MT&Mo)
                         ((case-lambda
                            ((g$lex*$10040$MT&Mo g$lab*$10041$MT&Mo)
                             ((case-lambda
                                ((g$rib$10042$MT&Mo g$r$10043$MT&Mo)
                                 ((case-lambda
                                    ((g$body$10044$MT&Mo
                                       g$rhs*$10045$MT&Mo)
                                     (g$build$10033$MT&Mo
                                       '#f
                                       g$lex*$10040$MT&Mo
                                       g$rhs*$10045$MT&Mo
                                       g$body$10044$MT&Mo)))
                                  (g$chi-internal$9660$MT&Mo
                                    (g$add-subst$9258$MT&Mo
                                      g$rib$10042$MT&Mo
                                      (cons
                                        g$b$10038$MT&Mo
                                        g$b*$10039$MT&Mo))
                                    g$r$10043$MT&Mo
                                    g$mr$10032$MT&Mo)
                                  (g$chi-expr*$9647$MT&Mo
                                    (g$map$5753$MT&Mo
                                      (case-lambda
                                        ((g$x$10046$MT&Mo)
                                         (g$add-subst$9258$MT&Mo
                                           g$rib$10042$MT&Mo
                                           g$x$10046$MT&Mo)))
                                      g$rhs*$10037$MT&Mo)
                                    g$r$10043$MT&Mo
                                    g$mr$10032$MT&Mo))))
                              (g$make-full-rib$9234$MT&Mo
                                g$lhs*$10036$MT&Mo
                                g$lab*$10041$MT&Mo)
                              (g$add-lexicals$9579$MT&Mo
                                g$lab*$10041$MT&Mo
                                g$lex*$10040$MT&Mo
                                g$r$10031$MT&Mo))))
                          (g$map$5753$MT&Mo
                            g$gen-lexical$9203$MT&Mo
                            g$lhs*$10036$MT&Mo)
                          (g$map$5753$MT&Mo
                            g$gen-label$9205$MT&Mo
                            g$lhs*$10036$MT&Mo)))))
                    g$ls/false$10035$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10034$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10034$MT&Mo
               '(_ #(each (any any)) any . each-any)))))
         g$e$10030$MT&Mo))))
   (g$letrec-transformer$9581$MT&Mo
     g$letrec-transformer$13122$MT&Mo
     (case-lambda
       ((g$e$10047$MT&Mo g$r$10048$MT&Mo g$mr$10049$MT&Mo)
        (g$letrec-helper$9580$MT&Mo
          g$e$10047$MT&Mo
          g$r$10048$MT&Mo
          g$mr$10049$MT&Mo
          g$build-letrec$9195$MT&Mo))))
   (g$letrec*-transformer$9582$MT&Mo
     g$letrec*-transformer$13123$MT&Mo
     (case-lambda
       ((g$e$10050$MT&Mo g$r$10051$MT&Mo g$mr$10052$MT&Mo)
        (g$letrec-helper$9580$MT&Mo
          g$e$10050$MT&Mo
          g$r$10051$MT&Mo
          g$mr$10052$MT&Mo
          g$build-letrec*$9196$MT&Mo))))
   (g$fluid-let-syntax-transformer$9583$MT&Mo
     g$fluid-let-syntax-transformer$13124$MT&Mo
     (case-lambda
       ((g$e$10053$MT&Mo g$r$10054$MT&Mo g$mr$10055$MT&Mo)
        (letrec* ((g$lookup$10056$MT&Mo
                    (case-lambda
                      ((g$x$10066$MT&Mo)
                       ((case-lambda
                          ((g$t$10067$MT&Mo)
                           (if g$t$10067$MT&Mo
                             g$t$10067$MT&Mo
                             (begin
                               '#f
                               (g$syntax-violation$9749$MT&Mo
                                 '#f
                                 '"unbound identifier"
                                 g$e$10053$MT&Mo
                                 g$x$10066$MT&Mo)))))
                        (g$id->label$9281$MT&Mo g$x$10066$MT&Mo))))))
          ((case-lambda
             ((g$t$10057$MT&Mo)
              ((case-lambda
                 ((g$ls/false$10058$MT&Mo)
                  (if g$ls/false$10058$MT&Mo
                    (apply
                      (case-lambda
                        ((g$lhs*$10059$MT&Mo
                           g$rhs*$10060$MT&Mo
                           g$b$10061$MT&Mo
                           g$b*$10062$MT&Mo)
                         (if (not (g$valid-bound-ids?$9273$MT&Mo
                                    g$lhs*$10059$MT&Mo))
                           (g$invalid-fmls-error$9596$MT&Mo
                             g$e$10053$MT&Mo
                             g$lhs*$10059$MT&Mo)
                           ((case-lambda
                              ((g$lab*$10063$MT&Mo g$rhs*$10064$MT&Mo)
                               (g$chi-internal$9660$MT&Mo
                                 (cons g$b$10061$MT&Mo g$b*$10062$MT&Mo)
                                 (append
                                   (g$map$5753$MT&Mo
                                     cons
                                     g$lab*$10063$MT&Mo
                                     g$rhs*$10064$MT&Mo)
                                   g$r$10054$MT&Mo)
                                 (append
                                   (g$map$5753$MT&Mo
                                     cons
                                     g$lab*$10063$MT&Mo
                                     g$rhs*$10064$MT&Mo)
                                   g$mr$10055$MT&Mo))))
                            (g$map$5753$MT&Mo
                              g$lookup$10056$MT&Mo
                              g$lhs*$10059$MT&Mo)
                            (g$map$5753$MT&Mo
                              (case-lambda
                                ((g$x$10065$MT&Mo)
                                 (g$make-eval-transformer$9310$MT&Mo
                                   (g$expand-transformer$9678$MT&Mo
                                     g$x$10065$MT&Mo
                                     g$mr$10055$MT&Mo))))
                              g$rhs*$10060$MT&Mo)))))
                      g$ls/false$10058$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$10057$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$10057$MT&Mo
                 '(_ #(each (any any)) any . each-any)))))
           g$e$10053$MT&Mo)))))
   (g$type-descriptor-transformer$9584$MT&Mo
     g$type-descriptor-transformer$13125$MT&Mo
     (case-lambda
       ((g$e$10068$MT&Mo g$r$10069$MT&Mo g$mr$10070$MT&Mo)
        ((case-lambda
           ((g$t$10071$MT&Mo)
            ((case-lambda
               ((g$ls/false$10072$MT&Mo)
                (if (if g$ls/false$10072$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10073$MT&Mo)
                             (g$id?$9268$MT&Mo g$id$10073$MT&Mo)))
                          g$ls/false$10072$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10074$MT&Mo)
                       ((case-lambda
                          ((g$lab$10075$MT&Mo)
                           ((case-lambda
                              ((g$b$10076$MT&Mo)
                               ((case-lambda
                                  ((g$type$10077$MT&Mo)
                                   (begin
                                     (if (not g$lab$10075$MT&Mo)
                                       (g$raise-unbound-error$9287$MT&Mo
                                         g$id$10074$MT&Mo)
                                       (void))
                                     (if (not (if (eq? g$type$10077$MT&Mo
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$9286$MT&Mo
                                                           g$b$10076$MT&Mo))))
                                                '#f))
                                       (g$syntax-violation$9749$MT&Mo
                                         '#f
                                         '"not a record type"
                                         g$e$10068$MT&Mo)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$9286$MT&Mo
                                         g$b$10076$MT&Mo)))))
                                (g$binding-type$9285$MT&Mo
                                  g$b$10076$MT&Mo))))
                            (g$label->binding$9283$MT&Mo
                              g$lab$10075$MT&Mo
                              g$r$10069$MT&Mo))))
                        (g$id->label$9281$MT&Mo g$id$10074$MT&Mo))))
                    g$ls/false$10072$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10071$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10071$MT&Mo '(_ any)))))
         g$e$10068$MT&Mo))))
   (g$record-type-descriptor-transformer$9585$MT&Mo
     g$record-type-descriptor-transformer$13126$MT&Mo
     (case-lambda
       ((g$e$10078$MT&Mo g$r$10079$MT&Mo g$mr$10080$MT&Mo)
        ((case-lambda
           ((g$t$10081$MT&Mo)
            ((case-lambda
               ((g$ls/false$10082$MT&Mo)
                (if (if g$ls/false$10082$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10083$MT&Mo)
                             (g$id?$9268$MT&Mo g$id$10083$MT&Mo)))
                          g$ls/false$10082$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10084$MT&Mo)
                       ((case-lambda
                          ((g$lab$10085$MT&Mo)
                           ((case-lambda
                              ((g$b$10086$MT&Mo)
                               ((case-lambda
                                  ((g$type$10087$MT&Mo)
                                   (begin
                                     (if (not g$lab$10085$MT&Mo)
                                       (g$raise-unbound-error$9287$MT&Mo
                                         g$id$10084$MT&Mo)
                                       (void))
                                     (if (not (if (eq? g$type$10087$MT&Mo
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$9286$MT&Mo
                                                      g$b$10086$MT&Mo)))
                                                '#f))
                                       (g$syntax-violation$9749$MT&Mo
                                         '#f
                                         '"not a record type"
                                         g$e$10078$MT&Mo)
                                       (void))
                                     (g$chi-expr$9649$MT&Mo
                                       (car (g$binding-value$9286$MT&Mo
                                              g$b$10086$MT&Mo))
                                       g$r$10079$MT&Mo
                                       g$mr$10080$MT&Mo))))
                                (g$binding-type$9285$MT&Mo
                                  g$b$10086$MT&Mo))))
                            (g$label->binding$9283$MT&Mo
                              g$lab$10085$MT&Mo
                              g$r$10079$MT&Mo))))
                        (g$id->label$9281$MT&Mo g$id$10084$MT&Mo))))
                    g$ls/false$10082$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10081$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10081$MT&Mo '(_ any)))))
         g$e$10078$MT&Mo))))
   (g$record-constructor-descriptor-transformer$9586$MT&Mo
     g$record-constructor-descriptor-transformer$13127$MT&Mo
     (case-lambda
       ((g$e$10088$MT&Mo g$r$10089$MT&Mo g$mr$10090$MT&Mo)
        ((case-lambda
           ((g$t$10091$MT&Mo)
            ((case-lambda
               ((g$ls/false$10092$MT&Mo)
                (if (if g$ls/false$10092$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$10093$MT&Mo)
                             (g$id?$9268$MT&Mo g$id$10093$MT&Mo)))
                          g$ls/false$10092$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$10094$MT&Mo)
                       ((case-lambda
                          ((g$lab$10095$MT&Mo)
                           ((case-lambda
                              ((g$b$10096$MT&Mo)
                               ((case-lambda
                                  ((g$type$10097$MT&Mo)
                                   (begin
                                     (if (not g$lab$10095$MT&Mo)
                                       (g$raise-unbound-error$9287$MT&Mo
                                         g$id$10094$MT&Mo)
                                       (void))
                                     (if (not (if (eq? g$type$10097$MT&Mo
                                                       '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$9286$MT&Mo
                                                      g$b$10096$MT&Mo)))
                                                '#f))
                                       (g$syntax-violation$9749$MT&Mo
                                         '#f
                                         '"invalid type"
                                         g$e$10088$MT&Mo)
                                       (void))
                                     (g$chi-expr$9649$MT&Mo
                                       (g$cadr$6411$MT&Mo
                                         (g$binding-value$9286$MT&Mo
                                           g$b$10096$MT&Mo))
                                       g$r$10089$MT&Mo
                                       g$mr$10090$MT&Mo))))
                                (g$binding-type$9285$MT&Mo
                                  g$b$10096$MT&Mo))))
                            (g$label->binding$9283$MT&Mo
                              g$lab$10095$MT&Mo
                              g$r$10089$MT&Mo))))
                        (g$id->label$9281$MT&Mo g$id$10094$MT&Mo))))
                    g$ls/false$10092$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10091$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10091$MT&Mo '(_ any)))))
         g$e$10088$MT&Mo))))
   (g$when-macro$9587$MT&Mo
     g$when-macro$13128$MT&Mo
     (case-lambda
       ((g$e$10098$MT&Mo)
        ((case-lambda
           ((g$t$10099$MT&Mo)
            ((case-lambda
               ((g$ls/false$10100$MT&Mo)
                (if g$ls/false$10100$MT&Mo
                  (apply
                    (case-lambda
                      ((g$test$10101$MT&Mo
                         g$e$10102$MT&Mo
                         g$e*$10103$MT&Mo)
                       (g$bless$9594$MT&Mo
                         (list
                           'if
                           g$test$10101$MT&Mo
                           (cons
                             'begin
                             (cons
                               g$e$10102$MT&Mo
                               g$e*$10103$MT&Mo))))))
                    g$ls/false$10100$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10099$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10099$MT&Mo
               '(_ any any . each-any)))))
         g$e$10098$MT&Mo))))
   (g$unless-macro$9588$MT&Mo
     g$unless-macro$13129$MT&Mo
     (case-lambda
       ((g$e$10104$MT&Mo)
        ((case-lambda
           ((g$t$10105$MT&Mo)
            ((case-lambda
               ((g$ls/false$10106$MT&Mo)
                (if g$ls/false$10106$MT&Mo
                  (apply
                    (case-lambda
                      ((g$test$10107$MT&Mo
                         g$e$10108$MT&Mo
                         g$e*$10109$MT&Mo)
                       (g$bless$9594$MT&Mo
                         (list
                           'if
                           (list 'not g$test$10107$MT&Mo)
                           (cons
                             'begin
                             (cons
                               g$e$10108$MT&Mo
                               g$e*$10109$MT&Mo))))))
                    g$ls/false$10106$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10105$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10105$MT&Mo
               '(_ any any . each-any)))))
         g$e$10104$MT&Mo))))
   (g$if-transformer$9589$MT&Mo
     g$if-transformer$13130$MT&Mo
     (case-lambda
       ((g$e$10110$MT&Mo g$r$10111$MT&Mo g$mr$10112$MT&Mo)
        ((case-lambda
           ((g$t$10113$MT&Mo)
            ((case-lambda
               ((g$ls/false$10114$MT&Mo)
                (if g$ls/false$10114$MT&Mo
                  (apply
                    (case-lambda
                      ((g$e0$10115$MT&Mo
                         g$e1$10116$MT&Mo
                         g$e2$10117$MT&Mo)
                       (list
                         'if
                         (g$chi-expr$9649$MT&Mo
                           g$e0$10115$MT&Mo
                           g$r$10111$MT&Mo
                           g$mr$10112$MT&Mo)
                         (g$chi-expr$9649$MT&Mo
                           g$e1$10116$MT&Mo
                           g$r$10111$MT&Mo
                           g$mr$10112$MT&Mo)
                         (g$chi-expr$9649$MT&Mo
                           g$e2$10117$MT&Mo
                           g$r$10111$MT&Mo
                           g$mr$10112$MT&Mo))))
                    g$ls/false$10114$MT&Mo)
                  ((case-lambda
                     ((g$t$10118$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$10119$MT&Mo)
                          (if g$ls/false$10119$MT&Mo
                            (apply
                              (case-lambda
                                ((g$e0$10120$MT&Mo g$e1$10121$MT&Mo)
                                 (list
                                   'if
                                   (g$chi-expr$9649$MT&Mo
                                     g$e0$10120$MT&Mo
                                     g$r$10111$MT&Mo
                                     g$mr$10112$MT&Mo)
                                   (g$chi-expr$9649$MT&Mo
                                     g$e1$10121$MT&Mo
                                     g$r$10111$MT&Mo
                                     g$mr$10112$MT&Mo)
                                   (g$build-void$9194$MT&Mo))))
                              g$ls/false$10119$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$10118$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$10118$MT&Mo
                         '(_ any any)))))
                   g$t$10113$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10113$MT&Mo
               '(_ any any any)))))
         g$e$10110$MT&Mo))))
   (g$case-macro$9590$MT&Mo
     g$case-macro$13131$MT&Mo
     (case-lambda
       ((g$e$10122$MT&Mo)
        (letrec* ((g$build-last$10123$MT&Mo
                    (case-lambda
                      ((g$cls$10143$MT&Mo)
                       ((case-lambda
                          ((g$t$10144$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$10145$MT&Mo)
                               (if g$ls/false$10145$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$e$10146$MT&Mo g$e*$10147$MT&Mo)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$10146$MT&Mo
                                          g$e*$10147$MT&Mo))))
                                   g$ls/false$10145$MT&Mo)
                                 ((case-lambda
                                    ((g$t$10148$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$10149$MT&Mo)
                                         (if g$ls/false$10149$MT&Mo
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$10124$MT&Mo
                                                  g$cls$10143$MT&Mo
                                                  '(if #f #f))))
                                             g$ls/false$10149$MT&Mo)
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$t$10148$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$10148$MT&Mo
                                        '_))))
                                  g$t$10144$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$10144$MT&Mo
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$10143$MT&Mo))))
                  (g$build-one$10124$MT&Mo
                    (case-lambda
                      ((g$cls$10136$MT&Mo g$k$10137$MT&Mo)
                       ((case-lambda
                          ((g$t$10138$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$10139$MT&Mo)
                               (if g$ls/false$10139$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$d*$10140$MT&Mo
                                        g$e$10141$MT&Mo
                                        g$e*$10142$MT&Mo)
                                      (if (= '1
                                             (length g$d*$10140$MT&Mo))
                                        (list
                                          'if
                                          (list
                                            'eqv?
                                            't
                                            (list
                                              'quote
                                              (car g$d*$10140$MT&Mo)))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$10141$MT&Mo
                                              g$e*$10142$MT&Mo))
                                          g$k$10137$MT&Mo)
                                        (list
                                          'if
                                          (list
                                            'memv
                                            't
                                            (list
                                              'quote
                                              g$d*$10140$MT&Mo))
                                          (cons
                                            'begin
                                            (cons
                                              g$e$10141$MT&Mo
                                              g$e*$10142$MT&Mo))
                                          g$k$10137$MT&Mo))))
                                   g$ls/false$10139$MT&Mo)
                                 (g$syntax-violation$9749$MT&Mo
                                   '#f
                                   '"invalid syntax"
                                   g$t$10138$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$10138$MT&Mo
                              '(each-any any . each-any)))))
                        g$cls$10136$MT&Mo)))))
          ((case-lambda
             ((g$t$10125$MT&Mo)
              ((case-lambda
                 ((g$ls/false$10126$MT&Mo)
                  (if g$ls/false$10126$MT&Mo
                    (apply
                      (case-lambda
                        ((g$expr$10127$MT&Mo)
                         (g$bless$9594$MT&Mo
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$10127$MT&Mo))
                               '((if #f #f)))))))
                      g$ls/false$10126$MT&Mo)
                    ((case-lambda
                       ((g$t$10128$MT&Mo)
                        ((case-lambda
                           ((g$ls/false$10129$MT&Mo)
                            (if g$ls/false$10129$MT&Mo
                              (apply
                                (case-lambda
                                  ((g$expr$10130$MT&Mo
                                     g$cls$10131$MT&Mo
                                     g$cls*$10132$MT&Mo)
                                   (g$bless$9594$MT&Mo
                                     (list
                                       'let
                                       (list
                                         (list 't g$expr$10130$MT&Mo))
                                       ((letrec ((g$f$10133$MT&Mo
                                                   (case-lambda
                                                     ((g$cls$10134$MT&Mo
                                                        g$cls*$10135$MT&Mo)
                                                      (if (null?
                                                            g$cls*$10135$MT&Mo)
                                                        (g$build-last$10123$MT&Mo
                                                          g$cls$10134$MT&Mo)
                                                        (g$build-one$10124$MT&Mo
                                                          g$cls$10134$MT&Mo
                                                          (g$f$10133$MT&Mo
                                                            (car g$cls*$10135$MT&Mo)
                                                            (cdr g$cls*$10135$MT&Mo))))))))
                                          g$f$10133$MT&Mo)
                                        g$cls$10131$MT&Mo
                                        g$cls*$10132$MT&Mo)))))
                                g$ls/false$10129$MT&Mo)
                              (g$syntax-violation$9749$MT&Mo
                                '#f
                                '"invalid syntax"
                                g$t$10128$MT&Mo))))
                         (g$syntax-dispatch$9631$MT&Mo
                           g$t$10128$MT&Mo
                           '(_ any any . each-any)))))
                     g$t$10125$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$10125$MT&Mo
                 '(_ any)))))
           g$e$10122$MT&Mo)))))
   (g$quote-transformer$9591$MT&Mo
     g$quote-transformer$13132$MT&Mo
     (case-lambda
       ((g$e$10150$MT&Mo g$r$10151$MT&Mo g$mr$10152$MT&Mo)
        ((case-lambda
           ((g$t$10153$MT&Mo)
            ((case-lambda
               ((g$ls/false$10154$MT&Mo)
                (if g$ls/false$10154$MT&Mo
                  (apply
                    (case-lambda
                      ((g$datum$10155$MT&Mo)
                       (list
                         'quote
                         (g$stx->datum$9279$MT&Mo
                           g$datum$10155$MT&Mo))))
                    g$ls/false$10154$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10153$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10153$MT&Mo '(_ any)))))
         g$e$10150$MT&Mo))))
   (g$case-lambda-transformer$9592$MT&Mo
     g$case-lambda-transformer$13133$MT&Mo
     (case-lambda
       ((g$e$10156$MT&Mo g$r$10157$MT&Mo g$mr$10158$MT&Mo)
        ((case-lambda
           ((g$t$10159$MT&Mo)
            ((case-lambda
               ((g$ls/false$10160$MT&Mo)
                (if g$ls/false$10160$MT&Mo
                  (apply
                    (case-lambda
                      ((g$fmls*$10161$MT&Mo
                         g$b*$10162$MT&Mo
                         g$b**$10163$MT&Mo)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$9653$MT&Mo
                              g$e$10156$MT&Mo
                              g$fmls*$10161$MT&Mo
                              (g$map$5753$MT&Mo
                                cons
                                g$b*$10162$MT&Mo
                                g$b**$10163$MT&Mo)
                              g$r$10157$MT&Mo
                              g$mr$10158$MT&Mo)))
                         (case-lambda
                           ((g$fmls*$10166$MT&Mo g$body*$10167$MT&Mo)
                            ((case-lambda
                               ((g$body*$10168$MT&Mo
                                  g$fmls*$10169$MT&Mo)
                                (g$build-case-lambda$9191$MT&Mo
                                  '#f
                                  g$fmls*$10169$MT&Mo
                                  g$body*$10168$MT&Mo)))
                             g$body*$10167$MT&Mo
                             g$fmls*$10166$MT&Mo))))))
                    g$ls/false$10160$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10159$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10159$MT&Mo
               '(_ . #(each (any any . each-any)))))))
         g$e$10156$MT&Mo))))
   (g$lambda-transformer$9593$MT&Mo
     g$lambda-transformer$13134$MT&Mo
     (case-lambda
       ((g$e$10170$MT&Mo g$r$10171$MT&Mo g$mr$10172$MT&Mo)
        ((case-lambda
           ((g$t$10173$MT&Mo)
            ((case-lambda
               ((g$ls/false$10174$MT&Mo)
                (if g$ls/false$10174$MT&Mo
                  (apply
                    (case-lambda
                      ((g$fmls$10175$MT&Mo
                         g$b$10176$MT&Mo
                         g$b*$10177$MT&Mo)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$9652$MT&Mo
                              g$e$10170$MT&Mo
                              g$fmls$10175$MT&Mo
                              (cons g$b$10176$MT&Mo g$b*$10177$MT&Mo)
                              g$r$10171$MT&Mo
                              g$mr$10172$MT&Mo)))
                         (case-lambda
                           ((g$fmls$10180$MT&Mo g$body$10181$MT&Mo)
                            ((case-lambda
                               ((g$body$10182$MT&Mo g$fmls$10183$MT&Mo)
                                (g$build-lambda$9190$MT&Mo
                                  '#f
                                  g$fmls$10183$MT&Mo
                                  g$body$10182$MT&Mo)))
                             g$body$10181$MT&Mo
                             g$fmls$10180$MT&Mo))))))
                    g$ls/false$10174$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10173$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10173$MT&Mo
               '(_ any any . each-any)))))
         g$e$10170$MT&Mo))))
   (g$bless$9594$MT&Mo
     g$bless$13135$MT&Mo
     (case-lambda
       ((g$x$10184$MT&Mo)
        (g$mkstx$9256$MT&Mo
          ((letrec ((g$f$10185$MT&Mo
                      (case-lambda
                        ((g$x$10186$MT&Mo)
                         (if (g$stx?$9240$MT&Mo g$x$10186$MT&Mo)
                           g$x$10186$MT&Mo
                           (if (pair? g$x$10186$MT&Mo)
                             (cons
                               (g$f$10185$MT&Mo (car g$x$10186$MT&Mo))
                               (g$f$10185$MT&Mo (cdr g$x$10186$MT&Mo)))
                             (if (g$symbol?$6402$MT&Mo g$x$10186$MT&Mo)
                               (g$scheme-stx$9574$MT&Mo g$x$10186$MT&Mo)
                               (if (g$vector?$6400$MT&Mo
                                     g$x$10186$MT&Mo)
                                 (g$vector-map$6462$MT&Mo
                                   g$f$10185$MT&Mo
                                   g$x$10186$MT&Mo)
                                 g$x$10186$MT&Mo))))))))
             g$f$10185$MT&Mo)
           g$x$10184$MT&Mo)
          '()
          '()
          '()))))
   (g$with-syntax-macro$9595$MT&Mo
     g$with-syntax-macro$13136$MT&Mo
     (case-lambda
       ((g$e$10187$MT&Mo)
        ((case-lambda
           ((g$t$10188$MT&Mo)
            ((case-lambda
               ((g$ls/false$10189$MT&Mo)
                (if g$ls/false$10189$MT&Mo
                  (apply
                    (case-lambda
                      ((g$pat*$10190$MT&Mo
                         g$expr*$10191$MT&Mo
                         g$b$10192$MT&Mo
                         g$b*$10193$MT&Mo)
                       ((case-lambda
                          ((g$idn*$10194$MT&Mo)
                           (begin
                             (g$verify-formals$9651$MT&Mo
                               (g$map$5753$MT&Mo car g$idn*$10194$MT&Mo)
                               g$e$10187$MT&Mo)
                             ((case-lambda
                                ((g$t*$10195$MT&Mo)
                                 (g$bless$9594$MT&Mo
                                   (list
                                     'let
                                     (g$map$5753$MT&Mo
                                       list
                                       g$t*$10195$MT&Mo
                                       g$expr*$10191$MT&Mo)
                                     ((letrec ((g$f$10196$MT&Mo
                                                 (case-lambda
                                                   ((g$pat*$10197$MT&Mo
                                                      g$t*$10198$MT&Mo)
                                                    (if (null?
                                                          g$pat*$10197$MT&Mo)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$10192$MT&Mo
                                                            g$b*$10193$MT&Mo)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$10198$MT&Mo)
                                                        '()
                                                        (list
                                                          (car g$pat*$10197$MT&Mo)
                                                          (g$f$10196$MT&Mo
                                                            (cdr g$pat*$10197$MT&Mo)
                                                            (cdr g$t*$10198$MT&Mo)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$10197$MT&Mo))
                                                            (car g$t*$10198$MT&Mo)))))))))
                                        g$f$10196$MT&Mo)
                                      g$pat*$10190$MT&Mo
                                      g$t*$10195$MT&Mo)))))
                              (g$generate-temporaries$9739$MT&Mo
                                g$expr*$10191$MT&Mo)))))
                        ((letrec ((g$f$10199$MT&Mo
                                    (case-lambda
                                      ((g$pat*$10200$MT&Mo)
                                       (if (null? g$pat*$10200$MT&Mo)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$9630$MT&Mo
                                                (car g$pat*$10200$MT&Mo)
                                                '())))
                                           (case-lambda
                                             ((g$pat$10203$MT&Mo
                                                g$idn*$10204$MT&Mo)
                                              ((case-lambda
                                                 ((g$idn*$10205$MT&Mo
                                                    g$pat$10206$MT&Mo)
                                                  (append
                                                    g$idn*$10205$MT&Mo
                                                    (g$f$10199$MT&Mo
                                                      (cdr g$pat*$10200$MT&Mo)))))
                                               g$idn*$10204$MT&Mo
                                               g$pat$10203$MT&Mo)))))))))
                           g$f$10199$MT&Mo)
                         g$pat*$10190$MT&Mo))))
                    g$ls/false$10189$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10188$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10188$MT&Mo
               '(_ #(each (any any)) any . each-any)))))
         g$e$10187$MT&Mo))))
   (g$invalid-fmls-error$9596$MT&Mo
     g$invalid-fmls-error$13137$MT&Mo
     (case-lambda
       ((g$stx$10207$MT&Mo g$fmls$10208$MT&Mo)
        ((case-lambda
           ((g$t$10209$MT&Mo)
            ((case-lambda
               ((g$ls/false$10210$MT&Mo)
                (if g$ls/false$10210$MT&Mo
                  (apply
                    (case-lambda
                      ((g$id*$10211$MT&Mo g$last$10212$MT&Mo)
                       ((letrec ((g$f$10213$MT&Mo
                                   (case-lambda
                                     ((g$id*$10214$MT&Mo)
                                      (if (null? g$id*$10214$MT&Mo)
                                        (values)
                                        (if (not (g$id?$9268$MT&Mo
                                                   (car g$id*$10214$MT&Mo)))
                                          (g$syntax-violation$9749$MT&Mo
                                            '#f
                                            '"not an identifier"
                                            g$stx$10207$MT&Mo
                                            (car g$id*$10214$MT&Mo))
                                          (begin
                                            (g$f$10213$MT&Mo
                                              (cdr g$id*$10214$MT&Mo))
                                            (if (g$bound-id-member?$9275$MT&Mo
                                                  (car g$id*$10214$MT&Mo)
                                                  (cdr g$id*$10214$MT&Mo))
                                              (g$syntax-violation$9749$MT&Mo
                                                '#f
                                                '"duplicate binding"
                                                g$stx$10207$MT&Mo
                                                (car g$id*$10214$MT&Mo))
                                              (void)))))))))
                          g$f$10213$MT&Mo)
                        (if (g$id?$9268$MT&Mo g$last$10212$MT&Mo)
                          (cons g$last$10212$MT&Mo g$id*$10211$MT&Mo)
                          (if (g$syntax-null?$9263$MT&Mo
                                g$last$10212$MT&Mo)
                            g$id*$10211$MT&Mo
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"not an identifier"
                              g$stx$10207$MT&Mo
                              g$last$10212$MT&Mo))))))
                    g$ls/false$10210$MT&Mo)
                  ((case-lambda
                     ((g$t$10215$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$10216$MT&Mo)
                          (if g$ls/false$10216$MT&Mo
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$9749$MT&Mo
                                   '#f
                                   '"malformed binding form"
                                   g$stx$10207$MT&Mo
                                   g$fmls$10208$MT&Mo)))
                              g$ls/false$10216$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$10215$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$10215$MT&Mo
                         '_))))
                   g$t$10209$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10209$MT&Mo
               '#(each+ any () any)))))
         g$fmls$10208$MT&Mo))))
   (g$let-macro$9597$MT&Mo
     g$let-macro$13138$MT&Mo
     (case-lambda
       ((g$stx$10217$MT&Mo)
        ((case-lambda
           ((g$t$10218$MT&Mo)
            ((case-lambda
               ((g$ls/false$10219$MT&Mo)
                (if g$ls/false$10219$MT&Mo
                  (apply
                    (case-lambda
                      ((g$lhs*$10220$MT&Mo
                         g$rhs*$10221$MT&Mo
                         g$b$10222$MT&Mo
                         g$b*$10223$MT&Mo)
                       (if (g$valid-bound-ids?$9273$MT&Mo
                             g$lhs*$10220$MT&Mo)
                         (g$bless$9594$MT&Mo
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$10220$MT&Mo
                                 (cons
                                   g$b$10222$MT&Mo
                                   g$b*$10223$MT&Mo)))
                             g$rhs*$10221$MT&Mo))
                         (g$invalid-fmls-error$9596$MT&Mo
                           g$stx$10217$MT&Mo
                           g$lhs*$10220$MT&Mo))))
                    g$ls/false$10219$MT&Mo)
                  ((case-lambda
                     ((g$t$10224$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$10225$MT&Mo)
                          (if (if g$ls/false$10225$MT&Mo
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$10226$MT&Mo
                                         g$lhs*$10227$MT&Mo
                                         g$rhs*$10228$MT&Mo
                                         g$b$10229$MT&Mo
                                         g$b*$10230$MT&Mo)
                                       (g$id?$9268$MT&Mo
                                         g$f$10226$MT&Mo)))
                                    g$ls/false$10225$MT&Mo))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$10231$MT&Mo
                                   g$lhs*$10232$MT&Mo
                                   g$rhs*$10233$MT&Mo
                                   g$b$10234$MT&Mo
                                   g$b*$10235$MT&Mo)
                                 (if (g$valid-bound-ids?$9273$MT&Mo
                                       g$lhs*$10232$MT&Mo)
                                   (g$bless$9594$MT&Mo
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$10231$MT&Mo
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$10232$MT&Mo
                                                 (cons
                                                   g$b$10234$MT&Mo
                                                   g$b*$10235$MT&Mo)))))
                                         g$f$10231$MT&Mo)
                                       g$rhs*$10233$MT&Mo))
                                   (g$invalid-fmls-error$9596$MT&Mo
                                     g$stx$10217$MT&Mo
                                     g$lhs*$10232$MT&Mo))))
                              g$ls/false$10225$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$10224$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$10224$MT&Mo
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$10218$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10218$MT&Mo
               '(_ #(each (any any)) any . each-any)))))
         g$stx$10217$MT&Mo))))
   (g$let-values-macro$9598$MT&Mo
     g$let-values-macro$13139$MT&Mo
     (case-lambda
       ((g$stx$10236$MT&Mo)
        (letrec* ((g$rename$10237$MT&Mo
                    (case-lambda
                      ((g$x$10288$MT&Mo
                         g$old*$10289$MT&Mo
                         g$new*$10290$MT&Mo)
                       (begin
                         (if (not (g$id?$9268$MT&Mo g$x$10288$MT&Mo))
                           (g$syntax-violation$9749$MT&Mo
                             '#f
                             '"not an indentifier"
                             g$stx$10236$MT&Mo
                             g$x$10288$MT&Mo)
                           (void))
                         (if (g$bound-id-member?$9275$MT&Mo
                               g$x$10288$MT&Mo
                               g$old*$10289$MT&Mo)
                           (g$syntax-violation$9749$MT&Mo
                             '#f
                             '"duplicate binding"
                             g$stx$10236$MT&Mo
                             g$x$10288$MT&Mo)
                           (void))
                         ((case-lambda
                            ((g$y$10291$MT&Mo)
                             (values
                               g$y$10291$MT&Mo
                               (cons g$x$10288$MT&Mo g$old*$10289$MT&Mo)
                               (cons
                                 g$y$10291$MT&Mo
                                 g$new*$10290$MT&Mo))))
                          (gensym
                            (g$syntax->datum$9752$MT&Mo
                              g$x$10288$MT&Mo)))))))
                  (g$rename*$10238$MT&Mo
                    (case-lambda
                      ((g$x*$10279$MT&Mo
                         g$old*$10280$MT&Mo
                         g$new*$10281$MT&Mo)
                       (if (null? g$x*$10279$MT&Mo)
                         (values
                           '()
                           g$old*$10280$MT&Mo
                           g$new*$10281$MT&Mo)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$10237$MT&Mo
                                (car g$x*$10279$MT&Mo)
                                g$old*$10280$MT&Mo
                                g$new*$10281$MT&Mo)))
                           (case-lambda
                             ((g$x$10282$MT&Mo
                                g$old*$10283$MT&Mo
                                g$new*$10284$MT&Mo)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$10238$MT&Mo
                                     (cdr g$x*$10279$MT&Mo)
                                     g$old*$10283$MT&Mo
                                     g$new*$10284$MT&Mo)))
                                (case-lambda
                                  ((g$x*$10285$MT&Mo
                                     g$old*$10286$MT&Mo
                                     g$new*$10287$MT&Mo)
                                   (values
                                     (cons
                                       g$x$10282$MT&Mo
                                       g$x*$10285$MT&Mo)
                                     g$old*$10286$MT&Mo
                                     g$new*$10287$MT&Mo))))))))))))
          ((case-lambda
             ((g$t$10239$MT&Mo)
              ((case-lambda
                 ((g$ls/false$10240$MT&Mo)
                  (if g$ls/false$10240$MT&Mo
                    (apply
                      (case-lambda
                        ((g$b$10241$MT&Mo g$b*$10242$MT&Mo)
                         (g$cons*$5755$MT&Mo
                           (g$bless$9594$MT&Mo 'let)
                           '()
                           g$b$10241$MT&Mo
                           g$b*$10242$MT&Mo)))
                      g$ls/false$10240$MT&Mo)
                    ((case-lambda
                       ((g$t$10243$MT&Mo)
                        ((case-lambda
                           ((g$ls/false$10244$MT&Mo)
                            (if g$ls/false$10244$MT&Mo
                              (apply
                                (case-lambda
                                  ((g$lhs*$10245$MT&Mo
                                     g$rhs*$10246$MT&Mo
                                     g$b$10247$MT&Mo
                                     g$b*$10248$MT&Mo)
                                   (g$bless$9594$MT&Mo
                                     ((letrec ((g$f$10249$MT&Mo
                                                 (case-lambda
                                                   ((g$lhs*$10250$MT&Mo
                                                      g$rhs*$10251$MT&Mo
                                                      g$old*$10252$MT&Mo
                                                      g$new*$10253$MT&Mo)
                                                    (if (null?
                                                          g$lhs*$10250$MT&Mo)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5753$MT&Mo
                                                            list
                                                            g$old*$10252$MT&Mo
                                                            g$new*$10253$MT&Mo)
                                                          (cons
                                                            g$b$10247$MT&Mo
                                                            g$b*$10248$MT&Mo)))
                                                      ((case-lambda
                                                         ((g$t$10254$MT&Mo)
                                                          ((case-lambda
                                                             ((g$ls/false$10255$MT&Mo)
                                                              (if g$ls/false$10255$MT&Mo
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$10256$MT&Mo)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$10238$MT&Mo
                                                                            g$x*$10256$MT&Mo
                                                                            g$old*$10252$MT&Mo
                                                                            g$new*$10253$MT&Mo)))
                                                                       (case-lambda
                                                                         ((g$y*$10260$MT&Mo
                                                                            g$old*$10261$MT&Mo
                                                                            g$new*$10262$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$new*$10263$MT&Mo
                                                                                g$old*$10264$MT&Mo
                                                                                g$y*$10265$MT&Mo)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$10251$MT&Mo))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$10265$MT&Mo
                                                                                  (g$f$10249$MT&Mo
                                                                                    (cdr g$lhs*$10250$MT&Mo)
                                                                                    (cdr g$rhs*$10251$MT&Mo)
                                                                                    g$old*$10264$MT&Mo
                                                                                    g$new*$10263$MT&Mo)))))
                                                                           g$new*$10262$MT&Mo
                                                                           g$old*$10261$MT&Mo
                                                                           g$y*$10260$MT&Mo))))))
                                                                  g$ls/false$10255$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$t$10266$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10267$MT&Mo)
                                                                        (if g$ls/false$10267$MT&Mo
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$10268$MT&Mo
                                                                                 g$x$10269$MT&Mo)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$10237$MT&Mo
                                                                                      g$x$10269$MT&Mo
                                                                                      g$old*$10252$MT&Mo
                                                                                      g$new*$10253$MT&Mo)))
                                                                                 (case-lambda
                                                                                   ((g$y$10270$MT&Mo
                                                                                      g$old*$10271$MT&Mo
                                                                                      g$new*$10272$MT&Mo)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$10238$MT&Mo
                                                                                           g$x*$10268$MT&Mo
                                                                                           g$old*$10271$MT&Mo
                                                                                           g$new*$10272$MT&Mo)))
                                                                                      (case-lambda
                                                                                        ((g$y*$10273$MT&Mo
                                                                                           g$old*$10274$MT&Mo
                                                                                           g$new*$10275$MT&Mo)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$10251$MT&Mo))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$10273$MT&Mo
                                                                                               g$y$10270$MT&Mo)
                                                                                             (g$f$10249$MT&Mo
                                                                                               (cdr g$lhs*$10250$MT&Mo)
                                                                                               (cdr g$rhs*$10251$MT&Mo)
                                                                                               g$old*$10274$MT&Mo
                                                                                               g$new*$10275$MT&Mo)))))))))))
                                                                            g$ls/false$10267$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$t$10276$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10277$MT&Mo)
                                                                                  (if g$ls/false$10277$MT&Mo
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$10278$MT&Mo)
                                                                                         (g$syntax-violation$9749$MT&Mo
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$10236$MT&Mo
                                                                                           g$others$10278$MT&Mo)))
                                                                                      g$ls/false$10277$MT&Mo)
                                                                                    (g$syntax-violation$9749$MT&Mo
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10276$MT&Mo))))
                                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                                 g$t$10276$MT&Mo
                                                                                 'any))))
                                                                           g$t$10266$MT&Mo))))
                                                                     (g$syntax-dispatch$9631$MT&Mo
                                                                       g$t$10266$MT&Mo
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$10254$MT&Mo))))
                                                           (g$syntax-dispatch$9631$MT&Mo
                                                             g$t$10254$MT&Mo
                                                             'each-any))))
                                                       (car g$lhs*$10250$MT&Mo)))))))
                                        g$f$10249$MT&Mo)
                                      g$lhs*$10245$MT&Mo
                                      g$rhs*$10246$MT&Mo
                                      '()
                                      '()))))
                                g$ls/false$10244$MT&Mo)
                              (g$syntax-violation$9749$MT&Mo
                                '#f
                                '"invalid syntax"
                                g$t$10243$MT&Mo))))
                         (g$syntax-dispatch$9631$MT&Mo
                           g$t$10243$MT&Mo
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$10239$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$10239$MT&Mo
                 '(_ () any . each-any)))))
           g$stx$10236$MT&Mo)))))
   (g$let*-values-macro$9599$MT&Mo
     g$let*-values-macro$13140$MT&Mo
     (case-lambda
       ((g$stx$10292$MT&Mo)
        (letrec* ((g$check$10293$MT&Mo
                    (case-lambda
                      ((g$x*$10317$MT&Mo)
                       (if (not (null? g$x*$10317$MT&Mo))
                         ((case-lambda
                            ((g$x$10318$MT&Mo)
                             (begin
                               (if (not (g$id?$9268$MT&Mo
                                          g$x$10318$MT&Mo))
                                 (g$syntax-violation$9749$MT&Mo
                                   '#f
                                   '"not an identifier"
                                   g$stx$10292$MT&Mo
                                   g$x$10318$MT&Mo)
                                 (void))
                               (g$check$10293$MT&Mo
                                 (cdr g$x*$10317$MT&Mo))
                               (if (g$bound-id-member?$9275$MT&Mo
                                     g$x$10318$MT&Mo
                                     (cdr g$x*$10317$MT&Mo))
                                 (g$syntax-violation$9749$MT&Mo
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$10292$MT&Mo
                                   g$x$10318$MT&Mo)
                                 (void)))))
                          (car g$x*$10317$MT&Mo))
                         (void))))))
          ((case-lambda
             ((g$t$10294$MT&Mo)
              ((case-lambda
                 ((g$ls/false$10295$MT&Mo)
                  (if g$ls/false$10295$MT&Mo
                    (apply
                      (case-lambda
                        ((g$b$10296$MT&Mo g$b*$10297$MT&Mo)
                         (g$cons*$5755$MT&Mo
                           (g$bless$9594$MT&Mo 'let)
                           '()
                           g$b$10296$MT&Mo
                           g$b*$10297$MT&Mo)))
                      g$ls/false$10295$MT&Mo)
                    ((case-lambda
                       ((g$t$10298$MT&Mo)
                        ((case-lambda
                           ((g$ls/false$10299$MT&Mo)
                            (if g$ls/false$10299$MT&Mo
                              (apply
                                (case-lambda
                                  ((g$lhs*$10300$MT&Mo
                                     g$rhs*$10301$MT&Mo
                                     g$b$10302$MT&Mo
                                     g$b*$10303$MT&Mo)
                                   (g$bless$9594$MT&Mo
                                     ((letrec ((g$f$10304$MT&Mo
                                                 (case-lambda
                                                   ((g$lhs*$10305$MT&Mo
                                                      g$rhs*$10306$MT&Mo)
                                                    (if (null?
                                                          g$lhs*$10305$MT&Mo)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$10302$MT&Mo
                                                          g$b*$10303$MT&Mo))
                                                      ((case-lambda
                                                         ((g$t$10307$MT&Mo)
                                                          ((case-lambda
                                                             ((g$ls/false$10308$MT&Mo)
                                                              (if g$ls/false$10308$MT&Mo
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$10309$MT&Mo)
                                                                     (begin
                                                                       (g$check$10293$MT&Mo
                                                                         g$x*$10309$MT&Mo)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$10306$MT&Mo))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$10309$MT&Mo
                                                                           (g$f$10304$MT&Mo
                                                                             (cdr g$lhs*$10305$MT&Mo)
                                                                             (cdr g$rhs*$10306$MT&Mo)))))))
                                                                  g$ls/false$10308$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$t$10310$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10311$MT&Mo)
                                                                        (if g$ls/false$10311$MT&Mo
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$10312$MT&Mo
                                                                                 g$x$10313$MT&Mo)
                                                                               (begin
                                                                                 (g$check$10293$MT&Mo
                                                                                   (cons
                                                                                     g$x$10313$MT&Mo
                                                                                     g$x*$10312$MT&Mo))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$10306$MT&Mo))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$10312$MT&Mo
                                                                                       g$x$10313$MT&Mo)
                                                                                     (g$f$10304$MT&Mo
                                                                                       (cdr g$lhs*$10305$MT&Mo)
                                                                                       (cdr g$rhs*$10306$MT&Mo)))))))
                                                                            g$ls/false$10311$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$t$10314$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10315$MT&Mo)
                                                                                  (if g$ls/false$10315$MT&Mo
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$10316$MT&Mo)
                                                                                         (g$syntax-violation$9749$MT&Mo
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$10292$MT&Mo
                                                                                           g$others$10316$MT&Mo)))
                                                                                      g$ls/false$10315$MT&Mo)
                                                                                    (g$syntax-violation$9749$MT&Mo
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10314$MT&Mo))))
                                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                                 g$t$10314$MT&Mo
                                                                                 'any))))
                                                                           g$t$10310$MT&Mo))))
                                                                     (g$syntax-dispatch$9631$MT&Mo
                                                                       g$t$10310$MT&Mo
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$10307$MT&Mo))))
                                                           (g$syntax-dispatch$9631$MT&Mo
                                                             g$t$10307$MT&Mo
                                                             'each-any))))
                                                       (car g$lhs*$10305$MT&Mo)))))))
                                        g$f$10304$MT&Mo)
                                      g$lhs*$10300$MT&Mo
                                      g$rhs*$10301$MT&Mo))))
                                g$ls/false$10299$MT&Mo)
                              (g$syntax-violation$9749$MT&Mo
                                '#f
                                '"invalid syntax"
                                g$t$10298$MT&Mo))))
                         (g$syntax-dispatch$9631$MT&Mo
                           g$t$10298$MT&Mo
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$10294$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$10294$MT&Mo
                 '(_ () any . each-any)))))
           g$stx$10292$MT&Mo)))))
   (g$trace-lambda-macro$9600$MT&Mo
     g$trace-lambda-macro$13141$MT&Mo
     (case-lambda
       ((g$stx$10319$MT&Mo)
        ((case-lambda
           ((g$t$10320$MT&Mo)
            ((case-lambda
               ((g$ls/false$10321$MT&Mo)
                (if g$ls/false$10321$MT&Mo
                  (apply
                    (case-lambda
                      ((g$who$10322$MT&Mo
                         g$fmls$10323$MT&Mo
                         g$b$10324$MT&Mo
                         g$b*$10325$MT&Mo)
                       (if (g$valid-bound-ids?$9273$MT&Mo
                             g$fmls$10323$MT&Mo)
                         (g$bless$9594$MT&Mo
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$10322$MT&Mo)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$10323$MT&Mo
                                 (cons
                                   g$b$10324$MT&Mo
                                   g$b*$10325$MT&Mo)))))
                         (g$invalid-fmls-error$9596$MT&Mo
                           g$stx$10319$MT&Mo
                           g$fmls$10323$MT&Mo))))
                    g$ls/false$10321$MT&Mo)
                  ((case-lambda
                     ((g$t$10326$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$10327$MT&Mo)
                          (if g$ls/false$10327$MT&Mo
                            (apply
                              (case-lambda
                                ((g$who$10328$MT&Mo
                                   g$fmls$10329$MT&Mo
                                   g$last$10330$MT&Mo
                                   g$b$10331$MT&Mo
                                   g$b*$10332$MT&Mo)
                                 (if (g$valid-bound-ids?$9273$MT&Mo
                                       (cons
                                         g$last$10330$MT&Mo
                                         g$fmls$10329$MT&Mo))
                                   (g$bless$9594$MT&Mo
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$10328$MT&Mo)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$10329$MT&Mo
                                             g$last$10330$MT&Mo)
                                           (cons
                                             g$b$10331$MT&Mo
                                             g$b*$10332$MT&Mo)))))
                                   (g$invalid-fmls-error$9596$MT&Mo
                                     g$stx$10319$MT&Mo
                                     (append
                                       g$fmls$10329$MT&Mo
                                       g$last$10330$MT&Mo)))))
                              g$ls/false$10327$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$10326$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$10326$MT&Mo
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$10320$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10320$MT&Mo
               '(_ any each-any any . each-any)))))
         g$stx$10319$MT&Mo))))
   (g$trace-define-macro$9601$MT&Mo
     g$trace-define-macro$13142$MT&Mo
     (case-lambda
       ((g$stx$10333$MT&Mo)
        ((case-lambda
           ((g$t$10334$MT&Mo)
            ((case-lambda
               ((g$ls/false$10335$MT&Mo)
                (if g$ls/false$10335$MT&Mo
                  (apply
                    (case-lambda
                      ((g$who$10336$MT&Mo
                         g$fmls$10337$MT&Mo
                         g$b$10338$MT&Mo
                         g$b*$10339$MT&Mo)
                       (if (g$valid-bound-ids?$9273$MT&Mo
                             g$fmls$10337$MT&Mo)
                         (g$bless$9594$MT&Mo
                           (list
                             'define
                             g$who$10336$MT&Mo
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$10336$MT&Mo)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$10337$MT&Mo
                                   (cons
                                     g$b$10338$MT&Mo
                                     g$b*$10339$MT&Mo))))))
                         (g$invalid-fmls-error$9596$MT&Mo
                           g$stx$10333$MT&Mo
                           g$fmls$10337$MT&Mo))))
                    g$ls/false$10335$MT&Mo)
                  ((case-lambda
                     ((g$t$10340$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$10341$MT&Mo)
                          (if g$ls/false$10341$MT&Mo
                            (apply
                              (case-lambda
                                ((g$who$10342$MT&Mo
                                   g$fmls$10343$MT&Mo
                                   g$last$10344$MT&Mo
                                   g$b$10345$MT&Mo
                                   g$b*$10346$MT&Mo)
                                 (if (g$valid-bound-ids?$9273$MT&Mo
                                       (cons
                                         g$last$10344$MT&Mo
                                         g$fmls$10343$MT&Mo))
                                   (g$bless$9594$MT&Mo
                                     (list
                                       'define
                                       g$who$10342$MT&Mo
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$10342$MT&Mo)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$10343$MT&Mo
                                               g$last$10344$MT&Mo)
                                             (cons
                                               g$b$10345$MT&Mo
                                               g$b*$10346$MT&Mo))))))
                                   (g$invalid-fmls-error$9596$MT&Mo
                                     g$stx$10333$MT&Mo
                                     (append
                                       g$fmls$10343$MT&Mo
                                       g$last$10344$MT&Mo)))))
                              g$ls/false$10341$MT&Mo)
                            ((case-lambda
                               ((g$t$10347$MT&Mo)
                                ((case-lambda
                                   ((g$ls/false$10348$MT&Mo)
                                    (if g$ls/false$10348$MT&Mo
                                      (apply
                                        (case-lambda
                                          ((g$who$10349$MT&Mo
                                             g$expr$10350$MT&Mo)
                                           (if (g$id?$9268$MT&Mo
                                                 g$who$10349$MT&Mo)
                                             (g$bless$9594$MT&Mo
                                               (list
                                                 'define
                                                 g$who$10349$MT&Mo
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$10350$MT&Mo))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$10349$MT&Mo)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$9749$MT&Mo
                                               '#f
                                               '"invalid name"
                                               g$stx$10333$MT&Mo))))
                                        g$ls/false$10348$MT&Mo)
                                      (g$syntax-violation$9749$MT&Mo
                                        '#f
                                        '"invalid syntax"
                                        g$t$10347$MT&Mo))))
                                 (g$syntax-dispatch$9631$MT&Mo
                                   g$t$10347$MT&Mo
                                   '(_ any any)))))
                             g$t$10340$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$10340$MT&Mo
                         '(_ (any . #(each+ any () any))
                             any
                             .
                             each-any)))))
                   g$t$10334$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10334$MT&Mo
               '(_ (any . each-any) any . each-any)))))
         g$stx$10333$MT&Mo))))
   (g$trace-define-syntax-macro$9602$MT&Mo
     g$trace-define-syntax-macro$13143$MT&Mo
     (case-lambda
       ((g$stx$10351$MT&Mo)
        ((case-lambda
           ((g$t$10352$MT&Mo)
            ((case-lambda
               ((g$ls/false$10353$MT&Mo)
                (if g$ls/false$10353$MT&Mo
                  (apply
                    (case-lambda
                      ((g$who$10354$MT&Mo g$expr$10355$MT&Mo)
                       (if (g$id?$9268$MT&Mo g$who$10354$MT&Mo)
                         (g$bless$9594$MT&Mo
                           (list
                             'define-syntax
                             g$who$10354$MT&Mo
                             (list
                               'make-traced-macro
                               (list 'quote g$who$10354$MT&Mo)
                               g$expr$10355$MT&Mo)))
                         (g$syntax-violation$9749$MT&Mo
                           '#f
                           '"invalid name"
                           g$stx$10351$MT&Mo))))
                    g$ls/false$10353$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10352$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10352$MT&Mo
               '(_ any any)))))
         g$stx$10351$MT&Mo))))
   (g$trace-let/rec-syntax$9603$MT&Mo
     g$trace-let/rec-syntax$13144$MT&Mo
     (case-lambda
       ((g$who$10356$MT&Mo)
        (case-lambda
          ((g$stx$10357$MT&Mo)
           ((case-lambda
              ((g$t$10358$MT&Mo)
               ((case-lambda
                  ((g$ls/false$10359$MT&Mo)
                   (if g$ls/false$10359$MT&Mo
                     (apply
                       (case-lambda
                         ((g$lhs*$10360$MT&Mo
                            g$rhs*$10361$MT&Mo
                            g$b$10362$MT&Mo
                            g$b*$10363$MT&Mo)
                          (if (g$valid-bound-ids?$9273$MT&Mo
                                g$lhs*$10360$MT&Mo)
                            ((case-lambda
                               ((g$rhs*$10364$MT&Mo)
                                (g$bless$9594$MT&Mo
                                  (cons
                                    g$who$10356$MT&Mo
                                    (cons
                                      (g$map$5753$MT&Mo
                                        list
                                        g$lhs*$10360$MT&Mo
                                        g$rhs*$10364$MT&Mo)
                                      (cons
                                        g$b$10362$MT&Mo
                                        g$b*$10363$MT&Mo))))))
                             (g$map$5753$MT&Mo
                               (case-lambda
                                 ((g$lhs$10365$MT&Mo g$rhs$10366$MT&Mo)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$10365$MT&Mo)
                                    g$rhs$10366$MT&Mo)))
                               g$lhs*$10360$MT&Mo
                               g$rhs*$10361$MT&Mo))
                            (g$invalid-fmls-error$9596$MT&Mo
                              g$stx$10357$MT&Mo
                              g$lhs*$10360$MT&Mo))))
                       g$ls/false$10359$MT&Mo)
                     (g$syntax-violation$9749$MT&Mo
                       '#f
                       '"invalid syntax"
                       g$t$10358$MT&Mo))))
                (g$syntax-dispatch$9631$MT&Mo
                  g$t$10358$MT&Mo
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$10357$MT&Mo))))))
   (g$trace-let-syntax-macro$9604$MT&Mo
     g$trace-let-syntax-macro$13145$MT&Mo
     (g$trace-let/rec-syntax$9603$MT&Mo 'let-syntax))
   (g$trace-letrec-syntax-macro$9605$MT&Mo
     g$trace-letrec-syntax-macro$13146$MT&Mo
     (g$trace-let/rec-syntax$9603$MT&Mo 'letrec-syntax))
   (g$guard-macro$9606$MT&Mo
     g$guard-macro$13147$MT&Mo
     (case-lambda
       ((g$x$10367$MT&Mo)
        (letrec* ((g$gen-clauses$10368$MT&Mo
                    (case-lambda
                      ((g$con$10380$MT&Mo
                         g$outerk$10381$MT&Mo
                         g$clause*$10382$MT&Mo)
                       (letrec* ((g$f$10383$MT&Mo
                                   (case-lambda
                                     ((g$x$10411$MT&Mo g$k$10412$MT&Mo)
                                      ((case-lambda
                                         ((g$t$10413$MT&Mo)
                                          ((case-lambda
                                             ((g$ls/false$10414$MT&Mo)
                                              (if g$ls/false$10414$MT&Mo
                                                (apply
                                                  (case-lambda
                                                    ((g$e$10415$MT&Mo
                                                       g$p$10416$MT&Mo)
                                                     ((case-lambda
                                                        ((g$t$10417$MT&Mo)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$10417$MT&Mo
                                                               g$e$10415$MT&Mo))
                                                           (list
                                                             'if
                                                             g$t$10417$MT&Mo
                                                             (list
                                                               g$p$10416$MT&Mo
                                                               g$t$10417$MT&Mo)
                                                             g$k$10412$MT&Mo))))
                                                      (gensym))))
                                                  g$ls/false$10414$MT&Mo)
                                                ((case-lambda
                                                   ((g$t$10418$MT&Mo)
                                                    ((case-lambda
                                                       ((g$ls/false$10419$MT&Mo)
                                                        (if g$ls/false$10419$MT&Mo
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$10420$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$t$10421$MT&Mo)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$10421$MT&Mo
                                                                         g$e$10420$MT&Mo))
                                                                     (list
                                                                       'if
                                                                       g$t$10421$MT&Mo
                                                                       g$t$10421$MT&Mo
                                                                       g$k$10412$MT&Mo))))
                                                                (gensym))))
                                                            g$ls/false$10419$MT&Mo)
                                                          ((case-lambda
                                                             ((g$t$10422$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$ls/false$10423$MT&Mo)
                                                                  (if g$ls/false$10423$MT&Mo
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$10424$MT&Mo
                                                                           g$v$10425$MT&Mo
                                                                           g$v*$10426$MT&Mo)
                                                                         (list
                                                                           'if
                                                                           g$e$10424$MT&Mo
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$10425$MT&Mo
                                                                               g$v*$10426$MT&Mo))
                                                                           g$k$10412$MT&Mo)))
                                                                      g$ls/false$10423$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$t$10427$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10428$MT&Mo)
                                                                            (if g$ls/false$10428$MT&Mo
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$9749$MT&Mo
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$10411$MT&Mo)))
                                                                                g$ls/false$10428$MT&Mo)
                                                                              (g$syntax-violation$9749$MT&Mo
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$10427$MT&Mo))))
                                                                         (g$syntax-dispatch$9631$MT&Mo
                                                                           g$t$10427$MT&Mo
                                                                           '_))))
                                                                     g$t$10422$MT&Mo))))
                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                 g$t$10422$MT&Mo
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$10418$MT&Mo))))
                                                     (g$syntax-dispatch$9631$MT&Mo
                                                       g$t$10418$MT&Mo
                                                       '(any)))))
                                                 g$t$10413$MT&Mo))))
                                           (g$syntax-dispatch$9631$MT&Mo
                                             g$t$10413$MT&Mo
                                             '(any #(scheme-id =>)
                                                   any)))))
                                       g$x$10411$MT&Mo))))
                                 (g$f*$10384$MT&Mo
                                   (case-lambda
                                     ((g$x*$10391$MT&Mo)
                                      ((case-lambda
                                         ((g$t$10392$MT&Mo)
                                          ((case-lambda
                                             ((g$ls/false$10393$MT&Mo)
                                              (if g$ls/false$10393$MT&Mo
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$10380$MT&Mo)
                                                       '#t)))
                                                  g$ls/false$10393$MT&Mo)
                                                ((case-lambda
                                                   ((g$t$10394$MT&Mo)
                                                    ((case-lambda
                                                       ((g$ls/false$10395$MT&Mo)
                                                        (if g$ls/false$10395$MT&Mo
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$10396$MT&Mo
                                                                 g$e*$10397$MT&Mo)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$10396$MT&Mo
                                                                     g$e*$10397$MT&Mo))
                                                                 '#f)))
                                                            g$ls/false$10395$MT&Mo)
                                                          ((case-lambda
                                                             ((g$t$10398$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$ls/false$10399$MT&Mo)
                                                                  (if g$ls/false$10399$MT&Mo
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$10400$MT&Mo
                                                                           g$cls*$10401$MT&Mo)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$10384$MT&Mo
                                                                                g$cls*$10401$MT&Mo)))
                                                                           (case-lambda
                                                                             ((g$e$10404$MT&Mo
                                                                                g$g$10405$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$g$10406$MT&Mo
                                                                                    g$e$10407$MT&Mo)
                                                                                  (values
                                                                                    (g$f$10383$MT&Mo
                                                                                      g$cls$10400$MT&Mo
                                                                                      g$e$10407$MT&Mo)
                                                                                    g$g$10406$MT&Mo)))
                                                                               g$g$10405$MT&Mo
                                                                               g$e$10404$MT&Mo))))))
                                                                      g$ls/false$10399$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$t$10408$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10409$MT&Mo)
                                                                            (if g$ls/false$10409$MT&Mo
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$10410$MT&Mo)
                                                                                   (g$syntax-violation$9749$MT&Mo
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$10410$MT&Mo)))
                                                                                g$ls/false$10409$MT&Mo)
                                                                              (g$syntax-violation$9749$MT&Mo
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$10408$MT&Mo))))
                                                                         (g$syntax-dispatch$9631$MT&Mo
                                                                           g$t$10408$MT&Mo
                                                                           'any))))
                                                                     g$t$10398$MT&Mo))))
                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                 g$t$10398$MT&Mo
                                                                 '(any .
                                                                       any)))))
                                                           g$t$10394$MT&Mo))))
                                                     (g$syntax-dispatch$9631$MT&Mo
                                                       g$t$10394$MT&Mo
                                                       '((#(scheme-id
                                                            else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$10392$MT&Mo))))
                                           (g$syntax-dispatch$9631$MT&Mo
                                             g$t$10392$MT&Mo
                                             '()))))
                                       g$x*$10391$MT&Mo)))))
                         (call-with-values
                           (case-lambda
                             (()
                              (g$f*$10384$MT&Mo g$clause*$10382$MT&Mo)))
                           (case-lambda
                             ((g$code$10387$MT&Mo g$raisek$10388$MT&Mo)
                              ((case-lambda
                                 ((g$raisek$10389$MT&Mo
                                    g$code$10390$MT&Mo)
                                  (if g$raisek$10389$MT&Mo
                                    (list
                                      g$outerk$10381$MT&Mo
                                      g$code$10390$MT&Mo)
                                    g$code$10390$MT&Mo)))
                               g$raisek$10388$MT&Mo
                               g$code$10387$MT&Mo)))))))))
          ((case-lambda
             ((g$t$10369$MT&Mo)
              ((case-lambda
                 ((g$ls/false$10370$MT&Mo)
                  (if (if g$ls/false$10370$MT&Mo
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$10371$MT&Mo
                                 g$clause*$10372$MT&Mo
                                 g$b$10373$MT&Mo
                                 g$b*$10374$MT&Mo)
                               (g$id?$9268$MT&Mo g$con$10371$MT&Mo)))
                            g$ls/false$10370$MT&Mo))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$10375$MT&Mo
                           g$clause*$10376$MT&Mo
                           g$b$10377$MT&Mo
                           g$b*$10378$MT&Mo)
                         ((case-lambda
                            ((g$outerk$10379$MT&Mo)
                             (g$bless$9594$MT&Mo
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$10379$MT&Mo)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$10375$MT&Mo)
                                           (g$gen-clauses$10368$MT&Mo
                                             g$con$10375$MT&Mo
                                             g$outerk$10379$MT&Mo
                                             g$clause*$10376$MT&Mo))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$10377$MT&Mo
                                                 g$b*$10378$MT&Mo))))))))))))
                          (gensym))))
                      g$ls/false$10370$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$10369$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$10369$MT&Mo
                 '(_ (any . each-any) any . each-any)))))
           g$x$10367$MT&Mo)))))
   (g$define-enumeration-macro$9607$MT&Mo
     g$define-enumeration-macro$13148$MT&Mo
     (case-lambda
       ((g$stx$10429$MT&Mo)
        (letrec* ((g$set?$10430$MT&Mo
                    (case-lambda
                      ((g$x$10443$MT&Mo)
                       ((case-lambda
                          ((g$t$10444$MT&Mo)
                           (if g$t$10444$MT&Mo
                             g$t$10444$MT&Mo
                             (begin
                               '#f
                               (if (not (g$memq$5745$MT&Mo
                                          (car g$x$10443$MT&Mo)
                                          (cdr g$x$10443$MT&Mo)))
                                 (begin
                                   '#f
                                   (g$set?$10430$MT&Mo
                                     (cdr g$x$10443$MT&Mo)))
                                 '#f)))))
                        (null? g$x$10443$MT&Mo)))))
                  (g$remove-dups$10431$MT&Mo
                    (case-lambda
                      ((g$ls$10442$MT&Mo)
                       (if (null? g$ls$10442$MT&Mo)
                         '()
                         (cons
                           (car g$ls$10442$MT&Mo)
                           (g$remove-dups$10431$MT&Mo
                             (g$remq$5760$MT&Mo
                               (car g$ls$10442$MT&Mo)
                               (cdr g$ls$10442$MT&Mo)))))))))
          ((case-lambda
             ((g$t$10432$MT&Mo)
              ((case-lambda
                 ((g$ls/false$10433$MT&Mo)
                  (if (if g$ls/false$10433$MT&Mo
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$10434$MT&Mo
                                 g$id*$10435$MT&Mo
                                 g$maker$10436$MT&Mo)
                               (if (g$id?$9268$MT&Mo g$name$10434$MT&Mo)
                                 (if (g$id?$9268$MT&Mo
                                       g$maker$10436$MT&Mo)
                                   (begin
                                     '#f
                                     (g$for-all$5751$MT&Mo
                                       g$id?$9268$MT&Mo
                                       g$id*$10435$MT&Mo))
                                   '#f)
                                 '#f)))
                            g$ls/false$10433$MT&Mo))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$10437$MT&Mo
                           g$id*$10438$MT&Mo
                           g$maker$10439$MT&Mo)
                         ((case-lambda
                            ((g$name*$10440$MT&Mo g$mk$10441$MT&Mo)
                             (g$bless$9594$MT&Mo
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$10441$MT&Mo
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list
                                         'quote
                                         g$name*$10440$MT&Mo))))
                                 (list
                                   'define-syntax
                                   g$name$10437$MT&Mo
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list
                                               'quote
                                               g$name*$10440$MT&Mo))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list
                                                 'quote
                                                 g$name$10437$MT&Mo)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$10439$MT&Mo
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$10439$MT&Mo)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$10440$MT&Mo))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$10439$MT&Mo)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$10441$MT&Mo
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$10431$MT&Mo
                            (g$syntax->datum$9752$MT&Mo
                              g$id*$10438$MT&Mo))
                          (gensym))))
                      g$ls/false$10433$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$10432$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$10432$MT&Mo
                 '(_ any each-any any)))))
           g$stx$10429$MT&Mo)))))
   (g$time-macro$9608$MT&Mo
     g$time-macro$13149$MT&Mo
     (case-lambda
       ((g$stx$10445$MT&Mo)
        ((case-lambda
           ((g$t$10446$MT&Mo)
            ((case-lambda
               ((g$ls/false$10447$MT&Mo)
                (if g$ls/false$10447$MT&Mo
                  (apply
                    (case-lambda
                      ((g$expr$10448$MT&Mo)
                       ((case-lambda
                          ((g$str$10449$MT&Mo)
                           (g$bless$9594$MT&Mo
                             (list
                               'time-it
                               g$str$10449$MT&Mo
                               (list 'lambda '() g$expr$10448$MT&Mo)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$7772$MT&Mo)))
                          (case-lambda
                            ((g$p$10452$MT&Mo g$e$10453$MT&Mo)
                             ((case-lambda
                                ((g$e$10454$MT&Mo g$p$10455$MT&Mo)
                                 (begin
                                   (write
                                     (g$syntax->datum$9752$MT&Mo
                                       g$expr$10448$MT&Mo)
                                     g$p$10455$MT&Mo)
                                   (g$e$10454$MT&Mo))))
                              g$e$10453$MT&Mo
                              g$p$10452$MT&Mo)))))))
                    g$ls/false$10447$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10446$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10446$MT&Mo '(_ any)))))
         g$stx$10445$MT&Mo))))
   (g$delay-macro$9609$MT&Mo
     g$delay-macro$13150$MT&Mo
     (case-lambda
       ((g$stx$10456$MT&Mo)
        ((case-lambda
           ((g$t$10457$MT&Mo)
            ((case-lambda
               ((g$ls/false$10458$MT&Mo)
                (if g$ls/false$10458$MT&Mo
                  (apply
                    (case-lambda
                      ((g$expr$10459$MT&Mo)
                       (g$bless$9594$MT&Mo
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$10459$MT&Mo)))))
                    g$ls/false$10458$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10457$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10457$MT&Mo '(_ any)))))
         g$stx$10456$MT&Mo))))
   (g$assert-macro$9610$MT&Mo
     g$assert-macro$13151$MT&Mo
     (case-lambda
       ((g$stx$10460$MT&Mo)
        ((case-lambda
           ((g$t$10461$MT&Mo)
            ((case-lambda
               ((g$ls/false$10462$MT&Mo)
                (if g$ls/false$10462$MT&Mo
                  (apply
                    (case-lambda
                      ((g$expr$10463$MT&Mo)
                       ((case-lambda
                          ((g$pos$10464$MT&Mo)
                           (g$bless$9594$MT&Mo
                             (list
                               'unless
                               g$expr$10463$MT&Mo
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$10463$MT&Mo)
                                 (list 'quote g$pos$10464$MT&Mo))))))
                        ((case-lambda
                           ((g$t$10465$MT&Mo)
                            (if g$t$10465$MT&Mo
                              g$t$10465$MT&Mo
                              (begin
                                '#f
                                (g$expression-position$9744$MT&Mo
                                  g$expr$10463$MT&Mo)))))
                         (g$expression-position$9744$MT&Mo
                           g$stx$10460$MT&Mo)))))
                    g$ls/false$10462$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10461$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10461$MT&Mo '(_ any)))))
         g$stx$10460$MT&Mo))))
   (g$endianness-macro$9611$MT&Mo
     g$endianness-macro$13152$MT&Mo
     (case-lambda
       ((g$stx$10466$MT&Mo)
        ((case-lambda
           ((g$t$10467$MT&Mo)
            ((case-lambda
               ((g$ls/false$10468$MT&Mo)
                (if g$ls/false$10468$MT&Mo
                  (apply
                    (case-lambda
                      ((g$e$10469$MT&Mo)
                       ((case-lambda
                          ((g$t$10470$MT&Mo)
                           (if (eqv? g$t$10470$MT&Mo 'little)
                             (g$bless$9594$MT&Mo ''little)
                             (if (eqv? g$t$10470$MT&Mo 'big)
                               (g$bless$9594$MT&Mo ''big)
                               (g$syntax-violation$9749$MT&Mo
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$10466$MT&Mo)))))
                        (g$syntax->datum$9752$MT&Mo g$e$10469$MT&Mo))))
                    g$ls/false$10468$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10467$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10467$MT&Mo '(_ any)))))
         g$stx$10466$MT&Mo))))
   (g$identifier-syntax-macro$9612$MT&Mo
     g$identifier-syntax-macro$13153$MT&Mo
     (case-lambda
       ((g$stx$10471$MT&Mo)
        ((case-lambda
           ((g$t$10472$MT&Mo)
            ((case-lambda
               ((g$ls/false$10473$MT&Mo)
                (if g$ls/false$10473$MT&Mo
                  (apply
                    (case-lambda
                      ((g$expr$10474$MT&Mo)
                       (g$bless$9594$MT&Mo
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$10474$MT&Mo))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$10474$MT&Mo)
                                   '(#'(e* ...))))))))))
                    g$ls/false$10473$MT&Mo)
                  ((case-lambda
                     ((g$t$10475$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$10476$MT&Mo)
                          (if (if g$ls/false$10476$MT&Mo
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$10477$MT&Mo
                                         g$expr1$10478$MT&Mo
                                         g$id2$10479$MT&Mo
                                         g$expr2$10480$MT&Mo
                                         g$expr3$10481$MT&Mo)
                                       (if (g$id?$9268$MT&Mo
                                             g$id1$10477$MT&Mo)
                                         (if (g$id?$9268$MT&Mo
                                               g$id2$10479$MT&Mo)
                                           (begin
                                             '#f
                                             (g$id?$9268$MT&Mo
                                               g$expr2$10480$MT&Mo))
                                           '#f)
                                         '#f)))
                                    g$ls/false$10476$MT&Mo))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$10482$MT&Mo
                                   g$expr1$10483$MT&Mo
                                   g$id2$10484$MT&Mo
                                   g$expr2$10485$MT&Mo
                                   g$expr3$10486$MT&Mo)
                                 (g$bless$9594$MT&Mo
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             g$expr1$10483$MT&Mo))
                                         (list
                                           (list
                                             'set!
                                             'id
                                             g$expr2$10485$MT&Mo)
                                           (list
                                             'syntax
                                             g$expr3$10486$MT&Mo))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$10483$MT&Mo
                                               '(e* ...))))))))))
                              g$ls/false$10476$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$10475$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$10475$MT&Mo
                         '(_ (any any)
                             ((#(scheme-id set!) any any) any))))))
                   g$t$10472$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10472$MT&Mo '(_ any)))))
         g$stx$10471$MT&Mo))))
   (g$do-macro$9613$MT&Mo
     g$do-macro$13154$MT&Mo
     (case-lambda
       ((g$stx$10487$MT&Mo)
        (letrec* ((g$bind$10488$MT&Mo
                    (case-lambda
                      ((g$x$10500$MT&Mo)
                       ((case-lambda
                          ((g$t$10501$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$10502$MT&Mo)
                               (if g$ls/false$10502$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$x$10503$MT&Mo
                                        g$init$10504$MT&Mo)
                                      (list
                                        g$x$10503$MT&Mo
                                        g$init$10504$MT&Mo
                                        g$x$10503$MT&Mo)))
                                   g$ls/false$10502$MT&Mo)
                                 ((case-lambda
                                    ((g$t$10505$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$10506$MT&Mo)
                                         (if g$ls/false$10506$MT&Mo
                                           (apply
                                             (case-lambda
                                               ((g$x$10507$MT&Mo
                                                  g$init$10508$MT&Mo
                                                  g$step$10509$MT&Mo)
                                                (list
                                                  g$x$10507$MT&Mo
                                                  g$init$10508$MT&Mo
                                                  g$step$10509$MT&Mo)))
                                             g$ls/false$10506$MT&Mo)
                                           ((case-lambda
                                              ((g$t$10510$MT&Mo)
                                               ((case-lambda
                                                  ((g$ls/false$10511$MT&Mo)
                                                   (if g$ls/false$10511$MT&Mo
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$9749$MT&Mo
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$10487$MT&Mo)))
                                                       g$ls/false$10511$MT&Mo)
                                                     (g$syntax-violation$9749$MT&Mo
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10510$MT&Mo))))
                                                (g$syntax-dispatch$9631$MT&Mo
                                                  g$t$10510$MT&Mo
                                                  '_))))
                                            g$t$10505$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$10505$MT&Mo
                                        '(any any any)))))
                                  g$t$10501$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$10501$MT&Mo
                              '(any any)))))
                        g$x$10500$MT&Mo)))))
          ((case-lambda
             ((g$t$10489$MT&Mo)
              ((case-lambda
                 ((g$ls/false$10490$MT&Mo)
                  (if g$ls/false$10490$MT&Mo
                    (apply
                      (case-lambda
                        ((g$binding*$10491$MT&Mo
                           g$test$10492$MT&Mo
                           g$expr*$10493$MT&Mo
                           g$command*$10494$MT&Mo)
                         ((case-lambda
                            ((g$t$10495$MT&Mo)
                             ((case-lambda
                                ((g$ls/false$10496$MT&Mo)
                                 (if g$ls/false$10496$MT&Mo
                                   (apply
                                     (case-lambda
                                       ((g$x*$10497$MT&Mo
                                          g$init*$10498$MT&Mo
                                          g$step*$10499$MT&Mo)
                                        (if (g$valid-bound-ids?$9273$MT&Mo
                                              g$x*$10497$MT&Mo)
                                          (g$bless$9594$MT&Mo
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$10497$MT&Mo
                                                    (list
                                                      'if
                                                      g$test$10492$MT&Mo
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$10493$MT&Mo))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$10494$MT&Mo
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$10499$MT&Mo))))))))
                                              (cons
                                                'loop
                                                g$init*$10498$MT&Mo)))
                                          (g$syntax-violation$9749$MT&Mo
                                            '#f
                                            '"invalid bindings"
                                            g$stx$10487$MT&Mo))))
                                     g$ls/false$10496$MT&Mo)
                                   (g$syntax-violation$9749$MT&Mo
                                     '#f
                                     '"invalid syntax"
                                     g$t$10495$MT&Mo))))
                              (g$syntax-dispatch$9631$MT&Mo
                                g$t$10495$MT&Mo
                                '#(each (any any any))))))
                          (g$map$5753$MT&Mo
                            g$bind$10488$MT&Mo
                            g$binding*$10491$MT&Mo))))
                      g$ls/false$10490$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$10489$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$10489$MT&Mo
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$10487$MT&Mo)))))
   (g$let*-macro$9614$MT&Mo
     g$let*-macro$13155$MT&Mo
     (case-lambda
       ((g$stx$10512$MT&Mo)
        ((case-lambda
           ((g$t$10513$MT&Mo)
            ((case-lambda
               ((g$ls/false$10514$MT&Mo)
                (if (if g$ls/false$10514$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$10515$MT&Mo
                               g$rhs*$10516$MT&Mo
                               g$b$10517$MT&Mo
                               g$b*$10518$MT&Mo)
                             (g$for-all$5751$MT&Mo
                               g$id?$9268$MT&Mo
                               g$lhs*$10515$MT&Mo)))
                          g$ls/false$10514$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$10519$MT&Mo
                         g$rhs*$10520$MT&Mo
                         g$b$10521$MT&Mo
                         g$b*$10522$MT&Mo)
                       (g$bless$9594$MT&Mo
                         ((letrec ((g$f$10523$MT&Mo
                                     (case-lambda
                                       ((g$x*$10524$MT&Mo)
                                        (if (null? g$x*$10524$MT&Mo)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$10521$MT&Mo
                                                g$b*$10522$MT&Mo)))
                                          (if (null?
                                                (cdr g$x*$10524$MT&Mo))
                                            (cons
                                              'let
                                              (cons
                                                (list
                                                  (car g$x*$10524$MT&Mo))
                                                (cons
                                                  g$b$10521$MT&Mo
                                                  g$b*$10522$MT&Mo)))
                                            (list
                                              'let
                                              (list
                                                (car g$x*$10524$MT&Mo))
                                              (g$f$10523$MT&Mo
                                                (cdr g$x*$10524$MT&Mo)))))))))
                            g$f$10523$MT&Mo)
                          (g$map$5753$MT&Mo
                            list
                            g$lhs*$10519$MT&Mo
                            g$rhs*$10520$MT&Mo)))))
                    g$ls/false$10514$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10513$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10513$MT&Mo
               '(_ #(each (any any)) any . each-any)))))
         g$stx$10512$MT&Mo))))
   (g$or-macro$9615$MT&Mo
     g$or-macro$13156$MT&Mo
     (case-lambda
       ((g$stx$10525$MT&Mo)
        ((case-lambda
           ((g$t$10526$MT&Mo)
            ((case-lambda
               ((g$ls/false$10527$MT&Mo)
                (if g$ls/false$10527$MT&Mo
                  (apply (case-lambda (() '#f)) g$ls/false$10527$MT&Mo)
                  ((case-lambda
                     ((g$t$10528$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$10529$MT&Mo)
                          (if g$ls/false$10529$MT&Mo
                            (apply
                              (case-lambda
                                ((g$e$10530$MT&Mo g$e*$10531$MT&Mo)
                                 (g$bless$9594$MT&Mo
                                   ((letrec ((g$f$10532$MT&Mo
                                               (case-lambda
                                                 ((g$e$10533$MT&Mo
                                                    g$e*$10534$MT&Mo)
                                                  (if (null?
                                                        g$e*$10534$MT&Mo)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$10533$MT&Mo)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$10533$MT&Mo))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$10532$MT&Mo
                                                          (car g$e*$10534$MT&Mo)
                                                          (cdr g$e*$10534$MT&Mo)))))))))
                                      g$f$10532$MT&Mo)
                                    g$e$10530$MT&Mo
                                    g$e*$10531$MT&Mo))))
                              g$ls/false$10529$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$10528$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$10528$MT&Mo
                         '(_ any . each-any)))))
                   g$t$10526$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10526$MT&Mo '(_)))))
         g$stx$10525$MT&Mo))))
   (g$and-macro$9616$MT&Mo
     g$and-macro$13157$MT&Mo
     (case-lambda
       ((g$stx$10535$MT&Mo)
        ((case-lambda
           ((g$t$10536$MT&Mo)
            ((case-lambda
               ((g$ls/false$10537$MT&Mo)
                (if g$ls/false$10537$MT&Mo
                  (apply (case-lambda (() '#t)) g$ls/false$10537$MT&Mo)
                  ((case-lambda
                     ((g$t$10538$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$10539$MT&Mo)
                          (if g$ls/false$10539$MT&Mo
                            (apply
                              (case-lambda
                                ((g$e$10540$MT&Mo g$e*$10541$MT&Mo)
                                 (g$bless$9594$MT&Mo
                                   ((letrec ((g$f$10542$MT&Mo
                                               (case-lambda
                                                 ((g$e$10543$MT&Mo
                                                    g$e*$10544$MT&Mo)
                                                  (if (null?
                                                        g$e*$10544$MT&Mo)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$10543$MT&Mo)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$10543$MT&Mo
                                                        (cons
                                                          (g$f$10542$MT&Mo
                                                            (car g$e*$10544$MT&Mo)
                                                            (cdr g$e*$10544$MT&Mo))
                                                          '(#f)))))))))
                                      g$f$10542$MT&Mo)
                                    g$e$10540$MT&Mo
                                    g$e*$10541$MT&Mo))))
                              g$ls/false$10539$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$10538$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$10538$MT&Mo
                         '(_ any . each-any)))))
                   g$t$10536$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$10536$MT&Mo '(_)))))
         g$stx$10535$MT&Mo))))
   (g$cond-macro$9617$MT&Mo
     g$cond-macro$13158$MT&Mo
     (case-lambda
       ((g$stx$10545$MT&Mo)
        ((case-lambda
           ((g$t$10546$MT&Mo)
            ((case-lambda
               ((g$ls/false$10547$MT&Mo)
                (if g$ls/false$10547$MT&Mo
                  (apply
                    (case-lambda
                      ((g$cls$10548$MT&Mo g$cls*$10549$MT&Mo)
                       (g$bless$9594$MT&Mo
                         ((letrec ((g$f$10550$MT&Mo
                                     (case-lambda
                                       ((g$cls$10551$MT&Mo
                                          g$cls*$10552$MT&Mo)
                                        (if (null? g$cls*$10552$MT&Mo)
                                          ((case-lambda
                                             ((g$t$10553$MT&Mo)
                                              ((case-lambda
                                                 ((g$ls/false$10554$MT&Mo)
                                                  (if g$ls/false$10554$MT&Mo
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$10555$MT&Mo
                                                           g$e*$10556$MT&Mo)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$10555$MT&Mo
                                                             g$e*$10556$MT&Mo))))
                                                      g$ls/false$10554$MT&Mo)
                                                    ((case-lambda
                                                       ((g$t$10557$MT&Mo)
                                                        ((case-lambda
                                                           ((g$ls/false$10558$MT&Mo)
                                                            (if g$ls/false$10558$MT&Mo
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$10559$MT&Mo
                                                                     g$p$10560$MT&Mo)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$10559$MT&Mo))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$10560$MT&Mo
                                                                         '(t))))))
                                                                g$ls/false$10558$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$t$10561$MT&Mo)
                                                                  ((case-lambda
                                                                     ((g$ls/false$10562$MT&Mo)
                                                                      (if g$ls/false$10562$MT&Mo
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$10563$MT&Mo)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$10563$MT&Mo
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$10562$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$t$10564$MT&Mo)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10565$MT&Mo)
                                                                                (if g$ls/false$10565$MT&Mo
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$10566$MT&Mo
                                                                                         g$e*$10567$MT&Mo)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$10566$MT&Mo
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$10567$MT&Mo))))
                                                                                    g$ls/false$10565$MT&Mo)
                                                                                  ((case-lambda
                                                                                     ((g$t$10568$MT&Mo)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10569$MT&Mo)
                                                                                          (if g$ls/false$10569$MT&Mo
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9749$MT&Mo
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$10545$MT&Mo)))
                                                                                              g$ls/false$10569$MT&Mo)
                                                                                            (g$syntax-violation$9749$MT&Mo
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10568$MT&Mo))))
                                                                                       (g$syntax-dispatch$9631$MT&Mo
                                                                                         g$t$10568$MT&Mo
                                                                                         '_))))
                                                                                   g$t$10564$MT&Mo))))
                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                               g$t$10564$MT&Mo
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$10561$MT&Mo))))
                                                                   (g$syntax-dispatch$9631$MT&Mo
                                                                     g$t$10561$MT&Mo
                                                                     '(any)))))
                                                               g$t$10557$MT&Mo))))
                                                         (g$syntax-dispatch$9631$MT&Mo
                                                           g$t$10557$MT&Mo
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$10553$MT&Mo))))
                                               (g$syntax-dispatch$9631$MT&Mo
                                                 g$t$10553$MT&Mo
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$10551$MT&Mo)
                                          ((case-lambda
                                             ((g$t$10570$MT&Mo)
                                              ((case-lambda
                                                 ((g$ls/false$10571$MT&Mo)
                                                  (if g$ls/false$10571$MT&Mo
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$10572$MT&Mo
                                                           g$e*$10573$MT&Mo)
                                                         (g$syntax-violation$9749$MT&Mo
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$10545$MT&Mo)))
                                                      g$ls/false$10571$MT&Mo)
                                                    ((case-lambda
                                                       ((g$t$10574$MT&Mo)
                                                        ((case-lambda
                                                           ((g$ls/false$10575$MT&Mo)
                                                            (if g$ls/false$10575$MT&Mo
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$10576$MT&Mo
                                                                     g$p$10577$MT&Mo)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$10576$MT&Mo))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$10577$MT&Mo
                                                                         '(t))
                                                                       (g$f$10550$MT&Mo
                                                                         (car g$cls*$10552$MT&Mo)
                                                                         (cdr g$cls*$10552$MT&Mo))))))
                                                                g$ls/false$10575$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$t$10578$MT&Mo)
                                                                  ((case-lambda
                                                                     ((g$ls/false$10579$MT&Mo)
                                                                      (if g$ls/false$10579$MT&Mo
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$10580$MT&Mo)
                                                                             (list
                                                                               'or
                                                                               g$e$10580$MT&Mo
                                                                               (g$f$10550$MT&Mo
                                                                                 (car g$cls*$10552$MT&Mo)
                                                                                 (cdr g$cls*$10552$MT&Mo)))))
                                                                          g$ls/false$10579$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$t$10581$MT&Mo)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10582$MT&Mo)
                                                                                (if g$ls/false$10582$MT&Mo
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$10583$MT&Mo
                                                                                         g$e*$10584$MT&Mo)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$10583$MT&Mo
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$10584$MT&Mo)
                                                                                         (g$f$10550$MT&Mo
                                                                                           (car g$cls*$10552$MT&Mo)
                                                                                           (cdr g$cls*$10552$MT&Mo)))))
                                                                                    g$ls/false$10582$MT&Mo)
                                                                                  ((case-lambda
                                                                                     ((g$t$10585$MT&Mo)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10586$MT&Mo)
                                                                                          (if g$ls/false$10586$MT&Mo
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9749$MT&Mo
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$10545$MT&Mo)))
                                                                                              g$ls/false$10586$MT&Mo)
                                                                                            (g$syntax-violation$9749$MT&Mo
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10585$MT&Mo))))
                                                                                       (g$syntax-dispatch$9631$MT&Mo
                                                                                         g$t$10585$MT&Mo
                                                                                         '_))))
                                                                                   g$t$10581$MT&Mo))))
                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                               g$t$10581$MT&Mo
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$10578$MT&Mo))))
                                                                   (g$syntax-dispatch$9631$MT&Mo
                                                                     g$t$10578$MT&Mo
                                                                     '(any)))))
                                                               g$t$10574$MT&Mo))))
                                                         (g$syntax-dispatch$9631$MT&Mo
                                                           g$t$10574$MT&Mo
                                                           '(any #(scheme-id
                                                                   =>)
                                                                 any)))))
                                                     g$t$10570$MT&Mo))))
                                               (g$syntax-dispatch$9631$MT&Mo
                                                 g$t$10570$MT&Mo
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$10551$MT&Mo))))))
                            g$f$10550$MT&Mo)
                          g$cls$10548$MT&Mo
                          g$cls*$10549$MT&Mo))))
                    g$ls/false$10547$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10546$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10546$MT&Mo
               '(_ any . each-any)))))
         g$stx$10545$MT&Mo))))
   (g$do-include$9618$MT&Mo
     g$do-include$13159$MT&Mo
     (case-lambda
       ((g$stx$10587$MT&Mo g$id$10588$MT&Mo g$filename$10589$MT&Mo)
        ((case-lambda
           ((g$filename$10590$MT&Mo)
            (begin
              (if (not (if (string? g$filename$10590$MT&Mo)
                         (begin '#f (g$id?$9268$MT&Mo g$id$10588$MT&Mo))
                         '#f))
                (g$syntax-violation$9749$MT&Mo
                  '#f
                  '"invalid syntax"
                  g$stx$10587$MT&Mo)
                (void))
              (cons
                (g$bless$9594$MT&Mo 'begin)
                (g$with-input-from-file$7831$MT&Mo
                  g$filename$10590$MT&Mo
                  (case-lambda
                    (()
                     ((letrec ((g$f$10591$MT&Mo
                                 (case-lambda
                                   ((g$ls$10592$MT&Mo)
                                    ((case-lambda
                                       ((g$x$10593$MT&Mo)
                                        (if (eof-object?
                                              g$x$10593$MT&Mo)
                                          (g$reverse$6409$MT&Mo
                                            g$ls$10592$MT&Mo)
                                          (g$f$10591$MT&Mo
                                            (cons
                                              (g$datum->stx$9251$MT&Mo
                                                g$id$10588$MT&Mo
                                                g$x$10593$MT&Mo)
                                              g$ls$10592$MT&Mo)))))
                                     (read-annotated))))))
                        g$f$10591$MT&Mo)
                      '()))))))))
         (g$stx->datum$9279$MT&Mo g$filename$10589$MT&Mo)))))
   (g$include-macro$9619$MT&Mo
     g$include-macro$13160$MT&Mo
     (case-lambda
       ((g$e$10594$MT&Mo)
        ((case-lambda
           ((g$t$10595$MT&Mo)
            ((case-lambda
               ((g$ls/false$10596$MT&Mo)
                (if g$ls/false$10596$MT&Mo
                  (apply
                    (case-lambda
                      ((g$id$10597$MT&Mo g$filename$10598$MT&Mo)
                       (g$do-include$9618$MT&Mo
                         g$e$10594$MT&Mo
                         g$id$10597$MT&Mo
                         g$filename$10598$MT&Mo)))
                    g$ls/false$10596$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10595$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10595$MT&Mo
               '(any any)))))
         g$e$10594$MT&Mo))))
   (g$include-into-macro$9620$MT&Mo
     g$include-into-macro$13161$MT&Mo
     (case-lambda
       ((g$e$10599$MT&Mo)
        ((case-lambda
           ((g$t$10600$MT&Mo)
            ((case-lambda
               ((g$ls/false$10601$MT&Mo)
                (if g$ls/false$10601$MT&Mo
                  (apply
                    (case-lambda
                      ((g$id$10602$MT&Mo g$filename$10603$MT&Mo)
                       (g$do-include$9618$MT&Mo
                         g$e$10599$MT&Mo
                         g$id$10602$MT&Mo
                         g$filename$10603$MT&Mo)))
                    g$ls/false$10601$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10600$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10600$MT&Mo
               '(_ any any)))))
         g$e$10599$MT&Mo))))
   (g$syntax-rules-macro$9621$MT&Mo
     g$syntax-rules-macro$13162$MT&Mo
     (case-lambda
       ((g$e$10604$MT&Mo)
        ((case-lambda
           ((g$t$10605$MT&Mo)
            ((case-lambda
               ((g$ls/false$10606$MT&Mo)
                (if g$ls/false$10606$MT&Mo
                  (apply
                    (case-lambda
                      ((g$lits$10607$MT&Mo
                         g$pat*$10608$MT&Mo
                         g$tmp*$10609$MT&Mo)
                       (begin
                         (g$verify-literals$9634$MT&Mo
                           g$lits$10607$MT&Mo
                           g$e$10604$MT&Mo)
                         (g$bless$9594$MT&Mo
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$10607$MT&Mo
                                   (g$map$5753$MT&Mo
                                     (case-lambda
                                       ((g$pat$10610$MT&Mo
                                          g$tmp$10611$MT&Mo)
                                        ((case-lambda
                                           ((g$t$10612$MT&Mo)
                                            ((case-lambda
                                               ((g$ls/false$10613$MT&Mo)
                                                (if g$ls/false$10613$MT&Mo
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$10614$MT&Mo)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$10614$MT&Mo)
                                                         (list
                                                           'syntax
                                                           g$tmp$10611$MT&Mo))))
                                                    g$ls/false$10613$MT&Mo)
                                                  ((case-lambda
                                                     ((g$t$10615$MT&Mo)
                                                      ((case-lambda
                                                         ((g$ls/false$10616$MT&Mo)
                                                          (if g$ls/false$10616$MT&Mo
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$9749$MT&Mo
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$10604$MT&Mo
                                                                   g$pat$10610$MT&Mo)))
                                                              g$ls/false$10616$MT&Mo)
                                                            (g$syntax-violation$9749$MT&Mo
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$10615$MT&Mo))))
                                                       (g$syntax-dispatch$9631$MT&Mo
                                                         g$t$10615$MT&Mo
                                                         '_))))
                                                   g$t$10612$MT&Mo))))
                                             (g$syntax-dispatch$9631$MT&Mo
                                               g$t$10612$MT&Mo
                                               '(_ . any)))))
                                         g$pat$10610$MT&Mo)))
                                     g$pat*$10608$MT&Mo
                                     g$tmp*$10609$MT&Mo)))))))))
                    g$ls/false$10606$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$10605$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$10605$MT&Mo
               '(_ each-any . #(each (any any)))))))
         g$e$10604$MT&Mo))))
   (g$quasiquote-macro$9622$MT&Mo
     g$quasiquote-macro$13163$MT&Mo
     ((case-lambda
        (()
         (letrec* ((g$datum$10617$MT&Mo
                     (case-lambda
                       ((g$x$10761$MT&Mo)
                        (list
                          (g$scheme-stx$9574$MT&Mo 'quote)
                          (g$mkstx$9256$MT&Mo
                            g$x$10761$MT&Mo
                            '()
                            '()
                            '())))))
                   (g$quasicons*$10646$MT&Mo
                     (case-lambda
                       ((g$x$10757$MT&Mo g$y$10758$MT&Mo)
                        ((letrec ((g$f$10759$MT&Mo
                                    (case-lambda
                                      ((g$x$10760$MT&Mo)
                                       (if (null? g$x$10760$MT&Mo)
                                         g$y$10758$MT&Mo
                                         (g$quasicons$10647$MT&Mo
                                           (car g$x$10760$MT&Mo)
                                           (g$f$10759$MT&Mo
                                             (cdr g$x$10760$MT&Mo))))))))
                           g$f$10759$MT&Mo)
                         g$x$10757$MT&Mo))))
                   (g$quasicons$10647$MT&Mo
                     (case-lambda
                       ((g$x$10738$MT&Mo g$y$10739$MT&Mo)
                        ((case-lambda
                           ((g$t$10740$MT&Mo)
                            ((case-lambda
                               ((g$ls/false$10741$MT&Mo)
                                (if g$ls/false$10741$MT&Mo
                                  (apply
                                    (case-lambda
                                      ((g$dy$10742$MT&Mo)
                                       ((case-lambda
                                          ((g$t$10743$MT&Mo)
                                           ((case-lambda
                                              ((g$ls/false$10744$MT&Mo)
                                               (if g$ls/false$10744$MT&Mo
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$10745$MT&Mo)
                                                      (list
                                                        (g$scheme-stx$9574$MT&Mo
                                                          'quote)
                                                        (cons
                                                          g$dx$10745$MT&Mo
                                                          g$dy$10742$MT&Mo))))
                                                   g$ls/false$10744$MT&Mo)
                                                 ((case-lambda
                                                    ((g$t$10746$MT&Mo)
                                                     ((case-lambda
                                                        ((g$ls/false$10747$MT&Mo)
                                                         (if g$ls/false$10747$MT&Mo
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$10748$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10749$MT&Mo)
                                                                        (if g$ls/false$10749$MT&Mo
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$9574$MT&Mo
                                                                                   'list)
                                                                                 g$x$10738$MT&Mo)))
                                                                            g$ls/false$10749$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$t$10750$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10751$MT&Mo)
                                                                                  (if g$ls/false$10751$MT&Mo
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$9574$MT&Mo
                                                                                             'cons)
                                                                                           g$x$10738$MT&Mo
                                                                                           g$y$10739$MT&Mo)))
                                                                                      g$ls/false$10751$MT&Mo)
                                                                                    (g$syntax-violation$9749$MT&Mo
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10750$MT&Mo))))
                                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                                 g$t$10750$MT&Mo
                                                                                 '_))))
                                                                           g$t$10748$MT&Mo))))
                                                                     (g$syntax-dispatch$9631$MT&Mo
                                                                       g$t$10748$MT&Mo
                                                                       '()))))
                                                                 g$dy$10742$MT&Mo)))
                                                             g$ls/false$10747$MT&Mo)
                                                           (g$syntax-violation$9749$MT&Mo
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$10746$MT&Mo))))
                                                      (g$syntax-dispatch$9631$MT&Mo
                                                        g$t$10746$MT&Mo
                                                        '_))))
                                                  g$t$10743$MT&Mo))))
                                            (g$syntax-dispatch$9631$MT&Mo
                                              g$t$10743$MT&Mo
                                              '(#(scheme-id quote)
                                                any)))))
                                        g$x$10738$MT&Mo)))
                                    g$ls/false$10741$MT&Mo)
                                  ((case-lambda
                                     ((g$t$10752$MT&Mo)
                                      ((case-lambda
                                         ((g$ls/false$10753$MT&Mo)
                                          (if g$ls/false$10753$MT&Mo
                                            (apply
                                              (case-lambda
                                                ((g$stuff$10754$MT&Mo)
                                                 (g$cons*$5755$MT&Mo
                                                   (g$scheme-stx$9574$MT&Mo
                                                     'list)
                                                   g$x$10738$MT&Mo
                                                   g$stuff$10754$MT&Mo)))
                                              g$ls/false$10753$MT&Mo)
                                            ((case-lambda
                                               ((g$t$10755$MT&Mo)
                                                ((case-lambda
                                                   ((g$ls/false$10756$MT&Mo)
                                                    (if g$ls/false$10756$MT&Mo
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$9574$MT&Mo
                                                               'cons)
                                                             g$x$10738$MT&Mo
                                                             g$y$10739$MT&Mo)))
                                                        g$ls/false$10756$MT&Mo)
                                                      (g$syntax-violation$9749$MT&Mo
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$10755$MT&Mo))))
                                                 (g$syntax-dispatch$9631$MT&Mo
                                                   g$t$10755$MT&Mo
                                                   '_))))
                                             g$t$10752$MT&Mo))))
                                       (g$syntax-dispatch$9631$MT&Mo
                                         g$t$10752$MT&Mo
                                         '(#(scheme-id list)
                                           .
                                           each-any)))))
                                   g$t$10740$MT&Mo))))
                             (g$syntax-dispatch$9631$MT&Mo
                               g$t$10740$MT&Mo
                               '(#(scheme-id quote) any)))))
                         g$y$10739$MT&Mo))))
                   (g$quasiappend$10648$MT&Mo
                     (case-lambda
                       ((g$x$10725$MT&Mo g$y$10726$MT&Mo)
                        ((case-lambda
                           ((g$ls$10727$MT&Mo)
                            (if (null? g$ls$10727$MT&Mo)
                              (list
                                (g$scheme-stx$9574$MT&Mo 'quote)
                                '())
                              (if (null? (cdr g$ls$10727$MT&Mo))
                                (car g$ls$10727$MT&Mo)
                                (g$cons*$5755$MT&Mo
                                  (g$scheme-stx$9574$MT&Mo 'append)
                                  g$ls$10727$MT&Mo)))))
                         ((letrec ((g$f$10728$MT&Mo
                                     (case-lambda
                                       ((g$x$10729$MT&Mo)
                                        (if (null? g$x$10729$MT&Mo)
                                          ((case-lambda
                                             ((g$t$10730$MT&Mo)
                                              ((case-lambda
                                                 ((g$ls/false$10731$MT&Mo)
                                                  (if g$ls/false$10731$MT&Mo
                                                    (apply
                                                      (case-lambda
                                                        (() '()))
                                                      g$ls/false$10731$MT&Mo)
                                                    ((case-lambda
                                                       ((g$t$10732$MT&Mo)
                                                        ((case-lambda
                                                           ((g$ls/false$10733$MT&Mo)
                                                            (if g$ls/false$10733$MT&Mo
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$10726$MT&Mo)))
                                                                g$ls/false$10733$MT&Mo)
                                                              (g$syntax-violation$9749$MT&Mo
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$10732$MT&Mo))))
                                                         (g$syntax-dispatch$9631$MT&Mo
                                                           g$t$10732$MT&Mo
                                                           '_))))
                                                     g$t$10730$MT&Mo))))
                                               (g$syntax-dispatch$9631$MT&Mo
                                                 g$t$10730$MT&Mo
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           g$y$10726$MT&Mo)
                                          ((case-lambda
                                             ((g$t$10734$MT&Mo)
                                              ((case-lambda
                                                 ((g$ls/false$10735$MT&Mo)
                                                  (if g$ls/false$10735$MT&Mo
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$10728$MT&Mo
                                                           (cdr g$x$10729$MT&Mo))))
                                                      g$ls/false$10735$MT&Mo)
                                                    ((case-lambda
                                                       ((g$t$10736$MT&Mo)
                                                        ((case-lambda
                                                           ((g$ls/false$10737$MT&Mo)
                                                            (if g$ls/false$10737$MT&Mo
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$10729$MT&Mo)
                                                                     (g$f$10728$MT&Mo
                                                                       (cdr g$x$10729$MT&Mo)))))
                                                                g$ls/false$10737$MT&Mo)
                                                              (g$syntax-violation$9749$MT&Mo
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$10736$MT&Mo))))
                                                         (g$syntax-dispatch$9631$MT&Mo
                                                           g$t$10736$MT&Mo
                                                           '_))))
                                                     g$t$10734$MT&Mo))))
                                               (g$syntax-dispatch$9631$MT&Mo
                                                 g$t$10734$MT&Mo
                                                 '(#(scheme-id quote)
                                                   ())))))
                                           (car g$x$10729$MT&Mo)))))))
                            g$f$10728$MT&Mo)
                          g$x$10725$MT&Mo)))))
                   (g$quasivector$10649$MT&Mo
                     (case-lambda
                       ((g$x$10700$MT&Mo)
                        ((case-lambda
                           ((g$pat-x$10701$MT&Mo)
                            ((case-lambda
                               ((g$t$10702$MT&Mo)
                                ((case-lambda
                                   ((g$ls/false$10703$MT&Mo)
                                    (if g$ls/false$10703$MT&Mo
                                      (apply
                                        (case-lambda
                                          ((g$x*$10704$MT&Mo)
                                           (list
                                             (g$scheme-stx$9574$MT&Mo
                                               'quote)
                                             (g$list->vector$6397$MT&Mo
                                               g$x*$10704$MT&Mo))))
                                        g$ls/false$10703$MT&Mo)
                                      ((case-lambda
                                         ((g$t$10705$MT&Mo)
                                          ((case-lambda
                                             ((g$ls/false$10706$MT&Mo)
                                              (if g$ls/false$10706$MT&Mo
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$10707$MT&Mo
                                                                 (case-lambda
                                                                   ((g$x$10708$MT&Mo
                                                                      g$k$10709$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$t$10710$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10711$MT&Mo)
                                                                            (if g$ls/false$10711$MT&Mo
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$10712$MT&Mo)
                                                                                   (g$k$10709$MT&Mo
                                                                                     (g$map$5753$MT&Mo
                                                                                       (case-lambda
                                                                                         ((g$x$10713$MT&Mo)
                                                                                          (list
                                                                                            (g$scheme-stx$9574$MT&Mo
                                                                                              'quote)
                                                                                            g$x$10713$MT&Mo)))
                                                                                       g$x*$10712$MT&Mo))))
                                                                                g$ls/false$10711$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$t$10714$MT&Mo)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10715$MT&Mo)
                                                                                      (if g$ls/false$10715$MT&Mo
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$10716$MT&Mo)
                                                                                             (g$k$10709$MT&Mo
                                                                                               g$x*$10716$MT&Mo)))
                                                                                          g$ls/false$10715$MT&Mo)
                                                                                        ((case-lambda
                                                                                           ((g$t$10717$MT&Mo)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10718$MT&Mo)
                                                                                                (if g$ls/false$10718$MT&Mo
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$10719$MT&Mo
                                                                                                         g$y$10720$MT&Mo)
                                                                                                       (g$f$10707$MT&Mo
                                                                                                         g$y$10720$MT&Mo
                                                                                                         (case-lambda
                                                                                                           ((g$ls$10721$MT&Mo)
                                                                                                            (g$k$10709$MT&Mo
                                                                                                              (cons
                                                                                                                g$x$10719$MT&Mo
                                                                                                                g$ls$10721$MT&Mo)))))))
                                                                                                    g$ls/false$10718$MT&Mo)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10722$MT&Mo)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$10723$MT&Mo)
                                                                                                          (if g$ls/false$10723$MT&Mo
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$9574$MT&Mo
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$10701$MT&Mo)))
                                                                                                              g$ls/false$10723$MT&Mo)
                                                                                                            (g$syntax-violation$9749$MT&Mo
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$10722$MT&Mo))))
                                                                                                       (g$syntax-dispatch$9631$MT&Mo
                                                                                                         g$t$10722$MT&Mo
                                                                                                         '_))))
                                                                                                   g$t$10717$MT&Mo))))
                                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                                               g$t$10717$MT&Mo
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$10714$MT&Mo))))
                                                                                   (g$syntax-dispatch$9631$MT&Mo
                                                                                     g$t$10714$MT&Mo
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$10710$MT&Mo))))
                                                                         (g$syntax-dispatch$9631$MT&Mo
                                                                           g$t$10710$MT&Mo
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$10708$MT&Mo)))))
                                                        g$f$10707$MT&Mo)
                                                      g$x$10700$MT&Mo
                                                      (case-lambda
                                                        ((g$ls$10724$MT&Mo)
                                                         (g$cons*$5755$MT&Mo
                                                           (g$scheme-stx$9574$MT&Mo
                                                             'vector)
                                                           g$ls$10724$MT&Mo))))))
                                                  g$ls/false$10706$MT&Mo)
                                                (g$syntax-violation$9749$MT&Mo
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$10705$MT&Mo))))
                                           (g$syntax-dispatch$9631$MT&Mo
                                             g$t$10705$MT&Mo
                                             '_))))
                                       g$t$10702$MT&Mo))))
                                 (g$syntax-dispatch$9631$MT&Mo
                                   g$t$10702$MT&Mo
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$10701$MT&Mo)))
                         g$x$10700$MT&Mo))))
                   (g$vquasi$10650$MT&Mo
                     (case-lambda
                       ((g$p$10683$MT&Mo g$lev$10684$MT&Mo)
                        ((case-lambda
                           ((g$t$10685$MT&Mo)
                            ((case-lambda
                               ((g$ls/false$10686$MT&Mo)
                                (if g$ls/false$10686$MT&Mo
                                  (apply
                                    (case-lambda
                                      ((g$p$10687$MT&Mo g$q$10688$MT&Mo)
                                       ((case-lambda
                                          ((g$t$10689$MT&Mo)
                                           ((case-lambda
                                              ((g$ls/false$10690$MT&Mo)
                                               (if g$ls/false$10690$MT&Mo
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$10691$MT&Mo)
                                                      (if (= g$lev$10684$MT&Mo
                                                             '0)
                                                        (g$quasicons*$10646$MT&Mo
                                                          g$p$10691$MT&Mo
                                                          (g$vquasi$10650$MT&Mo
                                                            g$q$10688$MT&Mo
                                                            g$lev$10684$MT&Mo))
                                                        (g$quasicons$10647$MT&Mo
                                                          (g$quasicons$10647$MT&Mo
                                                            (g$datum$10617$MT&Mo
                                                              'unquote)
                                                            (g$quasi$10651$MT&Mo
                                                              g$p$10691$MT&Mo
                                                              (- g$lev$10684$MT&Mo
                                                                 '1)))
                                                          (g$vquasi$10650$MT&Mo
                                                            g$q$10688$MT&Mo
                                                            g$lev$10684$MT&Mo)))))
                                                   g$ls/false$10690$MT&Mo)
                                                 ((case-lambda
                                                    ((g$t$10692$MT&Mo)
                                                     ((case-lambda
                                                        ((g$ls/false$10693$MT&Mo)
                                                         (if g$ls/false$10693$MT&Mo
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$10694$MT&Mo)
                                                                (if (= g$lev$10684$MT&Mo
                                                                       '0)
                                                                  (g$quasiappend$10648$MT&Mo
                                                                    g$p$10694$MT&Mo
                                                                    (g$vquasi$10650$MT&Mo
                                                                      g$q$10688$MT&Mo
                                                                      g$lev$10684$MT&Mo))
                                                                  (g$quasicons$10647$MT&Mo
                                                                    (g$quasicons$10647$MT&Mo
                                                                      (g$datum$10617$MT&Mo
                                                                        'unquote-splicing)
                                                                      (g$quasi$10651$MT&Mo
                                                                        g$p$10694$MT&Mo
                                                                        (- g$lev$10684$MT&Mo
                                                                           '1)))
                                                                    (g$vquasi$10650$MT&Mo
                                                                      g$q$10688$MT&Mo
                                                                      g$lev$10684$MT&Mo)))))
                                                             g$ls/false$10693$MT&Mo)
                                                           ((case-lambda
                                                              ((g$t$10695$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$ls/false$10696$MT&Mo)
                                                                   (if g$ls/false$10696$MT&Mo
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$10697$MT&Mo)
                                                                          (g$quasicons$10647$MT&Mo
                                                                            (g$quasi$10651$MT&Mo
                                                                              g$p$10697$MT&Mo
                                                                              g$lev$10684$MT&Mo)
                                                                            (g$vquasi$10650$MT&Mo
                                                                              g$q$10688$MT&Mo
                                                                              g$lev$10684$MT&Mo))))
                                                                       g$ls/false$10696$MT&Mo)
                                                                     (g$syntax-violation$9749$MT&Mo
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$10695$MT&Mo))))
                                                                (g$syntax-dispatch$9631$MT&Mo
                                                                  g$t$10695$MT&Mo
                                                                  'any))))
                                                            g$t$10692$MT&Mo))))
                                                      (g$syntax-dispatch$9631$MT&Mo
                                                        g$t$10692$MT&Mo
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$10689$MT&Mo))))
                                            (g$syntax-dispatch$9631$MT&Mo
                                              g$t$10689$MT&Mo
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$10687$MT&Mo)))
                                    g$ls/false$10686$MT&Mo)
                                  ((case-lambda
                                     ((g$t$10698$MT&Mo)
                                      ((case-lambda
                                         ((g$ls/false$10699$MT&Mo)
                                          (if g$ls/false$10699$MT&Mo
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$9574$MT&Mo
                                                     'quote)
                                                   '())))
                                              g$ls/false$10699$MT&Mo)
                                            (g$syntax-violation$9749$MT&Mo
                                              '#f
                                              '"invalid syntax"
                                              g$t$10698$MT&Mo))))
                                       (g$syntax-dispatch$9631$MT&Mo
                                         g$t$10698$MT&Mo
                                         '()))))
                                   g$t$10685$MT&Mo))))
                             (g$syntax-dispatch$9631$MT&Mo
                               g$t$10685$MT&Mo
                               '(any . any)))))
                         g$p$10683$MT&Mo))))
                   (g$quasi$10651$MT&Mo
                     (case-lambda
                       ((g$p$10656$MT&Mo g$lev$10657$MT&Mo)
                        ((case-lambda
                           ((g$t$10658$MT&Mo)
                            ((case-lambda
                               ((g$ls/false$10659$MT&Mo)
                                (if g$ls/false$10659$MT&Mo
                                  (apply
                                    (case-lambda
                                      ((g$p$10660$MT&Mo)
                                       (if (= g$lev$10657$MT&Mo '0)
                                         g$p$10660$MT&Mo
                                         (g$quasicons$10647$MT&Mo
                                           (g$datum$10617$MT&Mo
                                             'unquote)
                                           (g$quasi$10651$MT&Mo
                                             (list g$p$10660$MT&Mo)
                                             (- g$lev$10657$MT&Mo
                                                '1))))))
                                    g$ls/false$10659$MT&Mo)
                                  ((case-lambda
                                     ((g$t$10661$MT&Mo)
                                      ((case-lambda
                                         ((g$ls/false$10662$MT&Mo)
                                          (if g$ls/false$10662$MT&Mo
                                            (apply
                                              (case-lambda
                                                ((g$p$10663$MT&Mo
                                                   g$q$10664$MT&Mo)
                                                 (if (= g$lev$10657$MT&Mo
                                                        '0)
                                                   (g$quasicons*$10646$MT&Mo
                                                     g$p$10663$MT&Mo
                                                     (g$quasi$10651$MT&Mo
                                                       g$q$10664$MT&Mo
                                                       g$lev$10657$MT&Mo))
                                                   (g$quasicons$10647$MT&Mo
                                                     (g$quasicons$10647$MT&Mo
                                                       (g$datum$10617$MT&Mo
                                                         'unquote)
                                                       (g$quasi$10651$MT&Mo
                                                         g$p$10663$MT&Mo
                                                         (- g$lev$10657$MT&Mo
                                                            '1)))
                                                     (g$quasi$10651$MT&Mo
                                                       g$q$10664$MT&Mo
                                                       g$lev$10657$MT&Mo)))))
                                              g$ls/false$10662$MT&Mo)
                                            ((case-lambda
                                               ((g$t$10665$MT&Mo)
                                                ((case-lambda
                                                   ((g$ls/false$10666$MT&Mo)
                                                    (if g$ls/false$10666$MT&Mo
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$10667$MT&Mo
                                                             g$q$10668$MT&Mo)
                                                           (if (= g$lev$10657$MT&Mo
                                                                  '0)
                                                             (g$quasiappend$10648$MT&Mo
                                                               g$p$10667$MT&Mo
                                                               (g$quasi$10651$MT&Mo
                                                                 g$q$10668$MT&Mo
                                                                 g$lev$10657$MT&Mo))
                                                             (g$quasicons$10647$MT&Mo
                                                               (g$quasicons$10647$MT&Mo
                                                                 (g$datum$10617$MT&Mo
                                                                   'unquote-splicing)
                                                                 (g$quasi$10651$MT&Mo
                                                                   g$p$10667$MT&Mo
                                                                   (- g$lev$10657$MT&Mo
                                                                      '1)))
                                                               (g$quasi$10651$MT&Mo
                                                                 g$q$10668$MT&Mo
                                                                 g$lev$10657$MT&Mo)))))
                                                        g$ls/false$10666$MT&Mo)
                                                      ((case-lambda
                                                         ((g$t$10669$MT&Mo)
                                                          ((case-lambda
                                                             ((g$ls/false$10670$MT&Mo)
                                                              (if g$ls/false$10670$MT&Mo
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$10671$MT&Mo)
                                                                     (g$quasicons$10647$MT&Mo
                                                                       (g$datum$10617$MT&Mo
                                                                         'quasiquote)
                                                                       (g$quasi$10651$MT&Mo
                                                                         (list
                                                                           g$p$10671$MT&Mo)
                                                                         (+ g$lev$10657$MT&Mo
                                                                            '1)))))
                                                                  g$ls/false$10670$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$t$10672$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10673$MT&Mo)
                                                                        (if g$ls/false$10673$MT&Mo
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$10674$MT&Mo
                                                                                 g$q$10675$MT&Mo)
                                                                               (g$quasicons$10647$MT&Mo
                                                                                 (g$quasi$10651$MT&Mo
                                                                                   g$p$10674$MT&Mo
                                                                                   g$lev$10657$MT&Mo)
                                                                                 (g$quasi$10651$MT&Mo
                                                                                   g$q$10675$MT&Mo
                                                                                   g$lev$10657$MT&Mo))))
                                                                            g$ls/false$10673$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$t$10676$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10677$MT&Mo)
                                                                                  (if (if g$ls/false$10677$MT&Mo
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$10678$MT&Mo)
                                                                                               (not (g$stx?$9240$MT&Mo
                                                                                                      g$x$10678$MT&Mo))))
                                                                                            g$ls/false$10677$MT&Mo))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$10679$MT&Mo)
                                                                                         (g$quasivector$10649$MT&Mo
                                                                                           (g$vquasi$10650$MT&Mo
                                                                                             g$x$10679$MT&Mo
                                                                                             g$lev$10657$MT&Mo))))
                                                                                      g$ls/false$10677$MT&Mo)
                                                                                    ((case-lambda
                                                                                       ((g$t$10680$MT&Mo)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10681$MT&Mo)
                                                                                            (if g$ls/false$10681$MT&Mo
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$10682$MT&Mo)
                                                                                                   (list
                                                                                                     (g$scheme-stx$9574$MT&Mo
                                                                                                       'quote)
                                                                                                     g$p$10682$MT&Mo)))
                                                                                                g$ls/false$10681$MT&Mo)
                                                                                              (g$syntax-violation$9749$MT&Mo
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10680$MT&Mo))))
                                                                                         (g$syntax-dispatch$9631$MT&Mo
                                                                                           g$t$10680$MT&Mo
                                                                                           'any))))
                                                                                     g$t$10676$MT&Mo))))
                                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                                 g$t$10676$MT&Mo
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$10672$MT&Mo))))
                                                                     (g$syntax-dispatch$9631$MT&Mo
                                                                       g$t$10672$MT&Mo
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$10669$MT&Mo))))
                                                           (g$syntax-dispatch$9631$MT&Mo
                                                             g$t$10669$MT&Mo
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$10665$MT&Mo))))
                                                 (g$syntax-dispatch$9631$MT&Mo
                                                   g$t$10665$MT&Mo
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$10661$MT&Mo))))
                                       (g$syntax-dispatch$9631$MT&Mo
                                         g$t$10661$MT&Mo
                                         '((#(scheme-id unquote)
                                            .
                                            each-any)
                                           .
                                           any)))))
                                   g$t$10658$MT&Mo))))
                             (g$syntax-dispatch$9631$MT&Mo
                               g$t$10658$MT&Mo
                               '(#(scheme-id unquote) any)))))
                         g$p$10656$MT&Mo)))))
           (case-lambda
             ((g$x$10652$MT&Mo)
              ((case-lambda
                 ((g$t$10653$MT&Mo)
                  ((case-lambda
                     ((g$ls/false$10654$MT&Mo)
                      (if g$ls/false$10654$MT&Mo
                        (apply
                          (case-lambda
                            ((g$e$10655$MT&Mo)
                             (g$quasi$10651$MT&Mo g$e$10655$MT&Mo '0)))
                          g$ls/false$10654$MT&Mo)
                        (g$syntax-violation$9749$MT&Mo
                          '#f
                          '"invalid syntax"
                          g$t$10653$MT&Mo))))
                   (g$syntax-dispatch$9631$MT&Mo
                     g$t$10653$MT&Mo
                     '(_ any)))))
               g$x$10652$MT&Mo))))))))
   (g$quasisyntax-macro$9623$MT&Mo
     g$quasisyntax-macro$13164$MT&Mo
     ((case-lambda
        (()
         (letrec* ((g$quasi$10762$MT&Mo
                     (case-lambda
                       ((g$p$10776$MT&Mo g$lev$10777$MT&Mo)
                        ((case-lambda
                           ((g$t$10778$MT&Mo)
                            ((case-lambda
                               ((g$ls/false$10779$MT&Mo)
                                (if g$ls/false$10779$MT&Mo
                                  (apply
                                    (case-lambda
                                      ((g$p$10780$MT&Mo)
                                       (if (= g$lev$10777$MT&Mo '0)
                                         ((case-lambda
                                            ((g$g$10781$MT&Mo)
                                             (values
                                               (list g$g$10781$MT&Mo)
                                               (list g$p$10780$MT&Mo)
                                               g$g$10781$MT&Mo)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$10762$MT&Mo
                                                g$p$10780$MT&Mo
                                                (- g$lev$10777$MT&Mo
                                                   '1))))
                                           (case-lambda
                                             ((g$lhs*$10785$MT&Mo
                                                g$rhs*$10786$MT&Mo
                                                g$p$10787$MT&Mo)
                                              ((case-lambda
                                                 ((g$p$10788$MT&Mo
                                                    g$rhs*$10789$MT&Mo
                                                    g$lhs*$10790$MT&Mo)
                                                  (values
                                                    g$lhs*$10790$MT&Mo
                                                    g$rhs*$10789$MT&Mo
                                                    (list
                                                      'unsyntax
                                                      g$p$10788$MT&Mo))))
                                               g$p$10787$MT&Mo
                                               g$rhs*$10786$MT&Mo
                                               g$lhs*$10785$MT&Mo)))))))
                                    g$ls/false$10779$MT&Mo)
                                  ((case-lambda
                                     ((g$t$10791$MT&Mo)
                                      ((case-lambda
                                         ((g$ls/false$10792$MT&Mo)
                                          (if (if g$ls/false$10792$MT&Mo
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$10777$MT&Mo
                                                          '0)))
                                                    g$ls/false$10792$MT&Mo))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$9749$MT&Mo
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$10776$MT&Mo)))
                                              g$ls/false$10792$MT&Mo)
                                            ((case-lambda
                                               ((g$t$10793$MT&Mo)
                                                ((case-lambda
                                                   ((g$ls/false$10794$MT&Mo)
                                                    (if g$ls/false$10794$MT&Mo
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$10795$MT&Mo
                                                             g$q$10796$MT&Mo)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$10762$MT&Mo
                                                                  g$q$10796$MT&Mo
                                                                  g$lev$10777$MT&Mo)))
                                                             (case-lambda
                                                               ((g$lhs*$10800$MT&Mo
                                                                  g$rhs*$10801$MT&Mo
                                                                  g$q$10802$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$q$10803$MT&Mo
                                                                      g$rhs*$10804$MT&Mo
                                                                      g$lhs*$10805$MT&Mo)
                                                                    (if (= g$lev$10777$MT&Mo
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$10806$MT&Mo)
                                                                          (values
                                                                            (append
                                                                              g$g*$10806$MT&Mo
                                                                              g$lhs*$10805$MT&Mo)
                                                                            (append
                                                                              g$p*$10795$MT&Mo
                                                                              g$rhs*$10804$MT&Mo)
                                                                            (append
                                                                              g$g*$10806$MT&Mo
                                                                              g$q$10803$MT&Mo))))
                                                                       (g$map$5753$MT&Mo
                                                                         (case-lambda
                                                                           ((g$x$10807$MT&Mo)
                                                                            (gensym)))
                                                                         g$p*$10795$MT&Mo))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$10762$MT&Mo
                                                                             g$p*$10795$MT&Mo
                                                                             (- g$lev$10777$MT&Mo
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$10811$MT&Mo
                                                                             g$rhs2*$10812$MT&Mo
                                                                             g$p*$10813$MT&Mo)
                                                                           ((case-lambda
                                                                              ((g$p*$10814$MT&Mo
                                                                                 g$rhs2*$10815$MT&Mo
                                                                                 g$lhs2*$10816$MT&Mo)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$10816$MT&Mo
                                                                                   g$lhs*$10805$MT&Mo)
                                                                                 (append
                                                                                   g$rhs2*$10815$MT&Mo
                                                                                   g$rhs*$10804$MT&Mo)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$10814$MT&Mo)
                                                                                   g$q$10803$MT&Mo))))
                                                                            g$p*$10813$MT&Mo
                                                                            g$rhs2*$10812$MT&Mo
                                                                            g$lhs2*$10811$MT&Mo)))))))
                                                                 g$q$10802$MT&Mo
                                                                 g$rhs*$10801$MT&Mo
                                                                 g$lhs*$10800$MT&Mo))))))
                                                        g$ls/false$10794$MT&Mo)
                                                      ((case-lambda
                                                         ((g$t$10817$MT&Mo)
                                                          ((case-lambda
                                                             ((g$ls/false$10818$MT&Mo)
                                                              (if g$ls/false$10818$MT&Mo
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$10819$MT&Mo
                                                                       g$q$10820$MT&Mo)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$10762$MT&Mo
                                                                            g$q$10820$MT&Mo
                                                                            g$lev$10777$MT&Mo)))
                                                                       (case-lambda
                                                                         ((g$lhs*$10824$MT&Mo
                                                                            g$rhs*$10825$MT&Mo
                                                                            g$q$10826$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$q$10827$MT&Mo
                                                                                g$rhs*$10828$MT&Mo
                                                                                g$lhs*$10829$MT&Mo)
                                                                              (if (= g$lev$10777$MT&Mo
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$10830$MT&Mo)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5753$MT&Mo
                                                                                          (case-lambda
                                                                                            ((g$g$10831$MT&Mo)
                                                                                             (cons
                                                                                               g$g$10831$MT&Mo
                                                                                               '(...))))
                                                                                          g$g*$10830$MT&Mo)
                                                                                        g$lhs*$10829$MT&Mo)
                                                                                      (append
                                                                                        g$p*$10819$MT&Mo
                                                                                        g$rhs*$10828$MT&Mo)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5753$MT&Mo
                                                                                            (case-lambda
                                                                                              ((g$g$10832$MT&Mo)
                                                                                               (cons
                                                                                                 g$g$10832$MT&Mo
                                                                                                 '(...))))
                                                                                            g$g*$10830$MT&Mo))
                                                                                        g$q$10827$MT&Mo))))
                                                                                 (g$map$5753$MT&Mo
                                                                                   (case-lambda
                                                                                     ((g$x$10833$MT&Mo)
                                                                                      (gensym)))
                                                                                   g$p*$10819$MT&Mo))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$10762$MT&Mo
                                                                                       g$p*$10819$MT&Mo
                                                                                       (- g$lev$10777$MT&Mo
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$10837$MT&Mo
                                                                                       g$rhs2*$10838$MT&Mo
                                                                                       g$p*$10839$MT&Mo)
                                                                                     ((case-lambda
                                                                                        ((g$p*$10840$MT&Mo
                                                                                           g$rhs2*$10841$MT&Mo
                                                                                           g$lhs2*$10842$MT&Mo)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$10842$MT&Mo
                                                                                             g$lhs*$10829$MT&Mo)
                                                                                           (append
                                                                                             g$rhs2*$10841$MT&Mo
                                                                                             g$rhs*$10828$MT&Mo)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$10840$MT&Mo)
                                                                                             g$q$10827$MT&Mo))))
                                                                                      g$p*$10839$MT&Mo
                                                                                      g$rhs2*$10838$MT&Mo
                                                                                      g$lhs2*$10837$MT&Mo)))))))
                                                                           g$q$10826$MT&Mo
                                                                           g$rhs*$10825$MT&Mo
                                                                           g$lhs*$10824$MT&Mo))))))
                                                                  g$ls/false$10818$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$t$10843$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10844$MT&Mo)
                                                                        (if (if g$ls/false$10844$MT&Mo
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$10777$MT&Mo
                                                                                        '0)))
                                                                                  g$ls/false$10844$MT&Mo))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$9749$MT&Mo
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$10776$MT&Mo)))
                                                                            g$ls/false$10844$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$t$10845$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10846$MT&Mo)
                                                                                  (if g$ls/false$10846$MT&Mo
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$10847$MT&Mo)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$10762$MT&Mo
                                                                                                g$p$10847$MT&Mo
                                                                                                (+ g$lev$10777$MT&Mo
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$10851$MT&Mo
                                                                                                g$rhs*$10852$MT&Mo
                                                                                                g$p$10853$MT&Mo)
                                                                                              ((case-lambda
                                                                                                 ((g$p$10854$MT&Mo
                                                                                                    g$rhs*$10855$MT&Mo
                                                                                                    g$lhs*$10856$MT&Mo)
                                                                                                  (values
                                                                                                    g$lhs*$10856$MT&Mo
                                                                                                    g$rhs*$10855$MT&Mo
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$10854$MT&Mo))))
                                                                                               g$p$10853$MT&Mo
                                                                                               g$rhs*$10852$MT&Mo
                                                                                               g$lhs*$10851$MT&Mo))))))
                                                                                      g$ls/false$10846$MT&Mo)
                                                                                    ((case-lambda
                                                                                       ((g$t$10857$MT&Mo)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10858$MT&Mo)
                                                                                            (if g$ls/false$10858$MT&Mo
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$10859$MT&Mo
                                                                                                     g$q$10860$MT&Mo)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$10762$MT&Mo
                                                                                                          g$p$10859$MT&Mo
                                                                                                          g$lev$10777$MT&Mo)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$10867$MT&Mo
                                                                                                          g$rhs*$10868$MT&Mo
                                                                                                          g$p$10869$MT&Mo)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$10762$MT&Mo
                                                                                                               g$q$10860$MT&Mo
                                                                                                               g$lev$10777$MT&Mo)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$10870$MT&Mo
                                                                                                               g$rhs2*$10871$MT&Mo
                                                                                                               g$q$10872$MT&Mo)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$10873$MT&Mo
                                                                                                                   g$rhs2*$10874$MT&Mo
                                                                                                                   g$lhs2*$10875$MT&Mo
                                                                                                                   g$p$10876$MT&Mo
                                                                                                                   g$rhs*$10877$MT&Mo
                                                                                                                   g$lhs*$10878$MT&Mo)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$10875$MT&Mo
                                                                                                                     g$lhs*$10878$MT&Mo)
                                                                                                                   (append
                                                                                                                     g$rhs2*$10874$MT&Mo
                                                                                                                     g$rhs*$10877$MT&Mo)
                                                                                                                   (cons
                                                                                                                     g$p$10876$MT&Mo
                                                                                                                     g$q$10873$MT&Mo))))
                                                                                                              g$q$10872$MT&Mo
                                                                                                              g$rhs2*$10871$MT&Mo
                                                                                                              g$lhs2*$10870$MT&Mo
                                                                                                              g$p$10869$MT&Mo
                                                                                                              g$rhs*$10868$MT&Mo
                                                                                                              g$lhs*$10867$MT&Mo)))))))))
                                                                                                g$ls/false$10858$MT&Mo)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10879$MT&Mo)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10880$MT&Mo)
                                                                                                      (if g$ls/false$10880$MT&Mo
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$10881$MT&Mo)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$10762$MT&Mo
                                                                                                                    g$x*$10881$MT&Mo
                                                                                                                    g$lev$10777$MT&Mo)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$10885$MT&Mo
                                                                                                                    g$rhs*$10886$MT&Mo
                                                                                                                    g$x*$10887$MT&Mo)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$10888$MT&Mo
                                                                                                                        g$rhs*$10889$MT&Mo
                                                                                                                        g$lhs*$10890$MT&Mo)
                                                                                                                      (values
                                                                                                                        g$lhs*$10890$MT&Mo
                                                                                                                        g$rhs*$10889$MT&Mo
                                                                                                                        (g$list->vector$6397$MT&Mo
                                                                                                                          g$x*$10888$MT&Mo))))
                                                                                                                   g$x*$10887$MT&Mo
                                                                                                                   g$rhs*$10886$MT&Mo
                                                                                                                   g$lhs*$10885$MT&Mo))))))
                                                                                                          g$ls/false$10880$MT&Mo)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$10891$MT&Mo)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$10892$MT&Mo)
                                                                                                                (if g$ls/false$10892$MT&Mo
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$10776$MT&Mo)))
                                                                                                                    g$ls/false$10892$MT&Mo)
                                                                                                                  (g$syntax-violation$9749$MT&Mo
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$10891$MT&Mo))))
                                                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                                                               g$t$10891$MT&Mo
                                                                                                               '_))))
                                                                                                         g$t$10879$MT&Mo))))
                                                                                                   (g$syntax-dispatch$9631$MT&Mo
                                                                                                     g$t$10879$MT&Mo
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$10857$MT&Mo))))
                                                                                         (g$syntax-dispatch$9631$MT&Mo
                                                                                           g$t$10857$MT&Mo
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$10845$MT&Mo))))
                                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                                 g$t$10845$MT&Mo
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$10843$MT&Mo))))
                                                                     (g$syntax-dispatch$9631$MT&Mo
                                                                       g$t$10843$MT&Mo
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$10817$MT&Mo))))
                                                           (g$syntax-dispatch$9631$MT&Mo
                                                             g$t$10817$MT&Mo
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$10793$MT&Mo))))
                                                 (g$syntax-dispatch$9631$MT&Mo
                                                   g$t$10793$MT&Mo
                                                   '((#(scheme-id
                                                        unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$10791$MT&Mo))))
                                       (g$syntax-dispatch$9631$MT&Mo
                                         g$t$10791$MT&Mo
                                         '#(scheme-id unsyntax)))))
                                   g$t$10778$MT&Mo))))
                             (g$syntax-dispatch$9631$MT&Mo
                               g$t$10778$MT&Mo
                               '(#(scheme-id unsyntax) any)))))
                         g$p$10776$MT&Mo)))))
           (case-lambda
             ((g$x$10763$MT&Mo)
              ((case-lambda
                 ((g$t$10764$MT&Mo)
                  ((case-lambda
                     ((g$ls/false$10765$MT&Mo)
                      (if g$ls/false$10765$MT&Mo
                        (apply
                          (case-lambda
                            ((g$e$10766$MT&Mo)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$quasi$10762$MT&Mo
                                    g$e$10766$MT&Mo
                                    '0)))
                               (case-lambda
                                 ((g$lhs*$10770$MT&Mo
                                    g$rhs*$10771$MT&Mo
                                    g$v$10772$MT&Mo)
                                  ((case-lambda
                                     ((g$v$10773$MT&Mo
                                        g$rhs*$10774$MT&Mo
                                        g$lhs*$10775$MT&Mo)
                                      (g$bless$9594$MT&Mo
                                        (list
                                          'syntax-case
                                          (cons
                                            'list
                                            g$rhs*$10774$MT&Mo)
                                          '()
                                          (list
                                            g$lhs*$10775$MT&Mo
                                            (list
                                              'syntax
                                              g$v$10773$MT&Mo))))))
                                   g$v$10772$MT&Mo
                                   g$rhs*$10771$MT&Mo
                                   g$lhs*$10770$MT&Mo))))))
                          g$ls/false$10765$MT&Mo)
                        (g$syntax-violation$9749$MT&Mo
                          '#f
                          '"invalid syntax"
                          g$t$10764$MT&Mo))))
                   (g$syntax-dispatch$9631$MT&Mo
                     g$t$10764$MT&Mo
                     '(_ any)))))
               g$x$10763$MT&Mo))))))))
   (g$define-struct-macro$9624$MT&Mo
     g$define-struct-macro$13165$MT&Mo
     (case-lambda
       ((g$stx$10893$MT&Mo)
        (g$syntax-violation$9749$MT&Mo
          '#f
          '"define-struct not supported"
          g$stx$10893$MT&Mo))))
   (g$define-record-type-macro$9625$MT&Mo
     g$define-record-type-macro$13166$MT&Mo
     (case-lambda
       ((g$x$10894$MT&Mo)
        (letrec* ((g$id$10895$MT&Mo
                    (case-lambda
                      ((g$ctxt$11147$MT&Mo . g$str*$11148$MT&Mo)
                       (g$datum->syntax$9751$MT&Mo
                         g$ctxt$11147$MT&Mo
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5753$MT&Mo
                               (case-lambda
                                 ((g$x$11149$MT&Mo)
                                  (if (g$symbol?$6402$MT&Mo
                                        g$x$11149$MT&Mo)
                                    (symbol->string g$x$11149$MT&Mo)
                                    (if (string? g$x$11149$MT&Mo)
                                      g$x$11149$MT&Mo
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$11148$MT&Mo)))))))
                  (g$get-record-name$10896$MT&Mo
                    (case-lambda
                      ((g$spec$11138$MT&Mo)
                       ((case-lambda
                          ((g$t$11139$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11140$MT&Mo)
                               (if g$ls/false$11140$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$foo$11141$MT&Mo
                                        g$make-foo$11142$MT&Mo
                                        g$foo?$11143$MT&Mo)
                                      g$foo$11141$MT&Mo))
                                   g$ls/false$11140$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11144$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11145$MT&Mo)
                                         (if g$ls/false$11145$MT&Mo
                                           (apply
                                             (case-lambda
                                               ((g$foo$11146$MT&Mo)
                                                g$foo$11146$MT&Mo))
                                             g$ls/false$11145$MT&Mo)
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$t$11144$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11144$MT&Mo
                                        'any))))
                                  g$t$11139$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11139$MT&Mo
                              '(any any any)))))
                        g$spec$11138$MT&Mo))))
                  (g$get-record-constructor-name$10897$MT&Mo
                    (case-lambda
                      ((g$spec$11128$MT&Mo)
                       ((case-lambda
                          ((g$t$11129$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11130$MT&Mo)
                               (if g$ls/false$11130$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$foo$11131$MT&Mo
                                        g$make-foo$11132$MT&Mo
                                        g$foo?$11133$MT&Mo)
                                      g$make-foo$11132$MT&Mo))
                                   g$ls/false$11130$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11134$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11135$MT&Mo)
                                         (if (if g$ls/false$11135$MT&Mo
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$11136$MT&Mo)
                                                      (g$id?$9268$MT&Mo
                                                        g$foo$11136$MT&Mo)))
                                                   g$ls/false$11135$MT&Mo))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$11137$MT&Mo)
                                                (g$id$10895$MT&Mo
                                                  g$foo$11137$MT&Mo
                                                  '"make-"
                                                  (g$stx->datum$9279$MT&Mo
                                                    g$foo$11137$MT&Mo))))
                                             g$ls/false$11135$MT&Mo)
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$t$11134$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11134$MT&Mo
                                        'any))))
                                  g$t$11129$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11129$MT&Mo
                              '(any any any)))))
                        g$spec$11128$MT&Mo))))
                  (g$get-record-predicate-name$10898$MT&Mo
                    (case-lambda
                      ((g$spec$11118$MT&Mo)
                       ((case-lambda
                          ((g$t$11119$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11120$MT&Mo)
                               (if g$ls/false$11120$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$foo$11121$MT&Mo
                                        g$make-foo$11122$MT&Mo
                                        g$foo?$11123$MT&Mo)
                                      g$foo?$11123$MT&Mo))
                                   g$ls/false$11120$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11124$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11125$MT&Mo)
                                         (if (if g$ls/false$11125$MT&Mo
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$11126$MT&Mo)
                                                      (g$id?$9268$MT&Mo
                                                        g$foo$11126$MT&Mo)))
                                                   g$ls/false$11125$MT&Mo))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$11127$MT&Mo)
                                                (g$id$10895$MT&Mo
                                                  g$foo$11127$MT&Mo
                                                  (g$stx->datum$9279$MT&Mo
                                                    g$foo$11127$MT&Mo)
                                                  '"?")))
                                             g$ls/false$11125$MT&Mo)
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$t$11124$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11124$MT&Mo
                                        'any))))
                                  g$t$11119$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11119$MT&Mo
                              '(any any any)))))
                        g$spec$11118$MT&Mo))))
                  (g$get-clause$10899$MT&Mo
                    (case-lambda
                      ((g$id$11109$MT&Mo g$ls$11110$MT&Mo)
                       ((case-lambda
                          ((g$t$11111$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11112$MT&Mo)
                               (if g$ls/false$11112$MT&Mo
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$11112$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11113$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11114$MT&Mo)
                                         (if g$ls/false$11114$MT&Mo
                                           (apply
                                             (case-lambda
                                               ((g$x$11115$MT&Mo
                                                  g$rest$11116$MT&Mo
                                                  g$ls$11117$MT&Mo)
                                                (if (g$free-id=?$9272$MT&Mo
                                                      (g$bless$9594$MT&Mo
                                                        g$id$11109$MT&Mo)
                                                      g$x$11115$MT&Mo)
                                                  (cons
                                                    g$x$11115$MT&Mo
                                                    g$rest$11116$MT&Mo)
                                                  (g$get-clause$10899$MT&Mo
                                                    g$id$11109$MT&Mo
                                                    g$ls$11117$MT&Mo))))
                                             g$ls/false$11114$MT&Mo)
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$t$11113$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11113$MT&Mo
                                        '((any . any) . any)))))
                                  g$t$11111$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11111$MT&Mo
                              '()))))
                        g$ls$11110$MT&Mo))))
                  (g$foo-rtd-code$10900$MT&Mo
                    (case-lambda
                      ((g$name$11068$MT&Mo
                         g$clause*$11069$MT&Mo
                         g$parent-rtd-code$11070$MT&Mo)
                       (letrec* ((g$convert-field-spec*$11071$MT&Mo
                                   (case-lambda
                                     ((g$ls$11096$MT&Mo)
                                      (g$list->vector$6397$MT&Mo
                                        (g$map$5753$MT&Mo
                                          (case-lambda
                                            ((g$x$11097$MT&Mo)
                                             ((case-lambda
                                                ((g$t$11098$MT&Mo)
                                                 ((case-lambda
                                                    ((g$ls/false$11099$MT&Mo)
                                                     (if g$ls/false$11099$MT&Mo
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$11100$MT&Mo
                                                              g$rest$11101$MT&Mo)
                                                            (list
                                                              'mutable
                                                              g$name$11100$MT&Mo)))
                                                         g$ls/false$11099$MT&Mo)
                                                       ((case-lambda
                                                          ((g$t$11102$MT&Mo)
                                                           ((case-lambda
                                                              ((g$ls/false$11103$MT&Mo)
                                                               (if g$ls/false$11103$MT&Mo
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$11104$MT&Mo
                                                                        g$rest$11105$MT&Mo)
                                                                      (list
                                                                        'immutable
                                                                        g$name$11104$MT&Mo)))
                                                                   g$ls/false$11103$MT&Mo)
                                                                 ((case-lambda
                                                                    ((g$t$11106$MT&Mo)
                                                                     ((case-lambda
                                                                        ((g$ls/false$11107$MT&Mo)
                                                                         (if g$ls/false$11107$MT&Mo
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$11108$MT&Mo)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$11108$MT&Mo)))
                                                                             g$ls/false$11107$MT&Mo)
                                                                           (g$syntax-violation$9749$MT&Mo
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$11106$MT&Mo))))
                                                                      (g$syntax-dispatch$9631$MT&Mo
                                                                        g$t$11106$MT&Mo
                                                                        'any))))
                                                                  g$t$11102$MT&Mo))))
                                                            (g$syntax-dispatch$9631$MT&Mo
                                                              g$t$11102$MT&Mo
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$11098$MT&Mo))))
                                                  (g$syntax-dispatch$9631$MT&Mo
                                                    g$t$11098$MT&Mo
                                                    '(#(scheme-id
                                                        mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$11097$MT&Mo)))
                                          g$ls$11096$MT&Mo))))))
                         ((case-lambda
                            ((g$uid-code$11072$MT&Mo
                               g$sealed?$11073$MT&Mo
                               g$opaque?$11074$MT&Mo
                               g$fields$11075$MT&Mo)
                             (g$bless$9594$MT&Mo
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$11068$MT&Mo)
                                 g$parent-rtd-code$11070$MT&Mo
                                 g$uid-code$11072$MT&Mo
                                 g$sealed?$11073$MT&Mo
                                 g$opaque?$11074$MT&Mo
                                 g$fields$11075$MT&Mo))))
                          ((case-lambda
                             ((g$t$11076$MT&Mo)
                              ((case-lambda
                                 ((g$ls/false$11077$MT&Mo)
                                  (if g$ls/false$11077$MT&Mo
                                    (apply
                                      (case-lambda
                                        (() (list 'quote (gensym))))
                                      g$ls/false$11077$MT&Mo)
                                    ((case-lambda
                                       ((g$t$11078$MT&Mo)
                                        ((case-lambda
                                           ((g$ls/false$11079$MT&Mo)
                                            (if g$ls/false$11079$MT&Mo
                                              (apply
                                                (case-lambda
                                                  ((g$uid$11080$MT&Mo)
                                                   (list
                                                     'quote
                                                     g$uid$11080$MT&Mo)))
                                                g$ls/false$11079$MT&Mo)
                                              ((case-lambda
                                                 ((g$t$11081$MT&Mo)
                                                  ((case-lambda
                                                     ((g$ls/false$11082$MT&Mo)
                                                      (if g$ls/false$11082$MT&Mo
                                                        (apply
                                                          (case-lambda
                                                            (() '#f))
                                                          g$ls/false$11082$MT&Mo)
                                                        (g$syntax-violation$9749$MT&Mo
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$11081$MT&Mo))))
                                                   (g$syntax-dispatch$9631$MT&Mo
                                                     g$t$11081$MT&Mo
                                                     '_))))
                                               g$t$11078$MT&Mo))))
                                         (g$syntax-dispatch$9631$MT&Mo
                                           g$t$11078$MT&Mo
                                           '(_ any)))))
                                     g$t$11076$MT&Mo))))
                               (g$syntax-dispatch$9631$MT&Mo
                                 g$t$11076$MT&Mo
                                 '(_)))))
                           (g$get-clause$10899$MT&Mo
                             'nongenerative
                             g$clause*$11069$MT&Mo))
                          ((case-lambda
                             ((g$t$11083$MT&Mo)
                              ((case-lambda
                                 ((g$ls/false$11084$MT&Mo)
                                  (if g$ls/false$11084$MT&Mo
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$11084$MT&Mo)
                                    ((case-lambda
                                       ((g$t$11085$MT&Mo)
                                        ((case-lambda
                                           ((g$ls/false$11086$MT&Mo)
                                            (if g$ls/false$11086$MT&Mo
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$11086$MT&Mo)
                                              (g$syntax-violation$9749$MT&Mo
                                                '#f
                                                '"invalid syntax"
                                                g$t$11085$MT&Mo))))
                                         (g$syntax-dispatch$9631$MT&Mo
                                           g$t$11085$MT&Mo
                                           '_))))
                                     g$t$11083$MT&Mo))))
                               (g$syntax-dispatch$9631$MT&Mo
                                 g$t$11083$MT&Mo
                                 '(_ #(atom #t))))))
                           (g$get-clause$10899$MT&Mo
                             'sealed
                             g$clause*$11069$MT&Mo))
                          ((case-lambda
                             ((g$t$11087$MT&Mo)
                              ((case-lambda
                                 ((g$ls/false$11088$MT&Mo)
                                  (if g$ls/false$11088$MT&Mo
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$11088$MT&Mo)
                                    ((case-lambda
                                       ((g$t$11089$MT&Mo)
                                        ((case-lambda
                                           ((g$ls/false$11090$MT&Mo)
                                            (if g$ls/false$11090$MT&Mo
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$11090$MT&Mo)
                                              (g$syntax-violation$9749$MT&Mo
                                                '#f
                                                '"invalid syntax"
                                                g$t$11089$MT&Mo))))
                                         (g$syntax-dispatch$9631$MT&Mo
                                           g$t$11089$MT&Mo
                                           '_))))
                                     g$t$11087$MT&Mo))))
                               (g$syntax-dispatch$9631$MT&Mo
                                 g$t$11087$MT&Mo
                                 '(_ #(atom #t))))))
                           (g$get-clause$10899$MT&Mo
                             'opaque
                             g$clause*$11069$MT&Mo))
                          ((case-lambda
                             ((g$t$11091$MT&Mo)
                              ((case-lambda
                                 ((g$ls/false$11092$MT&Mo)
                                  (if g$ls/false$11092$MT&Mo
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$11093$MT&Mo)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$11071$MT&Mo
                                             g$field-spec*$11093$MT&Mo))))
                                      g$ls/false$11092$MT&Mo)
                                    ((case-lambda
                                       ((g$t$11094$MT&Mo)
                                        ((case-lambda
                                           ((g$ls/false$11095$MT&Mo)
                                            (if g$ls/false$11095$MT&Mo
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$11095$MT&Mo)
                                              (g$syntax-violation$9749$MT&Mo
                                                '#f
                                                '"invalid syntax"
                                                g$t$11094$MT&Mo))))
                                         (g$syntax-dispatch$9631$MT&Mo
                                           g$t$11094$MT&Mo
                                           '_))))
                                     g$t$11091$MT&Mo))))
                               (g$syntax-dispatch$9631$MT&Mo
                                 g$t$11091$MT&Mo
                                 '(_ . each-any)))))
                           (g$get-clause$10899$MT&Mo
                             'fields
                             g$clause*$11069$MT&Mo)))))))
                  (g$parent-rtd-code$10901$MT&Mo
                    (case-lambda
                      ((g$clause*$11056$MT&Mo)
                       ((case-lambda
                          ((g$t$11057$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11058$MT&Mo)
                               (if g$ls/false$11058$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$name$11059$MT&Mo)
                                      (list
                                        'record-type-descriptor
                                        g$name$11059$MT&Mo)))
                                   g$ls/false$11058$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11060$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11061$MT&Mo)
                                         (if g$ls/false$11061$MT&Mo
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$11062$MT&Mo)
                                                    ((case-lambda
                                                       ((g$ls/false$11063$MT&Mo)
                                                        (if g$ls/false$11063$MT&Mo
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$11064$MT&Mo
                                                                 g$rcd$11065$MT&Mo)
                                                               g$rtd$11064$MT&Mo))
                                                            g$ls/false$11063$MT&Mo)
                                                          ((case-lambda
                                                             ((g$t$11066$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$ls/false$11067$MT&Mo)
                                                                  (if g$ls/false$11067$MT&Mo
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$11067$MT&Mo)
                                                                    (g$syntax-violation$9749$MT&Mo
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11066$MT&Mo))))
                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                 g$t$11066$MT&Mo
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$11062$MT&Mo))))
                                                     (g$syntax-dispatch$9631$MT&Mo
                                                       g$t$11062$MT&Mo
                                                       '(_ any any)))))
                                                 (g$get-clause$10899$MT&Mo
                                                   'parent-rtd
                                                   g$clause*$11056$MT&Mo))))
                                             g$ls/false$11061$MT&Mo)
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$t$11060$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11060$MT&Mo
                                        '#(atom #f)))))
                                  g$t$11057$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11057$MT&Mo
                              '(_ any)))))
                        (g$get-clause$10899$MT&Mo
                          'parent
                          g$clause*$11056$MT&Mo)))))
                  (g$parent-rcd-code$10902$MT&Mo
                    (case-lambda
                      ((g$clause*$11044$MT&Mo)
                       ((case-lambda
                          ((g$t$11045$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11046$MT&Mo)
                               (if g$ls/false$11046$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$name$11047$MT&Mo)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$11047$MT&Mo)))
                                   g$ls/false$11046$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11048$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11049$MT&Mo)
                                         (if g$ls/false$11049$MT&Mo
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$11050$MT&Mo)
                                                    ((case-lambda
                                                       ((g$ls/false$11051$MT&Mo)
                                                        (if g$ls/false$11051$MT&Mo
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$11052$MT&Mo
                                                                 g$rcd$11053$MT&Mo)
                                                               g$rcd$11053$MT&Mo))
                                                            g$ls/false$11051$MT&Mo)
                                                          ((case-lambda
                                                             ((g$t$11054$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$ls/false$11055$MT&Mo)
                                                                  (if g$ls/false$11055$MT&Mo
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$11055$MT&Mo)
                                                                    (g$syntax-violation$9749$MT&Mo
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11054$MT&Mo))))
                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                 g$t$11054$MT&Mo
                                                                 '#(atom
                                                                    #f)))))
                                                           g$t$11050$MT&Mo))))
                                                     (g$syntax-dispatch$9631$MT&Mo
                                                       g$t$11050$MT&Mo
                                                       '(_ any any)))))
                                                 (g$get-clause$10899$MT&Mo
                                                   'parent-rtd
                                                   g$clause*$11044$MT&Mo))))
                                             g$ls/false$11049$MT&Mo)
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$t$11048$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11048$MT&Mo
                                        '#(atom #f)))))
                                  g$t$11045$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11045$MT&Mo
                              '(_ any)))))
                        (g$get-clause$10899$MT&Mo
                          'parent
                          g$clause*$11044$MT&Mo)))))
                  (g$foo-rcd-code$10903$MT&Mo
                    (case-lambda
                      ((g$clause*$11040$MT&Mo
                         g$foo-rtd$11041$MT&Mo
                         g$protocol$11042$MT&Mo
                         g$parent-rcd-code$11043$MT&Mo)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$11041$MT&Mo
                         g$parent-rcd-code$11043$MT&Mo
                         g$protocol$11042$MT&Mo))))
                  (g$get-protocol-code$10904$MT&Mo
                    (case-lambda
                      ((g$clause*$11034$MT&Mo)
                       ((case-lambda
                          ((g$t$11035$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11036$MT&Mo)
                               (if g$ls/false$11036$MT&Mo
                                 (apply
                                   (case-lambda
                                     ((g$expr$11037$MT&Mo)
                                      g$expr$11037$MT&Mo))
                                   g$ls/false$11036$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11038$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11039$MT&Mo)
                                         (if g$ls/false$11039$MT&Mo
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$11039$MT&Mo)
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$t$11038$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11038$MT&Mo
                                        '_))))
                                  g$t$11035$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11035$MT&Mo
                              '(_ any)))))
                        (g$get-clause$10899$MT&Mo
                          'protocol
                          g$clause*$11034$MT&Mo)))))
                  (g$get-fields$10905$MT&Mo
                    (case-lambda
                      ((g$clause*$11025$MT&Mo)
                       ((case-lambda
                          ((g$t$11026$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11027$MT&Mo)
                               (if g$ls/false$11027$MT&Mo
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$11027$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11028$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11029$MT&Mo)
                                         (if g$ls/false$11029$MT&Mo
                                           (apply
                                             (case-lambda
                                               ((g$f*$11030$MT&Mo)
                                                g$f*$11030$MT&Mo))
                                             g$ls/false$11029$MT&Mo)
                                           ((case-lambda
                                              ((g$t$11031$MT&Mo)
                                               ((case-lambda
                                                  ((g$ls/false$11032$MT&Mo)
                                                   (if g$ls/false$11032$MT&Mo
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$11033$MT&Mo)
                                                          (g$get-fields$10905$MT&Mo
                                                            g$rest$11033$MT&Mo)))
                                                       g$ls/false$11032$MT&Mo)
                                                     (g$syntax-violation$9749$MT&Mo
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$11031$MT&Mo))))
                                                (g$syntax-dispatch$9631$MT&Mo
                                                  g$t$11031$MT&Mo
                                                  '(_ . any)))))
                                            g$t$11028$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11028$MT&Mo
                                        '((#(scheme-id fields)
                                           .
                                           each-any)
                                          .
                                          _)))))
                                  g$t$11026$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11026$MT&Mo
                              '()))))
                        g$clause*$11025$MT&Mo))))
                  (g$get-mutator-indices$10906$MT&Mo
                    (case-lambda
                      ((g$fields$11013$MT&Mo)
                       ((letrec ((g$f$11014$MT&Mo
                                   (case-lambda
                                     ((g$fields$11015$MT&Mo
                                        g$i$11016$MT&Mo)
                                      ((case-lambda
                                         ((g$t$11017$MT&Mo)
                                          ((case-lambda
                                             ((g$ls/false$11018$MT&Mo)
                                              (if g$ls/false$11018$MT&Mo
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$11018$MT&Mo)
                                                ((case-lambda
                                                   ((g$t$11019$MT&Mo)
                                                    ((case-lambda
                                                       ((g$ls/false$11020$MT&Mo)
                                                        (if g$ls/false$11020$MT&Mo
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$11021$MT&Mo)
                                                               (cons
                                                                 g$i$11016$MT&Mo
                                                                 (g$f$11014$MT&Mo
                                                                   g$rest$11021$MT&Mo
                                                                   (+ g$i$11016$MT&Mo
                                                                      '1)))))
                                                            g$ls/false$11020$MT&Mo)
                                                          ((case-lambda
                                                             ((g$t$11022$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$ls/false$11023$MT&Mo)
                                                                  (if g$ls/false$11023$MT&Mo
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$11024$MT&Mo)
                                                                         (g$f$11014$MT&Mo
                                                                           g$rest$11024$MT&Mo
                                                                           (+ g$i$11016$MT&Mo
                                                                              '1))))
                                                                      g$ls/false$11023$MT&Mo)
                                                                    (g$syntax-violation$9749$MT&Mo
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$11022$MT&Mo))))
                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                 g$t$11022$MT&Mo
                                                                 '(_ .
                                                                     any)))))
                                                           g$t$11019$MT&Mo))))
                                                     (g$syntax-dispatch$9631$MT&Mo
                                                       g$t$11019$MT&Mo
                                                       '((#(scheme-id
                                                            mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$11017$MT&Mo))))
                                           (g$syntax-dispatch$9631$MT&Mo
                                             g$t$11017$MT&Mo
                                             '()))))
                                       g$fields$11015$MT&Mo)))))
                          g$f$11014$MT&Mo)
                        g$fields$11013$MT&Mo
                        '0))))
                  (g$get-mutators$10907$MT&Mo
                    (case-lambda
                      ((g$foo$10992$MT&Mo g$fields$10993$MT&Mo)
                       (letrec* ((g$gen-name$10994$MT&Mo
                                   (case-lambda
                                     ((g$x$11012$MT&Mo)
                                      (g$datum->syntax$9751$MT&Mo
                                        g$foo$10992$MT&Mo
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$9752$MT&Mo
                                                g$foo$10992$MT&Mo))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$9752$MT&Mo
                                                g$x$11012$MT&Mo))
                                            '"-set!")))))))
                         ((letrec ((g$f$10995$MT&Mo
                                     (case-lambda
                                       ((g$fields$10996$MT&Mo)
                                        ((case-lambda
                                           ((g$t$10997$MT&Mo)
                                            ((case-lambda
                                               ((g$ls/false$10998$MT&Mo)
                                                (if g$ls/false$10998$MT&Mo
                                                  (apply
                                                    (case-lambda
                                                      (() '()))
                                                    g$ls/false$10998$MT&Mo)
                                                  ((case-lambda
                                                     ((g$t$10999$MT&Mo)
                                                      ((case-lambda
                                                         ((g$ls/false$11000$MT&Mo)
                                                          (if g$ls/false$11000$MT&Mo
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$11001$MT&Mo
                                                                   g$accessor$11002$MT&Mo
                                                                   g$mutator$11003$MT&Mo
                                                                   g$rest$11004$MT&Mo)
                                                                 (cons
                                                                   g$mutator$11003$MT&Mo
                                                                   (g$f$10995$MT&Mo
                                                                     g$rest$11004$MT&Mo))))
                                                              g$ls/false$11000$MT&Mo)
                                                            ((case-lambda
                                                               ((g$t$11005$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$ls/false$11006$MT&Mo)
                                                                    (if g$ls/false$11006$MT&Mo
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$11007$MT&Mo
                                                                             g$rest$11008$MT&Mo)
                                                                           (cons
                                                                             (g$gen-name$10994$MT&Mo
                                                                               g$name$11007$MT&Mo)
                                                                             (g$f$10995$MT&Mo
                                                                               g$rest$11008$MT&Mo))))
                                                                        g$ls/false$11006$MT&Mo)
                                                                      ((case-lambda
                                                                         ((g$t$11009$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$ls/false$11010$MT&Mo)
                                                                              (if g$ls/false$11010$MT&Mo
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$11011$MT&Mo)
                                                                                     (g$f$10995$MT&Mo
                                                                                       g$rest$11011$MT&Mo)))
                                                                                  g$ls/false$11010$MT&Mo)
                                                                                (g$syntax-violation$9749$MT&Mo
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$11009$MT&Mo))))
                                                                           (g$syntax-dispatch$9631$MT&Mo
                                                                             g$t$11009$MT&Mo
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$11005$MT&Mo))))
                                                                 (g$syntax-dispatch$9631$MT&Mo
                                                                   g$t$11005$MT&Mo
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$10999$MT&Mo))))
                                                       (g$syntax-dispatch$9631$MT&Mo
                                                         g$t$10999$MT&Mo
                                                         '((#(scheme-id
                                                              mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$10997$MT&Mo))))
                                             (g$syntax-dispatch$9631$MT&Mo
                                               g$t$10997$MT&Mo
                                               '()))))
                                         g$fields$10996$MT&Mo)))))
                            g$f$10995$MT&Mo)
                          g$fields$10993$MT&Mo)))))
                  (g$get-accessors$10908$MT&Mo
                    (case-lambda
                      ((g$foo$10958$MT&Mo g$fields$10959$MT&Mo)
                       (letrec* ((g$gen-name$10960$MT&Mo
                                   (case-lambda
                                     ((g$x$10991$MT&Mo)
                                      (g$datum->syntax$9751$MT&Mo
                                        g$foo$10958$MT&Mo
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$9752$MT&Mo
                                                g$foo$10958$MT&Mo))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$9752$MT&Mo
                                                g$x$10991$MT&Mo)))))))))
                         (g$map$5753$MT&Mo
                           (case-lambda
                             ((g$field$10961$MT&Mo)
                              ((case-lambda
                                 ((g$t$10962$MT&Mo)
                                  ((case-lambda
                                     ((g$ls/false$10963$MT&Mo)
                                      (if (if g$ls/false$10963$MT&Mo
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$10964$MT&Mo
                                                     g$accessor$10965$MT&Mo
                                                     g$mutator$10966$MT&Mo)
                                                   (g$id?$9268$MT&Mo
                                                     g$accessor$10965$MT&Mo)))
                                                g$ls/false$10963$MT&Mo))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$10967$MT&Mo
                                               g$accessor$10968$MT&Mo
                                               g$mutator$10969$MT&Mo)
                                             g$accessor$10968$MT&Mo))
                                          g$ls/false$10963$MT&Mo)
                                        ((case-lambda
                                           ((g$t$10970$MT&Mo)
                                            ((case-lambda
                                               ((g$ls/false$10971$MT&Mo)
                                                (if (if g$ls/false$10971$MT&Mo
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$10972$MT&Mo
                                                               g$accessor$10973$MT&Mo)
                                                             (g$id?$9268$MT&Mo
                                                               g$accessor$10973$MT&Mo)))
                                                          g$ls/false$10971$MT&Mo))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$10974$MT&Mo
                                                         g$accessor$10975$MT&Mo)
                                                       g$accessor$10975$MT&Mo))
                                                    g$ls/false$10971$MT&Mo)
                                                  ((case-lambda
                                                     ((g$t$10976$MT&Mo)
                                                      ((case-lambda
                                                         ((g$ls/false$10977$MT&Mo)
                                                          (if (if g$ls/false$10977$MT&Mo
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$10978$MT&Mo)
                                                                       (g$id?$9268$MT&Mo
                                                                         g$name$10978$MT&Mo)))
                                                                    g$ls/false$10977$MT&Mo))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$10979$MT&Mo)
                                                                 (g$gen-name$10960$MT&Mo
                                                                   g$name$10979$MT&Mo)))
                                                              g$ls/false$10977$MT&Mo)
                                                            ((case-lambda
                                                               ((g$t$10980$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$ls/false$10981$MT&Mo)
                                                                    (if (if g$ls/false$10981$MT&Mo
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$10982$MT&Mo)
                                                                                 (g$id?$9268$MT&Mo
                                                                                   g$name$10982$MT&Mo)))
                                                                              g$ls/false$10981$MT&Mo))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$10983$MT&Mo)
                                                                           (g$gen-name$10960$MT&Mo
                                                                             g$name$10983$MT&Mo)))
                                                                        g$ls/false$10981$MT&Mo)
                                                                      ((case-lambda
                                                                         ((g$t$10984$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$ls/false$10985$MT&Mo)
                                                                              (if (if g$ls/false$10985$MT&Mo
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$10986$MT&Mo)
                                                                                           (g$id?$9268$MT&Mo
                                                                                             g$name$10986$MT&Mo)))
                                                                                        g$ls/false$10985$MT&Mo))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$10987$MT&Mo)
                                                                                     (g$gen-name$10960$MT&Mo
                                                                                       g$name$10987$MT&Mo)))
                                                                                  g$ls/false$10985$MT&Mo)
                                                                                ((case-lambda
                                                                                   ((g$t$10988$MT&Mo)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$10989$MT&Mo)
                                                                                        (if g$ls/false$10989$MT&Mo
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$10990$MT&Mo)
                                                                                               (g$syntax-violation$9749$MT&Mo
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$10961$MT&Mo)))
                                                                                            g$ls/false$10989$MT&Mo)
                                                                                          (g$syntax-violation$9749$MT&Mo
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$10988$MT&Mo))))
                                                                                     (g$syntax-dispatch$9631$MT&Mo
                                                                                       g$t$10988$MT&Mo
                                                                                       'any))))
                                                                                 g$t$10984$MT&Mo))))
                                                                           (g$syntax-dispatch$9631$MT&Mo
                                                                             g$t$10984$MT&Mo
                                                                             'any))))
                                                                       g$t$10980$MT&Mo))))
                                                                 (g$syntax-dispatch$9631$MT&Mo
                                                                   g$t$10980$MT&Mo
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$10976$MT&Mo))))
                                                       (g$syntax-dispatch$9631$MT&Mo
                                                         g$t$10976$MT&Mo
                                                         '(#(scheme-id
                                                             mutable)
                                                           any)))))
                                                   g$t$10970$MT&Mo))))
                                             (g$syntax-dispatch$9631$MT&Mo
                                               g$t$10970$MT&Mo
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$10962$MT&Mo))))
                                   (g$syntax-dispatch$9631$MT&Mo
                                     g$t$10962$MT&Mo
                                     '(#(scheme-id mutable)
                                       any
                                       any
                                       any)))))
                               g$field$10961$MT&Mo)))
                           g$fields$10959$MT&Mo)))))
                  (g$enumerate$10909$MT&Mo
                    (case-lambda
                      ((g$ls$10954$MT&Mo)
                       ((letrec ((g$f$10955$MT&Mo
                                   (case-lambda
                                     ((g$ls$10956$MT&Mo g$i$10957$MT&Mo)
                                      (if (null? g$ls$10956$MT&Mo)
                                        '()
                                        (cons
                                          g$i$10957$MT&Mo
                                          (g$f$10955$MT&Mo
                                            (cdr g$ls$10956$MT&Mo)
                                            (+ g$i$10957$MT&Mo
                                               '1))))))))
                          g$f$10955$MT&Mo)
                        g$ls$10954$MT&Mo
                        '0))))
                  (g$do-define-record$10910$MT&Mo
                    (case-lambda
                      ((g$namespec$10934$MT&Mo g$clause*$10935$MT&Mo)
                       ((case-lambda
                          ((g$foo$10936$MT&Mo)
                           ((case-lambda
                              ((g$foo-rtd$10937$MT&Mo)
                               ((case-lambda
                                  ((g$foo-rcd$10938$MT&Mo)
                                   ((case-lambda
                                      ((g$protocol$10939$MT&Mo)
                                       ((case-lambda
                                          ((g$make-foo$10940$MT&Mo)
                                           ((case-lambda
                                              ((g$fields$10941$MT&Mo)
                                               ((case-lambda
                                                  ((g$idx*$10942$MT&Mo)
                                                   ((case-lambda
                                                      ((g$foo-x*$10943$MT&Mo)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$10944$MT&Mo)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$10945$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$foo?$10946$MT&Mo)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$10947$MT&Mo)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$10948$MT&Mo)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$10949$MT&Mo)
                                                                               (g$bless$9594$MT&Mo
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$10937$MT&Mo
                                                                                       g$foo-rtd-code$10947$MT&Mo)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$10939$MT&Mo
                                                                                         g$protocol-code$10949$MT&Mo)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$10938$MT&Mo
                                                                                           g$foo-rcd-code$10948$MT&Mo)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$10936$MT&Mo
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$10937$MT&Mo)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$10938$MT&Mo)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$10946$MT&Mo
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$10937$MT&Mo))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$10940$MT&Mo
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$10938$MT&Mo))
                                                                                               (append
                                                                                                 (g$map$5753$MT&Mo
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$10950$MT&Mo
                                                                                                        g$idx$10951$MT&Mo)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$10950$MT&Mo
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$10937$MT&Mo
                                                                                                          g$idx$10951$MT&Mo))))
                                                                                                   g$foo-x*$10943$MT&Mo
                                                                                                   g$idx*$10942$MT&Mo)
                                                                                                 (g$map$5753$MT&Mo
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$10952$MT&Mo
                                                                                                        g$idx$10953$MT&Mo)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$10952$MT&Mo
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$10937$MT&Mo
                                                                                                          g$idx$10953$MT&Mo))))
                                                                                                   g$set-foo-x!*$10944$MT&Mo
                                                                                                   g$set-foo-idx*$10945$MT&Mo))))))))))))
                                                                            (g$get-protocol-code$10904$MT&Mo
                                                                              g$clause*$10935$MT&Mo))))
                                                                        (g$foo-rcd-code$10903$MT&Mo
                                                                          g$clause*$10935$MT&Mo
                                                                          g$foo-rtd$10937$MT&Mo
                                                                          g$protocol$10939$MT&Mo
                                                                          (g$parent-rcd-code$10902$MT&Mo
                                                                            g$clause*$10935$MT&Mo)))))
                                                                    (g$foo-rtd-code$10900$MT&Mo
                                                                      g$foo$10936$MT&Mo
                                                                      g$clause*$10935$MT&Mo
                                                                      (g$parent-rtd-code$10901$MT&Mo
                                                                        g$clause*$10935$MT&Mo)))))
                                                                (g$get-record-predicate-name$10898$MT&Mo
                                                                  g$namespec$10934$MT&Mo))))
                                                            (g$get-mutator-indices$10906$MT&Mo
                                                              g$fields$10941$MT&Mo))))
                                                        (g$get-mutators$10907$MT&Mo
                                                          g$foo$10936$MT&Mo
                                                          g$fields$10941$MT&Mo))))
                                                    (g$get-accessors$10908$MT&Mo
                                                      g$foo$10936$MT&Mo
                                                      g$fields$10941$MT&Mo))))
                                                (g$enumerate$10909$MT&Mo
                                                  g$fields$10941$MT&Mo))))
                                            (g$get-fields$10905$MT&Mo
                                              g$clause*$10935$MT&Mo))))
                                        (g$get-record-constructor-name$10897$MT&Mo
                                          g$namespec$10934$MT&Mo))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$10896$MT&Mo
                          g$namespec$10934$MT&Mo)))))
                  (g$verify-clauses$10911$MT&Mo
                    (case-lambda
                      ((g$x$10916$MT&Mo g$cls*$10917$MT&Mo)
                       (letrec* ((g$valid-kwds$10918$MT&Mo
                                   (g$map$5753$MT&Mo
                                     g$bless$9594$MT&Mo
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$10919$MT&Mo
                                   (case-lambda
                                     ((g$x$10931$MT&Mo g$ls$10932$MT&Mo)
                                      (if (pair? g$ls$10932$MT&Mo)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$10933$MT&Mo)
                                              (if g$t$10933$MT&Mo
                                                g$t$10933$MT&Mo
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$10919$MT&Mo
                                                    g$x$10931$MT&Mo
                                                    (cdr g$ls$10932$MT&Mo))))))
                                           (g$free-id=?$9272$MT&Mo
                                             g$x$10931$MT&Mo
                                             (car g$ls$10932$MT&Mo))))
                                        '#f)))))
                         ((letrec ((g$f$10920$MT&Mo
                                     (case-lambda
                                       ((g$cls*$10921$MT&Mo
                                          g$seen*$10922$MT&Mo)
                                        (if (not (null?
                                                   g$cls*$10921$MT&Mo))
                                          ((case-lambda
                                             ((g$t$10923$MT&Mo)
                                              ((case-lambda
                                                 ((g$ls/false$10924$MT&Mo)
                                                  (if g$ls/false$10924$MT&Mo
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$10925$MT&Mo
                                                           g$rest$10926$MT&Mo)
                                                         (if ((case-lambda
                                                                ((g$t$10927$MT&Mo)
                                                                 (if g$t$10927$MT&Mo
                                                                   g$t$10927$MT&Mo
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$10919$MT&Mo
                                                                            g$kwd$10925$MT&Mo
                                                                            g$valid-kwds$10918$MT&Mo))))))
                                                              (not (g$id?$9268$MT&Mo
                                                                     g$kwd$10925$MT&Mo)))
                                                           (g$syntax-violation$9749$MT&Mo
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$10925$MT&Mo)
                                                           (if (g$bound-id-member?$9275$MT&Mo
                                                                 g$kwd$10925$MT&Mo
                                                                 g$seen*$10922$MT&Mo)
                                                             (g$syntax-violation$9749$MT&Mo
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$10916$MT&Mo
                                                               g$kwd$10925$MT&Mo)
                                                             (g$f$10920$MT&Mo
                                                               (cdr g$cls*$10921$MT&Mo)
                                                               (cons
                                                                 g$kwd$10925$MT&Mo
                                                                 g$seen*$10922$MT&Mo))))))
                                                      g$ls/false$10924$MT&Mo)
                                                    ((case-lambda
                                                       ((g$t$10928$MT&Mo)
                                                        ((case-lambda
                                                           ((g$ls/false$10929$MT&Mo)
                                                            (if g$ls/false$10929$MT&Mo
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$10930$MT&Mo)
                                                                   (g$syntax-violation$9749$MT&Mo
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$10930$MT&Mo)))
                                                                g$ls/false$10929$MT&Mo)
                                                              (g$syntax-violation$9749$MT&Mo
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$10928$MT&Mo))))
                                                         (g$syntax-dispatch$9631$MT&Mo
                                                           g$t$10928$MT&Mo
                                                           'any))))
                                                     g$t$10923$MT&Mo))))
                                               (g$syntax-dispatch$9631$MT&Mo
                                                 g$t$10923$MT&Mo
                                                 '(any . any)))))
                                           (car g$cls*$10921$MT&Mo))
                                          (void))))))
                            g$f$10920$MT&Mo)
                          g$cls*$10917$MT&Mo
                          '()))))))
          ((case-lambda
             ((g$t$10912$MT&Mo)
              ((case-lambda
                 ((g$ls/false$10913$MT&Mo)
                  (if g$ls/false$10913$MT&Mo
                    (apply
                      (case-lambda
                        ((g$namespec$10914$MT&Mo g$clause*$10915$MT&Mo)
                         (begin
                           (g$verify-clauses$10911$MT&Mo
                             g$x$10894$MT&Mo
                             g$clause*$10915$MT&Mo)
                           (g$do-define-record$10910$MT&Mo
                             g$namespec$10914$MT&Mo
                             g$clause*$10915$MT&Mo))))
                      g$ls/false$10913$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$10912$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$10912$MT&Mo
                 '(_ any . each-any)))))
           g$x$10894$MT&Mo)))))
   (g$define-condition-type-macro$9626$MT&Mo
     g$define-condition-type-macro$13167$MT&Mo
     (case-lambda
       ((g$x$11150$MT&Mo)
        (letrec* ((g$mkname$11151$MT&Mo
                    (case-lambda
                      ((g$name$11174$MT&Mo g$suffix$11175$MT&Mo)
                       (g$datum->syntax$9751$MT&Mo
                         g$name$11174$MT&Mo
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$9752$MT&Mo
                                 g$name$11174$MT&Mo))
                             g$suffix$11175$MT&Mo)))))))
          ((case-lambda
             ((g$t$11152$MT&Mo)
              ((case-lambda
                 ((g$ls/false$11153$MT&Mo)
                  (if (if g$ls/false$11153$MT&Mo
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$11154$MT&Mo
                                 g$name$11155$MT&Mo
                                 g$super$11156$MT&Mo
                                 g$constructor$11157$MT&Mo
                                 g$predicate$11158$MT&Mo
                                 g$field*$11159$MT&Mo
                                 g$accessor*$11160$MT&Mo)
                               (if (g$id?$9268$MT&Mo g$name$11155$MT&Mo)
                                 (if (g$id?$9268$MT&Mo
                                       g$super$11156$MT&Mo)
                                   (if (g$id?$9268$MT&Mo
                                         g$constructor$11157$MT&Mo)
                                     (if (g$id?$9268$MT&Mo
                                           g$predicate$11158$MT&Mo)
                                       (if (g$for-all$5751$MT&Mo
                                             g$id?$9268$MT&Mo
                                             g$field*$11159$MT&Mo)
                                         (begin
                                           '#f
                                           (g$for-all$5751$MT&Mo
                                             g$id?$9268$MT&Mo
                                             g$accessor*$11160$MT&Mo))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$11153$MT&Mo))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$11161$MT&Mo
                           g$name$11162$MT&Mo
                           g$super$11163$MT&Mo
                           g$constructor$11164$MT&Mo
                           g$predicate$11165$MT&Mo
                           g$field*$11166$MT&Mo
                           g$accessor*$11167$MT&Mo)
                         ((case-lambda
                            ((g$aux-accessor*$11168$MT&Mo)
                             (g$bless$9594$MT&Mo
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$11162$MT&Mo
                                         g$constructor$11164$MT&Mo
                                         (gensym))
                                       (cons
                                         (list
                                           'parent
                                           g$super$11163$MT&Mo)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5753$MT&Mo
                                               (case-lambda
                                                 ((g$field$11169$MT&Mo
                                                    g$aux$11170$MT&Mo)
                                                  (list
                                                    'immutable
                                                    g$field$11169$MT&Mo
                                                    g$aux$11170$MT&Mo)))
                                               g$field*$11166$MT&Mo
                                               g$aux-accessor*$11168$MT&Mo))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$11165$MT&Mo
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$11162$MT&Mo)))
                                     (g$map$5753$MT&Mo
                                       (case-lambda
                                         ((g$accessor$11171$MT&Mo
                                            g$aux$11172$MT&Mo)
                                          (list
                                            'define
                                            g$accessor$11171$MT&Mo
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$11162$MT&Mo)
                                              g$aux$11172$MT&Mo))))
                                       g$accessor*$11167$MT&Mo
                                       g$aux-accessor*$11168$MT&Mo)))))))
                          (g$map$5753$MT&Mo
                            (case-lambda ((g$x$11173$MT&Mo) (gensym)))
                            g$accessor*$11167$MT&Mo))))
                      g$ls/false$11153$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$11152$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$11152$MT&Mo
                 '(any any any any any . #(each (any any)))))))
           g$x$11150$MT&Mo)))))
   (g$incorrect-usage-macro$9627$MT&Mo
     g$incorrect-usage-macro$13168$MT&Mo
     (case-lambda
       ((g$e$11176$MT&Mo)
        (g$syntax-violation$9749$MT&Mo
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$11176$MT&Mo))))
   (g$parameterize-macro$9628$MT&Mo
     g$parameterize-macro$13169$MT&Mo
     (case-lambda
       ((g$e$11177$MT&Mo)
        ((case-lambda
           ((g$t$11178$MT&Mo)
            ((case-lambda
               ((g$ls/false$11179$MT&Mo)
                (if g$ls/false$11179$MT&Mo
                  (apply
                    (case-lambda
                      ((g$b$11180$MT&Mo g$b*$11181$MT&Mo)
                       (g$bless$9594$MT&Mo
                         (cons
                           'let
                           (cons
                             '()
                             (cons
                               g$b$11180$MT&Mo
                               g$b*$11181$MT&Mo))))))
                    g$ls/false$11179$MT&Mo)
                  ((case-lambda
                     ((g$t$11182$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$11183$MT&Mo)
                          (if g$ls/false$11183$MT&Mo
                            (apply
                              (case-lambda
                                ((g$olhs*$11184$MT&Mo
                                   g$orhs*$11185$MT&Mo
                                   g$b$11186$MT&Mo
                                   g$b*$11187$MT&Mo)
                                 ((case-lambda
                                    ((g$lhs*$11188$MT&Mo
                                       g$rhs*$11189$MT&Mo)
                                     (g$bless$9594$MT&Mo
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$11188$MT&Mo
                                             g$rhs*$11189$MT&Mo)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5753$MT&Mo
                                                       (case-lambda
                                                         ((g$lhs$11190$MT&Mo
                                                            g$rhs$11191$MT&Mo)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$11190$MT&Mo)))
                                                            (list
                                                              g$lhs$11190$MT&Mo
                                                              g$rhs$11191$MT&Mo)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$11191$MT&Mo
                                                                '(t))))))
                                                       g$lhs*$11188$MT&Mo
                                                       g$rhs*$11189$MT&Mo)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$11186$MT&Mo
                                                         g$b*$11187$MT&Mo)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$11184$MT&Mo
                                           g$orhs*$11185$MT&Mo)))))
                                  (g$generate-temporaries$9739$MT&Mo
                                    g$olhs*$11184$MT&Mo)
                                  (g$generate-temporaries$9739$MT&Mo
                                    g$orhs*$11185$MT&Mo))))
                              g$ls/false$11183$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$11182$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$11182$MT&Mo
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$11178$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$11178$MT&Mo
               '(_ () any . each-any)))))
         g$e$11177$MT&Mo))))
   (g$foreign-call-transformer$9629$MT&Mo
     g$foreign-call-transformer$13170$MT&Mo
     (case-lambda
       ((g$e$11192$MT&Mo g$r$11193$MT&Mo g$mr$11194$MT&Mo)
        ((case-lambda
           ((g$t$11195$MT&Mo)
            ((case-lambda
               ((g$ls/false$11196$MT&Mo)
                (if g$ls/false$11196$MT&Mo
                  (apply
                    (case-lambda
                      ((g$name$11197$MT&Mo g$arg*$11198$MT&Mo)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$9649$MT&Mo
                             g$name$11197$MT&Mo
                             g$r$11193$MT&Mo
                             g$mr$11194$MT&Mo)
                           (g$chi-expr*$9647$MT&Mo
                             g$arg*$11198$MT&Mo
                             g$r$11193$MT&Mo
                             g$mr$11194$MT&Mo)))))
                    g$ls/false$11196$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$11195$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$11195$MT&Mo
               '(_ any . each-any)))))
         g$e$11192$MT&Mo))))
   (g$convert-pattern$9630$MT&Mo
     g$convert-pattern$13171$MT&Mo
     (case-lambda
       ((g$pattern$11199$MT&Mo g$keys$11200$MT&Mo)
        (letrec* ((g$cvt*$11201$MT&Mo
                    (case-lambda
                      ((g$p*$11281$MT&Mo
                         g$n$11282$MT&Mo
                         g$ids$11283$MT&Mo)
                       (if (null? g$p*$11281$MT&Mo)
                         (values '() g$ids$11283$MT&Mo)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$11201$MT&Mo
                                (cdr g$p*$11281$MT&Mo)
                                g$n$11282$MT&Mo
                                g$ids$11283$MT&Mo)))
                           (case-lambda
                             ((g$y$11286$MT&Mo g$ids$11287$MT&Mo)
                              ((case-lambda
                                 ((g$ids$11288$MT&Mo g$y$11289$MT&Mo)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$11202$MT&Mo
                                         (car g$p*$11281$MT&Mo)
                                         g$n$11282$MT&Mo
                                         g$ids$11288$MT&Mo)))
                                    (case-lambda
                                      ((g$x$11292$MT&Mo
                                         g$ids$11293$MT&Mo)
                                       ((case-lambda
                                          ((g$ids$11294$MT&Mo
                                             g$x$11295$MT&Mo)
                                           (values
                                             (cons
                                               g$x$11295$MT&Mo
                                               g$y$11289$MT&Mo)
                                             g$ids$11294$MT&Mo)))
                                        g$ids$11293$MT&Mo
                                        g$x$11292$MT&Mo))))))
                               g$ids$11287$MT&Mo
                               g$y$11286$MT&Mo))))))))
                  (g$cvt$11202$MT&Mo
                    (case-lambda
                      ((g$p$11203$MT&Mo
                         g$n$11204$MT&Mo
                         g$ids$11205$MT&Mo)
                       ((case-lambda
                          ((g$t$11206$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11207$MT&Mo)
                               (if (if g$ls/false$11207$MT&Mo
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$11208$MT&Mo)
                                            (g$id?$9268$MT&Mo
                                              g$id$11208$MT&Mo)))
                                         g$ls/false$11207$MT&Mo))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$11209$MT&Mo)
                                      (if (g$bound-id-member?$9275$MT&Mo
                                            g$p$11203$MT&Mo
                                            g$keys$11200$MT&Mo)
                                        (values
                                          (vector
                                            'free-id
                                            g$p$11203$MT&Mo)
                                          g$ids$11205$MT&Mo)
                                        (if (g$free-id=?$9272$MT&Mo
                                              g$p$11203$MT&Mo
                                              (g$scheme-stx$9574$MT&Mo
                                                '_))
                                          (values '_ g$ids$11205$MT&Mo)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$11203$MT&Mo
                                                g$n$11204$MT&Mo)
                                              g$ids$11205$MT&Mo))))))
                                   g$ls/false$11207$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11210$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11211$MT&Mo)
                                         (if (if g$ls/false$11211$MT&Mo
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$11212$MT&Mo
                                                        g$dots$11213$MT&Mo)
                                                      (g$ellipsis?$9632$MT&Mo
                                                        g$dots$11213$MT&Mo)))
                                                   g$ls/false$11211$MT&Mo))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$11214$MT&Mo
                                                  g$dots$11215$MT&Mo)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$11202$MT&Mo
                                                       g$p$11214$MT&Mo
                                                       (+ g$n$11204$MT&Mo
                                                          '1)
                                                       g$ids$11205$MT&Mo)))
                                                  (case-lambda
                                                    ((g$p$11218$MT&Mo
                                                       g$ids$11219$MT&Mo)
                                                     ((case-lambda
                                                        ((g$ids$11220$MT&Mo
                                                           g$p$11221$MT&Mo)
                                                         (values
                                                           (if (eq? g$p$11221$MT&Mo
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$11221$MT&Mo))
                                                           g$ids$11220$MT&Mo)))
                                                      g$ids$11219$MT&Mo
                                                      g$p$11218$MT&Mo))))))
                                             g$ls/false$11211$MT&Mo)
                                           ((case-lambda
                                              ((g$t$11222$MT&Mo)
                                               ((case-lambda
                                                  ((g$ls/false$11223$MT&Mo)
                                                   (if (if g$ls/false$11223$MT&Mo
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$11224$MT&Mo
                                                                  g$dots$11225$MT&Mo
                                                                  g$ys$11226$MT&Mo
                                                                  g$z$11227$MT&Mo)
                                                                (g$ellipsis?$9632$MT&Mo
                                                                  g$dots$11225$MT&Mo)))
                                                             g$ls/false$11223$MT&Mo))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$11228$MT&Mo
                                                            g$dots$11229$MT&Mo
                                                            g$ys$11230$MT&Mo
                                                            g$z$11231$MT&Mo)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$11202$MT&Mo
                                                                 g$z$11231$MT&Mo
                                                                 g$n$11204$MT&Mo
                                                                 g$ids$11205$MT&Mo)))
                                                            (case-lambda
                                                              ((g$z$11234$MT&Mo
                                                                 g$ids$11235$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$ids$11236$MT&Mo
                                                                     g$z$11237$MT&Mo)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$11201$MT&Mo
                                                                          g$ys$11230$MT&Mo
                                                                          g$n$11204$MT&Mo
                                                                          g$ids$11236$MT&Mo)))
                                                                     (case-lambda
                                                                       ((g$ys$11240$MT&Mo
                                                                          g$ids$11241$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$ids$11242$MT&Mo
                                                                              g$ys$11243$MT&Mo)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$11202$MT&Mo
                                                                                   g$x$11228$MT&Mo
                                                                                   (+ g$n$11204$MT&Mo
                                                                                      '1)
                                                                                   g$ids$11242$MT&Mo)))
                                                                              (case-lambda
                                                                                ((g$x$11246$MT&Mo
                                                                                   g$ids$11247$MT&Mo)
                                                                                 ((case-lambda
                                                                                    ((g$ids$11248$MT&Mo
                                                                                       g$x$11249$MT&Mo)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$11249$MT&Mo
                                                                                         (g$reverse$6409$MT&Mo
                                                                                           g$ys$11243$MT&Mo)
                                                                                         g$z$11237$MT&Mo)
                                                                                       g$ids$11248$MT&Mo)))
                                                                                  g$ids$11247$MT&Mo
                                                                                  g$x$11246$MT&Mo))))))
                                                                         g$ids$11241$MT&Mo
                                                                         g$ys$11240$MT&Mo))))))
                                                                g$ids$11235$MT&Mo
                                                                g$z$11234$MT&Mo))))))
                                                       g$ls/false$11223$MT&Mo)
                                                     ((case-lambda
                                                        ((g$t$11250$MT&Mo)
                                                         ((case-lambda
                                                            ((g$ls/false$11251$MT&Mo)
                                                             (if g$ls/false$11251$MT&Mo
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$11252$MT&Mo
                                                                      g$y$11253$MT&Mo)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$11202$MT&Mo
                                                                           g$y$11253$MT&Mo
                                                                           g$n$11204$MT&Mo
                                                                           g$ids$11205$MT&Mo)))
                                                                      (case-lambda
                                                                        ((g$y$11256$MT&Mo
                                                                           g$ids$11257$MT&Mo)
                                                                         ((case-lambda
                                                                            ((g$ids$11258$MT&Mo
                                                                               g$y$11259$MT&Mo)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$11202$MT&Mo
                                                                                    g$x$11252$MT&Mo
                                                                                    g$n$11204$MT&Mo
                                                                                    g$ids$11258$MT&Mo)))
                                                                               (case-lambda
                                                                                 ((g$x$11262$MT&Mo
                                                                                    g$ids$11263$MT&Mo)
                                                                                  ((case-lambda
                                                                                     ((g$ids$11264$MT&Mo
                                                                                        g$x$11265$MT&Mo)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$11265$MT&Mo
                                                                                          g$y$11259$MT&Mo)
                                                                                        g$ids$11264$MT&Mo)))
                                                                                   g$ids$11263$MT&Mo
                                                                                   g$x$11262$MT&Mo))))))
                                                                          g$ids$11257$MT&Mo
                                                                          g$y$11256$MT&Mo))))))
                                                                 g$ls/false$11251$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$t$11266$MT&Mo)
                                                                   ((case-lambda
                                                                      ((g$ls/false$11267$MT&Mo)
                                                                       (if g$ls/false$11267$MT&Mo
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$11205$MT&Mo)))
                                                                           g$ls/false$11267$MT&Mo)
                                                                         ((case-lambda
                                                                            ((g$t$11268$MT&Mo)
                                                                             ((case-lambda
                                                                                ((g$ls/false$11269$MT&Mo)
                                                                                 (if (if g$ls/false$11269$MT&Mo
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$11270$MT&Mo)
                                                                                              (not (g$stx?$9240$MT&Mo
                                                                                                     g$p$11270$MT&Mo))))
                                                                                           g$ls/false$11269$MT&Mo))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$11271$MT&Mo)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$11202$MT&Mo
                                                                                               g$p$11271$MT&Mo
                                                                                               g$n$11204$MT&Mo
                                                                                               g$ids$11205$MT&Mo)))
                                                                                          (case-lambda
                                                                                            ((g$p$11274$MT&Mo
                                                                                               g$ids$11275$MT&Mo)
                                                                                             ((case-lambda
                                                                                                ((g$ids$11276$MT&Mo
                                                                                                   g$p$11277$MT&Mo)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$11277$MT&Mo)
                                                                                                   g$ids$11276$MT&Mo)))
                                                                                              g$ids$11275$MT&Mo
                                                                                              g$p$11274$MT&Mo))))))
                                                                                     g$ls/false$11269$MT&Mo)
                                                                                   ((case-lambda
                                                                                      ((g$t$11278$MT&Mo)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$11279$MT&Mo)
                                                                                           (if g$ls/false$11279$MT&Mo
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$11280$MT&Mo)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$9279$MT&Mo
                                                                                                        g$datum$11280$MT&Mo))
                                                                                                    g$ids$11205$MT&Mo)))
                                                                                               g$ls/false$11279$MT&Mo)
                                                                                             (g$syntax-violation$9749$MT&Mo
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$11278$MT&Mo))))
                                                                                        (g$syntax-dispatch$9631$MT&Mo
                                                                                          g$t$11278$MT&Mo
                                                                                          'any))))
                                                                                    g$t$11268$MT&Mo))))
                                                                              (g$syntax-dispatch$9631$MT&Mo
                                                                                g$t$11268$MT&Mo
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$11266$MT&Mo))))
                                                                    (g$syntax-dispatch$9631$MT&Mo
                                                                      g$t$11266$MT&Mo
                                                                      '()))))
                                                                g$t$11250$MT&Mo))))
                                                          (g$syntax-dispatch$9631$MT&Mo
                                                            g$t$11250$MT&Mo
                                                            '(any .
                                                                  any)))))
                                                      g$t$11222$MT&Mo))))
                                                (g$syntax-dispatch$9631$MT&Mo
                                                  g$t$11222$MT&Mo
                                                  '(any any
                                                        .
                                                        #(each+
                                                          any
                                                          ()
                                                          any))))))
                                            g$t$11210$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11210$MT&Mo
                                        '(any any)))))
                                  g$t$11206$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11206$MT&Mo
                              'any))))
                        g$p$11203$MT&Mo)))))
          (g$cvt$11202$MT&Mo g$pattern$11199$MT&Mo '0 '())))))
   (g$syntax-dispatch$9631$MT&Mo
     g$syntax-dispatch$13172$MT&Mo
     (case-lambda
       ((g$e$11296$MT&Mo g$p$11297$MT&Mo)
        (letrec* ((g$stx^$11298$MT&Mo
                    (case-lambda
                      ((g$e$11406$MT&Mo
                         g$m*$11407$MT&Mo
                         g$s*$11408$MT&Mo
                         g$ae*$11409$MT&Mo)
                       (if (if (null? g$m*$11407$MT&Mo)
                             (if (null? g$s*$11408$MT&Mo)
                               (begin '#f (null? g$ae*$11409$MT&Mo))
                               '#f)
                             '#f)
                         g$e$11406$MT&Mo
                         (g$mkstx$9256$MT&Mo
                           g$e$11406$MT&Mo
                           g$m*$11407$MT&Mo
                           g$s*$11408$MT&Mo
                           g$ae*$11409$MT&Mo)))))
                  (g$match-each$11299$MT&Mo
                    (case-lambda
                      ((g$e$11390$MT&Mo
                         g$p$11391$MT&Mo
                         g$m*$11392$MT&Mo
                         g$s*$11393$MT&Mo
                         g$ae*$11394$MT&Mo)
                       (if (pair? g$e$11390$MT&Mo)
                         ((case-lambda
                            ((g$first$11395$MT&Mo)
                             (if g$first$11395$MT&Mo
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$11396$MT&Mo)
                                     (if g$rest$11396$MT&Mo
                                       (begin
                                         '#f
                                         (cons
                                           g$first$11395$MT&Mo
                                           g$rest$11396$MT&Mo))
                                       '#f)))
                                  (g$match-each$11299$MT&Mo
                                    (cdr g$e$11390$MT&Mo)
                                    g$p$11391$MT&Mo
                                    g$m*$11392$MT&Mo
                                    g$s*$11393$MT&Mo
                                    g$ae*$11394$MT&Mo)))
                               '#f)))
                          (g$match$11305$MT&Mo
                            (car g$e$11390$MT&Mo)
                            g$p$11391$MT&Mo
                            g$m*$11392$MT&Mo
                            g$s*$11393$MT&Mo
                            g$ae*$11394$MT&Mo
                            '()))
                         (if (null? g$e$11390$MT&Mo)
                           '()
                           (if (g$stx?$9240$MT&Mo g$e$11390$MT&Mo)
                             (if (not (g$top-marked?$9202$MT&Mo
                                        g$m*$11392$MT&Mo))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$9255$MT&Mo
                                        g$m*$11392$MT&Mo
                                        g$s*$11393$MT&Mo
                                        g$ae*$11394$MT&Mo
                                        g$e$11390$MT&Mo)))
                                   (case-lambda
                                     ((g$m*$11400$MT&Mo
                                        g$s*$11401$MT&Mo
                                        g$ae*$11402$MT&Mo)
                                      ((case-lambda
                                         ((g$ae*$11403$MT&Mo
                                            g$s*$11404$MT&Mo
                                            g$m*$11405$MT&Mo)
                                          (g$match-each$11299$MT&Mo
                                            (g$stx-expr$9242$MT&Mo
                                              g$e$11390$MT&Mo)
                                            g$p$11391$MT&Mo
                                            g$m*$11405$MT&Mo
                                            g$s*$11404$MT&Mo
                                            g$ae*$11403$MT&Mo)))
                                       g$ae*$11402$MT&Mo
                                       g$s*$11401$MT&Mo
                                       g$m*$11400$MT&Mo)))))
                               '#f)
                             (if (annotation? g$e$11390$MT&Mo)
                               (g$match-each$11299$MT&Mo
                                 (annotation-expression g$e$11390$MT&Mo)
                                 g$p$11391$MT&Mo
                                 g$m*$11392$MT&Mo
                                 g$s*$11393$MT&Mo
                                 g$ae*$11394$MT&Mo)
                               '#f)))))))
                  (g$match-each+$11300$MT&Mo
                    (case-lambda
                      ((g$e$11358$MT&Mo
                         g$x-pat$11359$MT&Mo
                         g$y-pat$11360$MT&Mo
                         g$z-pat$11361$MT&Mo
                         g$m*$11362$MT&Mo
                         g$s*$11363$MT&Mo
                         g$ae*$11364$MT&Mo
                         g$r$11365$MT&Mo)
                       ((letrec ((g$f$11366$MT&Mo
                                   (case-lambda
                                     ((g$e$11367$MT&Mo
                                        g$m*$11368$MT&Mo
                                        g$s*$11369$MT&Mo
                                        g$ae*$11370$MT&Mo)
                                      (if (pair? g$e$11367$MT&Mo)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$11366$MT&Mo
                                               (cdr g$e$11367$MT&Mo)
                                               g$m*$11368$MT&Mo
                                               g$s*$11369$MT&Mo
                                               g$ae*$11370$MT&Mo)))
                                          (case-lambda
                                            ((g$xr*$11374$MT&Mo
                                               g$y-pat$11375$MT&Mo
                                               g$r$11376$MT&Mo)
                                             ((case-lambda
                                                ((g$r$11377$MT&Mo
                                                   g$y-pat$11378$MT&Mo
                                                   g$xr*$11379$MT&Mo)
                                                 (if g$r$11377$MT&Mo
                                                   (if (null?
                                                         g$y-pat$11378$MT&Mo)
                                                     ((case-lambda
                                                        ((g$xr$11380$MT&Mo)
                                                         (if g$xr$11380$MT&Mo
                                                           (values
                                                             (cons
                                                               g$xr$11380$MT&Mo
                                                               g$xr*$11379$MT&Mo)
                                                             g$y-pat$11378$MT&Mo
                                                             g$r$11377$MT&Mo)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$11305$MT&Mo
                                                        (car g$e$11367$MT&Mo)
                                                        g$x-pat$11359$MT&Mo
                                                        g$m*$11368$MT&Mo
                                                        g$s*$11369$MT&Mo
                                                        g$ae*$11370$MT&Mo
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$11378$MT&Mo)
                                                       (g$match$11305$MT&Mo
                                                         (car g$e$11367$MT&Mo)
                                                         (car g$y-pat$11378$MT&Mo)
                                                         g$m*$11368$MT&Mo
                                                         g$s*$11369$MT&Mo
                                                         g$ae*$11370$MT&Mo
                                                         g$r$11377$MT&Mo)))
                                                   (values
                                                     '#f
                                                     '#f
                                                     '#f))))
                                              g$r$11376$MT&Mo
                                              g$y-pat$11375$MT&Mo
                                              g$xr*$11374$MT&Mo))))
                                        (if (g$stx?$9240$MT&Mo
                                              g$e$11367$MT&Mo)
                                          (if (g$top-marked?$9202$MT&Mo
                                                g$m*$11368$MT&Mo)
                                            (values
                                              '()
                                              g$y-pat$11360$MT&Mo
                                              (g$match$11305$MT&Mo
                                                g$e$11367$MT&Mo
                                                g$z-pat$11361$MT&Mo
                                                g$m*$11368$MT&Mo
                                                g$s*$11369$MT&Mo
                                                g$ae*$11370$MT&Mo
                                                g$r$11365$MT&Mo))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$9255$MT&Mo
                                                   g$m*$11368$MT&Mo
                                                   g$s*$11369$MT&Mo
                                                   g$ae*$11370$MT&Mo
                                                   g$e$11367$MT&Mo)))
                                              (case-lambda
                                                ((g$m*$11384$MT&Mo
                                                   g$s*$11385$MT&Mo
                                                   g$ae*$11386$MT&Mo)
                                                 ((case-lambda
                                                    ((g$ae*$11387$MT&Mo
                                                       g$s*$11388$MT&Mo
                                                       g$m*$11389$MT&Mo)
                                                     (g$f$11366$MT&Mo
                                                       (g$stx-expr$9242$MT&Mo
                                                         g$e$11367$MT&Mo)
                                                       g$m*$11389$MT&Mo
                                                       g$s*$11388$MT&Mo
                                                       g$ae*$11387$MT&Mo)))
                                                  g$ae*$11386$MT&Mo
                                                  g$s*$11385$MT&Mo
                                                  g$m*$11384$MT&Mo)))))
                                          (if (annotation?
                                                g$e$11367$MT&Mo)
                                            (g$f$11366$MT&Mo
                                              (annotation-expression
                                                g$e$11367$MT&Mo)
                                              g$m*$11368$MT&Mo
                                              g$s*$11369$MT&Mo
                                              g$ae*$11370$MT&Mo)
                                            (values
                                              '()
                                              g$y-pat$11360$MT&Mo
                                              (g$match$11305$MT&Mo
                                                g$e$11367$MT&Mo
                                                g$z-pat$11361$MT&Mo
                                                g$m*$11368$MT&Mo
                                                g$s*$11369$MT&Mo
                                                g$ae*$11370$MT&Mo
                                                g$r$11365$MT&Mo)))))))))
                          g$f$11366$MT&Mo)
                        g$e$11358$MT&Mo
                        g$m*$11362$MT&Mo
                        g$s*$11363$MT&Mo
                        g$ae*$11364$MT&Mo))))
                  (g$match-each-any$11301$MT&Mo
                    (case-lambda
                      ((g$e$11344$MT&Mo
                         g$m*$11345$MT&Mo
                         g$s*$11346$MT&Mo
                         g$ae*$11347$MT&Mo)
                       (if (pair? g$e$11344$MT&Mo)
                         ((case-lambda
                            ((g$l$11348$MT&Mo)
                             (if g$l$11348$MT&Mo
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$11298$MT&Mo
                                     (car g$e$11344$MT&Mo)
                                     g$m*$11345$MT&Mo
                                     g$s*$11346$MT&Mo
                                     g$ae*$11347$MT&Mo)
                                   g$l$11348$MT&Mo))
                               '#f)))
                          (g$match-each-any$11301$MT&Mo
                            (cdr g$e$11344$MT&Mo)
                            g$m*$11345$MT&Mo
                            g$s*$11346$MT&Mo
                            g$ae*$11347$MT&Mo))
                         (if (null? g$e$11344$MT&Mo)
                           '()
                           (if (g$stx?$9240$MT&Mo g$e$11344$MT&Mo)
                             (if (not (g$top-marked?$9202$MT&Mo
                                        g$m*$11345$MT&Mo))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$9255$MT&Mo
                                        g$m*$11345$MT&Mo
                                        g$s*$11346$MT&Mo
                                        g$ae*$11347$MT&Mo
                                        g$e$11344$MT&Mo)))
                                   (case-lambda
                                     ((g$m*$11352$MT&Mo
                                        g$s*$11353$MT&Mo
                                        g$ae*$11354$MT&Mo)
                                      ((case-lambda
                                         ((g$ae*$11355$MT&Mo
                                            g$s*$11356$MT&Mo
                                            g$m*$11357$MT&Mo)
                                          (g$match-each-any$11301$MT&Mo
                                            (g$stx-expr$9242$MT&Mo
                                              g$e$11344$MT&Mo)
                                            g$m*$11357$MT&Mo
                                            g$s*$11356$MT&Mo
                                            g$ae*$11355$MT&Mo)))
                                       g$ae*$11354$MT&Mo
                                       g$s*$11353$MT&Mo
                                       g$m*$11352$MT&Mo)))))
                               '#f)
                             (if (annotation? g$e$11344$MT&Mo)
                               (g$match-each-any$11301$MT&Mo
                                 (annotation-expression g$e$11344$MT&Mo)
                                 g$m*$11345$MT&Mo
                                 g$s*$11346$MT&Mo
                                 g$ae*$11347$MT&Mo)
                               '#f)))))))
                  (g$match-empty$11302$MT&Mo
                    (case-lambda
                      ((g$p$11341$MT&Mo g$r$11342$MT&Mo)
                       (if (null? g$p$11341$MT&Mo)
                         g$r$11342$MT&Mo
                         (if (eq? g$p$11341$MT&Mo '_)
                           g$r$11342$MT&Mo
                           (if (eq? g$p$11341$MT&Mo 'any)
                             (cons '() g$r$11342$MT&Mo)
                             (if (pair? g$p$11341$MT&Mo)
                               (g$match-empty$11302$MT&Mo
                                 (car g$p$11341$MT&Mo)
                                 (g$match-empty$11302$MT&Mo
                                   (cdr g$p$11341$MT&Mo)
                                   g$r$11342$MT&Mo))
                               (if (eq? g$p$11341$MT&Mo 'each-any)
                                 (cons '() g$r$11342$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11343$MT&Mo)
                                     (if (eqv? g$t$11343$MT&Mo 'each)
                                       (g$match-empty$11302$MT&Mo
                                         (vector-ref g$p$11341$MT&Mo '1)
                                         g$r$11342$MT&Mo)
                                       (if (eqv? g$t$11343$MT&Mo 'each+)
                                         (g$match-empty$11302$MT&Mo
                                           (vector-ref
                                             g$p$11341$MT&Mo
                                             '1)
                                           (g$match-empty$11302$MT&Mo
                                             (g$reverse$6409$MT&Mo
                                               (vector-ref
                                                 g$p$11341$MT&Mo
                                                 '2))
                                             (g$match-empty$11302$MT&Mo
                                               (vector-ref
                                                 g$p$11341$MT&Mo
                                                 '3)
                                               g$r$11342$MT&Mo)))
                                         (if (g$memv$5746$MT&Mo
                                               g$t$11343$MT&Mo
                                               '(free-id atom))
                                           g$r$11342$MT&Mo
                                           (if (g$memv$5746$MT&Mo
                                                 g$t$11343$MT&Mo
                                                 '(scheme-id atom))
                                             g$r$11342$MT&Mo
                                             (if (eqv?
                                                   g$t$11343$MT&Mo
                                                   'vector)
                                               (g$match-empty$11302$MT&Mo
                                                 (vector-ref
                                                   g$p$11341$MT&Mo
                                                   '1)
                                                 g$r$11342$MT&Mo)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$11341$MT&Mo))))))))
                                  (vector-ref
                                    g$p$11341$MT&Mo
                                    '0))))))))))
                  (g$combine$11303$MT&Mo
                    (case-lambda
                      ((g$r*$11339$MT&Mo g$r$11340$MT&Mo)
                       (if (null? (car g$r*$11339$MT&Mo))
                         g$r$11340$MT&Mo
                         (cons
                           (g$map$5753$MT&Mo car g$r*$11339$MT&Mo)
                           (g$combine$11303$MT&Mo
                             (g$map$5753$MT&Mo cdr g$r*$11339$MT&Mo)
                             g$r$11340$MT&Mo))))))
                  (g$match*$11304$MT&Mo
                    (case-lambda
                      ((g$e$11321$MT&Mo
                         g$p$11322$MT&Mo
                         g$m*$11323$MT&Mo
                         g$s*$11324$MT&Mo
                         g$ae*$11325$MT&Mo
                         g$r$11326$MT&Mo)
                       (if (null? g$p$11322$MT&Mo)
                         (if (null? g$e$11321$MT&Mo)
                           (begin '#f g$r$11326$MT&Mo)
                           '#f)
                         (if (pair? g$p$11322$MT&Mo)
                           (if (pair? g$e$11321$MT&Mo)
                             (begin
                               '#f
                               (g$match$11305$MT&Mo
                                 (car g$e$11321$MT&Mo)
                                 (car g$p$11322$MT&Mo)
                                 g$m*$11323$MT&Mo
                                 g$s*$11324$MT&Mo
                                 g$ae*$11325$MT&Mo
                                 (g$match$11305$MT&Mo
                                   (cdr g$e$11321$MT&Mo)
                                   (cdr g$p$11322$MT&Mo)
                                   g$m*$11323$MT&Mo
                                   g$s*$11324$MT&Mo
                                   g$ae*$11325$MT&Mo
                                   g$r$11326$MT&Mo)))
                             '#f)
                           (if (eq? g$p$11322$MT&Mo 'each-any)
                             ((case-lambda
                                ((g$l$11327$MT&Mo)
                                 (if g$l$11327$MT&Mo
                                   (begin
                                     '#f
                                     (cons
                                       g$l$11327$MT&Mo
                                       g$r$11326$MT&Mo))
                                   '#f)))
                              (g$match-each-any$11301$MT&Mo
                                g$e$11321$MT&Mo
                                g$m*$11323$MT&Mo
                                g$s*$11324$MT&Mo
                                g$ae*$11325$MT&Mo))
                             ((case-lambda
                                ((g$t$11328$MT&Mo)
                                 (if (eqv? g$t$11328$MT&Mo 'each)
                                   (if (null? g$e$11321$MT&Mo)
                                     (g$match-empty$11302$MT&Mo
                                       (vector-ref g$p$11322$MT&Mo '1)
                                       g$r$11326$MT&Mo)
                                     ((case-lambda
                                        ((g$r*$11329$MT&Mo)
                                         (if g$r*$11329$MT&Mo
                                           (begin
                                             '#f
                                             (g$combine$11303$MT&Mo
                                               g$r*$11329$MT&Mo
                                               g$r$11326$MT&Mo))
                                           '#f)))
                                      (g$match-each$11299$MT&Mo
                                        g$e$11321$MT&Mo
                                        (vector-ref g$p$11322$MT&Mo '1)
                                        g$m*$11323$MT&Mo
                                        g$s*$11324$MT&Mo
                                        g$ae*$11325$MT&Mo)))
                                   (if (eqv? g$t$11328$MT&Mo 'free-id)
                                     (if (g$symbol?$6402$MT&Mo
                                           g$e$11321$MT&Mo)
                                       (if (g$top-marked?$9202$MT&Mo
                                             g$m*$11323$MT&Mo)
                                         (if (g$free-id=?$9272$MT&Mo
                                               (g$stx^$11298$MT&Mo
                                                 g$e$11321$MT&Mo
                                                 g$m*$11323$MT&Mo
                                                 g$s*$11324$MT&Mo
                                                 g$ae*$11325$MT&Mo)
                                               (vector-ref
                                                 g$p$11322$MT&Mo
                                                 '1))
                                           (begin '#f g$r$11326$MT&Mo)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (eqv?
                                           g$t$11328$MT&Mo
                                           'scheme-id)
                                       (if (g$symbol?$6402$MT&Mo
                                             g$e$11321$MT&Mo)
                                         (if (g$top-marked?$9202$MT&Mo
                                               g$m*$11323$MT&Mo)
                                           (if (g$free-id=?$9272$MT&Mo
                                                 (g$stx^$11298$MT&Mo
                                                   g$e$11321$MT&Mo
                                                   g$m*$11323$MT&Mo
                                                   g$s*$11324$MT&Mo
                                                   g$ae*$11325$MT&Mo)
                                                 (g$scheme-stx$9574$MT&Mo
                                                   (vector-ref
                                                     g$p$11322$MT&Mo
                                                     '1)))
                                             (begin '#f g$r$11326$MT&Mo)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv? g$t$11328$MT&Mo 'each+)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$11300$MT&Mo
                                                g$e$11321$MT&Mo
                                                (vector-ref
                                                  g$p$11322$MT&Mo
                                                  '1)
                                                (vector-ref
                                                  g$p$11322$MT&Mo
                                                  '2)
                                                (vector-ref
                                                  g$p$11322$MT&Mo
                                                  '3)
                                                g$m*$11323$MT&Mo
                                                g$s*$11324$MT&Mo
                                                g$ae*$11325$MT&Mo
                                                g$r$11326$MT&Mo)))
                                           (case-lambda
                                             ((g$xr*$11333$MT&Mo
                                                g$y-pat$11334$MT&Mo
                                                g$r$11335$MT&Mo)
                                              ((case-lambda
                                                 ((g$r$11336$MT&Mo
                                                    g$y-pat$11337$MT&Mo
                                                    g$xr*$11338$MT&Mo)
                                                  (if g$r$11336$MT&Mo
                                                    (if (null?
                                                          g$y-pat$11337$MT&Mo)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$11338$MT&Mo)
                                                          (g$match-empty$11302$MT&Mo
                                                            (vector-ref
                                                              g$p$11322$MT&Mo
                                                              '1)
                                                            g$r$11336$MT&Mo)
                                                          (g$combine$11303$MT&Mo
                                                            g$xr*$11338$MT&Mo
                                                            g$r$11336$MT&Mo)))
                                                      '#f)
                                                    '#f)))
                                               g$r$11335$MT&Mo
                                               g$y-pat$11334$MT&Mo
                                               g$xr*$11333$MT&Mo))))
                                         (if (eqv?
                                               g$t$11328$MT&Mo
                                               'atom)
                                           (if (equal?
                                                 (vector-ref
                                                   g$p$11322$MT&Mo
                                                   '1)
                                                 (g$strip$9278$MT&Mo
                                                   g$e$11321$MT&Mo
                                                   g$m*$11323$MT&Mo))
                                             (begin '#f g$r$11326$MT&Mo)
                                             '#f)
                                           (if (eqv?
                                                 g$t$11328$MT&Mo
                                                 'vector)
                                             (if (g$vector?$6400$MT&Mo
                                                   g$e$11321$MT&Mo)
                                               (begin
                                                 '#f
                                                 (g$match$11305$MT&Mo
                                                   (vector->list
                                                     g$e$11321$MT&Mo)
                                                   (vector-ref
                                                     g$p$11322$MT&Mo
                                                     '1)
                                                   g$m*$11323$MT&Mo
                                                   g$s*$11324$MT&Mo
                                                   g$ae*$11325$MT&Mo
                                                   g$r$11326$MT&Mo))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$11322$MT&Mo)))))))))
                              (vector-ref g$p$11322$MT&Mo '0))))))))
                  (g$match$11305$MT&Mo
                    (case-lambda
                      ((g$e$11306$MT&Mo
                         g$p$11307$MT&Mo
                         g$m*$11308$MT&Mo
                         g$s*$11309$MT&Mo
                         g$ae*$11310$MT&Mo
                         g$r$11311$MT&Mo)
                       (if (not g$r$11311$MT&Mo)
                         '#f
                         (if (eq? g$p$11307$MT&Mo '_)
                           g$r$11311$MT&Mo
                           (if (eq? g$p$11307$MT&Mo 'any)
                             (cons
                               (g$stx^$11298$MT&Mo
                                 g$e$11306$MT&Mo
                                 g$m*$11308$MT&Mo
                                 g$s*$11309$MT&Mo
                                 g$ae*$11310$MT&Mo)
                               g$r$11311$MT&Mo)
                             (if (g$stx?$9240$MT&Mo g$e$11306$MT&Mo)
                               (if (not (g$top-marked?$9202$MT&Mo
                                          g$m*$11308$MT&Mo))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$9255$MT&Mo
                                          g$m*$11308$MT&Mo
                                          g$s*$11309$MT&Mo
                                          g$ae*$11310$MT&Mo
                                          g$e$11306$MT&Mo)))
                                     (case-lambda
                                       ((g$m*$11315$MT&Mo
                                          g$s*$11316$MT&Mo
                                          g$ae*$11317$MT&Mo)
                                        ((case-lambda
                                           ((g$ae*$11318$MT&Mo
                                              g$s*$11319$MT&Mo
                                              g$m*$11320$MT&Mo)
                                            (g$match$11305$MT&Mo
                                              (g$stx-expr$9242$MT&Mo
                                                g$e$11306$MT&Mo)
                                              g$p$11307$MT&Mo
                                              g$m*$11320$MT&Mo
                                              g$s*$11319$MT&Mo
                                              g$ae*$11318$MT&Mo
                                              g$r$11311$MT&Mo)))
                                         g$ae*$11317$MT&Mo
                                         g$s*$11316$MT&Mo
                                         g$m*$11315$MT&Mo)))))
                                 '#f)
                               (if (annotation? g$e$11306$MT&Mo)
                                 (g$match$11305$MT&Mo
                                   (annotation-expression
                                     g$e$11306$MT&Mo)
                                   g$p$11307$MT&Mo
                                   g$m*$11308$MT&Mo
                                   g$s*$11309$MT&Mo
                                   g$ae*$11310$MT&Mo
                                   g$r$11311$MT&Mo)
                                 (g$match*$11304$MT&Mo
                                   g$e$11306$MT&Mo
                                   g$p$11307$MT&Mo
                                   g$m*$11308$MT&Mo
                                   g$s*$11309$MT&Mo
                                   g$ae*$11310$MT&Mo
                                   g$r$11311$MT&Mo))))))))))
          (g$match$11305$MT&Mo
            g$e$11296$MT&Mo
            g$p$11297$MT&Mo
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$9632$MT&Mo
     g$ellipsis?$13173$MT&Mo
     (case-lambda
       ((g$x$11410$MT&Mo)
        (if (g$id?$9268$MT&Mo g$x$11410$MT&Mo)
          (begin
            '#f
            (g$free-id=?$9272$MT&Mo
              g$x$11410$MT&Mo
              (g$scheme-stx$9574$MT&Mo '...)))
          '#f))))
   (g$underscore?$9633$MT&Mo
     g$underscore?$13174$MT&Mo
     (case-lambda
       ((g$x$11411$MT&Mo)
        (if (g$id?$9268$MT&Mo g$x$11411$MT&Mo)
          (begin
            '#f
            (g$free-id=?$9272$MT&Mo
              g$x$11411$MT&Mo
              (g$scheme-stx$9574$MT&Mo '_)))
          '#f))))
   (g$verify-literals$9634$MT&Mo
     g$verify-literals$13175$MT&Mo
     (case-lambda
       ((g$lits$11412$MT&Mo g$expr$11413$MT&Mo)
        (g$for-each$5754$MT&Mo
          (case-lambda
            ((g$x$11414$MT&Mo)
             (if ((case-lambda
                    ((g$t$11415$MT&Mo)
                     (if g$t$11415$MT&Mo
                       g$t$11415$MT&Mo
                       ((case-lambda
                          ((g$t$11416$MT&Mo)
                           (if g$t$11416$MT&Mo
                             g$t$11416$MT&Mo
                             (begin
                               '#f
                               (g$underscore?$9633$MT&Mo
                                 g$x$11414$MT&Mo)))))
                        (g$ellipsis?$9632$MT&Mo g$x$11414$MT&Mo)))))
                  (not (g$id?$9268$MT&Mo g$x$11414$MT&Mo)))
               (g$syntax-violation$9749$MT&Mo
                 '#f
                 '"invalid literal"
                 g$expr$11413$MT&Mo
                 g$x$11414$MT&Mo)
               (void))))
          g$lits$11412$MT&Mo))))
   (g$syntax-case-transformer$9635$MT&Mo
     g$syntax-case-transformer$13176$MT&Mo
     (case-lambda
       ((g$e$11417$MT&Mo g$r$11418$MT&Mo g$mr$11419$MT&Mo)
        (letrec* ((g$build-dispatch-call$11420$MT&Mo
                    (case-lambda
                      ((g$pvars$11474$MT&Mo
                         g$expr$11475$MT&Mo
                         g$y$11476$MT&Mo
                         g$r$11477$MT&Mo
                         g$mr$11478$MT&Mo)
                       ((case-lambda
                          ((g$ids$11479$MT&Mo g$levels$11480$MT&Mo)
                           ((case-lambda
                              ((g$labels$11481$MT&Mo
                                 g$new-vars$11482$MT&Mo)
                               ((case-lambda
                                  ((g$body$11483$MT&Mo)
                                   (list
                                     '(primitive apply)
                                     (g$build-lambda$9190$MT&Mo
                                       '#f
                                       g$new-vars$11482$MT&Mo
                                       g$body$11483$MT&Mo)
                                     g$y$11476$MT&Mo)))
                                (g$chi-expr$9649$MT&Mo
                                  (g$add-subst$9258$MT&Mo
                                    (g$make-full-rib$9234$MT&Mo
                                      g$ids$11479$MT&Mo
                                      g$labels$11481$MT&Mo)
                                    g$expr$11475$MT&Mo)
                                  (append
                                    (g$map$5753$MT&Mo
                                      (case-lambda
                                        ((g$label$11484$MT&Mo
                                           g$var$11485$MT&Mo
                                           g$level$11486$MT&Mo)
                                         (cons
                                           g$label$11484$MT&Mo
                                           (g$make-binding$9284$MT&Mo
                                             'syntax
                                             (cons
                                               g$var$11485$MT&Mo
                                               g$level$11486$MT&Mo)))))
                                      g$labels$11481$MT&Mo
                                      g$new-vars$11482$MT&Mo
                                      (g$map$5753$MT&Mo
                                        cdr
                                        g$pvars$11474$MT&Mo))
                                    g$r$11477$MT&Mo)
                                  g$mr$11478$MT&Mo))))
                            (g$map$5753$MT&Mo
                              g$gen-label$9205$MT&Mo
                              g$ids$11479$MT&Mo)
                            (g$map$5753$MT&Mo
                              g$gen-lexical$9203$MT&Mo
                              g$ids$11479$MT&Mo))))
                        (g$map$5753$MT&Mo car g$pvars$11474$MT&Mo)
                        (g$map$5753$MT&Mo cdr g$pvars$11474$MT&Mo)))))
                  (g$invalid-ids-error$11421$MT&Mo
                    (case-lambda
                      ((g$id*$11468$MT&Mo
                         g$e$11469$MT&Mo
                         g$class$11470$MT&Mo)
                       ((letrec ((g$find$11471$MT&Mo
                                   (case-lambda
                                     ((g$id*$11472$MT&Mo
                                        g$ok*$11473$MT&Mo)
                                      (if (null? g$id*$11472$MT&Mo)
                                        (g$syntax-violation$9749$MT&Mo
                                          '#f
                                          '"invalid syntax"
                                          g$e$11469$MT&Mo)
                                        (if (g$id?$9268$MT&Mo
                                              (car g$id*$11472$MT&Mo))
                                          (if (g$bound-id-member?$9275$MT&Mo
                                                (car g$id*$11472$MT&Mo)
                                                g$ok*$11473$MT&Mo)
                                            (g$syntax-error$9746$MT&Mo
                                              (car g$id*$11472$MT&Mo)
                                              '"duplicate "
                                              g$class$11470$MT&Mo)
                                            (g$find$11471$MT&Mo
                                              (cdr g$id*$11472$MT&Mo)
                                              (cons
                                                (car g$id*$11472$MT&Mo)
                                                g$ok*$11473$MT&Mo)))
                                          (g$syntax-error$9746$MT&Mo
                                            (car g$id*$11472$MT&Mo)
                                            '"invalid "
                                            g$class$11470$MT&Mo)))))))
                          g$find$11471$MT&Mo)
                        g$id*$11468$MT&Mo
                        '()))))
                  (g$gen-clause$11422$MT&Mo
                    (case-lambda
                      ((g$x$11448$MT&Mo
                         g$keys$11449$MT&Mo
                         g$clauses$11450$MT&Mo
                         g$r$11451$MT&Mo
                         g$mr$11452$MT&Mo
                         g$pat$11453$MT&Mo
                         g$fender$11454$MT&Mo
                         g$expr$11455$MT&Mo)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$convert-pattern$9630$MT&Mo
                              g$pat$11453$MT&Mo
                              g$keys$11449$MT&Mo)))
                         (case-lambda
                           ((g$p$11458$MT&Mo g$pvars$11459$MT&Mo)
                            ((case-lambda
                               ((g$pvars$11460$MT&Mo g$p$11461$MT&Mo)
                                (if (not (g$distinct-bound-ids?$9274$MT&Mo
                                           (g$map$5753$MT&Mo
                                             car
                                             g$pvars$11460$MT&Mo)))
                                  (g$invalid-ids-error$11421$MT&Mo
                                    (g$map$5753$MT&Mo
                                      car
                                      g$pvars$11460$MT&Mo)
                                    g$pat$11453$MT&Mo
                                    '"pattern variable")
                                  (if (not (g$for-all$5751$MT&Mo
                                             (case-lambda
                                               ((g$x$11462$MT&Mo)
                                                (not (g$ellipsis?$9632$MT&Mo
                                                       (car g$x$11462$MT&Mo)))))
                                             g$pvars$11460$MT&Mo))
                                    (g$syntax-violation$9749$MT&Mo
                                      '#f
                                      '"misplaced ellipsis in syntax-case pattern"
                                      g$pat$11453$MT&Mo)
                                    ((case-lambda
                                       ((g$y$11463$MT&Mo)
                                        ((case-lambda
                                           ((g$test$11464$MT&Mo)
                                            ((case-lambda
                                               ((g$conseq$11465$MT&Mo)
                                                ((case-lambda
                                                   ((g$altern$11466$MT&Mo)
                                                    (list
                                                      (g$build-lambda$9190$MT&Mo
                                                        '#f
                                                        (list
                                                          g$y$11463$MT&Mo)
                                                        (list
                                                          'if
                                                          g$test$11464$MT&Mo
                                                          g$conseq$11465$MT&Mo
                                                          g$altern$11466$MT&Mo))
                                                      (list
                                                        '(primitive
                                                           syntax-dispatch)
                                                        g$x$11448$MT&Mo
                                                        (list
                                                          'quote
                                                          g$p$11461$MT&Mo)))))
                                                 (g$gen-syntax-case$11423$MT&Mo
                                                   g$x$11448$MT&Mo
                                                   g$keys$11449$MT&Mo
                                                   g$clauses$11450$MT&Mo
                                                   g$r$11451$MT&Mo
                                                   g$mr$11452$MT&Mo))))
                                             (g$build-dispatch-call$11420$MT&Mo
                                               g$pvars$11460$MT&Mo
                                               g$expr$11455$MT&Mo
                                               g$y$11463$MT&Mo
                                               g$r$11451$MT&Mo
                                               g$mr$11452$MT&Mo))))
                                         (if (eq? g$fender$11454$MT&Mo
                                                  '#t)
                                           g$y$11463$MT&Mo
                                           ((case-lambda
                                              ((g$call$11467$MT&Mo)
                                               (list
                                                 'if
                                                 g$y$11463$MT&Mo
                                                 g$call$11467$MT&Mo
                                                 (list 'quote '#f))))
                                            (g$build-dispatch-call$11420$MT&Mo
                                              g$pvars$11460$MT&Mo
                                              g$fender$11454$MT&Mo
                                              g$y$11463$MT&Mo
                                              g$r$11451$MT&Mo
                                              g$mr$11452$MT&Mo))))))
                                     (g$gen-lexical$9203$MT&Mo
                                       'tmp))))))
                             g$pvars$11459$MT&Mo
                             g$p$11458$MT&Mo)))))))
                  (g$gen-syntax-case$11423$MT&Mo
                    (case-lambda
                      ((g$x$11431$MT&Mo
                         g$keys$11432$MT&Mo
                         g$clauses$11433$MT&Mo
                         g$r$11434$MT&Mo
                         g$mr$11435$MT&Mo)
                       (if (null? g$clauses$11433$MT&Mo)
                         (list
                           '(primitive syntax-error)
                           g$x$11431$MT&Mo)
                         ((case-lambda
                            ((g$t$11436$MT&Mo)
                             ((case-lambda
                                ((g$ls/false$11437$MT&Mo)
                                 (if g$ls/false$11437$MT&Mo
                                   (apply
                                     (case-lambda
                                       ((g$pat$11438$MT&Mo
                                          g$expr$11439$MT&Mo)
                                        (if (if (g$id?$9268$MT&Mo
                                                  g$pat$11438$MT&Mo)
                                              (if (not (g$bound-id-member?$9275$MT&Mo
                                                         g$pat$11438$MT&Mo
                                                         g$keys$11432$MT&Mo))
                                                (begin
                                                  '#f
                                                  (not (g$ellipsis?$9632$MT&Mo
                                                         g$pat$11438$MT&Mo)))
                                                '#f)
                                              '#f)
                                          (if (g$free-id=?$9272$MT&Mo
                                                g$pat$11438$MT&Mo
                                                (g$scheme-stx$9574$MT&Mo
                                                  '_))
                                            (g$chi-expr$9649$MT&Mo
                                              g$expr$11439$MT&Mo
                                              g$r$11434$MT&Mo
                                              g$mr$11435$MT&Mo)
                                            ((case-lambda
                                               ((g$lab$11440$MT&Mo
                                                  g$lex$11441$MT&Mo)
                                                ((case-lambda
                                                   ((g$body$11442$MT&Mo)
                                                    (list
                                                      (g$build-lambda$9190$MT&Mo
                                                        '#f
                                                        (list
                                                          g$lex$11441$MT&Mo)
                                                        g$body$11442$MT&Mo)
                                                      g$x$11431$MT&Mo)))
                                                 (g$chi-expr$9649$MT&Mo
                                                   (g$add-subst$9258$MT&Mo
                                                     (g$make-full-rib$9234$MT&Mo
                                                       (list
                                                         g$pat$11438$MT&Mo)
                                                       (list
                                                         g$lab$11440$MT&Mo))
                                                     g$expr$11439$MT&Mo)
                                                   (cons
                                                     (cons
                                                       g$lab$11440$MT&Mo
                                                       (g$make-binding$9284$MT&Mo
                                                         'syntax
                                                         (cons
                                                           g$lex$11441$MT&Mo
                                                           '0)))
                                                     g$r$11434$MT&Mo)
                                                   g$mr$11435$MT&Mo))))
                                             (g$gen-label$9205$MT&Mo
                                               g$pat$11438$MT&Mo)
                                             (g$gen-lexical$9203$MT&Mo
                                               g$pat$11438$MT&Mo)))
                                          (g$gen-clause$11422$MT&Mo
                                            g$x$11431$MT&Mo
                                            g$keys$11432$MT&Mo
                                            (cdr g$clauses$11433$MT&Mo)
                                            g$r$11434$MT&Mo
                                            g$mr$11435$MT&Mo
                                            g$pat$11438$MT&Mo
                                            '#t
                                            g$expr$11439$MT&Mo))))
                                     g$ls/false$11437$MT&Mo)
                                   ((case-lambda
                                      ((g$t$11443$MT&Mo)
                                       ((case-lambda
                                          ((g$ls/false$11444$MT&Mo)
                                           (if g$ls/false$11444$MT&Mo
                                             (apply
                                               (case-lambda
                                                 ((g$pat$11445$MT&Mo
                                                    g$fender$11446$MT&Mo
                                                    g$expr$11447$MT&Mo)
                                                  (g$gen-clause$11422$MT&Mo
                                                    g$x$11431$MT&Mo
                                                    g$keys$11432$MT&Mo
                                                    (cdr g$clauses$11433$MT&Mo)
                                                    g$r$11434$MT&Mo
                                                    g$mr$11435$MT&Mo
                                                    g$pat$11445$MT&Mo
                                                    g$fender$11446$MT&Mo
                                                    g$expr$11447$MT&Mo)))
                                               g$ls/false$11444$MT&Mo)
                                             (g$syntax-violation$9749$MT&Mo
                                               '#f
                                               '"invalid syntax"
                                               g$t$11443$MT&Mo))))
                                        (g$syntax-dispatch$9631$MT&Mo
                                          g$t$11443$MT&Mo
                                          '(any any any)))))
                                    g$t$11436$MT&Mo))))
                              (g$syntax-dispatch$9631$MT&Mo
                                g$t$11436$MT&Mo
                                '(any any)))))
                          (car g$clauses$11433$MT&Mo)))))))
          ((case-lambda
             ((g$t$11424$MT&Mo)
              ((case-lambda
                 ((g$ls/false$11425$MT&Mo)
                  (if g$ls/false$11425$MT&Mo
                    (apply
                      (case-lambda
                        ((g$expr$11426$MT&Mo
                           g$keys$11427$MT&Mo
                           g$clauses$11428$MT&Mo)
                         (begin
                           (g$verify-literals$9634$MT&Mo
                             g$keys$11427$MT&Mo
                             g$e$11417$MT&Mo)
                           ((case-lambda
                              ((g$x$11429$MT&Mo)
                               ((case-lambda
                                  ((g$body$11430$MT&Mo)
                                   (list
                                     (g$build-lambda$9190$MT&Mo
                                       '#f
                                       (list g$x$11429$MT&Mo)
                                       g$body$11430$MT&Mo)
                                     (g$chi-expr$9649$MT&Mo
                                       g$expr$11426$MT&Mo
                                       g$r$11418$MT&Mo
                                       g$mr$11419$MT&Mo))))
                                (g$gen-syntax-case$11423$MT&Mo
                                  g$x$11429$MT&Mo
                                  g$keys$11427$MT&Mo
                                  g$clauses$11428$MT&Mo
                                  g$r$11418$MT&Mo
                                  g$mr$11419$MT&Mo))))
                            (g$gen-lexical$9203$MT&Mo 'tmp)))))
                      g$ls/false$11425$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$11424$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$11424$MT&Mo
                 '(_ any each-any . each-any)))))
           g$e$11417$MT&Mo)))))
   (g$ellipsis-map$9636$MT&Mo
     g$ellipsis-map$13177$MT&Mo
     (case-lambda
       ((g$proc$11487$MT&Mo g$ls$11488$MT&Mo . g$ls*$11489$MT&Mo)
        (letrec* ((g$who$11490$MT&Mo '...))
          (begin
            (if (not (list? g$ls$11488$MT&Mo))
              (assertion-violation
                g$who$11490$MT&Mo
                '"not a list"
                g$ls$11488$MT&Mo)
              (void))
            (if (not (null? g$ls*$11489$MT&Mo))
              ((case-lambda
                 ((g$n$11491$MT&Mo)
                  (g$for-each$5754$MT&Mo
                    (case-lambda
                      ((g$x$11492$MT&Mo)
                       (begin
                         (if (not (list? g$x$11492$MT&Mo))
                           (assertion-violation
                             g$who$11490$MT&Mo
                             '"not a list"
                             g$x$11492$MT&Mo)
                           (void))
                         (if (not (= (length g$x$11492$MT&Mo)
                                     g$n$11491$MT&Mo))
                           (assertion-violation
                             g$who$11490$MT&Mo
                             '"length mismatch"
                             g$ls$11488$MT&Mo
                             g$x$11492$MT&Mo)
                           (void)))))
                    g$ls*$11489$MT&Mo)))
               (length g$ls$11488$MT&Mo))
              (void))
            (apply
              g$map$5753$MT&Mo
              g$proc$11487$MT&Mo
              g$ls$11488$MT&Mo
              g$ls*$11489$MT&Mo))))))
   (g$syntax-transformer$9637$MT&Mo
     g$syntax-transformer$13178$MT&Mo
     (case-lambda
       ((g$e$11493$MT&Mo g$r$11494$MT&Mo g$mr$11495$MT&Mo)
        (letrec* ((g$gen-syntax$11496$MT&Mo
                    (case-lambda
                      ((g$src$11553$MT&Mo
                         g$e$11554$MT&Mo
                         g$r$11555$MT&Mo
                         g$maps$11556$MT&Mo
                         g$ellipsis?$11557$MT&Mo
                         g$vec?$11558$MT&Mo)
                       ((case-lambda
                          ((g$t$11559$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$11560$MT&Mo)
                               (if (if g$ls/false$11560$MT&Mo
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$dots$11561$MT&Mo)
                                            (g$ellipsis?$11557$MT&Mo
                                              g$dots$11561$MT&Mo)))
                                         g$ls/false$11560$MT&Mo))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$dots$11562$MT&Mo)
                                      (g$syntax-violation$9749$MT&Mo
                                        '#f
                                        '"misplaced ellipsis in syntax form"
                                        g$src$11553$MT&Mo)))
                                   g$ls/false$11560$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11563$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$11564$MT&Mo)
                                         (if (if g$ls/false$11564$MT&Mo
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$id$11565$MT&Mo)
                                                      (g$id?$9268$MT&Mo
                                                        g$id$11565$MT&Mo)))
                                                   g$ls/false$11564$MT&Mo))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$id$11566$MT&Mo)
                                                ((case-lambda
                                                   ((g$label$11567$MT&Mo)
                                                    ((case-lambda
                                                       ((g$b$11568$MT&Mo)
                                                        (if (eq? (g$binding-type$9285$MT&Mo
                                                                   g$b$11568$MT&Mo)
                                                                 'syntax)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               ((case-lambda
                                                                  ((g$var.lev$11571$MT&Mo)
                                                                   (g$gen-ref$11497$MT&Mo
                                                                     g$src$11553$MT&Mo
                                                                     (car g$var.lev$11571$MT&Mo)
                                                                     (cdr g$var.lev$11571$MT&Mo)
                                                                     g$maps$11556$MT&Mo)))
                                                                (g$binding-value$9286$MT&Mo
                                                                  g$b$11568$MT&Mo))))
                                                            (case-lambda
                                                              ((g$var$11572$MT&Mo
                                                                 g$maps$11573$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$maps$11574$MT&Mo
                                                                     g$var$11575$MT&Mo)
                                                                   (values
                                                                     (list
                                                                       'ref
                                                                       g$var$11575$MT&Mo)
                                                                     g$maps$11574$MT&Mo)))
                                                                g$maps$11573$MT&Mo
                                                                g$var$11572$MT&Mo))))
                                                          (values
                                                            (list
                                                              'quote
                                                              g$e$11554$MT&Mo)
                                                            g$maps$11556$MT&Mo))))
                                                     (g$label->binding$9283$MT&Mo
                                                       g$label$11567$MT&Mo
                                                       g$r$11555$MT&Mo))))
                                                 (g$id->label$9281$MT&Mo
                                                   g$e$11554$MT&Mo))))
                                             g$ls/false$11564$MT&Mo)
                                           ((case-lambda
                                              ((g$t$11576$MT&Mo)
                                               ((case-lambda
                                                  ((g$ls/false$11577$MT&Mo)
                                                   (if (if g$ls/false$11577$MT&Mo
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$dots$11578$MT&Mo
                                                                  g$e$11579$MT&Mo)
                                                                (g$ellipsis?$11557$MT&Mo
                                                                  g$dots$11578$MT&Mo)))
                                                             g$ls/false$11577$MT&Mo))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$dots$11580$MT&Mo
                                                            g$e$11581$MT&Mo)
                                                          (if g$vec?$11558$MT&Mo
                                                            (g$syntax-violation$9749$MT&Mo
                                                              '#f
                                                              '"misplaced ellipsis in syntax form"
                                                              g$src$11553$MT&Mo)
                                                            (g$gen-syntax$11496$MT&Mo
                                                              g$src$11553$MT&Mo
                                                              g$e$11581$MT&Mo
                                                              g$r$11555$MT&Mo
                                                              g$maps$11556$MT&Mo
                                                              (case-lambda
                                                                ((g$x$11582$MT&Mo)
                                                                 '#f))
                                                              '#f))))
                                                       g$ls/false$11577$MT&Mo)
                                                     ((case-lambda
                                                        ((g$t$11583$MT&Mo)
                                                         ((case-lambda
                                                            ((g$ls/false$11584$MT&Mo)
                                                             (if (if g$ls/false$11584$MT&Mo
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$x$11585$MT&Mo
                                                                            g$dots$11586$MT&Mo
                                                                            g$y$11587$MT&Mo)
                                                                          (g$ellipsis?$11557$MT&Mo
                                                                            g$dots$11586$MT&Mo)))
                                                                       g$ls/false$11584$MT&Mo))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$11588$MT&Mo
                                                                      g$dots$11589$MT&Mo
                                                                      g$y$11590$MT&Mo)
                                                                    ((letrec ((g$f$11591$MT&Mo
                                                                                (case-lambda
                                                                                  ((g$y$11592$MT&Mo
                                                                                     g$k$11593$MT&Mo)
                                                                                   ((case-lambda
                                                                                      ((g$t$11594$MT&Mo)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$11595$MT&Mo)
                                                                                           (if g$ls/false$11595$MT&Mo
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (g$k$11593$MT&Mo
                                                                                                    g$maps$11556$MT&Mo)))
                                                                                               g$ls/false$11595$MT&Mo)
                                                                                             ((case-lambda
                                                                                                ((g$t$11596$MT&Mo)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$11597$MT&Mo)
                                                                                                     (if (if g$ls/false$11597$MT&Mo
                                                                                                           (begin
                                                                                                             '#f
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 ((g$dots$11598$MT&Mo
                                                                                                                    g$y$11599$MT&Mo)
                                                                                                                  (g$ellipsis?$11557$MT&Mo
                                                                                                                    g$dots$11598$MT&Mo)))
                                                                                                               g$ls/false$11597$MT&Mo))
                                                                                                           '#f)
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$dots$11600$MT&Mo
                                                                                                              g$y$11601$MT&Mo)
                                                                                                            (g$f$11591$MT&Mo
                                                                                                              g$y$11601$MT&Mo
                                                                                                              (case-lambda
                                                                                                                ((g$maps$11602$MT&Mo)
                                                                                                                 (call-with-values
                                                                                                                   (case-lambda
                                                                                                                     (()
                                                                                                                      (g$k$11593$MT&Mo
                                                                                                                        (cons
                                                                                                                          '()
                                                                                                                          g$maps$11602$MT&Mo))))
                                                                                                                   (case-lambda
                                                                                                                     ((g$x$11605$MT&Mo
                                                                                                                        g$maps$11606$MT&Mo)
                                                                                                                      ((case-lambda
                                                                                                                         ((g$maps$11607$MT&Mo
                                                                                                                            g$x$11608$MT&Mo)
                                                                                                                          (if (null?
                                                                                                                                (car g$maps$11607$MT&Mo))
                                                                                                                            (g$syntax-violation$9749$MT&Mo
                                                                                                                              '#f
                                                                                                                              '"extra ellipsis in syntax form"
                                                                                                                              g$src$11553$MT&Mo)
                                                                                                                            (values
                                                                                                                              (g$gen-mappend$11499$MT&Mo
                                                                                                                                g$x$11608$MT&Mo
                                                                                                                                (car g$maps$11607$MT&Mo))
                                                                                                                              (cdr g$maps$11607$MT&Mo)))))
                                                                                                                       g$maps$11606$MT&Mo
                                                                                                                       g$x$11605$MT&Mo)))))))))
                                                                                                         g$ls/false$11597$MT&Mo)
                                                                                                       ((case-lambda
                                                                                                          ((g$t$11609$MT&Mo)
                                                                                                           ((case-lambda
                                                                                                              ((g$ls/false$11610$MT&Mo)
                                                                                                               (if g$ls/false$11610$MT&Mo
                                                                                                                 (apply
                                                                                                                   (case-lambda
                                                                                                                     (()
                                                                                                                      (call-with-values
                                                                                                                        (case-lambda
                                                                                                                          (()
                                                                                                                           (g$gen-syntax$11496$MT&Mo
                                                                                                                             g$src$11553$MT&Mo
                                                                                                                             g$y$11592$MT&Mo
                                                                                                                             g$r$11555$MT&Mo
                                                                                                                             g$maps$11556$MT&Mo
                                                                                                                             g$ellipsis?$11557$MT&Mo
                                                                                                                             g$vec?$11558$MT&Mo)))
                                                                                                                        (case-lambda
                                                                                                                          ((g$y$11613$MT&Mo
                                                                                                                             g$maps$11614$MT&Mo)
                                                                                                                           ((case-lambda
                                                                                                                              ((g$maps$11615$MT&Mo
                                                                                                                                 g$y$11616$MT&Mo)
                                                                                                                               (call-with-values
                                                                                                                                 (case-lambda
                                                                                                                                   (()
                                                                                                                                    (g$k$11593$MT&Mo
                                                                                                                                      g$maps$11615$MT&Mo)))
                                                                                                                                 (case-lambda
                                                                                                                                   ((g$x$11619$MT&Mo
                                                                                                                                      g$maps$11620$MT&Mo)
                                                                                                                                    ((case-lambda
                                                                                                                                       ((g$maps$11621$MT&Mo
                                                                                                                                          g$x$11622$MT&Mo)
                                                                                                                                        (values
                                                                                                                                          (g$gen-append$11498$MT&Mo
                                                                                                                                            g$x$11622$MT&Mo
                                                                                                                                            g$y$11616$MT&Mo)
                                                                                                                                          g$maps$11621$MT&Mo)))
                                                                                                                                     g$maps$11620$MT&Mo
                                                                                                                                     g$x$11619$MT&Mo))))))
                                                                                                                            g$maps$11614$MT&Mo
                                                                                                                            g$y$11613$MT&Mo))))))
                                                                                                                   g$ls/false$11610$MT&Mo)
                                                                                                                 (g$syntax-violation$9749$MT&Mo
                                                                                                                   '#f
                                                                                                                   '"invalid syntax"
                                                                                                                   g$t$11609$MT&Mo))))
                                                                                                            (g$syntax-dispatch$9631$MT&Mo
                                                                                                              g$t$11609$MT&Mo
                                                                                                              '_))))
                                                                                                        g$t$11596$MT&Mo))))
                                                                                                  (g$syntax-dispatch$9631$MT&Mo
                                                                                                    g$t$11596$MT&Mo
                                                                                                    '(any .
                                                                                                          any)))))
                                                                                              g$t$11594$MT&Mo))))
                                                                                        (g$syntax-dispatch$9631$MT&Mo
                                                                                          g$t$11594$MT&Mo
                                                                                          '()))))
                                                                                    g$y$11592$MT&Mo)))))
                                                                       g$f$11591$MT&Mo)
                                                                     g$y$11590$MT&Mo
                                                                     (case-lambda
                                                                       ((g$maps$11623$MT&Mo)
                                                                        (call-with-values
                                                                          (case-lambda
                                                                            (()
                                                                             (g$gen-syntax$11496$MT&Mo
                                                                               g$src$11553$MT&Mo
                                                                               g$x$11588$MT&Mo
                                                                               g$r$11555$MT&Mo
                                                                               (cons
                                                                                 '()
                                                                                 g$maps$11623$MT&Mo)
                                                                               g$ellipsis?$11557$MT&Mo
                                                                               '#f)))
                                                                          (case-lambda
                                                                            ((g$x$11626$MT&Mo
                                                                               g$maps$11627$MT&Mo)
                                                                             ((case-lambda
                                                                                ((g$maps$11628$MT&Mo
                                                                                   g$x$11629$MT&Mo)
                                                                                 (if (null?
                                                                                       (car g$maps$11628$MT&Mo))
                                                                                   (g$syntax-violation$9749$MT&Mo
                                                                                     '#f
                                                                                     '"extra ellipsis in syntax form"
                                                                                     g$src$11553$MT&Mo)
                                                                                   (values
                                                                                     (g$gen-map$11500$MT&Mo
                                                                                       g$x$11629$MT&Mo
                                                                                       (car g$maps$11628$MT&Mo))
                                                                                     (cdr g$maps$11628$MT&Mo)))))
                                                                              g$maps$11627$MT&Mo
                                                                              g$x$11626$MT&Mo)))))))))
                                                                 g$ls/false$11584$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$t$11630$MT&Mo)
                                                                   ((case-lambda
                                                                      ((g$ls/false$11631$MT&Mo)
                                                                       (if g$ls/false$11631$MT&Mo
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$x$11632$MT&Mo
                                                                                g$y$11633$MT&Mo)
                                                                              (call-with-values
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$gen-syntax$11496$MT&Mo
                                                                                     g$src$11553$MT&Mo
                                                                                     g$x$11632$MT&Mo
                                                                                     g$r$11555$MT&Mo
                                                                                     g$maps$11556$MT&Mo
                                                                                     g$ellipsis?$11557$MT&Mo
                                                                                     '#f)))
                                                                                (case-lambda
                                                                                  ((g$xnew$11636$MT&Mo
                                                                                     g$maps$11637$MT&Mo)
                                                                                   ((case-lambda
                                                                                      ((g$maps$11638$MT&Mo
                                                                                         g$xnew$11639$MT&Mo)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$gen-syntax$11496$MT&Mo
                                                                                              g$src$11553$MT&Mo
                                                                                              g$y$11633$MT&Mo
                                                                                              g$r$11555$MT&Mo
                                                                                              g$maps$11638$MT&Mo
                                                                                              g$ellipsis?$11557$MT&Mo
                                                                                              g$vec?$11558$MT&Mo)))
                                                                                         (case-lambda
                                                                                           ((g$ynew$11642$MT&Mo
                                                                                              g$maps$11643$MT&Mo)
                                                                                            ((case-lambda
                                                                                               ((g$maps$11644$MT&Mo
                                                                                                  g$ynew$11645$MT&Mo)
                                                                                                (values
                                                                                                  (g$gen-cons$11501$MT&Mo
                                                                                                    g$e$11554$MT&Mo
                                                                                                    g$x$11632$MT&Mo
                                                                                                    g$y$11633$MT&Mo
                                                                                                    g$xnew$11639$MT&Mo
                                                                                                    g$ynew$11645$MT&Mo)
                                                                                                  g$maps$11644$MT&Mo)))
                                                                                             g$maps$11643$MT&Mo
                                                                                             g$ynew$11642$MT&Mo))))))
                                                                                    g$maps$11637$MT&Mo
                                                                                    g$xnew$11636$MT&Mo))))))
                                                                           g$ls/false$11631$MT&Mo)
                                                                         ((case-lambda
                                                                            ((g$t$11646$MT&Mo)
                                                                             ((case-lambda
                                                                                ((g$ls/false$11647$MT&Mo)
                                                                                 (if g$ls/false$11647$MT&Mo
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$ls$11648$MT&Mo)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$11496$MT&Mo
                                                                                               g$src$11553$MT&Mo
                                                                                               g$ls$11648$MT&Mo
                                                                                               g$r$11555$MT&Mo
                                                                                               g$maps$11556$MT&Mo
                                                                                               g$ellipsis?$11557$MT&Mo
                                                                                               '#t)))
                                                                                          (case-lambda
                                                                                            ((g$lsnew$11651$MT&Mo
                                                                                               g$maps$11652$MT&Mo)
                                                                                             ((case-lambda
                                                                                                ((g$maps$11653$MT&Mo
                                                                                                   g$lsnew$11654$MT&Mo)
                                                                                                 (values
                                                                                                   (g$gen-vector$11502$MT&Mo
                                                                                                     g$e$11554$MT&Mo
                                                                                                     g$ls$11648$MT&Mo
                                                                                                     g$lsnew$11654$MT&Mo)
                                                                                                   g$maps$11653$MT&Mo)))
                                                                                              g$maps$11652$MT&Mo
                                                                                              g$lsnew$11651$MT&Mo))))))
                                                                                     g$ls/false$11647$MT&Mo)
                                                                                   ((case-lambda
                                                                                      ((g$t$11655$MT&Mo)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$11656$MT&Mo)
                                                                                           (if g$ls/false$11656$MT&Mo
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (values
                                                                                                    (list
                                                                                                      'quote
                                                                                                      g$e$11554$MT&Mo)
                                                                                                    g$maps$11556$MT&Mo)))
                                                                                               g$ls/false$11656$MT&Mo)
                                                                                             (g$syntax-violation$9749$MT&Mo
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$11655$MT&Mo))))
                                                                                        (g$syntax-dispatch$9631$MT&Mo
                                                                                          g$t$11655$MT&Mo
                                                                                          '_))))
                                                                                    g$t$11646$MT&Mo))))
                                                                              (g$syntax-dispatch$9631$MT&Mo
                                                                                g$t$11646$MT&Mo
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$11630$MT&Mo))))
                                                                    (g$syntax-dispatch$9631$MT&Mo
                                                                      g$t$11630$MT&Mo
                                                                      '(any .
                                                                            any)))))
                                                                g$t$11583$MT&Mo))))
                                                          (g$syntax-dispatch$9631$MT&Mo
                                                            g$t$11583$MT&Mo
                                                            '(any any
                                                                  .
                                                                  any)))))
                                                      g$t$11576$MT&Mo))))
                                                (g$syntax-dispatch$9631$MT&Mo
                                                  g$t$11576$MT&Mo
                                                  '(any any)))))
                                            g$t$11563$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$11563$MT&Mo
                                        'any))))
                                  g$t$11559$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$11559$MT&Mo
                              'any))))
                        g$e$11554$MT&Mo))))
                  (g$gen-ref$11497$MT&Mo
                    (case-lambda
                      ((g$src$11540$MT&Mo
                         g$var$11541$MT&Mo
                         g$level$11542$MT&Mo
                         g$maps$11543$MT&Mo)
                       (if (= g$level$11542$MT&Mo '0)
                         (values g$var$11541$MT&Mo g$maps$11543$MT&Mo)
                         (if (null? g$maps$11543$MT&Mo)
                           (g$syntax-violation$9749$MT&Mo
                             '#f
                             '"missing ellipsis in syntax form"
                             g$src$11540$MT&Mo)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$gen-ref$11497$MT&Mo
                                  g$src$11540$MT&Mo
                                  g$var$11541$MT&Mo
                                  (- g$level$11542$MT&Mo '1)
                                  (cdr g$maps$11543$MT&Mo))))
                             (case-lambda
                               ((g$outer-var$11546$MT&Mo
                                  g$outer-maps$11547$MT&Mo)
                                ((case-lambda
                                   ((g$outer-maps$11548$MT&Mo
                                      g$outer-var$11549$MT&Mo)
                                    ((case-lambda
                                       ((g$t$11550$MT&Mo)
                                        (if g$t$11550$MT&Mo
                                          ((case-lambda
                                             ((g$b$11551$MT&Mo)
                                              (values
                                                (cdr g$b$11551$MT&Mo)
                                                g$maps$11543$MT&Mo)))
                                           g$t$11550$MT&Mo)
                                          ((case-lambda
                                             ((g$inner-var$11552$MT&Mo)
                                              (values
                                                g$inner-var$11552$MT&Mo
                                                (cons
                                                  (cons
                                                    (cons
                                                      g$outer-var$11549$MT&Mo
                                                      g$inner-var$11552$MT&Mo)
                                                    (car g$maps$11543$MT&Mo))
                                                  g$outer-maps$11548$MT&Mo))))
                                           (g$gen-lexical$9203$MT&Mo
                                             'tmp)))))
                                     (g$assq$5741$MT&Mo
                                       g$outer-var$11549$MT&Mo
                                       (car g$maps$11543$MT&Mo)))))
                                 g$outer-maps$11547$MT&Mo
                                 g$outer-var$11546$MT&Mo)))))))))
                  (g$gen-append$11498$MT&Mo
                    (case-lambda
                      ((g$x$11538$MT&Mo g$y$11539$MT&Mo)
                       (if (equal? g$y$11539$MT&Mo ''())
                         g$x$11538$MT&Mo
                         (list
                           'append
                           g$x$11538$MT&Mo
                           g$y$11539$MT&Mo)))))
                  (g$gen-mappend$11499$MT&Mo
                    (case-lambda
                      ((g$e$11536$MT&Mo g$map-env$11537$MT&Mo)
                       (list
                         'apply
                         '(primitive append)
                         (g$gen-map$11500$MT&Mo
                           g$e$11536$MT&Mo
                           g$map-env$11537$MT&Mo)))))
                  (g$gen-map$11500$MT&Mo
                    (case-lambda
                      ((g$e$11527$MT&Mo g$map-env$11528$MT&Mo)
                       ((case-lambda
                          ((g$formals$11529$MT&Mo g$actuals$11530$MT&Mo)
                           (if (eq? (car g$e$11527$MT&Mo) 'ref)
                             (car g$actuals$11530$MT&Mo)
                             (if (g$for-all$5751$MT&Mo
                                   (case-lambda
                                     ((g$x$11531$MT&Mo)
                                      (if (eq? (car g$x$11531$MT&Mo)
                                               'ref)
                                        (begin
                                          '#f
                                          (g$memq$5745$MT&Mo
                                            (g$cadr$6411$MT&Mo
                                              g$x$11531$MT&Mo)
                                            g$formals$11529$MT&Mo))
                                        '#f)))
                                   (cdr g$e$11527$MT&Mo))
                               ((case-lambda
                                  ((g$args$11532$MT&Mo)
                                   (cons
                                     'map
                                     (cons
                                       (list
                                         'primitive
                                         (car g$e$11527$MT&Mo))
                                       g$args$11532$MT&Mo))))
                                (g$map$5753$MT&Mo
                                  ((case-lambda
                                     ((g$r$11533$MT&Mo)
                                      (case-lambda
                                        ((g$x$11534$MT&Mo)
                                         (cdr (g$assq$5741$MT&Mo
                                                (g$cadr$6411$MT&Mo
                                                  g$x$11534$MT&Mo)
                                                g$r$11533$MT&Mo))))))
                                   (g$map$5753$MT&Mo
                                     cons
                                     g$formals$11529$MT&Mo
                                     g$actuals$11530$MT&Mo))
                                  (cdr g$e$11527$MT&Mo)))
                               (g$cons*$5755$MT&Mo
                                 'map
                                 (list
                                   'lambda
                                   g$formals$11529$MT&Mo
                                   g$e$11527$MT&Mo)
                                 g$actuals$11530$MT&Mo)))))
                        (g$map$5753$MT&Mo cdr g$map-env$11528$MT&Mo)
                        (g$map$5753$MT&Mo
                          (case-lambda
                            ((g$x$11535$MT&Mo)
                             (list 'ref (car g$x$11535$MT&Mo))))
                          g$map-env$11528$MT&Mo)))))
                  (g$gen-cons$11501$MT&Mo
                    (case-lambda
                      ((g$e$11519$MT&Mo
                         g$x$11520$MT&Mo
                         g$y$11521$MT&Mo
                         g$xnew$11522$MT&Mo
                         g$ynew$11523$MT&Mo)
                       ((case-lambda
                          ((g$t$11524$MT&Mo)
                           (if (eqv? g$t$11524$MT&Mo 'quote)
                             (if (eq? (car g$xnew$11522$MT&Mo) 'quote)
                               ((case-lambda
                                  ((g$xnew$11525$MT&Mo
                                     g$ynew$11526$MT&Mo)
                                   (if (if (eq? g$xnew$11525$MT&Mo
                                                g$x$11520$MT&Mo)
                                         (begin
                                           '#f
                                           (eq? g$ynew$11526$MT&Mo
                                                g$y$11521$MT&Mo))
                                         '#f)
                                     (list 'quote g$e$11519$MT&Mo)
                                     (list
                                       'quote
                                       (cons
                                         g$xnew$11525$MT&Mo
                                         g$ynew$11526$MT&Mo)))))
                                (g$cadr$6411$MT&Mo g$xnew$11522$MT&Mo)
                                (g$cadr$6411$MT&Mo g$ynew$11523$MT&Mo))
                               (if (null?
                                     (g$cadr$6411$MT&Mo
                                       g$ynew$11523$MT&Mo))
                                 (list 'list g$xnew$11522$MT&Mo)
                                 (list
                                   'cons
                                   g$xnew$11522$MT&Mo
                                   g$ynew$11523$MT&Mo)))
                             (if (eqv? g$t$11524$MT&Mo 'list)
                               (cons
                                 'list
                                 (cons
                                   g$xnew$11522$MT&Mo
                                   (cdr g$ynew$11523$MT&Mo)))
                               (list
                                 'cons
                                 g$xnew$11522$MT&Mo
                                 g$ynew$11523$MT&Mo)))))
                        (car g$ynew$11523$MT&Mo)))))
                  (g$gen-vector$11502$MT&Mo
                    (case-lambda
                      ((g$e$11516$MT&Mo
                         g$ls$11517$MT&Mo
                         g$lsnew$11518$MT&Mo)
                       (if (eq? (car g$lsnew$11518$MT&Mo) 'quote)
                         (if (eq? (g$cadr$6411$MT&Mo
                                    g$lsnew$11518$MT&Mo)
                                  g$ls$11517$MT&Mo)
                           (list 'quote g$e$11516$MT&Mo)
                           (list
                             'quote
                             (g$list->vector$6397$MT&Mo
                               (g$cadr$6411$MT&Mo
                                 g$lsnew$11518$MT&Mo))))
                         (if (eq? (car g$lsnew$11518$MT&Mo) 'list)
                           (cons 'vector (cdr g$lsnew$11518$MT&Mo))
                           (list 'list->vector g$lsnew$11518$MT&Mo))))))
                  (g$regen$11503$MT&Mo
                    (case-lambda
                      ((g$x$11513$MT&Mo)
                       ((case-lambda
                          ((g$t$11514$MT&Mo)
                           (if (eqv? g$t$11514$MT&Mo 'ref)
                             (g$cadr$6411$MT&Mo g$x$11513$MT&Mo)
                             (if (eqv? g$t$11514$MT&Mo 'primitive)
                               (list
                                 'primitive
                                 (g$cadr$6411$MT&Mo g$x$11513$MT&Mo))
                               (if (eqv? g$t$11514$MT&Mo 'quote)
                                 (list
                                   'quote
                                   (g$cadr$6411$MT&Mo g$x$11513$MT&Mo))
                                 (if (eqv? g$t$11514$MT&Mo 'lambda)
                                   (g$build-lambda$9190$MT&Mo
                                     '#f
                                     (g$cadr$6411$MT&Mo g$x$11513$MT&Mo)
                                     (g$regen$11503$MT&Mo
                                       (g$caddr$6417$MT&Mo
                                         g$x$11513$MT&Mo)))
                                   (if (eqv? g$t$11514$MT&Mo 'map)
                                     ((case-lambda
                                        ((g$ls$11515$MT&Mo)
                                         (cons
                                           '(primitive ellipsis-map)
                                           g$ls$11515$MT&Mo)))
                                      (g$map$5753$MT&Mo
                                        g$regen$11503$MT&Mo
                                        (cdr g$x$11513$MT&Mo)))
                                     (cons
                                       (list
                                         'primitive
                                         (car g$x$11513$MT&Mo))
                                       (g$map$5753$MT&Mo
                                         g$regen$11503$MT&Mo
                                         (cdr g$x$11513$MT&Mo))))))))))
                        (car g$x$11513$MT&Mo))))))
          ((case-lambda
             ((g$t$11504$MT&Mo)
              ((case-lambda
                 ((g$ls/false$11505$MT&Mo)
                  (if g$ls/false$11505$MT&Mo
                    (apply
                      (case-lambda
                        ((g$x$11506$MT&Mo)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$gen-syntax$11496$MT&Mo
                                g$e$11493$MT&Mo
                                g$x$11506$MT&Mo
                                g$r$11494$MT&Mo
                                '()
                                g$ellipsis?$9632$MT&Mo
                                '#f)))
                           (case-lambda
                             ((g$e$11509$MT&Mo g$maps$11510$MT&Mo)
                              ((case-lambda
                                 ((g$maps$11511$MT&Mo g$e$11512$MT&Mo)
                                  (g$regen$11503$MT&Mo
                                    g$e$11512$MT&Mo)))
                               g$maps$11510$MT&Mo
                               g$e$11509$MT&Mo))))))
                      g$ls/false$11505$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$11504$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$11504$MT&Mo
                 '(_ any)))))
           g$e$11493$MT&Mo)))))
   (g$core-macro-transformer$9638$MT&Mo
     g$core-macro-transformer$13179$MT&Mo
     (case-lambda
       ((g$name$11657$MT&Mo)
        ((case-lambda
           ((g$t$11658$MT&Mo)
            (if (eqv? g$t$11658$MT&Mo 'quote)
              g$quote-transformer$9591$MT&Mo
              (if (eqv? g$t$11658$MT&Mo 'lambda)
                g$lambda-transformer$9593$MT&Mo
                (if (eqv? g$t$11658$MT&Mo 'case-lambda)
                  g$case-lambda-transformer$9592$MT&Mo
                  (if (eqv? g$t$11658$MT&Mo 'letrec)
                    g$letrec-transformer$9581$MT&Mo
                    (if (eqv? g$t$11658$MT&Mo 'letrec*)
                      g$letrec*-transformer$9582$MT&Mo
                      (if (eqv? g$t$11658$MT&Mo 'if)
                        g$if-transformer$9589$MT&Mo
                        (if (eqv? g$t$11658$MT&Mo 'foreign-call)
                          g$foreign-call-transformer$9629$MT&Mo
                          (if (eqv? g$t$11658$MT&Mo 'syntax-case)
                            g$syntax-case-transformer$9635$MT&Mo
                            (if (eqv? g$t$11658$MT&Mo 'syntax)
                              g$syntax-transformer$9637$MT&Mo
                              (if (eqv?
                                    g$t$11658$MT&Mo
                                    'type-descriptor)
                                g$type-descriptor-transformer$9584$MT&Mo
                                (if (eqv?
                                      g$t$11658$MT&Mo
                                      'record-type-descriptor)
                                  g$record-type-descriptor-transformer$9585$MT&Mo
                                  (if (eqv?
                                        g$t$11658$MT&Mo
                                        'record-constructor-descriptor)
                                    g$record-constructor-descriptor-transformer$9586$MT&Mo
                                    (if (eqv?
                                          g$t$11658$MT&Mo
                                          'fluid-let-syntax)
                                      g$fluid-let-syntax-transformer$9583$MT&Mo
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$11657$MT&Mo))))))))))))))))
         g$name$11657$MT&Mo))))
   (g$file-options-macro$9639$MT&Mo
     g$file-options-macro$13180$MT&Mo
     (case-lambda
       ((g$x$11659$MT&Mo)
        (letrec* ((g$valid-option?$11660$MT&Mo
                    (case-lambda
                      ((g$x$11665$MT&Mo)
                       (if (g$id?$9268$MT&Mo g$x$11665$MT&Mo)
                         (begin
                           '#f
                           (g$memq$5745$MT&Mo
                             (g$id->sym$9269$MT&Mo g$x$11665$MT&Mo)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$11661$MT&Mo)
              ((case-lambda
                 ((g$ls/false$11662$MT&Mo)
                  (if (if g$ls/false$11662$MT&Mo
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$11663$MT&Mo)
                               (if (g$for-all$5751$MT&Mo
                                     g$valid-option?$11660$MT&Mo
                                     g$opt*$11663$MT&Mo)
                                 (begin
                                   '#f
                                   (g$file-options-spec$8176$MT&Mo
                                     (g$map$5753$MT&Mo
                                       g$id->sym$9269$MT&Mo
                                       g$opt*$11663$MT&Mo)))
                                 '#f)))
                            g$ls/false$11662$MT&Mo))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$11664$MT&Mo)
                         (g$bless$9594$MT&Mo
                           (list
                             'quote
                             (g$file-options-spec$8176$MT&Mo
                               (g$map$5753$MT&Mo
                                 g$id->sym$9269$MT&Mo
                                 g$opt*$11664$MT&Mo))))))
                      g$ls/false$11662$MT&Mo)
                    (g$syntax-violation$9749$MT&Mo
                      '#f
                      '"invalid syntax"
                      g$t$11661$MT&Mo))))
               (g$syntax-dispatch$9631$MT&Mo
                 g$t$11661$MT&Mo
                 '(_ . each-any)))))
           g$x$11659$MT&Mo)))))
   (g$symbol-macro$9640$MT&Mo
     g$symbol-macro$13181$MT&Mo
     (case-lambda
       ((g$x$11666$MT&Mo g$set$11667$MT&Mo)
        ((case-lambda
           ((g$t$11668$MT&Mo)
            ((case-lambda
               ((g$ls/false$11669$MT&Mo)
                (if (if g$ls/false$11669$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$11670$MT&Mo)
                             (if (g$id?$9268$MT&Mo g$name$11670$MT&Mo)
                               (begin
                                 '#f
                                 (g$memq$5745$MT&Mo
                                   (g$id->sym$9269$MT&Mo
                                     g$name$11670$MT&Mo)
                                   g$set$11667$MT&Mo))
                               '#f)))
                          g$ls/false$11669$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$11671$MT&Mo)
                       (g$bless$9594$MT&Mo
                         (list 'quote g$name$11671$MT&Mo))))
                    g$ls/false$11669$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$11668$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$11668$MT&Mo '(_ any)))))
         g$x$11666$MT&Mo))))
   (g$macro-transformer$9641$MT&Mo
     g$macro-transformer$13182$MT&Mo
     (case-lambda
       ((g$x$11672$MT&Mo)
        (if (g$procedure?$6404$MT&Mo g$x$11672$MT&Mo)
          g$x$11672$MT&Mo
          (if (g$symbol?$6402$MT&Mo g$x$11672$MT&Mo)
            ((case-lambda
               ((g$t$11673$MT&Mo)
                (if (eqv? g$t$11673$MT&Mo 'define-record-type)
                  g$define-record-type-macro$9625$MT&Mo
                  (if (eqv? g$t$11673$MT&Mo 'define-struct)
                    g$define-struct-macro$9624$MT&Mo
                    (if (eqv? g$t$11673$MT&Mo 'include)
                      g$include-macro$9619$MT&Mo
                      (if (eqv? g$t$11673$MT&Mo 'cond)
                        g$cond-macro$9617$MT&Mo
                        (if (eqv? g$t$11673$MT&Mo 'let)
                          g$let-macro$9597$MT&Mo
                          (if (eqv? g$t$11673$MT&Mo 'do)
                            g$do-macro$9613$MT&Mo
                            (if (eqv? g$t$11673$MT&Mo 'or)
                              g$or-macro$9615$MT&Mo
                              (if (eqv? g$t$11673$MT&Mo 'and)
                                g$and-macro$9616$MT&Mo
                                (if (eqv? g$t$11673$MT&Mo 'let*)
                                  g$let*-macro$9614$MT&Mo
                                  (if (eqv? g$t$11673$MT&Mo 'let-values)
                                    g$let-values-macro$9598$MT&Mo
                                    (if (eqv?
                                          g$t$11673$MT&Mo
                                          'let*-values)
                                      g$let*-values-macro$9599$MT&Mo
                                      (if (eqv?
                                            g$t$11673$MT&Mo
                                            'syntax-rules)
                                        g$syntax-rules-macro$9621$MT&Mo
                                        (if (eqv?
                                              g$t$11673$MT&Mo
                                              'quasiquote)
                                          g$quasiquote-macro$9622$MT&Mo
                                          (if (eqv?
                                                g$t$11673$MT&Mo
                                                'quasisyntax)
                                            g$quasisyntax-macro$9623$MT&Mo
                                            (if (eqv?
                                                  g$t$11673$MT&Mo
                                                  'with-syntax)
                                              g$with-syntax-macro$9595$MT&Mo
                                              (if (eqv?
                                                    g$t$11673$MT&Mo
                                                    'when)
                                                g$when-macro$9587$MT&Mo
                                                (if (eqv?
                                                      g$t$11673$MT&Mo
                                                      'unless)
                                                  g$unless-macro$9588$MT&Mo
                                                  (if (eqv?
                                                        g$t$11673$MT&Mo
                                                        'case)
                                                    g$case-macro$9590$MT&Mo
                                                    (if (eqv?
                                                          g$t$11673$MT&Mo
                                                          'identifier-syntax)
                                                      g$identifier-syntax-macro$9612$MT&Mo
                                                      (if (eqv?
                                                            g$t$11673$MT&Mo
                                                            'time)
                                                        g$time-macro$9608$MT&Mo
                                                        (if (eqv?
                                                              g$t$11673$MT&Mo
                                                              'delay)
                                                          g$delay-macro$9609$MT&Mo
                                                          (if (eqv?
                                                                g$t$11673$MT&Mo
                                                                'assert)
                                                            g$assert-macro$9610$MT&Mo
                                                            (if (eqv?
                                                                  g$t$11673$MT&Mo
                                                                  'endianness)
                                                              g$endianness-macro$9611$MT&Mo
                                                              (if (eqv?
                                                                    g$t$11673$MT&Mo
                                                                    'guard)
                                                                g$guard-macro$9606$MT&Mo
                                                                (if (eqv?
                                                                      g$t$11673$MT&Mo
                                                                      'define-enumeration)
                                                                  g$define-enumeration-macro$9607$MT&Mo
                                                                  (if (eqv?
                                                                        g$t$11673$MT&Mo
                                                                        'trace-lambda)
                                                                    g$trace-lambda-macro$9600$MT&Mo
                                                                    (if (eqv?
                                                                          g$t$11673$MT&Mo
                                                                          'trace-define)
                                                                      g$trace-define-macro$9601$MT&Mo
                                                                      (if (eqv?
                                                                            g$t$11673$MT&Mo
                                                                            'trace-define-syntax)
                                                                        g$trace-define-syntax-macro$9602$MT&Mo
                                                                        (if (eqv?
                                                                              g$t$11673$MT&Mo
                                                                              'trace-let-syntax)
                                                                          g$trace-let-syntax-macro$9604$MT&Mo
                                                                          (if (eqv?
                                                                                g$t$11673$MT&Mo
                                                                                'trace-letrec-syntax)
                                                                            g$trace-letrec-syntax-macro$9605$MT&Mo
                                                                            (if (eqv?
                                                                                  g$t$11673$MT&Mo
                                                                                  'define-condition-type)
                                                                              g$define-condition-type-macro$9626$MT&Mo
                                                                              (if (eqv?
                                                                                    g$t$11673$MT&Mo
                                                                                    'parameterize)
                                                                                g$parameterize-macro$9628$MT&Mo
                                                                                (if (eqv?
                                                                                      g$t$11673$MT&Mo
                                                                                      'include-into)
                                                                                  g$include-into-macro$9620$MT&Mo
                                                                                  (if (eqv?
                                                                                        g$t$11673$MT&Mo
                                                                                        'eol-style)
                                                                                    (case-lambda
                                                                                      ((g$x$11674$MT&Mo)
                                                                                       (g$symbol-macro$9640$MT&Mo
                                                                                         g$x$11674$MT&Mo
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (eqv?
                                                                                          g$t$11673$MT&Mo
                                                                                          'error-handling-mode)
                                                                                      (case-lambda
                                                                                        ((g$x$11675$MT&Mo)
                                                                                         (g$symbol-macro$9640$MT&Mo
                                                                                           g$x$11675$MT&Mo
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (eqv?
                                                                                            g$t$11673$MT&Mo
                                                                                            'buffer-mode)
                                                                                        (case-lambda
                                                                                          ((g$x$11676$MT&Mo)
                                                                                           (g$symbol-macro$9640$MT&Mo
                                                                                             g$x$11676$MT&Mo
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (eqv?
                                                                                              g$t$11673$MT&Mo
                                                                                              'file-options)
                                                                                          g$file-options-macro$9639$MT&Mo
                                                                                          (if (g$memv$5746$MT&Mo
                                                                                                g$t$11673$MT&Mo
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$9627$MT&Mo
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$11672$MT&Mo)))))))))))))))))))))))))))))))))))))))))
             g$x$11672$MT&Mo)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$11672$MT&Mo))))))
   (g$local-macro-transformer$9642$MT&Mo
     g$local-macro-transformer$13183$MT&Mo
     (case-lambda ((g$x$11677$MT&Mo) (car g$x$11677$MT&Mo))))
   (g$do-macro-call$9643$MT&Mo
     g$do-macro-call$13184$MT&Mo
     (case-lambda
       ((g$transformer$11678$MT&Mo g$expr$11679$MT&Mo g$r$11680$MT&Mo)
        (letrec* ((g$return$11681$MT&Mo
                    (case-lambda
                      ((g$x$11689$MT&Mo)
                       (begin
                         ((letrec ((g$f$11690$MT&Mo
                                     (case-lambda
                                       ((g$x$11691$MT&Mo)
                                        (if (not (g$stx?$9240$MT&Mo
                                                   g$x$11691$MT&Mo))
                                          (if (pair? g$x$11691$MT&Mo)
                                            (begin
                                              (g$f$11690$MT&Mo
                                                (car g$x$11691$MT&Mo))
                                              (g$f$11690$MT&Mo
                                                (cdr g$x$11691$MT&Mo)))
                                            (if (g$vector?$6400$MT&Mo
                                                  g$x$11691$MT&Mo)
                                              (g$vector-for-each$6463$MT&Mo
                                                g$f$11690$MT&Mo
                                                g$x$11691$MT&Mo)
                                              (if (g$symbol?$6402$MT&Mo
                                                    g$x$11691$MT&Mo)
                                                (g$syntax-violation$9749$MT&Mo
                                                  '#f
                                                  '"raw symbol encountered in output of macro"
                                                  g$expr$11679$MT&Mo
                                                  g$x$11691$MT&Mo)
                                                (void))))
                                          (void))))))
                            g$f$11690$MT&Mo)
                          g$x$11689$MT&Mo)
                         (g$add-mark$9257$MT&Mo
                           (g$gen-mark$9252$MT&Mo)
                           g$x$11689$MT&Mo
                           g$expr$11679$MT&Mo))))))
          ((case-lambda
             ((g$x$11682$MT&Mo)
              (if (g$procedure?$6404$MT&Mo g$x$11682$MT&Mo)
                (g$return$11681$MT&Mo
                  (g$x$11682$MT&Mo
                    (case-lambda
                      ((g$id$11683$MT&Mo)
                       (begin
                         (if (not (g$id?$9268$MT&Mo g$id$11683$MT&Mo))
                           (assertion-violation
                             'rho
                             '"not an identifier"
                             g$id$11683$MT&Mo)
                           (void))
                         ((case-lambda
                            ((g$label$11684$MT&Mo)
                             ((case-lambda
                                ((g$binding$11685$MT&Mo)
                                 ((case-lambda
                                    ((g$t$11686$MT&Mo)
                                     (if (eqv?
                                           g$t$11686$MT&Mo
                                           'local-ctv)
                                       (g$cadr$6411$MT&Mo
                                         g$binding$11685$MT&Mo)
                                       (if (eqv?
                                             g$t$11686$MT&Mo
                                             'global-ctv)
                                         ((case-lambda
                                            ((g$lib$11687$MT&Mo
                                               g$loc$11688$MT&Mo)
                                             (begin
                                               (g$visit-library$9008$MT&Mo
                                                 g$lib$11687$MT&Mo)
                                               (symbol-value
                                                 g$loc$11688$MT&Mo))))
                                          (g$cadr$6411$MT&Mo
                                            g$binding$11685$MT&Mo)
                                          (g$cddr$6413$MT&Mo
                                            g$binding$11685$MT&Mo))
                                         '#f))))
                                  (car g$binding$11685$MT&Mo))))
                              (g$label->binding$9283$MT&Mo
                                g$label$11684$MT&Mo
                                g$r$11680$MT&Mo))))
                          (g$id->label$9281$MT&Mo
                            g$id$11683$MT&Mo)))))))
                (g$return$11681$MT&Mo g$x$11682$MT&Mo))))
           (g$transformer$11678$MT&Mo
             (g$add-mark$9257$MT&Mo
               g$anti-mark$9253$MT&Mo
               g$expr$11679$MT&Mo
               '#f)))))))
   (g$chi-macro$9644$MT&Mo
     g$chi-macro$13185$MT&Mo
     (case-lambda
       ((g$p$11692$MT&Mo g$e$11693$MT&Mo g$r$11694$MT&Mo)
        (g$do-macro-call$9643$MT&Mo
          (g$macro-transformer$9641$MT&Mo g$p$11692$MT&Mo)
          g$e$11693$MT&Mo
          g$r$11694$MT&Mo))))
   (g$chi-local-macro$9645$MT&Mo
     g$chi-local-macro$13186$MT&Mo
     (case-lambda
       ((g$p$11695$MT&Mo g$e$11696$MT&Mo g$r$11697$MT&Mo)
        (g$do-macro-call$9643$MT&Mo
          (g$local-macro-transformer$9642$MT&Mo g$p$11695$MT&Mo)
          g$e$11696$MT&Mo
          g$r$11697$MT&Mo))))
   (g$chi-global-macro$9646$MT&Mo
     g$chi-global-macro$13187$MT&Mo
     (case-lambda
       ((g$p$11698$MT&Mo g$e$11699$MT&Mo g$r$11700$MT&Mo)
        ((case-lambda
           ((g$lib$11701$MT&Mo g$loc$11702$MT&Mo)
            (begin
              (g$visit-library$9008$MT&Mo g$lib$11701$MT&Mo)
              ((case-lambda
                 ((g$x$11703$MT&Mo)
                  ((case-lambda
                     ((g$transformer$11704$MT&Mo)
                      (g$do-macro-call$9643$MT&Mo
                        g$transformer$11704$MT&Mo
                        g$e$11699$MT&Mo
                        g$r$11700$MT&Mo)))
                   (if (g$procedure?$6404$MT&Mo g$x$11703$MT&Mo)
                     g$x$11703$MT&Mo
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$11703$MT&Mo)))))
               (symbol-value g$loc$11702$MT&Mo)))))
         (car g$p$11698$MT&Mo)
         (cdr g$p$11698$MT&Mo)))))
   (g$chi-expr*$9647$MT&Mo
     g$chi-expr*$13188$MT&Mo
     (case-lambda
       ((g$e*$11705$MT&Mo g$r$11706$MT&Mo g$mr$11707$MT&Mo)
        (if (null? g$e*$11705$MT&Mo)
          '()
          ((case-lambda
             ((g$e$11708$MT&Mo)
              (cons
                g$e$11708$MT&Mo
                (g$chi-expr*$9647$MT&Mo
                  (cdr g$e*$11705$MT&Mo)
                  g$r$11706$MT&Mo
                  g$mr$11707$MT&Mo))))
           (g$chi-expr$9649$MT&Mo
             (car g$e*$11705$MT&Mo)
             g$r$11706$MT&Mo
             g$mr$11707$MT&Mo))))))
   (g$chi-application$9648$MT&Mo
     g$chi-application$13189$MT&Mo
     (case-lambda
       ((g$e$11709$MT&Mo g$r$11710$MT&Mo g$mr$11711$MT&Mo)
        ((case-lambda
           ((g$t$11712$MT&Mo)
            ((case-lambda
               ((g$ls/false$11713$MT&Mo)
                (if g$ls/false$11713$MT&Mo
                  (apply
                    (case-lambda
                      ((g$rator$11714$MT&Mo g$rands$11715$MT&Mo)
                       ((case-lambda
                          ((g$rator$11716$MT&Mo)
                           (cons
                             g$rator$11716$MT&Mo
                             (g$chi-expr*$9647$MT&Mo
                               g$rands$11715$MT&Mo
                               g$r$11710$MT&Mo
                               g$mr$11711$MT&Mo))))
                        (g$chi-expr$9649$MT&Mo
                          g$rator$11714$MT&Mo
                          g$r$11710$MT&Mo
                          g$mr$11711$MT&Mo))))
                    g$ls/false$11713$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$11712$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$11712$MT&Mo
               '(any . each-any)))))
         g$e$11709$MT&Mo))))
   (g$chi-expr$9649$MT&Mo
     g$chi-expr$13190$MT&Mo
     (case-lambda
       ((g$e$11717$MT&Mo g$r$11718$MT&Mo g$mr$11719$MT&Mo)
        (call-with-values
          (case-lambda
            (()
             (g$syntax-type$9288$MT&Mo
               g$e$11717$MT&Mo
               g$r$11718$MT&Mo)))
          (case-lambda
            ((g$type$11723$MT&Mo g$value$11724$MT&Mo g$kwd$11725$MT&Mo)
             ((case-lambda
                ((g$kwd$11726$MT&Mo
                   g$value$11727$MT&Mo
                   g$type$11728$MT&Mo)
                 ((case-lambda
                    ((g$t$11729$MT&Mo)
                     (if (eqv? g$t$11729$MT&Mo 'core-macro)
                       ((case-lambda
                          ((g$transformer$11730$MT&Mo)
                           (g$transformer$11730$MT&Mo
                             g$e$11717$MT&Mo
                             g$r$11718$MT&Mo
                             g$mr$11719$MT&Mo)))
                        (g$core-macro-transformer$9638$MT&Mo
                          g$value$11727$MT&Mo))
                       (if (eqv? g$t$11729$MT&Mo 'global)
                         ((case-lambda
                            ((g$lib$11731$MT&Mo)
                             ((case-lambda
                                ((g$loc$11732$MT&Mo)
                                 (begin
                                   ((g$inv-collector$9685$MT&Mo)
                                    g$lib$11731$MT&Mo)
                                   g$loc$11732$MT&Mo)))
                              (cdr g$value$11727$MT&Mo))))
                          (car g$value$11727$MT&Mo))
                         (if (eqv? g$t$11729$MT&Mo 'core-prim)
                           ((case-lambda
                              ((g$name$11733$MT&Mo)
                               (list 'primitive g$name$11733$MT&Mo)))
                            g$value$11727$MT&Mo)
                           (if (eqv? g$t$11729$MT&Mo 'call)
                             (g$chi-application$9648$MT&Mo
                               g$e$11717$MT&Mo
                               g$r$11718$MT&Mo
                               g$mr$11719$MT&Mo)
                             (if (eqv? g$t$11729$MT&Mo 'lexical)
                               ((case-lambda
                                  ((g$lex$11734$MT&Mo)
                                   g$lex$11734$MT&Mo))
                                (g$lexical-var$9575$MT&Mo
                                  g$value$11727$MT&Mo))
                               (if (g$memv$5746$MT&Mo
                                     g$t$11729$MT&Mo
                                     '(global-macro global-macro!))
                                 (g$chi-expr$9649$MT&Mo
                                   (g$chi-global-macro$9646$MT&Mo
                                     g$value$11727$MT&Mo
                                     g$e$11717$MT&Mo
                                     g$r$11718$MT&Mo)
                                   g$r$11718$MT&Mo
                                   g$mr$11719$MT&Mo)
                                 (if (g$memv$5746$MT&Mo
                                       g$t$11729$MT&Mo
                                       '(local-macro local-macro!))
                                   (g$chi-expr$9649$MT&Mo
                                     (g$chi-local-macro$9645$MT&Mo
                                       g$value$11727$MT&Mo
                                       g$e$11717$MT&Mo
                                       g$r$11718$MT&Mo)
                                     g$r$11718$MT&Mo
                                     g$mr$11719$MT&Mo)
                                   (if (g$memv$5746$MT&Mo
                                         g$t$11729$MT&Mo
                                         '(macro macro!))
                                     (g$chi-expr$9649$MT&Mo
                                       (g$chi-macro$9644$MT&Mo
                                         g$value$11727$MT&Mo
                                         g$e$11717$MT&Mo
                                         g$r$11718$MT&Mo)
                                       g$r$11718$MT&Mo
                                       g$mr$11719$MT&Mo)
                                     (if (eqv?
                                           g$t$11729$MT&Mo
                                           'constant)
                                       ((case-lambda
                                          ((g$datum$11735$MT&Mo)
                                           (list
                                             'quote
                                             g$datum$11735$MT&Mo)))
                                        g$value$11727$MT&Mo)
                                       (if (eqv? g$t$11729$MT&Mo 'set!)
                                         (g$chi-set!$9650$MT&Mo
                                           g$e$11717$MT&Mo
                                           g$r$11718$MT&Mo
                                           g$mr$11719$MT&Mo)
                                         (if (eqv?
                                               g$t$11729$MT&Mo
                                               'begin)
                                           ((case-lambda
                                              ((g$t$11736$MT&Mo)
                                               ((case-lambda
                                                  ((g$ls/false$11737$MT&Mo)
                                                   (if g$ls/false$11737$MT&Mo
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$11738$MT&Mo
                                                            g$x*$11739$MT&Mo)
                                                          (g$build-sequence$9193$MT&Mo
                                                            '#f
                                                            (g$chi-expr*$9647$MT&Mo
                                                              (cons
                                                                g$x$11738$MT&Mo
                                                                g$x*$11739$MT&Mo)
                                                              g$r$11718$MT&Mo
                                                              g$mr$11719$MT&Mo))))
                                                       g$ls/false$11737$MT&Mo)
                                                     (g$syntax-violation$9749$MT&Mo
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$11736$MT&Mo))))
                                                (g$syntax-dispatch$9631$MT&Mo
                                                  g$t$11736$MT&Mo
                                                  '(_ any
                                                      .
                                                      each-any)))))
                                            g$e$11717$MT&Mo)
                                           (if (g$memv$5746$MT&Mo
                                                 g$t$11729$MT&Mo
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$11740$MT&Mo)
                                                 ((case-lambda
                                                    ((g$ls/false$11741$MT&Mo)
                                                     (if (if g$ls/false$11741$MT&Mo
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$11742$MT&Mo
                                                                    g$xrhs*$11743$MT&Mo
                                                                    g$xbody$11744$MT&Mo
                                                                    g$xbody*$11745$MT&Mo)
                                                                  (if (not (g$valid-bound-ids?$9273$MT&Mo
                                                                             g$xlhs*$11742$MT&Mo))
                                                                    (g$syntax-violation$9749$MT&Mo
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$11717$MT&Mo)
                                                                    (void))))
                                                               g$ls/false$11741$MT&Mo))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$11746$MT&Mo
                                                              g$xrhs*$11747$MT&Mo
                                                              g$xbody$11748$MT&Mo
                                                              g$xbody*$11749$MT&Mo)
                                                            ((case-lambda
                                                               ((g$xlab*$11750$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$xrib$11751$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$xb*$11752$MT&Mo)
                                                                        (g$build-sequence$9193$MT&Mo
                                                                          '#f
                                                                          (g$chi-expr*$9647$MT&Mo
                                                                            (g$map$5753$MT&Mo
                                                                              (case-lambda
                                                                                ((g$x$11753$MT&Mo)
                                                                                 (g$add-subst$9258$MT&Mo
                                                                                   g$xrib$11751$MT&Mo
                                                                                   g$x$11753$MT&Mo)))
                                                                              (cons
                                                                                g$xbody$11748$MT&Mo
                                                                                g$xbody*$11749$MT&Mo))
                                                                            (append
                                                                              (g$map$5753$MT&Mo
                                                                                cons
                                                                                g$xlab*$11750$MT&Mo
                                                                                g$xb*$11752$MT&Mo)
                                                                              g$r$11718$MT&Mo)
                                                                            (append
                                                                              (g$map$5753$MT&Mo
                                                                                cons
                                                                                g$xlab*$11750$MT&Mo
                                                                                g$xb*$11752$MT&Mo)
                                                                              g$mr$11719$MT&Mo)))))
                                                                     (g$map$5753$MT&Mo
                                                                       (case-lambda
                                                                         ((g$x$11754$MT&Mo)
                                                                          (g$make-eval-transformer$9310$MT&Mo
                                                                            (g$expand-transformer$9678$MT&Mo
                                                                              (if (eq? g$type$11728$MT&Mo
                                                                                       'let-syntax)
                                                                                g$x$11754$MT&Mo
                                                                                (g$add-subst$9258$MT&Mo
                                                                                  g$xrib$11751$MT&Mo
                                                                                  g$x$11754$MT&Mo))
                                                                              g$mr$11719$MT&Mo))))
                                                                       g$xrhs*$11747$MT&Mo))))
                                                                 (g$make-full-rib$9234$MT&Mo
                                                                   g$xlhs*$11746$MT&Mo
                                                                   g$xlab*$11750$MT&Mo))))
                                                             (g$map$5753$MT&Mo
                                                               g$gen-label$9205$MT&Mo
                                                               g$xlhs*$11746$MT&Mo))))
                                                         g$ls/false$11741$MT&Mo)
                                                       (g$syntax-violation$9749$MT&Mo
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$11740$MT&Mo))))
                                                  (g$syntax-dispatch$9631$MT&Mo
                                                    g$t$11740$MT&Mo
                                                    '(_ #(each
                                                          (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$11717$MT&Mo)
                                             (if (eqv?
                                                   g$t$11729$MT&Mo
                                                   'displaced-lexical)
                                               (g$syntax-violation$9749$MT&Mo
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$11717$MT&Mo)
                                               (if (eqv?
                                                     g$t$11729$MT&Mo
                                                     'syntax)
                                                 (g$syntax-violation$9749$MT&Mo
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$11717$MT&Mo)
                                                 (if (g$memv$5746$MT&Mo
                                                       g$t$11729$MT&Mo
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$9749$MT&Mo
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$11755$MT&Mo)
                                                           (if (eqv?
                                                                 g$t$11755$MT&Mo
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$11755$MT&Mo
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$11755$MT&Mo
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$11755$MT&Mo
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$11755$MT&Mo
                                                                         'import)
                                                                     '"an import declaration"
                                                                     (if (eqv?
                                                                           g$t$11755$MT&Mo
                                                                           'export)
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$11728$MT&Mo)
                                                       '" was found where an expression was expected")
                                                     g$e$11717$MT&Mo)
                                                   (if (eqv?
                                                         g$t$11729$MT&Mo
                                                         'mutable)
                                                     (g$syntax-violation$9749$MT&Mo
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$11717$MT&Mo)
                                                     (g$syntax-violation$9749$MT&Mo
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$11717$MT&Mo)))))))))))))))))))
                  g$type$11728$MT&Mo)))
              g$kwd$11725$MT&Mo
              g$value$11724$MT&Mo
              g$type$11723$MT&Mo)))))))
   (g$chi-set!$9650$MT&Mo
     g$chi-set!$13191$MT&Mo
     (case-lambda
       ((g$e$11756$MT&Mo g$r$11757$MT&Mo g$mr$11758$MT&Mo)
        ((case-lambda
           ((g$t$11759$MT&Mo)
            ((case-lambda
               ((g$ls/false$11760$MT&Mo)
                (if (if g$ls/false$11760$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$11761$MT&Mo g$v$11762$MT&Mo)
                             (g$id?$9268$MT&Mo g$x$11761$MT&Mo)))
                          g$ls/false$11760$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$11763$MT&Mo g$v$11764$MT&Mo)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$9288$MT&Mo
                              g$x$11763$MT&Mo
                              g$r$11757$MT&Mo)))
                         (case-lambda
                           ((g$type$11768$MT&Mo
                              g$value$11769$MT&Mo
                              g$kwd$11770$MT&Mo)
                            ((case-lambda
                               ((g$kwd$11771$MT&Mo
                                  g$value$11772$MT&Mo
                                  g$type$11773$MT&Mo)
                                ((case-lambda
                                   ((g$t$11774$MT&Mo)
                                    (if (eqv? g$t$11774$MT&Mo 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$9577$MT&Mo
                                          g$value$11772$MT&Mo
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$9575$MT&Mo
                                            g$value$11772$MT&Mo)
                                          (g$chi-expr$9649$MT&Mo
                                            g$v$11764$MT&Mo
                                            g$r$11757$MT&Mo
                                            g$mr$11758$MT&Mo)))
                                      (if (eqv?
                                            g$t$11774$MT&Mo
                                            'core-prim)
                                        (g$syntax-violation$9749$MT&Mo
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$11756$MT&Mo)
                                        (if (eqv?
                                              g$t$11774$MT&Mo
                                              'global)
                                          (g$syntax-violation$9749$MT&Mo
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$11756$MT&Mo)
                                          (if (eqv?
                                                g$t$11774$MT&Mo
                                                'global-macro!)
                                            (g$chi-expr$9649$MT&Mo
                                              (g$chi-global-macro$9646$MT&Mo
                                                g$value$11772$MT&Mo
                                                g$e$11756$MT&Mo
                                                g$r$11757$MT&Mo)
                                              g$r$11757$MT&Mo
                                              g$mr$11758$MT&Mo)
                                            (if (eqv?
                                                  g$t$11774$MT&Mo
                                                  'local-macro!)
                                              (g$chi-expr$9649$MT&Mo
                                                (g$chi-local-macro$9645$MT&Mo
                                                  g$value$11772$MT&Mo
                                                  g$e$11756$MT&Mo
                                                  g$r$11757$MT&Mo)
                                                g$r$11757$MT&Mo
                                                g$mr$11758$MT&Mo)
                                              (if (eqv?
                                                    g$t$11774$MT&Mo
                                                    'mutable)
                                                (g$syntax-violation$9749$MT&Mo
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$11756$MT&Mo)
                                                (g$syntax-violation$9749$MT&Mo
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$11756$MT&Mo)))))))))
                                 g$type$11773$MT&Mo)))
                             g$kwd$11770$MT&Mo
                             g$value$11769$MT&Mo
                             g$type$11768$MT&Mo))))))
                    g$ls/false$11760$MT&Mo)
                  (g$syntax-violation$9749$MT&Mo
                    '#f
                    '"invalid syntax"
                    g$t$11759$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$11759$MT&Mo
               '(_ any any)))))
         g$e$11756$MT&Mo))))
   (g$verify-formals$9651$MT&Mo
     g$verify-formals$13192$MT&Mo
     (case-lambda
       ((g$fmls$11775$MT&Mo g$stx$11776$MT&Mo)
        ((case-lambda
           ((g$t$11777$MT&Mo)
            ((case-lambda
               ((g$ls/false$11778$MT&Mo)
                (if g$ls/false$11778$MT&Mo
                  (apply
                    (case-lambda
                      ((g$x*$11779$MT&Mo)
                       (if (not (g$valid-bound-ids?$9273$MT&Mo
                                  g$x*$11779$MT&Mo))
                         (g$invalid-fmls-error$9596$MT&Mo
                           g$stx$11776$MT&Mo
                           g$fmls$11775$MT&Mo)
                         (void))))
                    g$ls/false$11778$MT&Mo)
                  ((case-lambda
                     ((g$t$11780$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$11781$MT&Mo)
                          (if g$ls/false$11781$MT&Mo
                            (apply
                              (case-lambda
                                ((g$x*$11782$MT&Mo g$x$11783$MT&Mo)
                                 (if (not (g$valid-bound-ids?$9273$MT&Mo
                                            (cons
                                              g$x$11783$MT&Mo
                                              g$x*$11782$MT&Mo)))
                                   (g$invalid-fmls-error$9596$MT&Mo
                                     g$stx$11776$MT&Mo
                                     g$fmls$11775$MT&Mo)
                                   (void))))
                              g$ls/false$11781$MT&Mo)
                            ((case-lambda
                               ((g$t$11784$MT&Mo)
                                ((case-lambda
                                   ((g$ls/false$11785$MT&Mo)
                                    (if g$ls/false$11785$MT&Mo
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$stx$11776$MT&Mo)))
                                        g$ls/false$11785$MT&Mo)
                                      (g$syntax-violation$9749$MT&Mo
                                        '#f
                                        '"invalid syntax"
                                        g$t$11784$MT&Mo))))
                                 (g$syntax-dispatch$9631$MT&Mo
                                   g$t$11784$MT&Mo
                                   '_))))
                             g$t$11780$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$11780$MT&Mo
                         '#(each+ any () any)))))
                   g$t$11777$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$11777$MT&Mo 'each-any))))
         g$fmls$11775$MT&Mo))))
   (g$chi-lambda-clause$9652$MT&Mo
     g$chi-lambda-clause$13193$MT&Mo
     (case-lambda
       ((g$stx$11786$MT&Mo
          g$fmls$11787$MT&Mo
          g$body*$11788$MT&Mo
          g$r$11789$MT&Mo
          g$mr$11790$MT&Mo)
        ((case-lambda
           ((g$t$11791$MT&Mo)
            ((case-lambda
               ((g$ls/false$11792$MT&Mo)
                (if g$ls/false$11792$MT&Mo
                  (apply
                    (case-lambda
                      ((g$x*$11793$MT&Mo)
                       (begin
                         (g$verify-formals$9651$MT&Mo
                           g$fmls$11787$MT&Mo
                           g$stx$11786$MT&Mo)
                         ((case-lambda
                            ((g$lex*$11794$MT&Mo g$lab*$11795$MT&Mo)
                             (values
                               g$lex*$11794$MT&Mo
                               (g$chi-internal$9660$MT&Mo
                                 (g$add-subst$9258$MT&Mo
                                   (g$make-full-rib$9234$MT&Mo
                                     g$x*$11793$MT&Mo
                                     g$lab*$11795$MT&Mo)
                                   g$body*$11788$MT&Mo)
                                 (g$add-lexicals$9579$MT&Mo
                                   g$lab*$11795$MT&Mo
                                   g$lex*$11794$MT&Mo
                                   g$r$11789$MT&Mo)
                                 g$mr$11790$MT&Mo))))
                          (g$map$5753$MT&Mo
                            g$gen-lexical$9203$MT&Mo
                            g$x*$11793$MT&Mo)
                          (g$map$5753$MT&Mo
                            g$gen-label$9205$MT&Mo
                            g$x*$11793$MT&Mo)))))
                    g$ls/false$11792$MT&Mo)
                  ((case-lambda
                     ((g$t$11796$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$11797$MT&Mo)
                          (if g$ls/false$11797$MT&Mo
                            (apply
                              (case-lambda
                                ((g$x*$11798$MT&Mo g$x$11799$MT&Mo)
                                 (begin
                                   (g$verify-formals$9651$MT&Mo
                                     g$fmls$11787$MT&Mo
                                     g$stx$11786$MT&Mo)
                                   ((case-lambda
                                      ((g$lex*$11800$MT&Mo
                                         g$lab*$11801$MT&Mo
                                         g$lex$11802$MT&Mo
                                         g$lab$11803$MT&Mo)
                                       (values
                                         (append
                                           g$lex*$11800$MT&Mo
                                           g$lex$11802$MT&Mo)
                                         (g$chi-internal$9660$MT&Mo
                                           (g$add-subst$9258$MT&Mo
                                             (g$make-full-rib$9234$MT&Mo
                                               (cons
                                                 g$x$11799$MT&Mo
                                                 g$x*$11798$MT&Mo)
                                               (cons
                                                 g$lab$11803$MT&Mo
                                                 g$lab*$11801$MT&Mo))
                                             g$body*$11788$MT&Mo)
                                           (g$add-lexicals$9579$MT&Mo
                                             (cons
                                               g$lab$11803$MT&Mo
                                               g$lab*$11801$MT&Mo)
                                             (cons
                                               g$lex$11802$MT&Mo
                                               g$lex*$11800$MT&Mo)
                                             g$r$11789$MT&Mo)
                                           g$mr$11790$MT&Mo))))
                                    (g$map$5753$MT&Mo
                                      g$gen-lexical$9203$MT&Mo
                                      g$x*$11798$MT&Mo)
                                    (g$map$5753$MT&Mo
                                      g$gen-label$9205$MT&Mo
                                      g$x*$11798$MT&Mo)
                                    (g$gen-lexical$9203$MT&Mo
                                      g$x$11799$MT&Mo)
                                    (g$gen-label$9205$MT&Mo
                                      g$x$11799$MT&Mo)))))
                              g$ls/false$11797$MT&Mo)
                            ((case-lambda
                               ((g$t$11804$MT&Mo)
                                ((case-lambda
                                   ((g$ls/false$11805$MT&Mo)
                                    (if g$ls/false$11805$MT&Mo
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$9749$MT&Mo
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$11787$MT&Mo)))
                                        g$ls/false$11805$MT&Mo)
                                      (g$syntax-violation$9749$MT&Mo
                                        '#f
                                        '"invalid syntax"
                                        g$t$11804$MT&Mo))))
                                 (g$syntax-dispatch$9631$MT&Mo
                                   g$t$11804$MT&Mo
                                   '_))))
                             g$t$11796$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$11796$MT&Mo
                         '#(each+ any () any)))))
                   g$t$11791$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$11791$MT&Mo 'each-any))))
         g$fmls$11787$MT&Mo))))
   (g$chi-lambda-clause*$9653$MT&Mo
     g$chi-lambda-clause*$13194$MT&Mo
     (case-lambda
       ((g$stx$11806$MT&Mo
          g$fmls*$11807$MT&Mo
          g$body**$11808$MT&Mo
          g$r$11809$MT&Mo
          g$mr$11810$MT&Mo)
        (if (null? g$fmls*$11807$MT&Mo)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$9652$MT&Mo
                 g$stx$11806$MT&Mo
                 (car g$fmls*$11807$MT&Mo)
                 (car g$body**$11808$MT&Mo)
                 g$r$11809$MT&Mo
                 g$mr$11810$MT&Mo)))
            (case-lambda
              ((g$a$11813$MT&Mo g$b$11814$MT&Mo)
               ((case-lambda
                  ((g$b$11815$MT&Mo g$a$11816$MT&Mo)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$9653$MT&Mo
                          g$stx$11806$MT&Mo
                          (cdr g$fmls*$11807$MT&Mo)
                          (cdr g$body**$11808$MT&Mo)
                          g$r$11809$MT&Mo
                          g$mr$11810$MT&Mo)))
                     (case-lambda
                       ((g$a*$11819$MT&Mo g$b*$11820$MT&Mo)
                        ((case-lambda
                           ((g$b*$11821$MT&Mo g$a*$11822$MT&Mo)
                            (values
                              (cons g$a$11816$MT&Mo g$a*$11822$MT&Mo)
                              (cons g$b$11815$MT&Mo g$b*$11821$MT&Mo))))
                         g$b*$11820$MT&Mo
                         g$a*$11819$MT&Mo))))))
                g$b$11814$MT&Mo
                g$a$11813$MT&Mo))))))))
   (g$chi-defun$9654$MT&Mo
     g$chi-defun$13195$MT&Mo
     (case-lambda
       ((g$x$11823$MT&Mo g$r$11824$MT&Mo g$mr$11825$MT&Mo)
        ((case-lambda
           ((g$fmls$11826$MT&Mo g$body*$11827$MT&Mo)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$9652$MT&Mo
                   g$fmls$11826$MT&Mo
                   g$fmls$11826$MT&Mo
                   g$body*$11827$MT&Mo
                   g$r$11824$MT&Mo
                   g$mr$11825$MT&Mo)))
              (case-lambda
                ((g$fmls$11830$MT&Mo g$body$11831$MT&Mo)
                 ((case-lambda
                    ((g$body$11832$MT&Mo g$fmls$11833$MT&Mo)
                     (g$build-lambda$9190$MT&Mo
                       '#f
                       g$fmls$11833$MT&Mo
                       g$body$11832$MT&Mo)))
                  g$body$11831$MT&Mo
                  g$fmls$11830$MT&Mo))))))
         (car g$x$11823$MT&Mo)
         (cdr g$x$11823$MT&Mo)))))
   (g$chi-rhs$9655$MT&Mo
     g$chi-rhs$13196$MT&Mo
     (case-lambda
       ((g$rhs$11834$MT&Mo g$r$11835$MT&Mo g$mr$11836$MT&Mo)
        ((case-lambda
           ((g$t$11837$MT&Mo)
            (if (eqv? g$t$11837$MT&Mo 'defun)
              (g$chi-defun$9654$MT&Mo
                (cdr g$rhs$11834$MT&Mo)
                g$r$11835$MT&Mo
                g$mr$11836$MT&Mo)
              (if (eqv? g$t$11837$MT&Mo 'expr)
                ((case-lambda
                   ((g$expr$11838$MT&Mo)
                    (g$chi-expr$9649$MT&Mo
                      g$expr$11838$MT&Mo
                      g$r$11835$MT&Mo
                      g$mr$11836$MT&Mo)))
                 (cdr g$rhs$11834$MT&Mo))
                (if (eqv? g$t$11837$MT&Mo 'top-expr)
                  ((case-lambda
                     ((g$expr$11839$MT&Mo)
                      (g$build-sequence$9193$MT&Mo
                        '#f
                        (list
                          (g$chi-expr$9649$MT&Mo
                            g$expr$11839$MT&Mo
                            g$r$11835$MT&Mo
                            g$mr$11836$MT&Mo)
                          (g$build-void$9194$MT&Mo)))))
                   (cdr g$rhs$11834$MT&Mo))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$11834$MT&Mo))))))
         (car g$rhs$11834$MT&Mo)))))
   (g$expand-interaction-rhs*/init*$9656$MT&Mo
     g$expand-interaction-rhs*/init*$13197$MT&Mo
     (case-lambda
       ((g$lhs*$11840$MT&Mo
          g$rhs*$11841$MT&Mo
          g$init*$11842$MT&Mo
          g$r$11843$MT&Mo
          g$mr$11844$MT&Mo)
        ((letrec ((g$f$11845$MT&Mo
                    (case-lambda
                      ((g$lhs*$11846$MT&Mo g$rhs*$11847$MT&Mo)
                       (if (null? g$lhs*$11846$MT&Mo)
                         (g$map$5753$MT&Mo
                           (case-lambda
                             ((g$x$11848$MT&Mo)
                              (g$chi-expr$9649$MT&Mo
                                g$x$11848$MT&Mo
                                g$r$11843$MT&Mo
                                g$mr$11844$MT&Mo)))
                           g$init*$11842$MT&Mo)
                         ((case-lambda
                            ((g$lhs$11849$MT&Mo g$rhs$11850$MT&Mo)
                             ((case-lambda
                                ((g$t$11851$MT&Mo)
                                 (if (eqv? g$t$11851$MT&Mo 'defun)
                                   ((case-lambda
                                      ((g$rhs$11852$MT&Mo)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$11849$MT&Mo
                                           g$rhs$11852$MT&Mo)
                                         (g$f$11845$MT&Mo
                                           (cdr g$lhs*$11846$MT&Mo)
                                           (cdr g$rhs*$11847$MT&Mo)))))
                                    (g$chi-defun$9654$MT&Mo
                                      (cdr g$rhs$11850$MT&Mo)
                                      g$r$11843$MT&Mo
                                      g$mr$11844$MT&Mo))
                                   (if (eqv? g$t$11851$MT&Mo 'expr)
                                     ((case-lambda
                                        ((g$rhs$11853$MT&Mo)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$11849$MT&Mo
                                             g$rhs$11853$MT&Mo)
                                           (g$f$11845$MT&Mo
                                             (cdr g$lhs*$11846$MT&Mo)
                                             (cdr g$rhs*$11847$MT&Mo)))))
                                      (g$chi-expr$9649$MT&Mo
                                        (cdr g$rhs$11850$MT&Mo)
                                        g$r$11843$MT&Mo
                                        g$mr$11844$MT&Mo))
                                     (if (eqv?
                                           g$t$11851$MT&Mo
                                           'top-expr)
                                       ((case-lambda
                                          ((g$e$11854$MT&Mo)
                                           (cons
                                             g$e$11854$MT&Mo
                                             (g$f$11845$MT&Mo
                                               (cdr g$lhs*$11846$MT&Mo)
                                               (cdr g$rhs*$11847$MT&Mo)))))
                                        (g$chi-expr$9649$MT&Mo
                                          (cdr g$rhs$11850$MT&Mo)
                                          g$r$11843$MT&Mo
                                          g$mr$11844$MT&Mo))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$11850$MT&Mo))))))
                              (car g$rhs$11850$MT&Mo))))
                          (car g$lhs*$11846$MT&Mo)
                          (car g$rhs*$11847$MT&Mo)))))))
           g$f$11845$MT&Mo)
         g$lhs*$11840$MT&Mo
         g$rhs*$11841$MT&Mo))))
   (g$chi-rhs*$9657$MT&Mo
     g$chi-rhs*$13198$MT&Mo
     (case-lambda
       ((g$rhs*$11855$MT&Mo g$r$11856$MT&Mo g$mr$11857$MT&Mo)
        ((letrec ((g$f$11858$MT&Mo
                    (case-lambda
                      ((g$ls$11859$MT&Mo)
                       (if (null? g$ls$11859$MT&Mo)
                         '()
                         ((case-lambda
                            ((g$a$11860$MT&Mo)
                             (cons
                               g$a$11860$MT&Mo
                               (g$f$11858$MT&Mo
                                 (cdr g$ls$11859$MT&Mo)))))
                          (g$chi-rhs$9655$MT&Mo
                            (car g$ls$11859$MT&Mo)
                            g$r$11856$MT&Mo
                            g$mr$11857$MT&Mo)))))))
           g$f$11858$MT&Mo)
         g$rhs*$11855$MT&Mo))))
   (g$find-bound=?$9658$MT&Mo
     g$find-bound=?$13199$MT&Mo
     (case-lambda
       ((g$x$11861$MT&Mo g$lhs*$11862$MT&Mo g$rhs*$11863$MT&Mo)
        (if (null? g$lhs*$11862$MT&Mo)
          '#f
          (if (g$bound-id=?$9271$MT&Mo
                g$x$11861$MT&Mo
                (car g$lhs*$11862$MT&Mo))
            (car g$rhs*$11863$MT&Mo)
            (g$find-bound=?$9658$MT&Mo
              g$x$11861$MT&Mo
              (cdr g$lhs*$11862$MT&Mo)
              (cdr g$rhs*$11863$MT&Mo)))))))
   (g$find-dups$9659$MT&Mo
     g$find-dups$13200$MT&Mo
     (case-lambda
       ((g$ls$11864$MT&Mo)
        ((letrec ((g$f$11865$MT&Mo
                    (case-lambda
                      ((g$ls$11866$MT&Mo g$dups$11867$MT&Mo)
                       (if (null? g$ls$11866$MT&Mo)
                         g$dups$11867$MT&Mo
                         ((case-lambda
                            ((g$t$11868$MT&Mo)
                             (if g$t$11868$MT&Mo
                               ((case-lambda
                                  ((g$x$11869$MT&Mo)
                                   (g$f$11865$MT&Mo
                                     (cdr g$ls$11866$MT&Mo)
                                     (cons
                                       (list
                                         (car g$ls$11866$MT&Mo)
                                         g$x$11869$MT&Mo)
                                       g$dups$11867$MT&Mo))))
                                g$t$11868$MT&Mo)
                               (g$f$11865$MT&Mo
                                 (cdr g$ls$11866$MT&Mo)
                                 g$dups$11867$MT&Mo))))
                          (g$find-bound=?$9658$MT&Mo
                            (car g$ls$11866$MT&Mo)
                            (cdr g$ls$11866$MT&Mo)
                            (cdr g$ls$11866$MT&Mo))))))))
           g$f$11865$MT&Mo)
         g$ls$11864$MT&Mo
         '()))))
   (g$chi-internal$9660$MT&Mo
     g$chi-internal$13201$MT&Mo
     (case-lambda
       ((g$e*$11870$MT&Mo g$r$11871$MT&Mo g$mr$11872$MT&Mo)
        ((case-lambda
           ((g$rib$11873$MT&Mo)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$9677$MT&Mo
                   (g$map$5753$MT&Mo
                     (case-lambda
                       ((g$x$11882$MT&Mo)
                        (g$add-subst$9258$MT&Mo
                          g$rib$11873$MT&Mo
                          g$x$11882$MT&Mo)))
                     (g$syntax->list$9267$MT&Mo g$e*$11870$MT&Mo))
                   g$r$11871$MT&Mo
                   g$mr$11872$MT&Mo
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$11873$MT&Mo
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$11883$MT&Mo
                   g$r$11884$MT&Mo
                   g$mr$11885$MT&Mo
                   g$lex*$11886$MT&Mo
                   g$rhs*$11887$MT&Mo
                   g$mod**$11888$MT&Mo
                   g$kwd*$11889$MT&Mo
                   g$_exp*$11890$MT&Mo)
                 ((case-lambda
                    ((g$_exp*$11891$MT&Mo
                       g$kwd*$11892$MT&Mo
                       g$mod**$11893$MT&Mo
                       g$rhs*$11894$MT&Mo
                       g$lex*$11895$MT&Mo
                       g$mr$11896$MT&Mo
                       g$r$11897$MT&Mo
                       g$e*$11898$MT&Mo)
                     (begin
                       (if (null? g$e*$11898$MT&Mo)
                         (g$syntax-violation$9749$MT&Mo
                           '#f
                           '"no expression in body"
                           g$e*$11898$MT&Mo)
                         (void))
                       ((case-lambda
                          ((g$init*$11899$MT&Mo)
                           ((case-lambda
                              ((g$rhs*$11900$MT&Mo)
                               (g$build-letrec*$9196$MT&Mo
                                 '#f
                                 (g$reverse$6409$MT&Mo
                                   g$lex*$11895$MT&Mo)
                                 (g$reverse$6409$MT&Mo
                                   g$rhs*$11900$MT&Mo)
                                 (g$build-sequence$9193$MT&Mo
                                   '#f
                                   g$init*$11899$MT&Mo))))
                            (g$chi-rhs*$9657$MT&Mo
                              g$rhs*$11894$MT&Mo
                              g$r$11897$MT&Mo
                              g$mr$11896$MT&Mo))))
                        (g$chi-expr*$9647$MT&Mo
                          (append
                            (apply
                              append
                              (g$reverse$6409$MT&Mo
                                g$mod**$11893$MT&Mo))
                            g$e*$11898$MT&Mo)
                          g$r$11897$MT&Mo
                          g$mr$11896$MT&Mo)))))
                  g$_exp*$11890$MT&Mo
                  g$kwd*$11889$MT&Mo
                  g$mod**$11888$MT&Mo
                  g$rhs*$11887$MT&Mo
                  g$lex*$11886$MT&Mo
                  g$mr$11885$MT&Mo
                  g$r$11884$MT&Mo
                  g$e*$11883$MT&Mo))))))
         (g$make-empty-rib$9226$MT&Mo)))))
   (g$parse-module$9661$MT&Mo
     g$parse-module$13202$MT&Mo
     (case-lambda
       ((g$e$11901$MT&Mo)
        ((case-lambda
           ((g$t$11902$MT&Mo)
            ((case-lambda
               ((g$ls/false$11903$MT&Mo)
                (if g$ls/false$11903$MT&Mo
                  (apply
                    (case-lambda
                      ((g$export*$11904$MT&Mo g$b*$11905$MT&Mo)
                       (begin
                         (if (not (g$for-all$5751$MT&Mo
                                    g$id?$9268$MT&Mo
                                    g$export*$11904$MT&Mo))
                           (g$syntax-violation$9749$MT&Mo
                             '#f
                             '"module exports must be identifiers"
                             g$e$11901$MT&Mo)
                           (void))
                         (values
                           '#f
                           (g$list->vector$6397$MT&Mo
                             g$export*$11904$MT&Mo)
                           g$b*$11905$MT&Mo))))
                    g$ls/false$11903$MT&Mo)
                  ((case-lambda
                     ((g$t$11906$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$11907$MT&Mo)
                          (if g$ls/false$11907$MT&Mo
                            (apply
                              (case-lambda
                                ((g$name$11908$MT&Mo
                                   g$export*$11909$MT&Mo
                                   g$b*$11910$MT&Mo)
                                 (begin
                                   (if (not (g$id?$9268$MT&Mo
                                              g$name$11908$MT&Mo))
                                     (g$syntax-violation$9749$MT&Mo
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$11901$MT&Mo)
                                     (void))
                                   (if (not (g$for-all$5751$MT&Mo
                                              g$id?$9268$MT&Mo
                                              g$export*$11909$MT&Mo))
                                     (g$syntax-violation$9749$MT&Mo
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$11901$MT&Mo)
                                     (void))
                                   (values
                                     g$name$11908$MT&Mo
                                     (g$list->vector$6397$MT&Mo
                                       g$export*$11909$MT&Mo)
                                     g$b*$11910$MT&Mo))))
                              g$ls/false$11907$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$11906$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$11906$MT&Mo
                         '(_ any each-any . each-any)))))
                   g$t$11902$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$11902$MT&Mo
               '(_ each-any . each-any)))))
         g$e$11901$MT&Mo))))
   (g$7940$9662$MT&Mo
     g$7940$13203$MT&Mo
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$7943$MT&Mo
       '#t
       '#t
       '#((mutable first-mark)
          (mutable exp-id-vec)
          (mutable exp-lab-vec))))
   (g$7942$9663$MT&Mo g$7942$13204$MT&Mo '#f)
   (g$7941$9664$MT&Mo
     g$7941$13205$MT&Mo
     (make-record-constructor-descriptor
       g$7940$9662$MT&Mo
       '#f
       g$7942$9663$MT&Mo))
   (g$module-interface?$9667$MT&Mo
     g$module-interface?$13206$MT&Mo
     (record-predicate g$7940$9662$MT&Mo))
   (g$make-module-interface$9668$MT&Mo
     g$make-module-interface$13207$MT&Mo
     (record-constructor g$7941$9664$MT&Mo))
   (g$module-interface-first-mark$9669$MT&Mo
     g$module-interface-first-mark$13208$MT&Mo
     (record-accessor g$7940$9662$MT&Mo '0))
   (g$module-interface-exp-id-vec$9670$MT&Mo
     g$module-interface-exp-id-vec$13209$MT&Mo
     (record-accessor g$7940$9662$MT&Mo '1))
   (g$module-interface-exp-lab-vec$9671$MT&Mo
     g$module-interface-exp-lab-vec$13210$MT&Mo
     (record-accessor g$7940$9662$MT&Mo '2))
   (g$set-module-interface-first-mark!$9672$MT&Mo
     g$set-module-interface-first-mark!$13211$MT&Mo
     (record-mutator g$7940$9662$MT&Mo '0))
   (g$set-module-interface-exp-id-vec!$9673$MT&Mo
     g$set-module-interface-exp-id-vec!$13212$MT&Mo
     (record-mutator g$7940$9662$MT&Mo '1))
   (g$set-module-interface-exp-lab-vec!$9674$MT&Mo
     g$set-module-interface-exp-lab-vec!$13213$MT&Mo
     (record-mutator g$7940$9662$MT&Mo '2))
   (g$module-interface-exp-id*$9675$MT&Mo
     g$module-interface-exp-id*$13214$MT&Mo
     (case-lambda
       ((g$iface$11911$MT&Mo g$id$11912$MT&Mo)
        (letrec* ((g$diff-marks$11913$MT&Mo
                    (case-lambda
                      ((g$ls$11917$MT&Mo g$x$11918$MT&Mo)
                       (begin
                         (if (null? g$ls$11917$MT&Mo)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$11919$MT&Mo)
                             (if (eq? g$a$11919$MT&Mo g$x$11918$MT&Mo)
                               '()
                               (cons
                                 g$a$11919$MT&Mo
                                 (g$diff-marks$11913$MT&Mo
                                   (cdr g$ls$11917$MT&Mo)
                                   g$x$11918$MT&Mo)))))
                          (car g$ls$11917$MT&Mo)))))))
          ((case-lambda
             ((g$diff$11914$MT&Mo g$id-vec$11915$MT&Mo)
              (if (null? g$diff$11914$MT&Mo)
                g$id-vec$11915$MT&Mo
                (g$vector-map$6462$MT&Mo
                  (case-lambda
                    ((g$x$11916$MT&Mo)
                     (g$make-stx$9241$MT&Mo
                       (g$stx-expr$9242$MT&Mo g$x$11916$MT&Mo)
                       (append
                         g$diff$11914$MT&Mo
                         (g$stx-mark*$9243$MT&Mo g$x$11916$MT&Mo))
                       '()
                       '())))
                  g$id-vec$11915$MT&Mo))))
           (g$diff-marks$11913$MT&Mo
             (g$stx-mark*$9243$MT&Mo g$id$11912$MT&Mo)
             (g$module-interface-first-mark$9669$MT&Mo
               g$iface$11911$MT&Mo))
           (g$module-interface-exp-id-vec$9670$MT&Mo
             g$iface$11911$MT&Mo))))))
   (g$chi-internal-module$9676$MT&Mo
     g$chi-internal-module$13215$MT&Mo
     (case-lambda
       ((g$e$11920$MT&Mo
          g$r$11921$MT&Mo
          g$mr$11922$MT&Mo
          g$lex*$11923$MT&Mo
          g$rhs*$11924$MT&Mo
          g$mod**$11925$MT&Mo
          g$kwd*$11926$MT&Mo)
        (call-with-values
          (case-lambda (() (g$parse-module$9661$MT&Mo g$e$11920$MT&Mo)))
          (case-lambda
            ((g$name$11930$MT&Mo g$exp-id*$11931$MT&Mo g$e*$11932$MT&Mo)
             ((case-lambda
                ((g$e*$11933$MT&Mo
                   g$exp-id*$11934$MT&Mo
                   g$name$11935$MT&Mo)
                 ((case-lambda
                    ((g$rib$11936$MT&Mo)
                     ((case-lambda
                        ((g$e*$11937$MT&Mo)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$9677$MT&Mo
                                g$e*$11937$MT&Mo
                                g$r$11921$MT&Mo
                                g$mr$11922$MT&Mo
                                g$lex*$11923$MT&Mo
                                g$rhs*$11924$MT&Mo
                                g$mod**$11925$MT&Mo
                                g$kwd*$11926$MT&Mo
                                '()
                                g$rib$11936$MT&Mo
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$11946$MT&Mo
                                g$r$11947$MT&Mo
                                g$mr$11948$MT&Mo
                                g$lex*$11949$MT&Mo
                                g$rhs*$11950$MT&Mo
                                g$mod**$11951$MT&Mo
                                g$kwd*$11952$MT&Mo
                                g$_exp*$11953$MT&Mo)
                              ((case-lambda
                                 ((g$_exp*$11954$MT&Mo
                                    g$kwd*$11955$MT&Mo
                                    g$mod**$11956$MT&Mo
                                    g$rhs*$11957$MT&Mo
                                    g$lex*$11958$MT&Mo
                                    g$mr$11959$MT&Mo
                                    g$r$11960$MT&Mo
                                    g$e*$11961$MT&Mo)
                                  ((case-lambda
                                     ((g$exp-lab*$11962$MT&Mo
                                        g$mod**$11963$MT&Mo)
                                      (if (not g$name$11935$MT&Mo)
                                        (values
                                          g$lex*$11958$MT&Mo
                                          g$rhs*$11957$MT&Mo
                                          g$exp-id*$11934$MT&Mo
                                          g$exp-lab*$11962$MT&Mo
                                          g$r$11960$MT&Mo
                                          g$mr$11959$MT&Mo
                                          g$mod**$11963$MT&Mo
                                          g$kwd*$11955$MT&Mo)
                                        ((case-lambda
                                           ((g$lab$11964$MT&Mo
                                              g$iface$11965$MT&Mo)
                                            (values
                                              g$lex*$11958$MT&Mo
                                              g$rhs*$11957$MT&Mo
                                              (vector
                                                g$name$11935$MT&Mo)
                                              (vector g$lab$11964$MT&Mo)
                                              (cons
                                                (cons
                                                  g$lab$11964$MT&Mo
                                                  (cons
                                                    '$module
                                                    g$iface$11965$MT&Mo))
                                                g$r$11960$MT&Mo)
                                              (cons
                                                (cons
                                                  g$lab$11964$MT&Mo
                                                  (cons
                                                    '$module
                                                    g$iface$11965$MT&Mo))
                                                g$mr$11959$MT&Mo)
                                              g$mod**$11963$MT&Mo
                                              g$kwd*$11955$MT&Mo)))
                                         (g$gen-label$9205$MT&Mo
                                           'module)
                                         (g$make-module-interface$9668$MT&Mo
                                           (car (g$stx-mark*$9243$MT&Mo
                                                  g$name$11935$MT&Mo))
                                           (g$vector-map$6462$MT&Mo
                                             (case-lambda
                                               ((g$x$11966$MT&Mo)
                                                (g$make-stx$9241$MT&Mo
                                                  (g$stx-expr$9242$MT&Mo
                                                    g$x$11966$MT&Mo)
                                                  (g$stx-mark*$9243$MT&Mo
                                                    g$x$11966$MT&Mo)
                                                  '()
                                                  '())))
                                             g$exp-id*$11934$MT&Mo)
                                           g$exp-lab*$11962$MT&Mo)))))
                                   (g$vector-map$6462$MT&Mo
                                     (case-lambda
                                       ((g$x$11967$MT&Mo)
                                        ((case-lambda
                                           ((g$t$11968$MT&Mo)
                                            (if g$t$11968$MT&Mo
                                              g$t$11968$MT&Mo
                                              (begin
                                                '#f
                                                (g$syntax-violation$9749$MT&Mo
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$11967$MT&Mo)))))
                                         (g$id->label$9281$MT&Mo
                                           (g$make-stx$9241$MT&Mo
                                             (g$id->sym$9269$MT&Mo
                                               g$x$11967$MT&Mo)
                                             (g$stx-mark*$9243$MT&Mo
                                               g$x$11967$MT&Mo)
                                             (list g$rib$11936$MT&Mo)
                                             '())))))
                                     g$exp-id*$11934$MT&Mo)
                                   (cons
                                     g$e*$11961$MT&Mo
                                     g$mod**$11956$MT&Mo))))
                               g$_exp*$11953$MT&Mo
                               g$kwd*$11952$MT&Mo
                               g$mod**$11951$MT&Mo
                               g$rhs*$11950$MT&Mo
                               g$lex*$11949$MT&Mo
                               g$mr$11948$MT&Mo
                               g$r$11947$MT&Mo
                               g$e*$11946$MT&Mo))))))
                      (g$map$5753$MT&Mo
                        (case-lambda
                          ((g$x$11969$MT&Mo)
                           (g$add-subst$9258$MT&Mo
                             g$rib$11936$MT&Mo
                             g$x$11969$MT&Mo)))
                        (g$syntax->list$9267$MT&Mo g$e*$11933$MT&Mo)))))
                  (g$make-empty-rib$9226$MT&Mo))))
              g$e*$11932$MT&Mo
              g$exp-id*$11931$MT&Mo
              g$name$11930$MT&Mo)))))))
   (g$chi-body*$9677$MT&Mo
     g$chi-body*$13216$MT&Mo
     (case-lambda
       ((g$e*$11970$MT&Mo
          g$r$11971$MT&Mo
          g$mr$11972$MT&Mo
          g$lex*$11973$MT&Mo
          g$rhs*$11974$MT&Mo
          g$mod**$11975$MT&Mo
          g$kwd*$11976$MT&Mo
          g$exp*$11977$MT&Mo
          g$rib$11978$MT&Mo
          g$mix?$11979$MT&Mo
          g$sd?$11980$MT&Mo)
        (if (null? g$e*$11970$MT&Mo)
          (values
            g$e*$11970$MT&Mo
            g$r$11971$MT&Mo
            g$mr$11972$MT&Mo
            g$lex*$11973$MT&Mo
            g$rhs*$11974$MT&Mo
            g$mod**$11975$MT&Mo
            g$kwd*$11976$MT&Mo
            g$exp*$11977$MT&Mo)
          ((case-lambda
             ((g$e$11981$MT&Mo)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$9288$MT&Mo
                     g$e$11981$MT&Mo
                     g$r$11971$MT&Mo)))
                (case-lambda
                  ((g$type$11985$MT&Mo
                     g$value$11986$MT&Mo
                     g$kwd$11987$MT&Mo)
                   ((case-lambda
                      ((g$kwd$11988$MT&Mo
                         g$value$11989$MT&Mo
                         g$type$11990$MT&Mo)
                       ((case-lambda
                          ((g$kwd*$11991$MT&Mo)
                           ((case-lambda
                              ((g$t$11992$MT&Mo)
                               (if (eqv? g$t$11992$MT&Mo 'define)
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$9571$MT&Mo
                                        g$e$11981$MT&Mo)))
                                   (case-lambda
                                     ((g$id$11995$MT&Mo
                                        g$rhs$11996$MT&Mo)
                                      ((case-lambda
                                         ((g$rhs$11997$MT&Mo
                                            g$id$11998$MT&Mo)
                                          (begin
                                            (if (g$bound-id-member?$9275$MT&Mo
                                                  g$id$11998$MT&Mo
                                                  g$kwd*$11991$MT&Mo)
                                              (g$syntax-violation$9749$MT&Mo
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$11981$MT&Mo)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$9207$MT&Mo
                                                   g$id$11998$MT&Mo
                                                   g$rib$11978$MT&Mo
                                                   g$sd?$11980$MT&Mo)))
                                              (case-lambda
                                                ((g$lab$12001$MT&Mo
                                                   g$lex$12002$MT&Mo)
                                                 ((case-lambda
                                                    ((g$lex$12003$MT&Mo
                                                       g$lab$12004$MT&Mo)
                                                     (begin
                                                       (g$extend-rib!$9229$MT&Mo
                                                         g$rib$11978$MT&Mo
                                                         g$id$11998$MT&Mo
                                                         g$lab$12004$MT&Mo
                                                         g$sd?$11980$MT&Mo)
                                                       (g$chi-body*$9677$MT&Mo
                                                         (cdr g$e*$11970$MT&Mo)
                                                         (g$add-lexical$9578$MT&Mo
                                                           g$lab$12004$MT&Mo
                                                           g$lex$12003$MT&Mo
                                                           g$r$11971$MT&Mo)
                                                         g$mr$11972$MT&Mo
                                                         (cons
                                                           g$lex$12003$MT&Mo
                                                           g$lex*$11973$MT&Mo)
                                                         (cons
                                                           g$rhs$11997$MT&Mo
                                                           g$rhs*$11974$MT&Mo)
                                                         g$mod**$11975$MT&Mo
                                                         g$kwd*$11991$MT&Mo
                                                         g$exp*$11977$MT&Mo
                                                         g$rib$11978$MT&Mo
                                                         g$mix?$11979$MT&Mo
                                                         g$sd?$11980$MT&Mo))))
                                                  g$lex$12002$MT&Mo
                                                  g$lab$12001$MT&Mo)))))))
                                       g$rhs$11996$MT&Mo
                                       g$id$11995$MT&Mo))))
                                 (if (eqv?
                                       g$t$11992$MT&Mo
                                       'define-syntax)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$9572$MT&Mo
                                          g$e$11981$MT&Mo)))
                                     (case-lambda
                                       ((g$id$12007$MT&Mo
                                          g$rhs$12008$MT&Mo)
                                        ((case-lambda
                                           ((g$rhs$12009$MT&Mo
                                              g$id$12010$MT&Mo)
                                            (begin
                                              (if (g$bound-id-member?$9275$MT&Mo
                                                    g$id$12010$MT&Mo
                                                    g$kwd*$11991$MT&Mo)
                                                (g$syntax-violation$9749$MT&Mo
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$11981$MT&Mo)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$12011$MT&Mo)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$12012$MT&Mo)
                                                      (begin
                                                        (g$extend-rib!$9229$MT&Mo
                                                          g$rib$11978$MT&Mo
                                                          g$id$12010$MT&Mo
                                                          g$lab$12011$MT&Mo
                                                          g$sd?$11980$MT&Mo)
                                                        ((case-lambda
                                                           ((g$b$12013$MT&Mo)
                                                            (g$chi-body*$9677$MT&Mo
                                                              (cdr g$e*$11970$MT&Mo)
                                                              (cons
                                                                (cons
                                                                  g$lab$12011$MT&Mo
                                                                  g$b$12013$MT&Mo)
                                                                g$r$11971$MT&Mo)
                                                              (cons
                                                                (cons
                                                                  g$lab$12011$MT&Mo
                                                                  g$b$12013$MT&Mo)
                                                                g$mr$11972$MT&Mo)
                                                              g$lex*$11973$MT&Mo
                                                              g$rhs*$11974$MT&Mo
                                                              g$mod**$11975$MT&Mo
                                                              g$kwd*$11991$MT&Mo
                                                              g$exp*$11977$MT&Mo
                                                              g$rib$11978$MT&Mo
                                                              g$mix?$11979$MT&Mo
                                                              g$sd?$11980$MT&Mo)))
                                                         (g$make-eval-transformer$9310$MT&Mo
                                                           g$expanded-rhs$12012$MT&Mo)))))
                                                   (g$expand-transformer$9678$MT&Mo
                                                     g$rhs$12009$MT&Mo
                                                     g$mr$11972$MT&Mo))))
                                               (g$gen-define-label$9208$MT&Mo
                                                 g$id$12010$MT&Mo
                                                 g$rib$11978$MT&Mo
                                                 g$sd?$11980$MT&Mo)))))
                                         g$rhs$12008$MT&Mo
                                         g$id$12007$MT&Mo))))
                                   (if (g$memv$5746$MT&Mo
                                         g$t$11992$MT&Mo
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$12014$MT&Mo)
                                         ((case-lambda
                                            ((g$ls/false$12015$MT&Mo)
                                             (if (if g$ls/false$12015$MT&Mo
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$12016$MT&Mo
                                                            g$xrhs*$12017$MT&Mo
                                                            g$xbody*$12018$MT&Mo)
                                                          (if (not (g$valid-bound-ids?$9273$MT&Mo
                                                                     g$xlhs*$12016$MT&Mo))
                                                            (g$syntax-violation$9749$MT&Mo
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$11981$MT&Mo)
                                                            (void))))
                                                       g$ls/false$12015$MT&Mo))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$12019$MT&Mo
                                                      g$xrhs*$12020$MT&Mo
                                                      g$xbody*$12021$MT&Mo)
                                                    ((case-lambda
                                                       ((g$xlab*$12022$MT&Mo)
                                                        ((case-lambda
                                                           ((g$xrib$12023$MT&Mo)
                                                            ((case-lambda
                                                               ((g$xb*$12024$MT&Mo)
                                                                (g$chi-body*$9677$MT&Mo
                                                                  (append
                                                                    (g$map$5753$MT&Mo
                                                                      (case-lambda
                                                                        ((g$x$12025$MT&Mo)
                                                                         (g$add-subst$9258$MT&Mo
                                                                           g$xrib$12023$MT&Mo
                                                                           g$x$12025$MT&Mo)))
                                                                      g$xbody*$12021$MT&Mo)
                                                                    (cdr g$e*$11970$MT&Mo))
                                                                  (append
                                                                    (g$map$5753$MT&Mo
                                                                      cons
                                                                      g$xlab*$12022$MT&Mo
                                                                      g$xb*$12024$MT&Mo)
                                                                    g$r$11971$MT&Mo)
                                                                  (append
                                                                    (g$map$5753$MT&Mo
                                                                      cons
                                                                      g$xlab*$12022$MT&Mo
                                                                      g$xb*$12024$MT&Mo)
                                                                    g$mr$11972$MT&Mo)
                                                                  g$lex*$11973$MT&Mo
                                                                  g$rhs*$11974$MT&Mo
                                                                  g$mod**$11975$MT&Mo
                                                                  g$kwd*$11991$MT&Mo
                                                                  g$exp*$11977$MT&Mo
                                                                  g$rib$11978$MT&Mo
                                                                  g$mix?$11979$MT&Mo
                                                                  g$sd?$11980$MT&Mo)))
                                                             (g$map$5753$MT&Mo
                                                               (case-lambda
                                                                 ((g$x$12026$MT&Mo)
                                                                  (g$make-eval-transformer$9310$MT&Mo
                                                                    (g$expand-transformer$9678$MT&Mo
                                                                      (if (eq? g$type$11990$MT&Mo
                                                                               'let-syntax)
                                                                        g$x$12026$MT&Mo
                                                                        (g$add-subst$9258$MT&Mo
                                                                          g$xrib$12023$MT&Mo
                                                                          g$x$12026$MT&Mo))
                                                                      g$mr$11972$MT&Mo))))
                                                               g$xrhs*$12020$MT&Mo))))
                                                         (g$make-full-rib$9234$MT&Mo
                                                           g$xlhs*$12019$MT&Mo
                                                           g$xlab*$12022$MT&Mo))))
                                                     (g$map$5753$MT&Mo
                                                       g$gen-label$9205$MT&Mo
                                                       g$xlhs*$12019$MT&Mo))))
                                                 g$ls/false$12015$MT&Mo)
                                               (g$syntax-violation$9749$MT&Mo
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$12014$MT&Mo))))
                                          (g$syntax-dispatch$9631$MT&Mo
                                            g$t$12014$MT&Mo
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$11981$MT&Mo)
                                     (if (eqv? g$t$11992$MT&Mo 'begin)
                                       ((case-lambda
                                          ((g$t$12027$MT&Mo)
                                           ((case-lambda
                                              ((g$ls/false$12028$MT&Mo)
                                               (if g$ls/false$12028$MT&Mo
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$12029$MT&Mo)
                                                      (g$chi-body*$9677$MT&Mo
                                                        (append
                                                          g$x*$12029$MT&Mo
                                                          (cdr g$e*$11970$MT&Mo))
                                                        g$r$11971$MT&Mo
                                                        g$mr$11972$MT&Mo
                                                        g$lex*$11973$MT&Mo
                                                        g$rhs*$11974$MT&Mo
                                                        g$mod**$11975$MT&Mo
                                                        g$kwd*$11991$MT&Mo
                                                        g$exp*$11977$MT&Mo
                                                        g$rib$11978$MT&Mo
                                                        g$mix?$11979$MT&Mo
                                                        g$sd?$11980$MT&Mo)))
                                                   g$ls/false$12028$MT&Mo)
                                                 (g$syntax-violation$9749$MT&Mo
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$12027$MT&Mo))))
                                            (g$syntax-dispatch$9631$MT&Mo
                                              g$t$12027$MT&Mo
                                              '(_ . each-any)))))
                                        g$e$11981$MT&Mo)
                                       (if (g$memv$5746$MT&Mo
                                             g$t$11992$MT&Mo
                                             '(global-macro
                                                global-macro!))
                                         (g$chi-body*$9677$MT&Mo
                                           (cons
                                             (g$add-subst$9258$MT&Mo
                                               g$rib$11978$MT&Mo
                                               (g$chi-global-macro$9646$MT&Mo
                                                 g$value$11989$MT&Mo
                                                 g$e$11981$MT&Mo
                                                 g$r$11971$MT&Mo))
                                             (cdr g$e*$11970$MT&Mo))
                                           g$r$11971$MT&Mo
                                           g$mr$11972$MT&Mo
                                           g$lex*$11973$MT&Mo
                                           g$rhs*$11974$MT&Mo
                                           g$mod**$11975$MT&Mo
                                           g$kwd*$11991$MT&Mo
                                           g$exp*$11977$MT&Mo
                                           g$rib$11978$MT&Mo
                                           g$mix?$11979$MT&Mo
                                           g$sd?$11980$MT&Mo)
                                         (if (g$memv$5746$MT&Mo
                                               g$t$11992$MT&Mo
                                               '(local-macro
                                                  local-macro!))
                                           (g$chi-body*$9677$MT&Mo
                                             (cons
                                               (g$add-subst$9258$MT&Mo
                                                 g$rib$11978$MT&Mo
                                                 (g$chi-local-macro$9645$MT&Mo
                                                   g$value$11989$MT&Mo
                                                   g$e$11981$MT&Mo
                                                   g$r$11971$MT&Mo))
                                               (cdr g$e*$11970$MT&Mo))
                                             g$r$11971$MT&Mo
                                             g$mr$11972$MT&Mo
                                             g$lex*$11973$MT&Mo
                                             g$rhs*$11974$MT&Mo
                                             g$mod**$11975$MT&Mo
                                             g$kwd*$11991$MT&Mo
                                             g$exp*$11977$MT&Mo
                                             g$rib$11978$MT&Mo
                                             g$mix?$11979$MT&Mo
                                             g$sd?$11980$MT&Mo)
                                           (if (g$memv$5746$MT&Mo
                                                 g$t$11992$MT&Mo
                                                 '(macro macro!))
                                             (g$chi-body*$9677$MT&Mo
                                               (cons
                                                 (g$add-subst$9258$MT&Mo
                                                   g$rib$11978$MT&Mo
                                                   (g$chi-macro$9644$MT&Mo
                                                     g$value$11989$MT&Mo
                                                     g$e$11981$MT&Mo
                                                     g$r$11971$MT&Mo))
                                                 (cdr g$e*$11970$MT&Mo))
                                               g$r$11971$MT&Mo
                                               g$mr$11972$MT&Mo
                                               g$lex*$11973$MT&Mo
                                               g$rhs*$11974$MT&Mo
                                               g$mod**$11975$MT&Mo
                                               g$kwd*$11991$MT&Mo
                                               g$exp*$11977$MT&Mo
                                               g$rib$11978$MT&Mo
                                               g$mix?$11979$MT&Mo
                                               g$sd?$11980$MT&Mo)
                                             (if (eqv?
                                                   g$t$11992$MT&Mo
                                                   'module)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$9676$MT&Mo
                                                      g$e$11981$MT&Mo
                                                      g$r$11971$MT&Mo
                                                      g$mr$11972$MT&Mo
                                                      g$lex*$11973$MT&Mo
                                                      g$rhs*$11974$MT&Mo
                                                      g$mod**$11975$MT&Mo
                                                      g$kwd*$11991$MT&Mo)))
                                                 (case-lambda
                                                   ((g$lex*$12038$MT&Mo
                                                      g$rhs*$12039$MT&Mo
                                                      g$m-exp-id*$12040$MT&Mo
                                                      g$m-exp-lab*$12041$MT&Mo
                                                      g$r$12042$MT&Mo
                                                      g$mr$12043$MT&Mo
                                                      g$mod**$12044$MT&Mo
                                                      g$kwd*$12045$MT&Mo)
                                                    ((case-lambda
                                                       ((g$kwd*$12046$MT&Mo
                                                          g$mod**$12047$MT&Mo
                                                          g$mr$12048$MT&Mo
                                                          g$r$12049$MT&Mo
                                                          g$m-exp-lab*$12050$MT&Mo
                                                          g$m-exp-id*$12051$MT&Mo
                                                          g$rhs*$12052$MT&Mo
                                                          g$lex*$12053$MT&Mo)
                                                        (begin
                                                          (g$vector-for-each$6463$MT&Mo
                                                            (case-lambda
                                                              ((g$id$12054$MT&Mo
                                                                 g$lab$12055$MT&Mo)
                                                               (g$extend-rib!$9229$MT&Mo
                                                                 g$rib$11978$MT&Mo
                                                                 g$id$12054$MT&Mo
                                                                 g$lab$12055$MT&Mo
                                                                 g$sd?$11980$MT&Mo)))
                                                            g$m-exp-id*$12051$MT&Mo
                                                            g$m-exp-lab*$12050$MT&Mo)
                                                          (g$chi-body*$9677$MT&Mo
                                                            (cdr g$e*$11970$MT&Mo)
                                                            g$r$12049$MT&Mo
                                                            g$mr$12048$MT&Mo
                                                            g$lex*$12053$MT&Mo
                                                            g$rhs*$12052$MT&Mo
                                                            g$mod**$12047$MT&Mo
                                                            g$kwd*$12046$MT&Mo
                                                            g$exp*$11977$MT&Mo
                                                            g$rib$11978$MT&Mo
                                                            g$mix?$11979$MT&Mo
                                                            g$sd?$11980$MT&Mo))))
                                                     g$kwd*$12045$MT&Mo
                                                     g$mod**$12044$MT&Mo
                                                     g$mr$12043$MT&Mo
                                                     g$r$12042$MT&Mo
                                                     g$m-exp-lab*$12041$MT&Mo
                                                     g$m-exp-id*$12040$MT&Mo
                                                     g$rhs*$12039$MT&Mo
                                                     g$lex*$12038$MT&Mo))))
                                               (if (eqv?
                                                     g$t$11992$MT&Mo
                                                     'library)
                                                 (begin
                                                   (g$library-expander$9733$MT&Mo
                                                     (g$stx->datum$9279$MT&Mo
                                                       g$e$11981$MT&Mo))
                                                   (g$chi-body*$9677$MT&Mo
                                                     (cdr g$e*$11970$MT&Mo)
                                                     g$r$11971$MT&Mo
                                                     g$mr$11972$MT&Mo
                                                     g$lex*$11973$MT&Mo
                                                     g$rhs*$11974$MT&Mo
                                                     g$mod**$11975$MT&Mo
                                                     g$kwd*$11991$MT&Mo
                                                     g$exp*$11977$MT&Mo
                                                     g$rib$11978$MT&Mo
                                                     g$mix?$11979$MT&Mo
                                                     g$sd?$11980$MT&Mo))
                                                 (if (eqv?
                                                       g$t$11992$MT&Mo
                                                       'export)
                                                   ((case-lambda
                                                      ((g$t$12056$MT&Mo)
                                                       ((case-lambda
                                                          ((g$ls/false$12057$MT&Mo)
                                                           (if g$ls/false$12057$MT&Mo
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$12058$MT&Mo)
                                                                  (g$chi-body*$9677$MT&Mo
                                                                    (cdr g$e*$11970$MT&Mo)
                                                                    g$r$11971$MT&Mo
                                                                    g$mr$11972$MT&Mo
                                                                    g$lex*$11973$MT&Mo
                                                                    g$rhs*$11974$MT&Mo
                                                                    g$mod**$11975$MT&Mo
                                                                    g$kwd*$11991$MT&Mo
                                                                    (append
                                                                      g$exp-decl*$12058$MT&Mo
                                                                      g$exp*$11977$MT&Mo)
                                                                    g$rib$11978$MT&Mo
                                                                    g$mix?$11979$MT&Mo
                                                                    g$sd?$11980$MT&Mo)))
                                                               g$ls/false$12057$MT&Mo)
                                                             (g$syntax-violation$9749$MT&Mo
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$12056$MT&Mo))))
                                                        (g$syntax-dispatch$9631$MT&Mo
                                                          g$t$12056$MT&Mo
                                                          '(_ .
                                                              each-any)))))
                                                    g$e$11981$MT&Mo)
                                                   (if (eqv?
                                                         g$t$11992$MT&Mo
                                                         'import)
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$12059$MT&Mo
                                                                     (case-lambda
                                                                       ((g$e$12101$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$t$12102$MT&Mo)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12103$MT&Mo)
                                                                                (if (if g$ls/false$12103$MT&Mo
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$12104$MT&Mo)
                                                                                             (g$id?$9268$MT&Mo
                                                                                               g$id$12104$MT&Mo)))
                                                                                          g$ls/false$12103$MT&Mo))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$12105$MT&Mo)
                                                                                       '#t))
                                                                                    g$ls/false$12103$MT&Mo)
                                                                                  ((case-lambda
                                                                                     ((g$t$12106$MT&Mo)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$12107$MT&Mo)
                                                                                          (if g$ls/false$12107$MT&Mo
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$12108$MT&Mo)
                                                                                                 '#f))
                                                                                              g$ls/false$12107$MT&Mo)
                                                                                            ((case-lambda
                                                                                               ((g$t$12109$MT&Mo)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$12110$MT&Mo)
                                                                                                    (if g$ls/false$12110$MT&Mo
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$9749$MT&Mo
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$12101$MT&Mo)))
                                                                                                        g$ls/false$12110$MT&Mo)
                                                                                                      (g$syntax-violation$9749$MT&Mo
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$12109$MT&Mo))))
                                                                                                 (g$syntax-dispatch$9631$MT&Mo
                                                                                                   g$t$12109$MT&Mo
                                                                                                   '_))))
                                                                                             g$t$12106$MT&Mo))))
                                                                                       (g$syntax-dispatch$9631$MT&Mo
                                                                                         g$t$12106$MT&Mo
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$12102$MT&Mo))))
                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                               g$t$12102$MT&Mo
                                                                               '(_ any)))))
                                                                         g$e$12101$MT&Mo))))
                                                                   (g$module-import$12060$MT&Mo
                                                                     (case-lambda
                                                                       ((g$e$12084$MT&Mo
                                                                          g$r$12085$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$t$12086$MT&Mo)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12087$MT&Mo)
                                                                                (if (if g$ls/false$12087$MT&Mo
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$12088$MT&Mo)
                                                                                             (g$id?$9268$MT&Mo
                                                                                               g$id$12088$MT&Mo)))
                                                                                          g$ls/false$12087$MT&Mo))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$12089$MT&Mo)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$9288$MT&Mo
                                                                                              g$id$12089$MT&Mo
                                                                                              g$r$12085$MT&Mo)))
                                                                                         (case-lambda
                                                                                           ((g$type$12093$MT&Mo
                                                                                              g$value$12094$MT&Mo
                                                                                              g$kwd$12095$MT&Mo)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$12096$MT&Mo
                                                                                                  g$value$12097$MT&Mo
                                                                                                  g$type$12098$MT&Mo)
                                                                                                ((case-lambda
                                                                                                   ((g$t$12099$MT&Mo)
                                                                                                    (if (eqv?
                                                                                                          g$t$12099$MT&Mo
                                                                                                          '$module)
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$12100$MT&Mo)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$9675$MT&Mo
                                                                                                              g$iface$12100$MT&Mo
                                                                                                              g$id$12089$MT&Mo)
                                                                                                            (g$module-interface-exp-lab-vec$9671$MT&Mo
                                                                                                              g$iface$12100$MT&Mo))))
                                                                                                       g$value$12097$MT&Mo)
                                                                                                      (g$syntax-violation$9749$MT&Mo
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$12084$MT&Mo))))
                                                                                                 g$type$12098$MT&Mo)))
                                                                                             g$kwd$12095$MT&Mo
                                                                                             g$value$12094$MT&Mo
                                                                                             g$type$12093$MT&Mo))))))
                                                                                    g$ls/false$12087$MT&Mo)
                                                                                  (g$syntax-violation$9749$MT&Mo
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$12086$MT&Mo))))
                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                               g$t$12086$MT&Mo
                                                                               '(_ any)))))
                                                                         g$e$12084$MT&Mo))))
                                                                   (g$library-import$12061$MT&Mo
                                                                     (case-lambda
                                                                       ((g$e$12070$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$t$12071$MT&Mo)
                                                                            ((case-lambda
                                                                               ((g$ls/false$12072$MT&Mo)
                                                                                (if g$ls/false$12072$MT&Mo
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$12073$MT&Mo
                                                                                         g$imp*$12074$MT&Mo)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$9682$MT&Mo
                                                                                              (g$syntax->datum$9752$MT&Mo
                                                                                                g$imp*$12074$MT&Mo))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$12077$MT&Mo
                                                                                              g$subst-labels$12078$MT&Mo)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$12079$MT&Mo
                                                                                                  g$subst-names$12080$MT&Mo)
                                                                                                (values
                                                                                                  (g$vector-map$6462$MT&Mo
                                                                                                    (case-lambda
                                                                                                      ((g$name$12081$MT&Mo)
                                                                                                       (g$datum->stx$9251$MT&Mo
                                                                                                         g$ctxt$12073$MT&Mo
                                                                                                         g$name$12081$MT&Mo)))
                                                                                                    g$subst-names$12080$MT&Mo)
                                                                                                  g$subst-labels$12079$MT&Mo)))
                                                                                             g$subst-labels$12078$MT&Mo
                                                                                             g$subst-names$12077$MT&Mo))))))
                                                                                    g$ls/false$12072$MT&Mo)
                                                                                  ((case-lambda
                                                                                     ((g$t$12082$MT&Mo)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$12083$MT&Mo)
                                                                                          (if g$ls/false$12083$MT&Mo
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$9749$MT&Mo
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$12070$MT&Mo)))
                                                                                              g$ls/false$12083$MT&Mo)
                                                                                            (g$syntax-violation$9749$MT&Mo
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$12082$MT&Mo))))
                                                                                       (g$syntax-dispatch$9631$MT&Mo
                                                                                         g$t$12082$MT&Mo
                                                                                         '_))))
                                                                                   g$t$12071$MT&Mo))))
                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                               g$t$12071$MT&Mo
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$12070$MT&Mo)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$12059$MT&Mo
                                                                        g$e$11981$MT&Mo)
                                                                    (g$module-import$12060$MT&Mo
                                                                      g$e$11981$MT&Mo
                                                                      g$r$11971$MT&Mo)
                                                                    (g$library-import$12061$MT&Mo
                                                                      g$e$11981$MT&Mo))))
                                                               (case-lambda
                                                                 ((g$id*$12064$MT&Mo
                                                                    g$lab*$12065$MT&Mo)
                                                                  ((case-lambda
                                                                     ((g$lab*$12066$MT&Mo
                                                                        g$id*$12067$MT&Mo)
                                                                      (g$vector-for-each$6463$MT&Mo
                                                                        (case-lambda
                                                                          ((g$id$12068$MT&Mo
                                                                             g$lab$12069$MT&Mo)
                                                                           (g$extend-rib!$9229$MT&Mo
                                                                             g$rib$11978$MT&Mo
                                                                             g$id$12068$MT&Mo
                                                                             g$lab$12069$MT&Mo
                                                                             g$sd?$11980$MT&Mo)))
                                                                        g$id*$12067$MT&Mo
                                                                        g$lab*$12066$MT&Mo)))
                                                                   g$lab*$12065$MT&Mo
                                                                   g$id*$12064$MT&Mo))))
                                                             (g$chi-body*$9677$MT&Mo
                                                               (cdr g$e*$11970$MT&Mo)
                                                               g$r$11971$MT&Mo
                                                               g$mr$11972$MT&Mo
                                                               g$lex*$11973$MT&Mo
                                                               g$rhs*$11974$MT&Mo
                                                               g$mod**$11975$MT&Mo
                                                               g$kwd*$11991$MT&Mo
                                                               g$exp*$11977$MT&Mo
                                                               g$rib$11978$MT&Mo
                                                               g$mix?$11979$MT&Mo
                                                               g$sd?$11980$MT&Mo))))))
                                                     (if g$mix?$11979$MT&Mo
                                                       (g$chi-body*$9677$MT&Mo
                                                         (cdr g$e*$11970$MT&Mo)
                                                         g$r$11971$MT&Mo
                                                         g$mr$11972$MT&Mo
                                                         (cons
                                                           (g$gen-lexical$9203$MT&Mo
                                                             'dummy)
                                                           g$lex*$11973$MT&Mo)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$11981$MT&Mo)
                                                           g$rhs*$11974$MT&Mo)
                                                         g$mod**$11975$MT&Mo
                                                         g$kwd*$11991$MT&Mo
                                                         g$exp*$11977$MT&Mo
                                                         g$rib$11978$MT&Mo
                                                         '#t
                                                         g$sd?$11980$MT&Mo)
                                                       (values
                                                         g$e*$11970$MT&Mo
                                                         g$r$11971$MT&Mo
                                                         g$mr$11972$MT&Mo
                                                         g$lex*$11973$MT&Mo
                                                         g$rhs*$11974$MT&Mo
                                                         g$mod**$11975$MT&Mo
                                                         g$kwd*$11991$MT&Mo
                                                         g$exp*$11977$MT&Mo)))))))))))))))
                            g$type$11990$MT&Mo)))
                        (if (g$id?$9268$MT&Mo g$kwd$11988$MT&Mo)
                          (cons g$kwd$11988$MT&Mo g$kwd*$11976$MT&Mo)
                          g$kwd*$11976$MT&Mo))))
                    g$kwd$11987$MT&Mo
                    g$value$11986$MT&Mo
                    g$type$11985$MT&Mo))))))
           (car g$e*$11970$MT&Mo))))))
   (g$expand-transformer$9678$MT&Mo
     g$expand-transformer$13217$MT&Mo
     (case-lambda
       ((g$expr$12111$MT&Mo g$r$12112$MT&Mo)
        ((case-lambda
           ((g$rtc$12113$MT&Mo)
            ((case-lambda
               ((g$expanded-rhs$12114$MT&Mo)
                (begin
                  (g$for-each$5754$MT&Mo
                    ((case-lambda
                       ((g$mark-visit$12115$MT&Mo)
                        (case-lambda
                          ((g$x$12116$MT&Mo)
                           (begin
                             (g$invoke-library$9007$MT&Mo
                               g$x$12116$MT&Mo)
                             (g$mark-visit$12115$MT&Mo
                               g$x$12116$MT&Mo))))))
                     (g$vis-collector$9686$MT&Mo))
                    (g$rtc$12113$MT&Mo))
                  g$expanded-rhs$12114$MT&Mo)))
             ((case-lambda
                ((g$inv-collector$12121$MT&Mo
                   g$vis-collector$12122$MT&Mo
                   g$inv-collector$12123$MT&Mo
                   g$vis-collector$12124$MT&Mo)
                 ((case-lambda
                    ((g$swap$12125$MT&Mo)
                     (dynamic-wind
                       g$swap$12125$MT&Mo
                       (case-lambda
                         (()
                          (g$chi-expr$9649$MT&Mo
                            g$expr$12111$MT&Mo
                            g$r$12112$MT&Mo
                            g$r$12112$MT&Mo)))
                       g$swap$12125$MT&Mo)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$12126$MT&Mo)
                           (begin
                             (g$inv-collector$12121$MT&Mo
                               g$inv-collector$12123$MT&Mo)
                             (set! g$inv-collector$12123$MT&Mo
                               g$t$12126$MT&Mo))))
                        (g$inv-collector$12121$MT&Mo))
                       ((case-lambda
                          ((g$t$12127$MT&Mo)
                           (begin
                             (g$vis-collector$12122$MT&Mo
                               g$vis-collector$12124$MT&Mo)
                             (set! g$vis-collector$12124$MT&Mo
                               g$t$12127$MT&Mo))))
                        (g$vis-collector$12122$MT&Mo))))))))
              g$inv-collector$9685$MT&Mo
              g$vis-collector$9686$MT&Mo
              g$rtc$12113$MT&Mo
              (case-lambda ((g$x$12128$MT&Mo) (values)))))))
         (g$make-collector$9684$MT&Mo)))))
   (g$parse-exports$9679$MT&Mo
     g$parse-exports$13218$MT&Mo
     (case-lambda
       ((g$exp*$12129$MT&Mo)
        ((letrec ((g$f$12130$MT&Mo
                    (case-lambda
                      ((g$exp*$12131$MT&Mo
                         g$int*$12132$MT&Mo
                         g$ext*$12133$MT&Mo)
                       (if (null? g$exp*$12131$MT&Mo)
                         (begin
                           (if (not (g$valid-bound-ids?$9273$MT&Mo
                                      g$ext*$12133$MT&Mo))
                             (g$syntax-violation$9749$MT&Mo
                               'export
                               '"invalid exports"
                               (g$find-dups$9659$MT&Mo
                                 g$ext*$12133$MT&Mo))
                             (void))
                           (values
                             (g$map$5753$MT&Mo
                               g$syntax->datum$9752$MT&Mo
                               g$ext*$12133$MT&Mo)
                             g$int*$12132$MT&Mo))
                         ((case-lambda
                            ((g$t$12134$MT&Mo)
                             ((case-lambda
                                ((g$ls/false$12135$MT&Mo)
                                 (if g$ls/false$12135$MT&Mo
                                   (apply
                                     (case-lambda
                                       ((g$rename$12136$MT&Mo
                                          g$i*$12137$MT&Mo
                                          g$e*$12138$MT&Mo)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$9752$MT&Mo
                                                              g$rename$12136$MT&Mo)
                                                            'rename)
                                                     (if (g$for-all$5751$MT&Mo
                                                           g$id?$9268$MT&Mo
                                                           g$i*$12137$MT&Mo)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5751$MT&Mo
                                                           g$id?$9268$MT&Mo
                                                           g$e*$12138$MT&Mo))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$9749$MT&Mo
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$12131$MT&Mo))
                                            (void))
                                          (g$f$12130$MT&Mo
                                            (cdr g$exp*$12131$MT&Mo)
                                            (append
                                              g$i*$12137$MT&Mo
                                              g$int*$12132$MT&Mo)
                                            (append
                                              g$e*$12138$MT&Mo
                                              g$ext*$12133$MT&Mo)))))
                                     g$ls/false$12135$MT&Mo)
                                   ((case-lambda
                                      ((g$t$12139$MT&Mo)
                                       ((case-lambda
                                          ((g$ls/false$12140$MT&Mo)
                                           (if g$ls/false$12140$MT&Mo
                                             (apply
                                               (case-lambda
                                                 ((g$ie$12141$MT&Mo)
                                                  (begin
                                                    (if (not (g$id?$9268$MT&Mo
                                                               g$ie$12141$MT&Mo))
                                                      (g$syntax-violation$9749$MT&Mo
                                                        'export
                                                        '"invalid export"
                                                        g$ie$12141$MT&Mo)
                                                      (void))
                                                    (g$f$12130$MT&Mo
                                                      (cdr g$exp*$12131$MT&Mo)
                                                      (cons
                                                        g$ie$12141$MT&Mo
                                                        g$int*$12132$MT&Mo)
                                                      (cons
                                                        g$ie$12141$MT&Mo
                                                        g$ext*$12133$MT&Mo)))))
                                               g$ls/false$12140$MT&Mo)
                                             (g$syntax-violation$9749$MT&Mo
                                               '#f
                                               '"invalid syntax"
                                               g$t$12139$MT&Mo))))
                                        (g$syntax-dispatch$9631$MT&Mo
                                          g$t$12139$MT&Mo
                                          'any))))
                                    g$t$12134$MT&Mo))))
                              (g$syntax-dispatch$9631$MT&Mo
                                g$t$12134$MT&Mo
                                '(any . #(each (any any)))))))
                          (car g$exp*$12131$MT&Mo)))))))
           g$f$12130$MT&Mo)
         g$exp*$12129$MT&Mo
         '()
         '()))))
   (g$parse-library-name$9680$MT&Mo
     g$parse-library-name$13219$MT&Mo
     (case-lambda
       ((g$spec$12142$MT&Mo)
        (letrec* ((g$parse$12143$MT&Mo
                    (case-lambda
                      ((g$x$12150$MT&Mo)
                       ((case-lambda
                          ((g$t$12151$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$12152$MT&Mo)
                               (if (if g$ls/false$12152$MT&Mo
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$12153$MT&Mo)
                                            (g$for-all$5751$MT&Mo
                                              (case-lambda
                                                ((g$x$12154$MT&Mo)
                                                 ((case-lambda
                                                    ((g$x$12155$MT&Mo)
                                                     (if (integer?
                                                           g$x$12155$MT&Mo)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$12155$MT&Mo))
                                                       '#f)))
                                                  (g$syntax->datum$9752$MT&Mo
                                                    g$x$12154$MT&Mo))))
                                              g$v*$12153$MT&Mo)))
                                         g$ls/false$12152$MT&Mo))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$12156$MT&Mo)
                                      (values
                                        '()
                                        (g$map$5753$MT&Mo
                                          g$syntax->datum$9752$MT&Mo
                                          g$v*$12156$MT&Mo))))
                                   g$ls/false$12152$MT&Mo)
                                 ((case-lambda
                                    ((g$t$12157$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$12158$MT&Mo)
                                         (if (if g$ls/false$12158$MT&Mo
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$12159$MT&Mo
                                                        g$rest$12160$MT&Mo)
                                                      (g$symbol?$6402$MT&Mo
                                                        (g$syntax->datum$9752$MT&Mo
                                                          g$x$12159$MT&Mo))))
                                                   g$ls/false$12158$MT&Mo))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$12161$MT&Mo
                                                  g$rest$12162$MT&Mo)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$12143$MT&Mo
                                                       g$rest$12162$MT&Mo)))
                                                  (case-lambda
                                                    ((g$x*$12165$MT&Mo
                                                       g$v*$12166$MT&Mo)
                                                     ((case-lambda
                                                        ((g$v*$12167$MT&Mo
                                                           g$x*$12168$MT&Mo)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$9752$MT&Mo
                                                               g$x$12161$MT&Mo)
                                                             g$x*$12168$MT&Mo)
                                                           g$v*$12167$MT&Mo)))
                                                      g$v*$12166$MT&Mo
                                                      g$x*$12165$MT&Mo))))))
                                             g$ls/false$12158$MT&Mo)
                                           ((case-lambda
                                              ((g$t$12169$MT&Mo)
                                               ((case-lambda
                                                  ((g$ls/false$12170$MT&Mo)
                                                   (if g$ls/false$12170$MT&Mo
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (values
                                                            '()
                                                            '())))
                                                       g$ls/false$12170$MT&Mo)
                                                     ((case-lambda
                                                        ((g$t$12171$MT&Mo)
                                                         ((case-lambda
                                                            ((g$ls/false$12172$MT&Mo)
                                                             (if g$ls/false$12172$MT&Mo
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$9749$MT&Mo
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$12142$MT&Mo)))
                                                                 g$ls/false$12172$MT&Mo)
                                                               (g$syntax-violation$9749$MT&Mo
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$12171$MT&Mo))))
                                                          (g$syntax-dispatch$9631$MT&Mo
                                                            g$t$12171$MT&Mo
                                                            '_))))
                                                      g$t$12169$MT&Mo))))
                                                (g$syntax-dispatch$9631$MT&Mo
                                                  g$t$12169$MT&Mo
                                                  '()))))
                                            g$t$12157$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$12157$MT&Mo
                                        '(any . any)))))
                                  g$t$12151$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$12151$MT&Mo
                              '(each-any)))))
                        g$x$12150$MT&Mo)))))
          (call-with-values
            (case-lambda (() (g$parse$12143$MT&Mo g$spec$12142$MT&Mo)))
            (case-lambda
              ((g$name*$12146$MT&Mo g$ver*$12147$MT&Mo)
               ((case-lambda
                  ((g$ver*$12148$MT&Mo g$name*$12149$MT&Mo)
                   (begin
                     (if (null? g$name*$12149$MT&Mo)
                       (g$syntax-violation$9749$MT&Mo
                         '#f
                         '"empty library name"
                         g$spec$12142$MT&Mo)
                       (void))
                     (values g$name*$12149$MT&Mo g$ver*$12148$MT&Mo))))
                g$ver*$12147$MT&Mo
                g$name*$12146$MT&Mo))))))))
   (g$parse-library$9681$MT&Mo
     g$parse-library$13220$MT&Mo
     (case-lambda
       ((g$e$12173$MT&Mo)
        ((case-lambda
           ((g$t$12174$MT&Mo)
            ((case-lambda
               ((g$ls/false$12175$MT&Mo)
                (if (if g$ls/false$12175$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$12176$MT&Mo
                               g$name*$12177$MT&Mo
                               g$export$12178$MT&Mo
                               g$exp*$12179$MT&Mo
                               g$import$12180$MT&Mo
                               g$imp*$12181$MT&Mo
                               g$b*$12182$MT&Mo)
                             (if (eq? (g$syntax->datum$9752$MT&Mo
                                        g$export$12178$MT&Mo)
                                      'export)
                               (if (eq? (g$syntax->datum$9752$MT&Mo
                                          g$import$12180$MT&Mo)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$9752$MT&Mo
                                          g$library$12176$MT&Mo)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$12175$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$12183$MT&Mo
                         g$name*$12184$MT&Mo
                         g$export$12185$MT&Mo
                         g$exp*$12186$MT&Mo
                         g$import$12187$MT&Mo
                         g$imp*$12188$MT&Mo
                         g$b*$12189$MT&Mo)
                       (values
                         g$name*$12184$MT&Mo
                         g$exp*$12186$MT&Mo
                         g$imp*$12188$MT&Mo
                         g$b*$12189$MT&Mo)))
                    g$ls/false$12175$MT&Mo)
                  ((case-lambda
                     ((g$t$12190$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$12191$MT&Mo)
                          (if g$ls/false$12191$MT&Mo
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$9749$MT&Mo
                                   '#f
                                   '"malformed library"
                                   g$e$12173$MT&Mo)))
                              g$ls/false$12191$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$12190$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$12190$MT&Mo
                         '_))))
                   g$t$12174$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$12174$MT&Mo
               '(any each-any
                     (any . each-any)
                     (any . each-any)
                     .
                     each-any)))))
         g$e$12173$MT&Mo))))
   (g$parse-import-spec*$9682$MT&Mo
     g$parse-import-spec*$13221$MT&Mo
     (case-lambda
       ((g$imp*$12192$MT&Mo)
        (letrec* ((g$idsyn?$12193$MT&Mo
                    (case-lambda
                      ((g$x$12453$MT&Mo)
                       (g$symbol?$6402$MT&Mo
                         (g$syntax->datum$9752$MT&Mo
                           g$x$12453$MT&Mo)))))
                  (g$dup-error$12194$MT&Mo
                    (case-lambda
                      ((g$name$12452$MT&Mo)
                       (g$syntax-violation$9749$MT&Mo
                         'import
                         '"two imports with different bindings"
                         g$name$12452$MT&Mo))))
                  (g$merge-substs$12195$MT&Mo
                    (case-lambda
                      ((g$s$12443$MT&Mo g$subst$12444$MT&Mo)
                       (letrec* ((g$insert-to-subst$12445$MT&Mo
                                   (case-lambda
                                     ((g$a$12446$MT&Mo
                                        g$subst$12447$MT&Mo)
                                      ((case-lambda
                                         ((g$name$12448$MT&Mo
                                            g$label$12449$MT&Mo)
                                          ((case-lambda
                                             ((g$t$12450$MT&Mo)
                                              (if g$t$12450$MT&Mo
                                                ((case-lambda
                                                   ((g$x$12451$MT&Mo)
                                                    (if (eq? (cdr g$x$12451$MT&Mo)
                                                             g$label$12449$MT&Mo)
                                                      g$subst$12447$MT&Mo
                                                      (g$dup-error$12194$MT&Mo
                                                        g$name$12448$MT&Mo))))
                                                 g$t$12450$MT&Mo)
                                                (cons
                                                  g$a$12446$MT&Mo
                                                  g$subst$12447$MT&Mo))))
                                           (g$assq$5741$MT&Mo
                                             g$name$12448$MT&Mo
                                             g$subst$12447$MT&Mo))))
                                       (car g$a$12446$MT&Mo)
                                       (cdr g$a$12446$MT&Mo))))))
                         (if (null? g$s$12443$MT&Mo)
                           g$subst$12444$MT&Mo
                           (g$insert-to-subst$12445$MT&Mo
                             (car g$s$12443$MT&Mo)
                             (g$merge-substs$12195$MT&Mo
                               (cdr g$s$12443$MT&Mo)
                               g$subst$12444$MT&Mo)))))))
                  (g$exclude*$12196$MT&Mo
                    (case-lambda
                      ((g$sym*$12419$MT&Mo g$subst$12420$MT&Mo)
                       (letrec* ((g$exclude$12421$MT&Mo
                                   (case-lambda
                                     ((g$sym$12434$MT&Mo
                                        g$subst$12435$MT&Mo)
                                      (if (null? g$subst$12435$MT&Mo)
                                        (g$syntax-violation$9749$MT&Mo
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$12434$MT&Mo)
                                        (if (eq? g$sym$12434$MT&Mo
                                                 (g$caar$6410$MT&Mo
                                                   g$subst$12435$MT&Mo))
                                          (values
                                            (g$cdar$6412$MT&Mo
                                              g$subst$12435$MT&Mo)
                                            (cdr g$subst$12435$MT&Mo))
                                          ((case-lambda
                                             ((g$a$12436$MT&Mo)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$12421$MT&Mo
                                                     g$sym$12434$MT&Mo
                                                     (cdr g$subst$12435$MT&Mo))))
                                                (case-lambda
                                                  ((g$old$12439$MT&Mo
                                                     g$subst$12440$MT&Mo)
                                                   ((case-lambda
                                                      ((g$subst$12441$MT&Mo
                                                         g$old$12442$MT&Mo)
                                                       (values
                                                         g$old$12442$MT&Mo
                                                         (cons
                                                           g$a$12436$MT&Mo
                                                           g$subst$12441$MT&Mo))))
                                                    g$subst$12440$MT&Mo
                                                    g$old$12439$MT&Mo))))))
                                           (car g$subst$12435$MT&Mo))))))))
                         (if (null? g$sym*$12419$MT&Mo)
                           (values '() g$subst$12420$MT&Mo)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$12421$MT&Mo
                                  (car g$sym*$12419$MT&Mo)
                                  g$subst$12420$MT&Mo)))
                             (case-lambda
                               ((g$old$12424$MT&Mo g$subst$12425$MT&Mo)
                                ((case-lambda
                                   ((g$subst$12426$MT&Mo
                                      g$old$12427$MT&Mo)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$12196$MT&Mo
                                           (cdr g$sym*$12419$MT&Mo)
                                           g$subst$12426$MT&Mo)))
                                      (case-lambda
                                        ((g$old*$12430$MT&Mo
                                           g$subst$12431$MT&Mo)
                                         ((case-lambda
                                            ((g$subst$12432$MT&Mo
                                               g$old*$12433$MT&Mo)
                                             (values
                                               (cons
                                                 g$old$12427$MT&Mo
                                                 g$old*$12433$MT&Mo)
                                               g$subst$12432$MT&Mo)))
                                          g$subst$12431$MT&Mo
                                          g$old*$12430$MT&Mo))))))
                                 g$subst$12425$MT&Mo
                                 g$old$12424$MT&Mo)))))))))
                  (g$find*$12197$MT&Mo
                    (case-lambda
                      ((g$sym*$12415$MT&Mo g$subst$12416$MT&Mo)
                       (g$map$5753$MT&Mo
                         (case-lambda
                           ((g$x$12417$MT&Mo)
                            ((case-lambda
                               ((g$t$12418$MT&Mo)
                                (if g$t$12418$MT&Mo
                                  (cdr g$t$12418$MT&Mo)
                                  (g$syntax-violation$9749$MT&Mo
                                    'import
                                    '"cannot find identifier"
                                    g$x$12417$MT&Mo))))
                             (g$assq$5741$MT&Mo
                               g$x$12417$MT&Mo
                               g$subst$12416$MT&Mo))))
                         g$sym*$12415$MT&Mo))))
                  (g$rem*$12198$MT&Mo
                    (case-lambda
                      ((g$sym*$12411$MT&Mo g$subst$12412$MT&Mo)
                       ((letrec ((g$f$12413$MT&Mo
                                   (case-lambda
                                     ((g$subst$12414$MT&Mo)
                                      (if (null? g$subst$12414$MT&Mo)
                                        '()
                                        (if (g$memq$5745$MT&Mo
                                              (g$caar$6410$MT&Mo
                                                g$subst$12414$MT&Mo)
                                              g$sym*$12411$MT&Mo)
                                          (g$f$12413$MT&Mo
                                            (cdr g$subst$12414$MT&Mo))
                                          (cons
                                            (car g$subst$12414$MT&Mo)
                                            (g$f$12413$MT&Mo
                                              (cdr g$subst$12414$MT&Mo)))))))))
                          g$f$12413$MT&Mo)
                        g$subst$12412$MT&Mo))))
                  (g$remove-dups$12199$MT&Mo
                    (case-lambda
                      ((g$ls$12410$MT&Mo)
                       (if (null? g$ls$12410$MT&Mo)
                         '()
                         (if (g$memq$5745$MT&Mo
                               (car g$ls$12410$MT&Mo)
                               (cdr g$ls$12410$MT&Mo))
                           (g$remove-dups$12199$MT&Mo
                             (cdr g$ls$12410$MT&Mo))
                           (cons
                             (car g$ls$12410$MT&Mo)
                             (g$remove-dups$12199$MT&Mo
                               (cdr g$ls$12410$MT&Mo))))))))
                  (g$parse-library-name$12200$MT&Mo
                    (case-lambda
                      ((g$spec$12294$MT&Mo)
                       (letrec* ((g$subversion?$12295$MT&Mo
                                   (case-lambda
                                     ((g$x$12408$MT&Mo)
                                      ((case-lambda
                                         ((g$x$12409$MT&Mo)
                                          (if (integer? g$x$12409$MT&Mo)
                                            (if (exact? g$x$12409$MT&Mo)
                                              (begin
                                                '#f
                                                (>= g$x$12409$MT&Mo '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$9752$MT&Mo
                                         g$x$12408$MT&Mo)))))
                                 (g$subversion-pred$12296$MT&Mo
                                   (case-lambda
                                     ((g$x*$12360$MT&Mo)
                                      ((case-lambda
                                         ((g$t$12361$MT&Mo)
                                          ((case-lambda
                                             ((g$ls/false$12362$MT&Mo)
                                              (if (if g$ls/false$12362$MT&Mo
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$12363$MT&Mo)
                                                           (g$subversion?$12295$MT&Mo
                                                             g$n$12363$MT&Mo)))
                                                        g$ls/false$12362$MT&Mo))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$12364$MT&Mo)
                                                     (case-lambda
                                                       ((g$x$12365$MT&Mo)
                                                        (= g$x$12365$MT&Mo
                                                           (g$syntax->datum$9752$MT&Mo
                                                             g$n$12364$MT&Mo))))))
                                                  g$ls/false$12362$MT&Mo)
                                                ((case-lambda
                                                   ((g$t$12366$MT&Mo)
                                                    ((case-lambda
                                                       ((g$ls/false$12367$MT&Mo)
                                                        (if (if g$ls/false$12367$MT&Mo
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$12368$MT&Mo
                                                                       g$sub*$12369$MT&Mo)
                                                                     (eq? (g$syntax->datum$9752$MT&Mo
                                                                            g$p?$12368$MT&Mo)
                                                                          'and)))
                                                                  g$ls/false$12367$MT&Mo))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$12370$MT&Mo
                                                                 g$sub*$12371$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$p*$12372$MT&Mo)
                                                                   (case-lambda
                                                                     ((g$x$12373$MT&Mo)
                                                                      (g$for-all$5751$MT&Mo
                                                                        (case-lambda
                                                                          ((g$p$12374$MT&Mo)
                                                                           (g$p$12374$MT&Mo
                                                                             g$x$12373$MT&Mo)))
                                                                        g$p*$12372$MT&Mo)))))
                                                                (g$map$5753$MT&Mo
                                                                  g$subversion-pred$12296$MT&Mo
                                                                  g$sub*$12371$MT&Mo))))
                                                            g$ls/false$12367$MT&Mo)
                                                          ((case-lambda
                                                             ((g$t$12375$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$ls/false$12376$MT&Mo)
                                                                  (if (if g$ls/false$12376$MT&Mo
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$12377$MT&Mo
                                                                                 g$sub*$12378$MT&Mo)
                                                                               (eq? (g$syntax->datum$9752$MT&Mo
                                                                                      g$p?$12377$MT&Mo)
                                                                                    'or)))
                                                                            g$ls/false$12376$MT&Mo))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$12379$MT&Mo
                                                                           g$sub*$12380$MT&Mo)
                                                                         ((case-lambda
                                                                            ((g$p*$12381$MT&Mo)
                                                                             (case-lambda
                                                                               ((g$x$12382$MT&Mo)
                                                                                (g$exists$5752$MT&Mo
                                                                                  (case-lambda
                                                                                    ((g$p$12383$MT&Mo)
                                                                                     (g$p$12383$MT&Mo
                                                                                       g$x$12382$MT&Mo)))
                                                                                  g$p*$12381$MT&Mo)))))
                                                                          (g$map$5753$MT&Mo
                                                                            g$subversion-pred$12296$MT&Mo
                                                                            g$sub*$12380$MT&Mo))))
                                                                      g$ls/false$12376$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$t$12384$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$ls/false$12385$MT&Mo)
                                                                            (if (if g$ls/false$12385$MT&Mo
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$12386$MT&Mo
                                                                                           g$sub$12387$MT&Mo)
                                                                                         (eq? (g$syntax->datum$9752$MT&Mo
                                                                                                g$p?$12386$MT&Mo)
                                                                                              'not)))
                                                                                      g$ls/false$12385$MT&Mo))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$12388$MT&Mo
                                                                                     g$sub$12389$MT&Mo)
                                                                                   ((case-lambda
                                                                                      ((g$p$12390$MT&Mo)
                                                                                       (case-lambda
                                                                                         ((g$x$12391$MT&Mo)
                                                                                          (not (g$p$12390$MT&Mo
                                                                                                 g$x$12391$MT&Mo))))))
                                                                                    (g$subversion-pred$12296$MT&Mo
                                                                                      g$sub$12389$MT&Mo))))
                                                                                g$ls/false$12385$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$t$12392$MT&Mo)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$12393$MT&Mo)
                                                                                      (if (if g$ls/false$12393$MT&Mo
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$12394$MT&Mo
                                                                                                     g$n$12395$MT&Mo)
                                                                                                   (if (eq? (g$syntax->datum$9752$MT&Mo
                                                                                                              g$p?$12394$MT&Mo)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$12295$MT&Mo
                                                                                                         g$n$12395$MT&Mo))
                                                                                                     '#f)))
                                                                                                g$ls/false$12393$MT&Mo))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$12396$MT&Mo
                                                                                               g$n$12397$MT&Mo)
                                                                                             (case-lambda
                                                                                               ((g$x$12398$MT&Mo)
                                                                                                (<= g$x$12398$MT&Mo
                                                                                                    (g$syntax->datum$9752$MT&Mo
                                                                                                      g$n$12397$MT&Mo))))))
                                                                                          g$ls/false$12393$MT&Mo)
                                                                                        ((case-lambda
                                                                                           ((g$t$12399$MT&Mo)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$12400$MT&Mo)
                                                                                                (if (if g$ls/false$12400$MT&Mo
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$12401$MT&Mo
                                                                                                               g$n$12402$MT&Mo)
                                                                                                             (if (eq? (g$syntax->datum$9752$MT&Mo
                                                                                                                        g$p?$12401$MT&Mo)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$12295$MT&Mo
                                                                                                                   g$n$12402$MT&Mo))
                                                                                                               '#f)))
                                                                                                          g$ls/false$12400$MT&Mo))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$12403$MT&Mo
                                                                                                         g$n$12404$MT&Mo)
                                                                                                       (case-lambda
                                                                                                         ((g$x$12405$MT&Mo)
                                                                                                          (>= g$x$12405$MT&Mo
                                                                                                              (g$syntax->datum$9752$MT&Mo
                                                                                                                g$n$12404$MT&Mo))))))
                                                                                                    g$ls/false$12400$MT&Mo)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$12406$MT&Mo)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$12407$MT&Mo)
                                                                                                          (if g$ls/false$12407$MT&Mo
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$9749$MT&Mo
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$12294$MT&Mo
                                                                                                                   g$x*$12360$MT&Mo)))
                                                                                                              g$ls/false$12407$MT&Mo)
                                                                                                            (g$syntax-violation$9749$MT&Mo
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$12406$MT&Mo))))
                                                                                                       (g$syntax-dispatch$9631$MT&Mo
                                                                                                         g$t$12406$MT&Mo
                                                                                                         '_))))
                                                                                                   g$t$12399$MT&Mo))))
                                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                                               g$t$12399$MT&Mo
                                                                                               '(any any)))))
                                                                                         g$t$12392$MT&Mo))))
                                                                                   (g$syntax-dispatch$9631$MT&Mo
                                                                                     g$t$12392$MT&Mo
                                                                                     '(any any)))))
                                                                               g$t$12384$MT&Mo))))
                                                                         (g$syntax-dispatch$9631$MT&Mo
                                                                           g$t$12384$MT&Mo
                                                                           '(any any)))))
                                                                     g$t$12375$MT&Mo))))
                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                 g$t$12375$MT&Mo
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$12366$MT&Mo))))
                                                     (g$syntax-dispatch$9631$MT&Mo
                                                       g$t$12366$MT&Mo
                                                       '(any .
                                                             each-any)))))
                                                 g$t$12361$MT&Mo))))
                                           (g$syntax-dispatch$9631$MT&Mo
                                             g$t$12361$MT&Mo
                                             'any))))
                                       g$x*$12360$MT&Mo))))
                                 (g$version-pred$12297$MT&Mo
                                   (case-lambda
                                     ((g$x*$12320$MT&Mo)
                                      ((case-lambda
                                         ((g$t$12321$MT&Mo)
                                          ((case-lambda
                                             ((g$ls/false$12322$MT&Mo)
                                              (if g$ls/false$12322$MT&Mo
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$12323$MT&Mo)
                                                        '#t))))
                                                  g$ls/false$12322$MT&Mo)
                                                ((case-lambda
                                                   ((g$t$12324$MT&Mo)
                                                    ((case-lambda
                                                       ((g$ls/false$12325$MT&Mo)
                                                        (if (if g$ls/false$12325$MT&Mo
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$12326$MT&Mo
                                                                       g$ver*$12327$MT&Mo)
                                                                     (eq? (g$syntax->datum$9752$MT&Mo
                                                                            g$c$12326$MT&Mo)
                                                                          'and)))
                                                                  g$ls/false$12325$MT&Mo))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$12328$MT&Mo
                                                                 g$ver*$12329$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$p*$12330$MT&Mo)
                                                                   (case-lambda
                                                                     ((g$x$12331$MT&Mo)
                                                                      (g$for-all$5751$MT&Mo
                                                                        (case-lambda
                                                                          ((g$p$12332$MT&Mo)
                                                                           (g$p$12332$MT&Mo
                                                                             g$x$12331$MT&Mo)))
                                                                        g$p*$12330$MT&Mo)))))
                                                                (g$map$5753$MT&Mo
                                                                  g$version-pred$12297$MT&Mo
                                                                  g$ver*$12329$MT&Mo))))
                                                            g$ls/false$12325$MT&Mo)
                                                          ((case-lambda
                                                             ((g$t$12333$MT&Mo)
                                                              ((case-lambda
                                                                 ((g$ls/false$12334$MT&Mo)
                                                                  (if (if g$ls/false$12334$MT&Mo
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$12335$MT&Mo
                                                                                 g$ver*$12336$MT&Mo)
                                                                               (eq? (g$syntax->datum$9752$MT&Mo
                                                                                      g$c$12335$MT&Mo)
                                                                                    'or)))
                                                                            g$ls/false$12334$MT&Mo))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$12337$MT&Mo
                                                                           g$ver*$12338$MT&Mo)
                                                                         ((case-lambda
                                                                            ((g$p*$12339$MT&Mo)
                                                                             (case-lambda
                                                                               ((g$x$12340$MT&Mo)
                                                                                (g$exists$5752$MT&Mo
                                                                                  (case-lambda
                                                                                    ((g$p$12341$MT&Mo)
                                                                                     (g$p$12341$MT&Mo
                                                                                       g$x$12340$MT&Mo)))
                                                                                  g$p*$12339$MT&Mo)))))
                                                                          (g$map$5753$MT&Mo
                                                                            g$version-pred$12297$MT&Mo
                                                                            g$ver*$12338$MT&Mo))))
                                                                      g$ls/false$12334$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$t$12342$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$ls/false$12343$MT&Mo)
                                                                            (if (if g$ls/false$12343$MT&Mo
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$12344$MT&Mo
                                                                                           g$ver$12345$MT&Mo)
                                                                                         (eq? (g$syntax->datum$9752$MT&Mo
                                                                                                g$c$12344$MT&Mo)
                                                                                              'not)))
                                                                                      g$ls/false$12343$MT&Mo))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$12346$MT&Mo
                                                                                     g$ver$12347$MT&Mo)
                                                                                   ((case-lambda
                                                                                      ((g$p$12348$MT&Mo)
                                                                                       (case-lambda
                                                                                         ((g$x$12349$MT&Mo)
                                                                                          (not (g$p$12348$MT&Mo
                                                                                                 g$x$12349$MT&Mo))))))
                                                                                    (g$version-pred$12297$MT&Mo
                                                                                      g$ver$12347$MT&Mo))))
                                                                                g$ls/false$12343$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$t$12350$MT&Mo)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$12351$MT&Mo)
                                                                                      (if g$ls/false$12351$MT&Mo
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$12352$MT&Mo)
                                                                                             ((case-lambda
                                                                                                ((g$p*$12353$MT&Mo)
                                                                                                 (case-lambda
                                                                                                   ((g$x$12354$MT&Mo)
                                                                                                    ((letrec ((g$f$12355$MT&Mo
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$12356$MT&Mo
                                                                                                                     g$x$12357$MT&Mo)
                                                                                                                   (if (null?
                                                                                                                         g$p*$12356$MT&Mo)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$12357$MT&Mo)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$12356$MT&Mo)
                                                                                                                            (car g$x$12357$MT&Mo))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$12355$MT&Mo
                                                                                                                             (cdr g$p*$12356$MT&Mo)
                                                                                                                             (cdr g$x$12357$MT&Mo)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$12355$MT&Mo)
                                                                                                     g$p*$12353$MT&Mo
                                                                                                     g$x$12354$MT&Mo)))))
                                                                                              (g$map$5753$MT&Mo
                                                                                                g$subversion-pred$12296$MT&Mo
                                                                                                g$sub*$12352$MT&Mo))))
                                                                                          g$ls/false$12351$MT&Mo)
                                                                                        ((case-lambda
                                                                                           ((g$t$12358$MT&Mo)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$12359$MT&Mo)
                                                                                                (if g$ls/false$12359$MT&Mo
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$9749$MT&Mo
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$12294$MT&Mo
                                                                                                         g$x*$12320$MT&Mo)))
                                                                                                    g$ls/false$12359$MT&Mo)
                                                                                                  (g$syntax-violation$9749$MT&Mo
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$12358$MT&Mo))))
                                                                                             (g$syntax-dispatch$9631$MT&Mo
                                                                                               g$t$12358$MT&Mo
                                                                                               '_))))
                                                                                         g$t$12350$MT&Mo))))
                                                                                   (g$syntax-dispatch$9631$MT&Mo
                                                                                     g$t$12350$MT&Mo
                                                                                     'each-any))))
                                                                               g$t$12342$MT&Mo))))
                                                                         (g$syntax-dispatch$9631$MT&Mo
                                                                           g$t$12342$MT&Mo
                                                                           '(any any)))))
                                                                     g$t$12333$MT&Mo))))
                                                               (g$syntax-dispatch$9631$MT&Mo
                                                                 g$t$12333$MT&Mo
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$12324$MT&Mo))))
                                                     (g$syntax-dispatch$9631$MT&Mo
                                                       g$t$12324$MT&Mo
                                                       '(any .
                                                             each-any)))))
                                                 g$t$12321$MT&Mo))))
                                           (g$syntax-dispatch$9631$MT&Mo
                                             g$t$12321$MT&Mo
                                             '()))))
                                       g$x*$12320$MT&Mo)))))
                         ((letrec ((g$f$12298$MT&Mo
                                     (case-lambda
                                       ((g$x$12299$MT&Mo)
                                        ((case-lambda
                                           ((g$t$12300$MT&Mo)
                                            ((case-lambda
                                               ((g$ls/false$12301$MT&Mo)
                                                (if g$ls/false$12301$MT&Mo
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$12302$MT&Mo)
                                                       (values
                                                         '()
                                                         (g$version-pred$12297$MT&Mo
                                                           g$version-spec*$12302$MT&Mo))))
                                                    g$ls/false$12301$MT&Mo)
                                                  ((case-lambda
                                                     ((g$t$12303$MT&Mo)
                                                      ((case-lambda
                                                         ((g$ls/false$12304$MT&Mo)
                                                          (if (if g$ls/false$12304$MT&Mo
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$12305$MT&Mo
                                                                         g$x*$12306$MT&Mo)
                                                                       (g$idsyn?$12193$MT&Mo
                                                                         g$x$12305$MT&Mo)))
                                                                    g$ls/false$12304$MT&Mo))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$12307$MT&Mo
                                                                   g$x*$12308$MT&Mo)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$12298$MT&Mo
                                                                        g$x*$12308$MT&Mo)))
                                                                   (case-lambda
                                                                     ((g$name$12311$MT&Mo
                                                                        g$pred$12312$MT&Mo)
                                                                      ((case-lambda
                                                                         ((g$pred$12313$MT&Mo
                                                                            g$name$12314$MT&Mo)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$9752$MT&Mo
                                                                                g$x$12307$MT&Mo)
                                                                              g$name$12314$MT&Mo)
                                                                            g$pred$12313$MT&Mo)))
                                                                       g$pred$12312$MT&Mo
                                                                       g$name$12311$MT&Mo))))))
                                                              g$ls/false$12304$MT&Mo)
                                                            ((case-lambda
                                                               ((g$t$12315$MT&Mo)
                                                                ((case-lambda
                                                                   ((g$ls/false$12316$MT&Mo)
                                                                    (if g$ls/false$12316$MT&Mo
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$12317$MT&Mo)
                                                                                '#t)))))
                                                                        g$ls/false$12316$MT&Mo)
                                                                      ((case-lambda
                                                                         ((g$t$12318$MT&Mo)
                                                                          ((case-lambda
                                                                             ((g$ls/false$12319$MT&Mo)
                                                                              (if g$ls/false$12319$MT&Mo
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$9749$MT&Mo
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$12294$MT&Mo)))
                                                                                  g$ls/false$12319$MT&Mo)
                                                                                (g$syntax-violation$9749$MT&Mo
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$12318$MT&Mo))))
                                                                           (g$syntax-dispatch$9631$MT&Mo
                                                                             g$t$12318$MT&Mo
                                                                             '_))))
                                                                       g$t$12315$MT&Mo))))
                                                                 (g$syntax-dispatch$9631$MT&Mo
                                                                   g$t$12315$MT&Mo
                                                                   '()))))
                                                             g$t$12303$MT&Mo))))
                                                       (g$syntax-dispatch$9631$MT&Mo
                                                         g$t$12303$MT&Mo
                                                         '(any .
                                                               any)))))
                                                   g$t$12300$MT&Mo))))
                                             (g$syntax-dispatch$9631$MT&Mo
                                               g$t$12300$MT&Mo
                                               '(each-any)))))
                                         g$x$12299$MT&Mo)))))
                            g$f$12298$MT&Mo)
                          g$spec$12294$MT&Mo)))))
                  (g$import-library$12201$MT&Mo
                    (case-lambda
                      ((g$spec*$12286$MT&Mo)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$12200$MT&Mo
                              g$spec*$12286$MT&Mo)))
                         (case-lambda
                           ((g$name$12289$MT&Mo g$pred$12290$MT&Mo)
                            ((case-lambda
                               ((g$pred$12291$MT&Mo g$name$12292$MT&Mo)
                                (begin
                                  (if (null? g$name$12292$MT&Mo)
                                    (g$syntax-violation$9749$MT&Mo
                                      'import
                                      '"empty library name"
                                      g$spec*$12286$MT&Mo)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$12293$MT&Mo)
                                      (begin
                                        (if (not g$lib$12293$MT&Mo)
                                          (g$syntax-violation$9749$MT&Mo
                                            'import
                                            '"cannot find library with required name"
                                            g$name$12292$MT&Mo)
                                          (void))
                                        (if (not (g$pred$12291$MT&Mo
                                                   (g$library-version$8960$MT&Mo
                                                     g$lib$12293$MT&Mo)))
                                          (g$syntax-violation$9749$MT&Mo
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$12286$MT&Mo
                                            g$lib$12293$MT&Mo)
                                          (void))
                                        ((g$imp-collector$9687$MT&Mo)
                                         g$lib$12293$MT&Mo)
                                        (g$library-subst$8964$MT&Mo
                                          g$lib$12293$MT&Mo))))
                                   (g$find-library-by-name$9000$MT&Mo
                                     g$name$12292$MT&Mo)))))
                             g$pred$12290$MT&Mo
                             g$name$12289$MT&Mo)))))))
                  (g$get-import$12202$MT&Mo
                    (case-lambda
                      ((g$spec$12215$MT&Mo)
                       ((case-lambda
                          ((g$t$12216$MT&Mo)
                           ((case-lambda
                              ((g$ls/false$12217$MT&Mo)
                               (if (if g$ls/false$12217$MT&Mo
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$12218$MT&Mo
                                              g$x*$12219$MT&Mo)
                                            (not (g$memq$5745$MT&Mo
                                                   (g$syntax->datum$9752$MT&Mo
                                                     g$x$12218$MT&Mo)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$12217$MT&Mo))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$12220$MT&Mo g$x*$12221$MT&Mo)
                                      (g$import-library$12201$MT&Mo
                                        (cons
                                          g$x$12220$MT&Mo
                                          g$x*$12221$MT&Mo))))
                                   g$ls/false$12217$MT&Mo)
                                 ((case-lambda
                                    ((g$t$12222$MT&Mo)
                                     ((case-lambda
                                        ((g$ls/false$12223$MT&Mo)
                                         (if (if g$ls/false$12223$MT&Mo
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$12224$MT&Mo
                                                        g$isp$12225$MT&Mo
                                                        g$old*$12226$MT&Mo
                                                        g$new*$12227$MT&Mo)
                                                      (if (eq? (g$syntax->datum$9752$MT&Mo
                                                                 g$rename$12224$MT&Mo)
                                                               'rename)
                                                        (if (g$for-all$5751$MT&Mo
                                                              g$idsyn?$12193$MT&Mo
                                                              g$old*$12226$MT&Mo)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5751$MT&Mo
                                                              g$idsyn?$12193$MT&Mo
                                                              g$new*$12227$MT&Mo))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$12223$MT&Mo))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$12228$MT&Mo
                                                  g$isp$12229$MT&Mo
                                                  g$old*$12230$MT&Mo
                                                  g$new*$12231$MT&Mo)
                                                ((case-lambda
                                                   ((g$subst$12232$MT&Mo
                                                      g$old*$12233$MT&Mo
                                                      g$new*$12234$MT&Mo)
                                                    ((case-lambda
                                                       ((g$old-label*$12235$MT&Mo)
                                                        ((case-lambda
                                                           ((g$subst$12236$MT&Mo)
                                                            (g$merge-substs$12195$MT&Mo
                                                              (g$map$5753$MT&Mo
                                                                cons
                                                                g$new*$12234$MT&Mo
                                                                g$old-label*$12235$MT&Mo)
                                                              g$subst$12236$MT&Mo)))
                                                         (g$rem*$12198$MT&Mo
                                                           g$old*$12233$MT&Mo
                                                           g$subst$12232$MT&Mo))))
                                                     (g$find*$12197$MT&Mo
                                                       g$old*$12233$MT&Mo
                                                       g$subst$12232$MT&Mo))))
                                                 (g$get-import$12202$MT&Mo
                                                   g$isp$12229$MT&Mo)
                                                 (g$map$5753$MT&Mo
                                                   g$syntax->datum$9752$MT&Mo
                                                   g$old*$12230$MT&Mo)
                                                 (g$map$5753$MT&Mo
                                                   g$syntax->datum$9752$MT&Mo
                                                   g$new*$12231$MT&Mo))))
                                             g$ls/false$12223$MT&Mo)
                                           ((case-lambda
                                              ((g$t$12237$MT&Mo)
                                               ((case-lambda
                                                  ((g$ls/false$12238$MT&Mo)
                                                   (if (if g$ls/false$12238$MT&Mo
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$12239$MT&Mo
                                                                  g$isp$12240$MT&Mo
                                                                  g$sym*$12241$MT&Mo)
                                                                (if (eq? (g$syntax->datum$9752$MT&Mo
                                                                           g$except$12239$MT&Mo)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5751$MT&Mo
                                                                      g$idsyn?$12193$MT&Mo
                                                                      g$sym*$12241$MT&Mo))
                                                                  '#f)))
                                                             g$ls/false$12238$MT&Mo))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$12242$MT&Mo
                                                            g$isp$12243$MT&Mo
                                                            g$sym*$12244$MT&Mo)
                                                          ((case-lambda
                                                             ((g$subst$12245$MT&Mo)
                                                              (g$rem*$12198$MT&Mo
                                                                (g$map$5753$MT&Mo
                                                                  g$syntax->datum$9752$MT&Mo
                                                                  g$sym*$12244$MT&Mo)
                                                                g$subst$12245$MT&Mo)))
                                                           (g$get-import$12202$MT&Mo
                                                             g$isp$12243$MT&Mo))))
                                                       g$ls/false$12238$MT&Mo)
                                                     ((case-lambda
                                                        ((g$t$12246$MT&Mo)
                                                         ((case-lambda
                                                            ((g$ls/false$12247$MT&Mo)
                                                             (if (if g$ls/false$12247$MT&Mo
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$12248$MT&Mo
                                                                            g$isp$12249$MT&Mo
                                                                            g$sym*$12250$MT&Mo)
                                                                          (if (eq? (g$syntax->datum$9752$MT&Mo
                                                                                     g$only$12248$MT&Mo)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5751$MT&Mo
                                                                                g$idsyn?$12193$MT&Mo
                                                                                g$sym*$12250$MT&Mo))
                                                                            '#f)))
                                                                       g$ls/false$12247$MT&Mo))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$12251$MT&Mo
                                                                      g$isp$12252$MT&Mo
                                                                      g$sym*$12253$MT&Mo)
                                                                    ((case-lambda
                                                                       ((g$subst$12254$MT&Mo
                                                                          g$sym*$12255$MT&Mo)
                                                                        ((case-lambda
                                                                           ((g$sym*$12256$MT&Mo)
                                                                            ((case-lambda
                                                                               ((g$lab*$12257$MT&Mo)
                                                                                (g$map$5753$MT&Mo
                                                                                  cons
                                                                                  g$sym*$12256$MT&Mo
                                                                                  g$lab*$12257$MT&Mo)))
                                                                             (g$find*$12197$MT&Mo
                                                                               g$sym*$12256$MT&Mo
                                                                               g$subst$12254$MT&Mo))))
                                                                         (g$remove-dups$12199$MT&Mo
                                                                           g$sym*$12255$MT&Mo))))
                                                                     (g$get-import$12202$MT&Mo
                                                                       g$isp$12252$MT&Mo)
                                                                     (g$map$5753$MT&Mo
                                                                       g$syntax->datum$9752$MT&Mo
                                                                       g$sym*$12253$MT&Mo))))
                                                                 g$ls/false$12247$MT&Mo)
                                                               ((case-lambda
                                                                  ((g$t$12258$MT&Mo)
                                                                   ((case-lambda
                                                                      ((g$ls/false$12259$MT&Mo)
                                                                       (if (if g$ls/false$12259$MT&Mo
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$12260$MT&Mo
                                                                                      g$isp$12261$MT&Mo
                                                                                      g$p$12262$MT&Mo)
                                                                                    (if (eq? (g$syntax->datum$9752$MT&Mo
                                                                                               g$prefix$12260$MT&Mo)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$12193$MT&Mo
                                                                                          g$p$12262$MT&Mo))
                                                                                      '#f)))
                                                                                 g$ls/false$12259$MT&Mo))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$12263$MT&Mo
                                                                                g$isp$12264$MT&Mo
                                                                                g$p$12265$MT&Mo)
                                                                              ((case-lambda
                                                                                 ((g$subst$12266$MT&Mo
                                                                                    g$prefix$12267$MT&Mo)
                                                                                  (g$map$5753$MT&Mo
                                                                                    (case-lambda
                                                                                      ((g$x$12268$MT&Mo)
                                                                                       (cons
                                                                                         (string->symbol
                                                                                           (string-append
                                                                                             g$prefix$12267$MT&Mo
                                                                                             (symbol->string
                                                                                               (car g$x$12268$MT&Mo))))
                                                                                         (cdr g$x$12268$MT&Mo))))
                                                                                    g$subst$12266$MT&Mo)))
                                                                               (g$get-import$12202$MT&Mo
                                                                                 g$isp$12264$MT&Mo)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$9752$MT&Mo
                                                                                   g$p$12265$MT&Mo)))))
                                                                           g$ls/false$12259$MT&Mo)
                                                                         ((case-lambda
                                                                            ((g$t$12269$MT&Mo)
                                                                             ((case-lambda
                                                                                ((g$ls/false$12270$MT&Mo)
                                                                                 (if (if g$ls/false$12270$MT&Mo
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$12271$MT&Mo
                                                                                                g$spec*$12272$MT&Mo)
                                                                                              (eq? (g$syntax->datum$9752$MT&Mo
                                                                                                     g$library$12271$MT&Mo)
                                                                                                   'library)))
                                                                                           g$ls/false$12270$MT&Mo))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$12273$MT&Mo
                                                                                          g$spec*$12274$MT&Mo)
                                                                                        (g$import-library$12201$MT&Mo
                                                                                          g$spec*$12274$MT&Mo)))
                                                                                     g$ls/false$12270$MT&Mo)
                                                                                   ((case-lambda
                                                                                      ((g$t$12275$MT&Mo)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$12276$MT&Mo)
                                                                                           (if (if g$ls/false$12276$MT&Mo
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$12277$MT&Mo
                                                                                                          g$isp$12278$MT&Mo
                                                                                                          g$rest$12279$MT&Mo)
                                                                                                        (eq? (g$syntax->datum$9752$MT&Mo
                                                                                                               g$for$12277$MT&Mo)
                                                                                                             'for)))
                                                                                                     g$ls/false$12276$MT&Mo))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$12280$MT&Mo
                                                                                                    g$isp$12281$MT&Mo
                                                                                                    g$rest$12282$MT&Mo)
                                                                                                  (g$get-import$12202$MT&Mo
                                                                                                    g$isp$12281$MT&Mo)))
                                                                                               g$ls/false$12276$MT&Mo)
                                                                                             ((case-lambda
                                                                                                ((g$t$12283$MT&Mo)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$12284$MT&Mo)
                                                                                                     (if g$ls/false$12284$MT&Mo
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$12285$MT&Mo)
                                                                                                            (g$syntax-violation$9749$MT&Mo
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$12285$MT&Mo)))
                                                                                                         g$ls/false$12284$MT&Mo)
                                                                                                       (g$syntax-violation$9749$MT&Mo
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$12283$MT&Mo))))
                                                                                                  (g$syntax-dispatch$9631$MT&Mo
                                                                                                    g$t$12283$MT&Mo
                                                                                                    'any))))
                                                                                              g$t$12275$MT&Mo))))
                                                                                        (g$syntax-dispatch$9631$MT&Mo
                                                                                          g$t$12275$MT&Mo
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$12269$MT&Mo))))
                                                                              (g$syntax-dispatch$9631$MT&Mo
                                                                                g$t$12269$MT&Mo
                                                                                '(any each-any)))))
                                                                          g$t$12258$MT&Mo))))
                                                                    (g$syntax-dispatch$9631$MT&Mo
                                                                      g$t$12258$MT&Mo
                                                                      '(any any
                                                                            any)))))
                                                                g$t$12246$MT&Mo))))
                                                          (g$syntax-dispatch$9631$MT&Mo
                                                            g$t$12246$MT&Mo
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$12237$MT&Mo))))
                                                (g$syntax-dispatch$9631$MT&Mo
                                                  g$t$12237$MT&Mo
                                                  '(any any
                                                        .
                                                        each-any)))))
                                            g$t$12222$MT&Mo))))
                                      (g$syntax-dispatch$9631$MT&Mo
                                        g$t$12222$MT&Mo
                                        '(any any
                                              .
                                              #(each (any any)))))))
                                  g$t$12216$MT&Mo))))
                            (g$syntax-dispatch$9631$MT&Mo
                              g$t$12216$MT&Mo
                              '(any . each-any)))))
                        g$spec$12215$MT&Mo))))
                  (g$add-imports!$12203$MT&Mo
                    (case-lambda
                      ((g$imp$12207$MT&Mo g$h$12208$MT&Mo)
                       ((case-lambda
                          ((g$subst$12209$MT&Mo)
                           (g$for-each$5754$MT&Mo
                             (case-lambda
                               ((g$x$12210$MT&Mo)
                                ((case-lambda
                                   ((g$name$12211$MT&Mo
                                      g$label$12212$MT&Mo)
                                    ((case-lambda
                                       ((g$t$12213$MT&Mo)
                                        (if g$t$12213$MT&Mo
                                          ((case-lambda
                                             ((g$l$12214$MT&Mo)
                                              (if (not (eq? g$l$12214$MT&Mo
                                                            g$label$12212$MT&Mo))
                                                (g$dup-error$12194$MT&Mo
                                                  g$name$12211$MT&Mo)
                                                (void))))
                                           g$t$12213$MT&Mo)
                                          (g$hashtable-set!$6505$MT&Mo
                                            g$h$12208$MT&Mo
                                            g$name$12211$MT&Mo
                                            g$label$12212$MT&Mo))))
                                     (g$hashtable-ref$6504$MT&Mo
                                       g$h$12208$MT&Mo
                                       g$name$12211$MT&Mo
                                       '#f))))
                                 (car g$x$12210$MT&Mo)
                                 (cdr g$x$12210$MT&Mo))))
                             g$subst$12209$MT&Mo)))
                        (g$get-import$12202$MT&Mo
                          g$imp$12207$MT&Mo))))))
          ((letrec ((g$f$12204$MT&Mo
                      (case-lambda
                        ((g$imp*$12205$MT&Mo g$h$12206$MT&Mo)
                         (if (null? g$imp*$12205$MT&Mo)
                           (hashtable-entries g$h$12206$MT&Mo)
                           (begin
                             (g$add-imports!$12203$MT&Mo
                               (car g$imp*$12205$MT&Mo)
                               g$h$12206$MT&Mo)
                             (g$f$12204$MT&Mo
                               (cdr g$imp*$12205$MT&Mo)
                               g$h$12206$MT&Mo)))))))
             g$f$12204$MT&Mo)
           g$imp*$12192$MT&Mo
           (g$make-eq-hashtable$6501$MT&Mo))))))
   (g$make-top-rib$9683$MT&Mo
     g$make-top-rib$13222$MT&Mo
     (case-lambda
       ((g$names$12454$MT&Mo g$labels$12455$MT&Mo)
        ((case-lambda
           ((g$rib$12456$MT&Mo)
            (begin
              (g$vector-for-each$6463$MT&Mo
                (case-lambda
                  ((g$name$12457$MT&Mo g$label$12458$MT&Mo)
                   (begin
                     (if (not (g$symbol?$6402$MT&Mo g$name$12457$MT&Mo))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$12457$MT&Mo)
                       (void))
                     (g$extend-rib/nc!$9230$MT&Mo
                       g$rib$12456$MT&Mo
                       (g$make-stx$9241$MT&Mo
                         g$name$12457$MT&Mo
                         g$top-mark*$9201$MT&Mo
                         '()
                         '())
                       g$label$12458$MT&Mo))))
                g$names$12454$MT&Mo
                g$labels$12455$MT&Mo)
              g$rib$12456$MT&Mo)))
         (g$make-cache-rib$9227$MT&Mo)))))
   (g$make-collector$9684$MT&Mo
     g$make-collector$13223$MT&Mo
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$12459$MT&Mo)
            (case-lambda
              (() g$ls$12459$MT&Mo)
              ((g$x$12460$MT&Mo)
               (set! g$ls$12459$MT&Mo
                 (g$set-cons$9198$MT&Mo
                   g$x$12460$MT&Mo
                   g$ls$12459$MT&Mo))))))
         '()))))
   (g$inv-collector$9685$MT&Mo
     g$inv-collector$13224$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (case-lambda
         (g$args$12461$MT&Mo
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12462$MT&Mo)
          (begin
            (if (not (g$procedure?$6404$MT&Mo g$x$12462$MT&Mo))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$12462$MT&Mo)
              (void))
            g$x$12462$MT&Mo)))))
   (g$vis-collector$9686$MT&Mo
     g$vis-collector$13225$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (case-lambda
         (g$args$12463$MT&Mo
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12464$MT&Mo)
          (begin
            (if (not (g$procedure?$6404$MT&Mo g$x$12464$MT&Mo))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$12464$MT&Mo)
              (void))
            g$x$12464$MT&Mo)))))
   (g$imp-collector$9687$MT&Mo
     g$imp-collector$13226$MT&Mo
     (g$make-parameter$8174$MT&Mo
       (case-lambda
         (g$args$12465$MT&Mo
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$12466$MT&Mo)
          (begin
            (if (not (g$procedure?$6404$MT&Mo g$x$12466$MT&Mo))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$12466$MT&Mo)
              (void))
            g$x$12466$MT&Mo)))))
   (g$chi-library-internal$9688$MT&Mo
     g$chi-library-internal$13227$MT&Mo
     (case-lambda
       ((g$e*$12467$MT&Mo g$rib$12468$MT&Mo g$mix?$12469$MT&Mo)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$9677$MT&Mo
               g$e*$12467$MT&Mo
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$12468$MT&Mo
               g$mix?$12469$MT&Mo
               '#t)))
          (case-lambda
            ((g$e*$12478$MT&Mo
               g$r$12479$MT&Mo
               g$mr$12480$MT&Mo
               g$lex*$12481$MT&Mo
               g$rhs*$12482$MT&Mo
               g$mod**$12483$MT&Mo
               g$_kwd*$12484$MT&Mo
               g$exp*$12485$MT&Mo)
             ((case-lambda
                ((g$exp*$12486$MT&Mo
                   g$_kwd*$12487$MT&Mo
                   g$mod**$12488$MT&Mo
                   g$rhs*$12489$MT&Mo
                   g$lex*$12490$MT&Mo
                   g$mr$12491$MT&Mo
                   g$r$12492$MT&Mo
                   g$e*$12493$MT&Mo)
                 (values
                   (append
                     (apply
                       append
                       (g$reverse$6409$MT&Mo g$mod**$12488$MT&Mo))
                     g$e*$12493$MT&Mo)
                   g$r$12492$MT&Mo
                   g$mr$12491$MT&Mo
                   (g$reverse$6409$MT&Mo g$lex*$12490$MT&Mo)
                   (g$reverse$6409$MT&Mo g$rhs*$12489$MT&Mo)
                   g$exp*$12486$MT&Mo)))
              g$exp*$12485$MT&Mo
              g$_kwd*$12484$MT&Mo
              g$mod**$12483$MT&Mo
              g$rhs*$12482$MT&Mo
              g$lex*$12481$MT&Mo
              g$mr$12480$MT&Mo
              g$r$12479$MT&Mo
              g$e*$12478$MT&Mo)))))))
   (g$chi-interaction-expr$9689$MT&Mo
     g$chi-interaction-expr$13228$MT&Mo
     (case-lambda
       ((g$e$12494$MT&Mo g$rib$12495$MT&Mo g$r$12496$MT&Mo)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$9677$MT&Mo
               (list g$e$12494$MT&Mo)
               g$r$12496$MT&Mo
               g$r$12496$MT&Mo
               '()
               '()
               '()
               '()
               '()
               g$rib$12495$MT&Mo
               '#t
               '#f)))
          (case-lambda
            ((g$e*$12505$MT&Mo
               g$r$12506$MT&Mo
               g$mr$12507$MT&Mo
               g$lex*$12508$MT&Mo
               g$rhs*$12509$MT&Mo
               g$mod**$12510$MT&Mo
               g$_kwd*$12511$MT&Mo
               g$_exp*$12512$MT&Mo)
             ((case-lambda
                ((g$_exp*$12513$MT&Mo
                   g$_kwd*$12514$MT&Mo
                   g$mod**$12515$MT&Mo
                   g$rhs*$12516$MT&Mo
                   g$lex*$12517$MT&Mo
                   g$mr$12518$MT&Mo
                   g$r$12519$MT&Mo
                   g$e*$12520$MT&Mo)
                 ((case-lambda
                    ((g$e*$12521$MT&Mo)
                     ((case-lambda
                        ((g$e$12522$MT&Mo)
                         (values g$e$12522$MT&Mo g$r$12519$MT&Mo)))
                      (if (null? g$e*$12521$MT&Mo)
                        (g$build-void$9194$MT&Mo)
                        (if (null? (cdr g$e*$12521$MT&Mo))
                          (car g$e*$12521$MT&Mo)
                          (g$build-sequence$9193$MT&Mo
                            '#f
                            g$e*$12521$MT&Mo))))))
                  (g$expand-interaction-rhs*/init*$9656$MT&Mo
                    (g$reverse$6409$MT&Mo g$lex*$12517$MT&Mo)
                    (g$reverse$6409$MT&Mo g$rhs*$12516$MT&Mo)
                    (append
                      (apply
                        append
                        (g$reverse$6409$MT&Mo g$mod**$12515$MT&Mo))
                      g$e*$12520$MT&Mo)
                    g$r$12519$MT&Mo
                    g$mr$12518$MT&Mo))))
              g$_exp*$12512$MT&Mo
              g$_kwd*$12511$MT&Mo
              g$mod**$12510$MT&Mo
              g$rhs*$12509$MT&Mo
              g$lex*$12508$MT&Mo
              g$mr$12507$MT&Mo
              g$r$12506$MT&Mo
              g$e*$12505$MT&Mo)))))))
   (g$library-body-expander$9690$MT&Mo
     g$library-body-expander$13229$MT&Mo
     (case-lambda
       ((g$name$12523$MT&Mo
          g$main-exp*$12524$MT&Mo
          g$imp*$12525$MT&Mo
          g$b*$12526$MT&Mo
          g$mix?$12527$MT&Mo)
        (letrec* ((g$itc$12528$MT&Mo (g$make-collector$9684$MT&Mo)))
          ((case-lambda
             ((g$imp-collector$12533$MT&Mo
                g$top-level-context$12534$MT&Mo
                g$imp-collector$12535$MT&Mo
                g$top-level-context$12536$MT&Mo)
              ((case-lambda
                 ((g$swap$12537$MT&Mo)
                  (dynamic-wind
                    g$swap$12537$MT&Mo
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$9682$MT&Mo
                              g$imp*$12525$MT&Mo)))
                         (case-lambda
                           ((g$subst-names$12540$MT&Mo
                              g$subst-labels$12541$MT&Mo)
                            ((case-lambda
                               ((g$subst-labels$12542$MT&Mo
                                  g$subst-names$12543$MT&Mo)
                                ((case-lambda
                                   ((g$rib$12544$MT&Mo)
                                    (letrec* ((g$wrap$12545$MT&Mo
                                                (case-lambda
                                                  ((g$x$12607$MT&Mo)
                                                   (g$make-stx$9241$MT&Mo
                                                     g$x$12607$MT&Mo
                                                     g$top-mark*$9201$MT&Mo
                                                     (list
                                                       g$rib$12544$MT&Mo)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$12546$MT&Mo
                                            g$main-exp*$12547$MT&Mo
                                            g$rtc$12548$MT&Mo
                                            g$vtc$12549$MT&Mo)
                                          ((case-lambda
                                             ((g$inv-collector$12554$MT&Mo
                                                g$vis-collector$12555$MT&Mo
                                                g$inv-collector$12556$MT&Mo
                                                g$vis-collector$12557$MT&Mo)
                                              ((case-lambda
                                                 ((g$swap$12558$MT&Mo)
                                                  (dynamic-wind
                                                    g$swap$12558$MT&Mo
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$9688$MT&Mo
                                                              g$b*$12546$MT&Mo
                                                              g$rib$12544$MT&Mo
                                                              g$mix?$12527$MT&Mo)))
                                                         (case-lambda
                                                           ((g$init*$12565$MT&Mo
                                                              g$r$12566$MT&Mo
                                                              g$mr$12567$MT&Mo
                                                              g$lex*$12568$MT&Mo
                                                              g$rhs*$12569$MT&Mo
                                                              g$internal-exp*$12570$MT&Mo)
                                                            ((case-lambda
                                                               ((g$internal-exp*$12571$MT&Mo
                                                                  g$rhs*$12572$MT&Mo
                                                                  g$lex*$12573$MT&Mo
                                                                  g$mr$12574$MT&Mo
                                                                  g$r$12575$MT&Mo
                                                                  g$init*$12576$MT&Mo)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$9679$MT&Mo
                                                                       (append
                                                                         g$main-exp*$12547$MT&Mo
                                                                         g$internal-exp*$12571$MT&Mo))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$12579$MT&Mo
                                                                       g$exp-id*$12580$MT&Mo)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$12581$MT&Mo
                                                                           g$exp-name*$12582$MT&Mo)
                                                                         (begin
                                                                           (g$seal-rib!$9232$MT&Mo
                                                                             g$rib$12544$MT&Mo)
                                                                           ((case-lambda
                                                                              ((g$init*$12583$MT&Mo)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$12584$MT&Mo)
                                                                                   (begin
                                                                                     (g$unseal-rib!$9233$MT&Mo
                                                                                       g$rib$12544$MT&Mo)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$12585$MT&Mo
                                                                                           g$export-subst$12586$MT&Mo)
                                                                                         (letrec* ((g$errstr$12587$MT&Mo
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$9738$MT&Mo
                                                                                                  g$lex*$12573$MT&Mo
                                                                                                  g$loc*$12585$MT&Mo
                                                                                                  g$r$12575$MT&Mo)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$12591$MT&Mo
                                                                                                  g$global*$12592$MT&Mo
                                                                                                  g$macro*$12593$MT&Mo)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$12594$MT&Mo
                                                                                                      g$global*$12595$MT&Mo
                                                                                                      g$export-env$12596$MT&Mo)
                                                                                                    (begin
                                                                                                      (g$for-each$5754$MT&Mo
                                                                                                        (case-lambda
                                                                                                          ((g$s$12597$MT&Mo)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$12598$MT&Mo
                                                                                                                 g$label$12599$MT&Mo)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$12600$MT&Mo)
                                                                                                                   (if g$p$12600$MT&Mo
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$12601$MT&Mo)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$12602$MT&Mo)
                                                                                                                             (if (eq? g$type$12602$MT&Mo
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$9749$MT&Mo
                                                                                                                                 'export
                                                                                                                                 g$errstr$12587$MT&Mo
                                                                                                                                 g$name$12598$MT&Mo)
                                                                                                                               (void))))
                                                                                                                          (car g$b$12601$MT&Mo))))
                                                                                                                      (cdr g$p$12600$MT&Mo))
                                                                                                                     (void))))
                                                                                                                (g$assq$5741$MT&Mo
                                                                                                                  g$label$12599$MT&Mo
                                                                                                                  g$export-env$12596$MT&Mo))))
                                                                                                            (car g$s$12597$MT&Mo)
                                                                                                            (cdr g$s$12597$MT&Mo))))
                                                                                                        g$export-subst$12586$MT&Mo)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$12603$MT&Mo
                                                                                                            g$invoke-definitions$12604$MT&Mo)
                                                                                                          (values
                                                                                                            (g$itc$12528$MT&Mo)
                                                                                                            (g$rtc$12548$MT&Mo)
                                                                                                            (g$vtc$12549$MT&Mo)
                                                                                                            (g$build-sequence$9193$MT&Mo
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$12604$MT&Mo
                                                                                                                (list
                                                                                                                  g$invoke-body$12603$MT&Mo)))
                                                                                                            g$macro*$12594$MT&Mo
                                                                                                            g$export-subst$12586$MT&Mo
                                                                                                            g$export-env$12596$MT&Mo)))
                                                                                                       (g$build-library-letrec*$9197$MT&Mo
                                                                                                         '#f
                                                                                                         g$name$12523$MT&Mo
                                                                                                         g$lex*$12573$MT&Mo
                                                                                                         g$loc*$12585$MT&Mo
                                                                                                         g$rhs*$12584$MT&Mo
                                                                                                         (if (null?
                                                                                                               g$init*$12583$MT&Mo)
                                                                                                           (g$build-void$9194$MT&Mo)
                                                                                                           (g$build-sequence$9193$MT&Mo
                                                                                                             '#f
                                                                                                             g$init*$12583$MT&Mo)))
                                                                                                       (g$map$5753$MT&Mo
                                                                                                         g$build-global-define$9189$MT&Mo
                                                                                                         (g$map$5753$MT&Mo
                                                                                                           cdr
                                                                                                           g$global*$12595$MT&Mo))))))
                                                                                                 g$macro*$12593$MT&Mo
                                                                                                 g$global*$12592$MT&Mo
                                                                                                 g$export-env$12591$MT&Mo)))))))
                                                                                      (g$map$5753$MT&Mo
                                                                                        g$gen-global$9204$MT&Mo
                                                                                        g$lex*$12573$MT&Mo)
                                                                                      (g$make-export-subst$9737$MT&Mo
                                                                                        g$exp-name*$12582$MT&Mo
                                                                                        g$exp-id*$12581$MT&Mo)))))
                                                                                (g$chi-rhs*$9657$MT&Mo
                                                                                  g$rhs*$12572$MT&Mo
                                                                                  g$r$12575$MT&Mo
                                                                                  g$mr$12574$MT&Mo))))
                                                                            (g$chi-expr*$9647$MT&Mo
                                                                              g$init*$12576$MT&Mo
                                                                              g$r$12575$MT&Mo
                                                                              g$mr$12574$MT&Mo)))))
                                                                      g$exp-id*$12580$MT&Mo
                                                                      g$exp-name*$12579$MT&Mo))))))
                                                             g$internal-exp*$12570$MT&Mo
                                                             g$rhs*$12569$MT&Mo
                                                             g$lex*$12568$MT&Mo
                                                             g$mr$12567$MT&Mo
                                                             g$r$12566$MT&Mo
                                                             g$init*$12565$MT&Mo))))))
                                                    g$swap$12558$MT&Mo)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$12605$MT&Mo)
                                                        (begin
                                                          (g$inv-collector$12554$MT&Mo
                                                            g$inv-collector$12556$MT&Mo)
                                                          (set! g$inv-collector$12556$MT&Mo
                                                            g$t$12605$MT&Mo))))
                                                     (g$inv-collector$12554$MT&Mo))
                                                    ((case-lambda
                                                       ((g$t$12606$MT&Mo)
                                                        (begin
                                                          (g$vis-collector$12555$MT&Mo
                                                            g$vis-collector$12557$MT&Mo)
                                                          (set! g$vis-collector$12557$MT&Mo
                                                            g$t$12606$MT&Mo))))
                                                     (g$vis-collector$12555$MT&Mo))))))))
                                           g$inv-collector$9685$MT&Mo
                                           g$vis-collector$9686$MT&Mo
                                           g$rtc$12548$MT&Mo
                                           g$vtc$12549$MT&Mo)))
                                       (g$map$5753$MT&Mo
                                         g$wrap$12545$MT&Mo
                                         g$b*$12526$MT&Mo)
                                       (g$map$5753$MT&Mo
                                         g$wrap$12545$MT&Mo
                                         g$main-exp*$12524$MT&Mo)
                                       (g$make-collector$9684$MT&Mo)
                                       (g$make-collector$9684$MT&Mo)))))
                                 (g$make-top-rib$9683$MT&Mo
                                   g$subst-names$12543$MT&Mo
                                   g$subst-labels$12542$MT&Mo))))
                             g$subst-labels$12541$MT&Mo
                             g$subst-names$12540$MT&Mo))))))
                    g$swap$12537$MT&Mo)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$12608$MT&Mo)
                        (begin
                          (g$imp-collector$12533$MT&Mo
                            g$imp-collector$12535$MT&Mo)
                          (set! g$imp-collector$12535$MT&Mo
                            g$t$12608$MT&Mo))))
                     (g$imp-collector$12533$MT&Mo))
                    ((case-lambda
                       ((g$t$12609$MT&Mo)
                        (begin
                          (g$top-level-context$12534$MT&Mo
                            g$top-level-context$12536$MT&Mo)
                          (set! g$top-level-context$12536$MT&Mo
                            g$t$12609$MT&Mo))))
                     (g$top-level-context$12534$MT&Mo))))))))
           g$imp-collector$9687$MT&Mo
           g$top-level-context$9757$MT&Mo
           g$itc$12528$MT&Mo
           '#f)))))
   (g$core-library-expander$9691$MT&Mo
     g$core-library-expander$13230$MT&Mo
     (case-lambda
       ((g$e$12610$MT&Mo g$verify-name$12611$MT&Mo)
        (call-with-values
          (case-lambda
            (() (g$parse-library$9681$MT&Mo g$e$12610$MT&Mo)))
          (case-lambda
            ((g$name*$12616$MT&Mo
               g$exp*$12617$MT&Mo
               g$imp*$12618$MT&Mo
               g$b*$12619$MT&Mo)
             ((case-lambda
                ((g$b*$12620$MT&Mo
                   g$imp*$12621$MT&Mo
                   g$exp*$12622$MT&Mo
                   g$name*$12623$MT&Mo)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$9680$MT&Mo
                        g$name*$12623$MT&Mo)))
                   (case-lambda
                     ((g$name$12626$MT&Mo g$ver$12627$MT&Mo)
                      ((case-lambda
                         ((g$ver$12628$MT&Mo g$name$12629$MT&Mo)
                          (begin
                            (g$verify-name$12611$MT&Mo
                              g$name$12629$MT&Mo)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$9690$MT&Mo
                                   g$name$12629$MT&Mo
                                   g$exp*$12622$MT&Mo
                                   g$imp*$12621$MT&Mo
                                   g$b*$12620$MT&Mo
                                   '#f)))
                              (case-lambda
                                ((g$imp*$12637$MT&Mo
                                   g$invoke-req*$12638$MT&Mo
                                   g$visit-req*$12639$MT&Mo
                                   g$invoke-code$12640$MT&Mo
                                   g$visit-code$12641$MT&Mo
                                   g$export-subst$12642$MT&Mo
                                   g$export-env$12643$MT&Mo)
                                 ((case-lambda
                                    ((g$export-env$12644$MT&Mo
                                       g$export-subst$12645$MT&Mo
                                       g$visit-code$12646$MT&Mo
                                       g$invoke-code$12647$MT&Mo
                                       g$visit-req*$12648$MT&Mo
                                       g$invoke-req*$12649$MT&Mo
                                       g$imp*$12650$MT&Mo)
                                     (values
                                       g$name$12629$MT&Mo
                                       g$ver$12628$MT&Mo
                                       g$imp*$12650$MT&Mo
                                       g$invoke-req*$12649$MT&Mo
                                       g$visit-req*$12648$MT&Mo
                                       g$invoke-code$12647$MT&Mo
                                       g$visit-code$12646$MT&Mo
                                       g$export-subst$12645$MT&Mo
                                       g$export-env$12644$MT&Mo)))
                                  g$export-env$12643$MT&Mo
                                  g$export-subst$12642$MT&Mo
                                  g$visit-code$12641$MT&Mo
                                  g$invoke-code$12640$MT&Mo
                                  g$visit-req*$12639$MT&Mo
                                  g$invoke-req*$12638$MT&Mo
                                  g$imp*$12637$MT&Mo)))))))
                       g$ver$12627$MT&Mo
                       g$name$12626$MT&Mo))))))
              g$b*$12619$MT&Mo
              g$imp*$12618$MT&Mo
              g$exp*$12617$MT&Mo
              g$name*$12616$MT&Mo)))))))
   (g$parse-top-level-program$9692$MT&Mo
     g$parse-top-level-program$13231$MT&Mo
     (case-lambda
       ((g$e*$12651$MT&Mo)
        ((case-lambda
           ((g$t$12652$MT&Mo)
            ((case-lambda
               ((g$ls/false$12653$MT&Mo)
                (if (if g$ls/false$12653$MT&Mo
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$12654$MT&Mo
                               g$imp*$12655$MT&Mo
                               g$b*$12656$MT&Mo)
                             (eq? (g$syntax->datum$9752$MT&Mo
                                    g$import$12654$MT&Mo)
                                  'import)))
                          g$ls/false$12653$MT&Mo))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$12657$MT&Mo
                         g$imp*$12658$MT&Mo
                         g$b*$12659$MT&Mo)
                       (values g$imp*$12658$MT&Mo g$b*$12659$MT&Mo)))
                    g$ls/false$12653$MT&Mo)
                  ((case-lambda
                     ((g$t$12660$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$12661$MT&Mo)
                          (if (if g$ls/false$12661$MT&Mo
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$12662$MT&Mo
                                         g$x$12663$MT&Mo
                                         g$y$12664$MT&Mo)
                                       (eq? (g$syntax->datum$9752$MT&Mo
                                              g$import$12662$MT&Mo)
                                            'import)))
                                    g$ls/false$12661$MT&Mo))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$12665$MT&Mo
                                   g$x$12666$MT&Mo
                                   g$y$12667$MT&Mo)
                                 (g$syntax-violation$9749$MT&Mo
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$9265$MT&Mo
                                     g$e*$12651$MT&Mo))))
                              g$ls/false$12661$MT&Mo)
                            ((case-lambda
                               ((g$t$12668$MT&Mo)
                                ((case-lambda
                                   ((g$ls/false$12669$MT&Mo)
                                    (if g$ls/false$12669$MT&Mo
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$12669$MT&Mo)
                                      (g$syntax-violation$9749$MT&Mo
                                        '#f
                                        '"invalid syntax"
                                        g$t$12668$MT&Mo))))
                                 (g$syntax-dispatch$9631$MT&Mo
                                   g$t$12668$MT&Mo
                                   '_))))
                             g$t$12660$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$12660$MT&Mo
                         '((any . any) . any)))))
                   g$t$12652$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo
               g$t$12652$MT&Mo
               '((any . each-any) . each-any)))))
         g$e*$12651$MT&Mo))))
   (g$top-level-expander$9693$MT&Mo
     g$top-level-expander$13232$MT&Mo
     (case-lambda
       ((g$e*$12670$MT&Mo)
        (call-with-values
          (case-lambda
            (()
             (g$parse-top-level-program$9692$MT&Mo g$e*$12670$MT&Mo)))
          (case-lambda
            ((g$imp*$12673$MT&Mo g$b*$12674$MT&Mo)
             ((case-lambda
                ((g$b*$12675$MT&Mo g$imp*$12676$MT&Mo)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$9690$MT&Mo
                        '()
                        '()
                        g$imp*$12676$MT&Mo
                        g$b*$12675$MT&Mo
                        '#t)))
                   (case-lambda
                     ((g$imp*$12684$MT&Mo
                        g$invoke-req*$12685$MT&Mo
                        g$visit-req*$12686$MT&Mo
                        g$invoke-code$12687$MT&Mo
                        g$visit-code$12688$MT&Mo
                        g$export-subst$12689$MT&Mo
                        g$export-env$12690$MT&Mo)
                      ((case-lambda
                         ((g$export-env$12691$MT&Mo
                            g$export-subst$12692$MT&Mo
                            g$visit-code$12693$MT&Mo
                            g$invoke-code$12694$MT&Mo
                            g$visit-req*$12695$MT&Mo
                            g$invoke-req*$12696$MT&Mo
                            g$imp*$12697$MT&Mo)
                          (values
                            g$invoke-req*$12696$MT&Mo
                            g$invoke-code$12694$MT&Mo)))
                       g$export-env$12690$MT&Mo
                       g$export-subst$12689$MT&Mo
                       g$visit-code$12688$MT&Mo
                       g$invoke-code$12687$MT&Mo
                       g$visit-req*$12686$MT&Mo
                       g$invoke-req*$12685$MT&Mo
                       g$imp*$12684$MT&Mo))))))
              g$b*$12674$MT&Mo
              g$imp*$12673$MT&Mo)))))))
   (g$7975$9694$MT&Mo
     g$7975$13233$MT&Mo
     (make-record-type-descriptor
       'env
       '#f
       'g$7978$MT&Mo
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$7977$9695$MT&Mo g$7977$13234$MT&Mo '#f)
   (g$7976$9696$MT&Mo
     g$7976$13235$MT&Mo
     (make-record-constructor-descriptor
       g$7975$9694$MT&Mo
       '#f
       g$7977$9695$MT&Mo))
   (g$env?$9699$MT&Mo
     g$env?$13236$MT&Mo
     (record-predicate g$7975$9694$MT&Mo))
   (g$make-env$9700$MT&Mo
     g$make-env$13237$MT&Mo
     (record-constructor g$7976$9696$MT&Mo))
   (g$env-names$9701$MT&Mo
     g$env-names$13238$MT&Mo
     (record-accessor g$7975$9694$MT&Mo '0))
   (g$env-labels$9702$MT&Mo
     g$env-labels$13239$MT&Mo
     (record-accessor g$7975$9694$MT&Mo '1))
   (g$env-itc$9703$MT&Mo
     g$env-itc$13240$MT&Mo
     (record-accessor g$7975$9694$MT&Mo '2))
   (g$set-env-names!$9704$MT&Mo
     g$set-env-names!$13241$MT&Mo
     (record-mutator g$7975$9694$MT&Mo '0))
   (g$set-env-labels!$9705$MT&Mo
     g$set-env-labels!$13242$MT&Mo
     (record-mutator g$7975$9694$MT&Mo '1))
   (g$set-env-itc!$9706$MT&Mo
     g$set-env-itc!$13243$MT&Mo
     (record-mutator g$7975$9694$MT&Mo '2))
   (g$rp$9707$MT&Mo
     g$rp$13244$MT&Mo
     (make-record-printer
       'env
       (case-lambda
         ((g$x$12698$MT&Mo g$p$12699$MT&Mo g$wr$12700$MT&Mo)
          (display '"#<environment>" g$p$12699$MT&Mo)))))
   (g$7992$9708$MT&Mo
     g$7992$13245$MT&Mo
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$7995$MT&Mo
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$7994$9709$MT&Mo g$7994$13246$MT&Mo '#f)
   (g$7993$9710$MT&Mo
     g$7993$13247$MT&Mo
     (make-record-constructor-descriptor
       g$7992$9708$MT&Mo
       '#f
       g$7994$9709$MT&Mo))
   (g$interaction-env?$9713$MT&Mo
     g$interaction-env?$13248$MT&Mo
     (record-predicate g$7992$9708$MT&Mo))
   (g$make-interaction-env$9714$MT&Mo
     g$make-interaction-env$13249$MT&Mo
     (record-constructor g$7993$9710$MT&Mo))
   (g$interaction-env-rib$9715$MT&Mo
     g$interaction-env-rib$13250$MT&Mo
     (record-accessor g$7992$9708$MT&Mo '0))
   (g$interaction-env-r$9716$MT&Mo
     g$interaction-env-r$13251$MT&Mo
     (record-accessor g$7992$9708$MT&Mo '1))
   (g$interaction-env-locs$9717$MT&Mo
     g$interaction-env-locs$13252$MT&Mo
     (record-accessor g$7992$9708$MT&Mo '2))
   (g$set-interaction-env-rib!$9718$MT&Mo
     g$set-interaction-env-rib!$13253$MT&Mo
     (record-mutator g$7992$9708$MT&Mo '0))
   (g$set-interaction-env-r!$9719$MT&Mo
     g$set-interaction-env-r!$13254$MT&Mo
     (record-mutator g$7992$9708$MT&Mo '1))
   (g$set-interaction-env-locs!$9720$MT&Mo
     g$set-interaction-env-locs!$13255$MT&Mo
     (record-mutator g$7992$9708$MT&Mo '2))
   (g$rp$9721$MT&Mo
     g$rp$13256$MT&Mo
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$12701$MT&Mo g$p$12702$MT&Mo g$wr$12703$MT&Mo)
          (display '"#<environment>" g$p$12702$MT&Mo)))))
   (g$interaction-environment-symbols$9722$MT&Mo
     g$interaction-environment-symbols$13257$MT&Mo
     (case-lambda
       (()
        (g$environment-symbols$9726$MT&Mo
          (g$interaction-environment$9756$MT&Mo)))))
   (g$environment-bindings$9723$MT&Mo
     g$environment-bindings$13258$MT&Mo
     (case-lambda
       ((g$e$12704$MT&Mo)
        (vector->list
          (g$vector-map$6462$MT&Mo
            (case-lambda
              ((g$name$12705$MT&Mo g$label$12706$MT&Mo)
               (g$parse-binding$9724$MT&Mo
                 (cons
                   g$name$12705$MT&Mo
                   (g$imported-label->binding$9006$MT&Mo
                     g$label$12706$MT&Mo)))))
            (g$env-names$9701$MT&Mo g$e$12704$MT&Mo)
            (g$env-labels$9702$MT&Mo g$e$12704$MT&Mo))))))
   (g$parse-binding$9724$MT&Mo
     g$parse-binding$13259$MT&Mo
     (case-lambda
       ((g$b$12707$MT&Mo)
        (cons
          (car g$b$12707$MT&Mo)
          ((case-lambda
             ((g$t$12708$MT&Mo)
              (if (g$memv$5746$MT&Mo
                    g$t$12708$MT&Mo
                    '(core-prim global))
                'procedure
                (if (g$memv$5746$MT&Mo
                      g$t$12708$MT&Mo
                      '(core-macro macro global-macro))
                  'syntax
                  (if (eqv? g$t$12708$MT&Mo '$core-rtd)
                    'record
                    (if (eq? (car g$b$12707$MT&Mo)
                             (g$cadr$6411$MT&Mo g$b$12707$MT&Mo))
                      'syntax
                      'unknown))))))
           (g$cadr$6411$MT&Mo g$b$12707$MT&Mo))))))
   (g$environment?$9725$MT&Mo
     g$environment?$13260$MT&Mo
     (case-lambda
       ((g$x$12709$MT&Mo)
        ((case-lambda
           ((g$t$12710$MT&Mo)
            (if g$t$12710$MT&Mo
              g$t$12710$MT&Mo
              (begin
                '#f
                (g$interaction-env?$9713$MT&Mo g$x$12709$MT&Mo)))))
         (g$env?$9699$MT&Mo g$x$12709$MT&Mo)))))
   (g$environment-symbols$9726$MT&Mo
     g$environment-symbols$13261$MT&Mo
     (case-lambda
       ((g$x$12711$MT&Mo)
        (if (g$env?$9699$MT&Mo g$x$12711$MT&Mo)
          (vector->list (g$env-names$9701$MT&Mo g$x$12711$MT&Mo))
          (if (g$interaction-env?$9713$MT&Mo g$x$12711$MT&Mo)
            (g$map$5753$MT&Mo
              values
              (g$rib-sym*$9216$MT&Mo
                (g$interaction-env-rib$9715$MT&Mo g$x$12711$MT&Mo)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$12711$MT&Mo))))))
   (g$environment$9727$MT&Mo
     g$environment$13262$MT&Mo
     (case-lambda
       (g$imp*$12712$MT&Mo
        ((case-lambda
           ((g$itc$12713$MT&Mo)
            ((case-lambda
               ((g$imp-collector$12716$MT&Mo
                  g$imp-collector$12717$MT&Mo)
                ((case-lambda
                   ((g$swap$12718$MT&Mo)
                    (dynamic-wind
                      g$swap$12718$MT&Mo
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$9682$MT&Mo
                                g$imp*$12712$MT&Mo)))
                           (case-lambda
                             ((g$subst-names$12721$MT&Mo
                                g$subst-labels$12722$MT&Mo)
                              ((case-lambda
                                 ((g$subst-labels$12723$MT&Mo
                                    g$subst-names$12724$MT&Mo)
                                  (g$make-env$9700$MT&Mo
                                    g$subst-names$12724$MT&Mo
                                    g$subst-labels$12723$MT&Mo
                                    g$itc$12713$MT&Mo)))
                               g$subst-labels$12722$MT&Mo
                               g$subst-names$12721$MT&Mo))))))
                      g$swap$12718$MT&Mo)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$12725$MT&Mo)
                        (begin
                          (g$imp-collector$12716$MT&Mo
                            g$imp-collector$12717$MT&Mo)
                          (set! g$imp-collector$12717$MT&Mo
                            g$t$12725$MT&Mo))))
                     (g$imp-collector$12716$MT&Mo)))))))
             g$imp-collector$9687$MT&Mo
             g$itc$12713$MT&Mo)))
         (g$make-collector$9684$MT&Mo)))))
   (g$null-environment$9728$MT&Mo
     g$null-environment$13263$MT&Mo
     (case-lambda
       ((g$n$12726$MT&Mo)
        (begin
          (if (not (eqv? g$n$12726$MT&Mo '5))
            (assertion-violation
              'null-environment
              '"not 5"
              g$n$12726$MT&Mo)
            (void))
          (g$environment$9727$MT&Mo '(psyntax null-environment-5))))))
   (g$scheme-report-environment$9729$MT&Mo
     g$scheme-report-environment$13264$MT&Mo
     (case-lambda
       ((g$n$12727$MT&Mo)
        (begin
          (if (not (eqv? g$n$12727$MT&Mo '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$12727$MT&Mo)
            (void))
          (g$environment$9727$MT&Mo
            '(psyntax scheme-report-environment-5))))))
   (g$expand$9730$MT&Mo
     g$expand$13265$MT&Mo
     (case-lambda
       ((g$x$12728$MT&Mo g$env$12729$MT&Mo)
        (if (g$env?$9699$MT&Mo g$env$12729$MT&Mo)
          ((case-lambda
             ((g$rib$12730$MT&Mo)
              ((case-lambda
                 ((g$x$12731$MT&Mo
                    g$itc$12732$MT&Mo
                    g$rtc$12733$MT&Mo
                    g$vtc$12734$MT&Mo)
                  ((case-lambda
                     ((g$x$12735$MT&Mo)
                      (begin
                        (g$seal-rib!$9232$MT&Mo g$rib$12730$MT&Mo)
                        (values g$x$12735$MT&Mo (g$rtc$12733$MT&Mo)))))
                   ((case-lambda
                      ((g$top-level-context$12744$MT&Mo
                         g$inv-collector$12745$MT&Mo
                         g$vis-collector$12746$MT&Mo
                         g$imp-collector$12747$MT&Mo
                         g$top-level-context$12748$MT&Mo
                         g$inv-collector$12749$MT&Mo
                         g$vis-collector$12750$MT&Mo
                         g$imp-collector$12751$MT&Mo)
                       ((case-lambda
                          ((g$swap$12752$MT&Mo)
                           (dynamic-wind
                             g$swap$12752$MT&Mo
                             (case-lambda
                               (()
                                (g$chi-expr$9649$MT&Mo
                                  g$x$12731$MT&Mo
                                  '()
                                  '())))
                             g$swap$12752$MT&Mo)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$12753$MT&Mo)
                                 (begin
                                   (g$top-level-context$12744$MT&Mo
                                     g$top-level-context$12748$MT&Mo)
                                   (set! g$top-level-context$12748$MT&Mo
                                     g$t$12753$MT&Mo))))
                              (g$top-level-context$12744$MT&Mo))
                             ((case-lambda
                                ((g$t$12754$MT&Mo)
                                 (begin
                                   (g$inv-collector$12745$MT&Mo
                                     g$inv-collector$12749$MT&Mo)
                                   (set! g$inv-collector$12749$MT&Mo
                                     g$t$12754$MT&Mo))))
                              (g$inv-collector$12745$MT&Mo))
                             ((case-lambda
                                ((g$t$12755$MT&Mo)
                                 (begin
                                   (g$vis-collector$12746$MT&Mo
                                     g$vis-collector$12750$MT&Mo)
                                   (set! g$vis-collector$12750$MT&Mo
                                     g$t$12755$MT&Mo))))
                              (g$vis-collector$12746$MT&Mo))
                             ((case-lambda
                                ((g$t$12756$MT&Mo)
                                 (begin
                                   (g$imp-collector$12747$MT&Mo
                                     g$imp-collector$12751$MT&Mo)
                                   (set! g$imp-collector$12751$MT&Mo
                                     g$t$12756$MT&Mo))))
                              (g$imp-collector$12747$MT&Mo))))))))
                    g$top-level-context$9757$MT&Mo
                    g$inv-collector$9685$MT&Mo
                    g$vis-collector$9686$MT&Mo
                    g$imp-collector$9687$MT&Mo
                    '#f
                    g$rtc$12733$MT&Mo
                    g$vtc$12734$MT&Mo
                    g$itc$12732$MT&Mo))))
               (g$make-stx$9241$MT&Mo
                 g$x$12728$MT&Mo
                 g$top-mark*$9201$MT&Mo
                 (list g$rib$12730$MT&Mo)
                 '())
               (g$env-itc$9703$MT&Mo g$env$12729$MT&Mo)
               (g$make-collector$9684$MT&Mo)
               (g$make-collector$9684$MT&Mo))))
           (g$make-top-rib$9683$MT&Mo
             (g$env-names$9701$MT&Mo g$env$12729$MT&Mo)
             (g$env-labels$9702$MT&Mo g$env$12729$MT&Mo)))
          (if (g$interaction-env?$9713$MT&Mo g$env$12729$MT&Mo)
            ((case-lambda
               ((g$rib$12757$MT&Mo g$r$12758$MT&Mo g$rtc$12759$MT&Mo)
                ((case-lambda
                   ((g$x$12760$MT&Mo)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$12771$MT&Mo
                               g$inv-collector$12772$MT&Mo
                               g$vis-collector$12773$MT&Mo
                               g$imp-collector$12774$MT&Mo
                               g$top-level-context$12775$MT&Mo
                               g$inv-collector$12776$MT&Mo
                               g$vis-collector$12777$MT&Mo
                               g$imp-collector$12778$MT&Mo)
                             ((case-lambda
                                ((g$swap$12779$MT&Mo)
                                 (dynamic-wind
                                   g$swap$12779$MT&Mo
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$9689$MT&Mo
                                        g$x$12760$MT&Mo
                                        g$rib$12757$MT&Mo
                                        g$r$12758$MT&Mo)))
                                   g$swap$12779$MT&Mo)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$12780$MT&Mo)
                                       (begin
                                         (g$top-level-context$12771$MT&Mo
                                           g$top-level-context$12775$MT&Mo)
                                         (set! g$top-level-context$12775$MT&Mo
                                           g$t$12780$MT&Mo))))
                                    (g$top-level-context$12771$MT&Mo))
                                   ((case-lambda
                                      ((g$t$12781$MT&Mo)
                                       (begin
                                         (g$inv-collector$12772$MT&Mo
                                           g$inv-collector$12776$MT&Mo)
                                         (set! g$inv-collector$12776$MT&Mo
                                           g$t$12781$MT&Mo))))
                                    (g$inv-collector$12772$MT&Mo))
                                   ((case-lambda
                                      ((g$t$12782$MT&Mo)
                                       (begin
                                         (g$vis-collector$12773$MT&Mo
                                           g$vis-collector$12777$MT&Mo)
                                         (set! g$vis-collector$12777$MT&Mo
                                           g$t$12782$MT&Mo))))
                                    (g$vis-collector$12773$MT&Mo))
                                   ((case-lambda
                                      ((g$t$12783$MT&Mo)
                                       (begin
                                         (g$imp-collector$12774$MT&Mo
                                           g$imp-collector$12778$MT&Mo)
                                         (set! g$imp-collector$12778$MT&Mo
                                           g$t$12783$MT&Mo))))
                                    (g$imp-collector$12774$MT&Mo))))))))
                          g$top-level-context$9757$MT&Mo
                          g$inv-collector$9685$MT&Mo
                          g$vis-collector$9686$MT&Mo
                          g$imp-collector$9687$MT&Mo
                          g$env$12729$MT&Mo
                          g$rtc$12759$MT&Mo
                          (g$make-collector$9684$MT&Mo)
                          (g$make-collector$9684$MT&Mo))))
                      (case-lambda
                        ((g$e$12784$MT&Mo g$r^$12785$MT&Mo)
                         ((case-lambda
                            ((g$r^$12786$MT&Mo g$e$12787$MT&Mo)
                             (begin
                               (g$set-interaction-env-r!$9719$MT&Mo
                                 g$env$12729$MT&Mo
                                 g$r^$12786$MT&Mo)
                               (values
                                 g$e$12787$MT&Mo
                                 (g$rtc$12759$MT&Mo)))))
                          g$r^$12785$MT&Mo
                          g$e$12784$MT&Mo))))))
                 (g$make-stx$9241$MT&Mo
                   g$x$12728$MT&Mo
                   g$top-mark*$9201$MT&Mo
                   (list g$rib$12757$MT&Mo)
                   '()))))
             (g$interaction-env-rib$9715$MT&Mo g$env$12729$MT&Mo)
             (g$interaction-env-r$9716$MT&Mo g$env$12729$MT&Mo)
             (g$make-collector$9684$MT&Mo))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$12729$MT&Mo))))))
   (g$eval$9731$MT&Mo
     g$eval$13266$MT&Mo
     (case-lambda
       ((g$x$12788$MT&Mo g$env$12789$MT&Mo)
        (begin
          (if (not (g$environment?$9725$MT&Mo g$env$12789$MT&Mo))
            (error 'eval '"not an environment" g$env$12789$MT&Mo)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$9730$MT&Mo g$x$12788$MT&Mo g$env$12789$MT&Mo)))
            (case-lambda
              ((g$x$12792$MT&Mo g$invoke-req*$12793$MT&Mo)
               ((case-lambda
                  ((g$invoke-req*$12794$MT&Mo g$x$12795$MT&Mo)
                   (begin
                     (g$for-each$5754$MT&Mo
                       g$invoke-library$9007$MT&Mo
                       g$invoke-req*$12794$MT&Mo)
                     (eval-core
                       (g$expanded->core$8740$MT&Mo g$x$12795$MT&Mo)))))
                g$invoke-req*$12793$MT&Mo
                g$x$12792$MT&Mo))))))))
   (g$expand->core$9732$MT&Mo
     g$expand->core$13267$MT&Mo
     (case-lambda
       ((g$x$12796$MT&Mo g$env$12797$MT&Mo)
        (begin
          (if (not (g$environment?$9725$MT&Mo g$env$12797$MT&Mo))
            (error 'eval '"not an environment" g$env$12797$MT&Mo)
            (void))
          (call-with-values
            (case-lambda
              (()
               (g$expand$9730$MT&Mo g$x$12796$MT&Mo g$env$12797$MT&Mo)))
            (case-lambda
              ((g$x$12800$MT&Mo g$invoke-req*$12801$MT&Mo)
               ((case-lambda
                  ((g$invoke-req*$12802$MT&Mo g$x$12803$MT&Mo)
                   (begin
                     (g$for-each$5754$MT&Mo
                       g$invoke-library$9007$MT&Mo
                       g$invoke-req*$12802$MT&Mo)
                     (g$expanded->core$8740$MT&Mo g$x$12803$MT&Mo))))
                g$invoke-req*$12801$MT&Mo
                g$x$12800$MT&Mo))))))))
   (g$library-expander$9733$MT&Mo
     g$library-expander$13268$MT&Mo
     (case-lambda
       ((g$x$12804$MT&Mo
          g$filename$12805$MT&Mo
          g$verify-name$12806$MT&Mo)
        (letrec* ((g$build-visit-code$12807$MT&Mo
                    (case-lambda
                      ((g$macro*$12850$MT&Mo)
                       (if (null? g$macro*$12850$MT&Mo)
                         (g$build-void$9194$MT&Mo)
                         (g$build-sequence$9193$MT&Mo
                           '#f
                           (g$map$5753$MT&Mo
                             (case-lambda
                               ((g$x$12851$MT&Mo)
                                ((case-lambda
                                   ((g$loc$12852$MT&Mo
                                      g$src$12853$MT&Mo)
                                    (list
                                      'set!
                                      g$loc$12852$MT&Mo
                                      g$src$12853$MT&Mo)))
                                 (car g$x$12851$MT&Mo)
                                 (g$cddr$6413$MT&Mo g$x$12851$MT&Mo))))
                             g$macro*$12850$MT&Mo))))))
                  (g$visit!$12808$MT&Mo
                    (case-lambda
                      ((g$macro*$12846$MT&Mo)
                       (g$for-each$5754$MT&Mo
                         (case-lambda
                           ((g$x$12847$MT&Mo)
                            ((case-lambda
                               ((g$loc$12848$MT&Mo g$proc$12849$MT&Mo)
                                (set-symbol-value!
                                  g$loc$12848$MT&Mo
                                  g$proc$12849$MT&Mo)))
                             (car g$x$12847$MT&Mo)
                             (g$cadr$6411$MT&Mo g$x$12847$MT&Mo))))
                         g$macro*$12846$MT&Mo)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$9691$MT&Mo
                 g$x$12804$MT&Mo
                 g$verify-name$12806$MT&Mo)))
            (case-lambda
              ((g$name$12818$MT&Mo
                 g$ver$12819$MT&Mo
                 g$imp*$12820$MT&Mo
                 g$inv*$12821$MT&Mo
                 g$vis*$12822$MT&Mo
                 g$invoke-code$12823$MT&Mo
                 g$macro*$12824$MT&Mo
                 g$export-subst$12825$MT&Mo
                 g$export-env$12826$MT&Mo)
               ((case-lambda
                  ((g$export-env$12827$MT&Mo
                     g$export-subst$12828$MT&Mo
                     g$macro*$12829$MT&Mo
                     g$invoke-code$12830$MT&Mo
                     g$vis*$12831$MT&Mo
                     g$inv*$12832$MT&Mo
                     g$imp*$12833$MT&Mo
                     g$ver$12834$MT&Mo
                     g$name$12835$MT&Mo)
                   ((case-lambda
                      ((g$id$12836$MT&Mo
                         g$name$12837$MT&Mo
                         g$ver$12838$MT&Mo
                         g$imp*$12839$MT&Mo
                         g$vis*$12840$MT&Mo
                         g$inv*$12841$MT&Mo
                         g$visit-proc$12842$MT&Mo
                         g$invoke-proc$12843$MT&Mo
                         g$visit-code$12844$MT&Mo
                         g$invoke-code$12845$MT&Mo)
                       (begin
                         (g$install-library$9005$MT&Mo
                           g$id$12836$MT&Mo
                           g$name$12837$MT&Mo
                           g$ver$12838$MT&Mo
                           g$imp*$12839$MT&Mo
                           g$vis*$12840$MT&Mo
                           g$inv*$12841$MT&Mo
                           g$export-subst$12828$MT&Mo
                           g$export-env$12827$MT&Mo
                           g$visit-proc$12842$MT&Mo
                           g$invoke-proc$12843$MT&Mo
                           g$visit-code$12844$MT&Mo
                           g$invoke-code$12845$MT&Mo
                           '#t
                           g$filename$12805$MT&Mo)
                         (values
                           g$id$12836$MT&Mo
                           g$name$12837$MT&Mo
                           g$ver$12838$MT&Mo
                           g$imp*$12839$MT&Mo
                           g$vis*$12840$MT&Mo
                           g$inv*$12841$MT&Mo
                           g$invoke-code$12845$MT&Mo
                           g$visit-code$12844$MT&Mo
                           g$export-subst$12828$MT&Mo
                           g$export-env$12827$MT&Mo))))
                    (gensym)
                    g$name$12835$MT&Mo
                    g$ver$12834$MT&Mo
                    (g$map$5753$MT&Mo
                      g$library-spec$9011$MT&Mo
                      g$imp*$12833$MT&Mo)
                    (g$map$5753$MT&Mo
                      g$library-spec$9011$MT&Mo
                      g$vis*$12831$MT&Mo)
                    (g$map$5753$MT&Mo
                      g$library-spec$9011$MT&Mo
                      g$inv*$12832$MT&Mo)
                    (case-lambda
                      (() (g$visit!$12808$MT&Mo g$macro*$12829$MT&Mo)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$8740$MT&Mo
                           g$invoke-code$12830$MT&Mo))))
                    (g$build-visit-code$12807$MT&Mo
                      g$macro*$12829$MT&Mo)
                    g$invoke-code$12830$MT&Mo)))
                g$export-env$12826$MT&Mo
                g$export-subst$12825$MT&Mo
                g$macro*$12824$MT&Mo
                g$invoke-code$12823$MT&Mo
                g$vis*$12822$MT&Mo
                g$inv*$12821$MT&Mo
                g$imp*$12820$MT&Mo
                g$ver$12819$MT&Mo
                g$name$12818$MT&Mo))))))
       ((g$x$12854$MT&Mo g$filename$12855$MT&Mo)
        (g$library-expander$9733$MT&Mo
          g$x$12854$MT&Mo
          g$filename$12855$MT&Mo
          (case-lambda ((g$x$12856$MT&Mo) (values)))))
       ((g$x$12857$MT&Mo)
        (g$library-expander$9733$MT&Mo
          g$x$12857$MT&Mo
          '#f
          (case-lambda ((g$x$12858$MT&Mo) (values)))))))
   (g$boot-library-expand$9734$MT&Mo
     g$boot-library-expand$13269$MT&Mo
     (case-lambda
       ((g$x$12859$MT&Mo)
        (call-with-values
          (case-lambda
            (() (g$library-expander$9733$MT&Mo g$x$12859$MT&Mo)))
          (case-lambda
            ((g$id$12870$MT&Mo
               g$name$12871$MT&Mo
               g$ver$12872$MT&Mo
               g$imp*$12873$MT&Mo
               g$vis*$12874$MT&Mo
               g$inv*$12875$MT&Mo
               g$invoke-code$12876$MT&Mo
               g$visit-code$12877$MT&Mo
               g$export-subst$12878$MT&Mo
               g$export-env$12879$MT&Mo)
             ((case-lambda
                ((g$export-env$12880$MT&Mo
                   g$export-subst$12881$MT&Mo
                   g$visit-code$12882$MT&Mo
                   g$invoke-code$12883$MT&Mo
                   g$inv*$12884$MT&Mo
                   g$vis*$12885$MT&Mo
                   g$imp*$12886$MT&Mo
                   g$ver$12887$MT&Mo
                   g$name$12888$MT&Mo
                   g$id$12889$MT&Mo)
                 (values
                   g$name$12888$MT&Mo
                   g$invoke-code$12883$MT&Mo
                   g$export-subst$12881$MT&Mo
                   g$export-env$12880$MT&Mo)))
              g$export-env$12879$MT&Mo
              g$export-subst$12878$MT&Mo
              g$visit-code$12877$MT&Mo
              g$invoke-code$12876$MT&Mo
              g$inv*$12875$MT&Mo
              g$vis*$12874$MT&Mo
              g$imp*$12873$MT&Mo
              g$ver$12872$MT&Mo
              g$name$12871$MT&Mo
              g$id$12870$MT&Mo)))))))
   (g$rev-map-append$9735$MT&Mo
     g$rev-map-append$13270$MT&Mo
     (case-lambda
       ((g$f$12890$MT&Mo g$ls$12891$MT&Mo g$ac$12892$MT&Mo)
        (if (null? g$ls$12891$MT&Mo)
          g$ac$12892$MT&Mo
          (g$rev-map-append$9735$MT&Mo
            g$f$12890$MT&Mo
            (cdr g$ls$12891$MT&Mo)
            (cons
              (g$f$12890$MT&Mo (car g$ls$12891$MT&Mo))
              g$ac$12892$MT&Mo))))))
   (g$build-exports$9736$MT&Mo
     g$build-exports$13271$MT&Mo
     (case-lambda
       ((g$lex*+loc*$12893$MT&Mo g$init*$12894$MT&Mo)
        (g$build-sequence$9193$MT&Mo
          '#f
          (cons
            (g$build-void$9194$MT&Mo)
            (g$rev-map-append$9735$MT&Mo
              (case-lambda
                ((g$x$12895$MT&Mo)
                 (list
                   'set!
                   (cdr g$x$12895$MT&Mo)
                   (car g$x$12895$MT&Mo))))
              g$lex*+loc*$12893$MT&Mo
              g$init*$12894$MT&Mo))))))
   (g$make-export-subst$9737$MT&Mo
     g$make-export-subst$13272$MT&Mo
     (case-lambda
       ((g$name*$12896$MT&Mo g$id*$12897$MT&Mo)
        (g$map$5753$MT&Mo
          (case-lambda
            ((g$name$12898$MT&Mo g$id$12899$MT&Mo)
             ((case-lambda
                ((g$label$12900$MT&Mo)
                 (begin
                   (if (not g$label$12900$MT&Mo)
                     (g$syntax-violation$9749$MT&Mo
                       '#f
                       '"cannot export unbound identifier"
                       g$id$12899$MT&Mo)
                     (void))
                   (cons g$name$12898$MT&Mo g$label$12900$MT&Mo))))
              (g$id->label$9281$MT&Mo g$id$12899$MT&Mo))))
          g$name*$12896$MT&Mo
          g$id*$12897$MT&Mo))))
   (g$make-export-env/macros$9738$MT&Mo
     g$make-export-env/macros$13273$MT&Mo
     (case-lambda
       ((g$lex*$12901$MT&Mo g$loc*$12902$MT&Mo g$r$12903$MT&Mo)
        (letrec* ((g$lookup$12904$MT&Mo
                    (case-lambda
                      ((g$x$12920$MT&Mo)
                       ((letrec ((g$f$12921$MT&Mo
                                   (case-lambda
                                     ((g$x$12922$MT&Mo
                                        g$lex*$12923$MT&Mo
                                        g$loc*$12924$MT&Mo)
                                      (if (pair? g$lex*$12923$MT&Mo)
                                        (if (eq? g$x$12922$MT&Mo
                                                 (car g$lex*$12923$MT&Mo))
                                          (car g$loc*$12924$MT&Mo)
                                          (g$f$12921$MT&Mo
                                            g$x$12922$MT&Mo
                                            (cdr g$lex*$12923$MT&Mo)
                                            (cdr g$loc*$12924$MT&Mo)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$12921$MT&Mo)
                        g$x$12920$MT&Mo
                        g$lex*$12901$MT&Mo
                        g$loc*$12902$MT&Mo)))))
          ((letrec ((g$f$12905$MT&Mo
                      (case-lambda
                        ((g$r$12906$MT&Mo
                           g$env$12907$MT&Mo
                           g$global*$12908$MT&Mo
                           g$macro*$12909$MT&Mo)
                         (if (null? g$r$12906$MT&Mo)
                           (values
                             g$env$12907$MT&Mo
                             g$global*$12908$MT&Mo
                             g$macro*$12909$MT&Mo)
                           ((case-lambda
                              ((g$x$12910$MT&Mo)
                               ((case-lambda
                                  ((g$label$12911$MT&Mo g$b$12912$MT&Mo)
                                   ((case-lambda
                                      ((g$t$12913$MT&Mo)
                                       (if (eqv?
                                             g$t$12913$MT&Mo
                                             'lexical)
                                         ((case-lambda
                                            ((g$v$12914$MT&Mo)
                                             ((case-lambda
                                                ((g$loc$12915$MT&Mo
                                                   g$type$12916$MT&Mo)
                                                 (g$f$12905$MT&Mo
                                                   (cdr g$r$12906$MT&Mo)
                                                   (cons
                                                     (g$cons*$5755$MT&Mo
                                                       g$label$12911$MT&Mo
                                                       g$type$12916$MT&Mo
                                                       g$loc$12915$MT&Mo)
                                                     g$env$12907$MT&Mo)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$9575$MT&Mo
                                                         g$v$12914$MT&Mo)
                                                       g$loc$12915$MT&Mo)
                                                     g$global*$12908$MT&Mo)
                                                   g$macro*$12909$MT&Mo)))
                                              (g$lookup$12904$MT&Mo
                                                (g$lexical-var$9575$MT&Mo
                                                  g$v$12914$MT&Mo))
                                              (if (g$lexical-mutable?$9576$MT&Mo
                                                    g$v$12914$MT&Mo)
                                                'mutable
                                                'global))))
                                          (g$binding-value$9286$MT&Mo
                                            g$b$12912$MT&Mo))
                                         (if (eqv?
                                               g$t$12913$MT&Mo
                                               'local-macro)
                                           ((case-lambda
                                              ((g$loc$12917$MT&Mo)
                                               (g$f$12905$MT&Mo
                                                 (cdr g$r$12906$MT&Mo)
                                                 (cons
                                                   (g$cons*$5755$MT&Mo
                                                     g$label$12911$MT&Mo
                                                     'global-macro
                                                     g$loc$12917$MT&Mo)
                                                   g$env$12907$MT&Mo)
                                                 g$global*$12908$MT&Mo
                                                 (cons
                                                   (cons
                                                     g$loc$12917$MT&Mo
                                                     (g$binding-value$9286$MT&Mo
                                                       g$b$12912$MT&Mo))
                                                   g$macro*$12909$MT&Mo))))
                                            (gensym))
                                           (if (eqv?
                                                 g$t$12913$MT&Mo
                                                 'local-macro!)
                                             ((case-lambda
                                                ((g$loc$12918$MT&Mo)
                                                 (g$f$12905$MT&Mo
                                                   (cdr g$r$12906$MT&Mo)
                                                   (cons
                                                     (g$cons*$5755$MT&Mo
                                                       g$label$12911$MT&Mo
                                                       'global-macro!
                                                       g$loc$12918$MT&Mo)
                                                     g$env$12907$MT&Mo)
                                                   g$global*$12908$MT&Mo
                                                   (cons
                                                     (cons
                                                       g$loc$12918$MT&Mo
                                                       (g$binding-value$9286$MT&Mo
                                                         g$b$12912$MT&Mo))
                                                     g$macro*$12909$MT&Mo))))
                                              (gensym))
                                             (if (eqv?
                                                   g$t$12913$MT&Mo
                                                   'local-ctv)
                                               ((case-lambda
                                                  ((g$loc$12919$MT&Mo)
                                                   (g$f$12905$MT&Mo
                                                     (cdr g$r$12906$MT&Mo)
                                                     (cons
                                                       (g$cons*$5755$MT&Mo
                                                         g$label$12911$MT&Mo
                                                         'global-ctv
                                                         g$loc$12919$MT&Mo)
                                                       g$env$12907$MT&Mo)
                                                     g$global*$12908$MT&Mo
                                                     (cons
                                                       (cons
                                                         g$loc$12919$MT&Mo
                                                         (g$binding-value$9286$MT&Mo
                                                           g$b$12912$MT&Mo))
                                                       g$macro*$12909$MT&Mo))))
                                                (gensym))
                                               (if (g$memv$5746$MT&Mo
                                                     g$t$12913$MT&Mo
                                                     '($rtd $module))
                                                 (g$f$12905$MT&Mo
                                                   (cdr g$r$12906$MT&Mo)
                                                   (cons
                                                     g$x$12910$MT&Mo
                                                     g$env$12907$MT&Mo)
                                                   g$global*$12908$MT&Mo
                                                   g$macro*$12909$MT&Mo)
                                                 (assertion-violation
                                                   'expander
                                                   '"BUG: do not know how to export"
                                                   (g$binding-type$9285$MT&Mo
                                                     g$b$12912$MT&Mo)
                                                   (g$binding-value$9286$MT&Mo
                                                     g$b$12912$MT&Mo)))))))))
                                    (g$binding-type$9285$MT&Mo
                                      g$b$12912$MT&Mo))))
                                (car g$x$12910$MT&Mo)
                                (cdr g$x$12910$MT&Mo))))
                            (car g$r$12906$MT&Mo)))))))
             g$f$12905$MT&Mo)
           g$r$12903$MT&Mo
           '()
           '()
           '())))))
   (g$generate-temporaries$9739$MT&Mo
     g$generate-temporaries$13274$MT&Mo
     (case-lambda
       ((g$ls$12925$MT&Mo)
        ((case-lambda
           ((g$t$12926$MT&Mo)
            ((case-lambda
               ((g$ls/false$12927$MT&Mo)
                (if g$ls/false$12927$MT&Mo
                  (apply
                    (case-lambda
                      ((g$ls$12928$MT&Mo)
                       (g$map$5753$MT&Mo
                         (case-lambda
                           ((g$x$12929$MT&Mo)
                            (g$make-stx$9241$MT&Mo
                              ((case-lambda
                                 ((g$x$12930$MT&Mo)
                                  (if ((case-lambda
                                         ((g$t$12931$MT&Mo)
                                          (if g$t$12931$MT&Mo
                                            g$t$12931$MT&Mo
                                            (begin
                                              '#f
                                              (string?
                                                g$x$12930$MT&Mo)))))
                                       (g$symbol?$6402$MT&Mo
                                         g$x$12930$MT&Mo))
                                    (gensym g$x$12930$MT&Mo)
                                    (gensym 't))))
                               (g$syntax->datum$9752$MT&Mo
                                 g$x$12929$MT&Mo))
                              g$top-mark*$9201$MT&Mo
                              '()
                              '())))
                         g$ls$12928$MT&Mo)))
                    g$ls/false$12927$MT&Mo)
                  ((case-lambda
                     ((g$t$12932$MT&Mo)
                      ((case-lambda
                         ((g$ls/false$12933$MT&Mo)
                          (if g$ls/false$12933$MT&Mo
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$12933$MT&Mo)
                            (g$syntax-violation$9749$MT&Mo
                              '#f
                              '"invalid syntax"
                              g$t$12932$MT&Mo))))
                       (g$syntax-dispatch$9631$MT&Mo
                         g$t$12932$MT&Mo
                         '_))))
                   g$t$12926$MT&Mo))))
             (g$syntax-dispatch$9631$MT&Mo g$t$12926$MT&Mo 'each-any))))
         g$ls$12925$MT&Mo))))
   (g$free-identifier=?$9740$MT&Mo
     g$free-identifier=?$13275$MT&Mo
     (case-lambda
       ((g$x$12934$MT&Mo g$y$12935$MT&Mo)
        (if (g$id?$9268$MT&Mo g$x$12934$MT&Mo)
          (if (g$id?$9268$MT&Mo g$y$12935$MT&Mo)
            (g$free-id=?$9272$MT&Mo g$x$12934$MT&Mo g$y$12935$MT&Mo)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$12935$MT&Mo))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$12934$MT&Mo)))))
   (g$bound-identifier=?$9741$MT&Mo
     g$bound-identifier=?$13276$MT&Mo
     (case-lambda
       ((g$x$12936$MT&Mo g$y$12937$MT&Mo)
        (if (g$id?$9268$MT&Mo g$x$12936$MT&Mo)
          (if (g$id?$9268$MT&Mo g$y$12937$MT&Mo)
            (g$bound-id=?$9271$MT&Mo g$x$12936$MT&Mo g$y$12937$MT&Mo)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$12937$MT&Mo))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$12936$MT&Mo)))))
   (g$make-source-condition$9742$MT&Mo
     g$make-source-condition$13277$MT&Mo
     (case-lambda
       ((g$x$12938$MT&Mo)
        (letrec* ((g$10927$12939$MT&Mo
                    (make-record-type-descriptor
                      '&source-information
                      g$&condition-rtd$7045$MT&Mo
                      'g$10930$MT&Mo
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$10929$12940$MT&Mo '#f)
                  (g$10928$12941$MT&Mo
                    (make-record-constructor-descriptor
                      g$10927$12939$MT&Mo
                      g$&condition-rcd$7046$MT&Mo
                      g$10929$12940$MT&Mo))
                  (g$10926$12944$MT&Mo
                    (record-predicate g$10927$12939$MT&Mo))
                  (g$make-source-condition$12945$MT&Mo
                    (record-constructor g$10928$12941$MT&Mo))
                  (g$10924$12946$MT&Mo
                    (record-accessor g$10927$12939$MT&Mo '0))
                  (g$10925$12947$MT&Mo
                    (record-accessor g$10927$12939$MT&Mo '1))
                  (g$source-condition?$12948$MT&Mo
                    (condition-predicate g$10927$12939$MT&Mo))
                  (g$source-filename$12949$MT&Mo
                    (condition-accessor
                      g$10927$12939$MT&Mo
                      g$10924$12946$MT&Mo))
                  (g$source-character$12950$MT&Mo
                    (condition-accessor
                      g$10927$12939$MT&Mo
                      g$10925$12947$MT&Mo)))
          (if (pair? g$x$12938$MT&Mo)
            (g$make-source-condition$12945$MT&Mo
              (car g$x$12938$MT&Mo)
              (cdr g$x$12938$MT&Mo))
            (condition))))))
   (g$extract-position-condition$9743$MT&Mo
     g$extract-position-condition$13278$MT&Mo
     (case-lambda
       ((g$x$12951$MT&Mo)
        (g$make-source-condition$9742$MT&Mo
          (g$expression-position$9744$MT&Mo g$x$12951$MT&Mo)))))
   (g$expression-position$9744$MT&Mo
     g$expression-position$13279$MT&Mo
     (case-lambda
       ((g$x$12952$MT&Mo)
        (if (g$stx?$9240$MT&Mo g$x$12952$MT&Mo)
          (begin
            '#f
            ((case-lambda
               ((g$x$12953$MT&Mo)
                (if (annotation? g$x$12953$MT&Mo)
                  (begin '#f (annotation-source g$x$12953$MT&Mo))
                  '#f)))
             (g$stx-expr$9242$MT&Mo g$x$12952$MT&Mo)))
          '#f))))
   (g$assertion-error$9745$MT&Mo
     g$assertion-error$13280$MT&Mo
     (case-lambda
       ((g$expr$12954$MT&Mo g$pos$12955$MT&Mo)
        (raise
          (condition
            (g$make-assertion-violation$7093$MT&Mo)
            (g$make-who-condition$7111$MT&Mo 'assert)
            (g$make-message-condition$7051$MT&Mo '"assertion failed")
            (g$make-irritants-condition$7101$MT&Mo
              (list g$expr$12954$MT&Mo))
            (g$make-source-condition$9742$MT&Mo g$pos$12955$MT&Mo))))))
   (g$syntax-error$9746$MT&Mo
     g$syntax-error$13281$MT&Mo
     (case-lambda
       ((g$x$12956$MT&Mo . g$args$12957$MT&Mo)
        (begin
          (if (not (g$for-all$5751$MT&Mo string? g$args$12957$MT&Mo))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$12957$MT&Mo)
            (void))
          (raise
            (condition
              (g$make-message-condition$7051$MT&Mo
                (if (null? g$args$12957$MT&Mo)
                  '"invalid syntax"
                  (apply string-append g$args$12957$MT&Mo)))
              (g$make-syntax-violation$7145$MT&Mo
                (g$syntax->datum$9752$MT&Mo g$x$12956$MT&Mo)
                '#f)
              (g$extract-position-condition$9743$MT&Mo g$x$12956$MT&Mo)
              (g$extract-trace$9747$MT&Mo g$x$12956$MT&Mo)))))))
   (g$extract-trace$9747$MT&Mo
     g$extract-trace$13282$MT&Mo
     (case-lambda
       ((g$x$12958$MT&Mo)
        (letrec* ((g$10952$12959$MT&Mo
                    (make-record-type-descriptor
                      '&trace
                      g$&condition-rtd$7045$MT&Mo
                      'g$10955$MT&Mo
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$10954$12960$MT&Mo '#f)
                  (g$10953$12961$MT&Mo
                    (make-record-constructor-descriptor
                      g$10952$12959$MT&Mo
                      g$&condition-rcd$7046$MT&Mo
                      g$10954$12960$MT&Mo))
                  (g$10951$12964$MT&Mo
                    (record-predicate g$10952$12959$MT&Mo))
                  (g$make-trace$12965$MT&Mo
                    (record-constructor g$10953$12961$MT&Mo))
                  (g$10950$12966$MT&Mo
                    (record-accessor g$10952$12959$MT&Mo '0))
                  (g$trace?$12967$MT&Mo
                    (condition-predicate g$10952$12959$MT&Mo))
                  (g$trace-form$12968$MT&Mo
                    (condition-accessor
                      g$10952$12959$MT&Mo
                      g$10950$12966$MT&Mo)))
          ((letrec ((g$f$12969$MT&Mo
                      (case-lambda
                        ((g$x$12970$MT&Mo)
                         (if (g$stx?$9240$MT&Mo g$x$12970$MT&Mo)
                           (apply
                             condition
                             (g$make-trace$12965$MT&Mo g$x$12970$MT&Mo)
                             (g$map$5753$MT&Mo
                               g$f$12969$MT&Mo
                               (g$stx-ae*$9245$MT&Mo g$x$12970$MT&Mo)))
                           (if (annotation? g$x$12970$MT&Mo)
                             (g$make-trace$12965$MT&Mo
                               (g$make-stx$9241$MT&Mo
                                 g$x$12970$MT&Mo
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$12969$MT&Mo)
           g$x$12958$MT&Mo)))))
   (g$syntax-violation*$9748$MT&Mo
     g$syntax-violation*$13283$MT&Mo
     (case-lambda
       ((g$who$12971$MT&Mo
          g$msg$12972$MT&Mo
          g$form$12973$MT&Mo
          g$condition-object$12974$MT&Mo)
        (begin
          (if (not (string? g$msg$12972$MT&Mo))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$12972$MT&Mo)
            (void))
          ((case-lambda
             ((g$who$12975$MT&Mo)
              (raise
                (condition
                  (if g$who$12975$MT&Mo
                    (g$make-who-condition$7111$MT&Mo g$who$12975$MT&Mo)
                    (condition))
                  (g$make-message-condition$7051$MT&Mo
                    g$msg$12972$MT&Mo)
                  g$condition-object$12974$MT&Mo
                  (g$extract-position-condition$9743$MT&Mo
                    g$form$12973$MT&Mo)
                  (g$extract-trace$9747$MT&Mo g$form$12973$MT&Mo)))))
           (if ((case-lambda
                  ((g$t$12976$MT&Mo)
                   (if g$t$12976$MT&Mo
                     g$t$12976$MT&Mo
                     (begin
                       '#f
                       (g$symbol?$6402$MT&Mo g$who$12971$MT&Mo)))))
                (string? g$who$12971$MT&Mo))
             g$who$12971$MT&Mo
             (if (not g$who$12971$MT&Mo)
               ((case-lambda
                  ((g$t$12977$MT&Mo)
                   ((case-lambda
                      ((g$ls/false$12978$MT&Mo)
                       (if (if g$ls/false$12978$MT&Mo
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$12979$MT&Mo)
                                    (g$id?$9268$MT&Mo
                                      g$id$12979$MT&Mo)))
                                 g$ls/false$12978$MT&Mo))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$12980$MT&Mo)
                              (g$syntax->datum$9752$MT&Mo
                                g$id$12980$MT&Mo)))
                           g$ls/false$12978$MT&Mo)
                         ((case-lambda
                            ((g$t$12981$MT&Mo)
                             ((case-lambda
                                ((g$ls/false$12982$MT&Mo)
                                 (if (if g$ls/false$12982$MT&Mo
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$12983$MT&Mo
                                                g$rest$12984$MT&Mo)
                                              (g$id?$9268$MT&Mo
                                                g$id$12983$MT&Mo)))
                                           g$ls/false$12982$MT&Mo))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$12985$MT&Mo
                                          g$rest$12986$MT&Mo)
                                        (g$syntax->datum$9752$MT&Mo
                                          g$id$12985$MT&Mo)))
                                     g$ls/false$12982$MT&Mo)
                                   ((case-lambda
                                      ((g$t$12987$MT&Mo)
                                       ((case-lambda
                                          ((g$ls/false$12988$MT&Mo)
                                           (if g$ls/false$12988$MT&Mo
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$12988$MT&Mo)
                                             (g$syntax-violation$9749$MT&Mo
                                               '#f
                                               '"invalid syntax"
                                               g$t$12987$MT&Mo))))
                                        (g$syntax-dispatch$9631$MT&Mo
                                          g$t$12987$MT&Mo
                                          '_))))
                                    g$t$12981$MT&Mo))))
                              (g$syntax-dispatch$9631$MT&Mo
                                g$t$12981$MT&Mo
                                '(any . any)))))
                          g$t$12977$MT&Mo))))
                    (g$syntax-dispatch$9631$MT&Mo
                      g$t$12977$MT&Mo
                      'any))))
                g$form$12973$MT&Mo)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$12971$MT&Mo))))))))
   (g$syntax-violation$9749$MT&Mo
     g$syntax-violation$13284$MT&Mo
     (case-lambda
       ((g$who$12989$MT&Mo g$msg$12990$MT&Mo g$form$12991$MT&Mo)
        (g$syntax-violation$9749$MT&Mo
          g$who$12989$MT&Mo
          g$msg$12990$MT&Mo
          g$form$12991$MT&Mo
          '#f))
       ((g$who$12992$MT&Mo
          g$msg$12993$MT&Mo
          g$form$12994$MT&Mo
          g$subform$12995$MT&Mo)
        (g$syntax-violation*$9748$MT&Mo
          g$who$12992$MT&Mo
          g$msg$12993$MT&Mo
          g$form$12994$MT&Mo
          (g$make-syntax-violation$7145$MT&Mo
            (g$syntax->datum$9752$MT&Mo g$form$12994$MT&Mo)
            (g$syntax->datum$9752$MT&Mo g$subform$12995$MT&Mo))))))
   (g$identifier?$9750$MT&Mo
     g$identifier?$13285$MT&Mo
     (case-lambda
       ((g$x$12996$MT&Mo) (g$id?$9268$MT&Mo g$x$12996$MT&Mo))))
   (g$datum->syntax$9751$MT&Mo
     g$datum->syntax$13286$MT&Mo
     (case-lambda
       ((g$id$12997$MT&Mo g$datum$12998$MT&Mo)
        (if (g$id?$9268$MT&Mo g$id$12997$MT&Mo)
          (g$datum->stx$9251$MT&Mo g$id$12997$MT&Mo g$datum$12998$MT&Mo)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$12997$MT&Mo)))))
   (g$syntax->datum$9752$MT&Mo
     g$syntax->datum$13287$MT&Mo
     (case-lambda
       ((g$x$12999$MT&Mo) (g$stx->datum$9279$MT&Mo g$x$12999$MT&Mo))))
   (g$compile-r6rs-top-level$9753$MT&Mo
     g$compile-r6rs-top-level$13288$MT&Mo
     (case-lambda
       ((g$x*$13000$MT&Mo)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$9693$MT&Mo g$x*$13000$MT&Mo)))
          (case-lambda
            ((g$lib*$13003$MT&Mo g$invoke-code$13004$MT&Mo)
             ((case-lambda
                ((g$invoke-code$13005$MT&Mo g$lib*$13006$MT&Mo)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5754$MT&Mo
                        g$invoke-library$9007$MT&Mo
                        g$lib*$13006$MT&Mo)
                      (eval-core
                        (g$expanded->core$8740$MT&Mo
                          g$invoke-code$13005$MT&Mo)))))))
              g$invoke-code$13004$MT&Mo
              g$lib*$13003$MT&Mo)))))))
   (g$pre-compile-r6rs-top-level$9754$MT&Mo
     g$pre-compile-r6rs-top-level$13289$MT&Mo
     (case-lambda
       ((g$x*$13007$MT&Mo)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$9693$MT&Mo g$x*$13007$MT&Mo)))
          (case-lambda
            ((g$lib*$13010$MT&Mo g$invoke-code$13011$MT&Mo)
             ((case-lambda
                ((g$invoke-code$13012$MT&Mo g$lib*$13013$MT&Mo)
                 (begin
                   (g$for-each$5754$MT&Mo
                     g$invoke-library$9007$MT&Mo
                     g$lib*$13013$MT&Mo)
                   (compile-core
                     (g$expanded->core$8740$MT&Mo
                       g$invoke-code$13012$MT&Mo)))))
              g$invoke-code$13011$MT&Mo
              g$lib*$13010$MT&Mo)))))))
   (g$new-interaction-environment$9755$MT&Mo
     g$new-interaction-environment$13290$MT&Mo
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$13014$MT&Mo g$rib$13015$MT&Mo)
            (begin
              ((case-lambda
                 ((g$subst$13016$MT&Mo)
                  (begin
                    (g$set-rib-sym*!$9221$MT&Mo
                      g$rib$13015$MT&Mo
                      (g$map$5753$MT&Mo car g$subst$13016$MT&Mo))
                    (g$set-rib-mark**!$9222$MT&Mo
                      g$rib$13015$MT&Mo
                      (g$map$5753$MT&Mo
                        (case-lambda
                          ((g$x$13017$MT&Mo) g$top-mark*$9201$MT&Mo))
                        g$subst$13016$MT&Mo))
                    (g$set-rib-label*!$9223$MT&Mo
                      g$rib$13015$MT&Mo
                      (g$map$5753$MT&Mo cdr g$subst$13016$MT&Mo)))))
               (g$library-subst$8964$MT&Mo g$lib$13014$MT&Mo))
              (g$make-interaction-env$9714$MT&Mo
                g$rib$13015$MT&Mo
                '()
                '()))))
         (g$find-library-by-name$9000$MT&Mo '(ironscheme))
         (g$make-empty-rib$9226$MT&Mo)))))
   (g$interaction-environment$9756$MT&Mo
     g$interaction-environment$13291$MT&Mo
     ((case-lambda
        ((g$e$13018$MT&Mo)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$13019$MT&Mo)
                (if g$t$13019$MT&Mo
                  g$t$13019$MT&Mo
                  (begin
                    '#f
                    (begin
                      (set! g$e$13018$MT&Mo
                        (g$new-interaction-environment$9755$MT&Mo))
                      g$e$13018$MT&Mo)))))
             g$e$13018$MT&Mo)))))
      '#f))
   (g$top-level-context$9757$MT&Mo
     g$top-level-context$13292$MT&Mo
     (g$make-parameter$8174$MT&Mo '#f)))
  (g$current-library-expander$8997$MT&Mo g$library-expander$9733$MT&Mo))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$8737$MT&Mo
      (case-lambda
        ((g$x$13373$MT&Mo)
         ((case-lambda
            ((g$t$13374$MT&Mo)
             (if g$t$13374$MT&Mo (cdr g$t$13374$MT&Mo) '#f)))
          (g$assq$5741$MT&Mo
            g$x$13373$MT&Mo
            '((ellipsis-map . g$ellipsis-map$13177$MT&Mo)
              (&no-nans-rcd . g$&no-nans-rcd$7280$MT&Mo)
              (&no-nans-rtd . g$&no-nans-rtd$7279$MT&Mo)
              (&no-infinities-rcd . g$&no-infinities-rcd$7272$MT&Mo)
              (&no-infinities-rtd . g$&no-infinities-rtd$7271$MT&Mo)
              (&i/o-encoding-rcd . g$&i/o-encoding-rcd$7264$MT&Mo)
              (&i/o-encoding-rtd . g$&i/o-encoding-rtd$7263$MT&Mo)
              (&i/o-decoding-rcd . g$&i/o-decoding-rcd$7254$MT&Mo)
              (&i/o-decoding-rtd . g$&i/o-decoding-rtd$7253$MT&Mo)
              (&i/o-port-rcd . g$&i/o-port-rcd$7246$MT&Mo)
              (&i/o-port-rtd . g$&i/o-port-rtd$7245$MT&Mo)
              (&i/o-file-does-not-exist-rcd
                .
                g$&i/o-file-does-not-exist-rcd$7236$MT&Mo)
              (&i/o-file-does-not-exist-rtd
                .
                g$&i/o-file-does-not-exist-rtd$7235$MT&Mo)
              (&i/o-file-already-exists-rcd
                .
                g$&i/o-file-already-exists-rcd$7228$MT&Mo)
              (&i/o-file-already-exists-rtd
                .
                g$&i/o-file-already-exists-rtd$7227$MT&Mo)
              (&i/o-file-is-read-only-rcd
                .
                g$&i/o-file-is-read-only-rcd$7220$MT&Mo)
              (&i/o-file-is-read-only-rtd
                .
                g$&i/o-file-is-read-only-rtd$7219$MT&Mo)
              (&i/o-file-protection-rcd
                .
                g$&i/o-file-protection-rcd$7212$MT&Mo)
              (&i/o-file-protection-rtd
                .
                g$&i/o-file-protection-rtd$7211$MT&Mo)
              (&i/o-filename-rcd . g$&i/o-filename-rcd$7204$MT&Mo)
              (&i/o-filename-rtd . g$&i/o-filename-rtd$7203$MT&Mo)
              (&i/o-invalid-position-rcd
                .
                g$&i/o-invalid-position-rcd$7194$MT&Mo)
              (&i/o-invalid-position-rtd
                .
                g$&i/o-invalid-position-rtd$7193$MT&Mo)
              (&i/o-write-rcd . g$&i/o-write-rcd$7184$MT&Mo)
              (&i/o-write-rtd . g$&i/o-write-rtd$7183$MT&Mo)
              (&i/o-read-rcd . g$&i/o-read-rcd$7176$MT&Mo)
              (&i/o-read-rtd . g$&i/o-read-rtd$7175$MT&Mo)
              (&i/o-rcd . g$&i/o-rcd$7168$MT&Mo)
              (&i/o-rtd . g$&i/o-rtd$7167$MT&Mo)
              (&undefined-rcd . g$&undefined-rcd$7160$MT&Mo)
              (&undefined-rtd . g$&undefined-rtd$7159$MT&Mo)
              (&syntax-rcd . g$&syntax-rcd$7152$MT&Mo)
              (&syntax-rtd . g$&syntax-rtd$7151$MT&Mo)
              (&lexical-rcd . g$&lexical-rcd$7140$MT&Mo)
              (&lexical-rtd . g$&lexical-rtd$7139$MT&Mo)
              (&implementation-restriction-rcd
                .
                g$&implementation-restriction-rcd$7132$MT&Mo)
              (&implementation-restriction-rtd
                .
                g$&implementation-restriction-rtd$7131$MT&Mo)
              (&non-continuable-rcd . g$&non-continuable-rcd$7124$MT&Mo)
              (&non-continuable-rtd . g$&non-continuable-rtd$7123$MT&Mo)
              (&who-rcd . g$&who-rcd$7116$MT&Mo)
              (&who-rtd . g$&who-rtd$7115$MT&Mo)
              (&irritants-rcd . g$&irritants-rcd$7106$MT&Mo)
              (&irritants-rtd . g$&irritants-rtd$7105$MT&Mo)
              (&assertion-rcd . g$&assertion-rcd$7096$MT&Mo)
              (&assertion-rtd . g$&assertion-rtd$7095$MT&Mo)
              (&violation-rcd . g$&violation-rcd$7088$MT&Mo)
              (&violation-rtd . g$&violation-rtd$7087$MT&Mo)
              (&error-rcd . g$&error-rcd$7080$MT&Mo)
              (&error-rtd . g$&error-rtd$7079$MT&Mo)
              (&serious-rcd . g$&serious-rcd$7072$MT&Mo)
              (&serious-rtd . g$&serious-rtd$7071$MT&Mo)
              (&warning-rcd . g$&warning-rcd$7064$MT&Mo)
              (&warning-rtd . g$&warning-rtd$7063$MT&Mo)
              (&message-rcd . g$&message-rcd$7056$MT&Mo)
              (&message-rtd . g$&message-rtd$7055$MT&Mo)
              (&condition-rcd . g$&condition-rcd$7046$MT&Mo)
              (&condition-rtd . g$&condition-rtd$7045$MT&Mo)
              (make-list . g$make-list$5736$MT&Mo)
              (last-pair . g$last-pair$5735$MT&Mo)
              (ironscheme-build . g$ironscheme-build$13364$MT&Mo)
              (syntax-error . g$syntax-error$13281$MT&Mo)
              (syntax-dispatch . g$syntax-dispatch$13172$MT&Mo)
              (compile-system-libraries
                .
                g$compile-system-libraries$13368$MT&Mo)
              (compile->closure . g$compile->closure$13370$MT&Mo)
              (compile . g$compile$13369$MT&Mo)
              (load . g$load$13363$MT&Mo)
              (interaction-environment
                .
                g$interaction-environment$13291$MT&Mo)
              (string-normalize-nfkd
                .
                g$string-normalize-nfkd$7496$MT&Mo)
              (string-normalize-nfkc
                .
                g$string-normalize-nfkc$7495$MT&Mo)
              (string-normalize-nfd . g$string-normalize-nfd$7494$MT&Mo)
              (string-normalize-nfc . g$string-normalize-nfc$7493$MT&Mo)
              (string-ci>? . g$string-ci>?$7485$MT&Mo)
              (string-ci>=? . g$string-ci>=?$7487$MT&Mo)
              (string-ci=? . g$string-ci=?$7483$MT&Mo)
              (string-ci<? . g$string-ci<?$7484$MT&Mo)
              (string-ci<=? . g$string-ci<=?$7486$MT&Mo)
              (char-ci>? . g$char-ci>?$7490$MT&Mo)
              (char-ci>=? . g$char-ci>=?$7492$MT&Mo)
              (char-ci=? . g$char-ci=?$7488$MT&Mo)
              (char-ci<? . g$char-ci<?$7489$MT&Mo)
              (char-ci<=? . g$char-ci<=?$7491$MT&Mo)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$13110$MT&Mo)
              (variable-transformer?
                .
                g$variable-transformer?$13109$MT&Mo)
              (make-variable-transformer
                .
                g$make-variable-transformer$13107$MT&Mo)
              (identifier? . g$identifier?$13285$MT&Mo)
              (generate-temporaries
                .
                g$generate-temporaries$13274$MT&Mo)
              (free-identifier=? . g$free-identifier=?$13275$MT&Mo)
              (syntax->datum . g$syntax->datum$13287$MT&Mo)
              (datum->syntax . g$datum->syntax$13286$MT&Mo)
              (bound-identifier=? . g$bound-identifier=?$13276$MT&Mo)
              (delete-file . g$delete-file$6520$MT&Mo)
              (file-exists? . g$file-exists?$6519$MT&Mo)
              (list-sort . g$list-sort$7344$MT&Mo)
              (make-eqv-hashtable . g$make-eqv-hashtable$6502$MT&Mo)
              (make-eq-hashtable . g$make-eq-hashtable$6501$MT&Mo)
              (hashtable-update! . g$hashtable-update!$6508$MT&Mo)
              (hashtable-size . g$hashtable-size$6503$MT&Mo)
              (hashtable-set! . g$hashtable-set!$6505$MT&Mo)
              (hashtable-ref . g$hashtable-ref$6504$MT&Mo)
              (hashtable-delete! . g$hashtable-delete!$6506$MT&Mo)
              (hashtable-contains? . g$hashtable-contains?$6507$MT&Mo)
              (hashtable-clear! . g$hashtable-clear!$6509$MT&Mo)
              (call-with-output-file
                .
                g$call-with-output-file$7834$MT&Mo)
              (call-with-input-file . g$call-with-input-file$7833$MT&Mo)
              (write-char . g$write-char$7830$MT&Mo)
              (with-output-to-file . g$with-output-to-file$7832$MT&Mo)
              (with-input-from-file . g$with-input-from-file$7831$MT&Mo)
              (read-char . g$read-char$7829$MT&Mo)
              (peek-char . g$peek-char$7828$MT&Mo)
              (newline . g$newline$7835$MT&Mo)
              (put-datum . g$put-datum$7768$MT&Mo)
              (port? . g$port?$7773$MT&Mo)
              (open-string-output-port
                .
                g$open-string-output-port$7772$MT&Mo)
              (make-i/o-write-error . g$make-i/o-write-error$7181$MT&Mo)
              (make-i/o-read-error . g$make-i/o-read-error$7173$MT&Mo)
              (make-i/o-port-error . g$make-i/o-port-error$7241$MT&Mo)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$7189$MT&Mo)
              (make-i/o-filename-error
                .
                g$make-i/o-filename-error$7199$MT&Mo)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$7209$MT&Mo)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$7217$MT&Mo)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$7233$MT&Mo)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$7225$MT&Mo)
              (make-i/o-error . g$make-i/o-error$7165$MT&Mo)
              (make-i/o-encoding-error
                .
                g$make-i/o-encoding-error$7259$MT&Mo)
              (make-i/o-decoding-error
                .
                g$make-i/o-decoding-error$7251$MT&Mo)
              (i/o-write-error? . g$i/o-write-error?$7182$MT&Mo)
              (i/o-read-error? . g$i/o-read-error?$7174$MT&Mo)
              (i/o-port-error? . g$i/o-port-error?$7243$MT&Mo)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$7191$MT&Mo)
              (i/o-error-position . g$i/o-error-position$7192$MT&Mo)
              (i/o-filename-error? . g$i/o-filename-error?$7201$MT&Mo)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$7210$MT&Mo)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$7218$MT&Mo)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$7234$MT&Mo)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$7226$MT&Mo)
              (i/o-error? . g$i/o-error?$7166$MT&Mo)
              (i/o-error-port . g$i/o-error-port$7244$MT&Mo)
              (i/o-error-filename . g$i/o-error-filename$7202$MT&Mo)
              (i/o-encoding-error? . g$i/o-encoding-error?$7261$MT&Mo)
              (i/o-encoding-error-char
                .
                g$i/o-encoding-error-char$7262$MT&Mo)
              (i/o-decoding-error? . g$i/o-decoding-error?$7252$MT&Mo)
              (get-datum . g$get-datum$7769$MT&Mo)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$7774$MT&Mo)
              (call-with-port . g$call-with-port$7775$MT&Mo)
              (scheme-report-environment
                .
                g$scheme-report-environment$13264$MT&Mo)
              (quotient . g$quotient$7311$MT&Mo)
              (null-environment . g$null-environment$13263$MT&Mo)
              (remainder . g$remainder$7312$MT&Mo)
              (modulo . g$modulo$7313$MT&Mo)
              (inexact->exact . g$inexact->exact$7308$MT&Mo)
              (force . g$force$7315$MT&Mo)
              (exact->inexact . g$exact->inexact$7309$MT&Mo)
              (command-line . g$command-line$13359$MT&Mo)
              (remove . g$remove$5758$MT&Mo)
              (remv . g$remv$5759$MT&Mo)
              (remp . g$remp$5739$MT&Mo)
              (remq . g$remq$5760$MT&Mo)
              (partition . g$partition$5738$MT&Mo)
              (memv . g$memv$5746$MT&Mo)
              (memq . g$memq$5745$MT&Mo)
              (memp . g$memp$5748$MT&Mo)
              (member . g$member$5747$MT&Mo)
              (exists . g$exists$5752$MT&Mo)
              (for-all . g$for-all$5751$MT&Mo)
              (fold-right . g$fold-right$5757$MT&Mo)
              (fold-left . g$fold-left$5756$MT&Mo)
              (find . g$find$5737$MT&Mo)
              (filter . g$filter$5740$MT&Mo)
              (cons* . g$cons*$5755$MT&Mo)
              (assv . g$assv$5742$MT&Mo)
              (assq . g$assq$5741$MT&Mo)
              (assp . g$assp$5744$MT&Mo)
              (assoc . g$assoc$5743$MT&Mo)
              (eval . g$eval$13266$MT&Mo)
              (environment . g$environment$13262$MT&Mo)
              (make-enumeration . g$make-enumeration$7971$MT&Mo)
              (enum-set=? . g$enum-set=?$7978$MT&Mo)
              (enum-set-universe . g$enum-set-universe$7972$MT&Mo)
              (enum-set-union . g$enum-set-union$7979$MT&Mo)
              (enum-set-subset? . g$enum-set-subset?$7977$MT&Mo)
              (enum-set-projection . g$enum-set-projection$7983$MT&Mo)
              (enum-set-member? . g$enum-set-member?$7976$MT&Mo)
              (enum-set-intersection
                .
                g$enum-set-intersection$7980$MT&Mo)
              (enum-set-indexer . g$enum-set-indexer$7973$MT&Mo)
              (enum-set-difference . g$enum-set-difference$7981$MT&Mo)
              (enum-set-constructor . g$enum-set-constructor$7974$MT&Mo)
              (enum-set-complement . g$enum-set-complement$7982$MT&Mo)
              (enum-set->list . g$enum-set->list$7975$MT&Mo)
              (who-condition? . g$who-condition?$7113$MT&Mo)
              (warning? . g$warning?$7062$MT&Mo)
              (violation? . g$violation?$7086$MT&Mo)
              (undefined-violation? . g$undefined-violation?$7158$MT&Mo)
              (syntax-violation? . g$syntax-violation?$7148$MT&Mo)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$7150$MT&Mo)
              (syntax-violation-form
                .
                g$syntax-violation-form$7149$MT&Mo)
              (syntax-violation . g$syntax-violation$13284$MT&Mo)
              (serious-condition? . g$serious-condition?$7070$MT&Mo)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$7122$MT&Mo)
              (message-condition? . g$message-condition?$7053$MT&Mo)
              (make-who-condition . g$make-who-condition$7111$MT&Mo)
              (make-warning . g$make-warning$7061$MT&Mo)
              (make-violation . g$make-violation$7085$MT&Mo)
              (make-undefined-violation
                .
                g$make-undefined-violation$7157$MT&Mo)
              (make-syntax-violation
                .
                g$make-syntax-violation$7145$MT&Mo)
              (make-serious-condition
                .
                g$make-serious-condition$7069$MT&Mo)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$7121$MT&Mo)
              (make-message-condition
                .
                g$make-message-condition$7051$MT&Mo)
              (make-lexical-violation
                .
                g$make-lexical-violation$7137$MT&Mo)
              (make-irritants-condition
                .
                g$make-irritants-condition$7101$MT&Mo)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$7129$MT&Mo)
              (make-error . g$make-error$7077$MT&Mo)
              (make-assertion-violation
                .
                g$make-assertion-violation$7093$MT&Mo)
              (lexical-violation? . g$lexical-violation?$7138$MT&Mo)
              (irritants-condition? . g$irritants-condition?$7103$MT&Mo)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$7130$MT&Mo)
              (error? . g$error?$7078$MT&Mo)
              (condition-who . g$condition-who$7114$MT&Mo)
              (condition-message . g$condition-message$7054$MT&Mo)
              (condition-irritants . g$condition-irritants$7104$MT&Mo)
              (assertion-violation? . g$assertion-violation?$7094$MT&Mo)
              (native-endianness . g$native-endianness$6633$MT&Mo)
              (bytevector? . g$bytevector?$6401$MT&Mo)
              (bytevector-u64-set! . g$bytevector-u64-set!$6654$MT&Mo)
              (bytevector-u64-ref . g$bytevector-u64-ref$6650$MT&Mo)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$6656$MT&Mo)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$6652$MT&Mo)
              (bytevector-u32-set! . g$bytevector-u32-set!$6646$MT&Mo)
              (bytevector-u32-ref . g$bytevector-u32-ref$6642$MT&Mo)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$6648$MT&Mo)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$6644$MT&Mo)
              (bytevector-u16-set! . g$bytevector-u16-set!$6638$MT&Mo)
              (bytevector-u16-ref . g$bytevector-u16-ref$6634$MT&Mo)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$6640$MT&Mo)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$6636$MT&Mo)
              (bytevector-s64-set! . g$bytevector-s64-set!$6655$MT&Mo)
              (bytevector-s64-ref . g$bytevector-s64-ref$6651$MT&Mo)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$6657$MT&Mo)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$6653$MT&Mo)
              (bytevector-s32-set! . g$bytevector-s32-set!$6647$MT&Mo)
              (bytevector-s32-ref . g$bytevector-s32-ref$6643$MT&Mo)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$6649$MT&Mo)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$6645$MT&Mo)
              (bytevector-s16-set! . g$bytevector-s16-set!$6639$MT&Mo)
              (bytevector-s16-ref . g$bytevector-s16-ref$6635$MT&Mo)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$6641$MT&Mo)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$6637$MT&Mo)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$6660$MT&Mo)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$6658$MT&Mo)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$6661$MT&Mo)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$6659$MT&Mo)
              (no-nans-violation? . g$no-nans-violation?$7278$MT&Mo)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$7270$MT&Mo)
              (make-no-nans-violation
                .
                g$make-no-nans-violation$7277$MT&Mo)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$7269$MT&Mo)
              (flzero? . g$flzero?$7741$MT&Mo)
              (fltruncate . g$fltruncate$7736$MT&Mo)
              (fltan . g$fltan$7726$MT&Mo)
              (flsqrt . g$flsqrt$7731$MT&Mo)
              (flsin . g$flsin$7724$MT&Mo)
              (flround . g$flround$7737$MT&Mo)
              (flpositive? . g$flpositive?$7739$MT&Mo)
              (flonum? . g$flonum?$6406$MT&Mo)
              (flodd? . g$flodd?$7743$MT&Mo)
              (flnegative? . g$flnegative?$7740$MT&Mo)
              (flnan? . g$flnan?$7723$MT&Mo)
              (flmod0 . g$flmod0$7717$MT&Mo)
              (flmod . g$flmod$7716$MT&Mo)
              (flmin . g$flmin$7745$MT&Mo)
              (flmax . g$flmax$7744$MT&Mo)
              (fllog . g$fllog$7730$MT&Mo)
              (flinteger? . g$flinteger?$7720$MT&Mo)
              (flinfinite? . g$flinfinite?$7722$MT&Mo)
              (flfloor . g$flfloor$7735$MT&Mo)
              (flfinite? . g$flfinite?$7721$MT&Mo)
              (flexpt . g$flexpt$7733$MT&Mo)
              (flexp . g$flexp$7732$MT&Mo)
              (fleven? . g$fleven?$7742$MT&Mo)
              (fldiv0-and-mod0 . g$fldiv0-and-mod0$7719$MT&Mo)
              (fldiv-and-mod . g$fldiv-and-mod$7718$MT&Mo)
              (flcos . g$flcos$7725$MT&Mo)
              (flceiling . g$flceiling$7734$MT&Mo)
              (flatan . g$flatan$7729$MT&Mo)
              (flasin . g$flasin$7727$MT&Mo)
              (flacos . g$flacos$7728$MT&Mo)
              (flabs . g$flabs$7738$MT&Mo)
              (fxzero? . g$fxzero?$7624$MT&Mo)
              (fxrotate-bit-field . g$fxrotate-bit-field$7638$MT&Mo)
              (fxpositive? . g$fxpositive?$7622$MT&Mo)
              (fxodd? . g$fxodd?$7626$MT&Mo)
              (fxnegative? . g$fxnegative?$7623$MT&Mo)
              (fxmod0 . g$fxmod0$7619$MT&Mo)
              (fxmod . g$fxmod$7618$MT&Mo)
              (fxmin . g$fxmin$7628$MT&Mo)
              (fxmax . g$fxmax$7627$MT&Mo)
              (fxif . g$fxif$7632$MT&Mo)
              (fxeven? . g$fxeven?$7625$MT&Mo)
              (fxdiv0-and-mod0 . g$fxdiv0-and-mod0$7621$MT&Mo)
              (fxdiv-and-mod . g$fxdiv-and-mod$7620$MT&Mo)
              (fxcopy-bit-field . g$fxcopy-bit-field$7635$MT&Mo)
              (fxcopy-bit . g$fxcopy-bit$7633$MT&Mo)
              (fxbit-field . g$fxbit-field$7634$MT&Mo)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$7637$MT&Mo)
              (fxarithmetic-shift-left
                .
                g$fxarithmetic-shift-left$7636$MT&Mo)
              (fx-/carry . g$fx-/carry$7630$MT&Mo)
              (fx+/carry . g$fx+/carry$7631$MT&Mo)
              (fx*/carry . g$fx*/carry$7629$MT&Mo)
              (fixnum-width . g$fixnum-width$6407$MT&Mo)
              (fixnum? . g$fixnum?$6405$MT&Mo)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$7534$MT&Mo)
              (bitwise-if . g$bitwise-if$7528$MT&Mo)
              (bitwise-copy-bit-field
                .
                g$bitwise-copy-bit-field$7531$MT&Mo)
              (bitwise-copy-bit . g$bitwise-copy-bit$7529$MT&Mo)
              (bitwise-bit-field . g$bitwise-bit-field$7530$MT&Mo)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$7533$MT&Mo)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$7532$MT&Mo)
              (zero? . g$zero?$6440$MT&Mo)
              (vector? . g$vector?$6400$MT&Mo)
              (vector-map . g$vector-map$6462$MT&Mo)
              (vector-for-each . g$vector-for-each$6463$MT&Mo)
              (vector-fill! . g$vector-fill!$6408$MT&Mo)
              (symbol? . g$symbol?$6402$MT&Mo)
              (symbol=? . g$symbol=?$6452$MT&Mo)
              (string>? . g$string>?$6449$MT&Mo)
              (string>=? . g$string>=?$6451$MT&Mo)
              (string=? . g$string=?$6447$MT&Mo)
              (string<? . g$string<?$6448$MT&Mo)
              (string<=? . g$string<=?$6450$MT&Mo)
              (string-for-each . g$string-for-each$6464$MT&Mo)
              (reverse . g$reverse$6409$MT&Mo)
              (rationalize . g$rationalize$6459$MT&Mo)
              (procedure? . g$procedure?$6404$MT&Mo)
              (positive? . g$positive?$6438$MT&Mo)
              (odd? . g$odd?$6442$MT&Mo)
              (negative? . g$negative?$6439$MT&Mo)
              (min . g$min$6444$MT&Mo)
              (max . g$max$6443$MT&Mo)
              (map . g$map$5753$MT&Mo)
              (list-tail . g$list-tail$5733$MT&Mo)
              (list-ref . g$list-ref$5734$MT&Mo)
              (list->vector . g$list->vector$6397$MT&Mo)
              (list->string . g$list->string$6398$MT&Mo)
              (lcm . g$lcm$6446$MT&Mo)
              (gcd . g$gcd$6445$MT&Mo)
              (for-each . g$for-each$5754$MT&Mo)
              (even? . g$even?$6441$MT&Mo)
              (div0-and-mod0 . g$div0-and-mod0$6396$MT&Mo)
              (mod0 . g$mod0$6394$MT&Mo)
              (div-and-mod . g$div-and-mod$6395$MT&Mo)
              (mod . g$mod$6393$MT&Mo)
              (char? . g$char?$6399$MT&Mo)
              (char>? . g$char>?$6456$MT&Mo)
              (char>=? . g$char>=?$6458$MT&Mo)
              (char=? . g$char=?$6454$MT&Mo)
              (char<? . g$char<?$6455$MT&Mo)
              (char<=? . g$char<=?$6457$MT&Mo)
              (cddddr . g$cddddr$6437$MT&Mo)
              (cdddar . g$cdddar$6436$MT&Mo)
              (cddadr . g$cddadr$6435$MT&Mo)
              (cddaar . g$cddaar$6434$MT&Mo)
              (cdaddr . g$cdaddr$6433$MT&Mo)
              (cdadar . g$cdadar$6432$MT&Mo)
              (cdaadr . g$cdaadr$6431$MT&Mo)
              (cdaaar . g$cdaaar$6430$MT&Mo)
              (cadddr . g$cadddr$6429$MT&Mo)
              (caddar . g$caddar$6428$MT&Mo)
              (cadadr . g$cadadr$6427$MT&Mo)
              (cadaar . g$cadaar$6426$MT&Mo)
              (caaddr . g$caaddr$6425$MT&Mo)
              (caadar . g$caadar$6424$MT&Mo)
              (caaadr . g$caaadr$6423$MT&Mo)
              (caaaar . g$caaaar$6422$MT&Mo)
              (cdddr . g$cdddr$6421$MT&Mo)
              (cddar . g$cddar$6420$MT&Mo)
              (cdadr . g$cdadr$6419$MT&Mo)
              (cdaar . g$cdaar$6418$MT&Mo)
              (caddr . g$caddr$6417$MT&Mo)
              (cadar . g$cadar$6416$MT&Mo)
              (caadr . g$caadr$6415$MT&Mo)
              (caaar . g$caaar$6414$MT&Mo)
              (cddr . g$cddr$6413$MT&Mo)
              (cdar . g$cdar$6412$MT&Mo)
              (cadr . g$cadr$6411$MT&Mo)
              (caar . g$caar$6410$MT&Mo)
              (boolean? . g$boolean?$6403$MT&Mo)
              (boolean=? . g$boolean=?$6453$MT&Mo)
              (enum-set? . g$enum?$7952$MT&Mo)
              (make-promise . g$make-promise$7314$MT&Mo)
              (load/unload . g$load/unload$13362$MT&Mo)
              (load/args . g$load/args$13361$MT&Mo)
              (printf . g$printf$8007$MT&Mo)
              (fprintf . g$fprintf$8008$MT&Mo)
              (format . g$format$8009$MT&Mo)
              (trace-printer . g$trace-printer$13358$MT&Mo)
              (make-traced-macro . g$make-traced-macro$8013$MT&Mo)
              (assertion-error . g$assertion-error$13280$MT&Mo)
              (make-parameter . g$make-parameter$8174$MT&Mo)
              (environment-bindings
                .
                g$environment-bindings$13258$MT&Mo)
              (environment-symbols . g$environment-symbols$13261$MT&Mo)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$13257$MT&Mo)
              (library-path . g$library-path$8989$MT&Mo)
              (make-compile-time-value
                .
                g$make-compile-time-value$13108$MT&Mo)
              (expand->core . g$expand->core$13267$MT&Mo)
              (expand . g$expand$13265$MT&Mo)
              (convert->cps . g$convert->cps$8691$MT&Mo)
              (installed-libraries . g$installed-libraries$9010$MT&Mo)
              (uninstall-library . g$uninstall-library$9001$MT&Mo)
              (pretty-width . g$pretty-width$8371$MT&Mo)
              (pretty-print . g$pretty-print$8373$MT&Mo)))))))
    (g$install-library$9005$MT&Mo
      'g$11546$MT&Mo
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$11539$MT&Mo)
        (cosh . g$11538$MT&Mo)
        (sinh . g$11537$MT&Mo)
        (make-guid . g$11536$MT&Mo)
        (unspecified? . g$11535$MT&Mo)
        (make-list . g$5042$MT&Mo)
        (last-pair . g$5041$MT&Mo)
        (load-r5rs . g$11534$MT&Mo)
        (license . g$11533$MT&Mo)
        (stacktrace . g$11532$MT&Mo)
        (ironscheme-build . g$11022$MT&Mo)
        (remove-location . g$11519$MT&Mo)
        (set-symbol-value! . g$11518$MT&Mo)
        (symbol-value . g$11517$MT&Mo)
        (symbol-bound? . g$11516$MT&Mo)
        (ungensym . g$11515$MT&Mo)
        (gensym . g$11514$MT&Mo)
        (void . g$11513$MT&Mo)
        (compile-system-libraries . g$11026$MT&Mo)
        (compile->closure . g$11028$MT&Mo)
        (compile . g$11027$MT&Mo)
        (load . g$11021$MT&Mo)
        (interaction-environment . g$8043$MT&Mo)
        (string-upcase . g$11508$MT&Mo)
        (string-titlecase . g$11507$MT&Mo)
        (string-normalize-nfkd . g$6262$MT&Mo)
        (string-normalize-nfkc . g$6261$MT&Mo)
        (string-normalize-nfd . g$6260$MT&Mo)
        (string-normalize-nfc . g$6259$MT&Mo)
        (string-foldcase . g$11506$MT&Mo)
        (string-downcase . g$11505$MT&Mo)
        (string-ci>? . g$6246$MT&Mo)
        (string-ci>=? . g$6248$MT&Mo)
        (string-ci=? . g$6244$MT&Mo)
        (string-ci<? . g$6245$MT&Mo)
        (string-ci<=? . g$6247$MT&Mo)
        (char-whitespace? . g$11504$MT&Mo)
        (char-upper-case? . g$11503$MT&Mo)
        (char-title-case? . g$11502$MT&Mo)
        (char-numeric? . g$11501$MT&Mo)
        (char-lower-case? . g$11500$MT&Mo)
        (char-general-category . g$11499$MT&Mo)
        (char-upcase . g$11498$MT&Mo)
        (char-titlecase . g$11497$MT&Mo)
        (char-foldcase . g$11496$MT&Mo)
        (char-downcase . g$11495$MT&Mo)
        (char-ci>? . g$6256$MT&Mo)
        (char-ci>=? . g$6258$MT&Mo)
        (char-ci=? . g$6254$MT&Mo)
        (char-ci<? . g$6255$MT&Mo)
        (char-ci<=? . g$6257$MT&Mo)
        (char-alphabetic? . g$11494$MT&Mo)
        (make-variable-transformer . g$7718$MT&Mo)
        (identifier? . g$8037$MT&Mo)
        (generate-temporaries . g$8026$MT&Mo)
        (free-identifier=? . g$8027$MT&Mo)
        (syntax->datum . g$8039$MT&Mo)
        (datum->syntax . g$8038$MT&Mo)
        (bound-identifier=? . g$8028$MT&Mo)
        (record-type-descriptor? . g$11493$MT&Mo)
        (record-predicate . g$11492$MT&Mo)
        (record-mutator . g$11491$MT&Mo)
        (record-constructor . g$11490$MT&Mo)
        (record-accessor . g$11489$MT&Mo)
        (make-record-type-descriptor . g$11488$MT&Mo)
        (make-record-constructor-descriptor . g$11487$MT&Mo)
        (record? . g$11486$MT&Mo)
        (record-type-uid . g$11485$MT&Mo)
        (record-type-sealed? . g$11484$MT&Mo)
        (record-type-parent . g$11483$MT&Mo)
        (record-type-opaque? . g$11482$MT&Mo)
        (record-type-name . g$11481$MT&Mo)
        (record-type-generative? . g$11480$MT&Mo)
        (record-type-field-names . g$11479$MT&Mo)
        (record-rtd . g$11478$MT&Mo)
        (record-field-mutable? . g$11477$MT&Mo)
        (delete-file . g$5653$MT&Mo)
        (file-exists? . g$5652$MT&Mo)
        (vector-sort! . g$11476$MT&Mo)
        (vector-sort . g$11475$MT&Mo)
        (list-sort . g$6215$MT&Mo)
        (symbol-hash . g$11474$MT&Mo)
        (string-ci-hash . g$11473$MT&Mo)
        (string-hash . g$11472$MT&Mo)
        (equal-hash . g$11471$MT&Mo)
        (hashtable-equivalence-function . g$11470$MT&Mo)
        (make-hashtable . g$11469$MT&Mo)
        (hashtable-hash-function . g$11468$MT&Mo)
        (make-eqv-hashtable . g$5621$MT&Mo)
        (make-eq-hashtable . g$5620$MT&Mo)
        (hashtable? . g$11467$MT&Mo)
        (hashtable-update! . g$5627$MT&Mo)
        (hashtable-size . g$5622$MT&Mo)
        (hashtable-set! . g$5624$MT&Mo)
        (hashtable-ref . g$5623$MT&Mo)
        (hashtable-mutable? . g$11466$MT&Mo)
        (hashtable-keys . g$11465$MT&Mo)
        (hashtable-entries . g$11464$MT&Mo)
        (hashtable-delete! . g$5625$MT&Mo)
        (hashtable-copy . g$11463$MT&Mo)
        (hashtable-contains? . g$5626$MT&Mo)
        (hashtable-clear! . g$5628$MT&Mo)
        (call-with-output-file . g$6546$MT&Mo)
        (call-with-input-file . g$6545$MT&Mo)
        (write-char . g$6537$MT&Mo)
        (write . g$11462$MT&Mo)
        (with-output-to-file . g$6544$MT&Mo)
        (with-input-from-file . g$6543$MT&Mo)
        (read-char . g$6536$MT&Mo)
        (read . g$11461$MT&Mo)
        (peek-char . g$6535$MT&Mo)
        (open-output-file . g$11460$MT&Mo)
        (open-input-file . g$11459$MT&Mo)
        (newline . g$6547$MT&Mo)
        (display . g$11458$MT&Mo)
        (close-output-port . g$11457$MT&Mo)
        (close-input-port . g$11456$MT&Mo)
        (eof-object? . g$11455$MT&Mo)
        (eof-object . g$11454$MT&Mo)
        (current-error-port . g$11453$MT&Mo)
        (current-output-port . g$11452$MT&Mo)
        (current-input-port . g$11451$MT&Mo)
        (output-port? . g$11450$MT&Mo)
        (input-port? . g$11449$MT&Mo)
        (utf-8-codec . g$11448$MT&Mo)
        (utf-16-codec . g$11447$MT&Mo)
        (transcoder-error-handling-mode . g$11446$MT&Mo)
        (transcoder-eol-style . g$11445$MT&Mo)
        (transcoder-codec . g$11444$MT&Mo)
        (transcoded-port . g$11443$MT&Mo)
        (textual-port? . g$11442$MT&Mo)
        (string->bytevector . g$11441$MT&Mo)
        (standard-output-port . g$11440$MT&Mo)
        (standard-input-port . g$11439$MT&Mo)
        (standard-error-port . g$11438$MT&Mo)
        (set-port-position! . g$11437$MT&Mo)
        (put-u8 . g$11436$MT&Mo)
        (put-string . g$11435$MT&Mo)
        (put-datum . g$6515$MT&Mo)
        (put-char . g$11434$MT&Mo)
        (put-bytevector . g$11433$MT&Mo)
        (port? . g$6520$MT&Mo)
        (port-transcoder . g$11432$MT&Mo)
        (port-position . g$11431$MT&Mo)
        (port-has-set-port-position!? . g$11430$MT&Mo)
        (port-has-port-position? . g$11429$MT&Mo)
        (port-eof? . g$11428$MT&Mo)
        (output-port-buffer-mode . g$11427$MT&Mo)
        (open-string-output-port . g$6519$MT&Mo)
        (open-string-input-port . g$11426$MT&Mo)
        (open-file-output-port . g$11425$MT&Mo)
        (open-file-input/output-port . g$11424$MT&Mo)
        (open-file-input-port . g$11423$MT&Mo)
        (open-bytevector-output-port . g$11422$MT&Mo)
        (open-bytevector-input-port . g$11421$MT&Mo)
        (native-transcoder . g$11420$MT&Mo)
        (native-eol-style . g$11419$MT&Mo)
        (make-transcoder . g$11418$MT&Mo)
        (latin-1-codec . g$11417$MT&Mo)
        (make-i/o-write-error . g$6025$MT&Mo)
        (make-i/o-read-error . g$6012$MT&Mo)
        (make-i/o-port-error . g$6120$MT&Mo)
        (make-i/o-invalid-position-error . g$6038$MT&Mo)
        (make-i/o-filename-error . g$6053$MT&Mo)
        (make-i/o-file-protection-error . g$6068$MT&Mo)
        (make-i/o-file-is-read-only-error . g$6081$MT&Mo)
        (make-i/o-file-does-not-exist-error . g$6107$MT&Mo)
        (make-i/o-file-already-exists-error . g$6094$MT&Mo)
        (make-i/o-error . g$5999$MT&Mo)
        (make-i/o-encoding-error . g$6148$MT&Mo)
        (make-i/o-decoding-error . g$6135$MT&Mo)
        (make-custom-textual-output-port . g$11416$MT&Mo)
        (make-custom-textual-input/output-port . g$11415$MT&Mo)
        (make-custom-textual-input-port . g$11414$MT&Mo)
        (make-custom-binary-output-port . g$11413$MT&Mo)
        (make-custom-binary-input/output-port . g$11412$MT&Mo)
        (make-custom-binary-input-port . g$11411$MT&Mo)
        (make-bytevector . g$11410$MT&Mo)
        (lookahead-u8 . g$11409$MT&Mo)
        (lookahead-char . g$11408$MT&Mo)
        (i/o-write-error? . g$6026$MT&Mo)
        (i/o-read-error? . g$6013$MT&Mo)
        (i/o-port-error? . g$6122$MT&Mo)
        (i/o-invalid-position-error? . g$6040$MT&Mo)
        (i/o-error-position . g$6041$MT&Mo)
        (i/o-filename-error? . g$6055$MT&Mo)
        (i/o-file-protection-error? . g$6069$MT&Mo)
        (i/o-file-is-read-only-error? . g$6082$MT&Mo)
        (i/o-file-does-not-exist-error? . g$6108$MT&Mo)
        (i/o-file-already-exists-error? . g$6095$MT&Mo)
        (i/o-error? . g$6000$MT&Mo)
        (i/o-error-port . g$6123$MT&Mo)
        (i/o-error-filename . g$6056$MT&Mo)
        (i/o-encoding-error? . g$6150$MT&Mo)
        (i/o-encoding-error-char . g$6151$MT&Mo)
        (i/o-decoding-error? . g$6136$MT&Mo)
        (get-u8 . g$11407$MT&Mo)
        (get-string-n! . g$11406$MT&Mo)
        (get-string-n . g$11405$MT&Mo)
        (get-string-all . g$11404$MT&Mo)
        (get-line . g$11403$MT&Mo)
        (get-datum . g$6516$MT&Mo)
        (get-char . g$11402$MT&Mo)
        (get-bytevector-some . g$11401$MT&Mo)
        (get-bytevector-n! . g$11400$MT&Mo)
        (get-bytevector-n . g$11399$MT&Mo)
        (get-bytevector-all . g$11398$MT&Mo)
        (flush-output-port . g$11397$MT&Mo)
        (close-port . g$11396$MT&Mo)
        (call-with-string-output-port . g$6521$MT&Mo)
        (call-with-port . g$6522$MT&Mo)
        (call-with-bytevector-output-port . g$11395$MT&Mo)
        (bytevector->string . g$11394$MT&Mo)
        (buffer-mode? . g$11393$MT&Mo)
        (binary-port? . g$11392$MT&Mo)
        (scheme-report-environment . g$8016$MT&Mo)
        (quotient . g$6194$MT&Mo)
        (null-environment . g$8015$MT&Mo)
        (remainder . g$6195$MT&Mo)
        (modulo . g$6196$MT&Mo)
        (inexact->exact . g$6191$MT&Mo)
        (force . g$6198$MT&Mo)
        (exact->inexact . g$6192$MT&Mo)
        (exit . g$11391$MT&Mo)
        (command-line . g$11017$MT&Mo)
        (string-fill! . g$11390$MT&Mo)
        (string-set! . g$11389$MT&Mo)
        (set-cdr! . g$11388$MT&Mo)
        (set-car! . g$11387$MT&Mo)
        (remove . g$5064$MT&Mo)
        (remv . g$5065$MT&Mo)
        (remp . g$5045$MT&Mo)
        (remq . g$5066$MT&Mo)
        (partition . g$5044$MT&Mo)
        (memv . g$5052$MT&Mo)
        (memq . g$5051$MT&Mo)
        (memp . g$5054$MT&Mo)
        (member . g$5053$MT&Mo)
        (exists . g$5058$MT&Mo)
        (for-all . g$5057$MT&Mo)
        (fold-right . g$5063$MT&Mo)
        (fold-left . g$5062$MT&Mo)
        (find . g$5043$MT&Mo)
        (filter . g$5046$MT&Mo)
        (cons* . g$5061$MT&Mo)
        (assv . g$5048$MT&Mo)
        (assq . g$5047$MT&Mo)
        (assp . g$5050$MT&Mo)
        (assoc . g$5049$MT&Mo)
        (with-exception-handler . g$11386$MT&Mo)
        (raise-continuable . g$11385$MT&Mo)
        (raise . g$11384$MT&Mo)
        (eval . g$8018$MT&Mo)
        (environment . g$8014$MT&Mo)
        (make-enumeration . g$6607$MT&Mo)
        (enum-set=? . g$6614$MT&Mo)
        (enum-set-universe . g$6608$MT&Mo)
        (enum-set-union . g$6615$MT&Mo)
        (enum-set-subset? . g$6613$MT&Mo)
        (enum-set-projection . g$6619$MT&Mo)
        (enum-set-member? . g$6612$MT&Mo)
        (enum-set-intersection . g$6616$MT&Mo)
        (enum-set-indexer . g$6609$MT&Mo)
        (enum-set-difference . g$6617$MT&Mo)
        (enum-set-constructor . g$6610$MT&Mo)
        (enum-set-complement . g$6618$MT&Mo)
        (enum-set->list . g$6611$MT&Mo)
        (who-condition? . g$5917$MT&Mo)
        (warning? . g$5836$MT&Mo)
        (violation? . g$5875$MT&Mo)
        (undefined-violation? . g$5987$MT&Mo)
        (syntax-violation? . g$5972$MT&Mo)
        (syntax-violation-subform . g$5974$MT&Mo)
        (syntax-violation-form . g$5973$MT&Mo)
        (syntax-violation . g$8036$MT&Mo)
        (simple-conditions . g$11383$MT&Mo)
        (serious-condition? . g$5849$MT&Mo)
        (non-continuable-violation? . g$5931$MT&Mo)
        (message-condition? . g$5822$MT&Mo)
        (make-who-condition . g$5915$MT&Mo)
        (make-warning . g$5835$MT&Mo)
        (make-violation . g$5874$MT&Mo)
        (make-undefined-violation . g$5986$MT&Mo)
        (make-syntax-violation . g$5969$MT&Mo)
        (make-serious-condition . g$5848$MT&Mo)
        (make-non-continuable-violation . g$5930$MT&Mo)
        (make-message-condition . g$5820$MT&Mo)
        (make-lexical-violation . g$5956$MT&Mo)
        (make-irritants-condition . g$5900$MT&Mo)
        (make-implementation-restriction-violation . g$5943$MT&Mo)
        (make-error . g$5861$MT&Mo)
        (make-assertion-violation . g$5887$MT&Mo)
        (lexical-violation? . g$5957$MT&Mo)
        (irritants-condition? . g$5902$MT&Mo)
        (implementation-restriction-violation? . g$5944$MT&Mo)
        (error? . g$5862$MT&Mo)
        (condition-who . g$5918$MT&Mo)
        (condition-predicate . g$11382$MT&Mo)
        (condition-message . g$5823$MT&Mo)
        (condition-irritants . g$5903$MT&Mo)
        (condition-accessor . g$11381$MT&Mo)
        (condition . g$11380$MT&Mo)
        (assertion-violation? . g$5888$MT&Mo)
        (condition? . g$11379$MT&Mo)
        (utf32->string . g$11378$MT&Mo)
        (utf16->string . g$11377$MT&Mo)
        (utf8->string . g$11376$MT&Mo)
        (uint-list->bytevector . g$11375$MT&Mo)
        (u8-list->bytevector . g$11374$MT&Mo)
        (string->utf8 . g$11373$MT&Mo)
        (string->utf32 . g$11372$MT&Mo)
        (string->utf16 . g$11371$MT&Mo)
        (sint-list->bytevector . g$11370$MT&Mo)
        (native-endianness . g$5659$MT&Mo)
        (bytevector? . g$5363$MT&Mo)
        (bytevector=? . g$11369$MT&Mo)
        (bytevector-uint-set! . g$11368$MT&Mo)
        (bytevector-uint-ref . g$11367$MT&Mo)
        (bytevector-u8-set! . g$11366$MT&Mo)
        (bytevector-u8-ref . g$11365$MT&Mo)
        (bytevector-u64-set! . g$5680$MT&Mo)
        (bytevector-u64-ref . g$5676$MT&Mo)
        (bytevector-u64-native-set! . g$5682$MT&Mo)
        (bytevector-u64-native-ref . g$5678$MT&Mo)
        (bytevector-u32-set! . g$5672$MT&Mo)
        (bytevector-u32-ref . g$5668$MT&Mo)
        (bytevector-u32-native-set! . g$5674$MT&Mo)
        (bytevector-u32-native-ref . g$5670$MT&Mo)
        (bytevector-u16-set! . g$5664$MT&Mo)
        (bytevector-u16-ref . g$5660$MT&Mo)
        (bytevector-u16-native-set! . g$5666$MT&Mo)
        (bytevector-u16-native-ref . g$5662$MT&Mo)
        (bytevector-sint-set! . g$11364$MT&Mo)
        (bytevector-sint-ref . g$11363$MT&Mo)
        (bytevector-s8-set! . g$11362$MT&Mo)
        (bytevector-s8-ref . g$11361$MT&Mo)
        (bytevector-s64-set! . g$5681$MT&Mo)
        (bytevector-s64-ref . g$5677$MT&Mo)
        (bytevector-s64-native-set! . g$5683$MT&Mo)
        (bytevector-s64-native-ref . g$5679$MT&Mo)
        (bytevector-s32-set! . g$5673$MT&Mo)
        (bytevector-s32-ref . g$5669$MT&Mo)
        (bytevector-s32-native-set! . g$5675$MT&Mo)
        (bytevector-s32-native-ref . g$5671$MT&Mo)
        (bytevector-s16-set! . g$5665$MT&Mo)
        (bytevector-s16-ref . g$5661$MT&Mo)
        (bytevector-s16-native-set! . g$5667$MT&Mo)
        (bytevector-s16-native-ref . g$5663$MT&Mo)
        (bytevector-length . g$11360$MT&Mo)
        (bytevector-ieee-single-set! . g$11359$MT&Mo)
        (bytevector-ieee-single-ref . g$11358$MT&Mo)
        (bytevector-ieee-single-native-set! . g$5686$MT&Mo)
        (bytevector-ieee-single-native-ref . g$5684$MT&Mo)
        (bytevector-ieee-double-set! . g$11357$MT&Mo)
        (bytevector-ieee-double-ref . g$11356$MT&Mo)
        (bytevector-ieee-double-native-set! . g$5687$MT&Mo)
        (bytevector-ieee-double-native-ref . g$5685$MT&Mo)
        (bytevector-fill! . g$11355$MT&Mo)
        (bytevector-copy! . g$11354$MT&Mo)
        (bytevector-copy . g$11353$MT&Mo)
        (bytevector->uint-list . g$11352$MT&Mo)
        (bytevector->u8-list . g$11351$MT&Mo)
        (bytevector->sint-list . g$11350$MT&Mo)
        (no-nans-violation? . g$6177$MT&Mo)
        (no-infinities-violation? . g$6164$MT&Mo)
        (make-no-nans-violation . g$6176$MT&Mo)
        (make-no-infinities-violation . g$6163$MT&Mo)
        (real->flonum . g$11349$MT&Mo)
        (flzero? . g$6461$MT&Mo)
        (fltruncate . g$6456$MT&Mo)
        (fltan . g$6446$MT&Mo)
        (flsqrt . g$6451$MT&Mo)
        (flsin . g$6444$MT&Mo)
        (flround . g$6457$MT&Mo)
        (flpositive? . g$6459$MT&Mo)
        (flonum? . g$5368$MT&Mo)
        (flodd? . g$6463$MT&Mo)
        (flnumerator . g$11348$MT&Mo)
        (flnegative? . g$6460$MT&Mo)
        (flnan? . g$6443$MT&Mo)
        (flmod0 . g$6437$MT&Mo)
        (flmod . g$6436$MT&Mo)
        (flmin . g$6465$MT&Mo)
        (flmax . g$6464$MT&Mo)
        (fllog . g$6450$MT&Mo)
        (flinteger? . g$6440$MT&Mo)
        (flinfinite? . g$6442$MT&Mo)
        (flfloor . g$6455$MT&Mo)
        (flfinite? . g$6441$MT&Mo)
        (flexpt . g$6453$MT&Mo)
        (flexp . g$6452$MT&Mo)
        (fleven? . g$6462$MT&Mo)
        (fldiv0-and-mod0 . g$6439$MT&Mo)
        (fldiv0 . g$11347$MT&Mo)
        (fldiv-and-mod . g$6438$MT&Mo)
        (fldiv . g$11346$MT&Mo)
        (fldenominator . g$11345$MT&Mo)
        (flcos . g$6445$MT&Mo)
        (flceiling . g$6454$MT&Mo)
        (flatan . g$6449$MT&Mo)
        (flasin . g$6447$MT&Mo)
        (flacos . g$6448$MT&Mo)
        (flabs . g$6458$MT&Mo)
        (fl>? . g$11344$MT&Mo)
        (fl>=? . g$11343$MT&Mo)
        (fl=? . g$11342$MT&Mo)
        (fl<? . g$11341$MT&Mo)
        (fl<=? . g$11340$MT&Mo)
        (fl/ . g$11339$MT&Mo)
        (fl- . g$11338$MT&Mo)
        (fl+ . g$11337$MT&Mo)
        (fl* . g$11336$MT&Mo)
        (fixnum->flonum . g$11335$MT&Mo)
        (fxzero? . g$6358$MT&Mo)
        (fxxor . g$11334$MT&Mo)
        (fxrotate-bit-field . g$6372$MT&Mo)
        (fxreverse-bit-field . g$11333$MT&Mo)
        (fxpositive? . g$6356$MT&Mo)
        (fxodd? . g$6360$MT&Mo)
        (fxnot . g$11332$MT&Mo)
        (fxnegative? . g$6357$MT&Mo)
        (fxmod0 . g$6353$MT&Mo)
        (fxmod . g$6352$MT&Mo)
        (fxmin . g$6362$MT&Mo)
        (fxmax . g$6361$MT&Mo)
        (fxlength . g$11331$MT&Mo)
        (fxior . g$11330$MT&Mo)
        (fxif . g$6366$MT&Mo)
        (fxfirst-bit-set . g$11329$MT&Mo)
        (fxeven? . g$6359$MT&Mo)
        (fxdiv0-and-mod0 . g$6355$MT&Mo)
        (fxdiv0 . g$11328$MT&Mo)
        (fxdiv-and-mod . g$6354$MT&Mo)
        (fxdiv . g$11327$MT&Mo)
        (fxcopy-bit-field . g$6369$MT&Mo)
        (fxcopy-bit . g$6367$MT&Mo)
        (fxbit-set? . g$11326$MT&Mo)
        (fxbit-field . g$6368$MT&Mo)
        (fxbit-count . g$11325$MT&Mo)
        (fxarithmetic-shift-right . g$6371$MT&Mo)
        (fxarithmetic-shift-left . g$6370$MT&Mo)
        (fxarithmetic-shift . g$11324$MT&Mo)
        (fxand . g$11323$MT&Mo)
        (fx>? . g$11322$MT&Mo)
        (fx>=? . g$11321$MT&Mo)
        (fx=? . g$11320$MT&Mo)
        (fx<? . g$11319$MT&Mo)
        (fx<=? . g$11318$MT&Mo)
        (fx-/carry . g$6364$MT&Mo)
        (fx- . g$11317$MT&Mo)
        (fx+/carry . g$6365$MT&Mo)
        (fx+ . g$11316$MT&Mo)
        (fx*/carry . g$6363$MT&Mo)
        (fx* . g$11315$MT&Mo)
        (greatest-fixnum . g$11314$MT&Mo)
        (least-fixnum . g$11313$MT&Mo)
        (fixnum-width . g$5369$MT&Mo)
        (fixnum? . g$5367$MT&Mo)
        (bitwise-rotate-bit-field . g$6326$MT&Mo)
        (bitwise-reverse-bit-field . g$11312$MT&Mo)
        (bitwise-length . g$11311$MT&Mo)
        (bitwise-if . g$6320$MT&Mo)
        (bitwise-first-bit-set . g$11310$MT&Mo)
        (bitwise-copy-bit-field . g$6323$MT&Mo)
        (bitwise-copy-bit . g$6321$MT&Mo)
        (bitwise-bit-set? . g$11309$MT&Mo)
        (bitwise-bit-field . g$6322$MT&Mo)
        (bitwise-bit-count . g$11308$MT&Mo)
        (bitwise-xor . g$11307$MT&Mo)
        (bitwise-ior . g$11306$MT&Mo)
        (bitwise-and . g$11305$MT&Mo)
        (bitwise-not . g$11304$MT&Mo)
        (bitwise-arithmetic-shift-right . g$6325$MT&Mo)
        (bitwise-arithmetic-shift-left . g$6324$MT&Mo)
        (bitwise-arithmetic-shift . g$11303$MT&Mo)
        (zero? . g$5402$MT&Mo)
        (vector? . g$5362$MT&Mo)
        (vector-set! . g$11302$MT&Mo)
        (vector-ref . g$11301$MT&Mo)
        (vector-map . g$5434$MT&Mo)
        (vector-length . g$11300$MT&Mo)
        (vector-for-each . g$5435$MT&Mo)
        (vector-fill! . g$5370$MT&Mo)
        (vector->list . g$11299$MT&Mo)
        (vector . g$11298$MT&Mo)
        (values . g$11297$MT&Mo)
        (truncate . g$11296$MT&Mo)
        (tan . g$11295$MT&Mo)
        (symbol? . g$5364$MT&Mo)
        (symbol=? . g$5419$MT&Mo)
        (symbol->string . g$11294$MT&Mo)
        (substring . g$11293$MT&Mo)
        (string? . g$11292$MT&Mo)
        (string>? . g$5416$MT&Mo)
        (string>=? . g$5418$MT&Mo)
        (string=? . g$5414$MT&Mo)
        (string<? . g$5415$MT&Mo)
        (string<=? . g$5417$MT&Mo)
        (string-ref . g$11291$MT&Mo)
        (string-length . g$11290$MT&Mo)
        (string-for-each . g$5436$MT&Mo)
        (string-copy . g$11289$MT&Mo)
        (string-append . g$11288$MT&Mo)
        (string->symbol . g$11287$MT&Mo)
        (string->number . g$11286$MT&Mo)
        (string->list . g$11285$MT&Mo)
        (string . g$11284$MT&Mo)
        (sqrt . g$11283$MT&Mo)
        (sin . g$11282$MT&Mo)
        (round . g$11281$MT&Mo)
        (reverse . g$5371$MT&Mo)
        (real? . g$11280$MT&Mo)
        (real-valued? . g$11279$MT&Mo)
        (real-part . g$11278$MT&Mo)
        (rationalize . g$5431$MT&Mo)
        (rational? . g$11277$MT&Mo)
        (rational-valued? . g$11276$MT&Mo)
        (procedure? . g$5366$MT&Mo)
        (positive? . g$5400$MT&Mo)
        (pair? . g$11275$MT&Mo)
        (odd? . g$5404$MT&Mo)
        (numerator . g$11274$MT&Mo)
        (number? . g$11273$MT&Mo)
        (number->string . g$11272$MT&Mo)
        (null? . g$11271$MT&Mo)
        (not . g$11270$MT&Mo)
        (negative? . g$5401$MT&Mo)
        (nan? . g$11269$MT&Mo)
        (min . g$5406$MT&Mo)
        (max . g$5405$MT&Mo)
        (map . g$5059$MT&Mo)
        (make-vector . g$11268$MT&Mo)
        (make-string . g$11267$MT&Mo)
        (make-rectangular . g$11266$MT&Mo)
        (make-polar . g$11265$MT&Mo)
        (magnitude . g$11264$MT&Mo)
        (log . g$11263$MT&Mo)
        (list? . g$11262$MT&Mo)
        (list-tail . g$5039$MT&Mo)
        (list-ref . g$5040$MT&Mo)
        (list->vector . g$5359$MT&Mo)
        (list->string . g$5360$MT&Mo)
        (list . g$11261$MT&Mo)
        (length . g$11260$MT&Mo)
        (lcm . g$5408$MT&Mo)
        (integer? . g$11259$MT&Mo)
        (integer-valued? . g$11258$MT&Mo)
        (integer->char . g$11257$MT&Mo)
        (infinite? . g$11256$MT&Mo)
        (inexact? . g$11255$MT&Mo)
        (inexact . g$11254$MT&Mo)
        (imag-part . g$11253$MT&Mo)
        (gcd . g$5407$MT&Mo)
        (for-each . g$5060$MT&Mo)
        (floor . g$11252$MT&Mo)
        (finite? . g$11251$MT&Mo)
        (expt . g$11250$MT&Mo)
        (exp . g$11249$MT&Mo)
        (exact? . g$11248$MT&Mo)
        (exact-integer-sqrt . g$11247$MT&Mo)
        (exact . g$11246$MT&Mo)
        (even? . g$5403$MT&Mo)
        (error . g$11245$MT&Mo)
        (eqv? . g$11244$MT&Mo)
        (equal? . g$11243$MT&Mo)
        (eq? . g$11242$MT&Mo)
        (dynamic-wind . g$11241$MT&Mo)
        (div0-and-mod0 . g$5358$MT&Mo)
        (mod0 . g$5356$MT&Mo)
        (div0 . g$11240$MT&Mo)
        (div-and-mod . g$5357$MT&Mo)
        (mod . g$5355$MT&Mo)
        (div . g$11239$MT&Mo)
        (denominator . g$11238$MT&Mo)
        (cos . g$11237$MT&Mo)
        (cons . g$11236$MT&Mo)
        (complex? . g$11235$MT&Mo)
        (char? . g$5361$MT&Mo)
        (char>? . g$5428$MT&Mo)
        (char>=? . g$5430$MT&Mo)
        (char=? . g$5426$MT&Mo)
        (char<? . g$5427$MT&Mo)
        (char<=? . g$5429$MT&Mo)
        (char->integer . g$11234$MT&Mo)
        (ceiling . g$11233$MT&Mo)
        (call-with-values . g$11232$MT&Mo)
        (call/cc . g$11231$MT&Mo)
        (call-with-current-continuation . g$11230$MT&Mo)
        (cddddr . g$5399$MT&Mo)
        (cdddar . g$5398$MT&Mo)
        (cddadr . g$5397$MT&Mo)
        (cddaar . g$5396$MT&Mo)
        (cdaddr . g$5395$MT&Mo)
        (cdadar . g$5394$MT&Mo)
        (cdaadr . g$5393$MT&Mo)
        (cdaaar . g$5392$MT&Mo)
        (cadddr . g$5391$MT&Mo)
        (caddar . g$5390$MT&Mo)
        (cadadr . g$5389$MT&Mo)
        (cadaar . g$5388$MT&Mo)
        (caaddr . g$5387$MT&Mo)
        (caadar . g$5386$MT&Mo)
        (caaadr . g$5385$MT&Mo)
        (caaaar . g$5384$MT&Mo)
        (cdddr . g$5383$MT&Mo)
        (cddar . g$5382$MT&Mo)
        (cdadr . g$5381$MT&Mo)
        (cdaar . g$5380$MT&Mo)
        (caddr . g$5379$MT&Mo)
        (cadar . g$5378$MT&Mo)
        (caadr . g$5377$MT&Mo)
        (caaar . g$5376$MT&Mo)
        (cddr . g$5375$MT&Mo)
        (cdar . g$5374$MT&Mo)
        (cadr . g$5373$MT&Mo)
        (caar . g$5372$MT&Mo)
        (cdr . g$11229$MT&Mo)
        (car . g$11228$MT&Mo)
        (boolean? . g$5365$MT&Mo)
        (boolean=? . g$5420$MT&Mo)
        (atan . g$11227$MT&Mo)
        (assertion-violation . g$11226$MT&Mo)
        (asin . g$11225$MT&Mo)
        (apply . g$11224$MT&Mo)
        (append . g$11223$MT&Mo)
        (angle . g$11222$MT&Mo)
        (acos . g$11221$MT&Mo)
        (abs . g$11220$MT&Mo)
        (/ . g$11219$MT&Mo)
        (* . g$11218$MT&Mo)
        (- . g$11217$MT&Mo)
        (+ . g$11216$MT&Mo)
        (>= . g$11215$MT&Mo)
        (> . g$11214$MT&Mo)
        (= . g$11213$MT&Mo)
        (<= . g$11212$MT&Mo)
        (< . g$11211$MT&Mo)
        (deserialize-port . g$11207$MT&Mo)
        (serialize-port . g$11206$MT&Mo)
        (enum-set? . g$6584$MT&Mo)
        (load/unload . g$11020$MT&Mo)
        (load/args . g$11019$MT&Mo)
        (printf . g$6693$MT&Mo)
        (fprintf . g$6694$MT&Mo)
        (format . g$6695$MT&Mo)
        (procedure-form . g$11205$MT&Mo)
        (procedure-environment . g$11204$MT&Mo)
        (procedure-name . g$11203$MT&Mo)
        (procedure-arity . g$11202$MT&Mo)
        (gc-collect . g$11201$MT&Mo)
        (typeof . g$11200$MT&Mo)
        (clr-type? . g$11199$MT&Mo)
        (get-clr-type . g$11198$MT&Mo)
        (vector-append . g$11196$MT&Mo)
        (vector-filter . g$11195$MT&Mo)
        (vector-reverse! . g$11194$MT&Mo)
        (vector-contains? . g$11193$MT&Mo)
        (vector-index-of . g$11192$MT&Mo)
        (vector-copy . g$11191$MT&Mo)
        (vector-binary-search . g$11190$MT&Mo)
        (string-ci-compare . g$11189$MT&Mo)
        (string-compare . g$11188$MT&Mo)
        (string-format . g$11187$MT&Mo)
        (trace-printer . g$11016$MT&Mo)
        (time-it . g$11185$MT&Mo)
        (make-parameter . g$6722$MT&Mo)
        (open-tcp-input/output-port . g$11182$MT&Mo)
        (hashtable-for-each . g$11181$MT&Mo)
        (hashtable-map . g$11180$MT&Mo)
        (environment-bindings . g$8010$MT&Mo)
        (environment-symbols . g$8013$MT&Mo)
        (interaction-environment-symbols . g$8009$MT&Mo)
        (optimization-level . g$11179$MT&Mo)
        (library-path . g$7341$MT&Mo)
        (make-compile-time-value . g$7719$MT&Mo)
        (expand->core . g$8019$MT&Mo)
        (expand . g$8017$MT&Mo)
        (convert->cps . g$7038$MT&Mo)
        (installed-libraries . g$7362$MT&Mo)
        (uninstall-library . g$7353$MT&Mo)
        (pretty-width . g$6797$MT&Mo)
        (pretty-print . g$6799$MT&Mo)
        (&no-nans . g$11178$MT&Mo)
        (&no-infinities . g$11177$MT&Mo)
        (&i/o-encoding . g$11176$MT&Mo)
        (&i/o-decoding . g$11175$MT&Mo)
        (&i/o-port . g$11174$MT&Mo)
        (&i/o-file-does-not-exist . g$11173$MT&Mo)
        (&i/o-file-already-exists . g$11172$MT&Mo)
        (&i/o-file-is-read-only . g$11171$MT&Mo)
        (&i/o-file-protection . g$11170$MT&Mo)
        (&i/o-filename . g$11169$MT&Mo)
        (&i/o-invalid-position . g$11168$MT&Mo)
        (&i/o-write . g$11167$MT&Mo)
        (&i/o-read . g$11166$MT&Mo)
        (&i/o . g$11165$MT&Mo)
        (&non-continuable . g$11164$MT&Mo)
        (&undefined . g$11163$MT&Mo)
        (&syntax . g$11162$MT&Mo)
        (&lexical . g$11161$MT&Mo)
        (&implementation-restriction . g$11160$MT&Mo)
        (&who . g$11159$MT&Mo)
        (&irritants . g$11158$MT&Mo)
        (&assertion . g$11157$MT&Mo)
        (&violation . g$11156$MT&Mo)
        (&error . g$11155$MT&Mo)
        (&serious . g$11154$MT&Mo)
        (&warning . g$11153$MT&Mo)
        (&message . g$11152$MT&Mo)
        (&condition . g$11151$MT&Mo)
        (define-condition-type . g$11150$MT&Mo)
        (define-enumeration . g$11149$MT&Mo)
        (define-record-type . g$11148$MT&Mo)
        (parent-rtd . g$11147$MT&Mo)
        (nongenerative . g$11146$MT&Mo)
        (opaque . g$11145$MT&Mo)
        (sealed . g$11144$MT&Mo)
        (protocol . g$11143$MT&Mo)
        (parent . g$11142$MT&Mo)
        (immutable . g$11141$MT&Mo)
        (mutable . g$11140$MT&Mo)
        (fields . g$11139$MT&Mo)
        (error-handling-mode . g$11138$MT&Mo)
        (file-options . g$11137$MT&Mo)
        (buffer-mode . g$11136$MT&Mo)
        (eol-style . g$11135$MT&Mo)
        (guard . g$11134$MT&Mo)
        (trace-letrec-syntax . g$11133$MT&Mo)
        (trace-let-syntax . g$11132$MT&Mo)
        (trace-define-syntax . g$11131$MT&Mo)
        (trace-define . g$11130$MT&Mo)
        (trace-lambda . g$11129$MT&Mo)
        (unsyntax-splicing . g$11128$MT&Mo)
        (unsyntax . g$11127$MT&Mo)
        (unquote-splicing . g$11126$MT&Mo)
        (unquote . g$11125$MT&Mo)
        (_ . g$11124$MT&Mo)
        (else . g$11123$MT&Mo)
        (=> . g$11122$MT&Mo)
        (... . g$11121$MT&Mo)
        (assert . g$11120$MT&Mo)
        (endianness . g$11119$MT&Mo)
        (delay . g$11118$MT&Mo)
        (time . g$11117$MT&Mo)
        (or . g$11116$MT&Mo)
        (and . g$11115$MT&Mo)
        (do . g$11114$MT&Mo)
        (cond . g$11113$MT&Mo)
        (let* . g$11112$MT&Mo)
        (let . g$11111$MT&Mo)
        (identifier-syntax . g$11110$MT&Mo)
        (with-syntax . g$11109$MT&Mo)
        (quasisyntax . g$11108$MT&Mo)
        (quasiquote . g$11107$MT&Mo)
        (syntax-rules . g$11106$MT&Mo)
        (include-into . g$11105$MT&Mo)
        (include . g$11104$MT&Mo)
        (let-values . g$11102$MT&Mo)
        (let*-values . g$11101$MT&Mo)
        (record-constructor-descriptor . g$11100$MT&Mo)
        (record-type-descriptor . g$11099$MT&Mo)
        (fluid-let-syntax . g$11098$MT&Mo)
        (case . g$11097$MT&Mo)
        (parameterize . g$11096$MT&Mo)
        (unless . g$11095$MT&Mo)
        (when . g$11094$MT&Mo)
        (if . g$11093$MT&Mo)
        (letrec* . g$11092$MT&Mo)
        (letrec . g$11091$MT&Mo)
        (case-lambda . g$11089$MT&Mo)
        (lambda . g$11088$MT&Mo)
        (syntax . g$11087$MT&Mo)
        (syntax-case . g$11086$MT&Mo)
        (quote . g$11085$MT&Mo)
        (letrec-syntax . g$11083$MT&Mo)
        (let-syntax . g$11082$MT&Mo)
        (set! . g$11081$MT&Mo)
        (export . g$11080$MT&Mo)
        (import . g$11079$MT&Mo)
        (library . g$11078$MT&Mo)
        (begin . g$11077$MT&Mo)
        (module . g$11076$MT&Mo)
        (define-syntax . g$11075$MT&Mo)
        (define . g$11074$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11547$MT&Mo
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11183$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11548$MT&Mo
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$11544$MT&Mo)
        (annotation-source . g$11543$MT&Mo)
        (annotation-expression . g$11542$MT&Mo)
        (annotation? . g$11541$MT&Mo)
        (read-annotated . g$11540$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11549$MT&Mo
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$11512$MT&Mo)
        (serialize-library . g$11511$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11550$MT&Mo
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((string-normalize . g$11510$MT&Mo)
        (variable-transformer-procedure . g$7721$MT&Mo)
        (variable-transformer? . g$7720$MT&Mo)
        (eqv-hash . g$11209$MT&Mo)
        (reverse! . g$11208$MT&Mo)
        (make-promise . g$6197$MT&Mo)
        (format . g$6695$MT&Mo)
        (get-command-line . g$11197$MT&Mo)
        (make-traced-procedure . g$11186$MT&Mo)
        (make-traced-macro . g$6715$MT&Mo)
        (assertion-error . g$8032$MT&Mo)
        (library-locator . g$11184$MT&Mo)
        (get-library-paths . g$11183$MT&Mo)
        (library-path . g$7341$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11551$MT&Mo
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11210$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11552$MT&Mo
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$11531$MT&Mo)
        (clr-field-set!-internal . g$11530$MT&Mo)
        (clr-field-get-internal . g$11529$MT&Mo)
        (clr-cast-internal . g$11528$MT&Mo)
        (clr-call-internal . g$11527$MT&Mo)
        (clr-new-internal . g$11526$MT&Mo)
        (clr-new-array-internal . g$11525$MT&Mo)
        (clr-is-internal . g$11524$MT&Mo)
        (clr-reference-internal . g$11523$MT&Mo)
        (clr-using-internal . g$11522$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11553$MT&Mo
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11126$MT&Mo)
        (unquote . g$11125$MT&Mo)
        (else . g$11123$MT&Mo)
        (=> . g$11122$MT&Mo)
        (delay . g$11118$MT&Mo)
        (or . g$11116$MT&Mo)
        (and . g$11115$MT&Mo)
        (do . g$11114$MT&Mo)
        (cond . g$11113$MT&Mo)
        (let* . g$11112$MT&Mo)
        (let . g$11111$MT&Mo)
        (quasiquote . g$11107$MT&Mo)
        (syntax-rules . g$11106$MT&Mo)
        (case . g$11097$MT&Mo)
        (if . g$11093$MT&Mo)
        (letrec . g$11091$MT&Mo)
        (lambda . g$11088$MT&Mo)
        (quote . g$11085$MT&Mo)
        (letrec-syntax . g$11083$MT&Mo)
        (let-syntax . g$11082$MT&Mo)
        (set! . g$11081$MT&Mo)
        (begin . g$11077$MT&Mo)
        (define-syntax . g$11075$MT&Mo)
        (define . g$11074$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11554$MT&Mo
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((char-ready? . g$11509$MT&Mo)
        (string-ci>? . g$6246$MT&Mo)
        (string-ci>=? . g$6248$MT&Mo)
        (string-ci=? . g$6244$MT&Mo)
        (string-ci<? . g$6245$MT&Mo)
        (string-ci<=? . g$6247$MT&Mo)
        (char-whitespace? . g$11504$MT&Mo)
        (char-upper-case? . g$11503$MT&Mo)
        (char-numeric? . g$11501$MT&Mo)
        (char-lower-case? . g$11500$MT&Mo)
        (char-upcase . g$11498$MT&Mo)
        (char-downcase . g$11495$MT&Mo)
        (char-ci>? . g$6256$MT&Mo)
        (char-ci>=? . g$6258$MT&Mo)
        (char-ci=? . g$6254$MT&Mo)
        (char-ci<? . g$6255$MT&Mo)
        (char-ci<=? . g$6257$MT&Mo)
        (char-alphabetic? . g$11494$MT&Mo)
        (call-with-output-file . g$6546$MT&Mo)
        (call-with-input-file . g$6545$MT&Mo)
        (write-char . g$6537$MT&Mo)
        (write . g$11462$MT&Mo)
        (with-output-to-file . g$6544$MT&Mo)
        (with-input-from-file . g$6543$MT&Mo)
        (read-char . g$6536$MT&Mo)
        (read . g$11461$MT&Mo)
        (peek-char . g$6535$MT&Mo)
        (open-output-file . g$11460$MT&Mo)
        (open-input-file . g$11459$MT&Mo)
        (newline . g$6547$MT&Mo)
        (display . g$11458$MT&Mo)
        (close-output-port . g$11457$MT&Mo)
        (close-input-port . g$11456$MT&Mo)
        (eof-object? . g$11455$MT&Mo)
        (current-error-port . g$11453$MT&Mo)
        (current-output-port . g$11452$MT&Mo)
        (current-input-port . g$11451$MT&Mo)
        (output-port? . g$11450$MT&Mo)
        (input-port? . g$11449$MT&Mo)
        (scheme-report-environment . g$8016$MT&Mo)
        (quotient . g$6194$MT&Mo)
        (null-environment . g$8015$MT&Mo)
        (remainder . g$6195$MT&Mo)
        (modulo . g$6196$MT&Mo)
        (inexact->exact . g$6191$MT&Mo)
        (force . g$6198$MT&Mo)
        (exact->inexact . g$6192$MT&Mo)
        (string-fill! . g$11390$MT&Mo)
        (string-set! . g$11389$MT&Mo)
        (set-cdr! . g$11388$MT&Mo)
        (set-car! . g$11387$MT&Mo)
        (memv . g$5052$MT&Mo)
        (memq . g$5051$MT&Mo)
        (member . g$5053$MT&Mo)
        (assv . g$5048$MT&Mo)
        (assq . g$5047$MT&Mo)
        (assoc . g$5049$MT&Mo)
        (eval . g$8018$MT&Mo)
        (zero? . g$5402$MT&Mo)
        (vector? . g$5362$MT&Mo)
        (vector-set! . g$11302$MT&Mo)
        (vector-ref . g$11301$MT&Mo)
        (vector-length . g$11300$MT&Mo)
        (vector-fill! . g$5370$MT&Mo)
        (vector->list . g$11299$MT&Mo)
        (vector . g$11298$MT&Mo)
        (values . g$11297$MT&Mo)
        (truncate . g$11296$MT&Mo)
        (tan . g$11295$MT&Mo)
        (symbol? . g$5364$MT&Mo)
        (symbol->string . g$11294$MT&Mo)
        (substring . g$11293$MT&Mo)
        (string? . g$11292$MT&Mo)
        (string>? . g$5416$MT&Mo)
        (string>=? . g$5418$MT&Mo)
        (string=? . g$5414$MT&Mo)
        (string<? . g$5415$MT&Mo)
        (string<=? . g$5417$MT&Mo)
        (string-ref . g$11291$MT&Mo)
        (string-length . g$11290$MT&Mo)
        (string-copy . g$11289$MT&Mo)
        (string-append . g$11288$MT&Mo)
        (string->symbol . g$11287$MT&Mo)
        (string->number . g$11286$MT&Mo)
        (string->list . g$11285$MT&Mo)
        (string . g$11284$MT&Mo)
        (sqrt . g$11283$MT&Mo)
        (sin . g$11282$MT&Mo)
        (round . g$11281$MT&Mo)
        (reverse . g$5371$MT&Mo)
        (real? . g$11280$MT&Mo)
        (real-part . g$11278$MT&Mo)
        (rationalize . g$5431$MT&Mo)
        (rational? . g$11277$MT&Mo)
        (procedure? . g$5366$MT&Mo)
        (positive? . g$5400$MT&Mo)
        (pair? . g$11275$MT&Mo)
        (odd? . g$5404$MT&Mo)
        (numerator . g$11274$MT&Mo)
        (number? . g$11273$MT&Mo)
        (number->string . g$11272$MT&Mo)
        (null? . g$11271$MT&Mo)
        (not . g$11270$MT&Mo)
        (negative? . g$5401$MT&Mo)
        (min . g$5406$MT&Mo)
        (max . g$5405$MT&Mo)
        (map . g$5059$MT&Mo)
        (make-vector . g$11268$MT&Mo)
        (make-string . g$11267$MT&Mo)
        (make-rectangular . g$11266$MT&Mo)
        (make-polar . g$11265$MT&Mo)
        (magnitude . g$11264$MT&Mo)
        (log . g$11263$MT&Mo)
        (list? . g$11262$MT&Mo)
        (list-tail . g$5039$MT&Mo)
        (list-ref . g$5040$MT&Mo)
        (list->vector . g$5359$MT&Mo)
        (list->string . g$5360$MT&Mo)
        (list . g$11261$MT&Mo)
        (length . g$11260$MT&Mo)
        (lcm . g$5408$MT&Mo)
        (integer? . g$11259$MT&Mo)
        (integer->char . g$11257$MT&Mo)
        (inexact? . g$11255$MT&Mo)
        (imag-part . g$11253$MT&Mo)
        (gcd . g$5407$MT&Mo)
        (for-each . g$5060$MT&Mo)
        (floor . g$11252$MT&Mo)
        (expt . g$11250$MT&Mo)
        (exp . g$11249$MT&Mo)
        (exact? . g$11248$MT&Mo)
        (even? . g$5403$MT&Mo)
        (eqv? . g$11244$MT&Mo)
        (equal? . g$11243$MT&Mo)
        (eq? . g$11242$MT&Mo)
        (dynamic-wind . g$11241$MT&Mo)
        (denominator . g$11238$MT&Mo)
        (cos . g$11237$MT&Mo)
        (cons . g$11236$MT&Mo)
        (complex? . g$11235$MT&Mo)
        (char? . g$5361$MT&Mo)
        (char>? . g$5428$MT&Mo)
        (char>=? . g$5430$MT&Mo)
        (char=? . g$5426$MT&Mo)
        (char<? . g$5427$MT&Mo)
        (char<=? . g$5429$MT&Mo)
        (char->integer . g$11234$MT&Mo)
        (ceiling . g$11233$MT&Mo)
        (call-with-values . g$11232$MT&Mo)
        (call-with-current-continuation . g$11230$MT&Mo)
        (cddddr . g$5399$MT&Mo)
        (cdddar . g$5398$MT&Mo)
        (cddadr . g$5397$MT&Mo)
        (cddaar . g$5396$MT&Mo)
        (cdaddr . g$5395$MT&Mo)
        (cdadar . g$5394$MT&Mo)
        (cdaadr . g$5393$MT&Mo)
        (cdaaar . g$5392$MT&Mo)
        (cadddr . g$5391$MT&Mo)
        (caddar . g$5390$MT&Mo)
        (cadadr . g$5389$MT&Mo)
        (cadaar . g$5388$MT&Mo)
        (caaddr . g$5387$MT&Mo)
        (caadar . g$5386$MT&Mo)
        (caaadr . g$5385$MT&Mo)
        (caaaar . g$5384$MT&Mo)
        (cdddr . g$5383$MT&Mo)
        (cddar . g$5382$MT&Mo)
        (cdadr . g$5381$MT&Mo)
        (cdaar . g$5380$MT&Mo)
        (caddr . g$5379$MT&Mo)
        (cadar . g$5378$MT&Mo)
        (caadr . g$5377$MT&Mo)
        (caaar . g$5376$MT&Mo)
        (cddr . g$5375$MT&Mo)
        (cdar . g$5374$MT&Mo)
        (cadr . g$5373$MT&Mo)
        (caar . g$5372$MT&Mo)
        (cdr . g$11229$MT&Mo)
        (car . g$11228$MT&Mo)
        (boolean? . g$5365$MT&Mo)
        (atan . g$11227$MT&Mo)
        (asin . g$11225$MT&Mo)
        (apply . g$11224$MT&Mo)
        (append . g$11223$MT&Mo)
        (angle . g$11222$MT&Mo)
        (acos . g$11221$MT&Mo)
        (abs . g$11220$MT&Mo)
        (/ . g$11219$MT&Mo)
        (* . g$11218$MT&Mo)
        (- . g$11217$MT&Mo)
        (+ . g$11216$MT&Mo)
        (>= . g$11215$MT&Mo)
        (> . g$11214$MT&Mo)
        (= . g$11213$MT&Mo)
        (<= . g$11212$MT&Mo)
        (< . g$11211$MT&Mo)
        (unquote-splicing . g$11126$MT&Mo)
        (unquote . g$11125$MT&Mo)
        (else . g$11123$MT&Mo)
        (=> . g$11122$MT&Mo)
        (... . g$11121$MT&Mo)
        (delay . g$11118$MT&Mo)
        (or . g$11116$MT&Mo)
        (and . g$11115$MT&Mo)
        (do . g$11114$MT&Mo)
        (cond . g$11113$MT&Mo)
        (let* . g$11112$MT&Mo)
        (let . g$11111$MT&Mo)
        (quasiquote . g$11107$MT&Mo)
        (syntax-rules . g$11106$MT&Mo)
        (case . g$11097$MT&Mo)
        (if . g$11093$MT&Mo)
        (letrec . g$11091$MT&Mo)
        (lambda . g$11088$MT&Mo)
        (quote . g$11085$MT&Mo)
        (letrec-syntax . g$11083$MT&Mo)
        (let-syntax . g$11082$MT&Mo)
        (set! . g$11081$MT&Mo)
        (begin . g$11077$MT&Mo)
        (define-syntax . g$11075$MT&Mo)
        (define . g$11074$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11555$MT&Mo
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11508$MT&Mo)
        (string-titlecase . g$11507$MT&Mo)
        (string-normalize-nfkd . g$6262$MT&Mo)
        (string-normalize-nfkc . g$6261$MT&Mo)
        (string-normalize-nfd . g$6260$MT&Mo)
        (string-normalize-nfc . g$6259$MT&Mo)
        (string-foldcase . g$11506$MT&Mo)
        (string-downcase . g$11505$MT&Mo)
        (string-ci>? . g$6246$MT&Mo)
        (string-ci>=? . g$6248$MT&Mo)
        (string-ci=? . g$6244$MT&Mo)
        (string-ci<? . g$6245$MT&Mo)
        (string-ci<=? . g$6247$MT&Mo)
        (char-whitespace? . g$11504$MT&Mo)
        (char-upper-case? . g$11503$MT&Mo)
        (char-title-case? . g$11502$MT&Mo)
        (char-numeric? . g$11501$MT&Mo)
        (char-lower-case? . g$11500$MT&Mo)
        (char-general-category . g$11499$MT&Mo)
        (char-upcase . g$11498$MT&Mo)
        (char-titlecase . g$11497$MT&Mo)
        (char-foldcase . g$11496$MT&Mo)
        (char-downcase . g$11495$MT&Mo)
        (char-ci>? . g$6256$MT&Mo)
        (char-ci>=? . g$6258$MT&Mo)
        (char-ci=? . g$6254$MT&Mo)
        (char-ci<? . g$6255$MT&Mo)
        (char-ci<=? . g$6257$MT&Mo)
        (char-alphabetic? . g$11494$MT&Mo)
        (make-variable-transformer . g$7718$MT&Mo)
        (identifier? . g$8037$MT&Mo)
        (generate-temporaries . g$8026$MT&Mo)
        (free-identifier=? . g$8027$MT&Mo)
        (syntax->datum . g$8039$MT&Mo)
        (datum->syntax . g$8038$MT&Mo)
        (bound-identifier=? . g$8028$MT&Mo)
        (record-type-descriptor? . g$11493$MT&Mo)
        (record-predicate . g$11492$MT&Mo)
        (record-mutator . g$11491$MT&Mo)
        (record-constructor . g$11490$MT&Mo)
        (record-accessor . g$11489$MT&Mo)
        (make-record-type-descriptor . g$11488$MT&Mo)
        (make-record-constructor-descriptor . g$11487$MT&Mo)
        (record? . g$11486$MT&Mo)
        (record-type-uid . g$11485$MT&Mo)
        (record-type-sealed? . g$11484$MT&Mo)
        (record-type-parent . g$11483$MT&Mo)
        (record-type-opaque? . g$11482$MT&Mo)
        (record-type-name . g$11481$MT&Mo)
        (record-type-generative? . g$11480$MT&Mo)
        (record-type-field-names . g$11479$MT&Mo)
        (record-rtd . g$11478$MT&Mo)
        (record-field-mutable? . g$11477$MT&Mo)
        (delete-file . g$5653$MT&Mo)
        (file-exists? . g$5652$MT&Mo)
        (vector-sort! . g$11476$MT&Mo)
        (vector-sort . g$11475$MT&Mo)
        (list-sort . g$6215$MT&Mo)
        (symbol-hash . g$11474$MT&Mo)
        (string-ci-hash . g$11473$MT&Mo)
        (string-hash . g$11472$MT&Mo)
        (equal-hash . g$11471$MT&Mo)
        (hashtable-equivalence-function . g$11470$MT&Mo)
        (make-hashtable . g$11469$MT&Mo)
        (hashtable-hash-function . g$11468$MT&Mo)
        (make-eqv-hashtable . g$5621$MT&Mo)
        (make-eq-hashtable . g$5620$MT&Mo)
        (hashtable? . g$11467$MT&Mo)
        (hashtable-update! . g$5627$MT&Mo)
        (hashtable-size . g$5622$MT&Mo)
        (hashtable-set! . g$5624$MT&Mo)
        (hashtable-ref . g$5623$MT&Mo)
        (hashtable-mutable? . g$11466$MT&Mo)
        (hashtable-keys . g$11465$MT&Mo)
        (hashtable-entries . g$11464$MT&Mo)
        (hashtable-delete! . g$5625$MT&Mo)
        (hashtable-copy . g$11463$MT&Mo)
        (hashtable-contains? . g$5626$MT&Mo)
        (hashtable-clear! . g$5628$MT&Mo)
        (call-with-output-file . g$6546$MT&Mo)
        (call-with-input-file . g$6545$MT&Mo)
        (write-char . g$6537$MT&Mo)
        (write . g$11462$MT&Mo)
        (with-output-to-file . g$6544$MT&Mo)
        (with-input-from-file . g$6543$MT&Mo)
        (read-char . g$6536$MT&Mo)
        (read . g$11461$MT&Mo)
        (peek-char . g$6535$MT&Mo)
        (open-output-file . g$11460$MT&Mo)
        (open-input-file . g$11459$MT&Mo)
        (newline . g$6547$MT&Mo)
        (display . g$11458$MT&Mo)
        (close-output-port . g$11457$MT&Mo)
        (close-input-port . g$11456$MT&Mo)
        (eof-object? . g$11455$MT&Mo)
        (eof-object . g$11454$MT&Mo)
        (current-error-port . g$11453$MT&Mo)
        (current-output-port . g$11452$MT&Mo)
        (current-input-port . g$11451$MT&Mo)
        (output-port? . g$11450$MT&Mo)
        (input-port? . g$11449$MT&Mo)
        (utf-8-codec . g$11448$MT&Mo)
        (utf-16-codec . g$11447$MT&Mo)
        (transcoder-error-handling-mode . g$11446$MT&Mo)
        (transcoder-eol-style . g$11445$MT&Mo)
        (transcoder-codec . g$11444$MT&Mo)
        (transcoded-port . g$11443$MT&Mo)
        (textual-port? . g$11442$MT&Mo)
        (string->bytevector . g$11441$MT&Mo)
        (standard-output-port . g$11440$MT&Mo)
        (standard-input-port . g$11439$MT&Mo)
        (standard-error-port . g$11438$MT&Mo)
        (set-port-position! . g$11437$MT&Mo)
        (put-u8 . g$11436$MT&Mo)
        (put-string . g$11435$MT&Mo)
        (put-datum . g$6515$MT&Mo)
        (put-char . g$11434$MT&Mo)
        (put-bytevector . g$11433$MT&Mo)
        (port? . g$6520$MT&Mo)
        (port-transcoder . g$11432$MT&Mo)
        (port-position . g$11431$MT&Mo)
        (port-has-set-port-position!? . g$11430$MT&Mo)
        (port-has-port-position? . g$11429$MT&Mo)
        (port-eof? . g$11428$MT&Mo)
        (output-port-buffer-mode . g$11427$MT&Mo)
        (open-string-output-port . g$6519$MT&Mo)
        (open-string-input-port . g$11426$MT&Mo)
        (open-file-output-port . g$11425$MT&Mo)
        (open-file-input/output-port . g$11424$MT&Mo)
        (open-file-input-port . g$11423$MT&Mo)
        (open-bytevector-output-port . g$11422$MT&Mo)
        (open-bytevector-input-port . g$11421$MT&Mo)
        (native-transcoder . g$11420$MT&Mo)
        (native-eol-style . g$11419$MT&Mo)
        (make-transcoder . g$11418$MT&Mo)
        (latin-1-codec . g$11417$MT&Mo)
        (make-i/o-write-error . g$6025$MT&Mo)
        (make-i/o-read-error . g$6012$MT&Mo)
        (make-i/o-port-error . g$6120$MT&Mo)
        (make-i/o-invalid-position-error . g$6038$MT&Mo)
        (make-i/o-filename-error . g$6053$MT&Mo)
        (make-i/o-file-protection-error . g$6068$MT&Mo)
        (make-i/o-file-is-read-only-error . g$6081$MT&Mo)
        (make-i/o-file-does-not-exist-error . g$6107$MT&Mo)
        (make-i/o-file-already-exists-error . g$6094$MT&Mo)
        (make-i/o-error . g$5999$MT&Mo)
        (make-i/o-encoding-error . g$6148$MT&Mo)
        (make-i/o-decoding-error . g$6135$MT&Mo)
        (make-custom-textual-output-port . g$11416$MT&Mo)
        (make-custom-textual-input/output-port . g$11415$MT&Mo)
        (make-custom-textual-input-port . g$11414$MT&Mo)
        (make-custom-binary-output-port . g$11413$MT&Mo)
        (make-custom-binary-input/output-port . g$11412$MT&Mo)
        (make-custom-binary-input-port . g$11411$MT&Mo)
        (make-bytevector . g$11410$MT&Mo)
        (lookahead-u8 . g$11409$MT&Mo)
        (lookahead-char . g$11408$MT&Mo)
        (i/o-write-error? . g$6026$MT&Mo)
        (i/o-read-error? . g$6013$MT&Mo)
        (i/o-port-error? . g$6122$MT&Mo)
        (i/o-invalid-position-error? . g$6040$MT&Mo)
        (i/o-error-position . g$6041$MT&Mo)
        (i/o-filename-error? . g$6055$MT&Mo)
        (i/o-file-protection-error? . g$6069$MT&Mo)
        (i/o-file-is-read-only-error? . g$6082$MT&Mo)
        (i/o-file-does-not-exist-error? . g$6108$MT&Mo)
        (i/o-file-already-exists-error? . g$6095$MT&Mo)
        (i/o-error? . g$6000$MT&Mo)
        (i/o-error-port . g$6123$MT&Mo)
        (i/o-error-filename . g$6056$MT&Mo)
        (i/o-encoding-error? . g$6150$MT&Mo)
        (i/o-encoding-error-char . g$6151$MT&Mo)
        (i/o-decoding-error? . g$6136$MT&Mo)
        (get-u8 . g$11407$MT&Mo)
        (get-string-n! . g$11406$MT&Mo)
        (get-string-n . g$11405$MT&Mo)
        (get-string-all . g$11404$MT&Mo)
        (get-line . g$11403$MT&Mo)
        (get-datum . g$6516$MT&Mo)
        (get-char . g$11402$MT&Mo)
        (get-bytevector-some . g$11401$MT&Mo)
        (get-bytevector-n! . g$11400$MT&Mo)
        (get-bytevector-n . g$11399$MT&Mo)
        (get-bytevector-all . g$11398$MT&Mo)
        (flush-output-port . g$11397$MT&Mo)
        (close-port . g$11396$MT&Mo)
        (call-with-string-output-port . g$6521$MT&Mo)
        (call-with-port . g$6522$MT&Mo)
        (call-with-bytevector-output-port . g$11395$MT&Mo)
        (bytevector->string . g$11394$MT&Mo)
        (buffer-mode? . g$11393$MT&Mo)
        (binary-port? . g$11392$MT&Mo)
        (exit . g$11391$MT&Mo)
        (command-line . g$11017$MT&Mo)
        (remove . g$5064$MT&Mo)
        (remv . g$5065$MT&Mo)
        (remp . g$5045$MT&Mo)
        (remq . g$5066$MT&Mo)
        (partition . g$5044$MT&Mo)
        (memv . g$5052$MT&Mo)
        (memq . g$5051$MT&Mo)
        (memp . g$5054$MT&Mo)
        (member . g$5053$MT&Mo)
        (exists . g$5058$MT&Mo)
        (for-all . g$5057$MT&Mo)
        (fold-right . g$5063$MT&Mo)
        (fold-left . g$5062$MT&Mo)
        (find . g$5043$MT&Mo)
        (filter . g$5046$MT&Mo)
        (cons* . g$5061$MT&Mo)
        (assv . g$5048$MT&Mo)
        (assq . g$5047$MT&Mo)
        (assp . g$5050$MT&Mo)
        (assoc . g$5049$MT&Mo)
        (with-exception-handler . g$11386$MT&Mo)
        (raise-continuable . g$11385$MT&Mo)
        (raise . g$11384$MT&Mo)
        (make-enumeration . g$6607$MT&Mo)
        (enum-set=? . g$6614$MT&Mo)
        (enum-set-universe . g$6608$MT&Mo)
        (enum-set-union . g$6615$MT&Mo)
        (enum-set-subset? . g$6613$MT&Mo)
        (enum-set-projection . g$6619$MT&Mo)
        (enum-set-member? . g$6612$MT&Mo)
        (enum-set-intersection . g$6616$MT&Mo)
        (enum-set-indexer . g$6609$MT&Mo)
        (enum-set-difference . g$6617$MT&Mo)
        (enum-set-constructor . g$6610$MT&Mo)
        (enum-set-complement . g$6618$MT&Mo)
        (enum-set->list . g$6611$MT&Mo)
        (who-condition? . g$5917$MT&Mo)
        (warning? . g$5836$MT&Mo)
        (violation? . g$5875$MT&Mo)
        (undefined-violation? . g$5987$MT&Mo)
        (syntax-violation? . g$5972$MT&Mo)
        (syntax-violation-subform . g$5974$MT&Mo)
        (syntax-violation-form . g$5973$MT&Mo)
        (syntax-violation . g$8036$MT&Mo)
        (simple-conditions . g$11383$MT&Mo)
        (serious-condition? . g$5849$MT&Mo)
        (non-continuable-violation? . g$5931$MT&Mo)
        (message-condition? . g$5822$MT&Mo)
        (make-who-condition . g$5915$MT&Mo)
        (make-warning . g$5835$MT&Mo)
        (make-violation . g$5874$MT&Mo)
        (make-undefined-violation . g$5986$MT&Mo)
        (make-syntax-violation . g$5969$MT&Mo)
        (make-serious-condition . g$5848$MT&Mo)
        (make-non-continuable-violation . g$5930$MT&Mo)
        (make-message-condition . g$5820$MT&Mo)
        (make-lexical-violation . g$5956$MT&Mo)
        (make-irritants-condition . g$5900$MT&Mo)
        (make-implementation-restriction-violation . g$5943$MT&Mo)
        (make-error . g$5861$MT&Mo)
        (make-assertion-violation . g$5887$MT&Mo)
        (lexical-violation? . g$5957$MT&Mo)
        (irritants-condition? . g$5902$MT&Mo)
        (implementation-restriction-violation? . g$5944$MT&Mo)
        (error? . g$5862$MT&Mo)
        (condition-who . g$5918$MT&Mo)
        (condition-predicate . g$11382$MT&Mo)
        (condition-message . g$5823$MT&Mo)
        (condition-irritants . g$5903$MT&Mo)
        (condition-accessor . g$11381$MT&Mo)
        (condition . g$11380$MT&Mo)
        (assertion-violation? . g$5888$MT&Mo)
        (condition? . g$11379$MT&Mo)
        (utf32->string . g$11378$MT&Mo)
        (utf16->string . g$11377$MT&Mo)
        (utf8->string . g$11376$MT&Mo)
        (uint-list->bytevector . g$11375$MT&Mo)
        (u8-list->bytevector . g$11374$MT&Mo)
        (string->utf8 . g$11373$MT&Mo)
        (string->utf32 . g$11372$MT&Mo)
        (string->utf16 . g$11371$MT&Mo)
        (sint-list->bytevector . g$11370$MT&Mo)
        (native-endianness . g$5659$MT&Mo)
        (bytevector? . g$5363$MT&Mo)
        (bytevector=? . g$11369$MT&Mo)
        (bytevector-uint-set! . g$11368$MT&Mo)
        (bytevector-uint-ref . g$11367$MT&Mo)
        (bytevector-u8-set! . g$11366$MT&Mo)
        (bytevector-u8-ref . g$11365$MT&Mo)
        (bytevector-u64-set! . g$5680$MT&Mo)
        (bytevector-u64-ref . g$5676$MT&Mo)
        (bytevector-u64-native-set! . g$5682$MT&Mo)
        (bytevector-u64-native-ref . g$5678$MT&Mo)
        (bytevector-u32-set! . g$5672$MT&Mo)
        (bytevector-u32-ref . g$5668$MT&Mo)
        (bytevector-u32-native-set! . g$5674$MT&Mo)
        (bytevector-u32-native-ref . g$5670$MT&Mo)
        (bytevector-u16-set! . g$5664$MT&Mo)
        (bytevector-u16-ref . g$5660$MT&Mo)
        (bytevector-u16-native-set! . g$5666$MT&Mo)
        (bytevector-u16-native-ref . g$5662$MT&Mo)
        (bytevector-sint-set! . g$11364$MT&Mo)
        (bytevector-sint-ref . g$11363$MT&Mo)
        (bytevector-s8-set! . g$11362$MT&Mo)
        (bytevector-s8-ref . g$11361$MT&Mo)
        (bytevector-s64-set! . g$5681$MT&Mo)
        (bytevector-s64-ref . g$5677$MT&Mo)
        (bytevector-s64-native-set! . g$5683$MT&Mo)
        (bytevector-s64-native-ref . g$5679$MT&Mo)
        (bytevector-s32-set! . g$5673$MT&Mo)
        (bytevector-s32-ref . g$5669$MT&Mo)
        (bytevector-s32-native-set! . g$5675$MT&Mo)
        (bytevector-s32-native-ref . g$5671$MT&Mo)
        (bytevector-s16-set! . g$5665$MT&Mo)
        (bytevector-s16-ref . g$5661$MT&Mo)
        (bytevector-s16-native-set! . g$5667$MT&Mo)
        (bytevector-s16-native-ref . g$5663$MT&Mo)
        (bytevector-length . g$11360$MT&Mo)
        (bytevector-ieee-single-set! . g$11359$MT&Mo)
        (bytevector-ieee-single-ref . g$11358$MT&Mo)
        (bytevector-ieee-single-native-set! . g$5686$MT&Mo)
        (bytevector-ieee-single-native-ref . g$5684$MT&Mo)
        (bytevector-ieee-double-set! . g$11357$MT&Mo)
        (bytevector-ieee-double-ref . g$11356$MT&Mo)
        (bytevector-ieee-double-native-set! . g$5687$MT&Mo)
        (bytevector-ieee-double-native-ref . g$5685$MT&Mo)
        (bytevector-fill! . g$11355$MT&Mo)
        (bytevector-copy! . g$11354$MT&Mo)
        (bytevector-copy . g$11353$MT&Mo)
        (bytevector->uint-list . g$11352$MT&Mo)
        (bytevector->u8-list . g$11351$MT&Mo)
        (bytevector->sint-list . g$11350$MT&Mo)
        (no-nans-violation? . g$6177$MT&Mo)
        (no-infinities-violation? . g$6164$MT&Mo)
        (make-no-nans-violation . g$6176$MT&Mo)
        (make-no-infinities-violation . g$6163$MT&Mo)
        (real->flonum . g$11349$MT&Mo)
        (flzero? . g$6461$MT&Mo)
        (fltruncate . g$6456$MT&Mo)
        (fltan . g$6446$MT&Mo)
        (flsqrt . g$6451$MT&Mo)
        (flsin . g$6444$MT&Mo)
        (flround . g$6457$MT&Mo)
        (flpositive? . g$6459$MT&Mo)
        (flonum? . g$5368$MT&Mo)
        (flodd? . g$6463$MT&Mo)
        (flnumerator . g$11348$MT&Mo)
        (flnegative? . g$6460$MT&Mo)
        (flnan? . g$6443$MT&Mo)
        (flmod0 . g$6437$MT&Mo)
        (flmod . g$6436$MT&Mo)
        (flmin . g$6465$MT&Mo)
        (flmax . g$6464$MT&Mo)
        (fllog . g$6450$MT&Mo)
        (flinteger? . g$6440$MT&Mo)
        (flinfinite? . g$6442$MT&Mo)
        (flfloor . g$6455$MT&Mo)
        (flfinite? . g$6441$MT&Mo)
        (flexpt . g$6453$MT&Mo)
        (flexp . g$6452$MT&Mo)
        (fleven? . g$6462$MT&Mo)
        (fldiv0-and-mod0 . g$6439$MT&Mo)
        (fldiv0 . g$11347$MT&Mo)
        (fldiv-and-mod . g$6438$MT&Mo)
        (fldiv . g$11346$MT&Mo)
        (fldenominator . g$11345$MT&Mo)
        (flcos . g$6445$MT&Mo)
        (flceiling . g$6454$MT&Mo)
        (flatan . g$6449$MT&Mo)
        (flasin . g$6447$MT&Mo)
        (flacos . g$6448$MT&Mo)
        (flabs . g$6458$MT&Mo)
        (fl>? . g$11344$MT&Mo)
        (fl>=? . g$11343$MT&Mo)
        (fl=? . g$11342$MT&Mo)
        (fl<? . g$11341$MT&Mo)
        (fl<=? . g$11340$MT&Mo)
        (fl/ . g$11339$MT&Mo)
        (fl- . g$11338$MT&Mo)
        (fl+ . g$11337$MT&Mo)
        (fl* . g$11336$MT&Mo)
        (fixnum->flonum . g$11335$MT&Mo)
        (fxzero? . g$6358$MT&Mo)
        (fxxor . g$11334$MT&Mo)
        (fxrotate-bit-field . g$6372$MT&Mo)
        (fxreverse-bit-field . g$11333$MT&Mo)
        (fxpositive? . g$6356$MT&Mo)
        (fxodd? . g$6360$MT&Mo)
        (fxnot . g$11332$MT&Mo)
        (fxnegative? . g$6357$MT&Mo)
        (fxmod0 . g$6353$MT&Mo)
        (fxmod . g$6352$MT&Mo)
        (fxmin . g$6362$MT&Mo)
        (fxmax . g$6361$MT&Mo)
        (fxlength . g$11331$MT&Mo)
        (fxior . g$11330$MT&Mo)
        (fxif . g$6366$MT&Mo)
        (fxfirst-bit-set . g$11329$MT&Mo)
        (fxeven? . g$6359$MT&Mo)
        (fxdiv0-and-mod0 . g$6355$MT&Mo)
        (fxdiv0 . g$11328$MT&Mo)
        (fxdiv-and-mod . g$6354$MT&Mo)
        (fxdiv . g$11327$MT&Mo)
        (fxcopy-bit-field . g$6369$MT&Mo)
        (fxcopy-bit . g$6367$MT&Mo)
        (fxbit-set? . g$11326$MT&Mo)
        (fxbit-field . g$6368$MT&Mo)
        (fxbit-count . g$11325$MT&Mo)
        (fxarithmetic-shift-right . g$6371$MT&Mo)
        (fxarithmetic-shift-left . g$6370$MT&Mo)
        (fxarithmetic-shift . g$11324$MT&Mo)
        (fxand . g$11323$MT&Mo)
        (fx>? . g$11322$MT&Mo)
        (fx>=? . g$11321$MT&Mo)
        (fx=? . g$11320$MT&Mo)
        (fx<? . g$11319$MT&Mo)
        (fx<=? . g$11318$MT&Mo)
        (fx-/carry . g$6364$MT&Mo)
        (fx- . g$11317$MT&Mo)
        (fx+/carry . g$6365$MT&Mo)
        (fx+ . g$11316$MT&Mo)
        (fx*/carry . g$6363$MT&Mo)
        (fx* . g$11315$MT&Mo)
        (greatest-fixnum . g$11314$MT&Mo)
        (least-fixnum . g$11313$MT&Mo)
        (fixnum-width . g$5369$MT&Mo)
        (fixnum? . g$5367$MT&Mo)
        (bitwise-rotate-bit-field . g$6326$MT&Mo)
        (bitwise-reverse-bit-field . g$11312$MT&Mo)
        (bitwise-length . g$11311$MT&Mo)
        (bitwise-if . g$6320$MT&Mo)
        (bitwise-first-bit-set . g$11310$MT&Mo)
        (bitwise-copy-bit-field . g$6323$MT&Mo)
        (bitwise-copy-bit . g$6321$MT&Mo)
        (bitwise-bit-set? . g$11309$MT&Mo)
        (bitwise-bit-field . g$6322$MT&Mo)
        (bitwise-bit-count . g$11308$MT&Mo)
        (bitwise-xor . g$11307$MT&Mo)
        (bitwise-ior . g$11306$MT&Mo)
        (bitwise-and . g$11305$MT&Mo)
        (bitwise-not . g$11304$MT&Mo)
        (bitwise-arithmetic-shift-right . g$6325$MT&Mo)
        (bitwise-arithmetic-shift-left . g$6324$MT&Mo)
        (bitwise-arithmetic-shift . g$11303$MT&Mo)
        (zero? . g$5402$MT&Mo)
        (vector? . g$5362$MT&Mo)
        (vector-set! . g$11302$MT&Mo)
        (vector-ref . g$11301$MT&Mo)
        (vector-map . g$5434$MT&Mo)
        (vector-length . g$11300$MT&Mo)
        (vector-for-each . g$5435$MT&Mo)
        (vector-fill! . g$5370$MT&Mo)
        (vector->list . g$11299$MT&Mo)
        (vector . g$11298$MT&Mo)
        (values . g$11297$MT&Mo)
        (truncate . g$11296$MT&Mo)
        (tan . g$11295$MT&Mo)
        (symbol? . g$5364$MT&Mo)
        (symbol=? . g$5419$MT&Mo)
        (symbol->string . g$11294$MT&Mo)
        (substring . g$11293$MT&Mo)
        (string? . g$11292$MT&Mo)
        (string>? . g$5416$MT&Mo)
        (string>=? . g$5418$MT&Mo)
        (string=? . g$5414$MT&Mo)
        (string<? . g$5415$MT&Mo)
        (string<=? . g$5417$MT&Mo)
        (string-ref . g$11291$MT&Mo)
        (string-length . g$11290$MT&Mo)
        (string-for-each . g$5436$MT&Mo)
        (string-copy . g$11289$MT&Mo)
        (string-append . g$11288$MT&Mo)
        (string->symbol . g$11287$MT&Mo)
        (string->number . g$11286$MT&Mo)
        (string->list . g$11285$MT&Mo)
        (string . g$11284$MT&Mo)
        (sqrt . g$11283$MT&Mo)
        (sin . g$11282$MT&Mo)
        (round . g$11281$MT&Mo)
        (reverse . g$5371$MT&Mo)
        (real? . g$11280$MT&Mo)
        (real-valued? . g$11279$MT&Mo)
        (real-part . g$11278$MT&Mo)
        (rationalize . g$5431$MT&Mo)
        (rational? . g$11277$MT&Mo)
        (rational-valued? . g$11276$MT&Mo)
        (procedure? . g$5366$MT&Mo)
        (positive? . g$5400$MT&Mo)
        (pair? . g$11275$MT&Mo)
        (odd? . g$5404$MT&Mo)
        (numerator . g$11274$MT&Mo)
        (number? . g$11273$MT&Mo)
        (number->string . g$11272$MT&Mo)
        (null? . g$11271$MT&Mo)
        (not . g$11270$MT&Mo)
        (negative? . g$5401$MT&Mo)
        (nan? . g$11269$MT&Mo)
        (min . g$5406$MT&Mo)
        (max . g$5405$MT&Mo)
        (map . g$5059$MT&Mo)
        (make-vector . g$11268$MT&Mo)
        (make-string . g$11267$MT&Mo)
        (make-rectangular . g$11266$MT&Mo)
        (make-polar . g$11265$MT&Mo)
        (magnitude . g$11264$MT&Mo)
        (log . g$11263$MT&Mo)
        (list? . g$11262$MT&Mo)
        (list-tail . g$5039$MT&Mo)
        (list-ref . g$5040$MT&Mo)
        (list->vector . g$5359$MT&Mo)
        (list->string . g$5360$MT&Mo)
        (list . g$11261$MT&Mo)
        (length . g$11260$MT&Mo)
        (lcm . g$5408$MT&Mo)
        (integer? . g$11259$MT&Mo)
        (integer-valued? . g$11258$MT&Mo)
        (integer->char . g$11257$MT&Mo)
        (infinite? . g$11256$MT&Mo)
        (inexact? . g$11255$MT&Mo)
        (inexact . g$11254$MT&Mo)
        (imag-part . g$11253$MT&Mo)
        (gcd . g$5407$MT&Mo)
        (for-each . g$5060$MT&Mo)
        (floor . g$11252$MT&Mo)
        (finite? . g$11251$MT&Mo)
        (expt . g$11250$MT&Mo)
        (exp . g$11249$MT&Mo)
        (exact? . g$11248$MT&Mo)
        (exact-integer-sqrt . g$11247$MT&Mo)
        (exact . g$11246$MT&Mo)
        (even? . g$5403$MT&Mo)
        (error . g$11245$MT&Mo)
        (eqv? . g$11244$MT&Mo)
        (equal? . g$11243$MT&Mo)
        (eq? . g$11242$MT&Mo)
        (dynamic-wind . g$11241$MT&Mo)
        (div0-and-mod0 . g$5358$MT&Mo)
        (mod0 . g$5356$MT&Mo)
        (div0 . g$11240$MT&Mo)
        (div-and-mod . g$5357$MT&Mo)
        (mod . g$5355$MT&Mo)
        (div . g$11239$MT&Mo)
        (denominator . g$11238$MT&Mo)
        (cos . g$11237$MT&Mo)
        (cons . g$11236$MT&Mo)
        (complex? . g$11235$MT&Mo)
        (char? . g$5361$MT&Mo)
        (char>? . g$5428$MT&Mo)
        (char>=? . g$5430$MT&Mo)
        (char=? . g$5426$MT&Mo)
        (char<? . g$5427$MT&Mo)
        (char<=? . g$5429$MT&Mo)
        (char->integer . g$11234$MT&Mo)
        (ceiling . g$11233$MT&Mo)
        (call-with-values . g$11232$MT&Mo)
        (call/cc . g$11231$MT&Mo)
        (call-with-current-continuation . g$11230$MT&Mo)
        (cddddr . g$5399$MT&Mo)
        (cdddar . g$5398$MT&Mo)
        (cddadr . g$5397$MT&Mo)
        (cddaar . g$5396$MT&Mo)
        (cdaddr . g$5395$MT&Mo)
        (cdadar . g$5394$MT&Mo)
        (cdaadr . g$5393$MT&Mo)
        (cdaaar . g$5392$MT&Mo)
        (cadddr . g$5391$MT&Mo)
        (caddar . g$5390$MT&Mo)
        (cadadr . g$5389$MT&Mo)
        (cadaar . g$5388$MT&Mo)
        (caaddr . g$5387$MT&Mo)
        (caadar . g$5386$MT&Mo)
        (caaadr . g$5385$MT&Mo)
        (caaaar . g$5384$MT&Mo)
        (cdddr . g$5383$MT&Mo)
        (cddar . g$5382$MT&Mo)
        (cdadr . g$5381$MT&Mo)
        (cdaar . g$5380$MT&Mo)
        (caddr . g$5379$MT&Mo)
        (cadar . g$5378$MT&Mo)
        (caadr . g$5377$MT&Mo)
        (caaar . g$5376$MT&Mo)
        (cddr . g$5375$MT&Mo)
        (cdar . g$5374$MT&Mo)
        (cadr . g$5373$MT&Mo)
        (caar . g$5372$MT&Mo)
        (cdr . g$11229$MT&Mo)
        (car . g$11228$MT&Mo)
        (boolean? . g$5365$MT&Mo)
        (boolean=? . g$5420$MT&Mo)
        (atan . g$11227$MT&Mo)
        (assertion-violation . g$11226$MT&Mo)
        (asin . g$11225$MT&Mo)
        (apply . g$11224$MT&Mo)
        (append . g$11223$MT&Mo)
        (angle . g$11222$MT&Mo)
        (acos . g$11221$MT&Mo)
        (abs . g$11220$MT&Mo)
        (/ . g$11219$MT&Mo)
        (* . g$11218$MT&Mo)
        (- . g$11217$MT&Mo)
        (+ . g$11216$MT&Mo)
        (>= . g$11215$MT&Mo)
        (> . g$11214$MT&Mo)
        (= . g$11213$MT&Mo)
        (<= . g$11212$MT&Mo)
        (< . g$11211$MT&Mo)
        (&no-nans . g$11178$MT&Mo)
        (&no-infinities . g$11177$MT&Mo)
        (&i/o-encoding . g$11176$MT&Mo)
        (&i/o-decoding . g$11175$MT&Mo)
        (&i/o-port . g$11174$MT&Mo)
        (&i/o-file-does-not-exist . g$11173$MT&Mo)
        (&i/o-file-already-exists . g$11172$MT&Mo)
        (&i/o-file-is-read-only . g$11171$MT&Mo)
        (&i/o-file-protection . g$11170$MT&Mo)
        (&i/o-filename . g$11169$MT&Mo)
        (&i/o-invalid-position . g$11168$MT&Mo)
        (&i/o-write . g$11167$MT&Mo)
        (&i/o-read . g$11166$MT&Mo)
        (&i/o . g$11165$MT&Mo)
        (&non-continuable . g$11164$MT&Mo)
        (&undefined . g$11163$MT&Mo)
        (&syntax . g$11162$MT&Mo)
        (&lexical . g$11161$MT&Mo)
        (&implementation-restriction . g$11160$MT&Mo)
        (&who . g$11159$MT&Mo)
        (&irritants . g$11158$MT&Mo)
        (&assertion . g$11157$MT&Mo)
        (&violation . g$11156$MT&Mo)
        (&error . g$11155$MT&Mo)
        (&serious . g$11154$MT&Mo)
        (&warning . g$11153$MT&Mo)
        (&message . g$11152$MT&Mo)
        (&condition . g$11151$MT&Mo)
        (define-condition-type . g$11150$MT&Mo)
        (define-enumeration . g$11149$MT&Mo)
        (define-record-type . g$11148$MT&Mo)
        (parent-rtd . g$11147$MT&Mo)
        (nongenerative . g$11146$MT&Mo)
        (opaque . g$11145$MT&Mo)
        (sealed . g$11144$MT&Mo)
        (protocol . g$11143$MT&Mo)
        (parent . g$11142$MT&Mo)
        (immutable . g$11141$MT&Mo)
        (mutable . g$11140$MT&Mo)
        (fields . g$11139$MT&Mo)
        (error-handling-mode . g$11138$MT&Mo)
        (file-options . g$11137$MT&Mo)
        (buffer-mode . g$11136$MT&Mo)
        (eol-style . g$11135$MT&Mo)
        (guard . g$11134$MT&Mo)
        (unsyntax-splicing . g$11128$MT&Mo)
        (unsyntax . g$11127$MT&Mo)
        (unquote-splicing . g$11126$MT&Mo)
        (unquote . g$11125$MT&Mo)
        (_ . g$11124$MT&Mo)
        (else . g$11123$MT&Mo)
        (=> . g$11122$MT&Mo)
        (... . g$11121$MT&Mo)
        (assert . g$11120$MT&Mo)
        (endianness . g$11119$MT&Mo)
        (or . g$11116$MT&Mo)
        (and . g$11115$MT&Mo)
        (do . g$11114$MT&Mo)
        (cond . g$11113$MT&Mo)
        (let* . g$11112$MT&Mo)
        (let . g$11111$MT&Mo)
        (identifier-syntax . g$11110$MT&Mo)
        (with-syntax . g$11109$MT&Mo)
        (quasisyntax . g$11108$MT&Mo)
        (quasiquote . g$11107$MT&Mo)
        (syntax-rules . g$11106$MT&Mo)
        (let-values . g$11102$MT&Mo)
        (let*-values . g$11101$MT&Mo)
        (record-constructor-descriptor . g$11100$MT&Mo)
        (record-type-descriptor . g$11099$MT&Mo)
        (case . g$11097$MT&Mo)
        (unless . g$11095$MT&Mo)
        (when . g$11094$MT&Mo)
        (if . g$11093$MT&Mo)
        (letrec* . g$11092$MT&Mo)
        (letrec . g$11091$MT&Mo)
        (case-lambda . g$11089$MT&Mo)
        (lambda . g$11088$MT&Mo)
        (syntax . g$11087$MT&Mo)
        (syntax-case . g$11086$MT&Mo)
        (quote . g$11085$MT&Mo)
        (letrec-syntax . g$11083$MT&Mo)
        (let-syntax . g$11082$MT&Mo)
        (set! . g$11081$MT&Mo)
        (begin . g$11077$MT&Mo)
        (define-syntax . g$11075$MT&Mo)
        (define . g$11074$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11556$MT&Mo
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((scheme-report-environment . g$8016$MT&Mo)
        (quotient . g$6194$MT&Mo)
        (null-environment . g$8015$MT&Mo)
        (remainder . g$6195$MT&Mo)
        (modulo . g$6196$MT&Mo)
        (inexact->exact . g$6191$MT&Mo)
        (force . g$6198$MT&Mo)
        (exact->inexact . g$6192$MT&Mo)
        (delay . g$11118$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11557$MT&Mo
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11114$MT&Mo)
        (unless . g$11095$MT&Mo)
        (when . g$11094$MT&Mo)
        (case-lambda . g$11089$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11558$MT&Mo
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8018$MT&Mo) (environment . g$8014$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11559$MT&Mo
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$11388$MT&Mo) (set-car! . g$11387$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11560$MT&Mo
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$11390$MT&Mo) (string-set! . g$11389$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11561$MT&Mo
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$11391$MT&Mo) (command-line . g$11017$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11562$MT&Mo
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$7718$MT&Mo)
        (identifier? . g$8037$MT&Mo)
        (generate-temporaries . g$8026$MT&Mo)
        (free-identifier=? . g$8027$MT&Mo)
        (syntax->datum . g$8039$MT&Mo)
        (datum->syntax . g$8038$MT&Mo)
        (bound-identifier=? . g$8028$MT&Mo)
        (syntax-violation . g$8036$MT&Mo)
        (unsyntax-splicing . g$11128$MT&Mo)
        (unsyntax . g$11127$MT&Mo)
        (_ . g$11124$MT&Mo)
        (... . g$11121$MT&Mo)
        (with-syntax . g$11109$MT&Mo)
        (quasisyntax . g$11108$MT&Mo)
        (syntax . g$11087$MT&Mo)
        (syntax-case . g$11086$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11563$MT&Mo
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$5653$MT&Mo)
        (file-exists? . g$5652$MT&Mo)
        (make-i/o-write-error . g$6025$MT&Mo)
        (make-i/o-read-error . g$6012$MT&Mo)
        (make-i/o-port-error . g$6120$MT&Mo)
        (make-i/o-invalid-position-error . g$6038$MT&Mo)
        (make-i/o-filename-error . g$6053$MT&Mo)
        (make-i/o-file-protection-error . g$6068$MT&Mo)
        (make-i/o-file-is-read-only-error . g$6081$MT&Mo)
        (make-i/o-file-does-not-exist-error . g$6107$MT&Mo)
        (make-i/o-file-already-exists-error . g$6094$MT&Mo)
        (make-i/o-error . g$5999$MT&Mo)
        (i/o-write-error? . g$6026$MT&Mo)
        (i/o-read-error? . g$6013$MT&Mo)
        (i/o-port-error? . g$6122$MT&Mo)
        (i/o-invalid-position-error? . g$6040$MT&Mo)
        (i/o-error-position . g$6041$MT&Mo)
        (i/o-filename-error? . g$6055$MT&Mo)
        (i/o-file-protection-error? . g$6069$MT&Mo)
        (i/o-file-is-read-only-error? . g$6082$MT&Mo)
        (i/o-file-does-not-exist-error? . g$6108$MT&Mo)
        (i/o-file-already-exists-error? . g$6095$MT&Mo)
        (i/o-error? . g$6000$MT&Mo)
        (i/o-error-port . g$6123$MT&Mo)
        (i/o-error-filename . g$6056$MT&Mo)
        (&i/o-port . g$11174$MT&Mo)
        (&i/o-file-does-not-exist . g$11173$MT&Mo)
        (&i/o-file-already-exists . g$11172$MT&Mo)
        (&i/o-file-is-read-only . g$11171$MT&Mo)
        (&i/o-file-protection . g$11170$MT&Mo)
        (&i/o-filename . g$11169$MT&Mo)
        (&i/o-invalid-position . g$11168$MT&Mo)
        (&i/o-write . g$11167$MT&Mo)
        (&i/o-read . g$11166$MT&Mo)
        (&i/o . g$11165$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11564$MT&Mo
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$11476$MT&Mo)
        (vector-sort . g$11475$MT&Mo)
        (list-sort . g$6215$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11565$MT&Mo
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$5402$MT&Mo)
        (vector? . g$5362$MT&Mo)
        (vector-set! . g$11302$MT&Mo)
        (vector-ref . g$11301$MT&Mo)
        (vector-map . g$5434$MT&Mo)
        (vector-length . g$11300$MT&Mo)
        (vector-for-each . g$5435$MT&Mo)
        (vector-fill! . g$5370$MT&Mo)
        (vector->list . g$11299$MT&Mo)
        (vector . g$11298$MT&Mo)
        (values . g$11297$MT&Mo)
        (truncate . g$11296$MT&Mo)
        (tan . g$11295$MT&Mo)
        (symbol? . g$5364$MT&Mo)
        (symbol=? . g$5419$MT&Mo)
        (symbol->string . g$11294$MT&Mo)
        (substring . g$11293$MT&Mo)
        (string? . g$11292$MT&Mo)
        (string>? . g$5416$MT&Mo)
        (string>=? . g$5418$MT&Mo)
        (string=? . g$5414$MT&Mo)
        (string<? . g$5415$MT&Mo)
        (string<=? . g$5417$MT&Mo)
        (string-ref . g$11291$MT&Mo)
        (string-length . g$11290$MT&Mo)
        (string-for-each . g$5436$MT&Mo)
        (string-copy . g$11289$MT&Mo)
        (string-append . g$11288$MT&Mo)
        (string->symbol . g$11287$MT&Mo)
        (string->number . g$11286$MT&Mo)
        (string->list . g$11285$MT&Mo)
        (string . g$11284$MT&Mo)
        (sqrt . g$11283$MT&Mo)
        (sin . g$11282$MT&Mo)
        (round . g$11281$MT&Mo)
        (reverse . g$5371$MT&Mo)
        (real? . g$11280$MT&Mo)
        (real-valued? . g$11279$MT&Mo)
        (real-part . g$11278$MT&Mo)
        (rationalize . g$5431$MT&Mo)
        (rational? . g$11277$MT&Mo)
        (rational-valued? . g$11276$MT&Mo)
        (procedure? . g$5366$MT&Mo)
        (positive? . g$5400$MT&Mo)
        (pair? . g$11275$MT&Mo)
        (odd? . g$5404$MT&Mo)
        (numerator . g$11274$MT&Mo)
        (number? . g$11273$MT&Mo)
        (number->string . g$11272$MT&Mo)
        (null? . g$11271$MT&Mo)
        (not . g$11270$MT&Mo)
        (negative? . g$5401$MT&Mo)
        (nan? . g$11269$MT&Mo)
        (min . g$5406$MT&Mo)
        (max . g$5405$MT&Mo)
        (map . g$5059$MT&Mo)
        (make-vector . g$11268$MT&Mo)
        (make-string . g$11267$MT&Mo)
        (make-rectangular . g$11266$MT&Mo)
        (make-polar . g$11265$MT&Mo)
        (magnitude . g$11264$MT&Mo)
        (log . g$11263$MT&Mo)
        (list? . g$11262$MT&Mo)
        (list-tail . g$5039$MT&Mo)
        (list-ref . g$5040$MT&Mo)
        (list->vector . g$5359$MT&Mo)
        (list->string . g$5360$MT&Mo)
        (list . g$11261$MT&Mo)
        (length . g$11260$MT&Mo)
        (lcm . g$5408$MT&Mo)
        (integer? . g$11259$MT&Mo)
        (integer-valued? . g$11258$MT&Mo)
        (integer->char . g$11257$MT&Mo)
        (infinite? . g$11256$MT&Mo)
        (inexact? . g$11255$MT&Mo)
        (inexact . g$11254$MT&Mo)
        (imag-part . g$11253$MT&Mo)
        (gcd . g$5407$MT&Mo)
        (for-each . g$5060$MT&Mo)
        (floor . g$11252$MT&Mo)
        (finite? . g$11251$MT&Mo)
        (expt . g$11250$MT&Mo)
        (exp . g$11249$MT&Mo)
        (exact? . g$11248$MT&Mo)
        (exact-integer-sqrt . g$11247$MT&Mo)
        (exact . g$11246$MT&Mo)
        (even? . g$5403$MT&Mo)
        (error . g$11245$MT&Mo)
        (eqv? . g$11244$MT&Mo)
        (equal? . g$11243$MT&Mo)
        (eq? . g$11242$MT&Mo)
        (dynamic-wind . g$11241$MT&Mo)
        (div0-and-mod0 . g$5358$MT&Mo)
        (mod0 . g$5356$MT&Mo)
        (div0 . g$11240$MT&Mo)
        (div-and-mod . g$5357$MT&Mo)
        (mod . g$5355$MT&Mo)
        (div . g$11239$MT&Mo)
        (denominator . g$11238$MT&Mo)
        (cos . g$11237$MT&Mo)
        (cons . g$11236$MT&Mo)
        (complex? . g$11235$MT&Mo)
        (char? . g$5361$MT&Mo)
        (char>? . g$5428$MT&Mo)
        (char>=? . g$5430$MT&Mo)
        (char=? . g$5426$MT&Mo)
        (char<? . g$5427$MT&Mo)
        (char<=? . g$5429$MT&Mo)
        (char->integer . g$11234$MT&Mo)
        (ceiling . g$11233$MT&Mo)
        (call-with-values . g$11232$MT&Mo)
        (call/cc . g$11231$MT&Mo)
        (call-with-current-continuation . g$11230$MT&Mo)
        (cddddr . g$5399$MT&Mo)
        (cdddar . g$5398$MT&Mo)
        (cddadr . g$5397$MT&Mo)
        (cddaar . g$5396$MT&Mo)
        (cdaddr . g$5395$MT&Mo)
        (cdadar . g$5394$MT&Mo)
        (cdaadr . g$5393$MT&Mo)
        (cdaaar . g$5392$MT&Mo)
        (cadddr . g$5391$MT&Mo)
        (caddar . g$5390$MT&Mo)
        (cadadr . g$5389$MT&Mo)
        (cadaar . g$5388$MT&Mo)
        (caaddr . g$5387$MT&Mo)
        (caadar . g$5386$MT&Mo)
        (caaadr . g$5385$MT&Mo)
        (caaaar . g$5384$MT&Mo)
        (cdddr . g$5383$MT&Mo)
        (cddar . g$5382$MT&Mo)
        (cdadr . g$5381$MT&Mo)
        (cdaar . g$5380$MT&Mo)
        (caddr . g$5379$MT&Mo)
        (cadar . g$5378$MT&Mo)
        (caadr . g$5377$MT&Mo)
        (caaar . g$5376$MT&Mo)
        (cddr . g$5375$MT&Mo)
        (cdar . g$5374$MT&Mo)
        (cadr . g$5373$MT&Mo)
        (caar . g$5372$MT&Mo)
        (cdr . g$11229$MT&Mo)
        (car . g$11228$MT&Mo)
        (boolean? . g$5365$MT&Mo)
        (boolean=? . g$5420$MT&Mo)
        (atan . g$11227$MT&Mo)
        (assertion-violation . g$11226$MT&Mo)
        (asin . g$11225$MT&Mo)
        (apply . g$11224$MT&Mo)
        (append . g$11223$MT&Mo)
        (angle . g$11222$MT&Mo)
        (acos . g$11221$MT&Mo)
        (abs . g$11220$MT&Mo)
        (/ . g$11219$MT&Mo)
        (* . g$11218$MT&Mo)
        (- . g$11217$MT&Mo)
        (+ . g$11216$MT&Mo)
        (>= . g$11215$MT&Mo)
        (> . g$11214$MT&Mo)
        (= . g$11213$MT&Mo)
        (<= . g$11212$MT&Mo)
        (< . g$11211$MT&Mo)
        (unquote-splicing . g$11126$MT&Mo)
        (unquote . g$11125$MT&Mo)
        (_ . g$11124$MT&Mo)
        (else . g$11123$MT&Mo)
        (=> . g$11122$MT&Mo)
        (... . g$11121$MT&Mo)
        (assert . g$11120$MT&Mo)
        (or . g$11116$MT&Mo)
        (and . g$11115$MT&Mo)
        (cond . g$11113$MT&Mo)
        (let* . g$11112$MT&Mo)
        (let . g$11111$MT&Mo)
        (identifier-syntax . g$11110$MT&Mo)
        (quasiquote . g$11107$MT&Mo)
        (syntax-rules . g$11106$MT&Mo)
        (let-values . g$11102$MT&Mo)
        (let*-values . g$11101$MT&Mo)
        (case . g$11097$MT&Mo)
        (if . g$11093$MT&Mo)
        (letrec* . g$11092$MT&Mo)
        (letrec . g$11091$MT&Mo)
        (lambda . g$11088$MT&Mo)
        (quote . g$11085$MT&Mo)
        (letrec-syntax . g$11083$MT&Mo)
        (let-syntax . g$11082$MT&Mo)
        (set! . g$11081$MT&Mo)
        (begin . g$11077$MT&Mo)
        (define-syntax . g$11075$MT&Mo)
        (define . g$11074$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11566$MT&Mo
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5064$MT&Mo)
        (remv . g$5065$MT&Mo)
        (remp . g$5045$MT&Mo)
        (remq . g$5066$MT&Mo)
        (partition . g$5044$MT&Mo)
        (memv . g$5052$MT&Mo)
        (memq . g$5051$MT&Mo)
        (memp . g$5054$MT&Mo)
        (member . g$5053$MT&Mo)
        (exists . g$5058$MT&Mo)
        (for-all . g$5057$MT&Mo)
        (fold-right . g$5063$MT&Mo)
        (fold-left . g$5062$MT&Mo)
        (find . g$5043$MT&Mo)
        (filter . g$5046$MT&Mo)
        (cons* . g$5061$MT&Mo)
        (assv . g$5048$MT&Mo)
        (assq . g$5047$MT&Mo)
        (assp . g$5050$MT&Mo)
        (assoc . g$5049$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11567$MT&Mo
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$6546$MT&Mo)
        (call-with-input-file . g$6545$MT&Mo)
        (write-char . g$6537$MT&Mo)
        (write . g$11462$MT&Mo)
        (with-output-to-file . g$6544$MT&Mo)
        (with-input-from-file . g$6543$MT&Mo)
        (read-char . g$6536$MT&Mo)
        (read . g$11461$MT&Mo)
        (peek-char . g$6535$MT&Mo)
        (open-output-file . g$11460$MT&Mo)
        (open-input-file . g$11459$MT&Mo)
        (newline . g$6547$MT&Mo)
        (display . g$11458$MT&Mo)
        (close-output-port . g$11457$MT&Mo)
        (close-input-port . g$11456$MT&Mo)
        (eof-object? . g$11455$MT&Mo)
        (eof-object . g$11454$MT&Mo)
        (current-error-port . g$11453$MT&Mo)
        (current-output-port . g$11452$MT&Mo)
        (current-input-port . g$11451$MT&Mo)
        (output-port? . g$11450$MT&Mo)
        (input-port? . g$11449$MT&Mo)
        (make-i/o-write-error . g$6025$MT&Mo)
        (make-i/o-read-error . g$6012$MT&Mo)
        (make-i/o-port-error . g$6120$MT&Mo)
        (make-i/o-invalid-position-error . g$6038$MT&Mo)
        (make-i/o-filename-error . g$6053$MT&Mo)
        (make-i/o-file-protection-error . g$6068$MT&Mo)
        (make-i/o-file-is-read-only-error . g$6081$MT&Mo)
        (make-i/o-file-does-not-exist-error . g$6107$MT&Mo)
        (make-i/o-file-already-exists-error . g$6094$MT&Mo)
        (make-i/o-error . g$5999$MT&Mo)
        (i/o-write-error? . g$6026$MT&Mo)
        (i/o-read-error? . g$6013$MT&Mo)
        (i/o-port-error? . g$6122$MT&Mo)
        (i/o-invalid-position-error? . g$6040$MT&Mo)
        (i/o-error-position . g$6041$MT&Mo)
        (i/o-filename-error? . g$6055$MT&Mo)
        (i/o-file-protection-error? . g$6069$MT&Mo)
        (i/o-file-is-read-only-error? . g$6082$MT&Mo)
        (i/o-file-does-not-exist-error? . g$6108$MT&Mo)
        (i/o-file-already-exists-error? . g$6095$MT&Mo)
        (i/o-error? . g$6000$MT&Mo)
        (i/o-error-port . g$6123$MT&Mo)
        (i/o-error-filename . g$6056$MT&Mo)
        (&i/o-port . g$11174$MT&Mo)
        (&i/o-file-does-not-exist . g$11173$MT&Mo)
        (&i/o-file-already-exists . g$11172$MT&Mo)
        (&i/o-file-is-read-only . g$11171$MT&Mo)
        (&i/o-file-protection . g$11170$MT&Mo)
        (&i/o-filename . g$11169$MT&Mo)
        (&i/o-invalid-position . g$11168$MT&Mo)
        (&i/o-write . g$11167$MT&Mo)
        (&i/o-read . g$11166$MT&Mo)
        (&i/o . g$11165$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11568$MT&Mo
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$11410$MT&Mo)
        (utf32->string . g$11378$MT&Mo)
        (utf16->string . g$11377$MT&Mo)
        (utf8->string . g$11376$MT&Mo)
        (uint-list->bytevector . g$11375$MT&Mo)
        (u8-list->bytevector . g$11374$MT&Mo)
        (string->utf8 . g$11373$MT&Mo)
        (string->utf32 . g$11372$MT&Mo)
        (string->utf16 . g$11371$MT&Mo)
        (sint-list->bytevector . g$11370$MT&Mo)
        (native-endianness . g$5659$MT&Mo)
        (bytevector? . g$5363$MT&Mo)
        (bytevector=? . g$11369$MT&Mo)
        (bytevector-uint-set! . g$11368$MT&Mo)
        (bytevector-uint-ref . g$11367$MT&Mo)
        (bytevector-u8-set! . g$11366$MT&Mo)
        (bytevector-u8-ref . g$11365$MT&Mo)
        (bytevector-u64-set! . g$5680$MT&Mo)
        (bytevector-u64-ref . g$5676$MT&Mo)
        (bytevector-u64-native-set! . g$5682$MT&Mo)
        (bytevector-u64-native-ref . g$5678$MT&Mo)
        (bytevector-u32-set! . g$5672$MT&Mo)
        (bytevector-u32-ref . g$5668$MT&Mo)
        (bytevector-u32-native-set! . g$5674$MT&Mo)
        (bytevector-u32-native-ref . g$5670$MT&Mo)
        (bytevector-u16-set! . g$5664$MT&Mo)
        (bytevector-u16-ref . g$5660$MT&Mo)
        (bytevector-u16-native-set! . g$5666$MT&Mo)
        (bytevector-u16-native-ref . g$5662$MT&Mo)
        (bytevector-sint-set! . g$11364$MT&Mo)
        (bytevector-sint-ref . g$11363$MT&Mo)
        (bytevector-s8-set! . g$11362$MT&Mo)
        (bytevector-s8-ref . g$11361$MT&Mo)
        (bytevector-s64-set! . g$5681$MT&Mo)
        (bytevector-s64-ref . g$5677$MT&Mo)
        (bytevector-s64-native-set! . g$5683$MT&Mo)
        (bytevector-s64-native-ref . g$5679$MT&Mo)
        (bytevector-s32-set! . g$5673$MT&Mo)
        (bytevector-s32-ref . g$5669$MT&Mo)
        (bytevector-s32-native-set! . g$5675$MT&Mo)
        (bytevector-s32-native-ref . g$5671$MT&Mo)
        (bytevector-s16-set! . g$5665$MT&Mo)
        (bytevector-s16-ref . g$5661$MT&Mo)
        (bytevector-s16-native-set! . g$5667$MT&Mo)
        (bytevector-s16-native-ref . g$5663$MT&Mo)
        (bytevector-length . g$11360$MT&Mo)
        (bytevector-ieee-single-set! . g$11359$MT&Mo)
        (bytevector-ieee-single-ref . g$11358$MT&Mo)
        (bytevector-ieee-single-native-set! . g$5686$MT&Mo)
        (bytevector-ieee-single-native-ref . g$5684$MT&Mo)
        (bytevector-ieee-double-set! . g$11357$MT&Mo)
        (bytevector-ieee-double-ref . g$11356$MT&Mo)
        (bytevector-ieee-double-native-set! . g$5687$MT&Mo)
        (bytevector-ieee-double-native-ref . g$5685$MT&Mo)
        (bytevector-fill! . g$11355$MT&Mo)
        (bytevector-copy! . g$11354$MT&Mo)
        (bytevector-copy . g$11353$MT&Mo)
        (bytevector->uint-list . g$11352$MT&Mo)
        (bytevector->u8-list . g$11351$MT&Mo)
        (bytevector->sint-list . g$11350$MT&Mo)
        (endianness . g$11119$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11569$MT&Mo
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11508$MT&Mo)
        (string-titlecase . g$11507$MT&Mo)
        (string-normalize-nfkd . g$6262$MT&Mo)
        (string-normalize-nfkc . g$6261$MT&Mo)
        (string-normalize-nfd . g$6260$MT&Mo)
        (string-normalize-nfc . g$6259$MT&Mo)
        (string-foldcase . g$11506$MT&Mo)
        (string-downcase . g$11505$MT&Mo)
        (string-ci>? . g$6246$MT&Mo)
        (string-ci>=? . g$6248$MT&Mo)
        (string-ci=? . g$6244$MT&Mo)
        (string-ci<? . g$6245$MT&Mo)
        (string-ci<=? . g$6247$MT&Mo)
        (char-whitespace? . g$11504$MT&Mo)
        (char-upper-case? . g$11503$MT&Mo)
        (char-title-case? . g$11502$MT&Mo)
        (char-numeric? . g$11501$MT&Mo)
        (char-lower-case? . g$11500$MT&Mo)
        (char-general-category . g$11499$MT&Mo)
        (char-upcase . g$11498$MT&Mo)
        (char-titlecase . g$11497$MT&Mo)
        (char-foldcase . g$11496$MT&Mo)
        (char-downcase . g$11495$MT&Mo)
        (char-ci>? . g$6256$MT&Mo)
        (char-ci>=? . g$6258$MT&Mo)
        (char-ci=? . g$6254$MT&Mo)
        (char-ci<? . g$6255$MT&Mo)
        (char-ci<=? . g$6257$MT&Mo)
        (char-alphabetic? . g$11494$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11570$MT&Mo
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$11386$MT&Mo)
        (raise-continuable . g$11385$MT&Mo)
        (raise . g$11384$MT&Mo)
        (guard . g$11134$MT&Mo)
        (else . g$11123$MT&Mo)
        (=> . g$11122$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11571$MT&Mo
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6326$MT&Mo)
        (bitwise-reverse-bit-field . g$11312$MT&Mo)
        (bitwise-length . g$11311$MT&Mo)
        (bitwise-if . g$6320$MT&Mo)
        (bitwise-first-bit-set . g$11310$MT&Mo)
        (bitwise-copy-bit-field . g$6323$MT&Mo)
        (bitwise-copy-bit . g$6321$MT&Mo)
        (bitwise-bit-set? . g$11309$MT&Mo)
        (bitwise-bit-field . g$6322$MT&Mo)
        (bitwise-bit-count . g$11308$MT&Mo)
        (bitwise-xor . g$11307$MT&Mo)
        (bitwise-ior . g$11306$MT&Mo)
        (bitwise-and . g$11305$MT&Mo)
        (bitwise-not . g$11304$MT&Mo)
        (bitwise-arithmetic-shift-right . g$6325$MT&Mo)
        (bitwise-arithmetic-shift-left . g$6324$MT&Mo)
        (bitwise-arithmetic-shift . g$11303$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11572$MT&Mo
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$6358$MT&Mo)
        (fxxor . g$11334$MT&Mo)
        (fxrotate-bit-field . g$6372$MT&Mo)
        (fxreverse-bit-field . g$11333$MT&Mo)
        (fxpositive? . g$6356$MT&Mo)
        (fxodd? . g$6360$MT&Mo)
        (fxnot . g$11332$MT&Mo)
        (fxnegative? . g$6357$MT&Mo)
        (fxmod0 . g$6353$MT&Mo)
        (fxmod . g$6352$MT&Mo)
        (fxmin . g$6362$MT&Mo)
        (fxmax . g$6361$MT&Mo)
        (fxlength . g$11331$MT&Mo)
        (fxior . g$11330$MT&Mo)
        (fxif . g$6366$MT&Mo)
        (fxfirst-bit-set . g$11329$MT&Mo)
        (fxeven? . g$6359$MT&Mo)
        (fxdiv0-and-mod0 . g$6355$MT&Mo)
        (fxdiv0 . g$11328$MT&Mo)
        (fxdiv-and-mod . g$6354$MT&Mo)
        (fxdiv . g$11327$MT&Mo)
        (fxcopy-bit-field . g$6369$MT&Mo)
        (fxcopy-bit . g$6367$MT&Mo)
        (fxbit-set? . g$11326$MT&Mo)
        (fxbit-field . g$6368$MT&Mo)
        (fxbit-count . g$11325$MT&Mo)
        (fxarithmetic-shift-right . g$6371$MT&Mo)
        (fxarithmetic-shift-left . g$6370$MT&Mo)
        (fxarithmetic-shift . g$11324$MT&Mo)
        (fxand . g$11323$MT&Mo)
        (fx>? . g$11322$MT&Mo)
        (fx>=? . g$11321$MT&Mo)
        (fx=? . g$11320$MT&Mo)
        (fx<? . g$11319$MT&Mo)
        (fx<=? . g$11318$MT&Mo)
        (fx-/carry . g$6364$MT&Mo)
        (fx- . g$11317$MT&Mo)
        (fx+/carry . g$6365$MT&Mo)
        (fx+ . g$11316$MT&Mo)
        (fx*/carry . g$6363$MT&Mo)
        (fx* . g$11315$MT&Mo)
        (greatest-fixnum . g$11314$MT&Mo)
        (least-fixnum . g$11313$MT&Mo)
        (fixnum-width . g$5369$MT&Mo)
        (fixnum? . g$5367$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11573$MT&Mo
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6177$MT&Mo)
        (no-infinities-violation? . g$6164$MT&Mo)
        (make-no-nans-violation . g$6176$MT&Mo)
        (make-no-infinities-violation . g$6163$MT&Mo)
        (real->flonum . g$11349$MT&Mo)
        (flzero? . g$6461$MT&Mo)
        (fltruncate . g$6456$MT&Mo)
        (fltan . g$6446$MT&Mo)
        (flsqrt . g$6451$MT&Mo)
        (flsin . g$6444$MT&Mo)
        (flround . g$6457$MT&Mo)
        (flpositive? . g$6459$MT&Mo)
        (flonum? . g$5368$MT&Mo)
        (flodd? . g$6463$MT&Mo)
        (flnumerator . g$11348$MT&Mo)
        (flnegative? . g$6460$MT&Mo)
        (flnan? . g$6443$MT&Mo)
        (flmod0 . g$6437$MT&Mo)
        (flmod . g$6436$MT&Mo)
        (flmin . g$6465$MT&Mo)
        (flmax . g$6464$MT&Mo)
        (fllog . g$6450$MT&Mo)
        (flinteger? . g$6440$MT&Mo)
        (flinfinite? . g$6442$MT&Mo)
        (flfloor . g$6455$MT&Mo)
        (flfinite? . g$6441$MT&Mo)
        (flexpt . g$6453$MT&Mo)
        (flexp . g$6452$MT&Mo)
        (fleven? . g$6462$MT&Mo)
        (fldiv0-and-mod0 . g$6439$MT&Mo)
        (fldiv0 . g$11347$MT&Mo)
        (fldiv-and-mod . g$6438$MT&Mo)
        (fldiv . g$11346$MT&Mo)
        (fldenominator . g$11345$MT&Mo)
        (flcos . g$6445$MT&Mo)
        (flceiling . g$6454$MT&Mo)
        (flatan . g$6449$MT&Mo)
        (flasin . g$6447$MT&Mo)
        (flacos . g$6448$MT&Mo)
        (flabs . g$6458$MT&Mo)
        (fl>? . g$11344$MT&Mo)
        (fl>=? . g$11343$MT&Mo)
        (fl=? . g$11342$MT&Mo)
        (fl<? . g$11341$MT&Mo)
        (fl<=? . g$11340$MT&Mo)
        (fl/ . g$11339$MT&Mo)
        (fl- . g$11338$MT&Mo)
        (fl+ . g$11337$MT&Mo)
        (fl* . g$11336$MT&Mo)
        (fixnum->flonum . g$11335$MT&Mo)
        (&no-nans . g$11178$MT&Mo)
        (&no-infinities . g$11177$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11574$MT&Mo
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$11474$MT&Mo)
        (string-ci-hash . g$11473$MT&Mo)
        (string-hash . g$11472$MT&Mo)
        (equal-hash . g$11471$MT&Mo)
        (hashtable-equivalence-function . g$11470$MT&Mo)
        (make-hashtable . g$11469$MT&Mo)
        (hashtable-hash-function . g$11468$MT&Mo)
        (make-eqv-hashtable . g$5621$MT&Mo)
        (make-eq-hashtable . g$5620$MT&Mo)
        (hashtable? . g$11467$MT&Mo)
        (hashtable-update! . g$5627$MT&Mo)
        (hashtable-size . g$5622$MT&Mo)
        (hashtable-set! . g$5624$MT&Mo)
        (hashtable-ref . g$5623$MT&Mo)
        (hashtable-mutable? . g$11466$MT&Mo)
        (hashtable-keys . g$11465$MT&Mo)
        (hashtable-entries . g$11464$MT&Mo)
        (hashtable-delete! . g$5625$MT&Mo)
        (hashtable-copy . g$11463$MT&Mo)
        (hashtable-contains? . g$5626$MT&Mo)
        (hashtable-clear! . g$5628$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11575$MT&Mo
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$11455$MT&Mo)
        (eof-object . g$11454$MT&Mo)
        (current-error-port . g$11453$MT&Mo)
        (current-output-port . g$11452$MT&Mo)
        (current-input-port . g$11451$MT&Mo)
        (output-port? . g$11450$MT&Mo)
        (input-port? . g$11449$MT&Mo)
        (utf-8-codec . g$11448$MT&Mo)
        (utf-16-codec . g$11447$MT&Mo)
        (transcoder-error-handling-mode . g$11446$MT&Mo)
        (transcoder-eol-style . g$11445$MT&Mo)
        (transcoder-codec . g$11444$MT&Mo)
        (transcoded-port . g$11443$MT&Mo)
        (textual-port? . g$11442$MT&Mo)
        (string->bytevector . g$11441$MT&Mo)
        (standard-output-port . g$11440$MT&Mo)
        (standard-input-port . g$11439$MT&Mo)
        (standard-error-port . g$11438$MT&Mo)
        (set-port-position! . g$11437$MT&Mo)
        (put-u8 . g$11436$MT&Mo)
        (put-string . g$11435$MT&Mo)
        (put-datum . g$6515$MT&Mo)
        (put-char . g$11434$MT&Mo)
        (put-bytevector . g$11433$MT&Mo)
        (port? . g$6520$MT&Mo)
        (port-transcoder . g$11432$MT&Mo)
        (port-position . g$11431$MT&Mo)
        (port-has-set-port-position!? . g$11430$MT&Mo)
        (port-has-port-position? . g$11429$MT&Mo)
        (port-eof? . g$11428$MT&Mo)
        (output-port-buffer-mode . g$11427$MT&Mo)
        (open-string-output-port . g$6519$MT&Mo)
        (open-string-input-port . g$11426$MT&Mo)
        (open-file-output-port . g$11425$MT&Mo)
        (open-file-input/output-port . g$11424$MT&Mo)
        (open-file-input-port . g$11423$MT&Mo)
        (open-bytevector-output-port . g$11422$MT&Mo)
        (open-bytevector-input-port . g$11421$MT&Mo)
        (native-transcoder . g$11420$MT&Mo)
        (native-eol-style . g$11419$MT&Mo)
        (make-transcoder . g$11418$MT&Mo)
        (latin-1-codec . g$11417$MT&Mo)
        (make-i/o-write-error . g$6025$MT&Mo)
        (make-i/o-read-error . g$6012$MT&Mo)
        (make-i/o-port-error . g$6120$MT&Mo)
        (make-i/o-invalid-position-error . g$6038$MT&Mo)
        (make-i/o-filename-error . g$6053$MT&Mo)
        (make-i/o-file-protection-error . g$6068$MT&Mo)
        (make-i/o-file-is-read-only-error . g$6081$MT&Mo)
        (make-i/o-file-does-not-exist-error . g$6107$MT&Mo)
        (make-i/o-file-already-exists-error . g$6094$MT&Mo)
        (make-i/o-error . g$5999$MT&Mo)
        (make-i/o-encoding-error . g$6148$MT&Mo)
        (make-i/o-decoding-error . g$6135$MT&Mo)
        (make-custom-textual-output-port . g$11416$MT&Mo)
        (make-custom-textual-input/output-port . g$11415$MT&Mo)
        (make-custom-textual-input-port . g$11414$MT&Mo)
        (make-custom-binary-output-port . g$11413$MT&Mo)
        (make-custom-binary-input/output-port . g$11412$MT&Mo)
        (make-custom-binary-input-port . g$11411$MT&Mo)
        (lookahead-u8 . g$11409$MT&Mo)
        (lookahead-char . g$11408$MT&Mo)
        (i/o-write-error? . g$6026$MT&Mo)
        (i/o-read-error? . g$6013$MT&Mo)
        (i/o-port-error? . g$6122$MT&Mo)
        (i/o-invalid-position-error? . g$6040$MT&Mo)
        (i/o-error-position . g$6041$MT&Mo)
        (i/o-filename-error? . g$6055$MT&Mo)
        (i/o-file-protection-error? . g$6069$MT&Mo)
        (i/o-file-is-read-only-error? . g$6082$MT&Mo)
        (i/o-file-does-not-exist-error? . g$6108$MT&Mo)
        (i/o-file-already-exists-error? . g$6095$MT&Mo)
        (i/o-error? . g$6000$MT&Mo)
        (i/o-error-port . g$6123$MT&Mo)
        (i/o-error-filename . g$6056$MT&Mo)
        (i/o-encoding-error? . g$6150$MT&Mo)
        (i/o-encoding-error-char . g$6151$MT&Mo)
        (i/o-decoding-error? . g$6136$MT&Mo)
        (get-u8 . g$11407$MT&Mo)
        (get-string-n! . g$11406$MT&Mo)
        (get-string-n . g$11405$MT&Mo)
        (get-string-all . g$11404$MT&Mo)
        (get-line . g$11403$MT&Mo)
        (get-datum . g$6516$MT&Mo)
        (get-char . g$11402$MT&Mo)
        (get-bytevector-some . g$11401$MT&Mo)
        (get-bytevector-n! . g$11400$MT&Mo)
        (get-bytevector-n . g$11399$MT&Mo)
        (get-bytevector-all . g$11398$MT&Mo)
        (flush-output-port . g$11397$MT&Mo)
        (close-port . g$11396$MT&Mo)
        (call-with-string-output-port . g$6521$MT&Mo)
        (call-with-port . g$6522$MT&Mo)
        (call-with-bytevector-output-port . g$11395$MT&Mo)
        (bytevector->string . g$11394$MT&Mo)
        (buffer-mode? . g$11393$MT&Mo)
        (binary-port? . g$11392$MT&Mo)
        (&i/o-encoding . g$11176$MT&Mo)
        (&i/o-decoding . g$11175$MT&Mo)
        (&i/o-port . g$11174$MT&Mo)
        (&i/o-file-does-not-exist . g$11173$MT&Mo)
        (&i/o-file-already-exists . g$11172$MT&Mo)
        (&i/o-file-is-read-only . g$11171$MT&Mo)
        (&i/o-file-protection . g$11170$MT&Mo)
        (&i/o-filename . g$11169$MT&Mo)
        (&i/o-invalid-position . g$11168$MT&Mo)
        (&i/o-write . g$11167$MT&Mo)
        (&i/o-read . g$11166$MT&Mo)
        (&i/o . g$11165$MT&Mo)
        (error-handling-mode . g$11138$MT&Mo)
        (file-options . g$11137$MT&Mo)
        (buffer-mode . g$11136$MT&Mo)
        (eol-style . g$11135$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11576$MT&Mo
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$6607$MT&Mo)
        (enum-set=? . g$6614$MT&Mo)
        (enum-set-universe . g$6608$MT&Mo)
        (enum-set-union . g$6615$MT&Mo)
        (enum-set-subset? . g$6613$MT&Mo)
        (enum-set-projection . g$6619$MT&Mo)
        (enum-set-member? . g$6612$MT&Mo)
        (enum-set-intersection . g$6616$MT&Mo)
        (enum-set-indexer . g$6609$MT&Mo)
        (enum-set-difference . g$6617$MT&Mo)
        (enum-set-constructor . g$6610$MT&Mo)
        (enum-set-complement . g$6618$MT&Mo)
        (enum-set->list . g$6611$MT&Mo)
        (define-enumeration . g$11149$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11577$MT&Mo
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$5917$MT&Mo)
        (warning? . g$5836$MT&Mo)
        (violation? . g$5875$MT&Mo)
        (undefined-violation? . g$5987$MT&Mo)
        (syntax-violation? . g$5972$MT&Mo)
        (syntax-violation-subform . g$5974$MT&Mo)
        (syntax-violation-form . g$5973$MT&Mo)
        (simple-conditions . g$11383$MT&Mo)
        (serious-condition? . g$5849$MT&Mo)
        (non-continuable-violation? . g$5931$MT&Mo)
        (message-condition? . g$5822$MT&Mo)
        (make-who-condition . g$5915$MT&Mo)
        (make-warning . g$5835$MT&Mo)
        (make-violation . g$5874$MT&Mo)
        (make-undefined-violation . g$5986$MT&Mo)
        (make-syntax-violation . g$5969$MT&Mo)
        (make-serious-condition . g$5848$MT&Mo)
        (make-non-continuable-violation . g$5930$MT&Mo)
        (make-message-condition . g$5820$MT&Mo)
        (make-lexical-violation . g$5956$MT&Mo)
        (make-irritants-condition . g$5900$MT&Mo)
        (make-implementation-restriction-violation . g$5943$MT&Mo)
        (make-error . g$5861$MT&Mo)
        (make-assertion-violation . g$5887$MT&Mo)
        (lexical-violation? . g$5957$MT&Mo)
        (irritants-condition? . g$5902$MT&Mo)
        (implementation-restriction-violation? . g$5944$MT&Mo)
        (error? . g$5862$MT&Mo)
        (condition-who . g$5918$MT&Mo)
        (condition-predicate . g$11382$MT&Mo)
        (condition-message . g$5823$MT&Mo)
        (condition-irritants . g$5903$MT&Mo)
        (condition-accessor . g$11381$MT&Mo)
        (condition . g$11380$MT&Mo)
        (assertion-violation? . g$5888$MT&Mo)
        (condition? . g$11379$MT&Mo)
        (&non-continuable . g$11164$MT&Mo)
        (&undefined . g$11163$MT&Mo)
        (&syntax . g$11162$MT&Mo)
        (&lexical . g$11161$MT&Mo)
        (&implementation-restriction . g$11160$MT&Mo)
        (&who . g$11159$MT&Mo)
        (&irritants . g$11158$MT&Mo)
        (&assertion . g$11157$MT&Mo)
        (&violation . g$11156$MT&Mo)
        (&error . g$11155$MT&Mo)
        (&serious . g$11154$MT&Mo)
        (&warning . g$11153$MT&Mo)
        (&message . g$11152$MT&Mo)
        (&condition . g$11151$MT&Mo)
        (define-condition-type . g$11150$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11578$MT&Mo
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$11486$MT&Mo)
        (record-type-uid . g$11485$MT&Mo)
        (record-type-sealed? . g$11484$MT&Mo)
        (record-type-parent . g$11483$MT&Mo)
        (record-type-opaque? . g$11482$MT&Mo)
        (record-type-name . g$11481$MT&Mo)
        (record-type-generative? . g$11480$MT&Mo)
        (record-type-field-names . g$11479$MT&Mo)
        (record-rtd . g$11478$MT&Mo)
        (record-field-mutable? . g$11477$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11579$MT&Mo
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$11493$MT&Mo)
        (record-predicate . g$11492$MT&Mo)
        (record-mutator . g$11491$MT&Mo)
        (record-constructor . g$11490$MT&Mo)
        (record-accessor . g$11489$MT&Mo)
        (make-record-type-descriptor . g$11488$MT&Mo)
        (make-record-constructor-descriptor . g$11487$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11580$MT&Mo
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11148$MT&Mo)
        (parent-rtd . g$11147$MT&Mo)
        (nongenerative . g$11146$MT&Mo)
        (opaque . g$11145$MT&Mo)
        (sealed . g$11144$MT&Mo)
        (protocol . g$11143$MT&Mo)
        (parent . g$11142$MT&Mo)
        (immutable . g$11141$MT&Mo)
        (mutable . g$11140$MT&Mo)
        (fields . g$11139$MT&Mo)
        (record-constructor-descriptor . g$11100$MT&Mo)
        (record-type-descriptor . g$11099$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11581$MT&Mo
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$7914$MT&Mo)
        (&no-nans-rcd . g$6179$MT&Mo)
        (&no-nans-rtd . g$6178$MT&Mo)
        (&no-infinities-rcd . g$6166$MT&Mo)
        (&no-infinities-rtd . g$6165$MT&Mo)
        (&i/o-encoding-rcd . g$6153$MT&Mo)
        (&i/o-encoding-rtd . g$6152$MT&Mo)
        (&i/o-decoding-rcd . g$6138$MT&Mo)
        (&i/o-decoding-rtd . g$6137$MT&Mo)
        (&i/o-port-rcd . g$6125$MT&Mo)
        (&i/o-port-rtd . g$6124$MT&Mo)
        (&i/o-file-does-not-exist-rcd . g$6110$MT&Mo)
        (&i/o-file-does-not-exist-rtd . g$6109$MT&Mo)
        (&i/o-file-already-exists-rcd . g$6097$MT&Mo)
        (&i/o-file-already-exists-rtd . g$6096$MT&Mo)
        (&i/o-file-is-read-only-rcd . g$6084$MT&Mo)
        (&i/o-file-is-read-only-rtd . g$6083$MT&Mo)
        (&i/o-file-protection-rcd . g$6071$MT&Mo)
        (&i/o-file-protection-rtd . g$6070$MT&Mo)
        (&i/o-filename-rcd . g$6058$MT&Mo)
        (&i/o-filename-rtd . g$6057$MT&Mo)
        (&i/o-invalid-position-rcd . g$6043$MT&Mo)
        (&i/o-invalid-position-rtd . g$6042$MT&Mo)
        (&i/o-write-rcd . g$6028$MT&Mo)
        (&i/o-write-rtd . g$6027$MT&Mo)
        (&i/o-read-rcd . g$6015$MT&Mo)
        (&i/o-read-rtd . g$6014$MT&Mo)
        (&i/o-rcd . g$6002$MT&Mo)
        (&i/o-rtd . g$6001$MT&Mo)
        (&undefined-rcd . g$5989$MT&Mo)
        (&undefined-rtd . g$5988$MT&Mo)
        (&syntax-rcd . g$5976$MT&Mo)
        (&syntax-rtd . g$5975$MT&Mo)
        (&lexical-rcd . g$5959$MT&Mo)
        (&lexical-rtd . g$5958$MT&Mo)
        (&implementation-restriction-rcd . g$5946$MT&Mo)
        (&implementation-restriction-rtd . g$5945$MT&Mo)
        (&non-continuable-rcd . g$5933$MT&Mo)
        (&non-continuable-rtd . g$5932$MT&Mo)
        (&who-rcd . g$5920$MT&Mo)
        (&who-rtd . g$5919$MT&Mo)
        (&irritants-rcd . g$5905$MT&Mo)
        (&irritants-rtd . g$5904$MT&Mo)
        (&assertion-rcd . g$5890$MT&Mo)
        (&assertion-rtd . g$5889$MT&Mo)
        (&violation-rcd . g$5877$MT&Mo)
        (&violation-rtd . g$5876$MT&Mo)
        (&error-rcd . g$5864$MT&Mo)
        (&error-rtd . g$5863$MT&Mo)
        (&serious-rcd . g$5851$MT&Mo)
        (&serious-rtd . g$5850$MT&Mo)
        (&warning-rcd . g$5838$MT&Mo)
        (&warning-rtd . g$5837$MT&Mo)
        (&message-rcd . g$5825$MT&Mo)
        (&message-rtd . g$5824$MT&Mo)
        (&condition-rcd . g$5785$MT&Mo)
        (&condition-rtd . g$5784$MT&Mo)
        (library-letrec* . g$11545$MT&Mo)
        (annotation-stripped . g$11544$MT&Mo)
        (annotation-source . g$11543$MT&Mo)
        (annotation-expression . g$11542$MT&Mo)
        (annotation? . g$11541$MT&Mo)
        (read-annotated . g$11540$MT&Mo)
        (tanh . g$11539$MT&Mo)
        (cosh . g$11538$MT&Mo)
        (sinh . g$11537$MT&Mo)
        (make-guid . g$11536$MT&Mo)
        (unspecified? . g$11535$MT&Mo)
        (make-list . g$5042$MT&Mo)
        (last-pair . g$5041$MT&Mo)
        (load-r5rs . g$11534$MT&Mo)
        (license . g$11533$MT&Mo)
        (stacktrace . g$11532$MT&Mo)
        (ironscheme-build . g$11022$MT&Mo)
        (define-clr-class-internal . g$11531$MT&Mo)
        (clr-field-set!-internal . g$11530$MT&Mo)
        (clr-field-get-internal . g$11529$MT&Mo)
        (clr-cast-internal . g$11528$MT&Mo)
        (clr-call-internal . g$11527$MT&Mo)
        (clr-new-internal . g$11526$MT&Mo)
        (clr-new-array-internal . g$11525$MT&Mo)
        (clr-is-internal . g$11524$MT&Mo)
        (clr-reference-internal . g$11523$MT&Mo)
        (clr-using-internal . g$11522$MT&Mo)
        (syntax-error . g$8033$MT&Mo)
        (syntax-dispatch . g$7909$MT&Mo)
        (compile-core . g$11521$MT&Mo)
        (eval-core . g$11520$MT&Mo)
        (remove-location . g$11519$MT&Mo)
        (set-symbol-value! . g$11518$MT&Mo)
        (symbol-value . g$11517$MT&Mo)
        (symbol-bound? . g$11516$MT&Mo)
        (ungensym . g$11515$MT&Mo)
        (gensym . g$11514$MT&Mo)
        (void . g$11513$MT&Mo)
        (load-serialized-library . g$11512$MT&Mo)
        (serialize-library . g$11511$MT&Mo)
        (compile-system-libraries . g$11026$MT&Mo)
        (compile->closure . g$11028$MT&Mo)
        (compile . g$11027$MT&Mo)
        (load . g$11021$MT&Mo)
        (string-normalize . g$11510$MT&Mo)
        (interaction-environment . g$8043$MT&Mo)
        (char-ready? . g$11509$MT&Mo)
        (string-upcase . g$11508$MT&Mo)
        (string-titlecase . g$11507$MT&Mo)
        (string-normalize-nfkd . g$6262$MT&Mo)
        (string-normalize-nfkc . g$6261$MT&Mo)
        (string-normalize-nfd . g$6260$MT&Mo)
        (string-normalize-nfc . g$6259$MT&Mo)
        (string-foldcase . g$11506$MT&Mo)
        (string-downcase . g$11505$MT&Mo)
        (string-ci>? . g$6246$MT&Mo)
        (string-ci>=? . g$6248$MT&Mo)
        (string-ci=? . g$6244$MT&Mo)
        (string-ci<? . g$6245$MT&Mo)
        (string-ci<=? . g$6247$MT&Mo)
        (char-whitespace? . g$11504$MT&Mo)
        (char-upper-case? . g$11503$MT&Mo)
        (char-title-case? . g$11502$MT&Mo)
        (char-numeric? . g$11501$MT&Mo)
        (char-lower-case? . g$11500$MT&Mo)
        (char-general-category . g$11499$MT&Mo)
        (char-upcase . g$11498$MT&Mo)
        (char-titlecase . g$11497$MT&Mo)
        (char-foldcase . g$11496$MT&Mo)
        (char-downcase . g$11495$MT&Mo)
        (char-ci>? . g$6256$MT&Mo)
        (char-ci>=? . g$6258$MT&Mo)
        (char-ci=? . g$6254$MT&Mo)
        (char-ci<? . g$6255$MT&Mo)
        (char-ci<=? . g$6257$MT&Mo)
        (char-alphabetic? . g$11494$MT&Mo)
        (variable-transformer-procedure . g$7721$MT&Mo)
        (variable-transformer? . g$7720$MT&Mo)
        (make-variable-transformer . g$7718$MT&Mo)
        (identifier? . g$8037$MT&Mo)
        (generate-temporaries . g$8026$MT&Mo)
        (free-identifier=? . g$8027$MT&Mo)
        (syntax->datum . g$8039$MT&Mo)
        (datum->syntax . g$8038$MT&Mo)
        (bound-identifier=? . g$8028$MT&Mo)
        (record-type-descriptor? . g$11493$MT&Mo)
        (record-predicate . g$11492$MT&Mo)
        (record-mutator . g$11491$MT&Mo)
        (record-constructor . g$11490$MT&Mo)
        (record-accessor . g$11489$MT&Mo)
        (make-record-type-descriptor . g$11488$MT&Mo)
        (make-record-constructor-descriptor . g$11487$MT&Mo)
        (record? . g$11486$MT&Mo)
        (record-type-uid . g$11485$MT&Mo)
        (record-type-sealed? . g$11484$MT&Mo)
        (record-type-parent . g$11483$MT&Mo)
        (record-type-opaque? . g$11482$MT&Mo)
        (record-type-name . g$11481$MT&Mo)
        (record-type-generative? . g$11480$MT&Mo)
        (record-type-field-names . g$11479$MT&Mo)
        (record-rtd . g$11478$MT&Mo)
        (record-field-mutable? . g$11477$MT&Mo)
        (delete-file . g$5653$MT&Mo)
        (file-exists? . g$5652$MT&Mo)
        (vector-sort! . g$11476$MT&Mo)
        (vector-sort . g$11475$MT&Mo)
        (list-sort . g$6215$MT&Mo)
        (symbol-hash . g$11474$MT&Mo)
        (string-ci-hash . g$11473$MT&Mo)
        (string-hash . g$11472$MT&Mo)
        (equal-hash . g$11471$MT&Mo)
        (hashtable-equivalence-function . g$11470$MT&Mo)
        (make-hashtable . g$11469$MT&Mo)
        (hashtable-hash-function . g$11468$MT&Mo)
        (make-eqv-hashtable . g$5621$MT&Mo)
        (make-eq-hashtable . g$5620$MT&Mo)
        (hashtable? . g$11467$MT&Mo)
        (hashtable-update! . g$5627$MT&Mo)
        (hashtable-size . g$5622$MT&Mo)
        (hashtable-set! . g$5624$MT&Mo)
        (hashtable-ref . g$5623$MT&Mo)
        (hashtable-mutable? . g$11466$MT&Mo)
        (hashtable-keys . g$11465$MT&Mo)
        (hashtable-entries . g$11464$MT&Mo)
        (hashtable-delete! . g$5625$MT&Mo)
        (hashtable-copy . g$11463$MT&Mo)
        (hashtable-contains? . g$5626$MT&Mo)
        (hashtable-clear! . g$5628$MT&Mo)
        (call-with-output-file . g$6546$MT&Mo)
        (call-with-input-file . g$6545$MT&Mo)
        (write-char . g$6537$MT&Mo)
        (write . g$11462$MT&Mo)
        (with-output-to-file . g$6544$MT&Mo)
        (with-input-from-file . g$6543$MT&Mo)
        (read-char . g$6536$MT&Mo)
        (read . g$11461$MT&Mo)
        (peek-char . g$6535$MT&Mo)
        (open-output-file . g$11460$MT&Mo)
        (open-input-file . g$11459$MT&Mo)
        (newline . g$6547$MT&Mo)
        (display . g$11458$MT&Mo)
        (close-output-port . g$11457$MT&Mo)
        (close-input-port . g$11456$MT&Mo)
        (eof-object? . g$11455$MT&Mo)
        (eof-object . g$11454$MT&Mo)
        (current-error-port . g$11453$MT&Mo)
        (current-output-port . g$11452$MT&Mo)
        (current-input-port . g$11451$MT&Mo)
        (output-port? . g$11450$MT&Mo)
        (input-port? . g$11449$MT&Mo)
        (utf-8-codec . g$11448$MT&Mo)
        (utf-16-codec . g$11447$MT&Mo)
        (transcoder-error-handling-mode . g$11446$MT&Mo)
        (transcoder-eol-style . g$11445$MT&Mo)
        (transcoder-codec . g$11444$MT&Mo)
        (transcoded-port . g$11443$MT&Mo)
        (textual-port? . g$11442$MT&Mo)
        (string->bytevector . g$11441$MT&Mo)
        (standard-output-port . g$11440$MT&Mo)
        (standard-input-port . g$11439$MT&Mo)
        (standard-error-port . g$11438$MT&Mo)
        (set-port-position! . g$11437$MT&Mo)
        (put-u8 . g$11436$MT&Mo)
        (put-string . g$11435$MT&Mo)
        (put-datum . g$6515$MT&Mo)
        (put-char . g$11434$MT&Mo)
        (put-bytevector . g$11433$MT&Mo)
        (port? . g$6520$MT&Mo)
        (port-transcoder . g$11432$MT&Mo)
        (port-position . g$11431$MT&Mo)
        (port-has-set-port-position!? . g$11430$MT&Mo)
        (port-has-port-position? . g$11429$MT&Mo)
        (port-eof? . g$11428$MT&Mo)
        (output-port-buffer-mode . g$11427$MT&Mo)
        (open-string-output-port . g$6519$MT&Mo)
        (open-string-input-port . g$11426$MT&Mo)
        (open-file-output-port . g$11425$MT&Mo)
        (open-file-input/output-port . g$11424$MT&Mo)
        (open-file-input-port . g$11423$MT&Mo)
        (open-bytevector-output-port . g$11422$MT&Mo)
        (open-bytevector-input-port . g$11421$MT&Mo)
        (native-transcoder . g$11420$MT&Mo)
        (native-eol-style . g$11419$MT&Mo)
        (make-transcoder . g$11418$MT&Mo)
        (latin-1-codec . g$11417$MT&Mo)
        (make-i/o-write-error . g$6025$MT&Mo)
        (make-i/o-read-error . g$6012$MT&Mo)
        (make-i/o-port-error . g$6120$MT&Mo)
        (make-i/o-invalid-position-error . g$6038$MT&Mo)
        (make-i/o-filename-error . g$6053$MT&Mo)
        (make-i/o-file-protection-error . g$6068$MT&Mo)
        (make-i/o-file-is-read-only-error . g$6081$MT&Mo)
        (make-i/o-file-does-not-exist-error . g$6107$MT&Mo)
        (make-i/o-file-already-exists-error . g$6094$MT&Mo)
        (make-i/o-error . g$5999$MT&Mo)
        (make-i/o-encoding-error . g$6148$MT&Mo)
        (make-i/o-decoding-error . g$6135$MT&Mo)
        (make-custom-textual-output-port . g$11416$MT&Mo)
        (make-custom-textual-input/output-port . g$11415$MT&Mo)
        (make-custom-textual-input-port . g$11414$MT&Mo)
        (make-custom-binary-output-port . g$11413$MT&Mo)
        (make-custom-binary-input/output-port . g$11412$MT&Mo)
        (make-custom-binary-input-port . g$11411$MT&Mo)
        (make-bytevector . g$11410$MT&Mo)
        (lookahead-u8 . g$11409$MT&Mo)
        (lookahead-char . g$11408$MT&Mo)
        (i/o-write-error? . g$6026$MT&Mo)
        (i/o-read-error? . g$6013$MT&Mo)
        (i/o-port-error? . g$6122$MT&Mo)
        (i/o-invalid-position-error? . g$6040$MT&Mo)
        (i/o-error-position . g$6041$MT&Mo)
        (i/o-filename-error? . g$6055$MT&Mo)
        (i/o-file-protection-error? . g$6069$MT&Mo)
        (i/o-file-is-read-only-error? . g$6082$MT&Mo)
        (i/o-file-does-not-exist-error? . g$6108$MT&Mo)
        (i/o-file-already-exists-error? . g$6095$MT&Mo)
        (i/o-error? . g$6000$MT&Mo)
        (i/o-error-port . g$6123$MT&Mo)
        (i/o-error-filename . g$6056$MT&Mo)
        (i/o-encoding-error? . g$6150$MT&Mo)
        (i/o-encoding-error-char . g$6151$MT&Mo)
        (i/o-decoding-error? . g$6136$MT&Mo)
        (get-u8 . g$11407$MT&Mo)
        (get-string-n! . g$11406$MT&Mo)
        (get-string-n . g$11405$MT&Mo)
        (get-string-all . g$11404$MT&Mo)
        (get-line . g$11403$MT&Mo)
        (get-datum . g$6516$MT&Mo)
        (get-char . g$11402$MT&Mo)
        (get-bytevector-some . g$11401$MT&Mo)
        (get-bytevector-n! . g$11400$MT&Mo)
        (get-bytevector-n . g$11399$MT&Mo)
        (get-bytevector-all . g$11398$MT&Mo)
        (flush-output-port . g$11397$MT&Mo)
        (close-port . g$11396$MT&Mo)
        (call-with-string-output-port . g$6521$MT&Mo)
        (call-with-port . g$6522$MT&Mo)
        (call-with-bytevector-output-port . g$11395$MT&Mo)
        (bytevector->string . g$11394$MT&Mo)
        (buffer-mode? . g$11393$MT&Mo)
        (binary-port? . g$11392$MT&Mo)
        (scheme-report-environment . g$8016$MT&Mo)
        (quotient . g$6194$MT&Mo)
        (null-environment . g$8015$MT&Mo)
        (remainder . g$6195$MT&Mo)
        (modulo . g$6196$MT&Mo)
        (inexact->exact . g$6191$MT&Mo)
        (force . g$6198$MT&Mo)
        (exact->inexact . g$6192$MT&Mo)
        (exit . g$11391$MT&Mo)
        (command-line . g$11017$MT&Mo)
        (string-fill! . g$11390$MT&Mo)
        (string-set! . g$11389$MT&Mo)
        (set-cdr! . g$11388$MT&Mo)
        (set-car! . g$11387$MT&Mo)
        (remove . g$5064$MT&Mo)
        (remv . g$5065$MT&Mo)
        (remp . g$5045$MT&Mo)
        (remq . g$5066$MT&Mo)
        (partition . g$5044$MT&Mo)
        (memv . g$5052$MT&Mo)
        (memq . g$5051$MT&Mo)
        (memp . g$5054$MT&Mo)
        (member . g$5053$MT&Mo)
        (exists . g$5058$MT&Mo)
        (for-all . g$5057$MT&Mo)
        (fold-right . g$5063$MT&Mo)
        (fold-left . g$5062$MT&Mo)
        (find . g$5043$MT&Mo)
        (filter . g$5046$MT&Mo)
        (cons* . g$5061$MT&Mo)
        (assv . g$5048$MT&Mo)
        (assq . g$5047$MT&Mo)
        (assp . g$5050$MT&Mo)
        (assoc . g$5049$MT&Mo)
        (with-exception-handler . g$11386$MT&Mo)
        (raise-continuable . g$11385$MT&Mo)
        (raise . g$11384$MT&Mo)
        (eval . g$8018$MT&Mo)
        (environment . g$8014$MT&Mo)
        (make-enumeration . g$6607$MT&Mo)
        (enum-set=? . g$6614$MT&Mo)
        (enum-set-universe . g$6608$MT&Mo)
        (enum-set-union . g$6615$MT&Mo)
        (enum-set-subset? . g$6613$MT&Mo)
        (enum-set-projection . g$6619$MT&Mo)
        (enum-set-member? . g$6612$MT&Mo)
        (enum-set-intersection . g$6616$MT&Mo)
        (enum-set-indexer . g$6609$MT&Mo)
        (enum-set-difference . g$6617$MT&Mo)
        (enum-set-constructor . g$6610$MT&Mo)
        (enum-set-complement . g$6618$MT&Mo)
        (enum-set->list . g$6611$MT&Mo)
        (who-condition? . g$5917$MT&Mo)
        (warning? . g$5836$MT&Mo)
        (violation? . g$5875$MT&Mo)
        (undefined-violation? . g$5987$MT&Mo)
        (syntax-violation? . g$5972$MT&Mo)
        (syntax-violation-subform . g$5974$MT&Mo)
        (syntax-violation-form . g$5973$MT&Mo)
        (syntax-violation . g$8036$MT&Mo)
        (simple-conditions . g$11383$MT&Mo)
        (serious-condition? . g$5849$MT&Mo)
        (non-continuable-violation? . g$5931$MT&Mo)
        (message-condition? . g$5822$MT&Mo)
        (make-who-condition . g$5915$MT&Mo)
        (make-warning . g$5835$MT&Mo)
        (make-violation . g$5874$MT&Mo)
        (make-undefined-violation . g$5986$MT&Mo)
        (make-syntax-violation . g$5969$MT&Mo)
        (make-serious-condition . g$5848$MT&Mo)
        (make-non-continuable-violation . g$5930$MT&Mo)
        (make-message-condition . g$5820$MT&Mo)
        (make-lexical-violation . g$5956$MT&Mo)
        (make-irritants-condition . g$5900$MT&Mo)
        (make-implementation-restriction-violation . g$5943$MT&Mo)
        (make-error . g$5861$MT&Mo)
        (make-assertion-violation . g$5887$MT&Mo)
        (lexical-violation? . g$5957$MT&Mo)
        (irritants-condition? . g$5902$MT&Mo)
        (implementation-restriction-violation? . g$5944$MT&Mo)
        (error? . g$5862$MT&Mo)
        (condition-who . g$5918$MT&Mo)
        (condition-predicate . g$11382$MT&Mo)
        (condition-message . g$5823$MT&Mo)
        (condition-irritants . g$5903$MT&Mo)
        (condition-accessor . g$11381$MT&Mo)
        (condition . g$11380$MT&Mo)
        (assertion-violation? . g$5888$MT&Mo)
        (condition? . g$11379$MT&Mo)
        (utf32->string . g$11378$MT&Mo)
        (utf16->string . g$11377$MT&Mo)
        (utf8->string . g$11376$MT&Mo)
        (uint-list->bytevector . g$11375$MT&Mo)
        (u8-list->bytevector . g$11374$MT&Mo)
        (string->utf8 . g$11373$MT&Mo)
        (string->utf32 . g$11372$MT&Mo)
        (string->utf16 . g$11371$MT&Mo)
        (sint-list->bytevector . g$11370$MT&Mo)
        (native-endianness . g$5659$MT&Mo)
        (bytevector? . g$5363$MT&Mo)
        (bytevector=? . g$11369$MT&Mo)
        (bytevector-uint-set! . g$11368$MT&Mo)
        (bytevector-uint-ref . g$11367$MT&Mo)
        (bytevector-u8-set! . g$11366$MT&Mo)
        (bytevector-u8-ref . g$11365$MT&Mo)
        (bytevector-u64-set! . g$5680$MT&Mo)
        (bytevector-u64-ref . g$5676$MT&Mo)
        (bytevector-u64-native-set! . g$5682$MT&Mo)
        (bytevector-u64-native-ref . g$5678$MT&Mo)
        (bytevector-u32-set! . g$5672$MT&Mo)
        (bytevector-u32-ref . g$5668$MT&Mo)
        (bytevector-u32-native-set! . g$5674$MT&Mo)
        (bytevector-u32-native-ref . g$5670$MT&Mo)
        (bytevector-u16-set! . g$5664$MT&Mo)
        (bytevector-u16-ref . g$5660$MT&Mo)
        (bytevector-u16-native-set! . g$5666$MT&Mo)
        (bytevector-u16-native-ref . g$5662$MT&Mo)
        (bytevector-sint-set! . g$11364$MT&Mo)
        (bytevector-sint-ref . g$11363$MT&Mo)
        (bytevector-s8-set! . g$11362$MT&Mo)
        (bytevector-s8-ref . g$11361$MT&Mo)
        (bytevector-s64-set! . g$5681$MT&Mo)
        (bytevector-s64-ref . g$5677$MT&Mo)
        (bytevector-s64-native-set! . g$5683$MT&Mo)
        (bytevector-s64-native-ref . g$5679$MT&Mo)
        (bytevector-s32-set! . g$5673$MT&Mo)
        (bytevector-s32-ref . g$5669$MT&Mo)
        (bytevector-s32-native-set! . g$5675$MT&Mo)
        (bytevector-s32-native-ref . g$5671$MT&Mo)
        (bytevector-s16-set! . g$5665$MT&Mo)
        (bytevector-s16-ref . g$5661$MT&Mo)
        (bytevector-s16-native-set! . g$5667$MT&Mo)
        (bytevector-s16-native-ref . g$5663$MT&Mo)
        (bytevector-length . g$11360$MT&Mo)
        (bytevector-ieee-single-set! . g$11359$MT&Mo)
        (bytevector-ieee-single-ref . g$11358$MT&Mo)
        (bytevector-ieee-single-native-set! . g$5686$MT&Mo)
        (bytevector-ieee-single-native-ref . g$5684$MT&Mo)
        (bytevector-ieee-double-set! . g$11357$MT&Mo)
        (bytevector-ieee-double-ref . g$11356$MT&Mo)
        (bytevector-ieee-double-native-set! . g$5687$MT&Mo)
        (bytevector-ieee-double-native-ref . g$5685$MT&Mo)
        (bytevector-fill! . g$11355$MT&Mo)
        (bytevector-copy! . g$11354$MT&Mo)
        (bytevector-copy . g$11353$MT&Mo)
        (bytevector->uint-list . g$11352$MT&Mo)
        (bytevector->u8-list . g$11351$MT&Mo)
        (bytevector->sint-list . g$11350$MT&Mo)
        (no-nans-violation? . g$6177$MT&Mo)
        (no-infinities-violation? . g$6164$MT&Mo)
        (make-no-nans-violation . g$6176$MT&Mo)
        (make-no-infinities-violation . g$6163$MT&Mo)
        (real->flonum . g$11349$MT&Mo)
        (flzero? . g$6461$MT&Mo)
        (fltruncate . g$6456$MT&Mo)
        (fltan . g$6446$MT&Mo)
        (flsqrt . g$6451$MT&Mo)
        (flsin . g$6444$MT&Mo)
        (flround . g$6457$MT&Mo)
        (flpositive? . g$6459$MT&Mo)
        (flonum? . g$5368$MT&Mo)
        (flodd? . g$6463$MT&Mo)
        (flnumerator . g$11348$MT&Mo)
        (flnegative? . g$6460$MT&Mo)
        (flnan? . g$6443$MT&Mo)
        (flmod0 . g$6437$MT&Mo)
        (flmod . g$6436$MT&Mo)
        (flmin . g$6465$MT&Mo)
        (flmax . g$6464$MT&Mo)
        (fllog . g$6450$MT&Mo)
        (flinteger? . g$6440$MT&Mo)
        (flinfinite? . g$6442$MT&Mo)
        (flfloor . g$6455$MT&Mo)
        (flfinite? . g$6441$MT&Mo)
        (flexpt . g$6453$MT&Mo)
        (flexp . g$6452$MT&Mo)
        (fleven? . g$6462$MT&Mo)
        (fldiv0-and-mod0 . g$6439$MT&Mo)
        (fldiv0 . g$11347$MT&Mo)
        (fldiv-and-mod . g$6438$MT&Mo)
        (fldiv . g$11346$MT&Mo)
        (fldenominator . g$11345$MT&Mo)
        (flcos . g$6445$MT&Mo)
        (flceiling . g$6454$MT&Mo)
        (flatan . g$6449$MT&Mo)
        (flasin . g$6447$MT&Mo)
        (flacos . g$6448$MT&Mo)
        (flabs . g$6458$MT&Mo)
        (fl>? . g$11344$MT&Mo)
        (fl>=? . g$11343$MT&Mo)
        (fl=? . g$11342$MT&Mo)
        (fl<? . g$11341$MT&Mo)
        (fl<=? . g$11340$MT&Mo)
        (fl/ . g$11339$MT&Mo)
        (fl- . g$11338$MT&Mo)
        (fl+ . g$11337$MT&Mo)
        (fl* . g$11336$MT&Mo)
        (fixnum->flonum . g$11335$MT&Mo)
        (fxzero? . g$6358$MT&Mo)
        (fxxor . g$11334$MT&Mo)
        (fxrotate-bit-field . g$6372$MT&Mo)
        (fxreverse-bit-field . g$11333$MT&Mo)
        (fxpositive? . g$6356$MT&Mo)
        (fxodd? . g$6360$MT&Mo)
        (fxnot . g$11332$MT&Mo)
        (fxnegative? . g$6357$MT&Mo)
        (fxmod0 . g$6353$MT&Mo)
        (fxmod . g$6352$MT&Mo)
        (fxmin . g$6362$MT&Mo)
        (fxmax . g$6361$MT&Mo)
        (fxlength . g$11331$MT&Mo)
        (fxior . g$11330$MT&Mo)
        (fxif . g$6366$MT&Mo)
        (fxfirst-bit-set . g$11329$MT&Mo)
        (fxeven? . g$6359$MT&Mo)
        (fxdiv0-and-mod0 . g$6355$MT&Mo)
        (fxdiv0 . g$11328$MT&Mo)
        (fxdiv-and-mod . g$6354$MT&Mo)
        (fxdiv . g$11327$MT&Mo)
        (fxcopy-bit-field . g$6369$MT&Mo)
        (fxcopy-bit . g$6367$MT&Mo)
        (fxbit-set? . g$11326$MT&Mo)
        (fxbit-field . g$6368$MT&Mo)
        (fxbit-count . g$11325$MT&Mo)
        (fxarithmetic-shift-right . g$6371$MT&Mo)
        (fxarithmetic-shift-left . g$6370$MT&Mo)
        (fxarithmetic-shift . g$11324$MT&Mo)
        (fxand . g$11323$MT&Mo)
        (fx>? . g$11322$MT&Mo)
        (fx>=? . g$11321$MT&Mo)
        (fx=? . g$11320$MT&Mo)
        (fx<? . g$11319$MT&Mo)
        (fx<=? . g$11318$MT&Mo)
        (fx-/carry . g$6364$MT&Mo)
        (fx- . g$11317$MT&Mo)
        (fx+/carry . g$6365$MT&Mo)
        (fx+ . g$11316$MT&Mo)
        (fx*/carry . g$6363$MT&Mo)
        (fx* . g$11315$MT&Mo)
        (greatest-fixnum . g$11314$MT&Mo)
        (least-fixnum . g$11313$MT&Mo)
        (fixnum-width . g$5369$MT&Mo)
        (fixnum? . g$5367$MT&Mo)
        (bitwise-rotate-bit-field . g$6326$MT&Mo)
        (bitwise-reverse-bit-field . g$11312$MT&Mo)
        (bitwise-length . g$11311$MT&Mo)
        (bitwise-if . g$6320$MT&Mo)
        (bitwise-first-bit-set . g$11310$MT&Mo)
        (bitwise-copy-bit-field . g$6323$MT&Mo)
        (bitwise-copy-bit . g$6321$MT&Mo)
        (bitwise-bit-set? . g$11309$MT&Mo)
        (bitwise-bit-field . g$6322$MT&Mo)
        (bitwise-bit-count . g$11308$MT&Mo)
        (bitwise-xor . g$11307$MT&Mo)
        (bitwise-ior . g$11306$MT&Mo)
        (bitwise-and . g$11305$MT&Mo)
        (bitwise-not . g$11304$MT&Mo)
        (bitwise-arithmetic-shift-right . g$6325$MT&Mo)
        (bitwise-arithmetic-shift-left . g$6324$MT&Mo)
        (bitwise-arithmetic-shift . g$11303$MT&Mo)
        (zero? . g$5402$MT&Mo)
        (vector? . g$5362$MT&Mo)
        (vector-set! . g$11302$MT&Mo)
        (vector-ref . g$11301$MT&Mo)
        (vector-map . g$5434$MT&Mo)
        (vector-length . g$11300$MT&Mo)
        (vector-for-each . g$5435$MT&Mo)
        (vector-fill! . g$5370$MT&Mo)
        (vector->list . g$11299$MT&Mo)
        (vector . g$11298$MT&Mo)
        (values . g$11297$MT&Mo)
        (truncate . g$11296$MT&Mo)
        (tan . g$11295$MT&Mo)
        (symbol? . g$5364$MT&Mo)
        (symbol=? . g$5419$MT&Mo)
        (symbol->string . g$11294$MT&Mo)
        (substring . g$11293$MT&Mo)
        (string? . g$11292$MT&Mo)
        (string>? . g$5416$MT&Mo)
        (string>=? . g$5418$MT&Mo)
        (string=? . g$5414$MT&Mo)
        (string<? . g$5415$MT&Mo)
        (string<=? . g$5417$MT&Mo)
        (string-ref . g$11291$MT&Mo)
        (string-length . g$11290$MT&Mo)
        (string-for-each . g$5436$MT&Mo)
        (string-copy . g$11289$MT&Mo)
        (string-append . g$11288$MT&Mo)
        (string->symbol . g$11287$MT&Mo)
        (string->number . g$11286$MT&Mo)
        (string->list . g$11285$MT&Mo)
        (string . g$11284$MT&Mo)
        (sqrt . g$11283$MT&Mo)
        (sin . g$11282$MT&Mo)
        (round . g$11281$MT&Mo)
        (reverse . g$5371$MT&Mo)
        (real? . g$11280$MT&Mo)
        (real-valued? . g$11279$MT&Mo)
        (real-part . g$11278$MT&Mo)
        (rationalize . g$5431$MT&Mo)
        (rational? . g$11277$MT&Mo)
        (rational-valued? . g$11276$MT&Mo)
        (procedure? . g$5366$MT&Mo)
        (positive? . g$5400$MT&Mo)
        (pair? . g$11275$MT&Mo)
        (odd? . g$5404$MT&Mo)
        (numerator . g$11274$MT&Mo)
        (number? . g$11273$MT&Mo)
        (number->string . g$11272$MT&Mo)
        (null? . g$11271$MT&Mo)
        (not . g$11270$MT&Mo)
        (negative? . g$5401$MT&Mo)
        (nan? . g$11269$MT&Mo)
        (min . g$5406$MT&Mo)
        (max . g$5405$MT&Mo)
        (map . g$5059$MT&Mo)
        (make-vector . g$11268$MT&Mo)
        (make-string . g$11267$MT&Mo)
        (make-rectangular . g$11266$MT&Mo)
        (make-polar . g$11265$MT&Mo)
        (magnitude . g$11264$MT&Mo)
        (log . g$11263$MT&Mo)
        (list? . g$11262$MT&Mo)
        (list-tail . g$5039$MT&Mo)
        (list-ref . g$5040$MT&Mo)
        (list->vector . g$5359$MT&Mo)
        (list->string . g$5360$MT&Mo)
        (list . g$11261$MT&Mo)
        (length . g$11260$MT&Mo)
        (lcm . g$5408$MT&Mo)
        (integer? . g$11259$MT&Mo)
        (integer-valued? . g$11258$MT&Mo)
        (integer->char . g$11257$MT&Mo)
        (infinite? . g$11256$MT&Mo)
        (inexact? . g$11255$MT&Mo)
        (inexact . g$11254$MT&Mo)
        (imag-part . g$11253$MT&Mo)
        (gcd . g$5407$MT&Mo)
        (for-each . g$5060$MT&Mo)
        (floor . g$11252$MT&Mo)
        (finite? . g$11251$MT&Mo)
        (expt . g$11250$MT&Mo)
        (exp . g$11249$MT&Mo)
        (exact? . g$11248$MT&Mo)
        (exact-integer-sqrt . g$11247$MT&Mo)
        (exact . g$11246$MT&Mo)
        (even? . g$5403$MT&Mo)
        (error . g$11245$MT&Mo)
        (eqv? . g$11244$MT&Mo)
        (equal? . g$11243$MT&Mo)
        (eq? . g$11242$MT&Mo)
        (dynamic-wind . g$11241$MT&Mo)
        (div0-and-mod0 . g$5358$MT&Mo)
        (mod0 . g$5356$MT&Mo)
        (div0 . g$11240$MT&Mo)
        (div-and-mod . g$5357$MT&Mo)
        (mod . g$5355$MT&Mo)
        (div . g$11239$MT&Mo)
        (denominator . g$11238$MT&Mo)
        (cos . g$11237$MT&Mo)
        (cons . g$11236$MT&Mo)
        (complex? . g$11235$MT&Mo)
        (char? . g$5361$MT&Mo)
        (char>? . g$5428$MT&Mo)
        (char>=? . g$5430$MT&Mo)
        (char=? . g$5426$MT&Mo)
        (char<? . g$5427$MT&Mo)
        (char<=? . g$5429$MT&Mo)
        (char->integer . g$11234$MT&Mo)
        (ceiling . g$11233$MT&Mo)
        (call-with-values . g$11232$MT&Mo)
        (call/cc . g$11231$MT&Mo)
        (call-with-current-continuation . g$11230$MT&Mo)
        (cddddr . g$5399$MT&Mo)
        (cdddar . g$5398$MT&Mo)
        (cddadr . g$5397$MT&Mo)
        (cddaar . g$5396$MT&Mo)
        (cdaddr . g$5395$MT&Mo)
        (cdadar . g$5394$MT&Mo)
        (cdaadr . g$5393$MT&Mo)
        (cdaaar . g$5392$MT&Mo)
        (cadddr . g$5391$MT&Mo)
        (caddar . g$5390$MT&Mo)
        (cadadr . g$5389$MT&Mo)
        (cadaar . g$5388$MT&Mo)
        (caaddr . g$5387$MT&Mo)
        (caadar . g$5386$MT&Mo)
        (caaadr . g$5385$MT&Mo)
        (caaaar . g$5384$MT&Mo)
        (cdddr . g$5383$MT&Mo)
        (cddar . g$5382$MT&Mo)
        (cdadr . g$5381$MT&Mo)
        (cdaar . g$5380$MT&Mo)
        (caddr . g$5379$MT&Mo)
        (cadar . g$5378$MT&Mo)
        (caadr . g$5377$MT&Mo)
        (caaar . g$5376$MT&Mo)
        (cddr . g$5375$MT&Mo)
        (cdar . g$5374$MT&Mo)
        (cadr . g$5373$MT&Mo)
        (caar . g$5372$MT&Mo)
        (cdr . g$11229$MT&Mo)
        (car . g$11228$MT&Mo)
        (boolean? . g$5365$MT&Mo)
        (boolean=? . g$5420$MT&Mo)
        (atan . g$11227$MT&Mo)
        (assertion-violation . g$11226$MT&Mo)
        (asin . g$11225$MT&Mo)
        (apply . g$11224$MT&Mo)
        (append . g$11223$MT&Mo)
        (angle . g$11222$MT&Mo)
        (acos . g$11221$MT&Mo)
        (abs . g$11220$MT&Mo)
        (/ . g$11219$MT&Mo)
        (* . g$11218$MT&Mo)
        (- . g$11217$MT&Mo)
        (+ . g$11216$MT&Mo)
        (>= . g$11215$MT&Mo)
        (> . g$11214$MT&Mo)
        (= . g$11213$MT&Mo)
        (<= . g$11212$MT&Mo)
        (< . g$11211$MT&Mo)
        (make-record-printer . g$11210$MT&Mo)
        (eqv-hash . g$11209$MT&Mo)
        (reverse! . g$11208$MT&Mo)
        (deserialize-port . g$11207$MT&Mo)
        (serialize-port . g$11206$MT&Mo)
        (enum-set? . g$6584$MT&Mo)
        (make-promise . g$6197$MT&Mo)
        (load/unload . g$11020$MT&Mo)
        (load/args . g$11019$MT&Mo)
        (printf . g$6693$MT&Mo)
        (fprintf . g$6694$MT&Mo)
        (format . g$6695$MT&Mo)
        (procedure-form . g$11205$MT&Mo)
        (procedure-environment . g$11204$MT&Mo)
        (procedure-name . g$11203$MT&Mo)
        (procedure-arity . g$11202$MT&Mo)
        (gc-collect . g$11201$MT&Mo)
        (typeof . g$11200$MT&Mo)
        (clr-type? . g$11199$MT&Mo)
        (get-clr-type . g$11198$MT&Mo)
        (get-command-line . g$11197$MT&Mo)
        (vector-append . g$11196$MT&Mo)
        (vector-filter . g$11195$MT&Mo)
        (vector-reverse! . g$11194$MT&Mo)
        (vector-contains? . g$11193$MT&Mo)
        (vector-index-of . g$11192$MT&Mo)
        (vector-copy . g$11191$MT&Mo)
        (vector-binary-search . g$11190$MT&Mo)
        (string-ci-compare . g$11189$MT&Mo)
        (string-compare . g$11188$MT&Mo)
        (string-format . g$11187$MT&Mo)
        (trace-printer . g$11016$MT&Mo)
        (make-traced-procedure . g$11186$MT&Mo)
        (make-traced-macro . g$6715$MT&Mo)
        (assertion-error . g$8032$MT&Mo)
        (time-it . g$11185$MT&Mo)
        (make-parameter . g$6722$MT&Mo)
        (library-locator . g$11184$MT&Mo)
        (get-library-paths . g$11183$MT&Mo)
        (open-tcp-input/output-port . g$11182$MT&Mo)
        (hashtable-for-each . g$11181$MT&Mo)
        (hashtable-map . g$11180$MT&Mo)
        (environment-bindings . g$8010$MT&Mo)
        (environment-symbols . g$8013$MT&Mo)
        (interaction-environment-symbols . g$8009$MT&Mo)
        (optimization-level . g$11179$MT&Mo)
        (library-path . g$7341$MT&Mo)
        (make-compile-time-value . g$7719$MT&Mo)
        (expand->core . g$8019$MT&Mo)
        (expand . g$8017$MT&Mo)
        (convert->cps . g$7038$MT&Mo)
        (installed-libraries . g$7362$MT&Mo)
        (uninstall-library . g$7353$MT&Mo)
        (pretty-width . g$6797$MT&Mo)
        (pretty-print . g$6799$MT&Mo)
        (&no-nans . g$11178$MT&Mo)
        (&no-infinities . g$11177$MT&Mo)
        (&i/o-encoding . g$11176$MT&Mo)
        (&i/o-decoding . g$11175$MT&Mo)
        (&i/o-port . g$11174$MT&Mo)
        (&i/o-file-does-not-exist . g$11173$MT&Mo)
        (&i/o-file-already-exists . g$11172$MT&Mo)
        (&i/o-file-is-read-only . g$11171$MT&Mo)
        (&i/o-file-protection . g$11170$MT&Mo)
        (&i/o-filename . g$11169$MT&Mo)
        (&i/o-invalid-position . g$11168$MT&Mo)
        (&i/o-write . g$11167$MT&Mo)
        (&i/o-read . g$11166$MT&Mo)
        (&i/o . g$11165$MT&Mo)
        (&non-continuable . g$11164$MT&Mo)
        (&undefined . g$11163$MT&Mo)
        (&syntax . g$11162$MT&Mo)
        (&lexical . g$11161$MT&Mo)
        (&implementation-restriction . g$11160$MT&Mo)
        (&who . g$11159$MT&Mo)
        (&irritants . g$11158$MT&Mo)
        (&assertion . g$11157$MT&Mo)
        (&violation . g$11156$MT&Mo)
        (&error . g$11155$MT&Mo)
        (&serious . g$11154$MT&Mo)
        (&warning . g$11153$MT&Mo)
        (&message . g$11152$MT&Mo)
        (&condition . g$11151$MT&Mo)
        (define-condition-type . g$11150$MT&Mo)
        (define-enumeration . g$11149$MT&Mo)
        (define-record-type . g$11148$MT&Mo)
        (parent-rtd . g$11147$MT&Mo)
        (nongenerative . g$11146$MT&Mo)
        (opaque . g$11145$MT&Mo)
        (sealed . g$11144$MT&Mo)
        (protocol . g$11143$MT&Mo)
        (parent . g$11142$MT&Mo)
        (immutable . g$11141$MT&Mo)
        (mutable . g$11140$MT&Mo)
        (fields . g$11139$MT&Mo)
        (error-handling-mode . g$11138$MT&Mo)
        (file-options . g$11137$MT&Mo)
        (buffer-mode . g$11136$MT&Mo)
        (eol-style . g$11135$MT&Mo)
        (guard . g$11134$MT&Mo)
        (trace-letrec-syntax . g$11133$MT&Mo)
        (trace-let-syntax . g$11132$MT&Mo)
        (trace-define-syntax . g$11131$MT&Mo)
        (trace-define . g$11130$MT&Mo)
        (trace-lambda . g$11129$MT&Mo)
        (unsyntax-splicing . g$11128$MT&Mo)
        (unsyntax . g$11127$MT&Mo)
        (unquote-splicing . g$11126$MT&Mo)
        (unquote . g$11125$MT&Mo)
        (_ . g$11124$MT&Mo)
        (else . g$11123$MT&Mo)
        (=> . g$11122$MT&Mo)
        (... . g$11121$MT&Mo)
        (assert . g$11120$MT&Mo)
        (endianness . g$11119$MT&Mo)
        (delay . g$11118$MT&Mo)
        (time . g$11117$MT&Mo)
        (or . g$11116$MT&Mo)
        (and . g$11115$MT&Mo)
        (do . g$11114$MT&Mo)
        (cond . g$11113$MT&Mo)
        (let* . g$11112$MT&Mo)
        (let . g$11111$MT&Mo)
        (identifier-syntax . g$11110$MT&Mo)
        (with-syntax . g$11109$MT&Mo)
        (quasisyntax . g$11108$MT&Mo)
        (quasiquote . g$11107$MT&Mo)
        (syntax-rules . g$11106$MT&Mo)
        (include-into . g$11105$MT&Mo)
        (include . g$11104$MT&Mo)
        (define-struct . g$11103$MT&Mo)
        (let-values . g$11102$MT&Mo)
        (let*-values . g$11101$MT&Mo)
        (record-constructor-descriptor . g$11100$MT&Mo)
        (record-type-descriptor . g$11099$MT&Mo)
        (fluid-let-syntax . g$11098$MT&Mo)
        (case . g$11097$MT&Mo)
        (parameterize . g$11096$MT&Mo)
        (unless . g$11095$MT&Mo)
        (when . g$11094$MT&Mo)
        (if . g$11093$MT&Mo)
        (letrec* . g$11092$MT&Mo)
        (letrec . g$11091$MT&Mo)
        (type-descriptor . g$11090$MT&Mo)
        (case-lambda . g$11089$MT&Mo)
        (lambda . g$11088$MT&Mo)
        (syntax . g$11087$MT&Mo)
        (syntax-case . g$11086$MT&Mo)
        (quote . g$11085$MT&Mo)
        (foreign-call . g$11084$MT&Mo)
        (letrec-syntax . g$11083$MT&Mo)
        (let-syntax . g$11082$MT&Mo)
        (set! . g$11081$MT&Mo)
        (export . g$11080$MT&Mo)
        (import . g$11079$MT&Mo)
        (library . g$11078$MT&Mo)
        (begin . g$11077$MT&Mo)
        (module . g$11076$MT&Mo)
        (define-syntax . g$11075$MT&Mo)
        (define . g$11074$MT&Mo))
      '((g$7914$MT&Mo core-prim . ellipsis-map)
        (g$6179$MT&Mo core-prim . &no-nans-rcd)
        (g$6178$MT&Mo core-prim . &no-nans-rtd)
        (g$6166$MT&Mo core-prim . &no-infinities-rcd)
        (g$6165$MT&Mo core-prim . &no-infinities-rtd)
        (g$6153$MT&Mo core-prim . &i/o-encoding-rcd)
        (g$6152$MT&Mo core-prim . &i/o-encoding-rtd)
        (g$6138$MT&Mo core-prim . &i/o-decoding-rcd)
        (g$6137$MT&Mo core-prim . &i/o-decoding-rtd)
        (g$6125$MT&Mo core-prim . &i/o-port-rcd)
        (g$6124$MT&Mo core-prim . &i/o-port-rtd)
        (g$6110$MT&Mo core-prim . &i/o-file-does-not-exist-rcd)
        (g$6109$MT&Mo core-prim . &i/o-file-does-not-exist-rtd)
        (g$6097$MT&Mo core-prim . &i/o-file-already-exists-rcd)
        (g$6096$MT&Mo core-prim . &i/o-file-already-exists-rtd)
        (g$6084$MT&Mo core-prim . &i/o-file-is-read-only-rcd)
        (g$6083$MT&Mo core-prim . &i/o-file-is-read-only-rtd)
        (g$6071$MT&Mo core-prim . &i/o-file-protection-rcd)
        (g$6070$MT&Mo core-prim . &i/o-file-protection-rtd)
        (g$6058$MT&Mo core-prim . &i/o-filename-rcd)
        (g$6057$MT&Mo core-prim . &i/o-filename-rtd)
        (g$6043$MT&Mo core-prim . &i/o-invalid-position-rcd)
        (g$6042$MT&Mo core-prim . &i/o-invalid-position-rtd)
        (g$6028$MT&Mo core-prim . &i/o-write-rcd)
        (g$6027$MT&Mo core-prim . &i/o-write-rtd)
        (g$6015$MT&Mo core-prim . &i/o-read-rcd)
        (g$6014$MT&Mo core-prim . &i/o-read-rtd)
        (g$6002$MT&Mo core-prim . &i/o-rcd)
        (g$6001$MT&Mo core-prim . &i/o-rtd)
        (g$5989$MT&Mo core-prim . &undefined-rcd)
        (g$5988$MT&Mo core-prim . &undefined-rtd)
        (g$5976$MT&Mo core-prim . &syntax-rcd)
        (g$5975$MT&Mo core-prim . &syntax-rtd)
        (g$5959$MT&Mo core-prim . &lexical-rcd)
        (g$5958$MT&Mo core-prim . &lexical-rtd)
        (g$5946$MT&Mo core-prim . &implementation-restriction-rcd)
        (g$5945$MT&Mo core-prim . &implementation-restriction-rtd)
        (g$5933$MT&Mo core-prim . &non-continuable-rcd)
        (g$5932$MT&Mo core-prim . &non-continuable-rtd)
        (g$5920$MT&Mo core-prim . &who-rcd)
        (g$5919$MT&Mo core-prim . &who-rtd)
        (g$5905$MT&Mo core-prim . &irritants-rcd)
        (g$5904$MT&Mo core-prim . &irritants-rtd)
        (g$5890$MT&Mo core-prim . &assertion-rcd)
        (g$5889$MT&Mo core-prim . &assertion-rtd)
        (g$5877$MT&Mo core-prim . &violation-rcd)
        (g$5876$MT&Mo core-prim . &violation-rtd)
        (g$5864$MT&Mo core-prim . &error-rcd)
        (g$5863$MT&Mo core-prim . &error-rtd)
        (g$5851$MT&Mo core-prim . &serious-rcd)
        (g$5850$MT&Mo core-prim . &serious-rtd)
        (g$5838$MT&Mo core-prim . &warning-rcd)
        (g$5837$MT&Mo core-prim . &warning-rtd)
        (g$5825$MT&Mo core-prim . &message-rcd)
        (g$5824$MT&Mo core-prim . &message-rtd)
        (g$5785$MT&Mo core-prim . &condition-rcd)
        (g$5784$MT&Mo core-prim . &condition-rtd)
        (g$11545$MT&Mo core-prim . library-letrec*)
        (g$11544$MT&Mo core-prim . annotation-stripped)
        (g$11543$MT&Mo core-prim . annotation-source)
        (g$11542$MT&Mo core-prim . annotation-expression)
        (g$11541$MT&Mo core-prim . annotation?)
        (g$11540$MT&Mo core-prim . read-annotated)
        (g$11539$MT&Mo core-prim . tanh)
        (g$11538$MT&Mo core-prim . cosh)
        (g$11537$MT&Mo core-prim . sinh)
        (g$11536$MT&Mo core-prim . make-guid)
        (g$11535$MT&Mo core-prim . unspecified?)
        (g$5042$MT&Mo core-prim . make-list)
        (g$5041$MT&Mo core-prim . last-pair)
        (g$11534$MT&Mo core-prim . load-r5rs)
        (g$11533$MT&Mo core-prim . license)
        (g$11532$MT&Mo core-prim . stacktrace)
        (g$11022$MT&Mo core-prim . ironscheme-build)
        (g$11531$MT&Mo core-prim . define-clr-class-internal)
        (g$11530$MT&Mo core-prim . clr-field-set!-internal)
        (g$11529$MT&Mo core-prim . clr-field-get-internal)
        (g$11528$MT&Mo core-prim . clr-cast-internal)
        (g$11527$MT&Mo core-prim . clr-call-internal)
        (g$11526$MT&Mo core-prim . clr-new-internal)
        (g$11525$MT&Mo core-prim . clr-new-array-internal)
        (g$11524$MT&Mo core-prim . clr-is-internal)
        (g$11523$MT&Mo core-prim . clr-reference-internal)
        (g$11522$MT&Mo core-prim . clr-using-internal)
        (g$8033$MT&Mo core-prim . syntax-error)
        (g$7909$MT&Mo core-prim . syntax-dispatch)
        (g$11521$MT&Mo core-prim . compile-core)
        (g$11520$MT&Mo core-prim . eval-core)
        (g$11519$MT&Mo core-prim . remove-location)
        (g$11518$MT&Mo core-prim . set-symbol-value!)
        (g$11517$MT&Mo core-prim . symbol-value)
        (g$11516$MT&Mo core-prim . symbol-bound?)
        (g$11515$MT&Mo core-prim . ungensym)
        (g$11514$MT&Mo core-prim . gensym)
        (g$11513$MT&Mo core-prim . void)
        (g$11512$MT&Mo core-prim . load-serialized-library)
        (g$11511$MT&Mo core-prim . serialize-library)
        (g$11026$MT&Mo core-prim . compile-system-libraries)
        (g$11028$MT&Mo core-prim . compile->closure)
        (g$11027$MT&Mo core-prim . compile)
        (g$11021$MT&Mo core-prim . load)
        (g$11510$MT&Mo core-prim . string-normalize)
        (g$8043$MT&Mo core-prim . interaction-environment)
        (g$11509$MT&Mo core-prim . char-ready?)
        (g$11508$MT&Mo core-prim . string-upcase)
        (g$11507$MT&Mo core-prim . string-titlecase)
        (g$6262$MT&Mo core-prim . string-normalize-nfkd)
        (g$6261$MT&Mo core-prim . string-normalize-nfkc)
        (g$6260$MT&Mo core-prim . string-normalize-nfd)
        (g$6259$MT&Mo core-prim . string-normalize-nfc)
        (g$11506$MT&Mo core-prim . string-foldcase)
        (g$11505$MT&Mo core-prim . string-downcase)
        (g$6246$MT&Mo core-prim . string-ci>?)
        (g$6248$MT&Mo core-prim . string-ci>=?)
        (g$6244$MT&Mo core-prim . string-ci=?)
        (g$6245$MT&Mo core-prim . string-ci<?)
        (g$6247$MT&Mo core-prim . string-ci<=?)
        (g$11504$MT&Mo core-prim . char-whitespace?)
        (g$11503$MT&Mo core-prim . char-upper-case?)
        (g$11502$MT&Mo core-prim . char-title-case?)
        (g$11501$MT&Mo core-prim . char-numeric?)
        (g$11500$MT&Mo core-prim . char-lower-case?)
        (g$11499$MT&Mo core-prim . char-general-category)
        (g$11498$MT&Mo core-prim . char-upcase)
        (g$11497$MT&Mo core-prim . char-titlecase)
        (g$11496$MT&Mo core-prim . char-foldcase)
        (g$11495$MT&Mo core-prim . char-downcase)
        (g$6256$MT&Mo core-prim . char-ci>?)
        (g$6258$MT&Mo core-prim . char-ci>=?)
        (g$6254$MT&Mo core-prim . char-ci=?)
        (g$6255$MT&Mo core-prim . char-ci<?)
        (g$6257$MT&Mo core-prim . char-ci<=?)
        (g$11494$MT&Mo core-prim . char-alphabetic?)
        (g$7721$MT&Mo core-prim . variable-transformer-procedure)
        (g$7720$MT&Mo core-prim . variable-transformer?)
        (g$7718$MT&Mo core-prim . make-variable-transformer)
        (g$8037$MT&Mo core-prim . identifier?)
        (g$8026$MT&Mo core-prim . generate-temporaries)
        (g$8027$MT&Mo core-prim . free-identifier=?)
        (g$8039$MT&Mo core-prim . syntax->datum)
        (g$8038$MT&Mo core-prim . datum->syntax)
        (g$8028$MT&Mo core-prim . bound-identifier=?)
        (g$11493$MT&Mo core-prim . record-type-descriptor?)
        (g$11492$MT&Mo core-prim . record-predicate)
        (g$11491$MT&Mo core-prim . record-mutator)
        (g$11490$MT&Mo core-prim . record-constructor)
        (g$11489$MT&Mo core-prim . record-accessor)
        (g$11488$MT&Mo core-prim . make-record-type-descriptor)
        (g$11487$MT&Mo core-prim . make-record-constructor-descriptor)
        (g$11486$MT&Mo core-prim . record?)
        (g$11485$MT&Mo core-prim . record-type-uid)
        (g$11484$MT&Mo core-prim . record-type-sealed?)
        (g$11483$MT&Mo core-prim . record-type-parent)
        (g$11482$MT&Mo core-prim . record-type-opaque?)
        (g$11481$MT&Mo core-prim . record-type-name)
        (g$11480$MT&Mo core-prim . record-type-generative?)
        (g$11479$MT&Mo core-prim . record-type-field-names)
        (g$11478$MT&Mo core-prim . record-rtd)
        (g$11477$MT&Mo core-prim . record-field-mutable?)
        (g$5653$MT&Mo core-prim . delete-file)
        (g$5652$MT&Mo core-prim . file-exists?)
        (g$11476$MT&Mo core-prim . vector-sort!)
        (g$11475$MT&Mo core-prim . vector-sort)
        (g$6215$MT&Mo core-prim . list-sort)
        (g$11474$MT&Mo core-prim . symbol-hash)
        (g$11473$MT&Mo core-prim . string-ci-hash)
        (g$11472$MT&Mo core-prim . string-hash)
        (g$11471$MT&Mo core-prim . equal-hash)
        (g$11470$MT&Mo core-prim . hashtable-equivalence-function)
        (g$11469$MT&Mo core-prim . make-hashtable)
        (g$11468$MT&Mo core-prim . hashtable-hash-function)
        (g$5621$MT&Mo core-prim . make-eqv-hashtable)
        (g$5620$MT&Mo core-prim . make-eq-hashtable)
        (g$11467$MT&Mo core-prim . hashtable?)
        (g$5627$MT&Mo core-prim . hashtable-update!)
        (g$5622$MT&Mo core-prim . hashtable-size)
        (g$5624$MT&Mo core-prim . hashtable-set!)
        (g$5623$MT&Mo core-prim . hashtable-ref)
        (g$11466$MT&Mo core-prim . hashtable-mutable?)
        (g$11465$MT&Mo core-prim . hashtable-keys)
        (g$11464$MT&Mo core-prim . hashtable-entries)
        (g$5625$MT&Mo core-prim . hashtable-delete!)
        (g$11463$MT&Mo core-prim . hashtable-copy)
        (g$5626$MT&Mo core-prim . hashtable-contains?)
        (g$5628$MT&Mo core-prim . hashtable-clear!)
        (g$6546$MT&Mo core-prim . call-with-output-file)
        (g$6545$MT&Mo core-prim . call-with-input-file)
        (g$6537$MT&Mo core-prim . write-char)
        (g$11462$MT&Mo core-prim . write)
        (g$6544$MT&Mo core-prim . with-output-to-file)
        (g$6543$MT&Mo core-prim . with-input-from-file)
        (g$6536$MT&Mo core-prim . read-char)
        (g$11461$MT&Mo core-prim . read)
        (g$6535$MT&Mo core-prim . peek-char)
        (g$11460$MT&Mo core-prim . open-output-file)
        (g$11459$MT&Mo core-prim . open-input-file)
        (g$6547$MT&Mo core-prim . newline)
        (g$11458$MT&Mo core-prim . display)
        (g$11457$MT&Mo core-prim . close-output-port)
        (g$11456$MT&Mo core-prim . close-input-port)
        (g$11455$MT&Mo core-prim . eof-object?)
        (g$11454$MT&Mo core-prim . eof-object)
        (g$11453$MT&Mo core-prim . current-error-port)
        (g$11452$MT&Mo core-prim . current-output-port)
        (g$11451$MT&Mo core-prim . current-input-port)
        (g$11450$MT&Mo core-prim . output-port?)
        (g$11449$MT&Mo core-prim . input-port?)
        (g$11448$MT&Mo core-prim . utf-8-codec)
        (g$11447$MT&Mo core-prim . utf-16-codec)
        (g$11446$MT&Mo core-prim . transcoder-error-handling-mode)
        (g$11445$MT&Mo core-prim . transcoder-eol-style)
        (g$11444$MT&Mo core-prim . transcoder-codec)
        (g$11443$MT&Mo core-prim . transcoded-port)
        (g$11442$MT&Mo core-prim . textual-port?)
        (g$11441$MT&Mo core-prim . string->bytevector)
        (g$11440$MT&Mo core-prim . standard-output-port)
        (g$11439$MT&Mo core-prim . standard-input-port)
        (g$11438$MT&Mo core-prim . standard-error-port)
        (g$11437$MT&Mo core-prim . set-port-position!)
        (g$11436$MT&Mo core-prim . put-u8)
        (g$11435$MT&Mo core-prim . put-string)
        (g$6515$MT&Mo core-prim . put-datum)
        (g$11434$MT&Mo core-prim . put-char)
        (g$11433$MT&Mo core-prim . put-bytevector)
        (g$6520$MT&Mo core-prim . port?)
        (g$11432$MT&Mo core-prim . port-transcoder)
        (g$11431$MT&Mo core-prim . port-position)
        (g$11430$MT&Mo core-prim . port-has-set-port-position!?)
        (g$11429$MT&Mo core-prim . port-has-port-position?)
        (g$11428$MT&Mo core-prim . port-eof?)
        (g$11427$MT&Mo core-prim . output-port-buffer-mode)
        (g$6519$MT&Mo core-prim . open-string-output-port)
        (g$11426$MT&Mo core-prim . open-string-input-port)
        (g$11425$MT&Mo core-prim . open-file-output-port)
        (g$11424$MT&Mo core-prim . open-file-input/output-port)
        (g$11423$MT&Mo core-prim . open-file-input-port)
        (g$11422$MT&Mo core-prim . open-bytevector-output-port)
        (g$11421$MT&Mo core-prim . open-bytevector-input-port)
        (g$11420$MT&Mo core-prim . native-transcoder)
        (g$11419$MT&Mo core-prim . native-eol-style)
        (g$11418$MT&Mo core-prim . make-transcoder)
        (g$11417$MT&Mo core-prim . latin-1-codec)
        (g$6025$MT&Mo core-prim . make-i/o-write-error)
        (g$6012$MT&Mo core-prim . make-i/o-read-error)
        (g$6120$MT&Mo core-prim . make-i/o-port-error)
        (g$6038$MT&Mo core-prim . make-i/o-invalid-position-error)
        (g$6053$MT&Mo core-prim . make-i/o-filename-error)
        (g$6068$MT&Mo core-prim . make-i/o-file-protection-error)
        (g$6081$MT&Mo core-prim . make-i/o-file-is-read-only-error)
        (g$6107$MT&Mo core-prim . make-i/o-file-does-not-exist-error)
        (g$6094$MT&Mo core-prim . make-i/o-file-already-exists-error)
        (g$5999$MT&Mo core-prim . make-i/o-error)
        (g$6148$MT&Mo core-prim . make-i/o-encoding-error)
        (g$6135$MT&Mo core-prim . make-i/o-decoding-error)
        (g$11416$MT&Mo core-prim . make-custom-textual-output-port)
        (g$11415$MT&Mo
          core-prim
          .
          make-custom-textual-input/output-port)
        (g$11414$MT&Mo core-prim . make-custom-textual-input-port)
        (g$11413$MT&Mo core-prim . make-custom-binary-output-port)
        (g$11412$MT&Mo core-prim . make-custom-binary-input/output-port)
        (g$11411$MT&Mo core-prim . make-custom-binary-input-port)
        (g$11410$MT&Mo core-prim . make-bytevector)
        (g$11409$MT&Mo core-prim . lookahead-u8)
        (g$11408$MT&Mo core-prim . lookahead-char)
        (g$6026$MT&Mo core-prim . i/o-write-error?)
        (g$6013$MT&Mo core-prim . i/o-read-error?)
        (g$6122$MT&Mo core-prim . i/o-port-error?)
        (g$6040$MT&Mo core-prim . i/o-invalid-position-error?)
        (g$6041$MT&Mo core-prim . i/o-error-position)
        (g$6055$MT&Mo core-prim . i/o-filename-error?)
        (g$6069$MT&Mo core-prim . i/o-file-protection-error?)
        (g$6082$MT&Mo core-prim . i/o-file-is-read-only-error?)
        (g$6108$MT&Mo core-prim . i/o-file-does-not-exist-error?)
        (g$6095$MT&Mo core-prim . i/o-file-already-exists-error?)
        (g$6000$MT&Mo core-prim . i/o-error?)
        (g$6123$MT&Mo core-prim . i/o-error-port)
        (g$6056$MT&Mo core-prim . i/o-error-filename)
        (g$6150$MT&Mo core-prim . i/o-encoding-error?)
        (g$6151$MT&Mo core-prim . i/o-encoding-error-char)
        (g$6136$MT&Mo core-prim . i/o-decoding-error?)
        (g$11407$MT&Mo core-prim . get-u8)
        (g$11406$MT&Mo core-prim . get-string-n!)
        (g$11405$MT&Mo core-prim . get-string-n)
        (g$11404$MT&Mo core-prim . get-string-all)
        (g$11403$MT&Mo core-prim . get-line)
        (g$6516$MT&Mo core-prim . get-datum)
        (g$11402$MT&Mo core-prim . get-char)
        (g$11401$MT&Mo core-prim . get-bytevector-some)
        (g$11400$MT&Mo core-prim . get-bytevector-n!)
        (g$11399$MT&Mo core-prim . get-bytevector-n)
        (g$11398$MT&Mo core-prim . get-bytevector-all)
        (g$11397$MT&Mo core-prim . flush-output-port)
        (g$11396$MT&Mo core-prim . close-port)
        (g$6521$MT&Mo core-prim . call-with-string-output-port)
        (g$6522$MT&Mo core-prim . call-with-port)
        (g$11395$MT&Mo core-prim . call-with-bytevector-output-port)
        (g$11394$MT&Mo core-prim . bytevector->string)
        (g$11393$MT&Mo core-prim . buffer-mode?)
        (g$11392$MT&Mo core-prim . binary-port?)
        (g$8016$MT&Mo core-prim . scheme-report-environment)
        (g$6194$MT&Mo core-prim . quotient)
        (g$8015$MT&Mo core-prim . null-environment)
        (g$6195$MT&Mo core-prim . remainder)
        (g$6196$MT&Mo core-prim . modulo)
        (g$6191$MT&Mo core-prim . inexact->exact)
        (g$6198$MT&Mo core-prim . force)
        (g$6192$MT&Mo core-prim . exact->inexact)
        (g$11391$MT&Mo core-prim . exit)
        (g$11017$MT&Mo core-prim . command-line)
        (g$11390$MT&Mo core-prim . string-fill!)
        (g$11389$MT&Mo core-prim . string-set!)
        (g$11388$MT&Mo core-prim . set-cdr!)
        (g$11387$MT&Mo core-prim . set-car!)
        (g$5064$MT&Mo core-prim . remove)
        (g$5065$MT&Mo core-prim . remv)
        (g$5045$MT&Mo core-prim . remp)
        (g$5066$MT&Mo core-prim . remq)
        (g$5044$MT&Mo core-prim . partition)
        (g$5052$MT&Mo core-prim . memv)
        (g$5051$MT&Mo core-prim . memq)
        (g$5054$MT&Mo core-prim . memp)
        (g$5053$MT&Mo core-prim . member)
        (g$5058$MT&Mo core-prim . exists)
        (g$5057$MT&Mo core-prim . for-all)
        (g$5063$MT&Mo core-prim . fold-right)
        (g$5062$MT&Mo core-prim . fold-left)
        (g$5043$MT&Mo core-prim . find)
        (g$5046$MT&Mo core-prim . filter)
        (g$5061$MT&Mo core-prim . cons*)
        (g$5048$MT&Mo core-prim . assv)
        (g$5047$MT&Mo core-prim . assq)
        (g$5050$MT&Mo core-prim . assp)
        (g$5049$MT&Mo core-prim . assoc)
        (g$11386$MT&Mo core-prim . with-exception-handler)
        (g$11385$MT&Mo core-prim . raise-continuable)
        (g$11384$MT&Mo core-prim . raise)
        (g$8018$MT&Mo core-prim . eval)
        (g$8014$MT&Mo core-prim . environment)
        (g$6607$MT&Mo core-prim . make-enumeration)
        (g$6614$MT&Mo core-prim . enum-set=?)
        (g$6608$MT&Mo core-prim . enum-set-universe)
        (g$6615$MT&Mo core-prim . enum-set-union)
        (g$6613$MT&Mo core-prim . enum-set-subset?)
        (g$6619$MT&Mo core-prim . enum-set-projection)
        (g$6612$MT&Mo core-prim . enum-set-member?)
        (g$6616$MT&Mo core-prim . enum-set-intersection)
        (g$6609$MT&Mo core-prim . enum-set-indexer)
        (g$6617$MT&Mo core-prim . enum-set-difference)
        (g$6610$MT&Mo core-prim . enum-set-constructor)
        (g$6618$MT&Mo core-prim . enum-set-complement)
        (g$6611$MT&Mo core-prim . enum-set->list)
        (g$5917$MT&Mo core-prim . who-condition?)
        (g$5836$MT&Mo core-prim . warning?)
        (g$5875$MT&Mo core-prim . violation?)
        (g$5987$MT&Mo core-prim . undefined-violation?)
        (g$5972$MT&Mo core-prim . syntax-violation?)
        (g$5974$MT&Mo core-prim . syntax-violation-subform)
        (g$5973$MT&Mo core-prim . syntax-violation-form)
        (g$8036$MT&Mo core-prim . syntax-violation)
        (g$11383$MT&Mo core-prim . simple-conditions)
        (g$5849$MT&Mo core-prim . serious-condition?)
        (g$5931$MT&Mo core-prim . non-continuable-violation?)
        (g$5822$MT&Mo core-prim . message-condition?)
        (g$5915$MT&Mo core-prim . make-who-condition)
        (g$5835$MT&Mo core-prim . make-warning)
        (g$5874$MT&Mo core-prim . make-violation)
        (g$5986$MT&Mo core-prim . make-undefined-violation)
        (g$5969$MT&Mo core-prim . make-syntax-violation)
        (g$5848$MT&Mo core-prim . make-serious-condition)
        (g$5930$MT&Mo core-prim . make-non-continuable-violation)
        (g$5820$MT&Mo core-prim . make-message-condition)
        (g$5956$MT&Mo core-prim . make-lexical-violation)
        (g$5900$MT&Mo core-prim . make-irritants-condition)
        (g$5943$MT&Mo
          core-prim
          .
          make-implementation-restriction-violation)
        (g$5861$MT&Mo core-prim . make-error)
        (g$5887$MT&Mo core-prim . make-assertion-violation)
        (g$5957$MT&Mo core-prim . lexical-violation?)
        (g$5902$MT&Mo core-prim . irritants-condition?)
        (g$5944$MT&Mo core-prim . implementation-restriction-violation?)
        (g$5862$MT&Mo core-prim . error?)
        (g$5918$MT&Mo core-prim . condition-who)
        (g$11382$MT&Mo core-prim . condition-predicate)
        (g$5823$MT&Mo core-prim . condition-message)
        (g$5903$MT&Mo core-prim . condition-irritants)
        (g$11381$MT&Mo core-prim . condition-accessor)
        (g$11380$MT&Mo core-prim . condition)
        (g$5888$MT&Mo core-prim . assertion-violation?)
        (g$11379$MT&Mo core-prim . condition?)
        (g$11378$MT&Mo core-prim . utf32->string)
        (g$11377$MT&Mo core-prim . utf16->string)
        (g$11376$MT&Mo core-prim . utf8->string)
        (g$11375$MT&Mo core-prim . uint-list->bytevector)
        (g$11374$MT&Mo core-prim . u8-list->bytevector)
        (g$11373$MT&Mo core-prim . string->utf8)
        (g$11372$MT&Mo core-prim . string->utf32)
        (g$11371$MT&Mo core-prim . string->utf16)
        (g$11370$MT&Mo core-prim . sint-list->bytevector)
        (g$5659$MT&Mo core-prim . native-endianness)
        (g$5363$MT&Mo core-prim . bytevector?)
        (g$11369$MT&Mo core-prim . bytevector=?)
        (g$11368$MT&Mo core-prim . bytevector-uint-set!)
        (g$11367$MT&Mo core-prim . bytevector-uint-ref)
        (g$11366$MT&Mo core-prim . bytevector-u8-set!)
        (g$11365$MT&Mo core-prim . bytevector-u8-ref)
        (g$5680$MT&Mo core-prim . bytevector-u64-set!)
        (g$5676$MT&Mo core-prim . bytevector-u64-ref)
        (g$5682$MT&Mo core-prim . bytevector-u64-native-set!)
        (g$5678$MT&Mo core-prim . bytevector-u64-native-ref)
        (g$5672$MT&Mo core-prim . bytevector-u32-set!)
        (g$5668$MT&Mo core-prim . bytevector-u32-ref)
        (g$5674$MT&Mo core-prim . bytevector-u32-native-set!)
        (g$5670$MT&Mo core-prim . bytevector-u32-native-ref)
        (g$5664$MT&Mo core-prim . bytevector-u16-set!)
        (g$5660$MT&Mo core-prim . bytevector-u16-ref)
        (g$5666$MT&Mo core-prim . bytevector-u16-native-set!)
        (g$5662$MT&Mo core-prim . bytevector-u16-native-ref)
        (g$11364$MT&Mo core-prim . bytevector-sint-set!)
        (g$11363$MT&Mo core-prim . bytevector-sint-ref)
        (g$11362$MT&Mo core-prim . bytevector-s8-set!)
        (g$11361$MT&Mo core-prim . bytevector-s8-ref)
        (g$5681$MT&Mo core-prim . bytevector-s64-set!)
        (g$5677$MT&Mo core-prim . bytevector-s64-ref)
        (g$5683$MT&Mo core-prim . bytevector-s64-native-set!)
        (g$5679$MT&Mo core-prim . bytevector-s64-native-ref)
        (g$5673$MT&Mo core-prim . bytevector-s32-set!)
        (g$5669$MT&Mo core-prim . bytevector-s32-ref)
        (g$5675$MT&Mo core-prim . bytevector-s32-native-set!)
        (g$5671$MT&Mo core-prim . bytevector-s32-native-ref)
        (g$5665$MT&Mo core-prim . bytevector-s16-set!)
        (g$5661$MT&Mo core-prim . bytevector-s16-ref)
        (g$5667$MT&Mo core-prim . bytevector-s16-native-set!)
        (g$5663$MT&Mo core-prim . bytevector-s16-native-ref)
        (g$11360$MT&Mo core-prim . bytevector-length)
        (g$11359$MT&Mo core-prim . bytevector-ieee-single-set!)
        (g$11358$MT&Mo core-prim . bytevector-ieee-single-ref)
        (g$5686$MT&Mo core-prim . bytevector-ieee-single-native-set!)
        (g$5684$MT&Mo core-prim . bytevector-ieee-single-native-ref)
        (g$11357$MT&Mo core-prim . bytevector-ieee-double-set!)
        (g$11356$MT&Mo core-prim . bytevector-ieee-double-ref)
        (g$5687$MT&Mo core-prim . bytevector-ieee-double-native-set!)
        (g$5685$MT&Mo core-prim . bytevector-ieee-double-native-ref)
        (g$11355$MT&Mo core-prim . bytevector-fill!)
        (g$11354$MT&Mo core-prim . bytevector-copy!)
        (g$11353$MT&Mo core-prim . bytevector-copy)
        (g$11352$MT&Mo core-prim . bytevector->uint-list)
        (g$11351$MT&Mo core-prim . bytevector->u8-list)
        (g$11350$MT&Mo core-prim . bytevector->sint-list)
        (g$6177$MT&Mo core-prim . no-nans-violation?)
        (g$6164$MT&Mo core-prim . no-infinities-violation?)
        (g$6176$MT&Mo core-prim . make-no-nans-violation)
        (g$6163$MT&Mo core-prim . make-no-infinities-violation)
        (g$11349$MT&Mo core-prim . real->flonum)
        (g$6461$MT&Mo core-prim . flzero?)
        (g$6456$MT&Mo core-prim . fltruncate)
        (g$6446$MT&Mo core-prim . fltan)
        (g$6451$MT&Mo core-prim . flsqrt)
        (g$6444$MT&Mo core-prim . flsin)
        (g$6457$MT&Mo core-prim . flround)
        (g$6459$MT&Mo core-prim . flpositive?)
        (g$5368$MT&Mo core-prim . flonum?)
        (g$6463$MT&Mo core-prim . flodd?)
        (g$11348$MT&Mo core-prim . flnumerator)
        (g$6460$MT&Mo core-prim . flnegative?)
        (g$6443$MT&Mo core-prim . flnan?)
        (g$6437$MT&Mo core-prim . flmod0)
        (g$6436$MT&Mo core-prim . flmod)
        (g$6465$MT&Mo core-prim . flmin)
        (g$6464$MT&Mo core-prim . flmax)
        (g$6450$MT&Mo core-prim . fllog)
        (g$6440$MT&Mo core-prim . flinteger?)
        (g$6442$MT&Mo core-prim . flinfinite?)
        (g$6455$MT&Mo core-prim . flfloor)
        (g$6441$MT&Mo core-prim . flfinite?)
        (g$6453$MT&Mo core-prim . flexpt)
        (g$6452$MT&Mo core-prim . flexp)
        (g$6462$MT&Mo core-prim . fleven?)
        (g$6439$MT&Mo core-prim . fldiv0-and-mod0)
        (g$11347$MT&Mo core-prim . fldiv0)
        (g$6438$MT&Mo core-prim . fldiv-and-mod)
        (g$11346$MT&Mo core-prim . fldiv)
        (g$11345$MT&Mo core-prim . fldenominator)
        (g$6445$MT&Mo core-prim . flcos)
        (g$6454$MT&Mo core-prim . flceiling)
        (g$6449$MT&Mo core-prim . flatan)
        (g$6447$MT&Mo core-prim . flasin)
        (g$6448$MT&Mo core-prim . flacos)
        (g$6458$MT&Mo core-prim . flabs)
        (g$11344$MT&Mo core-prim . fl>?)
        (g$11343$MT&Mo core-prim . fl>=?)
        (g$11342$MT&Mo core-prim . fl=?)
        (g$11341$MT&Mo core-prim . fl<?)
        (g$11340$MT&Mo core-prim . fl<=?)
        (g$11339$MT&Mo core-prim . fl/)
        (g$11338$MT&Mo core-prim . fl-)
        (g$11337$MT&Mo core-prim . fl+)
        (g$11336$MT&Mo core-prim . fl*)
        (g$11335$MT&Mo core-prim . fixnum->flonum)
        (g$6358$MT&Mo core-prim . fxzero?)
        (g$11334$MT&Mo core-prim . fxxor)
        (g$6372$MT&Mo core-prim . fxrotate-bit-field)
        (g$11333$MT&Mo core-prim . fxreverse-bit-field)
        (g$6356$MT&Mo core-prim . fxpositive?)
        (g$6360$MT&Mo core-prim . fxodd?)
        (g$11332$MT&Mo core-prim . fxnot)
        (g$6357$MT&Mo core-prim . fxnegative?)
        (g$6353$MT&Mo core-prim . fxmod0)
        (g$6352$MT&Mo core-prim . fxmod)
        (g$6362$MT&Mo core-prim . fxmin)
        (g$6361$MT&Mo core-prim . fxmax)
        (g$11331$MT&Mo core-prim . fxlength)
        (g$11330$MT&Mo core-prim . fxior)
        (g$6366$MT&Mo core-prim . fxif)
        (g$11329$MT&Mo core-prim . fxfirst-bit-set)
        (g$6359$MT&Mo core-prim . fxeven?)
        (g$6355$MT&Mo core-prim . fxdiv0-and-mod0)
        (g$11328$MT&Mo core-prim . fxdiv0)
        (g$6354$MT&Mo core-prim . fxdiv-and-mod)
        (g$11327$MT&Mo core-prim . fxdiv)
        (g$6369$MT&Mo core-prim . fxcopy-bit-field)
        (g$6367$MT&Mo core-prim . fxcopy-bit)
        (g$11326$MT&Mo core-prim . fxbit-set?)
        (g$6368$MT&Mo core-prim . fxbit-field)
        (g$11325$MT&Mo core-prim . fxbit-count)
        (g$6371$MT&Mo core-prim . fxarithmetic-shift-right)
        (g$6370$MT&Mo core-prim . fxarithmetic-shift-left)
        (g$11324$MT&Mo core-prim . fxarithmetic-shift)
        (g$11323$MT&Mo core-prim . fxand)
        (g$11322$MT&Mo core-prim . fx>?)
        (g$11321$MT&Mo core-prim . fx>=?)
        (g$11320$MT&Mo core-prim . fx=?)
        (g$11319$MT&Mo core-prim . fx<?)
        (g$11318$MT&Mo core-prim . fx<=?)
        (g$6364$MT&Mo core-prim . fx-/carry)
        (g$11317$MT&Mo core-prim . fx-)
        (g$6365$MT&Mo core-prim . fx+/carry)
        (g$11316$MT&Mo core-prim . fx+)
        (g$6363$MT&Mo core-prim . fx*/carry)
        (g$11315$MT&Mo core-prim . fx*)
        (g$11314$MT&Mo core-prim . greatest-fixnum)
        (g$11313$MT&Mo core-prim . least-fixnum)
        (g$5369$MT&Mo core-prim . fixnum-width)
        (g$5367$MT&Mo core-prim . fixnum?)
        (g$6326$MT&Mo core-prim . bitwise-rotate-bit-field)
        (g$11312$MT&Mo core-prim . bitwise-reverse-bit-field)
        (g$11311$MT&Mo core-prim . bitwise-length)
        (g$6320$MT&Mo core-prim . bitwise-if)
        (g$11310$MT&Mo core-prim . bitwise-first-bit-set)
        (g$6323$MT&Mo core-prim . bitwise-copy-bit-field)
        (g$6321$MT&Mo core-prim . bitwise-copy-bit)
        (g$11309$MT&Mo core-prim . bitwise-bit-set?)
        (g$6322$MT&Mo core-prim . bitwise-bit-field)
        (g$11308$MT&Mo core-prim . bitwise-bit-count)
        (g$11307$MT&Mo core-prim . bitwise-xor)
        (g$11306$MT&Mo core-prim . bitwise-ior)
        (g$11305$MT&Mo core-prim . bitwise-and)
        (g$11304$MT&Mo core-prim . bitwise-not)
        (g$6325$MT&Mo core-prim . bitwise-arithmetic-shift-right)
        (g$6324$MT&Mo core-prim . bitwise-arithmetic-shift-left)
        (g$11303$MT&Mo core-prim . bitwise-arithmetic-shift)
        (g$5402$MT&Mo core-prim . zero?)
        (g$5362$MT&Mo core-prim . vector?)
        (g$11302$MT&Mo core-prim . vector-set!)
        (g$11301$MT&Mo core-prim . vector-ref)
        (g$5434$MT&Mo core-prim . vector-map)
        (g$11300$MT&Mo core-prim . vector-length)
        (g$5435$MT&Mo core-prim . vector-for-each)
        (g$5370$MT&Mo core-prim . vector-fill!)
        (g$11299$MT&Mo core-prim . vector->list)
        (g$11298$MT&Mo core-prim . vector)
        (g$11297$MT&Mo core-prim . values)
        (g$11296$MT&Mo core-prim . truncate)
        (g$11295$MT&Mo core-prim . tan)
        (g$5364$MT&Mo core-prim . symbol?)
        (g$5419$MT&Mo core-prim . symbol=?)
        (g$11294$MT&Mo core-prim . symbol->string)
        (g$11293$MT&Mo core-prim . substring)
        (g$11292$MT&Mo core-prim . string?)
        (g$5416$MT&Mo core-prim . string>?)
        (g$5418$MT&Mo core-prim . string>=?)
        (g$5414$MT&Mo core-prim . string=?)
        (g$5415$MT&Mo core-prim . string<?)
        (g$5417$MT&Mo core-prim . string<=?)
        (g$11291$MT&Mo core-prim . string-ref)
        (g$11290$MT&Mo core-prim . string-length)
        (g$5436$MT&Mo core-prim . string-for-each)
        (g$11289$MT&Mo core-prim . string-copy)
        (g$11288$MT&Mo core-prim . string-append)
        (g$11287$MT&Mo core-prim . string->symbol)
        (g$11286$MT&Mo core-prim . string->number)
        (g$11285$MT&Mo core-prim . string->list)
        (g$11284$MT&Mo core-prim . string)
        (g$11283$MT&Mo core-prim . sqrt)
        (g$11282$MT&Mo core-prim . sin)
        (g$11281$MT&Mo core-prim . round)
        (g$5371$MT&Mo core-prim . reverse)
        (g$11280$MT&Mo core-prim . real?)
        (g$11279$MT&Mo core-prim . real-valued?)
        (g$11278$MT&Mo core-prim . real-part)
        (g$5431$MT&Mo core-prim . rationalize)
        (g$11277$MT&Mo core-prim . rational?)
        (g$11276$MT&Mo core-prim . rational-valued?)
        (g$5366$MT&Mo core-prim . procedure?)
        (g$5400$MT&Mo core-prim . positive?)
        (g$11275$MT&Mo core-prim . pair?)
        (g$5404$MT&Mo core-prim . odd?)
        (g$11274$MT&Mo core-prim . numerator)
        (g$11273$MT&Mo core-prim . number?)
        (g$11272$MT&Mo core-prim . number->string)
        (g$11271$MT&Mo core-prim . null?)
        (g$11270$MT&Mo core-prim . not)
        (g$5401$MT&Mo core-prim . negative?)
        (g$11269$MT&Mo core-prim . nan?)
        (g$5406$MT&Mo core-prim . min)
        (g$5405$MT&Mo core-prim . max)
        (g$5059$MT&Mo core-prim . map)
        (g$11268$MT&Mo core-prim . make-vector)
        (g$11267$MT&Mo core-prim . make-string)
        (g$11266$MT&Mo core-prim . make-rectangular)
        (g$11265$MT&Mo core-prim . make-polar)
        (g$11264$MT&Mo core-prim . magnitude)
        (g$11263$MT&Mo core-prim . log)
        (g$11262$MT&Mo core-prim . list?)
        (g$5039$MT&Mo core-prim . list-tail)
        (g$5040$MT&Mo core-prim . list-ref)
        (g$5359$MT&Mo core-prim . list->vector)
        (g$5360$MT&Mo core-prim . list->string)
        (g$11261$MT&Mo core-prim . list)
        (g$11260$MT&Mo core-prim . length)
        (g$5408$MT&Mo core-prim . lcm)
        (g$11259$MT&Mo core-prim . integer?)
        (g$11258$MT&Mo core-prim . integer-valued?)
        (g$11257$MT&Mo core-prim . integer->char)
        (g$11256$MT&Mo core-prim . infinite?)
        (g$11255$MT&Mo core-prim . inexact?)
        (g$11254$MT&Mo core-prim . inexact)
        (g$11253$MT&Mo core-prim . imag-part)
        (g$5407$MT&Mo core-prim . gcd)
        (g$5060$MT&Mo core-prim . for-each)
        (g$11252$MT&Mo core-prim . floor)
        (g$11251$MT&Mo core-prim . finite?)
        (g$11250$MT&Mo core-prim . expt)
        (g$11249$MT&Mo core-prim . exp)
        (g$11248$MT&Mo core-prim . exact?)
        (g$11247$MT&Mo core-prim . exact-integer-sqrt)
        (g$11246$MT&Mo core-prim . exact)
        (g$5403$MT&Mo core-prim . even?)
        (g$11245$MT&Mo core-prim . error)
        (g$11244$MT&Mo core-prim . eqv?)
        (g$11243$MT&Mo core-prim . equal?)
        (g$11242$MT&Mo core-prim . eq?)
        (g$11241$MT&Mo core-prim . dynamic-wind)
        (g$5358$MT&Mo core-prim . div0-and-mod0)
        (g$5356$MT&Mo core-prim . mod0)
        (g$11240$MT&Mo core-prim . div0)
        (g$5357$MT&Mo core-prim . div-and-mod)
        (g$5355$MT&Mo core-prim . mod)
        (g$11239$MT&Mo core-prim . div)
        (g$11238$MT&Mo core-prim . denominator)
        (g$11237$MT&Mo core-prim . cos)
        (g$11236$MT&Mo core-prim . cons)
        (g$11235$MT&Mo core-prim . complex?)
        (g$5361$MT&Mo core-prim . char?)
        (g$5428$MT&Mo core-prim . char>?)
        (g$5430$MT&Mo core-prim . char>=?)
        (g$5426$MT&Mo core-prim . char=?)
        (g$5427$MT&Mo core-prim . char<?)
        (g$5429$MT&Mo core-prim . char<=?)
        (g$11234$MT&Mo core-prim . char->integer)
        (g$11233$MT&Mo core-prim . ceiling)
        (g$11232$MT&Mo core-prim . call-with-values)
        (g$11231$MT&Mo core-prim . call/cc)
        (g$11230$MT&Mo core-prim . call-with-current-continuation)
        (g$5399$MT&Mo core-prim . cddddr)
        (g$5398$MT&Mo core-prim . cdddar)
        (g$5397$MT&Mo core-prim . cddadr)
        (g$5396$MT&Mo core-prim . cddaar)
        (g$5395$MT&Mo core-prim . cdaddr)
        (g$5394$MT&Mo core-prim . cdadar)
        (g$5393$MT&Mo core-prim . cdaadr)
        (g$5392$MT&Mo core-prim . cdaaar)
        (g$5391$MT&Mo core-prim . cadddr)
        (g$5390$MT&Mo core-prim . caddar)
        (g$5389$MT&Mo core-prim . cadadr)
        (g$5388$MT&Mo core-prim . cadaar)
        (g$5387$MT&Mo core-prim . caaddr)
        (g$5386$MT&Mo core-prim . caadar)
        (g$5385$MT&Mo core-prim . caaadr)
        (g$5384$MT&Mo core-prim . caaaar)
        (g$5383$MT&Mo core-prim . cdddr)
        (g$5382$MT&Mo core-prim . cddar)
        (g$5381$MT&Mo core-prim . cdadr)
        (g$5380$MT&Mo core-prim . cdaar)
        (g$5379$MT&Mo core-prim . caddr)
        (g$5378$MT&Mo core-prim . cadar)
        (g$5377$MT&Mo core-prim . caadr)
        (g$5376$MT&Mo core-prim . caaar)
        (g$5375$MT&Mo core-prim . cddr)
        (g$5374$MT&Mo core-prim . cdar)
        (g$5373$MT&Mo core-prim . cadr)
        (g$5372$MT&Mo core-prim . caar)
        (g$11229$MT&Mo core-prim . cdr)
        (g$11228$MT&Mo core-prim . car)
        (g$5365$MT&Mo core-prim . boolean?)
        (g$5420$MT&Mo core-prim . boolean=?)
        (g$11227$MT&Mo core-prim . atan)
        (g$11226$MT&Mo core-prim . assertion-violation)
        (g$11225$MT&Mo core-prim . asin)
        (g$11224$MT&Mo core-prim . apply)
        (g$11223$MT&Mo core-prim . append)
        (g$11222$MT&Mo core-prim . angle)
        (g$11221$MT&Mo core-prim . acos)
        (g$11220$MT&Mo core-prim . abs)
        (g$11219$MT&Mo core-prim . /)
        (g$11218$MT&Mo core-prim . *)
        (g$11217$MT&Mo core-prim . -)
        (g$11216$MT&Mo core-prim . +)
        (g$11215$MT&Mo core-prim . >=)
        (g$11214$MT&Mo core-prim . >)
        (g$11213$MT&Mo core-prim . =)
        (g$11212$MT&Mo core-prim . <=)
        (g$11211$MT&Mo core-prim . <)
        (g$11210$MT&Mo core-prim . make-record-printer)
        (g$11209$MT&Mo core-prim . eqv-hash)
        (g$11208$MT&Mo core-prim . reverse!)
        (g$11207$MT&Mo core-prim . deserialize-port)
        (g$11206$MT&Mo core-prim . serialize-port)
        (g$6584$MT&Mo core-prim . enum-set?)
        (g$6197$MT&Mo core-prim . make-promise)
        (g$11020$MT&Mo core-prim . load/unload)
        (g$11019$MT&Mo core-prim . load/args)
        (g$6693$MT&Mo core-prim . printf)
        (g$6694$MT&Mo core-prim . fprintf)
        (g$6695$MT&Mo core-prim . format)
        (g$11205$MT&Mo core-prim . procedure-form)
        (g$11204$MT&Mo core-prim . procedure-environment)
        (g$11203$MT&Mo core-prim . procedure-name)
        (g$11202$MT&Mo core-prim . procedure-arity)
        (g$11201$MT&Mo core-prim . gc-collect)
        (g$11200$MT&Mo core-prim . typeof)
        (g$11199$MT&Mo core-prim . clr-type?)
        (g$11198$MT&Mo core-prim . get-clr-type)
        (g$11197$MT&Mo core-prim . get-command-line)
        (g$11196$MT&Mo core-prim . vector-append)
        (g$11195$MT&Mo core-prim . vector-filter)
        (g$11194$MT&Mo core-prim . vector-reverse!)
        (g$11193$MT&Mo core-prim . vector-contains?)
        (g$11192$MT&Mo core-prim . vector-index-of)
        (g$11191$MT&Mo core-prim . vector-copy)
        (g$11190$MT&Mo core-prim . vector-binary-search)
        (g$11189$MT&Mo core-prim . string-ci-compare)
        (g$11188$MT&Mo core-prim . string-compare)
        (g$11187$MT&Mo core-prim . string-format)
        (g$11016$MT&Mo core-prim . trace-printer)
        (g$11186$MT&Mo core-prim . make-traced-procedure)
        (g$6715$MT&Mo core-prim . make-traced-macro)
        (g$8032$MT&Mo core-prim . assertion-error)
        (g$11185$MT&Mo core-prim . time-it)
        (g$6722$MT&Mo core-prim . make-parameter)
        (g$11184$MT&Mo core-prim . library-locator)
        (g$11183$MT&Mo core-prim . get-library-paths)
        (g$11182$MT&Mo core-prim . open-tcp-input/output-port)
        (g$11181$MT&Mo core-prim . hashtable-for-each)
        (g$11180$MT&Mo core-prim . hashtable-map)
        (g$8010$MT&Mo core-prim . environment-bindings)
        (g$8013$MT&Mo core-prim . environment-symbols)
        (g$8009$MT&Mo core-prim . interaction-environment-symbols)
        (g$11179$MT&Mo core-prim . optimization-level)
        (g$7341$MT&Mo core-prim . library-path)
        (g$7719$MT&Mo core-prim . make-compile-time-value)
        (g$8019$MT&Mo core-prim . expand->core)
        (g$8017$MT&Mo core-prim . expand)
        (g$7038$MT&Mo core-prim . convert->cps)
        (g$7362$MT&Mo core-prim . installed-libraries)
        (g$7353$MT&Mo core-prim . uninstall-library)
        (g$6797$MT&Mo core-prim . pretty-width)
        (g$6799$MT&Mo core-prim . pretty-print)
        (g$11178$MT&Mo $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11177$MT&Mo $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11176$MT&Mo $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11175$MT&Mo $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11174$MT&Mo $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11173$MT&Mo
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11172$MT&Mo
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11171$MT&Mo
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11170$MT&Mo
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11169$MT&Mo $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11168$MT&Mo
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11167$MT&Mo $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11166$MT&Mo $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11165$MT&Mo $core-rtd &i/o-rtd &i/o-rcd)
        (g$11164$MT&Mo
          $core-rtd
          &non-continuable-rtd
          &non-continuable-rcd)
        (g$11163$MT&Mo $core-rtd &undefined-rtd &undefined-rcd)
        (g$11162$MT&Mo $core-rtd &syntax-rtd &syntax-rcd)
        (g$11161$MT&Mo $core-rtd &lexical-rtd &lexical-rcd)
        (g$11160$MT&Mo
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11159$MT&Mo $core-rtd &who-rtd &who-rcd)
        (g$11158$MT&Mo $core-rtd &irritants-rtd &irritants-rcd)
        (g$11157$MT&Mo $core-rtd &assertion-rtd &assertion-rcd)
        (g$11156$MT&Mo $core-rtd &violation-rtd &violation-rcd)
        (g$11155$MT&Mo $core-rtd &error-rtd &error-rcd)
        (g$11154$MT&Mo $core-rtd &serious-rtd &serious-rcd)
        (g$11153$MT&Mo $core-rtd &warning-rtd &warning-rcd)
        (g$11152$MT&Mo $core-rtd &message-rtd &message-rcd)
        (g$11151$MT&Mo $core-rtd &condition-rtd &condition-rcd)
        (g$11150$MT&Mo macro . define-condition-type)
        (g$11149$MT&Mo macro . define-enumeration)
        (g$11148$MT&Mo macro . define-record-type)
        (g$11147$MT&Mo macro . parent-rtd)
        (g$11146$MT&Mo macro . nongenerative)
        (g$11145$MT&Mo macro . opaque)
        (g$11144$MT&Mo macro . sealed)
        (g$11143$MT&Mo macro . protocol)
        (g$11142$MT&Mo macro . parent)
        (g$11141$MT&Mo macro . immutable)
        (g$11140$MT&Mo macro . mutable)
        (g$11139$MT&Mo macro . fields)
        (g$11138$MT&Mo macro . error-handling-mode)
        (g$11137$MT&Mo macro . file-options)
        (g$11136$MT&Mo macro . buffer-mode)
        (g$11135$MT&Mo macro . eol-style)
        (g$11134$MT&Mo macro . guard)
        (g$11133$MT&Mo macro . trace-letrec-syntax)
        (g$11132$MT&Mo macro . trace-let-syntax)
        (g$11131$MT&Mo macro . trace-define-syntax)
        (g$11130$MT&Mo macro . trace-define)
        (g$11129$MT&Mo macro . trace-lambda)
        (g$11128$MT&Mo macro . unsyntax-splicing)
        (g$11127$MT&Mo macro . unsyntax)
        (g$11126$MT&Mo macro . unquote-splicing)
        (g$11125$MT&Mo macro . unquote)
        (g$11124$MT&Mo macro . _)
        (g$11123$MT&Mo macro . else)
        (g$11122$MT&Mo macro . =>)
        (g$11121$MT&Mo macro . ...)
        (g$11120$MT&Mo macro . assert)
        (g$11119$MT&Mo macro . endianness)
        (g$11118$MT&Mo macro . delay)
        (g$11117$MT&Mo macro . time)
        (g$11116$MT&Mo macro . or)
        (g$11115$MT&Mo macro . and)
        (g$11114$MT&Mo macro . do)
        (g$11113$MT&Mo macro . cond)
        (g$11112$MT&Mo macro . let*)
        (g$11111$MT&Mo macro . let)
        (g$11110$MT&Mo macro . identifier-syntax)
        (g$11109$MT&Mo macro . with-syntax)
        (g$11108$MT&Mo macro . quasisyntax)
        (g$11107$MT&Mo macro . quasiquote)
        (g$11106$MT&Mo macro . syntax-rules)
        (g$11105$MT&Mo macro . include-into)
        (g$11104$MT&Mo macro . include)
        (g$11103$MT&Mo macro . define-struct)
        (g$11102$MT&Mo macro . let-values)
        (g$11101$MT&Mo macro . let*-values)
        (g$11100$MT&Mo core-macro . record-constructor-descriptor)
        (g$11099$MT&Mo core-macro . record-type-descriptor)
        (g$11098$MT&Mo core-macro . fluid-let-syntax)
        (g$11097$MT&Mo macro . case)
        (g$11096$MT&Mo macro . parameterize)
        (g$11095$MT&Mo macro . unless)
        (g$11094$MT&Mo macro . when)
        (g$11093$MT&Mo core-macro . if)
        (g$11092$MT&Mo core-macro . letrec*)
        (g$11091$MT&Mo core-macro . letrec)
        (g$11090$MT&Mo core-macro . type-descriptor)
        (g$11089$MT&Mo core-macro . case-lambda)
        (g$11088$MT&Mo core-macro . lambda)
        (g$11087$MT&Mo core-macro . syntax)
        (g$11086$MT&Mo core-macro . syntax-case)
        (g$11085$MT&Mo core-macro . quote)
        (g$11084$MT&Mo core-macro . foreign-call)
        (g$11083$MT&Mo letrec-syntax)
        (g$11082$MT&Mo let-syntax)
        (g$11081$MT&Mo set!)
        (g$11080$MT&Mo export)
        (g$11079$MT&Mo import)
        (g$11078$MT&Mo library)
        (g$11077$MT&Mo begin)
        (g$11076$MT&Mo module)
        (g$11075$MT&Mo define-syntax)
        (g$11074$MT&Mo define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$9005$MT&Mo
      'g$11582$MT&Mo
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$11521$MT&Mo)
        (eval-core . g$11520$MT&Mo)
        (set-symbol-value! . g$11518$MT&Mo)
        (symbol-value . g$11517$MT&Mo)
        (gensym . g$11514$MT&Mo)
        (void . g$11513$MT&Mo))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$13293$MT&Mo
     g$trace-printer$13358$MT&Mo
     (g$make-parameter$8174$MT&Mo g$pretty-print$8373$MT&Mo))
   (g$command-line$13294$MT&Mo
     g$command-line$13359$MT&Mo
     (g$make-parameter$8174$MT&Mo (get-command-line)))
   (g$local-library-path$13295$MT&Mo
     g$local-library-path$13360$MT&Mo
     (case-lambda
       ((g$filename$13309$MT&Mo)
        (cons
          (g$get-directory-name$6521$MT&Mo g$filename$13309$MT&Mo)
          (g$library-path$8989$MT&Mo)))))
   (g$load/args$13296$MT&Mo
     g$load/args$13361$MT&Mo
     (case-lambda
       ((g$filename$13310$MT&Mo . g$args$13311$MT&Mo)
        (begin
          (apply
            g$load-r6rs-top-level$13306$MT&Mo
            g$filename$13310$MT&Mo
            'load
            g$args$13311$MT&Mo)
          (void)))))
   (g$load/unload$13297$MT&Mo
     g$load/unload$13362$MT&Mo
     (case-lambda
       ((g$filename$13312$MT&Mo)
        ((case-lambda
           ((g$libs$13313$MT&Mo)
            (begin
              (g$load$13298$MT&Mo g$filename$13312$MT&Mo)
              (g$for-each$5754$MT&Mo
                (case-lambda
                  ((g$lib$13314$MT&Mo)
                   (if (not (g$memq$5745$MT&Mo
                              g$lib$13314$MT&Mo
                              g$libs$13313$MT&Mo))
                     (g$uninstall-library$9001$MT&Mo g$lib$13314$MT&Mo)
                     (void))))
                (g$installed-libraries$9010$MT&Mo)))))
         (g$installed-libraries$9010$MT&Mo)))))
   (g$load$13298$MT&Mo
     g$load$13363$MT&Mo
     (case-lambda
       ((g$filename$13315$MT&Mo)
        (begin
          (apply
            g$load-r6rs-top-level$13306$MT&Mo
            g$filename$13315$MT&Mo
            'load
            (cdr (g$command-line$13294$MT&Mo)))
          (void)))))
   (g$ironscheme-build$13299$MT&Mo
     g$ironscheme-build$13364$MT&Mo
     (case-lambda
       (() (g$ironscheme-build$13299$MT&Mo '#f))
       ((g$cps?$13316$MT&Mo)
        (begin
          (g$call-with-output-file$7834$MT&Mo
            '"build-options.ss"
            (case-lambda
              ((g$p$13317$MT&Mo)
               (begin
                 (write
                   (list 'define-option 'cps-mode g$cps?$13316$MT&Mo)
                   g$p$13317$MT&Mo)
                 (write
                   (list
                     'define-option
                     'if-wants-letrec*
                     (not g$cps?$13316$MT&Mo))
                   g$p$13317$MT&Mo)
                 (g$newline$7835$MT&Mo g$p$13317$MT&Mo)))))
          (g$load$13298$MT&Mo '"ironscheme-buildscript.ss")))))
   (g$foreground-color$13300$MT&Mo
     g$foreground-color$13365$MT&Mo
     (case-lambda
       (() (clr-call-internal 'console 'get_foregroundcolor '()))
       ((g$color$13318$MT&Mo)
        (clr-call-internal
          'console
          'set_foregroundcolor
          '()
          g$color$13318$MT&Mo))))
   (g$system-exception?$13301$MT&Mo
     g$system-exception?$13366$MT&Mo
     (case-lambda
       ((g$e$13319$MT&Mo)
        (clr-is-internal 'SystemException g$e$13319$MT&Mo))))
   (g$eval-top-level$13302$MT&Mo
     g$eval-top-level$13367$MT&Mo
     (case-lambda
       ((g$x$13320$MT&Mo)
        (call/cc
          (case-lambda
            ((g$k$13321$MT&Mo)
             (with-exception-handler
               (case-lambda
                 ((g$e$13322$MT&Mo)
                  ((case-lambda
                     ((g$serious?$13323$MT&Mo)
                      (begin
                        ((case-lambda
                           ((g$foreground-color$13328$MT&Mo
                              g$current-output-port$13329$MT&Mo
                              g$foreground-color$13330$MT&Mo
                              g$current-output-port$13331$MT&Mo)
                            ((case-lambda
                               ((g$swap$13332$MT&Mo)
                                (dynamic-wind
                                  g$swap$13332$MT&Mo
                                  (case-lambda
                                    (()
                                     (begin
                                       (if g$serious?$13323$MT&Mo
                                         (display
                                           '"Unhandled exception during evaluation:
")
                                         (void))
                                       (display g$e$13322$MT&Mo)
                                       (g$newline$7835$MT&Mo))))
                                  g$swap$13332$MT&Mo)))
                             (case-lambda
                               (()
                                (begin
                                  ((case-lambda
                                     ((g$t$13333$MT&Mo)
                                      (begin
                                        (g$foreground-color$13328$MT&Mo
                                          g$foreground-color$13330$MT&Mo)
                                        (set! g$foreground-color$13330$MT&Mo
                                          g$t$13333$MT&Mo))))
                                   (g$foreground-color$13328$MT&Mo))
                                  ((case-lambda
                                     ((g$t$13334$MT&Mo)
                                      (begin
                                        (g$current-output-port$13329$MT&Mo
                                          g$current-output-port$13331$MT&Mo)
                                        (set! g$current-output-port$13331$MT&Mo
                                          g$t$13334$MT&Mo))))
                                   (g$current-output-port$13329$MT&Mo))))))))
                         g$foreground-color$13300$MT&Mo
                         current-output-port
                         (if g$serious?$13323$MT&Mo 'red 'yellow)
                         (current-error-port))
                        (if g$serious?$13323$MT&Mo
                          (g$k$13321$MT&Mo)
                          (void)))))
                   ((case-lambda
                      ((g$t$13335$MT&Mo)
                       (if g$t$13335$MT&Mo
                         g$t$13335$MT&Mo
                         (begin
                           '#f
                           (g$system-exception?$13301$MT&Mo
                             g$e$13322$MT&Mo)))))
                    (g$serious-condition?$7070$MT&Mo
                      g$e$13322$MT&Mo)))))
               (case-lambda
                 (()
                  (g$eval$13266$MT&Mo
                    g$x$13320$MT&Mo
                    (g$interaction-environment$13291$MT&Mo)))))))))))
   (g$compile-system-libraries$13303$MT&Mo
     g$compile-system-libraries$13368$MT&Mo
     (case-lambda
       (()
        (g$eval-top-level$13302$MT&Mo
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$13304$MT&Mo
     g$compile$13369$MT&Mo
     (case-lambda
       ((g$filename$13336$MT&Mo)
        (g$load-r6rs-top-level$13306$MT&Mo
          g$filename$13336$MT&Mo
          'compile))))
   (g$compile->closure$13305$MT&Mo
     g$compile->closure$13370$MT&Mo
     (case-lambda
       ((g$filename$13337$MT&Mo)
        (g$load-r6rs-top-level$13306$MT&Mo
          g$filename$13337$MT&Mo
          'closure))))
   (g$load-r6rs-top-level$13306$MT&Mo
     g$load-r6rs-top-level$13371$MT&Mo
     (case-lambda
       ((g$filename$13338$MT&Mo g$how$13339$MT&Mo . g$args$13340$MT&Mo)
        ((case-lambda
           ((g$library-path$13343$MT&Mo g$library-path$13344$MT&Mo)
            ((case-lambda
               ((g$swap$13345$MT&Mo)
                (dynamic-wind
                  g$swap$13345$MT&Mo
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$13346$MT&Mo)
                         ((case-lambda
                            ((g$t$13347$MT&Mo)
                             (if (eqv? g$t$13347$MT&Mo 'closure)
                               (g$pre-compile-r6rs-top-level$13289$MT&Mo
                                 g$x*$13346$MT&Mo)
                               (if (eqv? g$t$13347$MT&Mo 'load)
                                 ((case-lambda
                                    ((g$command-line$13350$MT&Mo
                                       g$command-line$13351$MT&Mo)
                                     ((case-lambda
                                        ((g$swap$13352$MT&Mo)
                                         (dynamic-wind
                                           g$swap$13352$MT&Mo
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$13288$MT&Mo
                                                 g$x*$13346$MT&Mo))))
                                           g$swap$13352$MT&Mo)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$13353$MT&Mo)
                                             (begin
                                               (g$command-line$13350$MT&Mo
                                                 g$command-line$13351$MT&Mo)
                                               (set! g$command-line$13351$MT&Mo
                                                 g$t$13353$MT&Mo))))
                                          (g$command-line$13350$MT&Mo)))))))
                                  g$command-line$13294$MT&Mo
                                  (cons
                                    g$filename$13338$MT&Mo
                                    (g$map$5753$MT&Mo
                                      (case-lambda
                                        ((g$x$13354$MT&Mo)
                                         (g$format$8009$MT&Mo
                                           '"~a"
                                           g$x$13354$MT&Mo)))
                                      g$args$13340$MT&Mo)))
                                 (if (eqv? g$t$13347$MT&Mo 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$13288$MT&Mo
                                       g$x*$13346$MT&Mo)
                                     (g$serialize-all$8993$MT&Mo
                                       serialize-library
                                       g$compile-core-expr$8741$MT&Mo))
                                   (if '#f '#f (void)))))))
                          g$how$13339$MT&Mo)))
                      (g$with-input-from-file$7831$MT&Mo
                        g$filename$13338$MT&Mo
                        (case-lambda
                          (()
                           ((letrec ((g$f$13355$MT&Mo
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$13356$MT&Mo)
                                              (if (eof-object?
                                                    g$x$13356$MT&Mo)
                                                '()
                                                (cons
                                                  g$x$13356$MT&Mo
                                                  (g$f$13355$MT&Mo)))))
                                           (read-annotated))))))
                              g$f$13355$MT&Mo))))))))
                  g$swap$13345$MT&Mo)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$13357$MT&Mo)
                    (begin
                      (g$library-path$13343$MT&Mo
                        g$library-path$13344$MT&Mo)
                      (set! g$library-path$13344$MT&Mo
                        g$t$13357$MT&Mo))))
                 (g$library-path$13343$MT&Mo)))))))
         g$library-path$8989$MT&Mo
         (g$local-library-path$13295$MT&Mo g$filename$13338$MT&Mo)))))
   (g$fo$13307$MT&Mo
     g$fo$13372$MT&Mo
     (g$make-enumeration$7971$MT&Mo '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$8994$MT&Mo
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$13308$MT&Mo)
         (if (g$serious-condition?$7070$MT&Mo g$ex$13308$MT&Mo)
           (raise g$ex$13308$MT&Mo)
           (begin (display g$ex$13308$MT&Mo) (g$newline$7835$MT&Mo))))))
    (set-symbol-value! 'load g$load$13298$MT&Mo)
    (set-symbol-value! 'compile g$compile$13304$MT&Mo)
    (set-symbol-value! 'compile->closure g$compile->closure$13305$MT&Mo)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$13302$MT&Mo)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$13257$MT&Mo)
    (set-symbol-value! 'expanded2core g$expanded->core$8740$MT&Mo)
    (set-symbol-value! 'trace-printer g$trace-printer$13293$MT&Mo)
    (set-symbol-value! 'convert->cps g$convert->cps$8691$MT&Mo)
    (set-symbol-value! 'assertion-violation assertion-violation)
    (set-symbol-value! 'raise raise)
    (g$file-options-constructor$8175$MT&Mo
      (g$enum-set-constructor$7974$MT&Mo g$fo$13307$MT&Mo))
    (g$library-path$8989$MT&Mo (get-library-paths))
    (g$library-extensions$8990$MT&Mo
      (cons '".ironscheme.sls" (g$library-extensions$8990$MT&Mo)))))

